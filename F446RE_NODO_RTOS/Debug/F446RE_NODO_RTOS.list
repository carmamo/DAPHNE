
F446RE_NODO_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f708  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  0800f8d8  0800f8d8  0001f8d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fb88  0800fb88  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800fb88  0800fb88  0001fb88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fb90  0800fb90  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fb90  0800fb90  0001fb90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fb94  0800fb94  0001fb94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800fb98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005708  20000078  0800fc10  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005780  0800fc10  00025780  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000287c6  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000051a0  00000000  00000000  0004886e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020f0  00000000  00000000  0004da10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ef0  00000000  00000000  0004fb00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007531  00000000  00000000  000519f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028ede  00000000  00000000  00058f21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e703a  00000000  00000000  00081dff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00168e39  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000090a0  00000000  00000000  00168e8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f8c0 	.word	0x0800f8c0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	0800f8c0 	.word	0x0800f8c0

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002e4:	f000 b974 	b.w	80005d0 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468e      	mov	lr, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14d      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030e:	428a      	cmp	r2, r1
 8000310:	4694      	mov	ip, r2
 8000312:	d969      	bls.n	80003e8 <__udivmoddi4+0xe8>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b152      	cbz	r2, 8000330 <__udivmoddi4+0x30>
 800031a:	fa01 f302 	lsl.w	r3, r1, r2
 800031e:	f1c2 0120 	rsb	r1, r2, #32
 8000322:	fa20 f101 	lsr.w	r1, r0, r1
 8000326:	fa0c fc02 	lsl.w	ip, ip, r2
 800032a:	ea41 0e03 	orr.w	lr, r1, r3
 800032e:	4094      	lsls	r4, r2
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	0c21      	lsrs	r1, r4, #16
 8000336:	fbbe f6f8 	udiv	r6, lr, r8
 800033a:	fa1f f78c 	uxth.w	r7, ip
 800033e:	fb08 e316 	mls	r3, r8, r6, lr
 8000342:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000346:	fb06 f107 	mul.w	r1, r6, r7
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000356:	f080 811f 	bcs.w	8000598 <__udivmoddi4+0x298>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 811c 	bls.w	8000598 <__udivmoddi4+0x298>
 8000360:	3e02      	subs	r6, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a5b      	subs	r3, r3, r1
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb3 f0f8 	udiv	r0, r3, r8
 800036c:	fb08 3310 	mls	r3, r8, r0, r3
 8000370:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000374:	fb00 f707 	mul.w	r7, r0, r7
 8000378:	42a7      	cmp	r7, r4
 800037a:	d90a      	bls.n	8000392 <__udivmoddi4+0x92>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000384:	f080 810a 	bcs.w	800059c <__udivmoddi4+0x29c>
 8000388:	42a7      	cmp	r7, r4
 800038a:	f240 8107 	bls.w	800059c <__udivmoddi4+0x29c>
 800038e:	4464      	add	r4, ip
 8000390:	3802      	subs	r0, #2
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	1be4      	subs	r4, r4, r7
 8000398:	2600      	movs	r6, #0
 800039a:	b11d      	cbz	r5, 80003a4 <__udivmoddi4+0xa4>
 800039c:	40d4      	lsrs	r4, r2
 800039e:	2300      	movs	r3, #0
 80003a0:	e9c5 4300 	strd	r4, r3, [r5]
 80003a4:	4631      	mov	r1, r6
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0xc2>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80ef 	beq.w	8000592 <__udivmoddi4+0x292>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x160>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xd4>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80f9 	bhi.w	80005c6 <__udivmoddi4+0x2c6>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0303 	sbc.w	r3, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	469e      	mov	lr, r3
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0e0      	beq.n	80003a4 <__udivmoddi4+0xa4>
 80003e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003e6:	e7dd      	b.n	80003a4 <__udivmoddi4+0xa4>
 80003e8:	b902      	cbnz	r2, 80003ec <__udivmoddi4+0xec>
 80003ea:	deff      	udf	#255	; 0xff
 80003ec:	fab2 f282 	clz	r2, r2
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	f040 8092 	bne.w	800051a <__udivmoddi4+0x21a>
 80003f6:	eba1 010c 	sub.w	r1, r1, ip
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2601      	movs	r6, #1
 8000404:	0c20      	lsrs	r0, r4, #16
 8000406:	fbb1 f3f7 	udiv	r3, r1, r7
 800040a:	fb07 1113 	mls	r1, r7, r3, r1
 800040e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000412:	fb0e f003 	mul.w	r0, lr, r3
 8000416:	4288      	cmp	r0, r1
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x12c>
 800041a:	eb1c 0101 	adds.w	r1, ip, r1
 800041e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x12a>
 8000424:	4288      	cmp	r0, r1
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2c0>
 800042a:	4643      	mov	r3, r8
 800042c:	1a09      	subs	r1, r1, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1110 	mls	r1, r7, r0, r1
 8000438:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x156>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x154>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2ca>
 8000454:	4608      	mov	r0, r1
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800045e:	e79c      	b.n	800039a <__udivmoddi4+0x9a>
 8000460:	f1c6 0720 	rsb	r7, r6, #32
 8000464:	40b3      	lsls	r3, r6
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa20 f407 	lsr.w	r4, r0, r7
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	431c      	orrs	r4, r3
 8000478:	40f9      	lsrs	r1, r7
 800047a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047e:	fa00 f306 	lsl.w	r3, r0, r6
 8000482:	fbb1 f8f9 	udiv	r8, r1, r9
 8000486:	0c20      	lsrs	r0, r4, #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fb09 1118 	mls	r1, r9, r8, r1
 8000490:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000494:	fb08 f00e 	mul.w	r0, r8, lr
 8000498:	4288      	cmp	r0, r1
 800049a:	fa02 f206 	lsl.w	r2, r2, r6
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b8>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2bc>
 80004ac:	4288      	cmp	r0, r1
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2bc>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1a09      	subs	r1, r1, r0
 80004ba:	b2a4      	uxth	r4, r4
 80004bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c0:	fb09 1110 	mls	r1, r9, r0, r1
 80004c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004cc:	458e      	cmp	lr, r1
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1e2>
 80004d0:	eb1c 0101 	adds.w	r1, ip, r1
 80004d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2b4>
 80004da:	458e      	cmp	lr, r1
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2b4>
 80004de:	3802      	subs	r0, #2
 80004e0:	4461      	add	r1, ip
 80004e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004e6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ea:	eba1 010e 	sub.w	r1, r1, lr
 80004ee:	42a1      	cmp	r1, r4
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46a6      	mov	lr, r4
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x2a4>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x2a0>
 80004f8:	b15d      	cbz	r5, 8000512 <__udivmoddi4+0x212>
 80004fa:	ebb3 0208 	subs.w	r2, r3, r8
 80004fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000502:	fa01 f707 	lsl.w	r7, r1, r7
 8000506:	fa22 f306 	lsr.w	r3, r2, r6
 800050a:	40f1      	lsrs	r1, r6
 800050c:	431f      	orrs	r7, r3
 800050e:	e9c5 7100 	strd	r7, r1, [r5]
 8000512:	2600      	movs	r6, #0
 8000514:	4631      	mov	r1, r6
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	40d8      	lsrs	r0, r3
 8000520:	fa0c fc02 	lsl.w	ip, ip, r2
 8000524:	fa21 f303 	lsr.w	r3, r1, r3
 8000528:	4091      	lsls	r1, r2
 800052a:	4301      	orrs	r1, r0
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb3 f0f7 	udiv	r0, r3, r7
 8000538:	fb07 3610 	mls	r6, r7, r0, r3
 800053c:	0c0b      	lsrs	r3, r1, #16
 800053e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000542:	fb00 f60e 	mul.w	r6, r0, lr
 8000546:	429e      	cmp	r6, r3
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x260>
 800054e:	eb1c 0303 	adds.w	r3, ip, r3
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b8>
 8000558:	429e      	cmp	r6, r3
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b8>
 800055c:	3802      	subs	r0, #2
 800055e:	4463      	add	r3, ip
 8000560:	1b9b      	subs	r3, r3, r6
 8000562:	b289      	uxth	r1, r1
 8000564:	fbb3 f6f7 	udiv	r6, r3, r7
 8000568:	fb07 3316 	mls	r3, r7, r6, r3
 800056c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000570:	fb06 f30e 	mul.w	r3, r6, lr
 8000574:	428b      	cmp	r3, r1
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x28a>
 8000578:	eb1c 0101 	adds.w	r1, ip, r1
 800057c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000582:	428b      	cmp	r3, r1
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	1ac9      	subs	r1, r1, r3
 800058c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0x104>
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e705      	b.n	80003a4 <__udivmoddi4+0xa4>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e3      	b.n	8000364 <__udivmoddi4+0x64>
 800059c:	4618      	mov	r0, r3
 800059e:	e6f8      	b.n	8000392 <__udivmoddi4+0x92>
 80005a0:	454b      	cmp	r3, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f8>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f8>
 80005b0:	4646      	mov	r6, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x28a>
 80005b4:	4620      	mov	r0, r4
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1e2>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x260>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b8>
 80005c0:	3b02      	subs	r3, #2
 80005c2:	4461      	add	r1, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x12c>
 80005c6:	4630      	mov	r0, r6
 80005c8:	e709      	b.n	80003de <__udivmoddi4+0xde>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x156>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d8:	f001 f8d2 	bl	8001780 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005dc:	f000 f86e 	bl	80006bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e0:	f000 f9d8 	bl	8000994 <MX_GPIO_Init>
  MX_DMA_Init();
 80005e4:	f000 f998 	bl	8000918 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005e8:	f000 f96c 	bl	80008c4 <MX_USART2_UART_Init>
  MX_I2S2_Init();
 80005ec:	f000 f91a 	bl	8000824 <MX_I2S2_Init>
  MX_SDIO_SD_Init();
 80005f0:	f000 f946 	bl	8000880 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80005f4:	f007 fc14 	bl	8007e20 <MX_FATFS_Init>
  MX_I2C1_Init();
 80005f8:	f000 f8e6 	bl	80007c8 <MX_I2C1_Init>
  MX_CRC_Init();
 80005fc:	f000 f8d0 	bl	80007a0 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000600:	f00a fe44 	bl	800b28c <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of RxSem */
  RxSemHandle = osSemaphoreNew(1, 1, &RxSem_attributes);
 8000604:	4a1d      	ldr	r2, [pc, #116]	; (800067c <main+0xa8>)
 8000606:	2101      	movs	r1, #1
 8000608:	2001      	movs	r0, #1
 800060a:	f00a ffaf 	bl	800b56c <osSemaphoreNew>
 800060e:	4603      	mov	r3, r0
 8000610:	4a1b      	ldr	r2, [pc, #108]	; (8000680 <main+0xac>)
 8000612:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  RxSemHandle = osSemaphoreNew(1, 0, &RxSem_attributes);
 8000614:	4a19      	ldr	r2, [pc, #100]	; (800067c <main+0xa8>)
 8000616:	2100      	movs	r1, #0
 8000618:	2001      	movs	r0, #1
 800061a:	f00a ffa7 	bl	800b56c <osSemaphoreNew>
 800061e:	4603      	mov	r3, r0
 8000620:	4a17      	ldr	r2, [pc, #92]	; (8000680 <main+0xac>)
 8000622:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of AudioQueue */
  AudioQueueHandle = osMessageQueueNew (8, sizeof(aud_buf), &AudioQueue_attributes);
 8000624:	4a17      	ldr	r2, [pc, #92]	; (8000684 <main+0xb0>)
 8000626:	f44f 7100 	mov.w	r1, #512	; 0x200
 800062a:	2008      	movs	r0, #8
 800062c:	f00b f8e2 	bl	800b7f4 <osMessageQueueNew>
 8000630:	4603      	mov	r3, r0
 8000632:	4a15      	ldr	r2, [pc, #84]	; (8000688 <main+0xb4>)
 8000634:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000636:	4a15      	ldr	r2, [pc, #84]	; (800068c <main+0xb8>)
 8000638:	2100      	movs	r1, #0
 800063a:	4815      	ldr	r0, [pc, #84]	; (8000690 <main+0xbc>)
 800063c:	f00a fea7 	bl	800b38e <osThreadNew>
 8000640:	4603      	mov	r3, r0
 8000642:	4a14      	ldr	r2, [pc, #80]	; (8000694 <main+0xc0>)
 8000644:	6013      	str	r3, [r2, #0]

  /* creation of UART */
  UARTHandle = osThreadNew(pvrCommandReceiveTask, NULL, &UART_attributes);
 8000646:	4a14      	ldr	r2, [pc, #80]	; (8000698 <main+0xc4>)
 8000648:	2100      	movs	r1, #0
 800064a:	4814      	ldr	r0, [pc, #80]	; (800069c <main+0xc8>)
 800064c:	f00a fe9f 	bl	800b38e <osThreadNew>
 8000650:	4603      	mov	r3, r0
 8000652:	4a13      	ldr	r2, [pc, #76]	; (80006a0 <main+0xcc>)
 8000654:	6013      	str	r3, [r2, #0]

  /* creation of I2S */
  I2SHandle = osThreadNew(pvrWriteAudioTask, NULL, &I2S_attributes);
 8000656:	4a13      	ldr	r2, [pc, #76]	; (80006a4 <main+0xd0>)
 8000658:	2100      	movs	r1, #0
 800065a:	4813      	ldr	r0, [pc, #76]	; (80006a8 <main+0xd4>)
 800065c:	f00a fe97 	bl	800b38e <osThreadNew>
 8000660:	4603      	mov	r3, r0
 8000662:	4a12      	ldr	r2, [pc, #72]	; (80006ac <main+0xd8>)
 8000664:	6013      	str	r3, [r2, #0]

  /* creation of WAV */
  WAVHandle = osThreadNew(pvrWriteWavFileTask, NULL, &WAV_attributes);
 8000666:	4a12      	ldr	r2, [pc, #72]	; (80006b0 <main+0xdc>)
 8000668:	2100      	movs	r1, #0
 800066a:	4812      	ldr	r0, [pc, #72]	; (80006b4 <main+0xe0>)
 800066c:	f00a fe8f 	bl	800b38e <osThreadNew>
 8000670:	4603      	mov	r3, r0
 8000672:	4a11      	ldr	r2, [pc, #68]	; (80006b8 <main+0xe4>)
 8000674:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000676:	f00a fe4f 	bl	800b318 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800067a:	e7fe      	b.n	800067a <main+0xa6>
 800067c:	0800fa30 	.word	0x0800fa30
 8000680:	20000334 	.word	0x20000334
 8000684:	0800fa18 	.word	0x0800fa18
 8000688:	20000330 	.word	0x20000330
 800068c:	0800f988 	.word	0x0800f988
 8000690:	08000d19 	.word	0x08000d19
 8000694:	20000320 	.word	0x20000320
 8000698:	0800f9ac 	.word	0x0800f9ac
 800069c:	08000d31 	.word	0x08000d31
 80006a0:	20000324 	.word	0x20000324
 80006a4:	0800f9d0 	.word	0x0800f9d0
 80006a8:	08000dd5 	.word	0x08000dd5
 80006ac:	20000328 	.word	0x20000328
 80006b0:	0800f9f4 	.word	0x0800f9f4
 80006b4:	08000e25 	.word	0x08000e25
 80006b8:	2000032c 	.word	0x2000032c

080006bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b094      	sub	sp, #80	; 0x50
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	f107 031c 	add.w	r3, r7, #28
 80006c6:	2234      	movs	r2, #52	; 0x34
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f00e fc28 	bl	800ef20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d0:	f107 0308 	add.w	r3, r7, #8
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e0:	2300      	movs	r3, #0
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	4b2c      	ldr	r3, [pc, #176]	; (8000798 <SystemClock_Config+0xdc>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	4a2b      	ldr	r2, [pc, #172]	; (8000798 <SystemClock_Config+0xdc>)
 80006ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ee:	6413      	str	r3, [r2, #64]	; 0x40
 80006f0:	4b29      	ldr	r3, [pc, #164]	; (8000798 <SystemClock_Config+0xdc>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006fc:	2300      	movs	r3, #0
 80006fe:	603b      	str	r3, [r7, #0]
 8000700:	4b26      	ldr	r3, [pc, #152]	; (800079c <SystemClock_Config+0xe0>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a25      	ldr	r2, [pc, #148]	; (800079c <SystemClock_Config+0xe0>)
 8000706:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800070a:	6013      	str	r3, [r2, #0]
 800070c:	4b23      	ldr	r3, [pc, #140]	; (800079c <SystemClock_Config+0xe0>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000714:	603b      	str	r3, [r7, #0]
 8000716:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000718:	2302      	movs	r3, #2
 800071a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800071c:	2301      	movs	r3, #1
 800071e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000720:	2310      	movs	r3, #16
 8000722:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000724:	2302      	movs	r3, #2
 8000726:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000728:	2300      	movs	r3, #0
 800072a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800072c:	2308      	movs	r3, #8
 800072e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000730:	23b4      	movs	r3, #180	; 0xb4
 8000732:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000734:	2302      	movs	r3, #2
 8000736:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000738:	2308      	movs	r3, #8
 800073a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800073c:	2302      	movs	r3, #2
 800073e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000740:	f107 031c 	add.w	r3, r7, #28
 8000744:	4618      	mov	r0, r3
 8000746:	f003 fde5 	bl	8004314 <HAL_RCC_OscConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000750:	f000 fc36 	bl	8000fc0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000754:	f002 fca0 	bl	8003098 <HAL_PWREx_EnableOverDrive>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800075e:	f000 fc2f 	bl	8000fc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000762:	230f      	movs	r3, #15
 8000764:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000766:	2302      	movs	r3, #2
 8000768:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800076e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000772:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000774:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000778:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800077a:	f107 0308 	add.w	r3, r7, #8
 800077e:	2105      	movs	r1, #5
 8000780:	4618      	mov	r0, r3
 8000782:	f002 fcd9 	bl	8003138 <HAL_RCC_ClockConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800078c:	f000 fc18 	bl	8000fc0 <Error_Handler>
  }
}
 8000790:	bf00      	nop
 8000792:	3750      	adds	r7, #80	; 0x50
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40023800 	.word	0x40023800
 800079c:	40007000 	.word	0x40007000

080007a0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <MX_CRC_Init+0x20>)
 80007a6:	4a07      	ldr	r2, [pc, #28]	; (80007c4 <MX_CRC_Init+0x24>)
 80007a8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007aa:	4805      	ldr	r0, [pc, #20]	; (80007c0 <MX_CRC_Init+0x20>)
 80007ac:	f001 f930 	bl	8001a10 <HAL_CRC_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80007b6:	f000 fc03 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000094 	.word	0x20000094
 80007c4:	40023000 	.word	0x40023000

080007c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007cc:	4b12      	ldr	r3, [pc, #72]	; (8000818 <MX_I2C1_Init+0x50>)
 80007ce:	4a13      	ldr	r2, [pc, #76]	; (800081c <MX_I2C1_Init+0x54>)
 80007d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <MX_I2C1_Init+0x50>)
 80007d4:	4a12      	ldr	r2, [pc, #72]	; (8000820 <MX_I2C1_Init+0x58>)
 80007d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_I2C1_Init+0x50>)
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_I2C1_Init+0x50>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <MX_I2C1_Init+0x50>)
 80007e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007ec:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <MX_I2C1_Init+0x50>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_I2C1_Init+0x50>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007f8:	4b07      	ldr	r3, [pc, #28]	; (8000818 <MX_I2C1_Init+0x50>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007fe:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_I2C1_Init+0x50>)
 8000800:	2200      	movs	r2, #0
 8000802:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000804:	4804      	ldr	r0, [pc, #16]	; (8000818 <MX_I2C1_Init+0x50>)
 8000806:	f001 fef3 	bl	80025f0 <HAL_I2C_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000810:	f000 fbd6 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	2000009c 	.word	0x2000009c
 800081c:	40005400 	.word	0x40005400
 8000820:	000186a0 	.word	0x000186a0

08000824 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000828:	4b13      	ldr	r3, [pc, #76]	; (8000878 <MX_I2S2_Init+0x54>)
 800082a:	4a14      	ldr	r2, [pc, #80]	; (800087c <MX_I2S2_Init+0x58>)
 800082c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800082e:	4b12      	ldr	r3, [pc, #72]	; (8000878 <MX_I2S2_Init+0x54>)
 8000830:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000834:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000836:	4b10      	ldr	r3, [pc, #64]	; (8000878 <MX_I2S2_Init+0x54>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_32B;
 800083c:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <MX_I2S2_Init+0x54>)
 800083e:	2205      	movs	r2, #5
 8000840:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000842:	4b0d      	ldr	r3, [pc, #52]	; (8000878 <MX_I2S2_Init+0x54>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000848:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <MX_I2S2_Init+0x54>)
 800084a:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800084e:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000850:	4b09      	ldr	r3, [pc, #36]	; (8000878 <MX_I2S2_Init+0x54>)
 8000852:	2200      	movs	r2, #0
 8000854:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <MX_I2S2_Init+0x54>)
 8000858:	2200      	movs	r2, #0
 800085a:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <MX_I2S2_Init+0x54>)
 800085e:	2200      	movs	r2, #0
 8000860:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000862:	4805      	ldr	r0, [pc, #20]	; (8000878 <MX_I2S2_Init+0x54>)
 8000864:	f002 f808 	bl	8002878 <HAL_I2S_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 800086e:	f000 fba7 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	200000f0 	.word	0x200000f0
 800087c:	40003800 	.word	0x40003800

08000880 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000884:	4b0d      	ldr	r3, [pc, #52]	; (80008bc <MX_SDIO_SD_Init+0x3c>)
 8000886:	4a0e      	ldr	r2, [pc, #56]	; (80008c0 <MX_SDIO_SD_Init+0x40>)
 8000888:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800088a:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <MX_SDIO_SD_Init+0x3c>)
 800088c:	2200      	movs	r2, #0
 800088e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000890:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <MX_SDIO_SD_Init+0x3c>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000896:	4b09      	ldr	r3, [pc, #36]	; (80008bc <MX_SDIO_SD_Init+0x3c>)
 8000898:	2200      	movs	r2, #0
 800089a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800089c:	4b07      	ldr	r3, [pc, #28]	; (80008bc <MX_SDIO_SD_Init+0x3c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_ENABLE;
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <MX_SDIO_SD_Init+0x3c>)
 80008a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008a8:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80008aa:	4b04      	ldr	r3, [pc, #16]	; (80008bc <MX_SDIO_SD_Init+0x3c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	20000198 	.word	0x20000198
 80008c0:	40012c00 	.word	0x40012c00

080008c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008c8:	4b11      	ldr	r3, [pc, #68]	; (8000910 <MX_USART2_UART_Init+0x4c>)
 80008ca:	4a12      	ldr	r2, [pc, #72]	; (8000914 <MX_USART2_UART_Init+0x50>)
 80008cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ce:	4b10      	ldr	r3, [pc, #64]	; (8000910 <MX_USART2_UART_Init+0x4c>)
 80008d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <MX_USART2_UART_Init+0x4c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008dc:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <MX_USART2_UART_Init+0x4c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008e2:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <MX_USART2_UART_Init+0x4c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008e8:	4b09      	ldr	r3, [pc, #36]	; (8000910 <MX_USART2_UART_Init+0x4c>)
 80008ea:	220c      	movs	r2, #12
 80008ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ee:	4b08      	ldr	r3, [pc, #32]	; (8000910 <MX_USART2_UART_Init+0x4c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <MX_USART2_UART_Init+0x4c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008fa:	4805      	ldr	r0, [pc, #20]	; (8000910 <MX_USART2_UART_Init+0x4c>)
 80008fc:	f005 fd72 	bl	80063e4 <HAL_UART_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000906:	f000 fb5b 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	200002dc 	.word	0x200002dc
 8000914:	40004400 	.word	0x40004400

08000918 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	4b1b      	ldr	r3, [pc, #108]	; (8000990 <MX_DMA_Init+0x78>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a1a      	ldr	r2, [pc, #104]	; (8000990 <MX_DMA_Init+0x78>)
 8000928:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b18      	ldr	r3, [pc, #96]	; (8000990 <MX_DMA_Init+0x78>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	603b      	str	r3, [r7, #0]
 800093e:	4b14      	ldr	r3, [pc, #80]	; (8000990 <MX_DMA_Init+0x78>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a13      	ldr	r2, [pc, #76]	; (8000990 <MX_DMA_Init+0x78>)
 8000944:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b11      	ldr	r3, [pc, #68]	; (8000990 <MX_DMA_Init+0x78>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000956:	2200      	movs	r2, #0
 8000958:	2105      	movs	r1, #5
 800095a:	200e      	movs	r0, #14
 800095c:	f001 f82e 	bl	80019bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000960:	200e      	movs	r0, #14
 8000962:	f001 f847 	bl	80019f4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000966:	2200      	movs	r2, #0
 8000968:	2105      	movs	r1, #5
 800096a:	203b      	movs	r0, #59	; 0x3b
 800096c:	f001 f826 	bl	80019bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000970:	203b      	movs	r0, #59	; 0x3b
 8000972:	f001 f83f 	bl	80019f4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8000976:	2200      	movs	r2, #0
 8000978:	2105      	movs	r1, #5
 800097a:	2045      	movs	r0, #69	; 0x45
 800097c:	f001 f81e 	bl	80019bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000980:	2045      	movs	r0, #69	; 0x45
 8000982:	f001 f837 	bl	80019f4 <HAL_NVIC_EnableIRQ>

}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800

08000994 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08a      	sub	sp, #40	; 0x28
 8000998:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099a:	f107 0314 	add.w	r3, r7, #20
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
 80009a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
 80009ae:	4b46      	ldr	r3, [pc, #280]	; (8000ac8 <MX_GPIO_Init+0x134>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a45      	ldr	r2, [pc, #276]	; (8000ac8 <MX_GPIO_Init+0x134>)
 80009b4:	f043 0304 	orr.w	r3, r3, #4
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b43      	ldr	r3, [pc, #268]	; (8000ac8 <MX_GPIO_Init+0x134>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0304 	and.w	r3, r3, #4
 80009c2:	613b      	str	r3, [r7, #16]
 80009c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	4b3f      	ldr	r3, [pc, #252]	; (8000ac8 <MX_GPIO_Init+0x134>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a3e      	ldr	r2, [pc, #248]	; (8000ac8 <MX_GPIO_Init+0x134>)
 80009d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b3c      	ldr	r3, [pc, #240]	; (8000ac8 <MX_GPIO_Init+0x134>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	4b38      	ldr	r3, [pc, #224]	; (8000ac8 <MX_GPIO_Init+0x134>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a37      	ldr	r2, [pc, #220]	; (8000ac8 <MX_GPIO_Init+0x134>)
 80009ec:	f043 0301 	orr.w	r3, r3, #1
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b35      	ldr	r3, [pc, #212]	; (8000ac8 <MX_GPIO_Init+0x134>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	60bb      	str	r3, [r7, #8]
 80009fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	4b31      	ldr	r3, [pc, #196]	; (8000ac8 <MX_GPIO_Init+0x134>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a30      	ldr	r2, [pc, #192]	; (8000ac8 <MX_GPIO_Init+0x134>)
 8000a08:	f043 0302 	orr.w	r3, r3, #2
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b2e      	ldr	r3, [pc, #184]	; (8000ac8 <MX_GPIO_Init+0x134>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0302 	and.w	r3, r3, #2
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	603b      	str	r3, [r7, #0]
 8000a1e:	4b2a      	ldr	r3, [pc, #168]	; (8000ac8 <MX_GPIO_Init+0x134>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a29      	ldr	r2, [pc, #164]	; (8000ac8 <MX_GPIO_Init+0x134>)
 8000a24:	f043 0308 	orr.w	r3, r3, #8
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b27      	ldr	r3, [pc, #156]	; (8000ac8 <MX_GPIO_Init+0x134>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f003 0308 	and.w	r3, r3, #8
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8000a3c:	4823      	ldr	r0, [pc, #140]	; (8000acc <MX_GPIO_Init+0x138>)
 8000a3e:	f001 fdbd 	bl	80025bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CODEC_Reset_GPIO_Port, CODEC_Reset_Pin, GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a48:	4821      	ldr	r0, [pc, #132]	; (8000ad0 <MX_GPIO_Init+0x13c>)
 8000a4a:	f001 fdb7 	bl	80025bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a54:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a5e:	f107 0314 	add.w	r3, r7, #20
 8000a62:	4619      	mov	r1, r3
 8000a64:	481b      	ldr	r0, [pc, #108]	; (8000ad4 <MX_GPIO_Init+0x140>)
 8000a66:	f001 fbfd 	bl	8002264 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9|GPIO_PIN_10;
 8000a6a:	f44f 63c4 	mov.w	r3, #1568	; 0x620
 8000a6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a70:	2301      	movs	r3, #1
 8000a72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	4619      	mov	r1, r3
 8000a82:	4812      	ldr	r0, [pc, #72]	; (8000acc <MX_GPIO_Init+0x138>)
 8000a84:	f001 fbee 	bl	8002264 <HAL_GPIO_Init>

  /*Configure GPIO pin : CODEC_Reset_Pin */
  GPIO_InitStruct.Pin = CODEC_Reset_Pin;
 8000a88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a96:	2300      	movs	r3, #0
 8000a98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CODEC_Reset_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	480b      	ldr	r0, [pc, #44]	; (8000ad0 <MX_GPIO_Init+0x13c>)
 8000aa2:	f001 fbdf 	bl	8002264 <HAL_GPIO_Init>

  /*Configure GPIO pin : BSP_API_SDIO_Pin */
  GPIO_InitStruct.Pin = BSP_API_SDIO_Pin;
 8000aa6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000aaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BSP_API_SDIO_GPIO_Port, &GPIO_InitStruct);
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4805      	ldr	r0, [pc, #20]	; (8000ad0 <MX_GPIO_Init+0x13c>)
 8000abc:	f001 fbd2 	bl	8002264 <HAL_GPIO_Init>

}
 8000ac0:	bf00      	nop
 8000ac2:	3728      	adds	r7, #40	; 0x28
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	40020000 	.word	0x40020000
 8000ad0:	40020400 	.word	0x40020400
 8000ad4:	40020800 	.word	0x40020800

08000ad8 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	460b      	mov	r3, r1
 8000ae2:	807b      	strh	r3, [r7, #2]
	osSemaphoreRelease(RxSemHandle);
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <HAL_UARTEx_RxEventCallback+0x28>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f00a fe1b 	bl	800b724 <osSemaphoreRelease>
	HAL_UARTEx_ReceiveToIdle_IT(huart, (uint8_t *)buf, 4);
 8000aee:	2204      	movs	r2, #4
 8000af0:	4904      	ldr	r1, [pc, #16]	; (8000b04 <HAL_UARTEx_RxEventCallback+0x2c>)
 8000af2:	6878      	ldr	r0, [r7, #4]
 8000af4:	f005 fcc3 	bl	800647e <HAL_UARTEx_ReceiveToIdle_IT>
}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000334 	.word	0x20000334
 8000b04:	2000076c 	.word	0x2000076c

08000b08 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
	osMessageQueuePut(AudioQueueHandle, aud_buf, 0L, 0);
 8000b10:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <HAL_I2S_RxCpltCallback+0x28>)
 8000b12:	6818      	ldr	r0, [r3, #0]
 8000b14:	2300      	movs	r3, #0
 8000b16:	2200      	movs	r2, #0
 8000b18:	4906      	ldr	r1, [pc, #24]	; (8000b34 <HAL_I2S_RxCpltCallback+0x2c>)
 8000b1a:	f00a fedf 	bl	800b8dc <osMessageQueuePut>
	HAL_I2S_Receive_DMA(hi2s, aud_buf, READ_SIZE);
 8000b1e:	2280      	movs	r2, #128	; 0x80
 8000b20:	4904      	ldr	r1, [pc, #16]	; (8000b34 <HAL_I2S_RxCpltCallback+0x2c>)
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f001 ffa0 	bl	8002a68 <HAL_I2S_Receive_DMA>
}
 8000b28:	bf00      	nop
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000330 	.word	0x20000330
 8000b34:	2000056c 	.word	0x2000056c

08000b38 <fwrite_wav_header>:

FRESULT fwrite_wav_header(FIL* file, uint16_t sampleRate, uint8_t bitsPerSample, uint8_t channels) {
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08e      	sub	sp, #56	; 0x38
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	4608      	mov	r0, r1
 8000b42:	4611      	mov	r1, r2
 8000b44:	461a      	mov	r2, r3
 8000b46:	4603      	mov	r3, r0
 8000b48:	807b      	strh	r3, [r7, #2]
 8000b4a:	460b      	mov	r3, r1
 8000b4c:	707b      	strb	r3, [r7, #1]
 8000b4e:	4613      	mov	r3, r2
 8000b50:	703b      	strb	r3, [r7, #0]
	static UINT *bw;
	WAVE_HEADER wave_header;
	wave_header.riff[0] = 'R';wave_header.riff[1] = 'I';
 8000b52:	2352      	movs	r3, #82	; 0x52
 8000b54:	733b      	strb	r3, [r7, #12]
 8000b56:	2349      	movs	r3, #73	; 0x49
 8000b58:	737b      	strb	r3, [r7, #13]
	wave_header.riff[2] = 'F';wave_header.riff[3] = 'F';
 8000b5a:	2346      	movs	r3, #70	; 0x46
 8000b5c:	73bb      	strb	r3, [r7, #14]
 8000b5e:	2346      	movs	r3, #70	; 0x46
 8000b60:	73fb      	strb	r3, [r7, #15]
	wave_header.size = (uint32_t)0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	613b      	str	r3, [r7, #16]
	wave_header.wave[0] = 'W';wave_header.wave[1] = 'A';
 8000b66:	2357      	movs	r3, #87	; 0x57
 8000b68:	753b      	strb	r3, [r7, #20]
 8000b6a:	2341      	movs	r3, #65	; 0x41
 8000b6c:	757b      	strb	r3, [r7, #21]
	wave_header.wave[2] = 'V';wave_header.wave[3] = 'E';
 8000b6e:	2356      	movs	r3, #86	; 0x56
 8000b70:	75bb      	strb	r3, [r7, #22]
 8000b72:	2345      	movs	r3, #69	; 0x45
 8000b74:	75fb      	strb	r3, [r7, #23]
	wave_header.fmt[0] = 'f';wave_header.fmt[1] = 'm';
 8000b76:	2366      	movs	r3, #102	; 0x66
 8000b78:	763b      	strb	r3, [r7, #24]
 8000b7a:	236d      	movs	r3, #109	; 0x6d
 8000b7c:	767b      	strb	r3, [r7, #25]
	wave_header.fmt[2] = 't';wave_header.fmt[3] = ' ';
 8000b7e:	2374      	movs	r3, #116	; 0x74
 8000b80:	76bb      	strb	r3, [r7, #26]
 8000b82:	2320      	movs	r3, #32
 8000b84:	76fb      	strb	r3, [r7, #27]
	wave_header.fmt_size = 16;
 8000b86:	2310      	movs	r3, #16
 8000b88:	61fb      	str	r3, [r7, #28]
	wave_header.format = 1; // PCM
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	843b      	strh	r3, [r7, #32]
	wave_header.channels = channels; // channels
 8000b8e:	783b      	ldrb	r3, [r7, #0]
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	847b      	strh	r3, [r7, #34]	; 0x22
	wave_header.sampleRate=sampleRate;  // sample rate
 8000b94:	887b      	ldrh	r3, [r7, #2]
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
	wave_header.rbc = sampleRate*bitsPerSample*channels/8;
 8000b98:	887b      	ldrh	r3, [r7, #2]
 8000b9a:	787a      	ldrb	r2, [r7, #1]
 8000b9c:	fb02 f303 	mul.w	r3, r2, r3
 8000ba0:	783a      	ldrb	r2, [r7, #0]
 8000ba2:	fb02 f303 	mul.w	r3, r2, r3
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	da00      	bge.n	8000bac <fwrite_wav_header+0x74>
 8000baa:	3307      	adds	r3, #7
 8000bac:	10db      	asrs	r3, r3, #3
 8000bae:	62bb      	str	r3, [r7, #40]	; 0x28
	wave_header.bc =  bitsPerSample*channels/8;
 8000bb0:	787b      	ldrb	r3, [r7, #1]
 8000bb2:	783a      	ldrb	r2, [r7, #0]
 8000bb4:	fb02 f303 	mul.w	r3, r2, r3
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	da00      	bge.n	8000bbe <fwrite_wav_header+0x86>
 8000bbc:	3307      	adds	r3, #7
 8000bbe:	10db      	asrs	r3, r3, #3
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	85bb      	strh	r3, [r7, #44]	; 0x2c
	wave_header.bitsPerSample = bitsPerSample; //bitsPerSample
 8000bc4:	787b      	ldrb	r3, [r7, #1]
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	wave_header.data[0] = 'd'; wave_header.data[1] = 'a';
 8000bca:	2364      	movs	r3, #100	; 0x64
 8000bcc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8000bd0:	2361      	movs	r3, #97	; 0x61
 8000bd2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	wave_header.data[2] = 't'; wave_header.data[3] = 'a';
 8000bd6:	2374      	movs	r3, #116	; 0x74
 8000bd8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8000bdc:	2361      	movs	r3, #97	; 0x61
 8000bde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	wave_header.data_size = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	637b      	str	r3, [r7, #52]	; 0x34
	return f_write(file, (uint8_t*)&wave_header, sizeof(wave_header), bw);
 8000be6:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <fwrite_wav_header+0xc8>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f107 010c 	add.w	r1, r7, #12
 8000bee:	222c      	movs	r2, #44	; 0x2c
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f009 fc1c 	bl	800a42e <f_write>
 8000bf6:	4603      	mov	r3, r0
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3738      	adds	r7, #56	; 0x38
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000770 	.word	0x20000770

08000c04 <Format_SD>:

FRESULT Format_SD (void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08e      	sub	sp, #56	; 0x38
 8000c08:	af00      	add	r7, sp, #0
	DIR dir;
	static FILINFO fno;
	static FRESULT fresult;

	char *path = malloc(20*sizeof (char));
 8000c0a:	2014      	movs	r0, #20
 8000c0c:	f00e f96a 	bl	800eee4 <malloc>
 8000c10:	4603      	mov	r3, r0
 8000c12:	637b      	str	r3, [r7, #52]	; 0x34
	sprintf (path, "%s","/");
 8000c14:	4a28      	ldr	r2, [pc, #160]	; (8000cb8 <Format_SD+0xb4>)
 8000c16:	4929      	ldr	r1, [pc, #164]	; (8000cbc <Format_SD+0xb8>)
 8000c18:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000c1a:	f00e fae3 	bl	800f1e4 <siprintf>

	fresult = f_opendir(&dir, path);                       /* Open the directory */
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000c22:	4618      	mov	r0, r3
 8000c24:	f00a f8b2 	bl	800ad8c <f_opendir>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	4b24      	ldr	r3, [pc, #144]	; (8000cc0 <Format_SD+0xbc>)
 8000c2e:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8000c30:	4b23      	ldr	r3, [pc, #140]	; (8000cc0 <Format_SD+0xbc>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d136      	bne.n	8000ca6 <Format_SD+0xa2>
	{
		for (;;)
		{
			fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 8000c38:	1d3b      	adds	r3, r7, #4
 8000c3a:	4922      	ldr	r1, [pc, #136]	; (8000cc4 <Format_SD+0xc0>)
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f00a f949 	bl	800aed4 <f_readdir>
 8000c42:	4603      	mov	r3, r0
 8000c44:	461a      	mov	r2, r3
 8000c46:	4b1e      	ldr	r3, [pc, #120]	; (8000cc0 <Format_SD+0xbc>)
 8000c48:	701a      	strb	r2, [r3, #0]
			if (fresult != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8000c4a:	4b1d      	ldr	r3, [pc, #116]	; (8000cc0 <Format_SD+0xbc>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d125      	bne.n	8000c9e <Format_SD+0x9a>
 8000c52:	4b1c      	ldr	r3, [pc, #112]	; (8000cc4 <Format_SD+0xc0>)
 8000c54:	7a5b      	ldrb	r3, [r3, #9]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d021      	beq.n	8000c9e <Format_SD+0x9a>
			if (fno.fattrib & AM_DIR)     /* It is a directory */
 8000c5a:	4b1a      	ldr	r3, [pc, #104]	; (8000cc4 <Format_SD+0xc0>)
 8000c5c:	7a1b      	ldrb	r3, [r3, #8]
 8000c5e:	f003 0310 	and.w	r3, r3, #16
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d011      	beq.n	8000c8a <Format_SD+0x86>
			{
				if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 8000c66:	4918      	ldr	r1, [pc, #96]	; (8000cc8 <Format_SD+0xc4>)
 8000c68:	4818      	ldr	r0, [pc, #96]	; (8000ccc <Format_SD+0xc8>)
 8000c6a:	f7ff fad1 	bl	8000210 <strcmp>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d012      	beq.n	8000c9a <Format_SD+0x96>
				fresult = f_unlink(fno.fname);
 8000c74:	4814      	ldr	r0, [pc, #80]	; (8000cc8 <Format_SD+0xc4>)
 8000c76:	f00a f970 	bl	800af5a <f_unlink>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <Format_SD+0xbc>)
 8000c80:	701a      	strb	r2, [r3, #0]
				if (fresult == FR_DENIED) continue;
 8000c82:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <Format_SD+0xbc>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	2b07      	cmp	r3, #7
 8000c88:	e7d6      	b.n	8000c38 <Format_SD+0x34>
			}
			else
			{   /* It is a file. */
				fresult = f_unlink(fno.fname);
 8000c8a:	480f      	ldr	r0, [pc, #60]	; (8000cc8 <Format_SD+0xc4>)
 8000c8c:	f00a f965 	bl	800af5a <f_unlink>
 8000c90:	4603      	mov	r3, r0
 8000c92:	461a      	mov	r2, r3
 8000c94:	4b0a      	ldr	r3, [pc, #40]	; (8000cc0 <Format_SD+0xbc>)
 8000c96:	701a      	strb	r2, [r3, #0]
 8000c98:	e7ce      	b.n	8000c38 <Format_SD+0x34>
				if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 8000c9a:	bf00      	nop
			fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 8000c9c:	e7cc      	b.n	8000c38 <Format_SD+0x34>
			}
		}
		f_closedir(&dir);
 8000c9e:	1d3b      	adds	r3, r7, #4
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f00a f8ec 	bl	800ae7e <f_closedir>
	}
	free(path);
 8000ca6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000ca8:	f00e f924 	bl	800eef4 <free>
	return fresult;
 8000cac:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <Format_SD+0xbc>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3738      	adds	r7, #56	; 0x38
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	0800f908 	.word	0x0800f908
 8000cbc:	0800f90c 	.word	0x0800f90c
 8000cc0:	20000774 	.word	0x20000774
 8000cc4:	20000778 	.word	0x20000778
 8000cc8:	20000781 	.word	0x20000781
 8000ccc:	0800f910 	.word	0x0800f910

08000cd0 <convert_endianness>:

void convert_endianness(uint32_t *array, uint16_t Size) {
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	460b      	mov	r3, r1
 8000cda:	807b      	strh	r3, [r7, #2]
    for (int i = 0; i < Size; i++) {
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	e00f      	b.n	8000d02 <convert_endianness+0x32>
        array[i] = __REV(array[i]);
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	687a      	ldr	r2, [r7, #4]
 8000ce8:	4413      	add	r3, r2
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	6879      	ldr	r1, [r7, #4]
 8000cf2:	440b      	add	r3, r1
 8000cf4:	60ba      	str	r2, [r7, #8]
  \return               Reversed value
 */
__STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
{
#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
  return __builtin_bswap32(value);
 8000cf6:	68ba      	ldr	r2, [r7, #8]
 8000cf8:	ba12      	rev	r2, r2
 8000cfa:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < Size; i++) {
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	887b      	ldrh	r3, [r7, #2]
 8000d04:	68fa      	ldr	r2, [r7, #12]
 8000d06:	429a      	cmp	r2, r3
 8000d08:	dbeb      	blt.n	8000ce2 <convert_endianness+0x12>
    }
}
 8000d0a:	bf00      	nop
 8000d0c:	bf00      	nop
 8000d0e:	3714      	adds	r7, #20
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osThreadSuspend(defaultTaskHandle);
 8000d20:	4b02      	ldr	r3, [pc, #8]	; (8000d2c <StartDefaultTask+0x14>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f00a fbc4 	bl	800b4b2 <osThreadSuspend>
 8000d2a:	e7f9      	b.n	8000d20 <StartDefaultTask+0x8>
 8000d2c:	20000320 	.word	0x20000320

08000d30 <pvrCommandReceiveTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pvrCommandReceiveTask */
void pvrCommandReceiveTask(void *argument)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pvrCommandReceiveTask */
	HAL_UARTEx_ReceiveToIdle_IT(&huart2, (uint8_t *)buf, 4);
 8000d38:	2204      	movs	r2, #4
 8000d3a:	4921      	ldr	r1, [pc, #132]	; (8000dc0 <pvrCommandReceiveTask+0x90>)
 8000d3c:	4821      	ldr	r0, [pc, #132]	; (8000dc4 <pvrCommandReceiveTask+0x94>)
 8000d3e:	f005 fb9e 	bl	800647e <HAL_UARTEx_ReceiveToIdle_IT>
  /* Infinite loop */
	for(;;)
	{

		osSemaphoreAcquire(RxSemHandle, osWaitForever);
 8000d42:	4b21      	ldr	r3, [pc, #132]	; (8000dc8 <pvrCommandReceiveTask+0x98>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f00a fc98 	bl	800b680 <osSemaphoreAcquire>

		switch(buf[0])
 8000d50:	4b1b      	ldr	r3, [pc, #108]	; (8000dc0 <pvrCommandReceiveTask+0x90>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b50      	cmp	r3, #80	; 0x50
 8000d56:	d018      	beq.n	8000d8a <pvrCommandReceiveTask+0x5a>
 8000d58:	2b50      	cmp	r3, #80	; 0x50
 8000d5a:	dc2a      	bgt.n	8000db2 <pvrCommandReceiveTask+0x82>
 8000d5c:	2b47      	cmp	r3, #71	; 0x47
 8000d5e:	d006      	beq.n	8000d6e <pvrCommandReceiveTask+0x3e>
 8000d60:	2b47      	cmp	r3, #71	; 0x47
 8000d62:	dc26      	bgt.n	8000db2 <pvrCommandReceiveTask+0x82>
 8000d64:	2b2b      	cmp	r3, #43	; 0x2b
 8000d66:	d020      	beq.n	8000daa <pvrCommandReceiveTask+0x7a>
 8000d68:	2b2e      	cmp	r3, #46	; 0x2e
 8000d6a:	d01a      	beq.n	8000da2 <pvrCommandReceiveTask+0x72>
			break;
		case '+':
			audio_state = STATE_IDLE;
			break;
		default:
			break;
 8000d6c:	e021      	b.n	8000db2 <pvrCommandReceiveTask+0x82>
			if(audio_state == STATE_IDLE) osThreadResume(WAVHandle);
 8000d6e:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <pvrCommandReceiveTask+0x9c>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d11f      	bne.n	8000db6 <pvrCommandReceiveTask+0x86>
 8000d76:	4b16      	ldr	r3, [pc, #88]	; (8000dd0 <pvrCommandReceiveTask+0xa0>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f00a fbba 	bl	800b4f4 <osThreadResume>
			break;
 8000d80:	e019      	b.n	8000db6 <pvrCommandReceiveTask+0x86>
			while(audio_state == STATE_START_RECORDING) osDelay(500);
 8000d82:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d86:	f00a fbd6 	bl	800b536 <osDelay>
 8000d8a:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <pvrCommandReceiveTask+0x9c>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	2b02      	cmp	r3, #2
 8000d90:	d0f7      	beq.n	8000d82 <pvrCommandReceiveTask+0x52>
			if(audio_state == STATE_RECORDING) audio_state = STATE_STOP;
 8000d92:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <pvrCommandReceiveTask+0x9c>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	2b03      	cmp	r3, #3
 8000d98:	d10f      	bne.n	8000dba <pvrCommandReceiveTask+0x8a>
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <pvrCommandReceiveTask+0x9c>)
 8000d9c:	2204      	movs	r2, #4
 8000d9e:	701a      	strb	r2, [r3, #0]
			break;
 8000da0:	e00b      	b.n	8000dba <pvrCommandReceiveTask+0x8a>
			audio_state = CONNECTING;
 8000da2:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <pvrCommandReceiveTask+0x9c>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	701a      	strb	r2, [r3, #0]
			break;
 8000da8:	e008      	b.n	8000dbc <pvrCommandReceiveTask+0x8c>
			audio_state = STATE_IDLE;
 8000daa:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <pvrCommandReceiveTask+0x9c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	701a      	strb	r2, [r3, #0]
			break;
 8000db0:	e004      	b.n	8000dbc <pvrCommandReceiveTask+0x8c>
			break;
 8000db2:	bf00      	nop
 8000db4:	e7c5      	b.n	8000d42 <pvrCommandReceiveTask+0x12>
			break;
 8000db6:	bf00      	nop
 8000db8:	e7c3      	b.n	8000d42 <pvrCommandReceiveTask+0x12>
			break;
 8000dba:	bf00      	nop
		osSemaphoreAcquire(RxSemHandle, osWaitForever);
 8000dbc:	e7c1      	b.n	8000d42 <pvrCommandReceiveTask+0x12>
 8000dbe:	bf00      	nop
 8000dc0:	2000076c 	.word	0x2000076c
 8000dc4:	200002dc 	.word	0x200002dc
 8000dc8:	20000334 	.word	0x20000334
 8000dcc:	20000000 	.word	0x20000000
 8000dd0:	2000032c 	.word	0x2000032c

08000dd4 <pvrWriteAudioTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pvrWriteAudioTask */
void pvrWriteAudioTask(void *argument)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
	static uint16_t aud_ptr[WRITE_SIZE];

	/* Infinite loop */
	for(;;)
	{
		osMessageQueueGet(AudioQueueHandle, aud_ptr, 0L, osWaitForever);
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <pvrWriteAudioTask+0x3c>)
 8000dde:	6818      	ldr	r0, [r3, #0]
 8000de0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000de4:	2200      	movs	r2, #0
 8000de6:	490b      	ldr	r1, [pc, #44]	; (8000e14 <pvrWriteAudioTask+0x40>)
 8000de8:	f00a fdd8 	bl	800b99c <osMessageQueueGet>
		convert_endianness((uint32_t *)aud_ptr, READ_SIZE);
 8000dec:	2180      	movs	r1, #128	; 0x80
 8000dee:	4809      	ldr	r0, [pc, #36]	; (8000e14 <pvrWriteAudioTask+0x40>)
 8000df0:	f7ff ff6e 	bl	8000cd0 <convert_endianness>
		res = f_write(&file_ptr, aud_ptr, WRITE_SIZE, bw);
 8000df4:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <pvrWriteAudioTask+0x44>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dfc:	4905      	ldr	r1, [pc, #20]	; (8000e14 <pvrWriteAudioTask+0x40>)
 8000dfe:	4807      	ldr	r0, [pc, #28]	; (8000e1c <pvrWriteAudioTask+0x48>)
 8000e00:	f009 fb15 	bl	800a42e <f_write>
 8000e04:	4603      	mov	r3, r0
 8000e06:	461a      	mov	r2, r3
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <pvrWriteAudioTask+0x4c>)
 8000e0a:	701a      	strb	r2, [r3, #0]
		osMessageQueueGet(AudioQueueHandle, aud_ptr, 0L, osWaitForever);
 8000e0c:	e7e6      	b.n	8000ddc <pvrWriteAudioTask+0x8>
 8000e0e:	bf00      	nop
 8000e10:	20000330 	.word	0x20000330
 8000e14:	20000790 	.word	0x20000790
 8000e18:	20000990 	.word	0x20000990
 8000e1c:	2000033c 	.word	0x2000033c
 8000e20:	20000338 	.word	0x20000338

08000e24 <pvrWriteWavFileTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pvrWriteWavFileTask */
void pvrWriteWavFileTask(void *argument)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
	static char filename[256];
	static UINT *bw;

	do
	{
		res = f_mount(&SDFatFS, SDPath, 1);
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	494e      	ldr	r1, [pc, #312]	; (8000f68 <pvrWriteWavFileTask+0x144>)
 8000e30:	484e      	ldr	r0, [pc, #312]	; (8000f6c <pvrWriteWavFileTask+0x148>)
 8000e32:	f009 f8d3 	bl	8009fdc <f_mount>
 8000e36:	4603      	mov	r3, r0
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4b4d      	ldr	r3, [pc, #308]	; (8000f70 <pvrWriteWavFileTask+0x14c>)
 8000e3c:	701a      	strb	r2, [r3, #0]
	}
	while( res != FR_OK);
 8000e3e:	4b4c      	ldr	r3, [pc, #304]	; (8000f70 <pvrWriteWavFileTask+0x14c>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d1f2      	bne.n	8000e2c <pvrWriteWavFileTask+0x8>

	do
	{
		res = Format_SD();
 8000e46:	f7ff fedd 	bl	8000c04 <Format_SD>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	4b48      	ldr	r3, [pc, #288]	; (8000f70 <pvrWriteWavFileTask+0x14c>)
 8000e50:	701a      	strb	r2, [r3, #0]
	}
	while (res != FR_OK);
 8000e52:	4b47      	ldr	r3, [pc, #284]	; (8000f70 <pvrWriteWavFileTask+0x14c>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d1f5      	bne.n	8000e46 <pvrWriteWavFileTask+0x22>
	/* Infinite loop */
	for(;;)
	{
		switch(audio_state)
 8000e5a:	4b46      	ldr	r3, [pc, #280]	; (8000f74 <pvrWriteWavFileTask+0x150>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	2b04      	cmp	r3, #4
 8000e60:	d87d      	bhi.n	8000f5e <pvrWriteWavFileTask+0x13a>
 8000e62:	a201      	add	r2, pc, #4	; (adr r2, 8000e68 <pvrWriteWavFileTask+0x44>)
 8000e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e68:	08000f4d 	.word	0x08000f4d
 8000e6c:	08000f5f 	.word	0x08000f5f
 8000e70:	08000e7d 	.word	0x08000e7d
 8000e74:	08000ed5 	.word	0x08000ed5
 8000e78:	08000edd 	.word	0x08000edd
		{
		case STATE_START_RECORDING:

			sprintf(filename, "%sr_%05d.wav", SDPath, count++);
 8000e7c:	4b3e      	ldr	r3, [pc, #248]	; (8000f78 <pvrWriteWavFileTask+0x154>)
 8000e7e:	881b      	ldrh	r3, [r3, #0]
 8000e80:	1c5a      	adds	r2, r3, #1
 8000e82:	b291      	uxth	r1, r2
 8000e84:	4a3c      	ldr	r2, [pc, #240]	; (8000f78 <pvrWriteWavFileTask+0x154>)
 8000e86:	8011      	strh	r1, [r2, #0]
 8000e88:	4a37      	ldr	r2, [pc, #220]	; (8000f68 <pvrWriteWavFileTask+0x144>)
 8000e8a:	493c      	ldr	r1, [pc, #240]	; (8000f7c <pvrWriteWavFileTask+0x158>)
 8000e8c:	483c      	ldr	r0, [pc, #240]	; (8000f80 <pvrWriteWavFileTask+0x15c>)
 8000e8e:	f00e f9a9 	bl	800f1e4 <siprintf>

			do
			{
				res = f_open(&file_ptr, filename, FA_CREATE_ALWAYS|FA_WRITE);
 8000e92:	220a      	movs	r2, #10
 8000e94:	493a      	ldr	r1, [pc, #232]	; (8000f80 <pvrWriteWavFileTask+0x15c>)
 8000e96:	483b      	ldr	r0, [pc, #236]	; (8000f84 <pvrWriteWavFileTask+0x160>)
 8000e98:	f009 f904 	bl	800a0a4 <f_open>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	4b33      	ldr	r3, [pc, #204]	; (8000f70 <pvrWriteWavFileTask+0x14c>)
 8000ea2:	701a      	strb	r2, [r3, #0]
			}
			while(res != FR_OK);
 8000ea4:	4b32      	ldr	r3, [pc, #200]	; (8000f70 <pvrWriteWavFileTask+0x14c>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d1f2      	bne.n	8000e92 <pvrWriteWavFileTask+0x6e>

			res = fwrite_wav_header(&file_ptr, I2S_SAMPLE_FREQUENCY, I2S_DATA_WORD_LENGTH, 2);
 8000eac:	2302      	movs	r3, #2
 8000eae:	2220      	movs	r2, #32
 8000eb0:	f64b 3180 	movw	r1, #48000	; 0xbb80
 8000eb4:	4833      	ldr	r0, [pc, #204]	; (8000f84 <pvrWriteWavFileTask+0x160>)
 8000eb6:	f7ff fe3f 	bl	8000b38 <fwrite_wav_header>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4b2c      	ldr	r3, [pc, #176]	; (8000f70 <pvrWriteWavFileTask+0x14c>)
 8000ec0:	701a      	strb	r2, [r3, #0]

			HAL_I2S_Receive_DMA(&hi2s2, aud_buf, READ_SIZE);
 8000ec2:	2280      	movs	r2, #128	; 0x80
 8000ec4:	4930      	ldr	r1, [pc, #192]	; (8000f88 <pvrWriteWavFileTask+0x164>)
 8000ec6:	4831      	ldr	r0, [pc, #196]	; (8000f8c <pvrWriteWavFileTask+0x168>)
 8000ec8:	f001 fdce 	bl	8002a68 <HAL_I2S_Receive_DMA>
			audio_state = STATE_RECORDING;
 8000ecc:	4b29      	ldr	r3, [pc, #164]	; (8000f74 <pvrWriteWavFileTask+0x150>)
 8000ece:	2203      	movs	r2, #3
 8000ed0:	701a      	strb	r2, [r3, #0]
			break;
 8000ed2:	e048      	b.n	8000f66 <pvrWriteWavFileTask+0x142>

		case STATE_RECORDING:
			osDelay(50);
 8000ed4:	2032      	movs	r0, #50	; 0x32
 8000ed6:	f00a fb2e 	bl	800b536 <osDelay>
			break;
 8000eda:	e044      	b.n	8000f66 <pvrWriteWavFileTask+0x142>

		case STATE_STOP:
			HAL_I2S_DMAStop(&hi2s2);
 8000edc:	482b      	ldr	r0, [pc, #172]	; (8000f8c <pvrWriteWavFileTask+0x168>)
 8000ede:	f001 fe7f 	bl	8002be0 <HAL_I2S_DMAStop>
			while(osMessageQueueGetCount(AudioQueueHandle)) osDelay(1000);
 8000ee2:	e003      	b.n	8000eec <pvrWriteWavFileTask+0xc8>
 8000ee4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ee8:	f00a fb25 	bl	800b536 <osDelay>
 8000eec:	4b28      	ldr	r3, [pc, #160]	; (8000f90 <pvrWriteWavFileTask+0x16c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f00a fdb1 	bl	800ba58 <osMessageQueueGetCount>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d1f3      	bne.n	8000ee4 <pvrWriteWavFileTask+0xc0>

			filesize = f_size(&file_ptr);
 8000efc:	4b21      	ldr	r3, [pc, #132]	; (8000f84 <pvrWriteWavFileTask+0x160>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	617b      	str	r3, [r7, #20]
			data_len = filesize - 44;
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	3b2c      	subs	r3, #44	; 0x2c
 8000f06:	613b      	str	r3, [r7, #16]
			total_len = filesize - 8;
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	3b08      	subs	r3, #8
 8000f0c:	60fb      	str	r3, [r7, #12]
			f_lseek(&file_ptr, 4);
 8000f0e:	2104      	movs	r1, #4
 8000f10:	481c      	ldr	r0, [pc, #112]	; (8000f84 <pvrWriteWavFileTask+0x160>)
 8000f12:	f009 fce8 	bl	800a8e6 <f_lseek>
			f_write(&file_ptr, (uint8_t*)&total_len, 4, bw);
 8000f16:	4b1f      	ldr	r3, [pc, #124]	; (8000f94 <pvrWriteWavFileTask+0x170>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f107 010c 	add.w	r1, r7, #12
 8000f1e:	2204      	movs	r2, #4
 8000f20:	4818      	ldr	r0, [pc, #96]	; (8000f84 <pvrWriteWavFileTask+0x160>)
 8000f22:	f009 fa84 	bl	800a42e <f_write>
			f_lseek(&file_ptr, 40);
 8000f26:	2128      	movs	r1, #40	; 0x28
 8000f28:	4816      	ldr	r0, [pc, #88]	; (8000f84 <pvrWriteWavFileTask+0x160>)
 8000f2a:	f009 fcdc 	bl	800a8e6 <f_lseek>
			f_write(&file_ptr, (uint8_t*)&data_len, 4, bw);
 8000f2e:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <pvrWriteWavFileTask+0x170>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f107 0110 	add.w	r1, r7, #16
 8000f36:	2204      	movs	r2, #4
 8000f38:	4812      	ldr	r0, [pc, #72]	; (8000f84 <pvrWriteWavFileTask+0x160>)
 8000f3a:	f009 fa78 	bl	800a42e <f_write>
			f_close(&file_ptr);
 8000f3e:	4811      	ldr	r0, [pc, #68]	; (8000f84 <pvrWriteWavFileTask+0x160>)
 8000f40:	f009 fca2 	bl	800a888 <f_close>

			audio_state = STATE_IDLE;
 8000f44:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <pvrWriteWavFileTask+0x150>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	701a      	strb	r2, [r3, #0]
			break;
 8000f4a:	e00c      	b.n	8000f66 <pvrWriteWavFileTask+0x142>

		case STATE_IDLE:
			osThreadSuspend(WAVHandle);
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <pvrWriteWavFileTask+0x174>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f00a faae 	bl	800b4b2 <osThreadSuspend>
			audio_state = STATE_START_RECORDING;
 8000f56:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <pvrWriteWavFileTask+0x150>)
 8000f58:	2202      	movs	r2, #2
 8000f5a:	701a      	strb	r2, [r3, #0]
			break;
 8000f5c:	e003      	b.n	8000f66 <pvrWriteWavFileTask+0x142>

		default:
			osDelay(50);
 8000f5e:	2032      	movs	r0, #50	; 0x32
 8000f60:	f00a fae9 	bl	800b536 <osDelay>
			break;
 8000f64:	bf00      	nop
		switch(audio_state)
 8000f66:	e778      	b.n	8000e5a <pvrWriteWavFileTask+0x36>
 8000f68:	20000af0 	.word	0x20000af0
 8000f6c:	20000af4 	.word	0x20000af4
 8000f70:	20000338 	.word	0x20000338
 8000f74:	20000000 	.word	0x20000000
 8000f78:	20000994 	.word	0x20000994
 8000f7c:	0800f91c 	.word	0x0800f91c
 8000f80:	20000998 	.word	0x20000998
 8000f84:	2000033c 	.word	0x2000033c
 8000f88:	2000056c 	.word	0x2000056c
 8000f8c:	200000f0 	.word	0x200000f0
 8000f90:	20000330 	.word	0x20000330
 8000f94:	20000a98 	.word	0x20000a98
 8000f98:	2000032c 	.word	0x2000032c

08000f9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a04      	ldr	r2, [pc, #16]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d101      	bne.n	8000fb2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fae:	f000 fc09 	bl	80017c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40010000 	.word	0x40010000

08000fc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc4:	b672      	cpsid	i
}
 8000fc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <Error_Handler+0x8>
	...

08000fcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	4b12      	ldr	r3, [pc, #72]	; (8001020 <HAL_MspInit+0x54>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fda:	4a11      	ldr	r2, [pc, #68]	; (8001020 <HAL_MspInit+0x54>)
 8000fdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fe2:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <HAL_MspInit+0x54>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	603b      	str	r3, [r7, #0]
 8000ff2:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <HAL_MspInit+0x54>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	4a0a      	ldr	r2, [pc, #40]	; (8001020 <HAL_MspInit+0x54>)
 8000ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffe:	4b08      	ldr	r3, [pc, #32]	; (8001020 <HAL_MspInit+0x54>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001006:	603b      	str	r3, [r7, #0]
 8001008:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800100a:	2200      	movs	r2, #0
 800100c:	210f      	movs	r1, #15
 800100e:	f06f 0001 	mvn.w	r0, #1
 8001012:	f000 fcd3 	bl	80019bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40023800 	.word	0x40023800

08001024 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a0b      	ldr	r2, [pc, #44]	; (8001060 <HAL_CRC_MspInit+0x3c>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d10d      	bne.n	8001052 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <HAL_CRC_MspInit+0x40>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a09      	ldr	r2, [pc, #36]	; (8001064 <HAL_CRC_MspInit+0x40>)
 8001040:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
 8001046:	4b07      	ldr	r3, [pc, #28]	; (8001064 <HAL_CRC_MspInit+0x40>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001052:	bf00      	nop
 8001054:	3714      	adds	r7, #20
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	40023000 	.word	0x40023000
 8001064:	40023800 	.word	0x40023800

08001068 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08a      	sub	sp, #40	; 0x28
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a19      	ldr	r2, [pc, #100]	; (80010ec <HAL_I2C_MspInit+0x84>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d12b      	bne.n	80010e2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
 800108e:	4b18      	ldr	r3, [pc, #96]	; (80010f0 <HAL_I2C_MspInit+0x88>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	4a17      	ldr	r2, [pc, #92]	; (80010f0 <HAL_I2C_MspInit+0x88>)
 8001094:	f043 0302 	orr.w	r3, r3, #2
 8001098:	6313      	str	r3, [r2, #48]	; 0x30
 800109a:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <HAL_I2C_MspInit+0x88>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010a6:	23c0      	movs	r3, #192	; 0xc0
 80010a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010aa:	2312      	movs	r3, #18
 80010ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b2:	2303      	movs	r3, #3
 80010b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010b6:	2304      	movs	r3, #4
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ba:	f107 0314 	add.w	r3, r7, #20
 80010be:	4619      	mov	r1, r3
 80010c0:	480c      	ldr	r0, [pc, #48]	; (80010f4 <HAL_I2C_MspInit+0x8c>)
 80010c2:	f001 f8cf 	bl	8002264 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <HAL_I2C_MspInit+0x88>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	4a08      	ldr	r2, [pc, #32]	; (80010f0 <HAL_I2C_MspInit+0x88>)
 80010d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010d4:	6413      	str	r3, [r2, #64]	; 0x40
 80010d6:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <HAL_I2C_MspInit+0x88>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010e2:	bf00      	nop
 80010e4:	3728      	adds	r7, #40	; 0x28
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40005400 	.word	0x40005400
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40020400 	.word	0x40020400

080010f8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b0a0      	sub	sp, #128	; 0x80
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	225c      	movs	r2, #92	; 0x5c
 8001116:	2100      	movs	r1, #0
 8001118:	4618      	mov	r0, r3
 800111a:	f00d ff01 	bl	800ef20 <memset>
  if(hi2s->Instance==SPI2)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a42      	ldr	r2, [pc, #264]	; (800122c <HAL_I2S_MspInit+0x134>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d17d      	bne.n	8001224 <HAL_I2S_MspInit+0x12c>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1;
 8001128:	2301      	movs	r3, #1
 800112a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 800112c:	2332      	movs	r3, #50	; 0x32
 800112e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLI2SP_DIV2;
 8001130:	2302      	movs	r3, #2
 8001132:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 8001134:	2308      	movs	r3, #8
 8001136:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001138:	2302      	movs	r3, #2
 800113a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800113c:	2302      	movs	r3, #2
 800113e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8001140:	2301      	movs	r3, #1
 8001142:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 8001144:	2300      	movs	r3, #0
 8001146:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001148:	f107 0310 	add.w	r3, r7, #16
 800114c:	4618      	mov	r0, r3
 800114e:	f002 f93f 	bl	80033d0 <HAL_RCCEx_PeriphCLKConfig>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <HAL_I2S_MspInit+0x64>
    {
      Error_Handler();
 8001158:	f7ff ff32 	bl	8000fc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800115c:	2300      	movs	r3, #0
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	4b33      	ldr	r3, [pc, #204]	; (8001230 <HAL_I2S_MspInit+0x138>)
 8001162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001164:	4a32      	ldr	r2, [pc, #200]	; (8001230 <HAL_I2S_MspInit+0x138>)
 8001166:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800116a:	6413      	str	r3, [r2, #64]	; 0x40
 800116c:	4b30      	ldr	r3, [pc, #192]	; (8001230 <HAL_I2S_MspInit+0x138>)
 800116e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001170:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001178:	2300      	movs	r3, #0
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	4b2c      	ldr	r3, [pc, #176]	; (8001230 <HAL_I2S_MspInit+0x138>)
 800117e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001180:	4a2b      	ldr	r2, [pc, #172]	; (8001230 <HAL_I2S_MspInit+0x138>)
 8001182:	f043 0302 	orr.w	r3, r3, #2
 8001186:	6313      	str	r3, [r2, #48]	; 0x30
 8001188:	4b29      	ldr	r3, [pc, #164]	; (8001230 <HAL_I2S_MspInit+0x138>)
 800118a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118c:	f003 0302 	and.w	r3, r3, #2
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001194:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8001198:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119a:	2302      	movs	r3, #2
 800119c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a2:	2300      	movs	r3, #0
 80011a4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011a6:	2305      	movs	r3, #5
 80011a8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011aa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80011ae:	4619      	mov	r1, r3
 80011b0:	4820      	ldr	r0, [pc, #128]	; (8001234 <HAL_I2S_MspInit+0x13c>)
 80011b2:	f001 f857 	bl	8002264 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80011b6:	4b20      	ldr	r3, [pc, #128]	; (8001238 <HAL_I2S_MspInit+0x140>)
 80011b8:	4a20      	ldr	r2, [pc, #128]	; (800123c <HAL_I2S_MspInit+0x144>)
 80011ba:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80011bc:	4b1e      	ldr	r3, [pc, #120]	; (8001238 <HAL_I2S_MspInit+0x140>)
 80011be:	2200      	movs	r2, #0
 80011c0:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011c2:	4b1d      	ldr	r3, [pc, #116]	; (8001238 <HAL_I2S_MspInit+0x140>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011c8:	4b1b      	ldr	r3, [pc, #108]	; (8001238 <HAL_I2S_MspInit+0x140>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011ce:	4b1a      	ldr	r3, [pc, #104]	; (8001238 <HAL_I2S_MspInit+0x140>)
 80011d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011d4:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011d6:	4b18      	ldr	r3, [pc, #96]	; (8001238 <HAL_I2S_MspInit+0x140>)
 80011d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011dc:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011de:	4b16      	ldr	r3, [pc, #88]	; (8001238 <HAL_I2S_MspInit+0x140>)
 80011e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011e4:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80011e6:	4b14      	ldr	r3, [pc, #80]	; (8001238 <HAL_I2S_MspInit+0x140>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011ec:	4b12      	ldr	r3, [pc, #72]	; (8001238 <HAL_I2S_MspInit+0x140>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011f2:	4b11      	ldr	r3, [pc, #68]	; (8001238 <HAL_I2S_MspInit+0x140>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80011f8:	480f      	ldr	r0, [pc, #60]	; (8001238 <HAL_I2S_MspInit+0x140>)
 80011fa:	f000 fc25 	bl	8001a48 <HAL_DMA_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <HAL_I2S_MspInit+0x110>
    {
      Error_Handler();
 8001204:	f7ff fedc 	bl	8000fc0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4a0b      	ldr	r2, [pc, #44]	; (8001238 <HAL_I2S_MspInit+0x140>)
 800120c:	63da      	str	r2, [r3, #60]	; 0x3c
 800120e:	4a0a      	ldr	r2, [pc, #40]	; (8001238 <HAL_I2S_MspInit+0x140>)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8001214:	2200      	movs	r2, #0
 8001216:	2105      	movs	r1, #5
 8001218:	2024      	movs	r0, #36	; 0x24
 800121a:	f000 fbcf 	bl	80019bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800121e:	2024      	movs	r0, #36	; 0x24
 8001220:	f000 fbe8 	bl	80019f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001224:	bf00      	nop
 8001226:	3780      	adds	r7, #128	; 0x80
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40003800 	.word	0x40003800
 8001230:	40023800 	.word	0x40023800
 8001234:	40020400 	.word	0x40020400
 8001238:	20000138 	.word	0x20000138
 800123c:	40026058 	.word	0x40026058

08001240 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b0a2      	sub	sp, #136	; 0x88
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001258:	f107 0318 	add.w	r3, r7, #24
 800125c:	225c      	movs	r2, #92	; 0x5c
 800125e:	2100      	movs	r1, #0
 8001260:	4618      	mov	r0, r3
 8001262:	f00d fe5d 	bl	800ef20 <memset>
  if(hsd->Instance==SDIO)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a74      	ldr	r2, [pc, #464]	; (800143c <HAL_SD_MspInit+0x1fc>)
 800126c:	4293      	cmp	r3, r2
 800126e:	f040 80e0 	bne.w	8001432 <HAL_SD_MspInit+0x1f2>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8001272:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001276:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001278:	2300      	movs	r3, #0
 800127a:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 800127c:	2300      	movs	r3, #0
 800127e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001280:	f107 0318 	add.w	r3, r7, #24
 8001284:	4618      	mov	r0, r3
 8001286:	f002 f8a3 	bl	80033d0 <HAL_RCCEx_PeriphCLKConfig>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001290:	f7ff fe96 	bl	8000fc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	4b69      	ldr	r3, [pc, #420]	; (8001440 <HAL_SD_MspInit+0x200>)
 800129a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129c:	4a68      	ldr	r2, [pc, #416]	; (8001440 <HAL_SD_MspInit+0x200>)
 800129e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012a2:	6453      	str	r3, [r2, #68]	; 0x44
 80012a4:	4b66      	ldr	r3, [pc, #408]	; (8001440 <HAL_SD_MspInit+0x200>)
 80012a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012ac:	617b      	str	r3, [r7, #20]
 80012ae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b0:	2300      	movs	r3, #0
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	4b62      	ldr	r3, [pc, #392]	; (8001440 <HAL_SD_MspInit+0x200>)
 80012b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b8:	4a61      	ldr	r2, [pc, #388]	; (8001440 <HAL_SD_MspInit+0x200>)
 80012ba:	f043 0304 	orr.w	r3, r3, #4
 80012be:	6313      	str	r3, [r2, #48]	; 0x30
 80012c0:	4b5f      	ldr	r3, [pc, #380]	; (8001440 <HAL_SD_MspInit+0x200>)
 80012c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c4:	f003 0304 	and.w	r3, r3, #4
 80012c8:	613b      	str	r3, [r7, #16]
 80012ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012cc:	2300      	movs	r3, #0
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	4b5b      	ldr	r3, [pc, #364]	; (8001440 <HAL_SD_MspInit+0x200>)
 80012d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d4:	4a5a      	ldr	r2, [pc, #360]	; (8001440 <HAL_SD_MspInit+0x200>)
 80012d6:	f043 0308 	orr.w	r3, r3, #8
 80012da:	6313      	str	r3, [r2, #48]	; 0x30
 80012dc:	4b58      	ldr	r3, [pc, #352]	; (8001440 <HAL_SD_MspInit+0x200>)
 80012de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e0:	f003 0308 	and.w	r3, r3, #8
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80012e8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80012ec:	677b      	str	r3, [r7, #116]	; 0x74
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ee:	2302      	movs	r3, #2
 80012f0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f6:	2303      	movs	r3, #3
 80012f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80012fc:	230c      	movs	r3, #12
 80012fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001302:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001306:	4619      	mov	r1, r3
 8001308:	484e      	ldr	r0, [pc, #312]	; (8001444 <HAL_SD_MspInit+0x204>)
 800130a:	f000 ffab 	bl	8002264 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800130e:	2304      	movs	r3, #4
 8001310:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001312:	2302      	movs	r3, #2
 8001314:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131a:	2303      	movs	r3, #3
 800131c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001320:	230c      	movs	r3, #12
 8001322:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001326:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800132a:	4619      	mov	r1, r3
 800132c:	4846      	ldr	r0, [pc, #280]	; (8001448 <HAL_SD_MspInit+0x208>)
 800132e:	f000 ff99 	bl	8002264 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001332:	4b46      	ldr	r3, [pc, #280]	; (800144c <HAL_SD_MspInit+0x20c>)
 8001334:	4a46      	ldr	r2, [pc, #280]	; (8001450 <HAL_SD_MspInit+0x210>)
 8001336:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001338:	4b44      	ldr	r3, [pc, #272]	; (800144c <HAL_SD_MspInit+0x20c>)
 800133a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800133e:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001340:	4b42      	ldr	r3, [pc, #264]	; (800144c <HAL_SD_MspInit+0x20c>)
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001346:	4b41      	ldr	r3, [pc, #260]	; (800144c <HAL_SD_MspInit+0x20c>)
 8001348:	2200      	movs	r2, #0
 800134a:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800134c:	4b3f      	ldr	r3, [pc, #252]	; (800144c <HAL_SD_MspInit+0x20c>)
 800134e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001352:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001354:	4b3d      	ldr	r3, [pc, #244]	; (800144c <HAL_SD_MspInit+0x20c>)
 8001356:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800135a:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800135c:	4b3b      	ldr	r3, [pc, #236]	; (800144c <HAL_SD_MspInit+0x20c>)
 800135e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001362:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001364:	4b39      	ldr	r3, [pc, #228]	; (800144c <HAL_SD_MspInit+0x20c>)
 8001366:	2220      	movs	r2, #32
 8001368:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800136a:	4b38      	ldr	r3, [pc, #224]	; (800144c <HAL_SD_MspInit+0x20c>)
 800136c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001370:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001372:	4b36      	ldr	r3, [pc, #216]	; (800144c <HAL_SD_MspInit+0x20c>)
 8001374:	2204      	movs	r2, #4
 8001376:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001378:	4b34      	ldr	r3, [pc, #208]	; (800144c <HAL_SD_MspInit+0x20c>)
 800137a:	2203      	movs	r2, #3
 800137c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800137e:	4b33      	ldr	r3, [pc, #204]	; (800144c <HAL_SD_MspInit+0x20c>)
 8001380:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001384:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001386:	4b31      	ldr	r3, [pc, #196]	; (800144c <HAL_SD_MspInit+0x20c>)
 8001388:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800138c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800138e:	482f      	ldr	r0, [pc, #188]	; (800144c <HAL_SD_MspInit+0x20c>)
 8001390:	f000 fb5a 	bl	8001a48 <HAL_DMA_Init>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <HAL_SD_MspInit+0x15e>
    {
      Error_Handler();
 800139a:	f7ff fe11 	bl	8000fc0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a2a      	ldr	r2, [pc, #168]	; (800144c <HAL_SD_MspInit+0x20c>)
 80013a2:	641a      	str	r2, [r3, #64]	; 0x40
 80013a4:	4a29      	ldr	r2, [pc, #164]	; (800144c <HAL_SD_MspInit+0x20c>)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80013aa:	4b2a      	ldr	r3, [pc, #168]	; (8001454 <HAL_SD_MspInit+0x214>)
 80013ac:	4a2a      	ldr	r2, [pc, #168]	; (8001458 <HAL_SD_MspInit+0x218>)
 80013ae:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80013b0:	4b28      	ldr	r3, [pc, #160]	; (8001454 <HAL_SD_MspInit+0x214>)
 80013b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013b6:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013b8:	4b26      	ldr	r3, [pc, #152]	; (8001454 <HAL_SD_MspInit+0x214>)
 80013ba:	2240      	movs	r2, #64	; 0x40
 80013bc:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013be:	4b25      	ldr	r3, [pc, #148]	; (8001454 <HAL_SD_MspInit+0x214>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013c4:	4b23      	ldr	r3, [pc, #140]	; (8001454 <HAL_SD_MspInit+0x214>)
 80013c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013ca:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80013cc:	4b21      	ldr	r3, [pc, #132]	; (8001454 <HAL_SD_MspInit+0x214>)
 80013ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013d2:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80013d4:	4b1f      	ldr	r3, [pc, #124]	; (8001454 <HAL_SD_MspInit+0x214>)
 80013d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013da:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80013dc:	4b1d      	ldr	r3, [pc, #116]	; (8001454 <HAL_SD_MspInit+0x214>)
 80013de:	2220      	movs	r2, #32
 80013e0:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80013e2:	4b1c      	ldr	r3, [pc, #112]	; (8001454 <HAL_SD_MspInit+0x214>)
 80013e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013e8:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80013ea:	4b1a      	ldr	r3, [pc, #104]	; (8001454 <HAL_SD_MspInit+0x214>)
 80013ec:	2204      	movs	r2, #4
 80013ee:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80013f0:	4b18      	ldr	r3, [pc, #96]	; (8001454 <HAL_SD_MspInit+0x214>)
 80013f2:	2203      	movs	r2, #3
 80013f4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80013f6:	4b17      	ldr	r3, [pc, #92]	; (8001454 <HAL_SD_MspInit+0x214>)
 80013f8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80013fc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80013fe:	4b15      	ldr	r3, [pc, #84]	; (8001454 <HAL_SD_MspInit+0x214>)
 8001400:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001404:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001406:	4813      	ldr	r0, [pc, #76]	; (8001454 <HAL_SD_MspInit+0x214>)
 8001408:	f000 fb1e 	bl	8001a48 <HAL_DMA_Init>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 8001412:	f7ff fdd5 	bl	8000fc0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a0e      	ldr	r2, [pc, #56]	; (8001454 <HAL_SD_MspInit+0x214>)
 800141a:	63da      	str	r2, [r3, #60]	; 0x3c
 800141c:	4a0d      	ldr	r2, [pc, #52]	; (8001454 <HAL_SD_MspInit+0x214>)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8001422:	2200      	movs	r2, #0
 8001424:	2105      	movs	r1, #5
 8001426:	2031      	movs	r0, #49	; 0x31
 8001428:	f000 fac8 	bl	80019bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800142c:	2031      	movs	r0, #49	; 0x31
 800142e:	f000 fae1 	bl	80019f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001432:	bf00      	nop
 8001434:	3788      	adds	r7, #136	; 0x88
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40012c00 	.word	0x40012c00
 8001440:	40023800 	.word	0x40023800
 8001444:	40020800 	.word	0x40020800
 8001448:	40020c00 	.word	0x40020c00
 800144c:	2000021c 	.word	0x2000021c
 8001450:	40026458 	.word	0x40026458
 8001454:	2000027c 	.word	0x2000027c
 8001458:	400264a0 	.word	0x400264a0

0800145c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08a      	sub	sp, #40	; 0x28
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a1d      	ldr	r2, [pc, #116]	; (80014f0 <HAL_UART_MspInit+0x94>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d133      	bne.n	80014e6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	613b      	str	r3, [r7, #16]
 8001482:	4b1c      	ldr	r3, [pc, #112]	; (80014f4 <HAL_UART_MspInit+0x98>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	4a1b      	ldr	r2, [pc, #108]	; (80014f4 <HAL_UART_MspInit+0x98>)
 8001488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800148c:	6413      	str	r3, [r2, #64]	; 0x40
 800148e:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <HAL_UART_MspInit+0x98>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001496:	613b      	str	r3, [r7, #16]
 8001498:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <HAL_UART_MspInit+0x98>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a14      	ldr	r2, [pc, #80]	; (80014f4 <HAL_UART_MspInit+0x98>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <HAL_UART_MspInit+0x98>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014b6:	230c      	movs	r3, #12
 80014b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ba:	2302      	movs	r3, #2
 80014bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c2:	2303      	movs	r3, #3
 80014c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014c6:	2307      	movs	r3, #7
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ca:	f107 0314 	add.w	r3, r7, #20
 80014ce:	4619      	mov	r1, r3
 80014d0:	4809      	ldr	r0, [pc, #36]	; (80014f8 <HAL_UART_MspInit+0x9c>)
 80014d2:	f000 fec7 	bl	8002264 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2105      	movs	r1, #5
 80014da:	2026      	movs	r0, #38	; 0x26
 80014dc:	f000 fa6e 	bl	80019bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014e0:	2026      	movs	r0, #38	; 0x26
 80014e2:	f000 fa87 	bl	80019f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014e6:	bf00      	nop
 80014e8:	3728      	adds	r7, #40	; 0x28
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40004400 	.word	0x40004400
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40020000 	.word	0x40020000

080014fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08c      	sub	sp, #48	; 0x30
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001504:	2300      	movs	r3, #0
 8001506:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001508:	2300      	movs	r3, #0
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800150c:	2300      	movs	r3, #0
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	4b2f      	ldr	r3, [pc, #188]	; (80015d0 <HAL_InitTick+0xd4>)
 8001512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001514:	4a2e      	ldr	r2, [pc, #184]	; (80015d0 <HAL_InitTick+0xd4>)
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	6453      	str	r3, [r2, #68]	; 0x44
 800151c:	4b2c      	ldr	r3, [pc, #176]	; (80015d0 <HAL_InitTick+0xd4>)
 800151e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001520:	f003 0301 	and.w	r3, r3, #1
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001528:	f107 020c 	add.w	r2, r7, #12
 800152c:	f107 0310 	add.w	r3, r7, #16
 8001530:	4611      	mov	r1, r2
 8001532:	4618      	mov	r0, r3
 8001534:	f001 ff1a 	bl	800336c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001538:	f001 ff04 	bl	8003344 <HAL_RCC_GetPCLK2Freq>
 800153c:	4603      	mov	r3, r0
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001544:	4a23      	ldr	r2, [pc, #140]	; (80015d4 <HAL_InitTick+0xd8>)
 8001546:	fba2 2303 	umull	r2, r3, r2, r3
 800154a:	0c9b      	lsrs	r3, r3, #18
 800154c:	3b01      	subs	r3, #1
 800154e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001550:	4b21      	ldr	r3, [pc, #132]	; (80015d8 <HAL_InitTick+0xdc>)
 8001552:	4a22      	ldr	r2, [pc, #136]	; (80015dc <HAL_InitTick+0xe0>)
 8001554:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001556:	4b20      	ldr	r3, [pc, #128]	; (80015d8 <HAL_InitTick+0xdc>)
 8001558:	f240 32e7 	movw	r2, #999	; 0x3e7
 800155c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800155e:	4a1e      	ldr	r2, [pc, #120]	; (80015d8 <HAL_InitTick+0xdc>)
 8001560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001562:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001564:	4b1c      	ldr	r3, [pc, #112]	; (80015d8 <HAL_InitTick+0xdc>)
 8001566:	2200      	movs	r2, #0
 8001568:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800156a:	4b1b      	ldr	r3, [pc, #108]	; (80015d8 <HAL_InitTick+0xdc>)
 800156c:	2200      	movs	r2, #0
 800156e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001570:	4b19      	ldr	r3, [pc, #100]	; (80015d8 <HAL_InitTick+0xdc>)
 8001572:	2200      	movs	r2, #0
 8001574:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001576:	4818      	ldr	r0, [pc, #96]	; (80015d8 <HAL_InitTick+0xdc>)
 8001578:	f004 fc87 	bl	8005e8a <HAL_TIM_Base_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001582:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001586:	2b00      	cmp	r3, #0
 8001588:	d11b      	bne.n	80015c2 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800158a:	4813      	ldr	r0, [pc, #76]	; (80015d8 <HAL_InitTick+0xdc>)
 800158c:	f004 fcd6 	bl	8005f3c <HAL_TIM_Base_Start_IT>
 8001590:	4603      	mov	r3, r0
 8001592:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001596:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800159a:	2b00      	cmp	r3, #0
 800159c:	d111      	bne.n	80015c2 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800159e:	2019      	movs	r0, #25
 80015a0:	f000 fa28 	bl	80019f4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b0f      	cmp	r3, #15
 80015a8:	d808      	bhi.n	80015bc <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80015aa:	2200      	movs	r2, #0
 80015ac:	6879      	ldr	r1, [r7, #4]
 80015ae:	2019      	movs	r0, #25
 80015b0:	f000 fa04 	bl	80019bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015b4:	4a0a      	ldr	r2, [pc, #40]	; (80015e0 <HAL_InitTick+0xe4>)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6013      	str	r3, [r2, #0]
 80015ba:	e002      	b.n	80015c2 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80015c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3730      	adds	r7, #48	; 0x30
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40023800 	.word	0x40023800
 80015d4:	431bde83 	.word	0x431bde83
 80015d8:	20000a9c 	.word	0x20000a9c
 80015dc:	40010000 	.word	0x40010000
 80015e0:	20000008 	.word	0x20000008

080015e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <NMI_Handler+0x4>

080015ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ee:	e7fe      	b.n	80015ee <HardFault_Handler+0x4>

080015f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <MemManage_Handler+0x4>

080015f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015fa:	e7fe      	b.n	80015fa <BusFault_Handler+0x4>

080015fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001600:	e7fe      	b.n	8001600 <UsageFault_Handler+0x4>

08001602 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001614:	4802      	ldr	r0, [pc, #8]	; (8001620 <DMA1_Stream3_IRQHandler+0x10>)
 8001616:	f000 fbaf 	bl	8001d78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000138 	.word	0x20000138

08001624 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001628:	4802      	ldr	r0, [pc, #8]	; (8001634 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800162a:	f004 fcf7 	bl	800601c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20000a9c 	.word	0x20000a9c

08001638 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 800163c:	4802      	ldr	r0, [pc, #8]	; (8001648 <SPI2_IRQHandler+0x10>)
 800163e:	f001 fb8b 	bl	8002d58 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	200000f0 	.word	0x200000f0

0800164c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001650:	4802      	ldr	r0, [pc, #8]	; (800165c <USART2_IRQHandler+0x10>)
 8001652:	f004 ff79 	bl	8006548 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	200002dc 	.word	0x200002dc

08001660 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001664:	4802      	ldr	r0, [pc, #8]	; (8001670 <SDIO_IRQHandler+0x10>)
 8001666:	f003 fb65 	bl	8004d34 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000198 	.word	0x20000198

08001674 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001678:	4802      	ldr	r0, [pc, #8]	; (8001684 <DMA2_Stream3_IRQHandler+0x10>)
 800167a:	f000 fb7d 	bl	8001d78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	2000021c 	.word	0x2000021c

08001688 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800168c:	4802      	ldr	r0, [pc, #8]	; (8001698 <DMA2_Stream6_IRQHandler+0x10>)
 800168e:	f000 fb73 	bl	8001d78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	2000027c 	.word	0x2000027c

0800169c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016a4:	4a14      	ldr	r2, [pc, #80]	; (80016f8 <_sbrk+0x5c>)
 80016a6:	4b15      	ldr	r3, [pc, #84]	; (80016fc <_sbrk+0x60>)
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016b0:	4b13      	ldr	r3, [pc, #76]	; (8001700 <_sbrk+0x64>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d102      	bne.n	80016be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016b8:	4b11      	ldr	r3, [pc, #68]	; (8001700 <_sbrk+0x64>)
 80016ba:	4a12      	ldr	r2, [pc, #72]	; (8001704 <_sbrk+0x68>)
 80016bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016be:	4b10      	ldr	r3, [pc, #64]	; (8001700 <_sbrk+0x64>)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4413      	add	r3, r2
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d207      	bcs.n	80016dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016cc:	f00d fbde 	bl	800ee8c <__errno>
 80016d0:	4603      	mov	r3, r0
 80016d2:	220c      	movs	r2, #12
 80016d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016da:	e009      	b.n	80016f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016dc:	4b08      	ldr	r3, [pc, #32]	; (8001700 <_sbrk+0x64>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016e2:	4b07      	ldr	r3, [pc, #28]	; (8001700 <_sbrk+0x64>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4413      	add	r3, r2
 80016ea:	4a05      	ldr	r2, [pc, #20]	; (8001700 <_sbrk+0x64>)
 80016ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ee:	68fb      	ldr	r3, [r7, #12]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20020000 	.word	0x20020000
 80016fc:	00000400 	.word	0x00000400
 8001700:	20000ae4 	.word	0x20000ae4
 8001704:	20005780 	.word	0x20005780

08001708 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800170c:	4b06      	ldr	r3, [pc, #24]	; (8001728 <SystemInit+0x20>)
 800170e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001712:	4a05      	ldr	r2, [pc, #20]	; (8001728 <SystemInit+0x20>)
 8001714:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001718:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800172c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001764 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001730:	480d      	ldr	r0, [pc, #52]	; (8001768 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001732:	490e      	ldr	r1, [pc, #56]	; (800176c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001734:	4a0e      	ldr	r2, [pc, #56]	; (8001770 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001736:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001738:	e002      	b.n	8001740 <LoopCopyDataInit>

0800173a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800173a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800173c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800173e:	3304      	adds	r3, #4

08001740 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001740:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001742:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001744:	d3f9      	bcc.n	800173a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001746:	4a0b      	ldr	r2, [pc, #44]	; (8001774 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001748:	4c0b      	ldr	r4, [pc, #44]	; (8001778 <LoopFillZerobss+0x26>)
  movs r3, #0
 800174a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800174c:	e001      	b.n	8001752 <LoopFillZerobss>

0800174e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800174e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001750:	3204      	adds	r2, #4

08001752 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001752:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001754:	d3fb      	bcc.n	800174e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001756:	f7ff ffd7 	bl	8001708 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800175a:	f00d fb9d 	bl	800ee98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800175e:	f7fe ff39 	bl	80005d4 <main>
  bx  lr    
 8001762:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001764:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001768:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800176c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001770:	0800fb98 	.word	0x0800fb98
  ldr r2, =_sbss
 8001774:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001778:	20005780 	.word	0x20005780

0800177c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800177c:	e7fe      	b.n	800177c <ADC_IRQHandler>
	...

08001780 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001784:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <HAL_Init+0x40>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a0d      	ldr	r2, [pc, #52]	; (80017c0 <HAL_Init+0x40>)
 800178a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800178e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001790:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <HAL_Init+0x40>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a0a      	ldr	r2, [pc, #40]	; (80017c0 <HAL_Init+0x40>)
 8001796:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800179a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800179c:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <HAL_Init+0x40>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a07      	ldr	r2, [pc, #28]	; (80017c0 <HAL_Init+0x40>)
 80017a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a8:	2003      	movs	r0, #3
 80017aa:	f000 f8fc 	bl	80019a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ae:	200f      	movs	r0, #15
 80017b0:	f7ff fea4 	bl	80014fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017b4:	f7ff fc0a 	bl	8000fcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40023c00 	.word	0x40023c00

080017c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017c8:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <HAL_IncTick+0x20>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	461a      	mov	r2, r3
 80017ce:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <HAL_IncTick+0x24>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4413      	add	r3, r2
 80017d4:	4a04      	ldr	r2, [pc, #16]	; (80017e8 <HAL_IncTick+0x24>)
 80017d6:	6013      	str	r3, [r2, #0]
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	2000000c 	.word	0x2000000c
 80017e8:	20000ae8 	.word	0x20000ae8

080017ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return uwTick;
 80017f0:	4b03      	ldr	r3, [pc, #12]	; (8001800 <HAL_GetTick+0x14>)
 80017f2:	681b      	ldr	r3, [r3, #0]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	20000ae8 	.word	0x20000ae8

08001804 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800180c:	f7ff ffee 	bl	80017ec <HAL_GetTick>
 8001810:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800181c:	d005      	beq.n	800182a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800181e:	4b0a      	ldr	r3, [pc, #40]	; (8001848 <HAL_Delay+0x44>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	461a      	mov	r2, r3
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	4413      	add	r3, r2
 8001828:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800182a:	bf00      	nop
 800182c:	f7ff ffde 	bl	80017ec <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	429a      	cmp	r2, r3
 800183a:	d8f7      	bhi.n	800182c <HAL_Delay+0x28>
  {
  }
}
 800183c:	bf00      	nop
 800183e:	bf00      	nop
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	2000000c 	.word	0x2000000c

0800184c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800185c:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <__NVIC_SetPriorityGrouping+0x44>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001862:	68ba      	ldr	r2, [r7, #8]
 8001864:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001868:	4013      	ands	r3, r2
 800186a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001874:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800187c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800187e:	4a04      	ldr	r2, [pc, #16]	; (8001890 <__NVIC_SetPriorityGrouping+0x44>)
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	60d3      	str	r3, [r2, #12]
}
 8001884:	bf00      	nop
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001898:	4b04      	ldr	r3, [pc, #16]	; (80018ac <__NVIC_GetPriorityGrouping+0x18>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	0a1b      	lsrs	r3, r3, #8
 800189e:	f003 0307 	and.w	r3, r3, #7
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	db0b      	blt.n	80018da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	f003 021f 	and.w	r2, r3, #31
 80018c8:	4907      	ldr	r1, [pc, #28]	; (80018e8 <__NVIC_EnableIRQ+0x38>)
 80018ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ce:	095b      	lsrs	r3, r3, #5
 80018d0:	2001      	movs	r0, #1
 80018d2:	fa00 f202 	lsl.w	r2, r0, r2
 80018d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	e000e100 	.word	0xe000e100

080018ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	6039      	str	r1, [r7, #0]
 80018f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	db0a      	blt.n	8001916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	b2da      	uxtb	r2, r3
 8001904:	490c      	ldr	r1, [pc, #48]	; (8001938 <__NVIC_SetPriority+0x4c>)
 8001906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190a:	0112      	lsls	r2, r2, #4
 800190c:	b2d2      	uxtb	r2, r2
 800190e:	440b      	add	r3, r1
 8001910:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001914:	e00a      	b.n	800192c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	b2da      	uxtb	r2, r3
 800191a:	4908      	ldr	r1, [pc, #32]	; (800193c <__NVIC_SetPriority+0x50>)
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	f003 030f 	and.w	r3, r3, #15
 8001922:	3b04      	subs	r3, #4
 8001924:	0112      	lsls	r2, r2, #4
 8001926:	b2d2      	uxtb	r2, r2
 8001928:	440b      	add	r3, r1
 800192a:	761a      	strb	r2, [r3, #24]
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	e000e100 	.word	0xe000e100
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001940:	b480      	push	{r7}
 8001942:	b089      	sub	sp, #36	; 0x24
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	f1c3 0307 	rsb	r3, r3, #7
 800195a:	2b04      	cmp	r3, #4
 800195c:	bf28      	it	cs
 800195e:	2304      	movcs	r3, #4
 8001960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	3304      	adds	r3, #4
 8001966:	2b06      	cmp	r3, #6
 8001968:	d902      	bls.n	8001970 <NVIC_EncodePriority+0x30>
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	3b03      	subs	r3, #3
 800196e:	e000      	b.n	8001972 <NVIC_EncodePriority+0x32>
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001974:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	43da      	mvns	r2, r3
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	401a      	ands	r2, r3
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001988:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	fa01 f303 	lsl.w	r3, r1, r3
 8001992:	43d9      	mvns	r1, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001998:	4313      	orrs	r3, r2
         );
}
 800199a:	4618      	mov	r0, r3
 800199c:	3724      	adds	r7, #36	; 0x24
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b082      	sub	sp, #8
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff ff4c 	bl	800184c <__NVIC_SetPriorityGrouping>
}
 80019b4:	bf00      	nop
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
 80019c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019ce:	f7ff ff61 	bl	8001894 <__NVIC_GetPriorityGrouping>
 80019d2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	68b9      	ldr	r1, [r7, #8]
 80019d8:	6978      	ldr	r0, [r7, #20]
 80019da:	f7ff ffb1 	bl	8001940 <NVIC_EncodePriority>
 80019de:	4602      	mov	r2, r0
 80019e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019e4:	4611      	mov	r1, r2
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff ff80 	bl	80018ec <__NVIC_SetPriority>
}
 80019ec:	bf00      	nop
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff ff54 	bl	80018b0 <__NVIC_EnableIRQ>
}
 8001a08:	bf00      	nop
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e00e      	b.n	8001a40 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	795b      	ldrb	r3, [r3, #5]
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d105      	bne.n	8001a38 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff faf6 	bl	8001024 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a54:	f7ff feca 	bl	80017ec <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d101      	bne.n	8001a64 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e099      	b.n	8001b98 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2202      	movs	r2, #2
 8001a68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f022 0201 	bic.w	r2, r2, #1
 8001a82:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a84:	e00f      	b.n	8001aa6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a86:	f7ff feb1 	bl	80017ec <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b05      	cmp	r3, #5
 8001a92:	d908      	bls.n	8001aa6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2220      	movs	r2, #32
 8001a98:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2203      	movs	r2, #3
 8001a9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e078      	b.n	8001b98 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1e8      	bne.n	8001a86 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	4b38      	ldr	r3, [pc, #224]	; (8001ba0 <HAL_DMA_Init+0x158>)
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685a      	ldr	r2, [r3, #4]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ad2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ade:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a1b      	ldr	r3, [r3, #32]
 8001af0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001af2:	697a      	ldr	r2, [r7, #20]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d107      	bne.n	8001b10 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	697a      	ldr	r2, [r7, #20]
 8001b16:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	f023 0307 	bic.w	r3, r3, #7
 8001b26:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2c:	697a      	ldr	r2, [r7, #20]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	d117      	bne.n	8001b6a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d00e      	beq.n	8001b6a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 fb0d 	bl	800216c <DMA_CheckFifoParam>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d008      	beq.n	8001b6a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2240      	movs	r2, #64	; 0x40
 8001b5c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2201      	movs	r2, #1
 8001b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b66:	2301      	movs	r3, #1
 8001b68:	e016      	b.n	8001b98 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	697a      	ldr	r2, [r7, #20]
 8001b70:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 fac4 	bl	8002100 <DMA_CalcBaseAndBitshift>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b80:	223f      	movs	r2, #63	; 0x3f
 8001b82:	409a      	lsls	r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2201      	movs	r2, #1
 8001b92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	f010803f 	.word	0xf010803f

08001ba4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
 8001bb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d101      	bne.n	8001bca <HAL_DMA_Start_IT+0x26>
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	e040      	b.n	8001c4c <HAL_DMA_Start_IT+0xa8>
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d12f      	bne.n	8001c3e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2202      	movs	r2, #2
 8001be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2200      	movs	r2, #0
 8001bea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	68b9      	ldr	r1, [r7, #8]
 8001bf2:	68f8      	ldr	r0, [r7, #12]
 8001bf4:	f000 fa56 	bl	80020a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bfc:	223f      	movs	r2, #63	; 0x3f
 8001bfe:	409a      	lsls	r2, r3
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f042 0216 	orr.w	r2, r2, #22
 8001c12:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d007      	beq.n	8001c2c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 0208 	orr.w	r2, r2, #8
 8001c2a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f042 0201 	orr.w	r2, r2, #1
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	e005      	b.n	8001c4a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c46:	2302      	movs	r3, #2
 8001c48:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3718      	adds	r7, #24
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c60:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c62:	f7ff fdc3 	bl	80017ec <HAL_GetTick>
 8001c66:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d008      	beq.n	8001c86 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2280      	movs	r2, #128	; 0x80
 8001c78:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e052      	b.n	8001d2c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f022 0216 	bic.w	r2, r2, #22
 8001c94:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	695a      	ldr	r2, [r3, #20]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ca4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d103      	bne.n	8001cb6 <HAL_DMA_Abort+0x62>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d007      	beq.n	8001cc6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f022 0208 	bic.w	r2, r2, #8
 8001cc4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f022 0201 	bic.w	r2, r2, #1
 8001cd4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cd6:	e013      	b.n	8001d00 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cd8:	f7ff fd88 	bl	80017ec <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b05      	cmp	r3, #5
 8001ce4:	d90c      	bls.n	8001d00 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2220      	movs	r2, #32
 8001cea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2203      	movs	r2, #3
 8001cf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e015      	b.n	8001d2c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1e4      	bne.n	8001cd8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d12:	223f      	movs	r2, #63	; 0x3f
 8001d14:	409a      	lsls	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d004      	beq.n	8001d52 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2280      	movs	r2, #128	; 0x80
 8001d4c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e00c      	b.n	8001d6c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2205      	movs	r2, #5
 8001d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f022 0201 	bic.w	r2, r2, #1
 8001d68:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d80:	2300      	movs	r3, #0
 8001d82:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d84:	4b8e      	ldr	r3, [pc, #568]	; (8001fc0 <HAL_DMA_IRQHandler+0x248>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a8e      	ldr	r2, [pc, #568]	; (8001fc4 <HAL_DMA_IRQHandler+0x24c>)
 8001d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8e:	0a9b      	lsrs	r3, r3, #10
 8001d90:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d96:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da2:	2208      	movs	r2, #8
 8001da4:	409a      	lsls	r2, r3
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	4013      	ands	r3, r2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d01a      	beq.n	8001de4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0304 	and.w	r3, r3, #4
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d013      	beq.n	8001de4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f022 0204 	bic.w	r2, r2, #4
 8001dca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd0:	2208      	movs	r2, #8
 8001dd2:	409a      	lsls	r2, r3
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ddc:	f043 0201 	orr.w	r2, r3, #1
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de8:	2201      	movs	r2, #1
 8001dea:	409a      	lsls	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	4013      	ands	r3, r2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d012      	beq.n	8001e1a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d00b      	beq.n	8001e1a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e06:	2201      	movs	r2, #1
 8001e08:	409a      	lsls	r2, r3
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e12:	f043 0202 	orr.w	r2, r3, #2
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e1e:	2204      	movs	r2, #4
 8001e20:	409a      	lsls	r2, r3
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	4013      	ands	r3, r2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d012      	beq.n	8001e50 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d00b      	beq.n	8001e50 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e3c:	2204      	movs	r2, #4
 8001e3e:	409a      	lsls	r2, r3
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e48:	f043 0204 	orr.w	r2, r3, #4
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e54:	2210      	movs	r2, #16
 8001e56:	409a      	lsls	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d043      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0308 	and.w	r3, r3, #8
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d03c      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e72:	2210      	movs	r2, #16
 8001e74:	409a      	lsls	r2, r3
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d018      	beq.n	8001eba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d108      	bne.n	8001ea8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d024      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	4798      	blx	r3
 8001ea6:	e01f      	b.n	8001ee8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d01b      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	4798      	blx	r3
 8001eb8:	e016      	b.n	8001ee8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d107      	bne.n	8001ed8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 0208 	bic.w	r2, r2, #8
 8001ed6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eec:	2220      	movs	r2, #32
 8001eee:	409a      	lsls	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f000 808f 	beq.w	8002018 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0310 	and.w	r3, r3, #16
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	f000 8087 	beq.w	8002018 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0e:	2220      	movs	r2, #32
 8001f10:	409a      	lsls	r2, r3
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b05      	cmp	r3, #5
 8001f20:	d136      	bne.n	8001f90 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 0216 	bic.w	r2, r2, #22
 8001f30:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	695a      	ldr	r2, [r3, #20]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f40:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d103      	bne.n	8001f52 <HAL_DMA_IRQHandler+0x1da>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d007      	beq.n	8001f62 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 0208 	bic.w	r2, r2, #8
 8001f60:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f66:	223f      	movs	r2, #63	; 0x3f
 8001f68:	409a      	lsls	r2, r3
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d07e      	beq.n	8002084 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	4798      	blx	r3
        }
        return;
 8001f8e:	e079      	b.n	8002084 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d01d      	beq.n	8001fda <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d10d      	bne.n	8001fc8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d031      	beq.n	8002018 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	4798      	blx	r3
 8001fbc:	e02c      	b.n	8002018 <HAL_DMA_IRQHandler+0x2a0>
 8001fbe:	bf00      	nop
 8001fc0:	20000004 	.word	0x20000004
 8001fc4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d023      	beq.n	8002018 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	4798      	blx	r3
 8001fd8:	e01e      	b.n	8002018 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d10f      	bne.n	8002008 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f022 0210 	bic.w	r2, r2, #16
 8001ff6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800201c:	2b00      	cmp	r3, #0
 800201e:	d032      	beq.n	8002086 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	2b00      	cmp	r3, #0
 800202a:	d022      	beq.n	8002072 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2205      	movs	r2, #5
 8002030:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 0201 	bic.w	r2, r2, #1
 8002042:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	3301      	adds	r3, #1
 8002048:	60bb      	str	r3, [r7, #8]
 800204a:	697a      	ldr	r2, [r7, #20]
 800204c:	429a      	cmp	r2, r3
 800204e:	d307      	bcc.n	8002060 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1f2      	bne.n	8002044 <HAL_DMA_IRQHandler+0x2cc>
 800205e:	e000      	b.n	8002062 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002060:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2201      	movs	r2, #1
 8002066:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002076:	2b00      	cmp	r3, #0
 8002078:	d005      	beq.n	8002086 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	4798      	blx	r3
 8002082:	e000      	b.n	8002086 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002084:	bf00      	nop
    }
  }
}
 8002086:	3718      	adds	r7, #24
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002098:	4618      	mov	r0, r3
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
 80020b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	2b40      	cmp	r3, #64	; 0x40
 80020d0:	d108      	bne.n	80020e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80020e2:	e007      	b.n	80020f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68ba      	ldr	r2, [r7, #8]
 80020ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	60da      	str	r2, [r3, #12]
}
 80020f4:	bf00      	nop
 80020f6:	3714      	adds	r7, #20
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	b2db      	uxtb	r3, r3
 800210e:	3b10      	subs	r3, #16
 8002110:	4a14      	ldr	r2, [pc, #80]	; (8002164 <DMA_CalcBaseAndBitshift+0x64>)
 8002112:	fba2 2303 	umull	r2, r3, r2, r3
 8002116:	091b      	lsrs	r3, r3, #4
 8002118:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800211a:	4a13      	ldr	r2, [pc, #76]	; (8002168 <DMA_CalcBaseAndBitshift+0x68>)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	4413      	add	r3, r2
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	461a      	mov	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2b03      	cmp	r3, #3
 800212c:	d909      	bls.n	8002142 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002136:	f023 0303 	bic.w	r3, r3, #3
 800213a:	1d1a      	adds	r2, r3, #4
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	659a      	str	r2, [r3, #88]	; 0x58
 8002140:	e007      	b.n	8002152 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800214a:	f023 0303 	bic.w	r3, r3, #3
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002156:	4618      	mov	r0, r3
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	aaaaaaab 	.word	0xaaaaaaab
 8002168:	0800fa58 	.word	0x0800fa58

0800216c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002174:	2300      	movs	r3, #0
 8002176:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d11f      	bne.n	80021c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	2b03      	cmp	r3, #3
 800218a:	d856      	bhi.n	800223a <DMA_CheckFifoParam+0xce>
 800218c:	a201      	add	r2, pc, #4	; (adr r2, 8002194 <DMA_CheckFifoParam+0x28>)
 800218e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002192:	bf00      	nop
 8002194:	080021a5 	.word	0x080021a5
 8002198:	080021b7 	.word	0x080021b7
 800219c:	080021a5 	.word	0x080021a5
 80021a0:	0800223b 	.word	0x0800223b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d046      	beq.n	800223e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021b4:	e043      	b.n	800223e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021be:	d140      	bne.n	8002242 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021c4:	e03d      	b.n	8002242 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021ce:	d121      	bne.n	8002214 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	2b03      	cmp	r3, #3
 80021d4:	d837      	bhi.n	8002246 <DMA_CheckFifoParam+0xda>
 80021d6:	a201      	add	r2, pc, #4	; (adr r2, 80021dc <DMA_CheckFifoParam+0x70>)
 80021d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021dc:	080021ed 	.word	0x080021ed
 80021e0:	080021f3 	.word	0x080021f3
 80021e4:	080021ed 	.word	0x080021ed
 80021e8:	08002205 	.word	0x08002205
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	73fb      	strb	r3, [r7, #15]
      break;
 80021f0:	e030      	b.n	8002254 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d025      	beq.n	800224a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002202:	e022      	b.n	800224a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002208:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800220c:	d11f      	bne.n	800224e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002212:	e01c      	b.n	800224e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	2b02      	cmp	r3, #2
 8002218:	d903      	bls.n	8002222 <DMA_CheckFifoParam+0xb6>
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	2b03      	cmp	r3, #3
 800221e:	d003      	beq.n	8002228 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002220:	e018      	b.n	8002254 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	73fb      	strb	r3, [r7, #15]
      break;
 8002226:	e015      	b.n	8002254 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d00e      	beq.n	8002252 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	73fb      	strb	r3, [r7, #15]
      break;
 8002238:	e00b      	b.n	8002252 <DMA_CheckFifoParam+0xe6>
      break;
 800223a:	bf00      	nop
 800223c:	e00a      	b.n	8002254 <DMA_CheckFifoParam+0xe8>
      break;
 800223e:	bf00      	nop
 8002240:	e008      	b.n	8002254 <DMA_CheckFifoParam+0xe8>
      break;
 8002242:	bf00      	nop
 8002244:	e006      	b.n	8002254 <DMA_CheckFifoParam+0xe8>
      break;
 8002246:	bf00      	nop
 8002248:	e004      	b.n	8002254 <DMA_CheckFifoParam+0xe8>
      break;
 800224a:	bf00      	nop
 800224c:	e002      	b.n	8002254 <DMA_CheckFifoParam+0xe8>
      break;   
 800224e:	bf00      	nop
 8002250:	e000      	b.n	8002254 <DMA_CheckFifoParam+0xe8>
      break;
 8002252:	bf00      	nop
    }
  } 
  
  return status; 
 8002254:	7bfb      	ldrb	r3, [r7, #15]
}
 8002256:	4618      	mov	r0, r3
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop

08002264 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002264:	b480      	push	{r7}
 8002266:	b089      	sub	sp, #36	; 0x24
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800226e:	2300      	movs	r3, #0
 8002270:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002272:	2300      	movs	r3, #0
 8002274:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002276:	2300      	movs	r3, #0
 8002278:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800227a:	2300      	movs	r3, #0
 800227c:	61fb      	str	r3, [r7, #28]
 800227e:	e165      	b.n	800254c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002280:	2201      	movs	r2, #1
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	4013      	ands	r3, r2
 8002292:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	429a      	cmp	r2, r3
 800229a:	f040 8154 	bne.w	8002546 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f003 0303 	and.w	r3, r3, #3
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d005      	beq.n	80022b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d130      	bne.n	8002318 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	2203      	movs	r2, #3
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	43db      	mvns	r3, r3
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	4013      	ands	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	68da      	ldr	r2, [r3, #12]
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4313      	orrs	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022ec:	2201      	movs	r2, #1
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	091b      	lsrs	r3, r3, #4
 8002302:	f003 0201 	and.w	r2, r3, #1
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f003 0303 	and.w	r3, r3, #3
 8002320:	2b03      	cmp	r3, #3
 8002322:	d017      	beq.n	8002354 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	2203      	movs	r2, #3
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	43db      	mvns	r3, r3
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4013      	ands	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4313      	orrs	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f003 0303 	and.w	r3, r3, #3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d123      	bne.n	80023a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	08da      	lsrs	r2, r3, #3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3208      	adds	r2, #8
 8002368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800236c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	f003 0307 	and.w	r3, r3, #7
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	220f      	movs	r2, #15
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	43db      	mvns	r3, r3
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	4013      	ands	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	691a      	ldr	r2, [r3, #16]
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4313      	orrs	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	08da      	lsrs	r2, r3, #3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	3208      	adds	r2, #8
 80023a2:	69b9      	ldr	r1, [r7, #24]
 80023a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	2203      	movs	r2, #3
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	43db      	mvns	r3, r3
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	4013      	ands	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f003 0203 	and.w	r2, r3, #3
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f000 80ae 	beq.w	8002546 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	4b5d      	ldr	r3, [pc, #372]	; (8002564 <HAL_GPIO_Init+0x300>)
 80023f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f2:	4a5c      	ldr	r2, [pc, #368]	; (8002564 <HAL_GPIO_Init+0x300>)
 80023f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023f8:	6453      	str	r3, [r2, #68]	; 0x44
 80023fa:	4b5a      	ldr	r3, [pc, #360]	; (8002564 <HAL_GPIO_Init+0x300>)
 80023fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002406:	4a58      	ldr	r2, [pc, #352]	; (8002568 <HAL_GPIO_Init+0x304>)
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	089b      	lsrs	r3, r3, #2
 800240c:	3302      	adds	r3, #2
 800240e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002412:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	f003 0303 	and.w	r3, r3, #3
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	220f      	movs	r2, #15
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	43db      	mvns	r3, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4013      	ands	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a4f      	ldr	r2, [pc, #316]	; (800256c <HAL_GPIO_Init+0x308>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d025      	beq.n	800247e <HAL_GPIO_Init+0x21a>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a4e      	ldr	r2, [pc, #312]	; (8002570 <HAL_GPIO_Init+0x30c>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d01f      	beq.n	800247a <HAL_GPIO_Init+0x216>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a4d      	ldr	r2, [pc, #308]	; (8002574 <HAL_GPIO_Init+0x310>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d019      	beq.n	8002476 <HAL_GPIO_Init+0x212>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a4c      	ldr	r2, [pc, #304]	; (8002578 <HAL_GPIO_Init+0x314>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d013      	beq.n	8002472 <HAL_GPIO_Init+0x20e>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a4b      	ldr	r2, [pc, #300]	; (800257c <HAL_GPIO_Init+0x318>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d00d      	beq.n	800246e <HAL_GPIO_Init+0x20a>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a4a      	ldr	r2, [pc, #296]	; (8002580 <HAL_GPIO_Init+0x31c>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d007      	beq.n	800246a <HAL_GPIO_Init+0x206>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a49      	ldr	r2, [pc, #292]	; (8002584 <HAL_GPIO_Init+0x320>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d101      	bne.n	8002466 <HAL_GPIO_Init+0x202>
 8002462:	2306      	movs	r3, #6
 8002464:	e00c      	b.n	8002480 <HAL_GPIO_Init+0x21c>
 8002466:	2307      	movs	r3, #7
 8002468:	e00a      	b.n	8002480 <HAL_GPIO_Init+0x21c>
 800246a:	2305      	movs	r3, #5
 800246c:	e008      	b.n	8002480 <HAL_GPIO_Init+0x21c>
 800246e:	2304      	movs	r3, #4
 8002470:	e006      	b.n	8002480 <HAL_GPIO_Init+0x21c>
 8002472:	2303      	movs	r3, #3
 8002474:	e004      	b.n	8002480 <HAL_GPIO_Init+0x21c>
 8002476:	2302      	movs	r3, #2
 8002478:	e002      	b.n	8002480 <HAL_GPIO_Init+0x21c>
 800247a:	2301      	movs	r3, #1
 800247c:	e000      	b.n	8002480 <HAL_GPIO_Init+0x21c>
 800247e:	2300      	movs	r3, #0
 8002480:	69fa      	ldr	r2, [r7, #28]
 8002482:	f002 0203 	and.w	r2, r2, #3
 8002486:	0092      	lsls	r2, r2, #2
 8002488:	4093      	lsls	r3, r2
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4313      	orrs	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002490:	4935      	ldr	r1, [pc, #212]	; (8002568 <HAL_GPIO_Init+0x304>)
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	089b      	lsrs	r3, r3, #2
 8002496:	3302      	adds	r3, #2
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800249e:	4b3a      	ldr	r3, [pc, #232]	; (8002588 <HAL_GPIO_Init+0x324>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	43db      	mvns	r3, r3
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4013      	ands	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	4313      	orrs	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024c2:	4a31      	ldr	r2, [pc, #196]	; (8002588 <HAL_GPIO_Init+0x324>)
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024c8:	4b2f      	ldr	r3, [pc, #188]	; (8002588 <HAL_GPIO_Init+0x324>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	43db      	mvns	r3, r3
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4013      	ands	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d003      	beq.n	80024ec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024ec:	4a26      	ldr	r2, [pc, #152]	; (8002588 <HAL_GPIO_Init+0x324>)
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024f2:	4b25      	ldr	r3, [pc, #148]	; (8002588 <HAL_GPIO_Init+0x324>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	43db      	mvns	r3, r3
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	4013      	ands	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	4313      	orrs	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002516:	4a1c      	ldr	r2, [pc, #112]	; (8002588 <HAL_GPIO_Init+0x324>)
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800251c:	4b1a      	ldr	r3, [pc, #104]	; (8002588 <HAL_GPIO_Init+0x324>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	43db      	mvns	r3, r3
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4013      	ands	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d003      	beq.n	8002540 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	4313      	orrs	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002540:	4a11      	ldr	r2, [pc, #68]	; (8002588 <HAL_GPIO_Init+0x324>)
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	3301      	adds	r3, #1
 800254a:	61fb      	str	r3, [r7, #28]
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	2b0f      	cmp	r3, #15
 8002550:	f67f ae96 	bls.w	8002280 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002554:	bf00      	nop
 8002556:	bf00      	nop
 8002558:	3724      	adds	r7, #36	; 0x24
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	40023800 	.word	0x40023800
 8002568:	40013800 	.word	0x40013800
 800256c:	40020000 	.word	0x40020000
 8002570:	40020400 	.word	0x40020400
 8002574:	40020800 	.word	0x40020800
 8002578:	40020c00 	.word	0x40020c00
 800257c:	40021000 	.word	0x40021000
 8002580:	40021400 	.word	0x40021400
 8002584:	40021800 	.word	0x40021800
 8002588:	40013c00 	.word	0x40013c00

0800258c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	460b      	mov	r3, r1
 8002596:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	691a      	ldr	r2, [r3, #16]
 800259c:	887b      	ldrh	r3, [r7, #2]
 800259e:	4013      	ands	r3, r2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d002      	beq.n	80025aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025a4:	2301      	movs	r3, #1
 80025a6:	73fb      	strb	r3, [r7, #15]
 80025a8:	e001      	b.n	80025ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025aa:	2300      	movs	r3, #0
 80025ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3714      	adds	r7, #20
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	460b      	mov	r3, r1
 80025c6:	807b      	strh	r3, [r7, #2]
 80025c8:	4613      	mov	r3, r2
 80025ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025cc:	787b      	ldrb	r3, [r7, #1]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025d2:	887a      	ldrh	r2, [r7, #2]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025d8:	e003      	b.n	80025e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025da:	887b      	ldrh	r3, [r7, #2]
 80025dc:	041a      	lsls	r2, r3, #16
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	619a      	str	r2, [r3, #24]
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
	...

080025f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e12b      	b.n	800285a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d106      	bne.n	800261c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f7fe fd26 	bl	8001068 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2224      	movs	r2, #36	; 0x24
 8002620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f022 0201 	bic.w	r2, r2, #1
 8002632:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002642:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002652:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002654:	f000 fe62 	bl	800331c <HAL_RCC_GetPCLK1Freq>
 8002658:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	4a81      	ldr	r2, [pc, #516]	; (8002864 <HAL_I2C_Init+0x274>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d807      	bhi.n	8002674 <HAL_I2C_Init+0x84>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	4a80      	ldr	r2, [pc, #512]	; (8002868 <HAL_I2C_Init+0x278>)
 8002668:	4293      	cmp	r3, r2
 800266a:	bf94      	ite	ls
 800266c:	2301      	movls	r3, #1
 800266e:	2300      	movhi	r3, #0
 8002670:	b2db      	uxtb	r3, r3
 8002672:	e006      	b.n	8002682 <HAL_I2C_Init+0x92>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	4a7d      	ldr	r2, [pc, #500]	; (800286c <HAL_I2C_Init+0x27c>)
 8002678:	4293      	cmp	r3, r2
 800267a:	bf94      	ite	ls
 800267c:	2301      	movls	r3, #1
 800267e:	2300      	movhi	r3, #0
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e0e7      	b.n	800285a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	4a78      	ldr	r2, [pc, #480]	; (8002870 <HAL_I2C_Init+0x280>)
 800268e:	fba2 2303 	umull	r2, r3, r2, r3
 8002692:	0c9b      	lsrs	r3, r3, #18
 8002694:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68ba      	ldr	r2, [r7, #8]
 80026a6:	430a      	orrs	r2, r1
 80026a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6a1b      	ldr	r3, [r3, #32]
 80026b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	4a6a      	ldr	r2, [pc, #424]	; (8002864 <HAL_I2C_Init+0x274>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d802      	bhi.n	80026c4 <HAL_I2C_Init+0xd4>
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	3301      	adds	r3, #1
 80026c2:	e009      	b.n	80026d8 <HAL_I2C_Init+0xe8>
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026ca:	fb02 f303 	mul.w	r3, r2, r3
 80026ce:	4a69      	ldr	r2, [pc, #420]	; (8002874 <HAL_I2C_Init+0x284>)
 80026d0:	fba2 2303 	umull	r2, r3, r2, r3
 80026d4:	099b      	lsrs	r3, r3, #6
 80026d6:	3301      	adds	r3, #1
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	6812      	ldr	r2, [r2, #0]
 80026dc:	430b      	orrs	r3, r1
 80026de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80026ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	495c      	ldr	r1, [pc, #368]	; (8002864 <HAL_I2C_Init+0x274>)
 80026f4:	428b      	cmp	r3, r1
 80026f6:	d819      	bhi.n	800272c <HAL_I2C_Init+0x13c>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	1e59      	subs	r1, r3, #1
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	fbb1 f3f3 	udiv	r3, r1, r3
 8002706:	1c59      	adds	r1, r3, #1
 8002708:	f640 73fc 	movw	r3, #4092	; 0xffc
 800270c:	400b      	ands	r3, r1
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00a      	beq.n	8002728 <HAL_I2C_Init+0x138>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	1e59      	subs	r1, r3, #1
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002720:	3301      	adds	r3, #1
 8002722:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002726:	e051      	b.n	80027cc <HAL_I2C_Init+0x1dc>
 8002728:	2304      	movs	r3, #4
 800272a:	e04f      	b.n	80027cc <HAL_I2C_Init+0x1dc>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d111      	bne.n	8002758 <HAL_I2C_Init+0x168>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	1e58      	subs	r0, r3, #1
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6859      	ldr	r1, [r3, #4]
 800273c:	460b      	mov	r3, r1
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	440b      	add	r3, r1
 8002742:	fbb0 f3f3 	udiv	r3, r0, r3
 8002746:	3301      	adds	r3, #1
 8002748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800274c:	2b00      	cmp	r3, #0
 800274e:	bf0c      	ite	eq
 8002750:	2301      	moveq	r3, #1
 8002752:	2300      	movne	r3, #0
 8002754:	b2db      	uxtb	r3, r3
 8002756:	e012      	b.n	800277e <HAL_I2C_Init+0x18e>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	1e58      	subs	r0, r3, #1
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6859      	ldr	r1, [r3, #4]
 8002760:	460b      	mov	r3, r1
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	440b      	add	r3, r1
 8002766:	0099      	lsls	r1, r3, #2
 8002768:	440b      	add	r3, r1
 800276a:	fbb0 f3f3 	udiv	r3, r0, r3
 800276e:	3301      	adds	r3, #1
 8002770:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002774:	2b00      	cmp	r3, #0
 8002776:	bf0c      	ite	eq
 8002778:	2301      	moveq	r3, #1
 800277a:	2300      	movne	r3, #0
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <HAL_I2C_Init+0x196>
 8002782:	2301      	movs	r3, #1
 8002784:	e022      	b.n	80027cc <HAL_I2C_Init+0x1dc>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10e      	bne.n	80027ac <HAL_I2C_Init+0x1bc>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	1e58      	subs	r0, r3, #1
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6859      	ldr	r1, [r3, #4]
 8002796:	460b      	mov	r3, r1
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	440b      	add	r3, r1
 800279c:	fbb0 f3f3 	udiv	r3, r0, r3
 80027a0:	3301      	adds	r3, #1
 80027a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027aa:	e00f      	b.n	80027cc <HAL_I2C_Init+0x1dc>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	1e58      	subs	r0, r3, #1
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6859      	ldr	r1, [r3, #4]
 80027b4:	460b      	mov	r3, r1
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	440b      	add	r3, r1
 80027ba:	0099      	lsls	r1, r3, #2
 80027bc:	440b      	add	r3, r1
 80027be:	fbb0 f3f3 	udiv	r3, r0, r3
 80027c2:	3301      	adds	r3, #1
 80027c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027cc:	6879      	ldr	r1, [r7, #4]
 80027ce:	6809      	ldr	r1, [r1, #0]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	69da      	ldr	r2, [r3, #28]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	430a      	orrs	r2, r1
 80027ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80027fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	6911      	ldr	r1, [r2, #16]
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	68d2      	ldr	r2, [r2, #12]
 8002806:	4311      	orrs	r1, r2
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6812      	ldr	r2, [r2, #0]
 800280c:	430b      	orrs	r3, r1
 800280e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	695a      	ldr	r2, [r3, #20]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	430a      	orrs	r2, r1
 800282a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f042 0201 	orr.w	r2, r2, #1
 800283a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2220      	movs	r2, #32
 8002846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	000186a0 	.word	0x000186a0
 8002868:	001e847f 	.word	0x001e847f
 800286c:	003d08ff 	.word	0x003d08ff
 8002870:	431bde83 	.word	0x431bde83
 8002874:	10624dd3 	.word	0x10624dd3

08002878 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b088      	sub	sp, #32
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e0e1      	b.n	8002a4e <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d109      	bne.n	80028aa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a6d      	ldr	r2, [pc, #436]	; (8002a58 <HAL_I2S_Init+0x1e0>)
 80028a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f7fe fc27 	bl	80010f8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2202      	movs	r2, #2
 80028ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	69db      	ldr	r3, [r3, #28]
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6812      	ldr	r2, [r2, #0]
 80028bc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80028c0:	f023 030f 	bic.w	r3, r3, #15
 80028c4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2202      	movs	r2, #2
 80028cc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d06f      	beq.n	80029b6 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d102      	bne.n	80028e4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80028de:	2310      	movs	r3, #16
 80028e0:	617b      	str	r3, [r7, #20]
 80028e2:	e001      	b.n	80028e8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80028e4:	2320      	movs	r3, #32
 80028e6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	2b20      	cmp	r3, #32
 80028ee:	d802      	bhi.n	80028f6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a58      	ldr	r2, [pc, #352]	; (8002a5c <HAL_I2S_Init+0x1e4>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d004      	beq.n	800290a <HAL_I2S_Init+0x92>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a56      	ldr	r2, [pc, #344]	; (8002a60 <HAL_I2S_Init+0x1e8>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d104      	bne.n	8002914 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 800290a:	2001      	movs	r0, #1
 800290c:	f001 f88a 	bl	8003a24 <HAL_RCCEx_GetPeriphCLKFreq>
 8002910:	60f8      	str	r0, [r7, #12]
 8002912:	e003      	b.n	800291c <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8002914:	2002      	movs	r0, #2
 8002916:	f001 f885 	bl	8003a24 <HAL_RCCEx_GetPeriphCLKFreq>
 800291a:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002924:	d125      	bne.n	8002972 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d010      	beq.n	8002950 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	fbb2 f2f3 	udiv	r2, r2, r3
 8002938:	4613      	mov	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4413      	add	r3, r2
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	461a      	mov	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	fbb2 f3f3 	udiv	r3, r2, r3
 800294a:	3305      	adds	r3, #5
 800294c:	613b      	str	r3, [r7, #16]
 800294e:	e01f      	b.n	8002990 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	fbb2 f2f3 	udiv	r2, r2, r3
 800295a:	4613      	mov	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	4413      	add	r3, r2
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	461a      	mov	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	695b      	ldr	r3, [r3, #20]
 8002968:	fbb2 f3f3 	udiv	r3, r2, r3
 800296c:	3305      	adds	r3, #5
 800296e:	613b      	str	r3, [r7, #16]
 8002970:	e00e      	b.n	8002990 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	fbb2 f2f3 	udiv	r2, r2, r3
 800297a:	4613      	mov	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4413      	add	r3, r2
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	461a      	mov	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	695b      	ldr	r3, [r3, #20]
 8002988:	fbb2 f3f3 	udiv	r3, r2, r3
 800298c:	3305      	adds	r3, #5
 800298e:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	4a34      	ldr	r2, [pc, #208]	; (8002a64 <HAL_I2S_Init+0x1ec>)
 8002994:	fba2 2303 	umull	r2, r3, r2, r3
 8002998:	08db      	lsrs	r3, r3, #3
 800299a:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	085b      	lsrs	r3, r3, #1
 80029ac:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	021b      	lsls	r3, r3, #8
 80029b2:	61bb      	str	r3, [r7, #24]
 80029b4:	e003      	b.n	80029be <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80029b6:	2302      	movs	r3, #2
 80029b8:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80029ba:	2300      	movs	r3, #0
 80029bc:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d902      	bls.n	80029ca <HAL_I2S_Init+0x152>
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	2bff      	cmp	r3, #255	; 0xff
 80029c8:	d907      	bls.n	80029da <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ce:	f043 0210 	orr.w	r2, r3, #16
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e039      	b.n	8002a4e <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	691a      	ldr	r2, [r3, #16]
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	ea42 0103 	orr.w	r1, r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	69fa      	ldr	r2, [r7, #28]
 80029ea:	430a      	orrs	r2, r1
 80029ec:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	69db      	ldr	r3, [r3, #28]
 80029f4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80029f8:	f023 030f 	bic.w	r3, r3, #15
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6851      	ldr	r1, [r2, #4]
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	6892      	ldr	r2, [r2, #8]
 8002a04:	4311      	orrs	r1, r2
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	68d2      	ldr	r2, [r2, #12]
 8002a0a:	4311      	orrs	r1, r2
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	6992      	ldr	r2, [r2, #24]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	431a      	orrs	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a1c:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	2b30      	cmp	r3, #48	; 0x30
 8002a24:	d003      	beq.n	8002a2e <HAL_I2S_Init+0x1b6>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	2bb0      	cmp	r3, #176	; 0xb0
 8002a2c:	d107      	bne.n	8002a3e <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	69da      	ldr	r2, [r3, #28]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002a3c:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3720      	adds	r7, #32
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	08002f11 	.word	0x08002f11
 8002a5c:	40003800 	.word	0x40003800
 8002a60:	40003c00 	.word	0x40003c00
 8002a64:	cccccccd 	.word	0xcccccccd

08002a68 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	4613      	mov	r3, r2
 8002a74:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d002      	beq.n	8002a82 <HAL_I2S_Receive_DMA+0x1a>
 8002a7c:	88fb      	ldrh	r3, [r7, #6]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e0a1      	b.n	8002bca <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d101      	bne.n	8002a96 <HAL_I2S_Receive_DMA+0x2e>
 8002a92:	2302      	movs	r3, #2
 8002a94:	e099      	b.n	8002bca <HAL_I2S_Receive_DMA+0x162>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d005      	beq.n	8002ab6 <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	e089      	b.n	8002bca <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2204      	movs	r2, #4
 8002aba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	69db      	ldr	r3, [r3, #28]
 8002ad0:	f003 0307 	and.w	r3, r3, #7
 8002ad4:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	2b03      	cmp	r3, #3
 8002ada:	d002      	beq.n	8002ae2 <HAL_I2S_Receive_DMA+0x7a>
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	2b05      	cmp	r3, #5
 8002ae0:	d10a      	bne.n	8002af8 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8002ae2:	88fb      	ldrh	r3, [r7, #6]
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8002aec:	88fb      	ldrh	r3, [r7, #6]
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	865a      	strh	r2, [r3, #50]	; 0x32
 8002af6:	e005      	b.n	8002b04 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	88fa      	ldrh	r2, [r7, #6]
 8002afc:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	88fa      	ldrh	r2, [r7, #6]
 8002b02:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b08:	4a32      	ldr	r2, [pc, #200]	; (8002bd4 <HAL_I2S_Receive_DMA+0x16c>)
 8002b0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b10:	4a31      	ldr	r2, [pc, #196]	; (8002bd8 <HAL_I2S_Receive_DMA+0x170>)
 8002b12:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b18:	4a30      	ldr	r2, [pc, #192]	; (8002bdc <HAL_I2S_Receive_DMA+0x174>)
 8002b1a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b2a:	d10a      	bne.n	8002b42 <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	613b      	str	r3, [r7, #16]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	613b      	str	r3, [r7, #16]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	613b      	str	r3, [r7, #16]
 8002b40:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	330c      	adds	r3, #12
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b52:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002b58:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002b5a:	f7ff f823 	bl	8001ba4 <HAL_DMA_Start_IT>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00f      	beq.n	8002b84 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b68:	f043 0208 	orr.w	r2, r3, #8
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e022      	b.n	8002bca <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d107      	bne.n	8002ba2 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	69da      	ldr	r2, [r3, #28]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ba0:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d107      	bne.n	8002bc0 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	685a      	ldr	r2, [r3, #4]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f042 0201 	orr.w	r2, r2, #1
 8002bbe:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3718      	adds	r7, #24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	08002def 	.word	0x08002def
 8002bd8:	08002dad 	.word	0x08002dad
 8002bdc:	08002e0b 	.word	0x08002e0b

08002be0 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002be8:	2300      	movs	r3, #0
 8002bea:	75fb      	strb	r3, [r7, #23]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bf4:	d003      	beq.n	8002bfe <HAL_I2S_DMAStop+0x1e>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d155      	bne.n	8002caa <HAL_I2S_DMAStop+0xca>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00f      	beq.n	8002c26 <HAL_I2S_DMAStop+0x46>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff f822 	bl	8001c54 <HAL_DMA_Abort>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d007      	beq.n	8002c26 <HAL_I2S_DMAStop+0x46>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1a:	f043 0208 	orr.w	r2, r3, #8
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	75fb      	strb	r3, [r7, #23]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8002c26:	2364      	movs	r3, #100	; 0x64
 8002c28:	2201      	movs	r2, #1
 8002c2a:	2102      	movs	r1, #2
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 f9f9 	bl	8003024 <I2S_WaitFlagStateUntilTimeout>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00b      	beq.n	8002c50 <HAL_I2S_DMAStop+0x70>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3c:	f043 0201 	orr.w	r2, r3, #1
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	75fb      	strb	r3, [r7, #23]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8002c50:	2364      	movs	r3, #100	; 0x64
 8002c52:	2200      	movs	r2, #0
 8002c54:	2180      	movs	r1, #128	; 0x80
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 f9e4 	bl	8003024 <I2S_WaitFlagStateUntilTimeout>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00b      	beq.n	8002c7a <HAL_I2S_DMAStop+0x9a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c66:	f043 0201 	orr.w	r2, r3, #1
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	75fb      	strb	r3, [r7, #23]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	69da      	ldr	r2, [r3, #28]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c88:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	613b      	str	r3, [r7, #16]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	613b      	str	r3, [r7, #16]
 8002c96:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	685a      	ldr	r2, [r3, #4]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 0202 	bic.w	r2, r2, #2
 8002ca6:	605a      	str	r2, [r3, #4]
 8002ca8:	e04d      	b.n	8002d46 <HAL_I2S_DMAStop+0x166>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cb2:	d004      	beq.n	8002cbe <HAL_I2S_DMAStop+0xde>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cbc:	d143      	bne.n	8002d46 <HAL_I2S_DMAStop+0x166>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00f      	beq.n	8002ce6 <HAL_I2S_DMAStop+0x106>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7fe ffc2 	bl	8001c54 <HAL_DMA_Abort>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d007      	beq.n	8002ce6 <HAL_I2S_DMAStop+0x106>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cda:	f043 0208 	orr.w	r2, r3, #8
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	75fb      	strb	r3, [r7, #23]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	69da      	ldr	r2, [r3, #28]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cf4:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	60fb      	str	r3, [r7, #12]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	60fb      	str	r3, [r7, #12]
 8002d0a:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	685a      	ldr	r2, [r3, #4]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 0201 	bic.w	r2, r2, #1
 8002d1a:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d24:	d10c      	bne.n	8002d40 <HAL_I2S_DMAStop+0x160>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	75fb      	strb	r3, [r7, #23]
 8002d3e:	e002      	b.n	8002d46 <HAL_I2S_DMAStop+0x166>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8002d4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3718      	adds	r7, #24
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	4798      	blx	r3
}
 8002d68:	bf00      	nop
 8002d6a:	3708      	adds	r7, #8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db8:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10e      	bne.n	8002de0 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	685a      	ldr	r2, [r3, #4]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f022 0201 	bic.w	r2, r2, #1
 8002dd0:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f7fd fe91 	bl	8000b08 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002de6:	bf00      	nop
 8002de8:	3710      	adds	r7, #16
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b084      	sub	sp, #16
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfa:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f7ff ffc1 	bl	8002d84 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002e02:	bf00      	nop
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b084      	sub	sp, #16
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e16:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 0203 	bic.w	r2, r2, #3
 8002e26:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e40:	f043 0208 	orr.w	r2, r3, #8
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f7ff ffa5 	bl	8002d98 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002e4e:	bf00      	nop
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b082      	sub	sp, #8
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e62:	881a      	ldrh	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6e:	1c9a      	adds	r2, r3, #2
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10e      	bne.n	8002eaa <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685a      	ldr	r2, [r3, #4]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e9a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f7ff ff63 	bl	8002d70 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002eaa:	bf00      	nop
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b082      	sub	sp, #8
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68da      	ldr	r2, [r3, #12]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec4:	b292      	uxth	r2, r2
 8002ec6:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ecc:	1c9a      	adds	r2, r3, #2
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10e      	bne.n	8002f08 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ef8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f7fd fe00 	bl	8000b08 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002f08:	bf00      	nop
 8002f0a:	3708      	adds	r7, #8
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b04      	cmp	r3, #4
 8002f2a:	d13a      	bne.n	8002fa2 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d109      	bne.n	8002f4a <I2S_IRQHandler+0x3a>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f40:	2b40      	cmp	r3, #64	; 0x40
 8002f42:	d102      	bne.n	8002f4a <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f7ff ffb4 	bl	8002eb2 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f50:	2b40      	cmp	r3, #64	; 0x40
 8002f52:	d126      	bne.n	8002fa2 <I2S_IRQHandler+0x92>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f003 0320 	and.w	r3, r3, #32
 8002f5e:	2b20      	cmp	r3, #32
 8002f60:	d11f      	bne.n	8002fa2 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685a      	ldr	r2, [r3, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f70:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002f72:	2300      	movs	r3, #0
 8002f74:	613b      	str	r3, [r7, #16]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	613b      	str	r3, [r7, #16]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	613b      	str	r3, [r7, #16]
 8002f86:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f94:	f043 0202 	orr.w	r2, r3, #2
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f7ff fefb 	bl	8002d98 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b03      	cmp	r3, #3
 8002fac:	d136      	bne.n	800301c <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d109      	bne.n	8002fcc <I2S_IRQHandler+0xbc>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc2:	2b80      	cmp	r3, #128	; 0x80
 8002fc4:	d102      	bne.n	8002fcc <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f7ff ff45 	bl	8002e56 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	f003 0308 	and.w	r3, r3, #8
 8002fd2:	2b08      	cmp	r3, #8
 8002fd4:	d122      	bne.n	800301c <I2S_IRQHandler+0x10c>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f003 0320 	and.w	r3, r3, #32
 8002fe0:	2b20      	cmp	r3, #32
 8002fe2:	d11b      	bne.n	800301c <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	685a      	ldr	r2, [r3, #4]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ff2:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	60fb      	str	r3, [r7, #12]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2201      	movs	r2, #1
 8003006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300e:	f043 0204 	orr.w	r2, r3, #4
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7ff febe 	bl	8002d98 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800301c:	bf00      	nop
 800301e:	3718      	adds	r7, #24
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b086      	sub	sp, #24
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	603b      	str	r3, [r7, #0]
 8003030:	4613      	mov	r3, r2
 8003032:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8003034:	f7fe fbda 	bl	80017ec <HAL_GetTick>
 8003038:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800303a:	e018      	b.n	800306e <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003042:	d014      	beq.n	800306e <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8003044:	f7fe fbd2 	bl	80017ec <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	683a      	ldr	r2, [r7, #0]
 8003050:	429a      	cmp	r2, r3
 8003052:	d902      	bls.n	800305a <I2S_WaitFlagStateUntilTimeout+0x36>
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d109      	bne.n	800306e <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e00f      	b.n	800308e <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	689a      	ldr	r2, [r3, #8]
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	4013      	ands	r3, r2
 8003078:	68ba      	ldr	r2, [r7, #8]
 800307a:	429a      	cmp	r2, r3
 800307c:	bf0c      	ite	eq
 800307e:	2301      	moveq	r3, #1
 8003080:	2300      	movne	r3, #0
 8003082:	b2db      	uxtb	r3, r3
 8003084:	461a      	mov	r2, r3
 8003086:	79fb      	ldrb	r3, [r7, #7]
 8003088:	429a      	cmp	r2, r3
 800308a:	d1d7      	bne.n	800303c <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3718      	adds	r7, #24
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
	...

08003098 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800309e:	2300      	movs	r3, #0
 80030a0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80030a2:	2300      	movs	r3, #0
 80030a4:	603b      	str	r3, [r7, #0]
 80030a6:	4b20      	ldr	r3, [pc, #128]	; (8003128 <HAL_PWREx_EnableOverDrive+0x90>)
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	4a1f      	ldr	r2, [pc, #124]	; (8003128 <HAL_PWREx_EnableOverDrive+0x90>)
 80030ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030b0:	6413      	str	r3, [r2, #64]	; 0x40
 80030b2:	4b1d      	ldr	r3, [pc, #116]	; (8003128 <HAL_PWREx_EnableOverDrive+0x90>)
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ba:	603b      	str	r3, [r7, #0]
 80030bc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80030be:	4b1b      	ldr	r3, [pc, #108]	; (800312c <HAL_PWREx_EnableOverDrive+0x94>)
 80030c0:	2201      	movs	r2, #1
 80030c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030c4:	f7fe fb92 	bl	80017ec <HAL_GetTick>
 80030c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80030ca:	e009      	b.n	80030e0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80030cc:	f7fe fb8e 	bl	80017ec <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030da:	d901      	bls.n	80030e0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e01f      	b.n	8003120 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80030e0:	4b13      	ldr	r3, [pc, #76]	; (8003130 <HAL_PWREx_EnableOverDrive+0x98>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ec:	d1ee      	bne.n	80030cc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80030ee:	4b11      	ldr	r3, [pc, #68]	; (8003134 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030f0:	2201      	movs	r2, #1
 80030f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030f4:	f7fe fb7a 	bl	80017ec <HAL_GetTick>
 80030f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80030fa:	e009      	b.n	8003110 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80030fc:	f7fe fb76 	bl	80017ec <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800310a:	d901      	bls.n	8003110 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e007      	b.n	8003120 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003110:	4b07      	ldr	r3, [pc, #28]	; (8003130 <HAL_PWREx_EnableOverDrive+0x98>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003118:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800311c:	d1ee      	bne.n	80030fc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3708      	adds	r7, #8
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	40023800 	.word	0x40023800
 800312c:	420e0040 	.word	0x420e0040
 8003130:	40007000 	.word	0x40007000
 8003134:	420e0044 	.word	0x420e0044

08003138 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d101      	bne.n	800314c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e0cc      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800314c:	4b68      	ldr	r3, [pc, #416]	; (80032f0 <HAL_RCC_ClockConfig+0x1b8>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 030f 	and.w	r3, r3, #15
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	429a      	cmp	r2, r3
 8003158:	d90c      	bls.n	8003174 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800315a:	4b65      	ldr	r3, [pc, #404]	; (80032f0 <HAL_RCC_ClockConfig+0x1b8>)
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	b2d2      	uxtb	r2, r2
 8003160:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003162:	4b63      	ldr	r3, [pc, #396]	; (80032f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 030f 	and.w	r3, r3, #15
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	429a      	cmp	r2, r3
 800316e:	d001      	beq.n	8003174 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e0b8      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d020      	beq.n	80031c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b00      	cmp	r3, #0
 800318a:	d005      	beq.n	8003198 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800318c:	4b59      	ldr	r3, [pc, #356]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	4a58      	ldr	r2, [pc, #352]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003192:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003196:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0308 	and.w	r3, r3, #8
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d005      	beq.n	80031b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031a4:	4b53      	ldr	r3, [pc, #332]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	4a52      	ldr	r2, [pc, #328]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80031aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031b0:	4b50      	ldr	r3, [pc, #320]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	494d      	ldr	r1, [pc, #308]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d044      	beq.n	8003258 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d107      	bne.n	80031e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031d6:	4b47      	ldr	r3, [pc, #284]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d119      	bne.n	8003216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e07f      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d003      	beq.n	80031f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031f2:	2b03      	cmp	r3, #3
 80031f4:	d107      	bne.n	8003206 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031f6:	4b3f      	ldr	r3, [pc, #252]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d109      	bne.n	8003216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e06f      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003206:	4b3b      	ldr	r3, [pc, #236]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e067      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003216:	4b37      	ldr	r3, [pc, #220]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f023 0203 	bic.w	r2, r3, #3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	4934      	ldr	r1, [pc, #208]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003224:	4313      	orrs	r3, r2
 8003226:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003228:	f7fe fae0 	bl	80017ec <HAL_GetTick>
 800322c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800322e:	e00a      	b.n	8003246 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003230:	f7fe fadc 	bl	80017ec <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	f241 3288 	movw	r2, #5000	; 0x1388
 800323e:	4293      	cmp	r3, r2
 8003240:	d901      	bls.n	8003246 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e04f      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003246:	4b2b      	ldr	r3, [pc, #172]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f003 020c 	and.w	r2, r3, #12
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	429a      	cmp	r2, r3
 8003256:	d1eb      	bne.n	8003230 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003258:	4b25      	ldr	r3, [pc, #148]	; (80032f0 <HAL_RCC_ClockConfig+0x1b8>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 030f 	and.w	r3, r3, #15
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	429a      	cmp	r2, r3
 8003264:	d20c      	bcs.n	8003280 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003266:	4b22      	ldr	r3, [pc, #136]	; (80032f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	b2d2      	uxtb	r2, r2
 800326c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800326e:	4b20      	ldr	r3, [pc, #128]	; (80032f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 030f 	and.w	r3, r3, #15
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	429a      	cmp	r2, r3
 800327a:	d001      	beq.n	8003280 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e032      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0304 	and.w	r3, r3, #4
 8003288:	2b00      	cmp	r3, #0
 800328a:	d008      	beq.n	800329e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800328c:	4b19      	ldr	r3, [pc, #100]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	4916      	ldr	r1, [pc, #88]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 800329a:	4313      	orrs	r3, r2
 800329c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0308 	and.w	r3, r3, #8
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d009      	beq.n	80032be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032aa:	4b12      	ldr	r3, [pc, #72]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	490e      	ldr	r1, [pc, #56]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032be:	f000 fdf9 	bl	8003eb4 <HAL_RCC_GetSysClockFreq>
 80032c2:	4602      	mov	r2, r0
 80032c4:	4b0b      	ldr	r3, [pc, #44]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	091b      	lsrs	r3, r3, #4
 80032ca:	f003 030f 	and.w	r3, r3, #15
 80032ce:	490a      	ldr	r1, [pc, #40]	; (80032f8 <HAL_RCC_ClockConfig+0x1c0>)
 80032d0:	5ccb      	ldrb	r3, [r1, r3]
 80032d2:	fa22 f303 	lsr.w	r3, r2, r3
 80032d6:	4a09      	ldr	r2, [pc, #36]	; (80032fc <HAL_RCC_ClockConfig+0x1c4>)
 80032d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032da:	4b09      	ldr	r3, [pc, #36]	; (8003300 <HAL_RCC_ClockConfig+0x1c8>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f7fe f90c 	bl	80014fc <HAL_InitTick>

  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	40023c00 	.word	0x40023c00
 80032f4:	40023800 	.word	0x40023800
 80032f8:	0800fa40 	.word	0x0800fa40
 80032fc:	20000004 	.word	0x20000004
 8003300:	20000008 	.word	0x20000008

08003304 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003308:	4b03      	ldr	r3, [pc, #12]	; (8003318 <HAL_RCC_GetHCLKFreq+0x14>)
 800330a:	681b      	ldr	r3, [r3, #0]
}
 800330c:	4618      	mov	r0, r3
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	20000004 	.word	0x20000004

0800331c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003320:	f7ff fff0 	bl	8003304 <HAL_RCC_GetHCLKFreq>
 8003324:	4602      	mov	r2, r0
 8003326:	4b05      	ldr	r3, [pc, #20]	; (800333c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	0a9b      	lsrs	r3, r3, #10
 800332c:	f003 0307 	and.w	r3, r3, #7
 8003330:	4903      	ldr	r1, [pc, #12]	; (8003340 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003332:	5ccb      	ldrb	r3, [r1, r3]
 8003334:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003338:	4618      	mov	r0, r3
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40023800 	.word	0x40023800
 8003340:	0800fa50 	.word	0x0800fa50

08003344 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003348:	f7ff ffdc 	bl	8003304 <HAL_RCC_GetHCLKFreq>
 800334c:	4602      	mov	r2, r0
 800334e:	4b05      	ldr	r3, [pc, #20]	; (8003364 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	0b5b      	lsrs	r3, r3, #13
 8003354:	f003 0307 	and.w	r3, r3, #7
 8003358:	4903      	ldr	r1, [pc, #12]	; (8003368 <HAL_RCC_GetPCLK2Freq+0x24>)
 800335a:	5ccb      	ldrb	r3, [r1, r3]
 800335c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003360:	4618      	mov	r0, r3
 8003362:	bd80      	pop	{r7, pc}
 8003364:	40023800 	.word	0x40023800
 8003368:	0800fa50 	.word	0x0800fa50

0800336c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	220f      	movs	r2, #15
 800337a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800337c:	4b12      	ldr	r3, [pc, #72]	; (80033c8 <HAL_RCC_GetClockConfig+0x5c>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f003 0203 	and.w	r2, r3, #3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003388:	4b0f      	ldr	r3, [pc, #60]	; (80033c8 <HAL_RCC_GetClockConfig+0x5c>)
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003394:	4b0c      	ldr	r3, [pc, #48]	; (80033c8 <HAL_RCC_GetClockConfig+0x5c>)
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80033a0:	4b09      	ldr	r3, [pc, #36]	; (80033c8 <HAL_RCC_GetClockConfig+0x5c>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	08db      	lsrs	r3, r3, #3
 80033a6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80033ae:	4b07      	ldr	r3, [pc, #28]	; (80033cc <HAL_RCC_GetClockConfig+0x60>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 020f 	and.w	r2, r3, #15
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	601a      	str	r2, [r3, #0]
}
 80033ba:	bf00      	nop
 80033bc:	370c      	adds	r7, #12
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	40023800 	.word	0x40023800
 80033cc:	40023c00 	.word	0x40023c00

080033d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b08c      	sub	sp, #48	; 0x30
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033d8:	2300      	movs	r3, #0
 80033da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80033dc:	2300      	movs	r3, #0
 80033de:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80033e0:	2300      	movs	r3, #0
 80033e2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80033e4:	2300      	movs	r3, #0
 80033e6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80033e8:	2300      	movs	r3, #0
 80033ea:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80033ec:	2300      	movs	r3, #0
 80033ee:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80033f0:	2300      	movs	r3, #0
 80033f2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80033f4:	2300      	movs	r3, #0
 80033f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80033f8:	2300      	movs	r3, #0
 80033fa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	2b00      	cmp	r3, #0
 8003406:	d010      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003408:	4b6f      	ldr	r3, [pc, #444]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800340a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800340e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003416:	496c      	ldr	r1, [pc, #432]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003418:	4313      	orrs	r3, r2
 800341a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003426:	2301      	movs	r3, #1
 8003428:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d010      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003436:	4b64      	ldr	r3, [pc, #400]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003438:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800343c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003444:	4960      	ldr	r1, [pc, #384]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003446:	4313      	orrs	r3, r2
 8003448:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003450:	2b00      	cmp	r3, #0
 8003452:	d101      	bne.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003454:	2301      	movs	r3, #1
 8003456:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	2b00      	cmp	r3, #0
 8003462:	d017      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003464:	4b58      	ldr	r3, [pc, #352]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003466:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800346a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003472:	4955      	ldr	r1, [pc, #340]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003474:	4313      	orrs	r3, r2
 8003476:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003482:	d101      	bne.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003484:	2301      	movs	r3, #1
 8003486:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348c:	2b00      	cmp	r3, #0
 800348e:	d101      	bne.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003490:	2301      	movs	r3, #1
 8003492:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0308 	and.w	r3, r3, #8
 800349c:	2b00      	cmp	r3, #0
 800349e:	d017      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80034a0:	4b49      	ldr	r3, [pc, #292]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80034a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ae:	4946      	ldr	r1, [pc, #280]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034be:	d101      	bne.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80034c0:	2301      	movs	r3, #1
 80034c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80034cc:	2301      	movs	r3, #1
 80034ce:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0320 	and.w	r3, r3, #32
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f000 808a 	beq.w	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80034de:	2300      	movs	r3, #0
 80034e0:	60bb      	str	r3, [r7, #8]
 80034e2:	4b39      	ldr	r3, [pc, #228]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80034e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e6:	4a38      	ldr	r2, [pc, #224]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80034e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ec:	6413      	str	r3, [r2, #64]	; 0x40
 80034ee:	4b36      	ldr	r3, [pc, #216]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80034f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034f6:	60bb      	str	r3, [r7, #8]
 80034f8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80034fa:	4b34      	ldr	r3, [pc, #208]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a33      	ldr	r2, [pc, #204]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003504:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003506:	f7fe f971 	bl	80017ec <HAL_GetTick>
 800350a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800350c:	e008      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800350e:	f7fe f96d 	bl	80017ec <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d901      	bls.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e278      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003520:	4b2a      	ldr	r3, [pc, #168]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003528:	2b00      	cmp	r3, #0
 800352a:	d0f0      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800352c:	4b26      	ldr	r3, [pc, #152]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800352e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003530:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003534:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003536:	6a3b      	ldr	r3, [r7, #32]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d02f      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003540:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003544:	6a3a      	ldr	r2, [r7, #32]
 8003546:	429a      	cmp	r2, r3
 8003548:	d028      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800354a:	4b1f      	ldr	r3, [pc, #124]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800354c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003552:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003554:	4b1e      	ldr	r3, [pc, #120]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003556:	2201      	movs	r2, #1
 8003558:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800355a:	4b1d      	ldr	r3, [pc, #116]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800355c:	2200      	movs	r2, #0
 800355e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003560:	4a19      	ldr	r2, [pc, #100]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003562:	6a3b      	ldr	r3, [r7, #32]
 8003564:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003566:	4b18      	ldr	r3, [pc, #96]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b01      	cmp	r3, #1
 8003570:	d114      	bne.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003572:	f7fe f93b 	bl	80017ec <HAL_GetTick>
 8003576:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003578:	e00a      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800357a:	f7fe f937 	bl	80017ec <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	f241 3288 	movw	r2, #5000	; 0x1388
 8003588:	4293      	cmp	r3, r2
 800358a:	d901      	bls.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e240      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003590:	4b0d      	ldr	r3, [pc, #52]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b00      	cmp	r3, #0
 800359a:	d0ee      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035a8:	d114      	bne.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80035aa:	4b07      	ldr	r3, [pc, #28]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80035ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035be:	4902      	ldr	r1, [pc, #8]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	608b      	str	r3, [r1, #8]
 80035c4:	e00c      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80035c6:	bf00      	nop
 80035c8:	40023800 	.word	0x40023800
 80035cc:	40007000 	.word	0x40007000
 80035d0:	42470e40 	.word	0x42470e40
 80035d4:	4b4a      	ldr	r3, [pc, #296]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	4a49      	ldr	r2, [pc, #292]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80035da:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80035de:	6093      	str	r3, [r2, #8]
 80035e0:	4b47      	ldr	r3, [pc, #284]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80035e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035ec:	4944      	ldr	r1, [pc, #272]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0310 	and.w	r3, r3, #16
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d004      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003604:	4b3f      	ldr	r3, [pc, #252]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003606:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00a      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003614:	4b3a      	ldr	r3, [pc, #232]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003616:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800361a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003622:	4937      	ldr	r1, [pc, #220]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003624:	4313      	orrs	r3, r2
 8003626:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00a      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003636:	4b32      	ldr	r3, [pc, #200]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003638:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800363c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003644:	492e      	ldr	r1, [pc, #184]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003646:	4313      	orrs	r3, r2
 8003648:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003654:	2b00      	cmp	r3, #0
 8003656:	d011      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003658:	4b29      	ldr	r3, [pc, #164]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800365a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800365e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003666:	4926      	ldr	r1, [pc, #152]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003668:	4313      	orrs	r3, r2
 800366a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003672:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003676:	d101      	bne.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003678:	2301      	movs	r3, #1
 800367a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00a      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003688:	4b1d      	ldr	r3, [pc, #116]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800368a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800368e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003696:	491a      	ldr	r1, [pc, #104]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003698:	4313      	orrs	r3, r2
 800369a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d011      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80036aa:	4b15      	ldr	r3, [pc, #84]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80036ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036b0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036b8:	4911      	ldr	r1, [pc, #68]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036c8:	d101      	bne.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80036ca:	2301      	movs	r3, #1
 80036cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80036ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d005      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036dc:	f040 80ff 	bne.w	80038de <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80036e0:	4b09      	ldr	r3, [pc, #36]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80036e6:	f7fe f881 	bl	80017ec <HAL_GetTick>
 80036ea:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036ec:	e00e      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80036ee:	f7fe f87d 	bl	80017ec <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d907      	bls.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e188      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003700:	40023800 	.word	0x40023800
 8003704:	424711e0 	.word	0x424711e0
 8003708:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800370c:	4b7e      	ldr	r3, [pc, #504]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1ea      	bne.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	2b00      	cmp	r3, #0
 8003722:	d003      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003728:	2b00      	cmp	r3, #0
 800372a:	d009      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003734:	2b00      	cmp	r3, #0
 8003736:	d028      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800373c:	2b00      	cmp	r3, #0
 800373e:	d124      	bne.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003740:	4b71      	ldr	r3, [pc, #452]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003742:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003746:	0c1b      	lsrs	r3, r3, #16
 8003748:	f003 0303 	and.w	r3, r3, #3
 800374c:	3301      	adds	r3, #1
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003752:	4b6d      	ldr	r3, [pc, #436]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003754:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003758:	0e1b      	lsrs	r3, r3, #24
 800375a:	f003 030f 	and.w	r3, r3, #15
 800375e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	019b      	lsls	r3, r3, #6
 800376a:	431a      	orrs	r2, r3
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	085b      	lsrs	r3, r3, #1
 8003770:	3b01      	subs	r3, #1
 8003772:	041b      	lsls	r3, r3, #16
 8003774:	431a      	orrs	r2, r3
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	061b      	lsls	r3, r3, #24
 800377a:	431a      	orrs	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	071b      	lsls	r3, r3, #28
 8003782:	4961      	ldr	r1, [pc, #388]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003784:	4313      	orrs	r3, r2
 8003786:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0304 	and.w	r3, r3, #4
 8003792:	2b00      	cmp	r3, #0
 8003794:	d004      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800379e:	d00a      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d035      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037b4:	d130      	bne.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80037b6:	4b54      	ldr	r3, [pc, #336]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80037b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037bc:	0c1b      	lsrs	r3, r3, #16
 80037be:	f003 0303 	and.w	r3, r3, #3
 80037c2:	3301      	adds	r3, #1
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80037c8:	4b4f      	ldr	r3, [pc, #316]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80037ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037ce:	0f1b      	lsrs	r3, r3, #28
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685a      	ldr	r2, [r3, #4]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	019b      	lsls	r3, r3, #6
 80037e0:	431a      	orrs	r2, r3
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	085b      	lsrs	r3, r3, #1
 80037e6:	3b01      	subs	r3, #1
 80037e8:	041b      	lsls	r3, r3, #16
 80037ea:	431a      	orrs	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	061b      	lsls	r3, r3, #24
 80037f2:	431a      	orrs	r2, r3
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	071b      	lsls	r3, r3, #28
 80037f8:	4943      	ldr	r1, [pc, #268]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003800:	4b41      	ldr	r3, [pc, #260]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003802:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003806:	f023 021f 	bic.w	r2, r3, #31
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380e:	3b01      	subs	r3, #1
 8003810:	493d      	ldr	r1, [pc, #244]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003812:	4313      	orrs	r3, r2
 8003814:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003820:	2b00      	cmp	r3, #0
 8003822:	d029      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003828:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800382c:	d124      	bne.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800382e:	4b36      	ldr	r3, [pc, #216]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003830:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003834:	0c1b      	lsrs	r3, r3, #16
 8003836:	f003 0303 	and.w	r3, r3, #3
 800383a:	3301      	adds	r3, #1
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003840:	4b31      	ldr	r3, [pc, #196]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003842:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003846:	0f1b      	lsrs	r3, r3, #28
 8003848:	f003 0307 	and.w	r3, r3, #7
 800384c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685a      	ldr	r2, [r3, #4]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	019b      	lsls	r3, r3, #6
 8003858:	431a      	orrs	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	085b      	lsrs	r3, r3, #1
 8003860:	3b01      	subs	r3, #1
 8003862:	041b      	lsls	r3, r3, #16
 8003864:	431a      	orrs	r2, r3
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	061b      	lsls	r3, r3, #24
 800386a:	431a      	orrs	r2, r3
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	071b      	lsls	r3, r3, #28
 8003870:	4925      	ldr	r1, [pc, #148]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003872:	4313      	orrs	r3, r2
 8003874:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003880:	2b00      	cmp	r3, #0
 8003882:	d016      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	019b      	lsls	r3, r3, #6
 800388e:	431a      	orrs	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	085b      	lsrs	r3, r3, #1
 8003896:	3b01      	subs	r3, #1
 8003898:	041b      	lsls	r3, r3, #16
 800389a:	431a      	orrs	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	691b      	ldr	r3, [r3, #16]
 80038a0:	061b      	lsls	r3, r3, #24
 80038a2:	431a      	orrs	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	071b      	lsls	r3, r3, #28
 80038aa:	4917      	ldr	r1, [pc, #92]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80038b2:	4b16      	ldr	r3, [pc, #88]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80038b4:	2201      	movs	r2, #1
 80038b6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80038b8:	f7fd ff98 	bl	80017ec <HAL_GetTick>
 80038bc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038be:	e008      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80038c0:	f7fd ff94 	bl	80017ec <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e09f      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038d2:	4b0d      	ldr	r3, [pc, #52]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d0f0      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80038de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	f040 8095 	bne.w	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80038e6:	4b0a      	ldr	r3, [pc, #40]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80038ec:	f7fd ff7e 	bl	80017ec <HAL_GetTick>
 80038f0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80038f2:	e00f      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80038f4:	f7fd ff7a 	bl	80017ec <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d908      	bls.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e085      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003906:	bf00      	nop
 8003908:	40023800 	.word	0x40023800
 800390c:	42470068 	.word	0x42470068
 8003910:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003914:	4b41      	ldr	r3, [pc, #260]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800391c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003920:	d0e8      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0304 	and.w	r3, r3, #4
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003932:	2b00      	cmp	r3, #0
 8003934:	d009      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800393e:	2b00      	cmp	r3, #0
 8003940:	d02b      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003946:	2b00      	cmp	r3, #0
 8003948:	d127      	bne.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800394a:	4b34      	ldr	r3, [pc, #208]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800394c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003950:	0c1b      	lsrs	r3, r3, #16
 8003952:	f003 0303 	and.w	r3, r3, #3
 8003956:	3301      	adds	r3, #1
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	699a      	ldr	r2, [r3, #24]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	69db      	ldr	r3, [r3, #28]
 8003964:	019b      	lsls	r3, r3, #6
 8003966:	431a      	orrs	r2, r3
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	085b      	lsrs	r3, r3, #1
 800396c:	3b01      	subs	r3, #1
 800396e:	041b      	lsls	r3, r3, #16
 8003970:	431a      	orrs	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003976:	061b      	lsls	r3, r3, #24
 8003978:	4928      	ldr	r1, [pc, #160]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800397a:	4313      	orrs	r3, r2
 800397c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003980:	4b26      	ldr	r3, [pc, #152]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003982:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003986:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398e:	3b01      	subs	r3, #1
 8003990:	021b      	lsls	r3, r3, #8
 8003992:	4922      	ldr	r1, [pc, #136]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003994:	4313      	orrs	r3, r2
 8003996:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d01d      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039ae:	d118      	bne.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80039b0:	4b1a      	ldr	r3, [pc, #104]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80039b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b6:	0e1b      	lsrs	r3, r3, #24
 80039b8:	f003 030f 	and.w	r3, r3, #15
 80039bc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	699a      	ldr	r2, [r3, #24]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	69db      	ldr	r3, [r3, #28]
 80039c6:	019b      	lsls	r3, r3, #6
 80039c8:	431a      	orrs	r2, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	085b      	lsrs	r3, r3, #1
 80039d0:	3b01      	subs	r3, #1
 80039d2:	041b      	lsls	r3, r3, #16
 80039d4:	431a      	orrs	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	061b      	lsls	r3, r3, #24
 80039da:	4910      	ldr	r1, [pc, #64]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80039e2:	4b0f      	ldr	r3, [pc, #60]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80039e4:	2201      	movs	r2, #1
 80039e6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80039e8:	f7fd ff00 	bl	80017ec <HAL_GetTick>
 80039ec:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80039ee:	e008      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80039f0:	f7fd fefc 	bl	80017ec <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e007      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a02:	4b06      	ldr	r3, [pc, #24]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a0e:	d1ef      	bne.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3730      	adds	r7, #48	; 0x30
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	40023800 	.word	0x40023800
 8003a20:	42470070 	.word	0x42470070

08003a24 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b089      	sub	sp, #36	; 0x24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003a30:	2300      	movs	r3, #0
 8003a32:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003a34:	2300      	movs	r3, #0
 8003a36:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003a40:	2300      	movs	r3, #0
 8003a42:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	3b01      	subs	r3, #1
 8003a48:	2b07      	cmp	r3, #7
 8003a4a:	f200 8224 	bhi.w	8003e96 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8003a4e:	a201      	add	r2, pc, #4	; (adr r2, 8003a54 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8003a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a54:	08003c57 	.word	0x08003c57
 8003a58:	08003d81 	.word	0x08003d81
 8003a5c:	08003e97 	.word	0x08003e97
 8003a60:	08003a75 	.word	0x08003a75
 8003a64:	08003e97 	.word	0x08003e97
 8003a68:	08003e97 	.word	0x08003e97
 8003a6c:	08003e97 	.word	0x08003e97
 8003a70:	08003a75 	.word	0x08003a75
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 8003a74:	4ba8      	ldr	r3, [pc, #672]	; (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003a76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a7a:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8003a82:	613b      	str	r3, [r7, #16]
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a8a:	f000 80d6 	beq.w	8003c3a <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a94:	f200 80dd 	bhi.w	8003c52 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a9e:	f000 809f 	beq.w	8003be0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003aa8:	f200 80d3 	bhi.w	8003c52 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ab2:	d05b      	beq.n	8003b6c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003aba:	f200 80ca 	bhi.w	8003c52 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ac4:	f000 80b6 	beq.w	8003c34 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ace:	f200 80c0 	bhi.w	8003c52 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ad8:	f000 8082 	beq.w	8003be0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ae2:	f200 80b6 	bhi.w	8003c52 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d004      	beq.n	8003af6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003af2:	d03b      	beq.n	8003b6c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 8003af4:	e0ad      	b.n	8003c52 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003af6:	4b88      	ldr	r3, [pc, #544]	; (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d109      	bne.n	8003b16 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 8003b02:	4b85      	ldr	r3, [pc, #532]	; (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b0c:	4a83      	ldr	r2, [pc, #524]	; (8003d1c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b12:	61bb      	str	r3, [r7, #24]
 8003b14:	e008      	b.n	8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 8003b16:	4b80      	ldr	r3, [pc, #512]	; (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b20:	4a7f      	ldr	r2, [pc, #508]	; (8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b26:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8003b28:	4b7b      	ldr	r3, [pc, #492]	; (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b2e:	0e1b      	lsrs	r3, r3, #24
 8003b30:	f003 030f 	and.w	r3, r3, #15
 8003b34:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 8003b36:	4b78      	ldr	r3, [pc, #480]	; (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b3c:	099b      	lsrs	r3, r3, #6
 8003b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b42:	69ba      	ldr	r2, [r7, #24]
 8003b44:	fb03 f202 	mul.w	r2, r3, r2
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b4e:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8003b50:	4b71      	ldr	r3, [pc, #452]	; (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003b52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b56:	0a1b      	lsrs	r3, r3, #8
 8003b58:	f003 031f 	and.w	r3, r3, #31
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8003b60:	69fa      	ldr	r2, [r7, #28]
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b68:	61fb      	str	r3, [r7, #28]
          break;
 8003b6a:	e073      	b.n	8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003b6c:	4b6a      	ldr	r3, [pc, #424]	; (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d109      	bne.n	8003b8c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003b78:	4b67      	ldr	r3, [pc, #412]	; (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003b7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b82:	4a66      	ldr	r2, [pc, #408]	; (8003d1c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b88:	61bb      	str	r3, [r7, #24]
 8003b8a:	e008      	b.n	8003b9e <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 8003b8c:	4b62      	ldr	r3, [pc, #392]	; (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003b8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b96:	4a62      	ldr	r2, [pc, #392]	; (8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b9c:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 8003b9e:	4b5e      	ldr	r3, [pc, #376]	; (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003ba0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ba4:	0e1b      	lsrs	r3, r3, #24
 8003ba6:	f003 030f 	and.w	r3, r3, #15
 8003baa:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 8003bac:	4b5a      	ldr	r3, [pc, #360]	; (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003bae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bb2:	099b      	lsrs	r3, r3, #6
 8003bb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	fb03 f202 	mul.w	r2, r3, r2
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc4:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8003bc6:	4b54      	ldr	r3, [pc, #336]	; (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003bc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bcc:	f003 031f 	and.w	r3, r3, #31
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8003bd4:	69fa      	ldr	r2, [r7, #28]
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bdc:	61fb      	str	r3, [r7, #28]
          break;
 8003bde:	e039      	b.n	8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003be0:	4b4d      	ldr	r3, [pc, #308]	; (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d108      	bne.n	8003bfe <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003bec:	4b4a      	ldr	r3, [pc, #296]	; (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bf4:	4a49      	ldr	r2, [pc, #292]	; (8003d1c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bfa:	61bb      	str	r3, [r7, #24]
 8003bfc:	e007      	b.n	8003c0e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003bfe:	4b46      	ldr	r3, [pc, #280]	; (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c06:	4a46      	ldr	r2, [pc, #280]	; (8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c0c:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 8003c0e:	4b42      	ldr	r3, [pc, #264]	; (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	0f1b      	lsrs	r3, r3, #28
 8003c14:	f003 0307 	and.w	r3, r3, #7
 8003c18:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 8003c1a:	4b3f      	ldr	r3, [pc, #252]	; (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	099b      	lsrs	r3, r3, #6
 8003c20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	fb03 f202 	mul.w	r2, r3, r2
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c30:	61fb      	str	r3, [r7, #28]
          break;
 8003c32:	e00f      	b.n	8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 8003c34:	4b3b      	ldr	r3, [pc, #236]	; (8003d24 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8003c36:	61fb      	str	r3, [r7, #28]
          break;
 8003c38:	e00c      	b.n	8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003c3a:	4b37      	ldr	r3, [pc, #220]	; (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d102      	bne.n	8003c4c <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 8003c46:	4b35      	ldr	r3, [pc, #212]	; (8003d1c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003c48:	61fb      	str	r3, [r7, #28]
          break;
 8003c4a:	e003      	b.n	8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 8003c4c:	4b34      	ldr	r3, [pc, #208]	; (8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003c4e:	61fb      	str	r3, [r7, #28]
          break;
 8003c50:	e000      	b.n	8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 8003c52:	bf00      	nop
        }
      }
      break;
 8003c54:	e11f      	b.n	8003e96 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8003c56:	4b30      	ldr	r3, [pc, #192]	; (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003c58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c5c:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8003c60:	60fb      	str	r3, [r7, #12]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003c68:	d079      	beq.n	8003d5e <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003c70:	f200 8082 	bhi.w	8003d78 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c7a:	d03c      	beq.n	8003cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c82:	d879      	bhi.n	8003d78 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d006      	beq.n	8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c90:	d172      	bne.n	8003d78 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003c92:	4b24      	ldr	r3, [pc, #144]	; (8003d24 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8003c94:	61fb      	str	r3, [r7, #28]
          break;
 8003c96:	e072      	b.n	8003d7e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003c98:	4b1f      	ldr	r3, [pc, #124]	; (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ca0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ca4:	d109      	bne.n	8003cba <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003ca6:	4b1c      	ldr	r3, [pc, #112]	; (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003ca8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cb0:	4a1b      	ldr	r2, [pc, #108]	; (8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb6:	61bb      	str	r3, [r7, #24]
 8003cb8:	e008      	b.n	8003ccc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003cba:	4b17      	ldr	r3, [pc, #92]	; (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003cbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cc4:	4a15      	ldr	r2, [pc, #84]	; (8003d1c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cca:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003ccc:	4b12      	ldr	r3, [pc, #72]	; (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003cce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cd2:	099b      	lsrs	r3, r3, #6
 8003cd4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	fb02 f303 	mul.w	r3, r2, r3
 8003cde:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003ce0:	4b0d      	ldr	r3, [pc, #52]	; (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003ce2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ce6:	0f1b      	lsrs	r3, r3, #28
 8003ce8:	f003 0307 	and.w	r3, r3, #7
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf2:	61fb      	str	r3, [r7, #28]
          break;
 8003cf4:	e043      	b.n	8003d7e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003cf6:	4b08      	ldr	r3, [pc, #32]	; (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d02:	d111      	bne.n	8003d28 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003d04:	4b04      	ldr	r3, [pc, #16]	; (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d0c:	4a04      	ldr	r2, [pc, #16]	; (8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d12:	61bb      	str	r3, [r7, #24]
 8003d14:	e010      	b.n	8003d38 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8003d16:	bf00      	nop
 8003d18:	40023800 	.word	0x40023800
 8003d1c:	00f42400 	.word	0x00f42400
 8003d20:	007a1200 	.word	0x007a1200
 8003d24:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003d28:	4b5e      	ldr	r3, [pc, #376]	; (8003ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d30:	4a5d      	ldr	r2, [pc, #372]	; (8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d36:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8003d38:	4b5a      	ldr	r3, [pc, #360]	; (8003ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	099b      	lsrs	r3, r3, #6
 8003d3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	fb02 f303 	mul.w	r3, r2, r3
 8003d48:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8003d4a:	4b56      	ldr	r3, [pc, #344]	; (8003ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	0f1b      	lsrs	r3, r3, #28
 8003d50:	f003 0307 	and.w	r3, r3, #7
 8003d54:	68ba      	ldr	r2, [r7, #8]
 8003d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d5a:	61fb      	str	r3, [r7, #28]
          break;
 8003d5c:	e00f      	b.n	8003d7e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003d5e:	4b51      	ldr	r3, [pc, #324]	; (8003ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d6a:	d102      	bne.n	8003d72 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 8003d6c:	4b4f      	ldr	r3, [pc, #316]	; (8003eac <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003d6e:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8003d70:	e005      	b.n	8003d7e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 8003d72:	4b4d      	ldr	r3, [pc, #308]	; (8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003d74:	61fb      	str	r3, [r7, #28]
          break;
 8003d76:	e002      	b.n	8003d7e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	61fb      	str	r3, [r7, #28]
          break;
 8003d7c:	bf00      	nop
        }
      }
      break;
 8003d7e:	e08a      	b.n	8003e96 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8003d80:	4b48      	ldr	r3, [pc, #288]	; (8003ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003d82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d86:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8003d8a:	60fb      	str	r3, [r7, #12]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003d92:	d06f      	beq.n	8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003d9a:	d878      	bhi.n	8003e8e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003da2:	d03c      	beq.n	8003e1e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003daa:	d870      	bhi.n	8003e8e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d006      	beq.n	8003dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003db8:	d169      	bne.n	8003e8e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003dba:	4b3d      	ldr	r3, [pc, #244]	; (8003eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8003dbc:	61fb      	str	r3, [r7, #28]
          break;
 8003dbe:	e069      	b.n	8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003dc0:	4b38      	ldr	r3, [pc, #224]	; (8003ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dcc:	d109      	bne.n	8003de2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003dce:	4b35      	ldr	r3, [pc, #212]	; (8003ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003dd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dd8:	4a34      	ldr	r2, [pc, #208]	; (8003eac <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dde:	61bb      	str	r3, [r7, #24]
 8003de0:	e008      	b.n	8003df4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003de2:	4b30      	ldr	r3, [pc, #192]	; (8003ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003de4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003de8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dec:	4a2e      	ldr	r2, [pc, #184]	; (8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df2:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003df4:	4b2b      	ldr	r3, [pc, #172]	; (8003ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003df6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dfa:	099b      	lsrs	r3, r3, #6
 8003dfc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	fb02 f303 	mul.w	r3, r2, r3
 8003e06:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003e08:	4b26      	ldr	r3, [pc, #152]	; (8003ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e0e:	0f1b      	lsrs	r3, r3, #28
 8003e10:	f003 0307 	and.w	r3, r3, #7
 8003e14:	68ba      	ldr	r2, [r7, #8]
 8003e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e1a:	61fb      	str	r3, [r7, #28]
          break;
 8003e1c:	e03a      	b.n	8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003e1e:	4b21      	ldr	r3, [pc, #132]	; (8003ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e2a:	d108      	bne.n	8003e3e <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003e2c:	4b1d      	ldr	r3, [pc, #116]	; (8003ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e34:	4a1d      	ldr	r2, [pc, #116]	; (8003eac <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e3a:	61bb      	str	r3, [r7, #24]
 8003e3c:	e007      	b.n	8003e4e <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003e3e:	4b19      	ldr	r3, [pc, #100]	; (8003ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e46:	4a18      	ldr	r2, [pc, #96]	; (8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e4c:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8003e4e:	4b15      	ldr	r3, [pc, #84]	; (8003ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	099b      	lsrs	r3, r3, #6
 8003e54:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	fb02 f303 	mul.w	r3, r2, r3
 8003e5e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8003e60:	4b10      	ldr	r3, [pc, #64]	; (8003ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	0f1b      	lsrs	r3, r3, #28
 8003e66:	f003 0307 	and.w	r3, r3, #7
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e70:	61fb      	str	r3, [r7, #28]
          break;
 8003e72:	e00f      	b.n	8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003e74:	4b0b      	ldr	r3, [pc, #44]	; (8003ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e80:	d102      	bne.n	8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 8003e82:	4b0a      	ldr	r3, [pc, #40]	; (8003eac <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003e84:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8003e86:	e005      	b.n	8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 8003e88:	4b07      	ldr	r3, [pc, #28]	; (8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003e8a:	61fb      	str	r3, [r7, #28]
          break;
 8003e8c:	e002      	b.n	8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	61fb      	str	r3, [r7, #28]
          break;
 8003e92:	bf00      	nop
        }
      }
      break;
 8003e94:	bf00      	nop
    }
  }
  return frequency;
 8003e96:	69fb      	ldr	r3, [r7, #28]
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3724      	adds	r7, #36	; 0x24
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr
 8003ea4:	40023800 	.word	0x40023800
 8003ea8:	00f42400 	.word	0x00f42400
 8003eac:	007a1200 	.word	0x007a1200
 8003eb0:	00bb8000 	.word	0x00bb8000

08003eb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003eb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003eb8:	b0ae      	sub	sp, #184	; 0xb8
 8003eba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003eda:	4bcb      	ldr	r3, [pc, #812]	; (8004208 <HAL_RCC_GetSysClockFreq+0x354>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f003 030c 	and.w	r3, r3, #12
 8003ee2:	2b0c      	cmp	r3, #12
 8003ee4:	f200 8206 	bhi.w	80042f4 <HAL_RCC_GetSysClockFreq+0x440>
 8003ee8:	a201      	add	r2, pc, #4	; (adr r2, 8003ef0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eee:	bf00      	nop
 8003ef0:	08003f25 	.word	0x08003f25
 8003ef4:	080042f5 	.word	0x080042f5
 8003ef8:	080042f5 	.word	0x080042f5
 8003efc:	080042f5 	.word	0x080042f5
 8003f00:	08003f2d 	.word	0x08003f2d
 8003f04:	080042f5 	.word	0x080042f5
 8003f08:	080042f5 	.word	0x080042f5
 8003f0c:	080042f5 	.word	0x080042f5
 8003f10:	08003f35 	.word	0x08003f35
 8003f14:	080042f5 	.word	0x080042f5
 8003f18:	080042f5 	.word	0x080042f5
 8003f1c:	080042f5 	.word	0x080042f5
 8003f20:	08004125 	.word	0x08004125
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f24:	4bb9      	ldr	r3, [pc, #740]	; (800420c <HAL_RCC_GetSysClockFreq+0x358>)
 8003f26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003f2a:	e1e7      	b.n	80042fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f2c:	4bb8      	ldr	r3, [pc, #736]	; (8004210 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003f2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003f32:	e1e3      	b.n	80042fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f34:	4bb4      	ldr	r3, [pc, #720]	; (8004208 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f40:	4bb1      	ldr	r3, [pc, #708]	; (8004208 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d071      	beq.n	8004030 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f4c:	4bae      	ldr	r3, [pc, #696]	; (8004208 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	099b      	lsrs	r3, r3, #6
 8003f52:	2200      	movs	r2, #0
 8003f54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003f58:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003f5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f64:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003f68:	2300      	movs	r3, #0
 8003f6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003f6e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003f72:	4622      	mov	r2, r4
 8003f74:	462b      	mov	r3, r5
 8003f76:	f04f 0000 	mov.w	r0, #0
 8003f7a:	f04f 0100 	mov.w	r1, #0
 8003f7e:	0159      	lsls	r1, r3, #5
 8003f80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f84:	0150      	lsls	r0, r2, #5
 8003f86:	4602      	mov	r2, r0
 8003f88:	460b      	mov	r3, r1
 8003f8a:	4621      	mov	r1, r4
 8003f8c:	1a51      	subs	r1, r2, r1
 8003f8e:	6439      	str	r1, [r7, #64]	; 0x40
 8003f90:	4629      	mov	r1, r5
 8003f92:	eb63 0301 	sbc.w	r3, r3, r1
 8003f96:	647b      	str	r3, [r7, #68]	; 0x44
 8003f98:	f04f 0200 	mov.w	r2, #0
 8003f9c:	f04f 0300 	mov.w	r3, #0
 8003fa0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003fa4:	4649      	mov	r1, r9
 8003fa6:	018b      	lsls	r3, r1, #6
 8003fa8:	4641      	mov	r1, r8
 8003faa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fae:	4641      	mov	r1, r8
 8003fb0:	018a      	lsls	r2, r1, #6
 8003fb2:	4641      	mov	r1, r8
 8003fb4:	1a51      	subs	r1, r2, r1
 8003fb6:	63b9      	str	r1, [r7, #56]	; 0x38
 8003fb8:	4649      	mov	r1, r9
 8003fba:	eb63 0301 	sbc.w	r3, r3, r1
 8003fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fc0:	f04f 0200 	mov.w	r2, #0
 8003fc4:	f04f 0300 	mov.w	r3, #0
 8003fc8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003fcc:	4649      	mov	r1, r9
 8003fce:	00cb      	lsls	r3, r1, #3
 8003fd0:	4641      	mov	r1, r8
 8003fd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fd6:	4641      	mov	r1, r8
 8003fd8:	00ca      	lsls	r2, r1, #3
 8003fda:	4610      	mov	r0, r2
 8003fdc:	4619      	mov	r1, r3
 8003fde:	4603      	mov	r3, r0
 8003fe0:	4622      	mov	r2, r4
 8003fe2:	189b      	adds	r3, r3, r2
 8003fe4:	633b      	str	r3, [r7, #48]	; 0x30
 8003fe6:	462b      	mov	r3, r5
 8003fe8:	460a      	mov	r2, r1
 8003fea:	eb42 0303 	adc.w	r3, r2, r3
 8003fee:	637b      	str	r3, [r7, #52]	; 0x34
 8003ff0:	f04f 0200 	mov.w	r2, #0
 8003ff4:	f04f 0300 	mov.w	r3, #0
 8003ff8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003ffc:	4629      	mov	r1, r5
 8003ffe:	024b      	lsls	r3, r1, #9
 8004000:	4621      	mov	r1, r4
 8004002:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004006:	4621      	mov	r1, r4
 8004008:	024a      	lsls	r2, r1, #9
 800400a:	4610      	mov	r0, r2
 800400c:	4619      	mov	r1, r3
 800400e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004012:	2200      	movs	r2, #0
 8004014:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004018:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800401c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004020:	f7fc f956 	bl	80002d0 <__aeabi_uldivmod>
 8004024:	4602      	mov	r2, r0
 8004026:	460b      	mov	r3, r1
 8004028:	4613      	mov	r3, r2
 800402a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800402e:	e067      	b.n	8004100 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004030:	4b75      	ldr	r3, [pc, #468]	; (8004208 <HAL_RCC_GetSysClockFreq+0x354>)
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	099b      	lsrs	r3, r3, #6
 8004036:	2200      	movs	r2, #0
 8004038:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800403c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004040:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004044:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004048:	67bb      	str	r3, [r7, #120]	; 0x78
 800404a:	2300      	movs	r3, #0
 800404c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800404e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004052:	4622      	mov	r2, r4
 8004054:	462b      	mov	r3, r5
 8004056:	f04f 0000 	mov.w	r0, #0
 800405a:	f04f 0100 	mov.w	r1, #0
 800405e:	0159      	lsls	r1, r3, #5
 8004060:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004064:	0150      	lsls	r0, r2, #5
 8004066:	4602      	mov	r2, r0
 8004068:	460b      	mov	r3, r1
 800406a:	4621      	mov	r1, r4
 800406c:	1a51      	subs	r1, r2, r1
 800406e:	62b9      	str	r1, [r7, #40]	; 0x28
 8004070:	4629      	mov	r1, r5
 8004072:	eb63 0301 	sbc.w	r3, r3, r1
 8004076:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004078:	f04f 0200 	mov.w	r2, #0
 800407c:	f04f 0300 	mov.w	r3, #0
 8004080:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004084:	4649      	mov	r1, r9
 8004086:	018b      	lsls	r3, r1, #6
 8004088:	4641      	mov	r1, r8
 800408a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800408e:	4641      	mov	r1, r8
 8004090:	018a      	lsls	r2, r1, #6
 8004092:	4641      	mov	r1, r8
 8004094:	ebb2 0a01 	subs.w	sl, r2, r1
 8004098:	4649      	mov	r1, r9
 800409a:	eb63 0b01 	sbc.w	fp, r3, r1
 800409e:	f04f 0200 	mov.w	r2, #0
 80040a2:	f04f 0300 	mov.w	r3, #0
 80040a6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80040aa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80040ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040b2:	4692      	mov	sl, r2
 80040b4:	469b      	mov	fp, r3
 80040b6:	4623      	mov	r3, r4
 80040b8:	eb1a 0303 	adds.w	r3, sl, r3
 80040bc:	623b      	str	r3, [r7, #32]
 80040be:	462b      	mov	r3, r5
 80040c0:	eb4b 0303 	adc.w	r3, fp, r3
 80040c4:	627b      	str	r3, [r7, #36]	; 0x24
 80040c6:	f04f 0200 	mov.w	r2, #0
 80040ca:	f04f 0300 	mov.w	r3, #0
 80040ce:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80040d2:	4629      	mov	r1, r5
 80040d4:	028b      	lsls	r3, r1, #10
 80040d6:	4621      	mov	r1, r4
 80040d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040dc:	4621      	mov	r1, r4
 80040de:	028a      	lsls	r2, r1, #10
 80040e0:	4610      	mov	r0, r2
 80040e2:	4619      	mov	r1, r3
 80040e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80040e8:	2200      	movs	r2, #0
 80040ea:	673b      	str	r3, [r7, #112]	; 0x70
 80040ec:	677a      	str	r2, [r7, #116]	; 0x74
 80040ee:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80040f2:	f7fc f8ed 	bl	80002d0 <__aeabi_uldivmod>
 80040f6:	4602      	mov	r2, r0
 80040f8:	460b      	mov	r3, r1
 80040fa:	4613      	mov	r3, r2
 80040fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004100:	4b41      	ldr	r3, [pc, #260]	; (8004208 <HAL_RCC_GetSysClockFreq+0x354>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	0c1b      	lsrs	r3, r3, #16
 8004106:	f003 0303 	and.w	r3, r3, #3
 800410a:	3301      	adds	r3, #1
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004112:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004116:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800411a:	fbb2 f3f3 	udiv	r3, r2, r3
 800411e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004122:	e0eb      	b.n	80042fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004124:	4b38      	ldr	r3, [pc, #224]	; (8004208 <HAL_RCC_GetSysClockFreq+0x354>)
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800412c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004130:	4b35      	ldr	r3, [pc, #212]	; (8004208 <HAL_RCC_GetSysClockFreq+0x354>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d06b      	beq.n	8004214 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800413c:	4b32      	ldr	r3, [pc, #200]	; (8004208 <HAL_RCC_GetSysClockFreq+0x354>)
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	099b      	lsrs	r3, r3, #6
 8004142:	2200      	movs	r2, #0
 8004144:	66bb      	str	r3, [r7, #104]	; 0x68
 8004146:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004148:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800414a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800414e:	663b      	str	r3, [r7, #96]	; 0x60
 8004150:	2300      	movs	r3, #0
 8004152:	667b      	str	r3, [r7, #100]	; 0x64
 8004154:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004158:	4622      	mov	r2, r4
 800415a:	462b      	mov	r3, r5
 800415c:	f04f 0000 	mov.w	r0, #0
 8004160:	f04f 0100 	mov.w	r1, #0
 8004164:	0159      	lsls	r1, r3, #5
 8004166:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800416a:	0150      	lsls	r0, r2, #5
 800416c:	4602      	mov	r2, r0
 800416e:	460b      	mov	r3, r1
 8004170:	4621      	mov	r1, r4
 8004172:	1a51      	subs	r1, r2, r1
 8004174:	61b9      	str	r1, [r7, #24]
 8004176:	4629      	mov	r1, r5
 8004178:	eb63 0301 	sbc.w	r3, r3, r1
 800417c:	61fb      	str	r3, [r7, #28]
 800417e:	f04f 0200 	mov.w	r2, #0
 8004182:	f04f 0300 	mov.w	r3, #0
 8004186:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800418a:	4659      	mov	r1, fp
 800418c:	018b      	lsls	r3, r1, #6
 800418e:	4651      	mov	r1, sl
 8004190:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004194:	4651      	mov	r1, sl
 8004196:	018a      	lsls	r2, r1, #6
 8004198:	4651      	mov	r1, sl
 800419a:	ebb2 0801 	subs.w	r8, r2, r1
 800419e:	4659      	mov	r1, fp
 80041a0:	eb63 0901 	sbc.w	r9, r3, r1
 80041a4:	f04f 0200 	mov.w	r2, #0
 80041a8:	f04f 0300 	mov.w	r3, #0
 80041ac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041b0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041b4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041b8:	4690      	mov	r8, r2
 80041ba:	4699      	mov	r9, r3
 80041bc:	4623      	mov	r3, r4
 80041be:	eb18 0303 	adds.w	r3, r8, r3
 80041c2:	613b      	str	r3, [r7, #16]
 80041c4:	462b      	mov	r3, r5
 80041c6:	eb49 0303 	adc.w	r3, r9, r3
 80041ca:	617b      	str	r3, [r7, #20]
 80041cc:	f04f 0200 	mov.w	r2, #0
 80041d0:	f04f 0300 	mov.w	r3, #0
 80041d4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80041d8:	4629      	mov	r1, r5
 80041da:	024b      	lsls	r3, r1, #9
 80041dc:	4621      	mov	r1, r4
 80041de:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80041e2:	4621      	mov	r1, r4
 80041e4:	024a      	lsls	r2, r1, #9
 80041e6:	4610      	mov	r0, r2
 80041e8:	4619      	mov	r1, r3
 80041ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80041ee:	2200      	movs	r2, #0
 80041f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80041f2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80041f4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80041f8:	f7fc f86a 	bl	80002d0 <__aeabi_uldivmod>
 80041fc:	4602      	mov	r2, r0
 80041fe:	460b      	mov	r3, r1
 8004200:	4613      	mov	r3, r2
 8004202:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004206:	e065      	b.n	80042d4 <HAL_RCC_GetSysClockFreq+0x420>
 8004208:	40023800 	.word	0x40023800
 800420c:	00f42400 	.word	0x00f42400
 8004210:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004214:	4b3d      	ldr	r3, [pc, #244]	; (800430c <HAL_RCC_GetSysClockFreq+0x458>)
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	099b      	lsrs	r3, r3, #6
 800421a:	2200      	movs	r2, #0
 800421c:	4618      	mov	r0, r3
 800421e:	4611      	mov	r1, r2
 8004220:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004224:	653b      	str	r3, [r7, #80]	; 0x50
 8004226:	2300      	movs	r3, #0
 8004228:	657b      	str	r3, [r7, #84]	; 0x54
 800422a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800422e:	4642      	mov	r2, r8
 8004230:	464b      	mov	r3, r9
 8004232:	f04f 0000 	mov.w	r0, #0
 8004236:	f04f 0100 	mov.w	r1, #0
 800423a:	0159      	lsls	r1, r3, #5
 800423c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004240:	0150      	lsls	r0, r2, #5
 8004242:	4602      	mov	r2, r0
 8004244:	460b      	mov	r3, r1
 8004246:	4641      	mov	r1, r8
 8004248:	1a51      	subs	r1, r2, r1
 800424a:	60b9      	str	r1, [r7, #8]
 800424c:	4649      	mov	r1, r9
 800424e:	eb63 0301 	sbc.w	r3, r3, r1
 8004252:	60fb      	str	r3, [r7, #12]
 8004254:	f04f 0200 	mov.w	r2, #0
 8004258:	f04f 0300 	mov.w	r3, #0
 800425c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004260:	4659      	mov	r1, fp
 8004262:	018b      	lsls	r3, r1, #6
 8004264:	4651      	mov	r1, sl
 8004266:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800426a:	4651      	mov	r1, sl
 800426c:	018a      	lsls	r2, r1, #6
 800426e:	4651      	mov	r1, sl
 8004270:	1a54      	subs	r4, r2, r1
 8004272:	4659      	mov	r1, fp
 8004274:	eb63 0501 	sbc.w	r5, r3, r1
 8004278:	f04f 0200 	mov.w	r2, #0
 800427c:	f04f 0300 	mov.w	r3, #0
 8004280:	00eb      	lsls	r3, r5, #3
 8004282:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004286:	00e2      	lsls	r2, r4, #3
 8004288:	4614      	mov	r4, r2
 800428a:	461d      	mov	r5, r3
 800428c:	4643      	mov	r3, r8
 800428e:	18e3      	adds	r3, r4, r3
 8004290:	603b      	str	r3, [r7, #0]
 8004292:	464b      	mov	r3, r9
 8004294:	eb45 0303 	adc.w	r3, r5, r3
 8004298:	607b      	str	r3, [r7, #4]
 800429a:	f04f 0200 	mov.w	r2, #0
 800429e:	f04f 0300 	mov.w	r3, #0
 80042a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042a6:	4629      	mov	r1, r5
 80042a8:	028b      	lsls	r3, r1, #10
 80042aa:	4621      	mov	r1, r4
 80042ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042b0:	4621      	mov	r1, r4
 80042b2:	028a      	lsls	r2, r1, #10
 80042b4:	4610      	mov	r0, r2
 80042b6:	4619      	mov	r1, r3
 80042b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80042bc:	2200      	movs	r2, #0
 80042be:	64bb      	str	r3, [r7, #72]	; 0x48
 80042c0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80042c2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80042c6:	f7fc f803 	bl	80002d0 <__aeabi_uldivmod>
 80042ca:	4602      	mov	r2, r0
 80042cc:	460b      	mov	r3, r1
 80042ce:	4613      	mov	r3, r2
 80042d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80042d4:	4b0d      	ldr	r3, [pc, #52]	; (800430c <HAL_RCC_GetSysClockFreq+0x458>)
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	0f1b      	lsrs	r3, r3, #28
 80042da:	f003 0307 	and.w	r3, r3, #7
 80042de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80042e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80042e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80042ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80042f2:	e003      	b.n	80042fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042f4:	4b06      	ldr	r3, [pc, #24]	; (8004310 <HAL_RCC_GetSysClockFreq+0x45c>)
 80042f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80042fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004300:	4618      	mov	r0, r3
 8004302:	37b8      	adds	r7, #184	; 0xb8
 8004304:	46bd      	mov	sp, r7
 8004306:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800430a:	bf00      	nop
 800430c:	40023800 	.word	0x40023800
 8004310:	00f42400 	.word	0x00f42400

08004314 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d101      	bne.n	8004326 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e28d      	b.n	8004842 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	2b00      	cmp	r3, #0
 8004330:	f000 8083 	beq.w	800443a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004334:	4b94      	ldr	r3, [pc, #592]	; (8004588 <HAL_RCC_OscConfig+0x274>)
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f003 030c 	and.w	r3, r3, #12
 800433c:	2b04      	cmp	r3, #4
 800433e:	d019      	beq.n	8004374 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004340:	4b91      	ldr	r3, [pc, #580]	; (8004588 <HAL_RCC_OscConfig+0x274>)
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004348:	2b08      	cmp	r3, #8
 800434a:	d106      	bne.n	800435a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800434c:	4b8e      	ldr	r3, [pc, #568]	; (8004588 <HAL_RCC_OscConfig+0x274>)
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004354:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004358:	d00c      	beq.n	8004374 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800435a:	4b8b      	ldr	r3, [pc, #556]	; (8004588 <HAL_RCC_OscConfig+0x274>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004362:	2b0c      	cmp	r3, #12
 8004364:	d112      	bne.n	800438c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004366:	4b88      	ldr	r3, [pc, #544]	; (8004588 <HAL_RCC_OscConfig+0x274>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800436e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004372:	d10b      	bne.n	800438c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004374:	4b84      	ldr	r3, [pc, #528]	; (8004588 <HAL_RCC_OscConfig+0x274>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d05b      	beq.n	8004438 <HAL_RCC_OscConfig+0x124>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d157      	bne.n	8004438 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e25a      	b.n	8004842 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004394:	d106      	bne.n	80043a4 <HAL_RCC_OscConfig+0x90>
 8004396:	4b7c      	ldr	r3, [pc, #496]	; (8004588 <HAL_RCC_OscConfig+0x274>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a7b      	ldr	r2, [pc, #492]	; (8004588 <HAL_RCC_OscConfig+0x274>)
 800439c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043a0:	6013      	str	r3, [r2, #0]
 80043a2:	e01d      	b.n	80043e0 <HAL_RCC_OscConfig+0xcc>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043ac:	d10c      	bne.n	80043c8 <HAL_RCC_OscConfig+0xb4>
 80043ae:	4b76      	ldr	r3, [pc, #472]	; (8004588 <HAL_RCC_OscConfig+0x274>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a75      	ldr	r2, [pc, #468]	; (8004588 <HAL_RCC_OscConfig+0x274>)
 80043b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043b8:	6013      	str	r3, [r2, #0]
 80043ba:	4b73      	ldr	r3, [pc, #460]	; (8004588 <HAL_RCC_OscConfig+0x274>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a72      	ldr	r2, [pc, #456]	; (8004588 <HAL_RCC_OscConfig+0x274>)
 80043c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043c4:	6013      	str	r3, [r2, #0]
 80043c6:	e00b      	b.n	80043e0 <HAL_RCC_OscConfig+0xcc>
 80043c8:	4b6f      	ldr	r3, [pc, #444]	; (8004588 <HAL_RCC_OscConfig+0x274>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a6e      	ldr	r2, [pc, #440]	; (8004588 <HAL_RCC_OscConfig+0x274>)
 80043ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043d2:	6013      	str	r3, [r2, #0]
 80043d4:	4b6c      	ldr	r3, [pc, #432]	; (8004588 <HAL_RCC_OscConfig+0x274>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a6b      	ldr	r2, [pc, #428]	; (8004588 <HAL_RCC_OscConfig+0x274>)
 80043da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d013      	beq.n	8004410 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e8:	f7fd fa00 	bl	80017ec <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043f0:	f7fd f9fc 	bl	80017ec <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b64      	cmp	r3, #100	; 0x64
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e21f      	b.n	8004842 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004402:	4b61      	ldr	r3, [pc, #388]	; (8004588 <HAL_RCC_OscConfig+0x274>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d0f0      	beq.n	80043f0 <HAL_RCC_OscConfig+0xdc>
 800440e:	e014      	b.n	800443a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004410:	f7fd f9ec 	bl	80017ec <HAL_GetTick>
 8004414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004416:	e008      	b.n	800442a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004418:	f7fd f9e8 	bl	80017ec <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b64      	cmp	r3, #100	; 0x64
 8004424:	d901      	bls.n	800442a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e20b      	b.n	8004842 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800442a:	4b57      	ldr	r3, [pc, #348]	; (8004588 <HAL_RCC_OscConfig+0x274>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1f0      	bne.n	8004418 <HAL_RCC_OscConfig+0x104>
 8004436:	e000      	b.n	800443a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004438:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d06f      	beq.n	8004526 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004446:	4b50      	ldr	r3, [pc, #320]	; (8004588 <HAL_RCC_OscConfig+0x274>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f003 030c 	and.w	r3, r3, #12
 800444e:	2b00      	cmp	r3, #0
 8004450:	d017      	beq.n	8004482 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004452:	4b4d      	ldr	r3, [pc, #308]	; (8004588 <HAL_RCC_OscConfig+0x274>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800445a:	2b08      	cmp	r3, #8
 800445c:	d105      	bne.n	800446a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800445e:	4b4a      	ldr	r3, [pc, #296]	; (8004588 <HAL_RCC_OscConfig+0x274>)
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00b      	beq.n	8004482 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800446a:	4b47      	ldr	r3, [pc, #284]	; (8004588 <HAL_RCC_OscConfig+0x274>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004472:	2b0c      	cmp	r3, #12
 8004474:	d11c      	bne.n	80044b0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004476:	4b44      	ldr	r3, [pc, #272]	; (8004588 <HAL_RCC_OscConfig+0x274>)
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d116      	bne.n	80044b0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004482:	4b41      	ldr	r3, [pc, #260]	; (8004588 <HAL_RCC_OscConfig+0x274>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d005      	beq.n	800449a <HAL_RCC_OscConfig+0x186>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d001      	beq.n	800449a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e1d3      	b.n	8004842 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800449a:	4b3b      	ldr	r3, [pc, #236]	; (8004588 <HAL_RCC_OscConfig+0x274>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	00db      	lsls	r3, r3, #3
 80044a8:	4937      	ldr	r1, [pc, #220]	; (8004588 <HAL_RCC_OscConfig+0x274>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ae:	e03a      	b.n	8004526 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d020      	beq.n	80044fa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044b8:	4b34      	ldr	r3, [pc, #208]	; (800458c <HAL_RCC_OscConfig+0x278>)
 80044ba:	2201      	movs	r2, #1
 80044bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044be:	f7fd f995 	bl	80017ec <HAL_GetTick>
 80044c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044c4:	e008      	b.n	80044d8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044c6:	f7fd f991 	bl	80017ec <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d901      	bls.n	80044d8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e1b4      	b.n	8004842 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044d8:	4b2b      	ldr	r3, [pc, #172]	; (8004588 <HAL_RCC_OscConfig+0x274>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d0f0      	beq.n	80044c6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044e4:	4b28      	ldr	r3, [pc, #160]	; (8004588 <HAL_RCC_OscConfig+0x274>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	00db      	lsls	r3, r3, #3
 80044f2:	4925      	ldr	r1, [pc, #148]	; (8004588 <HAL_RCC_OscConfig+0x274>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	600b      	str	r3, [r1, #0]
 80044f8:	e015      	b.n	8004526 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044fa:	4b24      	ldr	r3, [pc, #144]	; (800458c <HAL_RCC_OscConfig+0x278>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004500:	f7fd f974 	bl	80017ec <HAL_GetTick>
 8004504:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004506:	e008      	b.n	800451a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004508:	f7fd f970 	bl	80017ec <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b02      	cmp	r3, #2
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e193      	b.n	8004842 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800451a:	4b1b      	ldr	r3, [pc, #108]	; (8004588 <HAL_RCC_OscConfig+0x274>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1f0      	bne.n	8004508 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0308 	and.w	r3, r3, #8
 800452e:	2b00      	cmp	r3, #0
 8004530:	d036      	beq.n	80045a0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d016      	beq.n	8004568 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800453a:	4b15      	ldr	r3, [pc, #84]	; (8004590 <HAL_RCC_OscConfig+0x27c>)
 800453c:	2201      	movs	r2, #1
 800453e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004540:	f7fd f954 	bl	80017ec <HAL_GetTick>
 8004544:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004546:	e008      	b.n	800455a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004548:	f7fd f950 	bl	80017ec <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b02      	cmp	r3, #2
 8004554:	d901      	bls.n	800455a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e173      	b.n	8004842 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800455a:	4b0b      	ldr	r3, [pc, #44]	; (8004588 <HAL_RCC_OscConfig+0x274>)
 800455c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d0f0      	beq.n	8004548 <HAL_RCC_OscConfig+0x234>
 8004566:	e01b      	b.n	80045a0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004568:	4b09      	ldr	r3, [pc, #36]	; (8004590 <HAL_RCC_OscConfig+0x27c>)
 800456a:	2200      	movs	r2, #0
 800456c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800456e:	f7fd f93d 	bl	80017ec <HAL_GetTick>
 8004572:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004574:	e00e      	b.n	8004594 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004576:	f7fd f939 	bl	80017ec <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	2b02      	cmp	r3, #2
 8004582:	d907      	bls.n	8004594 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e15c      	b.n	8004842 <HAL_RCC_OscConfig+0x52e>
 8004588:	40023800 	.word	0x40023800
 800458c:	42470000 	.word	0x42470000
 8004590:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004594:	4b8a      	ldr	r3, [pc, #552]	; (80047c0 <HAL_RCC_OscConfig+0x4ac>)
 8004596:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1ea      	bne.n	8004576 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0304 	and.w	r3, r3, #4
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f000 8097 	beq.w	80046dc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045ae:	2300      	movs	r3, #0
 80045b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045b2:	4b83      	ldr	r3, [pc, #524]	; (80047c0 <HAL_RCC_OscConfig+0x4ac>)
 80045b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10f      	bne.n	80045de <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045be:	2300      	movs	r3, #0
 80045c0:	60bb      	str	r3, [r7, #8]
 80045c2:	4b7f      	ldr	r3, [pc, #508]	; (80047c0 <HAL_RCC_OscConfig+0x4ac>)
 80045c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c6:	4a7e      	ldr	r2, [pc, #504]	; (80047c0 <HAL_RCC_OscConfig+0x4ac>)
 80045c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045cc:	6413      	str	r3, [r2, #64]	; 0x40
 80045ce:	4b7c      	ldr	r3, [pc, #496]	; (80047c0 <HAL_RCC_OscConfig+0x4ac>)
 80045d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d6:	60bb      	str	r3, [r7, #8]
 80045d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045da:	2301      	movs	r3, #1
 80045dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045de:	4b79      	ldr	r3, [pc, #484]	; (80047c4 <HAL_RCC_OscConfig+0x4b0>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d118      	bne.n	800461c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045ea:	4b76      	ldr	r3, [pc, #472]	; (80047c4 <HAL_RCC_OscConfig+0x4b0>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a75      	ldr	r2, [pc, #468]	; (80047c4 <HAL_RCC_OscConfig+0x4b0>)
 80045f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045f6:	f7fd f8f9 	bl	80017ec <HAL_GetTick>
 80045fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045fc:	e008      	b.n	8004610 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045fe:	f7fd f8f5 	bl	80017ec <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	2b02      	cmp	r3, #2
 800460a:	d901      	bls.n	8004610 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e118      	b.n	8004842 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004610:	4b6c      	ldr	r3, [pc, #432]	; (80047c4 <HAL_RCC_OscConfig+0x4b0>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004618:	2b00      	cmp	r3, #0
 800461a:	d0f0      	beq.n	80045fe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d106      	bne.n	8004632 <HAL_RCC_OscConfig+0x31e>
 8004624:	4b66      	ldr	r3, [pc, #408]	; (80047c0 <HAL_RCC_OscConfig+0x4ac>)
 8004626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004628:	4a65      	ldr	r2, [pc, #404]	; (80047c0 <HAL_RCC_OscConfig+0x4ac>)
 800462a:	f043 0301 	orr.w	r3, r3, #1
 800462e:	6713      	str	r3, [r2, #112]	; 0x70
 8004630:	e01c      	b.n	800466c <HAL_RCC_OscConfig+0x358>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	2b05      	cmp	r3, #5
 8004638:	d10c      	bne.n	8004654 <HAL_RCC_OscConfig+0x340>
 800463a:	4b61      	ldr	r3, [pc, #388]	; (80047c0 <HAL_RCC_OscConfig+0x4ac>)
 800463c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463e:	4a60      	ldr	r2, [pc, #384]	; (80047c0 <HAL_RCC_OscConfig+0x4ac>)
 8004640:	f043 0304 	orr.w	r3, r3, #4
 8004644:	6713      	str	r3, [r2, #112]	; 0x70
 8004646:	4b5e      	ldr	r3, [pc, #376]	; (80047c0 <HAL_RCC_OscConfig+0x4ac>)
 8004648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800464a:	4a5d      	ldr	r2, [pc, #372]	; (80047c0 <HAL_RCC_OscConfig+0x4ac>)
 800464c:	f043 0301 	orr.w	r3, r3, #1
 8004650:	6713      	str	r3, [r2, #112]	; 0x70
 8004652:	e00b      	b.n	800466c <HAL_RCC_OscConfig+0x358>
 8004654:	4b5a      	ldr	r3, [pc, #360]	; (80047c0 <HAL_RCC_OscConfig+0x4ac>)
 8004656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004658:	4a59      	ldr	r2, [pc, #356]	; (80047c0 <HAL_RCC_OscConfig+0x4ac>)
 800465a:	f023 0301 	bic.w	r3, r3, #1
 800465e:	6713      	str	r3, [r2, #112]	; 0x70
 8004660:	4b57      	ldr	r3, [pc, #348]	; (80047c0 <HAL_RCC_OscConfig+0x4ac>)
 8004662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004664:	4a56      	ldr	r2, [pc, #344]	; (80047c0 <HAL_RCC_OscConfig+0x4ac>)
 8004666:	f023 0304 	bic.w	r3, r3, #4
 800466a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d015      	beq.n	80046a0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004674:	f7fd f8ba 	bl	80017ec <HAL_GetTick>
 8004678:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800467a:	e00a      	b.n	8004692 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800467c:	f7fd f8b6 	bl	80017ec <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	f241 3288 	movw	r2, #5000	; 0x1388
 800468a:	4293      	cmp	r3, r2
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e0d7      	b.n	8004842 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004692:	4b4b      	ldr	r3, [pc, #300]	; (80047c0 <HAL_RCC_OscConfig+0x4ac>)
 8004694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b00      	cmp	r3, #0
 800469c:	d0ee      	beq.n	800467c <HAL_RCC_OscConfig+0x368>
 800469e:	e014      	b.n	80046ca <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a0:	f7fd f8a4 	bl	80017ec <HAL_GetTick>
 80046a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046a6:	e00a      	b.n	80046be <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046a8:	f7fd f8a0 	bl	80017ec <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e0c1      	b.n	8004842 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046be:	4b40      	ldr	r3, [pc, #256]	; (80047c0 <HAL_RCC_OscConfig+0x4ac>)
 80046c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1ee      	bne.n	80046a8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046ca:	7dfb      	ldrb	r3, [r7, #23]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d105      	bne.n	80046dc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046d0:	4b3b      	ldr	r3, [pc, #236]	; (80047c0 <HAL_RCC_OscConfig+0x4ac>)
 80046d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d4:	4a3a      	ldr	r2, [pc, #232]	; (80047c0 <HAL_RCC_OscConfig+0x4ac>)
 80046d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	699b      	ldr	r3, [r3, #24]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f000 80ad 	beq.w	8004840 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046e6:	4b36      	ldr	r3, [pc, #216]	; (80047c0 <HAL_RCC_OscConfig+0x4ac>)
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f003 030c 	and.w	r3, r3, #12
 80046ee:	2b08      	cmp	r3, #8
 80046f0:	d060      	beq.n	80047b4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	699b      	ldr	r3, [r3, #24]
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d145      	bne.n	8004786 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046fa:	4b33      	ldr	r3, [pc, #204]	; (80047c8 <HAL_RCC_OscConfig+0x4b4>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004700:	f7fd f874 	bl	80017ec <HAL_GetTick>
 8004704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004706:	e008      	b.n	800471a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004708:	f7fd f870 	bl	80017ec <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b02      	cmp	r3, #2
 8004714:	d901      	bls.n	800471a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e093      	b.n	8004842 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800471a:	4b29      	ldr	r3, [pc, #164]	; (80047c0 <HAL_RCC_OscConfig+0x4ac>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1f0      	bne.n	8004708 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	69da      	ldr	r2, [r3, #28]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	431a      	orrs	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004734:	019b      	lsls	r3, r3, #6
 8004736:	431a      	orrs	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473c:	085b      	lsrs	r3, r3, #1
 800473e:	3b01      	subs	r3, #1
 8004740:	041b      	lsls	r3, r3, #16
 8004742:	431a      	orrs	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004748:	061b      	lsls	r3, r3, #24
 800474a:	431a      	orrs	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004750:	071b      	lsls	r3, r3, #28
 8004752:	491b      	ldr	r1, [pc, #108]	; (80047c0 <HAL_RCC_OscConfig+0x4ac>)
 8004754:	4313      	orrs	r3, r2
 8004756:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004758:	4b1b      	ldr	r3, [pc, #108]	; (80047c8 <HAL_RCC_OscConfig+0x4b4>)
 800475a:	2201      	movs	r2, #1
 800475c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800475e:	f7fd f845 	bl	80017ec <HAL_GetTick>
 8004762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004764:	e008      	b.n	8004778 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004766:	f7fd f841 	bl	80017ec <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	2b02      	cmp	r3, #2
 8004772:	d901      	bls.n	8004778 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e064      	b.n	8004842 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004778:	4b11      	ldr	r3, [pc, #68]	; (80047c0 <HAL_RCC_OscConfig+0x4ac>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d0f0      	beq.n	8004766 <HAL_RCC_OscConfig+0x452>
 8004784:	e05c      	b.n	8004840 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004786:	4b10      	ldr	r3, [pc, #64]	; (80047c8 <HAL_RCC_OscConfig+0x4b4>)
 8004788:	2200      	movs	r2, #0
 800478a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800478c:	f7fd f82e 	bl	80017ec <HAL_GetTick>
 8004790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004792:	e008      	b.n	80047a6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004794:	f7fd f82a 	bl	80017ec <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e04d      	b.n	8004842 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047a6:	4b06      	ldr	r3, [pc, #24]	; (80047c0 <HAL_RCC_OscConfig+0x4ac>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1f0      	bne.n	8004794 <HAL_RCC_OscConfig+0x480>
 80047b2:	e045      	b.n	8004840 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d107      	bne.n	80047cc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e040      	b.n	8004842 <HAL_RCC_OscConfig+0x52e>
 80047c0:	40023800 	.word	0x40023800
 80047c4:	40007000 	.word	0x40007000
 80047c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047cc:	4b1f      	ldr	r3, [pc, #124]	; (800484c <HAL_RCC_OscConfig+0x538>)
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d030      	beq.n	800483c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d129      	bne.n	800483c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d122      	bne.n	800483c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047fc:	4013      	ands	r3, r2
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004802:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004804:	4293      	cmp	r3, r2
 8004806:	d119      	bne.n	800483c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004812:	085b      	lsrs	r3, r3, #1
 8004814:	3b01      	subs	r3, #1
 8004816:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004818:	429a      	cmp	r2, r3
 800481a:	d10f      	bne.n	800483c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004826:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004828:	429a      	cmp	r2, r3
 800482a:	d107      	bne.n	800483c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004836:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004838:	429a      	cmp	r2, r3
 800483a:	d001      	beq.n	8004840 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e000      	b.n	8004842 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3718      	adds	r7, #24
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	40023800 	.word	0x40023800

08004850 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e022      	b.n	80048a8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d105      	bne.n	800487a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f7fc fce3 	bl	8001240 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2203      	movs	r2, #3
 800487e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f814 	bl	80048b0 <HAL_SD_InitCard>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d001      	beq.n	8004892 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e00a      	b.n	80048a8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3708      	adds	r7, #8
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80048b0:	b5b0      	push	{r4, r5, r7, lr}
 80048b2:	b08e      	sub	sp, #56	; 0x38
 80048b4:	af04      	add	r7, sp, #16
 80048b6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80048b8:	2300      	movs	r3, #0
 80048ba:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80048bc:	2300      	movs	r3, #0
 80048be:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80048c0:	2300      	movs	r3, #0
 80048c2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80048c4:	2300      	movs	r3, #0
 80048c6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80048c8:	2300      	movs	r3, #0
 80048ca:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80048cc:	2376      	movs	r3, #118	; 0x76
 80048ce:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681d      	ldr	r5, [r3, #0]
 80048d4:	466c      	mov	r4, sp
 80048d6:	f107 0314 	add.w	r3, r7, #20
 80048da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80048de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80048e2:	f107 0308 	add.w	r3, r7, #8
 80048e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80048e8:	4628      	mov	r0, r5
 80048ea:	f002 fd25 	bl	8007338 <SDIO_Init>
 80048ee:	4603      	mov	r3, r0
 80048f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80048f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d001      	beq.n	8004900 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e04f      	b.n	80049a0 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004900:	4b29      	ldr	r3, [pc, #164]	; (80049a8 <HAL_SD_InitCard+0xf8>)
 8004902:	2200      	movs	r2, #0
 8004904:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4618      	mov	r0, r3
 800490c:	f002 fd5d 	bl	80073ca <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004910:	4b25      	ldr	r3, [pc, #148]	; (80049a8 <HAL_SD_InitCard+0xf8>)
 8004912:	2201      	movs	r2, #1
 8004914:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8004916:	2002      	movs	r0, #2
 8004918:	f7fc ff74 	bl	8001804 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 ffef 	bl	8005900 <SD_PowerON>
 8004922:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004924:	6a3b      	ldr	r3, [r7, #32]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00b      	beq.n	8004942 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2201      	movs	r2, #1
 800492e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004936:	6a3b      	ldr	r3, [r7, #32]
 8004938:	431a      	orrs	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e02e      	b.n	80049a0 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 ff0e 	bl	8005764 <SD_InitCard>
 8004948:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800494a:	6a3b      	ldr	r3, [r7, #32]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00b      	beq.n	8004968 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800495c:	6a3b      	ldr	r3, [r7, #32]
 800495e:	431a      	orrs	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e01b      	b.n	80049a0 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004970:	4618      	mov	r0, r3
 8004972:	f002 fdbc 	bl	80074ee <SDMMC_CmdBlockLength>
 8004976:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004978:	6a3b      	ldr	r3, [r7, #32]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00f      	beq.n	800499e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a0a      	ldr	r2, [pc, #40]	; (80049ac <HAL_SD_InitCard+0xfc>)
 8004984:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800498a:	6a3b      	ldr	r3, [r7, #32]
 800498c:	431a      	orrs	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2201      	movs	r2, #1
 8004996:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e000      	b.n	80049a0 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3728      	adds	r7, #40	; 0x28
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bdb0      	pop	{r4, r5, r7, pc}
 80049a8:	422580a0 	.word	0x422580a0
 80049ac:	004005ff 	.word	0x004005ff

080049b0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b08c      	sub	sp, #48	; 0x30
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
 80049bc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d107      	bne.n	80049d8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049cc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e0be      	b.n	8004b56 <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	f040 80b7 	bne.w	8004b54 <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80049ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	441a      	add	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d907      	bls.n	8004a0a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e0a5      	b.n	8004b56 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2203      	movs	r2, #3
 8004a0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2200      	movs	r2, #0
 8004a18:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8004a28:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2e:	4a4c      	ldr	r2, [pc, #304]	; (8004b60 <HAL_SD_ReadBlocks_DMA+0x1b0>)
 8004a30:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a36:	4a4b      	ldr	r2, [pc, #300]	; (8004b64 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8004a38:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3e:	2200      	movs	r2, #0
 8004a40:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a46:	2200      	movs	r2, #0
 8004a48:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5a:	689a      	ldr	r2, [r3, #8]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	430a      	orrs	r2, r1
 8004a64:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	3380      	adds	r3, #128	; 0x80
 8004a70:	4619      	mov	r1, r3
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	025b      	lsls	r3, r3, #9
 8004a78:	089b      	lsrs	r3, r3, #2
 8004a7a:	f7fd f893 	bl	8001ba4 <HAL_DMA_Start_IT>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d017      	beq.n	8004ab4 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8004a92:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a33      	ldr	r2, [pc, #204]	; (8004b68 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8004a9a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e050      	b.n	8004b56 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8004ab4:	4b2d      	ldr	r3, [pc, #180]	; (8004b6c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d002      	beq.n	8004ac8 <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 8004ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac4:	025b      	lsls	r3, r3, #9
 8004ac6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004ac8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004acc:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	025b      	lsls	r3, r3, #9
 8004ad2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004ad4:	2390      	movs	r3, #144	; 0x90
 8004ad6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004ad8:	2302      	movs	r3, #2
 8004ada:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004adc:	2300      	movs	r3, #0
 8004ade:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f107 0210 	add.w	r2, r7, #16
 8004aec:	4611      	mov	r1, r2
 8004aee:	4618      	mov	r0, r3
 8004af0:	f002 fcd1 	bl	8007496 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d90a      	bls.n	8004b10 <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2282      	movs	r2, #130	; 0x82
 8004afe:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b06:	4618      	mov	r0, r3
 8004b08:	f002 fd35 	bl	8007576 <SDMMC_CmdReadMultiBlock>
 8004b0c:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004b0e:	e009      	b.n	8004b24 <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2281      	movs	r2, #129	; 0x81
 8004b14:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f002 fd08 	bl	8007532 <SDMMC_CmdReadSingleBlock>
 8004b22:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8004b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d012      	beq.n	8004b50 <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a0e      	ldr	r2, [pc, #56]	; (8004b68 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8004b30:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b38:	431a      	orrs	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e002      	b.n	8004b56 <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 8004b50:	2300      	movs	r3, #0
 8004b52:	e000      	b.n	8004b56 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 8004b54:	2302      	movs	r3, #2
  }
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3730      	adds	r7, #48	; 0x30
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	08005573 	.word	0x08005573
 8004b64:	080055e5 	.word	0x080055e5
 8004b68:	004005ff 	.word	0x004005ff
 8004b6c:	4225858c 	.word	0x4225858c

08004b70 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b08c      	sub	sp, #48	; 0x30
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
 8004b7c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d107      	bne.n	8004b98 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e0c1      	b.n	8004d1c <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	f040 80ba 	bne.w	8004d1a <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004bac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	441a      	add	r2, r3
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d907      	bls.n	8004bca <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e0a8      	b.n	8004d1c <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2203      	movs	r2, #3
 8004bce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f042 021a 	orr.w	r2, r2, #26
 8004be8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bee:	4a4d      	ldr	r2, [pc, #308]	; (8004d24 <HAL_SD_WriteBlocks_DMA+0x1b4>)
 8004bf0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf6:	4a4c      	ldr	r2, [pc, #304]	; (8004d28 <HAL_SD_WriteBlocks_DMA+0x1b8>)
 8004bf8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bfe:	2200      	movs	r2, #0
 8004c00:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d002      	beq.n	8004c10 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8004c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0c:	025b      	lsls	r3, r3, #9
 8004c0e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d90a      	bls.n	8004c2c <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	22a0      	movs	r2, #160	; 0xa0
 8004c1a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c22:	4618      	mov	r0, r3
 8004c24:	f002 fceb 	bl	80075fe <SDMMC_CmdWriteMultiBlock>
 8004c28:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004c2a:	e009      	b.n	8004c40 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2290      	movs	r2, #144	; 0x90
 8004c30:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f002 fcbe 	bl	80075ba <SDMMC_CmdWriteSingleBlock>
 8004c3e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d012      	beq.n	8004c6c <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a38      	ldr	r2, [pc, #224]	; (8004d2c <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8004c4c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c54:	431a      	orrs	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2200      	movs	r2, #0
 8004c66:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e057      	b.n	8004d1c <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8004c6c:	4b30      	ldr	r3, [pc, #192]	; (8004d30 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8004c6e:	2201      	movs	r2, #1
 8004c70:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c76:	2240      	movs	r2, #64	; 0x40
 8004c78:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c8a:	689a      	ldr	r2, [r3, #8]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	430a      	orrs	r2, r1
 8004c94:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004c9a:	68b9      	ldr	r1, [r7, #8]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	3380      	adds	r3, #128	; 0x80
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	025b      	lsls	r3, r3, #9
 8004ca8:	089b      	lsrs	r3, r3, #2
 8004caa:	f7fc ff7b 	bl	8001ba4 <HAL_DMA_Start_IT>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d01a      	beq.n	8004cea <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 021a 	bic.w	r2, r2, #26
 8004cc2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a18      	ldr	r2, [pc, #96]	; (8004d2c <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8004cca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e018      	b.n	8004d1c <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004cea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cee:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	025b      	lsls	r3, r3, #9
 8004cf4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004cf6:	2390      	movs	r3, #144	; 0x90
 8004cf8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004d02:	2301      	movs	r3, #1
 8004d04:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f107 0210 	add.w	r2, r7, #16
 8004d0e:	4611      	mov	r1, r2
 8004d10:	4618      	mov	r0, r3
 8004d12:	f002 fbc0 	bl	8007496 <SDIO_ConfigData>

      return HAL_OK;
 8004d16:	2300      	movs	r3, #0
 8004d18:	e000      	b.n	8004d1c <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 8004d1a:	2302      	movs	r3, #2
  }
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3730      	adds	r7, #48	; 0x30
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	08005549 	.word	0x08005549
 8004d28:	080055e5 	.word	0x080055e5
 8004d2c:	004005ff 	.word	0x004005ff
 8004d30:	4225858c 	.word	0x4225858c

08004d34 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d40:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d008      	beq.n	8004d62 <HAL_SD_IRQHandler+0x2e>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f003 0308 	and.w	r3, r3, #8
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d003      	beq.n	8004d62 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 ffef 	bl	8005d3e <SD_Read_IT>
 8004d60:	e155      	b.n	800500e <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f000 808f 	beq.w	8004e90 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d7a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	6812      	ldr	r2, [r2, #0]
 8004d86:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8004d8a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8004d8e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f022 0201 	bic.w	r2, r2, #1
 8004d9e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f003 0308 	and.w	r3, r3, #8
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d039      	beq.n	8004e1e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f003 0302 	and.w	r3, r3, #2
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d104      	bne.n	8004dbe <HAL_SD_IRQHandler+0x8a>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f003 0320 	and.w	r3, r3, #32
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d011      	beq.n	8004de2 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f002 fc3e 	bl	8007644 <SDMMC_CmdStopTransfer>
 8004dc8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d008      	beq.n	8004de2 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	431a      	orrs	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 f91f 	bl	8005020 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f240 523a 	movw	r2, #1338	; 0x53a
 8004dea:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f003 0301 	and.w	r3, r3, #1
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d104      	bne.n	8004e0e <HAL_SD_IRQHandler+0xda>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d003      	beq.n	8004e16 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f003 f8ac 	bl	8007f6c <HAL_SD_RxCpltCallback>
 8004e14:	e0fb      	b.n	800500e <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f003 f89e 	bl	8007f58 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004e1c:	e0f7      	b.n	800500e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f000 80f2 	beq.w	800500e <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f003 0320 	and.w	r3, r3, #32
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d011      	beq.n	8004e58 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f002 fc03 	bl	8007644 <SDMMC_CmdStopTransfer>
 8004e3e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d008      	beq.n	8004e58 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	431a      	orrs	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 f8e4 	bl	8005020 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	f040 80d5 	bne.w	800500e <HAL_SD_IRQHandler+0x2da>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f003 0302 	and.w	r3, r3, #2
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	f040 80cf 	bne.w	800500e <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f022 0208 	bic.w	r2, r2, #8
 8004e7e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f003 f865 	bl	8007f58 <HAL_SD_TxCpltCallback>
}
 8004e8e:	e0be      	b.n	800500e <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d008      	beq.n	8004eb0 <HAL_SD_IRQHandler+0x17c>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f003 0308 	and.w	r3, r3, #8
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d003      	beq.n	8004eb0 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 ff99 	bl	8005de0 <SD_Write_IT>
 8004eae:	e0ae      	b.n	800500e <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eb6:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	f000 80a7 	beq.w	800500e <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ec6:	f003 0302 	and.w	r3, r3, #2
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d005      	beq.n	8004eda <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed2:	f043 0202 	orr.w	r2, r3, #2
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee0:	f003 0308 	and.w	r3, r3, #8
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d005      	beq.n	8004ef4 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eec:	f043 0208 	orr.w	r2, r3, #8
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004efa:	f003 0320 	and.w	r3, r3, #32
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d005      	beq.n	8004f0e <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f06:	f043 0220 	orr.w	r2, r3, #32
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f14:	f003 0310 	and.w	r3, r3, #16
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d005      	beq.n	8004f28 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f20:	f043 0210 	orr.w	r2, r3, #16
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f240 523a 	movw	r2, #1338	; 0x53a
 8004f30:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004f40:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f002 fb7c 	bl	8007644 <SDMMC_CmdStopTransfer>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f52:	431a      	orrs	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f003 0308 	and.w	r3, r3, #8
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00a      	beq.n	8004f78 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 f855 	bl	8005020 <HAL_SD_ErrorCallback>
}
 8004f76:	e04a      	b.n	800500e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d045      	beq.n	800500e <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f003 0310 	and.w	r3, r3, #16
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d104      	bne.n	8004f96 <HAL_SD_IRQHandler+0x262>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f003 0320 	and.w	r3, r3, #32
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d011      	beq.n	8004fba <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f9a:	4a1f      	ldr	r2, [pc, #124]	; (8005018 <HAL_SD_IRQHandler+0x2e4>)
 8004f9c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f7fc fec6 	bl	8001d34 <HAL_DMA_Abort_IT>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d02f      	beq.n	800500e <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f000 fb68 	bl	8005688 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004fb8:	e029      	b.n	800500e <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f003 0301 	and.w	r3, r3, #1
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d104      	bne.n	8004fce <HAL_SD_IRQHandler+0x29a>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f003 0302 	and.w	r3, r3, #2
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d011      	beq.n	8004ff2 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd2:	4a12      	ldr	r2, [pc, #72]	; (800501c <HAL_SD_IRQHandler+0x2e8>)
 8004fd4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7fc feaa 	bl	8001d34 <HAL_DMA_Abort_IT>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d013      	beq.n	800500e <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fea:	4618      	mov	r0, r3
 8004fec:	f000 fb83 	bl	80056f6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004ff0:	e00d      	b.n	800500e <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f002 ff9c 	bl	8007f44 <HAL_SD_AbortCallback>
}
 800500c:	e7ff      	b.n	800500e <HAL_SD_IRQHandler+0x2da>
 800500e:	bf00      	nop
 8005010:	3710      	adds	r7, #16
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	08005689 	.word	0x08005689
 800501c:	080056f7 	.word	0x080056f7

08005020 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8005028:	bf00      	nop
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005042:	0f9b      	lsrs	r3, r3, #30
 8005044:	b2da      	uxtb	r2, r3
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800504e:	0e9b      	lsrs	r3, r3, #26
 8005050:	b2db      	uxtb	r3, r3
 8005052:	f003 030f 	and.w	r3, r3, #15
 8005056:	b2da      	uxtb	r2, r3
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005060:	0e1b      	lsrs	r3, r3, #24
 8005062:	b2db      	uxtb	r3, r3
 8005064:	f003 0303 	and.w	r3, r3, #3
 8005068:	b2da      	uxtb	r2, r3
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005072:	0c1b      	lsrs	r3, r3, #16
 8005074:	b2da      	uxtb	r2, r3
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800507e:	0a1b      	lsrs	r3, r3, #8
 8005080:	b2da      	uxtb	r2, r3
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800508a:	b2da      	uxtb	r2, r3
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005094:	0d1b      	lsrs	r3, r3, #20
 8005096:	b29a      	uxth	r2, r3
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050a0:	0c1b      	lsrs	r3, r3, #16
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	f003 030f 	and.w	r3, r3, #15
 80050a8:	b2da      	uxtb	r2, r3
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050b2:	0bdb      	lsrs	r3, r3, #15
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	f003 0301 	and.w	r3, r3, #1
 80050ba:	b2da      	uxtb	r2, r3
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050c4:	0b9b      	lsrs	r3, r3, #14
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	f003 0301 	and.w	r3, r3, #1
 80050cc:	b2da      	uxtb	r2, r3
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050d6:	0b5b      	lsrs	r3, r3, #13
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	b2da      	uxtb	r2, r3
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050e8:	0b1b      	lsrs	r3, r3, #12
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	f003 0301 	and.w	r3, r3, #1
 80050f0:	b2da      	uxtb	r2, r3
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	2200      	movs	r2, #0
 80050fa:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005100:	2b00      	cmp	r3, #0
 8005102:	d163      	bne.n	80051cc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005108:	009a      	lsls	r2, r3, #2
 800510a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800510e:	4013      	ands	r3, r2
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005114:	0f92      	lsrs	r2, r2, #30
 8005116:	431a      	orrs	r2, r3
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005120:	0edb      	lsrs	r3, r3, #27
 8005122:	b2db      	uxtb	r3, r3
 8005124:	f003 0307 	and.w	r3, r3, #7
 8005128:	b2da      	uxtb	r2, r3
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005132:	0e1b      	lsrs	r3, r3, #24
 8005134:	b2db      	uxtb	r3, r3
 8005136:	f003 0307 	and.w	r3, r3, #7
 800513a:	b2da      	uxtb	r2, r3
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005144:	0d5b      	lsrs	r3, r3, #21
 8005146:	b2db      	uxtb	r3, r3
 8005148:	f003 0307 	and.w	r3, r3, #7
 800514c:	b2da      	uxtb	r2, r3
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005156:	0c9b      	lsrs	r3, r3, #18
 8005158:	b2db      	uxtb	r3, r3
 800515a:	f003 0307 	and.w	r3, r3, #7
 800515e:	b2da      	uxtb	r2, r3
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005168:	0bdb      	lsrs	r3, r3, #15
 800516a:	b2db      	uxtb	r3, r3
 800516c:	f003 0307 	and.w	r3, r3, #7
 8005170:	b2da      	uxtb	r2, r3
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	1c5a      	adds	r2, r3, #1
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	7e1b      	ldrb	r3, [r3, #24]
 8005184:	b2db      	uxtb	r3, r3
 8005186:	f003 0307 	and.w	r3, r3, #7
 800518a:	3302      	adds	r3, #2
 800518c:	2201      	movs	r2, #1
 800518e:	fa02 f303 	lsl.w	r3, r2, r3
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005196:	fb03 f202 	mul.w	r2, r3, r2
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	7a1b      	ldrb	r3, [r3, #8]
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	f003 030f 	and.w	r3, r3, #15
 80051a8:	2201      	movs	r2, #1
 80051aa:	409a      	lsls	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80051b8:	0a52      	lsrs	r2, r2, #9
 80051ba:	fb03 f202 	mul.w	r2, r3, r2
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051c8:	661a      	str	r2, [r3, #96]	; 0x60
 80051ca:	e031      	b.n	8005230 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d11d      	bne.n	8005210 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051d8:	041b      	lsls	r3, r3, #16
 80051da:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051e2:	0c1b      	lsrs	r3, r3, #16
 80051e4:	431a      	orrs	r2, r3
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	3301      	adds	r3, #1
 80051f0:	029a      	lsls	r2, r3, #10
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005204:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	661a      	str	r2, [r3, #96]	; 0x60
 800520e:	e00f      	b.n	8005230 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a58      	ldr	r2, [pc, #352]	; (8005378 <HAL_SD_GetCardCSD+0x344>)
 8005216:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e09d      	b.n	800536c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005234:	0b9b      	lsrs	r3, r3, #14
 8005236:	b2db      	uxtb	r3, r3
 8005238:	f003 0301 	and.w	r3, r3, #1
 800523c:	b2da      	uxtb	r2, r3
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005246:	09db      	lsrs	r3, r3, #7
 8005248:	b2db      	uxtb	r3, r3
 800524a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800524e:	b2da      	uxtb	r2, r3
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005258:	b2db      	uxtb	r3, r3
 800525a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800525e:	b2da      	uxtb	r2, r3
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005268:	0fdb      	lsrs	r3, r3, #31
 800526a:	b2da      	uxtb	r2, r3
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005274:	0f5b      	lsrs	r3, r3, #29
 8005276:	b2db      	uxtb	r3, r3
 8005278:	f003 0303 	and.w	r3, r3, #3
 800527c:	b2da      	uxtb	r2, r3
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005286:	0e9b      	lsrs	r3, r3, #26
 8005288:	b2db      	uxtb	r3, r3
 800528a:	f003 0307 	and.w	r3, r3, #7
 800528e:	b2da      	uxtb	r2, r3
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005298:	0d9b      	lsrs	r3, r3, #22
 800529a:	b2db      	uxtb	r3, r3
 800529c:	f003 030f 	and.w	r3, r3, #15
 80052a0:	b2da      	uxtb	r2, r3
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052aa:	0d5b      	lsrs	r3, r3, #21
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	f003 0301 	and.w	r3, r3, #1
 80052b2:	b2da      	uxtb	r2, r3
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052c6:	0c1b      	lsrs	r3, r3, #16
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	b2da      	uxtb	r2, r3
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052da:	0bdb      	lsrs	r3, r3, #15
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	f003 0301 	and.w	r3, r3, #1
 80052e2:	b2da      	uxtb	r2, r3
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ee:	0b9b      	lsrs	r3, r3, #14
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	f003 0301 	and.w	r3, r3, #1
 80052f6:	b2da      	uxtb	r2, r3
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005302:	0b5b      	lsrs	r3, r3, #13
 8005304:	b2db      	uxtb	r3, r3
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	b2da      	uxtb	r2, r3
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005316:	0b1b      	lsrs	r3, r3, #12
 8005318:	b2db      	uxtb	r3, r3
 800531a:	f003 0301 	and.w	r3, r3, #1
 800531e:	b2da      	uxtb	r2, r3
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800532a:	0a9b      	lsrs	r3, r3, #10
 800532c:	b2db      	uxtb	r3, r3
 800532e:	f003 0303 	and.w	r3, r3, #3
 8005332:	b2da      	uxtb	r2, r3
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800533e:	0a1b      	lsrs	r3, r3, #8
 8005340:	b2db      	uxtb	r3, r3
 8005342:	f003 0303 	and.w	r3, r3, #3
 8005346:	b2da      	uxtb	r2, r3
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005352:	085b      	lsrs	r3, r3, #1
 8005354:	b2db      	uxtb	r3, r3
 8005356:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800535a:	b2da      	uxtb	r2, r3
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	2201      	movs	r2, #1
 8005366:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr
 8005378:	004005ff 	.word	0x004005ff

0800537c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80053d4:	b5b0      	push	{r4, r5, r7, lr}
 80053d6:	b08e      	sub	sp, #56	; 0x38
 80053d8:	af04      	add	r7, sp, #16
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80053de:	2300      	movs	r3, #0
 80053e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2203      	movs	r2, #3
 80053e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053f0:	2b03      	cmp	r3, #3
 80053f2:	d02e      	beq.n	8005452 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053fa:	d106      	bne.n	800540a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005400:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	639a      	str	r2, [r3, #56]	; 0x38
 8005408:	e029      	b.n	800545e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005410:	d10a      	bne.n	8005428 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 fb2a 	bl	8005a6c <SD_WideBus_Enable>
 8005418:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800541e:	6a3b      	ldr	r3, [r7, #32]
 8005420:	431a      	orrs	r2, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	639a      	str	r2, [r3, #56]	; 0x38
 8005426:	e01a      	b.n	800545e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d10a      	bne.n	8005444 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 fb67 	bl	8005b02 <SD_WideBus_Disable>
 8005434:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800543a:	6a3b      	ldr	r3, [r7, #32]
 800543c:	431a      	orrs	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	639a      	str	r2, [r3, #56]	; 0x38
 8005442:	e00c      	b.n	800545e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005448:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	639a      	str	r2, [r3, #56]	; 0x38
 8005450:	e005      	b.n	800545e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005456:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00b      	beq.n	800547e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a26      	ldr	r2, [pc, #152]	; (8005504 <HAL_SD_ConfigWideBusOperation+0x130>)
 800546c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2201      	movs	r2, #1
 8005472:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800547c:	e01f      	b.n	80054be <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	695b      	ldr	r3, [r3, #20]
 8005498:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681d      	ldr	r5, [r3, #0]
 80054a4:	466c      	mov	r4, sp
 80054a6:	f107 0314 	add.w	r3, r7, #20
 80054aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80054ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80054b2:	f107 0308 	add.w	r3, r7, #8
 80054b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80054b8:	4628      	mov	r0, r5
 80054ba:	f001 ff3d 	bl	8007338 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80054c6:	4618      	mov	r0, r3
 80054c8:	f002 f811 	bl	80074ee <SDMMC_CmdBlockLength>
 80054cc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80054ce:	6a3b      	ldr	r3, [r7, #32]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d00c      	beq.n	80054ee <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a0a      	ldr	r2, [pc, #40]	; (8005504 <HAL_SD_ConfigWideBusOperation+0x130>)
 80054da:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054e0:	6a3b      	ldr	r3, [r7, #32]
 80054e2:	431a      	orrs	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2201      	movs	r2, #1
 80054f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80054f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3728      	adds	r7, #40	; 0x28
 80054fe:	46bd      	mov	sp, r7
 8005500:	bdb0      	pop	{r4, r5, r7, pc}
 8005502:	bf00      	nop
 8005504:	004005ff 	.word	0x004005ff

08005508 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b086      	sub	sp, #24
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005510:	2300      	movs	r3, #0
 8005512:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005514:	f107 030c 	add.w	r3, r7, #12
 8005518:	4619      	mov	r1, r3
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 fa7e 	bl	8005a1c <SD_SendStatus>
 8005520:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d005      	beq.n	8005534 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	431a      	orrs	r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	0a5b      	lsrs	r3, r3, #9
 8005538:	f003 030f 	and.w	r3, r3, #15
 800553c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800553e:	693b      	ldr	r3, [r7, #16]
}
 8005540:	4618      	mov	r0, r3
 8005542:	3718      	adds	r7, #24
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005548:	b480      	push	{r7}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005554:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005564:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005566:	bf00      	nop
 8005568:	3714      	adds	r7, #20
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr

08005572 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005572:	b580      	push	{r7, lr}
 8005574:	b084      	sub	sp, #16
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005584:	2b82      	cmp	r3, #130	; 0x82
 8005586:	d111      	bne.n	80055ac <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4618      	mov	r0, r3
 800558e:	f002 f859 	bl	8007644 <SDMMC_CmdStopTransfer>
 8005592:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d008      	beq.n	80055ac <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	431a      	orrs	r2, r3
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80055a6:	68f8      	ldr	r0, [r7, #12]
 80055a8:	f7ff fd3a 	bl	8005020 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f022 0208 	bic.w	r2, r2, #8
 80055ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f240 523a 	movw	r2, #1338	; 0x53a
 80055c4:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80055d4:	68f8      	ldr	r0, [r7, #12]
 80055d6:	f002 fcc9 	bl	8007f6c <HAL_SD_RxCpltCallback>
#endif
}
 80055da:	bf00      	nop
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
	...

080055e4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b086      	sub	sp, #24
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f7fc fd4a 	bl	800208c <HAL_DMA_GetError>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d03e      	beq.n	800567c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005604:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800560a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800560c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d002      	beq.n	800561a <SD_DMAError+0x36>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2b01      	cmp	r3, #1
 8005618:	d12d      	bne.n	8005676 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a19      	ldr	r2, [pc, #100]	; (8005684 <SD_DMAError+0xa0>)
 8005620:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005630:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005636:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800563e:	6978      	ldr	r0, [r7, #20]
 8005640:	f7ff ff62 	bl	8005508 <HAL_SD_GetCardState>
 8005644:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	2b06      	cmp	r3, #6
 800564a:	d002      	beq.n	8005652 <SD_DMAError+0x6e>
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	2b05      	cmp	r3, #5
 8005650:	d10a      	bne.n	8005668 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4618      	mov	r0, r3
 8005658:	f001 fff4 	bl	8007644 <SDMMC_CmdStopTransfer>
 800565c:	4602      	mov	r2, r0
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005662:	431a      	orrs	r2, r3
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	2200      	movs	r2, #0
 8005674:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8005676:	6978      	ldr	r0, [r7, #20]
 8005678:	f7ff fcd2 	bl	8005020 <HAL_SD_ErrorCallback>
#endif
  }
}
 800567c:	bf00      	nop
 800567e:	3718      	adds	r7, #24
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	004005ff 	.word	0x004005ff

08005688 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005694:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f240 523a 	movw	r2, #1338	; 0x53a
 800569e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f7ff ff31 	bl	8005508 <HAL_SD_GetCardState>
 80056a6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	2b06      	cmp	r3, #6
 80056ba:	d002      	beq.n	80056c2 <SD_DMATxAbort+0x3a>
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	2b05      	cmp	r3, #5
 80056c0:	d10a      	bne.n	80056d8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4618      	mov	r0, r3
 80056c8:	f001 ffbc 	bl	8007644 <SDMMC_CmdStopTransfer>
 80056cc:	4602      	mov	r2, r0
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d2:	431a      	orrs	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d103      	bne.n	80056e8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80056e0:	68f8      	ldr	r0, [r7, #12]
 80056e2:	f002 fc2f 	bl	8007f44 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80056e6:	e002      	b.n	80056ee <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80056e8:	68f8      	ldr	r0, [r7, #12]
 80056ea:	f7ff fc99 	bl	8005020 <HAL_SD_ErrorCallback>
}
 80056ee:	bf00      	nop
 80056f0:	3710      	adds	r7, #16
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b084      	sub	sp, #16
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005702:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f240 523a 	movw	r2, #1338	; 0x53a
 800570c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800570e:	68f8      	ldr	r0, [r7, #12]
 8005710:	f7ff fefa 	bl	8005508 <HAL_SD_GetCardState>
 8005714:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2201      	movs	r2, #1
 800571a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	2b06      	cmp	r3, #6
 8005728:	d002      	beq.n	8005730 <SD_DMARxAbort+0x3a>
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	2b05      	cmp	r3, #5
 800572e:	d10a      	bne.n	8005746 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4618      	mov	r0, r3
 8005736:	f001 ff85 	bl	8007644 <SDMMC_CmdStopTransfer>
 800573a:	4602      	mov	r2, r0
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005740:	431a      	orrs	r2, r3
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574a:	2b00      	cmp	r3, #0
 800574c:	d103      	bne.n	8005756 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f002 fbf8 	bl	8007f44 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005754:	e002      	b.n	800575c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f7ff fc62 	bl	8005020 <HAL_SD_ErrorCallback>
}
 800575c:	bf00      	nop
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005764:	b5b0      	push	{r4, r5, r7, lr}
 8005766:	b094      	sub	sp, #80	; 0x50
 8005768:	af04      	add	r7, sp, #16
 800576a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800576c:	2301      	movs	r3, #1
 800576e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4618      	mov	r0, r3
 8005776:	f001 fe36 	bl	80073e6 <SDIO_GetPowerState>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d102      	bne.n	8005786 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005780:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005784:	e0b8      	b.n	80058f8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800578a:	2b03      	cmp	r3, #3
 800578c:	d02f      	beq.n	80057ee <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4618      	mov	r0, r3
 8005794:	f002 f860 	bl	8007858 <SDMMC_CmdSendCID>
 8005798:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800579a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800579c:	2b00      	cmp	r3, #0
 800579e:	d001      	beq.n	80057a4 <SD_InitCard+0x40>
    {
      return errorstate;
 80057a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057a2:	e0a9      	b.n	80058f8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2100      	movs	r1, #0
 80057aa:	4618      	mov	r0, r3
 80057ac:	f001 fe60 	bl	8007470 <SDIO_GetResponse>
 80057b0:	4602      	mov	r2, r0
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2104      	movs	r1, #4
 80057bc:	4618      	mov	r0, r3
 80057be:	f001 fe57 	bl	8007470 <SDIO_GetResponse>
 80057c2:	4602      	mov	r2, r0
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2108      	movs	r1, #8
 80057ce:	4618      	mov	r0, r3
 80057d0:	f001 fe4e 	bl	8007470 <SDIO_GetResponse>
 80057d4:	4602      	mov	r2, r0
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	210c      	movs	r1, #12
 80057e0:	4618      	mov	r0, r3
 80057e2:	f001 fe45 	bl	8007470 <SDIO_GetResponse>
 80057e6:	4602      	mov	r2, r0
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057f2:	2b03      	cmp	r3, #3
 80057f4:	d00d      	beq.n	8005812 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f107 020e 	add.w	r2, r7, #14
 80057fe:	4611      	mov	r1, r2
 8005800:	4618      	mov	r0, r3
 8005802:	f002 f866 	bl	80078d2 <SDMMC_CmdSetRelAdd>
 8005806:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800580a:	2b00      	cmp	r3, #0
 800580c:	d001      	beq.n	8005812 <SD_InitCard+0xae>
    {
      return errorstate;
 800580e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005810:	e072      	b.n	80058f8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005816:	2b03      	cmp	r3, #3
 8005818:	d036      	beq.n	8005888 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800581a:	89fb      	ldrh	r3, [r7, #14]
 800581c:	461a      	mov	r2, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800582a:	041b      	lsls	r3, r3, #16
 800582c:	4619      	mov	r1, r3
 800582e:	4610      	mov	r0, r2
 8005830:	f002 f830 	bl	8007894 <SDMMC_CmdSendCSD>
 8005834:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005838:	2b00      	cmp	r3, #0
 800583a:	d001      	beq.n	8005840 <SD_InitCard+0xdc>
    {
      return errorstate;
 800583c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800583e:	e05b      	b.n	80058f8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2100      	movs	r1, #0
 8005846:	4618      	mov	r0, r3
 8005848:	f001 fe12 	bl	8007470 <SDIO_GetResponse>
 800584c:	4602      	mov	r2, r0
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2104      	movs	r1, #4
 8005858:	4618      	mov	r0, r3
 800585a:	f001 fe09 	bl	8007470 <SDIO_GetResponse>
 800585e:	4602      	mov	r2, r0
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2108      	movs	r1, #8
 800586a:	4618      	mov	r0, r3
 800586c:	f001 fe00 	bl	8007470 <SDIO_GetResponse>
 8005870:	4602      	mov	r2, r0
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	210c      	movs	r1, #12
 800587c:	4618      	mov	r0, r3
 800587e:	f001 fdf7 	bl	8007470 <SDIO_GetResponse>
 8005882:	4602      	mov	r2, r0
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2104      	movs	r1, #4
 800588e:	4618      	mov	r0, r3
 8005890:	f001 fdee 	bl	8007470 <SDIO_GetResponse>
 8005894:	4603      	mov	r3, r0
 8005896:	0d1a      	lsrs	r2, r3, #20
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800589c:	f107 0310 	add.w	r3, r7, #16
 80058a0:	4619      	mov	r1, r3
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f7ff fbc6 	bl	8005034 <HAL_SD_GetCardCSD>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d002      	beq.n	80058b4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80058ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80058b2:	e021      	b.n	80058f8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6819      	ldr	r1, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058bc:	041b      	lsls	r3, r3, #16
 80058be:	2200      	movs	r2, #0
 80058c0:	461c      	mov	r4, r3
 80058c2:	4615      	mov	r5, r2
 80058c4:	4622      	mov	r2, r4
 80058c6:	462b      	mov	r3, r5
 80058c8:	4608      	mov	r0, r1
 80058ca:	f001 fedd 	bl	8007688 <SDMMC_CmdSelDesel>
 80058ce:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80058d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d001      	beq.n	80058da <SD_InitCard+0x176>
  {
    return errorstate;
 80058d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058d8:	e00e      	b.n	80058f8 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681d      	ldr	r5, [r3, #0]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	466c      	mov	r4, sp
 80058e2:	f103 0210 	add.w	r2, r3, #16
 80058e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80058e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80058ec:	3304      	adds	r3, #4
 80058ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80058f0:	4628      	mov	r0, r5
 80058f2:	f001 fd21 	bl	8007338 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3740      	adds	r7, #64	; 0x40
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bdb0      	pop	{r4, r5, r7, pc}

08005900 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b086      	sub	sp, #24
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005908:	2300      	movs	r3, #0
 800590a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800590c:	2300      	movs	r3, #0
 800590e:	617b      	str	r3, [r7, #20]
 8005910:	2300      	movs	r3, #0
 8005912:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4618      	mov	r0, r3
 800591a:	f001 fed8 	bl	80076ce <SDMMC_CmdGoIdleState>
 800591e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d001      	beq.n	800592a <SD_PowerON+0x2a>
  {
    return errorstate;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	e072      	b.n	8005a10 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4618      	mov	r0, r3
 8005930:	f001 feeb 	bl	800770a <SDMMC_CmdOperCond>
 8005934:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d00d      	beq.n	8005958 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4618      	mov	r0, r3
 8005948:	f001 fec1 	bl	80076ce <SDMMC_CmdGoIdleState>
 800594c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d004      	beq.n	800595e <SD_PowerON+0x5e>
    {
      return errorstate;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	e05b      	b.n	8005a10 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005962:	2b01      	cmp	r3, #1
 8005964:	d137      	bne.n	80059d6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	2100      	movs	r1, #0
 800596c:	4618      	mov	r0, r3
 800596e:	f001 feeb 	bl	8007748 <SDMMC_CmdAppCommand>
 8005972:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d02d      	beq.n	80059d6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800597a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800597e:	e047      	b.n	8005a10 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2100      	movs	r1, #0
 8005986:	4618      	mov	r0, r3
 8005988:	f001 fede 	bl	8007748 <SDMMC_CmdAppCommand>
 800598c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d001      	beq.n	8005998 <SD_PowerON+0x98>
    {
      return errorstate;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	e03b      	b.n	8005a10 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	491e      	ldr	r1, [pc, #120]	; (8005a18 <SD_PowerON+0x118>)
 800599e:	4618      	mov	r0, r3
 80059a0:	f001 fef4 	bl	800778c <SDMMC_CmdAppOperCommand>
 80059a4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d002      	beq.n	80059b2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80059ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80059b0:	e02e      	b.n	8005a10 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2100      	movs	r1, #0
 80059b8:	4618      	mov	r0, r3
 80059ba:	f001 fd59 	bl	8007470 <SDIO_GetResponse>
 80059be:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	0fdb      	lsrs	r3, r3, #31
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d101      	bne.n	80059cc <SD_PowerON+0xcc>
 80059c8:	2301      	movs	r3, #1
 80059ca:	e000      	b.n	80059ce <SD_PowerON+0xce>
 80059cc:	2300      	movs	r3, #0
 80059ce:	613b      	str	r3, [r7, #16]

    count++;
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	3301      	adds	r3, #1
 80059d4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80059dc:	4293      	cmp	r3, r2
 80059de:	d802      	bhi.n	80059e6 <SD_PowerON+0xe6>
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d0cc      	beq.n	8005980 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d902      	bls.n	80059f6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80059f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80059f4:	e00c      	b.n	8005a10 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d003      	beq.n	8005a08 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	645a      	str	r2, [r3, #68]	; 0x44
 8005a06:	e002      	b.n	8005a0e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3718      	adds	r7, #24
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	c1100000 	.word	0xc1100000

08005a1c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d102      	bne.n	8005a32 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005a2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a30:	e018      	b.n	8005a64 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a3a:	041b      	lsls	r3, r3, #16
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	4610      	mov	r0, r2
 8005a40:	f001 ff68 	bl	8007914 <SDMMC_CmdSendStatus>
 8005a44:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d001      	beq.n	8005a50 <SD_SendStatus+0x34>
  {
    return errorstate;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	e009      	b.n	8005a64 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2100      	movs	r1, #0
 8005a56:	4618      	mov	r0, r3
 8005a58:	f001 fd0a 	bl	8007470 <SDIO_GetResponse>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3710      	adds	r7, #16
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b086      	sub	sp, #24
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005a74:	2300      	movs	r3, #0
 8005a76:	60fb      	str	r3, [r7, #12]
 8005a78:	2300      	movs	r3, #0
 8005a7a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2100      	movs	r1, #0
 8005a82:	4618      	mov	r0, r3
 8005a84:	f001 fcf4 	bl	8007470 <SDIO_GetResponse>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a92:	d102      	bne.n	8005a9a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005a94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005a98:	e02f      	b.n	8005afa <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005a9a:	f107 030c 	add.w	r3, r7, #12
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 f879 	bl	8005b98 <SD_FindSCR>
 8005aa6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d001      	beq.n	8005ab2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	e023      	b.n	8005afa <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d01c      	beq.n	8005af6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ac4:	041b      	lsls	r3, r3, #16
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	4610      	mov	r0, r2
 8005aca:	f001 fe3d 	bl	8007748 <SDMMC_CmdAppCommand>
 8005ace:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d001      	beq.n	8005ada <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	e00f      	b.n	8005afa <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2102      	movs	r1, #2
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f001 fe76 	bl	80077d2 <SDMMC_CmdBusWidth>
 8005ae6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d001      	beq.n	8005af2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	e003      	b.n	8005afa <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005af2:	2300      	movs	r3, #0
 8005af4:	e001      	b.n	8005afa <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005af6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3718      	adds	r7, #24
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b086      	sub	sp, #24
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	60fb      	str	r3, [r7, #12]
 8005b0e:	2300      	movs	r3, #0
 8005b10:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2100      	movs	r1, #0
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f001 fca9 	bl	8007470 <SDIO_GetResponse>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b28:	d102      	bne.n	8005b30 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005b2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005b2e:	e02f      	b.n	8005b90 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005b30:	f107 030c 	add.w	r3, r7, #12
 8005b34:	4619      	mov	r1, r3
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 f82e 	bl	8005b98 <SD_FindSCR>
 8005b3c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d001      	beq.n	8005b48 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	e023      	b.n	8005b90 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d01c      	beq.n	8005b8c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b5a:	041b      	lsls	r3, r3, #16
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	4610      	mov	r0, r2
 8005b60:	f001 fdf2 	bl	8007748 <SDMMC_CmdAppCommand>
 8005b64:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d001      	beq.n	8005b70 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	e00f      	b.n	8005b90 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2100      	movs	r1, #0
 8005b76:	4618      	mov	r0, r3
 8005b78:	f001 fe2b 	bl	80077d2 <SDMMC_CmdBusWidth>
 8005b7c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d001      	beq.n	8005b88 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	e003      	b.n	8005b90 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	e001      	b.n	8005b90 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005b8c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3718      	adds	r7, #24
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005b98:	b590      	push	{r4, r7, lr}
 8005b9a:	b08f      	sub	sp, #60	; 0x3c
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005ba2:	f7fb fe23 	bl	80017ec <HAL_GetTick>
 8005ba6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8005bac:	2300      	movs	r3, #0
 8005bae:	60bb      	str	r3, [r7, #8]
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2108      	movs	r1, #8
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f001 fc95 	bl	80074ee <SDMMC_CmdBlockLength>
 8005bc4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d001      	beq.n	8005bd0 <SD_FindSCR+0x38>
  {
    return errorstate;
 8005bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bce:	e0b2      	b.n	8005d36 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bd8:	041b      	lsls	r3, r3, #16
 8005bda:	4619      	mov	r1, r3
 8005bdc:	4610      	mov	r0, r2
 8005bde:	f001 fdb3 	bl	8007748 <SDMMC_CmdAppCommand>
 8005be2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d001      	beq.n	8005bee <SD_FindSCR+0x56>
  {
    return errorstate;
 8005bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bec:	e0a3      	b.n	8005d36 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005bee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bf2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005bf4:	2308      	movs	r3, #8
 8005bf6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8005bf8:	2330      	movs	r3, #48	; 0x30
 8005bfa:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005bfc:	2302      	movs	r3, #2
 8005bfe:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005c00:	2300      	movs	r3, #0
 8005c02:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8005c04:	2301      	movs	r3, #1
 8005c06:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f107 0210 	add.w	r2, r7, #16
 8005c10:	4611      	mov	r1, r2
 8005c12:	4618      	mov	r0, r3
 8005c14:	f001 fc3f 	bl	8007496 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f001 fdfa 	bl	8007816 <SDMMC_CmdSendSCR>
 8005c22:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d02a      	beq.n	8005c80 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8005c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2c:	e083      	b.n	8005d36 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00f      	beq.n	8005c5c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6819      	ldr	r1, [r3, #0]
 8005c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	f107 0208 	add.w	r2, r7, #8
 8005c48:	18d4      	adds	r4, r2, r3
 8005c4a:	4608      	mov	r0, r1
 8005c4c:	f001 fb9f 	bl	800738e <SDIO_ReadFIFO>
 8005c50:	4603      	mov	r3, r0
 8005c52:	6023      	str	r3, [r4, #0]
      index++;
 8005c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c56:	3301      	adds	r3, #1
 8005c58:	637b      	str	r3, [r7, #52]	; 0x34
 8005c5a:	e006      	b.n	8005c6a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d012      	beq.n	8005c90 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005c6a:	f7fb fdbf 	bl	80017ec <HAL_GetTick>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c78:	d102      	bne.n	8005c80 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005c7a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005c7e:	e05a      	b.n	8005d36 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c86:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d0cf      	beq.n	8005c2e <SD_FindSCR+0x96>
 8005c8e:	e000      	b.n	8005c92 <SD_FindSCR+0xfa>
      break;
 8005c90:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c98:	f003 0308 	and.w	r3, r3, #8
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d005      	beq.n	8005cac <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2208      	movs	r2, #8
 8005ca6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005ca8:	2308      	movs	r3, #8
 8005caa:	e044      	b.n	8005d36 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cb2:	f003 0302 	and.w	r3, r3, #2
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d005      	beq.n	8005cc6 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005cc2:	2302      	movs	r3, #2
 8005cc4:	e037      	b.n	8005d36 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ccc:	f003 0320 	and.w	r3, r3, #32
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d005      	beq.n	8005ce0 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2220      	movs	r2, #32
 8005cda:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005cdc:	2320      	movs	r3, #32
 8005cde:	e02a      	b.n	8005d36 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f240 523a 	movw	r2, #1338	; 0x53a
 8005ce8:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	061a      	lsls	r2, r3, #24
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	021b      	lsls	r3, r3, #8
 8005cf2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005cf6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	0a1b      	lsrs	r3, r3, #8
 8005cfc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005d00:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	0e1b      	lsrs	r3, r3, #24
 8005d06:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d0a:	601a      	str	r2, [r3, #0]
    scr++;
 8005d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d0e:	3304      	adds	r3, #4
 8005d10:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	061a      	lsls	r2, r3, #24
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	021b      	lsls	r3, r3, #8
 8005d1a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005d1e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	0a1b      	lsrs	r3, r3, #8
 8005d24:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005d28:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	0e1b      	lsrs	r3, r3, #24
 8005d2e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d32:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	373c      	adds	r7, #60	; 0x3c
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd90      	pop	{r4, r7, pc}

08005d3e <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8005d3e:	b580      	push	{r7, lr}
 8005d40:	b086      	sub	sp, #24
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d4a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d50:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d03f      	beq.n	8005dd8 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8005d58:	2300      	movs	r3, #0
 8005d5a:	617b      	str	r3, [r7, #20]
 8005d5c:	e033      	b.n	8005dc6 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4618      	mov	r0, r3
 8005d64:	f001 fb13 	bl	800738e <SDIO_ReadFIFO>
 8005d68:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	b2da      	uxtb	r2, r3
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	3301      	adds	r3, #1
 8005d76:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	0a1b      	lsrs	r3, r3, #8
 8005d82:	b2da      	uxtb	r2, r3
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	3b01      	subs	r3, #1
 8005d92:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	0c1b      	lsrs	r3, r3, #16
 8005d98:	b2da      	uxtb	r2, r3
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	3301      	adds	r3, #1
 8005da2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	3b01      	subs	r3, #1
 8005da8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	0e1b      	lsrs	r3, r3, #24
 8005dae:	b2da      	uxtb	r2, r3
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	3301      	adds	r3, #1
 8005db8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	3b01      	subs	r3, #1
 8005dbe:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	617b      	str	r3, [r7, #20]
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	2b07      	cmp	r3, #7
 8005dca:	d9c8      	bls.n	8005d5e <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	693a      	ldr	r2, [r7, #16]
 8005dd6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8005dd8:	bf00      	nop
 8005dda:	3718      	adds	r7, #24
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b086      	sub	sp, #24
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a1b      	ldr	r3, [r3, #32]
 8005dec:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d043      	beq.n	8005e82 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	617b      	str	r3, [r7, #20]
 8005dfe:	e037      	b.n	8005e70 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	3301      	adds	r3, #1
 8005e0a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	021a      	lsls	r2, r3, #8
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	3301      	adds	r3, #1
 8005e22:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	3b01      	subs	r3, #1
 8005e28:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	041a      	lsls	r2, r3, #16
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	3301      	adds	r3, #1
 8005e3a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	061a      	lsls	r2, r3, #24
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	3301      	adds	r3, #1
 8005e52:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	3b01      	subs	r3, #1
 8005e58:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f107 0208 	add.w	r2, r7, #8
 8005e62:	4611      	mov	r1, r2
 8005e64:	4618      	mov	r0, r3
 8005e66:	f001 fa9f 	bl	80073a8 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	617b      	str	r3, [r7, #20]
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	2b07      	cmp	r3, #7
 8005e74:	d9c4      	bls.n	8005e00 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	693a      	ldr	r2, [r7, #16]
 8005e80:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8005e82:	bf00      	nop
 8005e84:	3718      	adds	r7, #24
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b082      	sub	sp, #8
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d101      	bne.n	8005e9c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e041      	b.n	8005f20 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d106      	bne.n	8005eb6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 f839 	bl	8005f28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2202      	movs	r2, #2
 8005eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	3304      	adds	r3, #4
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	4610      	mov	r0, r2
 8005eca:	f000 f9d7 	bl	800627c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2201      	movs	r2, #1
 8005f02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2201      	movs	r2, #1
 8005f12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3708      	adds	r7, #8
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d001      	beq.n	8005f54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e04e      	b.n	8005ff2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2202      	movs	r2, #2
 8005f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	68da      	ldr	r2, [r3, #12]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f042 0201 	orr.w	r2, r2, #1
 8005f6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a23      	ldr	r2, [pc, #140]	; (8006000 <HAL_TIM_Base_Start_IT+0xc4>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d022      	beq.n	8005fbc <HAL_TIM_Base_Start_IT+0x80>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f7e:	d01d      	beq.n	8005fbc <HAL_TIM_Base_Start_IT+0x80>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a1f      	ldr	r2, [pc, #124]	; (8006004 <HAL_TIM_Base_Start_IT+0xc8>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d018      	beq.n	8005fbc <HAL_TIM_Base_Start_IT+0x80>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a1e      	ldr	r2, [pc, #120]	; (8006008 <HAL_TIM_Base_Start_IT+0xcc>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d013      	beq.n	8005fbc <HAL_TIM_Base_Start_IT+0x80>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a1c      	ldr	r2, [pc, #112]	; (800600c <HAL_TIM_Base_Start_IT+0xd0>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d00e      	beq.n	8005fbc <HAL_TIM_Base_Start_IT+0x80>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a1b      	ldr	r2, [pc, #108]	; (8006010 <HAL_TIM_Base_Start_IT+0xd4>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d009      	beq.n	8005fbc <HAL_TIM_Base_Start_IT+0x80>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a19      	ldr	r2, [pc, #100]	; (8006014 <HAL_TIM_Base_Start_IT+0xd8>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d004      	beq.n	8005fbc <HAL_TIM_Base_Start_IT+0x80>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a18      	ldr	r2, [pc, #96]	; (8006018 <HAL_TIM_Base_Start_IT+0xdc>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d111      	bne.n	8005fe0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	f003 0307 	and.w	r3, r3, #7
 8005fc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2b06      	cmp	r3, #6
 8005fcc:	d010      	beq.n	8005ff0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f042 0201 	orr.w	r2, r2, #1
 8005fdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fde:	e007      	b.n	8005ff0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f042 0201 	orr.w	r2, r2, #1
 8005fee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3714      	adds	r7, #20
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop
 8006000:	40010000 	.word	0x40010000
 8006004:	40000400 	.word	0x40000400
 8006008:	40000800 	.word	0x40000800
 800600c:	40000c00 	.word	0x40000c00
 8006010:	40010400 	.word	0x40010400
 8006014:	40014000 	.word	0x40014000
 8006018:	40001800 	.word	0x40001800

0800601c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	f003 0302 	and.w	r3, r3, #2
 800602e:	2b02      	cmp	r3, #2
 8006030:	d122      	bne.n	8006078 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	f003 0302 	and.w	r3, r3, #2
 800603c:	2b02      	cmp	r3, #2
 800603e:	d11b      	bne.n	8006078 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f06f 0202 	mvn.w	r2, #2
 8006048:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2201      	movs	r2, #1
 800604e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	699b      	ldr	r3, [r3, #24]
 8006056:	f003 0303 	and.w	r3, r3, #3
 800605a:	2b00      	cmp	r3, #0
 800605c:	d003      	beq.n	8006066 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 f8ee 	bl	8006240 <HAL_TIM_IC_CaptureCallback>
 8006064:	e005      	b.n	8006072 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 f8e0 	bl	800622c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 f8f1 	bl	8006254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	f003 0304 	and.w	r3, r3, #4
 8006082:	2b04      	cmp	r3, #4
 8006084:	d122      	bne.n	80060cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	f003 0304 	and.w	r3, r3, #4
 8006090:	2b04      	cmp	r3, #4
 8006092:	d11b      	bne.n	80060cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f06f 0204 	mvn.w	r2, #4
 800609c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2202      	movs	r2, #2
 80060a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	699b      	ldr	r3, [r3, #24]
 80060aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d003      	beq.n	80060ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 f8c4 	bl	8006240 <HAL_TIM_IC_CaptureCallback>
 80060b8:	e005      	b.n	80060c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 f8b6 	bl	800622c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 f8c7 	bl	8006254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	f003 0308 	and.w	r3, r3, #8
 80060d6:	2b08      	cmp	r3, #8
 80060d8:	d122      	bne.n	8006120 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	f003 0308 	and.w	r3, r3, #8
 80060e4:	2b08      	cmp	r3, #8
 80060e6:	d11b      	bne.n	8006120 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f06f 0208 	mvn.w	r2, #8
 80060f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2204      	movs	r2, #4
 80060f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	69db      	ldr	r3, [r3, #28]
 80060fe:	f003 0303 	and.w	r3, r3, #3
 8006102:	2b00      	cmp	r3, #0
 8006104:	d003      	beq.n	800610e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 f89a 	bl	8006240 <HAL_TIM_IC_CaptureCallback>
 800610c:	e005      	b.n	800611a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 f88c 	bl	800622c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 f89d 	bl	8006254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	f003 0310 	and.w	r3, r3, #16
 800612a:	2b10      	cmp	r3, #16
 800612c:	d122      	bne.n	8006174 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	f003 0310 	and.w	r3, r3, #16
 8006138:	2b10      	cmp	r3, #16
 800613a:	d11b      	bne.n	8006174 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f06f 0210 	mvn.w	r2, #16
 8006144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2208      	movs	r2, #8
 800614a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	69db      	ldr	r3, [r3, #28]
 8006152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006156:	2b00      	cmp	r3, #0
 8006158:	d003      	beq.n	8006162 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 f870 	bl	8006240 <HAL_TIM_IC_CaptureCallback>
 8006160:	e005      	b.n	800616e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 f862 	bl	800622c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 f873 	bl	8006254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	f003 0301 	and.w	r3, r3, #1
 800617e:	2b01      	cmp	r3, #1
 8006180:	d10e      	bne.n	80061a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	f003 0301 	and.w	r3, r3, #1
 800618c:	2b01      	cmp	r3, #1
 800618e:	d107      	bne.n	80061a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f06f 0201 	mvn.w	r2, #1
 8006198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f7fa fefe 	bl	8000f9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061aa:	2b80      	cmp	r3, #128	; 0x80
 80061ac:	d10e      	bne.n	80061cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061b8:	2b80      	cmp	r3, #128	; 0x80
 80061ba:	d107      	bne.n	80061cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80061c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f902 	bl	80063d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d6:	2b40      	cmp	r3, #64	; 0x40
 80061d8:	d10e      	bne.n	80061f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061e4:	2b40      	cmp	r3, #64	; 0x40
 80061e6:	d107      	bne.n	80061f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80061f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 f838 	bl	8006268 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	f003 0320 	and.w	r3, r3, #32
 8006202:	2b20      	cmp	r3, #32
 8006204:	d10e      	bne.n	8006224 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	f003 0320 	and.w	r3, r3, #32
 8006210:	2b20      	cmp	r3, #32
 8006212:	d107      	bne.n	8006224 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f06f 0220 	mvn.w	r2, #32
 800621c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 f8cc 	bl	80063bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006224:	bf00      	nop
 8006226:	3708      	adds	r7, #8
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006234:	bf00      	nop
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800625c:	bf00      	nop
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006270:	bf00      	nop
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800627c:	b480      	push	{r7}
 800627e:	b085      	sub	sp, #20
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a40      	ldr	r2, [pc, #256]	; (8006390 <TIM_Base_SetConfig+0x114>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d013      	beq.n	80062bc <TIM_Base_SetConfig+0x40>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800629a:	d00f      	beq.n	80062bc <TIM_Base_SetConfig+0x40>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a3d      	ldr	r2, [pc, #244]	; (8006394 <TIM_Base_SetConfig+0x118>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d00b      	beq.n	80062bc <TIM_Base_SetConfig+0x40>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a3c      	ldr	r2, [pc, #240]	; (8006398 <TIM_Base_SetConfig+0x11c>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d007      	beq.n	80062bc <TIM_Base_SetConfig+0x40>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a3b      	ldr	r2, [pc, #236]	; (800639c <TIM_Base_SetConfig+0x120>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d003      	beq.n	80062bc <TIM_Base_SetConfig+0x40>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4a3a      	ldr	r2, [pc, #232]	; (80063a0 <TIM_Base_SetConfig+0x124>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d108      	bne.n	80062ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a2f      	ldr	r2, [pc, #188]	; (8006390 <TIM_Base_SetConfig+0x114>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d02b      	beq.n	800632e <TIM_Base_SetConfig+0xb2>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062dc:	d027      	beq.n	800632e <TIM_Base_SetConfig+0xb2>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a2c      	ldr	r2, [pc, #176]	; (8006394 <TIM_Base_SetConfig+0x118>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d023      	beq.n	800632e <TIM_Base_SetConfig+0xb2>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a2b      	ldr	r2, [pc, #172]	; (8006398 <TIM_Base_SetConfig+0x11c>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d01f      	beq.n	800632e <TIM_Base_SetConfig+0xb2>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a2a      	ldr	r2, [pc, #168]	; (800639c <TIM_Base_SetConfig+0x120>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d01b      	beq.n	800632e <TIM_Base_SetConfig+0xb2>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a29      	ldr	r2, [pc, #164]	; (80063a0 <TIM_Base_SetConfig+0x124>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d017      	beq.n	800632e <TIM_Base_SetConfig+0xb2>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a28      	ldr	r2, [pc, #160]	; (80063a4 <TIM_Base_SetConfig+0x128>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d013      	beq.n	800632e <TIM_Base_SetConfig+0xb2>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a27      	ldr	r2, [pc, #156]	; (80063a8 <TIM_Base_SetConfig+0x12c>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d00f      	beq.n	800632e <TIM_Base_SetConfig+0xb2>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a26      	ldr	r2, [pc, #152]	; (80063ac <TIM_Base_SetConfig+0x130>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d00b      	beq.n	800632e <TIM_Base_SetConfig+0xb2>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a25      	ldr	r2, [pc, #148]	; (80063b0 <TIM_Base_SetConfig+0x134>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d007      	beq.n	800632e <TIM_Base_SetConfig+0xb2>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a24      	ldr	r2, [pc, #144]	; (80063b4 <TIM_Base_SetConfig+0x138>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d003      	beq.n	800632e <TIM_Base_SetConfig+0xb2>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a23      	ldr	r2, [pc, #140]	; (80063b8 <TIM_Base_SetConfig+0x13c>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d108      	bne.n	8006340 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006334:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	4313      	orrs	r3, r2
 800633e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	695b      	ldr	r3, [r3, #20]
 800634a:	4313      	orrs	r3, r2
 800634c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	689a      	ldr	r2, [r3, #8]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a0a      	ldr	r2, [pc, #40]	; (8006390 <TIM_Base_SetConfig+0x114>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d003      	beq.n	8006374 <TIM_Base_SetConfig+0xf8>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a0c      	ldr	r2, [pc, #48]	; (80063a0 <TIM_Base_SetConfig+0x124>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d103      	bne.n	800637c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	691a      	ldr	r2, [r3, #16]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	615a      	str	r2, [r3, #20]
}
 8006382:	bf00      	nop
 8006384:	3714      	adds	r7, #20
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	40010000 	.word	0x40010000
 8006394:	40000400 	.word	0x40000400
 8006398:	40000800 	.word	0x40000800
 800639c:	40000c00 	.word	0x40000c00
 80063a0:	40010400 	.word	0x40010400
 80063a4:	40014000 	.word	0x40014000
 80063a8:	40014400 	.word	0x40014400
 80063ac:	40014800 	.word	0x40014800
 80063b0:	40001800 	.word	0x40001800
 80063b4:	40001c00 	.word	0x40001c00
 80063b8:	40002000 	.word	0x40002000

080063bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063c4:	bf00      	nop
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063d8:	bf00      	nop
 80063da:	370c      	adds	r7, #12
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d101      	bne.n	80063f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e03f      	b.n	8006476 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d106      	bne.n	8006410 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f7fb f826 	bl	800145c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2224      	movs	r2, #36	; 0x24
 8006414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68da      	ldr	r2, [r3, #12]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006426:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 fd11 	bl	8006e50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	691a      	ldr	r2, [r3, #16]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800643c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	695a      	ldr	r2, [r3, #20]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800644c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	68da      	ldr	r2, [r3, #12]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800645c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2220      	movs	r2, #32
 8006468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2220      	movs	r2, #32
 8006470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	3708      	adds	r7, #8
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800647e:	b580      	push	{r7, lr}
 8006480:	b08c      	sub	sp, #48	; 0x30
 8006482:	af00      	add	r7, sp, #0
 8006484:	60f8      	str	r0, [r7, #12]
 8006486:	60b9      	str	r1, [r7, #8]
 8006488:	4613      	mov	r3, r2
 800648a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006492:	b2db      	uxtb	r3, r3
 8006494:	2b20      	cmp	r3, #32
 8006496:	d152      	bne.n	800653e <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d002      	beq.n	80064a4 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 800649e:	88fb      	ldrh	r3, [r7, #6]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d101      	bne.n	80064a8 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e04b      	b.n	8006540 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
    }

    __HAL_LOCK(huart);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d101      	bne.n	80064b6 <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 80064b2:	2302      	movs	r3, #2
 80064b4:	e044      	b.n	8006540 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2201      	movs	r2, #1
 80064ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2201      	movs	r2, #1
 80064c2:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80064c4:	88fb      	ldrh	r3, [r7, #6]
 80064c6:	461a      	mov	r2, r3
 80064c8:	68b9      	ldr	r1, [r7, #8]
 80064ca:	68f8      	ldr	r0, [r7, #12]
 80064cc:	f000 fae8 	bl	8006aa0 <UART_Start_Receive_IT>
 80064d0:	4603      	mov	r3, r0
 80064d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80064d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d12c      	bne.n	8006538 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d125      	bne.n	8006532 <HAL_UARTEx_ReceiveToIdle_IT+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80064e6:	2300      	movs	r3, #0
 80064e8:	613b      	str	r3, [r7, #16]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	613b      	str	r3, [r7, #16]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	613b      	str	r3, [r7, #16]
 80064fa:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	330c      	adds	r3, #12
 8006502:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	e853 3f00 	ldrex	r3, [r3]
 800650a:	617b      	str	r3, [r7, #20]
   return(result);
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	f043 0310 	orr.w	r3, r3, #16
 8006512:	62bb      	str	r3, [r7, #40]	; 0x28
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	330c      	adds	r3, #12
 800651a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800651c:	627a      	str	r2, [r7, #36]	; 0x24
 800651e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006520:	6a39      	ldr	r1, [r7, #32]
 8006522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006524:	e841 2300 	strex	r3, r2, [r1]
 8006528:	61fb      	str	r3, [r7, #28]
   return(result);
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d1e5      	bne.n	80064fc <HAL_UARTEx_ReceiveToIdle_IT+0x7e>
 8006530:	e002      	b.n	8006538 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8006538:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800653c:	e000      	b.n	8006540 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800653e:	2302      	movs	r3, #2
  }
}
 8006540:	4618      	mov	r0, r3
 8006542:	3730      	adds	r7, #48	; 0x30
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b0ba      	sub	sp, #232	; 0xe8
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	695b      	ldr	r3, [r3, #20]
 800656a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800656e:	2300      	movs	r3, #0
 8006570:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006574:	2300      	movs	r3, #0
 8006576:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800657a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800657e:	f003 030f 	and.w	r3, r3, #15
 8006582:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006586:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800658a:	2b00      	cmp	r3, #0
 800658c:	d10f      	bne.n	80065ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800658e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006592:	f003 0320 	and.w	r3, r3, #32
 8006596:	2b00      	cmp	r3, #0
 8006598:	d009      	beq.n	80065ae <HAL_UART_IRQHandler+0x66>
 800659a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800659e:	f003 0320 	and.w	r3, r3, #32
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d003      	beq.n	80065ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 fb97 	bl	8006cda <UART_Receive_IT>
      return;
 80065ac:	e256      	b.n	8006a5c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80065ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	f000 80de 	beq.w	8006774 <HAL_UART_IRQHandler+0x22c>
 80065b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065bc:	f003 0301 	and.w	r3, r3, #1
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d106      	bne.n	80065d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80065c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065c8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	f000 80d1 	beq.w	8006774 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80065d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065d6:	f003 0301 	and.w	r3, r3, #1
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d00b      	beq.n	80065f6 <HAL_UART_IRQHandler+0xae>
 80065de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d005      	beq.n	80065f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ee:	f043 0201 	orr.w	r2, r3, #1
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065fa:	f003 0304 	and.w	r3, r3, #4
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00b      	beq.n	800661a <HAL_UART_IRQHandler+0xd2>
 8006602:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006606:	f003 0301 	and.w	r3, r3, #1
 800660a:	2b00      	cmp	r3, #0
 800660c:	d005      	beq.n	800661a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006612:	f043 0202 	orr.w	r2, r3, #2
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800661a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800661e:	f003 0302 	and.w	r3, r3, #2
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00b      	beq.n	800663e <HAL_UART_IRQHandler+0xf6>
 8006626:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800662a:	f003 0301 	and.w	r3, r3, #1
 800662e:	2b00      	cmp	r3, #0
 8006630:	d005      	beq.n	800663e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006636:	f043 0204 	orr.w	r2, r3, #4
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800663e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006642:	f003 0308 	and.w	r3, r3, #8
 8006646:	2b00      	cmp	r3, #0
 8006648:	d011      	beq.n	800666e <HAL_UART_IRQHandler+0x126>
 800664a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800664e:	f003 0320 	and.w	r3, r3, #32
 8006652:	2b00      	cmp	r3, #0
 8006654:	d105      	bne.n	8006662 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006656:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800665a:	f003 0301 	and.w	r3, r3, #1
 800665e:	2b00      	cmp	r3, #0
 8006660:	d005      	beq.n	800666e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006666:	f043 0208 	orr.w	r2, r3, #8
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006672:	2b00      	cmp	r3, #0
 8006674:	f000 81ed 	beq.w	8006a52 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800667c:	f003 0320 	and.w	r3, r3, #32
 8006680:	2b00      	cmp	r3, #0
 8006682:	d008      	beq.n	8006696 <HAL_UART_IRQHandler+0x14e>
 8006684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006688:	f003 0320 	and.w	r3, r3, #32
 800668c:	2b00      	cmp	r3, #0
 800668e:	d002      	beq.n	8006696 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 fb22 	bl	8006cda <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	695b      	ldr	r3, [r3, #20]
 800669c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066a0:	2b40      	cmp	r3, #64	; 0x40
 80066a2:	bf0c      	ite	eq
 80066a4:	2301      	moveq	r3, #1
 80066a6:	2300      	movne	r3, #0
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b2:	f003 0308 	and.w	r3, r3, #8
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d103      	bne.n	80066c2 <HAL_UART_IRQHandler+0x17a>
 80066ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d04f      	beq.n	8006762 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 fa2a 	bl	8006b1c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	695b      	ldr	r3, [r3, #20]
 80066ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066d2:	2b40      	cmp	r3, #64	; 0x40
 80066d4:	d141      	bne.n	800675a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	3314      	adds	r3, #20
 80066dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80066e4:	e853 3f00 	ldrex	r3, [r3]
 80066e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80066ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80066f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	3314      	adds	r3, #20
 80066fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006702:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006706:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800670e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006712:	e841 2300 	strex	r3, r2, [r1]
 8006716:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800671a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1d9      	bne.n	80066d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006726:	2b00      	cmp	r3, #0
 8006728:	d013      	beq.n	8006752 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800672e:	4a7d      	ldr	r2, [pc, #500]	; (8006924 <HAL_UART_IRQHandler+0x3dc>)
 8006730:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006736:	4618      	mov	r0, r3
 8006738:	f7fb fafc 	bl	8001d34 <HAL_DMA_Abort_IT>
 800673c:	4603      	mov	r3, r0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d016      	beq.n	8006770 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800674c:	4610      	mov	r0, r2
 800674e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006750:	e00e      	b.n	8006770 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 f99a 	bl	8006a8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006758:	e00a      	b.n	8006770 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 f996 	bl	8006a8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006760:	e006      	b.n	8006770 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 f992 	bl	8006a8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800676e:	e170      	b.n	8006a52 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006770:	bf00      	nop
    return;
 8006772:	e16e      	b.n	8006a52 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006778:	2b01      	cmp	r3, #1
 800677a:	f040 814a 	bne.w	8006a12 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800677e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006782:	f003 0310 	and.w	r3, r3, #16
 8006786:	2b00      	cmp	r3, #0
 8006788:	f000 8143 	beq.w	8006a12 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800678c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006790:	f003 0310 	and.w	r3, r3, #16
 8006794:	2b00      	cmp	r3, #0
 8006796:	f000 813c 	beq.w	8006a12 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800679a:	2300      	movs	r3, #0
 800679c:	60bb      	str	r3, [r7, #8]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	60bb      	str	r3, [r7, #8]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	60bb      	str	r3, [r7, #8]
 80067ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	695b      	ldr	r3, [r3, #20]
 80067b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ba:	2b40      	cmp	r3, #64	; 0x40
 80067bc:	f040 80b4 	bne.w	8006928 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80067cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	f000 8140 	beq.w	8006a56 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80067da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80067de:	429a      	cmp	r2, r3
 80067e0:	f080 8139 	bcs.w	8006a56 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80067ea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f0:	69db      	ldr	r3, [r3, #28]
 80067f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067f6:	f000 8088 	beq.w	800690a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	330c      	adds	r3, #12
 8006800:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006804:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006808:	e853 3f00 	ldrex	r3, [r3]
 800680c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006810:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006814:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006818:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	330c      	adds	r3, #12
 8006822:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006826:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800682a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006832:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006836:	e841 2300 	strex	r3, r2, [r1]
 800683a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800683e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1d9      	bne.n	80067fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	3314      	adds	r3, #20
 800684c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006850:	e853 3f00 	ldrex	r3, [r3]
 8006854:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006856:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006858:	f023 0301 	bic.w	r3, r3, #1
 800685c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	3314      	adds	r3, #20
 8006866:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800686a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800686e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006870:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006872:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006876:	e841 2300 	strex	r3, r2, [r1]
 800687a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800687c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800687e:	2b00      	cmp	r3, #0
 8006880:	d1e1      	bne.n	8006846 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	3314      	adds	r3, #20
 8006888:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800688a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800688c:	e853 3f00 	ldrex	r3, [r3]
 8006890:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006892:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006894:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006898:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	3314      	adds	r3, #20
 80068a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80068a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80068a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80068ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80068ae:	e841 2300 	strex	r3, r2, [r1]
 80068b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80068b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d1e3      	bne.n	8006882 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2220      	movs	r2, #32
 80068be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	330c      	adds	r3, #12
 80068ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068d2:	e853 3f00 	ldrex	r3, [r3]
 80068d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80068d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068da:	f023 0310 	bic.w	r3, r3, #16
 80068de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	330c      	adds	r3, #12
 80068e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80068ec:	65ba      	str	r2, [r7, #88]	; 0x58
 80068ee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80068f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80068f4:	e841 2300 	strex	r3, r2, [r1]
 80068f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80068fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d1e3      	bne.n	80068c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006904:	4618      	mov	r0, r3
 8006906:	f7fb f9a5 	bl	8001c54 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006912:	b29b      	uxth	r3, r3
 8006914:	1ad3      	subs	r3, r2, r3
 8006916:	b29b      	uxth	r3, r3
 8006918:	4619      	mov	r1, r3
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f7fa f8dc 	bl	8000ad8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006920:	e099      	b.n	8006a56 <HAL_UART_IRQHandler+0x50e>
 8006922:	bf00      	nop
 8006924:	08006be3 	.word	0x08006be3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006930:	b29b      	uxth	r3, r3
 8006932:	1ad3      	subs	r3, r2, r3
 8006934:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800693c:	b29b      	uxth	r3, r3
 800693e:	2b00      	cmp	r3, #0
 8006940:	f000 808b 	beq.w	8006a5a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006944:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006948:	2b00      	cmp	r3, #0
 800694a:	f000 8086 	beq.w	8006a5a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	330c      	adds	r3, #12
 8006954:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006958:	e853 3f00 	ldrex	r3, [r3]
 800695c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800695e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006960:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006964:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	330c      	adds	r3, #12
 800696e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006972:	647a      	str	r2, [r7, #68]	; 0x44
 8006974:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006976:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006978:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800697a:	e841 2300 	strex	r3, r2, [r1]
 800697e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006982:	2b00      	cmp	r3, #0
 8006984:	d1e3      	bne.n	800694e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	3314      	adds	r3, #20
 800698c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006990:	e853 3f00 	ldrex	r3, [r3]
 8006994:	623b      	str	r3, [r7, #32]
   return(result);
 8006996:	6a3b      	ldr	r3, [r7, #32]
 8006998:	f023 0301 	bic.w	r3, r3, #1
 800699c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	3314      	adds	r3, #20
 80069a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80069aa:	633a      	str	r2, [r7, #48]	; 0x30
 80069ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069b2:	e841 2300 	strex	r3, r2, [r1]
 80069b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80069b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1e3      	bne.n	8006986 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2220      	movs	r2, #32
 80069c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	330c      	adds	r3, #12
 80069d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	e853 3f00 	ldrex	r3, [r3]
 80069da:	60fb      	str	r3, [r7, #12]
   return(result);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f023 0310 	bic.w	r3, r3, #16
 80069e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	330c      	adds	r3, #12
 80069ec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80069f0:	61fa      	str	r2, [r7, #28]
 80069f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f4:	69b9      	ldr	r1, [r7, #24]
 80069f6:	69fa      	ldr	r2, [r7, #28]
 80069f8:	e841 2300 	strex	r3, r2, [r1]
 80069fc:	617b      	str	r3, [r7, #20]
   return(result);
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d1e3      	bne.n	80069cc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a08:	4619      	mov	r1, r3
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f7fa f864 	bl	8000ad8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a10:	e023      	b.n	8006a5a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d009      	beq.n	8006a32 <HAL_UART_IRQHandler+0x4ea>
 8006a1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d003      	beq.n	8006a32 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 f8ed 	bl	8006c0a <UART_Transmit_IT>
    return;
 8006a30:	e014      	b.n	8006a5c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00e      	beq.n	8006a5c <HAL_UART_IRQHandler+0x514>
 8006a3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d008      	beq.n	8006a5c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 f92d 	bl	8006caa <UART_EndTransmit_IT>
    return;
 8006a50:	e004      	b.n	8006a5c <HAL_UART_IRQHandler+0x514>
    return;
 8006a52:	bf00      	nop
 8006a54:	e002      	b.n	8006a5c <HAL_UART_IRQHandler+0x514>
      return;
 8006a56:	bf00      	nop
 8006a58:	e000      	b.n	8006a5c <HAL_UART_IRQHandler+0x514>
      return;
 8006a5a:	bf00      	nop
  }
}
 8006a5c:	37e8      	adds	r7, #232	; 0xe8
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop

08006a64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b083      	sub	sp, #12
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006a6c:	bf00      	nop
 8006a6e:	370c      	adds	r7, #12
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006a80:	bf00      	nop
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006a94:	bf00      	nop
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b085      	sub	sp, #20
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	4613      	mov	r3, r2
 8006aac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	68ba      	ldr	r2, [r7, #8]
 8006ab2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	88fa      	ldrh	r2, [r7, #6]
 8006ab8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	88fa      	ldrh	r2, [r7, #6]
 8006abe:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2222      	movs	r2, #34	; 0x22
 8006aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d007      	beq.n	8006aee <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	68da      	ldr	r2, [r3, #12]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006aec:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	695a      	ldr	r2, [r3, #20]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f042 0201 	orr.w	r2, r2, #1
 8006afc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68da      	ldr	r2, [r3, #12]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f042 0220 	orr.w	r2, r2, #32
 8006b0c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006b0e:	2300      	movs	r3, #0
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3714      	adds	r7, #20
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b095      	sub	sp, #84	; 0x54
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	330c      	adds	r3, #12
 8006b2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b2e:	e853 3f00 	ldrex	r3, [r3]
 8006b32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	330c      	adds	r3, #12
 8006b42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b44:	643a      	str	r2, [r7, #64]	; 0x40
 8006b46:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b4c:	e841 2300 	strex	r3, r2, [r1]
 8006b50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d1e5      	bne.n	8006b24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	3314      	adds	r3, #20
 8006b5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b60:	6a3b      	ldr	r3, [r7, #32]
 8006b62:	e853 3f00 	ldrex	r3, [r3]
 8006b66:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	f023 0301 	bic.w	r3, r3, #1
 8006b6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	3314      	adds	r3, #20
 8006b76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b80:	e841 2300 	strex	r3, r2, [r1]
 8006b84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1e5      	bne.n	8006b58 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d119      	bne.n	8006bc8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	330c      	adds	r3, #12
 8006b9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	e853 3f00 	ldrex	r3, [r3]
 8006ba2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	f023 0310 	bic.w	r3, r3, #16
 8006baa:	647b      	str	r3, [r7, #68]	; 0x44
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	330c      	adds	r3, #12
 8006bb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bb4:	61ba      	str	r2, [r7, #24]
 8006bb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb8:	6979      	ldr	r1, [r7, #20]
 8006bba:	69ba      	ldr	r2, [r7, #24]
 8006bbc:	e841 2300 	strex	r3, r2, [r1]
 8006bc0:	613b      	str	r3, [r7, #16]
   return(result);
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d1e5      	bne.n	8006b94 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2220      	movs	r2, #32
 8006bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006bd6:	bf00      	nop
 8006bd8:	3754      	adds	r7, #84	; 0x54
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr

08006be2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b084      	sub	sp, #16
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006bfc:	68f8      	ldr	r0, [r7, #12]
 8006bfe:	f7ff ff45 	bl	8006a8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c02:	bf00      	nop
 8006c04:	3710      	adds	r7, #16
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006c0a:	b480      	push	{r7}
 8006c0c:	b085      	sub	sp, #20
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	2b21      	cmp	r3, #33	; 0x21
 8006c1c:	d13e      	bne.n	8006c9c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c26:	d114      	bne.n	8006c52 <UART_Transmit_IT+0x48>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	691b      	ldr	r3, [r3, #16]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d110      	bne.n	8006c52 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6a1b      	ldr	r3, [r3, #32]
 8006c34:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	881b      	ldrh	r3, [r3, #0]
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c44:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6a1b      	ldr	r3, [r3, #32]
 8006c4a:	1c9a      	adds	r2, r3, #2
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	621a      	str	r2, [r3, #32]
 8006c50:	e008      	b.n	8006c64 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a1b      	ldr	r3, [r3, #32]
 8006c56:	1c59      	adds	r1, r3, #1
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	6211      	str	r1, [r2, #32]
 8006c5c:	781a      	ldrb	r2, [r3, #0]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	3b01      	subs	r3, #1
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	4619      	mov	r1, r3
 8006c72:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d10f      	bne.n	8006c98 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68da      	ldr	r2, [r3, #12]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c86:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	68da      	ldr	r2, [r3, #12]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c96:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	e000      	b.n	8006c9e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006c9c:	2302      	movs	r3, #2
  }
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3714      	adds	r7, #20
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr

08006caa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b082      	sub	sp, #8
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	68da      	ldr	r2, [r3, #12]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cc0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2220      	movs	r2, #32
 8006cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f7ff feca 	bl	8006a64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006cd0:	2300      	movs	r3, #0
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3708      	adds	r7, #8
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}

08006cda <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006cda:	b580      	push	{r7, lr}
 8006cdc:	b08c      	sub	sp, #48	; 0x30
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	2b22      	cmp	r3, #34	; 0x22
 8006cec:	f040 80ab 	bne.w	8006e46 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cf8:	d117      	bne.n	8006d2a <UART_Receive_IT+0x50>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d113      	bne.n	8006d2a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006d02:	2300      	movs	r3, #0
 8006d04:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d0a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d18:	b29a      	uxth	r2, r3
 8006d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d1c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d22:	1c9a      	adds	r2, r3, #2
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	629a      	str	r2, [r3, #40]	; 0x28
 8006d28:	e026      	b.n	8006d78 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006d30:	2300      	movs	r3, #0
 8006d32:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d3c:	d007      	beq.n	8006d4e <UART_Receive_IT+0x74>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d10a      	bne.n	8006d5c <UART_Receive_IT+0x82>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d106      	bne.n	8006d5c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	b2da      	uxtb	r2, r3
 8006d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d58:	701a      	strb	r2, [r3, #0]
 8006d5a:	e008      	b.n	8006d6e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d68:	b2da      	uxtb	r2, r3
 8006d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d6c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d72:	1c5a      	adds	r2, r3, #1
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	3b01      	subs	r3, #1
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	4619      	mov	r1, r3
 8006d86:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d15a      	bne.n	8006e42 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68da      	ldr	r2, [r3, #12]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f022 0220 	bic.w	r2, r2, #32
 8006d9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	68da      	ldr	r2, [r3, #12]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006daa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	695a      	ldr	r2, [r3, #20]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f022 0201 	bic.w	r2, r2, #1
 8006dba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2220      	movs	r2, #32
 8006dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d135      	bne.n	8006e38 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	330c      	adds	r3, #12
 8006dd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	e853 3f00 	ldrex	r3, [r3]
 8006de0:	613b      	str	r3, [r7, #16]
   return(result);
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	f023 0310 	bic.w	r3, r3, #16
 8006de8:	627b      	str	r3, [r7, #36]	; 0x24
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	330c      	adds	r3, #12
 8006df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006df2:	623a      	str	r2, [r7, #32]
 8006df4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df6:	69f9      	ldr	r1, [r7, #28]
 8006df8:	6a3a      	ldr	r2, [r7, #32]
 8006dfa:	e841 2300 	strex	r3, r2, [r1]
 8006dfe:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d1e5      	bne.n	8006dd2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f003 0310 	and.w	r3, r3, #16
 8006e10:	2b10      	cmp	r3, #16
 8006e12:	d10a      	bne.n	8006e2a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e14:	2300      	movs	r3, #0
 8006e16:	60fb      	str	r3, [r7, #12]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	60fb      	str	r3, [r7, #12]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	60fb      	str	r3, [r7, #12]
 8006e28:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006e2e:	4619      	mov	r1, r3
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f7f9 fe51 	bl	8000ad8 <HAL_UARTEx_RxEventCallback>
 8006e36:	e002      	b.n	8006e3e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f7ff fe1d 	bl	8006a78 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	e002      	b.n	8006e48 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006e42:	2300      	movs	r3, #0
 8006e44:	e000      	b.n	8006e48 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006e46:	2302      	movs	r3, #2
  }
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3730      	adds	r7, #48	; 0x30
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e54:	b0c0      	sub	sp, #256	; 0x100
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	691b      	ldr	r3, [r3, #16]
 8006e64:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e6c:	68d9      	ldr	r1, [r3, #12]
 8006e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	ea40 0301 	orr.w	r3, r0, r1
 8006e78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e7e:	689a      	ldr	r2, [r3, #8]
 8006e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	431a      	orrs	r2, r3
 8006e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e8c:	695b      	ldr	r3, [r3, #20]
 8006e8e:	431a      	orrs	r2, r3
 8006e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e94:	69db      	ldr	r3, [r3, #28]
 8006e96:	4313      	orrs	r3, r2
 8006e98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006ea8:	f021 010c 	bic.w	r1, r1, #12
 8006eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006eb6:	430b      	orrs	r3, r1
 8006eb8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	695b      	ldr	r3, [r3, #20]
 8006ec2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eca:	6999      	ldr	r1, [r3, #24]
 8006ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	ea40 0301 	orr.w	r3, r0, r1
 8006ed6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	4b8f      	ldr	r3, [pc, #572]	; (800711c <UART_SetConfig+0x2cc>)
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d005      	beq.n	8006ef0 <UART_SetConfig+0xa0>
 8006ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	4b8d      	ldr	r3, [pc, #564]	; (8007120 <UART_SetConfig+0x2d0>)
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d104      	bne.n	8006efa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006ef0:	f7fc fa28 	bl	8003344 <HAL_RCC_GetPCLK2Freq>
 8006ef4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006ef8:	e003      	b.n	8006f02 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006efa:	f7fc fa0f 	bl	800331c <HAL_RCC_GetPCLK1Freq>
 8006efe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f06:	69db      	ldr	r3, [r3, #28]
 8006f08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f0c:	f040 810c 	bne.w	8007128 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006f10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f14:	2200      	movs	r2, #0
 8006f16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f1a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006f1e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006f22:	4622      	mov	r2, r4
 8006f24:	462b      	mov	r3, r5
 8006f26:	1891      	adds	r1, r2, r2
 8006f28:	65b9      	str	r1, [r7, #88]	; 0x58
 8006f2a:	415b      	adcs	r3, r3
 8006f2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f2e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006f32:	4621      	mov	r1, r4
 8006f34:	eb12 0801 	adds.w	r8, r2, r1
 8006f38:	4629      	mov	r1, r5
 8006f3a:	eb43 0901 	adc.w	r9, r3, r1
 8006f3e:	f04f 0200 	mov.w	r2, #0
 8006f42:	f04f 0300 	mov.w	r3, #0
 8006f46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f52:	4690      	mov	r8, r2
 8006f54:	4699      	mov	r9, r3
 8006f56:	4623      	mov	r3, r4
 8006f58:	eb18 0303 	adds.w	r3, r8, r3
 8006f5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006f60:	462b      	mov	r3, r5
 8006f62:	eb49 0303 	adc.w	r3, r9, r3
 8006f66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006f76:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006f7a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006f7e:	460b      	mov	r3, r1
 8006f80:	18db      	adds	r3, r3, r3
 8006f82:	653b      	str	r3, [r7, #80]	; 0x50
 8006f84:	4613      	mov	r3, r2
 8006f86:	eb42 0303 	adc.w	r3, r2, r3
 8006f8a:	657b      	str	r3, [r7, #84]	; 0x54
 8006f8c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006f90:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006f94:	f7f9 f99c 	bl	80002d0 <__aeabi_uldivmod>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	460b      	mov	r3, r1
 8006f9c:	4b61      	ldr	r3, [pc, #388]	; (8007124 <UART_SetConfig+0x2d4>)
 8006f9e:	fba3 2302 	umull	r2, r3, r3, r2
 8006fa2:	095b      	lsrs	r3, r3, #5
 8006fa4:	011c      	lsls	r4, r3, #4
 8006fa6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006faa:	2200      	movs	r2, #0
 8006fac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006fb0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006fb4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006fb8:	4642      	mov	r2, r8
 8006fba:	464b      	mov	r3, r9
 8006fbc:	1891      	adds	r1, r2, r2
 8006fbe:	64b9      	str	r1, [r7, #72]	; 0x48
 8006fc0:	415b      	adcs	r3, r3
 8006fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fc4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006fc8:	4641      	mov	r1, r8
 8006fca:	eb12 0a01 	adds.w	sl, r2, r1
 8006fce:	4649      	mov	r1, r9
 8006fd0:	eb43 0b01 	adc.w	fp, r3, r1
 8006fd4:	f04f 0200 	mov.w	r2, #0
 8006fd8:	f04f 0300 	mov.w	r3, #0
 8006fdc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006fe0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006fe4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006fe8:	4692      	mov	sl, r2
 8006fea:	469b      	mov	fp, r3
 8006fec:	4643      	mov	r3, r8
 8006fee:	eb1a 0303 	adds.w	r3, sl, r3
 8006ff2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ff6:	464b      	mov	r3, r9
 8006ff8:	eb4b 0303 	adc.w	r3, fp, r3
 8006ffc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800700c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007010:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007014:	460b      	mov	r3, r1
 8007016:	18db      	adds	r3, r3, r3
 8007018:	643b      	str	r3, [r7, #64]	; 0x40
 800701a:	4613      	mov	r3, r2
 800701c:	eb42 0303 	adc.w	r3, r2, r3
 8007020:	647b      	str	r3, [r7, #68]	; 0x44
 8007022:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007026:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800702a:	f7f9 f951 	bl	80002d0 <__aeabi_uldivmod>
 800702e:	4602      	mov	r2, r0
 8007030:	460b      	mov	r3, r1
 8007032:	4611      	mov	r1, r2
 8007034:	4b3b      	ldr	r3, [pc, #236]	; (8007124 <UART_SetConfig+0x2d4>)
 8007036:	fba3 2301 	umull	r2, r3, r3, r1
 800703a:	095b      	lsrs	r3, r3, #5
 800703c:	2264      	movs	r2, #100	; 0x64
 800703e:	fb02 f303 	mul.w	r3, r2, r3
 8007042:	1acb      	subs	r3, r1, r3
 8007044:	00db      	lsls	r3, r3, #3
 8007046:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800704a:	4b36      	ldr	r3, [pc, #216]	; (8007124 <UART_SetConfig+0x2d4>)
 800704c:	fba3 2302 	umull	r2, r3, r3, r2
 8007050:	095b      	lsrs	r3, r3, #5
 8007052:	005b      	lsls	r3, r3, #1
 8007054:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007058:	441c      	add	r4, r3
 800705a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800705e:	2200      	movs	r2, #0
 8007060:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007064:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007068:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800706c:	4642      	mov	r2, r8
 800706e:	464b      	mov	r3, r9
 8007070:	1891      	adds	r1, r2, r2
 8007072:	63b9      	str	r1, [r7, #56]	; 0x38
 8007074:	415b      	adcs	r3, r3
 8007076:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007078:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800707c:	4641      	mov	r1, r8
 800707e:	1851      	adds	r1, r2, r1
 8007080:	6339      	str	r1, [r7, #48]	; 0x30
 8007082:	4649      	mov	r1, r9
 8007084:	414b      	adcs	r3, r1
 8007086:	637b      	str	r3, [r7, #52]	; 0x34
 8007088:	f04f 0200 	mov.w	r2, #0
 800708c:	f04f 0300 	mov.w	r3, #0
 8007090:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007094:	4659      	mov	r1, fp
 8007096:	00cb      	lsls	r3, r1, #3
 8007098:	4651      	mov	r1, sl
 800709a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800709e:	4651      	mov	r1, sl
 80070a0:	00ca      	lsls	r2, r1, #3
 80070a2:	4610      	mov	r0, r2
 80070a4:	4619      	mov	r1, r3
 80070a6:	4603      	mov	r3, r0
 80070a8:	4642      	mov	r2, r8
 80070aa:	189b      	adds	r3, r3, r2
 80070ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80070b0:	464b      	mov	r3, r9
 80070b2:	460a      	mov	r2, r1
 80070b4:	eb42 0303 	adc.w	r3, r2, r3
 80070b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80070bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80070c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80070cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80070d0:	460b      	mov	r3, r1
 80070d2:	18db      	adds	r3, r3, r3
 80070d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80070d6:	4613      	mov	r3, r2
 80070d8:	eb42 0303 	adc.w	r3, r2, r3
 80070dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80070e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80070e6:	f7f9 f8f3 	bl	80002d0 <__aeabi_uldivmod>
 80070ea:	4602      	mov	r2, r0
 80070ec:	460b      	mov	r3, r1
 80070ee:	4b0d      	ldr	r3, [pc, #52]	; (8007124 <UART_SetConfig+0x2d4>)
 80070f0:	fba3 1302 	umull	r1, r3, r3, r2
 80070f4:	095b      	lsrs	r3, r3, #5
 80070f6:	2164      	movs	r1, #100	; 0x64
 80070f8:	fb01 f303 	mul.w	r3, r1, r3
 80070fc:	1ad3      	subs	r3, r2, r3
 80070fe:	00db      	lsls	r3, r3, #3
 8007100:	3332      	adds	r3, #50	; 0x32
 8007102:	4a08      	ldr	r2, [pc, #32]	; (8007124 <UART_SetConfig+0x2d4>)
 8007104:	fba2 2303 	umull	r2, r3, r2, r3
 8007108:	095b      	lsrs	r3, r3, #5
 800710a:	f003 0207 	and.w	r2, r3, #7
 800710e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4422      	add	r2, r4
 8007116:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007118:	e105      	b.n	8007326 <UART_SetConfig+0x4d6>
 800711a:	bf00      	nop
 800711c:	40011000 	.word	0x40011000
 8007120:	40011400 	.word	0x40011400
 8007124:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007128:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800712c:	2200      	movs	r2, #0
 800712e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007132:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007136:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800713a:	4642      	mov	r2, r8
 800713c:	464b      	mov	r3, r9
 800713e:	1891      	adds	r1, r2, r2
 8007140:	6239      	str	r1, [r7, #32]
 8007142:	415b      	adcs	r3, r3
 8007144:	627b      	str	r3, [r7, #36]	; 0x24
 8007146:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800714a:	4641      	mov	r1, r8
 800714c:	1854      	adds	r4, r2, r1
 800714e:	4649      	mov	r1, r9
 8007150:	eb43 0501 	adc.w	r5, r3, r1
 8007154:	f04f 0200 	mov.w	r2, #0
 8007158:	f04f 0300 	mov.w	r3, #0
 800715c:	00eb      	lsls	r3, r5, #3
 800715e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007162:	00e2      	lsls	r2, r4, #3
 8007164:	4614      	mov	r4, r2
 8007166:	461d      	mov	r5, r3
 8007168:	4643      	mov	r3, r8
 800716a:	18e3      	adds	r3, r4, r3
 800716c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007170:	464b      	mov	r3, r9
 8007172:	eb45 0303 	adc.w	r3, r5, r3
 8007176:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800717a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007186:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800718a:	f04f 0200 	mov.w	r2, #0
 800718e:	f04f 0300 	mov.w	r3, #0
 8007192:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007196:	4629      	mov	r1, r5
 8007198:	008b      	lsls	r3, r1, #2
 800719a:	4621      	mov	r1, r4
 800719c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071a0:	4621      	mov	r1, r4
 80071a2:	008a      	lsls	r2, r1, #2
 80071a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80071a8:	f7f9 f892 	bl	80002d0 <__aeabi_uldivmod>
 80071ac:	4602      	mov	r2, r0
 80071ae:	460b      	mov	r3, r1
 80071b0:	4b60      	ldr	r3, [pc, #384]	; (8007334 <UART_SetConfig+0x4e4>)
 80071b2:	fba3 2302 	umull	r2, r3, r3, r2
 80071b6:	095b      	lsrs	r3, r3, #5
 80071b8:	011c      	lsls	r4, r3, #4
 80071ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071be:	2200      	movs	r2, #0
 80071c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80071c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80071c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80071cc:	4642      	mov	r2, r8
 80071ce:	464b      	mov	r3, r9
 80071d0:	1891      	adds	r1, r2, r2
 80071d2:	61b9      	str	r1, [r7, #24]
 80071d4:	415b      	adcs	r3, r3
 80071d6:	61fb      	str	r3, [r7, #28]
 80071d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80071dc:	4641      	mov	r1, r8
 80071de:	1851      	adds	r1, r2, r1
 80071e0:	6139      	str	r1, [r7, #16]
 80071e2:	4649      	mov	r1, r9
 80071e4:	414b      	adcs	r3, r1
 80071e6:	617b      	str	r3, [r7, #20]
 80071e8:	f04f 0200 	mov.w	r2, #0
 80071ec:	f04f 0300 	mov.w	r3, #0
 80071f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80071f4:	4659      	mov	r1, fp
 80071f6:	00cb      	lsls	r3, r1, #3
 80071f8:	4651      	mov	r1, sl
 80071fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071fe:	4651      	mov	r1, sl
 8007200:	00ca      	lsls	r2, r1, #3
 8007202:	4610      	mov	r0, r2
 8007204:	4619      	mov	r1, r3
 8007206:	4603      	mov	r3, r0
 8007208:	4642      	mov	r2, r8
 800720a:	189b      	adds	r3, r3, r2
 800720c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007210:	464b      	mov	r3, r9
 8007212:	460a      	mov	r2, r1
 8007214:	eb42 0303 	adc.w	r3, r2, r3
 8007218:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800721c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	67bb      	str	r3, [r7, #120]	; 0x78
 8007226:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007228:	f04f 0200 	mov.w	r2, #0
 800722c:	f04f 0300 	mov.w	r3, #0
 8007230:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007234:	4649      	mov	r1, r9
 8007236:	008b      	lsls	r3, r1, #2
 8007238:	4641      	mov	r1, r8
 800723a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800723e:	4641      	mov	r1, r8
 8007240:	008a      	lsls	r2, r1, #2
 8007242:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007246:	f7f9 f843 	bl	80002d0 <__aeabi_uldivmod>
 800724a:	4602      	mov	r2, r0
 800724c:	460b      	mov	r3, r1
 800724e:	4b39      	ldr	r3, [pc, #228]	; (8007334 <UART_SetConfig+0x4e4>)
 8007250:	fba3 1302 	umull	r1, r3, r3, r2
 8007254:	095b      	lsrs	r3, r3, #5
 8007256:	2164      	movs	r1, #100	; 0x64
 8007258:	fb01 f303 	mul.w	r3, r1, r3
 800725c:	1ad3      	subs	r3, r2, r3
 800725e:	011b      	lsls	r3, r3, #4
 8007260:	3332      	adds	r3, #50	; 0x32
 8007262:	4a34      	ldr	r2, [pc, #208]	; (8007334 <UART_SetConfig+0x4e4>)
 8007264:	fba2 2303 	umull	r2, r3, r2, r3
 8007268:	095b      	lsrs	r3, r3, #5
 800726a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800726e:	441c      	add	r4, r3
 8007270:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007274:	2200      	movs	r2, #0
 8007276:	673b      	str	r3, [r7, #112]	; 0x70
 8007278:	677a      	str	r2, [r7, #116]	; 0x74
 800727a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800727e:	4642      	mov	r2, r8
 8007280:	464b      	mov	r3, r9
 8007282:	1891      	adds	r1, r2, r2
 8007284:	60b9      	str	r1, [r7, #8]
 8007286:	415b      	adcs	r3, r3
 8007288:	60fb      	str	r3, [r7, #12]
 800728a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800728e:	4641      	mov	r1, r8
 8007290:	1851      	adds	r1, r2, r1
 8007292:	6039      	str	r1, [r7, #0]
 8007294:	4649      	mov	r1, r9
 8007296:	414b      	adcs	r3, r1
 8007298:	607b      	str	r3, [r7, #4]
 800729a:	f04f 0200 	mov.w	r2, #0
 800729e:	f04f 0300 	mov.w	r3, #0
 80072a2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80072a6:	4659      	mov	r1, fp
 80072a8:	00cb      	lsls	r3, r1, #3
 80072aa:	4651      	mov	r1, sl
 80072ac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80072b0:	4651      	mov	r1, sl
 80072b2:	00ca      	lsls	r2, r1, #3
 80072b4:	4610      	mov	r0, r2
 80072b6:	4619      	mov	r1, r3
 80072b8:	4603      	mov	r3, r0
 80072ba:	4642      	mov	r2, r8
 80072bc:	189b      	adds	r3, r3, r2
 80072be:	66bb      	str	r3, [r7, #104]	; 0x68
 80072c0:	464b      	mov	r3, r9
 80072c2:	460a      	mov	r2, r1
 80072c4:	eb42 0303 	adc.w	r3, r2, r3
 80072c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80072ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	663b      	str	r3, [r7, #96]	; 0x60
 80072d4:	667a      	str	r2, [r7, #100]	; 0x64
 80072d6:	f04f 0200 	mov.w	r2, #0
 80072da:	f04f 0300 	mov.w	r3, #0
 80072de:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80072e2:	4649      	mov	r1, r9
 80072e4:	008b      	lsls	r3, r1, #2
 80072e6:	4641      	mov	r1, r8
 80072e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80072ec:	4641      	mov	r1, r8
 80072ee:	008a      	lsls	r2, r1, #2
 80072f0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80072f4:	f7f8 ffec 	bl	80002d0 <__aeabi_uldivmod>
 80072f8:	4602      	mov	r2, r0
 80072fa:	460b      	mov	r3, r1
 80072fc:	4b0d      	ldr	r3, [pc, #52]	; (8007334 <UART_SetConfig+0x4e4>)
 80072fe:	fba3 1302 	umull	r1, r3, r3, r2
 8007302:	095b      	lsrs	r3, r3, #5
 8007304:	2164      	movs	r1, #100	; 0x64
 8007306:	fb01 f303 	mul.w	r3, r1, r3
 800730a:	1ad3      	subs	r3, r2, r3
 800730c:	011b      	lsls	r3, r3, #4
 800730e:	3332      	adds	r3, #50	; 0x32
 8007310:	4a08      	ldr	r2, [pc, #32]	; (8007334 <UART_SetConfig+0x4e4>)
 8007312:	fba2 2303 	umull	r2, r3, r2, r3
 8007316:	095b      	lsrs	r3, r3, #5
 8007318:	f003 020f 	and.w	r2, r3, #15
 800731c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4422      	add	r2, r4
 8007324:	609a      	str	r2, [r3, #8]
}
 8007326:	bf00      	nop
 8007328:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800732c:	46bd      	mov	sp, r7
 800732e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007332:	bf00      	nop
 8007334:	51eb851f 	.word	0x51eb851f

08007338 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8007338:	b084      	sub	sp, #16
 800733a:	b480      	push	{r7}
 800733c:	b085      	sub	sp, #20
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
 8007342:	f107 001c 	add.w	r0, r7, #28
 8007346:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800734a:	2300      	movs	r3, #0
 800734c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800734e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007350:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007352:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8007356:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007358:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800735a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800735c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800735e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007362:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007364:	68fa      	ldr	r2, [r7, #12]
 8007366:	4313      	orrs	r3, r2
 8007368:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8007372:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007376:	68fa      	ldr	r2, [r7, #12]
 8007378:	431a      	orrs	r2, r3
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800737e:	2300      	movs	r3, #0
}
 8007380:	4618      	mov	r0, r3
 8007382:	3714      	adds	r7, #20
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	b004      	add	sp, #16
 800738c:	4770      	bx	lr

0800738e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800738e:	b480      	push	{r7}
 8007390:	b083      	sub	sp, #12
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800739c:	4618      	mov	r0, r3
 800739e:	370c      	adds	r7, #12
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80073a8:	b480      	push	{r7}
 80073aa:	b083      	sub	sp, #12
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80073bc:	2300      	movs	r3, #0
}
 80073be:	4618      	mov	r0, r3
 80073c0:	370c      	adds	r7, #12
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr

080073ca <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80073ca:	b480      	push	{r7}
 80073cc:	b083      	sub	sp, #12
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2203      	movs	r2, #3
 80073d6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80073d8:	2300      	movs	r3, #0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	370c      	adds	r7, #12
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr

080073e6 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80073e6:	b480      	push	{r7}
 80073e8:	b083      	sub	sp, #12
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f003 0303 	and.w	r3, r3, #3
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	370c      	adds	r7, #12
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr

08007402 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8007402:	b480      	push	{r7}
 8007404:	b085      	sub	sp, #20
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
 800740a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800740c:	2300      	movs	r3, #0
 800740e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007420:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007426:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800742c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800742e:	68fa      	ldr	r2, [r7, #12]
 8007430:	4313      	orrs	r3, r2
 8007432:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800743c:	f023 030f 	bic.w	r3, r3, #15
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	431a      	orrs	r2, r3
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007448:	2300      	movs	r3, #0
}
 800744a:	4618      	mov	r0, r3
 800744c:	3714      	adds	r7, #20
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr

08007456 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8007456:	b480      	push	{r7}
 8007458:	b083      	sub	sp, #12
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	691b      	ldr	r3, [r3, #16]
 8007462:	b2db      	uxtb	r3, r3
}
 8007464:	4618      	mov	r0, r3
 8007466:	370c      	adds	r7, #12
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8007470:	b480      	push	{r7}
 8007472:	b085      	sub	sp, #20
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	3314      	adds	r3, #20
 800747e:	461a      	mov	r2, r3
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	4413      	add	r3, r2
 8007484:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
}  
 800748a:	4618      	mov	r0, r3
 800748c:	3714      	adds	r7, #20
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr

08007496 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8007496:	b480      	push	{r7}
 8007498:	b085      	sub	sp, #20
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
 800749e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80074a0:	2300      	movs	r3, #0
 80074a2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	685a      	ldr	r2, [r3, #4]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80074bc:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80074c2:	431a      	orrs	r2, r3
                       Data->DPSM);
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80074c8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80074ca:	68fa      	ldr	r2, [r7, #12]
 80074cc:	4313      	orrs	r3, r2
 80074ce:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d4:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	431a      	orrs	r2, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80074e0:	2300      	movs	r3, #0

}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3714      	adds	r7, #20
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr

080074ee <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80074ee:	b580      	push	{r7, lr}
 80074f0:	b088      	sub	sp, #32
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
 80074f6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80074fc:	2310      	movs	r3, #16
 80074fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007500:	2340      	movs	r3, #64	; 0x40
 8007502:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007504:	2300      	movs	r3, #0
 8007506:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007508:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800750c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800750e:	f107 0308 	add.w	r3, r7, #8
 8007512:	4619      	mov	r1, r3
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f7ff ff74 	bl	8007402 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800751a:	f241 3288 	movw	r2, #5000	; 0x1388
 800751e:	2110      	movs	r1, #16
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 fa19 	bl	8007958 <SDMMC_GetCmdResp1>
 8007526:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007528:	69fb      	ldr	r3, [r7, #28]
}
 800752a:	4618      	mov	r0, r3
 800752c:	3720      	adds	r7, #32
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}

08007532 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007532:	b580      	push	{r7, lr}
 8007534:	b088      	sub	sp, #32
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
 800753a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007540:	2311      	movs	r3, #17
 8007542:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007544:	2340      	movs	r3, #64	; 0x40
 8007546:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007548:	2300      	movs	r3, #0
 800754a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800754c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007550:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007552:	f107 0308 	add.w	r3, r7, #8
 8007556:	4619      	mov	r1, r3
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f7ff ff52 	bl	8007402 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800755e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007562:	2111      	movs	r1, #17
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 f9f7 	bl	8007958 <SDMMC_GetCmdResp1>
 800756a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800756c:	69fb      	ldr	r3, [r7, #28]
}
 800756e:	4618      	mov	r0, r3
 8007570:	3720      	adds	r7, #32
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}

08007576 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007576:	b580      	push	{r7, lr}
 8007578:	b088      	sub	sp, #32
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
 800757e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007584:	2312      	movs	r3, #18
 8007586:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007588:	2340      	movs	r3, #64	; 0x40
 800758a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800758c:	2300      	movs	r3, #0
 800758e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007590:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007594:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007596:	f107 0308 	add.w	r3, r7, #8
 800759a:	4619      	mov	r1, r3
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f7ff ff30 	bl	8007402 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80075a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80075a6:	2112      	movs	r1, #18
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 f9d5 	bl	8007958 <SDMMC_GetCmdResp1>
 80075ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80075b0:	69fb      	ldr	r3, [r7, #28]
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3720      	adds	r7, #32
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}

080075ba <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b088      	sub	sp, #32
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
 80075c2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80075c8:	2318      	movs	r3, #24
 80075ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80075cc:	2340      	movs	r3, #64	; 0x40
 80075ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80075d0:	2300      	movs	r3, #0
 80075d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80075d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80075da:	f107 0308 	add.w	r3, r7, #8
 80075de:	4619      	mov	r1, r3
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f7ff ff0e 	bl	8007402 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80075e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80075ea:	2118      	movs	r1, #24
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 f9b3 	bl	8007958 <SDMMC_GetCmdResp1>
 80075f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80075f4:	69fb      	ldr	r3, [r7, #28]
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3720      	adds	r7, #32
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}

080075fe <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80075fe:	b580      	push	{r7, lr}
 8007600:	b088      	sub	sp, #32
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
 8007606:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800760c:	2319      	movs	r3, #25
 800760e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007610:	2340      	movs	r3, #64	; 0x40
 8007612:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007614:	2300      	movs	r3, #0
 8007616:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007618:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800761c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800761e:	f107 0308 	add.w	r3, r7, #8
 8007622:	4619      	mov	r1, r3
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f7ff feec 	bl	8007402 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800762a:	f241 3288 	movw	r2, #5000	; 0x1388
 800762e:	2119      	movs	r1, #25
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f000 f991 	bl	8007958 <SDMMC_GetCmdResp1>
 8007636:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007638:	69fb      	ldr	r3, [r7, #28]
}
 800763a:	4618      	mov	r0, r3
 800763c:	3720      	adds	r7, #32
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
	...

08007644 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b088      	sub	sp, #32
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800764c:	2300      	movs	r3, #0
 800764e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007650:	230c      	movs	r3, #12
 8007652:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007654:	2340      	movs	r3, #64	; 0x40
 8007656:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007658:	2300      	movs	r3, #0
 800765a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800765c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007660:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007662:	f107 0308 	add.w	r3, r7, #8
 8007666:	4619      	mov	r1, r3
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f7ff feca 	bl	8007402 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800766e:	4a05      	ldr	r2, [pc, #20]	; (8007684 <SDMMC_CmdStopTransfer+0x40>)
 8007670:	210c      	movs	r1, #12
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 f970 	bl	8007958 <SDMMC_GetCmdResp1>
 8007678:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800767a:	69fb      	ldr	r3, [r7, #28]
}
 800767c:	4618      	mov	r0, r3
 800767e:	3720      	adds	r7, #32
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}
 8007684:	05f5e100 	.word	0x05f5e100

08007688 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b08a      	sub	sp, #40	; 0x28
 800768c:	af00      	add	r7, sp, #0
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007698:	2307      	movs	r3, #7
 800769a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800769c:	2340      	movs	r3, #64	; 0x40
 800769e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80076a0:	2300      	movs	r3, #0
 80076a2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80076a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076a8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80076aa:	f107 0310 	add.w	r3, r7, #16
 80076ae:	4619      	mov	r1, r3
 80076b0:	68f8      	ldr	r0, [r7, #12]
 80076b2:	f7ff fea6 	bl	8007402 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80076b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80076ba:	2107      	movs	r1, #7
 80076bc:	68f8      	ldr	r0, [r7, #12]
 80076be:	f000 f94b 	bl	8007958 <SDMMC_GetCmdResp1>
 80076c2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80076c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3728      	adds	r7, #40	; 0x28
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}

080076ce <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b088      	sub	sp, #32
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80076d6:	2300      	movs	r3, #0
 80076d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80076da:	2300      	movs	r3, #0
 80076dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80076de:	2300      	movs	r3, #0
 80076e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80076e2:	2300      	movs	r3, #0
 80076e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80076e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80076ec:	f107 0308 	add.w	r3, r7, #8
 80076f0:	4619      	mov	r1, r3
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f7ff fe85 	bl	8007402 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 fb65 	bl	8007dc8 <SDMMC_GetCmdError>
 80076fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007700:	69fb      	ldr	r3, [r7, #28]
}
 8007702:	4618      	mov	r0, r3
 8007704:	3720      	adds	r7, #32
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800770a:	b580      	push	{r7, lr}
 800770c:	b088      	sub	sp, #32
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007712:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007716:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007718:	2308      	movs	r3, #8
 800771a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800771c:	2340      	movs	r3, #64	; 0x40
 800771e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007720:	2300      	movs	r3, #0
 8007722:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007724:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007728:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800772a:	f107 0308 	add.w	r3, r7, #8
 800772e:	4619      	mov	r1, r3
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f7ff fe66 	bl	8007402 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 faf8 	bl	8007d2c <SDMMC_GetCmdResp7>
 800773c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800773e:	69fb      	ldr	r3, [r7, #28]
}
 8007740:	4618      	mov	r0, r3
 8007742:	3720      	adds	r7, #32
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b088      	sub	sp, #32
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007756:	2337      	movs	r3, #55	; 0x37
 8007758:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800775a:	2340      	movs	r3, #64	; 0x40
 800775c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800775e:	2300      	movs	r3, #0
 8007760:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007762:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007766:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007768:	f107 0308 	add.w	r3, r7, #8
 800776c:	4619      	mov	r1, r3
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f7ff fe47 	bl	8007402 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8007774:	f241 3288 	movw	r2, #5000	; 0x1388
 8007778:	2137      	movs	r1, #55	; 0x37
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 f8ec 	bl	8007958 <SDMMC_GetCmdResp1>
 8007780:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007782:	69fb      	ldr	r3, [r7, #28]
}
 8007784:	4618      	mov	r0, r3
 8007786:	3720      	adds	r7, #32
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b088      	sub	sp, #32
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800779c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80077a2:	2329      	movs	r3, #41	; 0x29
 80077a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80077a6:	2340      	movs	r3, #64	; 0x40
 80077a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80077aa:	2300      	movs	r3, #0
 80077ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80077ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80077b4:	f107 0308 	add.w	r3, r7, #8
 80077b8:	4619      	mov	r1, r3
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f7ff fe21 	bl	8007402 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f000 f9ff 	bl	8007bc4 <SDMMC_GetCmdResp3>
 80077c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80077c8:	69fb      	ldr	r3, [r7, #28]
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3720      	adds	r7, #32
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}

080077d2 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80077d2:	b580      	push	{r7, lr}
 80077d4:	b088      	sub	sp, #32
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
 80077da:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80077e0:	2306      	movs	r3, #6
 80077e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80077e4:	2340      	movs	r3, #64	; 0x40
 80077e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80077e8:	2300      	movs	r3, #0
 80077ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80077ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80077f2:	f107 0308 	add.w	r3, r7, #8
 80077f6:	4619      	mov	r1, r3
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f7ff fe02 	bl	8007402 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80077fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007802:	2106      	movs	r1, #6
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 f8a7 	bl	8007958 <SDMMC_GetCmdResp1>
 800780a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800780c:	69fb      	ldr	r3, [r7, #28]
}
 800780e:	4618      	mov	r0, r3
 8007810:	3720      	adds	r7, #32
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}

08007816 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8007816:	b580      	push	{r7, lr}
 8007818:	b088      	sub	sp, #32
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800781e:	2300      	movs	r3, #0
 8007820:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007822:	2333      	movs	r3, #51	; 0x33
 8007824:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007826:	2340      	movs	r3, #64	; 0x40
 8007828:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800782a:	2300      	movs	r3, #0
 800782c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800782e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007832:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007834:	f107 0308 	add.w	r3, r7, #8
 8007838:	4619      	mov	r1, r3
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f7ff fde1 	bl	8007402 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8007840:	f241 3288 	movw	r2, #5000	; 0x1388
 8007844:	2133      	movs	r1, #51	; 0x33
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 f886 	bl	8007958 <SDMMC_GetCmdResp1>
 800784c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800784e:	69fb      	ldr	r3, [r7, #28]
}
 8007850:	4618      	mov	r0, r3
 8007852:	3720      	adds	r7, #32
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b088      	sub	sp, #32
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007860:	2300      	movs	r3, #0
 8007862:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007864:	2302      	movs	r3, #2
 8007866:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007868:	23c0      	movs	r3, #192	; 0xc0
 800786a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800786c:	2300      	movs	r3, #0
 800786e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007870:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007874:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007876:	f107 0308 	add.w	r3, r7, #8
 800787a:	4619      	mov	r1, r3
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f7ff fdc0 	bl	8007402 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 f956 	bl	8007b34 <SDMMC_GetCmdResp2>
 8007888:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800788a:	69fb      	ldr	r3, [r7, #28]
}
 800788c:	4618      	mov	r0, r3
 800788e:	3720      	adds	r7, #32
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b088      	sub	sp, #32
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80078a2:	2309      	movs	r3, #9
 80078a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80078a6:	23c0      	movs	r3, #192	; 0xc0
 80078a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80078aa:	2300      	movs	r3, #0
 80078ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80078ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80078b4:	f107 0308 	add.w	r3, r7, #8
 80078b8:	4619      	mov	r1, r3
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f7ff fda1 	bl	8007402 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 f937 	bl	8007b34 <SDMMC_GetCmdResp2>
 80078c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80078c8:	69fb      	ldr	r3, [r7, #28]
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3720      	adds	r7, #32
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b088      	sub	sp, #32
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
 80078da:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80078dc:	2300      	movs	r3, #0
 80078de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80078e0:	2303      	movs	r3, #3
 80078e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80078e4:	2340      	movs	r3, #64	; 0x40
 80078e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80078e8:	2300      	movs	r3, #0
 80078ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80078ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80078f2:	f107 0308 	add.w	r3, r7, #8
 80078f6:	4619      	mov	r1, r3
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f7ff fd82 	bl	8007402 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80078fe:	683a      	ldr	r2, [r7, #0]
 8007900:	2103      	movs	r1, #3
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 f99c 	bl	8007c40 <SDMMC_GetCmdResp6>
 8007908:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800790a:	69fb      	ldr	r3, [r7, #28]
}
 800790c:	4618      	mov	r0, r3
 800790e:	3720      	adds	r7, #32
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b088      	sub	sp, #32
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007922:	230d      	movs	r3, #13
 8007924:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007926:	2340      	movs	r3, #64	; 0x40
 8007928:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800792a:	2300      	movs	r3, #0
 800792c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800792e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007932:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007934:	f107 0308 	add.w	r3, r7, #8
 8007938:	4619      	mov	r1, r3
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f7ff fd61 	bl	8007402 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8007940:	f241 3288 	movw	r2, #5000	; 0x1388
 8007944:	210d      	movs	r1, #13
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 f806 	bl	8007958 <SDMMC_GetCmdResp1>
 800794c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800794e:	69fb      	ldr	r3, [r7, #28]
}
 8007950:	4618      	mov	r0, r3
 8007952:	3720      	adds	r7, #32
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b088      	sub	sp, #32
 800795c:	af00      	add	r7, sp, #0
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	460b      	mov	r3, r1
 8007962:	607a      	str	r2, [r7, #4]
 8007964:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007966:	4b70      	ldr	r3, [pc, #448]	; (8007b28 <SDMMC_GetCmdResp1+0x1d0>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a70      	ldr	r2, [pc, #448]	; (8007b2c <SDMMC_GetCmdResp1+0x1d4>)
 800796c:	fba2 2303 	umull	r2, r3, r2, r3
 8007970:	0a5a      	lsrs	r2, r3, #9
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	fb02 f303 	mul.w	r3, r2, r3
 8007978:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	1e5a      	subs	r2, r3, #1
 800797e:	61fa      	str	r2, [r7, #28]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d102      	bne.n	800798a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007984:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007988:	e0c9      	b.n	8007b1e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800798e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007996:	2b00      	cmp	r3, #0
 8007998:	d0ef      	beq.n	800797a <SDMMC_GetCmdResp1+0x22>
 800799a:	69bb      	ldr	r3, [r7, #24]
 800799c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d1ea      	bne.n	800797a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079a8:	f003 0304 	and.w	r3, r3, #4
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d004      	beq.n	80079ba <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2204      	movs	r2, #4
 80079b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80079b6:	2304      	movs	r3, #4
 80079b8:	e0b1      	b.n	8007b1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079be:	f003 0301 	and.w	r3, r3, #1
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d004      	beq.n	80079d0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2201      	movs	r2, #1
 80079ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80079cc:	2301      	movs	r3, #1
 80079ce:	e0a6      	b.n	8007b1e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	22c5      	movs	r2, #197	; 0xc5
 80079d4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80079d6:	68f8      	ldr	r0, [r7, #12]
 80079d8:	f7ff fd3d 	bl	8007456 <SDIO_GetCommandResponse>
 80079dc:	4603      	mov	r3, r0
 80079de:	461a      	mov	r2, r3
 80079e0:	7afb      	ldrb	r3, [r7, #11]
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d001      	beq.n	80079ea <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80079e6:	2301      	movs	r3, #1
 80079e8:	e099      	b.n	8007b1e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80079ea:	2100      	movs	r1, #0
 80079ec:	68f8      	ldr	r0, [r7, #12]
 80079ee:	f7ff fd3f 	bl	8007470 <SDIO_GetResponse>
 80079f2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80079f4:	697a      	ldr	r2, [r7, #20]
 80079f6:	4b4e      	ldr	r3, [pc, #312]	; (8007b30 <SDMMC_GetCmdResp1+0x1d8>)
 80079f8:	4013      	ands	r3, r2
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d101      	bne.n	8007a02 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80079fe:	2300      	movs	r3, #0
 8007a00:	e08d      	b.n	8007b1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	da02      	bge.n	8007a0e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007a08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007a0c:	e087      	b.n	8007b1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d001      	beq.n	8007a1c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007a18:	2340      	movs	r3, #64	; 0x40
 8007a1a:	e080      	b.n	8007b1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d001      	beq.n	8007a2a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007a26:	2380      	movs	r3, #128	; 0x80
 8007a28:	e079      	b.n	8007b1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d002      	beq.n	8007a3a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007a34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007a38:	e071      	b.n	8007b1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d002      	beq.n	8007a4a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007a44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a48:	e069      	b.n	8007b1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d002      	beq.n	8007a5a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007a54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a58:	e061      	b.n	8007b1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d002      	beq.n	8007a6a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007a64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007a68:	e059      	b.n	8007b1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d002      	beq.n	8007a7a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007a78:	e051      	b.n	8007b1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d002      	beq.n	8007a8a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007a84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007a88:	e049      	b.n	8007b1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d002      	beq.n	8007a9a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007a94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007a98:	e041      	b.n	8007b1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d002      	beq.n	8007aaa <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007aa4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007aa8:	e039      	b.n	8007b1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d002      	beq.n	8007aba <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007ab4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007ab8:	e031      	b.n	8007b1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d002      	beq.n	8007aca <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007ac4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007ac8:	e029      	b.n	8007b1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d002      	beq.n	8007ada <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007ad4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007ad8:	e021      	b.n	8007b1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d002      	beq.n	8007aea <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007ae4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007ae8:	e019      	b.n	8007b1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d002      	beq.n	8007afa <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007af4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007af8:	e011      	b.n	8007b1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d002      	beq.n	8007b0a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007b04:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007b08:	e009      	b.n	8007b1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	f003 0308 	and.w	r3, r3, #8
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d002      	beq.n	8007b1a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007b14:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007b18:	e001      	b.n	8007b1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007b1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3720      	adds	r7, #32
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	bf00      	nop
 8007b28:	20000004 	.word	0x20000004
 8007b2c:	10624dd3 	.word	0x10624dd3
 8007b30:	fdffe008 	.word	0xfdffe008

08007b34 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b085      	sub	sp, #20
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007b3c:	4b1f      	ldr	r3, [pc, #124]	; (8007bbc <SDMMC_GetCmdResp2+0x88>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a1f      	ldr	r2, [pc, #124]	; (8007bc0 <SDMMC_GetCmdResp2+0x8c>)
 8007b42:	fba2 2303 	umull	r2, r3, r2, r3
 8007b46:	0a5b      	lsrs	r3, r3, #9
 8007b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b4c:	fb02 f303 	mul.w	r3, r2, r3
 8007b50:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	1e5a      	subs	r2, r3, #1
 8007b56:	60fa      	str	r2, [r7, #12]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d102      	bne.n	8007b62 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007b5c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007b60:	e026      	b.n	8007bb0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b66:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d0ef      	beq.n	8007b52 <SDMMC_GetCmdResp2+0x1e>
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d1ea      	bne.n	8007b52 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b80:	f003 0304 	and.w	r3, r3, #4
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d004      	beq.n	8007b92 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2204      	movs	r2, #4
 8007b8c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007b8e:	2304      	movs	r3, #4
 8007b90:	e00e      	b.n	8007bb0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b96:	f003 0301 	and.w	r3, r3, #1
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d004      	beq.n	8007ba8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	e003      	b.n	8007bb0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	22c5      	movs	r2, #197	; 0xc5
 8007bac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007bae:	2300      	movs	r3, #0
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3714      	adds	r7, #20
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr
 8007bbc:	20000004 	.word	0x20000004
 8007bc0:	10624dd3 	.word	0x10624dd3

08007bc4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b085      	sub	sp, #20
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007bcc:	4b1a      	ldr	r3, [pc, #104]	; (8007c38 <SDMMC_GetCmdResp3+0x74>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a1a      	ldr	r2, [pc, #104]	; (8007c3c <SDMMC_GetCmdResp3+0x78>)
 8007bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8007bd6:	0a5b      	lsrs	r3, r3, #9
 8007bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bdc:	fb02 f303 	mul.w	r3, r2, r3
 8007be0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	1e5a      	subs	r2, r3, #1
 8007be6:	60fa      	str	r2, [r7, #12]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d102      	bne.n	8007bf2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007bec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007bf0:	e01b      	b.n	8007c2a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bf6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d0ef      	beq.n	8007be2 <SDMMC_GetCmdResp3+0x1e>
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d1ea      	bne.n	8007be2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c10:	f003 0304 	and.w	r3, r3, #4
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d004      	beq.n	8007c22 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2204      	movs	r2, #4
 8007c1c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007c1e:	2304      	movs	r3, #4
 8007c20:	e003      	b.n	8007c2a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	22c5      	movs	r2, #197	; 0xc5
 8007c26:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3714      	adds	r7, #20
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr
 8007c36:	bf00      	nop
 8007c38:	20000004 	.word	0x20000004
 8007c3c:	10624dd3 	.word	0x10624dd3

08007c40 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b088      	sub	sp, #32
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	60f8      	str	r0, [r7, #12]
 8007c48:	460b      	mov	r3, r1
 8007c4a:	607a      	str	r2, [r7, #4]
 8007c4c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007c4e:	4b35      	ldr	r3, [pc, #212]	; (8007d24 <SDMMC_GetCmdResp6+0xe4>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a35      	ldr	r2, [pc, #212]	; (8007d28 <SDMMC_GetCmdResp6+0xe8>)
 8007c54:	fba2 2303 	umull	r2, r3, r2, r3
 8007c58:	0a5b      	lsrs	r3, r3, #9
 8007c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c5e:	fb02 f303 	mul.w	r3, r2, r3
 8007c62:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	1e5a      	subs	r2, r3, #1
 8007c68:	61fa      	str	r2, [r7, #28]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d102      	bne.n	8007c74 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007c6e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007c72:	e052      	b.n	8007d1a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c78:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007c7a:	69bb      	ldr	r3, [r7, #24]
 8007c7c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d0ef      	beq.n	8007c64 <SDMMC_GetCmdResp6+0x24>
 8007c84:	69bb      	ldr	r3, [r7, #24]
 8007c86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d1ea      	bne.n	8007c64 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c92:	f003 0304 	and.w	r3, r3, #4
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d004      	beq.n	8007ca4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2204      	movs	r2, #4
 8007c9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007ca0:	2304      	movs	r3, #4
 8007ca2:	e03a      	b.n	8007d1a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ca8:	f003 0301 	and.w	r3, r3, #1
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d004      	beq.n	8007cba <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e02f      	b.n	8007d1a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007cba:	68f8      	ldr	r0, [r7, #12]
 8007cbc:	f7ff fbcb 	bl	8007456 <SDIO_GetCommandResponse>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	7afb      	ldrb	r3, [r7, #11]
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d001      	beq.n	8007cce <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e025      	b.n	8007d1a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	22c5      	movs	r2, #197	; 0xc5
 8007cd2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007cd4:	2100      	movs	r1, #0
 8007cd6:	68f8      	ldr	r0, [r7, #12]
 8007cd8:	f7ff fbca 	bl	8007470 <SDIO_GetResponse>
 8007cdc:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d106      	bne.n	8007cf6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	0c1b      	lsrs	r3, r3, #16
 8007cec:	b29a      	uxth	r2, r3
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	e011      	b.n	8007d1a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d002      	beq.n	8007d06 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007d00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007d04:	e009      	b.n	8007d1a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d002      	beq.n	8007d16 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007d10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007d14:	e001      	b.n	8007d1a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007d16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3720      	adds	r7, #32
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop
 8007d24:	20000004 	.word	0x20000004
 8007d28:	10624dd3 	.word	0x10624dd3

08007d2c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b085      	sub	sp, #20
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007d34:	4b22      	ldr	r3, [pc, #136]	; (8007dc0 <SDMMC_GetCmdResp7+0x94>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a22      	ldr	r2, [pc, #136]	; (8007dc4 <SDMMC_GetCmdResp7+0x98>)
 8007d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d3e:	0a5b      	lsrs	r3, r3, #9
 8007d40:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d44:	fb02 f303 	mul.w	r3, r2, r3
 8007d48:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	1e5a      	subs	r2, r3, #1
 8007d4e:	60fa      	str	r2, [r7, #12]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d102      	bne.n	8007d5a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007d54:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007d58:	e02c      	b.n	8007db4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d5e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d0ef      	beq.n	8007d4a <SDMMC_GetCmdResp7+0x1e>
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d1ea      	bne.n	8007d4a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d78:	f003 0304 	and.w	r3, r3, #4
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d004      	beq.n	8007d8a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2204      	movs	r2, #4
 8007d84:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007d86:	2304      	movs	r3, #4
 8007d88:	e014      	b.n	8007db4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d8e:	f003 0301 	and.w	r3, r3, #1
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d004      	beq.n	8007da0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2201      	movs	r2, #1
 8007d9a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	e009      	b.n	8007db4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d002      	beq.n	8007db2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2240      	movs	r2, #64	; 0x40
 8007db0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007db2:	2300      	movs	r3, #0
  
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3714      	adds	r7, #20
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr
 8007dc0:	20000004 	.word	0x20000004
 8007dc4:	10624dd3 	.word	0x10624dd3

08007dc8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b085      	sub	sp, #20
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007dd0:	4b11      	ldr	r3, [pc, #68]	; (8007e18 <SDMMC_GetCmdError+0x50>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a11      	ldr	r2, [pc, #68]	; (8007e1c <SDMMC_GetCmdError+0x54>)
 8007dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8007dda:	0a5b      	lsrs	r3, r3, #9
 8007ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007de0:	fb02 f303 	mul.w	r3, r2, r3
 8007de4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	1e5a      	subs	r2, r3, #1
 8007dea:	60fa      	str	r2, [r7, #12]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d102      	bne.n	8007df6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007df0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007df4:	e009      	b.n	8007e0a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d0f1      	beq.n	8007de6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	22c5      	movs	r2, #197	; 0xc5
 8007e06:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007e08:	2300      	movs	r3, #0
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3714      	adds	r7, #20
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr
 8007e16:	bf00      	nop
 8007e18:	20000004 	.word	0x20000004
 8007e1c:	10624dd3 	.word	0x10624dd3

08007e20 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007e24:	4904      	ldr	r1, [pc, #16]	; (8007e38 <MX_FATFS_Init+0x18>)
 8007e26:	4805      	ldr	r0, [pc, #20]	; (8007e3c <MX_FATFS_Init+0x1c>)
 8007e28:	f003 f996 	bl	800b158 <FATFS_LinkDriver>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	461a      	mov	r2, r3
 8007e30:	4b03      	ldr	r3, [pc, #12]	; (8007e40 <MX_FATFS_Init+0x20>)
 8007e32:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007e34:	bf00      	nop
 8007e36:	bd80      	pop	{r7, pc}
 8007e38:	20000af0 	.word	0x20000af0
 8007e3c:	0800fa60 	.word	0x0800fa60
 8007e40:	20000aec 	.word	0x20000aec

08007e44 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007e44:	b480      	push	{r7}
 8007e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007e48:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b082      	sub	sp, #8
 8007e58:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007e5e:	f000 f896 	bl	8007f8e <BSP_SD_IsDetected>
 8007e62:	4603      	mov	r3, r0
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d001      	beq.n	8007e6c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	e012      	b.n	8007e92 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8007e6c:	480b      	ldr	r0, [pc, #44]	; (8007e9c <BSP_SD_Init+0x48>)
 8007e6e:	f7fc fcef 	bl	8004850 <HAL_SD_Init>
 8007e72:	4603      	mov	r3, r0
 8007e74:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8007e76:	79fb      	ldrb	r3, [r7, #7]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d109      	bne.n	8007e90 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8007e7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007e80:	4806      	ldr	r0, [pc, #24]	; (8007e9c <BSP_SD_Init+0x48>)
 8007e82:	f7fd faa7 	bl	80053d4 <HAL_SD_ConfigWideBusOperation>
 8007e86:	4603      	mov	r3, r0
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d001      	beq.n	8007e90 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8007e90:	79fb      	ldrb	r3, [r7, #7]
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3708      	adds	r7, #8
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
 8007e9a:	bf00      	nop
 8007e9c:	20000198 	.word	0x20000198

08007ea0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b086      	sub	sp, #24
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	60f8      	str	r0, [r7, #12]
 8007ea8:	60b9      	str	r1, [r7, #8]
 8007eaa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007eac:	2300      	movs	r3, #0
 8007eae:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	68ba      	ldr	r2, [r7, #8]
 8007eb4:	68f9      	ldr	r1, [r7, #12]
 8007eb6:	4806      	ldr	r0, [pc, #24]	; (8007ed0 <BSP_SD_ReadBlocks_DMA+0x30>)
 8007eb8:	f7fc fd7a 	bl	80049b0 <HAL_SD_ReadBlocks_DMA>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d001      	beq.n	8007ec6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3718      	adds	r7, #24
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}
 8007ed0:	20000198 	.word	0x20000198

08007ed4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b086      	sub	sp, #24
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	60b9      	str	r1, [r7, #8]
 8007ede:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	68ba      	ldr	r2, [r7, #8]
 8007ee8:	68f9      	ldr	r1, [r7, #12]
 8007eea:	4806      	ldr	r0, [pc, #24]	; (8007f04 <BSP_SD_WriteBlocks_DMA+0x30>)
 8007eec:	f7fc fe40 	bl	8004b70 <HAL_SD_WriteBlocks_DMA>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d001      	beq.n	8007efa <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007efa:	7dfb      	ldrb	r3, [r7, #23]
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3718      	adds	r7, #24
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}
 8007f04:	20000198 	.word	0x20000198

08007f08 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007f0c:	4805      	ldr	r0, [pc, #20]	; (8007f24 <BSP_SD_GetCardState+0x1c>)
 8007f0e:	f7fd fafb 	bl	8005508 <HAL_SD_GetCardState>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b04      	cmp	r3, #4
 8007f16:	bf14      	ite	ne
 8007f18:	2301      	movne	r3, #1
 8007f1a:	2300      	moveq	r3, #0
 8007f1c:	b2db      	uxtb	r3, r3
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	20000198 	.word	0x20000198

08007f28 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b082      	sub	sp, #8
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8007f30:	6879      	ldr	r1, [r7, #4]
 8007f32:	4803      	ldr	r0, [pc, #12]	; (8007f40 <BSP_SD_GetCardInfo+0x18>)
 8007f34:	f7fd fa22 	bl	800537c <HAL_SD_GetCardInfo>
}
 8007f38:	bf00      	nop
 8007f3a:	3708      	adds	r7, #8
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}
 8007f40:	20000198 	.word	0x20000198

08007f44 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b082      	sub	sp, #8
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8007f4c:	f000 f818 	bl	8007f80 <BSP_SD_AbortCallback>
}
 8007f50:	bf00      	nop
 8007f52:	3708      	adds	r7, #8
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b082      	sub	sp, #8
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8007f60:	f000 f9b4 	bl	80082cc <BSP_SD_WriteCpltCallback>
}
 8007f64:	bf00      	nop
 8007f66:	3708      	adds	r7, #8
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8007f74:	f000 f9bc 	bl	80082f0 <BSP_SD_ReadCpltCallback>
}
 8007f78:	bf00      	nop
 8007f7a:	3708      	adds	r7, #8
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8007f80:	b480      	push	{r7}
 8007f82:	af00      	add	r7, sp, #0

}
 8007f84:	bf00      	nop
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr

08007f8e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8007f8e:	b580      	push	{r7, lr}
 8007f90:	b082      	sub	sp, #8
 8007f92:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007f94:	2301      	movs	r3, #1
 8007f96:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8007f98:	f000 f80c 	bl	8007fb4 <BSP_PlatformIsDetected>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d101      	bne.n	8007fa6 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8007fa6:	79fb      	ldrb	r3, [r7, #7]
 8007fa8:	b2db      	uxtb	r3, r3
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3708      	adds	r7, #8
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
	...

08007fb4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8007fbe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007fc2:	4806      	ldr	r0, [pc, #24]	; (8007fdc <BSP_PlatformIsDetected+0x28>)
 8007fc4:	f7fa fae2 	bl	800258c <HAL_GPIO_ReadPin>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d001      	beq.n	8007fd2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8007fd2:	79fb      	ldrb	r3, [r7, #7]
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3708      	adds	r7, #8
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}
 8007fdc:	40020400 	.word	0x40020400

08007fe0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8007fe8:	f003 f9bc 	bl	800b364 <osKernelGetTickCount>
 8007fec:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 8007fee:	e006      	b.n	8007ffe <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007ff0:	f7ff ff8a 	bl	8007f08 <BSP_SD_GetCardState>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d101      	bne.n	8007ffe <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	e009      	b.n	8008012 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 8007ffe:	f003 f9b1 	bl	800b364 <osKernelGetTickCount>
 8008002:	4602      	mov	r2, r0
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	1ad3      	subs	r3, r2, r3
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	429a      	cmp	r2, r3
 800800c:	d8f0      	bhi.n	8007ff0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800800e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008012:	4618      	mov	r0, r3
 8008014:	3710      	adds	r7, #16
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
	...

0800801c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b082      	sub	sp, #8
 8008020:	af00      	add	r7, sp, #0
 8008022:	4603      	mov	r3, r0
 8008024:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8008026:	4b0b      	ldr	r3, [pc, #44]	; (8008054 <SD_CheckStatus+0x38>)
 8008028:	2201      	movs	r2, #1
 800802a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800802c:	f7ff ff6c 	bl	8007f08 <BSP_SD_GetCardState>
 8008030:	4603      	mov	r3, r0
 8008032:	2b00      	cmp	r3, #0
 8008034:	d107      	bne.n	8008046 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8008036:	4b07      	ldr	r3, [pc, #28]	; (8008054 <SD_CheckStatus+0x38>)
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	b2db      	uxtb	r3, r3
 800803c:	f023 0301 	bic.w	r3, r3, #1
 8008040:	b2da      	uxtb	r2, r3
 8008042:	4b04      	ldr	r3, [pc, #16]	; (8008054 <SD_CheckStatus+0x38>)
 8008044:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8008046:	4b03      	ldr	r3, [pc, #12]	; (8008054 <SD_CheckStatus+0x38>)
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	b2db      	uxtb	r3, r3
}
 800804c:	4618      	mov	r0, r3
 800804e:	3708      	adds	r7, #8
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}
 8008054:	2000000d 	.word	0x2000000d

08008058 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
 800805e:	4603      	mov	r3, r0
 8008060:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8008062:	4b1c      	ldr	r3, [pc, #112]	; (80080d4 <SD_initialize+0x7c>)
 8008064:	2201      	movs	r2, #1
 8008066:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8008068:	f003 f934 	bl	800b2d4 <osKernelGetState>
 800806c:	4603      	mov	r3, r0
 800806e:	2b02      	cmp	r3, #2
 8008070:	d129      	bne.n	80080c6 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8008072:	f7ff feef 	bl	8007e54 <BSP_SD_Init>
 8008076:	4603      	mov	r3, r0
 8008078:	2b00      	cmp	r3, #0
 800807a:	d107      	bne.n	800808c <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800807c:	79fb      	ldrb	r3, [r7, #7]
 800807e:	4618      	mov	r0, r3
 8008080:	f7ff ffcc 	bl	800801c <SD_CheckStatus>
 8008084:	4603      	mov	r3, r0
 8008086:	461a      	mov	r2, r3
 8008088:	4b12      	ldr	r3, [pc, #72]	; (80080d4 <SD_initialize+0x7c>)
 800808a:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800808c:	4b11      	ldr	r3, [pc, #68]	; (80080d4 <SD_initialize+0x7c>)
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	b2db      	uxtb	r3, r3
 8008092:	2b01      	cmp	r3, #1
 8008094:	d017      	beq.n	80080c6 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 8008096:	4b10      	ldr	r3, [pc, #64]	; (80080d8 <SD_initialize+0x80>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d107      	bne.n	80080ae <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800809e:	2200      	movs	r2, #0
 80080a0:	2102      	movs	r1, #2
 80080a2:	200a      	movs	r0, #10
 80080a4:	f003 fba6 	bl	800b7f4 <osMessageQueueNew>
 80080a8:	4603      	mov	r3, r0
 80080aa:	4a0b      	ldr	r2, [pc, #44]	; (80080d8 <SD_initialize+0x80>)
 80080ac:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 80080ae:	4b0a      	ldr	r3, [pc, #40]	; (80080d8 <SD_initialize+0x80>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d107      	bne.n	80080c6 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 80080b6:	4b07      	ldr	r3, [pc, #28]	; (80080d4 <SD_initialize+0x7c>)
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	f043 0301 	orr.w	r3, r3, #1
 80080c0:	b2da      	uxtb	r2, r3
 80080c2:	4b04      	ldr	r3, [pc, #16]	; (80080d4 <SD_initialize+0x7c>)
 80080c4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 80080c6:	4b03      	ldr	r3, [pc, #12]	; (80080d4 <SD_initialize+0x7c>)
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	b2db      	uxtb	r3, r3
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3708      	adds	r7, #8
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}
 80080d4:	2000000d 	.word	0x2000000d
 80080d8:	20000d28 	.word	0x20000d28

080080dc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	4603      	mov	r3, r0
 80080e4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80080e6:	79fb      	ldrb	r3, [r7, #7]
 80080e8:	4618      	mov	r0, r3
 80080ea:	f7ff ff97 	bl	800801c <SD_CheckStatus>
 80080ee:	4603      	mov	r3, r0
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3708      	adds	r7, #8
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}

080080f8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b088      	sub	sp, #32
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	60b9      	str	r1, [r7, #8]
 8008100:	607a      	str	r2, [r7, #4]
 8008102:	603b      	str	r3, [r7, #0]
 8008104:	4603      	mov	r3, r0
 8008106:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800810c:	f247 5030 	movw	r0, #30000	; 0x7530
 8008110:	f7ff ff66 	bl	8007fe0 <SD_CheckStatusWithTimeout>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	da01      	bge.n	800811e <SD_read+0x26>
  {
    return res;
 800811a:	7ffb      	ldrb	r3, [r7, #31]
 800811c:	e02f      	b.n	800817e <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800811e:	683a      	ldr	r2, [r7, #0]
 8008120:	6879      	ldr	r1, [r7, #4]
 8008122:	68b8      	ldr	r0, [r7, #8]
 8008124:	f7ff febc 	bl	8007ea0 <BSP_SD_ReadBlocks_DMA>
 8008128:	4603      	mov	r3, r0
 800812a:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800812c:	7fbb      	ldrb	r3, [r7, #30]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d124      	bne.n	800817c <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8008132:	4b15      	ldr	r3, [pc, #84]	; (8008188 <SD_read+0x90>)
 8008134:	6818      	ldr	r0, [r3, #0]
 8008136:	f107 0112 	add.w	r1, r7, #18
 800813a:	f247 5330 	movw	r3, #30000	; 0x7530
 800813e:	2200      	movs	r2, #0
 8008140:	f003 fc2c 	bl	800b99c <osMessageQueueGet>
 8008144:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 8008146:	69bb      	ldr	r3, [r7, #24]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d117      	bne.n	800817c <SD_read+0x84>
 800814c:	8a7b      	ldrh	r3, [r7, #18]
 800814e:	2b01      	cmp	r3, #1
 8008150:	d114      	bne.n	800817c <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 8008152:	f003 f907 	bl	800b364 <osKernelGetTickCount>
 8008156:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8008158:	e007      	b.n	800816a <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800815a:	f7ff fed5 	bl	8007f08 <BSP_SD_GetCardState>
 800815e:	4603      	mov	r3, r0
 8008160:	2b00      	cmp	r3, #0
 8008162:	d102      	bne.n	800816a <SD_read+0x72>
              {
                res = RES_OK;
 8008164:	2300      	movs	r3, #0
 8008166:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8008168:	e008      	b.n	800817c <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800816a:	f003 f8fb 	bl	800b364 <osKernelGetTickCount>
 800816e:	4602      	mov	r2, r0
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	1ad3      	subs	r3, r2, r3
 8008174:	f247 522f 	movw	r2, #29999	; 0x752f
 8008178:	4293      	cmp	r3, r2
 800817a:	d9ee      	bls.n	800815a <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800817c:	7ffb      	ldrb	r3, [r7, #31]
}
 800817e:	4618      	mov	r0, r3
 8008180:	3720      	adds	r7, #32
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	20000d28 	.word	0x20000d28

0800818c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b088      	sub	sp, #32
 8008190:	af00      	add	r7, sp, #0
 8008192:	60b9      	str	r1, [r7, #8]
 8008194:	607a      	str	r2, [r7, #4]
 8008196:	603b      	str	r3, [r7, #0]
 8008198:	4603      	mov	r3, r0
 800819a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800819c:	2301      	movs	r3, #1
 800819e:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80081a0:	f247 5030 	movw	r0, #30000	; 0x7530
 80081a4:	f7ff ff1c 	bl	8007fe0 <SD_CheckStatusWithTimeout>
 80081a8:	4603      	mov	r3, r0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	da01      	bge.n	80081b2 <SD_write+0x26>
  {
    return res;
 80081ae:	7ffb      	ldrb	r3, [r7, #31]
 80081b0:	e02d      	b.n	800820e <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80081b2:	683a      	ldr	r2, [r7, #0]
 80081b4:	6879      	ldr	r1, [r7, #4]
 80081b6:	68b8      	ldr	r0, [r7, #8]
 80081b8:	f7ff fe8c 	bl	8007ed4 <BSP_SD_WriteBlocks_DMA>
 80081bc:	4603      	mov	r3, r0
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d124      	bne.n	800820c <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 80081c2:	4b15      	ldr	r3, [pc, #84]	; (8008218 <SD_write+0x8c>)
 80081c4:	6818      	ldr	r0, [r3, #0]
 80081c6:	f107 0112 	add.w	r1, r7, #18
 80081ca:	f247 5330 	movw	r3, #30000	; 0x7530
 80081ce:	2200      	movs	r2, #0
 80081d0:	f003 fbe4 	bl	800b99c <osMessageQueueGet>
 80081d4:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 80081d6:	69bb      	ldr	r3, [r7, #24]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d117      	bne.n	800820c <SD_write+0x80>
 80081dc:	8a7b      	ldrh	r3, [r7, #18]
 80081de:	2b02      	cmp	r3, #2
 80081e0:	d114      	bne.n	800820c <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 80081e2:	f003 f8bf 	bl	800b364 <osKernelGetTickCount>
 80081e6:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80081e8:	e007      	b.n	80081fa <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80081ea:	f7ff fe8d 	bl	8007f08 <BSP_SD_GetCardState>
 80081ee:	4603      	mov	r3, r0
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d102      	bne.n	80081fa <SD_write+0x6e>
          {
            res = RES_OK;
 80081f4:	2300      	movs	r3, #0
 80081f6:	77fb      	strb	r3, [r7, #31]
            break;
 80081f8:	e008      	b.n	800820c <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80081fa:	f003 f8b3 	bl	800b364 <osKernelGetTickCount>
 80081fe:	4602      	mov	r2, r0
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	1ad3      	subs	r3, r2, r3
 8008204:	f247 522f 	movw	r2, #29999	; 0x752f
 8008208:	4293      	cmp	r3, r2
 800820a:	d9ee      	bls.n	80081ea <SD_write+0x5e>
    }

  }
#endif

  return res;
 800820c:	7ffb      	ldrb	r3, [r7, #31]
}
 800820e:	4618      	mov	r0, r3
 8008210:	3720      	adds	r7, #32
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
 8008216:	bf00      	nop
 8008218:	20000d28 	.word	0x20000d28

0800821c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b08c      	sub	sp, #48	; 0x30
 8008220:	af00      	add	r7, sp, #0
 8008222:	4603      	mov	r3, r0
 8008224:	603a      	str	r2, [r7, #0]
 8008226:	71fb      	strb	r3, [r7, #7]
 8008228:	460b      	mov	r3, r1
 800822a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800822c:	2301      	movs	r3, #1
 800822e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008232:	4b25      	ldr	r3, [pc, #148]	; (80082c8 <SD_ioctl+0xac>)
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	b2db      	uxtb	r3, r3
 8008238:	f003 0301 	and.w	r3, r3, #1
 800823c:	2b00      	cmp	r3, #0
 800823e:	d001      	beq.n	8008244 <SD_ioctl+0x28>
 8008240:	2303      	movs	r3, #3
 8008242:	e03c      	b.n	80082be <SD_ioctl+0xa2>

  switch (cmd)
 8008244:	79bb      	ldrb	r3, [r7, #6]
 8008246:	2b03      	cmp	r3, #3
 8008248:	d834      	bhi.n	80082b4 <SD_ioctl+0x98>
 800824a:	a201      	add	r2, pc, #4	; (adr r2, 8008250 <SD_ioctl+0x34>)
 800824c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008250:	08008261 	.word	0x08008261
 8008254:	08008269 	.word	0x08008269
 8008258:	08008281 	.word	0x08008281
 800825c:	0800829b 	.word	0x0800829b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008260:	2300      	movs	r3, #0
 8008262:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008266:	e028      	b.n	80082ba <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008268:	f107 030c 	add.w	r3, r7, #12
 800826c:	4618      	mov	r0, r3
 800826e:	f7ff fe5b 	bl	8007f28 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8008272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008278:	2300      	movs	r3, #0
 800827a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800827e:	e01c      	b.n	80082ba <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008280:	f107 030c 	add.w	r3, r7, #12
 8008284:	4618      	mov	r0, r3
 8008286:	f7ff fe4f 	bl	8007f28 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800828a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800828c:	b29a      	uxth	r2, r3
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8008292:	2300      	movs	r3, #0
 8008294:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008298:	e00f      	b.n	80082ba <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800829a:	f107 030c 	add.w	r3, r7, #12
 800829e:	4618      	mov	r0, r3
 80082a0:	f7ff fe42 	bl	8007f28 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80082a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a6:	0a5a      	lsrs	r2, r3, #9
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80082ac:	2300      	movs	r3, #0
 80082ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80082b2:	e002      	b.n	80082ba <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80082b4:	2304      	movs	r3, #4
 80082b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80082ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3730      	adds	r7, #48	; 0x30
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	bf00      	nop
 80082c8:	2000000d 	.word	0x2000000d

080082cc <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 80082d2:	2302      	movs	r3, #2
 80082d4:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 80082d6:	4b05      	ldr	r3, [pc, #20]	; (80082ec <BSP_SD_WriteCpltCallback+0x20>)
 80082d8:	6818      	ldr	r0, [r3, #0]
 80082da:	1db9      	adds	r1, r7, #6
 80082dc:	2300      	movs	r3, #0
 80082de:	2200      	movs	r2, #0
 80082e0:	f003 fafc 	bl	800b8dc <osMessageQueuePut>
#endif
}
 80082e4:	bf00      	nop
 80082e6:	3708      	adds	r7, #8
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}
 80082ec:	20000d28 	.word	0x20000d28

080082f0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b082      	sub	sp, #8
 80082f4:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 80082f6:	2301      	movs	r3, #1
 80082f8:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 80082fa:	4b05      	ldr	r3, [pc, #20]	; (8008310 <BSP_SD_ReadCpltCallback+0x20>)
 80082fc:	6818      	ldr	r0, [r3, #0]
 80082fe:	1db9      	adds	r1, r7, #6
 8008300:	2300      	movs	r3, #0
 8008302:	2200      	movs	r2, #0
 8008304:	f003 faea 	bl	800b8dc <osMessageQueuePut>
#endif
}
 8008308:	bf00      	nop
 800830a:	3708      	adds	r7, #8
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}
 8008310:	20000d28 	.word	0x20000d28

08008314 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b084      	sub	sp, #16
 8008318:	af00      	add	r7, sp, #0
 800831a:	4603      	mov	r3, r0
 800831c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800831e:	79fb      	ldrb	r3, [r7, #7]
 8008320:	4a08      	ldr	r2, [pc, #32]	; (8008344 <disk_status+0x30>)
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	4413      	add	r3, r2
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	79fa      	ldrb	r2, [r7, #7]
 800832c:	4905      	ldr	r1, [pc, #20]	; (8008344 <disk_status+0x30>)
 800832e:	440a      	add	r2, r1
 8008330:	7a12      	ldrb	r2, [r2, #8]
 8008332:	4610      	mov	r0, r2
 8008334:	4798      	blx	r3
 8008336:	4603      	mov	r3, r0
 8008338:	73fb      	strb	r3, [r7, #15]
  return stat;
 800833a:	7bfb      	ldrb	r3, [r7, #15]
}
 800833c:	4618      	mov	r0, r3
 800833e:	3710      	adds	r7, #16
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}
 8008344:	20000d54 	.word	0x20000d54

08008348 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b084      	sub	sp, #16
 800834c:	af00      	add	r7, sp, #0
 800834e:	4603      	mov	r3, r0
 8008350:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008352:	2300      	movs	r3, #0
 8008354:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008356:	79fb      	ldrb	r3, [r7, #7]
 8008358:	4a0d      	ldr	r2, [pc, #52]	; (8008390 <disk_initialize+0x48>)
 800835a:	5cd3      	ldrb	r3, [r2, r3]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d111      	bne.n	8008384 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008360:	79fb      	ldrb	r3, [r7, #7]
 8008362:	4a0b      	ldr	r2, [pc, #44]	; (8008390 <disk_initialize+0x48>)
 8008364:	2101      	movs	r1, #1
 8008366:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008368:	79fb      	ldrb	r3, [r7, #7]
 800836a:	4a09      	ldr	r2, [pc, #36]	; (8008390 <disk_initialize+0x48>)
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	4413      	add	r3, r2
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	79fa      	ldrb	r2, [r7, #7]
 8008376:	4906      	ldr	r1, [pc, #24]	; (8008390 <disk_initialize+0x48>)
 8008378:	440a      	add	r2, r1
 800837a:	7a12      	ldrb	r2, [r2, #8]
 800837c:	4610      	mov	r0, r2
 800837e:	4798      	blx	r3
 8008380:	4603      	mov	r3, r0
 8008382:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008384:	7bfb      	ldrb	r3, [r7, #15]
}
 8008386:	4618      	mov	r0, r3
 8008388:	3710      	adds	r7, #16
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop
 8008390:	20000d54 	.word	0x20000d54

08008394 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008394:	b590      	push	{r4, r7, lr}
 8008396:	b087      	sub	sp, #28
 8008398:	af00      	add	r7, sp, #0
 800839a:	60b9      	str	r1, [r7, #8]
 800839c:	607a      	str	r2, [r7, #4]
 800839e:	603b      	str	r3, [r7, #0]
 80083a0:	4603      	mov	r3, r0
 80083a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80083a4:	7bfb      	ldrb	r3, [r7, #15]
 80083a6:	4a0a      	ldr	r2, [pc, #40]	; (80083d0 <disk_read+0x3c>)
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	4413      	add	r3, r2
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	689c      	ldr	r4, [r3, #8]
 80083b0:	7bfb      	ldrb	r3, [r7, #15]
 80083b2:	4a07      	ldr	r2, [pc, #28]	; (80083d0 <disk_read+0x3c>)
 80083b4:	4413      	add	r3, r2
 80083b6:	7a18      	ldrb	r0, [r3, #8]
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	68b9      	ldr	r1, [r7, #8]
 80083be:	47a0      	blx	r4
 80083c0:	4603      	mov	r3, r0
 80083c2:	75fb      	strb	r3, [r7, #23]
  return res;
 80083c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	371c      	adds	r7, #28
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd90      	pop	{r4, r7, pc}
 80083ce:	bf00      	nop
 80083d0:	20000d54 	.word	0x20000d54

080083d4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80083d4:	b590      	push	{r4, r7, lr}
 80083d6:	b087      	sub	sp, #28
 80083d8:	af00      	add	r7, sp, #0
 80083da:	60b9      	str	r1, [r7, #8]
 80083dc:	607a      	str	r2, [r7, #4]
 80083de:	603b      	str	r3, [r7, #0]
 80083e0:	4603      	mov	r3, r0
 80083e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80083e4:	7bfb      	ldrb	r3, [r7, #15]
 80083e6:	4a0a      	ldr	r2, [pc, #40]	; (8008410 <disk_write+0x3c>)
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	4413      	add	r3, r2
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	68dc      	ldr	r4, [r3, #12]
 80083f0:	7bfb      	ldrb	r3, [r7, #15]
 80083f2:	4a07      	ldr	r2, [pc, #28]	; (8008410 <disk_write+0x3c>)
 80083f4:	4413      	add	r3, r2
 80083f6:	7a18      	ldrb	r0, [r3, #8]
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	68b9      	ldr	r1, [r7, #8]
 80083fe:	47a0      	blx	r4
 8008400:	4603      	mov	r3, r0
 8008402:	75fb      	strb	r3, [r7, #23]
  return res;
 8008404:	7dfb      	ldrb	r3, [r7, #23]
}
 8008406:	4618      	mov	r0, r3
 8008408:	371c      	adds	r7, #28
 800840a:	46bd      	mov	sp, r7
 800840c:	bd90      	pop	{r4, r7, pc}
 800840e:	bf00      	nop
 8008410:	20000d54 	.word	0x20000d54

08008414 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b084      	sub	sp, #16
 8008418:	af00      	add	r7, sp, #0
 800841a:	4603      	mov	r3, r0
 800841c:	603a      	str	r2, [r7, #0]
 800841e:	71fb      	strb	r3, [r7, #7]
 8008420:	460b      	mov	r3, r1
 8008422:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008424:	79fb      	ldrb	r3, [r7, #7]
 8008426:	4a09      	ldr	r2, [pc, #36]	; (800844c <disk_ioctl+0x38>)
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	4413      	add	r3, r2
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	691b      	ldr	r3, [r3, #16]
 8008430:	79fa      	ldrb	r2, [r7, #7]
 8008432:	4906      	ldr	r1, [pc, #24]	; (800844c <disk_ioctl+0x38>)
 8008434:	440a      	add	r2, r1
 8008436:	7a10      	ldrb	r0, [r2, #8]
 8008438:	79b9      	ldrb	r1, [r7, #6]
 800843a:	683a      	ldr	r2, [r7, #0]
 800843c:	4798      	blx	r3
 800843e:	4603      	mov	r3, r0
 8008440:	73fb      	strb	r3, [r7, #15]
  return res;
 8008442:	7bfb      	ldrb	r3, [r7, #15]
}
 8008444:	4618      	mov	r0, r3
 8008446:	3710      	adds	r7, #16
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}
 800844c:	20000d54 	.word	0x20000d54

08008450 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008450:	b480      	push	{r7}
 8008452:	b085      	sub	sp, #20
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	3301      	adds	r3, #1
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008460:	89fb      	ldrh	r3, [r7, #14]
 8008462:	021b      	lsls	r3, r3, #8
 8008464:	b21a      	sxth	r2, r3
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	b21b      	sxth	r3, r3
 800846c:	4313      	orrs	r3, r2
 800846e:	b21b      	sxth	r3, r3
 8008470:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008472:	89fb      	ldrh	r3, [r7, #14]
}
 8008474:	4618      	mov	r0, r3
 8008476:	3714      	adds	r7, #20
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr

08008480 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008480:	b480      	push	{r7}
 8008482:	b085      	sub	sp, #20
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	3303      	adds	r3, #3
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	021b      	lsls	r3, r3, #8
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	3202      	adds	r2, #2
 8008498:	7812      	ldrb	r2, [r2, #0]
 800849a:	4313      	orrs	r3, r2
 800849c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	021b      	lsls	r3, r3, #8
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	3201      	adds	r2, #1
 80084a6:	7812      	ldrb	r2, [r2, #0]
 80084a8:	4313      	orrs	r3, r2
 80084aa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	021b      	lsls	r3, r3, #8
 80084b0:	687a      	ldr	r2, [r7, #4]
 80084b2:	7812      	ldrb	r2, [r2, #0]
 80084b4:	4313      	orrs	r3, r2
 80084b6:	60fb      	str	r3, [r7, #12]
	return rv;
 80084b8:	68fb      	ldr	r3, [r7, #12]
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3714      	adds	r7, #20
 80084be:	46bd      	mov	sp, r7
 80084c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c4:	4770      	bx	lr

080084c6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80084c6:	b480      	push	{r7}
 80084c8:	b083      	sub	sp, #12
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
 80084ce:	460b      	mov	r3, r1
 80084d0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	1c5a      	adds	r2, r3, #1
 80084d6:	607a      	str	r2, [r7, #4]
 80084d8:	887a      	ldrh	r2, [r7, #2]
 80084da:	b2d2      	uxtb	r2, r2
 80084dc:	701a      	strb	r2, [r3, #0]
 80084de:	887b      	ldrh	r3, [r7, #2]
 80084e0:	0a1b      	lsrs	r3, r3, #8
 80084e2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	1c5a      	adds	r2, r3, #1
 80084e8:	607a      	str	r2, [r7, #4]
 80084ea:	887a      	ldrh	r2, [r7, #2]
 80084ec:	b2d2      	uxtb	r2, r2
 80084ee:	701a      	strb	r2, [r3, #0]
}
 80084f0:	bf00      	nop
 80084f2:	370c      	adds	r7, #12
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr

080084fc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80084fc:	b480      	push	{r7}
 80084fe:	b083      	sub	sp, #12
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	1c5a      	adds	r2, r3, #1
 800850a:	607a      	str	r2, [r7, #4]
 800850c:	683a      	ldr	r2, [r7, #0]
 800850e:	b2d2      	uxtb	r2, r2
 8008510:	701a      	strb	r2, [r3, #0]
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	0a1b      	lsrs	r3, r3, #8
 8008516:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	1c5a      	adds	r2, r3, #1
 800851c:	607a      	str	r2, [r7, #4]
 800851e:	683a      	ldr	r2, [r7, #0]
 8008520:	b2d2      	uxtb	r2, r2
 8008522:	701a      	strb	r2, [r3, #0]
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	0a1b      	lsrs	r3, r3, #8
 8008528:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	1c5a      	adds	r2, r3, #1
 800852e:	607a      	str	r2, [r7, #4]
 8008530:	683a      	ldr	r2, [r7, #0]
 8008532:	b2d2      	uxtb	r2, r2
 8008534:	701a      	strb	r2, [r3, #0]
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	0a1b      	lsrs	r3, r3, #8
 800853a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	1c5a      	adds	r2, r3, #1
 8008540:	607a      	str	r2, [r7, #4]
 8008542:	683a      	ldr	r2, [r7, #0]
 8008544:	b2d2      	uxtb	r2, r2
 8008546:	701a      	strb	r2, [r3, #0]
}
 8008548:	bf00      	nop
 800854a:	370c      	adds	r7, #12
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr

08008554 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008554:	b480      	push	{r7}
 8008556:	b087      	sub	sp, #28
 8008558:	af00      	add	r7, sp, #0
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	60b9      	str	r1, [r7, #8]
 800855e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d00d      	beq.n	800858a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800856e:	693a      	ldr	r2, [r7, #16]
 8008570:	1c53      	adds	r3, r2, #1
 8008572:	613b      	str	r3, [r7, #16]
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	1c59      	adds	r1, r3, #1
 8008578:	6179      	str	r1, [r7, #20]
 800857a:	7812      	ldrb	r2, [r2, #0]
 800857c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	3b01      	subs	r3, #1
 8008582:	607b      	str	r3, [r7, #4]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d1f1      	bne.n	800856e <mem_cpy+0x1a>
	}
}
 800858a:	bf00      	nop
 800858c:	371c      	adds	r7, #28
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr

08008596 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008596:	b480      	push	{r7}
 8008598:	b087      	sub	sp, #28
 800859a:	af00      	add	r7, sp, #0
 800859c:	60f8      	str	r0, [r7, #12]
 800859e:	60b9      	str	r1, [r7, #8]
 80085a0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	1c5a      	adds	r2, r3, #1
 80085aa:	617a      	str	r2, [r7, #20]
 80085ac:	68ba      	ldr	r2, [r7, #8]
 80085ae:	b2d2      	uxtb	r2, r2
 80085b0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	3b01      	subs	r3, #1
 80085b6:	607b      	str	r3, [r7, #4]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d1f3      	bne.n	80085a6 <mem_set+0x10>
}
 80085be:	bf00      	nop
 80085c0:	bf00      	nop
 80085c2:	371c      	adds	r7, #28
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr

080085cc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80085cc:	b480      	push	{r7}
 80085ce:	b089      	sub	sp, #36	; 0x24
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	60b9      	str	r1, [r7, #8]
 80085d6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	61fb      	str	r3, [r7, #28]
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80085e0:	2300      	movs	r3, #0
 80085e2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80085e4:	69fb      	ldr	r3, [r7, #28]
 80085e6:	1c5a      	adds	r2, r3, #1
 80085e8:	61fa      	str	r2, [r7, #28]
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	4619      	mov	r1, r3
 80085ee:	69bb      	ldr	r3, [r7, #24]
 80085f0:	1c5a      	adds	r2, r3, #1
 80085f2:	61ba      	str	r2, [r7, #24]
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	1acb      	subs	r3, r1, r3
 80085f8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	3b01      	subs	r3, #1
 80085fe:	607b      	str	r3, [r7, #4]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d002      	beq.n	800860c <mem_cmp+0x40>
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d0eb      	beq.n	80085e4 <mem_cmp+0x18>

	return r;
 800860c:	697b      	ldr	r3, [r7, #20]
}
 800860e:	4618      	mov	r0, r3
 8008610:	3724      	adds	r7, #36	; 0x24
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr

0800861a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800861a:	b480      	push	{r7}
 800861c:	b083      	sub	sp, #12
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
 8008622:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008624:	e002      	b.n	800862c <chk_chr+0x12>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	3301      	adds	r3, #1
 800862a:	607b      	str	r3, [r7, #4]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d005      	beq.n	8008640 <chk_chr+0x26>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	781b      	ldrb	r3, [r3, #0]
 8008638:	461a      	mov	r2, r3
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	4293      	cmp	r3, r2
 800863e:	d1f2      	bne.n	8008626 <chk_chr+0xc>
	return *str;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	781b      	ldrb	r3, [r3, #0]
}
 8008644:	4618      	mov	r0, r3
 8008646:	370c      	adds	r7, #12
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b082      	sub	sp, #8
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d009      	beq.n	8008672 <lock_fs+0x22>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	68db      	ldr	r3, [r3, #12]
 8008662:	4618      	mov	r0, r3
 8008664:	f002 fdae 	bl	800b1c4 <ff_req_grant>
 8008668:	4603      	mov	r3, r0
 800866a:	2b00      	cmp	r3, #0
 800866c:	d001      	beq.n	8008672 <lock_fs+0x22>
 800866e:	2301      	movs	r3, #1
 8008670:	e000      	b.n	8008674 <lock_fs+0x24>
 8008672:	2300      	movs	r3, #0
}
 8008674:	4618      	mov	r0, r3
 8008676:	3708      	adds	r7, #8
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b082      	sub	sp, #8
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	460b      	mov	r3, r1
 8008686:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d00d      	beq.n	80086aa <unlock_fs+0x2e>
 800868e:	78fb      	ldrb	r3, [r7, #3]
 8008690:	2b0c      	cmp	r3, #12
 8008692:	d00a      	beq.n	80086aa <unlock_fs+0x2e>
 8008694:	78fb      	ldrb	r3, [r7, #3]
 8008696:	2b0b      	cmp	r3, #11
 8008698:	d007      	beq.n	80086aa <unlock_fs+0x2e>
 800869a:	78fb      	ldrb	r3, [r7, #3]
 800869c:	2b0f      	cmp	r3, #15
 800869e:	d004      	beq.n	80086aa <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	68db      	ldr	r3, [r3, #12]
 80086a4:	4618      	mov	r0, r3
 80086a6:	f002 fda2 	bl	800b1ee <ff_rel_grant>
	}
}
 80086aa:	bf00      	nop
 80086ac:	3708      	adds	r7, #8
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}
	...

080086b4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b085      	sub	sp, #20
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80086be:	2300      	movs	r3, #0
 80086c0:	60bb      	str	r3, [r7, #8]
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	60fb      	str	r3, [r7, #12]
 80086c6:	e029      	b.n	800871c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80086c8:	4a27      	ldr	r2, [pc, #156]	; (8008768 <chk_lock+0xb4>)
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	011b      	lsls	r3, r3, #4
 80086ce:	4413      	add	r3, r2
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d01d      	beq.n	8008712 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80086d6:	4a24      	ldr	r2, [pc, #144]	; (8008768 <chk_lock+0xb4>)
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	011b      	lsls	r3, r3, #4
 80086dc:	4413      	add	r3, r2
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d116      	bne.n	8008716 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80086e8:	4a1f      	ldr	r2, [pc, #124]	; (8008768 <chk_lock+0xb4>)
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	011b      	lsls	r3, r3, #4
 80086ee:	4413      	add	r3, r2
 80086f0:	3304      	adds	r3, #4
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d10c      	bne.n	8008716 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80086fc:	4a1a      	ldr	r2, [pc, #104]	; (8008768 <chk_lock+0xb4>)
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	011b      	lsls	r3, r3, #4
 8008702:	4413      	add	r3, r2
 8008704:	3308      	adds	r3, #8
 8008706:	681a      	ldr	r2, [r3, #0]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800870c:	429a      	cmp	r2, r3
 800870e:	d102      	bne.n	8008716 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008710:	e007      	b.n	8008722 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008712:	2301      	movs	r3, #1
 8008714:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	3301      	adds	r3, #1
 800871a:	60fb      	str	r3, [r7, #12]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2b01      	cmp	r3, #1
 8008720:	d9d2      	bls.n	80086c8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2b02      	cmp	r3, #2
 8008726:	d109      	bne.n	800873c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d102      	bne.n	8008734 <chk_lock+0x80>
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	2b02      	cmp	r3, #2
 8008732:	d101      	bne.n	8008738 <chk_lock+0x84>
 8008734:	2300      	movs	r3, #0
 8008736:	e010      	b.n	800875a <chk_lock+0xa6>
 8008738:	2312      	movs	r3, #18
 800873a:	e00e      	b.n	800875a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d108      	bne.n	8008754 <chk_lock+0xa0>
 8008742:	4a09      	ldr	r2, [pc, #36]	; (8008768 <chk_lock+0xb4>)
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	011b      	lsls	r3, r3, #4
 8008748:	4413      	add	r3, r2
 800874a:	330c      	adds	r3, #12
 800874c:	881b      	ldrh	r3, [r3, #0]
 800874e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008752:	d101      	bne.n	8008758 <chk_lock+0xa4>
 8008754:	2310      	movs	r3, #16
 8008756:	e000      	b.n	800875a <chk_lock+0xa6>
 8008758:	2300      	movs	r3, #0
}
 800875a:	4618      	mov	r0, r3
 800875c:	3714      	adds	r7, #20
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr
 8008766:	bf00      	nop
 8008768:	20000d34 	.word	0x20000d34

0800876c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800876c:	b480      	push	{r7}
 800876e:	b083      	sub	sp, #12
 8008770:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008772:	2300      	movs	r3, #0
 8008774:	607b      	str	r3, [r7, #4]
 8008776:	e002      	b.n	800877e <enq_lock+0x12>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	3301      	adds	r3, #1
 800877c:	607b      	str	r3, [r7, #4]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2b01      	cmp	r3, #1
 8008782:	d806      	bhi.n	8008792 <enq_lock+0x26>
 8008784:	4a09      	ldr	r2, [pc, #36]	; (80087ac <enq_lock+0x40>)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	011b      	lsls	r3, r3, #4
 800878a:	4413      	add	r3, r2
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d1f2      	bne.n	8008778 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2b02      	cmp	r3, #2
 8008796:	bf14      	ite	ne
 8008798:	2301      	movne	r3, #1
 800879a:	2300      	moveq	r3, #0
 800879c:	b2db      	uxtb	r3, r3
}
 800879e:	4618      	mov	r0, r3
 80087a0:	370c      	adds	r7, #12
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr
 80087aa:	bf00      	nop
 80087ac:	20000d34 	.word	0x20000d34

080087b0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b085      	sub	sp, #20
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80087ba:	2300      	movs	r3, #0
 80087bc:	60fb      	str	r3, [r7, #12]
 80087be:	e01f      	b.n	8008800 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80087c0:	4a41      	ldr	r2, [pc, #260]	; (80088c8 <inc_lock+0x118>)
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	011b      	lsls	r3, r3, #4
 80087c6:	4413      	add	r3, r2
 80087c8:	681a      	ldr	r2, [r3, #0]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d113      	bne.n	80087fa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80087d2:	4a3d      	ldr	r2, [pc, #244]	; (80088c8 <inc_lock+0x118>)
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	011b      	lsls	r3, r3, #4
 80087d8:	4413      	add	r3, r2
 80087da:	3304      	adds	r3, #4
 80087dc:	681a      	ldr	r2, [r3, #0]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80087e2:	429a      	cmp	r2, r3
 80087e4:	d109      	bne.n	80087fa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80087e6:	4a38      	ldr	r2, [pc, #224]	; (80088c8 <inc_lock+0x118>)
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	011b      	lsls	r3, r3, #4
 80087ec:	4413      	add	r3, r2
 80087ee:	3308      	adds	r3, #8
 80087f0:	681a      	ldr	r2, [r3, #0]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d006      	beq.n	8008808 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	3301      	adds	r3, #1
 80087fe:	60fb      	str	r3, [r7, #12]
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2b01      	cmp	r3, #1
 8008804:	d9dc      	bls.n	80087c0 <inc_lock+0x10>
 8008806:	e000      	b.n	800880a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008808:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2b02      	cmp	r3, #2
 800880e:	d132      	bne.n	8008876 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008810:	2300      	movs	r3, #0
 8008812:	60fb      	str	r3, [r7, #12]
 8008814:	e002      	b.n	800881c <inc_lock+0x6c>
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	3301      	adds	r3, #1
 800881a:	60fb      	str	r3, [r7, #12]
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2b01      	cmp	r3, #1
 8008820:	d806      	bhi.n	8008830 <inc_lock+0x80>
 8008822:	4a29      	ldr	r2, [pc, #164]	; (80088c8 <inc_lock+0x118>)
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	011b      	lsls	r3, r3, #4
 8008828:	4413      	add	r3, r2
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d1f2      	bne.n	8008816 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2b02      	cmp	r3, #2
 8008834:	d101      	bne.n	800883a <inc_lock+0x8a>
 8008836:	2300      	movs	r3, #0
 8008838:	e040      	b.n	80088bc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681a      	ldr	r2, [r3, #0]
 800883e:	4922      	ldr	r1, [pc, #136]	; (80088c8 <inc_lock+0x118>)
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	011b      	lsls	r3, r3, #4
 8008844:	440b      	add	r3, r1
 8008846:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	689a      	ldr	r2, [r3, #8]
 800884c:	491e      	ldr	r1, [pc, #120]	; (80088c8 <inc_lock+0x118>)
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	011b      	lsls	r3, r3, #4
 8008852:	440b      	add	r3, r1
 8008854:	3304      	adds	r3, #4
 8008856:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	695a      	ldr	r2, [r3, #20]
 800885c:	491a      	ldr	r1, [pc, #104]	; (80088c8 <inc_lock+0x118>)
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	011b      	lsls	r3, r3, #4
 8008862:	440b      	add	r3, r1
 8008864:	3308      	adds	r3, #8
 8008866:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008868:	4a17      	ldr	r2, [pc, #92]	; (80088c8 <inc_lock+0x118>)
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	011b      	lsls	r3, r3, #4
 800886e:	4413      	add	r3, r2
 8008870:	330c      	adds	r3, #12
 8008872:	2200      	movs	r2, #0
 8008874:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d009      	beq.n	8008890 <inc_lock+0xe0>
 800887c:	4a12      	ldr	r2, [pc, #72]	; (80088c8 <inc_lock+0x118>)
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	011b      	lsls	r3, r3, #4
 8008882:	4413      	add	r3, r2
 8008884:	330c      	adds	r3, #12
 8008886:	881b      	ldrh	r3, [r3, #0]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d001      	beq.n	8008890 <inc_lock+0xe0>
 800888c:	2300      	movs	r3, #0
 800888e:	e015      	b.n	80088bc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d108      	bne.n	80088a8 <inc_lock+0xf8>
 8008896:	4a0c      	ldr	r2, [pc, #48]	; (80088c8 <inc_lock+0x118>)
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	011b      	lsls	r3, r3, #4
 800889c:	4413      	add	r3, r2
 800889e:	330c      	adds	r3, #12
 80088a0:	881b      	ldrh	r3, [r3, #0]
 80088a2:	3301      	adds	r3, #1
 80088a4:	b29a      	uxth	r2, r3
 80088a6:	e001      	b.n	80088ac <inc_lock+0xfc>
 80088a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80088ac:	4906      	ldr	r1, [pc, #24]	; (80088c8 <inc_lock+0x118>)
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	011b      	lsls	r3, r3, #4
 80088b2:	440b      	add	r3, r1
 80088b4:	330c      	adds	r3, #12
 80088b6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	3301      	adds	r3, #1
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3714      	adds	r7, #20
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr
 80088c8:	20000d34 	.word	0x20000d34

080088cc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b085      	sub	sp, #20
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	3b01      	subs	r3, #1
 80088d8:	607b      	str	r3, [r7, #4]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d825      	bhi.n	800892c <dec_lock+0x60>
		n = Files[i].ctr;
 80088e0:	4a17      	ldr	r2, [pc, #92]	; (8008940 <dec_lock+0x74>)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	011b      	lsls	r3, r3, #4
 80088e6:	4413      	add	r3, r2
 80088e8:	330c      	adds	r3, #12
 80088ea:	881b      	ldrh	r3, [r3, #0]
 80088ec:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80088ee:	89fb      	ldrh	r3, [r7, #14]
 80088f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088f4:	d101      	bne.n	80088fa <dec_lock+0x2e>
 80088f6:	2300      	movs	r3, #0
 80088f8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80088fa:	89fb      	ldrh	r3, [r7, #14]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d002      	beq.n	8008906 <dec_lock+0x3a>
 8008900:	89fb      	ldrh	r3, [r7, #14]
 8008902:	3b01      	subs	r3, #1
 8008904:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008906:	4a0e      	ldr	r2, [pc, #56]	; (8008940 <dec_lock+0x74>)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	011b      	lsls	r3, r3, #4
 800890c:	4413      	add	r3, r2
 800890e:	330c      	adds	r3, #12
 8008910:	89fa      	ldrh	r2, [r7, #14]
 8008912:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008914:	89fb      	ldrh	r3, [r7, #14]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d105      	bne.n	8008926 <dec_lock+0x5a>
 800891a:	4a09      	ldr	r2, [pc, #36]	; (8008940 <dec_lock+0x74>)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	011b      	lsls	r3, r3, #4
 8008920:	4413      	add	r3, r2
 8008922:	2200      	movs	r2, #0
 8008924:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008926:	2300      	movs	r3, #0
 8008928:	737b      	strb	r3, [r7, #13]
 800892a:	e001      	b.n	8008930 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800892c:	2302      	movs	r3, #2
 800892e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008930:	7b7b      	ldrb	r3, [r7, #13]
}
 8008932:	4618      	mov	r0, r3
 8008934:	3714      	adds	r7, #20
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr
 800893e:	bf00      	nop
 8008940:	20000d34 	.word	0x20000d34

08008944 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008944:	b480      	push	{r7}
 8008946:	b085      	sub	sp, #20
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800894c:	2300      	movs	r3, #0
 800894e:	60fb      	str	r3, [r7, #12]
 8008950:	e010      	b.n	8008974 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008952:	4a0d      	ldr	r2, [pc, #52]	; (8008988 <clear_lock+0x44>)
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	011b      	lsls	r3, r3, #4
 8008958:	4413      	add	r3, r2
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	687a      	ldr	r2, [r7, #4]
 800895e:	429a      	cmp	r2, r3
 8008960:	d105      	bne.n	800896e <clear_lock+0x2a>
 8008962:	4a09      	ldr	r2, [pc, #36]	; (8008988 <clear_lock+0x44>)
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	011b      	lsls	r3, r3, #4
 8008968:	4413      	add	r3, r2
 800896a:	2200      	movs	r2, #0
 800896c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	3301      	adds	r3, #1
 8008972:	60fb      	str	r3, [r7, #12]
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2b01      	cmp	r3, #1
 8008978:	d9eb      	bls.n	8008952 <clear_lock+0xe>
	}
}
 800897a:	bf00      	nop
 800897c:	bf00      	nop
 800897e:	3714      	adds	r7, #20
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr
 8008988:	20000d34 	.word	0x20000d34

0800898c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b086      	sub	sp, #24
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008994:	2300      	movs	r3, #0
 8008996:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	78db      	ldrb	r3, [r3, #3]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d034      	beq.n	8008a0a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089a4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	7858      	ldrb	r0, [r3, #1]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80089b0:	2301      	movs	r3, #1
 80089b2:	697a      	ldr	r2, [r7, #20]
 80089b4:	f7ff fd0e 	bl	80083d4 <disk_write>
 80089b8:	4603      	mov	r3, r0
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d002      	beq.n	80089c4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80089be:	2301      	movs	r3, #1
 80089c0:	73fb      	strb	r3, [r7, #15]
 80089c2:	e022      	b.n	8008a0a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2200      	movs	r2, #0
 80089c8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ce:	697a      	ldr	r2, [r7, #20]
 80089d0:	1ad2      	subs	r2, r2, r3
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	69db      	ldr	r3, [r3, #28]
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d217      	bcs.n	8008a0a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	789b      	ldrb	r3, [r3, #2]
 80089de:	613b      	str	r3, [r7, #16]
 80089e0:	e010      	b.n	8008a04 <sync_window+0x78>
					wsect += fs->fsize;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	69db      	ldr	r3, [r3, #28]
 80089e6:	697a      	ldr	r2, [r7, #20]
 80089e8:	4413      	add	r3, r2
 80089ea:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	7858      	ldrb	r0, [r3, #1]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80089f6:	2301      	movs	r3, #1
 80089f8:	697a      	ldr	r2, [r7, #20]
 80089fa:	f7ff fceb 	bl	80083d4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	3b01      	subs	r3, #1
 8008a02:	613b      	str	r3, [r7, #16]
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d8eb      	bhi.n	80089e2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3718      	adds	r7, #24
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b084      	sub	sp, #16
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a26:	683a      	ldr	r2, [r7, #0]
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d01b      	beq.n	8008a64 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f7ff ffad 	bl	800898c <sync_window>
 8008a32:	4603      	mov	r3, r0
 8008a34:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008a36:	7bfb      	ldrb	r3, [r7, #15]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d113      	bne.n	8008a64 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	7858      	ldrb	r0, [r3, #1]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008a46:	2301      	movs	r3, #1
 8008a48:	683a      	ldr	r2, [r7, #0]
 8008a4a:	f7ff fca3 	bl	8008394 <disk_read>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d004      	beq.n	8008a5e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008a54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a58:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	683a      	ldr	r2, [r7, #0]
 8008a62:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8008a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3710      	adds	r7, #16
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
	...

08008a70 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b084      	sub	sp, #16
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f7ff ff87 	bl	800898c <sync_window>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008a82:	7bfb      	ldrb	r3, [r7, #15]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d158      	bne.n	8008b3a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	2b03      	cmp	r3, #3
 8008a8e:	d148      	bne.n	8008b22 <sync_fs+0xb2>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	791b      	ldrb	r3, [r3, #4]
 8008a94:	2b01      	cmp	r3, #1
 8008a96:	d144      	bne.n	8008b22 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	3334      	adds	r3, #52	; 0x34
 8008a9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008aa0:	2100      	movs	r1, #0
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f7ff fd77 	bl	8008596 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	3334      	adds	r3, #52	; 0x34
 8008aac:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008ab0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f7ff fd06 	bl	80084c6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	3334      	adds	r3, #52	; 0x34
 8008abe:	4921      	ldr	r1, [pc, #132]	; (8008b44 <sync_fs+0xd4>)
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f7ff fd1b 	bl	80084fc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	3334      	adds	r3, #52	; 0x34
 8008aca:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008ace:	491e      	ldr	r1, [pc, #120]	; (8008b48 <sync_fs+0xd8>)
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f7ff fd13 	bl	80084fc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	3334      	adds	r3, #52	; 0x34
 8008ada:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	695b      	ldr	r3, [r3, #20]
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	4610      	mov	r0, r2
 8008ae6:	f7ff fd09 	bl	80084fc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	3334      	adds	r3, #52	; 0x34
 8008aee:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	691b      	ldr	r3, [r3, #16]
 8008af6:	4619      	mov	r1, r3
 8008af8:	4610      	mov	r0, r2
 8008afa:	f7ff fcff 	bl	80084fc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6a1b      	ldr	r3, [r3, #32]
 8008b02:	1c5a      	adds	r2, r3, #1
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	7858      	ldrb	r0, [r3, #1]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b16:	2301      	movs	r3, #1
 8008b18:	f7ff fc5c 	bl	80083d4 <disk_write>
			fs->fsi_flag = 0;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	785b      	ldrb	r3, [r3, #1]
 8008b26:	2200      	movs	r2, #0
 8008b28:	2100      	movs	r1, #0
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f7ff fc72 	bl	8008414 <disk_ioctl>
 8008b30:	4603      	mov	r3, r0
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d001      	beq.n	8008b3a <sync_fs+0xca>
 8008b36:	2301      	movs	r3, #1
 8008b38:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3710      	adds	r7, #16
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}
 8008b44:	41615252 	.word	0x41615252
 8008b48:	61417272 	.word	0x61417272

08008b4c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b083      	sub	sp, #12
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	3b02      	subs	r3, #2
 8008b5a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	699b      	ldr	r3, [r3, #24]
 8008b60:	3b02      	subs	r3, #2
 8008b62:	683a      	ldr	r2, [r7, #0]
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d301      	bcc.n	8008b6c <clust2sect+0x20>
 8008b68:	2300      	movs	r3, #0
 8008b6a:	e008      	b.n	8008b7e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	895b      	ldrh	r3, [r3, #10]
 8008b70:	461a      	mov	r2, r3
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	fb03 f202 	mul.w	r2, r3, r2
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b7c:	4413      	add	r3, r2
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	370c      	adds	r7, #12
 8008b82:	46bd      	mov	sp, r7
 8008b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b88:	4770      	bx	lr

08008b8a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008b8a:	b580      	push	{r7, lr}
 8008b8c:	b086      	sub	sp, #24
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
 8008b92:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d904      	bls.n	8008baa <get_fat+0x20>
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	699b      	ldr	r3, [r3, #24]
 8008ba4:	683a      	ldr	r2, [r7, #0]
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d302      	bcc.n	8008bb0 <get_fat+0x26>
		val = 1;	/* Internal error */
 8008baa:	2301      	movs	r3, #1
 8008bac:	617b      	str	r3, [r7, #20]
 8008bae:	e08f      	b.n	8008cd0 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008bb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008bb4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	781b      	ldrb	r3, [r3, #0]
 8008bba:	2b03      	cmp	r3, #3
 8008bbc:	d062      	beq.n	8008c84 <get_fat+0xfa>
 8008bbe:	2b03      	cmp	r3, #3
 8008bc0:	dc7c      	bgt.n	8008cbc <get_fat+0x132>
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	d002      	beq.n	8008bcc <get_fat+0x42>
 8008bc6:	2b02      	cmp	r3, #2
 8008bc8:	d042      	beq.n	8008c50 <get_fat+0xc6>
 8008bca:	e077      	b.n	8008cbc <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	60fb      	str	r3, [r7, #12]
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	085b      	lsrs	r3, r3, #1
 8008bd4:	68fa      	ldr	r2, [r7, #12]
 8008bd6:	4413      	add	r3, r2
 8008bd8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	0a5b      	lsrs	r3, r3, #9
 8008be2:	4413      	add	r3, r2
 8008be4:	4619      	mov	r1, r3
 8008be6:	6938      	ldr	r0, [r7, #16]
 8008be8:	f7ff ff14 	bl	8008a14 <move_window>
 8008bec:	4603      	mov	r3, r0
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d167      	bne.n	8008cc2 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	1c5a      	adds	r2, r3, #1
 8008bf6:	60fa      	str	r2, [r7, #12]
 8008bf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bfc:	693a      	ldr	r2, [r7, #16]
 8008bfe:	4413      	add	r3, r2
 8008c00:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008c04:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	0a5b      	lsrs	r3, r3, #9
 8008c0e:	4413      	add	r3, r2
 8008c10:	4619      	mov	r1, r3
 8008c12:	6938      	ldr	r0, [r7, #16]
 8008c14:	f7ff fefe 	bl	8008a14 <move_window>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d153      	bne.n	8008cc6 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c24:	693a      	ldr	r2, [r7, #16]
 8008c26:	4413      	add	r3, r2
 8008c28:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008c2c:	021b      	lsls	r3, r3, #8
 8008c2e:	461a      	mov	r2, r3
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	4313      	orrs	r3, r2
 8008c34:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	f003 0301 	and.w	r3, r3, #1
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d002      	beq.n	8008c46 <get_fat+0xbc>
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	091b      	lsrs	r3, r3, #4
 8008c44:	e002      	b.n	8008c4c <get_fat+0xc2>
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c4c:	617b      	str	r3, [r7, #20]
			break;
 8008c4e:	e03f      	b.n	8008cd0 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	0a1b      	lsrs	r3, r3, #8
 8008c58:	4413      	add	r3, r2
 8008c5a:	4619      	mov	r1, r3
 8008c5c:	6938      	ldr	r0, [r7, #16]
 8008c5e:	f7ff fed9 	bl	8008a14 <move_window>
 8008c62:	4603      	mov	r3, r0
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d130      	bne.n	8008cca <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	005b      	lsls	r3, r3, #1
 8008c72:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008c76:	4413      	add	r3, r2
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f7ff fbe9 	bl	8008450 <ld_word>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	617b      	str	r3, [r7, #20]
			break;
 8008c82:	e025      	b.n	8008cd0 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	09db      	lsrs	r3, r3, #7
 8008c8c:	4413      	add	r3, r2
 8008c8e:	4619      	mov	r1, r3
 8008c90:	6938      	ldr	r0, [r7, #16]
 8008c92:	f7ff febf 	bl	8008a14 <move_window>
 8008c96:	4603      	mov	r3, r0
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d118      	bne.n	8008cce <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	009b      	lsls	r3, r3, #2
 8008ca6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008caa:	4413      	add	r3, r2
 8008cac:	4618      	mov	r0, r3
 8008cae:	f7ff fbe7 	bl	8008480 <ld_dword>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008cb8:	617b      	str	r3, [r7, #20]
			break;
 8008cba:	e009      	b.n	8008cd0 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	617b      	str	r3, [r7, #20]
 8008cc0:	e006      	b.n	8008cd0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008cc2:	bf00      	nop
 8008cc4:	e004      	b.n	8008cd0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008cc6:	bf00      	nop
 8008cc8:	e002      	b.n	8008cd0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008cca:	bf00      	nop
 8008ccc:	e000      	b.n	8008cd0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008cce:	bf00      	nop
		}
	}

	return val;
 8008cd0:	697b      	ldr	r3, [r7, #20]
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3718      	adds	r7, #24
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}

08008cda <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008cda:	b590      	push	{r4, r7, lr}
 8008cdc:	b089      	sub	sp, #36	; 0x24
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	60f8      	str	r0, [r7, #12]
 8008ce2:	60b9      	str	r1, [r7, #8]
 8008ce4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008ce6:	2302      	movs	r3, #2
 8008ce8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	2b01      	cmp	r3, #1
 8008cee:	f240 80d2 	bls.w	8008e96 <put_fat+0x1bc>
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	699b      	ldr	r3, [r3, #24]
 8008cf6:	68ba      	ldr	r2, [r7, #8]
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	f080 80cc 	bcs.w	8008e96 <put_fat+0x1bc>
		switch (fs->fs_type) {
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	2b03      	cmp	r3, #3
 8008d04:	f000 8096 	beq.w	8008e34 <put_fat+0x15a>
 8008d08:	2b03      	cmp	r3, #3
 8008d0a:	f300 80cd 	bgt.w	8008ea8 <put_fat+0x1ce>
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d002      	beq.n	8008d18 <put_fat+0x3e>
 8008d12:	2b02      	cmp	r3, #2
 8008d14:	d06e      	beq.n	8008df4 <put_fat+0x11a>
 8008d16:	e0c7      	b.n	8008ea8 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	61bb      	str	r3, [r7, #24]
 8008d1c:	69bb      	ldr	r3, [r7, #24]
 8008d1e:	085b      	lsrs	r3, r3, #1
 8008d20:	69ba      	ldr	r2, [r7, #24]
 8008d22:	4413      	add	r3, r2
 8008d24:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008d2a:	69bb      	ldr	r3, [r7, #24]
 8008d2c:	0a5b      	lsrs	r3, r3, #9
 8008d2e:	4413      	add	r3, r2
 8008d30:	4619      	mov	r1, r3
 8008d32:	68f8      	ldr	r0, [r7, #12]
 8008d34:	f7ff fe6e 	bl	8008a14 <move_window>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008d3c:	7ffb      	ldrb	r3, [r7, #31]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	f040 80ab 	bne.w	8008e9a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008d4a:	69bb      	ldr	r3, [r7, #24]
 8008d4c:	1c59      	adds	r1, r3, #1
 8008d4e:	61b9      	str	r1, [r7, #24]
 8008d50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d54:	4413      	add	r3, r2
 8008d56:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	f003 0301 	and.w	r3, r3, #1
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d00d      	beq.n	8008d7e <put_fat+0xa4>
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	781b      	ldrb	r3, [r3, #0]
 8008d66:	b25b      	sxtb	r3, r3
 8008d68:	f003 030f 	and.w	r3, r3, #15
 8008d6c:	b25a      	sxtb	r2, r3
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	b2db      	uxtb	r3, r3
 8008d72:	011b      	lsls	r3, r3, #4
 8008d74:	b25b      	sxtb	r3, r3
 8008d76:	4313      	orrs	r3, r2
 8008d78:	b25b      	sxtb	r3, r3
 8008d7a:	b2db      	uxtb	r3, r3
 8008d7c:	e001      	b.n	8008d82 <put_fat+0xa8>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	b2db      	uxtb	r3, r3
 8008d82:	697a      	ldr	r2, [r7, #20]
 8008d84:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2201      	movs	r2, #1
 8008d8a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008d90:	69bb      	ldr	r3, [r7, #24]
 8008d92:	0a5b      	lsrs	r3, r3, #9
 8008d94:	4413      	add	r3, r2
 8008d96:	4619      	mov	r1, r3
 8008d98:	68f8      	ldr	r0, [r7, #12]
 8008d9a:	f7ff fe3b 	bl	8008a14 <move_window>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008da2:	7ffb      	ldrb	r3, [r7, #31]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d17a      	bne.n	8008e9e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008dae:	69bb      	ldr	r3, [r7, #24]
 8008db0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008db4:	4413      	add	r3, r2
 8008db6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	f003 0301 	and.w	r3, r3, #1
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d003      	beq.n	8008dca <put_fat+0xf0>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	091b      	lsrs	r3, r3, #4
 8008dc6:	b2db      	uxtb	r3, r3
 8008dc8:	e00e      	b.n	8008de8 <put_fat+0x10e>
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	b25b      	sxtb	r3, r3
 8008dd0:	f023 030f 	bic.w	r3, r3, #15
 8008dd4:	b25a      	sxtb	r2, r3
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	0a1b      	lsrs	r3, r3, #8
 8008dda:	b25b      	sxtb	r3, r3
 8008ddc:	f003 030f 	and.w	r3, r3, #15
 8008de0:	b25b      	sxtb	r3, r3
 8008de2:	4313      	orrs	r3, r2
 8008de4:	b25b      	sxtb	r3, r3
 8008de6:	b2db      	uxtb	r3, r3
 8008de8:	697a      	ldr	r2, [r7, #20]
 8008dea:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	2201      	movs	r2, #1
 8008df0:	70da      	strb	r2, [r3, #3]
			break;
 8008df2:	e059      	b.n	8008ea8 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	0a1b      	lsrs	r3, r3, #8
 8008dfc:	4413      	add	r3, r2
 8008dfe:	4619      	mov	r1, r3
 8008e00:	68f8      	ldr	r0, [r7, #12]
 8008e02:	f7ff fe07 	bl	8008a14 <move_window>
 8008e06:	4603      	mov	r3, r0
 8008e08:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008e0a:	7ffb      	ldrb	r3, [r7, #31]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d148      	bne.n	8008ea2 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	005b      	lsls	r3, r3, #1
 8008e1a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008e1e:	4413      	add	r3, r2
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	b292      	uxth	r2, r2
 8008e24:	4611      	mov	r1, r2
 8008e26:	4618      	mov	r0, r3
 8008e28:	f7ff fb4d 	bl	80084c6 <st_word>
			fs->wflag = 1;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2201      	movs	r2, #1
 8008e30:	70da      	strb	r2, [r3, #3]
			break;
 8008e32:	e039      	b.n	8008ea8 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	09db      	lsrs	r3, r3, #7
 8008e3c:	4413      	add	r3, r2
 8008e3e:	4619      	mov	r1, r3
 8008e40:	68f8      	ldr	r0, [r7, #12]
 8008e42:	f7ff fde7 	bl	8008a14 <move_window>
 8008e46:	4603      	mov	r3, r0
 8008e48:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008e4a:	7ffb      	ldrb	r3, [r7, #31]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d12a      	bne.n	8008ea6 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	009b      	lsls	r3, r3, #2
 8008e60:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008e64:	4413      	add	r3, r2
 8008e66:	4618      	mov	r0, r3
 8008e68:	f7ff fb0a 	bl	8008480 <ld_dword>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008e72:	4323      	orrs	r3, r4
 8008e74:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008e84:	4413      	add	r3, r2
 8008e86:	6879      	ldr	r1, [r7, #4]
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f7ff fb37 	bl	80084fc <st_dword>
			fs->wflag = 1;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2201      	movs	r2, #1
 8008e92:	70da      	strb	r2, [r3, #3]
			break;
 8008e94:	e008      	b.n	8008ea8 <put_fat+0x1ce>
		}
	}
 8008e96:	bf00      	nop
 8008e98:	e006      	b.n	8008ea8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008e9a:	bf00      	nop
 8008e9c:	e004      	b.n	8008ea8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008e9e:	bf00      	nop
 8008ea0:	e002      	b.n	8008ea8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008ea2:	bf00      	nop
 8008ea4:	e000      	b.n	8008ea8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008ea6:	bf00      	nop
	return res;
 8008ea8:	7ffb      	ldrb	r3, [r7, #31]
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3724      	adds	r7, #36	; 0x24
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd90      	pop	{r4, r7, pc}

08008eb2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008eb2:	b580      	push	{r7, lr}
 8008eb4:	b088      	sub	sp, #32
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	60f8      	str	r0, [r7, #12]
 8008eba:	60b9      	str	r1, [r7, #8]
 8008ebc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	2b01      	cmp	r3, #1
 8008ecc:	d904      	bls.n	8008ed8 <remove_chain+0x26>
 8008ece:	69bb      	ldr	r3, [r7, #24]
 8008ed0:	699b      	ldr	r3, [r3, #24]
 8008ed2:	68ba      	ldr	r2, [r7, #8]
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d301      	bcc.n	8008edc <remove_chain+0x2a>
 8008ed8:	2302      	movs	r3, #2
 8008eda:	e04b      	b.n	8008f74 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d00c      	beq.n	8008efc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008ee2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ee6:	6879      	ldr	r1, [r7, #4]
 8008ee8:	69b8      	ldr	r0, [r7, #24]
 8008eea:	f7ff fef6 	bl	8008cda <put_fat>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008ef2:	7ffb      	ldrb	r3, [r7, #31]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d001      	beq.n	8008efc <remove_chain+0x4a>
 8008ef8:	7ffb      	ldrb	r3, [r7, #31]
 8008efa:	e03b      	b.n	8008f74 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008efc:	68b9      	ldr	r1, [r7, #8]
 8008efe:	68f8      	ldr	r0, [r7, #12]
 8008f00:	f7ff fe43 	bl	8008b8a <get_fat>
 8008f04:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d031      	beq.n	8008f70 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d101      	bne.n	8008f16 <remove_chain+0x64>
 8008f12:	2302      	movs	r3, #2
 8008f14:	e02e      	b.n	8008f74 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f1c:	d101      	bne.n	8008f22 <remove_chain+0x70>
 8008f1e:	2301      	movs	r3, #1
 8008f20:	e028      	b.n	8008f74 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008f22:	2200      	movs	r2, #0
 8008f24:	68b9      	ldr	r1, [r7, #8]
 8008f26:	69b8      	ldr	r0, [r7, #24]
 8008f28:	f7ff fed7 	bl	8008cda <put_fat>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008f30:	7ffb      	ldrb	r3, [r7, #31]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d001      	beq.n	8008f3a <remove_chain+0x88>
 8008f36:	7ffb      	ldrb	r3, [r7, #31]
 8008f38:	e01c      	b.n	8008f74 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008f3a:	69bb      	ldr	r3, [r7, #24]
 8008f3c:	695a      	ldr	r2, [r3, #20]
 8008f3e:	69bb      	ldr	r3, [r7, #24]
 8008f40:	699b      	ldr	r3, [r3, #24]
 8008f42:	3b02      	subs	r3, #2
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d20b      	bcs.n	8008f60 <remove_chain+0xae>
			fs->free_clst++;
 8008f48:	69bb      	ldr	r3, [r7, #24]
 8008f4a:	695b      	ldr	r3, [r3, #20]
 8008f4c:	1c5a      	adds	r2, r3, #1
 8008f4e:	69bb      	ldr	r3, [r7, #24]
 8008f50:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8008f52:	69bb      	ldr	r3, [r7, #24]
 8008f54:	791b      	ldrb	r3, [r3, #4]
 8008f56:	f043 0301 	orr.w	r3, r3, #1
 8008f5a:	b2da      	uxtb	r2, r3
 8008f5c:	69bb      	ldr	r3, [r7, #24]
 8008f5e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008f64:	69bb      	ldr	r3, [r7, #24]
 8008f66:	699b      	ldr	r3, [r3, #24]
 8008f68:	68ba      	ldr	r2, [r7, #8]
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	d3c6      	bcc.n	8008efc <remove_chain+0x4a>
 8008f6e:	e000      	b.n	8008f72 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008f70:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008f72:	2300      	movs	r3, #0
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3720      	adds	r7, #32
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}

08008f7c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b088      	sub	sp, #32
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d10d      	bne.n	8008fae <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	691b      	ldr	r3, [r3, #16]
 8008f96:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008f98:	69bb      	ldr	r3, [r7, #24]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d004      	beq.n	8008fa8 <create_chain+0x2c>
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	699b      	ldr	r3, [r3, #24]
 8008fa2:	69ba      	ldr	r2, [r7, #24]
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	d31b      	bcc.n	8008fe0 <create_chain+0x64>
 8008fa8:	2301      	movs	r3, #1
 8008faa:	61bb      	str	r3, [r7, #24]
 8008fac:	e018      	b.n	8008fe0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008fae:	6839      	ldr	r1, [r7, #0]
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f7ff fdea 	bl	8008b8a <get_fat>
 8008fb6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	d801      	bhi.n	8008fc2 <create_chain+0x46>
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	e070      	b.n	80090a4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fc8:	d101      	bne.n	8008fce <create_chain+0x52>
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	e06a      	b.n	80090a4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	699b      	ldr	r3, [r3, #24]
 8008fd2:	68fa      	ldr	r2, [r7, #12]
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d201      	bcs.n	8008fdc <create_chain+0x60>
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	e063      	b.n	80090a4 <create_chain+0x128>
		scl = clst;
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008fe0:	69bb      	ldr	r3, [r7, #24]
 8008fe2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008fe4:	69fb      	ldr	r3, [r7, #28]
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	699b      	ldr	r3, [r3, #24]
 8008fee:	69fa      	ldr	r2, [r7, #28]
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d307      	bcc.n	8009004 <create_chain+0x88>
				ncl = 2;
 8008ff4:	2302      	movs	r3, #2
 8008ff6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008ff8:	69fa      	ldr	r2, [r7, #28]
 8008ffa:	69bb      	ldr	r3, [r7, #24]
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d901      	bls.n	8009004 <create_chain+0x88>
 8009000:	2300      	movs	r3, #0
 8009002:	e04f      	b.n	80090a4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009004:	69f9      	ldr	r1, [r7, #28]
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f7ff fdbf 	bl	8008b8a <get_fat>
 800900c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d00e      	beq.n	8009032 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2b01      	cmp	r3, #1
 8009018:	d003      	beq.n	8009022 <create_chain+0xa6>
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009020:	d101      	bne.n	8009026 <create_chain+0xaa>
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	e03e      	b.n	80090a4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009026:	69fa      	ldr	r2, [r7, #28]
 8009028:	69bb      	ldr	r3, [r7, #24]
 800902a:	429a      	cmp	r2, r3
 800902c:	d1da      	bne.n	8008fe4 <create_chain+0x68>
 800902e:	2300      	movs	r3, #0
 8009030:	e038      	b.n	80090a4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009032:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009034:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009038:	69f9      	ldr	r1, [r7, #28]
 800903a:	6938      	ldr	r0, [r7, #16]
 800903c:	f7ff fe4d 	bl	8008cda <put_fat>
 8009040:	4603      	mov	r3, r0
 8009042:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009044:	7dfb      	ldrb	r3, [r7, #23]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d109      	bne.n	800905e <create_chain+0xe2>
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d006      	beq.n	800905e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009050:	69fa      	ldr	r2, [r7, #28]
 8009052:	6839      	ldr	r1, [r7, #0]
 8009054:	6938      	ldr	r0, [r7, #16]
 8009056:	f7ff fe40 	bl	8008cda <put_fat>
 800905a:	4603      	mov	r3, r0
 800905c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800905e:	7dfb      	ldrb	r3, [r7, #23]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d116      	bne.n	8009092 <create_chain+0x116>
		fs->last_clst = ncl;
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	69fa      	ldr	r2, [r7, #28]
 8009068:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	695a      	ldr	r2, [r3, #20]
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	699b      	ldr	r3, [r3, #24]
 8009072:	3b02      	subs	r3, #2
 8009074:	429a      	cmp	r2, r3
 8009076:	d804      	bhi.n	8009082 <create_chain+0x106>
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	695b      	ldr	r3, [r3, #20]
 800907c:	1e5a      	subs	r2, r3, #1
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	791b      	ldrb	r3, [r3, #4]
 8009086:	f043 0301 	orr.w	r3, r3, #1
 800908a:	b2da      	uxtb	r2, r3
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	711a      	strb	r2, [r3, #4]
 8009090:	e007      	b.n	80090a2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009092:	7dfb      	ldrb	r3, [r7, #23]
 8009094:	2b01      	cmp	r3, #1
 8009096:	d102      	bne.n	800909e <create_chain+0x122>
 8009098:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800909c:	e000      	b.n	80090a0 <create_chain+0x124>
 800909e:	2301      	movs	r3, #1
 80090a0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80090a2:	69fb      	ldr	r3, [r7, #28]
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3720      	adds	r7, #32
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}

080090ac <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b087      	sub	sp, #28
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c0:	3304      	adds	r3, #4
 80090c2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	0a5b      	lsrs	r3, r3, #9
 80090c8:	68fa      	ldr	r2, [r7, #12]
 80090ca:	8952      	ldrh	r2, [r2, #10]
 80090cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80090d0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	1d1a      	adds	r2, r3, #4
 80090d6:	613a      	str	r2, [r7, #16]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d101      	bne.n	80090e6 <clmt_clust+0x3a>
 80090e2:	2300      	movs	r3, #0
 80090e4:	e010      	b.n	8009108 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80090e6:	697a      	ldr	r2, [r7, #20]
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	429a      	cmp	r2, r3
 80090ec:	d307      	bcc.n	80090fe <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80090ee:	697a      	ldr	r2, [r7, #20]
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	1ad3      	subs	r3, r2, r3
 80090f4:	617b      	str	r3, [r7, #20]
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	3304      	adds	r3, #4
 80090fa:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80090fc:	e7e9      	b.n	80090d2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80090fe:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	681a      	ldr	r2, [r3, #0]
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	4413      	add	r3, r2
}
 8009108:	4618      	mov	r0, r3
 800910a:	371c      	adds	r7, #28
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr

08009114 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b086      	sub	sp, #24
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800912a:	d204      	bcs.n	8009136 <dir_sdi+0x22>
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	f003 031f 	and.w	r3, r3, #31
 8009132:	2b00      	cmp	r3, #0
 8009134:	d001      	beq.n	800913a <dir_sdi+0x26>
		return FR_INT_ERR;
 8009136:	2302      	movs	r3, #2
 8009138:	e063      	b.n	8009202 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	683a      	ldr	r2, [r7, #0]
 800913e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	689b      	ldr	r3, [r3, #8]
 8009144:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d106      	bne.n	800915a <dir_sdi+0x46>
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	2b02      	cmp	r3, #2
 8009152:	d902      	bls.n	800915a <dir_sdi+0x46>
		clst = fs->dirbase;
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009158:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d10c      	bne.n	800917a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	095b      	lsrs	r3, r3, #5
 8009164:	693a      	ldr	r2, [r7, #16]
 8009166:	8912      	ldrh	r2, [r2, #8]
 8009168:	4293      	cmp	r3, r2
 800916a:	d301      	bcc.n	8009170 <dir_sdi+0x5c>
 800916c:	2302      	movs	r3, #2
 800916e:	e048      	b.n	8009202 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	61da      	str	r2, [r3, #28]
 8009178:	e029      	b.n	80091ce <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	895b      	ldrh	r3, [r3, #10]
 800917e:	025b      	lsls	r3, r3, #9
 8009180:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009182:	e019      	b.n	80091b8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6979      	ldr	r1, [r7, #20]
 8009188:	4618      	mov	r0, r3
 800918a:	f7ff fcfe 	bl	8008b8a <get_fat>
 800918e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009196:	d101      	bne.n	800919c <dir_sdi+0x88>
 8009198:	2301      	movs	r3, #1
 800919a:	e032      	b.n	8009202 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	2b01      	cmp	r3, #1
 80091a0:	d904      	bls.n	80091ac <dir_sdi+0x98>
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	699b      	ldr	r3, [r3, #24]
 80091a6:	697a      	ldr	r2, [r7, #20]
 80091a8:	429a      	cmp	r2, r3
 80091aa:	d301      	bcc.n	80091b0 <dir_sdi+0x9c>
 80091ac:	2302      	movs	r3, #2
 80091ae:	e028      	b.n	8009202 <dir_sdi+0xee>
			ofs -= csz;
 80091b0:	683a      	ldr	r2, [r7, #0]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	1ad3      	subs	r3, r2, r3
 80091b6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80091b8:	683a      	ldr	r2, [r7, #0]
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d2e1      	bcs.n	8009184 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80091c0:	6979      	ldr	r1, [r7, #20]
 80091c2:	6938      	ldr	r0, [r7, #16]
 80091c4:	f7ff fcc2 	bl	8008b4c <clust2sect>
 80091c8:	4602      	mov	r2, r0
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	697a      	ldr	r2, [r7, #20]
 80091d2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	69db      	ldr	r3, [r3, #28]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d101      	bne.n	80091e0 <dir_sdi+0xcc>
 80091dc:	2302      	movs	r3, #2
 80091de:	e010      	b.n	8009202 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	69da      	ldr	r2, [r3, #28]
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	0a5b      	lsrs	r3, r3, #9
 80091e8:	441a      	add	r2, r3
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091fa:	441a      	add	r2, r3
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009200:	2300      	movs	r3, #0
}
 8009202:	4618      	mov	r0, r3
 8009204:	3718      	adds	r7, #24
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}

0800920a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800920a:	b580      	push	{r7, lr}
 800920c:	b086      	sub	sp, #24
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
 8009212:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	695b      	ldr	r3, [r3, #20]
 800921e:	3320      	adds	r3, #32
 8009220:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	69db      	ldr	r3, [r3, #28]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d003      	beq.n	8009232 <dir_next+0x28>
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009230:	d301      	bcc.n	8009236 <dir_next+0x2c>
 8009232:	2304      	movs	r3, #4
 8009234:	e0aa      	b.n	800938c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800923c:	2b00      	cmp	r3, #0
 800923e:	f040 8098 	bne.w	8009372 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	69db      	ldr	r3, [r3, #28]
 8009246:	1c5a      	adds	r2, r3, #1
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	699b      	ldr	r3, [r3, #24]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d10b      	bne.n	800926c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	095b      	lsrs	r3, r3, #5
 8009258:	68fa      	ldr	r2, [r7, #12]
 800925a:	8912      	ldrh	r2, [r2, #8]
 800925c:	4293      	cmp	r3, r2
 800925e:	f0c0 8088 	bcc.w	8009372 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2200      	movs	r2, #0
 8009266:	61da      	str	r2, [r3, #28]
 8009268:	2304      	movs	r3, #4
 800926a:	e08f      	b.n	800938c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	0a5b      	lsrs	r3, r3, #9
 8009270:	68fa      	ldr	r2, [r7, #12]
 8009272:	8952      	ldrh	r2, [r2, #10]
 8009274:	3a01      	subs	r2, #1
 8009276:	4013      	ands	r3, r2
 8009278:	2b00      	cmp	r3, #0
 800927a:	d17a      	bne.n	8009372 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	699b      	ldr	r3, [r3, #24]
 8009282:	4619      	mov	r1, r3
 8009284:	4610      	mov	r0, r2
 8009286:	f7ff fc80 	bl	8008b8a <get_fat>
 800928a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	2b01      	cmp	r3, #1
 8009290:	d801      	bhi.n	8009296 <dir_next+0x8c>
 8009292:	2302      	movs	r3, #2
 8009294:	e07a      	b.n	800938c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800929c:	d101      	bne.n	80092a2 <dir_next+0x98>
 800929e:	2301      	movs	r3, #1
 80092a0:	e074      	b.n	800938c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	699b      	ldr	r3, [r3, #24]
 80092a6:	697a      	ldr	r2, [r7, #20]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d358      	bcc.n	800935e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d104      	bne.n	80092bc <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2200      	movs	r2, #0
 80092b6:	61da      	str	r2, [r3, #28]
 80092b8:	2304      	movs	r3, #4
 80092ba:	e067      	b.n	800938c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80092bc:	687a      	ldr	r2, [r7, #4]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	699b      	ldr	r3, [r3, #24]
 80092c2:	4619      	mov	r1, r3
 80092c4:	4610      	mov	r0, r2
 80092c6:	f7ff fe59 	bl	8008f7c <create_chain>
 80092ca:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d101      	bne.n	80092d6 <dir_next+0xcc>
 80092d2:	2307      	movs	r3, #7
 80092d4:	e05a      	b.n	800938c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	2b01      	cmp	r3, #1
 80092da:	d101      	bne.n	80092e0 <dir_next+0xd6>
 80092dc:	2302      	movs	r3, #2
 80092de:	e055      	b.n	800938c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092e6:	d101      	bne.n	80092ec <dir_next+0xe2>
 80092e8:	2301      	movs	r3, #1
 80092ea:	e04f      	b.n	800938c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80092ec:	68f8      	ldr	r0, [r7, #12]
 80092ee:	f7ff fb4d 	bl	800898c <sync_window>
 80092f2:	4603      	mov	r3, r0
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d001      	beq.n	80092fc <dir_next+0xf2>
 80092f8:	2301      	movs	r3, #1
 80092fa:	e047      	b.n	800938c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	3334      	adds	r3, #52	; 0x34
 8009300:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009304:	2100      	movs	r1, #0
 8009306:	4618      	mov	r0, r3
 8009308:	f7ff f945 	bl	8008596 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800930c:	2300      	movs	r3, #0
 800930e:	613b      	str	r3, [r7, #16]
 8009310:	6979      	ldr	r1, [r7, #20]
 8009312:	68f8      	ldr	r0, [r7, #12]
 8009314:	f7ff fc1a 	bl	8008b4c <clust2sect>
 8009318:	4602      	mov	r2, r0
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	631a      	str	r2, [r3, #48]	; 0x30
 800931e:	e012      	b.n	8009346 <dir_next+0x13c>
						fs->wflag = 1;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2201      	movs	r2, #1
 8009324:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009326:	68f8      	ldr	r0, [r7, #12]
 8009328:	f7ff fb30 	bl	800898c <sync_window>
 800932c:	4603      	mov	r3, r0
 800932e:	2b00      	cmp	r3, #0
 8009330:	d001      	beq.n	8009336 <dir_next+0x12c>
 8009332:	2301      	movs	r3, #1
 8009334:	e02a      	b.n	800938c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	3301      	adds	r3, #1
 800933a:	613b      	str	r3, [r7, #16]
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009340:	1c5a      	adds	r2, r3, #1
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	631a      	str	r2, [r3, #48]	; 0x30
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	895b      	ldrh	r3, [r3, #10]
 800934a:	461a      	mov	r2, r3
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	4293      	cmp	r3, r2
 8009350:	d3e6      	bcc.n	8009320 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	1ad2      	subs	r2, r2, r3
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	697a      	ldr	r2, [r7, #20]
 8009362:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009364:	6979      	ldr	r1, [r7, #20]
 8009366:	68f8      	ldr	r0, [r7, #12]
 8009368:	f7ff fbf0 	bl	8008b4c <clust2sect>
 800936c:	4602      	mov	r2, r0
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	68ba      	ldr	r2, [r7, #8]
 8009376:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009384:	441a      	add	r2, r3
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800938a:	2300      	movs	r3, #0
}
 800938c:	4618      	mov	r0, r3
 800938e:	3718      	adds	r7, #24
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}

08009394 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b086      	sub	sp, #24
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
 800939c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80093a4:	2100      	movs	r1, #0
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f7ff feb4 	bl	8009114 <dir_sdi>
 80093ac:	4603      	mov	r3, r0
 80093ae:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80093b0:	7dfb      	ldrb	r3, [r7, #23]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d12b      	bne.n	800940e <dir_alloc+0x7a>
		n = 0;
 80093b6:	2300      	movs	r3, #0
 80093b8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	69db      	ldr	r3, [r3, #28]
 80093be:	4619      	mov	r1, r3
 80093c0:	68f8      	ldr	r0, [r7, #12]
 80093c2:	f7ff fb27 	bl	8008a14 <move_window>
 80093c6:	4603      	mov	r3, r0
 80093c8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80093ca:	7dfb      	ldrb	r3, [r7, #23]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d11d      	bne.n	800940c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6a1b      	ldr	r3, [r3, #32]
 80093d4:	781b      	ldrb	r3, [r3, #0]
 80093d6:	2be5      	cmp	r3, #229	; 0xe5
 80093d8:	d004      	beq.n	80093e4 <dir_alloc+0x50>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6a1b      	ldr	r3, [r3, #32]
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d107      	bne.n	80093f4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	3301      	adds	r3, #1
 80093e8:	613b      	str	r3, [r7, #16]
 80093ea:	693a      	ldr	r2, [r7, #16]
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	429a      	cmp	r2, r3
 80093f0:	d102      	bne.n	80093f8 <dir_alloc+0x64>
 80093f2:	e00c      	b.n	800940e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80093f4:	2300      	movs	r3, #0
 80093f6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80093f8:	2101      	movs	r1, #1
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f7ff ff05 	bl	800920a <dir_next>
 8009400:	4603      	mov	r3, r0
 8009402:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009404:	7dfb      	ldrb	r3, [r7, #23]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d0d7      	beq.n	80093ba <dir_alloc+0x26>
 800940a:	e000      	b.n	800940e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800940c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800940e:	7dfb      	ldrb	r3, [r7, #23]
 8009410:	2b04      	cmp	r3, #4
 8009412:	d101      	bne.n	8009418 <dir_alloc+0x84>
 8009414:	2307      	movs	r3, #7
 8009416:	75fb      	strb	r3, [r7, #23]
	return res;
 8009418:	7dfb      	ldrb	r3, [r7, #23]
}
 800941a:	4618      	mov	r0, r3
 800941c:	3718      	adds	r7, #24
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}

08009422 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009422:	b580      	push	{r7, lr}
 8009424:	b084      	sub	sp, #16
 8009426:	af00      	add	r7, sp, #0
 8009428:	6078      	str	r0, [r7, #4]
 800942a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	331a      	adds	r3, #26
 8009430:	4618      	mov	r0, r3
 8009432:	f7ff f80d 	bl	8008450 <ld_word>
 8009436:	4603      	mov	r3, r0
 8009438:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	781b      	ldrb	r3, [r3, #0]
 800943e:	2b03      	cmp	r3, #3
 8009440:	d109      	bne.n	8009456 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	3314      	adds	r3, #20
 8009446:	4618      	mov	r0, r3
 8009448:	f7ff f802 	bl	8008450 <ld_word>
 800944c:	4603      	mov	r3, r0
 800944e:	041b      	lsls	r3, r3, #16
 8009450:	68fa      	ldr	r2, [r7, #12]
 8009452:	4313      	orrs	r3, r2
 8009454:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009456:	68fb      	ldr	r3, [r7, #12]
}
 8009458:	4618      	mov	r0, r3
 800945a:	3710      	adds	r7, #16
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}

08009460 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b084      	sub	sp, #16
 8009464:	af00      	add	r7, sp, #0
 8009466:	60f8      	str	r0, [r7, #12]
 8009468:	60b9      	str	r1, [r7, #8]
 800946a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	331a      	adds	r3, #26
 8009470:	687a      	ldr	r2, [r7, #4]
 8009472:	b292      	uxth	r2, r2
 8009474:	4611      	mov	r1, r2
 8009476:	4618      	mov	r0, r3
 8009478:	f7ff f825 	bl	80084c6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	781b      	ldrb	r3, [r3, #0]
 8009480:	2b03      	cmp	r3, #3
 8009482:	d109      	bne.n	8009498 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	f103 0214 	add.w	r2, r3, #20
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	0c1b      	lsrs	r3, r3, #16
 800948e:	b29b      	uxth	r3, r3
 8009490:	4619      	mov	r1, r3
 8009492:	4610      	mov	r0, r2
 8009494:	f7ff f817 	bl	80084c6 <st_word>
	}
}
 8009498:	bf00      	nop
 800949a:	3710      	adds	r7, #16
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}

080094a0 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b086      	sub	sp, #24
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80094aa:	2304      	movs	r3, #4
 80094ac:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80094b4:	e03c      	b.n	8009530 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	69db      	ldr	r3, [r3, #28]
 80094ba:	4619      	mov	r1, r3
 80094bc:	6938      	ldr	r0, [r7, #16]
 80094be:	f7ff faa9 	bl	8008a14 <move_window>
 80094c2:	4603      	mov	r3, r0
 80094c4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80094c6:	7dfb      	ldrb	r3, [r7, #23]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d136      	bne.n	800953a <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6a1b      	ldr	r3, [r3, #32]
 80094d0:	781b      	ldrb	r3, [r3, #0]
 80094d2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80094d4:	7bfb      	ldrb	r3, [r7, #15]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d102      	bne.n	80094e0 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80094da:	2304      	movs	r3, #4
 80094dc:	75fb      	strb	r3, [r7, #23]
 80094de:	e031      	b.n	8009544 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6a1b      	ldr	r3, [r3, #32]
 80094e4:	330b      	adds	r3, #11
 80094e6:	781b      	ldrb	r3, [r3, #0]
 80094e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80094ec:	73bb      	strb	r3, [r7, #14]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	7bba      	ldrb	r2, [r7, #14]
 80094f2:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80094f4:	7bfb      	ldrb	r3, [r7, #15]
 80094f6:	2be5      	cmp	r3, #229	; 0xe5
 80094f8:	d011      	beq.n	800951e <dir_read+0x7e>
 80094fa:	7bfb      	ldrb	r3, [r7, #15]
 80094fc:	2b2e      	cmp	r3, #46	; 0x2e
 80094fe:	d00e      	beq.n	800951e <dir_read+0x7e>
 8009500:	7bbb      	ldrb	r3, [r7, #14]
 8009502:	2b0f      	cmp	r3, #15
 8009504:	d00b      	beq.n	800951e <dir_read+0x7e>
 8009506:	7bbb      	ldrb	r3, [r7, #14]
 8009508:	f023 0320 	bic.w	r3, r3, #32
 800950c:	2b08      	cmp	r3, #8
 800950e:	bf0c      	ite	eq
 8009510:	2301      	moveq	r3, #1
 8009512:	2300      	movne	r3, #0
 8009514:	b2db      	uxtb	r3, r3
 8009516:	461a      	mov	r2, r3
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	4293      	cmp	r3, r2
 800951c:	d00f      	beq.n	800953e <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800951e:	2100      	movs	r1, #0
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f7ff fe72 	bl	800920a <dir_next>
 8009526:	4603      	mov	r3, r0
 8009528:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800952a:	7dfb      	ldrb	r3, [r7, #23]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d108      	bne.n	8009542 <dir_read+0xa2>
	while (dp->sect) {
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	69db      	ldr	r3, [r3, #28]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d1be      	bne.n	80094b6 <dir_read+0x16>
 8009538:	e004      	b.n	8009544 <dir_read+0xa4>
		if (res != FR_OK) break;
 800953a:	bf00      	nop
 800953c:	e002      	b.n	8009544 <dir_read+0xa4>
				break;
 800953e:	bf00      	nop
 8009540:	e000      	b.n	8009544 <dir_read+0xa4>
		if (res != FR_OK) break;
 8009542:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8009544:	7dfb      	ldrb	r3, [r7, #23]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d002      	beq.n	8009550 <dir_read+0xb0>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2200      	movs	r2, #0
 800954e:	61da      	str	r2, [r3, #28]
	return res;
 8009550:	7dfb      	ldrb	r3, [r7, #23]
}
 8009552:	4618      	mov	r0, r3
 8009554:	3718      	adds	r7, #24
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}

0800955a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800955a:	b580      	push	{r7, lr}
 800955c:	b086      	sub	sp, #24
 800955e:	af00      	add	r7, sp, #0
 8009560:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009568:	2100      	movs	r1, #0
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f7ff fdd2 	bl	8009114 <dir_sdi>
 8009570:	4603      	mov	r3, r0
 8009572:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009574:	7dfb      	ldrb	r3, [r7, #23]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d001      	beq.n	800957e <dir_find+0x24>
 800957a:	7dfb      	ldrb	r3, [r7, #23]
 800957c:	e03e      	b.n	80095fc <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	69db      	ldr	r3, [r3, #28]
 8009582:	4619      	mov	r1, r3
 8009584:	6938      	ldr	r0, [r7, #16]
 8009586:	f7ff fa45 	bl	8008a14 <move_window>
 800958a:	4603      	mov	r3, r0
 800958c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800958e:	7dfb      	ldrb	r3, [r7, #23]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d12f      	bne.n	80095f4 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6a1b      	ldr	r3, [r3, #32]
 8009598:	781b      	ldrb	r3, [r3, #0]
 800959a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800959c:	7bfb      	ldrb	r3, [r7, #15]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d102      	bne.n	80095a8 <dir_find+0x4e>
 80095a2:	2304      	movs	r3, #4
 80095a4:	75fb      	strb	r3, [r7, #23]
 80095a6:	e028      	b.n	80095fa <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6a1b      	ldr	r3, [r3, #32]
 80095ac:	330b      	adds	r3, #11
 80095ae:	781b      	ldrb	r3, [r3, #0]
 80095b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80095b4:	b2da      	uxtb	r2, r3
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6a1b      	ldr	r3, [r3, #32]
 80095be:	330b      	adds	r3, #11
 80095c0:	781b      	ldrb	r3, [r3, #0]
 80095c2:	f003 0308 	and.w	r3, r3, #8
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d10a      	bne.n	80095e0 <dir_find+0x86>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6a18      	ldr	r0, [r3, #32]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	3324      	adds	r3, #36	; 0x24
 80095d2:	220b      	movs	r2, #11
 80095d4:	4619      	mov	r1, r3
 80095d6:	f7fe fff9 	bl	80085cc <mem_cmp>
 80095da:	4603      	mov	r3, r0
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d00b      	beq.n	80095f8 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80095e0:	2100      	movs	r1, #0
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f7ff fe11 	bl	800920a <dir_next>
 80095e8:	4603      	mov	r3, r0
 80095ea:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80095ec:	7dfb      	ldrb	r3, [r7, #23]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d0c5      	beq.n	800957e <dir_find+0x24>
 80095f2:	e002      	b.n	80095fa <dir_find+0xa0>
		if (res != FR_OK) break;
 80095f4:	bf00      	nop
 80095f6:	e000      	b.n	80095fa <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80095f8:	bf00      	nop

	return res;
 80095fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3718      	adds	r7, #24
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b084      	sub	sp, #16
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009612:	2101      	movs	r1, #1
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f7ff febd 	bl	8009394 <dir_alloc>
 800961a:	4603      	mov	r3, r0
 800961c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800961e:	7bfb      	ldrb	r3, [r7, #15]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d11c      	bne.n	800965e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	69db      	ldr	r3, [r3, #28]
 8009628:	4619      	mov	r1, r3
 800962a:	68b8      	ldr	r0, [r7, #8]
 800962c:	f7ff f9f2 	bl	8008a14 <move_window>
 8009630:	4603      	mov	r3, r0
 8009632:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009634:	7bfb      	ldrb	r3, [r7, #15]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d111      	bne.n	800965e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6a1b      	ldr	r3, [r3, #32]
 800963e:	2220      	movs	r2, #32
 8009640:	2100      	movs	r1, #0
 8009642:	4618      	mov	r0, r3
 8009644:	f7fe ffa7 	bl	8008596 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6a18      	ldr	r0, [r3, #32]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	3324      	adds	r3, #36	; 0x24
 8009650:	220b      	movs	r2, #11
 8009652:	4619      	mov	r1, r3
 8009654:	f7fe ff7e 	bl	8008554 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	2201      	movs	r2, #1
 800965c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800965e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009660:	4618      	mov	r0, r3
 8009662:	3710      	adds	r7, #16
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b084      	sub	sp, #16
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	69db      	ldr	r3, [r3, #28]
 800967a:	4619      	mov	r1, r3
 800967c:	68f8      	ldr	r0, [r7, #12]
 800967e:	f7ff f9c9 	bl	8008a14 <move_window>
 8009682:	4603      	mov	r3, r0
 8009684:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8009686:	7afb      	ldrb	r3, [r7, #11]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d106      	bne.n	800969a <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6a1b      	ldr	r3, [r3, #32]
 8009690:	22e5      	movs	r2, #229	; 0xe5
 8009692:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2201      	movs	r2, #1
 8009698:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 800969a:	7afb      	ldrb	r3, [r7, #11]
}
 800969c:	4618      	mov	r0, r3
 800969e:	3710      	adds	r7, #16
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b086      	sub	sp, #24
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	2200      	movs	r2, #0
 80096b2:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	69db      	ldr	r3, [r3, #28]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d04e      	beq.n	800975a <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 80096bc:	2300      	movs	r3, #0
 80096be:	613b      	str	r3, [r7, #16]
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 80096c4:	e021      	b.n	800970a <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6a1a      	ldr	r2, [r3, #32]
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	1c59      	adds	r1, r3, #1
 80096ce:	6179      	str	r1, [r7, #20]
 80096d0:	4413      	add	r3, r2
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 80096d6:	7bfb      	ldrb	r3, [r7, #15]
 80096d8:	2b20      	cmp	r3, #32
 80096da:	d100      	bne.n	80096de <get_fileinfo+0x3a>
 80096dc:	e015      	b.n	800970a <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80096de:	7bfb      	ldrb	r3, [r7, #15]
 80096e0:	2b05      	cmp	r3, #5
 80096e2:	d101      	bne.n	80096e8 <get_fileinfo+0x44>
 80096e4:	23e5      	movs	r3, #229	; 0xe5
 80096e6:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	2b09      	cmp	r3, #9
 80096ec:	d106      	bne.n	80096fc <get_fileinfo+0x58>
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	1c5a      	adds	r2, r3, #1
 80096f2:	613a      	str	r2, [r7, #16]
 80096f4:	683a      	ldr	r2, [r7, #0]
 80096f6:	4413      	add	r3, r2
 80096f8:	222e      	movs	r2, #46	; 0x2e
 80096fa:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	1c5a      	adds	r2, r3, #1
 8009700:	613a      	str	r2, [r7, #16]
 8009702:	683a      	ldr	r2, [r7, #0]
 8009704:	4413      	add	r3, r2
 8009706:	7bfa      	ldrb	r2, [r7, #15]
 8009708:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	2b0a      	cmp	r3, #10
 800970e:	d9da      	bls.n	80096c6 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8009710:	683a      	ldr	r2, [r7, #0]
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	4413      	add	r3, r2
 8009716:	3309      	adds	r3, #9
 8009718:	2200      	movs	r2, #0
 800971a:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6a1b      	ldr	r3, [r3, #32]
 8009720:	7ada      	ldrb	r2, [r3, #11]
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6a1b      	ldr	r3, [r3, #32]
 800972a:	331c      	adds	r3, #28
 800972c:	4618      	mov	r0, r3
 800972e:	f7fe fea7 	bl	8008480 <ld_dword>
 8009732:	4602      	mov	r2, r0
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6a1b      	ldr	r3, [r3, #32]
 800973c:	3316      	adds	r3, #22
 800973e:	4618      	mov	r0, r3
 8009740:	f7fe fe9e 	bl	8008480 <ld_dword>
 8009744:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	b29a      	uxth	r2, r3
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	80da      	strh	r2, [r3, #6]
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	0c1b      	lsrs	r3, r3, #16
 8009752:	b29a      	uxth	r2, r3
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	809a      	strh	r2, [r3, #4]
 8009758:	e000      	b.n	800975c <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800975a:	bf00      	nop
}
 800975c:	3718      	adds	r7, #24
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
	...

08009764 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b088      	sub	sp, #32
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	60fb      	str	r3, [r7, #12]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	3324      	adds	r3, #36	; 0x24
 8009778:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800977a:	220b      	movs	r2, #11
 800977c:	2120      	movs	r1, #32
 800977e:	68b8      	ldr	r0, [r7, #8]
 8009780:	f7fe ff09 	bl	8008596 <mem_set>
	si = i = 0; ni = 8;
 8009784:	2300      	movs	r3, #0
 8009786:	613b      	str	r3, [r7, #16]
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	61fb      	str	r3, [r7, #28]
 800978c:	2308      	movs	r3, #8
 800978e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009790:	69fb      	ldr	r3, [r7, #28]
 8009792:	1c5a      	adds	r2, r3, #1
 8009794:	61fa      	str	r2, [r7, #28]
 8009796:	68fa      	ldr	r2, [r7, #12]
 8009798:	4413      	add	r3, r2
 800979a:	781b      	ldrb	r3, [r3, #0]
 800979c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800979e:	7efb      	ldrb	r3, [r7, #27]
 80097a0:	2b20      	cmp	r3, #32
 80097a2:	d94e      	bls.n	8009842 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80097a4:	7efb      	ldrb	r3, [r7, #27]
 80097a6:	2b2f      	cmp	r3, #47	; 0x2f
 80097a8:	d006      	beq.n	80097b8 <create_name+0x54>
 80097aa:	7efb      	ldrb	r3, [r7, #27]
 80097ac:	2b5c      	cmp	r3, #92	; 0x5c
 80097ae:	d110      	bne.n	80097d2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80097b0:	e002      	b.n	80097b8 <create_name+0x54>
 80097b2:	69fb      	ldr	r3, [r7, #28]
 80097b4:	3301      	adds	r3, #1
 80097b6:	61fb      	str	r3, [r7, #28]
 80097b8:	68fa      	ldr	r2, [r7, #12]
 80097ba:	69fb      	ldr	r3, [r7, #28]
 80097bc:	4413      	add	r3, r2
 80097be:	781b      	ldrb	r3, [r3, #0]
 80097c0:	2b2f      	cmp	r3, #47	; 0x2f
 80097c2:	d0f6      	beq.n	80097b2 <create_name+0x4e>
 80097c4:	68fa      	ldr	r2, [r7, #12]
 80097c6:	69fb      	ldr	r3, [r7, #28]
 80097c8:	4413      	add	r3, r2
 80097ca:	781b      	ldrb	r3, [r3, #0]
 80097cc:	2b5c      	cmp	r3, #92	; 0x5c
 80097ce:	d0f0      	beq.n	80097b2 <create_name+0x4e>
			break;
 80097d0:	e038      	b.n	8009844 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80097d2:	7efb      	ldrb	r3, [r7, #27]
 80097d4:	2b2e      	cmp	r3, #46	; 0x2e
 80097d6:	d003      	beq.n	80097e0 <create_name+0x7c>
 80097d8:	693a      	ldr	r2, [r7, #16]
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	429a      	cmp	r2, r3
 80097de:	d30c      	bcc.n	80097fa <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	2b0b      	cmp	r3, #11
 80097e4:	d002      	beq.n	80097ec <create_name+0x88>
 80097e6:	7efb      	ldrb	r3, [r7, #27]
 80097e8:	2b2e      	cmp	r3, #46	; 0x2e
 80097ea:	d001      	beq.n	80097f0 <create_name+0x8c>
 80097ec:	2306      	movs	r3, #6
 80097ee:	e044      	b.n	800987a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80097f0:	2308      	movs	r3, #8
 80097f2:	613b      	str	r3, [r7, #16]
 80097f4:	230b      	movs	r3, #11
 80097f6:	617b      	str	r3, [r7, #20]
			continue;
 80097f8:	e022      	b.n	8009840 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80097fa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	da04      	bge.n	800980c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009802:	7efb      	ldrb	r3, [r7, #27]
 8009804:	3b80      	subs	r3, #128	; 0x80
 8009806:	4a1f      	ldr	r2, [pc, #124]	; (8009884 <create_name+0x120>)
 8009808:	5cd3      	ldrb	r3, [r2, r3]
 800980a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800980c:	7efb      	ldrb	r3, [r7, #27]
 800980e:	4619      	mov	r1, r3
 8009810:	481d      	ldr	r0, [pc, #116]	; (8009888 <create_name+0x124>)
 8009812:	f7fe ff02 	bl	800861a <chk_chr>
 8009816:	4603      	mov	r3, r0
 8009818:	2b00      	cmp	r3, #0
 800981a:	d001      	beq.n	8009820 <create_name+0xbc>
 800981c:	2306      	movs	r3, #6
 800981e:	e02c      	b.n	800987a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009820:	7efb      	ldrb	r3, [r7, #27]
 8009822:	2b60      	cmp	r3, #96	; 0x60
 8009824:	d905      	bls.n	8009832 <create_name+0xce>
 8009826:	7efb      	ldrb	r3, [r7, #27]
 8009828:	2b7a      	cmp	r3, #122	; 0x7a
 800982a:	d802      	bhi.n	8009832 <create_name+0xce>
 800982c:	7efb      	ldrb	r3, [r7, #27]
 800982e:	3b20      	subs	r3, #32
 8009830:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	1c5a      	adds	r2, r3, #1
 8009836:	613a      	str	r2, [r7, #16]
 8009838:	68ba      	ldr	r2, [r7, #8]
 800983a:	4413      	add	r3, r2
 800983c:	7efa      	ldrb	r2, [r7, #27]
 800983e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009840:	e7a6      	b.n	8009790 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009842:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009844:	68fa      	ldr	r2, [r7, #12]
 8009846:	69fb      	ldr	r3, [r7, #28]
 8009848:	441a      	add	r2, r3
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d101      	bne.n	8009858 <create_name+0xf4>
 8009854:	2306      	movs	r3, #6
 8009856:	e010      	b.n	800987a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	781b      	ldrb	r3, [r3, #0]
 800985c:	2be5      	cmp	r3, #229	; 0xe5
 800985e:	d102      	bne.n	8009866 <create_name+0x102>
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	2205      	movs	r2, #5
 8009864:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009866:	7efb      	ldrb	r3, [r7, #27]
 8009868:	2b20      	cmp	r3, #32
 800986a:	d801      	bhi.n	8009870 <create_name+0x10c>
 800986c:	2204      	movs	r2, #4
 800986e:	e000      	b.n	8009872 <create_name+0x10e>
 8009870:	2200      	movs	r2, #0
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	330b      	adds	r3, #11
 8009876:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009878:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800987a:	4618      	mov	r0, r3
 800987c:	3720      	adds	r7, #32
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}
 8009882:	bf00      	nop
 8009884:	0800fa74 	.word	0x0800fa74
 8009888:	0800f92c 	.word	0x0800f92c

0800988c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b086      	sub	sp, #24
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80098a0:	e002      	b.n	80098a8 <follow_path+0x1c>
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	3301      	adds	r3, #1
 80098a6:	603b      	str	r3, [r7, #0]
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	781b      	ldrb	r3, [r3, #0]
 80098ac:	2b2f      	cmp	r3, #47	; 0x2f
 80098ae:	d0f8      	beq.n	80098a2 <follow_path+0x16>
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	781b      	ldrb	r3, [r3, #0]
 80098b4:	2b5c      	cmp	r3, #92	; 0x5c
 80098b6:	d0f4      	beq.n	80098a2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	2200      	movs	r2, #0
 80098bc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	781b      	ldrb	r3, [r3, #0]
 80098c2:	2b1f      	cmp	r3, #31
 80098c4:	d80a      	bhi.n	80098dc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2280      	movs	r2, #128	; 0x80
 80098ca:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80098ce:	2100      	movs	r1, #0
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f7ff fc1f 	bl	8009114 <dir_sdi>
 80098d6:	4603      	mov	r3, r0
 80098d8:	75fb      	strb	r3, [r7, #23]
 80098da:	e043      	b.n	8009964 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80098dc:	463b      	mov	r3, r7
 80098de:	4619      	mov	r1, r3
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f7ff ff3f 	bl	8009764 <create_name>
 80098e6:	4603      	mov	r3, r0
 80098e8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80098ea:	7dfb      	ldrb	r3, [r7, #23]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d134      	bne.n	800995a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f7ff fe32 	bl	800955a <dir_find>
 80098f6:	4603      	mov	r3, r0
 80098f8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009900:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009902:	7dfb      	ldrb	r3, [r7, #23]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d00a      	beq.n	800991e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009908:	7dfb      	ldrb	r3, [r7, #23]
 800990a:	2b04      	cmp	r3, #4
 800990c:	d127      	bne.n	800995e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800990e:	7afb      	ldrb	r3, [r7, #11]
 8009910:	f003 0304 	and.w	r3, r3, #4
 8009914:	2b00      	cmp	r3, #0
 8009916:	d122      	bne.n	800995e <follow_path+0xd2>
 8009918:	2305      	movs	r3, #5
 800991a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800991c:	e01f      	b.n	800995e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800991e:	7afb      	ldrb	r3, [r7, #11]
 8009920:	f003 0304 	and.w	r3, r3, #4
 8009924:	2b00      	cmp	r3, #0
 8009926:	d11c      	bne.n	8009962 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	799b      	ldrb	r3, [r3, #6]
 800992c:	f003 0310 	and.w	r3, r3, #16
 8009930:	2b00      	cmp	r3, #0
 8009932:	d102      	bne.n	800993a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009934:	2305      	movs	r3, #5
 8009936:	75fb      	strb	r3, [r7, #23]
 8009938:	e014      	b.n	8009964 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	695b      	ldr	r3, [r3, #20]
 8009944:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009948:	4413      	add	r3, r2
 800994a:	4619      	mov	r1, r3
 800994c:	68f8      	ldr	r0, [r7, #12]
 800994e:	f7ff fd68 	bl	8009422 <ld_clust>
 8009952:	4602      	mov	r2, r0
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009958:	e7c0      	b.n	80098dc <follow_path+0x50>
			if (res != FR_OK) break;
 800995a:	bf00      	nop
 800995c:	e002      	b.n	8009964 <follow_path+0xd8>
				break;
 800995e:	bf00      	nop
 8009960:	e000      	b.n	8009964 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009962:	bf00      	nop
			}
		}
	}

	return res;
 8009964:	7dfb      	ldrb	r3, [r7, #23]
}
 8009966:	4618      	mov	r0, r3
 8009968:	3718      	adds	r7, #24
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}

0800996e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800996e:	b480      	push	{r7}
 8009970:	b087      	sub	sp, #28
 8009972:	af00      	add	r7, sp, #0
 8009974:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009976:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800997a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d031      	beq.n	80099e8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	617b      	str	r3, [r7, #20]
 800998a:	e002      	b.n	8009992 <get_ldnumber+0x24>
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	3301      	adds	r3, #1
 8009990:	617b      	str	r3, [r7, #20]
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	781b      	ldrb	r3, [r3, #0]
 8009996:	2b20      	cmp	r3, #32
 8009998:	d903      	bls.n	80099a2 <get_ldnumber+0x34>
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	781b      	ldrb	r3, [r3, #0]
 800999e:	2b3a      	cmp	r3, #58	; 0x3a
 80099a0:	d1f4      	bne.n	800998c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	781b      	ldrb	r3, [r3, #0]
 80099a6:	2b3a      	cmp	r3, #58	; 0x3a
 80099a8:	d11c      	bne.n	80099e4 <get_ldnumber+0x76>
			tp = *path;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	1c5a      	adds	r2, r3, #1
 80099b4:	60fa      	str	r2, [r7, #12]
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	3b30      	subs	r3, #48	; 0x30
 80099ba:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	2b09      	cmp	r3, #9
 80099c0:	d80e      	bhi.n	80099e0 <get_ldnumber+0x72>
 80099c2:	68fa      	ldr	r2, [r7, #12]
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	429a      	cmp	r2, r3
 80099c8:	d10a      	bne.n	80099e0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d107      	bne.n	80099e0 <get_ldnumber+0x72>
					vol = (int)i;
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	3301      	adds	r3, #1
 80099d8:	617b      	str	r3, [r7, #20]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	697a      	ldr	r2, [r7, #20]
 80099de:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	e002      	b.n	80099ea <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80099e4:	2300      	movs	r3, #0
 80099e6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80099e8:	693b      	ldr	r3, [r7, #16]
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	371c      	adds	r7, #28
 80099ee:	46bd      	mov	sp, r7
 80099f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f4:	4770      	bx	lr
	...

080099f8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2200      	movs	r2, #0
 8009a06:	70da      	strb	r2, [r3, #3]
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a0e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009a10:	6839      	ldr	r1, [r7, #0]
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f7fe fffe 	bl	8008a14 <move_window>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d001      	beq.n	8009a22 <check_fs+0x2a>
 8009a1e:	2304      	movs	r3, #4
 8009a20:	e038      	b.n	8009a94 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	3334      	adds	r3, #52	; 0x34
 8009a26:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f7fe fd10 	bl	8008450 <ld_word>
 8009a30:	4603      	mov	r3, r0
 8009a32:	461a      	mov	r2, r3
 8009a34:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	d001      	beq.n	8009a40 <check_fs+0x48>
 8009a3c:	2303      	movs	r3, #3
 8009a3e:	e029      	b.n	8009a94 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009a46:	2be9      	cmp	r3, #233	; 0xe9
 8009a48:	d009      	beq.n	8009a5e <check_fs+0x66>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009a50:	2beb      	cmp	r3, #235	; 0xeb
 8009a52:	d11e      	bne.n	8009a92 <check_fs+0x9a>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009a5a:	2b90      	cmp	r3, #144	; 0x90
 8009a5c:	d119      	bne.n	8009a92 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	3334      	adds	r3, #52	; 0x34
 8009a62:	3336      	adds	r3, #54	; 0x36
 8009a64:	4618      	mov	r0, r3
 8009a66:	f7fe fd0b 	bl	8008480 <ld_dword>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009a70:	4a0a      	ldr	r2, [pc, #40]	; (8009a9c <check_fs+0xa4>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d101      	bne.n	8009a7a <check_fs+0x82>
 8009a76:	2300      	movs	r3, #0
 8009a78:	e00c      	b.n	8009a94 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	3334      	adds	r3, #52	; 0x34
 8009a7e:	3352      	adds	r3, #82	; 0x52
 8009a80:	4618      	mov	r0, r3
 8009a82:	f7fe fcfd 	bl	8008480 <ld_dword>
 8009a86:	4603      	mov	r3, r0
 8009a88:	4a05      	ldr	r2, [pc, #20]	; (8009aa0 <check_fs+0xa8>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d101      	bne.n	8009a92 <check_fs+0x9a>
 8009a8e:	2300      	movs	r3, #0
 8009a90:	e000      	b.n	8009a94 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009a92:	2302      	movs	r3, #2
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3708      	adds	r7, #8
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}
 8009a9c:	00544146 	.word	0x00544146
 8009aa0:	33544146 	.word	0x33544146

08009aa4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b096      	sub	sp, #88	; 0x58
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	60f8      	str	r0, [r7, #12]
 8009aac:	60b9      	str	r1, [r7, #8]
 8009aae:	4613      	mov	r3, r2
 8009ab0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009ab8:	68f8      	ldr	r0, [r7, #12]
 8009aba:	f7ff ff58 	bl	800996e <get_ldnumber>
 8009abe:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	da01      	bge.n	8009aca <find_volume+0x26>
 8009ac6:	230b      	movs	r3, #11
 8009ac8:	e235      	b.n	8009f36 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009aca:	4aa5      	ldr	r2, [pc, #660]	; (8009d60 <find_volume+0x2bc>)
 8009acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ad2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d101      	bne.n	8009ade <find_volume+0x3a>
 8009ada:	230c      	movs	r3, #12
 8009adc:	e22b      	b.n	8009f36 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 8009ade:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009ae0:	f7fe fdb6 	bl	8008650 <lock_fs>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d101      	bne.n	8009aee <find_volume+0x4a>
 8009aea:	230f      	movs	r3, #15
 8009aec:	e223      	b.n	8009f36 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009af2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009af4:	79fb      	ldrb	r3, [r7, #7]
 8009af6:	f023 0301 	bic.w	r3, r3, #1
 8009afa:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009afe:	781b      	ldrb	r3, [r3, #0]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d01a      	beq.n	8009b3a <find_volume+0x96>
		stat = disk_status(fs->drv);
 8009b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b06:	785b      	ldrb	r3, [r3, #1]
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f7fe fc03 	bl	8008314 <disk_status>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009b14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009b18:	f003 0301 	and.w	r3, r3, #1
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d10c      	bne.n	8009b3a <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009b20:	79fb      	ldrb	r3, [r7, #7]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d007      	beq.n	8009b36 <find_volume+0x92>
 8009b26:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009b2a:	f003 0304 	and.w	r3, r3, #4
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d001      	beq.n	8009b36 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8009b32:	230a      	movs	r3, #10
 8009b34:	e1ff      	b.n	8009f36 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 8009b36:	2300      	movs	r3, #0
 8009b38:	e1fd      	b.n	8009f36 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b42:	b2da      	uxtb	r2, r3
 8009b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b46:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b4a:	785b      	ldrb	r3, [r3, #1]
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f7fe fbfb 	bl	8008348 <disk_initialize>
 8009b52:	4603      	mov	r3, r0
 8009b54:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009b58:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009b5c:	f003 0301 	and.w	r3, r3, #1
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d001      	beq.n	8009b68 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009b64:	2303      	movs	r3, #3
 8009b66:	e1e6      	b.n	8009f36 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009b68:	79fb      	ldrb	r3, [r7, #7]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d007      	beq.n	8009b7e <find_volume+0xda>
 8009b6e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009b72:	f003 0304 	and.w	r3, r3, #4
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d001      	beq.n	8009b7e <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8009b7a:	230a      	movs	r3, #10
 8009b7c:	e1db      	b.n	8009f36 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009b82:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009b84:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009b86:	f7ff ff37 	bl	80099f8 <check_fs>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009b90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009b94:	2b02      	cmp	r3, #2
 8009b96:	d149      	bne.n	8009c2c <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009b98:	2300      	movs	r3, #0
 8009b9a:	643b      	str	r3, [r7, #64]	; 0x40
 8009b9c:	e01e      	b.n	8009bdc <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ba0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009ba4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ba6:	011b      	lsls	r3, r3, #4
 8009ba8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009bac:	4413      	add	r3, r2
 8009bae:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bb2:	3304      	adds	r3, #4
 8009bb4:	781b      	ldrb	r3, [r3, #0]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d006      	beq.n	8009bc8 <find_volume+0x124>
 8009bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bbc:	3308      	adds	r3, #8
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f7fe fc5e 	bl	8008480 <ld_dword>
 8009bc4:	4602      	mov	r2, r0
 8009bc6:	e000      	b.n	8009bca <find_volume+0x126>
 8009bc8:	2200      	movs	r2, #0
 8009bca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009bcc:	009b      	lsls	r3, r3, #2
 8009bce:	3358      	adds	r3, #88	; 0x58
 8009bd0:	443b      	add	r3, r7
 8009bd2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009bd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009bd8:	3301      	adds	r3, #1
 8009bda:	643b      	str	r3, [r7, #64]	; 0x40
 8009bdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009bde:	2b03      	cmp	r3, #3
 8009be0:	d9dd      	bls.n	8009b9e <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009be2:	2300      	movs	r3, #0
 8009be4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009be6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d002      	beq.n	8009bf2 <find_volume+0x14e>
 8009bec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009bee:	3b01      	subs	r3, #1
 8009bf0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009bf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009bf4:	009b      	lsls	r3, r3, #2
 8009bf6:	3358      	adds	r3, #88	; 0x58
 8009bf8:	443b      	add	r3, r7
 8009bfa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009bfe:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009c00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d005      	beq.n	8009c12 <find_volume+0x16e>
 8009c06:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009c08:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009c0a:	f7ff fef5 	bl	80099f8 <check_fs>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	e000      	b.n	8009c14 <find_volume+0x170>
 8009c12:	2303      	movs	r3, #3
 8009c14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009c18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009c1c:	2b01      	cmp	r3, #1
 8009c1e:	d905      	bls.n	8009c2c <find_volume+0x188>
 8009c20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c22:	3301      	adds	r3, #1
 8009c24:	643b      	str	r3, [r7, #64]	; 0x40
 8009c26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c28:	2b03      	cmp	r3, #3
 8009c2a:	d9e2      	bls.n	8009bf2 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009c2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009c30:	2b04      	cmp	r3, #4
 8009c32:	d101      	bne.n	8009c38 <find_volume+0x194>
 8009c34:	2301      	movs	r3, #1
 8009c36:	e17e      	b.n	8009f36 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009c38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	d901      	bls.n	8009c44 <find_volume+0x1a0>
 8009c40:	230d      	movs	r3, #13
 8009c42:	e178      	b.n	8009f36 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c46:	3334      	adds	r3, #52	; 0x34
 8009c48:	330b      	adds	r3, #11
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f7fe fc00 	bl	8008450 <ld_word>
 8009c50:	4603      	mov	r3, r0
 8009c52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c56:	d001      	beq.n	8009c5c <find_volume+0x1b8>
 8009c58:	230d      	movs	r3, #13
 8009c5a:	e16c      	b.n	8009f36 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c5e:	3334      	adds	r3, #52	; 0x34
 8009c60:	3316      	adds	r3, #22
 8009c62:	4618      	mov	r0, r3
 8009c64:	f7fe fbf4 	bl	8008450 <ld_word>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009c6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d106      	bne.n	8009c80 <find_volume+0x1dc>
 8009c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c74:	3334      	adds	r3, #52	; 0x34
 8009c76:	3324      	adds	r3, #36	; 0x24
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f7fe fc01 	bl	8008480 <ld_dword>
 8009c7e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009c84:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c88:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c8e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c92:	789b      	ldrb	r3, [r3, #2]
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d005      	beq.n	8009ca4 <find_volume+0x200>
 8009c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c9a:	789b      	ldrb	r3, [r3, #2]
 8009c9c:	2b02      	cmp	r3, #2
 8009c9e:	d001      	beq.n	8009ca4 <find_volume+0x200>
 8009ca0:	230d      	movs	r3, #13
 8009ca2:	e148      	b.n	8009f36 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ca6:	789b      	ldrb	r3, [r3, #2]
 8009ca8:	461a      	mov	r2, r3
 8009caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cac:	fb02 f303 	mul.w	r3, r2, r3
 8009cb0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009cb8:	b29a      	uxth	r2, r3
 8009cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cbc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cc0:	895b      	ldrh	r3, [r3, #10]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d008      	beq.n	8009cd8 <find_volume+0x234>
 8009cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cc8:	895b      	ldrh	r3, [r3, #10]
 8009cca:	461a      	mov	r2, r3
 8009ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cce:	895b      	ldrh	r3, [r3, #10]
 8009cd0:	3b01      	subs	r3, #1
 8009cd2:	4013      	ands	r3, r2
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d001      	beq.n	8009cdc <find_volume+0x238>
 8009cd8:	230d      	movs	r3, #13
 8009cda:	e12c      	b.n	8009f36 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cde:	3334      	adds	r3, #52	; 0x34
 8009ce0:	3311      	adds	r3, #17
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f7fe fbb4 	bl	8008450 <ld_word>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	461a      	mov	r2, r3
 8009cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cee:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cf2:	891b      	ldrh	r3, [r3, #8]
 8009cf4:	f003 030f 	and.w	r3, r3, #15
 8009cf8:	b29b      	uxth	r3, r3
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d001      	beq.n	8009d02 <find_volume+0x25e>
 8009cfe:	230d      	movs	r3, #13
 8009d00:	e119      	b.n	8009f36 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d04:	3334      	adds	r3, #52	; 0x34
 8009d06:	3313      	adds	r3, #19
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f7fe fba1 	bl	8008450 <ld_word>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009d12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d106      	bne.n	8009d26 <find_volume+0x282>
 8009d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d1a:	3334      	adds	r3, #52	; 0x34
 8009d1c:	3320      	adds	r3, #32
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f7fe fbae 	bl	8008480 <ld_dword>
 8009d24:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d28:	3334      	adds	r3, #52	; 0x34
 8009d2a:	330e      	adds	r3, #14
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f7fe fb8f 	bl	8008450 <ld_word>
 8009d32:	4603      	mov	r3, r0
 8009d34:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009d36:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d101      	bne.n	8009d40 <find_volume+0x29c>
 8009d3c:	230d      	movs	r3, #13
 8009d3e:	e0fa      	b.n	8009f36 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009d40:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009d42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d44:	4413      	add	r3, r2
 8009d46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d48:	8912      	ldrh	r2, [r2, #8]
 8009d4a:	0912      	lsrs	r2, r2, #4
 8009d4c:	b292      	uxth	r2, r2
 8009d4e:	4413      	add	r3, r2
 8009d50:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009d52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d204      	bcs.n	8009d64 <find_volume+0x2c0>
 8009d5a:	230d      	movs	r3, #13
 8009d5c:	e0eb      	b.n	8009f36 <find_volume+0x492>
 8009d5e:	bf00      	nop
 8009d60:	20000d2c 	.word	0x20000d2c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009d64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d68:	1ad3      	subs	r3, r2, r3
 8009d6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d6c:	8952      	ldrh	r2, [r2, #10]
 8009d6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d72:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d101      	bne.n	8009d7e <find_volume+0x2da>
 8009d7a:	230d      	movs	r3, #13
 8009d7c:	e0db      	b.n	8009f36 <find_volume+0x492>
		fmt = FS_FAT32;
 8009d7e:	2303      	movs	r3, #3
 8009d80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d86:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d802      	bhi.n	8009d94 <find_volume+0x2f0>
 8009d8e:	2302      	movs	r3, #2
 8009d90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d96:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d802      	bhi.n	8009da4 <find_volume+0x300>
 8009d9e:	2301      	movs	r3, #1
 8009da0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da6:	1c9a      	adds	r2, r3, #2
 8009da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009daa:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8009dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009db0:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009db2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009db4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009db6:	441a      	add	r2, r3
 8009db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dba:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8009dbc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dc0:	441a      	add	r2, r3
 8009dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dc4:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8009dc6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009dca:	2b03      	cmp	r3, #3
 8009dcc:	d11e      	bne.n	8009e0c <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dd0:	3334      	adds	r3, #52	; 0x34
 8009dd2:	332a      	adds	r3, #42	; 0x2a
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f7fe fb3b 	bl	8008450 <ld_word>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d001      	beq.n	8009de4 <find_volume+0x340>
 8009de0:	230d      	movs	r3, #13
 8009de2:	e0a8      	b.n	8009f36 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009de6:	891b      	ldrh	r3, [r3, #8]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d001      	beq.n	8009df0 <find_volume+0x34c>
 8009dec:	230d      	movs	r3, #13
 8009dee:	e0a2      	b.n	8009f36 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009df2:	3334      	adds	r3, #52	; 0x34
 8009df4:	332c      	adds	r3, #44	; 0x2c
 8009df6:	4618      	mov	r0, r3
 8009df8:	f7fe fb42 	bl	8008480 <ld_dword>
 8009dfc:	4602      	mov	r2, r0
 8009dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e00:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e04:	699b      	ldr	r3, [r3, #24]
 8009e06:	009b      	lsls	r3, r3, #2
 8009e08:	647b      	str	r3, [r7, #68]	; 0x44
 8009e0a:	e01f      	b.n	8009e4c <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e0e:	891b      	ldrh	r3, [r3, #8]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d101      	bne.n	8009e18 <find_volume+0x374>
 8009e14:	230d      	movs	r3, #13
 8009e16:	e08e      	b.n	8009f36 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009e1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e1e:	441a      	add	r2, r3
 8009e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e22:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009e24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009e28:	2b02      	cmp	r3, #2
 8009e2a:	d103      	bne.n	8009e34 <find_volume+0x390>
 8009e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e2e:	699b      	ldr	r3, [r3, #24]
 8009e30:	005b      	lsls	r3, r3, #1
 8009e32:	e00a      	b.n	8009e4a <find_volume+0x3a6>
 8009e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e36:	699a      	ldr	r2, [r3, #24]
 8009e38:	4613      	mov	r3, r2
 8009e3a:	005b      	lsls	r3, r3, #1
 8009e3c:	4413      	add	r3, r2
 8009e3e:	085a      	lsrs	r2, r3, #1
 8009e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e42:	699b      	ldr	r3, [r3, #24]
 8009e44:	f003 0301 	and.w	r3, r3, #1
 8009e48:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009e4a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e4e:	69da      	ldr	r2, [r3, #28]
 8009e50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e52:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009e56:	0a5b      	lsrs	r3, r3, #9
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	d201      	bcs.n	8009e60 <find_volume+0x3bc>
 8009e5c:	230d      	movs	r3, #13
 8009e5e:	e06a      	b.n	8009f36 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e66:	615a      	str	r2, [r3, #20]
 8009e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e6a:	695a      	ldr	r2, [r3, #20]
 8009e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e6e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8009e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e72:	2280      	movs	r2, #128	; 0x80
 8009e74:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009e76:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009e7a:	2b03      	cmp	r3, #3
 8009e7c:	d149      	bne.n	8009f12 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e80:	3334      	adds	r3, #52	; 0x34
 8009e82:	3330      	adds	r3, #48	; 0x30
 8009e84:	4618      	mov	r0, r3
 8009e86:	f7fe fae3 	bl	8008450 <ld_word>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	2b01      	cmp	r3, #1
 8009e8e:	d140      	bne.n	8009f12 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009e90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e92:	3301      	adds	r3, #1
 8009e94:	4619      	mov	r1, r3
 8009e96:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009e98:	f7fe fdbc 	bl	8008a14 <move_window>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d137      	bne.n	8009f12 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 8009ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eaa:	3334      	adds	r3, #52	; 0x34
 8009eac:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f7fe facd 	bl	8008450 <ld_word>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	461a      	mov	r2, r3
 8009eba:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009ebe:	429a      	cmp	r2, r3
 8009ec0:	d127      	bne.n	8009f12 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec4:	3334      	adds	r3, #52	; 0x34
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f7fe fada 	bl	8008480 <ld_dword>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	4a1c      	ldr	r2, [pc, #112]	; (8009f40 <find_volume+0x49c>)
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d11e      	bne.n	8009f12 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ed6:	3334      	adds	r3, #52	; 0x34
 8009ed8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009edc:	4618      	mov	r0, r3
 8009ede:	f7fe facf 	bl	8008480 <ld_dword>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	4a17      	ldr	r2, [pc, #92]	; (8009f44 <find_volume+0x4a0>)
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	d113      	bne.n	8009f12 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eec:	3334      	adds	r3, #52	; 0x34
 8009eee:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f7fe fac4 	bl	8008480 <ld_dword>
 8009ef8:	4602      	mov	r2, r0
 8009efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009efc:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f00:	3334      	adds	r3, #52	; 0x34
 8009f02:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009f06:	4618      	mov	r0, r3
 8009f08:	f7fe faba 	bl	8008480 <ld_dword>
 8009f0c:	4602      	mov	r2, r0
 8009f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f10:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f14:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8009f18:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009f1a:	4b0b      	ldr	r3, [pc, #44]	; (8009f48 <find_volume+0x4a4>)
 8009f1c:	881b      	ldrh	r3, [r3, #0]
 8009f1e:	3301      	adds	r3, #1
 8009f20:	b29a      	uxth	r2, r3
 8009f22:	4b09      	ldr	r3, [pc, #36]	; (8009f48 <find_volume+0x4a4>)
 8009f24:	801a      	strh	r2, [r3, #0]
 8009f26:	4b08      	ldr	r3, [pc, #32]	; (8009f48 <find_volume+0x4a4>)
 8009f28:	881a      	ldrh	r2, [r3, #0]
 8009f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f2c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009f2e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009f30:	f7fe fd08 	bl	8008944 <clear_lock>
#endif
	return FR_OK;
 8009f34:	2300      	movs	r3, #0
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3758      	adds	r7, #88	; 0x58
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}
 8009f3e:	bf00      	nop
 8009f40:	41615252 	.word	0x41615252
 8009f44:	61417272 	.word	0x61417272
 8009f48:	20000d30 	.word	0x20000d30

08009f4c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b084      	sub	sp, #16
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
 8009f54:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009f56:	2309      	movs	r3, #9
 8009f58:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d02e      	beq.n	8009fbe <validate+0x72>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d02a      	beq.n	8009fbe <validate+0x72>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	781b      	ldrb	r3, [r3, #0]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d025      	beq.n	8009fbe <validate+0x72>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	889a      	ldrh	r2, [r3, #4]
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	88db      	ldrh	r3, [r3, #6]
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	d11e      	bne.n	8009fbe <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	4618      	mov	r0, r3
 8009f86:	f7fe fb63 	bl	8008650 <lock_fs>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d014      	beq.n	8009fba <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	785b      	ldrb	r3, [r3, #1]
 8009f96:	4618      	mov	r0, r3
 8009f98:	f7fe f9bc 	bl	8008314 <disk_status>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	f003 0301 	and.w	r3, r3, #1
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d102      	bne.n	8009fac <validate+0x60>
				res = FR_OK;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	73fb      	strb	r3, [r7, #15]
 8009faa:	e008      	b.n	8009fbe <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	2100      	movs	r1, #0
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f7fe fb62 	bl	800867c <unlock_fs>
 8009fb8:	e001      	b.n	8009fbe <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8009fba:	230f      	movs	r3, #15
 8009fbc:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009fbe:	7bfb      	ldrb	r3, [r7, #15]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d102      	bne.n	8009fca <validate+0x7e>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	e000      	b.n	8009fcc <validate+0x80>
 8009fca:	2300      	movs	r3, #0
 8009fcc:	683a      	ldr	r2, [r7, #0]
 8009fce:	6013      	str	r3, [r2, #0]
	return res;
 8009fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3710      	adds	r7, #16
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}
	...

08009fdc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b088      	sub	sp, #32
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	60f8      	str	r0, [r7, #12]
 8009fe4:	60b9      	str	r1, [r7, #8]
 8009fe6:	4613      	mov	r3, r2
 8009fe8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009fee:	f107 0310 	add.w	r3, r7, #16
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f7ff fcbb 	bl	800996e <get_ldnumber>
 8009ff8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009ffa:	69fb      	ldr	r3, [r7, #28]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	da01      	bge.n	800a004 <f_mount+0x28>
 800a000:	230b      	movs	r3, #11
 800a002:	e048      	b.n	800a096 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a004:	4a26      	ldr	r2, [pc, #152]	; (800a0a0 <f_mount+0xc4>)
 800a006:	69fb      	ldr	r3, [r7, #28]
 800a008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a00c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a00e:	69bb      	ldr	r3, [r7, #24]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d00f      	beq.n	800a034 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a014:	69b8      	ldr	r0, [r7, #24]
 800a016:	f7fe fc95 	bl	8008944 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800a01a:	69bb      	ldr	r3, [r7, #24]
 800a01c:	68db      	ldr	r3, [r3, #12]
 800a01e:	4618      	mov	r0, r3
 800a020:	f001 f8c4 	bl	800b1ac <ff_del_syncobj>
 800a024:	4603      	mov	r3, r0
 800a026:	2b00      	cmp	r3, #0
 800a028:	d101      	bne.n	800a02e <f_mount+0x52>
 800a02a:	2302      	movs	r3, #2
 800a02c:	e033      	b.n	800a096 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a02e:	69bb      	ldr	r3, [r7, #24]
 800a030:	2200      	movs	r2, #0
 800a032:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d00f      	beq.n	800a05a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	2200      	movs	r2, #0
 800a03e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800a040:	69fb      	ldr	r3, [r7, #28]
 800a042:	b2da      	uxtb	r2, r3
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	330c      	adds	r3, #12
 800a048:	4619      	mov	r1, r3
 800a04a:	4610      	mov	r0, r2
 800a04c:	f001 f893 	bl	800b176 <ff_cre_syncobj>
 800a050:	4603      	mov	r3, r0
 800a052:	2b00      	cmp	r3, #0
 800a054:	d101      	bne.n	800a05a <f_mount+0x7e>
 800a056:	2302      	movs	r3, #2
 800a058:	e01d      	b.n	800a096 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a05a:	68fa      	ldr	r2, [r7, #12]
 800a05c:	4910      	ldr	r1, [pc, #64]	; (800a0a0 <f_mount+0xc4>)
 800a05e:	69fb      	ldr	r3, [r7, #28]
 800a060:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d002      	beq.n	800a070 <f_mount+0x94>
 800a06a:	79fb      	ldrb	r3, [r7, #7]
 800a06c:	2b01      	cmp	r3, #1
 800a06e:	d001      	beq.n	800a074 <f_mount+0x98>
 800a070:	2300      	movs	r3, #0
 800a072:	e010      	b.n	800a096 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a074:	f107 010c 	add.w	r1, r7, #12
 800a078:	f107 0308 	add.w	r3, r7, #8
 800a07c:	2200      	movs	r2, #0
 800a07e:	4618      	mov	r0, r3
 800a080:	f7ff fd10 	bl	8009aa4 <find_volume>
 800a084:	4603      	mov	r3, r0
 800a086:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	7dfa      	ldrb	r2, [r7, #23]
 800a08c:	4611      	mov	r1, r2
 800a08e:	4618      	mov	r0, r3
 800a090:	f7fe faf4 	bl	800867c <unlock_fs>
 800a094:	7dfb      	ldrb	r3, [r7, #23]
}
 800a096:	4618      	mov	r0, r3
 800a098:	3720      	adds	r7, #32
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
 800a09e:	bf00      	nop
 800a0a0:	20000d2c 	.word	0x20000d2c

0800a0a4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b098      	sub	sp, #96	; 0x60
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	60f8      	str	r0, [r7, #12]
 800a0ac:	60b9      	str	r1, [r7, #8]
 800a0ae:	4613      	mov	r3, r2
 800a0b0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d101      	bne.n	800a0bc <f_open+0x18>
 800a0b8:	2309      	movs	r3, #9
 800a0ba:	e1b4      	b.n	800a426 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a0bc:	79fb      	ldrb	r3, [r7, #7]
 800a0be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a0c2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a0c4:	79fa      	ldrb	r2, [r7, #7]
 800a0c6:	f107 0110 	add.w	r1, r7, #16
 800a0ca:	f107 0308 	add.w	r3, r7, #8
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f7ff fce8 	bl	8009aa4 <find_volume>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800a0da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	f040 8191 	bne.w	800a406 <f_open+0x362>
		dj.obj.fs = fs;
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a0e8:	68ba      	ldr	r2, [r7, #8]
 800a0ea:	f107 0314 	add.w	r3, r7, #20
 800a0ee:	4611      	mov	r1, r2
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f7ff fbcb 	bl	800988c <follow_path>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a0fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a100:	2b00      	cmp	r3, #0
 800a102:	d11a      	bne.n	800a13a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a104:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a108:	b25b      	sxtb	r3, r3
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	da03      	bge.n	800a116 <f_open+0x72>
				res = FR_INVALID_NAME;
 800a10e:	2306      	movs	r3, #6
 800a110:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a114:	e011      	b.n	800a13a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a116:	79fb      	ldrb	r3, [r7, #7]
 800a118:	f023 0301 	bic.w	r3, r3, #1
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	bf14      	ite	ne
 800a120:	2301      	movne	r3, #1
 800a122:	2300      	moveq	r3, #0
 800a124:	b2db      	uxtb	r3, r3
 800a126:	461a      	mov	r2, r3
 800a128:	f107 0314 	add.w	r3, r7, #20
 800a12c:	4611      	mov	r1, r2
 800a12e:	4618      	mov	r0, r3
 800a130:	f7fe fac0 	bl	80086b4 <chk_lock>
 800a134:	4603      	mov	r3, r0
 800a136:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a13a:	79fb      	ldrb	r3, [r7, #7]
 800a13c:	f003 031c 	and.w	r3, r3, #28
 800a140:	2b00      	cmp	r3, #0
 800a142:	d07f      	beq.n	800a244 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a144:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d017      	beq.n	800a17c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a14c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a150:	2b04      	cmp	r3, #4
 800a152:	d10e      	bne.n	800a172 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a154:	f7fe fb0a 	bl	800876c <enq_lock>
 800a158:	4603      	mov	r3, r0
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d006      	beq.n	800a16c <f_open+0xc8>
 800a15e:	f107 0314 	add.w	r3, r7, #20
 800a162:	4618      	mov	r0, r3
 800a164:	f7ff fa4e 	bl	8009604 <dir_register>
 800a168:	4603      	mov	r3, r0
 800a16a:	e000      	b.n	800a16e <f_open+0xca>
 800a16c:	2312      	movs	r3, #18
 800a16e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a172:	79fb      	ldrb	r3, [r7, #7]
 800a174:	f043 0308 	orr.w	r3, r3, #8
 800a178:	71fb      	strb	r3, [r7, #7]
 800a17a:	e010      	b.n	800a19e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a17c:	7ebb      	ldrb	r3, [r7, #26]
 800a17e:	f003 0311 	and.w	r3, r3, #17
 800a182:	2b00      	cmp	r3, #0
 800a184:	d003      	beq.n	800a18e <f_open+0xea>
					res = FR_DENIED;
 800a186:	2307      	movs	r3, #7
 800a188:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a18c:	e007      	b.n	800a19e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a18e:	79fb      	ldrb	r3, [r7, #7]
 800a190:	f003 0304 	and.w	r3, r3, #4
 800a194:	2b00      	cmp	r3, #0
 800a196:	d002      	beq.n	800a19e <f_open+0xfa>
 800a198:	2308      	movs	r3, #8
 800a19a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a19e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d168      	bne.n	800a278 <f_open+0x1d4>
 800a1a6:	79fb      	ldrb	r3, [r7, #7]
 800a1a8:	f003 0308 	and.w	r3, r3, #8
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d063      	beq.n	800a278 <f_open+0x1d4>
				dw = GET_FATTIME();
 800a1b0:	f7fd fe48 	bl	8007e44 <get_fattime>
 800a1b4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a1b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1b8:	330e      	adds	r3, #14
 800a1ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f7fe f99d 	bl	80084fc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a1c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1c4:	3316      	adds	r3, #22
 800a1c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f7fe f997 	bl	80084fc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a1ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1d0:	330b      	adds	r3, #11
 800a1d2:	2220      	movs	r2, #32
 800a1d4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a1da:	4611      	mov	r1, r2
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f7ff f920 	bl	8009422 <ld_clust>
 800a1e2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f7ff f938 	bl	8009460 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a1f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1f2:	331c      	adds	r3, #28
 800a1f4:	2100      	movs	r1, #0
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f7fe f980 	bl	80084fc <st_dword>
					fs->wflag = 1;
 800a1fc:	693b      	ldr	r3, [r7, #16]
 800a1fe:	2201      	movs	r2, #1
 800a200:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a202:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a204:	2b00      	cmp	r3, #0
 800a206:	d037      	beq.n	800a278 <f_open+0x1d4>
						dw = fs->winsect;
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a20c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800a20e:	f107 0314 	add.w	r3, r7, #20
 800a212:	2200      	movs	r2, #0
 800a214:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a216:	4618      	mov	r0, r3
 800a218:	f7fe fe4b 	bl	8008eb2 <remove_chain>
 800a21c:	4603      	mov	r3, r0
 800a21e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800a222:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a226:	2b00      	cmp	r3, #0
 800a228:	d126      	bne.n	800a278 <f_open+0x1d4>
							res = move_window(fs, dw);
 800a22a:	693b      	ldr	r3, [r7, #16]
 800a22c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a22e:	4618      	mov	r0, r3
 800a230:	f7fe fbf0 	bl	8008a14 <move_window>
 800a234:	4603      	mov	r3, r0
 800a236:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a23e:	3a01      	subs	r2, #1
 800a240:	611a      	str	r2, [r3, #16]
 800a242:	e019      	b.n	800a278 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a244:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d115      	bne.n	800a278 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a24c:	7ebb      	ldrb	r3, [r7, #26]
 800a24e:	f003 0310 	and.w	r3, r3, #16
 800a252:	2b00      	cmp	r3, #0
 800a254:	d003      	beq.n	800a25e <f_open+0x1ba>
					res = FR_NO_FILE;
 800a256:	2304      	movs	r3, #4
 800a258:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a25c:	e00c      	b.n	800a278 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a25e:	79fb      	ldrb	r3, [r7, #7]
 800a260:	f003 0302 	and.w	r3, r3, #2
 800a264:	2b00      	cmp	r3, #0
 800a266:	d007      	beq.n	800a278 <f_open+0x1d4>
 800a268:	7ebb      	ldrb	r3, [r7, #26]
 800a26a:	f003 0301 	and.w	r3, r3, #1
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d002      	beq.n	800a278 <f_open+0x1d4>
						res = FR_DENIED;
 800a272:	2307      	movs	r3, #7
 800a274:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800a278:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d128      	bne.n	800a2d2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a280:	79fb      	ldrb	r3, [r7, #7]
 800a282:	f003 0308 	and.w	r3, r3, #8
 800a286:	2b00      	cmp	r3, #0
 800a288:	d003      	beq.n	800a292 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800a28a:	79fb      	ldrb	r3, [r7, #7]
 800a28c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a290:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a29a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a2a0:	79fb      	ldrb	r3, [r7, #7]
 800a2a2:	f023 0301 	bic.w	r3, r3, #1
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	bf14      	ite	ne
 800a2aa:	2301      	movne	r3, #1
 800a2ac:	2300      	moveq	r3, #0
 800a2ae:	b2db      	uxtb	r3, r3
 800a2b0:	461a      	mov	r2, r3
 800a2b2:	f107 0314 	add.w	r3, r7, #20
 800a2b6:	4611      	mov	r1, r2
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f7fe fa79 	bl	80087b0 <inc_lock>
 800a2be:	4602      	mov	r2, r0
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	691b      	ldr	r3, [r3, #16]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d102      	bne.n	800a2d2 <f_open+0x22e>
 800a2cc:	2302      	movs	r3, #2
 800a2ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a2d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	f040 8095 	bne.w	800a406 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a2dc:	693b      	ldr	r3, [r7, #16]
 800a2de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2e0:	4611      	mov	r1, r2
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f7ff f89d 	bl	8009422 <ld_clust>
 800a2e8:	4602      	mov	r2, r0
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a2ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2f0:	331c      	adds	r3, #28
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f7fe f8c4 	bl	8008480 <ld_dword>
 800a2f8:	4602      	mov	r2, r0
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	2200      	movs	r2, #0
 800a302:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a304:	693a      	ldr	r2, [r7, #16]
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	88da      	ldrh	r2, [r3, #6]
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	79fa      	ldrb	r2, [r7, #7]
 800a316:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	2200      	movs	r2, #0
 800a31c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	2200      	movs	r2, #0
 800a322:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	2200      	movs	r2, #0
 800a328:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	3330      	adds	r3, #48	; 0x30
 800a32e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a332:	2100      	movs	r1, #0
 800a334:	4618      	mov	r0, r3
 800a336:	f7fe f92e 	bl	8008596 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a33a:	79fb      	ldrb	r3, [r7, #7]
 800a33c:	f003 0320 	and.w	r3, r3, #32
 800a340:	2b00      	cmp	r3, #0
 800a342:	d060      	beq.n	800a406 <f_open+0x362>
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	68db      	ldr	r3, [r3, #12]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d05c      	beq.n	800a406 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	68da      	ldr	r2, [r3, #12]
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	895b      	ldrh	r3, [r3, #10]
 800a358:	025b      	lsls	r3, r3, #9
 800a35a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	689b      	ldr	r3, [r3, #8]
 800a360:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	68db      	ldr	r3, [r3, #12]
 800a366:	657b      	str	r3, [r7, #84]	; 0x54
 800a368:	e016      	b.n	800a398 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a36e:	4618      	mov	r0, r3
 800a370:	f7fe fc0b 	bl	8008b8a <get_fat>
 800a374:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800a376:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a378:	2b01      	cmp	r3, #1
 800a37a:	d802      	bhi.n	800a382 <f_open+0x2de>
 800a37c:	2302      	movs	r3, #2
 800a37e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a382:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a384:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a388:	d102      	bne.n	800a390 <f_open+0x2ec>
 800a38a:	2301      	movs	r3, #1
 800a38c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a390:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a392:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a394:	1ad3      	subs	r3, r2, r3
 800a396:	657b      	str	r3, [r7, #84]	; 0x54
 800a398:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d103      	bne.n	800a3a8 <f_open+0x304>
 800a3a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a3a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d8e0      	bhi.n	800a36a <f_open+0x2c6>
				}
				fp->clust = clst;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a3ac:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a3ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d127      	bne.n	800a406 <f_open+0x362>
 800a3b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a3b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d022      	beq.n	800a406 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a3c0:	693b      	ldr	r3, [r7, #16]
 800a3c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f7fe fbc1 	bl	8008b4c <clust2sect>
 800a3ca:	6478      	str	r0, [r7, #68]	; 0x44
 800a3cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d103      	bne.n	800a3da <f_open+0x336>
						res = FR_INT_ERR;
 800a3d2:	2302      	movs	r3, #2
 800a3d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a3d8:	e015      	b.n	800a406 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a3da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a3dc:	0a5a      	lsrs	r2, r3, #9
 800a3de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3e0:	441a      	add	r2, r3
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a3e6:	693b      	ldr	r3, [r7, #16]
 800a3e8:	7858      	ldrb	r0, [r3, #1]
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	6a1a      	ldr	r2, [r3, #32]
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	f7fd ffcd 	bl	8008394 <disk_read>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d002      	beq.n	800a406 <f_open+0x362>
 800a400:	2301      	movs	r3, #1
 800a402:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a406:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d002      	beq.n	800a414 <f_open+0x370>
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	2200      	movs	r2, #0
 800a412:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800a41a:	4611      	mov	r1, r2
 800a41c:	4618      	mov	r0, r3
 800a41e:	f7fe f92d 	bl	800867c <unlock_fs>
 800a422:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800a426:	4618      	mov	r0, r3
 800a428:	3760      	adds	r7, #96	; 0x60
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}

0800a42e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a42e:	b580      	push	{r7, lr}
 800a430:	b08c      	sub	sp, #48	; 0x30
 800a432:	af00      	add	r7, sp, #0
 800a434:	60f8      	str	r0, [r7, #12]
 800a436:	60b9      	str	r1, [r7, #8]
 800a438:	607a      	str	r2, [r7, #4]
 800a43a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	2200      	movs	r2, #0
 800a444:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	f107 0210 	add.w	r2, r7, #16
 800a44c:	4611      	mov	r1, r2
 800a44e:	4618      	mov	r0, r3
 800a450:	f7ff fd7c 	bl	8009f4c <validate>
 800a454:	4603      	mov	r3, r0
 800a456:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a45a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d107      	bne.n	800a472 <f_write+0x44>
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	7d5b      	ldrb	r3, [r3, #21]
 800a466:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a46a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d009      	beq.n	800a486 <f_write+0x58>
 800a472:	693b      	ldr	r3, [r7, #16]
 800a474:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a478:	4611      	mov	r1, r2
 800a47a:	4618      	mov	r0, r3
 800a47c:	f7fe f8fe 	bl	800867c <unlock_fs>
 800a480:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a484:	e173      	b.n	800a76e <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	7d1b      	ldrb	r3, [r3, #20]
 800a48a:	f003 0302 	and.w	r3, r3, #2
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d106      	bne.n	800a4a0 <f_write+0x72>
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	2107      	movs	r1, #7
 800a496:	4618      	mov	r0, r3
 800a498:	f7fe f8f0 	bl	800867c <unlock_fs>
 800a49c:	2307      	movs	r3, #7
 800a49e:	e166      	b.n	800a76e <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	699a      	ldr	r2, [r3, #24]
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	441a      	add	r2, r3
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	699b      	ldr	r3, [r3, #24]
 800a4ac:	429a      	cmp	r2, r3
 800a4ae:	f080 814b 	bcs.w	800a748 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	699b      	ldr	r3, [r3, #24]
 800a4b6:	43db      	mvns	r3, r3
 800a4b8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a4ba:	e145      	b.n	800a748 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	699b      	ldr	r3, [r3, #24]
 800a4c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	f040 8101 	bne.w	800a6cc <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	699b      	ldr	r3, [r3, #24]
 800a4ce:	0a5b      	lsrs	r3, r3, #9
 800a4d0:	693a      	ldr	r2, [r7, #16]
 800a4d2:	8952      	ldrh	r2, [r2, #10]
 800a4d4:	3a01      	subs	r2, #1
 800a4d6:	4013      	ands	r3, r2
 800a4d8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a4da:	69bb      	ldr	r3, [r7, #24]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d14d      	bne.n	800a57c <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	699b      	ldr	r3, [r3, #24]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d10c      	bne.n	800a502 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	689b      	ldr	r3, [r3, #8]
 800a4ec:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a4ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d11a      	bne.n	800a52a <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	2100      	movs	r1, #0
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	f7fe fd3f 	bl	8008f7c <create_chain>
 800a4fe:	62b8      	str	r0, [r7, #40]	; 0x28
 800a500:	e013      	b.n	800a52a <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a506:	2b00      	cmp	r3, #0
 800a508:	d007      	beq.n	800a51a <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	699b      	ldr	r3, [r3, #24]
 800a50e:	4619      	mov	r1, r3
 800a510:	68f8      	ldr	r0, [r7, #12]
 800a512:	f7fe fdcb 	bl	80090ac <clmt_clust>
 800a516:	62b8      	str	r0, [r7, #40]	; 0x28
 800a518:	e007      	b.n	800a52a <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a51a:	68fa      	ldr	r2, [r7, #12]
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	69db      	ldr	r3, [r3, #28]
 800a520:	4619      	mov	r1, r3
 800a522:	4610      	mov	r0, r2
 800a524:	f7fe fd2a 	bl	8008f7c <create_chain>
 800a528:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a52a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	f000 8110 	beq.w	800a752 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a534:	2b01      	cmp	r3, #1
 800a536:	d109      	bne.n	800a54c <f_write+0x11e>
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	2202      	movs	r2, #2
 800a53c:	755a      	strb	r2, [r3, #21]
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	2102      	movs	r1, #2
 800a542:	4618      	mov	r0, r3
 800a544:	f7fe f89a 	bl	800867c <unlock_fs>
 800a548:	2302      	movs	r3, #2
 800a54a:	e110      	b.n	800a76e <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a54e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a552:	d109      	bne.n	800a568 <f_write+0x13a>
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	2201      	movs	r2, #1
 800a558:	755a      	strb	r2, [r3, #21]
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	2101      	movs	r1, #1
 800a55e:	4618      	mov	r0, r3
 800a560:	f7fe f88c 	bl	800867c <unlock_fs>
 800a564:	2301      	movs	r3, #1
 800a566:	e102      	b.n	800a76e <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a56c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	689b      	ldr	r3, [r3, #8]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d102      	bne.n	800a57c <f_write+0x14e>
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a57a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	7d1b      	ldrb	r3, [r3, #20]
 800a580:	b25b      	sxtb	r3, r3
 800a582:	2b00      	cmp	r3, #0
 800a584:	da1d      	bge.n	800a5c2 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	7858      	ldrb	r0, [r3, #1]
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	6a1a      	ldr	r2, [r3, #32]
 800a594:	2301      	movs	r3, #1
 800a596:	f7fd ff1d 	bl	80083d4 <disk_write>
 800a59a:	4603      	mov	r3, r0
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d009      	beq.n	800a5b4 <f_write+0x186>
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	755a      	strb	r2, [r3, #21]
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	2101      	movs	r1, #1
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f7fe f866 	bl	800867c <unlock_fs>
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	e0dc      	b.n	800a76e <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	7d1b      	ldrb	r3, [r3, #20]
 800a5b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5bc:	b2da      	uxtb	r2, r3
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a5c2:	693a      	ldr	r2, [r7, #16]
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	69db      	ldr	r3, [r3, #28]
 800a5c8:	4619      	mov	r1, r3
 800a5ca:	4610      	mov	r0, r2
 800a5cc:	f7fe fabe 	bl	8008b4c <clust2sect>
 800a5d0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a5d2:	697b      	ldr	r3, [r7, #20]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d109      	bne.n	800a5ec <f_write+0x1be>
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2202      	movs	r2, #2
 800a5dc:	755a      	strb	r2, [r3, #21]
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	2102      	movs	r1, #2
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f7fe f84a 	bl	800867c <unlock_fs>
 800a5e8:	2302      	movs	r3, #2
 800a5ea:	e0c0      	b.n	800a76e <f_write+0x340>
			sect += csect;
 800a5ec:	697a      	ldr	r2, [r7, #20]
 800a5ee:	69bb      	ldr	r3, [r7, #24]
 800a5f0:	4413      	add	r3, r2
 800a5f2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	0a5b      	lsrs	r3, r3, #9
 800a5f8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a5fa:	6a3b      	ldr	r3, [r7, #32]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d041      	beq.n	800a684 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a600:	69ba      	ldr	r2, [r7, #24]
 800a602:	6a3b      	ldr	r3, [r7, #32]
 800a604:	4413      	add	r3, r2
 800a606:	693a      	ldr	r2, [r7, #16]
 800a608:	8952      	ldrh	r2, [r2, #10]
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d905      	bls.n	800a61a <f_write+0x1ec>
					cc = fs->csize - csect;
 800a60e:	693b      	ldr	r3, [r7, #16]
 800a610:	895b      	ldrh	r3, [r3, #10]
 800a612:	461a      	mov	r2, r3
 800a614:	69bb      	ldr	r3, [r7, #24]
 800a616:	1ad3      	subs	r3, r2, r3
 800a618:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a61a:	693b      	ldr	r3, [r7, #16]
 800a61c:	7858      	ldrb	r0, [r3, #1]
 800a61e:	6a3b      	ldr	r3, [r7, #32]
 800a620:	697a      	ldr	r2, [r7, #20]
 800a622:	69f9      	ldr	r1, [r7, #28]
 800a624:	f7fd fed6 	bl	80083d4 <disk_write>
 800a628:	4603      	mov	r3, r0
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d009      	beq.n	800a642 <f_write+0x214>
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	2201      	movs	r2, #1
 800a632:	755a      	strb	r2, [r3, #21]
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	2101      	movs	r1, #1
 800a638:	4618      	mov	r0, r3
 800a63a:	f7fe f81f 	bl	800867c <unlock_fs>
 800a63e:	2301      	movs	r3, #1
 800a640:	e095      	b.n	800a76e <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	6a1a      	ldr	r2, [r3, #32]
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	1ad3      	subs	r3, r2, r3
 800a64a:	6a3a      	ldr	r2, [r7, #32]
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d915      	bls.n	800a67c <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	6a1a      	ldr	r2, [r3, #32]
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	1ad3      	subs	r3, r2, r3
 800a65e:	025b      	lsls	r3, r3, #9
 800a660:	69fa      	ldr	r2, [r7, #28]
 800a662:	4413      	add	r3, r2
 800a664:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a668:	4619      	mov	r1, r3
 800a66a:	f7fd ff73 	bl	8008554 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	7d1b      	ldrb	r3, [r3, #20]
 800a672:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a676:	b2da      	uxtb	r2, r3
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a67c:	6a3b      	ldr	r3, [r7, #32]
 800a67e:	025b      	lsls	r3, r3, #9
 800a680:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800a682:	e044      	b.n	800a70e <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	6a1b      	ldr	r3, [r3, #32]
 800a688:	697a      	ldr	r2, [r7, #20]
 800a68a:	429a      	cmp	r2, r3
 800a68c:	d01b      	beq.n	800a6c6 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	699a      	ldr	r2, [r3, #24]
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a696:	429a      	cmp	r2, r3
 800a698:	d215      	bcs.n	800a6c6 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	7858      	ldrb	r0, [r3, #1]
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	697a      	ldr	r2, [r7, #20]
 800a6a8:	f7fd fe74 	bl	8008394 <disk_read>
 800a6ac:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d009      	beq.n	800a6c6 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	2201      	movs	r2, #1
 800a6b6:	755a      	strb	r2, [r3, #21]
 800a6b8:	693b      	ldr	r3, [r7, #16]
 800a6ba:	2101      	movs	r1, #1
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f7fd ffdd 	bl	800867c <unlock_fs>
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	e053      	b.n	800a76e <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	697a      	ldr	r2, [r7, #20]
 800a6ca:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	699b      	ldr	r3, [r3, #24]
 800a6d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6d4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800a6d8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a6da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	429a      	cmp	r2, r3
 800a6e0:	d901      	bls.n	800a6e6 <f_write+0x2b8>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	699b      	ldr	r3, [r3, #24]
 800a6f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6f4:	4413      	add	r3, r2
 800a6f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6f8:	69f9      	ldr	r1, [r7, #28]
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f7fd ff2a 	bl	8008554 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	7d1b      	ldrb	r3, [r3, #20]
 800a704:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a708:	b2da      	uxtb	r2, r3
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a70e:	69fa      	ldr	r2, [r7, #28]
 800a710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a712:	4413      	add	r3, r2
 800a714:	61fb      	str	r3, [r7, #28]
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	699a      	ldr	r2, [r3, #24]
 800a71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a71c:	441a      	add	r2, r3
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	619a      	str	r2, [r3, #24]
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	68da      	ldr	r2, [r3, #12]
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	699b      	ldr	r3, [r3, #24]
 800a72a:	429a      	cmp	r2, r3
 800a72c:	bf38      	it	cc
 800a72e:	461a      	movcc	r2, r3
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	60da      	str	r2, [r3, #12]
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	681a      	ldr	r2, [r3, #0]
 800a738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a73a:	441a      	add	r2, r3
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	601a      	str	r2, [r3, #0]
 800a740:	687a      	ldr	r2, [r7, #4]
 800a742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a744:	1ad3      	subs	r3, r2, r3
 800a746:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	f47f aeb6 	bne.w	800a4bc <f_write+0x8e>
 800a750:	e000      	b.n	800a754 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a752:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	7d1b      	ldrb	r3, [r3, #20]
 800a758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a75c:	b2da      	uxtb	r2, r3
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	2100      	movs	r1, #0
 800a766:	4618      	mov	r0, r3
 800a768:	f7fd ff88 	bl	800867c <unlock_fs>
 800a76c:	2300      	movs	r3, #0
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3730      	adds	r7, #48	; 0x30
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}

0800a776 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a776:	b580      	push	{r7, lr}
 800a778:	b086      	sub	sp, #24
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f107 0208 	add.w	r2, r7, #8
 800a784:	4611      	mov	r1, r2
 800a786:	4618      	mov	r0, r3
 800a788:	f7ff fbe0 	bl	8009f4c <validate>
 800a78c:	4603      	mov	r3, r0
 800a78e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a790:	7dfb      	ldrb	r3, [r7, #23]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d16d      	bne.n	800a872 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	7d1b      	ldrb	r3, [r3, #20]
 800a79a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d067      	beq.n	800a872 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	7d1b      	ldrb	r3, [r3, #20]
 800a7a6:	b25b      	sxtb	r3, r3
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	da1a      	bge.n	800a7e2 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	7858      	ldrb	r0, [r3, #1]
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6a1a      	ldr	r2, [r3, #32]
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	f7fd fe0a 	bl	80083d4 <disk_write>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d006      	beq.n	800a7d4 <f_sync+0x5e>
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	2101      	movs	r1, #1
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f7fd ff56 	bl	800867c <unlock_fs>
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	e055      	b.n	800a880 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	7d1b      	ldrb	r3, [r3, #20]
 800a7d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7dc:	b2da      	uxtb	r2, r3
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a7e2:	f7fd fb2f 	bl	8007e44 <get_fattime>
 800a7e6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a7e8:	68ba      	ldr	r2, [r7, #8]
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ee:	4619      	mov	r1, r3
 800a7f0:	4610      	mov	r0, r2
 800a7f2:	f7fe f90f 	bl	8008a14 <move_window>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a7fa:	7dfb      	ldrb	r3, [r7, #23]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d138      	bne.n	800a872 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a804:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	330b      	adds	r3, #11
 800a80a:	781a      	ldrb	r2, [r3, #0]
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	330b      	adds	r3, #11
 800a810:	f042 0220 	orr.w	r2, r2, #32
 800a814:	b2d2      	uxtb	r2, r2
 800a816:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6818      	ldr	r0, [r3, #0]
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	689b      	ldr	r3, [r3, #8]
 800a820:	461a      	mov	r2, r3
 800a822:	68f9      	ldr	r1, [r7, #12]
 800a824:	f7fe fe1c 	bl	8009460 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f103 021c 	add.w	r2, r3, #28
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	68db      	ldr	r3, [r3, #12]
 800a832:	4619      	mov	r1, r3
 800a834:	4610      	mov	r0, r2
 800a836:	f7fd fe61 	bl	80084fc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	3316      	adds	r3, #22
 800a83e:	6939      	ldr	r1, [r7, #16]
 800a840:	4618      	mov	r0, r3
 800a842:	f7fd fe5b 	bl	80084fc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	3312      	adds	r3, #18
 800a84a:	2100      	movs	r1, #0
 800a84c:	4618      	mov	r0, r3
 800a84e:	f7fd fe3a 	bl	80084c6 <st_word>
					fs->wflag = 1;
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	2201      	movs	r2, #1
 800a856:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	4618      	mov	r0, r3
 800a85c:	f7fe f908 	bl	8008a70 <sync_fs>
 800a860:	4603      	mov	r3, r0
 800a862:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	7d1b      	ldrb	r3, [r3, #20]
 800a868:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a86c:	b2da      	uxtb	r2, r3
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	7dfa      	ldrb	r2, [r7, #23]
 800a876:	4611      	mov	r1, r2
 800a878:	4618      	mov	r0, r3
 800a87a:	f7fd feff 	bl	800867c <unlock_fs>
 800a87e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a880:	4618      	mov	r0, r3
 800a882:	3718      	adds	r7, #24
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}

0800a888 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b084      	sub	sp, #16
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f7ff ff70 	bl	800a776 <f_sync>
 800a896:	4603      	mov	r3, r0
 800a898:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a89a:	7bfb      	ldrb	r3, [r7, #15]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d11d      	bne.n	800a8dc <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f107 0208 	add.w	r2, r7, #8
 800a8a6:	4611      	mov	r1, r2
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f7ff fb4f 	bl	8009f4c <validate>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a8b2:	7bfb      	ldrb	r3, [r7, #15]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d111      	bne.n	800a8dc <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	691b      	ldr	r3, [r3, #16]
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f7fe f805 	bl	80088cc <dec_lock>
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a8c6:	7bfb      	ldrb	r3, [r7, #15]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d102      	bne.n	800a8d2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	2100      	movs	r1, #0
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f7fd fed0 	bl	800867c <unlock_fs>
#endif
		}
	}
	return res;
 800a8dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	3710      	adds	r7, #16
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}

0800a8e6 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800a8e6:	b580      	push	{r7, lr}
 800a8e8:	b090      	sub	sp, #64	; 0x40
 800a8ea:	af00      	add	r7, sp, #0
 800a8ec:	6078      	str	r0, [r7, #4]
 800a8ee:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f107 0208 	add.w	r2, r7, #8
 800a8f6:	4611      	mov	r1, r2
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f7ff fb27 	bl	8009f4c <validate>
 800a8fe:	4603      	mov	r3, r0
 800a900:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800a904:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d103      	bne.n	800a914 <f_lseek+0x2e>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	7d5b      	ldrb	r3, [r3, #21]
 800a910:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800a914:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d009      	beq.n	800a930 <f_lseek+0x4a>
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800a922:	4611      	mov	r1, r2
 800a924:	4618      	mov	r0, r3
 800a926:	f7fd fea9 	bl	800867c <unlock_fs>
 800a92a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a92e:	e229      	b.n	800ad84 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a934:	2b00      	cmp	r3, #0
 800a936:	f000 80ea 	beq.w	800ab0e <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a940:	d164      	bne.n	800aa0c <f_lseek+0x126>
			tbl = fp->cltbl;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a946:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800a948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a94a:	1d1a      	adds	r2, r3, #4
 800a94c:	627a      	str	r2, [r7, #36]	; 0x24
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	617b      	str	r3, [r7, #20]
 800a952:	2302      	movs	r3, #2
 800a954:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	689b      	ldr	r3, [r3, #8]
 800a95a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800a95c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d044      	beq.n	800a9ec <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800a962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a964:	613b      	str	r3, [r7, #16]
 800a966:	2300      	movs	r3, #0
 800a968:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a96c:	3302      	adds	r3, #2
 800a96e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800a970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a972:	60fb      	str	r3, [r7, #12]
 800a974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a976:	3301      	adds	r3, #1
 800a978:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a97e:	4618      	mov	r0, r3
 800a980:	f7fe f903 	bl	8008b8a <get_fat>
 800a984:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800a986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a988:	2b01      	cmp	r3, #1
 800a98a:	d809      	bhi.n	800a9a0 <f_lseek+0xba>
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2202      	movs	r2, #2
 800a990:	755a      	strb	r2, [r3, #21]
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	2102      	movs	r1, #2
 800a996:	4618      	mov	r0, r3
 800a998:	f7fd fe70 	bl	800867c <unlock_fs>
 800a99c:	2302      	movs	r3, #2
 800a99e:	e1f1      	b.n	800ad84 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9a6:	d109      	bne.n	800a9bc <f_lseek+0xd6>
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2201      	movs	r2, #1
 800a9ac:	755a      	strb	r2, [r3, #21]
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	2101      	movs	r1, #1
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f7fd fe62 	bl	800867c <unlock_fs>
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	e1e3      	b.n	800ad84 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	3301      	adds	r3, #1
 800a9c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9c2:	429a      	cmp	r2, r3
 800a9c4:	d0d4      	beq.n	800a970 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800a9c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d809      	bhi.n	800a9e2 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 800a9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d0:	1d1a      	adds	r2, r3, #4
 800a9d2:	627a      	str	r2, [r7, #36]	; 0x24
 800a9d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9d6:	601a      	str	r2, [r3, #0]
 800a9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9da:	1d1a      	adds	r2, r3, #4
 800a9dc:	627a      	str	r2, [r7, #36]	; 0x24
 800a9de:	693a      	ldr	r2, [r7, #16]
 800a9e0:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	699b      	ldr	r3, [r3, #24]
 800a9e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9e8:	429a      	cmp	r2, r3
 800a9ea:	d3ba      	bcc.n	800a962 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a9f2:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800a9f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	d803      	bhi.n	800aa04 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 800a9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9fe:	2200      	movs	r2, #0
 800aa00:	601a      	str	r2, [r3, #0]
 800aa02:	e1b6      	b.n	800ad72 <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800aa04:	2311      	movs	r3, #17
 800aa06:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800aa0a:	e1b2      	b.n	800ad72 <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	68db      	ldr	r3, [r3, #12]
 800aa10:	683a      	ldr	r2, [r7, #0]
 800aa12:	429a      	cmp	r2, r3
 800aa14:	d902      	bls.n	800aa1c <f_lseek+0x136>
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	68db      	ldr	r3, [r3, #12]
 800aa1a:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	683a      	ldr	r2, [r7, #0]
 800aa20:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	f000 81a4 	beq.w	800ad72 <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	3b01      	subs	r3, #1
 800aa2e:	4619      	mov	r1, r3
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f7fe fb3b 	bl	80090ac <clmt_clust>
 800aa36:	4602      	mov	r2, r0
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800aa3c:	68ba      	ldr	r2, [r7, #8]
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	69db      	ldr	r3, [r3, #28]
 800aa42:	4619      	mov	r1, r3
 800aa44:	4610      	mov	r0, r2
 800aa46:	f7fe f881 	bl	8008b4c <clust2sect>
 800aa4a:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800aa4c:	69bb      	ldr	r3, [r7, #24]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d109      	bne.n	800aa66 <f_lseek+0x180>
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2202      	movs	r2, #2
 800aa56:	755a      	strb	r2, [r3, #21]
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	2102      	movs	r1, #2
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	f7fd fe0d 	bl	800867c <unlock_fs>
 800aa62:	2302      	movs	r3, #2
 800aa64:	e18e      	b.n	800ad84 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	3b01      	subs	r3, #1
 800aa6a:	0a5b      	lsrs	r3, r3, #9
 800aa6c:	68ba      	ldr	r2, [r7, #8]
 800aa6e:	8952      	ldrh	r2, [r2, #10]
 800aa70:	3a01      	subs	r2, #1
 800aa72:	4013      	ands	r3, r2
 800aa74:	69ba      	ldr	r2, [r7, #24]
 800aa76:	4413      	add	r3, r2
 800aa78:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	699b      	ldr	r3, [r3, #24]
 800aa7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	f000 8175 	beq.w	800ad72 <f_lseek+0x48c>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6a1b      	ldr	r3, [r3, #32]
 800aa8c:	69ba      	ldr	r2, [r7, #24]
 800aa8e:	429a      	cmp	r2, r3
 800aa90:	f000 816f 	beq.w	800ad72 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	7d1b      	ldrb	r3, [r3, #20]
 800aa98:	b25b      	sxtb	r3, r3
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	da1d      	bge.n	800aada <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	7858      	ldrb	r0, [r3, #1]
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6a1a      	ldr	r2, [r3, #32]
 800aaac:	2301      	movs	r3, #1
 800aaae:	f7fd fc91 	bl	80083d4 <disk_write>
 800aab2:	4603      	mov	r3, r0
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d009      	beq.n	800aacc <f_lseek+0x1e6>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2201      	movs	r2, #1
 800aabc:	755a      	strb	r2, [r3, #21]
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	2101      	movs	r1, #1
 800aac2:	4618      	mov	r0, r3
 800aac4:	f7fd fdda 	bl	800867c <unlock_fs>
 800aac8:	2301      	movs	r3, #1
 800aaca:	e15b      	b.n	800ad84 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	7d1b      	ldrb	r3, [r3, #20]
 800aad0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aad4:	b2da      	uxtb	r2, r3
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	7858      	ldrb	r0, [r3, #1]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aae4:	2301      	movs	r3, #1
 800aae6:	69ba      	ldr	r2, [r7, #24]
 800aae8:	f7fd fc54 	bl	8008394 <disk_read>
 800aaec:	4603      	mov	r3, r0
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d009      	beq.n	800ab06 <f_lseek+0x220>
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2201      	movs	r2, #1
 800aaf6:	755a      	strb	r2, [r3, #21]
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	2101      	movs	r1, #1
 800aafc:	4618      	mov	r0, r3
 800aafe:	f7fd fdbd 	bl	800867c <unlock_fs>
 800ab02:	2301      	movs	r3, #1
 800ab04:	e13e      	b.n	800ad84 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	69ba      	ldr	r2, [r7, #24]
 800ab0a:	621a      	str	r2, [r3, #32]
 800ab0c:	e131      	b.n	800ad72 <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	68db      	ldr	r3, [r3, #12]
 800ab12:	683a      	ldr	r2, [r7, #0]
 800ab14:	429a      	cmp	r2, r3
 800ab16:	d908      	bls.n	800ab2a <f_lseek+0x244>
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	7d1b      	ldrb	r3, [r3, #20]
 800ab1c:	f003 0302 	and.w	r3, r3, #2
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d102      	bne.n	800ab2a <f_lseek+0x244>
			ofs = fp->obj.objsize;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	68db      	ldr	r3, [r3, #12]
 800ab28:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	699b      	ldr	r3, [r3, #24]
 800ab2e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800ab30:	2300      	movs	r3, #0
 800ab32:	637b      	str	r3, [r7, #52]	; 0x34
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab38:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	f000 80c0 	beq.w	800acc2 <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	895b      	ldrh	r3, [r3, #10]
 800ab46:	025b      	lsls	r3, r3, #9
 800ab48:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800ab4a:	6a3b      	ldr	r3, [r7, #32]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d01b      	beq.n	800ab88 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	1e5a      	subs	r2, r3, #1
 800ab54:	69fb      	ldr	r3, [r7, #28]
 800ab56:	fbb2 f2f3 	udiv	r2, r2, r3
 800ab5a:	6a3b      	ldr	r3, [r7, #32]
 800ab5c:	1e59      	subs	r1, r3, #1
 800ab5e:	69fb      	ldr	r3, [r7, #28]
 800ab60:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800ab64:	429a      	cmp	r2, r3
 800ab66:	d30f      	bcc.n	800ab88 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800ab68:	6a3b      	ldr	r3, [r7, #32]
 800ab6a:	1e5a      	subs	r2, r3, #1
 800ab6c:	69fb      	ldr	r3, [r7, #28]
 800ab6e:	425b      	negs	r3, r3
 800ab70:	401a      	ands	r2, r3
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	699b      	ldr	r3, [r3, #24]
 800ab7a:	683a      	ldr	r2, [r7, #0]
 800ab7c:	1ad3      	subs	r3, r2, r3
 800ab7e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	69db      	ldr	r3, [r3, #28]
 800ab84:	63bb      	str	r3, [r7, #56]	; 0x38
 800ab86:	e02c      	b.n	800abe2 <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	689b      	ldr	r3, [r3, #8]
 800ab8c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800ab8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d123      	bne.n	800abdc <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2100      	movs	r1, #0
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f7fe f9ef 	bl	8008f7c <create_chain>
 800ab9e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800aba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aba2:	2b01      	cmp	r3, #1
 800aba4:	d109      	bne.n	800abba <f_lseek+0x2d4>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2202      	movs	r2, #2
 800abaa:	755a      	strb	r2, [r3, #21]
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	2102      	movs	r1, #2
 800abb0:	4618      	mov	r0, r3
 800abb2:	f7fd fd63 	bl	800867c <unlock_fs>
 800abb6:	2302      	movs	r3, #2
 800abb8:	e0e4      	b.n	800ad84 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800abba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800abc0:	d109      	bne.n	800abd6 <f_lseek+0x2f0>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2201      	movs	r2, #1
 800abc6:	755a      	strb	r2, [r3, #21]
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	2101      	movs	r1, #1
 800abcc:	4618      	mov	r0, r3
 800abce:	f7fd fd55 	bl	800867c <unlock_fs>
 800abd2:	2301      	movs	r3, #1
 800abd4:	e0d6      	b.n	800ad84 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800abda:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800abe0:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800abe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d06c      	beq.n	800acc2 <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 800abe8:	e044      	b.n	800ac74 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 800abea:	683a      	ldr	r2, [r7, #0]
 800abec:	69fb      	ldr	r3, [r7, #28]
 800abee:	1ad3      	subs	r3, r2, r3
 800abf0:	603b      	str	r3, [r7, #0]
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	699a      	ldr	r2, [r3, #24]
 800abf6:	69fb      	ldr	r3, [r7, #28]
 800abf8:	441a      	add	r2, r3
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	7d1b      	ldrb	r3, [r3, #20]
 800ac02:	f003 0302 	and.w	r3, r3, #2
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d00b      	beq.n	800ac22 <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f7fe f9b4 	bl	8008f7c <create_chain>
 800ac14:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800ac16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d108      	bne.n	800ac2e <f_lseek+0x348>
							ofs = 0; break;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	603b      	str	r3, [r7, #0]
 800ac20:	e02c      	b.n	800ac7c <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ac26:	4618      	mov	r0, r3
 800ac28:	f7fd ffaf 	bl	8008b8a <get_fat>
 800ac2c:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ac2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac34:	d109      	bne.n	800ac4a <f_lseek+0x364>
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2201      	movs	r2, #1
 800ac3a:	755a      	strb	r2, [r3, #21]
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	2101      	movs	r1, #1
 800ac40:	4618      	mov	r0, r3
 800ac42:	f7fd fd1b 	bl	800867c <unlock_fs>
 800ac46:	2301      	movs	r3, #1
 800ac48:	e09c      	b.n	800ad84 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800ac4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac4c:	2b01      	cmp	r3, #1
 800ac4e:	d904      	bls.n	800ac5a <f_lseek+0x374>
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	699b      	ldr	r3, [r3, #24]
 800ac54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac56:	429a      	cmp	r2, r3
 800ac58:	d309      	bcc.n	800ac6e <f_lseek+0x388>
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2202      	movs	r2, #2
 800ac5e:	755a      	strb	r2, [r3, #21]
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	2102      	movs	r1, #2
 800ac64:	4618      	mov	r0, r3
 800ac66:	f7fd fd09 	bl	800867c <unlock_fs>
 800ac6a:	2302      	movs	r3, #2
 800ac6c:	e08a      	b.n	800ad84 <f_lseek+0x49e>
					fp->clust = clst;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac72:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800ac74:	683a      	ldr	r2, [r7, #0]
 800ac76:	69fb      	ldr	r3, [r7, #28]
 800ac78:	429a      	cmp	r2, r3
 800ac7a:	d8b6      	bhi.n	800abea <f_lseek+0x304>
				}
				fp->fptr += ofs;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	699a      	ldr	r2, [r3, #24]
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	441a      	add	r2, r3
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d017      	beq.n	800acc2 <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ac96:	4618      	mov	r0, r3
 800ac98:	f7fd ff58 	bl	8008b4c <clust2sect>
 800ac9c:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800ac9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d109      	bne.n	800acb8 <f_lseek+0x3d2>
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2202      	movs	r2, #2
 800aca8:	755a      	strb	r2, [r3, #21]
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	2102      	movs	r1, #2
 800acae:	4618      	mov	r0, r3
 800acb0:	f7fd fce4 	bl	800867c <unlock_fs>
 800acb4:	2302      	movs	r3, #2
 800acb6:	e065      	b.n	800ad84 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	0a5b      	lsrs	r3, r3, #9
 800acbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800acbe:	4413      	add	r3, r2
 800acc0:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	699a      	ldr	r2, [r3, #24]
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	68db      	ldr	r3, [r3, #12]
 800acca:	429a      	cmp	r2, r3
 800accc:	d90a      	bls.n	800ace4 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	699a      	ldr	r2, [r3, #24]
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	7d1b      	ldrb	r3, [r3, #20]
 800acda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acde:	b2da      	uxtb	r2, r3
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	699b      	ldr	r3, [r3, #24]
 800ace8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acec:	2b00      	cmp	r3, #0
 800acee:	d040      	beq.n	800ad72 <f_lseek+0x48c>
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6a1b      	ldr	r3, [r3, #32]
 800acf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800acf6:	429a      	cmp	r2, r3
 800acf8:	d03b      	beq.n	800ad72 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	7d1b      	ldrb	r3, [r3, #20]
 800acfe:	b25b      	sxtb	r3, r3
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	da1d      	bge.n	800ad40 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	7858      	ldrb	r0, [r3, #1]
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6a1a      	ldr	r2, [r3, #32]
 800ad12:	2301      	movs	r3, #1
 800ad14:	f7fd fb5e 	bl	80083d4 <disk_write>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d009      	beq.n	800ad32 <f_lseek+0x44c>
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2201      	movs	r2, #1
 800ad22:	755a      	strb	r2, [r3, #21]
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	2101      	movs	r1, #1
 800ad28:	4618      	mov	r0, r3
 800ad2a:	f7fd fca7 	bl	800867c <unlock_fs>
 800ad2e:	2301      	movs	r3, #1
 800ad30:	e028      	b.n	800ad84 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	7d1b      	ldrb	r3, [r3, #20]
 800ad36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad3a:	b2da      	uxtb	r2, r3
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	7858      	ldrb	r0, [r3, #1]
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad4e:	f7fd fb21 	bl	8008394 <disk_read>
 800ad52:	4603      	mov	r3, r0
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d009      	beq.n	800ad6c <f_lseek+0x486>
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	755a      	strb	r2, [r3, #21]
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	2101      	movs	r1, #1
 800ad62:	4618      	mov	r0, r3
 800ad64:	f7fd fc8a 	bl	800867c <unlock_fs>
 800ad68:	2301      	movs	r3, #1
 800ad6a:	e00b      	b.n	800ad84 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad70:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800ad72:	68bb      	ldr	r3, [r7, #8]
 800ad74:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800ad78:	4611      	mov	r1, r2
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f7fd fc7e 	bl	800867c <unlock_fs>
 800ad80:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	3740      	adds	r7, #64	; 0x40
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}

0800ad8c <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b086      	sub	sp, #24
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
 800ad94:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d101      	bne.n	800ada0 <f_opendir+0x14>
 800ad9c:	2309      	movs	r3, #9
 800ad9e:	e06a      	b.n	800ae76 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800ada4:	f107 010c 	add.w	r1, r7, #12
 800ada8:	463b      	mov	r3, r7
 800adaa:	2200      	movs	r2, #0
 800adac:	4618      	mov	r0, r3
 800adae:	f7fe fe79 	bl	8009aa4 <find_volume>
 800adb2:	4603      	mov	r3, r0
 800adb4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800adb6:	7dfb      	ldrb	r3, [r7, #23]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d14f      	bne.n	800ae5c <f_opendir+0xd0>
		obj->fs = fs;
 800adbc:	68fa      	ldr	r2, [r7, #12]
 800adbe:	693b      	ldr	r3, [r7, #16]
 800adc0:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	4619      	mov	r1, r3
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f7fe fd60 	bl	800988c <follow_path>
 800adcc:	4603      	mov	r3, r0
 800adce:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800add0:	7dfb      	ldrb	r3, [r7, #23]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d13d      	bne.n	800ae52 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800addc:	b25b      	sxtb	r3, r3
 800adde:	2b00      	cmp	r3, #0
 800ade0:	db12      	blt.n	800ae08 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800ade2:	693b      	ldr	r3, [r7, #16]
 800ade4:	799b      	ldrb	r3, [r3, #6]
 800ade6:	f003 0310 	and.w	r3, r3, #16
 800adea:	2b00      	cmp	r3, #0
 800adec:	d00a      	beq.n	800ae04 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800adee:	68fa      	ldr	r2, [r7, #12]
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6a1b      	ldr	r3, [r3, #32]
 800adf4:	4619      	mov	r1, r3
 800adf6:	4610      	mov	r0, r2
 800adf8:	f7fe fb13 	bl	8009422 <ld_clust>
 800adfc:	4602      	mov	r2, r0
 800adfe:	693b      	ldr	r3, [r7, #16]
 800ae00:	609a      	str	r2, [r3, #8]
 800ae02:	e001      	b.n	800ae08 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800ae04:	2305      	movs	r3, #5
 800ae06:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800ae08:	7dfb      	ldrb	r3, [r7, #23]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d121      	bne.n	800ae52 <f_opendir+0xc6>
				obj->id = fs->id;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	88da      	ldrh	r2, [r3, #6]
 800ae12:	693b      	ldr	r3, [r7, #16]
 800ae14:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800ae16:	2100      	movs	r1, #0
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f7fe f97b 	bl	8009114 <dir_sdi>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800ae22:	7dfb      	ldrb	r3, [r7, #23]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d114      	bne.n	800ae52 <f_opendir+0xc6>
					if (obj->sclust) {
 800ae28:	693b      	ldr	r3, [r7, #16]
 800ae2a:	689b      	ldr	r3, [r3, #8]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d00d      	beq.n	800ae4c <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800ae30:	2100      	movs	r1, #0
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f7fd fcbc 	bl	80087b0 <inc_lock>
 800ae38:	4602      	mov	r2, r0
 800ae3a:	693b      	ldr	r3, [r7, #16]
 800ae3c:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800ae3e:	693b      	ldr	r3, [r7, #16]
 800ae40:	691b      	ldr	r3, [r3, #16]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d105      	bne.n	800ae52 <f_opendir+0xc6>
 800ae46:	2312      	movs	r3, #18
 800ae48:	75fb      	strb	r3, [r7, #23]
 800ae4a:	e002      	b.n	800ae52 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800ae52:	7dfb      	ldrb	r3, [r7, #23]
 800ae54:	2b04      	cmp	r3, #4
 800ae56:	d101      	bne.n	800ae5c <f_opendir+0xd0>
 800ae58:	2305      	movs	r3, #5
 800ae5a:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800ae5c:	7dfb      	ldrb	r3, [r7, #23]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d002      	beq.n	800ae68 <f_opendir+0xdc>
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	2200      	movs	r2, #0
 800ae66:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	7dfa      	ldrb	r2, [r7, #23]
 800ae6c:	4611      	mov	r1, r2
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f7fd fc04 	bl	800867c <unlock_fs>
 800ae74:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	3718      	adds	r7, #24
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}

0800ae7e <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800ae7e:	b580      	push	{r7, lr}
 800ae80:	b084      	sub	sp, #16
 800ae82:	af00      	add	r7, sp, #0
 800ae84:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f107 0208 	add.w	r2, r7, #8
 800ae8c:	4611      	mov	r1, r2
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f7ff f85c 	bl	8009f4c <validate>
 800ae94:	4603      	mov	r3, r0
 800ae96:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ae98:	7bfb      	ldrb	r3, [r7, #15]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d115      	bne.n	800aeca <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	691b      	ldr	r3, [r3, #16]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d006      	beq.n	800aeb4 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	691b      	ldr	r3, [r3, #16]
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f7fd fd0e 	bl	80088cc <dec_lock>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800aeb4:	7bfb      	ldrb	r3, [r7, #15]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d102      	bne.n	800aec0 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2200      	movs	r2, #0
 800aebe:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	2100      	movs	r1, #0
 800aec4:	4618      	mov	r0, r3
 800aec6:	f7fd fbd9 	bl	800867c <unlock_fs>
#endif
	}
	return res;
 800aeca:	7bfb      	ldrb	r3, [r7, #15]
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3710      	adds	r7, #16
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}

0800aed4 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b084      	sub	sp, #16
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f107 0208 	add.w	r2, r7, #8
 800aee4:	4611      	mov	r1, r2
 800aee6:	4618      	mov	r0, r3
 800aee8:	f7ff f830 	bl	8009f4c <validate>
 800aeec:	4603      	mov	r3, r0
 800aeee:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800aef0:	7bfb      	ldrb	r3, [r7, #15]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d126      	bne.n	800af44 <f_readdir+0x70>
		if (!fno) {
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d106      	bne.n	800af0a <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800aefc:	2100      	movs	r1, #0
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f7fe f908 	bl	8009114 <dir_sdi>
 800af04:	4603      	mov	r3, r0
 800af06:	73fb      	strb	r3, [r7, #15]
 800af08:	e01c      	b.n	800af44 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800af0a:	2100      	movs	r1, #0
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f7fe fac7 	bl	80094a0 <dir_read>
 800af12:	4603      	mov	r3, r0
 800af14:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800af16:	7bfb      	ldrb	r3, [r7, #15]
 800af18:	2b04      	cmp	r3, #4
 800af1a:	d101      	bne.n	800af20 <f_readdir+0x4c>
 800af1c:	2300      	movs	r3, #0
 800af1e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800af20:	7bfb      	ldrb	r3, [r7, #15]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d10e      	bne.n	800af44 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800af26:	6839      	ldr	r1, [r7, #0]
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f7fe fbbb 	bl	80096a4 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800af2e:	2100      	movs	r1, #0
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f7fe f96a 	bl	800920a <dir_next>
 800af36:	4603      	mov	r3, r0
 800af38:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800af3a:	7bfb      	ldrb	r3, [r7, #15]
 800af3c:	2b04      	cmp	r3, #4
 800af3e:	d101      	bne.n	800af44 <f_readdir+0x70>
 800af40:	2300      	movs	r3, #0
 800af42:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	7bfa      	ldrb	r2, [r7, #15]
 800af48:	4611      	mov	r1, r2
 800af4a:	4618      	mov	r0, r3
 800af4c:	f7fd fb96 	bl	800867c <unlock_fs>
 800af50:	7bfb      	ldrb	r3, [r7, #15]
}
 800af52:	4618      	mov	r0, r3
 800af54:	3710      	adds	r7, #16
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}

0800af5a <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800af5a:	b580      	push	{r7, lr}
 800af5c:	b09e      	sub	sp, #120	; 0x78
 800af5e:	af00      	add	r7, sp, #0
 800af60:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800af62:	2300      	movs	r3, #0
 800af64:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800af66:	f107 010c 	add.w	r1, r7, #12
 800af6a:	1d3b      	adds	r3, r7, #4
 800af6c:	2202      	movs	r2, #2
 800af6e:	4618      	mov	r0, r3
 800af70:	f7fe fd98 	bl	8009aa4 <find_volume>
 800af74:	4603      	mov	r3, r0
 800af76:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 800af7e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800af82:	2b00      	cmp	r3, #0
 800af84:	f040 808e 	bne.w	800b0a4 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800af88:	687a      	ldr	r2, [r7, #4]
 800af8a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800af8e:	4611      	mov	r1, r2
 800af90:	4618      	mov	r0, r3
 800af92:	f7fe fc7b 	bl	800988c <follow_path>
 800af96:	4603      	mov	r3, r0
 800af98:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800af9c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d108      	bne.n	800afb6 <f_unlink+0x5c>
 800afa4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800afa8:	2102      	movs	r1, #2
 800afaa:	4618      	mov	r0, r3
 800afac:	f7fd fb82 	bl	80086b4 <chk_lock>
 800afb0:	4603      	mov	r3, r0
 800afb2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800afb6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d172      	bne.n	800b0a4 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800afbe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800afc2:	b25b      	sxtb	r3, r3
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	da03      	bge.n	800afd0 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800afc8:	2306      	movs	r3, #6
 800afca:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800afce:	e008      	b.n	800afe2 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800afd0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800afd4:	f003 0301 	and.w	r3, r3, #1
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d002      	beq.n	800afe2 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800afdc:	2307      	movs	r3, #7
 800afde:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 800afe2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d134      	bne.n	800b054 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800afee:	4611      	mov	r1, r2
 800aff0:	4618      	mov	r0, r3
 800aff2:	f7fe fa16 	bl	8009422 <ld_clust>
 800aff6:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800aff8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800affc:	f003 0310 	and.w	r3, r3, #16
 800b000:	2b00      	cmp	r3, #0
 800b002:	d027      	beq.n	800b054 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800b008:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b00a:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800b00c:	f107 0310 	add.w	r3, r7, #16
 800b010:	2100      	movs	r1, #0
 800b012:	4618      	mov	r0, r3
 800b014:	f7fe f87e 	bl	8009114 <dir_sdi>
 800b018:	4603      	mov	r3, r0
 800b01a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 800b01e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b022:	2b00      	cmp	r3, #0
 800b024:	d116      	bne.n	800b054 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800b026:	f107 0310 	add.w	r3, r7, #16
 800b02a:	2100      	movs	r1, #0
 800b02c:	4618      	mov	r0, r3
 800b02e:	f7fe fa37 	bl	80094a0 <dir_read>
 800b032:	4603      	mov	r3, r0
 800b034:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800b038:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d102      	bne.n	800b046 <f_unlink+0xec>
 800b040:	2307      	movs	r3, #7
 800b042:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800b046:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b04a:	2b04      	cmp	r3, #4
 800b04c:	d102      	bne.n	800b054 <f_unlink+0xfa>
 800b04e:	2300      	movs	r3, #0
 800b050:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 800b054:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d123      	bne.n	800b0a4 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800b05c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b060:	4618      	mov	r0, r3
 800b062:	f7fe fb01 	bl	8009668 <dir_remove>
 800b066:	4603      	mov	r3, r0
 800b068:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800b06c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b070:	2b00      	cmp	r3, #0
 800b072:	d10c      	bne.n	800b08e <f_unlink+0x134>
 800b074:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b076:	2b00      	cmp	r3, #0
 800b078:	d009      	beq.n	800b08e <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800b07a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b07e:	2200      	movs	r2, #0
 800b080:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800b082:	4618      	mov	r0, r3
 800b084:	f7fd ff15 	bl	8008eb2 <remove_chain>
 800b088:	4603      	mov	r3, r0
 800b08a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800b08e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b092:	2b00      	cmp	r3, #0
 800b094:	d106      	bne.n	800b0a4 <f_unlink+0x14a>
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	4618      	mov	r0, r3
 800b09a:	f7fd fce9 	bl	8008a70 <sync_fs>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800b0aa:	4611      	mov	r1, r2
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	f7fd fae5 	bl	800867c <unlock_fs>
 800b0b2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3778      	adds	r7, #120	; 0x78
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}
	...

0800b0c0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b087      	sub	sp, #28
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	60f8      	str	r0, [r7, #12]
 800b0c8:	60b9      	str	r1, [r7, #8]
 800b0ca:	4613      	mov	r3, r2
 800b0cc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b0ce:	2301      	movs	r3, #1
 800b0d0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b0d6:	4b1f      	ldr	r3, [pc, #124]	; (800b154 <FATFS_LinkDriverEx+0x94>)
 800b0d8:	7a5b      	ldrb	r3, [r3, #9]
 800b0da:	b2db      	uxtb	r3, r3
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d131      	bne.n	800b144 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b0e0:	4b1c      	ldr	r3, [pc, #112]	; (800b154 <FATFS_LinkDriverEx+0x94>)
 800b0e2:	7a5b      	ldrb	r3, [r3, #9]
 800b0e4:	b2db      	uxtb	r3, r3
 800b0e6:	461a      	mov	r2, r3
 800b0e8:	4b1a      	ldr	r3, [pc, #104]	; (800b154 <FATFS_LinkDriverEx+0x94>)
 800b0ea:	2100      	movs	r1, #0
 800b0ec:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b0ee:	4b19      	ldr	r3, [pc, #100]	; (800b154 <FATFS_LinkDriverEx+0x94>)
 800b0f0:	7a5b      	ldrb	r3, [r3, #9]
 800b0f2:	b2db      	uxtb	r3, r3
 800b0f4:	4a17      	ldr	r2, [pc, #92]	; (800b154 <FATFS_LinkDriverEx+0x94>)
 800b0f6:	009b      	lsls	r3, r3, #2
 800b0f8:	4413      	add	r3, r2
 800b0fa:	68fa      	ldr	r2, [r7, #12]
 800b0fc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b0fe:	4b15      	ldr	r3, [pc, #84]	; (800b154 <FATFS_LinkDriverEx+0x94>)
 800b100:	7a5b      	ldrb	r3, [r3, #9]
 800b102:	b2db      	uxtb	r3, r3
 800b104:	461a      	mov	r2, r3
 800b106:	4b13      	ldr	r3, [pc, #76]	; (800b154 <FATFS_LinkDriverEx+0x94>)
 800b108:	4413      	add	r3, r2
 800b10a:	79fa      	ldrb	r2, [r7, #7]
 800b10c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b10e:	4b11      	ldr	r3, [pc, #68]	; (800b154 <FATFS_LinkDriverEx+0x94>)
 800b110:	7a5b      	ldrb	r3, [r3, #9]
 800b112:	b2db      	uxtb	r3, r3
 800b114:	1c5a      	adds	r2, r3, #1
 800b116:	b2d1      	uxtb	r1, r2
 800b118:	4a0e      	ldr	r2, [pc, #56]	; (800b154 <FATFS_LinkDriverEx+0x94>)
 800b11a:	7251      	strb	r1, [r2, #9]
 800b11c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b11e:	7dbb      	ldrb	r3, [r7, #22]
 800b120:	3330      	adds	r3, #48	; 0x30
 800b122:	b2da      	uxtb	r2, r3
 800b124:	68bb      	ldr	r3, [r7, #8]
 800b126:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	3301      	adds	r3, #1
 800b12c:	223a      	movs	r2, #58	; 0x3a
 800b12e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	3302      	adds	r3, #2
 800b134:	222f      	movs	r2, #47	; 0x2f
 800b136:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	3303      	adds	r3, #3
 800b13c:	2200      	movs	r2, #0
 800b13e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b140:	2300      	movs	r3, #0
 800b142:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b144:	7dfb      	ldrb	r3, [r7, #23]
}
 800b146:	4618      	mov	r0, r3
 800b148:	371c      	adds	r7, #28
 800b14a:	46bd      	mov	sp, r7
 800b14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b150:	4770      	bx	lr
 800b152:	bf00      	nop
 800b154:	20000d54 	.word	0x20000d54

0800b158 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b082      	sub	sp, #8
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
 800b160:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b162:	2200      	movs	r2, #0
 800b164:	6839      	ldr	r1, [r7, #0]
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f7ff ffaa 	bl	800b0c0 <FATFS_LinkDriverEx>
 800b16c:	4603      	mov	r3, r0
}
 800b16e:	4618      	mov	r0, r3
 800b170:	3708      	adds	r7, #8
 800b172:	46bd      	mov	sp, r7
 800b174:	bd80      	pop	{r7, pc}

0800b176 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800b176:	b580      	push	{r7, lr}
 800b178:	b084      	sub	sp, #16
 800b17a:	af00      	add	r7, sp, #0
 800b17c:	4603      	mov	r3, r0
 800b17e:	6039      	str	r1, [r7, #0]
 800b180:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800b182:	2200      	movs	r2, #0
 800b184:	2101      	movs	r1, #1
 800b186:	2001      	movs	r0, #1
 800b188:	f000 f9f0 	bl	800b56c <osSemaphoreNew>
 800b18c:	4602      	mov	r2, r0
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	2b00      	cmp	r3, #0
 800b198:	bf14      	ite	ne
 800b19a:	2301      	movne	r3, #1
 800b19c:	2300      	moveq	r3, #0
 800b19e:	b2db      	uxtb	r3, r3
 800b1a0:	60fb      	str	r3, [r7, #12]

    return ret;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	3710      	adds	r7, #16
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bd80      	pop	{r7, pc}

0800b1ac <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b082      	sub	sp, #8
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f000 faf9 	bl	800b7ac <osSemaphoreDelete>
#endif
    return 1;
 800b1ba:	2301      	movs	r3, #1
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3708      	adds	r7, #8
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}

0800b1c4 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b084      	sub	sp, #16
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800b1d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f000 fa53 	bl	800b680 <osSemaphoreAcquire>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d101      	bne.n	800b1e4 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	3710      	adds	r7, #16
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}

0800b1ee <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800b1ee:	b580      	push	{r7, lr}
 800b1f0:	b082      	sub	sp, #8
 800b1f2:	af00      	add	r7, sp, #0
 800b1f4:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f000 fa94 	bl	800b724 <osSemaphoreRelease>
#endif
}
 800b1fc:	bf00      	nop
 800b1fe:	3708      	adds	r7, #8
 800b200:	46bd      	mov	sp, r7
 800b202:	bd80      	pop	{r7, pc}

0800b204 <__NVIC_SetPriority>:
{
 800b204:	b480      	push	{r7}
 800b206:	b083      	sub	sp, #12
 800b208:	af00      	add	r7, sp, #0
 800b20a:	4603      	mov	r3, r0
 800b20c:	6039      	str	r1, [r7, #0]
 800b20e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b214:	2b00      	cmp	r3, #0
 800b216:	db0a      	blt.n	800b22e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	b2da      	uxtb	r2, r3
 800b21c:	490c      	ldr	r1, [pc, #48]	; (800b250 <__NVIC_SetPriority+0x4c>)
 800b21e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b222:	0112      	lsls	r2, r2, #4
 800b224:	b2d2      	uxtb	r2, r2
 800b226:	440b      	add	r3, r1
 800b228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b22c:	e00a      	b.n	800b244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	b2da      	uxtb	r2, r3
 800b232:	4908      	ldr	r1, [pc, #32]	; (800b254 <__NVIC_SetPriority+0x50>)
 800b234:	79fb      	ldrb	r3, [r7, #7]
 800b236:	f003 030f 	and.w	r3, r3, #15
 800b23a:	3b04      	subs	r3, #4
 800b23c:	0112      	lsls	r2, r2, #4
 800b23e:	b2d2      	uxtb	r2, r2
 800b240:	440b      	add	r3, r1
 800b242:	761a      	strb	r2, [r3, #24]
}
 800b244:	bf00      	nop
 800b246:	370c      	adds	r7, #12
 800b248:	46bd      	mov	sp, r7
 800b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24e:	4770      	bx	lr
 800b250:	e000e100 	.word	0xe000e100
 800b254:	e000ed00 	.word	0xe000ed00

0800b258 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b258:	b580      	push	{r7, lr}
 800b25a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b25c:	4b05      	ldr	r3, [pc, #20]	; (800b274 <SysTick_Handler+0x1c>)
 800b25e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b260:	f002 fcac 	bl	800dbbc <xTaskGetSchedulerState>
 800b264:	4603      	mov	r3, r0
 800b266:	2b01      	cmp	r3, #1
 800b268:	d001      	beq.n	800b26e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b26a:	f003 fb95 	bl	800e998 <xPortSysTickHandler>
  }
}
 800b26e:	bf00      	nop
 800b270:	bd80      	pop	{r7, pc}
 800b272:	bf00      	nop
 800b274:	e000e010 	.word	0xe000e010

0800b278 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b278:	b580      	push	{r7, lr}
 800b27a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b27c:	2100      	movs	r1, #0
 800b27e:	f06f 0004 	mvn.w	r0, #4
 800b282:	f7ff ffbf 	bl	800b204 <__NVIC_SetPriority>
#endif
}
 800b286:	bf00      	nop
 800b288:	bd80      	pop	{r7, pc}
	...

0800b28c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b28c:	b480      	push	{r7}
 800b28e:	b083      	sub	sp, #12
 800b290:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b292:	f3ef 8305 	mrs	r3, IPSR
 800b296:	603b      	str	r3, [r7, #0]
  return(result);
 800b298:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d003      	beq.n	800b2a6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b29e:	f06f 0305 	mvn.w	r3, #5
 800b2a2:	607b      	str	r3, [r7, #4]
 800b2a4:	e00c      	b.n	800b2c0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b2a6:	4b0a      	ldr	r3, [pc, #40]	; (800b2d0 <osKernelInitialize+0x44>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d105      	bne.n	800b2ba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b2ae:	4b08      	ldr	r3, [pc, #32]	; (800b2d0 <osKernelInitialize+0x44>)
 800b2b0:	2201      	movs	r2, #1
 800b2b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	607b      	str	r3, [r7, #4]
 800b2b8:	e002      	b.n	800b2c0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b2ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b2be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b2c0:	687b      	ldr	r3, [r7, #4]
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	370c      	adds	r7, #12
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2cc:	4770      	bx	lr
 800b2ce:	bf00      	nop
 800b2d0:	20000d60 	.word	0x20000d60

0800b2d4 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b082      	sub	sp, #8
 800b2d8:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800b2da:	f002 fc6f 	bl	800dbbc <xTaskGetSchedulerState>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d004      	beq.n	800b2ee <osKernelGetState+0x1a>
 800b2e4:	2b02      	cmp	r3, #2
 800b2e6:	d105      	bne.n	800b2f4 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800b2e8:	2302      	movs	r3, #2
 800b2ea:	607b      	str	r3, [r7, #4]
      break;
 800b2ec:	e00c      	b.n	800b308 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800b2ee:	2303      	movs	r3, #3
 800b2f0:	607b      	str	r3, [r7, #4]
      break;
 800b2f2:	e009      	b.n	800b308 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800b2f4:	4b07      	ldr	r3, [pc, #28]	; (800b314 <osKernelGetState+0x40>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	2b01      	cmp	r3, #1
 800b2fa:	d102      	bne.n	800b302 <osKernelGetState+0x2e>
        state = osKernelReady;
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800b300:	e001      	b.n	800b306 <osKernelGetState+0x32>
        state = osKernelInactive;
 800b302:	2300      	movs	r3, #0
 800b304:	607b      	str	r3, [r7, #4]
      break;
 800b306:	bf00      	nop
  }

  return (state);
 800b308:	687b      	ldr	r3, [r7, #4]
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	3708      	adds	r7, #8
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}
 800b312:	bf00      	nop
 800b314:	20000d60 	.word	0x20000d60

0800b318 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800b318:	b580      	push	{r7, lr}
 800b31a:	b082      	sub	sp, #8
 800b31c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b31e:	f3ef 8305 	mrs	r3, IPSR
 800b322:	603b      	str	r3, [r7, #0]
  return(result);
 800b324:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b326:	2b00      	cmp	r3, #0
 800b328:	d003      	beq.n	800b332 <osKernelStart+0x1a>
    stat = osErrorISR;
 800b32a:	f06f 0305 	mvn.w	r3, #5
 800b32e:	607b      	str	r3, [r7, #4]
 800b330:	e010      	b.n	800b354 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b332:	4b0b      	ldr	r3, [pc, #44]	; (800b360 <osKernelStart+0x48>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	2b01      	cmp	r3, #1
 800b338:	d109      	bne.n	800b34e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b33a:	f7ff ff9d 	bl	800b278 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b33e:	4b08      	ldr	r3, [pc, #32]	; (800b360 <osKernelStart+0x48>)
 800b340:	2202      	movs	r2, #2
 800b342:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b344:	f001 ffcc 	bl	800d2e0 <vTaskStartScheduler>
      stat = osOK;
 800b348:	2300      	movs	r3, #0
 800b34a:	607b      	str	r3, [r7, #4]
 800b34c:	e002      	b.n	800b354 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b34e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b352:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b354:	687b      	ldr	r3, [r7, #4]
}
 800b356:	4618      	mov	r0, r3
 800b358:	3708      	adds	r7, #8
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}
 800b35e:	bf00      	nop
 800b360:	20000d60 	.word	0x20000d60

0800b364 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800b364:	b580      	push	{r7, lr}
 800b366:	b082      	sub	sp, #8
 800b368:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b36a:	f3ef 8305 	mrs	r3, IPSR
 800b36e:	603b      	str	r3, [r7, #0]
  return(result);
 800b370:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800b372:	2b00      	cmp	r3, #0
 800b374:	d003      	beq.n	800b37e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800b376:	f002 f8df 	bl	800d538 <xTaskGetTickCountFromISR>
 800b37a:	6078      	str	r0, [r7, #4]
 800b37c:	e002      	b.n	800b384 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800b37e:	f002 f8cb 	bl	800d518 <xTaskGetTickCount>
 800b382:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800b384:	687b      	ldr	r3, [r7, #4]
}
 800b386:	4618      	mov	r0, r3
 800b388:	3708      	adds	r7, #8
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd80      	pop	{r7, pc}

0800b38e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b38e:	b580      	push	{r7, lr}
 800b390:	b08e      	sub	sp, #56	; 0x38
 800b392:	af04      	add	r7, sp, #16
 800b394:	60f8      	str	r0, [r7, #12]
 800b396:	60b9      	str	r1, [r7, #8]
 800b398:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b39a:	2300      	movs	r3, #0
 800b39c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b39e:	f3ef 8305 	mrs	r3, IPSR
 800b3a2:	617b      	str	r3, [r7, #20]
  return(result);
 800b3a4:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d17e      	bne.n	800b4a8 <osThreadNew+0x11a>
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d07b      	beq.n	800b4a8 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b3b0:	2380      	movs	r3, #128	; 0x80
 800b3b2:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b3b4:	2318      	movs	r3, #24
 800b3b6:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b3bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b3c0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d045      	beq.n	800b454 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d002      	beq.n	800b3d6 <osThreadNew+0x48>
        name = attr->name;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	699b      	ldr	r3, [r3, #24]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d002      	beq.n	800b3e4 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	699b      	ldr	r3, [r3, #24]
 800b3e2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b3e4:	69fb      	ldr	r3, [r7, #28]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d008      	beq.n	800b3fc <osThreadNew+0x6e>
 800b3ea:	69fb      	ldr	r3, [r7, #28]
 800b3ec:	2b38      	cmp	r3, #56	; 0x38
 800b3ee:	d805      	bhi.n	800b3fc <osThreadNew+0x6e>
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	685b      	ldr	r3, [r3, #4]
 800b3f4:	f003 0301 	and.w	r3, r3, #1
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d001      	beq.n	800b400 <osThreadNew+0x72>
        return (NULL);
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	e054      	b.n	800b4aa <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	695b      	ldr	r3, [r3, #20]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d003      	beq.n	800b410 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	695b      	ldr	r3, [r3, #20]
 800b40c:	089b      	lsrs	r3, r3, #2
 800b40e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	689b      	ldr	r3, [r3, #8]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d00e      	beq.n	800b436 <osThreadNew+0xa8>
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	68db      	ldr	r3, [r3, #12]
 800b41c:	2bbb      	cmp	r3, #187	; 0xbb
 800b41e:	d90a      	bls.n	800b436 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b424:	2b00      	cmp	r3, #0
 800b426:	d006      	beq.n	800b436 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	695b      	ldr	r3, [r3, #20]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d002      	beq.n	800b436 <osThreadNew+0xa8>
        mem = 1;
 800b430:	2301      	movs	r3, #1
 800b432:	61bb      	str	r3, [r7, #24]
 800b434:	e010      	b.n	800b458 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	689b      	ldr	r3, [r3, #8]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d10c      	bne.n	800b458 <osThreadNew+0xca>
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	68db      	ldr	r3, [r3, #12]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d108      	bne.n	800b458 <osThreadNew+0xca>
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	691b      	ldr	r3, [r3, #16]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d104      	bne.n	800b458 <osThreadNew+0xca>
          mem = 0;
 800b44e:	2300      	movs	r3, #0
 800b450:	61bb      	str	r3, [r7, #24]
 800b452:	e001      	b.n	800b458 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b454:	2300      	movs	r3, #0
 800b456:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b458:	69bb      	ldr	r3, [r7, #24]
 800b45a:	2b01      	cmp	r3, #1
 800b45c:	d110      	bne.n	800b480 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b462:	687a      	ldr	r2, [r7, #4]
 800b464:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b466:	9202      	str	r2, [sp, #8]
 800b468:	9301      	str	r3, [sp, #4]
 800b46a:	69fb      	ldr	r3, [r7, #28]
 800b46c:	9300      	str	r3, [sp, #0]
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	6a3a      	ldr	r2, [r7, #32]
 800b472:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b474:	68f8      	ldr	r0, [r7, #12]
 800b476:	f001 fc41 	bl	800ccfc <xTaskCreateStatic>
 800b47a:	4603      	mov	r3, r0
 800b47c:	613b      	str	r3, [r7, #16]
 800b47e:	e013      	b.n	800b4a8 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b480:	69bb      	ldr	r3, [r7, #24]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d110      	bne.n	800b4a8 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b486:	6a3b      	ldr	r3, [r7, #32]
 800b488:	b29a      	uxth	r2, r3
 800b48a:	f107 0310 	add.w	r3, r7, #16
 800b48e:	9301      	str	r3, [sp, #4]
 800b490:	69fb      	ldr	r3, [r7, #28]
 800b492:	9300      	str	r3, [sp, #0]
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b498:	68f8      	ldr	r0, [r7, #12]
 800b49a:	f001 fc8c 	bl	800cdb6 <xTaskCreate>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	2b01      	cmp	r3, #1
 800b4a2:	d001      	beq.n	800b4a8 <osThreadNew+0x11a>
            hTask = NULL;
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b4a8:	693b      	ldr	r3, [r7, #16]
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3728      	adds	r7, #40	; 0x28
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}

0800b4b2 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 800b4b2:	b580      	push	{r7, lr}
 800b4b4:	b086      	sub	sp, #24
 800b4b6:	af00      	add	r7, sp, #0
 800b4b8:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b4be:	f3ef 8305 	mrs	r3, IPSR
 800b4c2:	60fb      	str	r3, [r7, #12]
  return(result);
 800b4c4:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d003      	beq.n	800b4d2 <osThreadSuspend+0x20>
    stat = osErrorISR;
 800b4ca:	f06f 0305 	mvn.w	r3, #5
 800b4ce:	617b      	str	r3, [r7, #20]
 800b4d0:	e00b      	b.n	800b4ea <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 800b4d2:	693b      	ldr	r3, [r7, #16]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d103      	bne.n	800b4e0 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 800b4d8:	f06f 0303 	mvn.w	r3, #3
 800b4dc:	617b      	str	r3, [r7, #20]
 800b4de:	e004      	b.n	800b4ea <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 800b4e4:	6938      	ldr	r0, [r7, #16]
 800b4e6:	f001 fdf5 	bl	800d0d4 <vTaskSuspend>
  }

  return (stat);
 800b4ea:	697b      	ldr	r3, [r7, #20]
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3718      	adds	r7, #24
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}

0800b4f4 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b086      	sub	sp, #24
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b500:	f3ef 8305 	mrs	r3, IPSR
 800b504:	60fb      	str	r3, [r7, #12]
  return(result);
 800b506:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d003      	beq.n	800b514 <osThreadResume+0x20>
    stat = osErrorISR;
 800b50c:	f06f 0305 	mvn.w	r3, #5
 800b510:	617b      	str	r3, [r7, #20]
 800b512:	e00b      	b.n	800b52c <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 800b514:	693b      	ldr	r3, [r7, #16]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d103      	bne.n	800b522 <osThreadResume+0x2e>
    stat = osErrorParameter;
 800b51a:	f06f 0303 	mvn.w	r3, #3
 800b51e:	617b      	str	r3, [r7, #20]
 800b520:	e004      	b.n	800b52c <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 800b522:	2300      	movs	r3, #0
 800b524:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 800b526:	6938      	ldr	r0, [r7, #16]
 800b528:	f001 fe7c 	bl	800d224 <vTaskResume>
  }

  return (stat);
 800b52c:	697b      	ldr	r3, [r7, #20]
}
 800b52e:	4618      	mov	r0, r3
 800b530:	3718      	adds	r7, #24
 800b532:	46bd      	mov	sp, r7
 800b534:	bd80      	pop	{r7, pc}

0800b536 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b536:	b580      	push	{r7, lr}
 800b538:	b084      	sub	sp, #16
 800b53a:	af00      	add	r7, sp, #0
 800b53c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b53e:	f3ef 8305 	mrs	r3, IPSR
 800b542:	60bb      	str	r3, [r7, #8]
  return(result);
 800b544:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b546:	2b00      	cmp	r3, #0
 800b548:	d003      	beq.n	800b552 <osDelay+0x1c>
    stat = osErrorISR;
 800b54a:	f06f 0305 	mvn.w	r3, #5
 800b54e:	60fb      	str	r3, [r7, #12]
 800b550:	e007      	b.n	800b562 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b552:	2300      	movs	r3, #0
 800b554:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d002      	beq.n	800b562 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b55c:	6878      	ldr	r0, [r7, #4]
 800b55e:	f001 fd85 	bl	800d06c <vTaskDelay>
    }
  }

  return (stat);
 800b562:	68fb      	ldr	r3, [r7, #12]
}
 800b564:	4618      	mov	r0, r3
 800b566:	3710      	adds	r7, #16
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}

0800b56c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b08a      	sub	sp, #40	; 0x28
 800b570:	af02      	add	r7, sp, #8
 800b572:	60f8      	str	r0, [r7, #12]
 800b574:	60b9      	str	r1, [r7, #8]
 800b576:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800b578:	2300      	movs	r3, #0
 800b57a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b57c:	f3ef 8305 	mrs	r3, IPSR
 800b580:	613b      	str	r3, [r7, #16]
  return(result);
 800b582:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b584:	2b00      	cmp	r3, #0
 800b586:	d175      	bne.n	800b674 <osSemaphoreNew+0x108>
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d072      	beq.n	800b674 <osSemaphoreNew+0x108>
 800b58e:	68ba      	ldr	r2, [r7, #8]
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	429a      	cmp	r2, r3
 800b594:	d86e      	bhi.n	800b674 <osSemaphoreNew+0x108>
    mem = -1;
 800b596:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b59a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d015      	beq.n	800b5ce <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	689b      	ldr	r3, [r3, #8]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d006      	beq.n	800b5b8 <osSemaphoreNew+0x4c>
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	68db      	ldr	r3, [r3, #12]
 800b5ae:	2b4f      	cmp	r3, #79	; 0x4f
 800b5b0:	d902      	bls.n	800b5b8 <osSemaphoreNew+0x4c>
        mem = 1;
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	61bb      	str	r3, [r7, #24]
 800b5b6:	e00c      	b.n	800b5d2 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	689b      	ldr	r3, [r3, #8]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d108      	bne.n	800b5d2 <osSemaphoreNew+0x66>
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	68db      	ldr	r3, [r3, #12]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d104      	bne.n	800b5d2 <osSemaphoreNew+0x66>
          mem = 0;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	61bb      	str	r3, [r7, #24]
 800b5cc:	e001      	b.n	800b5d2 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800b5d2:	69bb      	ldr	r3, [r7, #24]
 800b5d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b5d8:	d04c      	beq.n	800b674 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	2b01      	cmp	r3, #1
 800b5de:	d128      	bne.n	800b632 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800b5e0:	69bb      	ldr	r3, [r7, #24]
 800b5e2:	2b01      	cmp	r3, #1
 800b5e4:	d10a      	bne.n	800b5fc <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	689b      	ldr	r3, [r3, #8]
 800b5ea:	2203      	movs	r2, #3
 800b5ec:	9200      	str	r2, [sp, #0]
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	2100      	movs	r1, #0
 800b5f2:	2001      	movs	r0, #1
 800b5f4:	f000 fba0 	bl	800bd38 <xQueueGenericCreateStatic>
 800b5f8:	61f8      	str	r0, [r7, #28]
 800b5fa:	e005      	b.n	800b608 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800b5fc:	2203      	movs	r2, #3
 800b5fe:	2100      	movs	r1, #0
 800b600:	2001      	movs	r0, #1
 800b602:	f000 fc11 	bl	800be28 <xQueueGenericCreate>
 800b606:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b608:	69fb      	ldr	r3, [r7, #28]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d022      	beq.n	800b654 <osSemaphoreNew+0xe8>
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d01f      	beq.n	800b654 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b614:	2300      	movs	r3, #0
 800b616:	2200      	movs	r2, #0
 800b618:	2100      	movs	r1, #0
 800b61a:	69f8      	ldr	r0, [r7, #28]
 800b61c:	f000 fccc 	bl	800bfb8 <xQueueGenericSend>
 800b620:	4603      	mov	r3, r0
 800b622:	2b01      	cmp	r3, #1
 800b624:	d016      	beq.n	800b654 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800b626:	69f8      	ldr	r0, [r7, #28]
 800b628:	f001 f994 	bl	800c954 <vQueueDelete>
            hSemaphore = NULL;
 800b62c:	2300      	movs	r3, #0
 800b62e:	61fb      	str	r3, [r7, #28]
 800b630:	e010      	b.n	800b654 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800b632:	69bb      	ldr	r3, [r7, #24]
 800b634:	2b01      	cmp	r3, #1
 800b636:	d108      	bne.n	800b64a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	689b      	ldr	r3, [r3, #8]
 800b63c:	461a      	mov	r2, r3
 800b63e:	68b9      	ldr	r1, [r7, #8]
 800b640:	68f8      	ldr	r0, [r7, #12]
 800b642:	f000 fc4e 	bl	800bee2 <xQueueCreateCountingSemaphoreStatic>
 800b646:	61f8      	str	r0, [r7, #28]
 800b648:	e004      	b.n	800b654 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b64a:	68b9      	ldr	r1, [r7, #8]
 800b64c:	68f8      	ldr	r0, [r7, #12]
 800b64e:	f000 fc7f 	bl	800bf50 <xQueueCreateCountingSemaphore>
 800b652:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800b654:	69fb      	ldr	r3, [r7, #28]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d00c      	beq.n	800b674 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d003      	beq.n	800b668 <osSemaphoreNew+0xfc>
          name = attr->name;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	617b      	str	r3, [r7, #20]
 800b666:	e001      	b.n	800b66c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800b668:	2300      	movs	r3, #0
 800b66a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800b66c:	6979      	ldr	r1, [r7, #20]
 800b66e:	69f8      	ldr	r0, [r7, #28]
 800b670:	f001 fabc 	bl	800cbec <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800b674:	69fb      	ldr	r3, [r7, #28]
}
 800b676:	4618      	mov	r0, r3
 800b678:	3720      	adds	r7, #32
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bd80      	pop	{r7, pc}
	...

0800b680 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800b680:	b580      	push	{r7, lr}
 800b682:	b086      	sub	sp, #24
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
 800b688:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b68e:	2300      	movs	r3, #0
 800b690:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d103      	bne.n	800b6a0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800b698:	f06f 0303 	mvn.w	r3, #3
 800b69c:	617b      	str	r3, [r7, #20]
 800b69e:	e039      	b.n	800b714 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b6a0:	f3ef 8305 	mrs	r3, IPSR
 800b6a4:	60fb      	str	r3, [r7, #12]
  return(result);
 800b6a6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d022      	beq.n	800b6f2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d003      	beq.n	800b6ba <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800b6b2:	f06f 0303 	mvn.w	r3, #3
 800b6b6:	617b      	str	r3, [r7, #20]
 800b6b8:	e02c      	b.n	800b714 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b6be:	f107 0308 	add.w	r3, r7, #8
 800b6c2:	461a      	mov	r2, r3
 800b6c4:	2100      	movs	r1, #0
 800b6c6:	6938      	ldr	r0, [r7, #16]
 800b6c8:	f001 f888 	bl	800c7dc <xQueueReceiveFromISR>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	2b01      	cmp	r3, #1
 800b6d0:	d003      	beq.n	800b6da <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800b6d2:	f06f 0302 	mvn.w	r3, #2
 800b6d6:	617b      	str	r3, [r7, #20]
 800b6d8:	e01c      	b.n	800b714 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d019      	beq.n	800b714 <osSemaphoreAcquire+0x94>
 800b6e0:	4b0f      	ldr	r3, [pc, #60]	; (800b720 <osSemaphoreAcquire+0xa0>)
 800b6e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6e6:	601a      	str	r2, [r3, #0]
 800b6e8:	f3bf 8f4f 	dsb	sy
 800b6ec:	f3bf 8f6f 	isb	sy
 800b6f0:	e010      	b.n	800b714 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b6f2:	6839      	ldr	r1, [r7, #0]
 800b6f4:	6938      	ldr	r0, [r7, #16]
 800b6f6:	f000 ff65 	bl	800c5c4 <xQueueSemaphoreTake>
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	2b01      	cmp	r3, #1
 800b6fe:	d009      	beq.n	800b714 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d003      	beq.n	800b70e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800b706:	f06f 0301 	mvn.w	r3, #1
 800b70a:	617b      	str	r3, [r7, #20]
 800b70c:	e002      	b.n	800b714 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800b70e:	f06f 0302 	mvn.w	r3, #2
 800b712:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b714:	697b      	ldr	r3, [r7, #20]
}
 800b716:	4618      	mov	r0, r3
 800b718:	3718      	adds	r7, #24
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}
 800b71e:	bf00      	nop
 800b720:	e000ed04 	.word	0xe000ed04

0800b724 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b724:	b580      	push	{r7, lr}
 800b726:	b086      	sub	sp, #24
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b730:	2300      	movs	r3, #0
 800b732:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b734:	693b      	ldr	r3, [r7, #16]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d103      	bne.n	800b742 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800b73a:	f06f 0303 	mvn.w	r3, #3
 800b73e:	617b      	str	r3, [r7, #20]
 800b740:	e02c      	b.n	800b79c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b742:	f3ef 8305 	mrs	r3, IPSR
 800b746:	60fb      	str	r3, [r7, #12]
  return(result);
 800b748:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d01a      	beq.n	800b784 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800b74e:	2300      	movs	r3, #0
 800b750:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b752:	f107 0308 	add.w	r3, r7, #8
 800b756:	4619      	mov	r1, r3
 800b758:	6938      	ldr	r0, [r7, #16]
 800b75a:	f000 fdc6 	bl	800c2ea <xQueueGiveFromISR>
 800b75e:	4603      	mov	r3, r0
 800b760:	2b01      	cmp	r3, #1
 800b762:	d003      	beq.n	800b76c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800b764:	f06f 0302 	mvn.w	r3, #2
 800b768:	617b      	str	r3, [r7, #20]
 800b76a:	e017      	b.n	800b79c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d014      	beq.n	800b79c <osSemaphoreRelease+0x78>
 800b772:	4b0d      	ldr	r3, [pc, #52]	; (800b7a8 <osSemaphoreRelease+0x84>)
 800b774:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b778:	601a      	str	r2, [r3, #0]
 800b77a:	f3bf 8f4f 	dsb	sy
 800b77e:	f3bf 8f6f 	isb	sy
 800b782:	e00b      	b.n	800b79c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b784:	2300      	movs	r3, #0
 800b786:	2200      	movs	r2, #0
 800b788:	2100      	movs	r1, #0
 800b78a:	6938      	ldr	r0, [r7, #16]
 800b78c:	f000 fc14 	bl	800bfb8 <xQueueGenericSend>
 800b790:	4603      	mov	r3, r0
 800b792:	2b01      	cmp	r3, #1
 800b794:	d002      	beq.n	800b79c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800b796:	f06f 0302 	mvn.w	r3, #2
 800b79a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800b79c:	697b      	ldr	r3, [r7, #20]
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	3718      	adds	r7, #24
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}
 800b7a6:	bf00      	nop
 800b7a8:	e000ed04 	.word	0xe000ed04

0800b7ac <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b086      	sub	sp, #24
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b7b8:	f3ef 8305 	mrs	r3, IPSR
 800b7bc:	60fb      	str	r3, [r7, #12]
  return(result);
 800b7be:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d003      	beq.n	800b7cc <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800b7c4:	f06f 0305 	mvn.w	r3, #5
 800b7c8:	617b      	str	r3, [r7, #20]
 800b7ca:	e00e      	b.n	800b7ea <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d103      	bne.n	800b7da <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800b7d2:	f06f 0303 	mvn.w	r3, #3
 800b7d6:	617b      	str	r3, [r7, #20]
 800b7d8:	e007      	b.n	800b7ea <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800b7da:	6938      	ldr	r0, [r7, #16]
 800b7dc:	f001 fa30 	bl	800cc40 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800b7e4:	6938      	ldr	r0, [r7, #16]
 800b7e6:	f001 f8b5 	bl	800c954 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800b7ea:	697b      	ldr	r3, [r7, #20]
}
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	3718      	adds	r7, #24
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}

0800b7f4 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b08a      	sub	sp, #40	; 0x28
 800b7f8:	af02      	add	r7, sp, #8
 800b7fa:	60f8      	str	r0, [r7, #12]
 800b7fc:	60b9      	str	r1, [r7, #8]
 800b7fe:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b800:	2300      	movs	r3, #0
 800b802:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b804:	f3ef 8305 	mrs	r3, IPSR
 800b808:	613b      	str	r3, [r7, #16]
  return(result);
 800b80a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d15f      	bne.n	800b8d0 <osMessageQueueNew+0xdc>
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d05c      	beq.n	800b8d0 <osMessageQueueNew+0xdc>
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d059      	beq.n	800b8d0 <osMessageQueueNew+0xdc>
    mem = -1;
 800b81c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b820:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d029      	beq.n	800b87c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	689b      	ldr	r3, [r3, #8]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d012      	beq.n	800b856 <osMessageQueueNew+0x62>
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	68db      	ldr	r3, [r3, #12]
 800b834:	2b4f      	cmp	r3, #79	; 0x4f
 800b836:	d90e      	bls.n	800b856 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d00a      	beq.n	800b856 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	695a      	ldr	r2, [r3, #20]
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	68b9      	ldr	r1, [r7, #8]
 800b848:	fb01 f303 	mul.w	r3, r1, r3
 800b84c:	429a      	cmp	r2, r3
 800b84e:	d302      	bcc.n	800b856 <osMessageQueueNew+0x62>
        mem = 1;
 800b850:	2301      	movs	r3, #1
 800b852:	61bb      	str	r3, [r7, #24]
 800b854:	e014      	b.n	800b880 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	689b      	ldr	r3, [r3, #8]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d110      	bne.n	800b880 <osMessageQueueNew+0x8c>
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	68db      	ldr	r3, [r3, #12]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d10c      	bne.n	800b880 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d108      	bne.n	800b880 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	695b      	ldr	r3, [r3, #20]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d104      	bne.n	800b880 <osMessageQueueNew+0x8c>
          mem = 0;
 800b876:	2300      	movs	r3, #0
 800b878:	61bb      	str	r3, [r7, #24]
 800b87a:	e001      	b.n	800b880 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b87c:	2300      	movs	r3, #0
 800b87e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b880:	69bb      	ldr	r3, [r7, #24]
 800b882:	2b01      	cmp	r3, #1
 800b884:	d10b      	bne.n	800b89e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	691a      	ldr	r2, [r3, #16]
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	689b      	ldr	r3, [r3, #8]
 800b88e:	2100      	movs	r1, #0
 800b890:	9100      	str	r1, [sp, #0]
 800b892:	68b9      	ldr	r1, [r7, #8]
 800b894:	68f8      	ldr	r0, [r7, #12]
 800b896:	f000 fa4f 	bl	800bd38 <xQueueGenericCreateStatic>
 800b89a:	61f8      	str	r0, [r7, #28]
 800b89c:	e008      	b.n	800b8b0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b89e:	69bb      	ldr	r3, [r7, #24]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d105      	bne.n	800b8b0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	68b9      	ldr	r1, [r7, #8]
 800b8a8:	68f8      	ldr	r0, [r7, #12]
 800b8aa:	f000 fabd 	bl	800be28 <xQueueGenericCreate>
 800b8ae:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b8b0:	69fb      	ldr	r3, [r7, #28]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d00c      	beq.n	800b8d0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d003      	beq.n	800b8c4 <osMessageQueueNew+0xd0>
        name = attr->name;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	617b      	str	r3, [r7, #20]
 800b8c2:	e001      	b.n	800b8c8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b8c8:	6979      	ldr	r1, [r7, #20]
 800b8ca:	69f8      	ldr	r0, [r7, #28]
 800b8cc:	f001 f98e 	bl	800cbec <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b8d0:	69fb      	ldr	r3, [r7, #28]
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3720      	adds	r7, #32
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}
	...

0800b8dc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b088      	sub	sp, #32
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	60f8      	str	r0, [r7, #12]
 800b8e4:	60b9      	str	r1, [r7, #8]
 800b8e6:	603b      	str	r3, [r7, #0]
 800b8e8:	4613      	mov	r3, r2
 800b8ea:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b8f4:	f3ef 8305 	mrs	r3, IPSR
 800b8f8:	617b      	str	r3, [r7, #20]
  return(result);
 800b8fa:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d028      	beq.n	800b952 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b900:	69bb      	ldr	r3, [r7, #24]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d005      	beq.n	800b912 <osMessageQueuePut+0x36>
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d002      	beq.n	800b912 <osMessageQueuePut+0x36>
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d003      	beq.n	800b91a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800b912:	f06f 0303 	mvn.w	r3, #3
 800b916:	61fb      	str	r3, [r7, #28]
 800b918:	e038      	b.n	800b98c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800b91a:	2300      	movs	r3, #0
 800b91c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b91e:	f107 0210 	add.w	r2, r7, #16
 800b922:	2300      	movs	r3, #0
 800b924:	68b9      	ldr	r1, [r7, #8]
 800b926:	69b8      	ldr	r0, [r7, #24]
 800b928:	f000 fc44 	bl	800c1b4 <xQueueGenericSendFromISR>
 800b92c:	4603      	mov	r3, r0
 800b92e:	2b01      	cmp	r3, #1
 800b930:	d003      	beq.n	800b93a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800b932:	f06f 0302 	mvn.w	r3, #2
 800b936:	61fb      	str	r3, [r7, #28]
 800b938:	e028      	b.n	800b98c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800b93a:	693b      	ldr	r3, [r7, #16]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d025      	beq.n	800b98c <osMessageQueuePut+0xb0>
 800b940:	4b15      	ldr	r3, [pc, #84]	; (800b998 <osMessageQueuePut+0xbc>)
 800b942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b946:	601a      	str	r2, [r3, #0]
 800b948:	f3bf 8f4f 	dsb	sy
 800b94c:	f3bf 8f6f 	isb	sy
 800b950:	e01c      	b.n	800b98c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b952:	69bb      	ldr	r3, [r7, #24]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d002      	beq.n	800b95e <osMessageQueuePut+0x82>
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d103      	bne.n	800b966 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800b95e:	f06f 0303 	mvn.w	r3, #3
 800b962:	61fb      	str	r3, [r7, #28]
 800b964:	e012      	b.n	800b98c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b966:	2300      	movs	r3, #0
 800b968:	683a      	ldr	r2, [r7, #0]
 800b96a:	68b9      	ldr	r1, [r7, #8]
 800b96c:	69b8      	ldr	r0, [r7, #24]
 800b96e:	f000 fb23 	bl	800bfb8 <xQueueGenericSend>
 800b972:	4603      	mov	r3, r0
 800b974:	2b01      	cmp	r3, #1
 800b976:	d009      	beq.n	800b98c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d003      	beq.n	800b986 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800b97e:	f06f 0301 	mvn.w	r3, #1
 800b982:	61fb      	str	r3, [r7, #28]
 800b984:	e002      	b.n	800b98c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800b986:	f06f 0302 	mvn.w	r3, #2
 800b98a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b98c:	69fb      	ldr	r3, [r7, #28]
}
 800b98e:	4618      	mov	r0, r3
 800b990:	3720      	adds	r7, #32
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}
 800b996:	bf00      	nop
 800b998:	e000ed04 	.word	0xe000ed04

0800b99c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b088      	sub	sp, #32
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	60f8      	str	r0, [r7, #12]
 800b9a4:	60b9      	str	r1, [r7, #8]
 800b9a6:	607a      	str	r2, [r7, #4]
 800b9a8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b9b2:	f3ef 8305 	mrs	r3, IPSR
 800b9b6:	617b      	str	r3, [r7, #20]
  return(result);
 800b9b8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d028      	beq.n	800ba10 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b9be:	69bb      	ldr	r3, [r7, #24]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d005      	beq.n	800b9d0 <osMessageQueueGet+0x34>
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d002      	beq.n	800b9d0 <osMessageQueueGet+0x34>
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d003      	beq.n	800b9d8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800b9d0:	f06f 0303 	mvn.w	r3, #3
 800b9d4:	61fb      	str	r3, [r7, #28]
 800b9d6:	e037      	b.n	800ba48 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b9dc:	f107 0310 	add.w	r3, r7, #16
 800b9e0:	461a      	mov	r2, r3
 800b9e2:	68b9      	ldr	r1, [r7, #8]
 800b9e4:	69b8      	ldr	r0, [r7, #24]
 800b9e6:	f000 fef9 	bl	800c7dc <xQueueReceiveFromISR>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	2b01      	cmp	r3, #1
 800b9ee:	d003      	beq.n	800b9f8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800b9f0:	f06f 0302 	mvn.w	r3, #2
 800b9f4:	61fb      	str	r3, [r7, #28]
 800b9f6:	e027      	b.n	800ba48 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800b9f8:	693b      	ldr	r3, [r7, #16]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d024      	beq.n	800ba48 <osMessageQueueGet+0xac>
 800b9fe:	4b15      	ldr	r3, [pc, #84]	; (800ba54 <osMessageQueueGet+0xb8>)
 800ba00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba04:	601a      	str	r2, [r3, #0]
 800ba06:	f3bf 8f4f 	dsb	sy
 800ba0a:	f3bf 8f6f 	isb	sy
 800ba0e:	e01b      	b.n	800ba48 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ba10:	69bb      	ldr	r3, [r7, #24]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d002      	beq.n	800ba1c <osMessageQueueGet+0x80>
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d103      	bne.n	800ba24 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800ba1c:	f06f 0303 	mvn.w	r3, #3
 800ba20:	61fb      	str	r3, [r7, #28]
 800ba22:	e011      	b.n	800ba48 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ba24:	683a      	ldr	r2, [r7, #0]
 800ba26:	68b9      	ldr	r1, [r7, #8]
 800ba28:	69b8      	ldr	r0, [r7, #24]
 800ba2a:	f000 fceb 	bl	800c404 <xQueueReceive>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	2b01      	cmp	r3, #1
 800ba32:	d009      	beq.n	800ba48 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d003      	beq.n	800ba42 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800ba3a:	f06f 0301 	mvn.w	r3, #1
 800ba3e:	61fb      	str	r3, [r7, #28]
 800ba40:	e002      	b.n	800ba48 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800ba42:	f06f 0302 	mvn.w	r3, #2
 800ba46:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ba48:	69fb      	ldr	r3, [r7, #28]
}
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	3720      	adds	r7, #32
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}
 800ba52:	bf00      	nop
 800ba54:	e000ed04 	.word	0xe000ed04

0800ba58 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b086      	sub	sp, #24
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 800ba64:	693b      	ldr	r3, [r7, #16]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d102      	bne.n	800ba70 <osMessageQueueGetCount+0x18>
    count = 0U;
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	617b      	str	r3, [r7, #20]
 800ba6e:	e00e      	b.n	800ba8e <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba70:	f3ef 8305 	mrs	r3, IPSR
 800ba74:	60fb      	str	r3, [r7, #12]
  return(result);
 800ba76:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d004      	beq.n	800ba86 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800ba7c:	6938      	ldr	r0, [r7, #16]
 800ba7e:	f000 ff4b 	bl	800c918 <uxQueueMessagesWaitingFromISR>
 800ba82:	6178      	str	r0, [r7, #20]
 800ba84:	e003      	b.n	800ba8e <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800ba86:	6938      	ldr	r0, [r7, #16]
 800ba88:	f000 ff28 	bl	800c8dc <uxQueueMessagesWaiting>
 800ba8c:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800ba8e:	697b      	ldr	r3, [r7, #20]
}
 800ba90:	4618      	mov	r0, r3
 800ba92:	3718      	adds	r7, #24
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd80      	pop	{r7, pc}

0800ba98 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ba98:	b480      	push	{r7}
 800ba9a:	b085      	sub	sp, #20
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	60f8      	str	r0, [r7, #12]
 800baa0:	60b9      	str	r1, [r7, #8]
 800baa2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	4a07      	ldr	r2, [pc, #28]	; (800bac4 <vApplicationGetIdleTaskMemory+0x2c>)
 800baa8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800baaa:	68bb      	ldr	r3, [r7, #8]
 800baac:	4a06      	ldr	r2, [pc, #24]	; (800bac8 <vApplicationGetIdleTaskMemory+0x30>)
 800baae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2280      	movs	r2, #128	; 0x80
 800bab4:	601a      	str	r2, [r3, #0]
}
 800bab6:	bf00      	nop
 800bab8:	3714      	adds	r7, #20
 800baba:	46bd      	mov	sp, r7
 800babc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac0:	4770      	bx	lr
 800bac2:	bf00      	nop
 800bac4:	20000d64 	.word	0x20000d64
 800bac8:	20000e20 	.word	0x20000e20

0800bacc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bacc:	b480      	push	{r7}
 800bace:	b085      	sub	sp, #20
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	60f8      	str	r0, [r7, #12]
 800bad4:	60b9      	str	r1, [r7, #8]
 800bad6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	4a07      	ldr	r2, [pc, #28]	; (800baf8 <vApplicationGetTimerTaskMemory+0x2c>)
 800badc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bade:	68bb      	ldr	r3, [r7, #8]
 800bae0:	4a06      	ldr	r2, [pc, #24]	; (800bafc <vApplicationGetTimerTaskMemory+0x30>)
 800bae2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800baea:	601a      	str	r2, [r3, #0]
}
 800baec:	bf00      	nop
 800baee:	3714      	adds	r7, #20
 800baf0:	46bd      	mov	sp, r7
 800baf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf6:	4770      	bx	lr
 800baf8:	20001020 	.word	0x20001020
 800bafc:	200010dc 	.word	0x200010dc

0800bb00 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bb00:	b480      	push	{r7}
 800bb02:	b083      	sub	sp, #12
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f103 0208 	add.w	r2, r3, #8
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bb18:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	f103 0208 	add.w	r2, r3, #8
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f103 0208 	add.w	r2, r3, #8
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	2200      	movs	r2, #0
 800bb32:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bb34:	bf00      	nop
 800bb36:	370c      	adds	r7, #12
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3e:	4770      	bx	lr

0800bb40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bb40:	b480      	push	{r7}
 800bb42:	b083      	sub	sp, #12
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bb4e:	bf00      	nop
 800bb50:	370c      	adds	r7, #12
 800bb52:	46bd      	mov	sp, r7
 800bb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb58:	4770      	bx	lr

0800bb5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bb5a:	b480      	push	{r7}
 800bb5c:	b085      	sub	sp, #20
 800bb5e:	af00      	add	r7, sp, #0
 800bb60:	6078      	str	r0, [r7, #4]
 800bb62:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	685b      	ldr	r3, [r3, #4]
 800bb68:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	68fa      	ldr	r2, [r7, #12]
 800bb6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	689a      	ldr	r2, [r3, #8]
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	689b      	ldr	r3, [r3, #8]
 800bb7c:	683a      	ldr	r2, [r7, #0]
 800bb7e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	683a      	ldr	r2, [r7, #0]
 800bb84:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	687a      	ldr	r2, [r7, #4]
 800bb8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	1c5a      	adds	r2, r3, #1
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	601a      	str	r2, [r3, #0]
}
 800bb96:	bf00      	nop
 800bb98:	3714      	adds	r7, #20
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba0:	4770      	bx	lr

0800bba2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bba2:	b480      	push	{r7}
 800bba4:	b085      	sub	sp, #20
 800bba6:	af00      	add	r7, sp, #0
 800bba8:	6078      	str	r0, [r7, #4]
 800bbaa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bbb2:	68bb      	ldr	r3, [r7, #8]
 800bbb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bbb8:	d103      	bne.n	800bbc2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	691b      	ldr	r3, [r3, #16]
 800bbbe:	60fb      	str	r3, [r7, #12]
 800bbc0:	e00c      	b.n	800bbdc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	3308      	adds	r3, #8
 800bbc6:	60fb      	str	r3, [r7, #12]
 800bbc8:	e002      	b.n	800bbd0 <vListInsert+0x2e>
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	685b      	ldr	r3, [r3, #4]
 800bbce:	60fb      	str	r3, [r7, #12]
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	685b      	ldr	r3, [r3, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	68ba      	ldr	r2, [r7, #8]
 800bbd8:	429a      	cmp	r2, r3
 800bbda:	d2f6      	bcs.n	800bbca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	685a      	ldr	r2, [r3, #4]
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	685b      	ldr	r3, [r3, #4]
 800bbe8:	683a      	ldr	r2, [r7, #0]
 800bbea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	68fa      	ldr	r2, [r7, #12]
 800bbf0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	683a      	ldr	r2, [r7, #0]
 800bbf6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bbf8:	683b      	ldr	r3, [r7, #0]
 800bbfa:	687a      	ldr	r2, [r7, #4]
 800bbfc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	1c5a      	adds	r2, r3, #1
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	601a      	str	r2, [r3, #0]
}
 800bc08:	bf00      	nop
 800bc0a:	3714      	adds	r7, #20
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc12:	4770      	bx	lr

0800bc14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bc14:	b480      	push	{r7}
 800bc16:	b085      	sub	sp, #20
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	691b      	ldr	r3, [r3, #16]
 800bc20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	685b      	ldr	r3, [r3, #4]
 800bc26:	687a      	ldr	r2, [r7, #4]
 800bc28:	6892      	ldr	r2, [r2, #8]
 800bc2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	689b      	ldr	r3, [r3, #8]
 800bc30:	687a      	ldr	r2, [r7, #4]
 800bc32:	6852      	ldr	r2, [r2, #4]
 800bc34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	685b      	ldr	r3, [r3, #4]
 800bc3a:	687a      	ldr	r2, [r7, #4]
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	d103      	bne.n	800bc48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	689a      	ldr	r2, [r3, #8]
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	1e5a      	subs	r2, r3, #1
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	681b      	ldr	r3, [r3, #0]
}
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	3714      	adds	r7, #20
 800bc60:	46bd      	mov	sp, r7
 800bc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc66:	4770      	bx	lr

0800bc68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b084      	sub	sp, #16
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
 800bc70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d10a      	bne.n	800bc92 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bc7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc80:	f383 8811 	msr	BASEPRI, r3
 800bc84:	f3bf 8f6f 	isb	sy
 800bc88:	f3bf 8f4f 	dsb	sy
 800bc8c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bc8e:	bf00      	nop
 800bc90:	e7fe      	b.n	800bc90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bc92:	f002 fdef 	bl	800e874 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	681a      	ldr	r2, [r3, #0]
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc9e:	68f9      	ldr	r1, [r7, #12]
 800bca0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bca2:	fb01 f303 	mul.w	r3, r1, r3
 800bca6:	441a      	add	r2, r3
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	2200      	movs	r2, #0
 800bcb0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	681a      	ldr	r2, [r3, #0]
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	681a      	ldr	r2, [r3, #0]
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcc2:	3b01      	subs	r3, #1
 800bcc4:	68f9      	ldr	r1, [r7, #12]
 800bcc6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bcc8:	fb01 f303 	mul.w	r3, r1, r3
 800bccc:	441a      	add	r2, r3
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	22ff      	movs	r2, #255	; 0xff
 800bcd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	22ff      	movs	r2, #255	; 0xff
 800bcde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d114      	bne.n	800bd12 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	691b      	ldr	r3, [r3, #16]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d01a      	beq.n	800bd26 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	3310      	adds	r3, #16
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	f001 fd9f 	bl	800d838 <xTaskRemoveFromEventList>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d012      	beq.n	800bd26 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bd00:	4b0c      	ldr	r3, [pc, #48]	; (800bd34 <xQueueGenericReset+0xcc>)
 800bd02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd06:	601a      	str	r2, [r3, #0]
 800bd08:	f3bf 8f4f 	dsb	sy
 800bd0c:	f3bf 8f6f 	isb	sy
 800bd10:	e009      	b.n	800bd26 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	3310      	adds	r3, #16
 800bd16:	4618      	mov	r0, r3
 800bd18:	f7ff fef2 	bl	800bb00 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	3324      	adds	r3, #36	; 0x24
 800bd20:	4618      	mov	r0, r3
 800bd22:	f7ff feed 	bl	800bb00 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bd26:	f002 fdd5 	bl	800e8d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bd2a:	2301      	movs	r3, #1
}
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	3710      	adds	r7, #16
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}
 800bd34:	e000ed04 	.word	0xe000ed04

0800bd38 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b08e      	sub	sp, #56	; 0x38
 800bd3c:	af02      	add	r7, sp, #8
 800bd3e:	60f8      	str	r0, [r7, #12]
 800bd40:	60b9      	str	r1, [r7, #8]
 800bd42:	607a      	str	r2, [r7, #4]
 800bd44:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d10a      	bne.n	800bd62 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800bd4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd50:	f383 8811 	msr	BASEPRI, r3
 800bd54:	f3bf 8f6f 	isb	sy
 800bd58:	f3bf 8f4f 	dsb	sy
 800bd5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bd5e:	bf00      	nop
 800bd60:	e7fe      	b.n	800bd60 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d10a      	bne.n	800bd7e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800bd68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd6c:	f383 8811 	msr	BASEPRI, r3
 800bd70:	f3bf 8f6f 	isb	sy
 800bd74:	f3bf 8f4f 	dsb	sy
 800bd78:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bd7a:	bf00      	nop
 800bd7c:	e7fe      	b.n	800bd7c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d002      	beq.n	800bd8a <xQueueGenericCreateStatic+0x52>
 800bd84:	68bb      	ldr	r3, [r7, #8]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d001      	beq.n	800bd8e <xQueueGenericCreateStatic+0x56>
 800bd8a:	2301      	movs	r3, #1
 800bd8c:	e000      	b.n	800bd90 <xQueueGenericCreateStatic+0x58>
 800bd8e:	2300      	movs	r3, #0
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d10a      	bne.n	800bdaa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bd94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd98:	f383 8811 	msr	BASEPRI, r3
 800bd9c:	f3bf 8f6f 	isb	sy
 800bda0:	f3bf 8f4f 	dsb	sy
 800bda4:	623b      	str	r3, [r7, #32]
}
 800bda6:	bf00      	nop
 800bda8:	e7fe      	b.n	800bda8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d102      	bne.n	800bdb6 <xQueueGenericCreateStatic+0x7e>
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d101      	bne.n	800bdba <xQueueGenericCreateStatic+0x82>
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	e000      	b.n	800bdbc <xQueueGenericCreateStatic+0x84>
 800bdba:	2300      	movs	r3, #0
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d10a      	bne.n	800bdd6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800bdc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc4:	f383 8811 	msr	BASEPRI, r3
 800bdc8:	f3bf 8f6f 	isb	sy
 800bdcc:	f3bf 8f4f 	dsb	sy
 800bdd0:	61fb      	str	r3, [r7, #28]
}
 800bdd2:	bf00      	nop
 800bdd4:	e7fe      	b.n	800bdd4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bdd6:	2350      	movs	r3, #80	; 0x50
 800bdd8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bdda:	697b      	ldr	r3, [r7, #20]
 800bddc:	2b50      	cmp	r3, #80	; 0x50
 800bdde:	d00a      	beq.n	800bdf6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800bde0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bde4:	f383 8811 	msr	BASEPRI, r3
 800bde8:	f3bf 8f6f 	isb	sy
 800bdec:	f3bf 8f4f 	dsb	sy
 800bdf0:	61bb      	str	r3, [r7, #24]
}
 800bdf2:	bf00      	nop
 800bdf4:	e7fe      	b.n	800bdf4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bdf6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bdfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d00d      	beq.n	800be1e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800be02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be04:	2201      	movs	r2, #1
 800be06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800be0a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800be0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be10:	9300      	str	r3, [sp, #0]
 800be12:	4613      	mov	r3, r2
 800be14:	687a      	ldr	r2, [r7, #4]
 800be16:	68b9      	ldr	r1, [r7, #8]
 800be18:	68f8      	ldr	r0, [r7, #12]
 800be1a:	f000 f83f 	bl	800be9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800be1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800be20:	4618      	mov	r0, r3
 800be22:	3730      	adds	r7, #48	; 0x30
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}

0800be28 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b08a      	sub	sp, #40	; 0x28
 800be2c:	af02      	add	r7, sp, #8
 800be2e:	60f8      	str	r0, [r7, #12]
 800be30:	60b9      	str	r1, [r7, #8]
 800be32:	4613      	mov	r3, r2
 800be34:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d10a      	bne.n	800be52 <xQueueGenericCreate+0x2a>
	__asm volatile
 800be3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be40:	f383 8811 	msr	BASEPRI, r3
 800be44:	f3bf 8f6f 	isb	sy
 800be48:	f3bf 8f4f 	dsb	sy
 800be4c:	613b      	str	r3, [r7, #16]
}
 800be4e:	bf00      	nop
 800be50:	e7fe      	b.n	800be50 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	68ba      	ldr	r2, [r7, #8]
 800be56:	fb02 f303 	mul.w	r3, r2, r3
 800be5a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800be5c:	69fb      	ldr	r3, [r7, #28]
 800be5e:	3350      	adds	r3, #80	; 0x50
 800be60:	4618      	mov	r0, r3
 800be62:	f002 fe29 	bl	800eab8 <pvPortMalloc>
 800be66:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800be68:	69bb      	ldr	r3, [r7, #24]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d011      	beq.n	800be92 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800be6e:	69bb      	ldr	r3, [r7, #24]
 800be70:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800be72:	697b      	ldr	r3, [r7, #20]
 800be74:	3350      	adds	r3, #80	; 0x50
 800be76:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800be78:	69bb      	ldr	r3, [r7, #24]
 800be7a:	2200      	movs	r2, #0
 800be7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800be80:	79fa      	ldrb	r2, [r7, #7]
 800be82:	69bb      	ldr	r3, [r7, #24]
 800be84:	9300      	str	r3, [sp, #0]
 800be86:	4613      	mov	r3, r2
 800be88:	697a      	ldr	r2, [r7, #20]
 800be8a:	68b9      	ldr	r1, [r7, #8]
 800be8c:	68f8      	ldr	r0, [r7, #12]
 800be8e:	f000 f805 	bl	800be9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800be92:	69bb      	ldr	r3, [r7, #24]
	}
 800be94:	4618      	mov	r0, r3
 800be96:	3720      	adds	r7, #32
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}

0800be9c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b084      	sub	sp, #16
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	60f8      	str	r0, [r7, #12]
 800bea4:	60b9      	str	r1, [r7, #8]
 800bea6:	607a      	str	r2, [r7, #4]
 800bea8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d103      	bne.n	800beb8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800beb0:	69bb      	ldr	r3, [r7, #24]
 800beb2:	69ba      	ldr	r2, [r7, #24]
 800beb4:	601a      	str	r2, [r3, #0]
 800beb6:	e002      	b.n	800bebe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800beb8:	69bb      	ldr	r3, [r7, #24]
 800beba:	687a      	ldr	r2, [r7, #4]
 800bebc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bebe:	69bb      	ldr	r3, [r7, #24]
 800bec0:	68fa      	ldr	r2, [r7, #12]
 800bec2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bec4:	69bb      	ldr	r3, [r7, #24]
 800bec6:	68ba      	ldr	r2, [r7, #8]
 800bec8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800beca:	2101      	movs	r1, #1
 800becc:	69b8      	ldr	r0, [r7, #24]
 800bece:	f7ff fecb 	bl	800bc68 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bed2:	69bb      	ldr	r3, [r7, #24]
 800bed4:	78fa      	ldrb	r2, [r7, #3]
 800bed6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800beda:	bf00      	nop
 800bedc:	3710      	adds	r7, #16
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}

0800bee2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800bee2:	b580      	push	{r7, lr}
 800bee4:	b08a      	sub	sp, #40	; 0x28
 800bee6:	af02      	add	r7, sp, #8
 800bee8:	60f8      	str	r0, [r7, #12]
 800beea:	60b9      	str	r1, [r7, #8]
 800beec:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d10a      	bne.n	800bf0a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800bef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef8:	f383 8811 	msr	BASEPRI, r3
 800befc:	f3bf 8f6f 	isb	sy
 800bf00:	f3bf 8f4f 	dsb	sy
 800bf04:	61bb      	str	r3, [r7, #24]
}
 800bf06:	bf00      	nop
 800bf08:	e7fe      	b.n	800bf08 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bf0a:	68ba      	ldr	r2, [r7, #8]
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	429a      	cmp	r2, r3
 800bf10:	d90a      	bls.n	800bf28 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800bf12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf16:	f383 8811 	msr	BASEPRI, r3
 800bf1a:	f3bf 8f6f 	isb	sy
 800bf1e:	f3bf 8f4f 	dsb	sy
 800bf22:	617b      	str	r3, [r7, #20]
}
 800bf24:	bf00      	nop
 800bf26:	e7fe      	b.n	800bf26 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bf28:	2302      	movs	r3, #2
 800bf2a:	9300      	str	r3, [sp, #0]
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2200      	movs	r2, #0
 800bf30:	2100      	movs	r1, #0
 800bf32:	68f8      	ldr	r0, [r7, #12]
 800bf34:	f7ff ff00 	bl	800bd38 <xQueueGenericCreateStatic>
 800bf38:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800bf3a:	69fb      	ldr	r3, [r7, #28]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d002      	beq.n	800bf46 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bf40:	69fb      	ldr	r3, [r7, #28]
 800bf42:	68ba      	ldr	r2, [r7, #8]
 800bf44:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800bf46:	69fb      	ldr	r3, [r7, #28]
	}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	3720      	adds	r7, #32
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	bd80      	pop	{r7, pc}

0800bf50 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b086      	sub	sp, #24
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
 800bf58:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d10a      	bne.n	800bf76 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800bf60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf64:	f383 8811 	msr	BASEPRI, r3
 800bf68:	f3bf 8f6f 	isb	sy
 800bf6c:	f3bf 8f4f 	dsb	sy
 800bf70:	613b      	str	r3, [r7, #16]
}
 800bf72:	bf00      	nop
 800bf74:	e7fe      	b.n	800bf74 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bf76:	683a      	ldr	r2, [r7, #0]
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	429a      	cmp	r2, r3
 800bf7c:	d90a      	bls.n	800bf94 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800bf7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf82:	f383 8811 	msr	BASEPRI, r3
 800bf86:	f3bf 8f6f 	isb	sy
 800bf8a:	f3bf 8f4f 	dsb	sy
 800bf8e:	60fb      	str	r3, [r7, #12]
}
 800bf90:	bf00      	nop
 800bf92:	e7fe      	b.n	800bf92 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bf94:	2202      	movs	r2, #2
 800bf96:	2100      	movs	r1, #0
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f7ff ff45 	bl	800be28 <xQueueGenericCreate>
 800bf9e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d002      	beq.n	800bfac <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bfa6:	697b      	ldr	r3, [r7, #20]
 800bfa8:	683a      	ldr	r2, [r7, #0]
 800bfaa:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800bfac:	697b      	ldr	r3, [r7, #20]
	}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3718      	adds	r7, #24
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}
	...

0800bfb8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b08e      	sub	sp, #56	; 0x38
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	60f8      	str	r0, [r7, #12]
 800bfc0:	60b9      	str	r1, [r7, #8]
 800bfc2:	607a      	str	r2, [r7, #4]
 800bfc4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bfce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d10a      	bne.n	800bfea <xQueueGenericSend+0x32>
	__asm volatile
 800bfd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfd8:	f383 8811 	msr	BASEPRI, r3
 800bfdc:	f3bf 8f6f 	isb	sy
 800bfe0:	f3bf 8f4f 	dsb	sy
 800bfe4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bfe6:	bf00      	nop
 800bfe8:	e7fe      	b.n	800bfe8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bfea:	68bb      	ldr	r3, [r7, #8]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d103      	bne.n	800bff8 <xQueueGenericSend+0x40>
 800bff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d101      	bne.n	800bffc <xQueueGenericSend+0x44>
 800bff8:	2301      	movs	r3, #1
 800bffa:	e000      	b.n	800bffe <xQueueGenericSend+0x46>
 800bffc:	2300      	movs	r3, #0
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d10a      	bne.n	800c018 <xQueueGenericSend+0x60>
	__asm volatile
 800c002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c006:	f383 8811 	msr	BASEPRI, r3
 800c00a:	f3bf 8f6f 	isb	sy
 800c00e:	f3bf 8f4f 	dsb	sy
 800c012:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c014:	bf00      	nop
 800c016:	e7fe      	b.n	800c016 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	2b02      	cmp	r3, #2
 800c01c:	d103      	bne.n	800c026 <xQueueGenericSend+0x6e>
 800c01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c022:	2b01      	cmp	r3, #1
 800c024:	d101      	bne.n	800c02a <xQueueGenericSend+0x72>
 800c026:	2301      	movs	r3, #1
 800c028:	e000      	b.n	800c02c <xQueueGenericSend+0x74>
 800c02a:	2300      	movs	r3, #0
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d10a      	bne.n	800c046 <xQueueGenericSend+0x8e>
	__asm volatile
 800c030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c034:	f383 8811 	msr	BASEPRI, r3
 800c038:	f3bf 8f6f 	isb	sy
 800c03c:	f3bf 8f4f 	dsb	sy
 800c040:	623b      	str	r3, [r7, #32]
}
 800c042:	bf00      	nop
 800c044:	e7fe      	b.n	800c044 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c046:	f001 fdb9 	bl	800dbbc <xTaskGetSchedulerState>
 800c04a:	4603      	mov	r3, r0
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d102      	bne.n	800c056 <xQueueGenericSend+0x9e>
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d101      	bne.n	800c05a <xQueueGenericSend+0xa2>
 800c056:	2301      	movs	r3, #1
 800c058:	e000      	b.n	800c05c <xQueueGenericSend+0xa4>
 800c05a:	2300      	movs	r3, #0
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d10a      	bne.n	800c076 <xQueueGenericSend+0xbe>
	__asm volatile
 800c060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c064:	f383 8811 	msr	BASEPRI, r3
 800c068:	f3bf 8f6f 	isb	sy
 800c06c:	f3bf 8f4f 	dsb	sy
 800c070:	61fb      	str	r3, [r7, #28]
}
 800c072:	bf00      	nop
 800c074:	e7fe      	b.n	800c074 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c076:	f002 fbfd 	bl	800e874 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c07c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c082:	429a      	cmp	r2, r3
 800c084:	d302      	bcc.n	800c08c <xQueueGenericSend+0xd4>
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	2b02      	cmp	r3, #2
 800c08a:	d129      	bne.n	800c0e0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c08c:	683a      	ldr	r2, [r7, #0]
 800c08e:	68b9      	ldr	r1, [r7, #8]
 800c090:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c092:	f000 fc9a 	bl	800c9ca <prvCopyDataToQueue>
 800c096:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c09a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d010      	beq.n	800c0c2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c0a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a2:	3324      	adds	r3, #36	; 0x24
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	f001 fbc7 	bl	800d838 <xTaskRemoveFromEventList>
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d013      	beq.n	800c0d8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c0b0:	4b3f      	ldr	r3, [pc, #252]	; (800c1b0 <xQueueGenericSend+0x1f8>)
 800c0b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0b6:	601a      	str	r2, [r3, #0]
 800c0b8:	f3bf 8f4f 	dsb	sy
 800c0bc:	f3bf 8f6f 	isb	sy
 800c0c0:	e00a      	b.n	800c0d8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c0c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d007      	beq.n	800c0d8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c0c8:	4b39      	ldr	r3, [pc, #228]	; (800c1b0 <xQueueGenericSend+0x1f8>)
 800c0ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0ce:	601a      	str	r2, [r3, #0]
 800c0d0:	f3bf 8f4f 	dsb	sy
 800c0d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c0d8:	f002 fbfc 	bl	800e8d4 <vPortExitCritical>
				return pdPASS;
 800c0dc:	2301      	movs	r3, #1
 800c0de:	e063      	b.n	800c1a8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d103      	bne.n	800c0ee <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c0e6:	f002 fbf5 	bl	800e8d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	e05c      	b.n	800c1a8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c0ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d106      	bne.n	800c102 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c0f4:	f107 0314 	add.w	r3, r7, #20
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	f001 fc01 	bl	800d900 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c0fe:	2301      	movs	r3, #1
 800c100:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c102:	f002 fbe7 	bl	800e8d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c106:	f001 f95b 	bl	800d3c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c10a:	f002 fbb3 	bl	800e874 <vPortEnterCritical>
 800c10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c110:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c114:	b25b      	sxtb	r3, r3
 800c116:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c11a:	d103      	bne.n	800c124 <xQueueGenericSend+0x16c>
 800c11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c11e:	2200      	movs	r2, #0
 800c120:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c126:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c12a:	b25b      	sxtb	r3, r3
 800c12c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c130:	d103      	bne.n	800c13a <xQueueGenericSend+0x182>
 800c132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c134:	2200      	movs	r2, #0
 800c136:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c13a:	f002 fbcb 	bl	800e8d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c13e:	1d3a      	adds	r2, r7, #4
 800c140:	f107 0314 	add.w	r3, r7, #20
 800c144:	4611      	mov	r1, r2
 800c146:	4618      	mov	r0, r3
 800c148:	f001 fbf0 	bl	800d92c <xTaskCheckForTimeOut>
 800c14c:	4603      	mov	r3, r0
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d124      	bne.n	800c19c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c152:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c154:	f000 fd31 	bl	800cbba <prvIsQueueFull>
 800c158:	4603      	mov	r3, r0
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d018      	beq.n	800c190 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c160:	3310      	adds	r3, #16
 800c162:	687a      	ldr	r2, [r7, #4]
 800c164:	4611      	mov	r1, r2
 800c166:	4618      	mov	r0, r3
 800c168:	f001 fb16 	bl	800d798 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c16c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c16e:	f000 fcbc 	bl	800caea <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c172:	f001 f933 	bl	800d3dc <xTaskResumeAll>
 800c176:	4603      	mov	r3, r0
 800c178:	2b00      	cmp	r3, #0
 800c17a:	f47f af7c 	bne.w	800c076 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c17e:	4b0c      	ldr	r3, [pc, #48]	; (800c1b0 <xQueueGenericSend+0x1f8>)
 800c180:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c184:	601a      	str	r2, [r3, #0]
 800c186:	f3bf 8f4f 	dsb	sy
 800c18a:	f3bf 8f6f 	isb	sy
 800c18e:	e772      	b.n	800c076 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c190:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c192:	f000 fcaa 	bl	800caea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c196:	f001 f921 	bl	800d3dc <xTaskResumeAll>
 800c19a:	e76c      	b.n	800c076 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c19c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c19e:	f000 fca4 	bl	800caea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c1a2:	f001 f91b 	bl	800d3dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c1a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	3738      	adds	r7, #56	; 0x38
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}
 800c1b0:	e000ed04 	.word	0xe000ed04

0800c1b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b090      	sub	sp, #64	; 0x40
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	60f8      	str	r0, [r7, #12]
 800c1bc:	60b9      	str	r1, [r7, #8]
 800c1be:	607a      	str	r2, [r7, #4]
 800c1c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c1c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d10a      	bne.n	800c1e2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1d0:	f383 8811 	msr	BASEPRI, r3
 800c1d4:	f3bf 8f6f 	isb	sy
 800c1d8:	f3bf 8f4f 	dsb	sy
 800c1dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c1de:	bf00      	nop
 800c1e0:	e7fe      	b.n	800c1e0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c1e2:	68bb      	ldr	r3, [r7, #8]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d103      	bne.n	800c1f0 <xQueueGenericSendFromISR+0x3c>
 800c1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d101      	bne.n	800c1f4 <xQueueGenericSendFromISR+0x40>
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	e000      	b.n	800c1f6 <xQueueGenericSendFromISR+0x42>
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d10a      	bne.n	800c210 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c1fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1fe:	f383 8811 	msr	BASEPRI, r3
 800c202:	f3bf 8f6f 	isb	sy
 800c206:	f3bf 8f4f 	dsb	sy
 800c20a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c20c:	bf00      	nop
 800c20e:	e7fe      	b.n	800c20e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	2b02      	cmp	r3, #2
 800c214:	d103      	bne.n	800c21e <xQueueGenericSendFromISR+0x6a>
 800c216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c21a:	2b01      	cmp	r3, #1
 800c21c:	d101      	bne.n	800c222 <xQueueGenericSendFromISR+0x6e>
 800c21e:	2301      	movs	r3, #1
 800c220:	e000      	b.n	800c224 <xQueueGenericSendFromISR+0x70>
 800c222:	2300      	movs	r3, #0
 800c224:	2b00      	cmp	r3, #0
 800c226:	d10a      	bne.n	800c23e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c22c:	f383 8811 	msr	BASEPRI, r3
 800c230:	f3bf 8f6f 	isb	sy
 800c234:	f3bf 8f4f 	dsb	sy
 800c238:	623b      	str	r3, [r7, #32]
}
 800c23a:	bf00      	nop
 800c23c:	e7fe      	b.n	800c23c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c23e:	f002 fbfb 	bl	800ea38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c242:	f3ef 8211 	mrs	r2, BASEPRI
 800c246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c24a:	f383 8811 	msr	BASEPRI, r3
 800c24e:	f3bf 8f6f 	isb	sy
 800c252:	f3bf 8f4f 	dsb	sy
 800c256:	61fa      	str	r2, [r7, #28]
 800c258:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c25a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c25c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c25e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c260:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c266:	429a      	cmp	r2, r3
 800c268:	d302      	bcc.n	800c270 <xQueueGenericSendFromISR+0xbc>
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	2b02      	cmp	r3, #2
 800c26e:	d12f      	bne.n	800c2d0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c272:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c276:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c27a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c27c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c27e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c280:	683a      	ldr	r2, [r7, #0]
 800c282:	68b9      	ldr	r1, [r7, #8]
 800c284:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c286:	f000 fba0 	bl	800c9ca <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c28a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c28e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c292:	d112      	bne.n	800c2ba <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d016      	beq.n	800c2ca <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c29e:	3324      	adds	r3, #36	; 0x24
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	f001 fac9 	bl	800d838 <xTaskRemoveFromEventList>
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d00e      	beq.n	800c2ca <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d00b      	beq.n	800c2ca <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	2201      	movs	r2, #1
 800c2b6:	601a      	str	r2, [r3, #0]
 800c2b8:	e007      	b.n	800c2ca <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c2ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c2be:	3301      	adds	r3, #1
 800c2c0:	b2db      	uxtb	r3, r3
 800c2c2:	b25a      	sxtb	r2, r3
 800c2c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c2ca:	2301      	movs	r3, #1
 800c2cc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c2ce:	e001      	b.n	800c2d4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2d6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c2d8:	697b      	ldr	r3, [r7, #20]
 800c2da:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c2de:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c2e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	3740      	adds	r7, #64	; 0x40
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bd80      	pop	{r7, pc}

0800c2ea <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c2ea:	b580      	push	{r7, lr}
 800c2ec:	b08e      	sub	sp, #56	; 0x38
 800c2ee:	af00      	add	r7, sp, #0
 800c2f0:	6078      	str	r0, [r7, #4]
 800c2f2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c2f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d10a      	bne.n	800c314 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800c2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c302:	f383 8811 	msr	BASEPRI, r3
 800c306:	f3bf 8f6f 	isb	sy
 800c30a:	f3bf 8f4f 	dsb	sy
 800c30e:	623b      	str	r3, [r7, #32]
}
 800c310:	bf00      	nop
 800c312:	e7fe      	b.n	800c312 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d00a      	beq.n	800c332 <xQueueGiveFromISR+0x48>
	__asm volatile
 800c31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c320:	f383 8811 	msr	BASEPRI, r3
 800c324:	f3bf 8f6f 	isb	sy
 800c328:	f3bf 8f4f 	dsb	sy
 800c32c:	61fb      	str	r3, [r7, #28]
}
 800c32e:	bf00      	nop
 800c330:	e7fe      	b.n	800c330 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d103      	bne.n	800c342 <xQueueGiveFromISR+0x58>
 800c33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c33c:	689b      	ldr	r3, [r3, #8]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d101      	bne.n	800c346 <xQueueGiveFromISR+0x5c>
 800c342:	2301      	movs	r3, #1
 800c344:	e000      	b.n	800c348 <xQueueGiveFromISR+0x5e>
 800c346:	2300      	movs	r3, #0
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d10a      	bne.n	800c362 <xQueueGiveFromISR+0x78>
	__asm volatile
 800c34c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c350:	f383 8811 	msr	BASEPRI, r3
 800c354:	f3bf 8f6f 	isb	sy
 800c358:	f3bf 8f4f 	dsb	sy
 800c35c:	61bb      	str	r3, [r7, #24]
}
 800c35e:	bf00      	nop
 800c360:	e7fe      	b.n	800c360 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c362:	f002 fb69 	bl	800ea38 <vPortValidateInterruptPriority>
	__asm volatile
 800c366:	f3ef 8211 	mrs	r2, BASEPRI
 800c36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c36e:	f383 8811 	msr	BASEPRI, r3
 800c372:	f3bf 8f6f 	isb	sy
 800c376:	f3bf 8f4f 	dsb	sy
 800c37a:	617a      	str	r2, [r7, #20]
 800c37c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c37e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c380:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c386:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c38a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c38c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c38e:	429a      	cmp	r2, r3
 800c390:	d22b      	bcs.n	800c3ea <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c394:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c398:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c39e:	1c5a      	adds	r2, r3, #1
 800c3a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c3a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c3a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c3ac:	d112      	bne.n	800c3d4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d016      	beq.n	800c3e4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c3b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3b8:	3324      	adds	r3, #36	; 0x24
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f001 fa3c 	bl	800d838 <xTaskRemoveFromEventList>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d00e      	beq.n	800c3e4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d00b      	beq.n	800c3e4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	2201      	movs	r2, #1
 800c3d0:	601a      	str	r2, [r3, #0]
 800c3d2:	e007      	b.n	800c3e4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c3d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3d8:	3301      	adds	r3, #1
 800c3da:	b2db      	uxtb	r3, r3
 800c3dc:	b25a      	sxtb	r2, r3
 800c3de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c3e4:	2301      	movs	r3, #1
 800c3e6:	637b      	str	r3, [r7, #52]	; 0x34
 800c3e8:	e001      	b.n	800c3ee <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	637b      	str	r3, [r7, #52]	; 0x34
 800c3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3f0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	f383 8811 	msr	BASEPRI, r3
}
 800c3f8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c3fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	3738      	adds	r7, #56	; 0x38
 800c400:	46bd      	mov	sp, r7
 800c402:	bd80      	pop	{r7, pc}

0800c404 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b08c      	sub	sp, #48	; 0x30
 800c408:	af00      	add	r7, sp, #0
 800c40a:	60f8      	str	r0, [r7, #12]
 800c40c:	60b9      	str	r1, [r7, #8]
 800c40e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c410:	2300      	movs	r3, #0
 800c412:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d10a      	bne.n	800c434 <xQueueReceive+0x30>
	__asm volatile
 800c41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c422:	f383 8811 	msr	BASEPRI, r3
 800c426:	f3bf 8f6f 	isb	sy
 800c42a:	f3bf 8f4f 	dsb	sy
 800c42e:	623b      	str	r3, [r7, #32]
}
 800c430:	bf00      	nop
 800c432:	e7fe      	b.n	800c432 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d103      	bne.n	800c442 <xQueueReceive+0x3e>
 800c43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c43c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d101      	bne.n	800c446 <xQueueReceive+0x42>
 800c442:	2301      	movs	r3, #1
 800c444:	e000      	b.n	800c448 <xQueueReceive+0x44>
 800c446:	2300      	movs	r3, #0
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d10a      	bne.n	800c462 <xQueueReceive+0x5e>
	__asm volatile
 800c44c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c450:	f383 8811 	msr	BASEPRI, r3
 800c454:	f3bf 8f6f 	isb	sy
 800c458:	f3bf 8f4f 	dsb	sy
 800c45c:	61fb      	str	r3, [r7, #28]
}
 800c45e:	bf00      	nop
 800c460:	e7fe      	b.n	800c460 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c462:	f001 fbab 	bl	800dbbc <xTaskGetSchedulerState>
 800c466:	4603      	mov	r3, r0
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d102      	bne.n	800c472 <xQueueReceive+0x6e>
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d101      	bne.n	800c476 <xQueueReceive+0x72>
 800c472:	2301      	movs	r3, #1
 800c474:	e000      	b.n	800c478 <xQueueReceive+0x74>
 800c476:	2300      	movs	r3, #0
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d10a      	bne.n	800c492 <xQueueReceive+0x8e>
	__asm volatile
 800c47c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c480:	f383 8811 	msr	BASEPRI, r3
 800c484:	f3bf 8f6f 	isb	sy
 800c488:	f3bf 8f4f 	dsb	sy
 800c48c:	61bb      	str	r3, [r7, #24]
}
 800c48e:	bf00      	nop
 800c490:	e7fe      	b.n	800c490 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c492:	f002 f9ef 	bl	800e874 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c49a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d01f      	beq.n	800c4e2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c4a2:	68b9      	ldr	r1, [r7, #8]
 800c4a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4a6:	f000 fafa 	bl	800ca9e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ac:	1e5a      	subs	r2, r3, #1
 800c4ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4b0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c4b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4b4:	691b      	ldr	r3, [r3, #16]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d00f      	beq.n	800c4da <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4bc:	3310      	adds	r3, #16
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f001 f9ba 	bl	800d838 <xTaskRemoveFromEventList>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d007      	beq.n	800c4da <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c4ca:	4b3d      	ldr	r3, [pc, #244]	; (800c5c0 <xQueueReceive+0x1bc>)
 800c4cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4d0:	601a      	str	r2, [r3, #0]
 800c4d2:	f3bf 8f4f 	dsb	sy
 800c4d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c4da:	f002 f9fb 	bl	800e8d4 <vPortExitCritical>
				return pdPASS;
 800c4de:	2301      	movs	r3, #1
 800c4e0:	e069      	b.n	800c5b6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d103      	bne.n	800c4f0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c4e8:	f002 f9f4 	bl	800e8d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	e062      	b.n	800c5b6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d106      	bne.n	800c504 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c4f6:	f107 0310 	add.w	r3, r7, #16
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	f001 fa00 	bl	800d900 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c500:	2301      	movs	r3, #1
 800c502:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c504:	f002 f9e6 	bl	800e8d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c508:	f000 ff5a 	bl	800d3c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c50c:	f002 f9b2 	bl	800e874 <vPortEnterCritical>
 800c510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c512:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c516:	b25b      	sxtb	r3, r3
 800c518:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c51c:	d103      	bne.n	800c526 <xQueueReceive+0x122>
 800c51e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c520:	2200      	movs	r2, #0
 800c522:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c528:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c52c:	b25b      	sxtb	r3, r3
 800c52e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c532:	d103      	bne.n	800c53c <xQueueReceive+0x138>
 800c534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c536:	2200      	movs	r2, #0
 800c538:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c53c:	f002 f9ca 	bl	800e8d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c540:	1d3a      	adds	r2, r7, #4
 800c542:	f107 0310 	add.w	r3, r7, #16
 800c546:	4611      	mov	r1, r2
 800c548:	4618      	mov	r0, r3
 800c54a:	f001 f9ef 	bl	800d92c <xTaskCheckForTimeOut>
 800c54e:	4603      	mov	r3, r0
 800c550:	2b00      	cmp	r3, #0
 800c552:	d123      	bne.n	800c59c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c554:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c556:	f000 fb1a 	bl	800cb8e <prvIsQueueEmpty>
 800c55a:	4603      	mov	r3, r0
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d017      	beq.n	800c590 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c562:	3324      	adds	r3, #36	; 0x24
 800c564:	687a      	ldr	r2, [r7, #4]
 800c566:	4611      	mov	r1, r2
 800c568:	4618      	mov	r0, r3
 800c56a:	f001 f915 	bl	800d798 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c56e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c570:	f000 fabb 	bl	800caea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c574:	f000 ff32 	bl	800d3dc <xTaskResumeAll>
 800c578:	4603      	mov	r3, r0
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d189      	bne.n	800c492 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c57e:	4b10      	ldr	r3, [pc, #64]	; (800c5c0 <xQueueReceive+0x1bc>)
 800c580:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c584:	601a      	str	r2, [r3, #0]
 800c586:	f3bf 8f4f 	dsb	sy
 800c58a:	f3bf 8f6f 	isb	sy
 800c58e:	e780      	b.n	800c492 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c590:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c592:	f000 faaa 	bl	800caea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c596:	f000 ff21 	bl	800d3dc <xTaskResumeAll>
 800c59a:	e77a      	b.n	800c492 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c59c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c59e:	f000 faa4 	bl	800caea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c5a2:	f000 ff1b 	bl	800d3dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c5a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c5a8:	f000 faf1 	bl	800cb8e <prvIsQueueEmpty>
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	f43f af6f 	beq.w	800c492 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c5b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	3730      	adds	r7, #48	; 0x30
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}
 800c5be:	bf00      	nop
 800c5c0:	e000ed04 	.word	0xe000ed04

0800c5c4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b08e      	sub	sp, #56	; 0x38
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
 800c5cc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d10a      	bne.n	800c5f6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e4:	f383 8811 	msr	BASEPRI, r3
 800c5e8:	f3bf 8f6f 	isb	sy
 800c5ec:	f3bf 8f4f 	dsb	sy
 800c5f0:	623b      	str	r3, [r7, #32]
}
 800c5f2:	bf00      	nop
 800c5f4:	e7fe      	b.n	800c5f4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d00a      	beq.n	800c614 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c602:	f383 8811 	msr	BASEPRI, r3
 800c606:	f3bf 8f6f 	isb	sy
 800c60a:	f3bf 8f4f 	dsb	sy
 800c60e:	61fb      	str	r3, [r7, #28]
}
 800c610:	bf00      	nop
 800c612:	e7fe      	b.n	800c612 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c614:	f001 fad2 	bl	800dbbc <xTaskGetSchedulerState>
 800c618:	4603      	mov	r3, r0
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d102      	bne.n	800c624 <xQueueSemaphoreTake+0x60>
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d101      	bne.n	800c628 <xQueueSemaphoreTake+0x64>
 800c624:	2301      	movs	r3, #1
 800c626:	e000      	b.n	800c62a <xQueueSemaphoreTake+0x66>
 800c628:	2300      	movs	r3, #0
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d10a      	bne.n	800c644 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c632:	f383 8811 	msr	BASEPRI, r3
 800c636:	f3bf 8f6f 	isb	sy
 800c63a:	f3bf 8f4f 	dsb	sy
 800c63e:	61bb      	str	r3, [r7, #24]
}
 800c640:	bf00      	nop
 800c642:	e7fe      	b.n	800c642 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c644:	f002 f916 	bl	800e874 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c64a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c64c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c64e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c650:	2b00      	cmp	r3, #0
 800c652:	d024      	beq.n	800c69e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c656:	1e5a      	subs	r2, r3, #1
 800c658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c65a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d104      	bne.n	800c66e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c664:	f001 fc20 	bl	800dea8 <pvTaskIncrementMutexHeldCount>
 800c668:	4602      	mov	r2, r0
 800c66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c66c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c670:	691b      	ldr	r3, [r3, #16]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d00f      	beq.n	800c696 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c678:	3310      	adds	r3, #16
 800c67a:	4618      	mov	r0, r3
 800c67c:	f001 f8dc 	bl	800d838 <xTaskRemoveFromEventList>
 800c680:	4603      	mov	r3, r0
 800c682:	2b00      	cmp	r3, #0
 800c684:	d007      	beq.n	800c696 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c686:	4b54      	ldr	r3, [pc, #336]	; (800c7d8 <xQueueSemaphoreTake+0x214>)
 800c688:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c68c:	601a      	str	r2, [r3, #0]
 800c68e:	f3bf 8f4f 	dsb	sy
 800c692:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c696:	f002 f91d 	bl	800e8d4 <vPortExitCritical>
				return pdPASS;
 800c69a:	2301      	movs	r3, #1
 800c69c:	e097      	b.n	800c7ce <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d111      	bne.n	800c6c8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c6a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d00a      	beq.n	800c6c0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c6aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ae:	f383 8811 	msr	BASEPRI, r3
 800c6b2:	f3bf 8f6f 	isb	sy
 800c6b6:	f3bf 8f4f 	dsb	sy
 800c6ba:	617b      	str	r3, [r7, #20]
}
 800c6bc:	bf00      	nop
 800c6be:	e7fe      	b.n	800c6be <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c6c0:	f002 f908 	bl	800e8d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	e082      	b.n	800c7ce <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c6c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d106      	bne.n	800c6dc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c6ce:	f107 030c 	add.w	r3, r7, #12
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f001 f914 	bl	800d900 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c6d8:	2301      	movs	r3, #1
 800c6da:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c6dc:	f002 f8fa 	bl	800e8d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c6e0:	f000 fe6e 	bl	800d3c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c6e4:	f002 f8c6 	bl	800e874 <vPortEnterCritical>
 800c6e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c6ee:	b25b      	sxtb	r3, r3
 800c6f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c6f4:	d103      	bne.n	800c6fe <xQueueSemaphoreTake+0x13a>
 800c6f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c700:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c704:	b25b      	sxtb	r3, r3
 800c706:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c70a:	d103      	bne.n	800c714 <xQueueSemaphoreTake+0x150>
 800c70c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c70e:	2200      	movs	r2, #0
 800c710:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c714:	f002 f8de 	bl	800e8d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c718:	463a      	mov	r2, r7
 800c71a:	f107 030c 	add.w	r3, r7, #12
 800c71e:	4611      	mov	r1, r2
 800c720:	4618      	mov	r0, r3
 800c722:	f001 f903 	bl	800d92c <xTaskCheckForTimeOut>
 800c726:	4603      	mov	r3, r0
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d132      	bne.n	800c792 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c72c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c72e:	f000 fa2e 	bl	800cb8e <prvIsQueueEmpty>
 800c732:	4603      	mov	r3, r0
 800c734:	2b00      	cmp	r3, #0
 800c736:	d026      	beq.n	800c786 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d109      	bne.n	800c754 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c740:	f002 f898 	bl	800e874 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c746:	689b      	ldr	r3, [r3, #8]
 800c748:	4618      	mov	r0, r3
 800c74a:	f001 fa55 	bl	800dbf8 <xTaskPriorityInherit>
 800c74e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c750:	f002 f8c0 	bl	800e8d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c756:	3324      	adds	r3, #36	; 0x24
 800c758:	683a      	ldr	r2, [r7, #0]
 800c75a:	4611      	mov	r1, r2
 800c75c:	4618      	mov	r0, r3
 800c75e:	f001 f81b 	bl	800d798 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c762:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c764:	f000 f9c1 	bl	800caea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c768:	f000 fe38 	bl	800d3dc <xTaskResumeAll>
 800c76c:	4603      	mov	r3, r0
 800c76e:	2b00      	cmp	r3, #0
 800c770:	f47f af68 	bne.w	800c644 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c774:	4b18      	ldr	r3, [pc, #96]	; (800c7d8 <xQueueSemaphoreTake+0x214>)
 800c776:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c77a:	601a      	str	r2, [r3, #0]
 800c77c:	f3bf 8f4f 	dsb	sy
 800c780:	f3bf 8f6f 	isb	sy
 800c784:	e75e      	b.n	800c644 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c786:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c788:	f000 f9af 	bl	800caea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c78c:	f000 fe26 	bl	800d3dc <xTaskResumeAll>
 800c790:	e758      	b.n	800c644 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c792:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c794:	f000 f9a9 	bl	800caea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c798:	f000 fe20 	bl	800d3dc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c79c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c79e:	f000 f9f6 	bl	800cb8e <prvIsQueueEmpty>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	f43f af4d 	beq.w	800c644 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d00d      	beq.n	800c7cc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c7b0:	f002 f860 	bl	800e874 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c7b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c7b6:	f000 f8f0 	bl	800c99a <prvGetDisinheritPriorityAfterTimeout>
 800c7ba:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c7bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7be:	689b      	ldr	r3, [r3, #8]
 800c7c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	f001 faee 	bl	800dda4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c7c8:	f002 f884 	bl	800e8d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c7cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	3738      	adds	r7, #56	; 0x38
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bd80      	pop	{r7, pc}
 800c7d6:	bf00      	nop
 800c7d8:	e000ed04 	.word	0xe000ed04

0800c7dc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b08e      	sub	sp, #56	; 0x38
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	60f8      	str	r0, [r7, #12]
 800c7e4:	60b9      	str	r1, [r7, #8]
 800c7e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c7ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d10a      	bne.n	800c808 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c7f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7f6:	f383 8811 	msr	BASEPRI, r3
 800c7fa:	f3bf 8f6f 	isb	sy
 800c7fe:	f3bf 8f4f 	dsb	sy
 800c802:	623b      	str	r3, [r7, #32]
}
 800c804:	bf00      	nop
 800c806:	e7fe      	b.n	800c806 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c808:	68bb      	ldr	r3, [r7, #8]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d103      	bne.n	800c816 <xQueueReceiveFromISR+0x3a>
 800c80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c812:	2b00      	cmp	r3, #0
 800c814:	d101      	bne.n	800c81a <xQueueReceiveFromISR+0x3e>
 800c816:	2301      	movs	r3, #1
 800c818:	e000      	b.n	800c81c <xQueueReceiveFromISR+0x40>
 800c81a:	2300      	movs	r3, #0
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d10a      	bne.n	800c836 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c824:	f383 8811 	msr	BASEPRI, r3
 800c828:	f3bf 8f6f 	isb	sy
 800c82c:	f3bf 8f4f 	dsb	sy
 800c830:	61fb      	str	r3, [r7, #28]
}
 800c832:	bf00      	nop
 800c834:	e7fe      	b.n	800c834 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c836:	f002 f8ff 	bl	800ea38 <vPortValidateInterruptPriority>
	__asm volatile
 800c83a:	f3ef 8211 	mrs	r2, BASEPRI
 800c83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c842:	f383 8811 	msr	BASEPRI, r3
 800c846:	f3bf 8f6f 	isb	sy
 800c84a:	f3bf 8f4f 	dsb	sy
 800c84e:	61ba      	str	r2, [r7, #24]
 800c850:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c852:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c854:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c85a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d02f      	beq.n	800c8c2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c864:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c868:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c86c:	68b9      	ldr	r1, [r7, #8]
 800c86e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c870:	f000 f915 	bl	800ca9e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c876:	1e5a      	subs	r2, r3, #1
 800c878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c87a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c87c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c880:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c884:	d112      	bne.n	800c8ac <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c888:	691b      	ldr	r3, [r3, #16]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d016      	beq.n	800c8bc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c890:	3310      	adds	r3, #16
 800c892:	4618      	mov	r0, r3
 800c894:	f000 ffd0 	bl	800d838 <xTaskRemoveFromEventList>
 800c898:	4603      	mov	r3, r0
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d00e      	beq.n	800c8bc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d00b      	beq.n	800c8bc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2201      	movs	r2, #1
 800c8a8:	601a      	str	r2, [r3, #0]
 800c8aa:	e007      	b.n	800c8bc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c8ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8b0:	3301      	adds	r3, #1
 800c8b2:	b2db      	uxtb	r3, r3
 800c8b4:	b25a      	sxtb	r2, r3
 800c8b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c8bc:	2301      	movs	r3, #1
 800c8be:	637b      	str	r3, [r7, #52]	; 0x34
 800c8c0:	e001      	b.n	800c8c6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	637b      	str	r3, [r7, #52]	; 0x34
 800c8c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8c8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c8ca:	693b      	ldr	r3, [r7, #16]
 800c8cc:	f383 8811 	msr	BASEPRI, r3
}
 800c8d0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c8d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	3738      	adds	r7, #56	; 0x38
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd80      	pop	{r7, pc}

0800c8dc <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b084      	sub	sp, #16
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d10a      	bne.n	800c900 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800c8ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ee:	f383 8811 	msr	BASEPRI, r3
 800c8f2:	f3bf 8f6f 	isb	sy
 800c8f6:	f3bf 8f4f 	dsb	sy
 800c8fa:	60bb      	str	r3, [r7, #8]
}
 800c8fc:	bf00      	nop
 800c8fe:	e7fe      	b.n	800c8fe <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800c900:	f001 ffb8 	bl	800e874 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c908:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800c90a:	f001 ffe3 	bl	800e8d4 <vPortExitCritical>

	return uxReturn;
 800c90e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800c910:	4618      	mov	r0, r3
 800c912:	3710      	adds	r7, #16
 800c914:	46bd      	mov	sp, r7
 800c916:	bd80      	pop	{r7, pc}

0800c918 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800c918:	b480      	push	{r7}
 800c91a:	b087      	sub	sp, #28
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800c924:	697b      	ldr	r3, [r7, #20]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d10a      	bne.n	800c940 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800c92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c92e:	f383 8811 	msr	BASEPRI, r3
 800c932:	f3bf 8f6f 	isb	sy
 800c936:	f3bf 8f4f 	dsb	sy
 800c93a:	60fb      	str	r3, [r7, #12]
}
 800c93c:	bf00      	nop
 800c93e:	e7fe      	b.n	800c93e <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800c940:	697b      	ldr	r3, [r7, #20]
 800c942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c944:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800c946:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800c948:	4618      	mov	r0, r3
 800c94a:	371c      	adds	r7, #28
 800c94c:	46bd      	mov	sp, r7
 800c94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c952:	4770      	bx	lr

0800c954 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b084      	sub	sp, #16
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d10a      	bne.n	800c97c <vQueueDelete+0x28>
	__asm volatile
 800c966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c96a:	f383 8811 	msr	BASEPRI, r3
 800c96e:	f3bf 8f6f 	isb	sy
 800c972:	f3bf 8f4f 	dsb	sy
 800c976:	60bb      	str	r3, [r7, #8]
}
 800c978:	bf00      	nop
 800c97a:	e7fe      	b.n	800c97a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c97c:	68f8      	ldr	r0, [r7, #12]
 800c97e:	f000 f95f 	bl	800cc40 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d102      	bne.n	800c992 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800c98c:	68f8      	ldr	r0, [r7, #12]
 800c98e:	f002 f95f 	bl	800ec50 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c992:	bf00      	nop
 800c994:	3710      	adds	r7, #16
 800c996:	46bd      	mov	sp, r7
 800c998:	bd80      	pop	{r7, pc}

0800c99a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c99a:	b480      	push	{r7}
 800c99c:	b085      	sub	sp, #20
 800c99e:	af00      	add	r7, sp, #0
 800c9a0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d006      	beq.n	800c9b8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800c9b4:	60fb      	str	r3, [r7, #12]
 800c9b6:	e001      	b.n	800c9bc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c9bc:	68fb      	ldr	r3, [r7, #12]
	}
 800c9be:	4618      	mov	r0, r3
 800c9c0:	3714      	adds	r7, #20
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c8:	4770      	bx	lr

0800c9ca <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c9ca:	b580      	push	{r7, lr}
 800c9cc:	b086      	sub	sp, #24
 800c9ce:	af00      	add	r7, sp, #0
 800c9d0:	60f8      	str	r0, [r7, #12]
 800c9d2:	60b9      	str	r1, [r7, #8]
 800c9d4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9de:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d10d      	bne.n	800ca04 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d14d      	bne.n	800ca8c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	689b      	ldr	r3, [r3, #8]
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	f001 f967 	bl	800dcc8 <xTaskPriorityDisinherit>
 800c9fa:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	2200      	movs	r2, #0
 800ca00:	609a      	str	r2, [r3, #8]
 800ca02:	e043      	b.n	800ca8c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d119      	bne.n	800ca3e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	6858      	ldr	r0, [r3, #4]
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca12:	461a      	mov	r2, r3
 800ca14:	68b9      	ldr	r1, [r7, #8]
 800ca16:	f002 fa75 	bl	800ef04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	685a      	ldr	r2, [r3, #4]
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca22:	441a      	add	r2, r3
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	685a      	ldr	r2, [r3, #4]
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	689b      	ldr	r3, [r3, #8]
 800ca30:	429a      	cmp	r2, r3
 800ca32:	d32b      	bcc.n	800ca8c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	681a      	ldr	r2, [r3, #0]
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	605a      	str	r2, [r3, #4]
 800ca3c:	e026      	b.n	800ca8c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	68d8      	ldr	r0, [r3, #12]
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca46:	461a      	mov	r2, r3
 800ca48:	68b9      	ldr	r1, [r7, #8]
 800ca4a:	f002 fa5b 	bl	800ef04 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	68da      	ldr	r2, [r3, #12]
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca56:	425b      	negs	r3, r3
 800ca58:	441a      	add	r2, r3
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	68da      	ldr	r2, [r3, #12]
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	429a      	cmp	r2, r3
 800ca68:	d207      	bcs.n	800ca7a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	689a      	ldr	r2, [r3, #8]
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca72:	425b      	negs	r3, r3
 800ca74:	441a      	add	r2, r3
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	2b02      	cmp	r3, #2
 800ca7e:	d105      	bne.n	800ca8c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ca80:	693b      	ldr	r3, [r7, #16]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d002      	beq.n	800ca8c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ca86:	693b      	ldr	r3, [r7, #16]
 800ca88:	3b01      	subs	r3, #1
 800ca8a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ca8c:	693b      	ldr	r3, [r7, #16]
 800ca8e:	1c5a      	adds	r2, r3, #1
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ca94:	697b      	ldr	r3, [r7, #20]
}
 800ca96:	4618      	mov	r0, r3
 800ca98:	3718      	adds	r7, #24
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bd80      	pop	{r7, pc}

0800ca9e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ca9e:	b580      	push	{r7, lr}
 800caa0:	b082      	sub	sp, #8
 800caa2:	af00      	add	r7, sp, #0
 800caa4:	6078      	str	r0, [r7, #4]
 800caa6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caac:	2b00      	cmp	r3, #0
 800caae:	d018      	beq.n	800cae2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	68da      	ldr	r2, [r3, #12]
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cab8:	441a      	add	r2, r3
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	68da      	ldr	r2, [r3, #12]
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	689b      	ldr	r3, [r3, #8]
 800cac6:	429a      	cmp	r2, r3
 800cac8:	d303      	bcc.n	800cad2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681a      	ldr	r2, [r3, #0]
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	68d9      	ldr	r1, [r3, #12]
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cada:	461a      	mov	r2, r3
 800cadc:	6838      	ldr	r0, [r7, #0]
 800cade:	f002 fa11 	bl	800ef04 <memcpy>
	}
}
 800cae2:	bf00      	nop
 800cae4:	3708      	adds	r7, #8
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bd80      	pop	{r7, pc}

0800caea <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800caea:	b580      	push	{r7, lr}
 800caec:	b084      	sub	sp, #16
 800caee:	af00      	add	r7, sp, #0
 800caf0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800caf2:	f001 febf 	bl	800e874 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cafc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cafe:	e011      	b.n	800cb24 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d012      	beq.n	800cb2e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	3324      	adds	r3, #36	; 0x24
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	f000 fe93 	bl	800d838 <xTaskRemoveFromEventList>
 800cb12:	4603      	mov	r3, r0
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d001      	beq.n	800cb1c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cb18:	f000 ff6a 	bl	800d9f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cb1c:	7bfb      	ldrb	r3, [r7, #15]
 800cb1e:	3b01      	subs	r3, #1
 800cb20:	b2db      	uxtb	r3, r3
 800cb22:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cb24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	dce9      	bgt.n	800cb00 <prvUnlockQueue+0x16>
 800cb2c:	e000      	b.n	800cb30 <prvUnlockQueue+0x46>
					break;
 800cb2e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	22ff      	movs	r2, #255	; 0xff
 800cb34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800cb38:	f001 fecc 	bl	800e8d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cb3c:	f001 fe9a 	bl	800e874 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cb46:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cb48:	e011      	b.n	800cb6e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	691b      	ldr	r3, [r3, #16]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d012      	beq.n	800cb78 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	3310      	adds	r3, #16
 800cb56:	4618      	mov	r0, r3
 800cb58:	f000 fe6e 	bl	800d838 <xTaskRemoveFromEventList>
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d001      	beq.n	800cb66 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cb62:	f000 ff45 	bl	800d9f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cb66:	7bbb      	ldrb	r3, [r7, #14]
 800cb68:	3b01      	subs	r3, #1
 800cb6a:	b2db      	uxtb	r3, r3
 800cb6c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cb6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	dce9      	bgt.n	800cb4a <prvUnlockQueue+0x60>
 800cb76:	e000      	b.n	800cb7a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cb78:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	22ff      	movs	r2, #255	; 0xff
 800cb7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800cb82:	f001 fea7 	bl	800e8d4 <vPortExitCritical>
}
 800cb86:	bf00      	nop
 800cb88:	3710      	adds	r7, #16
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bd80      	pop	{r7, pc}

0800cb8e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cb8e:	b580      	push	{r7, lr}
 800cb90:	b084      	sub	sp, #16
 800cb92:	af00      	add	r7, sp, #0
 800cb94:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cb96:	f001 fe6d 	bl	800e874 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d102      	bne.n	800cba8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cba2:	2301      	movs	r3, #1
 800cba4:	60fb      	str	r3, [r7, #12]
 800cba6:	e001      	b.n	800cbac <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cba8:	2300      	movs	r3, #0
 800cbaa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cbac:	f001 fe92 	bl	800e8d4 <vPortExitCritical>

	return xReturn;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
}
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	3710      	adds	r7, #16
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}

0800cbba <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cbba:	b580      	push	{r7, lr}
 800cbbc:	b084      	sub	sp, #16
 800cbbe:	af00      	add	r7, sp, #0
 800cbc0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cbc2:	f001 fe57 	bl	800e874 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbce:	429a      	cmp	r2, r3
 800cbd0:	d102      	bne.n	800cbd8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cbd2:	2301      	movs	r3, #1
 800cbd4:	60fb      	str	r3, [r7, #12]
 800cbd6:	e001      	b.n	800cbdc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cbd8:	2300      	movs	r3, #0
 800cbda:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cbdc:	f001 fe7a 	bl	800e8d4 <vPortExitCritical>

	return xReturn;
 800cbe0:	68fb      	ldr	r3, [r7, #12]
}
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	3710      	adds	r7, #16
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}
	...

0800cbec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cbec:	b480      	push	{r7}
 800cbee:	b085      	sub	sp, #20
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
 800cbf4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	60fb      	str	r3, [r7, #12]
 800cbfa:	e014      	b.n	800cc26 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cbfc:	4a0f      	ldr	r2, [pc, #60]	; (800cc3c <vQueueAddToRegistry+0x50>)
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d10b      	bne.n	800cc20 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cc08:	490c      	ldr	r1, [pc, #48]	; (800cc3c <vQueueAddToRegistry+0x50>)
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	683a      	ldr	r2, [r7, #0]
 800cc0e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cc12:	4a0a      	ldr	r2, [pc, #40]	; (800cc3c <vQueueAddToRegistry+0x50>)
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	00db      	lsls	r3, r3, #3
 800cc18:	4413      	add	r3, r2
 800cc1a:	687a      	ldr	r2, [r7, #4]
 800cc1c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cc1e:	e006      	b.n	800cc2e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	3301      	adds	r3, #1
 800cc24:	60fb      	str	r3, [r7, #12]
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	2b07      	cmp	r3, #7
 800cc2a:	d9e7      	bls.n	800cbfc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cc2c:	bf00      	nop
 800cc2e:	bf00      	nop
 800cc30:	3714      	adds	r7, #20
 800cc32:	46bd      	mov	sp, r7
 800cc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc38:	4770      	bx	lr
 800cc3a:	bf00      	nop
 800cc3c:	200014dc 	.word	0x200014dc

0800cc40 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800cc40:	b480      	push	{r7}
 800cc42:	b085      	sub	sp, #20
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cc48:	2300      	movs	r3, #0
 800cc4a:	60fb      	str	r3, [r7, #12]
 800cc4c:	e016      	b.n	800cc7c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800cc4e:	4a10      	ldr	r2, [pc, #64]	; (800cc90 <vQueueUnregisterQueue+0x50>)
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	00db      	lsls	r3, r3, #3
 800cc54:	4413      	add	r3, r2
 800cc56:	685b      	ldr	r3, [r3, #4]
 800cc58:	687a      	ldr	r2, [r7, #4]
 800cc5a:	429a      	cmp	r2, r3
 800cc5c:	d10b      	bne.n	800cc76 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800cc5e:	4a0c      	ldr	r2, [pc, #48]	; (800cc90 <vQueueUnregisterQueue+0x50>)
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	2100      	movs	r1, #0
 800cc64:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800cc68:	4a09      	ldr	r2, [pc, #36]	; (800cc90 <vQueueUnregisterQueue+0x50>)
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	00db      	lsls	r3, r3, #3
 800cc6e:	4413      	add	r3, r2
 800cc70:	2200      	movs	r2, #0
 800cc72:	605a      	str	r2, [r3, #4]
				break;
 800cc74:	e006      	b.n	800cc84 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	3301      	adds	r3, #1
 800cc7a:	60fb      	str	r3, [r7, #12]
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	2b07      	cmp	r3, #7
 800cc80:	d9e5      	bls.n	800cc4e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800cc82:	bf00      	nop
 800cc84:	bf00      	nop
 800cc86:	3714      	adds	r7, #20
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8e:	4770      	bx	lr
 800cc90:	200014dc 	.word	0x200014dc

0800cc94 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b086      	sub	sp, #24
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	60f8      	str	r0, [r7, #12]
 800cc9c:	60b9      	str	r1, [r7, #8]
 800cc9e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cca4:	f001 fde6 	bl	800e874 <vPortEnterCritical>
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ccae:	b25b      	sxtb	r3, r3
 800ccb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ccb4:	d103      	bne.n	800ccbe <vQueueWaitForMessageRestricted+0x2a>
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	2200      	movs	r2, #0
 800ccba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ccbe:	697b      	ldr	r3, [r7, #20]
 800ccc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ccc4:	b25b      	sxtb	r3, r3
 800ccc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ccca:	d103      	bne.n	800ccd4 <vQueueWaitForMessageRestricted+0x40>
 800cccc:	697b      	ldr	r3, [r7, #20]
 800ccce:	2200      	movs	r2, #0
 800ccd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ccd4:	f001 fdfe 	bl	800e8d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ccd8:	697b      	ldr	r3, [r7, #20]
 800ccda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d106      	bne.n	800ccee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cce0:	697b      	ldr	r3, [r7, #20]
 800cce2:	3324      	adds	r3, #36	; 0x24
 800cce4:	687a      	ldr	r2, [r7, #4]
 800cce6:	68b9      	ldr	r1, [r7, #8]
 800cce8:	4618      	mov	r0, r3
 800ccea:	f000 fd79 	bl	800d7e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ccee:	6978      	ldr	r0, [r7, #20]
 800ccf0:	f7ff fefb 	bl	800caea <prvUnlockQueue>
	}
 800ccf4:	bf00      	nop
 800ccf6:	3718      	adds	r7, #24
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	bd80      	pop	{r7, pc}

0800ccfc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b08e      	sub	sp, #56	; 0x38
 800cd00:	af04      	add	r7, sp, #16
 800cd02:	60f8      	str	r0, [r7, #12]
 800cd04:	60b9      	str	r1, [r7, #8]
 800cd06:	607a      	str	r2, [r7, #4]
 800cd08:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cd0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d10a      	bne.n	800cd26 <xTaskCreateStatic+0x2a>
	__asm volatile
 800cd10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd14:	f383 8811 	msr	BASEPRI, r3
 800cd18:	f3bf 8f6f 	isb	sy
 800cd1c:	f3bf 8f4f 	dsb	sy
 800cd20:	623b      	str	r3, [r7, #32]
}
 800cd22:	bf00      	nop
 800cd24:	e7fe      	b.n	800cd24 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cd26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d10a      	bne.n	800cd42 <xTaskCreateStatic+0x46>
	__asm volatile
 800cd2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd30:	f383 8811 	msr	BASEPRI, r3
 800cd34:	f3bf 8f6f 	isb	sy
 800cd38:	f3bf 8f4f 	dsb	sy
 800cd3c:	61fb      	str	r3, [r7, #28]
}
 800cd3e:	bf00      	nop
 800cd40:	e7fe      	b.n	800cd40 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cd42:	23bc      	movs	r3, #188	; 0xbc
 800cd44:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cd46:	693b      	ldr	r3, [r7, #16]
 800cd48:	2bbc      	cmp	r3, #188	; 0xbc
 800cd4a:	d00a      	beq.n	800cd62 <xTaskCreateStatic+0x66>
	__asm volatile
 800cd4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd50:	f383 8811 	msr	BASEPRI, r3
 800cd54:	f3bf 8f6f 	isb	sy
 800cd58:	f3bf 8f4f 	dsb	sy
 800cd5c:	61bb      	str	r3, [r7, #24]
}
 800cd5e:	bf00      	nop
 800cd60:	e7fe      	b.n	800cd60 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cd62:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cd64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d01e      	beq.n	800cda8 <xTaskCreateStatic+0xac>
 800cd6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d01b      	beq.n	800cda8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cd70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd72:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cd74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cd78:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cd7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd7c:	2202      	movs	r2, #2
 800cd7e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cd82:	2300      	movs	r3, #0
 800cd84:	9303      	str	r3, [sp, #12]
 800cd86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd88:	9302      	str	r3, [sp, #8]
 800cd8a:	f107 0314 	add.w	r3, r7, #20
 800cd8e:	9301      	str	r3, [sp, #4]
 800cd90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd92:	9300      	str	r3, [sp, #0]
 800cd94:	683b      	ldr	r3, [r7, #0]
 800cd96:	687a      	ldr	r2, [r7, #4]
 800cd98:	68b9      	ldr	r1, [r7, #8]
 800cd9a:	68f8      	ldr	r0, [r7, #12]
 800cd9c:	f000 f850 	bl	800ce40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cda0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cda2:	f000 f8f3 	bl	800cf8c <prvAddNewTaskToReadyList>
 800cda6:	e001      	b.n	800cdac <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800cda8:	2300      	movs	r3, #0
 800cdaa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cdac:	697b      	ldr	r3, [r7, #20]
	}
 800cdae:	4618      	mov	r0, r3
 800cdb0:	3728      	adds	r7, #40	; 0x28
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	bd80      	pop	{r7, pc}

0800cdb6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cdb6:	b580      	push	{r7, lr}
 800cdb8:	b08c      	sub	sp, #48	; 0x30
 800cdba:	af04      	add	r7, sp, #16
 800cdbc:	60f8      	str	r0, [r7, #12]
 800cdbe:	60b9      	str	r1, [r7, #8]
 800cdc0:	603b      	str	r3, [r7, #0]
 800cdc2:	4613      	mov	r3, r2
 800cdc4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cdc6:	88fb      	ldrh	r3, [r7, #6]
 800cdc8:	009b      	lsls	r3, r3, #2
 800cdca:	4618      	mov	r0, r3
 800cdcc:	f001 fe74 	bl	800eab8 <pvPortMalloc>
 800cdd0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cdd2:	697b      	ldr	r3, [r7, #20]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d00e      	beq.n	800cdf6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cdd8:	20bc      	movs	r0, #188	; 0xbc
 800cdda:	f001 fe6d 	bl	800eab8 <pvPortMalloc>
 800cdde:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cde0:	69fb      	ldr	r3, [r7, #28]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d003      	beq.n	800cdee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cde6:	69fb      	ldr	r3, [r7, #28]
 800cde8:	697a      	ldr	r2, [r7, #20]
 800cdea:	631a      	str	r2, [r3, #48]	; 0x30
 800cdec:	e005      	b.n	800cdfa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cdee:	6978      	ldr	r0, [r7, #20]
 800cdf0:	f001 ff2e 	bl	800ec50 <vPortFree>
 800cdf4:	e001      	b.n	800cdfa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cdfa:	69fb      	ldr	r3, [r7, #28]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d017      	beq.n	800ce30 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ce00:	69fb      	ldr	r3, [r7, #28]
 800ce02:	2200      	movs	r2, #0
 800ce04:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ce08:	88fa      	ldrh	r2, [r7, #6]
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	9303      	str	r3, [sp, #12]
 800ce0e:	69fb      	ldr	r3, [r7, #28]
 800ce10:	9302      	str	r3, [sp, #8]
 800ce12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce14:	9301      	str	r3, [sp, #4]
 800ce16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce18:	9300      	str	r3, [sp, #0]
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	68b9      	ldr	r1, [r7, #8]
 800ce1e:	68f8      	ldr	r0, [r7, #12]
 800ce20:	f000 f80e 	bl	800ce40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ce24:	69f8      	ldr	r0, [r7, #28]
 800ce26:	f000 f8b1 	bl	800cf8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ce2a:	2301      	movs	r3, #1
 800ce2c:	61bb      	str	r3, [r7, #24]
 800ce2e:	e002      	b.n	800ce36 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ce30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ce34:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ce36:	69bb      	ldr	r3, [r7, #24]
	}
 800ce38:	4618      	mov	r0, r3
 800ce3a:	3720      	adds	r7, #32
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bd80      	pop	{r7, pc}

0800ce40 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b088      	sub	sp, #32
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	60f8      	str	r0, [r7, #12]
 800ce48:	60b9      	str	r1, [r7, #8]
 800ce4a:	607a      	str	r2, [r7, #4]
 800ce4c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ce4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce50:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	009b      	lsls	r3, r3, #2
 800ce56:	461a      	mov	r2, r3
 800ce58:	21a5      	movs	r1, #165	; 0xa5
 800ce5a:	f002 f861 	bl	800ef20 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ce5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ce68:	3b01      	subs	r3, #1
 800ce6a:	009b      	lsls	r3, r3, #2
 800ce6c:	4413      	add	r3, r2
 800ce6e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ce70:	69bb      	ldr	r3, [r7, #24]
 800ce72:	f023 0307 	bic.w	r3, r3, #7
 800ce76:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ce78:	69bb      	ldr	r3, [r7, #24]
 800ce7a:	f003 0307 	and.w	r3, r3, #7
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d00a      	beq.n	800ce98 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ce82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce86:	f383 8811 	msr	BASEPRI, r3
 800ce8a:	f3bf 8f6f 	isb	sy
 800ce8e:	f3bf 8f4f 	dsb	sy
 800ce92:	617b      	str	r3, [r7, #20]
}
 800ce94:	bf00      	nop
 800ce96:	e7fe      	b.n	800ce96 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ce98:	68bb      	ldr	r3, [r7, #8]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d01f      	beq.n	800cede <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ce9e:	2300      	movs	r3, #0
 800cea0:	61fb      	str	r3, [r7, #28]
 800cea2:	e012      	b.n	800ceca <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cea4:	68ba      	ldr	r2, [r7, #8]
 800cea6:	69fb      	ldr	r3, [r7, #28]
 800cea8:	4413      	add	r3, r2
 800ceaa:	7819      	ldrb	r1, [r3, #0]
 800ceac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ceae:	69fb      	ldr	r3, [r7, #28]
 800ceb0:	4413      	add	r3, r2
 800ceb2:	3334      	adds	r3, #52	; 0x34
 800ceb4:	460a      	mov	r2, r1
 800ceb6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ceb8:	68ba      	ldr	r2, [r7, #8]
 800ceba:	69fb      	ldr	r3, [r7, #28]
 800cebc:	4413      	add	r3, r2
 800cebe:	781b      	ldrb	r3, [r3, #0]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d006      	beq.n	800ced2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cec4:	69fb      	ldr	r3, [r7, #28]
 800cec6:	3301      	adds	r3, #1
 800cec8:	61fb      	str	r3, [r7, #28]
 800ceca:	69fb      	ldr	r3, [r7, #28]
 800cecc:	2b0f      	cmp	r3, #15
 800cece:	d9e9      	bls.n	800cea4 <prvInitialiseNewTask+0x64>
 800ced0:	e000      	b.n	800ced4 <prvInitialiseNewTask+0x94>
			{
				break;
 800ced2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ced4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ced6:	2200      	movs	r2, #0
 800ced8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cedc:	e003      	b.n	800cee6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cee0:	2200      	movs	r2, #0
 800cee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cee8:	2b37      	cmp	r3, #55	; 0x37
 800ceea:	d901      	bls.n	800cef0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ceec:	2337      	movs	r3, #55	; 0x37
 800ceee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cef2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cef4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cef8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cefa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cefc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cefe:	2200      	movs	r2, #0
 800cf00:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cf02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf04:	3304      	adds	r3, #4
 800cf06:	4618      	mov	r0, r3
 800cf08:	f7fe fe1a 	bl	800bb40 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cf0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf0e:	3318      	adds	r3, #24
 800cf10:	4618      	mov	r0, r3
 800cf12:	f7fe fe15 	bl	800bb40 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cf16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf1a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf1e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cf22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf24:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cf26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf2a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cf2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf2e:	2200      	movs	r2, #0
 800cf30:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cf34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf36:	2200      	movs	r2, #0
 800cf38:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cf3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf3e:	3354      	adds	r3, #84	; 0x54
 800cf40:	2260      	movs	r2, #96	; 0x60
 800cf42:	2100      	movs	r1, #0
 800cf44:	4618      	mov	r0, r3
 800cf46:	f001 ffeb 	bl	800ef20 <memset>
 800cf4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf4c:	4a0c      	ldr	r2, [pc, #48]	; (800cf80 <prvInitialiseNewTask+0x140>)
 800cf4e:	659a      	str	r2, [r3, #88]	; 0x58
 800cf50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf52:	4a0c      	ldr	r2, [pc, #48]	; (800cf84 <prvInitialiseNewTask+0x144>)
 800cf54:	65da      	str	r2, [r3, #92]	; 0x5c
 800cf56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf58:	4a0b      	ldr	r2, [pc, #44]	; (800cf88 <prvInitialiseNewTask+0x148>)
 800cf5a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cf5c:	683a      	ldr	r2, [r7, #0]
 800cf5e:	68f9      	ldr	r1, [r7, #12]
 800cf60:	69b8      	ldr	r0, [r7, #24]
 800cf62:	f001 fb57 	bl	800e614 <pxPortInitialiseStack>
 800cf66:	4602      	mov	r2, r0
 800cf68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf6a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cf6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d002      	beq.n	800cf78 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cf72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf76:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cf78:	bf00      	nop
 800cf7a:	3720      	adds	r7, #32
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}
 800cf80:	0800fb14 	.word	0x0800fb14
 800cf84:	0800fb34 	.word	0x0800fb34
 800cf88:	0800faf4 	.word	0x0800faf4

0800cf8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b082      	sub	sp, #8
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cf94:	f001 fc6e 	bl	800e874 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cf98:	4b2d      	ldr	r3, [pc, #180]	; (800d050 <prvAddNewTaskToReadyList+0xc4>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	3301      	adds	r3, #1
 800cf9e:	4a2c      	ldr	r2, [pc, #176]	; (800d050 <prvAddNewTaskToReadyList+0xc4>)
 800cfa0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cfa2:	4b2c      	ldr	r3, [pc, #176]	; (800d054 <prvAddNewTaskToReadyList+0xc8>)
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d109      	bne.n	800cfbe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cfaa:	4a2a      	ldr	r2, [pc, #168]	; (800d054 <prvAddNewTaskToReadyList+0xc8>)
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cfb0:	4b27      	ldr	r3, [pc, #156]	; (800d050 <prvAddNewTaskToReadyList+0xc4>)
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	2b01      	cmp	r3, #1
 800cfb6:	d110      	bne.n	800cfda <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cfb8:	f000 fd3e 	bl	800da38 <prvInitialiseTaskLists>
 800cfbc:	e00d      	b.n	800cfda <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cfbe:	4b26      	ldr	r3, [pc, #152]	; (800d058 <prvAddNewTaskToReadyList+0xcc>)
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d109      	bne.n	800cfda <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cfc6:	4b23      	ldr	r3, [pc, #140]	; (800d054 <prvAddNewTaskToReadyList+0xc8>)
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfd0:	429a      	cmp	r2, r3
 800cfd2:	d802      	bhi.n	800cfda <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cfd4:	4a1f      	ldr	r2, [pc, #124]	; (800d054 <prvAddNewTaskToReadyList+0xc8>)
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cfda:	4b20      	ldr	r3, [pc, #128]	; (800d05c <prvAddNewTaskToReadyList+0xd0>)
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	3301      	adds	r3, #1
 800cfe0:	4a1e      	ldr	r2, [pc, #120]	; (800d05c <prvAddNewTaskToReadyList+0xd0>)
 800cfe2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cfe4:	4b1d      	ldr	r3, [pc, #116]	; (800d05c <prvAddNewTaskToReadyList+0xd0>)
 800cfe6:	681a      	ldr	r2, [r3, #0]
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cff0:	4b1b      	ldr	r3, [pc, #108]	; (800d060 <prvAddNewTaskToReadyList+0xd4>)
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	429a      	cmp	r2, r3
 800cff6:	d903      	bls.n	800d000 <prvAddNewTaskToReadyList+0x74>
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cffc:	4a18      	ldr	r2, [pc, #96]	; (800d060 <prvAddNewTaskToReadyList+0xd4>)
 800cffe:	6013      	str	r3, [r2, #0]
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d004:	4613      	mov	r3, r2
 800d006:	009b      	lsls	r3, r3, #2
 800d008:	4413      	add	r3, r2
 800d00a:	009b      	lsls	r3, r3, #2
 800d00c:	4a15      	ldr	r2, [pc, #84]	; (800d064 <prvAddNewTaskToReadyList+0xd8>)
 800d00e:	441a      	add	r2, r3
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	3304      	adds	r3, #4
 800d014:	4619      	mov	r1, r3
 800d016:	4610      	mov	r0, r2
 800d018:	f7fe fd9f 	bl	800bb5a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d01c:	f001 fc5a 	bl	800e8d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d020:	4b0d      	ldr	r3, [pc, #52]	; (800d058 <prvAddNewTaskToReadyList+0xcc>)
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d00e      	beq.n	800d046 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d028:	4b0a      	ldr	r3, [pc, #40]	; (800d054 <prvAddNewTaskToReadyList+0xc8>)
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d032:	429a      	cmp	r2, r3
 800d034:	d207      	bcs.n	800d046 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d036:	4b0c      	ldr	r3, [pc, #48]	; (800d068 <prvAddNewTaskToReadyList+0xdc>)
 800d038:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d03c:	601a      	str	r2, [r3, #0]
 800d03e:	f3bf 8f4f 	dsb	sy
 800d042:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d046:	bf00      	nop
 800d048:	3708      	adds	r7, #8
 800d04a:	46bd      	mov	sp, r7
 800d04c:	bd80      	pop	{r7, pc}
 800d04e:	bf00      	nop
 800d050:	200019f0 	.word	0x200019f0
 800d054:	2000151c 	.word	0x2000151c
 800d058:	200019fc 	.word	0x200019fc
 800d05c:	20001a0c 	.word	0x20001a0c
 800d060:	200019f8 	.word	0x200019f8
 800d064:	20001520 	.word	0x20001520
 800d068:	e000ed04 	.word	0xe000ed04

0800d06c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b084      	sub	sp, #16
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d074:	2300      	movs	r3, #0
 800d076:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d017      	beq.n	800d0ae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d07e:	4b13      	ldr	r3, [pc, #76]	; (800d0cc <vTaskDelay+0x60>)
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d00a      	beq.n	800d09c <vTaskDelay+0x30>
	__asm volatile
 800d086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d08a:	f383 8811 	msr	BASEPRI, r3
 800d08e:	f3bf 8f6f 	isb	sy
 800d092:	f3bf 8f4f 	dsb	sy
 800d096:	60bb      	str	r3, [r7, #8]
}
 800d098:	bf00      	nop
 800d09a:	e7fe      	b.n	800d09a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d09c:	f000 f990 	bl	800d3c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d0a0:	2100      	movs	r1, #0
 800d0a2:	6878      	ldr	r0, [r7, #4]
 800d0a4:	f000 ff14 	bl	800ded0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d0a8:	f000 f998 	bl	800d3dc <xTaskResumeAll>
 800d0ac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d107      	bne.n	800d0c4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d0b4:	4b06      	ldr	r3, [pc, #24]	; (800d0d0 <vTaskDelay+0x64>)
 800d0b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0ba:	601a      	str	r2, [r3, #0]
 800d0bc:	f3bf 8f4f 	dsb	sy
 800d0c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d0c4:	bf00      	nop
 800d0c6:	3710      	adds	r7, #16
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	bd80      	pop	{r7, pc}
 800d0cc:	20001a18 	.word	0x20001a18
 800d0d0:	e000ed04 	.word	0xe000ed04

0800d0d4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b084      	sub	sp, #16
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800d0dc:	f001 fbca 	bl	800e874 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d102      	bne.n	800d0ec <vTaskSuspend+0x18>
 800d0e6:	4b30      	ldr	r3, [pc, #192]	; (800d1a8 <vTaskSuspend+0xd4>)
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	e000      	b.n	800d0ee <vTaskSuspend+0x1a>
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	3304      	adds	r3, #4
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	f7fe fd8d 	bl	800bc14 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d004      	beq.n	800d10c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	3318      	adds	r3, #24
 800d106:	4618      	mov	r0, r3
 800d108:	f7fe fd84 	bl	800bc14 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	3304      	adds	r3, #4
 800d110:	4619      	mov	r1, r3
 800d112:	4826      	ldr	r0, [pc, #152]	; (800d1ac <vTaskSuspend+0xd8>)
 800d114:	f7fe fd21 	bl	800bb5a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800d11e:	b2db      	uxtb	r3, r3
 800d120:	2b01      	cmp	r3, #1
 800d122:	d103      	bne.n	800d12c <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	2200      	movs	r2, #0
 800d128:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800d12c:	f001 fbd2 	bl	800e8d4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800d130:	4b1f      	ldr	r3, [pc, #124]	; (800d1b0 <vTaskSuspend+0xdc>)
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d005      	beq.n	800d144 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800d138:	f001 fb9c 	bl	800e874 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800d13c:	f000 fd1e 	bl	800db7c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800d140:	f001 fbc8 	bl	800e8d4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800d144:	4b18      	ldr	r3, [pc, #96]	; (800d1a8 <vTaskSuspend+0xd4>)
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	68fa      	ldr	r2, [r7, #12]
 800d14a:	429a      	cmp	r2, r3
 800d14c:	d127      	bne.n	800d19e <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800d14e:	4b18      	ldr	r3, [pc, #96]	; (800d1b0 <vTaskSuspend+0xdc>)
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d017      	beq.n	800d186 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800d156:	4b17      	ldr	r3, [pc, #92]	; (800d1b4 <vTaskSuspend+0xe0>)
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d00a      	beq.n	800d174 <vTaskSuspend+0xa0>
	__asm volatile
 800d15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d162:	f383 8811 	msr	BASEPRI, r3
 800d166:	f3bf 8f6f 	isb	sy
 800d16a:	f3bf 8f4f 	dsb	sy
 800d16e:	60bb      	str	r3, [r7, #8]
}
 800d170:	bf00      	nop
 800d172:	e7fe      	b.n	800d172 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800d174:	4b10      	ldr	r3, [pc, #64]	; (800d1b8 <vTaskSuspend+0xe4>)
 800d176:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d17a:	601a      	str	r2, [r3, #0]
 800d17c:	f3bf 8f4f 	dsb	sy
 800d180:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d184:	e00b      	b.n	800d19e <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800d186:	4b09      	ldr	r3, [pc, #36]	; (800d1ac <vTaskSuspend+0xd8>)
 800d188:	681a      	ldr	r2, [r3, #0]
 800d18a:	4b0c      	ldr	r3, [pc, #48]	; (800d1bc <vTaskSuspend+0xe8>)
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	429a      	cmp	r2, r3
 800d190:	d103      	bne.n	800d19a <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800d192:	4b05      	ldr	r3, [pc, #20]	; (800d1a8 <vTaskSuspend+0xd4>)
 800d194:	2200      	movs	r2, #0
 800d196:	601a      	str	r2, [r3, #0]
	}
 800d198:	e001      	b.n	800d19e <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800d19a:	f000 fa99 	bl	800d6d0 <vTaskSwitchContext>
	}
 800d19e:	bf00      	nop
 800d1a0:	3710      	adds	r7, #16
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd80      	pop	{r7, pc}
 800d1a6:	bf00      	nop
 800d1a8:	2000151c 	.word	0x2000151c
 800d1ac:	200019dc 	.word	0x200019dc
 800d1b0:	200019fc 	.word	0x200019fc
 800d1b4:	20001a18 	.word	0x20001a18
 800d1b8:	e000ed04 	.word	0xe000ed04
 800d1bc:	200019f0 	.word	0x200019f0

0800d1c0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800d1c0:	b480      	push	{r7}
 800d1c2:	b087      	sub	sp, #28
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d10a      	bne.n	800d1ec <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800d1d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1da:	f383 8811 	msr	BASEPRI, r3
 800d1de:	f3bf 8f6f 	isb	sy
 800d1e2:	f3bf 8f4f 	dsb	sy
 800d1e6:	60fb      	str	r3, [r7, #12]
}
 800d1e8:	bf00      	nop
 800d1ea:	e7fe      	b.n	800d1ea <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d1ec:	693b      	ldr	r3, [r7, #16]
 800d1ee:	695b      	ldr	r3, [r3, #20]
 800d1f0:	4a0a      	ldr	r2, [pc, #40]	; (800d21c <prvTaskIsTaskSuspended+0x5c>)
 800d1f2:	4293      	cmp	r3, r2
 800d1f4:	d10a      	bne.n	800d20c <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800d1f6:	693b      	ldr	r3, [r7, #16]
 800d1f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1fa:	4a09      	ldr	r2, [pc, #36]	; (800d220 <prvTaskIsTaskSuspended+0x60>)
 800d1fc:	4293      	cmp	r3, r2
 800d1fe:	d005      	beq.n	800d20c <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800d200:	693b      	ldr	r3, [r7, #16]
 800d202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d204:	2b00      	cmp	r3, #0
 800d206:	d101      	bne.n	800d20c <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800d208:	2301      	movs	r3, #1
 800d20a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d20c:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800d20e:	4618      	mov	r0, r3
 800d210:	371c      	adds	r7, #28
 800d212:	46bd      	mov	sp, r7
 800d214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d218:	4770      	bx	lr
 800d21a:	bf00      	nop
 800d21c:	200019dc 	.word	0x200019dc
 800d220:	200019b0 	.word	0x200019b0

0800d224 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800d224:	b580      	push	{r7, lr}
 800d226:	b084      	sub	sp, #16
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d10a      	bne.n	800d24c <vTaskResume+0x28>
	__asm volatile
 800d236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d23a:	f383 8811 	msr	BASEPRI, r3
 800d23e:	f3bf 8f6f 	isb	sy
 800d242:	f3bf 8f4f 	dsb	sy
 800d246:	60bb      	str	r3, [r7, #8]
}
 800d248:	bf00      	nop
 800d24a:	e7fe      	b.n	800d24a <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800d24c:	4b20      	ldr	r3, [pc, #128]	; (800d2d0 <vTaskResume+0xac>)
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	68fa      	ldr	r2, [r7, #12]
 800d252:	429a      	cmp	r2, r3
 800d254:	d038      	beq.n	800d2c8 <vTaskResume+0xa4>
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d035      	beq.n	800d2c8 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800d25c:	f001 fb0a 	bl	800e874 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800d260:	68f8      	ldr	r0, [r7, #12]
 800d262:	f7ff ffad 	bl	800d1c0 <prvTaskIsTaskSuspended>
 800d266:	4603      	mov	r3, r0
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d02b      	beq.n	800d2c4 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	3304      	adds	r3, #4
 800d270:	4618      	mov	r0, r3
 800d272:	f7fe fccf 	bl	800bc14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d27a:	4b16      	ldr	r3, [pc, #88]	; (800d2d4 <vTaskResume+0xb0>)
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	429a      	cmp	r2, r3
 800d280:	d903      	bls.n	800d28a <vTaskResume+0x66>
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d286:	4a13      	ldr	r2, [pc, #76]	; (800d2d4 <vTaskResume+0xb0>)
 800d288:	6013      	str	r3, [r2, #0]
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d28e:	4613      	mov	r3, r2
 800d290:	009b      	lsls	r3, r3, #2
 800d292:	4413      	add	r3, r2
 800d294:	009b      	lsls	r3, r3, #2
 800d296:	4a10      	ldr	r2, [pc, #64]	; (800d2d8 <vTaskResume+0xb4>)
 800d298:	441a      	add	r2, r3
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	3304      	adds	r3, #4
 800d29e:	4619      	mov	r1, r3
 800d2a0:	4610      	mov	r0, r2
 800d2a2:	f7fe fc5a 	bl	800bb5a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2aa:	4b09      	ldr	r3, [pc, #36]	; (800d2d0 <vTaskResume+0xac>)
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2b0:	429a      	cmp	r2, r3
 800d2b2:	d307      	bcc.n	800d2c4 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800d2b4:	4b09      	ldr	r3, [pc, #36]	; (800d2dc <vTaskResume+0xb8>)
 800d2b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2ba:	601a      	str	r2, [r3, #0]
 800d2bc:	f3bf 8f4f 	dsb	sy
 800d2c0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800d2c4:	f001 fb06 	bl	800e8d4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d2c8:	bf00      	nop
 800d2ca:	3710      	adds	r7, #16
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	bd80      	pop	{r7, pc}
 800d2d0:	2000151c 	.word	0x2000151c
 800d2d4:	200019f8 	.word	0x200019f8
 800d2d8:	20001520 	.word	0x20001520
 800d2dc:	e000ed04 	.word	0xe000ed04

0800d2e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b08a      	sub	sp, #40	; 0x28
 800d2e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d2ee:	463a      	mov	r2, r7
 800d2f0:	1d39      	adds	r1, r7, #4
 800d2f2:	f107 0308 	add.w	r3, r7, #8
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	f7fe fbce 	bl	800ba98 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d2fc:	6839      	ldr	r1, [r7, #0]
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	68ba      	ldr	r2, [r7, #8]
 800d302:	9202      	str	r2, [sp, #8]
 800d304:	9301      	str	r3, [sp, #4]
 800d306:	2300      	movs	r3, #0
 800d308:	9300      	str	r3, [sp, #0]
 800d30a:	2300      	movs	r3, #0
 800d30c:	460a      	mov	r2, r1
 800d30e:	4924      	ldr	r1, [pc, #144]	; (800d3a0 <vTaskStartScheduler+0xc0>)
 800d310:	4824      	ldr	r0, [pc, #144]	; (800d3a4 <vTaskStartScheduler+0xc4>)
 800d312:	f7ff fcf3 	bl	800ccfc <xTaskCreateStatic>
 800d316:	4603      	mov	r3, r0
 800d318:	4a23      	ldr	r2, [pc, #140]	; (800d3a8 <vTaskStartScheduler+0xc8>)
 800d31a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d31c:	4b22      	ldr	r3, [pc, #136]	; (800d3a8 <vTaskStartScheduler+0xc8>)
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d002      	beq.n	800d32a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d324:	2301      	movs	r3, #1
 800d326:	617b      	str	r3, [r7, #20]
 800d328:	e001      	b.n	800d32e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d32a:	2300      	movs	r3, #0
 800d32c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d32e:	697b      	ldr	r3, [r7, #20]
 800d330:	2b01      	cmp	r3, #1
 800d332:	d102      	bne.n	800d33a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d334:	f000 fe20 	bl	800df78 <xTimerCreateTimerTask>
 800d338:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d33a:	697b      	ldr	r3, [r7, #20]
 800d33c:	2b01      	cmp	r3, #1
 800d33e:	d11b      	bne.n	800d378 <vTaskStartScheduler+0x98>
	__asm volatile
 800d340:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d344:	f383 8811 	msr	BASEPRI, r3
 800d348:	f3bf 8f6f 	isb	sy
 800d34c:	f3bf 8f4f 	dsb	sy
 800d350:	613b      	str	r3, [r7, #16]
}
 800d352:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d354:	4b15      	ldr	r3, [pc, #84]	; (800d3ac <vTaskStartScheduler+0xcc>)
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	3354      	adds	r3, #84	; 0x54
 800d35a:	4a15      	ldr	r2, [pc, #84]	; (800d3b0 <vTaskStartScheduler+0xd0>)
 800d35c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d35e:	4b15      	ldr	r3, [pc, #84]	; (800d3b4 <vTaskStartScheduler+0xd4>)
 800d360:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d364:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d366:	4b14      	ldr	r3, [pc, #80]	; (800d3b8 <vTaskStartScheduler+0xd8>)
 800d368:	2201      	movs	r2, #1
 800d36a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d36c:	4b13      	ldr	r3, [pc, #76]	; (800d3bc <vTaskStartScheduler+0xdc>)
 800d36e:	2200      	movs	r2, #0
 800d370:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d372:	f001 f9dd 	bl	800e730 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d376:	e00e      	b.n	800d396 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d378:	697b      	ldr	r3, [r7, #20]
 800d37a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d37e:	d10a      	bne.n	800d396 <vTaskStartScheduler+0xb6>
	__asm volatile
 800d380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d384:	f383 8811 	msr	BASEPRI, r3
 800d388:	f3bf 8f6f 	isb	sy
 800d38c:	f3bf 8f4f 	dsb	sy
 800d390:	60fb      	str	r3, [r7, #12]
}
 800d392:	bf00      	nop
 800d394:	e7fe      	b.n	800d394 <vTaskStartScheduler+0xb4>
}
 800d396:	bf00      	nop
 800d398:	3718      	adds	r7, #24
 800d39a:	46bd      	mov	sp, r7
 800d39c:	bd80      	pop	{r7, pc}
 800d39e:	bf00      	nop
 800d3a0:	0800f970 	.word	0x0800f970
 800d3a4:	0800da09 	.word	0x0800da09
 800d3a8:	20001a14 	.word	0x20001a14
 800d3ac:	2000151c 	.word	0x2000151c
 800d3b0:	20000014 	.word	0x20000014
 800d3b4:	20001a10 	.word	0x20001a10
 800d3b8:	200019fc 	.word	0x200019fc
 800d3bc:	200019f4 	.word	0x200019f4

0800d3c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d3c0:	b480      	push	{r7}
 800d3c2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d3c4:	4b04      	ldr	r3, [pc, #16]	; (800d3d8 <vTaskSuspendAll+0x18>)
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	3301      	adds	r3, #1
 800d3ca:	4a03      	ldr	r2, [pc, #12]	; (800d3d8 <vTaskSuspendAll+0x18>)
 800d3cc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d3ce:	bf00      	nop
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d6:	4770      	bx	lr
 800d3d8:	20001a18 	.word	0x20001a18

0800d3dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b084      	sub	sp, #16
 800d3e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d3ea:	4b42      	ldr	r3, [pc, #264]	; (800d4f4 <xTaskResumeAll+0x118>)
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d10a      	bne.n	800d408 <xTaskResumeAll+0x2c>
	__asm volatile
 800d3f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3f6:	f383 8811 	msr	BASEPRI, r3
 800d3fa:	f3bf 8f6f 	isb	sy
 800d3fe:	f3bf 8f4f 	dsb	sy
 800d402:	603b      	str	r3, [r7, #0]
}
 800d404:	bf00      	nop
 800d406:	e7fe      	b.n	800d406 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d408:	f001 fa34 	bl	800e874 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d40c:	4b39      	ldr	r3, [pc, #228]	; (800d4f4 <xTaskResumeAll+0x118>)
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	3b01      	subs	r3, #1
 800d412:	4a38      	ldr	r2, [pc, #224]	; (800d4f4 <xTaskResumeAll+0x118>)
 800d414:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d416:	4b37      	ldr	r3, [pc, #220]	; (800d4f4 <xTaskResumeAll+0x118>)
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d162      	bne.n	800d4e4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d41e:	4b36      	ldr	r3, [pc, #216]	; (800d4f8 <xTaskResumeAll+0x11c>)
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d05e      	beq.n	800d4e4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d426:	e02f      	b.n	800d488 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d428:	4b34      	ldr	r3, [pc, #208]	; (800d4fc <xTaskResumeAll+0x120>)
 800d42a:	68db      	ldr	r3, [r3, #12]
 800d42c:	68db      	ldr	r3, [r3, #12]
 800d42e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	3318      	adds	r3, #24
 800d434:	4618      	mov	r0, r3
 800d436:	f7fe fbed 	bl	800bc14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	3304      	adds	r3, #4
 800d43e:	4618      	mov	r0, r3
 800d440:	f7fe fbe8 	bl	800bc14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d448:	4b2d      	ldr	r3, [pc, #180]	; (800d500 <xTaskResumeAll+0x124>)
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	429a      	cmp	r2, r3
 800d44e:	d903      	bls.n	800d458 <xTaskResumeAll+0x7c>
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d454:	4a2a      	ldr	r2, [pc, #168]	; (800d500 <xTaskResumeAll+0x124>)
 800d456:	6013      	str	r3, [r2, #0]
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d45c:	4613      	mov	r3, r2
 800d45e:	009b      	lsls	r3, r3, #2
 800d460:	4413      	add	r3, r2
 800d462:	009b      	lsls	r3, r3, #2
 800d464:	4a27      	ldr	r2, [pc, #156]	; (800d504 <xTaskResumeAll+0x128>)
 800d466:	441a      	add	r2, r3
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	3304      	adds	r3, #4
 800d46c:	4619      	mov	r1, r3
 800d46e:	4610      	mov	r0, r2
 800d470:	f7fe fb73 	bl	800bb5a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d478:	4b23      	ldr	r3, [pc, #140]	; (800d508 <xTaskResumeAll+0x12c>)
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d47e:	429a      	cmp	r2, r3
 800d480:	d302      	bcc.n	800d488 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d482:	4b22      	ldr	r3, [pc, #136]	; (800d50c <xTaskResumeAll+0x130>)
 800d484:	2201      	movs	r2, #1
 800d486:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d488:	4b1c      	ldr	r3, [pc, #112]	; (800d4fc <xTaskResumeAll+0x120>)
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d1cb      	bne.n	800d428 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d001      	beq.n	800d49a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d496:	f000 fb71 	bl	800db7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d49a:	4b1d      	ldr	r3, [pc, #116]	; (800d510 <xTaskResumeAll+0x134>)
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d010      	beq.n	800d4c8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d4a6:	f000 f859 	bl	800d55c <xTaskIncrementTick>
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d002      	beq.n	800d4b6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d4b0:	4b16      	ldr	r3, [pc, #88]	; (800d50c <xTaskResumeAll+0x130>)
 800d4b2:	2201      	movs	r2, #1
 800d4b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	3b01      	subs	r3, #1
 800d4ba:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d1f1      	bne.n	800d4a6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d4c2:	4b13      	ldr	r3, [pc, #76]	; (800d510 <xTaskResumeAll+0x134>)
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d4c8:	4b10      	ldr	r3, [pc, #64]	; (800d50c <xTaskResumeAll+0x130>)
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d009      	beq.n	800d4e4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d4d4:	4b0f      	ldr	r3, [pc, #60]	; (800d514 <xTaskResumeAll+0x138>)
 800d4d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4da:	601a      	str	r2, [r3, #0]
 800d4dc:	f3bf 8f4f 	dsb	sy
 800d4e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d4e4:	f001 f9f6 	bl	800e8d4 <vPortExitCritical>

	return xAlreadyYielded;
 800d4e8:	68bb      	ldr	r3, [r7, #8]
}
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	3710      	adds	r7, #16
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	bd80      	pop	{r7, pc}
 800d4f2:	bf00      	nop
 800d4f4:	20001a18 	.word	0x20001a18
 800d4f8:	200019f0 	.word	0x200019f0
 800d4fc:	200019b0 	.word	0x200019b0
 800d500:	200019f8 	.word	0x200019f8
 800d504:	20001520 	.word	0x20001520
 800d508:	2000151c 	.word	0x2000151c
 800d50c:	20001a04 	.word	0x20001a04
 800d510:	20001a00 	.word	0x20001a00
 800d514:	e000ed04 	.word	0xe000ed04

0800d518 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d518:	b480      	push	{r7}
 800d51a:	b083      	sub	sp, #12
 800d51c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d51e:	4b05      	ldr	r3, [pc, #20]	; (800d534 <xTaskGetTickCount+0x1c>)
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d524:	687b      	ldr	r3, [r7, #4]
}
 800d526:	4618      	mov	r0, r3
 800d528:	370c      	adds	r7, #12
 800d52a:	46bd      	mov	sp, r7
 800d52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d530:	4770      	bx	lr
 800d532:	bf00      	nop
 800d534:	200019f4 	.word	0x200019f4

0800d538 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b082      	sub	sp, #8
 800d53c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d53e:	f001 fa7b 	bl	800ea38 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d542:	2300      	movs	r3, #0
 800d544:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800d546:	4b04      	ldr	r3, [pc, #16]	; (800d558 <xTaskGetTickCountFromISR+0x20>)
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d54c:	683b      	ldr	r3, [r7, #0]
}
 800d54e:	4618      	mov	r0, r3
 800d550:	3708      	adds	r7, #8
 800d552:	46bd      	mov	sp, r7
 800d554:	bd80      	pop	{r7, pc}
 800d556:	bf00      	nop
 800d558:	200019f4 	.word	0x200019f4

0800d55c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b086      	sub	sp, #24
 800d560:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d562:	2300      	movs	r3, #0
 800d564:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d566:	4b4f      	ldr	r3, [pc, #316]	; (800d6a4 <xTaskIncrementTick+0x148>)
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	f040 808f 	bne.w	800d68e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d570:	4b4d      	ldr	r3, [pc, #308]	; (800d6a8 <xTaskIncrementTick+0x14c>)
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	3301      	adds	r3, #1
 800d576:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d578:	4a4b      	ldr	r2, [pc, #300]	; (800d6a8 <xTaskIncrementTick+0x14c>)
 800d57a:	693b      	ldr	r3, [r7, #16]
 800d57c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d57e:	693b      	ldr	r3, [r7, #16]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d120      	bne.n	800d5c6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d584:	4b49      	ldr	r3, [pc, #292]	; (800d6ac <xTaskIncrementTick+0x150>)
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d00a      	beq.n	800d5a4 <xTaskIncrementTick+0x48>
	__asm volatile
 800d58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d592:	f383 8811 	msr	BASEPRI, r3
 800d596:	f3bf 8f6f 	isb	sy
 800d59a:	f3bf 8f4f 	dsb	sy
 800d59e:	603b      	str	r3, [r7, #0]
}
 800d5a0:	bf00      	nop
 800d5a2:	e7fe      	b.n	800d5a2 <xTaskIncrementTick+0x46>
 800d5a4:	4b41      	ldr	r3, [pc, #260]	; (800d6ac <xTaskIncrementTick+0x150>)
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	60fb      	str	r3, [r7, #12]
 800d5aa:	4b41      	ldr	r3, [pc, #260]	; (800d6b0 <xTaskIncrementTick+0x154>)
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	4a3f      	ldr	r2, [pc, #252]	; (800d6ac <xTaskIncrementTick+0x150>)
 800d5b0:	6013      	str	r3, [r2, #0]
 800d5b2:	4a3f      	ldr	r2, [pc, #252]	; (800d6b0 <xTaskIncrementTick+0x154>)
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	6013      	str	r3, [r2, #0]
 800d5b8:	4b3e      	ldr	r3, [pc, #248]	; (800d6b4 <xTaskIncrementTick+0x158>)
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	3301      	adds	r3, #1
 800d5be:	4a3d      	ldr	r2, [pc, #244]	; (800d6b4 <xTaskIncrementTick+0x158>)
 800d5c0:	6013      	str	r3, [r2, #0]
 800d5c2:	f000 fadb 	bl	800db7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d5c6:	4b3c      	ldr	r3, [pc, #240]	; (800d6b8 <xTaskIncrementTick+0x15c>)
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	693a      	ldr	r2, [r7, #16]
 800d5cc:	429a      	cmp	r2, r3
 800d5ce:	d349      	bcc.n	800d664 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d5d0:	4b36      	ldr	r3, [pc, #216]	; (800d6ac <xTaskIncrementTick+0x150>)
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d104      	bne.n	800d5e4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d5da:	4b37      	ldr	r3, [pc, #220]	; (800d6b8 <xTaskIncrementTick+0x15c>)
 800d5dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d5e0:	601a      	str	r2, [r3, #0]
					break;
 800d5e2:	e03f      	b.n	800d664 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5e4:	4b31      	ldr	r3, [pc, #196]	; (800d6ac <xTaskIncrementTick+0x150>)
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	68db      	ldr	r3, [r3, #12]
 800d5ea:	68db      	ldr	r3, [r3, #12]
 800d5ec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d5ee:	68bb      	ldr	r3, [r7, #8]
 800d5f0:	685b      	ldr	r3, [r3, #4]
 800d5f2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d5f4:	693a      	ldr	r2, [r7, #16]
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	429a      	cmp	r2, r3
 800d5fa:	d203      	bcs.n	800d604 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d5fc:	4a2e      	ldr	r2, [pc, #184]	; (800d6b8 <xTaskIncrementTick+0x15c>)
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d602:	e02f      	b.n	800d664 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d604:	68bb      	ldr	r3, [r7, #8]
 800d606:	3304      	adds	r3, #4
 800d608:	4618      	mov	r0, r3
 800d60a:	f7fe fb03 	bl	800bc14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d60e:	68bb      	ldr	r3, [r7, #8]
 800d610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d612:	2b00      	cmp	r3, #0
 800d614:	d004      	beq.n	800d620 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d616:	68bb      	ldr	r3, [r7, #8]
 800d618:	3318      	adds	r3, #24
 800d61a:	4618      	mov	r0, r3
 800d61c:	f7fe fafa 	bl	800bc14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d620:	68bb      	ldr	r3, [r7, #8]
 800d622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d624:	4b25      	ldr	r3, [pc, #148]	; (800d6bc <xTaskIncrementTick+0x160>)
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	429a      	cmp	r2, r3
 800d62a:	d903      	bls.n	800d634 <xTaskIncrementTick+0xd8>
 800d62c:	68bb      	ldr	r3, [r7, #8]
 800d62e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d630:	4a22      	ldr	r2, [pc, #136]	; (800d6bc <xTaskIncrementTick+0x160>)
 800d632:	6013      	str	r3, [r2, #0]
 800d634:	68bb      	ldr	r3, [r7, #8]
 800d636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d638:	4613      	mov	r3, r2
 800d63a:	009b      	lsls	r3, r3, #2
 800d63c:	4413      	add	r3, r2
 800d63e:	009b      	lsls	r3, r3, #2
 800d640:	4a1f      	ldr	r2, [pc, #124]	; (800d6c0 <xTaskIncrementTick+0x164>)
 800d642:	441a      	add	r2, r3
 800d644:	68bb      	ldr	r3, [r7, #8]
 800d646:	3304      	adds	r3, #4
 800d648:	4619      	mov	r1, r3
 800d64a:	4610      	mov	r0, r2
 800d64c:	f7fe fa85 	bl	800bb5a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d650:	68bb      	ldr	r3, [r7, #8]
 800d652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d654:	4b1b      	ldr	r3, [pc, #108]	; (800d6c4 <xTaskIncrementTick+0x168>)
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d65a:	429a      	cmp	r2, r3
 800d65c:	d3b8      	bcc.n	800d5d0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d65e:	2301      	movs	r3, #1
 800d660:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d662:	e7b5      	b.n	800d5d0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d664:	4b17      	ldr	r3, [pc, #92]	; (800d6c4 <xTaskIncrementTick+0x168>)
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d66a:	4915      	ldr	r1, [pc, #84]	; (800d6c0 <xTaskIncrementTick+0x164>)
 800d66c:	4613      	mov	r3, r2
 800d66e:	009b      	lsls	r3, r3, #2
 800d670:	4413      	add	r3, r2
 800d672:	009b      	lsls	r3, r3, #2
 800d674:	440b      	add	r3, r1
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	2b01      	cmp	r3, #1
 800d67a:	d901      	bls.n	800d680 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d67c:	2301      	movs	r3, #1
 800d67e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d680:	4b11      	ldr	r3, [pc, #68]	; (800d6c8 <xTaskIncrementTick+0x16c>)
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d007      	beq.n	800d698 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d688:	2301      	movs	r3, #1
 800d68a:	617b      	str	r3, [r7, #20]
 800d68c:	e004      	b.n	800d698 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d68e:	4b0f      	ldr	r3, [pc, #60]	; (800d6cc <xTaskIncrementTick+0x170>)
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	3301      	adds	r3, #1
 800d694:	4a0d      	ldr	r2, [pc, #52]	; (800d6cc <xTaskIncrementTick+0x170>)
 800d696:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d698:	697b      	ldr	r3, [r7, #20]
}
 800d69a:	4618      	mov	r0, r3
 800d69c:	3718      	adds	r7, #24
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	bd80      	pop	{r7, pc}
 800d6a2:	bf00      	nop
 800d6a4:	20001a18 	.word	0x20001a18
 800d6a8:	200019f4 	.word	0x200019f4
 800d6ac:	200019a8 	.word	0x200019a8
 800d6b0:	200019ac 	.word	0x200019ac
 800d6b4:	20001a08 	.word	0x20001a08
 800d6b8:	20001a10 	.word	0x20001a10
 800d6bc:	200019f8 	.word	0x200019f8
 800d6c0:	20001520 	.word	0x20001520
 800d6c4:	2000151c 	.word	0x2000151c
 800d6c8:	20001a04 	.word	0x20001a04
 800d6cc:	20001a00 	.word	0x20001a00

0800d6d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d6d0:	b480      	push	{r7}
 800d6d2:	b085      	sub	sp, #20
 800d6d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d6d6:	4b2a      	ldr	r3, [pc, #168]	; (800d780 <vTaskSwitchContext+0xb0>)
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d003      	beq.n	800d6e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d6de:	4b29      	ldr	r3, [pc, #164]	; (800d784 <vTaskSwitchContext+0xb4>)
 800d6e0:	2201      	movs	r2, #1
 800d6e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d6e4:	e046      	b.n	800d774 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800d6e6:	4b27      	ldr	r3, [pc, #156]	; (800d784 <vTaskSwitchContext+0xb4>)
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6ec:	4b26      	ldr	r3, [pc, #152]	; (800d788 <vTaskSwitchContext+0xb8>)
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	60fb      	str	r3, [r7, #12]
 800d6f2:	e010      	b.n	800d716 <vTaskSwitchContext+0x46>
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d10a      	bne.n	800d710 <vTaskSwitchContext+0x40>
	__asm volatile
 800d6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6fe:	f383 8811 	msr	BASEPRI, r3
 800d702:	f3bf 8f6f 	isb	sy
 800d706:	f3bf 8f4f 	dsb	sy
 800d70a:	607b      	str	r3, [r7, #4]
}
 800d70c:	bf00      	nop
 800d70e:	e7fe      	b.n	800d70e <vTaskSwitchContext+0x3e>
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	3b01      	subs	r3, #1
 800d714:	60fb      	str	r3, [r7, #12]
 800d716:	491d      	ldr	r1, [pc, #116]	; (800d78c <vTaskSwitchContext+0xbc>)
 800d718:	68fa      	ldr	r2, [r7, #12]
 800d71a:	4613      	mov	r3, r2
 800d71c:	009b      	lsls	r3, r3, #2
 800d71e:	4413      	add	r3, r2
 800d720:	009b      	lsls	r3, r3, #2
 800d722:	440b      	add	r3, r1
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d0e4      	beq.n	800d6f4 <vTaskSwitchContext+0x24>
 800d72a:	68fa      	ldr	r2, [r7, #12]
 800d72c:	4613      	mov	r3, r2
 800d72e:	009b      	lsls	r3, r3, #2
 800d730:	4413      	add	r3, r2
 800d732:	009b      	lsls	r3, r3, #2
 800d734:	4a15      	ldr	r2, [pc, #84]	; (800d78c <vTaskSwitchContext+0xbc>)
 800d736:	4413      	add	r3, r2
 800d738:	60bb      	str	r3, [r7, #8]
 800d73a:	68bb      	ldr	r3, [r7, #8]
 800d73c:	685b      	ldr	r3, [r3, #4]
 800d73e:	685a      	ldr	r2, [r3, #4]
 800d740:	68bb      	ldr	r3, [r7, #8]
 800d742:	605a      	str	r2, [r3, #4]
 800d744:	68bb      	ldr	r3, [r7, #8]
 800d746:	685a      	ldr	r2, [r3, #4]
 800d748:	68bb      	ldr	r3, [r7, #8]
 800d74a:	3308      	adds	r3, #8
 800d74c:	429a      	cmp	r2, r3
 800d74e:	d104      	bne.n	800d75a <vTaskSwitchContext+0x8a>
 800d750:	68bb      	ldr	r3, [r7, #8]
 800d752:	685b      	ldr	r3, [r3, #4]
 800d754:	685a      	ldr	r2, [r3, #4]
 800d756:	68bb      	ldr	r3, [r7, #8]
 800d758:	605a      	str	r2, [r3, #4]
 800d75a:	68bb      	ldr	r3, [r7, #8]
 800d75c:	685b      	ldr	r3, [r3, #4]
 800d75e:	68db      	ldr	r3, [r3, #12]
 800d760:	4a0b      	ldr	r2, [pc, #44]	; (800d790 <vTaskSwitchContext+0xc0>)
 800d762:	6013      	str	r3, [r2, #0]
 800d764:	4a08      	ldr	r2, [pc, #32]	; (800d788 <vTaskSwitchContext+0xb8>)
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d76a:	4b09      	ldr	r3, [pc, #36]	; (800d790 <vTaskSwitchContext+0xc0>)
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	3354      	adds	r3, #84	; 0x54
 800d770:	4a08      	ldr	r2, [pc, #32]	; (800d794 <vTaskSwitchContext+0xc4>)
 800d772:	6013      	str	r3, [r2, #0]
}
 800d774:	bf00      	nop
 800d776:	3714      	adds	r7, #20
 800d778:	46bd      	mov	sp, r7
 800d77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77e:	4770      	bx	lr
 800d780:	20001a18 	.word	0x20001a18
 800d784:	20001a04 	.word	0x20001a04
 800d788:	200019f8 	.word	0x200019f8
 800d78c:	20001520 	.word	0x20001520
 800d790:	2000151c 	.word	0x2000151c
 800d794:	20000014 	.word	0x20000014

0800d798 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b084      	sub	sp, #16
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
 800d7a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d10a      	bne.n	800d7be <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d7a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7ac:	f383 8811 	msr	BASEPRI, r3
 800d7b0:	f3bf 8f6f 	isb	sy
 800d7b4:	f3bf 8f4f 	dsb	sy
 800d7b8:	60fb      	str	r3, [r7, #12]
}
 800d7ba:	bf00      	nop
 800d7bc:	e7fe      	b.n	800d7bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d7be:	4b07      	ldr	r3, [pc, #28]	; (800d7dc <vTaskPlaceOnEventList+0x44>)
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	3318      	adds	r3, #24
 800d7c4:	4619      	mov	r1, r3
 800d7c6:	6878      	ldr	r0, [r7, #4]
 800d7c8:	f7fe f9eb 	bl	800bba2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d7cc:	2101      	movs	r1, #1
 800d7ce:	6838      	ldr	r0, [r7, #0]
 800d7d0:	f000 fb7e 	bl	800ded0 <prvAddCurrentTaskToDelayedList>
}
 800d7d4:	bf00      	nop
 800d7d6:	3710      	adds	r7, #16
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}
 800d7dc:	2000151c 	.word	0x2000151c

0800d7e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b086      	sub	sp, #24
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	60f8      	str	r0, [r7, #12]
 800d7e8:	60b9      	str	r1, [r7, #8]
 800d7ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d10a      	bne.n	800d808 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d7f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7f6:	f383 8811 	msr	BASEPRI, r3
 800d7fa:	f3bf 8f6f 	isb	sy
 800d7fe:	f3bf 8f4f 	dsb	sy
 800d802:	617b      	str	r3, [r7, #20]
}
 800d804:	bf00      	nop
 800d806:	e7fe      	b.n	800d806 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d808:	4b0a      	ldr	r3, [pc, #40]	; (800d834 <vTaskPlaceOnEventListRestricted+0x54>)
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	3318      	adds	r3, #24
 800d80e:	4619      	mov	r1, r3
 800d810:	68f8      	ldr	r0, [r7, #12]
 800d812:	f7fe f9a2 	bl	800bb5a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d002      	beq.n	800d822 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d81c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d820:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d822:	6879      	ldr	r1, [r7, #4]
 800d824:	68b8      	ldr	r0, [r7, #8]
 800d826:	f000 fb53 	bl	800ded0 <prvAddCurrentTaskToDelayedList>
	}
 800d82a:	bf00      	nop
 800d82c:	3718      	adds	r7, #24
 800d82e:	46bd      	mov	sp, r7
 800d830:	bd80      	pop	{r7, pc}
 800d832:	bf00      	nop
 800d834:	2000151c 	.word	0x2000151c

0800d838 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b086      	sub	sp, #24
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	68db      	ldr	r3, [r3, #12]
 800d844:	68db      	ldr	r3, [r3, #12]
 800d846:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d848:	693b      	ldr	r3, [r7, #16]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d10a      	bne.n	800d864 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d852:	f383 8811 	msr	BASEPRI, r3
 800d856:	f3bf 8f6f 	isb	sy
 800d85a:	f3bf 8f4f 	dsb	sy
 800d85e:	60fb      	str	r3, [r7, #12]
}
 800d860:	bf00      	nop
 800d862:	e7fe      	b.n	800d862 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d864:	693b      	ldr	r3, [r7, #16]
 800d866:	3318      	adds	r3, #24
 800d868:	4618      	mov	r0, r3
 800d86a:	f7fe f9d3 	bl	800bc14 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d86e:	4b1e      	ldr	r3, [pc, #120]	; (800d8e8 <xTaskRemoveFromEventList+0xb0>)
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d11d      	bne.n	800d8b2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d876:	693b      	ldr	r3, [r7, #16]
 800d878:	3304      	adds	r3, #4
 800d87a:	4618      	mov	r0, r3
 800d87c:	f7fe f9ca 	bl	800bc14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d880:	693b      	ldr	r3, [r7, #16]
 800d882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d884:	4b19      	ldr	r3, [pc, #100]	; (800d8ec <xTaskRemoveFromEventList+0xb4>)
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	429a      	cmp	r2, r3
 800d88a:	d903      	bls.n	800d894 <xTaskRemoveFromEventList+0x5c>
 800d88c:	693b      	ldr	r3, [r7, #16]
 800d88e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d890:	4a16      	ldr	r2, [pc, #88]	; (800d8ec <xTaskRemoveFromEventList+0xb4>)
 800d892:	6013      	str	r3, [r2, #0]
 800d894:	693b      	ldr	r3, [r7, #16]
 800d896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d898:	4613      	mov	r3, r2
 800d89a:	009b      	lsls	r3, r3, #2
 800d89c:	4413      	add	r3, r2
 800d89e:	009b      	lsls	r3, r3, #2
 800d8a0:	4a13      	ldr	r2, [pc, #76]	; (800d8f0 <xTaskRemoveFromEventList+0xb8>)
 800d8a2:	441a      	add	r2, r3
 800d8a4:	693b      	ldr	r3, [r7, #16]
 800d8a6:	3304      	adds	r3, #4
 800d8a8:	4619      	mov	r1, r3
 800d8aa:	4610      	mov	r0, r2
 800d8ac:	f7fe f955 	bl	800bb5a <vListInsertEnd>
 800d8b0:	e005      	b.n	800d8be <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d8b2:	693b      	ldr	r3, [r7, #16]
 800d8b4:	3318      	adds	r3, #24
 800d8b6:	4619      	mov	r1, r3
 800d8b8:	480e      	ldr	r0, [pc, #56]	; (800d8f4 <xTaskRemoveFromEventList+0xbc>)
 800d8ba:	f7fe f94e 	bl	800bb5a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d8be:	693b      	ldr	r3, [r7, #16]
 800d8c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8c2:	4b0d      	ldr	r3, [pc, #52]	; (800d8f8 <xTaskRemoveFromEventList+0xc0>)
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8c8:	429a      	cmp	r2, r3
 800d8ca:	d905      	bls.n	800d8d8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d8cc:	2301      	movs	r3, #1
 800d8ce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d8d0:	4b0a      	ldr	r3, [pc, #40]	; (800d8fc <xTaskRemoveFromEventList+0xc4>)
 800d8d2:	2201      	movs	r2, #1
 800d8d4:	601a      	str	r2, [r3, #0]
 800d8d6:	e001      	b.n	800d8dc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d8d8:	2300      	movs	r3, #0
 800d8da:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d8dc:	697b      	ldr	r3, [r7, #20]
}
 800d8de:	4618      	mov	r0, r3
 800d8e0:	3718      	adds	r7, #24
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	bd80      	pop	{r7, pc}
 800d8e6:	bf00      	nop
 800d8e8:	20001a18 	.word	0x20001a18
 800d8ec:	200019f8 	.word	0x200019f8
 800d8f0:	20001520 	.word	0x20001520
 800d8f4:	200019b0 	.word	0x200019b0
 800d8f8:	2000151c 	.word	0x2000151c
 800d8fc:	20001a04 	.word	0x20001a04

0800d900 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d900:	b480      	push	{r7}
 800d902:	b083      	sub	sp, #12
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d908:	4b06      	ldr	r3, [pc, #24]	; (800d924 <vTaskInternalSetTimeOutState+0x24>)
 800d90a:	681a      	ldr	r2, [r3, #0]
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d910:	4b05      	ldr	r3, [pc, #20]	; (800d928 <vTaskInternalSetTimeOutState+0x28>)
 800d912:	681a      	ldr	r2, [r3, #0]
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	605a      	str	r2, [r3, #4]
}
 800d918:	bf00      	nop
 800d91a:	370c      	adds	r7, #12
 800d91c:	46bd      	mov	sp, r7
 800d91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d922:	4770      	bx	lr
 800d924:	20001a08 	.word	0x20001a08
 800d928:	200019f4 	.word	0x200019f4

0800d92c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b088      	sub	sp, #32
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
 800d934:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d10a      	bne.n	800d952 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d940:	f383 8811 	msr	BASEPRI, r3
 800d944:	f3bf 8f6f 	isb	sy
 800d948:	f3bf 8f4f 	dsb	sy
 800d94c:	613b      	str	r3, [r7, #16]
}
 800d94e:	bf00      	nop
 800d950:	e7fe      	b.n	800d950 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d10a      	bne.n	800d96e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d95c:	f383 8811 	msr	BASEPRI, r3
 800d960:	f3bf 8f6f 	isb	sy
 800d964:	f3bf 8f4f 	dsb	sy
 800d968:	60fb      	str	r3, [r7, #12]
}
 800d96a:	bf00      	nop
 800d96c:	e7fe      	b.n	800d96c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d96e:	f000 ff81 	bl	800e874 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d972:	4b1d      	ldr	r3, [pc, #116]	; (800d9e8 <xTaskCheckForTimeOut+0xbc>)
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	685b      	ldr	r3, [r3, #4]
 800d97c:	69ba      	ldr	r2, [r7, #24]
 800d97e:	1ad3      	subs	r3, r2, r3
 800d980:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d982:	683b      	ldr	r3, [r7, #0]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d98a:	d102      	bne.n	800d992 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d98c:	2300      	movs	r3, #0
 800d98e:	61fb      	str	r3, [r7, #28]
 800d990:	e023      	b.n	800d9da <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	681a      	ldr	r2, [r3, #0]
 800d996:	4b15      	ldr	r3, [pc, #84]	; (800d9ec <xTaskCheckForTimeOut+0xc0>)
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	429a      	cmp	r2, r3
 800d99c:	d007      	beq.n	800d9ae <xTaskCheckForTimeOut+0x82>
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	685b      	ldr	r3, [r3, #4]
 800d9a2:	69ba      	ldr	r2, [r7, #24]
 800d9a4:	429a      	cmp	r2, r3
 800d9a6:	d302      	bcc.n	800d9ae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d9a8:	2301      	movs	r3, #1
 800d9aa:	61fb      	str	r3, [r7, #28]
 800d9ac:	e015      	b.n	800d9da <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d9ae:	683b      	ldr	r3, [r7, #0]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	697a      	ldr	r2, [r7, #20]
 800d9b4:	429a      	cmp	r2, r3
 800d9b6:	d20b      	bcs.n	800d9d0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d9b8:	683b      	ldr	r3, [r7, #0]
 800d9ba:	681a      	ldr	r2, [r3, #0]
 800d9bc:	697b      	ldr	r3, [r7, #20]
 800d9be:	1ad2      	subs	r2, r2, r3
 800d9c0:	683b      	ldr	r3, [r7, #0]
 800d9c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d9c4:	6878      	ldr	r0, [r7, #4]
 800d9c6:	f7ff ff9b 	bl	800d900 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	61fb      	str	r3, [r7, #28]
 800d9ce:	e004      	b.n	800d9da <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d9d6:	2301      	movs	r3, #1
 800d9d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d9da:	f000 ff7b 	bl	800e8d4 <vPortExitCritical>

	return xReturn;
 800d9de:	69fb      	ldr	r3, [r7, #28]
}
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	3720      	adds	r7, #32
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	bd80      	pop	{r7, pc}
 800d9e8:	200019f4 	.word	0x200019f4
 800d9ec:	20001a08 	.word	0x20001a08

0800d9f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d9f0:	b480      	push	{r7}
 800d9f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d9f4:	4b03      	ldr	r3, [pc, #12]	; (800da04 <vTaskMissedYield+0x14>)
 800d9f6:	2201      	movs	r2, #1
 800d9f8:	601a      	str	r2, [r3, #0]
}
 800d9fa:	bf00      	nop
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da02:	4770      	bx	lr
 800da04:	20001a04 	.word	0x20001a04

0800da08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b082      	sub	sp, #8
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800da10:	f000 f852 	bl	800dab8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800da14:	4b06      	ldr	r3, [pc, #24]	; (800da30 <prvIdleTask+0x28>)
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	2b01      	cmp	r3, #1
 800da1a:	d9f9      	bls.n	800da10 <prvIdleTask+0x8>
			{
				taskYIELD();
 800da1c:	4b05      	ldr	r3, [pc, #20]	; (800da34 <prvIdleTask+0x2c>)
 800da1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da22:	601a      	str	r2, [r3, #0]
 800da24:	f3bf 8f4f 	dsb	sy
 800da28:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800da2c:	e7f0      	b.n	800da10 <prvIdleTask+0x8>
 800da2e:	bf00      	nop
 800da30:	20001520 	.word	0x20001520
 800da34:	e000ed04 	.word	0xe000ed04

0800da38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800da38:	b580      	push	{r7, lr}
 800da3a:	b082      	sub	sp, #8
 800da3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800da3e:	2300      	movs	r3, #0
 800da40:	607b      	str	r3, [r7, #4]
 800da42:	e00c      	b.n	800da5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800da44:	687a      	ldr	r2, [r7, #4]
 800da46:	4613      	mov	r3, r2
 800da48:	009b      	lsls	r3, r3, #2
 800da4a:	4413      	add	r3, r2
 800da4c:	009b      	lsls	r3, r3, #2
 800da4e:	4a12      	ldr	r2, [pc, #72]	; (800da98 <prvInitialiseTaskLists+0x60>)
 800da50:	4413      	add	r3, r2
 800da52:	4618      	mov	r0, r3
 800da54:	f7fe f854 	bl	800bb00 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	3301      	adds	r3, #1
 800da5c:	607b      	str	r3, [r7, #4]
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	2b37      	cmp	r3, #55	; 0x37
 800da62:	d9ef      	bls.n	800da44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800da64:	480d      	ldr	r0, [pc, #52]	; (800da9c <prvInitialiseTaskLists+0x64>)
 800da66:	f7fe f84b 	bl	800bb00 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800da6a:	480d      	ldr	r0, [pc, #52]	; (800daa0 <prvInitialiseTaskLists+0x68>)
 800da6c:	f7fe f848 	bl	800bb00 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800da70:	480c      	ldr	r0, [pc, #48]	; (800daa4 <prvInitialiseTaskLists+0x6c>)
 800da72:	f7fe f845 	bl	800bb00 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800da76:	480c      	ldr	r0, [pc, #48]	; (800daa8 <prvInitialiseTaskLists+0x70>)
 800da78:	f7fe f842 	bl	800bb00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800da7c:	480b      	ldr	r0, [pc, #44]	; (800daac <prvInitialiseTaskLists+0x74>)
 800da7e:	f7fe f83f 	bl	800bb00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800da82:	4b0b      	ldr	r3, [pc, #44]	; (800dab0 <prvInitialiseTaskLists+0x78>)
 800da84:	4a05      	ldr	r2, [pc, #20]	; (800da9c <prvInitialiseTaskLists+0x64>)
 800da86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800da88:	4b0a      	ldr	r3, [pc, #40]	; (800dab4 <prvInitialiseTaskLists+0x7c>)
 800da8a:	4a05      	ldr	r2, [pc, #20]	; (800daa0 <prvInitialiseTaskLists+0x68>)
 800da8c:	601a      	str	r2, [r3, #0]
}
 800da8e:	bf00      	nop
 800da90:	3708      	adds	r7, #8
 800da92:	46bd      	mov	sp, r7
 800da94:	bd80      	pop	{r7, pc}
 800da96:	bf00      	nop
 800da98:	20001520 	.word	0x20001520
 800da9c:	20001980 	.word	0x20001980
 800daa0:	20001994 	.word	0x20001994
 800daa4:	200019b0 	.word	0x200019b0
 800daa8:	200019c4 	.word	0x200019c4
 800daac:	200019dc 	.word	0x200019dc
 800dab0:	200019a8 	.word	0x200019a8
 800dab4:	200019ac 	.word	0x200019ac

0800dab8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b082      	sub	sp, #8
 800dabc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dabe:	e019      	b.n	800daf4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800dac0:	f000 fed8 	bl	800e874 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dac4:	4b10      	ldr	r3, [pc, #64]	; (800db08 <prvCheckTasksWaitingTermination+0x50>)
 800dac6:	68db      	ldr	r3, [r3, #12]
 800dac8:	68db      	ldr	r3, [r3, #12]
 800daca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	3304      	adds	r3, #4
 800dad0:	4618      	mov	r0, r3
 800dad2:	f7fe f89f 	bl	800bc14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800dad6:	4b0d      	ldr	r3, [pc, #52]	; (800db0c <prvCheckTasksWaitingTermination+0x54>)
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	3b01      	subs	r3, #1
 800dadc:	4a0b      	ldr	r2, [pc, #44]	; (800db0c <prvCheckTasksWaitingTermination+0x54>)
 800dade:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800dae0:	4b0b      	ldr	r3, [pc, #44]	; (800db10 <prvCheckTasksWaitingTermination+0x58>)
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	3b01      	subs	r3, #1
 800dae6:	4a0a      	ldr	r2, [pc, #40]	; (800db10 <prvCheckTasksWaitingTermination+0x58>)
 800dae8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800daea:	f000 fef3 	bl	800e8d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800daee:	6878      	ldr	r0, [r7, #4]
 800daf0:	f000 f810 	bl	800db14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800daf4:	4b06      	ldr	r3, [pc, #24]	; (800db10 <prvCheckTasksWaitingTermination+0x58>)
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d1e1      	bne.n	800dac0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800dafc:	bf00      	nop
 800dafe:	bf00      	nop
 800db00:	3708      	adds	r7, #8
 800db02:	46bd      	mov	sp, r7
 800db04:	bd80      	pop	{r7, pc}
 800db06:	bf00      	nop
 800db08:	200019c4 	.word	0x200019c4
 800db0c:	200019f0 	.word	0x200019f0
 800db10:	200019d8 	.word	0x200019d8

0800db14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800db14:	b580      	push	{r7, lr}
 800db16:	b084      	sub	sp, #16
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	3354      	adds	r3, #84	; 0x54
 800db20:	4618      	mov	r0, r3
 800db22:	f001 faf3 	bl	800f10c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d108      	bne.n	800db42 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db34:	4618      	mov	r0, r3
 800db36:	f001 f88b 	bl	800ec50 <vPortFree>
				vPortFree( pxTCB );
 800db3a:	6878      	ldr	r0, [r7, #4]
 800db3c:	f001 f888 	bl	800ec50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800db40:	e018      	b.n	800db74 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800db48:	2b01      	cmp	r3, #1
 800db4a:	d103      	bne.n	800db54 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800db4c:	6878      	ldr	r0, [r7, #4]
 800db4e:	f001 f87f 	bl	800ec50 <vPortFree>
	}
 800db52:	e00f      	b.n	800db74 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800db5a:	2b02      	cmp	r3, #2
 800db5c:	d00a      	beq.n	800db74 <prvDeleteTCB+0x60>
	__asm volatile
 800db5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db62:	f383 8811 	msr	BASEPRI, r3
 800db66:	f3bf 8f6f 	isb	sy
 800db6a:	f3bf 8f4f 	dsb	sy
 800db6e:	60fb      	str	r3, [r7, #12]
}
 800db70:	bf00      	nop
 800db72:	e7fe      	b.n	800db72 <prvDeleteTCB+0x5e>
	}
 800db74:	bf00      	nop
 800db76:	3710      	adds	r7, #16
 800db78:	46bd      	mov	sp, r7
 800db7a:	bd80      	pop	{r7, pc}

0800db7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800db7c:	b480      	push	{r7}
 800db7e:	b083      	sub	sp, #12
 800db80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800db82:	4b0c      	ldr	r3, [pc, #48]	; (800dbb4 <prvResetNextTaskUnblockTime+0x38>)
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d104      	bne.n	800db96 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800db8c:	4b0a      	ldr	r3, [pc, #40]	; (800dbb8 <prvResetNextTaskUnblockTime+0x3c>)
 800db8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800db92:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800db94:	e008      	b.n	800dba8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db96:	4b07      	ldr	r3, [pc, #28]	; (800dbb4 <prvResetNextTaskUnblockTime+0x38>)
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	68db      	ldr	r3, [r3, #12]
 800db9c:	68db      	ldr	r3, [r3, #12]
 800db9e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	685b      	ldr	r3, [r3, #4]
 800dba4:	4a04      	ldr	r2, [pc, #16]	; (800dbb8 <prvResetNextTaskUnblockTime+0x3c>)
 800dba6:	6013      	str	r3, [r2, #0]
}
 800dba8:	bf00      	nop
 800dbaa:	370c      	adds	r7, #12
 800dbac:	46bd      	mov	sp, r7
 800dbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb2:	4770      	bx	lr
 800dbb4:	200019a8 	.word	0x200019a8
 800dbb8:	20001a10 	.word	0x20001a10

0800dbbc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800dbbc:	b480      	push	{r7}
 800dbbe:	b083      	sub	sp, #12
 800dbc0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800dbc2:	4b0b      	ldr	r3, [pc, #44]	; (800dbf0 <xTaskGetSchedulerState+0x34>)
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d102      	bne.n	800dbd0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800dbca:	2301      	movs	r3, #1
 800dbcc:	607b      	str	r3, [r7, #4]
 800dbce:	e008      	b.n	800dbe2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dbd0:	4b08      	ldr	r3, [pc, #32]	; (800dbf4 <xTaskGetSchedulerState+0x38>)
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d102      	bne.n	800dbde <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800dbd8:	2302      	movs	r3, #2
 800dbda:	607b      	str	r3, [r7, #4]
 800dbdc:	e001      	b.n	800dbe2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800dbde:	2300      	movs	r3, #0
 800dbe0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800dbe2:	687b      	ldr	r3, [r7, #4]
	}
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	370c      	adds	r7, #12
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbee:	4770      	bx	lr
 800dbf0:	200019fc 	.word	0x200019fc
 800dbf4:	20001a18 	.word	0x20001a18

0800dbf8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b084      	sub	sp, #16
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800dc04:	2300      	movs	r3, #0
 800dc06:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d051      	beq.n	800dcb2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800dc0e:	68bb      	ldr	r3, [r7, #8]
 800dc10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc12:	4b2a      	ldr	r3, [pc, #168]	; (800dcbc <xTaskPriorityInherit+0xc4>)
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc18:	429a      	cmp	r2, r3
 800dc1a:	d241      	bcs.n	800dca0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dc1c:	68bb      	ldr	r3, [r7, #8]
 800dc1e:	699b      	ldr	r3, [r3, #24]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	db06      	blt.n	800dc32 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc24:	4b25      	ldr	r3, [pc, #148]	; (800dcbc <xTaskPriorityInherit+0xc4>)
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc2a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dc2e:	68bb      	ldr	r3, [r7, #8]
 800dc30:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800dc32:	68bb      	ldr	r3, [r7, #8]
 800dc34:	6959      	ldr	r1, [r3, #20]
 800dc36:	68bb      	ldr	r3, [r7, #8]
 800dc38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc3a:	4613      	mov	r3, r2
 800dc3c:	009b      	lsls	r3, r3, #2
 800dc3e:	4413      	add	r3, r2
 800dc40:	009b      	lsls	r3, r3, #2
 800dc42:	4a1f      	ldr	r2, [pc, #124]	; (800dcc0 <xTaskPriorityInherit+0xc8>)
 800dc44:	4413      	add	r3, r2
 800dc46:	4299      	cmp	r1, r3
 800dc48:	d122      	bne.n	800dc90 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dc4a:	68bb      	ldr	r3, [r7, #8]
 800dc4c:	3304      	adds	r3, #4
 800dc4e:	4618      	mov	r0, r3
 800dc50:	f7fd ffe0 	bl	800bc14 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dc54:	4b19      	ldr	r3, [pc, #100]	; (800dcbc <xTaskPriorityInherit+0xc4>)
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc5a:	68bb      	ldr	r3, [r7, #8]
 800dc5c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800dc5e:	68bb      	ldr	r3, [r7, #8]
 800dc60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc62:	4b18      	ldr	r3, [pc, #96]	; (800dcc4 <xTaskPriorityInherit+0xcc>)
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	429a      	cmp	r2, r3
 800dc68:	d903      	bls.n	800dc72 <xTaskPriorityInherit+0x7a>
 800dc6a:	68bb      	ldr	r3, [r7, #8]
 800dc6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc6e:	4a15      	ldr	r2, [pc, #84]	; (800dcc4 <xTaskPriorityInherit+0xcc>)
 800dc70:	6013      	str	r3, [r2, #0]
 800dc72:	68bb      	ldr	r3, [r7, #8]
 800dc74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc76:	4613      	mov	r3, r2
 800dc78:	009b      	lsls	r3, r3, #2
 800dc7a:	4413      	add	r3, r2
 800dc7c:	009b      	lsls	r3, r3, #2
 800dc7e:	4a10      	ldr	r2, [pc, #64]	; (800dcc0 <xTaskPriorityInherit+0xc8>)
 800dc80:	441a      	add	r2, r3
 800dc82:	68bb      	ldr	r3, [r7, #8]
 800dc84:	3304      	adds	r3, #4
 800dc86:	4619      	mov	r1, r3
 800dc88:	4610      	mov	r0, r2
 800dc8a:	f7fd ff66 	bl	800bb5a <vListInsertEnd>
 800dc8e:	e004      	b.n	800dc9a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dc90:	4b0a      	ldr	r3, [pc, #40]	; (800dcbc <xTaskPriorityInherit+0xc4>)
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc96:	68bb      	ldr	r3, [r7, #8]
 800dc98:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800dc9a:	2301      	movs	r3, #1
 800dc9c:	60fb      	str	r3, [r7, #12]
 800dc9e:	e008      	b.n	800dcb2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800dca0:	68bb      	ldr	r3, [r7, #8]
 800dca2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dca4:	4b05      	ldr	r3, [pc, #20]	; (800dcbc <xTaskPriorityInherit+0xc4>)
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcaa:	429a      	cmp	r2, r3
 800dcac:	d201      	bcs.n	800dcb2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800dcae:	2301      	movs	r3, #1
 800dcb0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dcb2:	68fb      	ldr	r3, [r7, #12]
	}
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	3710      	adds	r7, #16
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	bd80      	pop	{r7, pc}
 800dcbc:	2000151c 	.word	0x2000151c
 800dcc0:	20001520 	.word	0x20001520
 800dcc4:	200019f8 	.word	0x200019f8

0800dcc8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b086      	sub	sp, #24
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d056      	beq.n	800dd8c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800dcde:	4b2e      	ldr	r3, [pc, #184]	; (800dd98 <xTaskPriorityDisinherit+0xd0>)
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	693a      	ldr	r2, [r7, #16]
 800dce4:	429a      	cmp	r2, r3
 800dce6:	d00a      	beq.n	800dcfe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800dce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcec:	f383 8811 	msr	BASEPRI, r3
 800dcf0:	f3bf 8f6f 	isb	sy
 800dcf4:	f3bf 8f4f 	dsb	sy
 800dcf8:	60fb      	str	r3, [r7, #12]
}
 800dcfa:	bf00      	nop
 800dcfc:	e7fe      	b.n	800dcfc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800dcfe:	693b      	ldr	r3, [r7, #16]
 800dd00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d10a      	bne.n	800dd1c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800dd06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd0a:	f383 8811 	msr	BASEPRI, r3
 800dd0e:	f3bf 8f6f 	isb	sy
 800dd12:	f3bf 8f4f 	dsb	sy
 800dd16:	60bb      	str	r3, [r7, #8]
}
 800dd18:	bf00      	nop
 800dd1a:	e7fe      	b.n	800dd1a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800dd1c:	693b      	ldr	r3, [r7, #16]
 800dd1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd20:	1e5a      	subs	r2, r3, #1
 800dd22:	693b      	ldr	r3, [r7, #16]
 800dd24:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dd26:	693b      	ldr	r3, [r7, #16]
 800dd28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd2a:	693b      	ldr	r3, [r7, #16]
 800dd2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd2e:	429a      	cmp	r2, r3
 800dd30:	d02c      	beq.n	800dd8c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dd32:	693b      	ldr	r3, [r7, #16]
 800dd34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d128      	bne.n	800dd8c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dd3a:	693b      	ldr	r3, [r7, #16]
 800dd3c:	3304      	adds	r3, #4
 800dd3e:	4618      	mov	r0, r3
 800dd40:	f7fd ff68 	bl	800bc14 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dd44:	693b      	ldr	r3, [r7, #16]
 800dd46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dd48:	693b      	ldr	r3, [r7, #16]
 800dd4a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd4c:	693b      	ldr	r3, [r7, #16]
 800dd4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd50:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dd54:	693b      	ldr	r3, [r7, #16]
 800dd56:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800dd58:	693b      	ldr	r3, [r7, #16]
 800dd5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd5c:	4b0f      	ldr	r3, [pc, #60]	; (800dd9c <xTaskPriorityDisinherit+0xd4>)
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	429a      	cmp	r2, r3
 800dd62:	d903      	bls.n	800dd6c <xTaskPriorityDisinherit+0xa4>
 800dd64:	693b      	ldr	r3, [r7, #16]
 800dd66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd68:	4a0c      	ldr	r2, [pc, #48]	; (800dd9c <xTaskPriorityDisinherit+0xd4>)
 800dd6a:	6013      	str	r3, [r2, #0]
 800dd6c:	693b      	ldr	r3, [r7, #16]
 800dd6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd70:	4613      	mov	r3, r2
 800dd72:	009b      	lsls	r3, r3, #2
 800dd74:	4413      	add	r3, r2
 800dd76:	009b      	lsls	r3, r3, #2
 800dd78:	4a09      	ldr	r2, [pc, #36]	; (800dda0 <xTaskPriorityDisinherit+0xd8>)
 800dd7a:	441a      	add	r2, r3
 800dd7c:	693b      	ldr	r3, [r7, #16]
 800dd7e:	3304      	adds	r3, #4
 800dd80:	4619      	mov	r1, r3
 800dd82:	4610      	mov	r0, r2
 800dd84:	f7fd fee9 	bl	800bb5a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800dd88:	2301      	movs	r3, #1
 800dd8a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dd8c:	697b      	ldr	r3, [r7, #20]
	}
 800dd8e:	4618      	mov	r0, r3
 800dd90:	3718      	adds	r7, #24
 800dd92:	46bd      	mov	sp, r7
 800dd94:	bd80      	pop	{r7, pc}
 800dd96:	bf00      	nop
 800dd98:	2000151c 	.word	0x2000151c
 800dd9c:	200019f8 	.word	0x200019f8
 800dda0:	20001520 	.word	0x20001520

0800dda4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b088      	sub	sp, #32
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
 800ddac:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ddb2:	2301      	movs	r3, #1
 800ddb4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d06a      	beq.n	800de92 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ddbc:	69bb      	ldr	r3, [r7, #24]
 800ddbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d10a      	bne.n	800ddda <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800ddc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddc8:	f383 8811 	msr	BASEPRI, r3
 800ddcc:	f3bf 8f6f 	isb	sy
 800ddd0:	f3bf 8f4f 	dsb	sy
 800ddd4:	60fb      	str	r3, [r7, #12]
}
 800ddd6:	bf00      	nop
 800ddd8:	e7fe      	b.n	800ddd8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ddda:	69bb      	ldr	r3, [r7, #24]
 800dddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ddde:	683a      	ldr	r2, [r7, #0]
 800dde0:	429a      	cmp	r2, r3
 800dde2:	d902      	bls.n	800ddea <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800dde4:	683b      	ldr	r3, [r7, #0]
 800dde6:	61fb      	str	r3, [r7, #28]
 800dde8:	e002      	b.n	800ddf0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ddea:	69bb      	ldr	r3, [r7, #24]
 800ddec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ddee:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ddf0:	69bb      	ldr	r3, [r7, #24]
 800ddf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddf4:	69fa      	ldr	r2, [r7, #28]
 800ddf6:	429a      	cmp	r2, r3
 800ddf8:	d04b      	beq.n	800de92 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ddfa:	69bb      	ldr	r3, [r7, #24]
 800ddfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ddfe:	697a      	ldr	r2, [r7, #20]
 800de00:	429a      	cmp	r2, r3
 800de02:	d146      	bne.n	800de92 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800de04:	4b25      	ldr	r3, [pc, #148]	; (800de9c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	69ba      	ldr	r2, [r7, #24]
 800de0a:	429a      	cmp	r2, r3
 800de0c:	d10a      	bne.n	800de24 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800de0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de12:	f383 8811 	msr	BASEPRI, r3
 800de16:	f3bf 8f6f 	isb	sy
 800de1a:	f3bf 8f4f 	dsb	sy
 800de1e:	60bb      	str	r3, [r7, #8]
}
 800de20:	bf00      	nop
 800de22:	e7fe      	b.n	800de22 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800de24:	69bb      	ldr	r3, [r7, #24]
 800de26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de28:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800de2a:	69bb      	ldr	r3, [r7, #24]
 800de2c:	69fa      	ldr	r2, [r7, #28]
 800de2e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800de30:	69bb      	ldr	r3, [r7, #24]
 800de32:	699b      	ldr	r3, [r3, #24]
 800de34:	2b00      	cmp	r3, #0
 800de36:	db04      	blt.n	800de42 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de38:	69fb      	ldr	r3, [r7, #28]
 800de3a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800de3e:	69bb      	ldr	r3, [r7, #24]
 800de40:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800de42:	69bb      	ldr	r3, [r7, #24]
 800de44:	6959      	ldr	r1, [r3, #20]
 800de46:	693a      	ldr	r2, [r7, #16]
 800de48:	4613      	mov	r3, r2
 800de4a:	009b      	lsls	r3, r3, #2
 800de4c:	4413      	add	r3, r2
 800de4e:	009b      	lsls	r3, r3, #2
 800de50:	4a13      	ldr	r2, [pc, #76]	; (800dea0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800de52:	4413      	add	r3, r2
 800de54:	4299      	cmp	r1, r3
 800de56:	d11c      	bne.n	800de92 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800de58:	69bb      	ldr	r3, [r7, #24]
 800de5a:	3304      	adds	r3, #4
 800de5c:	4618      	mov	r0, r3
 800de5e:	f7fd fed9 	bl	800bc14 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800de62:	69bb      	ldr	r3, [r7, #24]
 800de64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de66:	4b0f      	ldr	r3, [pc, #60]	; (800dea4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	429a      	cmp	r2, r3
 800de6c:	d903      	bls.n	800de76 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800de6e:	69bb      	ldr	r3, [r7, #24]
 800de70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de72:	4a0c      	ldr	r2, [pc, #48]	; (800dea4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800de74:	6013      	str	r3, [r2, #0]
 800de76:	69bb      	ldr	r3, [r7, #24]
 800de78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de7a:	4613      	mov	r3, r2
 800de7c:	009b      	lsls	r3, r3, #2
 800de7e:	4413      	add	r3, r2
 800de80:	009b      	lsls	r3, r3, #2
 800de82:	4a07      	ldr	r2, [pc, #28]	; (800dea0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800de84:	441a      	add	r2, r3
 800de86:	69bb      	ldr	r3, [r7, #24]
 800de88:	3304      	adds	r3, #4
 800de8a:	4619      	mov	r1, r3
 800de8c:	4610      	mov	r0, r2
 800de8e:	f7fd fe64 	bl	800bb5a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800de92:	bf00      	nop
 800de94:	3720      	adds	r7, #32
 800de96:	46bd      	mov	sp, r7
 800de98:	bd80      	pop	{r7, pc}
 800de9a:	bf00      	nop
 800de9c:	2000151c 	.word	0x2000151c
 800dea0:	20001520 	.word	0x20001520
 800dea4:	200019f8 	.word	0x200019f8

0800dea8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800dea8:	b480      	push	{r7}
 800deaa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800deac:	4b07      	ldr	r3, [pc, #28]	; (800decc <pvTaskIncrementMutexHeldCount+0x24>)
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d004      	beq.n	800debe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800deb4:	4b05      	ldr	r3, [pc, #20]	; (800decc <pvTaskIncrementMutexHeldCount+0x24>)
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800deba:	3201      	adds	r2, #1
 800debc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800debe:	4b03      	ldr	r3, [pc, #12]	; (800decc <pvTaskIncrementMutexHeldCount+0x24>)
 800dec0:	681b      	ldr	r3, [r3, #0]
	}
 800dec2:	4618      	mov	r0, r3
 800dec4:	46bd      	mov	sp, r7
 800dec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deca:	4770      	bx	lr
 800decc:	2000151c 	.word	0x2000151c

0800ded0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b084      	sub	sp, #16
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]
 800ded8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800deda:	4b21      	ldr	r3, [pc, #132]	; (800df60 <prvAddCurrentTaskToDelayedList+0x90>)
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dee0:	4b20      	ldr	r3, [pc, #128]	; (800df64 <prvAddCurrentTaskToDelayedList+0x94>)
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	3304      	adds	r3, #4
 800dee6:	4618      	mov	r0, r3
 800dee8:	f7fd fe94 	bl	800bc14 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800def2:	d10a      	bne.n	800df0a <prvAddCurrentTaskToDelayedList+0x3a>
 800def4:	683b      	ldr	r3, [r7, #0]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d007      	beq.n	800df0a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800defa:	4b1a      	ldr	r3, [pc, #104]	; (800df64 <prvAddCurrentTaskToDelayedList+0x94>)
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	3304      	adds	r3, #4
 800df00:	4619      	mov	r1, r3
 800df02:	4819      	ldr	r0, [pc, #100]	; (800df68 <prvAddCurrentTaskToDelayedList+0x98>)
 800df04:	f7fd fe29 	bl	800bb5a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800df08:	e026      	b.n	800df58 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800df0a:	68fa      	ldr	r2, [r7, #12]
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	4413      	add	r3, r2
 800df10:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800df12:	4b14      	ldr	r3, [pc, #80]	; (800df64 <prvAddCurrentTaskToDelayedList+0x94>)
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	68ba      	ldr	r2, [r7, #8]
 800df18:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800df1a:	68ba      	ldr	r2, [r7, #8]
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	429a      	cmp	r2, r3
 800df20:	d209      	bcs.n	800df36 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800df22:	4b12      	ldr	r3, [pc, #72]	; (800df6c <prvAddCurrentTaskToDelayedList+0x9c>)
 800df24:	681a      	ldr	r2, [r3, #0]
 800df26:	4b0f      	ldr	r3, [pc, #60]	; (800df64 <prvAddCurrentTaskToDelayedList+0x94>)
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	3304      	adds	r3, #4
 800df2c:	4619      	mov	r1, r3
 800df2e:	4610      	mov	r0, r2
 800df30:	f7fd fe37 	bl	800bba2 <vListInsert>
}
 800df34:	e010      	b.n	800df58 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800df36:	4b0e      	ldr	r3, [pc, #56]	; (800df70 <prvAddCurrentTaskToDelayedList+0xa0>)
 800df38:	681a      	ldr	r2, [r3, #0]
 800df3a:	4b0a      	ldr	r3, [pc, #40]	; (800df64 <prvAddCurrentTaskToDelayedList+0x94>)
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	3304      	adds	r3, #4
 800df40:	4619      	mov	r1, r3
 800df42:	4610      	mov	r0, r2
 800df44:	f7fd fe2d 	bl	800bba2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800df48:	4b0a      	ldr	r3, [pc, #40]	; (800df74 <prvAddCurrentTaskToDelayedList+0xa4>)
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	68ba      	ldr	r2, [r7, #8]
 800df4e:	429a      	cmp	r2, r3
 800df50:	d202      	bcs.n	800df58 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800df52:	4a08      	ldr	r2, [pc, #32]	; (800df74 <prvAddCurrentTaskToDelayedList+0xa4>)
 800df54:	68bb      	ldr	r3, [r7, #8]
 800df56:	6013      	str	r3, [r2, #0]
}
 800df58:	bf00      	nop
 800df5a:	3710      	adds	r7, #16
 800df5c:	46bd      	mov	sp, r7
 800df5e:	bd80      	pop	{r7, pc}
 800df60:	200019f4 	.word	0x200019f4
 800df64:	2000151c 	.word	0x2000151c
 800df68:	200019dc 	.word	0x200019dc
 800df6c:	200019ac 	.word	0x200019ac
 800df70:	200019a8 	.word	0x200019a8
 800df74:	20001a10 	.word	0x20001a10

0800df78 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	b08a      	sub	sp, #40	; 0x28
 800df7c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800df7e:	2300      	movs	r3, #0
 800df80:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800df82:	f000 fb07 	bl	800e594 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800df86:	4b1c      	ldr	r3, [pc, #112]	; (800dff8 <xTimerCreateTimerTask+0x80>)
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d021      	beq.n	800dfd2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800df8e:	2300      	movs	r3, #0
 800df90:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800df92:	2300      	movs	r3, #0
 800df94:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800df96:	1d3a      	adds	r2, r7, #4
 800df98:	f107 0108 	add.w	r1, r7, #8
 800df9c:	f107 030c 	add.w	r3, r7, #12
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	f7fd fd93 	bl	800bacc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800dfa6:	6879      	ldr	r1, [r7, #4]
 800dfa8:	68bb      	ldr	r3, [r7, #8]
 800dfaa:	68fa      	ldr	r2, [r7, #12]
 800dfac:	9202      	str	r2, [sp, #8]
 800dfae:	9301      	str	r3, [sp, #4]
 800dfb0:	2302      	movs	r3, #2
 800dfb2:	9300      	str	r3, [sp, #0]
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	460a      	mov	r2, r1
 800dfb8:	4910      	ldr	r1, [pc, #64]	; (800dffc <xTimerCreateTimerTask+0x84>)
 800dfba:	4811      	ldr	r0, [pc, #68]	; (800e000 <xTimerCreateTimerTask+0x88>)
 800dfbc:	f7fe fe9e 	bl	800ccfc <xTaskCreateStatic>
 800dfc0:	4603      	mov	r3, r0
 800dfc2:	4a10      	ldr	r2, [pc, #64]	; (800e004 <xTimerCreateTimerTask+0x8c>)
 800dfc4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800dfc6:	4b0f      	ldr	r3, [pc, #60]	; (800e004 <xTimerCreateTimerTask+0x8c>)
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d001      	beq.n	800dfd2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800dfce:	2301      	movs	r3, #1
 800dfd0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800dfd2:	697b      	ldr	r3, [r7, #20]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d10a      	bne.n	800dfee <xTimerCreateTimerTask+0x76>
	__asm volatile
 800dfd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfdc:	f383 8811 	msr	BASEPRI, r3
 800dfe0:	f3bf 8f6f 	isb	sy
 800dfe4:	f3bf 8f4f 	dsb	sy
 800dfe8:	613b      	str	r3, [r7, #16]
}
 800dfea:	bf00      	nop
 800dfec:	e7fe      	b.n	800dfec <xTimerCreateTimerTask+0x74>
	return xReturn;
 800dfee:	697b      	ldr	r3, [r7, #20]
}
 800dff0:	4618      	mov	r0, r3
 800dff2:	3718      	adds	r7, #24
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd80      	pop	{r7, pc}
 800dff8:	20001a4c 	.word	0x20001a4c
 800dffc:	0800f978 	.word	0x0800f978
 800e000:	0800e13d 	.word	0x0800e13d
 800e004:	20001a50 	.word	0x20001a50

0800e008 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b08a      	sub	sp, #40	; 0x28
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	60f8      	str	r0, [r7, #12]
 800e010:	60b9      	str	r1, [r7, #8]
 800e012:	607a      	str	r2, [r7, #4]
 800e014:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e016:	2300      	movs	r3, #0
 800e018:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d10a      	bne.n	800e036 <xTimerGenericCommand+0x2e>
	__asm volatile
 800e020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e024:	f383 8811 	msr	BASEPRI, r3
 800e028:	f3bf 8f6f 	isb	sy
 800e02c:	f3bf 8f4f 	dsb	sy
 800e030:	623b      	str	r3, [r7, #32]
}
 800e032:	bf00      	nop
 800e034:	e7fe      	b.n	800e034 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e036:	4b1a      	ldr	r3, [pc, #104]	; (800e0a0 <xTimerGenericCommand+0x98>)
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d02a      	beq.n	800e094 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e03e:	68bb      	ldr	r3, [r7, #8]
 800e040:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e04a:	68bb      	ldr	r3, [r7, #8]
 800e04c:	2b05      	cmp	r3, #5
 800e04e:	dc18      	bgt.n	800e082 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e050:	f7ff fdb4 	bl	800dbbc <xTaskGetSchedulerState>
 800e054:	4603      	mov	r3, r0
 800e056:	2b02      	cmp	r3, #2
 800e058:	d109      	bne.n	800e06e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e05a:	4b11      	ldr	r3, [pc, #68]	; (800e0a0 <xTimerGenericCommand+0x98>)
 800e05c:	6818      	ldr	r0, [r3, #0]
 800e05e:	f107 0110 	add.w	r1, r7, #16
 800e062:	2300      	movs	r3, #0
 800e064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e066:	f7fd ffa7 	bl	800bfb8 <xQueueGenericSend>
 800e06a:	6278      	str	r0, [r7, #36]	; 0x24
 800e06c:	e012      	b.n	800e094 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e06e:	4b0c      	ldr	r3, [pc, #48]	; (800e0a0 <xTimerGenericCommand+0x98>)
 800e070:	6818      	ldr	r0, [r3, #0]
 800e072:	f107 0110 	add.w	r1, r7, #16
 800e076:	2300      	movs	r3, #0
 800e078:	2200      	movs	r2, #0
 800e07a:	f7fd ff9d 	bl	800bfb8 <xQueueGenericSend>
 800e07e:	6278      	str	r0, [r7, #36]	; 0x24
 800e080:	e008      	b.n	800e094 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e082:	4b07      	ldr	r3, [pc, #28]	; (800e0a0 <xTimerGenericCommand+0x98>)
 800e084:	6818      	ldr	r0, [r3, #0]
 800e086:	f107 0110 	add.w	r1, r7, #16
 800e08a:	2300      	movs	r3, #0
 800e08c:	683a      	ldr	r2, [r7, #0]
 800e08e:	f7fe f891 	bl	800c1b4 <xQueueGenericSendFromISR>
 800e092:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e096:	4618      	mov	r0, r3
 800e098:	3728      	adds	r7, #40	; 0x28
 800e09a:	46bd      	mov	sp, r7
 800e09c:	bd80      	pop	{r7, pc}
 800e09e:	bf00      	nop
 800e0a0:	20001a4c 	.word	0x20001a4c

0800e0a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b088      	sub	sp, #32
 800e0a8:	af02      	add	r7, sp, #8
 800e0aa:	6078      	str	r0, [r7, #4]
 800e0ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0ae:	4b22      	ldr	r3, [pc, #136]	; (800e138 <prvProcessExpiredTimer+0x94>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	68db      	ldr	r3, [r3, #12]
 800e0b4:	68db      	ldr	r3, [r3, #12]
 800e0b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e0b8:	697b      	ldr	r3, [r7, #20]
 800e0ba:	3304      	adds	r3, #4
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f7fd fda9 	bl	800bc14 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e0c2:	697b      	ldr	r3, [r7, #20]
 800e0c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e0c8:	f003 0304 	and.w	r3, r3, #4
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d022      	beq.n	800e116 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e0d0:	697b      	ldr	r3, [r7, #20]
 800e0d2:	699a      	ldr	r2, [r3, #24]
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	18d1      	adds	r1, r2, r3
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	683a      	ldr	r2, [r7, #0]
 800e0dc:	6978      	ldr	r0, [r7, #20]
 800e0de:	f000 f8d1 	bl	800e284 <prvInsertTimerInActiveList>
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d01f      	beq.n	800e128 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	9300      	str	r3, [sp, #0]
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	687a      	ldr	r2, [r7, #4]
 800e0f0:	2100      	movs	r1, #0
 800e0f2:	6978      	ldr	r0, [r7, #20]
 800e0f4:	f7ff ff88 	bl	800e008 <xTimerGenericCommand>
 800e0f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e0fa:	693b      	ldr	r3, [r7, #16]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d113      	bne.n	800e128 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e104:	f383 8811 	msr	BASEPRI, r3
 800e108:	f3bf 8f6f 	isb	sy
 800e10c:	f3bf 8f4f 	dsb	sy
 800e110:	60fb      	str	r3, [r7, #12]
}
 800e112:	bf00      	nop
 800e114:	e7fe      	b.n	800e114 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e116:	697b      	ldr	r3, [r7, #20]
 800e118:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e11c:	f023 0301 	bic.w	r3, r3, #1
 800e120:	b2da      	uxtb	r2, r3
 800e122:	697b      	ldr	r3, [r7, #20]
 800e124:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e128:	697b      	ldr	r3, [r7, #20]
 800e12a:	6a1b      	ldr	r3, [r3, #32]
 800e12c:	6978      	ldr	r0, [r7, #20]
 800e12e:	4798      	blx	r3
}
 800e130:	bf00      	nop
 800e132:	3718      	adds	r7, #24
 800e134:	46bd      	mov	sp, r7
 800e136:	bd80      	pop	{r7, pc}
 800e138:	20001a44 	.word	0x20001a44

0800e13c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b084      	sub	sp, #16
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e144:	f107 0308 	add.w	r3, r7, #8
 800e148:	4618      	mov	r0, r3
 800e14a:	f000 f857 	bl	800e1fc <prvGetNextExpireTime>
 800e14e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e150:	68bb      	ldr	r3, [r7, #8]
 800e152:	4619      	mov	r1, r3
 800e154:	68f8      	ldr	r0, [r7, #12]
 800e156:	f000 f803 	bl	800e160 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e15a:	f000 f8d5 	bl	800e308 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e15e:	e7f1      	b.n	800e144 <prvTimerTask+0x8>

0800e160 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e160:	b580      	push	{r7, lr}
 800e162:	b084      	sub	sp, #16
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
 800e168:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e16a:	f7ff f929 	bl	800d3c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e16e:	f107 0308 	add.w	r3, r7, #8
 800e172:	4618      	mov	r0, r3
 800e174:	f000 f866 	bl	800e244 <prvSampleTimeNow>
 800e178:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e17a:	68bb      	ldr	r3, [r7, #8]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d130      	bne.n	800e1e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e180:	683b      	ldr	r3, [r7, #0]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d10a      	bne.n	800e19c <prvProcessTimerOrBlockTask+0x3c>
 800e186:	687a      	ldr	r2, [r7, #4]
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	429a      	cmp	r2, r3
 800e18c:	d806      	bhi.n	800e19c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e18e:	f7ff f925 	bl	800d3dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e192:	68f9      	ldr	r1, [r7, #12]
 800e194:	6878      	ldr	r0, [r7, #4]
 800e196:	f7ff ff85 	bl	800e0a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e19a:	e024      	b.n	800e1e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d008      	beq.n	800e1b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e1a2:	4b13      	ldr	r3, [pc, #76]	; (800e1f0 <prvProcessTimerOrBlockTask+0x90>)
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d101      	bne.n	800e1b0 <prvProcessTimerOrBlockTask+0x50>
 800e1ac:	2301      	movs	r3, #1
 800e1ae:	e000      	b.n	800e1b2 <prvProcessTimerOrBlockTask+0x52>
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e1b4:	4b0f      	ldr	r3, [pc, #60]	; (800e1f4 <prvProcessTimerOrBlockTask+0x94>)
 800e1b6:	6818      	ldr	r0, [r3, #0]
 800e1b8:	687a      	ldr	r2, [r7, #4]
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	1ad3      	subs	r3, r2, r3
 800e1be:	683a      	ldr	r2, [r7, #0]
 800e1c0:	4619      	mov	r1, r3
 800e1c2:	f7fe fd67 	bl	800cc94 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e1c6:	f7ff f909 	bl	800d3dc <xTaskResumeAll>
 800e1ca:	4603      	mov	r3, r0
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d10a      	bne.n	800e1e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e1d0:	4b09      	ldr	r3, [pc, #36]	; (800e1f8 <prvProcessTimerOrBlockTask+0x98>)
 800e1d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1d6:	601a      	str	r2, [r3, #0]
 800e1d8:	f3bf 8f4f 	dsb	sy
 800e1dc:	f3bf 8f6f 	isb	sy
}
 800e1e0:	e001      	b.n	800e1e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e1e2:	f7ff f8fb 	bl	800d3dc <xTaskResumeAll>
}
 800e1e6:	bf00      	nop
 800e1e8:	3710      	adds	r7, #16
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	bd80      	pop	{r7, pc}
 800e1ee:	bf00      	nop
 800e1f0:	20001a48 	.word	0x20001a48
 800e1f4:	20001a4c 	.word	0x20001a4c
 800e1f8:	e000ed04 	.word	0xe000ed04

0800e1fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e1fc:	b480      	push	{r7}
 800e1fe:	b085      	sub	sp, #20
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e204:	4b0e      	ldr	r3, [pc, #56]	; (800e240 <prvGetNextExpireTime+0x44>)
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d101      	bne.n	800e212 <prvGetNextExpireTime+0x16>
 800e20e:	2201      	movs	r2, #1
 800e210:	e000      	b.n	800e214 <prvGetNextExpireTime+0x18>
 800e212:	2200      	movs	r2, #0
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d105      	bne.n	800e22c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e220:	4b07      	ldr	r3, [pc, #28]	; (800e240 <prvGetNextExpireTime+0x44>)
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	68db      	ldr	r3, [r3, #12]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	60fb      	str	r3, [r7, #12]
 800e22a:	e001      	b.n	800e230 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e22c:	2300      	movs	r3, #0
 800e22e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e230:	68fb      	ldr	r3, [r7, #12]
}
 800e232:	4618      	mov	r0, r3
 800e234:	3714      	adds	r7, #20
 800e236:	46bd      	mov	sp, r7
 800e238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23c:	4770      	bx	lr
 800e23e:	bf00      	nop
 800e240:	20001a44 	.word	0x20001a44

0800e244 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b084      	sub	sp, #16
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e24c:	f7ff f964 	bl	800d518 <xTaskGetTickCount>
 800e250:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e252:	4b0b      	ldr	r3, [pc, #44]	; (800e280 <prvSampleTimeNow+0x3c>)
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	68fa      	ldr	r2, [r7, #12]
 800e258:	429a      	cmp	r2, r3
 800e25a:	d205      	bcs.n	800e268 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e25c:	f000 f936 	bl	800e4cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2201      	movs	r2, #1
 800e264:	601a      	str	r2, [r3, #0]
 800e266:	e002      	b.n	800e26e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	2200      	movs	r2, #0
 800e26c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e26e:	4a04      	ldr	r2, [pc, #16]	; (800e280 <prvSampleTimeNow+0x3c>)
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e274:	68fb      	ldr	r3, [r7, #12]
}
 800e276:	4618      	mov	r0, r3
 800e278:	3710      	adds	r7, #16
 800e27a:	46bd      	mov	sp, r7
 800e27c:	bd80      	pop	{r7, pc}
 800e27e:	bf00      	nop
 800e280:	20001a54 	.word	0x20001a54

0800e284 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e284:	b580      	push	{r7, lr}
 800e286:	b086      	sub	sp, #24
 800e288:	af00      	add	r7, sp, #0
 800e28a:	60f8      	str	r0, [r7, #12]
 800e28c:	60b9      	str	r1, [r7, #8]
 800e28e:	607a      	str	r2, [r7, #4]
 800e290:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e292:	2300      	movs	r3, #0
 800e294:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	68ba      	ldr	r2, [r7, #8]
 800e29a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	68fa      	ldr	r2, [r7, #12]
 800e2a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e2a2:	68ba      	ldr	r2, [r7, #8]
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	429a      	cmp	r2, r3
 800e2a8:	d812      	bhi.n	800e2d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e2aa:	687a      	ldr	r2, [r7, #4]
 800e2ac:	683b      	ldr	r3, [r7, #0]
 800e2ae:	1ad2      	subs	r2, r2, r3
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	699b      	ldr	r3, [r3, #24]
 800e2b4:	429a      	cmp	r2, r3
 800e2b6:	d302      	bcc.n	800e2be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e2b8:	2301      	movs	r3, #1
 800e2ba:	617b      	str	r3, [r7, #20]
 800e2bc:	e01b      	b.n	800e2f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e2be:	4b10      	ldr	r3, [pc, #64]	; (800e300 <prvInsertTimerInActiveList+0x7c>)
 800e2c0:	681a      	ldr	r2, [r3, #0]
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	3304      	adds	r3, #4
 800e2c6:	4619      	mov	r1, r3
 800e2c8:	4610      	mov	r0, r2
 800e2ca:	f7fd fc6a 	bl	800bba2 <vListInsert>
 800e2ce:	e012      	b.n	800e2f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e2d0:	687a      	ldr	r2, [r7, #4]
 800e2d2:	683b      	ldr	r3, [r7, #0]
 800e2d4:	429a      	cmp	r2, r3
 800e2d6:	d206      	bcs.n	800e2e6 <prvInsertTimerInActiveList+0x62>
 800e2d8:	68ba      	ldr	r2, [r7, #8]
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	429a      	cmp	r2, r3
 800e2de:	d302      	bcc.n	800e2e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e2e0:	2301      	movs	r3, #1
 800e2e2:	617b      	str	r3, [r7, #20]
 800e2e4:	e007      	b.n	800e2f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e2e6:	4b07      	ldr	r3, [pc, #28]	; (800e304 <prvInsertTimerInActiveList+0x80>)
 800e2e8:	681a      	ldr	r2, [r3, #0]
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	3304      	adds	r3, #4
 800e2ee:	4619      	mov	r1, r3
 800e2f0:	4610      	mov	r0, r2
 800e2f2:	f7fd fc56 	bl	800bba2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e2f6:	697b      	ldr	r3, [r7, #20]
}
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	3718      	adds	r7, #24
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	bd80      	pop	{r7, pc}
 800e300:	20001a48 	.word	0x20001a48
 800e304:	20001a44 	.word	0x20001a44

0800e308 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e308:	b580      	push	{r7, lr}
 800e30a:	b08e      	sub	sp, #56	; 0x38
 800e30c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e30e:	e0ca      	b.n	800e4a6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	2b00      	cmp	r3, #0
 800e314:	da18      	bge.n	800e348 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e316:	1d3b      	adds	r3, r7, #4
 800e318:	3304      	adds	r3, #4
 800e31a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d10a      	bne.n	800e338 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e322:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e326:	f383 8811 	msr	BASEPRI, r3
 800e32a:	f3bf 8f6f 	isb	sy
 800e32e:	f3bf 8f4f 	dsb	sy
 800e332:	61fb      	str	r3, [r7, #28]
}
 800e334:	bf00      	nop
 800e336:	e7fe      	b.n	800e336 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e33e:	6850      	ldr	r0, [r2, #4]
 800e340:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e342:	6892      	ldr	r2, [r2, #8]
 800e344:	4611      	mov	r1, r2
 800e346:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	f2c0 80aa 	blt.w	800e4a4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e356:	695b      	ldr	r3, [r3, #20]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d004      	beq.n	800e366 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e35e:	3304      	adds	r3, #4
 800e360:	4618      	mov	r0, r3
 800e362:	f7fd fc57 	bl	800bc14 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e366:	463b      	mov	r3, r7
 800e368:	4618      	mov	r0, r3
 800e36a:	f7ff ff6b 	bl	800e244 <prvSampleTimeNow>
 800e36e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	2b09      	cmp	r3, #9
 800e374:	f200 8097 	bhi.w	800e4a6 <prvProcessReceivedCommands+0x19e>
 800e378:	a201      	add	r2, pc, #4	; (adr r2, 800e380 <prvProcessReceivedCommands+0x78>)
 800e37a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e37e:	bf00      	nop
 800e380:	0800e3a9 	.word	0x0800e3a9
 800e384:	0800e3a9 	.word	0x0800e3a9
 800e388:	0800e3a9 	.word	0x0800e3a9
 800e38c:	0800e41d 	.word	0x0800e41d
 800e390:	0800e431 	.word	0x0800e431
 800e394:	0800e47b 	.word	0x0800e47b
 800e398:	0800e3a9 	.word	0x0800e3a9
 800e39c:	0800e3a9 	.word	0x0800e3a9
 800e3a0:	0800e41d 	.word	0x0800e41d
 800e3a4:	0800e431 	.word	0x0800e431
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e3ae:	f043 0301 	orr.w	r3, r3, #1
 800e3b2:	b2da      	uxtb	r2, r3
 800e3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e3ba:	68ba      	ldr	r2, [r7, #8]
 800e3bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3be:	699b      	ldr	r3, [r3, #24]
 800e3c0:	18d1      	adds	r1, r2, r3
 800e3c2:	68bb      	ldr	r3, [r7, #8]
 800e3c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e3c8:	f7ff ff5c 	bl	800e284 <prvInsertTimerInActiveList>
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d069      	beq.n	800e4a6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3d4:	6a1b      	ldr	r3, [r3, #32]
 800e3d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e3d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e3e0:	f003 0304 	and.w	r3, r3, #4
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d05e      	beq.n	800e4a6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e3e8:	68ba      	ldr	r2, [r7, #8]
 800e3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ec:	699b      	ldr	r3, [r3, #24]
 800e3ee:	441a      	add	r2, r3
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	9300      	str	r3, [sp, #0]
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	2100      	movs	r1, #0
 800e3f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e3fa:	f7ff fe05 	bl	800e008 <xTimerGenericCommand>
 800e3fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e400:	6a3b      	ldr	r3, [r7, #32]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d14f      	bne.n	800e4a6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e40a:	f383 8811 	msr	BASEPRI, r3
 800e40e:	f3bf 8f6f 	isb	sy
 800e412:	f3bf 8f4f 	dsb	sy
 800e416:	61bb      	str	r3, [r7, #24]
}
 800e418:	bf00      	nop
 800e41a:	e7fe      	b.n	800e41a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e41e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e422:	f023 0301 	bic.w	r3, r3, #1
 800e426:	b2da      	uxtb	r2, r3
 800e428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e42a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e42e:	e03a      	b.n	800e4a6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e432:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e436:	f043 0301 	orr.w	r3, r3, #1
 800e43a:	b2da      	uxtb	r2, r3
 800e43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e43e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e442:	68ba      	ldr	r2, [r7, #8]
 800e444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e446:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e44a:	699b      	ldr	r3, [r3, #24]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d10a      	bne.n	800e466 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e450:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e454:	f383 8811 	msr	BASEPRI, r3
 800e458:	f3bf 8f6f 	isb	sy
 800e45c:	f3bf 8f4f 	dsb	sy
 800e460:	617b      	str	r3, [r7, #20]
}
 800e462:	bf00      	nop
 800e464:	e7fe      	b.n	800e464 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e468:	699a      	ldr	r2, [r3, #24]
 800e46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e46c:	18d1      	adds	r1, r2, r3
 800e46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e472:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e474:	f7ff ff06 	bl	800e284 <prvInsertTimerInActiveList>
					break;
 800e478:	e015      	b.n	800e4a6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e47a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e47c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e480:	f003 0302 	and.w	r3, r3, #2
 800e484:	2b00      	cmp	r3, #0
 800e486:	d103      	bne.n	800e490 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e488:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e48a:	f000 fbe1 	bl	800ec50 <vPortFree>
 800e48e:	e00a      	b.n	800e4a6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e492:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e496:	f023 0301 	bic.w	r3, r3, #1
 800e49a:	b2da      	uxtb	r2, r3
 800e49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e49e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e4a2:	e000      	b.n	800e4a6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e4a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e4a6:	4b08      	ldr	r3, [pc, #32]	; (800e4c8 <prvProcessReceivedCommands+0x1c0>)
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	1d39      	adds	r1, r7, #4
 800e4ac:	2200      	movs	r2, #0
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	f7fd ffa8 	bl	800c404 <xQueueReceive>
 800e4b4:	4603      	mov	r3, r0
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	f47f af2a 	bne.w	800e310 <prvProcessReceivedCommands+0x8>
	}
}
 800e4bc:	bf00      	nop
 800e4be:	bf00      	nop
 800e4c0:	3730      	adds	r7, #48	; 0x30
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	bd80      	pop	{r7, pc}
 800e4c6:	bf00      	nop
 800e4c8:	20001a4c 	.word	0x20001a4c

0800e4cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b088      	sub	sp, #32
 800e4d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e4d2:	e048      	b.n	800e566 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e4d4:	4b2d      	ldr	r3, [pc, #180]	; (800e58c <prvSwitchTimerLists+0xc0>)
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	68db      	ldr	r3, [r3, #12]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4de:	4b2b      	ldr	r3, [pc, #172]	; (800e58c <prvSwitchTimerLists+0xc0>)
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	68db      	ldr	r3, [r3, #12]
 800e4e4:	68db      	ldr	r3, [r3, #12]
 800e4e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	3304      	adds	r3, #4
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	f7fd fb91 	bl	800bc14 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	6a1b      	ldr	r3, [r3, #32]
 800e4f6:	68f8      	ldr	r0, [r7, #12]
 800e4f8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e500:	f003 0304 	and.w	r3, r3, #4
 800e504:	2b00      	cmp	r3, #0
 800e506:	d02e      	beq.n	800e566 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	699b      	ldr	r3, [r3, #24]
 800e50c:	693a      	ldr	r2, [r7, #16]
 800e50e:	4413      	add	r3, r2
 800e510:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e512:	68ba      	ldr	r2, [r7, #8]
 800e514:	693b      	ldr	r3, [r7, #16]
 800e516:	429a      	cmp	r2, r3
 800e518:	d90e      	bls.n	800e538 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	68ba      	ldr	r2, [r7, #8]
 800e51e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	68fa      	ldr	r2, [r7, #12]
 800e524:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e526:	4b19      	ldr	r3, [pc, #100]	; (800e58c <prvSwitchTimerLists+0xc0>)
 800e528:	681a      	ldr	r2, [r3, #0]
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	3304      	adds	r3, #4
 800e52e:	4619      	mov	r1, r3
 800e530:	4610      	mov	r0, r2
 800e532:	f7fd fb36 	bl	800bba2 <vListInsert>
 800e536:	e016      	b.n	800e566 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e538:	2300      	movs	r3, #0
 800e53a:	9300      	str	r3, [sp, #0]
 800e53c:	2300      	movs	r3, #0
 800e53e:	693a      	ldr	r2, [r7, #16]
 800e540:	2100      	movs	r1, #0
 800e542:	68f8      	ldr	r0, [r7, #12]
 800e544:	f7ff fd60 	bl	800e008 <xTimerGenericCommand>
 800e548:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d10a      	bne.n	800e566 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e550:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e554:	f383 8811 	msr	BASEPRI, r3
 800e558:	f3bf 8f6f 	isb	sy
 800e55c:	f3bf 8f4f 	dsb	sy
 800e560:	603b      	str	r3, [r7, #0]
}
 800e562:	bf00      	nop
 800e564:	e7fe      	b.n	800e564 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e566:	4b09      	ldr	r3, [pc, #36]	; (800e58c <prvSwitchTimerLists+0xc0>)
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d1b1      	bne.n	800e4d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e570:	4b06      	ldr	r3, [pc, #24]	; (800e58c <prvSwitchTimerLists+0xc0>)
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e576:	4b06      	ldr	r3, [pc, #24]	; (800e590 <prvSwitchTimerLists+0xc4>)
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	4a04      	ldr	r2, [pc, #16]	; (800e58c <prvSwitchTimerLists+0xc0>)
 800e57c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e57e:	4a04      	ldr	r2, [pc, #16]	; (800e590 <prvSwitchTimerLists+0xc4>)
 800e580:	697b      	ldr	r3, [r7, #20]
 800e582:	6013      	str	r3, [r2, #0]
}
 800e584:	bf00      	nop
 800e586:	3718      	adds	r7, #24
 800e588:	46bd      	mov	sp, r7
 800e58a:	bd80      	pop	{r7, pc}
 800e58c:	20001a44 	.word	0x20001a44
 800e590:	20001a48 	.word	0x20001a48

0800e594 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b082      	sub	sp, #8
 800e598:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e59a:	f000 f96b 	bl	800e874 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e59e:	4b15      	ldr	r3, [pc, #84]	; (800e5f4 <prvCheckForValidListAndQueue+0x60>)
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d120      	bne.n	800e5e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e5a6:	4814      	ldr	r0, [pc, #80]	; (800e5f8 <prvCheckForValidListAndQueue+0x64>)
 800e5a8:	f7fd faaa 	bl	800bb00 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e5ac:	4813      	ldr	r0, [pc, #76]	; (800e5fc <prvCheckForValidListAndQueue+0x68>)
 800e5ae:	f7fd faa7 	bl	800bb00 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e5b2:	4b13      	ldr	r3, [pc, #76]	; (800e600 <prvCheckForValidListAndQueue+0x6c>)
 800e5b4:	4a10      	ldr	r2, [pc, #64]	; (800e5f8 <prvCheckForValidListAndQueue+0x64>)
 800e5b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e5b8:	4b12      	ldr	r3, [pc, #72]	; (800e604 <prvCheckForValidListAndQueue+0x70>)
 800e5ba:	4a10      	ldr	r2, [pc, #64]	; (800e5fc <prvCheckForValidListAndQueue+0x68>)
 800e5bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e5be:	2300      	movs	r3, #0
 800e5c0:	9300      	str	r3, [sp, #0]
 800e5c2:	4b11      	ldr	r3, [pc, #68]	; (800e608 <prvCheckForValidListAndQueue+0x74>)
 800e5c4:	4a11      	ldr	r2, [pc, #68]	; (800e60c <prvCheckForValidListAndQueue+0x78>)
 800e5c6:	2110      	movs	r1, #16
 800e5c8:	200a      	movs	r0, #10
 800e5ca:	f7fd fbb5 	bl	800bd38 <xQueueGenericCreateStatic>
 800e5ce:	4603      	mov	r3, r0
 800e5d0:	4a08      	ldr	r2, [pc, #32]	; (800e5f4 <prvCheckForValidListAndQueue+0x60>)
 800e5d2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e5d4:	4b07      	ldr	r3, [pc, #28]	; (800e5f4 <prvCheckForValidListAndQueue+0x60>)
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d005      	beq.n	800e5e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e5dc:	4b05      	ldr	r3, [pc, #20]	; (800e5f4 <prvCheckForValidListAndQueue+0x60>)
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	490b      	ldr	r1, [pc, #44]	; (800e610 <prvCheckForValidListAndQueue+0x7c>)
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	f7fe fb02 	bl	800cbec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e5e8:	f000 f974 	bl	800e8d4 <vPortExitCritical>
}
 800e5ec:	bf00      	nop
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd80      	pop	{r7, pc}
 800e5f2:	bf00      	nop
 800e5f4:	20001a4c 	.word	0x20001a4c
 800e5f8:	20001a1c 	.word	0x20001a1c
 800e5fc:	20001a30 	.word	0x20001a30
 800e600:	20001a44 	.word	0x20001a44
 800e604:	20001a48 	.word	0x20001a48
 800e608:	20001af8 	.word	0x20001af8
 800e60c:	20001a58 	.word	0x20001a58
 800e610:	0800f980 	.word	0x0800f980

0800e614 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e614:	b480      	push	{r7}
 800e616:	b085      	sub	sp, #20
 800e618:	af00      	add	r7, sp, #0
 800e61a:	60f8      	str	r0, [r7, #12]
 800e61c:	60b9      	str	r1, [r7, #8]
 800e61e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	3b04      	subs	r3, #4
 800e624:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e62c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	3b04      	subs	r3, #4
 800e632:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e634:	68bb      	ldr	r3, [r7, #8]
 800e636:	f023 0201 	bic.w	r2, r3, #1
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	3b04      	subs	r3, #4
 800e642:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e644:	4a0c      	ldr	r2, [pc, #48]	; (800e678 <pxPortInitialiseStack+0x64>)
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	3b14      	subs	r3, #20
 800e64e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e650:	687a      	ldr	r2, [r7, #4]
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	3b04      	subs	r3, #4
 800e65a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	f06f 0202 	mvn.w	r2, #2
 800e662:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	3b20      	subs	r3, #32
 800e668:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e66a:	68fb      	ldr	r3, [r7, #12]
}
 800e66c:	4618      	mov	r0, r3
 800e66e:	3714      	adds	r7, #20
 800e670:	46bd      	mov	sp, r7
 800e672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e676:	4770      	bx	lr
 800e678:	0800e67d 	.word	0x0800e67d

0800e67c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e67c:	b480      	push	{r7}
 800e67e:	b085      	sub	sp, #20
 800e680:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e682:	2300      	movs	r3, #0
 800e684:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e686:	4b12      	ldr	r3, [pc, #72]	; (800e6d0 <prvTaskExitError+0x54>)
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e68e:	d00a      	beq.n	800e6a6 <prvTaskExitError+0x2a>
	__asm volatile
 800e690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e694:	f383 8811 	msr	BASEPRI, r3
 800e698:	f3bf 8f6f 	isb	sy
 800e69c:	f3bf 8f4f 	dsb	sy
 800e6a0:	60fb      	str	r3, [r7, #12]
}
 800e6a2:	bf00      	nop
 800e6a4:	e7fe      	b.n	800e6a4 <prvTaskExitError+0x28>
	__asm volatile
 800e6a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6aa:	f383 8811 	msr	BASEPRI, r3
 800e6ae:	f3bf 8f6f 	isb	sy
 800e6b2:	f3bf 8f4f 	dsb	sy
 800e6b6:	60bb      	str	r3, [r7, #8]
}
 800e6b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e6ba:	bf00      	nop
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d0fc      	beq.n	800e6bc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e6c2:	bf00      	nop
 800e6c4:	bf00      	nop
 800e6c6:	3714      	adds	r7, #20
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ce:	4770      	bx	lr
 800e6d0:	20000010 	.word	0x20000010
	...

0800e6e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e6e0:	4b07      	ldr	r3, [pc, #28]	; (800e700 <pxCurrentTCBConst2>)
 800e6e2:	6819      	ldr	r1, [r3, #0]
 800e6e4:	6808      	ldr	r0, [r1, #0]
 800e6e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6ea:	f380 8809 	msr	PSP, r0
 800e6ee:	f3bf 8f6f 	isb	sy
 800e6f2:	f04f 0000 	mov.w	r0, #0
 800e6f6:	f380 8811 	msr	BASEPRI, r0
 800e6fa:	4770      	bx	lr
 800e6fc:	f3af 8000 	nop.w

0800e700 <pxCurrentTCBConst2>:
 800e700:	2000151c 	.word	0x2000151c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e704:	bf00      	nop
 800e706:	bf00      	nop

0800e708 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e708:	4808      	ldr	r0, [pc, #32]	; (800e72c <prvPortStartFirstTask+0x24>)
 800e70a:	6800      	ldr	r0, [r0, #0]
 800e70c:	6800      	ldr	r0, [r0, #0]
 800e70e:	f380 8808 	msr	MSP, r0
 800e712:	f04f 0000 	mov.w	r0, #0
 800e716:	f380 8814 	msr	CONTROL, r0
 800e71a:	b662      	cpsie	i
 800e71c:	b661      	cpsie	f
 800e71e:	f3bf 8f4f 	dsb	sy
 800e722:	f3bf 8f6f 	isb	sy
 800e726:	df00      	svc	0
 800e728:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e72a:	bf00      	nop
 800e72c:	e000ed08 	.word	0xe000ed08

0800e730 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b086      	sub	sp, #24
 800e734:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e736:	4b46      	ldr	r3, [pc, #280]	; (800e850 <xPortStartScheduler+0x120>)
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	4a46      	ldr	r2, [pc, #280]	; (800e854 <xPortStartScheduler+0x124>)
 800e73c:	4293      	cmp	r3, r2
 800e73e:	d10a      	bne.n	800e756 <xPortStartScheduler+0x26>
	__asm volatile
 800e740:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e744:	f383 8811 	msr	BASEPRI, r3
 800e748:	f3bf 8f6f 	isb	sy
 800e74c:	f3bf 8f4f 	dsb	sy
 800e750:	613b      	str	r3, [r7, #16]
}
 800e752:	bf00      	nop
 800e754:	e7fe      	b.n	800e754 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e756:	4b3e      	ldr	r3, [pc, #248]	; (800e850 <xPortStartScheduler+0x120>)
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	4a3f      	ldr	r2, [pc, #252]	; (800e858 <xPortStartScheduler+0x128>)
 800e75c:	4293      	cmp	r3, r2
 800e75e:	d10a      	bne.n	800e776 <xPortStartScheduler+0x46>
	__asm volatile
 800e760:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e764:	f383 8811 	msr	BASEPRI, r3
 800e768:	f3bf 8f6f 	isb	sy
 800e76c:	f3bf 8f4f 	dsb	sy
 800e770:	60fb      	str	r3, [r7, #12]
}
 800e772:	bf00      	nop
 800e774:	e7fe      	b.n	800e774 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e776:	4b39      	ldr	r3, [pc, #228]	; (800e85c <xPortStartScheduler+0x12c>)
 800e778:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e77a:	697b      	ldr	r3, [r7, #20]
 800e77c:	781b      	ldrb	r3, [r3, #0]
 800e77e:	b2db      	uxtb	r3, r3
 800e780:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e782:	697b      	ldr	r3, [r7, #20]
 800e784:	22ff      	movs	r2, #255	; 0xff
 800e786:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e788:	697b      	ldr	r3, [r7, #20]
 800e78a:	781b      	ldrb	r3, [r3, #0]
 800e78c:	b2db      	uxtb	r3, r3
 800e78e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e790:	78fb      	ldrb	r3, [r7, #3]
 800e792:	b2db      	uxtb	r3, r3
 800e794:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e798:	b2da      	uxtb	r2, r3
 800e79a:	4b31      	ldr	r3, [pc, #196]	; (800e860 <xPortStartScheduler+0x130>)
 800e79c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e79e:	4b31      	ldr	r3, [pc, #196]	; (800e864 <xPortStartScheduler+0x134>)
 800e7a0:	2207      	movs	r2, #7
 800e7a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e7a4:	e009      	b.n	800e7ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e7a6:	4b2f      	ldr	r3, [pc, #188]	; (800e864 <xPortStartScheduler+0x134>)
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	3b01      	subs	r3, #1
 800e7ac:	4a2d      	ldr	r2, [pc, #180]	; (800e864 <xPortStartScheduler+0x134>)
 800e7ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e7b0:	78fb      	ldrb	r3, [r7, #3]
 800e7b2:	b2db      	uxtb	r3, r3
 800e7b4:	005b      	lsls	r3, r3, #1
 800e7b6:	b2db      	uxtb	r3, r3
 800e7b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e7ba:	78fb      	ldrb	r3, [r7, #3]
 800e7bc:	b2db      	uxtb	r3, r3
 800e7be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e7c2:	2b80      	cmp	r3, #128	; 0x80
 800e7c4:	d0ef      	beq.n	800e7a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e7c6:	4b27      	ldr	r3, [pc, #156]	; (800e864 <xPortStartScheduler+0x134>)
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	f1c3 0307 	rsb	r3, r3, #7
 800e7ce:	2b04      	cmp	r3, #4
 800e7d0:	d00a      	beq.n	800e7e8 <xPortStartScheduler+0xb8>
	__asm volatile
 800e7d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7d6:	f383 8811 	msr	BASEPRI, r3
 800e7da:	f3bf 8f6f 	isb	sy
 800e7de:	f3bf 8f4f 	dsb	sy
 800e7e2:	60bb      	str	r3, [r7, #8]
}
 800e7e4:	bf00      	nop
 800e7e6:	e7fe      	b.n	800e7e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e7e8:	4b1e      	ldr	r3, [pc, #120]	; (800e864 <xPortStartScheduler+0x134>)
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	021b      	lsls	r3, r3, #8
 800e7ee:	4a1d      	ldr	r2, [pc, #116]	; (800e864 <xPortStartScheduler+0x134>)
 800e7f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e7f2:	4b1c      	ldr	r3, [pc, #112]	; (800e864 <xPortStartScheduler+0x134>)
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e7fa:	4a1a      	ldr	r2, [pc, #104]	; (800e864 <xPortStartScheduler+0x134>)
 800e7fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	b2da      	uxtb	r2, r3
 800e802:	697b      	ldr	r3, [r7, #20]
 800e804:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e806:	4b18      	ldr	r3, [pc, #96]	; (800e868 <xPortStartScheduler+0x138>)
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	4a17      	ldr	r2, [pc, #92]	; (800e868 <xPortStartScheduler+0x138>)
 800e80c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e810:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e812:	4b15      	ldr	r3, [pc, #84]	; (800e868 <xPortStartScheduler+0x138>)
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	4a14      	ldr	r2, [pc, #80]	; (800e868 <xPortStartScheduler+0x138>)
 800e818:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e81c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e81e:	f000 f8dd 	bl	800e9dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e822:	4b12      	ldr	r3, [pc, #72]	; (800e86c <xPortStartScheduler+0x13c>)
 800e824:	2200      	movs	r2, #0
 800e826:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e828:	f000 f8fc 	bl	800ea24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e82c:	4b10      	ldr	r3, [pc, #64]	; (800e870 <xPortStartScheduler+0x140>)
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	4a0f      	ldr	r2, [pc, #60]	; (800e870 <xPortStartScheduler+0x140>)
 800e832:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e836:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e838:	f7ff ff66 	bl	800e708 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e83c:	f7fe ff48 	bl	800d6d0 <vTaskSwitchContext>
	prvTaskExitError();
 800e840:	f7ff ff1c 	bl	800e67c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e844:	2300      	movs	r3, #0
}
 800e846:	4618      	mov	r0, r3
 800e848:	3718      	adds	r7, #24
 800e84a:	46bd      	mov	sp, r7
 800e84c:	bd80      	pop	{r7, pc}
 800e84e:	bf00      	nop
 800e850:	e000ed00 	.word	0xe000ed00
 800e854:	410fc271 	.word	0x410fc271
 800e858:	410fc270 	.word	0x410fc270
 800e85c:	e000e400 	.word	0xe000e400
 800e860:	20001b48 	.word	0x20001b48
 800e864:	20001b4c 	.word	0x20001b4c
 800e868:	e000ed20 	.word	0xe000ed20
 800e86c:	20000010 	.word	0x20000010
 800e870:	e000ef34 	.word	0xe000ef34

0800e874 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e874:	b480      	push	{r7}
 800e876:	b083      	sub	sp, #12
 800e878:	af00      	add	r7, sp, #0
	__asm volatile
 800e87a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e87e:	f383 8811 	msr	BASEPRI, r3
 800e882:	f3bf 8f6f 	isb	sy
 800e886:	f3bf 8f4f 	dsb	sy
 800e88a:	607b      	str	r3, [r7, #4]
}
 800e88c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e88e:	4b0f      	ldr	r3, [pc, #60]	; (800e8cc <vPortEnterCritical+0x58>)
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	3301      	adds	r3, #1
 800e894:	4a0d      	ldr	r2, [pc, #52]	; (800e8cc <vPortEnterCritical+0x58>)
 800e896:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e898:	4b0c      	ldr	r3, [pc, #48]	; (800e8cc <vPortEnterCritical+0x58>)
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	2b01      	cmp	r3, #1
 800e89e:	d10f      	bne.n	800e8c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e8a0:	4b0b      	ldr	r3, [pc, #44]	; (800e8d0 <vPortEnterCritical+0x5c>)
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	b2db      	uxtb	r3, r3
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d00a      	beq.n	800e8c0 <vPortEnterCritical+0x4c>
	__asm volatile
 800e8aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8ae:	f383 8811 	msr	BASEPRI, r3
 800e8b2:	f3bf 8f6f 	isb	sy
 800e8b6:	f3bf 8f4f 	dsb	sy
 800e8ba:	603b      	str	r3, [r7, #0]
}
 800e8bc:	bf00      	nop
 800e8be:	e7fe      	b.n	800e8be <vPortEnterCritical+0x4a>
	}
}
 800e8c0:	bf00      	nop
 800e8c2:	370c      	adds	r7, #12
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ca:	4770      	bx	lr
 800e8cc:	20000010 	.word	0x20000010
 800e8d0:	e000ed04 	.word	0xe000ed04

0800e8d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e8d4:	b480      	push	{r7}
 800e8d6:	b083      	sub	sp, #12
 800e8d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e8da:	4b12      	ldr	r3, [pc, #72]	; (800e924 <vPortExitCritical+0x50>)
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d10a      	bne.n	800e8f8 <vPortExitCritical+0x24>
	__asm volatile
 800e8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8e6:	f383 8811 	msr	BASEPRI, r3
 800e8ea:	f3bf 8f6f 	isb	sy
 800e8ee:	f3bf 8f4f 	dsb	sy
 800e8f2:	607b      	str	r3, [r7, #4]
}
 800e8f4:	bf00      	nop
 800e8f6:	e7fe      	b.n	800e8f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e8f8:	4b0a      	ldr	r3, [pc, #40]	; (800e924 <vPortExitCritical+0x50>)
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	3b01      	subs	r3, #1
 800e8fe:	4a09      	ldr	r2, [pc, #36]	; (800e924 <vPortExitCritical+0x50>)
 800e900:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e902:	4b08      	ldr	r3, [pc, #32]	; (800e924 <vPortExitCritical+0x50>)
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d105      	bne.n	800e916 <vPortExitCritical+0x42>
 800e90a:	2300      	movs	r3, #0
 800e90c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e90e:	683b      	ldr	r3, [r7, #0]
 800e910:	f383 8811 	msr	BASEPRI, r3
}
 800e914:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e916:	bf00      	nop
 800e918:	370c      	adds	r7, #12
 800e91a:	46bd      	mov	sp, r7
 800e91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e920:	4770      	bx	lr
 800e922:	bf00      	nop
 800e924:	20000010 	.word	0x20000010
	...

0800e930 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e930:	f3ef 8009 	mrs	r0, PSP
 800e934:	f3bf 8f6f 	isb	sy
 800e938:	4b15      	ldr	r3, [pc, #84]	; (800e990 <pxCurrentTCBConst>)
 800e93a:	681a      	ldr	r2, [r3, #0]
 800e93c:	f01e 0f10 	tst.w	lr, #16
 800e940:	bf08      	it	eq
 800e942:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e946:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e94a:	6010      	str	r0, [r2, #0]
 800e94c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e950:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e954:	f380 8811 	msr	BASEPRI, r0
 800e958:	f3bf 8f4f 	dsb	sy
 800e95c:	f3bf 8f6f 	isb	sy
 800e960:	f7fe feb6 	bl	800d6d0 <vTaskSwitchContext>
 800e964:	f04f 0000 	mov.w	r0, #0
 800e968:	f380 8811 	msr	BASEPRI, r0
 800e96c:	bc09      	pop	{r0, r3}
 800e96e:	6819      	ldr	r1, [r3, #0]
 800e970:	6808      	ldr	r0, [r1, #0]
 800e972:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e976:	f01e 0f10 	tst.w	lr, #16
 800e97a:	bf08      	it	eq
 800e97c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e980:	f380 8809 	msr	PSP, r0
 800e984:	f3bf 8f6f 	isb	sy
 800e988:	4770      	bx	lr
 800e98a:	bf00      	nop
 800e98c:	f3af 8000 	nop.w

0800e990 <pxCurrentTCBConst>:
 800e990:	2000151c 	.word	0x2000151c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e994:	bf00      	nop
 800e996:	bf00      	nop

0800e998 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b082      	sub	sp, #8
 800e99c:	af00      	add	r7, sp, #0
	__asm volatile
 800e99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9a2:	f383 8811 	msr	BASEPRI, r3
 800e9a6:	f3bf 8f6f 	isb	sy
 800e9aa:	f3bf 8f4f 	dsb	sy
 800e9ae:	607b      	str	r3, [r7, #4]
}
 800e9b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e9b2:	f7fe fdd3 	bl	800d55c <xTaskIncrementTick>
 800e9b6:	4603      	mov	r3, r0
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d003      	beq.n	800e9c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e9bc:	4b06      	ldr	r3, [pc, #24]	; (800e9d8 <xPortSysTickHandler+0x40>)
 800e9be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e9c2:	601a      	str	r2, [r3, #0]
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e9c8:	683b      	ldr	r3, [r7, #0]
 800e9ca:	f383 8811 	msr	BASEPRI, r3
}
 800e9ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e9d0:	bf00      	nop
 800e9d2:	3708      	adds	r7, #8
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	bd80      	pop	{r7, pc}
 800e9d8:	e000ed04 	.word	0xe000ed04

0800e9dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e9dc:	b480      	push	{r7}
 800e9de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e9e0:	4b0b      	ldr	r3, [pc, #44]	; (800ea10 <vPortSetupTimerInterrupt+0x34>)
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e9e6:	4b0b      	ldr	r3, [pc, #44]	; (800ea14 <vPortSetupTimerInterrupt+0x38>)
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e9ec:	4b0a      	ldr	r3, [pc, #40]	; (800ea18 <vPortSetupTimerInterrupt+0x3c>)
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	4a0a      	ldr	r2, [pc, #40]	; (800ea1c <vPortSetupTimerInterrupt+0x40>)
 800e9f2:	fba2 2303 	umull	r2, r3, r2, r3
 800e9f6:	099b      	lsrs	r3, r3, #6
 800e9f8:	4a09      	ldr	r2, [pc, #36]	; (800ea20 <vPortSetupTimerInterrupt+0x44>)
 800e9fa:	3b01      	subs	r3, #1
 800e9fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e9fe:	4b04      	ldr	r3, [pc, #16]	; (800ea10 <vPortSetupTimerInterrupt+0x34>)
 800ea00:	2207      	movs	r2, #7
 800ea02:	601a      	str	r2, [r3, #0]
}
 800ea04:	bf00      	nop
 800ea06:	46bd      	mov	sp, r7
 800ea08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0c:	4770      	bx	lr
 800ea0e:	bf00      	nop
 800ea10:	e000e010 	.word	0xe000e010
 800ea14:	e000e018 	.word	0xe000e018
 800ea18:	20000004 	.word	0x20000004
 800ea1c:	10624dd3 	.word	0x10624dd3
 800ea20:	e000e014 	.word	0xe000e014

0800ea24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ea24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ea34 <vPortEnableVFP+0x10>
 800ea28:	6801      	ldr	r1, [r0, #0]
 800ea2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ea2e:	6001      	str	r1, [r0, #0]
 800ea30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ea32:	bf00      	nop
 800ea34:	e000ed88 	.word	0xe000ed88

0800ea38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ea38:	b480      	push	{r7}
 800ea3a:	b085      	sub	sp, #20
 800ea3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ea3e:	f3ef 8305 	mrs	r3, IPSR
 800ea42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	2b0f      	cmp	r3, #15
 800ea48:	d914      	bls.n	800ea74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ea4a:	4a17      	ldr	r2, [pc, #92]	; (800eaa8 <vPortValidateInterruptPriority+0x70>)
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	4413      	add	r3, r2
 800ea50:	781b      	ldrb	r3, [r3, #0]
 800ea52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ea54:	4b15      	ldr	r3, [pc, #84]	; (800eaac <vPortValidateInterruptPriority+0x74>)
 800ea56:	781b      	ldrb	r3, [r3, #0]
 800ea58:	7afa      	ldrb	r2, [r7, #11]
 800ea5a:	429a      	cmp	r2, r3
 800ea5c:	d20a      	bcs.n	800ea74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ea5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea62:	f383 8811 	msr	BASEPRI, r3
 800ea66:	f3bf 8f6f 	isb	sy
 800ea6a:	f3bf 8f4f 	dsb	sy
 800ea6e:	607b      	str	r3, [r7, #4]
}
 800ea70:	bf00      	nop
 800ea72:	e7fe      	b.n	800ea72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ea74:	4b0e      	ldr	r3, [pc, #56]	; (800eab0 <vPortValidateInterruptPriority+0x78>)
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ea7c:	4b0d      	ldr	r3, [pc, #52]	; (800eab4 <vPortValidateInterruptPriority+0x7c>)
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	429a      	cmp	r2, r3
 800ea82:	d90a      	bls.n	800ea9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ea84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea88:	f383 8811 	msr	BASEPRI, r3
 800ea8c:	f3bf 8f6f 	isb	sy
 800ea90:	f3bf 8f4f 	dsb	sy
 800ea94:	603b      	str	r3, [r7, #0]
}
 800ea96:	bf00      	nop
 800ea98:	e7fe      	b.n	800ea98 <vPortValidateInterruptPriority+0x60>
	}
 800ea9a:	bf00      	nop
 800ea9c:	3714      	adds	r7, #20
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa4:	4770      	bx	lr
 800eaa6:	bf00      	nop
 800eaa8:	e000e3f0 	.word	0xe000e3f0
 800eaac:	20001b48 	.word	0x20001b48
 800eab0:	e000ed0c 	.word	0xe000ed0c
 800eab4:	20001b4c 	.word	0x20001b4c

0800eab8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b08a      	sub	sp, #40	; 0x28
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800eac0:	2300      	movs	r3, #0
 800eac2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800eac4:	f7fe fc7c 	bl	800d3c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800eac8:	4b5b      	ldr	r3, [pc, #364]	; (800ec38 <pvPortMalloc+0x180>)
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d101      	bne.n	800ead4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ead0:	f000 f920 	bl	800ed14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ead4:	4b59      	ldr	r3, [pc, #356]	; (800ec3c <pvPortMalloc+0x184>)
 800ead6:	681a      	ldr	r2, [r3, #0]
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	4013      	ands	r3, r2
 800eadc:	2b00      	cmp	r3, #0
 800eade:	f040 8093 	bne.w	800ec08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d01d      	beq.n	800eb24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800eae8:	2208      	movs	r2, #8
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	4413      	add	r3, r2
 800eaee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	f003 0307 	and.w	r3, r3, #7
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d014      	beq.n	800eb24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	f023 0307 	bic.w	r3, r3, #7
 800eb00:	3308      	adds	r3, #8
 800eb02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	f003 0307 	and.w	r3, r3, #7
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d00a      	beq.n	800eb24 <pvPortMalloc+0x6c>
	__asm volatile
 800eb0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb12:	f383 8811 	msr	BASEPRI, r3
 800eb16:	f3bf 8f6f 	isb	sy
 800eb1a:	f3bf 8f4f 	dsb	sy
 800eb1e:	617b      	str	r3, [r7, #20]
}
 800eb20:	bf00      	nop
 800eb22:	e7fe      	b.n	800eb22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d06e      	beq.n	800ec08 <pvPortMalloc+0x150>
 800eb2a:	4b45      	ldr	r3, [pc, #276]	; (800ec40 <pvPortMalloc+0x188>)
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	687a      	ldr	r2, [r7, #4]
 800eb30:	429a      	cmp	r2, r3
 800eb32:	d869      	bhi.n	800ec08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800eb34:	4b43      	ldr	r3, [pc, #268]	; (800ec44 <pvPortMalloc+0x18c>)
 800eb36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800eb38:	4b42      	ldr	r3, [pc, #264]	; (800ec44 <pvPortMalloc+0x18c>)
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eb3e:	e004      	b.n	800eb4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800eb40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800eb44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eb4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb4c:	685b      	ldr	r3, [r3, #4]
 800eb4e:	687a      	ldr	r2, [r7, #4]
 800eb50:	429a      	cmp	r2, r3
 800eb52:	d903      	bls.n	800eb5c <pvPortMalloc+0xa4>
 800eb54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d1f1      	bne.n	800eb40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800eb5c:	4b36      	ldr	r3, [pc, #216]	; (800ec38 <pvPortMalloc+0x180>)
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb62:	429a      	cmp	r2, r3
 800eb64:	d050      	beq.n	800ec08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800eb66:	6a3b      	ldr	r3, [r7, #32]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	2208      	movs	r2, #8
 800eb6c:	4413      	add	r3, r2
 800eb6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800eb70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb72:	681a      	ldr	r2, [r3, #0]
 800eb74:	6a3b      	ldr	r3, [r7, #32]
 800eb76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800eb78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb7a:	685a      	ldr	r2, [r3, #4]
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	1ad2      	subs	r2, r2, r3
 800eb80:	2308      	movs	r3, #8
 800eb82:	005b      	lsls	r3, r3, #1
 800eb84:	429a      	cmp	r2, r3
 800eb86:	d91f      	bls.n	800ebc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800eb88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	4413      	add	r3, r2
 800eb8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800eb90:	69bb      	ldr	r3, [r7, #24]
 800eb92:	f003 0307 	and.w	r3, r3, #7
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d00a      	beq.n	800ebb0 <pvPortMalloc+0xf8>
	__asm volatile
 800eb9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb9e:	f383 8811 	msr	BASEPRI, r3
 800eba2:	f3bf 8f6f 	isb	sy
 800eba6:	f3bf 8f4f 	dsb	sy
 800ebaa:	613b      	str	r3, [r7, #16]
}
 800ebac:	bf00      	nop
 800ebae:	e7fe      	b.n	800ebae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ebb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebb2:	685a      	ldr	r2, [r3, #4]
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	1ad2      	subs	r2, r2, r3
 800ebb8:	69bb      	ldr	r3, [r7, #24]
 800ebba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ebbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebbe:	687a      	ldr	r2, [r7, #4]
 800ebc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ebc2:	69b8      	ldr	r0, [r7, #24]
 800ebc4:	f000 f908 	bl	800edd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ebc8:	4b1d      	ldr	r3, [pc, #116]	; (800ec40 <pvPortMalloc+0x188>)
 800ebca:	681a      	ldr	r2, [r3, #0]
 800ebcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebce:	685b      	ldr	r3, [r3, #4]
 800ebd0:	1ad3      	subs	r3, r2, r3
 800ebd2:	4a1b      	ldr	r2, [pc, #108]	; (800ec40 <pvPortMalloc+0x188>)
 800ebd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ebd6:	4b1a      	ldr	r3, [pc, #104]	; (800ec40 <pvPortMalloc+0x188>)
 800ebd8:	681a      	ldr	r2, [r3, #0]
 800ebda:	4b1b      	ldr	r3, [pc, #108]	; (800ec48 <pvPortMalloc+0x190>)
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	429a      	cmp	r2, r3
 800ebe0:	d203      	bcs.n	800ebea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ebe2:	4b17      	ldr	r3, [pc, #92]	; (800ec40 <pvPortMalloc+0x188>)
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	4a18      	ldr	r2, [pc, #96]	; (800ec48 <pvPortMalloc+0x190>)
 800ebe8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ebea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebec:	685a      	ldr	r2, [r3, #4]
 800ebee:	4b13      	ldr	r3, [pc, #76]	; (800ec3c <pvPortMalloc+0x184>)
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	431a      	orrs	r2, r3
 800ebf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebf6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ebf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ebfe:	4b13      	ldr	r3, [pc, #76]	; (800ec4c <pvPortMalloc+0x194>)
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	3301      	adds	r3, #1
 800ec04:	4a11      	ldr	r2, [pc, #68]	; (800ec4c <pvPortMalloc+0x194>)
 800ec06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ec08:	f7fe fbe8 	bl	800d3dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ec0c:	69fb      	ldr	r3, [r7, #28]
 800ec0e:	f003 0307 	and.w	r3, r3, #7
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d00a      	beq.n	800ec2c <pvPortMalloc+0x174>
	__asm volatile
 800ec16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec1a:	f383 8811 	msr	BASEPRI, r3
 800ec1e:	f3bf 8f6f 	isb	sy
 800ec22:	f3bf 8f4f 	dsb	sy
 800ec26:	60fb      	str	r3, [r7, #12]
}
 800ec28:	bf00      	nop
 800ec2a:	e7fe      	b.n	800ec2a <pvPortMalloc+0x172>
	return pvReturn;
 800ec2c:	69fb      	ldr	r3, [r7, #28]
}
 800ec2e:	4618      	mov	r0, r3
 800ec30:	3728      	adds	r7, #40	; 0x28
 800ec32:	46bd      	mov	sp, r7
 800ec34:	bd80      	pop	{r7, pc}
 800ec36:	bf00      	nop
 800ec38:	20005758 	.word	0x20005758
 800ec3c:	2000576c 	.word	0x2000576c
 800ec40:	2000575c 	.word	0x2000575c
 800ec44:	20005750 	.word	0x20005750
 800ec48:	20005760 	.word	0x20005760
 800ec4c:	20005764 	.word	0x20005764

0800ec50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b086      	sub	sp, #24
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d04d      	beq.n	800ecfe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ec62:	2308      	movs	r3, #8
 800ec64:	425b      	negs	r3, r3
 800ec66:	697a      	ldr	r2, [r7, #20]
 800ec68:	4413      	add	r3, r2
 800ec6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ec6c:	697b      	ldr	r3, [r7, #20]
 800ec6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ec70:	693b      	ldr	r3, [r7, #16]
 800ec72:	685a      	ldr	r2, [r3, #4]
 800ec74:	4b24      	ldr	r3, [pc, #144]	; (800ed08 <vPortFree+0xb8>)
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	4013      	ands	r3, r2
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d10a      	bne.n	800ec94 <vPortFree+0x44>
	__asm volatile
 800ec7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec82:	f383 8811 	msr	BASEPRI, r3
 800ec86:	f3bf 8f6f 	isb	sy
 800ec8a:	f3bf 8f4f 	dsb	sy
 800ec8e:	60fb      	str	r3, [r7, #12]
}
 800ec90:	bf00      	nop
 800ec92:	e7fe      	b.n	800ec92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ec94:	693b      	ldr	r3, [r7, #16]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d00a      	beq.n	800ecb2 <vPortFree+0x62>
	__asm volatile
 800ec9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eca0:	f383 8811 	msr	BASEPRI, r3
 800eca4:	f3bf 8f6f 	isb	sy
 800eca8:	f3bf 8f4f 	dsb	sy
 800ecac:	60bb      	str	r3, [r7, #8]
}
 800ecae:	bf00      	nop
 800ecb0:	e7fe      	b.n	800ecb0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ecb2:	693b      	ldr	r3, [r7, #16]
 800ecb4:	685a      	ldr	r2, [r3, #4]
 800ecb6:	4b14      	ldr	r3, [pc, #80]	; (800ed08 <vPortFree+0xb8>)
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	4013      	ands	r3, r2
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d01e      	beq.n	800ecfe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ecc0:	693b      	ldr	r3, [r7, #16]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d11a      	bne.n	800ecfe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ecc8:	693b      	ldr	r3, [r7, #16]
 800ecca:	685a      	ldr	r2, [r3, #4]
 800eccc:	4b0e      	ldr	r3, [pc, #56]	; (800ed08 <vPortFree+0xb8>)
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	43db      	mvns	r3, r3
 800ecd2:	401a      	ands	r2, r3
 800ecd4:	693b      	ldr	r3, [r7, #16]
 800ecd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ecd8:	f7fe fb72 	bl	800d3c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ecdc:	693b      	ldr	r3, [r7, #16]
 800ecde:	685a      	ldr	r2, [r3, #4]
 800ece0:	4b0a      	ldr	r3, [pc, #40]	; (800ed0c <vPortFree+0xbc>)
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	4413      	add	r3, r2
 800ece6:	4a09      	ldr	r2, [pc, #36]	; (800ed0c <vPortFree+0xbc>)
 800ece8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ecea:	6938      	ldr	r0, [r7, #16]
 800ecec:	f000 f874 	bl	800edd8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ecf0:	4b07      	ldr	r3, [pc, #28]	; (800ed10 <vPortFree+0xc0>)
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	3301      	adds	r3, #1
 800ecf6:	4a06      	ldr	r2, [pc, #24]	; (800ed10 <vPortFree+0xc0>)
 800ecf8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ecfa:	f7fe fb6f 	bl	800d3dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ecfe:	bf00      	nop
 800ed00:	3718      	adds	r7, #24
 800ed02:	46bd      	mov	sp, r7
 800ed04:	bd80      	pop	{r7, pc}
 800ed06:	bf00      	nop
 800ed08:	2000576c 	.word	0x2000576c
 800ed0c:	2000575c 	.word	0x2000575c
 800ed10:	20005768 	.word	0x20005768

0800ed14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ed14:	b480      	push	{r7}
 800ed16:	b085      	sub	sp, #20
 800ed18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ed1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ed1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ed20:	4b27      	ldr	r3, [pc, #156]	; (800edc0 <prvHeapInit+0xac>)
 800ed22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	f003 0307 	and.w	r3, r3, #7
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d00c      	beq.n	800ed48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	3307      	adds	r3, #7
 800ed32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	f023 0307 	bic.w	r3, r3, #7
 800ed3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ed3c:	68ba      	ldr	r2, [r7, #8]
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	1ad3      	subs	r3, r2, r3
 800ed42:	4a1f      	ldr	r2, [pc, #124]	; (800edc0 <prvHeapInit+0xac>)
 800ed44:	4413      	add	r3, r2
 800ed46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ed4c:	4a1d      	ldr	r2, [pc, #116]	; (800edc4 <prvHeapInit+0xb0>)
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ed52:	4b1c      	ldr	r3, [pc, #112]	; (800edc4 <prvHeapInit+0xb0>)
 800ed54:	2200      	movs	r2, #0
 800ed56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	68ba      	ldr	r2, [r7, #8]
 800ed5c:	4413      	add	r3, r2
 800ed5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ed60:	2208      	movs	r2, #8
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	1a9b      	subs	r3, r3, r2
 800ed66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	f023 0307 	bic.w	r3, r3, #7
 800ed6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	4a15      	ldr	r2, [pc, #84]	; (800edc8 <prvHeapInit+0xb4>)
 800ed74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ed76:	4b14      	ldr	r3, [pc, #80]	; (800edc8 <prvHeapInit+0xb4>)
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ed7e:	4b12      	ldr	r3, [pc, #72]	; (800edc8 <prvHeapInit+0xb4>)
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	2200      	movs	r2, #0
 800ed84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ed8a:	683b      	ldr	r3, [r7, #0]
 800ed8c:	68fa      	ldr	r2, [r7, #12]
 800ed8e:	1ad2      	subs	r2, r2, r3
 800ed90:	683b      	ldr	r3, [r7, #0]
 800ed92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ed94:	4b0c      	ldr	r3, [pc, #48]	; (800edc8 <prvHeapInit+0xb4>)
 800ed96:	681a      	ldr	r2, [r3, #0]
 800ed98:	683b      	ldr	r3, [r7, #0]
 800ed9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ed9c:	683b      	ldr	r3, [r7, #0]
 800ed9e:	685b      	ldr	r3, [r3, #4]
 800eda0:	4a0a      	ldr	r2, [pc, #40]	; (800edcc <prvHeapInit+0xb8>)
 800eda2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eda4:	683b      	ldr	r3, [r7, #0]
 800eda6:	685b      	ldr	r3, [r3, #4]
 800eda8:	4a09      	ldr	r2, [pc, #36]	; (800edd0 <prvHeapInit+0xbc>)
 800edaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800edac:	4b09      	ldr	r3, [pc, #36]	; (800edd4 <prvHeapInit+0xc0>)
 800edae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800edb2:	601a      	str	r2, [r3, #0]
}
 800edb4:	bf00      	nop
 800edb6:	3714      	adds	r7, #20
 800edb8:	46bd      	mov	sp, r7
 800edba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edbe:	4770      	bx	lr
 800edc0:	20001b50 	.word	0x20001b50
 800edc4:	20005750 	.word	0x20005750
 800edc8:	20005758 	.word	0x20005758
 800edcc:	20005760 	.word	0x20005760
 800edd0:	2000575c 	.word	0x2000575c
 800edd4:	2000576c 	.word	0x2000576c

0800edd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800edd8:	b480      	push	{r7}
 800edda:	b085      	sub	sp, #20
 800eddc:	af00      	add	r7, sp, #0
 800edde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ede0:	4b28      	ldr	r3, [pc, #160]	; (800ee84 <prvInsertBlockIntoFreeList+0xac>)
 800ede2:	60fb      	str	r3, [r7, #12]
 800ede4:	e002      	b.n	800edec <prvInsertBlockIntoFreeList+0x14>
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	60fb      	str	r3, [r7, #12]
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	687a      	ldr	r2, [r7, #4]
 800edf2:	429a      	cmp	r2, r3
 800edf4:	d8f7      	bhi.n	800ede6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	685b      	ldr	r3, [r3, #4]
 800edfe:	68ba      	ldr	r2, [r7, #8]
 800ee00:	4413      	add	r3, r2
 800ee02:	687a      	ldr	r2, [r7, #4]
 800ee04:	429a      	cmp	r2, r3
 800ee06:	d108      	bne.n	800ee1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	685a      	ldr	r2, [r3, #4]
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	685b      	ldr	r3, [r3, #4]
 800ee10:	441a      	add	r2, r3
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	685b      	ldr	r3, [r3, #4]
 800ee22:	68ba      	ldr	r2, [r7, #8]
 800ee24:	441a      	add	r2, r3
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	429a      	cmp	r2, r3
 800ee2c:	d118      	bne.n	800ee60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	681a      	ldr	r2, [r3, #0]
 800ee32:	4b15      	ldr	r3, [pc, #84]	; (800ee88 <prvInsertBlockIntoFreeList+0xb0>)
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	429a      	cmp	r2, r3
 800ee38:	d00d      	beq.n	800ee56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	685a      	ldr	r2, [r3, #4]
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	685b      	ldr	r3, [r3, #4]
 800ee44:	441a      	add	r2, r3
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	681a      	ldr	r2, [r3, #0]
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	601a      	str	r2, [r3, #0]
 800ee54:	e008      	b.n	800ee68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ee56:	4b0c      	ldr	r3, [pc, #48]	; (800ee88 <prvInsertBlockIntoFreeList+0xb0>)
 800ee58:	681a      	ldr	r2, [r3, #0]
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	601a      	str	r2, [r3, #0]
 800ee5e:	e003      	b.n	800ee68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	681a      	ldr	r2, [r3, #0]
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ee68:	68fa      	ldr	r2, [r7, #12]
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	429a      	cmp	r2, r3
 800ee6e:	d002      	beq.n	800ee76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	687a      	ldr	r2, [r7, #4]
 800ee74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ee76:	bf00      	nop
 800ee78:	3714      	adds	r7, #20
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee80:	4770      	bx	lr
 800ee82:	bf00      	nop
 800ee84:	20005750 	.word	0x20005750
 800ee88:	20005758 	.word	0x20005758

0800ee8c <__errno>:
 800ee8c:	4b01      	ldr	r3, [pc, #4]	; (800ee94 <__errno+0x8>)
 800ee8e:	6818      	ldr	r0, [r3, #0]
 800ee90:	4770      	bx	lr
 800ee92:	bf00      	nop
 800ee94:	20000014 	.word	0x20000014

0800ee98 <__libc_init_array>:
 800ee98:	b570      	push	{r4, r5, r6, lr}
 800ee9a:	4d0d      	ldr	r5, [pc, #52]	; (800eed0 <__libc_init_array+0x38>)
 800ee9c:	4c0d      	ldr	r4, [pc, #52]	; (800eed4 <__libc_init_array+0x3c>)
 800ee9e:	1b64      	subs	r4, r4, r5
 800eea0:	10a4      	asrs	r4, r4, #2
 800eea2:	2600      	movs	r6, #0
 800eea4:	42a6      	cmp	r6, r4
 800eea6:	d109      	bne.n	800eebc <__libc_init_array+0x24>
 800eea8:	4d0b      	ldr	r5, [pc, #44]	; (800eed8 <__libc_init_array+0x40>)
 800eeaa:	4c0c      	ldr	r4, [pc, #48]	; (800eedc <__libc_init_array+0x44>)
 800eeac:	f000 fd08 	bl	800f8c0 <_init>
 800eeb0:	1b64      	subs	r4, r4, r5
 800eeb2:	10a4      	asrs	r4, r4, #2
 800eeb4:	2600      	movs	r6, #0
 800eeb6:	42a6      	cmp	r6, r4
 800eeb8:	d105      	bne.n	800eec6 <__libc_init_array+0x2e>
 800eeba:	bd70      	pop	{r4, r5, r6, pc}
 800eebc:	f855 3b04 	ldr.w	r3, [r5], #4
 800eec0:	4798      	blx	r3
 800eec2:	3601      	adds	r6, #1
 800eec4:	e7ee      	b.n	800eea4 <__libc_init_array+0xc>
 800eec6:	f855 3b04 	ldr.w	r3, [r5], #4
 800eeca:	4798      	blx	r3
 800eecc:	3601      	adds	r6, #1
 800eece:	e7f2      	b.n	800eeb6 <__libc_init_array+0x1e>
 800eed0:	0800fb90 	.word	0x0800fb90
 800eed4:	0800fb90 	.word	0x0800fb90
 800eed8:	0800fb90 	.word	0x0800fb90
 800eedc:	0800fb94 	.word	0x0800fb94

0800eee0 <__retarget_lock_acquire_recursive>:
 800eee0:	4770      	bx	lr

0800eee2 <__retarget_lock_release_recursive>:
 800eee2:	4770      	bx	lr

0800eee4 <malloc>:
 800eee4:	4b02      	ldr	r3, [pc, #8]	; (800eef0 <malloc+0xc>)
 800eee6:	4601      	mov	r1, r0
 800eee8:	6818      	ldr	r0, [r3, #0]
 800eeea:	f000 b88d 	b.w	800f008 <_malloc_r>
 800eeee:	bf00      	nop
 800eef0:	20000014 	.word	0x20000014

0800eef4 <free>:
 800eef4:	4b02      	ldr	r3, [pc, #8]	; (800ef00 <free+0xc>)
 800eef6:	4601      	mov	r1, r0
 800eef8:	6818      	ldr	r0, [r3, #0]
 800eefa:	f000 b819 	b.w	800ef30 <_free_r>
 800eefe:	bf00      	nop
 800ef00:	20000014 	.word	0x20000014

0800ef04 <memcpy>:
 800ef04:	440a      	add	r2, r1
 800ef06:	4291      	cmp	r1, r2
 800ef08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ef0c:	d100      	bne.n	800ef10 <memcpy+0xc>
 800ef0e:	4770      	bx	lr
 800ef10:	b510      	push	{r4, lr}
 800ef12:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef16:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ef1a:	4291      	cmp	r1, r2
 800ef1c:	d1f9      	bne.n	800ef12 <memcpy+0xe>
 800ef1e:	bd10      	pop	{r4, pc}

0800ef20 <memset>:
 800ef20:	4402      	add	r2, r0
 800ef22:	4603      	mov	r3, r0
 800ef24:	4293      	cmp	r3, r2
 800ef26:	d100      	bne.n	800ef2a <memset+0xa>
 800ef28:	4770      	bx	lr
 800ef2a:	f803 1b01 	strb.w	r1, [r3], #1
 800ef2e:	e7f9      	b.n	800ef24 <memset+0x4>

0800ef30 <_free_r>:
 800ef30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ef32:	2900      	cmp	r1, #0
 800ef34:	d044      	beq.n	800efc0 <_free_r+0x90>
 800ef36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef3a:	9001      	str	r0, [sp, #4]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	f1a1 0404 	sub.w	r4, r1, #4
 800ef42:	bfb8      	it	lt
 800ef44:	18e4      	addlt	r4, r4, r3
 800ef46:	f000 f96d 	bl	800f224 <__malloc_lock>
 800ef4a:	4a1e      	ldr	r2, [pc, #120]	; (800efc4 <_free_r+0x94>)
 800ef4c:	9801      	ldr	r0, [sp, #4]
 800ef4e:	6813      	ldr	r3, [r2, #0]
 800ef50:	b933      	cbnz	r3, 800ef60 <_free_r+0x30>
 800ef52:	6063      	str	r3, [r4, #4]
 800ef54:	6014      	str	r4, [r2, #0]
 800ef56:	b003      	add	sp, #12
 800ef58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ef5c:	f000 b968 	b.w	800f230 <__malloc_unlock>
 800ef60:	42a3      	cmp	r3, r4
 800ef62:	d908      	bls.n	800ef76 <_free_r+0x46>
 800ef64:	6825      	ldr	r5, [r4, #0]
 800ef66:	1961      	adds	r1, r4, r5
 800ef68:	428b      	cmp	r3, r1
 800ef6a:	bf01      	itttt	eq
 800ef6c:	6819      	ldreq	r1, [r3, #0]
 800ef6e:	685b      	ldreq	r3, [r3, #4]
 800ef70:	1949      	addeq	r1, r1, r5
 800ef72:	6021      	streq	r1, [r4, #0]
 800ef74:	e7ed      	b.n	800ef52 <_free_r+0x22>
 800ef76:	461a      	mov	r2, r3
 800ef78:	685b      	ldr	r3, [r3, #4]
 800ef7a:	b10b      	cbz	r3, 800ef80 <_free_r+0x50>
 800ef7c:	42a3      	cmp	r3, r4
 800ef7e:	d9fa      	bls.n	800ef76 <_free_r+0x46>
 800ef80:	6811      	ldr	r1, [r2, #0]
 800ef82:	1855      	adds	r5, r2, r1
 800ef84:	42a5      	cmp	r5, r4
 800ef86:	d10b      	bne.n	800efa0 <_free_r+0x70>
 800ef88:	6824      	ldr	r4, [r4, #0]
 800ef8a:	4421      	add	r1, r4
 800ef8c:	1854      	adds	r4, r2, r1
 800ef8e:	42a3      	cmp	r3, r4
 800ef90:	6011      	str	r1, [r2, #0]
 800ef92:	d1e0      	bne.n	800ef56 <_free_r+0x26>
 800ef94:	681c      	ldr	r4, [r3, #0]
 800ef96:	685b      	ldr	r3, [r3, #4]
 800ef98:	6053      	str	r3, [r2, #4]
 800ef9a:	4421      	add	r1, r4
 800ef9c:	6011      	str	r1, [r2, #0]
 800ef9e:	e7da      	b.n	800ef56 <_free_r+0x26>
 800efa0:	d902      	bls.n	800efa8 <_free_r+0x78>
 800efa2:	230c      	movs	r3, #12
 800efa4:	6003      	str	r3, [r0, #0]
 800efa6:	e7d6      	b.n	800ef56 <_free_r+0x26>
 800efa8:	6825      	ldr	r5, [r4, #0]
 800efaa:	1961      	adds	r1, r4, r5
 800efac:	428b      	cmp	r3, r1
 800efae:	bf04      	itt	eq
 800efb0:	6819      	ldreq	r1, [r3, #0]
 800efb2:	685b      	ldreq	r3, [r3, #4]
 800efb4:	6063      	str	r3, [r4, #4]
 800efb6:	bf04      	itt	eq
 800efb8:	1949      	addeq	r1, r1, r5
 800efba:	6021      	streq	r1, [r4, #0]
 800efbc:	6054      	str	r4, [r2, #4]
 800efbe:	e7ca      	b.n	800ef56 <_free_r+0x26>
 800efc0:	b003      	add	sp, #12
 800efc2:	bd30      	pop	{r4, r5, pc}
 800efc4:	20005774 	.word	0x20005774

0800efc8 <sbrk_aligned>:
 800efc8:	b570      	push	{r4, r5, r6, lr}
 800efca:	4e0e      	ldr	r6, [pc, #56]	; (800f004 <sbrk_aligned+0x3c>)
 800efcc:	460c      	mov	r4, r1
 800efce:	6831      	ldr	r1, [r6, #0]
 800efd0:	4605      	mov	r5, r0
 800efd2:	b911      	cbnz	r1, 800efda <sbrk_aligned+0x12>
 800efd4:	f000 f8f6 	bl	800f1c4 <_sbrk_r>
 800efd8:	6030      	str	r0, [r6, #0]
 800efda:	4621      	mov	r1, r4
 800efdc:	4628      	mov	r0, r5
 800efde:	f000 f8f1 	bl	800f1c4 <_sbrk_r>
 800efe2:	1c43      	adds	r3, r0, #1
 800efe4:	d00a      	beq.n	800effc <sbrk_aligned+0x34>
 800efe6:	1cc4      	adds	r4, r0, #3
 800efe8:	f024 0403 	bic.w	r4, r4, #3
 800efec:	42a0      	cmp	r0, r4
 800efee:	d007      	beq.n	800f000 <sbrk_aligned+0x38>
 800eff0:	1a21      	subs	r1, r4, r0
 800eff2:	4628      	mov	r0, r5
 800eff4:	f000 f8e6 	bl	800f1c4 <_sbrk_r>
 800eff8:	3001      	adds	r0, #1
 800effa:	d101      	bne.n	800f000 <sbrk_aligned+0x38>
 800effc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800f000:	4620      	mov	r0, r4
 800f002:	bd70      	pop	{r4, r5, r6, pc}
 800f004:	20005778 	.word	0x20005778

0800f008 <_malloc_r>:
 800f008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f00c:	1ccd      	adds	r5, r1, #3
 800f00e:	f025 0503 	bic.w	r5, r5, #3
 800f012:	3508      	adds	r5, #8
 800f014:	2d0c      	cmp	r5, #12
 800f016:	bf38      	it	cc
 800f018:	250c      	movcc	r5, #12
 800f01a:	2d00      	cmp	r5, #0
 800f01c:	4607      	mov	r7, r0
 800f01e:	db01      	blt.n	800f024 <_malloc_r+0x1c>
 800f020:	42a9      	cmp	r1, r5
 800f022:	d905      	bls.n	800f030 <_malloc_r+0x28>
 800f024:	230c      	movs	r3, #12
 800f026:	603b      	str	r3, [r7, #0]
 800f028:	2600      	movs	r6, #0
 800f02a:	4630      	mov	r0, r6
 800f02c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f030:	4e2e      	ldr	r6, [pc, #184]	; (800f0ec <_malloc_r+0xe4>)
 800f032:	f000 f8f7 	bl	800f224 <__malloc_lock>
 800f036:	6833      	ldr	r3, [r6, #0]
 800f038:	461c      	mov	r4, r3
 800f03a:	bb34      	cbnz	r4, 800f08a <_malloc_r+0x82>
 800f03c:	4629      	mov	r1, r5
 800f03e:	4638      	mov	r0, r7
 800f040:	f7ff ffc2 	bl	800efc8 <sbrk_aligned>
 800f044:	1c43      	adds	r3, r0, #1
 800f046:	4604      	mov	r4, r0
 800f048:	d14d      	bne.n	800f0e6 <_malloc_r+0xde>
 800f04a:	6834      	ldr	r4, [r6, #0]
 800f04c:	4626      	mov	r6, r4
 800f04e:	2e00      	cmp	r6, #0
 800f050:	d140      	bne.n	800f0d4 <_malloc_r+0xcc>
 800f052:	6823      	ldr	r3, [r4, #0]
 800f054:	4631      	mov	r1, r6
 800f056:	4638      	mov	r0, r7
 800f058:	eb04 0803 	add.w	r8, r4, r3
 800f05c:	f000 f8b2 	bl	800f1c4 <_sbrk_r>
 800f060:	4580      	cmp	r8, r0
 800f062:	d13a      	bne.n	800f0da <_malloc_r+0xd2>
 800f064:	6821      	ldr	r1, [r4, #0]
 800f066:	3503      	adds	r5, #3
 800f068:	1a6d      	subs	r5, r5, r1
 800f06a:	f025 0503 	bic.w	r5, r5, #3
 800f06e:	3508      	adds	r5, #8
 800f070:	2d0c      	cmp	r5, #12
 800f072:	bf38      	it	cc
 800f074:	250c      	movcc	r5, #12
 800f076:	4629      	mov	r1, r5
 800f078:	4638      	mov	r0, r7
 800f07a:	f7ff ffa5 	bl	800efc8 <sbrk_aligned>
 800f07e:	3001      	adds	r0, #1
 800f080:	d02b      	beq.n	800f0da <_malloc_r+0xd2>
 800f082:	6823      	ldr	r3, [r4, #0]
 800f084:	442b      	add	r3, r5
 800f086:	6023      	str	r3, [r4, #0]
 800f088:	e00e      	b.n	800f0a8 <_malloc_r+0xa0>
 800f08a:	6822      	ldr	r2, [r4, #0]
 800f08c:	1b52      	subs	r2, r2, r5
 800f08e:	d41e      	bmi.n	800f0ce <_malloc_r+0xc6>
 800f090:	2a0b      	cmp	r2, #11
 800f092:	d916      	bls.n	800f0c2 <_malloc_r+0xba>
 800f094:	1961      	adds	r1, r4, r5
 800f096:	42a3      	cmp	r3, r4
 800f098:	6025      	str	r5, [r4, #0]
 800f09a:	bf18      	it	ne
 800f09c:	6059      	strne	r1, [r3, #4]
 800f09e:	6863      	ldr	r3, [r4, #4]
 800f0a0:	bf08      	it	eq
 800f0a2:	6031      	streq	r1, [r6, #0]
 800f0a4:	5162      	str	r2, [r4, r5]
 800f0a6:	604b      	str	r3, [r1, #4]
 800f0a8:	4638      	mov	r0, r7
 800f0aa:	f104 060b 	add.w	r6, r4, #11
 800f0ae:	f000 f8bf 	bl	800f230 <__malloc_unlock>
 800f0b2:	f026 0607 	bic.w	r6, r6, #7
 800f0b6:	1d23      	adds	r3, r4, #4
 800f0b8:	1af2      	subs	r2, r6, r3
 800f0ba:	d0b6      	beq.n	800f02a <_malloc_r+0x22>
 800f0bc:	1b9b      	subs	r3, r3, r6
 800f0be:	50a3      	str	r3, [r4, r2]
 800f0c0:	e7b3      	b.n	800f02a <_malloc_r+0x22>
 800f0c2:	6862      	ldr	r2, [r4, #4]
 800f0c4:	42a3      	cmp	r3, r4
 800f0c6:	bf0c      	ite	eq
 800f0c8:	6032      	streq	r2, [r6, #0]
 800f0ca:	605a      	strne	r2, [r3, #4]
 800f0cc:	e7ec      	b.n	800f0a8 <_malloc_r+0xa0>
 800f0ce:	4623      	mov	r3, r4
 800f0d0:	6864      	ldr	r4, [r4, #4]
 800f0d2:	e7b2      	b.n	800f03a <_malloc_r+0x32>
 800f0d4:	4634      	mov	r4, r6
 800f0d6:	6876      	ldr	r6, [r6, #4]
 800f0d8:	e7b9      	b.n	800f04e <_malloc_r+0x46>
 800f0da:	230c      	movs	r3, #12
 800f0dc:	603b      	str	r3, [r7, #0]
 800f0de:	4638      	mov	r0, r7
 800f0e0:	f000 f8a6 	bl	800f230 <__malloc_unlock>
 800f0e4:	e7a1      	b.n	800f02a <_malloc_r+0x22>
 800f0e6:	6025      	str	r5, [r4, #0]
 800f0e8:	e7de      	b.n	800f0a8 <_malloc_r+0xa0>
 800f0ea:	bf00      	nop
 800f0ec:	20005774 	.word	0x20005774

0800f0f0 <cleanup_glue>:
 800f0f0:	b538      	push	{r3, r4, r5, lr}
 800f0f2:	460c      	mov	r4, r1
 800f0f4:	6809      	ldr	r1, [r1, #0]
 800f0f6:	4605      	mov	r5, r0
 800f0f8:	b109      	cbz	r1, 800f0fe <cleanup_glue+0xe>
 800f0fa:	f7ff fff9 	bl	800f0f0 <cleanup_glue>
 800f0fe:	4621      	mov	r1, r4
 800f100:	4628      	mov	r0, r5
 800f102:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f106:	f7ff bf13 	b.w	800ef30 <_free_r>
	...

0800f10c <_reclaim_reent>:
 800f10c:	4b2c      	ldr	r3, [pc, #176]	; (800f1c0 <_reclaim_reent+0xb4>)
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	4283      	cmp	r3, r0
 800f112:	b570      	push	{r4, r5, r6, lr}
 800f114:	4604      	mov	r4, r0
 800f116:	d051      	beq.n	800f1bc <_reclaim_reent+0xb0>
 800f118:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f11a:	b143      	cbz	r3, 800f12e <_reclaim_reent+0x22>
 800f11c:	68db      	ldr	r3, [r3, #12]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d14a      	bne.n	800f1b8 <_reclaim_reent+0xac>
 800f122:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f124:	6819      	ldr	r1, [r3, #0]
 800f126:	b111      	cbz	r1, 800f12e <_reclaim_reent+0x22>
 800f128:	4620      	mov	r0, r4
 800f12a:	f7ff ff01 	bl	800ef30 <_free_r>
 800f12e:	6961      	ldr	r1, [r4, #20]
 800f130:	b111      	cbz	r1, 800f138 <_reclaim_reent+0x2c>
 800f132:	4620      	mov	r0, r4
 800f134:	f7ff fefc 	bl	800ef30 <_free_r>
 800f138:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f13a:	b111      	cbz	r1, 800f142 <_reclaim_reent+0x36>
 800f13c:	4620      	mov	r0, r4
 800f13e:	f7ff fef7 	bl	800ef30 <_free_r>
 800f142:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f144:	b111      	cbz	r1, 800f14c <_reclaim_reent+0x40>
 800f146:	4620      	mov	r0, r4
 800f148:	f7ff fef2 	bl	800ef30 <_free_r>
 800f14c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f14e:	b111      	cbz	r1, 800f156 <_reclaim_reent+0x4a>
 800f150:	4620      	mov	r0, r4
 800f152:	f7ff feed 	bl	800ef30 <_free_r>
 800f156:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f158:	b111      	cbz	r1, 800f160 <_reclaim_reent+0x54>
 800f15a:	4620      	mov	r0, r4
 800f15c:	f7ff fee8 	bl	800ef30 <_free_r>
 800f160:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f162:	b111      	cbz	r1, 800f16a <_reclaim_reent+0x5e>
 800f164:	4620      	mov	r0, r4
 800f166:	f7ff fee3 	bl	800ef30 <_free_r>
 800f16a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f16c:	b111      	cbz	r1, 800f174 <_reclaim_reent+0x68>
 800f16e:	4620      	mov	r0, r4
 800f170:	f7ff fede 	bl	800ef30 <_free_r>
 800f174:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f176:	b111      	cbz	r1, 800f17e <_reclaim_reent+0x72>
 800f178:	4620      	mov	r0, r4
 800f17a:	f7ff fed9 	bl	800ef30 <_free_r>
 800f17e:	69a3      	ldr	r3, [r4, #24]
 800f180:	b1e3      	cbz	r3, 800f1bc <_reclaim_reent+0xb0>
 800f182:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f184:	4620      	mov	r0, r4
 800f186:	4798      	blx	r3
 800f188:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f18a:	b1b9      	cbz	r1, 800f1bc <_reclaim_reent+0xb0>
 800f18c:	4620      	mov	r0, r4
 800f18e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f192:	f7ff bfad 	b.w	800f0f0 <cleanup_glue>
 800f196:	5949      	ldr	r1, [r1, r5]
 800f198:	b941      	cbnz	r1, 800f1ac <_reclaim_reent+0xa0>
 800f19a:	3504      	adds	r5, #4
 800f19c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f19e:	2d80      	cmp	r5, #128	; 0x80
 800f1a0:	68d9      	ldr	r1, [r3, #12]
 800f1a2:	d1f8      	bne.n	800f196 <_reclaim_reent+0x8a>
 800f1a4:	4620      	mov	r0, r4
 800f1a6:	f7ff fec3 	bl	800ef30 <_free_r>
 800f1aa:	e7ba      	b.n	800f122 <_reclaim_reent+0x16>
 800f1ac:	680e      	ldr	r6, [r1, #0]
 800f1ae:	4620      	mov	r0, r4
 800f1b0:	f7ff febe 	bl	800ef30 <_free_r>
 800f1b4:	4631      	mov	r1, r6
 800f1b6:	e7ef      	b.n	800f198 <_reclaim_reent+0x8c>
 800f1b8:	2500      	movs	r5, #0
 800f1ba:	e7ef      	b.n	800f19c <_reclaim_reent+0x90>
 800f1bc:	bd70      	pop	{r4, r5, r6, pc}
 800f1be:	bf00      	nop
 800f1c0:	20000014 	.word	0x20000014

0800f1c4 <_sbrk_r>:
 800f1c4:	b538      	push	{r3, r4, r5, lr}
 800f1c6:	4d06      	ldr	r5, [pc, #24]	; (800f1e0 <_sbrk_r+0x1c>)
 800f1c8:	2300      	movs	r3, #0
 800f1ca:	4604      	mov	r4, r0
 800f1cc:	4608      	mov	r0, r1
 800f1ce:	602b      	str	r3, [r5, #0]
 800f1d0:	f7f2 fa64 	bl	800169c <_sbrk>
 800f1d4:	1c43      	adds	r3, r0, #1
 800f1d6:	d102      	bne.n	800f1de <_sbrk_r+0x1a>
 800f1d8:	682b      	ldr	r3, [r5, #0]
 800f1da:	b103      	cbz	r3, 800f1de <_sbrk_r+0x1a>
 800f1dc:	6023      	str	r3, [r4, #0]
 800f1de:	bd38      	pop	{r3, r4, r5, pc}
 800f1e0:	2000577c 	.word	0x2000577c

0800f1e4 <siprintf>:
 800f1e4:	b40e      	push	{r1, r2, r3}
 800f1e6:	b500      	push	{lr}
 800f1e8:	b09c      	sub	sp, #112	; 0x70
 800f1ea:	ab1d      	add	r3, sp, #116	; 0x74
 800f1ec:	9002      	str	r0, [sp, #8]
 800f1ee:	9006      	str	r0, [sp, #24]
 800f1f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f1f4:	4809      	ldr	r0, [pc, #36]	; (800f21c <siprintf+0x38>)
 800f1f6:	9107      	str	r1, [sp, #28]
 800f1f8:	9104      	str	r1, [sp, #16]
 800f1fa:	4909      	ldr	r1, [pc, #36]	; (800f220 <siprintf+0x3c>)
 800f1fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800f200:	9105      	str	r1, [sp, #20]
 800f202:	6800      	ldr	r0, [r0, #0]
 800f204:	9301      	str	r3, [sp, #4]
 800f206:	a902      	add	r1, sp, #8
 800f208:	f000 f874 	bl	800f2f4 <_svfiprintf_r>
 800f20c:	9b02      	ldr	r3, [sp, #8]
 800f20e:	2200      	movs	r2, #0
 800f210:	701a      	strb	r2, [r3, #0]
 800f212:	b01c      	add	sp, #112	; 0x70
 800f214:	f85d eb04 	ldr.w	lr, [sp], #4
 800f218:	b003      	add	sp, #12
 800f21a:	4770      	bx	lr
 800f21c:	20000014 	.word	0x20000014
 800f220:	ffff0208 	.word	0xffff0208

0800f224 <__malloc_lock>:
 800f224:	4801      	ldr	r0, [pc, #4]	; (800f22c <__malloc_lock+0x8>)
 800f226:	f7ff be5b 	b.w	800eee0 <__retarget_lock_acquire_recursive>
 800f22a:	bf00      	nop
 800f22c:	20005770 	.word	0x20005770

0800f230 <__malloc_unlock>:
 800f230:	4801      	ldr	r0, [pc, #4]	; (800f238 <__malloc_unlock+0x8>)
 800f232:	f7ff be56 	b.w	800eee2 <__retarget_lock_release_recursive>
 800f236:	bf00      	nop
 800f238:	20005770 	.word	0x20005770

0800f23c <__ssputs_r>:
 800f23c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f240:	688e      	ldr	r6, [r1, #8]
 800f242:	429e      	cmp	r6, r3
 800f244:	4682      	mov	sl, r0
 800f246:	460c      	mov	r4, r1
 800f248:	4690      	mov	r8, r2
 800f24a:	461f      	mov	r7, r3
 800f24c:	d838      	bhi.n	800f2c0 <__ssputs_r+0x84>
 800f24e:	898a      	ldrh	r2, [r1, #12]
 800f250:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f254:	d032      	beq.n	800f2bc <__ssputs_r+0x80>
 800f256:	6825      	ldr	r5, [r4, #0]
 800f258:	6909      	ldr	r1, [r1, #16]
 800f25a:	eba5 0901 	sub.w	r9, r5, r1
 800f25e:	6965      	ldr	r5, [r4, #20]
 800f260:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f264:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f268:	3301      	adds	r3, #1
 800f26a:	444b      	add	r3, r9
 800f26c:	106d      	asrs	r5, r5, #1
 800f26e:	429d      	cmp	r5, r3
 800f270:	bf38      	it	cc
 800f272:	461d      	movcc	r5, r3
 800f274:	0553      	lsls	r3, r2, #21
 800f276:	d531      	bpl.n	800f2dc <__ssputs_r+0xa0>
 800f278:	4629      	mov	r1, r5
 800f27a:	f7ff fec5 	bl	800f008 <_malloc_r>
 800f27e:	4606      	mov	r6, r0
 800f280:	b950      	cbnz	r0, 800f298 <__ssputs_r+0x5c>
 800f282:	230c      	movs	r3, #12
 800f284:	f8ca 3000 	str.w	r3, [sl]
 800f288:	89a3      	ldrh	r3, [r4, #12]
 800f28a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f28e:	81a3      	strh	r3, [r4, #12]
 800f290:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f298:	6921      	ldr	r1, [r4, #16]
 800f29a:	464a      	mov	r2, r9
 800f29c:	f7ff fe32 	bl	800ef04 <memcpy>
 800f2a0:	89a3      	ldrh	r3, [r4, #12]
 800f2a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f2a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f2aa:	81a3      	strh	r3, [r4, #12]
 800f2ac:	6126      	str	r6, [r4, #16]
 800f2ae:	6165      	str	r5, [r4, #20]
 800f2b0:	444e      	add	r6, r9
 800f2b2:	eba5 0509 	sub.w	r5, r5, r9
 800f2b6:	6026      	str	r6, [r4, #0]
 800f2b8:	60a5      	str	r5, [r4, #8]
 800f2ba:	463e      	mov	r6, r7
 800f2bc:	42be      	cmp	r6, r7
 800f2be:	d900      	bls.n	800f2c2 <__ssputs_r+0x86>
 800f2c0:	463e      	mov	r6, r7
 800f2c2:	6820      	ldr	r0, [r4, #0]
 800f2c4:	4632      	mov	r2, r6
 800f2c6:	4641      	mov	r1, r8
 800f2c8:	f000 faa8 	bl	800f81c <memmove>
 800f2cc:	68a3      	ldr	r3, [r4, #8]
 800f2ce:	1b9b      	subs	r3, r3, r6
 800f2d0:	60a3      	str	r3, [r4, #8]
 800f2d2:	6823      	ldr	r3, [r4, #0]
 800f2d4:	4433      	add	r3, r6
 800f2d6:	6023      	str	r3, [r4, #0]
 800f2d8:	2000      	movs	r0, #0
 800f2da:	e7db      	b.n	800f294 <__ssputs_r+0x58>
 800f2dc:	462a      	mov	r2, r5
 800f2de:	f000 fab7 	bl	800f850 <_realloc_r>
 800f2e2:	4606      	mov	r6, r0
 800f2e4:	2800      	cmp	r0, #0
 800f2e6:	d1e1      	bne.n	800f2ac <__ssputs_r+0x70>
 800f2e8:	6921      	ldr	r1, [r4, #16]
 800f2ea:	4650      	mov	r0, sl
 800f2ec:	f7ff fe20 	bl	800ef30 <_free_r>
 800f2f0:	e7c7      	b.n	800f282 <__ssputs_r+0x46>
	...

0800f2f4 <_svfiprintf_r>:
 800f2f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2f8:	4698      	mov	r8, r3
 800f2fa:	898b      	ldrh	r3, [r1, #12]
 800f2fc:	061b      	lsls	r3, r3, #24
 800f2fe:	b09d      	sub	sp, #116	; 0x74
 800f300:	4607      	mov	r7, r0
 800f302:	460d      	mov	r5, r1
 800f304:	4614      	mov	r4, r2
 800f306:	d50e      	bpl.n	800f326 <_svfiprintf_r+0x32>
 800f308:	690b      	ldr	r3, [r1, #16]
 800f30a:	b963      	cbnz	r3, 800f326 <_svfiprintf_r+0x32>
 800f30c:	2140      	movs	r1, #64	; 0x40
 800f30e:	f7ff fe7b 	bl	800f008 <_malloc_r>
 800f312:	6028      	str	r0, [r5, #0]
 800f314:	6128      	str	r0, [r5, #16]
 800f316:	b920      	cbnz	r0, 800f322 <_svfiprintf_r+0x2e>
 800f318:	230c      	movs	r3, #12
 800f31a:	603b      	str	r3, [r7, #0]
 800f31c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f320:	e0d1      	b.n	800f4c6 <_svfiprintf_r+0x1d2>
 800f322:	2340      	movs	r3, #64	; 0x40
 800f324:	616b      	str	r3, [r5, #20]
 800f326:	2300      	movs	r3, #0
 800f328:	9309      	str	r3, [sp, #36]	; 0x24
 800f32a:	2320      	movs	r3, #32
 800f32c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f330:	f8cd 800c 	str.w	r8, [sp, #12]
 800f334:	2330      	movs	r3, #48	; 0x30
 800f336:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f4e0 <_svfiprintf_r+0x1ec>
 800f33a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f33e:	f04f 0901 	mov.w	r9, #1
 800f342:	4623      	mov	r3, r4
 800f344:	469a      	mov	sl, r3
 800f346:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f34a:	b10a      	cbz	r2, 800f350 <_svfiprintf_r+0x5c>
 800f34c:	2a25      	cmp	r2, #37	; 0x25
 800f34e:	d1f9      	bne.n	800f344 <_svfiprintf_r+0x50>
 800f350:	ebba 0b04 	subs.w	fp, sl, r4
 800f354:	d00b      	beq.n	800f36e <_svfiprintf_r+0x7a>
 800f356:	465b      	mov	r3, fp
 800f358:	4622      	mov	r2, r4
 800f35a:	4629      	mov	r1, r5
 800f35c:	4638      	mov	r0, r7
 800f35e:	f7ff ff6d 	bl	800f23c <__ssputs_r>
 800f362:	3001      	adds	r0, #1
 800f364:	f000 80aa 	beq.w	800f4bc <_svfiprintf_r+0x1c8>
 800f368:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f36a:	445a      	add	r2, fp
 800f36c:	9209      	str	r2, [sp, #36]	; 0x24
 800f36e:	f89a 3000 	ldrb.w	r3, [sl]
 800f372:	2b00      	cmp	r3, #0
 800f374:	f000 80a2 	beq.w	800f4bc <_svfiprintf_r+0x1c8>
 800f378:	2300      	movs	r3, #0
 800f37a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f37e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f382:	f10a 0a01 	add.w	sl, sl, #1
 800f386:	9304      	str	r3, [sp, #16]
 800f388:	9307      	str	r3, [sp, #28]
 800f38a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f38e:	931a      	str	r3, [sp, #104]	; 0x68
 800f390:	4654      	mov	r4, sl
 800f392:	2205      	movs	r2, #5
 800f394:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f398:	4851      	ldr	r0, [pc, #324]	; (800f4e0 <_svfiprintf_r+0x1ec>)
 800f39a:	f7f0 ff49 	bl	8000230 <memchr>
 800f39e:	9a04      	ldr	r2, [sp, #16]
 800f3a0:	b9d8      	cbnz	r0, 800f3da <_svfiprintf_r+0xe6>
 800f3a2:	06d0      	lsls	r0, r2, #27
 800f3a4:	bf44      	itt	mi
 800f3a6:	2320      	movmi	r3, #32
 800f3a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f3ac:	0711      	lsls	r1, r2, #28
 800f3ae:	bf44      	itt	mi
 800f3b0:	232b      	movmi	r3, #43	; 0x2b
 800f3b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f3b6:	f89a 3000 	ldrb.w	r3, [sl]
 800f3ba:	2b2a      	cmp	r3, #42	; 0x2a
 800f3bc:	d015      	beq.n	800f3ea <_svfiprintf_r+0xf6>
 800f3be:	9a07      	ldr	r2, [sp, #28]
 800f3c0:	4654      	mov	r4, sl
 800f3c2:	2000      	movs	r0, #0
 800f3c4:	f04f 0c0a 	mov.w	ip, #10
 800f3c8:	4621      	mov	r1, r4
 800f3ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f3ce:	3b30      	subs	r3, #48	; 0x30
 800f3d0:	2b09      	cmp	r3, #9
 800f3d2:	d94e      	bls.n	800f472 <_svfiprintf_r+0x17e>
 800f3d4:	b1b0      	cbz	r0, 800f404 <_svfiprintf_r+0x110>
 800f3d6:	9207      	str	r2, [sp, #28]
 800f3d8:	e014      	b.n	800f404 <_svfiprintf_r+0x110>
 800f3da:	eba0 0308 	sub.w	r3, r0, r8
 800f3de:	fa09 f303 	lsl.w	r3, r9, r3
 800f3e2:	4313      	orrs	r3, r2
 800f3e4:	9304      	str	r3, [sp, #16]
 800f3e6:	46a2      	mov	sl, r4
 800f3e8:	e7d2      	b.n	800f390 <_svfiprintf_r+0x9c>
 800f3ea:	9b03      	ldr	r3, [sp, #12]
 800f3ec:	1d19      	adds	r1, r3, #4
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	9103      	str	r1, [sp, #12]
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	bfbb      	ittet	lt
 800f3f6:	425b      	neglt	r3, r3
 800f3f8:	f042 0202 	orrlt.w	r2, r2, #2
 800f3fc:	9307      	strge	r3, [sp, #28]
 800f3fe:	9307      	strlt	r3, [sp, #28]
 800f400:	bfb8      	it	lt
 800f402:	9204      	strlt	r2, [sp, #16]
 800f404:	7823      	ldrb	r3, [r4, #0]
 800f406:	2b2e      	cmp	r3, #46	; 0x2e
 800f408:	d10c      	bne.n	800f424 <_svfiprintf_r+0x130>
 800f40a:	7863      	ldrb	r3, [r4, #1]
 800f40c:	2b2a      	cmp	r3, #42	; 0x2a
 800f40e:	d135      	bne.n	800f47c <_svfiprintf_r+0x188>
 800f410:	9b03      	ldr	r3, [sp, #12]
 800f412:	1d1a      	adds	r2, r3, #4
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	9203      	str	r2, [sp, #12]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	bfb8      	it	lt
 800f41c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f420:	3402      	adds	r4, #2
 800f422:	9305      	str	r3, [sp, #20]
 800f424:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f4f0 <_svfiprintf_r+0x1fc>
 800f428:	7821      	ldrb	r1, [r4, #0]
 800f42a:	2203      	movs	r2, #3
 800f42c:	4650      	mov	r0, sl
 800f42e:	f7f0 feff 	bl	8000230 <memchr>
 800f432:	b140      	cbz	r0, 800f446 <_svfiprintf_r+0x152>
 800f434:	2340      	movs	r3, #64	; 0x40
 800f436:	eba0 000a 	sub.w	r0, r0, sl
 800f43a:	fa03 f000 	lsl.w	r0, r3, r0
 800f43e:	9b04      	ldr	r3, [sp, #16]
 800f440:	4303      	orrs	r3, r0
 800f442:	3401      	adds	r4, #1
 800f444:	9304      	str	r3, [sp, #16]
 800f446:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f44a:	4826      	ldr	r0, [pc, #152]	; (800f4e4 <_svfiprintf_r+0x1f0>)
 800f44c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f450:	2206      	movs	r2, #6
 800f452:	f7f0 feed 	bl	8000230 <memchr>
 800f456:	2800      	cmp	r0, #0
 800f458:	d038      	beq.n	800f4cc <_svfiprintf_r+0x1d8>
 800f45a:	4b23      	ldr	r3, [pc, #140]	; (800f4e8 <_svfiprintf_r+0x1f4>)
 800f45c:	bb1b      	cbnz	r3, 800f4a6 <_svfiprintf_r+0x1b2>
 800f45e:	9b03      	ldr	r3, [sp, #12]
 800f460:	3307      	adds	r3, #7
 800f462:	f023 0307 	bic.w	r3, r3, #7
 800f466:	3308      	adds	r3, #8
 800f468:	9303      	str	r3, [sp, #12]
 800f46a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f46c:	4433      	add	r3, r6
 800f46e:	9309      	str	r3, [sp, #36]	; 0x24
 800f470:	e767      	b.n	800f342 <_svfiprintf_r+0x4e>
 800f472:	fb0c 3202 	mla	r2, ip, r2, r3
 800f476:	460c      	mov	r4, r1
 800f478:	2001      	movs	r0, #1
 800f47a:	e7a5      	b.n	800f3c8 <_svfiprintf_r+0xd4>
 800f47c:	2300      	movs	r3, #0
 800f47e:	3401      	adds	r4, #1
 800f480:	9305      	str	r3, [sp, #20]
 800f482:	4619      	mov	r1, r3
 800f484:	f04f 0c0a 	mov.w	ip, #10
 800f488:	4620      	mov	r0, r4
 800f48a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f48e:	3a30      	subs	r2, #48	; 0x30
 800f490:	2a09      	cmp	r2, #9
 800f492:	d903      	bls.n	800f49c <_svfiprintf_r+0x1a8>
 800f494:	2b00      	cmp	r3, #0
 800f496:	d0c5      	beq.n	800f424 <_svfiprintf_r+0x130>
 800f498:	9105      	str	r1, [sp, #20]
 800f49a:	e7c3      	b.n	800f424 <_svfiprintf_r+0x130>
 800f49c:	fb0c 2101 	mla	r1, ip, r1, r2
 800f4a0:	4604      	mov	r4, r0
 800f4a2:	2301      	movs	r3, #1
 800f4a4:	e7f0      	b.n	800f488 <_svfiprintf_r+0x194>
 800f4a6:	ab03      	add	r3, sp, #12
 800f4a8:	9300      	str	r3, [sp, #0]
 800f4aa:	462a      	mov	r2, r5
 800f4ac:	4b0f      	ldr	r3, [pc, #60]	; (800f4ec <_svfiprintf_r+0x1f8>)
 800f4ae:	a904      	add	r1, sp, #16
 800f4b0:	4638      	mov	r0, r7
 800f4b2:	f3af 8000 	nop.w
 800f4b6:	1c42      	adds	r2, r0, #1
 800f4b8:	4606      	mov	r6, r0
 800f4ba:	d1d6      	bne.n	800f46a <_svfiprintf_r+0x176>
 800f4bc:	89ab      	ldrh	r3, [r5, #12]
 800f4be:	065b      	lsls	r3, r3, #25
 800f4c0:	f53f af2c 	bmi.w	800f31c <_svfiprintf_r+0x28>
 800f4c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f4c6:	b01d      	add	sp, #116	; 0x74
 800f4c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4cc:	ab03      	add	r3, sp, #12
 800f4ce:	9300      	str	r3, [sp, #0]
 800f4d0:	462a      	mov	r2, r5
 800f4d2:	4b06      	ldr	r3, [pc, #24]	; (800f4ec <_svfiprintf_r+0x1f8>)
 800f4d4:	a904      	add	r1, sp, #16
 800f4d6:	4638      	mov	r0, r7
 800f4d8:	f000 f87a 	bl	800f5d0 <_printf_i>
 800f4dc:	e7eb      	b.n	800f4b6 <_svfiprintf_r+0x1c2>
 800f4de:	bf00      	nop
 800f4e0:	0800fb54 	.word	0x0800fb54
 800f4e4:	0800fb5e 	.word	0x0800fb5e
 800f4e8:	00000000 	.word	0x00000000
 800f4ec:	0800f23d 	.word	0x0800f23d
 800f4f0:	0800fb5a 	.word	0x0800fb5a

0800f4f4 <_printf_common>:
 800f4f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f4f8:	4616      	mov	r6, r2
 800f4fa:	4699      	mov	r9, r3
 800f4fc:	688a      	ldr	r2, [r1, #8]
 800f4fe:	690b      	ldr	r3, [r1, #16]
 800f500:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f504:	4293      	cmp	r3, r2
 800f506:	bfb8      	it	lt
 800f508:	4613      	movlt	r3, r2
 800f50a:	6033      	str	r3, [r6, #0]
 800f50c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f510:	4607      	mov	r7, r0
 800f512:	460c      	mov	r4, r1
 800f514:	b10a      	cbz	r2, 800f51a <_printf_common+0x26>
 800f516:	3301      	adds	r3, #1
 800f518:	6033      	str	r3, [r6, #0]
 800f51a:	6823      	ldr	r3, [r4, #0]
 800f51c:	0699      	lsls	r1, r3, #26
 800f51e:	bf42      	ittt	mi
 800f520:	6833      	ldrmi	r3, [r6, #0]
 800f522:	3302      	addmi	r3, #2
 800f524:	6033      	strmi	r3, [r6, #0]
 800f526:	6825      	ldr	r5, [r4, #0]
 800f528:	f015 0506 	ands.w	r5, r5, #6
 800f52c:	d106      	bne.n	800f53c <_printf_common+0x48>
 800f52e:	f104 0a19 	add.w	sl, r4, #25
 800f532:	68e3      	ldr	r3, [r4, #12]
 800f534:	6832      	ldr	r2, [r6, #0]
 800f536:	1a9b      	subs	r3, r3, r2
 800f538:	42ab      	cmp	r3, r5
 800f53a:	dc26      	bgt.n	800f58a <_printf_common+0x96>
 800f53c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f540:	1e13      	subs	r3, r2, #0
 800f542:	6822      	ldr	r2, [r4, #0]
 800f544:	bf18      	it	ne
 800f546:	2301      	movne	r3, #1
 800f548:	0692      	lsls	r2, r2, #26
 800f54a:	d42b      	bmi.n	800f5a4 <_printf_common+0xb0>
 800f54c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f550:	4649      	mov	r1, r9
 800f552:	4638      	mov	r0, r7
 800f554:	47c0      	blx	r8
 800f556:	3001      	adds	r0, #1
 800f558:	d01e      	beq.n	800f598 <_printf_common+0xa4>
 800f55a:	6823      	ldr	r3, [r4, #0]
 800f55c:	68e5      	ldr	r5, [r4, #12]
 800f55e:	6832      	ldr	r2, [r6, #0]
 800f560:	f003 0306 	and.w	r3, r3, #6
 800f564:	2b04      	cmp	r3, #4
 800f566:	bf08      	it	eq
 800f568:	1aad      	subeq	r5, r5, r2
 800f56a:	68a3      	ldr	r3, [r4, #8]
 800f56c:	6922      	ldr	r2, [r4, #16]
 800f56e:	bf0c      	ite	eq
 800f570:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f574:	2500      	movne	r5, #0
 800f576:	4293      	cmp	r3, r2
 800f578:	bfc4      	itt	gt
 800f57a:	1a9b      	subgt	r3, r3, r2
 800f57c:	18ed      	addgt	r5, r5, r3
 800f57e:	2600      	movs	r6, #0
 800f580:	341a      	adds	r4, #26
 800f582:	42b5      	cmp	r5, r6
 800f584:	d11a      	bne.n	800f5bc <_printf_common+0xc8>
 800f586:	2000      	movs	r0, #0
 800f588:	e008      	b.n	800f59c <_printf_common+0xa8>
 800f58a:	2301      	movs	r3, #1
 800f58c:	4652      	mov	r2, sl
 800f58e:	4649      	mov	r1, r9
 800f590:	4638      	mov	r0, r7
 800f592:	47c0      	blx	r8
 800f594:	3001      	adds	r0, #1
 800f596:	d103      	bne.n	800f5a0 <_printf_common+0xac>
 800f598:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f59c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5a0:	3501      	adds	r5, #1
 800f5a2:	e7c6      	b.n	800f532 <_printf_common+0x3e>
 800f5a4:	18e1      	adds	r1, r4, r3
 800f5a6:	1c5a      	adds	r2, r3, #1
 800f5a8:	2030      	movs	r0, #48	; 0x30
 800f5aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f5ae:	4422      	add	r2, r4
 800f5b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f5b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f5b8:	3302      	adds	r3, #2
 800f5ba:	e7c7      	b.n	800f54c <_printf_common+0x58>
 800f5bc:	2301      	movs	r3, #1
 800f5be:	4622      	mov	r2, r4
 800f5c0:	4649      	mov	r1, r9
 800f5c2:	4638      	mov	r0, r7
 800f5c4:	47c0      	blx	r8
 800f5c6:	3001      	adds	r0, #1
 800f5c8:	d0e6      	beq.n	800f598 <_printf_common+0xa4>
 800f5ca:	3601      	adds	r6, #1
 800f5cc:	e7d9      	b.n	800f582 <_printf_common+0x8e>
	...

0800f5d0 <_printf_i>:
 800f5d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f5d4:	7e0f      	ldrb	r7, [r1, #24]
 800f5d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f5d8:	2f78      	cmp	r7, #120	; 0x78
 800f5da:	4691      	mov	r9, r2
 800f5dc:	4680      	mov	r8, r0
 800f5de:	460c      	mov	r4, r1
 800f5e0:	469a      	mov	sl, r3
 800f5e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f5e6:	d807      	bhi.n	800f5f8 <_printf_i+0x28>
 800f5e8:	2f62      	cmp	r7, #98	; 0x62
 800f5ea:	d80a      	bhi.n	800f602 <_printf_i+0x32>
 800f5ec:	2f00      	cmp	r7, #0
 800f5ee:	f000 80d8 	beq.w	800f7a2 <_printf_i+0x1d2>
 800f5f2:	2f58      	cmp	r7, #88	; 0x58
 800f5f4:	f000 80a3 	beq.w	800f73e <_printf_i+0x16e>
 800f5f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f5fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f600:	e03a      	b.n	800f678 <_printf_i+0xa8>
 800f602:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f606:	2b15      	cmp	r3, #21
 800f608:	d8f6      	bhi.n	800f5f8 <_printf_i+0x28>
 800f60a:	a101      	add	r1, pc, #4	; (adr r1, 800f610 <_printf_i+0x40>)
 800f60c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f610:	0800f669 	.word	0x0800f669
 800f614:	0800f67d 	.word	0x0800f67d
 800f618:	0800f5f9 	.word	0x0800f5f9
 800f61c:	0800f5f9 	.word	0x0800f5f9
 800f620:	0800f5f9 	.word	0x0800f5f9
 800f624:	0800f5f9 	.word	0x0800f5f9
 800f628:	0800f67d 	.word	0x0800f67d
 800f62c:	0800f5f9 	.word	0x0800f5f9
 800f630:	0800f5f9 	.word	0x0800f5f9
 800f634:	0800f5f9 	.word	0x0800f5f9
 800f638:	0800f5f9 	.word	0x0800f5f9
 800f63c:	0800f789 	.word	0x0800f789
 800f640:	0800f6ad 	.word	0x0800f6ad
 800f644:	0800f76b 	.word	0x0800f76b
 800f648:	0800f5f9 	.word	0x0800f5f9
 800f64c:	0800f5f9 	.word	0x0800f5f9
 800f650:	0800f7ab 	.word	0x0800f7ab
 800f654:	0800f5f9 	.word	0x0800f5f9
 800f658:	0800f6ad 	.word	0x0800f6ad
 800f65c:	0800f5f9 	.word	0x0800f5f9
 800f660:	0800f5f9 	.word	0x0800f5f9
 800f664:	0800f773 	.word	0x0800f773
 800f668:	682b      	ldr	r3, [r5, #0]
 800f66a:	1d1a      	adds	r2, r3, #4
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	602a      	str	r2, [r5, #0]
 800f670:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f674:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f678:	2301      	movs	r3, #1
 800f67a:	e0a3      	b.n	800f7c4 <_printf_i+0x1f4>
 800f67c:	6820      	ldr	r0, [r4, #0]
 800f67e:	6829      	ldr	r1, [r5, #0]
 800f680:	0606      	lsls	r6, r0, #24
 800f682:	f101 0304 	add.w	r3, r1, #4
 800f686:	d50a      	bpl.n	800f69e <_printf_i+0xce>
 800f688:	680e      	ldr	r6, [r1, #0]
 800f68a:	602b      	str	r3, [r5, #0]
 800f68c:	2e00      	cmp	r6, #0
 800f68e:	da03      	bge.n	800f698 <_printf_i+0xc8>
 800f690:	232d      	movs	r3, #45	; 0x2d
 800f692:	4276      	negs	r6, r6
 800f694:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f698:	485e      	ldr	r0, [pc, #376]	; (800f814 <_printf_i+0x244>)
 800f69a:	230a      	movs	r3, #10
 800f69c:	e019      	b.n	800f6d2 <_printf_i+0x102>
 800f69e:	680e      	ldr	r6, [r1, #0]
 800f6a0:	602b      	str	r3, [r5, #0]
 800f6a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f6a6:	bf18      	it	ne
 800f6a8:	b236      	sxthne	r6, r6
 800f6aa:	e7ef      	b.n	800f68c <_printf_i+0xbc>
 800f6ac:	682b      	ldr	r3, [r5, #0]
 800f6ae:	6820      	ldr	r0, [r4, #0]
 800f6b0:	1d19      	adds	r1, r3, #4
 800f6b2:	6029      	str	r1, [r5, #0]
 800f6b4:	0601      	lsls	r1, r0, #24
 800f6b6:	d501      	bpl.n	800f6bc <_printf_i+0xec>
 800f6b8:	681e      	ldr	r6, [r3, #0]
 800f6ba:	e002      	b.n	800f6c2 <_printf_i+0xf2>
 800f6bc:	0646      	lsls	r6, r0, #25
 800f6be:	d5fb      	bpl.n	800f6b8 <_printf_i+0xe8>
 800f6c0:	881e      	ldrh	r6, [r3, #0]
 800f6c2:	4854      	ldr	r0, [pc, #336]	; (800f814 <_printf_i+0x244>)
 800f6c4:	2f6f      	cmp	r7, #111	; 0x6f
 800f6c6:	bf0c      	ite	eq
 800f6c8:	2308      	moveq	r3, #8
 800f6ca:	230a      	movne	r3, #10
 800f6cc:	2100      	movs	r1, #0
 800f6ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f6d2:	6865      	ldr	r5, [r4, #4]
 800f6d4:	60a5      	str	r5, [r4, #8]
 800f6d6:	2d00      	cmp	r5, #0
 800f6d8:	bfa2      	ittt	ge
 800f6da:	6821      	ldrge	r1, [r4, #0]
 800f6dc:	f021 0104 	bicge.w	r1, r1, #4
 800f6e0:	6021      	strge	r1, [r4, #0]
 800f6e2:	b90e      	cbnz	r6, 800f6e8 <_printf_i+0x118>
 800f6e4:	2d00      	cmp	r5, #0
 800f6e6:	d04d      	beq.n	800f784 <_printf_i+0x1b4>
 800f6e8:	4615      	mov	r5, r2
 800f6ea:	fbb6 f1f3 	udiv	r1, r6, r3
 800f6ee:	fb03 6711 	mls	r7, r3, r1, r6
 800f6f2:	5dc7      	ldrb	r7, [r0, r7]
 800f6f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f6f8:	4637      	mov	r7, r6
 800f6fa:	42bb      	cmp	r3, r7
 800f6fc:	460e      	mov	r6, r1
 800f6fe:	d9f4      	bls.n	800f6ea <_printf_i+0x11a>
 800f700:	2b08      	cmp	r3, #8
 800f702:	d10b      	bne.n	800f71c <_printf_i+0x14c>
 800f704:	6823      	ldr	r3, [r4, #0]
 800f706:	07de      	lsls	r6, r3, #31
 800f708:	d508      	bpl.n	800f71c <_printf_i+0x14c>
 800f70a:	6923      	ldr	r3, [r4, #16]
 800f70c:	6861      	ldr	r1, [r4, #4]
 800f70e:	4299      	cmp	r1, r3
 800f710:	bfde      	ittt	le
 800f712:	2330      	movle	r3, #48	; 0x30
 800f714:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f718:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800f71c:	1b52      	subs	r2, r2, r5
 800f71e:	6122      	str	r2, [r4, #16]
 800f720:	f8cd a000 	str.w	sl, [sp]
 800f724:	464b      	mov	r3, r9
 800f726:	aa03      	add	r2, sp, #12
 800f728:	4621      	mov	r1, r4
 800f72a:	4640      	mov	r0, r8
 800f72c:	f7ff fee2 	bl	800f4f4 <_printf_common>
 800f730:	3001      	adds	r0, #1
 800f732:	d14c      	bne.n	800f7ce <_printf_i+0x1fe>
 800f734:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f738:	b004      	add	sp, #16
 800f73a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f73e:	4835      	ldr	r0, [pc, #212]	; (800f814 <_printf_i+0x244>)
 800f740:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f744:	6829      	ldr	r1, [r5, #0]
 800f746:	6823      	ldr	r3, [r4, #0]
 800f748:	f851 6b04 	ldr.w	r6, [r1], #4
 800f74c:	6029      	str	r1, [r5, #0]
 800f74e:	061d      	lsls	r5, r3, #24
 800f750:	d514      	bpl.n	800f77c <_printf_i+0x1ac>
 800f752:	07df      	lsls	r7, r3, #31
 800f754:	bf44      	itt	mi
 800f756:	f043 0320 	orrmi.w	r3, r3, #32
 800f75a:	6023      	strmi	r3, [r4, #0]
 800f75c:	b91e      	cbnz	r6, 800f766 <_printf_i+0x196>
 800f75e:	6823      	ldr	r3, [r4, #0]
 800f760:	f023 0320 	bic.w	r3, r3, #32
 800f764:	6023      	str	r3, [r4, #0]
 800f766:	2310      	movs	r3, #16
 800f768:	e7b0      	b.n	800f6cc <_printf_i+0xfc>
 800f76a:	6823      	ldr	r3, [r4, #0]
 800f76c:	f043 0320 	orr.w	r3, r3, #32
 800f770:	6023      	str	r3, [r4, #0]
 800f772:	2378      	movs	r3, #120	; 0x78
 800f774:	4828      	ldr	r0, [pc, #160]	; (800f818 <_printf_i+0x248>)
 800f776:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f77a:	e7e3      	b.n	800f744 <_printf_i+0x174>
 800f77c:	0659      	lsls	r1, r3, #25
 800f77e:	bf48      	it	mi
 800f780:	b2b6      	uxthmi	r6, r6
 800f782:	e7e6      	b.n	800f752 <_printf_i+0x182>
 800f784:	4615      	mov	r5, r2
 800f786:	e7bb      	b.n	800f700 <_printf_i+0x130>
 800f788:	682b      	ldr	r3, [r5, #0]
 800f78a:	6826      	ldr	r6, [r4, #0]
 800f78c:	6961      	ldr	r1, [r4, #20]
 800f78e:	1d18      	adds	r0, r3, #4
 800f790:	6028      	str	r0, [r5, #0]
 800f792:	0635      	lsls	r5, r6, #24
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	d501      	bpl.n	800f79c <_printf_i+0x1cc>
 800f798:	6019      	str	r1, [r3, #0]
 800f79a:	e002      	b.n	800f7a2 <_printf_i+0x1d2>
 800f79c:	0670      	lsls	r0, r6, #25
 800f79e:	d5fb      	bpl.n	800f798 <_printf_i+0x1c8>
 800f7a0:	8019      	strh	r1, [r3, #0]
 800f7a2:	2300      	movs	r3, #0
 800f7a4:	6123      	str	r3, [r4, #16]
 800f7a6:	4615      	mov	r5, r2
 800f7a8:	e7ba      	b.n	800f720 <_printf_i+0x150>
 800f7aa:	682b      	ldr	r3, [r5, #0]
 800f7ac:	1d1a      	adds	r2, r3, #4
 800f7ae:	602a      	str	r2, [r5, #0]
 800f7b0:	681d      	ldr	r5, [r3, #0]
 800f7b2:	6862      	ldr	r2, [r4, #4]
 800f7b4:	2100      	movs	r1, #0
 800f7b6:	4628      	mov	r0, r5
 800f7b8:	f7f0 fd3a 	bl	8000230 <memchr>
 800f7bc:	b108      	cbz	r0, 800f7c2 <_printf_i+0x1f2>
 800f7be:	1b40      	subs	r0, r0, r5
 800f7c0:	6060      	str	r0, [r4, #4]
 800f7c2:	6863      	ldr	r3, [r4, #4]
 800f7c4:	6123      	str	r3, [r4, #16]
 800f7c6:	2300      	movs	r3, #0
 800f7c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f7cc:	e7a8      	b.n	800f720 <_printf_i+0x150>
 800f7ce:	6923      	ldr	r3, [r4, #16]
 800f7d0:	462a      	mov	r2, r5
 800f7d2:	4649      	mov	r1, r9
 800f7d4:	4640      	mov	r0, r8
 800f7d6:	47d0      	blx	sl
 800f7d8:	3001      	adds	r0, #1
 800f7da:	d0ab      	beq.n	800f734 <_printf_i+0x164>
 800f7dc:	6823      	ldr	r3, [r4, #0]
 800f7de:	079b      	lsls	r3, r3, #30
 800f7e0:	d413      	bmi.n	800f80a <_printf_i+0x23a>
 800f7e2:	68e0      	ldr	r0, [r4, #12]
 800f7e4:	9b03      	ldr	r3, [sp, #12]
 800f7e6:	4298      	cmp	r0, r3
 800f7e8:	bfb8      	it	lt
 800f7ea:	4618      	movlt	r0, r3
 800f7ec:	e7a4      	b.n	800f738 <_printf_i+0x168>
 800f7ee:	2301      	movs	r3, #1
 800f7f0:	4632      	mov	r2, r6
 800f7f2:	4649      	mov	r1, r9
 800f7f4:	4640      	mov	r0, r8
 800f7f6:	47d0      	blx	sl
 800f7f8:	3001      	adds	r0, #1
 800f7fa:	d09b      	beq.n	800f734 <_printf_i+0x164>
 800f7fc:	3501      	adds	r5, #1
 800f7fe:	68e3      	ldr	r3, [r4, #12]
 800f800:	9903      	ldr	r1, [sp, #12]
 800f802:	1a5b      	subs	r3, r3, r1
 800f804:	42ab      	cmp	r3, r5
 800f806:	dcf2      	bgt.n	800f7ee <_printf_i+0x21e>
 800f808:	e7eb      	b.n	800f7e2 <_printf_i+0x212>
 800f80a:	2500      	movs	r5, #0
 800f80c:	f104 0619 	add.w	r6, r4, #25
 800f810:	e7f5      	b.n	800f7fe <_printf_i+0x22e>
 800f812:	bf00      	nop
 800f814:	0800fb65 	.word	0x0800fb65
 800f818:	0800fb76 	.word	0x0800fb76

0800f81c <memmove>:
 800f81c:	4288      	cmp	r0, r1
 800f81e:	b510      	push	{r4, lr}
 800f820:	eb01 0402 	add.w	r4, r1, r2
 800f824:	d902      	bls.n	800f82c <memmove+0x10>
 800f826:	4284      	cmp	r4, r0
 800f828:	4623      	mov	r3, r4
 800f82a:	d807      	bhi.n	800f83c <memmove+0x20>
 800f82c:	1e43      	subs	r3, r0, #1
 800f82e:	42a1      	cmp	r1, r4
 800f830:	d008      	beq.n	800f844 <memmove+0x28>
 800f832:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f836:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f83a:	e7f8      	b.n	800f82e <memmove+0x12>
 800f83c:	4402      	add	r2, r0
 800f83e:	4601      	mov	r1, r0
 800f840:	428a      	cmp	r2, r1
 800f842:	d100      	bne.n	800f846 <memmove+0x2a>
 800f844:	bd10      	pop	{r4, pc}
 800f846:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f84a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f84e:	e7f7      	b.n	800f840 <memmove+0x24>

0800f850 <_realloc_r>:
 800f850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f854:	4680      	mov	r8, r0
 800f856:	4614      	mov	r4, r2
 800f858:	460e      	mov	r6, r1
 800f85a:	b921      	cbnz	r1, 800f866 <_realloc_r+0x16>
 800f85c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f860:	4611      	mov	r1, r2
 800f862:	f7ff bbd1 	b.w	800f008 <_malloc_r>
 800f866:	b92a      	cbnz	r2, 800f874 <_realloc_r+0x24>
 800f868:	f7ff fb62 	bl	800ef30 <_free_r>
 800f86c:	4625      	mov	r5, r4
 800f86e:	4628      	mov	r0, r5
 800f870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f874:	f000 f81b 	bl	800f8ae <_malloc_usable_size_r>
 800f878:	4284      	cmp	r4, r0
 800f87a:	4607      	mov	r7, r0
 800f87c:	d802      	bhi.n	800f884 <_realloc_r+0x34>
 800f87e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f882:	d812      	bhi.n	800f8aa <_realloc_r+0x5a>
 800f884:	4621      	mov	r1, r4
 800f886:	4640      	mov	r0, r8
 800f888:	f7ff fbbe 	bl	800f008 <_malloc_r>
 800f88c:	4605      	mov	r5, r0
 800f88e:	2800      	cmp	r0, #0
 800f890:	d0ed      	beq.n	800f86e <_realloc_r+0x1e>
 800f892:	42bc      	cmp	r4, r7
 800f894:	4622      	mov	r2, r4
 800f896:	4631      	mov	r1, r6
 800f898:	bf28      	it	cs
 800f89a:	463a      	movcs	r2, r7
 800f89c:	f7ff fb32 	bl	800ef04 <memcpy>
 800f8a0:	4631      	mov	r1, r6
 800f8a2:	4640      	mov	r0, r8
 800f8a4:	f7ff fb44 	bl	800ef30 <_free_r>
 800f8a8:	e7e1      	b.n	800f86e <_realloc_r+0x1e>
 800f8aa:	4635      	mov	r5, r6
 800f8ac:	e7df      	b.n	800f86e <_realloc_r+0x1e>

0800f8ae <_malloc_usable_size_r>:
 800f8ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f8b2:	1f18      	subs	r0, r3, #4
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	bfbc      	itt	lt
 800f8b8:	580b      	ldrlt	r3, [r1, r0]
 800f8ba:	18c0      	addlt	r0, r0, r3
 800f8bc:	4770      	bx	lr
	...

0800f8c0 <_init>:
 800f8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8c2:	bf00      	nop
 800f8c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8c6:	bc08      	pop	{r3}
 800f8c8:	469e      	mov	lr, r3
 800f8ca:	4770      	bx	lr

0800f8cc <_fini>:
 800f8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8ce:	bf00      	nop
 800f8d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8d2:	bc08      	pop	{r3}
 800f8d4:	469e      	mov	lr, r3
 800f8d6:	4770      	bx	lr
