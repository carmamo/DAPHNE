
F446RE_NODO_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f588  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  0800f758  0800f758  0001f758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fa08  0800fa08  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800fa08  0800fa08  0001fa08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fa10  0800fa10  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fa10  0800fa10  0001fa10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fa14  0800fa14  0001fa14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800fa18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005b0c  20000078  0800fa90  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005b84  0800fa90  00025b84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002826f  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f9b  00000000  00000000  00048317  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020b8  00000000  00000000  0004d2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ec8  00000000  00000000  0004f370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000072fb  00000000  00000000  00051238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000288b1  00000000  00000000  00058533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6f80  00000000  00000000  00080de4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00167d64  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000900c  00000000  00000000  00167db4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f740 	.word	0x0800f740

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	0800f740 	.word	0x0800f740

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002e4:	f000 b974 	b.w	80005d0 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468e      	mov	lr, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14d      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030e:	428a      	cmp	r2, r1
 8000310:	4694      	mov	ip, r2
 8000312:	d969      	bls.n	80003e8 <__udivmoddi4+0xe8>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b152      	cbz	r2, 8000330 <__udivmoddi4+0x30>
 800031a:	fa01 f302 	lsl.w	r3, r1, r2
 800031e:	f1c2 0120 	rsb	r1, r2, #32
 8000322:	fa20 f101 	lsr.w	r1, r0, r1
 8000326:	fa0c fc02 	lsl.w	ip, ip, r2
 800032a:	ea41 0e03 	orr.w	lr, r1, r3
 800032e:	4094      	lsls	r4, r2
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	0c21      	lsrs	r1, r4, #16
 8000336:	fbbe f6f8 	udiv	r6, lr, r8
 800033a:	fa1f f78c 	uxth.w	r7, ip
 800033e:	fb08 e316 	mls	r3, r8, r6, lr
 8000342:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000346:	fb06 f107 	mul.w	r1, r6, r7
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000356:	f080 811f 	bcs.w	8000598 <__udivmoddi4+0x298>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 811c 	bls.w	8000598 <__udivmoddi4+0x298>
 8000360:	3e02      	subs	r6, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a5b      	subs	r3, r3, r1
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb3 f0f8 	udiv	r0, r3, r8
 800036c:	fb08 3310 	mls	r3, r8, r0, r3
 8000370:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000374:	fb00 f707 	mul.w	r7, r0, r7
 8000378:	42a7      	cmp	r7, r4
 800037a:	d90a      	bls.n	8000392 <__udivmoddi4+0x92>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000384:	f080 810a 	bcs.w	800059c <__udivmoddi4+0x29c>
 8000388:	42a7      	cmp	r7, r4
 800038a:	f240 8107 	bls.w	800059c <__udivmoddi4+0x29c>
 800038e:	4464      	add	r4, ip
 8000390:	3802      	subs	r0, #2
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	1be4      	subs	r4, r4, r7
 8000398:	2600      	movs	r6, #0
 800039a:	b11d      	cbz	r5, 80003a4 <__udivmoddi4+0xa4>
 800039c:	40d4      	lsrs	r4, r2
 800039e:	2300      	movs	r3, #0
 80003a0:	e9c5 4300 	strd	r4, r3, [r5]
 80003a4:	4631      	mov	r1, r6
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0xc2>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80ef 	beq.w	8000592 <__udivmoddi4+0x292>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x160>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xd4>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80f9 	bhi.w	80005c6 <__udivmoddi4+0x2c6>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0303 	sbc.w	r3, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	469e      	mov	lr, r3
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0e0      	beq.n	80003a4 <__udivmoddi4+0xa4>
 80003e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003e6:	e7dd      	b.n	80003a4 <__udivmoddi4+0xa4>
 80003e8:	b902      	cbnz	r2, 80003ec <__udivmoddi4+0xec>
 80003ea:	deff      	udf	#255	; 0xff
 80003ec:	fab2 f282 	clz	r2, r2
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	f040 8092 	bne.w	800051a <__udivmoddi4+0x21a>
 80003f6:	eba1 010c 	sub.w	r1, r1, ip
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2601      	movs	r6, #1
 8000404:	0c20      	lsrs	r0, r4, #16
 8000406:	fbb1 f3f7 	udiv	r3, r1, r7
 800040a:	fb07 1113 	mls	r1, r7, r3, r1
 800040e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000412:	fb0e f003 	mul.w	r0, lr, r3
 8000416:	4288      	cmp	r0, r1
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x12c>
 800041a:	eb1c 0101 	adds.w	r1, ip, r1
 800041e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x12a>
 8000424:	4288      	cmp	r0, r1
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2c0>
 800042a:	4643      	mov	r3, r8
 800042c:	1a09      	subs	r1, r1, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1110 	mls	r1, r7, r0, r1
 8000438:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x156>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x154>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2ca>
 8000454:	4608      	mov	r0, r1
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800045e:	e79c      	b.n	800039a <__udivmoddi4+0x9a>
 8000460:	f1c6 0720 	rsb	r7, r6, #32
 8000464:	40b3      	lsls	r3, r6
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa20 f407 	lsr.w	r4, r0, r7
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	431c      	orrs	r4, r3
 8000478:	40f9      	lsrs	r1, r7
 800047a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047e:	fa00 f306 	lsl.w	r3, r0, r6
 8000482:	fbb1 f8f9 	udiv	r8, r1, r9
 8000486:	0c20      	lsrs	r0, r4, #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fb09 1118 	mls	r1, r9, r8, r1
 8000490:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000494:	fb08 f00e 	mul.w	r0, r8, lr
 8000498:	4288      	cmp	r0, r1
 800049a:	fa02 f206 	lsl.w	r2, r2, r6
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b8>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2bc>
 80004ac:	4288      	cmp	r0, r1
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2bc>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1a09      	subs	r1, r1, r0
 80004ba:	b2a4      	uxth	r4, r4
 80004bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c0:	fb09 1110 	mls	r1, r9, r0, r1
 80004c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004cc:	458e      	cmp	lr, r1
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1e2>
 80004d0:	eb1c 0101 	adds.w	r1, ip, r1
 80004d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2b4>
 80004da:	458e      	cmp	lr, r1
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2b4>
 80004de:	3802      	subs	r0, #2
 80004e0:	4461      	add	r1, ip
 80004e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004e6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ea:	eba1 010e 	sub.w	r1, r1, lr
 80004ee:	42a1      	cmp	r1, r4
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46a6      	mov	lr, r4
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x2a4>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x2a0>
 80004f8:	b15d      	cbz	r5, 8000512 <__udivmoddi4+0x212>
 80004fa:	ebb3 0208 	subs.w	r2, r3, r8
 80004fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000502:	fa01 f707 	lsl.w	r7, r1, r7
 8000506:	fa22 f306 	lsr.w	r3, r2, r6
 800050a:	40f1      	lsrs	r1, r6
 800050c:	431f      	orrs	r7, r3
 800050e:	e9c5 7100 	strd	r7, r1, [r5]
 8000512:	2600      	movs	r6, #0
 8000514:	4631      	mov	r1, r6
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	40d8      	lsrs	r0, r3
 8000520:	fa0c fc02 	lsl.w	ip, ip, r2
 8000524:	fa21 f303 	lsr.w	r3, r1, r3
 8000528:	4091      	lsls	r1, r2
 800052a:	4301      	orrs	r1, r0
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb3 f0f7 	udiv	r0, r3, r7
 8000538:	fb07 3610 	mls	r6, r7, r0, r3
 800053c:	0c0b      	lsrs	r3, r1, #16
 800053e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000542:	fb00 f60e 	mul.w	r6, r0, lr
 8000546:	429e      	cmp	r6, r3
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x260>
 800054e:	eb1c 0303 	adds.w	r3, ip, r3
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b8>
 8000558:	429e      	cmp	r6, r3
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b8>
 800055c:	3802      	subs	r0, #2
 800055e:	4463      	add	r3, ip
 8000560:	1b9b      	subs	r3, r3, r6
 8000562:	b289      	uxth	r1, r1
 8000564:	fbb3 f6f7 	udiv	r6, r3, r7
 8000568:	fb07 3316 	mls	r3, r7, r6, r3
 800056c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000570:	fb06 f30e 	mul.w	r3, r6, lr
 8000574:	428b      	cmp	r3, r1
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x28a>
 8000578:	eb1c 0101 	adds.w	r1, ip, r1
 800057c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000582:	428b      	cmp	r3, r1
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	1ac9      	subs	r1, r1, r3
 800058c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0x104>
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e705      	b.n	80003a4 <__udivmoddi4+0xa4>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e3      	b.n	8000364 <__udivmoddi4+0x64>
 800059c:	4618      	mov	r0, r3
 800059e:	e6f8      	b.n	8000392 <__udivmoddi4+0x92>
 80005a0:	454b      	cmp	r3, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f8>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f8>
 80005b0:	4646      	mov	r6, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x28a>
 80005b4:	4620      	mov	r0, r4
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1e2>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x260>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b8>
 80005c0:	3b02      	subs	r3, #2
 80005c2:	4461      	add	r1, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x12c>
 80005c6:	4630      	mov	r0, r6
 80005c8:	e709      	b.n	80003de <__udivmoddi4+0xde>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x156>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d8:	f001 f8ec 	bl	80017b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005dc:	f000 f876 	bl	80006cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e0:	f000 f9da 	bl	8000998 <MX_GPIO_Init>
  MX_DMA_Init();
 80005e4:	f000 f99a 	bl	800091c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005e8:	f000 f96e 	bl	80008c8 <MX_USART2_UART_Init>
  MX_I2S2_Init();
 80005ec:	f000 f91c 	bl	8000828 <MX_I2S2_Init>
  MX_SDIO_SD_Init();
 80005f0:	f000 f948 	bl	8000884 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80005f4:	f007 f990 	bl	8007918 <MX_FATFS_Init>
  MX_I2C1_Init();
 80005f8:	f000 f8e8 	bl	80007cc <MX_I2C1_Init>
  MX_CRC_Init();
 80005fc:	f000 f8d2 	bl	80007a4 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000600:	f00a fbb0 	bl	800ad64 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of RxCommandSem */
  RxCommandSemHandle = osSemaphoreNew(1, 1, &RxCommandSem_attributes);
 8000604:	4a21      	ldr	r2, [pc, #132]	; (800068c <main+0xb8>)
 8000606:	2101      	movs	r1, #1
 8000608:	2001      	movs	r0, #1
 800060a:	f00a fe4f 	bl	800b2ac <osSemaphoreNew>
 800060e:	4603      	mov	r3, r0
 8000610:	4a1f      	ldr	r2, [pc, #124]	; (8000690 <main+0xbc>)
 8000612:	6013      	str	r3, [r2, #0]

  /* creation of RxAudioSem */
  RxAudioSemHandle = osSemaphoreNew(1, 1, &RxAudioSem_attributes);
 8000614:	4a1f      	ldr	r2, [pc, #124]	; (8000694 <main+0xc0>)
 8000616:	2101      	movs	r1, #1
 8000618:	2001      	movs	r0, #1
 800061a:	f00a fe47 	bl	800b2ac <osSemaphoreNew>
 800061e:	4603      	mov	r3, r0
 8000620:	4a1d      	ldr	r2, [pc, #116]	; (8000698 <main+0xc4>)
 8000622:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  RxCommandSemHandle = osSemaphoreNew(1, 0, &RxCommandSem_attributes);
 8000624:	4a19      	ldr	r2, [pc, #100]	; (800068c <main+0xb8>)
 8000626:	2100      	movs	r1, #0
 8000628:	2001      	movs	r0, #1
 800062a:	f00a fe3f 	bl	800b2ac <osSemaphoreNew>
 800062e:	4603      	mov	r3, r0
 8000630:	4a17      	ldr	r2, [pc, #92]	; (8000690 <main+0xbc>)
 8000632:	6013      	str	r3, [r2, #0]

  RxAudioSemHandle = osSemaphoreNew(1, 0, &RxAudioSem_attributes);
 8000634:	4a17      	ldr	r2, [pc, #92]	; (8000694 <main+0xc0>)
 8000636:	2100      	movs	r1, #0
 8000638:	2001      	movs	r0, #1
 800063a:	f00a fe37 	bl	800b2ac <osSemaphoreNew>
 800063e:	4603      	mov	r3, r0
 8000640:	4a15      	ldr	r2, [pc, #84]	; (8000698 <main+0xc4>)
 8000642:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000644:	4a15      	ldr	r2, [pc, #84]	; (800069c <main+0xc8>)
 8000646:	2100      	movs	r1, #0
 8000648:	4815      	ldr	r0, [pc, #84]	; (80006a0 <main+0xcc>)
 800064a:	f00a fc0c 	bl	800ae66 <osThreadNew>
 800064e:	4603      	mov	r3, r0
 8000650:	4a14      	ldr	r2, [pc, #80]	; (80006a4 <main+0xd0>)
 8000652:	6013      	str	r3, [r2, #0]

  /* creation of UART */
  UARTHandle = osThreadNew(pvrCommandReceiveTask, NULL, &UART_attributes);
 8000654:	4a14      	ldr	r2, [pc, #80]	; (80006a8 <main+0xd4>)
 8000656:	2100      	movs	r1, #0
 8000658:	4814      	ldr	r0, [pc, #80]	; (80006ac <main+0xd8>)
 800065a:	f00a fc04 	bl	800ae66 <osThreadNew>
 800065e:	4603      	mov	r3, r0
 8000660:	4a13      	ldr	r2, [pc, #76]	; (80006b0 <main+0xdc>)
 8000662:	6013      	str	r3, [r2, #0]

  /* creation of I2S */
  I2SHandle = osThreadNew(pvrWriteAudioTask, NULL, &I2S_attributes);
 8000664:	4a13      	ldr	r2, [pc, #76]	; (80006b4 <main+0xe0>)
 8000666:	2100      	movs	r1, #0
 8000668:	4813      	ldr	r0, [pc, #76]	; (80006b8 <main+0xe4>)
 800066a:	f00a fbfc 	bl	800ae66 <osThreadNew>
 800066e:	4603      	mov	r3, r0
 8000670:	4a12      	ldr	r2, [pc, #72]	; (80006bc <main+0xe8>)
 8000672:	6013      	str	r3, [r2, #0]

  /* creation of WAV */
  WAVHandle = osThreadNew(pvrWriteWavFileTask, NULL, &WAV_attributes);
 8000674:	4a12      	ldr	r2, [pc, #72]	; (80006c0 <main+0xec>)
 8000676:	2100      	movs	r1, #0
 8000678:	4812      	ldr	r0, [pc, #72]	; (80006c4 <main+0xf0>)
 800067a:	f00a fbf4 	bl	800ae66 <osThreadNew>
 800067e:	4603      	mov	r3, r0
 8000680:	4a11      	ldr	r2, [pc, #68]	; (80006c8 <main+0xf4>)
 8000682:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000684:	f00a fbb4 	bl	800adf0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000688:	e7fe      	b.n	8000688 <main+0xb4>
 800068a:	bf00      	nop
 800068c:	0800f8a0 	.word	0x0800f8a0
 8000690:	20000330 	.word	0x20000330
 8000694:	0800f8b0 	.word	0x0800f8b0
 8000698:	20000334 	.word	0x20000334
 800069c:	0800f810 	.word	0x0800f810
 80006a0:	08000d45 	.word	0x08000d45
 80006a4:	20000320 	.word	0x20000320
 80006a8:	0800f834 	.word	0x0800f834
 80006ac:	08000d5d 	.word	0x08000d5d
 80006b0:	20000324 	.word	0x20000324
 80006b4:	0800f858 	.word	0x0800f858
 80006b8:	08000e01 	.word	0x08000e01
 80006bc:	20000328 	.word	0x20000328
 80006c0:	0800f87c 	.word	0x0800f87c
 80006c4:	08000e55 	.word	0x08000e55
 80006c8:	2000032c 	.word	0x2000032c

080006cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b094      	sub	sp, #80	; 0x50
 80006d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d2:	f107 031c 	add.w	r3, r7, #28
 80006d6:	2234      	movs	r2, #52	; 0x34
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f00e fb60 	bl	800eda0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e0:	f107 0308 	add.w	r3, r7, #8
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f0:	2300      	movs	r3, #0
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	4b29      	ldr	r3, [pc, #164]	; (800079c <SystemClock_Config+0xd0>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f8:	4a28      	ldr	r2, [pc, #160]	; (800079c <SystemClock_Config+0xd0>)
 80006fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000700:	4b26      	ldr	r3, [pc, #152]	; (800079c <SystemClock_Config+0xd0>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800070c:	2300      	movs	r3, #0
 800070e:	603b      	str	r3, [r7, #0]
 8000710:	4b23      	ldr	r3, [pc, #140]	; (80007a0 <SystemClock_Config+0xd4>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a22      	ldr	r2, [pc, #136]	; (80007a0 <SystemClock_Config+0xd4>)
 8000716:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800071a:	6013      	str	r3, [r2, #0]
 800071c:	4b20      	ldr	r3, [pc, #128]	; (80007a0 <SystemClock_Config+0xd4>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000724:	603b      	str	r3, [r7, #0]
 8000726:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000728:	2302      	movs	r3, #2
 800072a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800072c:	2301      	movs	r3, #1
 800072e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000730:	2310      	movs	r3, #16
 8000732:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000734:	2302      	movs	r3, #2
 8000736:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000738:	2300      	movs	r3, #0
 800073a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800073c:	2308      	movs	r3, #8
 800073e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000740:	23a8      	movs	r3, #168	; 0xa8
 8000742:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000744:	2302      	movs	r3, #2
 8000746:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000748:	2307      	movs	r3, #7
 800074a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800074c:	2302      	movs	r3, #2
 800074e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000750:	f107 031c 	add.w	r3, r7, #28
 8000754:	4618      	mov	r0, r3
 8000756:	f003 fd9d 	bl	8004294 <HAL_RCC_OscConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000760:	f000 fc46 	bl	8000ff0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000764:	230f      	movs	r3, #15
 8000766:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000768:	2302      	movs	r3, #2
 800076a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076c:	2300      	movs	r3, #0
 800076e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000770:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000774:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000776:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800077a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800077c:	f107 0308 	add.w	r3, r7, #8
 8000780:	2105      	movs	r1, #5
 8000782:	4618      	mov	r0, r3
 8000784:	f002 fc98 	bl	80030b8 <HAL_RCC_ClockConfig>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800078e:	f000 fc2f 	bl	8000ff0 <Error_Handler>
  }
}
 8000792:	bf00      	nop
 8000794:	3750      	adds	r7, #80	; 0x50
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800
 80007a0:	40007000 	.word	0x40007000

080007a4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_CRC_Init+0x20>)
 80007aa:	4a07      	ldr	r2, [pc, #28]	; (80007c8 <MX_CRC_Init+0x24>)
 80007ac:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_CRC_Init+0x20>)
 80007b0:	f001 f948 	bl	8001a44 <HAL_CRC_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80007ba:	f000 fc19 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000094 	.word	0x20000094
 80007c8:	40023000 	.word	0x40023000

080007cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007d0:	4b12      	ldr	r3, [pc, #72]	; (800081c <MX_I2C1_Init+0x50>)
 80007d2:	4a13      	ldr	r2, [pc, #76]	; (8000820 <MX_I2C1_Init+0x54>)
 80007d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_I2C1_Init+0x50>)
 80007d8:	4a12      	ldr	r2, [pc, #72]	; (8000824 <MX_I2C1_Init+0x58>)
 80007da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007dc:	4b0f      	ldr	r3, [pc, #60]	; (800081c <MX_I2C1_Init+0x50>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <MX_I2C1_Init+0x50>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007e8:	4b0c      	ldr	r3, [pc, #48]	; (800081c <MX_I2C1_Init+0x50>)
 80007ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007f0:	4b0a      	ldr	r3, [pc, #40]	; (800081c <MX_I2C1_Init+0x50>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_I2C1_Init+0x50>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007fc:	4b07      	ldr	r3, [pc, #28]	; (800081c <MX_I2C1_Init+0x50>)
 80007fe:	2200      	movs	r2, #0
 8000800:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_I2C1_Init+0x50>)
 8000804:	2200      	movs	r2, #0
 8000806:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000808:	4804      	ldr	r0, [pc, #16]	; (800081c <MX_I2C1_Init+0x50>)
 800080a:	f001 ff0b 	bl	8002624 <HAL_I2C_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000814:	f000 fbec 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}
 800081c:	2000009c 	.word	0x2000009c
 8000820:	40005400 	.word	0x40005400
 8000824:	000186a0 	.word	0x000186a0

08000828 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800082c:	4b13      	ldr	r3, [pc, #76]	; (800087c <MX_I2S2_Init+0x54>)
 800082e:	4a14      	ldr	r2, [pc, #80]	; (8000880 <MX_I2S2_Init+0x58>)
 8000830:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8000832:	4b12      	ldr	r3, [pc, #72]	; (800087c <MX_I2S2_Init+0x54>)
 8000834:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000838:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800083a:	4b10      	ldr	r3, [pc, #64]	; (800087c <MX_I2S2_Init+0x54>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000840:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_I2S2_Init+0x54>)
 8000842:	2203      	movs	r2, #3
 8000844:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000846:	4b0d      	ldr	r3, [pc, #52]	; (800087c <MX_I2S2_Init+0x54>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 800084c:	4b0b      	ldr	r3, [pc, #44]	; (800087c <MX_I2S2_Init+0x54>)
 800084e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000852:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_I2S2_Init+0x54>)
 8000856:	2200      	movs	r2, #0
 8000858:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <MX_I2S2_Init+0x54>)
 800085c:	2200      	movs	r2, #0
 800085e:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_I2S2_Init+0x54>)
 8000862:	2200      	movs	r2, #0
 8000864:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_I2S2_Init+0x54>)
 8000868:	f002 f820 	bl	80028ac <HAL_I2S_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8000872:	f000 fbbd 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	200000f0 	.word	0x200000f0
 8000880:	40003800 	.word	0x40003800

08000884 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000888:	4b0d      	ldr	r3, [pc, #52]	; (80008c0 <MX_SDIO_SD_Init+0x3c>)
 800088a:	4a0e      	ldr	r2, [pc, #56]	; (80008c4 <MX_SDIO_SD_Init+0x40>)
 800088c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800088e:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <MX_SDIO_SD_Init+0x3c>)
 8000890:	2200      	movs	r2, #0
 8000892:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000894:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <MX_SDIO_SD_Init+0x3c>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800089a:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <MX_SDIO_SD_Init+0x3c>)
 800089c:	2200      	movs	r2, #0
 800089e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80008a0:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <MX_SDIO_SD_Init+0x3c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_ENABLE;
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_SDIO_SD_Init+0x3c>)
 80008a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008ac:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80008ae:	4b04      	ldr	r3, [pc, #16]	; (80008c0 <MX_SDIO_SD_Init+0x3c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	20000198 	.word	0x20000198
 80008c4:	40012c00 	.word	0x40012c00

080008c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008cc:	4b11      	ldr	r3, [pc, #68]	; (8000914 <MX_USART2_UART_Init+0x4c>)
 80008ce:	4a12      	ldr	r2, [pc, #72]	; (8000918 <MX_USART2_UART_Init+0x50>)
 80008d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008d2:	4b10      	ldr	r3, [pc, #64]	; (8000914 <MX_USART2_UART_Init+0x4c>)
 80008d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <MX_USART2_UART_Init+0x4c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008e0:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <MX_USART2_UART_Init+0x4c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008e6:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <MX_USART2_UART_Init+0x4c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008ec:	4b09      	ldr	r3, [pc, #36]	; (8000914 <MX_USART2_UART_Init+0x4c>)
 80008ee:	220c      	movs	r2, #12
 80008f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f2:	4b08      	ldr	r3, [pc, #32]	; (8000914 <MX_USART2_UART_Init+0x4c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f8:	4b06      	ldr	r3, [pc, #24]	; (8000914 <MX_USART2_UART_Init+0x4c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008fe:	4805      	ldr	r0, [pc, #20]	; (8000914 <MX_USART2_UART_Init+0x4c>)
 8000900:	f005 fb2e 	bl	8005f60 <HAL_UART_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800090a:	f000 fb71 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	200002dc 	.word	0x200002dc
 8000918:	40004400 	.word	0x40004400

0800091c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	4b1b      	ldr	r3, [pc, #108]	; (8000994 <MX_DMA_Init+0x78>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a1a      	ldr	r2, [pc, #104]	; (8000994 <MX_DMA_Init+0x78>)
 800092c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b18      	ldr	r3, [pc, #96]	; (8000994 <MX_DMA_Init+0x78>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	603b      	str	r3, [r7, #0]
 8000942:	4b14      	ldr	r3, [pc, #80]	; (8000994 <MX_DMA_Init+0x78>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a13      	ldr	r2, [pc, #76]	; (8000994 <MX_DMA_Init+0x78>)
 8000948:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b11      	ldr	r3, [pc, #68]	; (8000994 <MX_DMA_Init+0x78>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800095a:	2200      	movs	r2, #0
 800095c:	2105      	movs	r1, #5
 800095e:	200e      	movs	r0, #14
 8000960:	f001 f846 	bl	80019f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000964:	200e      	movs	r0, #14
 8000966:	f001 f85f 	bl	8001a28 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800096a:	2200      	movs	r2, #0
 800096c:	2105      	movs	r1, #5
 800096e:	203b      	movs	r0, #59	; 0x3b
 8000970:	f001 f83e 	bl	80019f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000974:	203b      	movs	r0, #59	; 0x3b
 8000976:	f001 f857 	bl	8001a28 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	2105      	movs	r1, #5
 800097e:	2045      	movs	r0, #69	; 0x45
 8000980:	f001 f836 	bl	80019f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000984:	2045      	movs	r0, #69	; 0x45
 8000986:	f001 f84f 	bl	8001a28 <HAL_NVIC_EnableIRQ>

}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800

08000998 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	; 0x28
 800099c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
 80009ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	613b      	str	r3, [r7, #16]
 80009b2:	4b46      	ldr	r3, [pc, #280]	; (8000acc <MX_GPIO_Init+0x134>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a45      	ldr	r2, [pc, #276]	; (8000acc <MX_GPIO_Init+0x134>)
 80009b8:	f043 0304 	orr.w	r3, r3, #4
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b43      	ldr	r3, [pc, #268]	; (8000acc <MX_GPIO_Init+0x134>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0304 	and.w	r3, r3, #4
 80009c6:	613b      	str	r3, [r7, #16]
 80009c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	4b3f      	ldr	r3, [pc, #252]	; (8000acc <MX_GPIO_Init+0x134>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a3e      	ldr	r2, [pc, #248]	; (8000acc <MX_GPIO_Init+0x134>)
 80009d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b3c      	ldr	r3, [pc, #240]	; (8000acc <MX_GPIO_Init+0x134>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	4b38      	ldr	r3, [pc, #224]	; (8000acc <MX_GPIO_Init+0x134>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a37      	ldr	r2, [pc, #220]	; (8000acc <MX_GPIO_Init+0x134>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b35      	ldr	r3, [pc, #212]	; (8000acc <MX_GPIO_Init+0x134>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	4b31      	ldr	r3, [pc, #196]	; (8000acc <MX_GPIO_Init+0x134>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a30      	ldr	r2, [pc, #192]	; (8000acc <MX_GPIO_Init+0x134>)
 8000a0c:	f043 0302 	orr.w	r3, r3, #2
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b2e      	ldr	r3, [pc, #184]	; (8000acc <MX_GPIO_Init+0x134>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0302 	and.w	r3, r3, #2
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	603b      	str	r3, [r7, #0]
 8000a22:	4b2a      	ldr	r3, [pc, #168]	; (8000acc <MX_GPIO_Init+0x134>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a29      	ldr	r2, [pc, #164]	; (8000acc <MX_GPIO_Init+0x134>)
 8000a28:	f043 0308 	orr.w	r3, r3, #8
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b27      	ldr	r3, [pc, #156]	; (8000acc <MX_GPIO_Init+0x134>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0308 	and.w	r3, r3, #8
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8000a40:	4823      	ldr	r0, [pc, #140]	; (8000ad0 <MX_GPIO_Init+0x138>)
 8000a42:	f001 fdd5 	bl	80025f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CODEC_Reset_GPIO_Port, CODEC_Reset_Pin, GPIO_PIN_RESET);
 8000a46:	2200      	movs	r2, #0
 8000a48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a4c:	4821      	ldr	r0, [pc, #132]	; (8000ad4 <MX_GPIO_Init+0x13c>)
 8000a4e:	f001 fdcf 	bl	80025f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a58:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a62:	f107 0314 	add.w	r3, r7, #20
 8000a66:	4619      	mov	r1, r3
 8000a68:	481b      	ldr	r0, [pc, #108]	; (8000ad8 <MX_GPIO_Init+0x140>)
 8000a6a:	f001 fc15 	bl	8002298 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9|GPIO_PIN_10;
 8000a6e:	f44f 63c4 	mov.w	r3, #1568	; 0x620
 8000a72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a74:	2301      	movs	r3, #1
 8000a76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	4619      	mov	r1, r3
 8000a86:	4812      	ldr	r0, [pc, #72]	; (8000ad0 <MX_GPIO_Init+0x138>)
 8000a88:	f001 fc06 	bl	8002298 <HAL_GPIO_Init>

  /*Configure GPIO pin : CODEC_Reset_Pin */
  GPIO_InitStruct.Pin = CODEC_Reset_Pin;
 8000a8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a92:	2301      	movs	r3, #1
 8000a94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CODEC_Reset_GPIO_Port, &GPIO_InitStruct);
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	480b      	ldr	r0, [pc, #44]	; (8000ad4 <MX_GPIO_Init+0x13c>)
 8000aa6:	f001 fbf7 	bl	8002298 <HAL_GPIO_Init>

  /*Configure GPIO pin : BSP_API_SDIO_Pin */
  GPIO_InitStruct.Pin = BSP_API_SDIO_Pin;
 8000aaa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000aae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BSP_API_SDIO_GPIO_Port, &GPIO_InitStruct);
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	4619      	mov	r1, r3
 8000abe:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_GPIO_Init+0x13c>)
 8000ac0:	f001 fbea 	bl	8002298 <HAL_GPIO_Init>

}
 8000ac4:	bf00      	nop
 8000ac6:	3728      	adds	r7, #40	; 0x28
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40020000 	.word	0x40020000
 8000ad4:	40020400 	.word	0x40020400
 8000ad8:	40020800 	.word	0x40020800

08000adc <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	460b      	mov	r3, r1
 8000ae6:	807b      	strh	r3, [r7, #2]
	osSemaphoreRelease(RxCommandSemHandle);
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <HAL_UARTEx_RxEventCallback+0x28>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f00a fcb9 	bl	800b464 <osSemaphoreRelease>
	HAL_UARTEx_ReceiveToIdle_IT(huart, (uint8_t *)buf, 4);
 8000af2:	2204      	movs	r2, #4
 8000af4:	4904      	ldr	r1, [pc, #16]	; (8000b08 <HAL_UARTEx_RxEventCallback+0x2c>)
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f005 fa7f 	bl	8005ffa <HAL_UARTEx_ReceiveToIdle_IT>
}
 8000afc:	bf00      	nop
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000330 	.word	0x20000330
 8000b08:	20000d70 	.word	0x20000d70

08000b0c <HAL_I2S_RxHalfCpltCallback>:

void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	BufPtr = aud_buf;
 8000b14:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <HAL_I2S_RxHalfCpltCallback+0x20>)
 8000b16:	4a06      	ldr	r2, [pc, #24]	; (8000b30 <HAL_I2S_RxHalfCpltCallback+0x24>)
 8000b18:	601a      	str	r2, [r3, #0]
	osSemaphoreRelease(RxAudioSemHandle);
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <HAL_I2S_RxHalfCpltCallback+0x28>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f00a fca0 	bl	800b464 <osSemaphoreRelease>
}
 8000b24:	bf00      	nop
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20000d6c 	.word	0x20000d6c
 8000b30:	2000056c 	.word	0x2000056c
 8000b34:	20000334 	.word	0x20000334

08000b38 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
	BufPtr = &aud_buf[BUFFER_SIZE];
 8000b40:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <HAL_I2S_RxCpltCallback+0x20>)
 8000b42:	4a06      	ldr	r2, [pc, #24]	; (8000b5c <HAL_I2S_RxCpltCallback+0x24>)
 8000b44:	601a      	str	r2, [r3, #0]
	osSemaphoreRelease(RxAudioSemHandle);
 8000b46:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <HAL_I2S_RxCpltCallback+0x28>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f00a fc8a 	bl	800b464 <osSemaphoreRelease>
}
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000d6c 	.word	0x20000d6c
 8000b5c:	2000096c 	.word	0x2000096c
 8000b60:	20000334 	.word	0x20000334

08000b64 <fwrite_wav_header>:

FRESULT fwrite_wav_header(FIL* file, uint16_t sampleRate, uint8_t bitsPerSample, uint8_t channels) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08e      	sub	sp, #56	; 0x38
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	4608      	mov	r0, r1
 8000b6e:	4611      	mov	r1, r2
 8000b70:	461a      	mov	r2, r3
 8000b72:	4603      	mov	r3, r0
 8000b74:	807b      	strh	r3, [r7, #2]
 8000b76:	460b      	mov	r3, r1
 8000b78:	707b      	strb	r3, [r7, #1]
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	703b      	strb	r3, [r7, #0]
	static UINT *bw;
	WAVE_HEADER wave_header;
	wave_header.riff[0] = 'R';wave_header.riff[1] = 'I';
 8000b7e:	2352      	movs	r3, #82	; 0x52
 8000b80:	733b      	strb	r3, [r7, #12]
 8000b82:	2349      	movs	r3, #73	; 0x49
 8000b84:	737b      	strb	r3, [r7, #13]
	wave_header.riff[2] = 'F';wave_header.riff[3] = 'F';
 8000b86:	2346      	movs	r3, #70	; 0x46
 8000b88:	73bb      	strb	r3, [r7, #14]
 8000b8a:	2346      	movs	r3, #70	; 0x46
 8000b8c:	73fb      	strb	r3, [r7, #15]
	wave_header.size = (uint32_t)0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	613b      	str	r3, [r7, #16]
	wave_header.wave[0] = 'W';wave_header.wave[1] = 'A';
 8000b92:	2357      	movs	r3, #87	; 0x57
 8000b94:	753b      	strb	r3, [r7, #20]
 8000b96:	2341      	movs	r3, #65	; 0x41
 8000b98:	757b      	strb	r3, [r7, #21]
	wave_header.wave[2] = 'V';wave_header.wave[3] = 'E';
 8000b9a:	2356      	movs	r3, #86	; 0x56
 8000b9c:	75bb      	strb	r3, [r7, #22]
 8000b9e:	2345      	movs	r3, #69	; 0x45
 8000ba0:	75fb      	strb	r3, [r7, #23]
	wave_header.fmt[0] = 'f';wave_header.fmt[1] = 'm';
 8000ba2:	2366      	movs	r3, #102	; 0x66
 8000ba4:	763b      	strb	r3, [r7, #24]
 8000ba6:	236d      	movs	r3, #109	; 0x6d
 8000ba8:	767b      	strb	r3, [r7, #25]
	wave_header.fmt[2] = 't';wave_header.fmt[3] = ' ';
 8000baa:	2374      	movs	r3, #116	; 0x74
 8000bac:	76bb      	strb	r3, [r7, #26]
 8000bae:	2320      	movs	r3, #32
 8000bb0:	76fb      	strb	r3, [r7, #27]
	wave_header.fmt_size = 16;
 8000bb2:	2310      	movs	r3, #16
 8000bb4:	61fb      	str	r3, [r7, #28]
	wave_header.format = 1; // PCM
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	843b      	strh	r3, [r7, #32]
	wave_header.channels = channels; // channels
 8000bba:	783b      	ldrb	r3, [r7, #0]
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	847b      	strh	r3, [r7, #34]	; 0x22
	wave_header.sampleRate=sampleRate;  // sample rate
 8000bc0:	887b      	ldrh	r3, [r7, #2]
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
	wave_header.rbc = sampleRate*bitsPerSample*channels/8;
 8000bc4:	887b      	ldrh	r3, [r7, #2]
 8000bc6:	787a      	ldrb	r2, [r7, #1]
 8000bc8:	fb02 f303 	mul.w	r3, r2, r3
 8000bcc:	783a      	ldrb	r2, [r7, #0]
 8000bce:	fb02 f303 	mul.w	r3, r2, r3
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	da00      	bge.n	8000bd8 <fwrite_wav_header+0x74>
 8000bd6:	3307      	adds	r3, #7
 8000bd8:	10db      	asrs	r3, r3, #3
 8000bda:	62bb      	str	r3, [r7, #40]	; 0x28
	wave_header.bc =  bitsPerSample*channels/8;
 8000bdc:	787b      	ldrb	r3, [r7, #1]
 8000bde:	783a      	ldrb	r2, [r7, #0]
 8000be0:	fb02 f303 	mul.w	r3, r2, r3
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	da00      	bge.n	8000bea <fwrite_wav_header+0x86>
 8000be8:	3307      	adds	r3, #7
 8000bea:	10db      	asrs	r3, r3, #3
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	85bb      	strh	r3, [r7, #44]	; 0x2c
	wave_header.bitsPerSample = bitsPerSample; //bitsPerSample
 8000bf0:	787b      	ldrb	r3, [r7, #1]
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	wave_header.data[0] = 'd'; wave_header.data[1] = 'a';
 8000bf6:	2364      	movs	r3, #100	; 0x64
 8000bf8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8000bfc:	2361      	movs	r3, #97	; 0x61
 8000bfe:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	wave_header.data[2] = 't'; wave_header.data[3] = 'a';
 8000c02:	2374      	movs	r3, #116	; 0x74
 8000c04:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8000c08:	2361      	movs	r3, #97	; 0x61
 8000c0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	wave_header.data_size = 0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	637b      	str	r3, [r7, #52]	; 0x34
	return f_write(file, (uint8_t*)&wave_header, sizeof(wave_header), bw);
 8000c12:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <fwrite_wav_header+0xc8>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f107 010c 	add.w	r1, r7, #12
 8000c1a:	222c      	movs	r2, #44	; 0x2c
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f009 f974 	bl	8009f0a <f_write>
 8000c22:	4603      	mov	r3, r0
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3738      	adds	r7, #56	; 0x38
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20000d74 	.word	0x20000d74

08000c30 <Format_SD>:

FRESULT Format_SD (void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08e      	sub	sp, #56	; 0x38
 8000c34:	af00      	add	r7, sp, #0
	DIR dir;
	static FILINFO fno;
	static FRESULT fresult;

	char *path = malloc(20*sizeof (char));
 8000c36:	2014      	movs	r0, #20
 8000c38:	f00e f894 	bl	800ed64 <malloc>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	637b      	str	r3, [r7, #52]	; 0x34
	sprintf (path, "%s","/");
 8000c40:	4a28      	ldr	r2, [pc, #160]	; (8000ce4 <Format_SD+0xb4>)
 8000c42:	4929      	ldr	r1, [pc, #164]	; (8000ce8 <Format_SD+0xb8>)
 8000c44:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000c46:	f00e fa0d 	bl	800f064 <siprintf>

	fresult = f_opendir(&dir, path);                       /* Open the directory */
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f009 fe0a 	bl	800a868 <f_opendir>
 8000c54:	4603      	mov	r3, r0
 8000c56:	461a      	mov	r2, r3
 8000c58:	4b24      	ldr	r3, [pc, #144]	; (8000cec <Format_SD+0xbc>)
 8000c5a:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8000c5c:	4b23      	ldr	r3, [pc, #140]	; (8000cec <Format_SD+0xbc>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d136      	bne.n	8000cd2 <Format_SD+0xa2>
	{
		for (;;)
		{
			fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	4922      	ldr	r1, [pc, #136]	; (8000cf0 <Format_SD+0xc0>)
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f009 fea1 	bl	800a9b0 <f_readdir>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	461a      	mov	r2, r3
 8000c72:	4b1e      	ldr	r3, [pc, #120]	; (8000cec <Format_SD+0xbc>)
 8000c74:	701a      	strb	r2, [r3, #0]
			if (fresult != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8000c76:	4b1d      	ldr	r3, [pc, #116]	; (8000cec <Format_SD+0xbc>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d125      	bne.n	8000cca <Format_SD+0x9a>
 8000c7e:	4b1c      	ldr	r3, [pc, #112]	; (8000cf0 <Format_SD+0xc0>)
 8000c80:	7a5b      	ldrb	r3, [r3, #9]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d021      	beq.n	8000cca <Format_SD+0x9a>
			if (fno.fattrib & AM_DIR)     /* It is a directory */
 8000c86:	4b1a      	ldr	r3, [pc, #104]	; (8000cf0 <Format_SD+0xc0>)
 8000c88:	7a1b      	ldrb	r3, [r3, #8]
 8000c8a:	f003 0310 	and.w	r3, r3, #16
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d011      	beq.n	8000cb6 <Format_SD+0x86>
			{
				if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 8000c92:	4918      	ldr	r1, [pc, #96]	; (8000cf4 <Format_SD+0xc4>)
 8000c94:	4818      	ldr	r0, [pc, #96]	; (8000cf8 <Format_SD+0xc8>)
 8000c96:	f7ff fabb 	bl	8000210 <strcmp>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d012      	beq.n	8000cc6 <Format_SD+0x96>
				fresult = f_unlink(fno.fname);
 8000ca0:	4814      	ldr	r0, [pc, #80]	; (8000cf4 <Format_SD+0xc4>)
 8000ca2:	f009 fec8 	bl	800aa36 <f_unlink>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	461a      	mov	r2, r3
 8000caa:	4b10      	ldr	r3, [pc, #64]	; (8000cec <Format_SD+0xbc>)
 8000cac:	701a      	strb	r2, [r3, #0]
				if (fresult == FR_DENIED) continue;
 8000cae:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <Format_SD+0xbc>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	2b07      	cmp	r3, #7
 8000cb4:	e7d6      	b.n	8000c64 <Format_SD+0x34>
			}
			else
			{   /* It is a file. */
				fresult = f_unlink(fno.fname);
 8000cb6:	480f      	ldr	r0, [pc, #60]	; (8000cf4 <Format_SD+0xc4>)
 8000cb8:	f009 febd 	bl	800aa36 <f_unlink>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <Format_SD+0xbc>)
 8000cc2:	701a      	strb	r2, [r3, #0]
 8000cc4:	e7ce      	b.n	8000c64 <Format_SD+0x34>
				if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 8000cc6:	bf00      	nop
			fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 8000cc8:	e7cc      	b.n	8000c64 <Format_SD+0x34>
			}
		}
		f_closedir(&dir);
 8000cca:	1d3b      	adds	r3, r7, #4
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f009 fe44 	bl	800a95a <f_closedir>
	}
	free(path);
 8000cd2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000cd4:	f00e f84e 	bl	800ed74 <free>
	return fresult;
 8000cd8:	4b04      	ldr	r3, [pc, #16]	; (8000cec <Format_SD+0xbc>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3738      	adds	r7, #56	; 0x38
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	0800f790 	.word	0x0800f790
 8000ce8:	0800f794 	.word	0x0800f794
 8000cec:	20000d78 	.word	0x20000d78
 8000cf0:	20000d7c 	.word	0x20000d7c
 8000cf4:	20000d85 	.word	0x20000d85
 8000cf8:	0800f798 	.word	0x0800f798

08000cfc <convert_endianness>:
It converts the endianness of each element in the array using the __REV
intrinsic function.
The for loop iterates through each element in the array, and at each iteration,
the endianness of the current element is converted.
*/
void convert_endianness(uint32_t *array, uint16_t Size) {
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	460b      	mov	r3, r1
 8000d06:	807b      	strh	r3, [r7, #2]
    for (int i = 0; i < Size; i++) {
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	e00f      	b.n	8000d2e <convert_endianness+0x32>
        array[i] = __REV(array[i]);
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	4413      	add	r3, r2
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	6879      	ldr	r1, [r7, #4]
 8000d1e:	440b      	add	r3, r1
 8000d20:	60ba      	str	r2, [r7, #8]
  \return               Reversed value
 */
__STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
{
#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
  return __builtin_bswap32(value);
 8000d22:	68ba      	ldr	r2, [r7, #8]
 8000d24:	ba12      	rev	r2, r2
 8000d26:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < Size; i++) {
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	887b      	ldrh	r3, [r7, #2]
 8000d30:	68fa      	ldr	r2, [r7, #12]
 8000d32:	429a      	cmp	r2, r3
 8000d34:	dbeb      	blt.n	8000d0e <convert_endianness+0x12>
    }
}
 8000d36:	bf00      	nop
 8000d38:	bf00      	nop
 8000d3a:	3714      	adds	r7, #20
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osThreadSuspend(defaultTaskHandle);
 8000d4c:	4b02      	ldr	r3, [pc, #8]	; (8000d58 <StartDefaultTask+0x14>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f00a f91a 	bl	800af8a <osThreadSuspend>
 8000d56:	e7f9      	b.n	8000d4c <StartDefaultTask+0x8>
 8000d58:	20000320 	.word	0x20000320

08000d5c <pvrCommandReceiveTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pvrCommandReceiveTask */
void pvrCommandReceiveTask(void *argument)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pvrCommandReceiveTask */
	HAL_UARTEx_ReceiveToIdle_IT(&huart2, (uint8_t *)buf, 4);
 8000d64:	2204      	movs	r2, #4
 8000d66:	4921      	ldr	r1, [pc, #132]	; (8000dec <pvrCommandReceiveTask+0x90>)
 8000d68:	4821      	ldr	r0, [pc, #132]	; (8000df0 <pvrCommandReceiveTask+0x94>)
 8000d6a:	f005 f946 	bl	8005ffa <HAL_UARTEx_ReceiveToIdle_IT>
  /* Infinite loop */
	for(;;)
	{

		osSemaphoreAcquire(RxCommandSemHandle, osWaitForever);
 8000d6e:	4b21      	ldr	r3, [pc, #132]	; (8000df4 <pvrCommandReceiveTask+0x98>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d76:	4618      	mov	r0, r3
 8000d78:	f00a fb22 	bl	800b3c0 <osSemaphoreAcquire>

		switch(buf[0])
 8000d7c:	4b1b      	ldr	r3, [pc, #108]	; (8000dec <pvrCommandReceiveTask+0x90>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b50      	cmp	r3, #80	; 0x50
 8000d82:	d018      	beq.n	8000db6 <pvrCommandReceiveTask+0x5a>
 8000d84:	2b50      	cmp	r3, #80	; 0x50
 8000d86:	dc2a      	bgt.n	8000dde <pvrCommandReceiveTask+0x82>
 8000d88:	2b47      	cmp	r3, #71	; 0x47
 8000d8a:	d006      	beq.n	8000d9a <pvrCommandReceiveTask+0x3e>
 8000d8c:	2b47      	cmp	r3, #71	; 0x47
 8000d8e:	dc26      	bgt.n	8000dde <pvrCommandReceiveTask+0x82>
 8000d90:	2b2b      	cmp	r3, #43	; 0x2b
 8000d92:	d020      	beq.n	8000dd6 <pvrCommandReceiveTask+0x7a>
 8000d94:	2b2e      	cmp	r3, #46	; 0x2e
 8000d96:	d01a      	beq.n	8000dce <pvrCommandReceiveTask+0x72>
			break;
		case '+':
			audio_state = STATE_IDLE;
			break;
		default:
			break;
 8000d98:	e021      	b.n	8000dde <pvrCommandReceiveTask+0x82>
			if(audio_state == STATE_IDLE) osThreadResume(WAVHandle);
 8000d9a:	4b17      	ldr	r3, [pc, #92]	; (8000df8 <pvrCommandReceiveTask+0x9c>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d11f      	bne.n	8000de2 <pvrCommandReceiveTask+0x86>
 8000da2:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <pvrCommandReceiveTask+0xa0>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4618      	mov	r0, r3
 8000da8:	f00a f910 	bl	800afcc <osThreadResume>
			break;
 8000dac:	e019      	b.n	8000de2 <pvrCommandReceiveTask+0x86>
			while(audio_state == STATE_START_RECORDING) osDelay(500);
 8000dae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000db2:	f00a f92c 	bl	800b00e <osDelay>
 8000db6:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <pvrCommandReceiveTask+0x9c>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	2b02      	cmp	r3, #2
 8000dbc:	d0f7      	beq.n	8000dae <pvrCommandReceiveTask+0x52>
			if(audio_state == STATE_RECORDING) audio_state = STATE_STOP;
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <pvrCommandReceiveTask+0x9c>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	2b03      	cmp	r3, #3
 8000dc4:	d10f      	bne.n	8000de6 <pvrCommandReceiveTask+0x8a>
 8000dc6:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <pvrCommandReceiveTask+0x9c>)
 8000dc8:	2204      	movs	r2, #4
 8000dca:	701a      	strb	r2, [r3, #0]
			break;
 8000dcc:	e00b      	b.n	8000de6 <pvrCommandReceiveTask+0x8a>
			audio_state = CONNECTING;
 8000dce:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <pvrCommandReceiveTask+0x9c>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	701a      	strb	r2, [r3, #0]
			break;
 8000dd4:	e008      	b.n	8000de8 <pvrCommandReceiveTask+0x8c>
			audio_state = STATE_IDLE;
 8000dd6:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <pvrCommandReceiveTask+0x9c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	701a      	strb	r2, [r3, #0]
			break;
 8000ddc:	e004      	b.n	8000de8 <pvrCommandReceiveTask+0x8c>
			break;
 8000dde:	bf00      	nop
 8000de0:	e7c5      	b.n	8000d6e <pvrCommandReceiveTask+0x12>
			break;
 8000de2:	bf00      	nop
 8000de4:	e7c3      	b.n	8000d6e <pvrCommandReceiveTask+0x12>
			break;
 8000de6:	bf00      	nop
		osSemaphoreAcquire(RxCommandSemHandle, osWaitForever);
 8000de8:	e7c1      	b.n	8000d6e <pvrCommandReceiveTask+0x12>
 8000dea:	bf00      	nop
 8000dec:	20000d70 	.word	0x20000d70
 8000df0:	200002dc 	.word	0x200002dc
 8000df4:	20000330 	.word	0x20000330
 8000df8:	20000000 	.word	0x20000000
 8000dfc:	2000032c 	.word	0x2000032c

08000e00 <pvrWriteAudioTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pvrWriteAudioTask */
void pvrWriteAudioTask(void *argument)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
	static UINT *bw;

	/* Infinite loop */
	for(;;)
	{
		osSemaphoreAcquire(RxAudioSemHandle, osWaitForever);
 8000e08:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <pvrWriteAudioTask+0x40>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e10:	4618      	mov	r0, r3
 8000e12:	f00a fad5 	bl	800b3c0 <osSemaphoreAcquire>

		convert_endianness((uint32_t *)BufPtr, READ_SIZE);
 8000e16:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <pvrWriteAudioTask+0x44>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff ff6c 	bl	8000cfc <convert_endianness>
		res = f_write(&file_ptr, BufPtr, WRITE_SIZE_BYTES, bw);
 8000e24:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <pvrWriteAudioTask+0x44>)
 8000e26:	6819      	ldr	r1, [r3, #0]
 8000e28:	4b07      	ldr	r3, [pc, #28]	; (8000e48 <pvrWriteAudioTask+0x48>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e30:	4806      	ldr	r0, [pc, #24]	; (8000e4c <pvrWriteAudioTask+0x4c>)
 8000e32:	f009 f86a 	bl	8009f0a <f_write>
 8000e36:	4603      	mov	r3, r0
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <pvrWriteAudioTask+0x50>)
 8000e3c:	701a      	strb	r2, [r3, #0]
		osSemaphoreAcquire(RxAudioSemHandle, osWaitForever);
 8000e3e:	e7e3      	b.n	8000e08 <pvrWriteAudioTask+0x8>
 8000e40:	20000334 	.word	0x20000334
 8000e44:	20000d6c 	.word	0x20000d6c
 8000e48:	20000d94 	.word	0x20000d94
 8000e4c:	2000033c 	.word	0x2000033c
 8000e50:	20000338 	.word	0x20000338

08000e54 <pvrWriteWavFileTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pvrWriteWavFileTask */
void pvrWriteWavFileTask(void *argument)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
	static char filename[256];
	static UINT *bw;

	do
	{
		res = f_mount(&SDFatFS, SDPath, 1);
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	494e      	ldr	r1, [pc, #312]	; (8000f98 <pvrWriteWavFileTask+0x144>)
 8000e60:	484e      	ldr	r0, [pc, #312]	; (8000f9c <pvrWriteWavFileTask+0x148>)
 8000e62:	f008 fe29 	bl	8009ab8 <f_mount>
 8000e66:	4603      	mov	r3, r0
 8000e68:	461a      	mov	r2, r3
 8000e6a:	4b4d      	ldr	r3, [pc, #308]	; (8000fa0 <pvrWriteWavFileTask+0x14c>)
 8000e6c:	701a      	strb	r2, [r3, #0]
	}
	while( res != FR_OK);
 8000e6e:	4b4c      	ldr	r3, [pc, #304]	; (8000fa0 <pvrWriteWavFileTask+0x14c>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d1f2      	bne.n	8000e5c <pvrWriteWavFileTask+0x8>

	do
	{
		res = Format_SD();
 8000e76:	f7ff fedb 	bl	8000c30 <Format_SD>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4b48      	ldr	r3, [pc, #288]	; (8000fa0 <pvrWriteWavFileTask+0x14c>)
 8000e80:	701a      	strb	r2, [r3, #0]
	}
	while (res != FR_OK);
 8000e82:	4b47      	ldr	r3, [pc, #284]	; (8000fa0 <pvrWriteWavFileTask+0x14c>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d1f5      	bne.n	8000e76 <pvrWriteWavFileTask+0x22>
	/* Infinite loop */
	for(;;)
	{
		switch(audio_state)
 8000e8a:	4b46      	ldr	r3, [pc, #280]	; (8000fa4 <pvrWriteWavFileTask+0x150>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	2b04      	cmp	r3, #4
 8000e90:	d87d      	bhi.n	8000f8e <pvrWriteWavFileTask+0x13a>
 8000e92:	a201      	add	r2, pc, #4	; (adr r2, 8000e98 <pvrWriteWavFileTask+0x44>)
 8000e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e98:	08000f7d 	.word	0x08000f7d
 8000e9c:	08000f8f 	.word	0x08000f8f
 8000ea0:	08000ead 	.word	0x08000ead
 8000ea4:	08000f07 	.word	0x08000f07
 8000ea8:	08000f0f 	.word	0x08000f0f
		{
		case STATE_START_RECORDING:

			sprintf(filename, "%saud_%03d.wav", SDPath, count++);
 8000eac:	4b3e      	ldr	r3, [pc, #248]	; (8000fa8 <pvrWriteWavFileTask+0x154>)
 8000eae:	881b      	ldrh	r3, [r3, #0]
 8000eb0:	1c5a      	adds	r2, r3, #1
 8000eb2:	b291      	uxth	r1, r2
 8000eb4:	4a3c      	ldr	r2, [pc, #240]	; (8000fa8 <pvrWriteWavFileTask+0x154>)
 8000eb6:	8011      	strh	r1, [r2, #0]
 8000eb8:	4a37      	ldr	r2, [pc, #220]	; (8000f98 <pvrWriteWavFileTask+0x144>)
 8000eba:	493c      	ldr	r1, [pc, #240]	; (8000fac <pvrWriteWavFileTask+0x158>)
 8000ebc:	483c      	ldr	r0, [pc, #240]	; (8000fb0 <pvrWriteWavFileTask+0x15c>)
 8000ebe:	f00e f8d1 	bl	800f064 <siprintf>

			do
			{
				res = f_open(&file_ptr, filename, FA_CREATE_ALWAYS|FA_WRITE);
 8000ec2:	220a      	movs	r2, #10
 8000ec4:	493a      	ldr	r1, [pc, #232]	; (8000fb0 <pvrWriteWavFileTask+0x15c>)
 8000ec6:	483b      	ldr	r0, [pc, #236]	; (8000fb4 <pvrWriteWavFileTask+0x160>)
 8000ec8:	f008 fe5a 	bl	8009b80 <f_open>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	461a      	mov	r2, r3
 8000ed0:	4b33      	ldr	r3, [pc, #204]	; (8000fa0 <pvrWriteWavFileTask+0x14c>)
 8000ed2:	701a      	strb	r2, [r3, #0]
			}
			while(res != FR_OK);
 8000ed4:	4b32      	ldr	r3, [pc, #200]	; (8000fa0 <pvrWriteWavFileTask+0x14c>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d1f2      	bne.n	8000ec2 <pvrWriteWavFileTask+0x6e>

			res = fwrite_wav_header(&file_ptr, I2S_SAMPLE_FREQUENCY, I2S_FRAME, 2);
 8000edc:	2302      	movs	r3, #2
 8000ede:	2220      	movs	r2, #32
 8000ee0:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 8000ee4:	4833      	ldr	r0, [pc, #204]	; (8000fb4 <pvrWriteWavFileTask+0x160>)
 8000ee6:	f7ff fe3d 	bl	8000b64 <fwrite_wav_header>
 8000eea:	4603      	mov	r3, r0
 8000eec:	461a      	mov	r2, r3
 8000eee:	4b2c      	ldr	r3, [pc, #176]	; (8000fa0 <pvrWriteWavFileTask+0x14c>)
 8000ef0:	701a      	strb	r2, [r3, #0]

			HAL_I2S_Receive_DMA(&hi2s2, aud_buf, 2*READ_SIZE);
 8000ef2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ef6:	4930      	ldr	r1, [pc, #192]	; (8000fb8 <pvrWriteWavFileTask+0x164>)
 8000ef8:	4830      	ldr	r0, [pc, #192]	; (8000fbc <pvrWriteWavFileTask+0x168>)
 8000efa:	f001 fdcf 	bl	8002a9c <HAL_I2S_Receive_DMA>
			audio_state = STATE_RECORDING;
 8000efe:	4b29      	ldr	r3, [pc, #164]	; (8000fa4 <pvrWriteWavFileTask+0x150>)
 8000f00:	2203      	movs	r2, #3
 8000f02:	701a      	strb	r2, [r3, #0]
			break;
 8000f04:	e047      	b.n	8000f96 <pvrWriteWavFileTask+0x142>

		case STATE_RECORDING:
			osDelay(50);
 8000f06:	2032      	movs	r0, #50	; 0x32
 8000f08:	f00a f881 	bl	800b00e <osDelay>
			break;
 8000f0c:	e043      	b.n	8000f96 <pvrWriteWavFileTask+0x142>

		case STATE_STOP:
			HAL_I2S_DMAStop(&hi2s2);
 8000f0e:	482b      	ldr	r0, [pc, #172]	; (8000fbc <pvrWriteWavFileTask+0x168>)
 8000f10:	f001 fe80 	bl	8002c14 <HAL_I2S_DMAStop>
			while(osSemaphoreGetCount(RxAudioSemHandle)) osDelay(250);
 8000f14:	e002      	b.n	8000f1c <pvrWriteWavFileTask+0xc8>
 8000f16:	20fa      	movs	r0, #250	; 0xfa
 8000f18:	f00a f879 	bl	800b00e <osDelay>
 8000f1c:	4b28      	ldr	r3, [pc, #160]	; (8000fc0 <pvrWriteWavFileTask+0x16c>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f00a fae3 	bl	800b4ec <osSemaphoreGetCount>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d1f4      	bne.n	8000f16 <pvrWriteWavFileTask+0xc2>

			filesize = f_size(&file_ptr);
 8000f2c:	4b21      	ldr	r3, [pc, #132]	; (8000fb4 <pvrWriteWavFileTask+0x160>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	617b      	str	r3, [r7, #20]
			data_len = filesize - 44;
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	3b2c      	subs	r3, #44	; 0x2c
 8000f36:	613b      	str	r3, [r7, #16]
			total_len = filesize - 8;
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	3b08      	subs	r3, #8
 8000f3c:	60fb      	str	r3, [r7, #12]
			f_lseek(&file_ptr, 4);
 8000f3e:	2104      	movs	r1, #4
 8000f40:	481c      	ldr	r0, [pc, #112]	; (8000fb4 <pvrWriteWavFileTask+0x160>)
 8000f42:	f009 fa3e 	bl	800a3c2 <f_lseek>
			f_write(&file_ptr, (uint8_t*)&total_len, 4, bw);
 8000f46:	4b1f      	ldr	r3, [pc, #124]	; (8000fc4 <pvrWriteWavFileTask+0x170>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f107 010c 	add.w	r1, r7, #12
 8000f4e:	2204      	movs	r2, #4
 8000f50:	4818      	ldr	r0, [pc, #96]	; (8000fb4 <pvrWriteWavFileTask+0x160>)
 8000f52:	f008 ffda 	bl	8009f0a <f_write>
			f_lseek(&file_ptr, 40);
 8000f56:	2128      	movs	r1, #40	; 0x28
 8000f58:	4816      	ldr	r0, [pc, #88]	; (8000fb4 <pvrWriteWavFileTask+0x160>)
 8000f5a:	f009 fa32 	bl	800a3c2 <f_lseek>
			f_write(&file_ptr, (uint8_t*)&data_len, 4, bw);
 8000f5e:	4b19      	ldr	r3, [pc, #100]	; (8000fc4 <pvrWriteWavFileTask+0x170>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f107 0110 	add.w	r1, r7, #16
 8000f66:	2204      	movs	r2, #4
 8000f68:	4812      	ldr	r0, [pc, #72]	; (8000fb4 <pvrWriteWavFileTask+0x160>)
 8000f6a:	f008 ffce 	bl	8009f0a <f_write>
			f_close(&file_ptr);
 8000f6e:	4811      	ldr	r0, [pc, #68]	; (8000fb4 <pvrWriteWavFileTask+0x160>)
 8000f70:	f009 f9f8 	bl	800a364 <f_close>

			audio_state = STATE_IDLE;
 8000f74:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <pvrWriteWavFileTask+0x150>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	701a      	strb	r2, [r3, #0]
			break;
 8000f7a:	e00c      	b.n	8000f96 <pvrWriteWavFileTask+0x142>

		case STATE_IDLE:
			osThreadSuspend(WAVHandle);
 8000f7c:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <pvrWriteWavFileTask+0x174>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f00a f802 	bl	800af8a <osThreadSuspend>
			audio_state = STATE_START_RECORDING;
 8000f86:	4b07      	ldr	r3, [pc, #28]	; (8000fa4 <pvrWriteWavFileTask+0x150>)
 8000f88:	2202      	movs	r2, #2
 8000f8a:	701a      	strb	r2, [r3, #0]
			break;
 8000f8c:	e003      	b.n	8000f96 <pvrWriteWavFileTask+0x142>

		default:
			osDelay(50);
 8000f8e:	2032      	movs	r0, #50	; 0x32
 8000f90:	f00a f83d 	bl	800b00e <osDelay>
			break;
 8000f94:	bf00      	nop
		switch(audio_state)
 8000f96:	e778      	b.n	8000e8a <pvrWriteWavFileTask+0x36>
 8000f98:	20000ef4 	.word	0x20000ef4
 8000f9c:	20000ef8 	.word	0x20000ef8
 8000fa0:	20000338 	.word	0x20000338
 8000fa4:	20000000 	.word	0x20000000
 8000fa8:	20000d98 	.word	0x20000d98
 8000fac:	0800f7a4 	.word	0x0800f7a4
 8000fb0:	20000d9c 	.word	0x20000d9c
 8000fb4:	2000033c 	.word	0x2000033c
 8000fb8:	2000056c 	.word	0x2000056c
 8000fbc:	200000f0 	.word	0x200000f0
 8000fc0:	20000334 	.word	0x20000334
 8000fc4:	20000e9c 	.word	0x20000e9c
 8000fc8:	2000032c 	.word	0x2000032c

08000fcc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a04      	ldr	r2, [pc, #16]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d101      	bne.n	8000fe2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fde:	f000 fc0b 	bl	80017f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40010000 	.word	0x40010000

08000ff0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff4:	b672      	cpsid	i
}
 8000ff6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ff8:	e7fe      	b.n	8000ff8 <Error_Handler+0x8>
	...

08000ffc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	607b      	str	r3, [r7, #4]
 8001006:	4b12      	ldr	r3, [pc, #72]	; (8001050 <HAL_MspInit+0x54>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100a:	4a11      	ldr	r2, [pc, #68]	; (8001050 <HAL_MspInit+0x54>)
 800100c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001010:	6453      	str	r3, [r2, #68]	; 0x44
 8001012:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <HAL_MspInit+0x54>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	603b      	str	r3, [r7, #0]
 8001022:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <HAL_MspInit+0x54>)
 8001024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001026:	4a0a      	ldr	r2, [pc, #40]	; (8001050 <HAL_MspInit+0x54>)
 8001028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800102c:	6413      	str	r3, [r2, #64]	; 0x40
 800102e:	4b08      	ldr	r3, [pc, #32]	; (8001050 <HAL_MspInit+0x54>)
 8001030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001036:	603b      	str	r3, [r7, #0]
 8001038:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800103a:	2200      	movs	r2, #0
 800103c:	210f      	movs	r1, #15
 800103e:	f06f 0001 	mvn.w	r0, #1
 8001042:	f000 fcd5 	bl	80019f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40023800 	.word	0x40023800

08001054 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a0b      	ldr	r2, [pc, #44]	; (8001090 <HAL_CRC_MspInit+0x3c>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d10d      	bne.n	8001082 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <HAL_CRC_MspInit+0x40>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	4a09      	ldr	r2, [pc, #36]	; (8001094 <HAL_CRC_MspInit+0x40>)
 8001070:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001074:	6313      	str	r3, [r2, #48]	; 0x30
 8001076:	4b07      	ldr	r3, [pc, #28]	; (8001094 <HAL_CRC_MspInit+0x40>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001082:	bf00      	nop
 8001084:	3714      	adds	r7, #20
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	40023000 	.word	0x40023000
 8001094:	40023800 	.word	0x40023800

08001098 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08a      	sub	sp, #40	; 0x28
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a19      	ldr	r2, [pc, #100]	; (800111c <HAL_I2C_MspInit+0x84>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d12b      	bne.n	8001112 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	613b      	str	r3, [r7, #16]
 80010be:	4b18      	ldr	r3, [pc, #96]	; (8001120 <HAL_I2C_MspInit+0x88>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a17      	ldr	r2, [pc, #92]	; (8001120 <HAL_I2C_MspInit+0x88>)
 80010c4:	f043 0302 	orr.w	r3, r3, #2
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b15      	ldr	r3, [pc, #84]	; (8001120 <HAL_I2C_MspInit+0x88>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010d6:	23c0      	movs	r3, #192	; 0xc0
 80010d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010da:	2312      	movs	r3, #18
 80010dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e2:	2303      	movs	r3, #3
 80010e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010e6:	2304      	movs	r3, #4
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ea:	f107 0314 	add.w	r3, r7, #20
 80010ee:	4619      	mov	r1, r3
 80010f0:	480c      	ldr	r0, [pc, #48]	; (8001124 <HAL_I2C_MspInit+0x8c>)
 80010f2:	f001 f8d1 	bl	8002298 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	4b09      	ldr	r3, [pc, #36]	; (8001120 <HAL_I2C_MspInit+0x88>)
 80010fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fe:	4a08      	ldr	r2, [pc, #32]	; (8001120 <HAL_I2C_MspInit+0x88>)
 8001100:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001104:	6413      	str	r3, [r2, #64]	; 0x40
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <HAL_I2C_MspInit+0x88>)
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001112:	bf00      	nop
 8001114:	3728      	adds	r7, #40	; 0x28
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40005400 	.word	0x40005400
 8001120:	40023800 	.word	0x40023800
 8001124:	40020400 	.word	0x40020400

08001128 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b0a0      	sub	sp, #128	; 0x80
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001130:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001140:	f107 0310 	add.w	r3, r7, #16
 8001144:	225c      	movs	r2, #92	; 0x5c
 8001146:	2100      	movs	r1, #0
 8001148:	4618      	mov	r0, r3
 800114a:	f00d fe29 	bl	800eda0 <memset>
  if(hi2s->Instance==SPI2)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a43      	ldr	r2, [pc, #268]	; (8001260 <HAL_I2S_MspInit+0x138>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d17f      	bne.n	8001258 <HAL_I2S_MspInit+0x130>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1;
 8001158:	2301      	movs	r3, #1
 800115a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 800115c:	2332      	movs	r3, #50	; 0x32
 800115e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLI2SP_DIV2;
 8001160:	2302      	movs	r3, #2
 8001162:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 8001164:	2308      	movs	r3, #8
 8001166:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001168:	2302      	movs	r3, #2
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800116c:	2302      	movs	r3, #2
 800116e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8001170:	2301      	movs	r3, #1
 8001172:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 8001174:	2300      	movs	r3, #0
 8001176:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001178:	f107 0310 	add.w	r3, r7, #16
 800117c:	4618      	mov	r0, r3
 800117e:	f002 f8e7 	bl	8003350 <HAL_RCCEx_PeriphCLKConfig>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <HAL_I2S_MspInit+0x64>
    {
      Error_Handler();
 8001188:	f7ff ff32 	bl	8000ff0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800118c:	2300      	movs	r3, #0
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	4b34      	ldr	r3, [pc, #208]	; (8001264 <HAL_I2S_MspInit+0x13c>)
 8001192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001194:	4a33      	ldr	r2, [pc, #204]	; (8001264 <HAL_I2S_MspInit+0x13c>)
 8001196:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800119a:	6413      	str	r3, [r2, #64]	; 0x40
 800119c:	4b31      	ldr	r3, [pc, #196]	; (8001264 <HAL_I2S_MspInit+0x13c>)
 800119e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a8:	2300      	movs	r3, #0
 80011aa:	60bb      	str	r3, [r7, #8]
 80011ac:	4b2d      	ldr	r3, [pc, #180]	; (8001264 <HAL_I2S_MspInit+0x13c>)
 80011ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b0:	4a2c      	ldr	r2, [pc, #176]	; (8001264 <HAL_I2S_MspInit+0x13c>)
 80011b2:	f043 0302 	orr.w	r3, r3, #2
 80011b6:	6313      	str	r3, [r2, #48]	; 0x30
 80011b8:	4b2a      	ldr	r3, [pc, #168]	; (8001264 <HAL_I2S_MspInit+0x13c>)
 80011ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011bc:	f003 0302 	and.w	r3, r3, #2
 80011c0:	60bb      	str	r3, [r7, #8]
 80011c2:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80011c4:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80011c8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ca:	2302      	movs	r3, #2
 80011cc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d2:	2300      	movs	r3, #0
 80011d4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011d6:	2305      	movs	r3, #5
 80011d8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011da:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80011de:	4619      	mov	r1, r3
 80011e0:	4821      	ldr	r0, [pc, #132]	; (8001268 <HAL_I2S_MspInit+0x140>)
 80011e2:	f001 f859 	bl	8002298 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80011e6:	4b21      	ldr	r3, [pc, #132]	; (800126c <HAL_I2S_MspInit+0x144>)
 80011e8:	4a21      	ldr	r2, [pc, #132]	; (8001270 <HAL_I2S_MspInit+0x148>)
 80011ea:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80011ec:	4b1f      	ldr	r3, [pc, #124]	; (800126c <HAL_I2S_MspInit+0x144>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011f2:	4b1e      	ldr	r3, [pc, #120]	; (800126c <HAL_I2S_MspInit+0x144>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011f8:	4b1c      	ldr	r3, [pc, #112]	; (800126c <HAL_I2S_MspInit+0x144>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011fe:	4b1b      	ldr	r3, [pc, #108]	; (800126c <HAL_I2S_MspInit+0x144>)
 8001200:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001204:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001206:	4b19      	ldr	r3, [pc, #100]	; (800126c <HAL_I2S_MspInit+0x144>)
 8001208:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800120c:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800120e:	4b17      	ldr	r3, [pc, #92]	; (800126c <HAL_I2S_MspInit+0x144>)
 8001210:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001214:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001216:	4b15      	ldr	r3, [pc, #84]	; (800126c <HAL_I2S_MspInit+0x144>)
 8001218:	f44f 7280 	mov.w	r2, #256	; 0x100
 800121c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800121e:	4b13      	ldr	r3, [pc, #76]	; (800126c <HAL_I2S_MspInit+0x144>)
 8001220:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001224:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001226:	4b11      	ldr	r3, [pc, #68]	; (800126c <HAL_I2S_MspInit+0x144>)
 8001228:	2200      	movs	r2, #0
 800122a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800122c:	480f      	ldr	r0, [pc, #60]	; (800126c <HAL_I2S_MspInit+0x144>)
 800122e:	f000 fc25 	bl	8001a7c <HAL_DMA_Init>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <HAL_I2S_MspInit+0x114>
    {
      Error_Handler();
 8001238:	f7ff feda 	bl	8000ff0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4a0b      	ldr	r2, [pc, #44]	; (800126c <HAL_I2S_MspInit+0x144>)
 8001240:	63da      	str	r2, [r3, #60]	; 0x3c
 8001242:	4a0a      	ldr	r2, [pc, #40]	; (800126c <HAL_I2S_MspInit+0x144>)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8001248:	2200      	movs	r2, #0
 800124a:	2105      	movs	r1, #5
 800124c:	2024      	movs	r0, #36	; 0x24
 800124e:	f000 fbcf 	bl	80019f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001252:	2024      	movs	r0, #36	; 0x24
 8001254:	f000 fbe8 	bl	8001a28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001258:	bf00      	nop
 800125a:	3780      	adds	r7, #128	; 0x80
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40003800 	.word	0x40003800
 8001264:	40023800 	.word	0x40023800
 8001268:	40020400 	.word	0x40020400
 800126c:	20000138 	.word	0x20000138
 8001270:	40026058 	.word	0x40026058

08001274 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b0a2      	sub	sp, #136	; 0x88
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800128c:	f107 0318 	add.w	r3, r7, #24
 8001290:	225c      	movs	r2, #92	; 0x5c
 8001292:	2100      	movs	r1, #0
 8001294:	4618      	mov	r0, r3
 8001296:	f00d fd83 	bl	800eda0 <memset>
  if(hsd->Instance==SDIO)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a74      	ldr	r2, [pc, #464]	; (8001470 <HAL_SD_MspInit+0x1fc>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	f040 80e0 	bne.w	8001466 <HAL_SD_MspInit+0x1f2>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80012a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012aa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80012ac:	2300      	movs	r3, #0
 80012ae:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80012b0:	2300      	movs	r3, #0
 80012b2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012b4:	f107 0318 	add.w	r3, r7, #24
 80012b8:	4618      	mov	r0, r3
 80012ba:	f002 f849 	bl	8003350 <HAL_RCCEx_PeriphCLKConfig>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 80012c4:	f7ff fe94 	bl	8000ff0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]
 80012cc:	4b69      	ldr	r3, [pc, #420]	; (8001474 <HAL_SD_MspInit+0x200>)
 80012ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d0:	4a68      	ldr	r2, [pc, #416]	; (8001474 <HAL_SD_MspInit+0x200>)
 80012d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012d6:	6453      	str	r3, [r2, #68]	; 0x44
 80012d8:	4b66      	ldr	r3, [pc, #408]	; (8001474 <HAL_SD_MspInit+0x200>)
 80012da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012e0:	617b      	str	r3, [r7, #20]
 80012e2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e4:	2300      	movs	r3, #0
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	4b62      	ldr	r3, [pc, #392]	; (8001474 <HAL_SD_MspInit+0x200>)
 80012ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ec:	4a61      	ldr	r2, [pc, #388]	; (8001474 <HAL_SD_MspInit+0x200>)
 80012ee:	f043 0304 	orr.w	r3, r3, #4
 80012f2:	6313      	str	r3, [r2, #48]	; 0x30
 80012f4:	4b5f      	ldr	r3, [pc, #380]	; (8001474 <HAL_SD_MspInit+0x200>)
 80012f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f8:	f003 0304 	and.w	r3, r3, #4
 80012fc:	613b      	str	r3, [r7, #16]
 80012fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001300:	2300      	movs	r3, #0
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	4b5b      	ldr	r3, [pc, #364]	; (8001474 <HAL_SD_MspInit+0x200>)
 8001306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001308:	4a5a      	ldr	r2, [pc, #360]	; (8001474 <HAL_SD_MspInit+0x200>)
 800130a:	f043 0308 	orr.w	r3, r3, #8
 800130e:	6313      	str	r3, [r2, #48]	; 0x30
 8001310:	4b58      	ldr	r3, [pc, #352]	; (8001474 <HAL_SD_MspInit+0x200>)
 8001312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001314:	f003 0308 	and.w	r3, r3, #8
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	68fb      	ldr	r3, [r7, #12]
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 800131c:	f44f 53b8 	mov.w	r3, #5888	; 0x1700
 8001320:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001322:	2302      	movs	r3, #2
 8001324:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800132a:	2303      	movs	r3, #3
 800132c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001330:	230c      	movs	r3, #12
 8001332:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001336:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800133a:	4619      	mov	r1, r3
 800133c:	484e      	ldr	r0, [pc, #312]	; (8001478 <HAL_SD_MspInit+0x204>)
 800133e:	f000 ffab 	bl	8002298 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001342:	2304      	movs	r3, #4
 8001344:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001346:	2302      	movs	r3, #2
 8001348:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134e:	2303      	movs	r3, #3
 8001350:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001354:	230c      	movs	r3, #12
 8001356:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800135a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800135e:	4619      	mov	r1, r3
 8001360:	4846      	ldr	r0, [pc, #280]	; (800147c <HAL_SD_MspInit+0x208>)
 8001362:	f000 ff99 	bl	8002298 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001366:	4b46      	ldr	r3, [pc, #280]	; (8001480 <HAL_SD_MspInit+0x20c>)
 8001368:	4a46      	ldr	r2, [pc, #280]	; (8001484 <HAL_SD_MspInit+0x210>)
 800136a:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800136c:	4b44      	ldr	r3, [pc, #272]	; (8001480 <HAL_SD_MspInit+0x20c>)
 800136e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001372:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001374:	4b42      	ldr	r3, [pc, #264]	; (8001480 <HAL_SD_MspInit+0x20c>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800137a:	4b41      	ldr	r3, [pc, #260]	; (8001480 <HAL_SD_MspInit+0x20c>)
 800137c:	2200      	movs	r2, #0
 800137e:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001380:	4b3f      	ldr	r3, [pc, #252]	; (8001480 <HAL_SD_MspInit+0x20c>)
 8001382:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001386:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001388:	4b3d      	ldr	r3, [pc, #244]	; (8001480 <HAL_SD_MspInit+0x20c>)
 800138a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800138e:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001390:	4b3b      	ldr	r3, [pc, #236]	; (8001480 <HAL_SD_MspInit+0x20c>)
 8001392:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001396:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001398:	4b39      	ldr	r3, [pc, #228]	; (8001480 <HAL_SD_MspInit+0x20c>)
 800139a:	2220      	movs	r2, #32
 800139c:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800139e:	4b38      	ldr	r3, [pc, #224]	; (8001480 <HAL_SD_MspInit+0x20c>)
 80013a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013a4:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80013a6:	4b36      	ldr	r3, [pc, #216]	; (8001480 <HAL_SD_MspInit+0x20c>)
 80013a8:	2204      	movs	r2, #4
 80013aa:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80013ac:	4b34      	ldr	r3, [pc, #208]	; (8001480 <HAL_SD_MspInit+0x20c>)
 80013ae:	2203      	movs	r2, #3
 80013b0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80013b2:	4b33      	ldr	r3, [pc, #204]	; (8001480 <HAL_SD_MspInit+0x20c>)
 80013b4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80013b8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80013ba:	4b31      	ldr	r3, [pc, #196]	; (8001480 <HAL_SD_MspInit+0x20c>)
 80013bc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80013c0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80013c2:	482f      	ldr	r0, [pc, #188]	; (8001480 <HAL_SD_MspInit+0x20c>)
 80013c4:	f000 fb5a 	bl	8001a7c <HAL_DMA_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <HAL_SD_MspInit+0x15e>
    {
      Error_Handler();
 80013ce:	f7ff fe0f 	bl	8000ff0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a2a      	ldr	r2, [pc, #168]	; (8001480 <HAL_SD_MspInit+0x20c>)
 80013d6:	641a      	str	r2, [r3, #64]	; 0x40
 80013d8:	4a29      	ldr	r2, [pc, #164]	; (8001480 <HAL_SD_MspInit+0x20c>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80013de:	4b2a      	ldr	r3, [pc, #168]	; (8001488 <HAL_SD_MspInit+0x214>)
 80013e0:	4a2a      	ldr	r2, [pc, #168]	; (800148c <HAL_SD_MspInit+0x218>)
 80013e2:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80013e4:	4b28      	ldr	r3, [pc, #160]	; (8001488 <HAL_SD_MspInit+0x214>)
 80013e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013ea:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013ec:	4b26      	ldr	r3, [pc, #152]	; (8001488 <HAL_SD_MspInit+0x214>)
 80013ee:	2240      	movs	r2, #64	; 0x40
 80013f0:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013f2:	4b25      	ldr	r3, [pc, #148]	; (8001488 <HAL_SD_MspInit+0x214>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013f8:	4b23      	ldr	r3, [pc, #140]	; (8001488 <HAL_SD_MspInit+0x214>)
 80013fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013fe:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001400:	4b21      	ldr	r3, [pc, #132]	; (8001488 <HAL_SD_MspInit+0x214>)
 8001402:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001406:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001408:	4b1f      	ldr	r3, [pc, #124]	; (8001488 <HAL_SD_MspInit+0x214>)
 800140a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800140e:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001410:	4b1d      	ldr	r3, [pc, #116]	; (8001488 <HAL_SD_MspInit+0x214>)
 8001412:	2220      	movs	r2, #32
 8001414:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001416:	4b1c      	ldr	r3, [pc, #112]	; (8001488 <HAL_SD_MspInit+0x214>)
 8001418:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800141c:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800141e:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <HAL_SD_MspInit+0x214>)
 8001420:	2204      	movs	r2, #4
 8001422:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001424:	4b18      	ldr	r3, [pc, #96]	; (8001488 <HAL_SD_MspInit+0x214>)
 8001426:	2203      	movs	r2, #3
 8001428:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800142a:	4b17      	ldr	r3, [pc, #92]	; (8001488 <HAL_SD_MspInit+0x214>)
 800142c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001430:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001432:	4b15      	ldr	r3, [pc, #84]	; (8001488 <HAL_SD_MspInit+0x214>)
 8001434:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001438:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800143a:	4813      	ldr	r0, [pc, #76]	; (8001488 <HAL_SD_MspInit+0x214>)
 800143c:	f000 fb1e 	bl	8001a7c <HAL_DMA_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 8001446:	f7ff fdd3 	bl	8000ff0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a0e      	ldr	r2, [pc, #56]	; (8001488 <HAL_SD_MspInit+0x214>)
 800144e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001450:	4a0d      	ldr	r2, [pc, #52]	; (8001488 <HAL_SD_MspInit+0x214>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8001456:	2200      	movs	r2, #0
 8001458:	2105      	movs	r1, #5
 800145a:	2031      	movs	r0, #49	; 0x31
 800145c:	f000 fac8 	bl	80019f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001460:	2031      	movs	r0, #49	; 0x31
 8001462:	f000 fae1 	bl	8001a28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001466:	bf00      	nop
 8001468:	3788      	adds	r7, #136	; 0x88
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40012c00 	.word	0x40012c00
 8001474:	40023800 	.word	0x40023800
 8001478:	40020800 	.word	0x40020800
 800147c:	40020c00 	.word	0x40020c00
 8001480:	2000021c 	.word	0x2000021c
 8001484:	40026458 	.word	0x40026458
 8001488:	2000027c 	.word	0x2000027c
 800148c:	400264a0 	.word	0x400264a0

08001490 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08a      	sub	sp, #40	; 0x28
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a1d      	ldr	r2, [pc, #116]	; (8001524 <HAL_UART_MspInit+0x94>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d133      	bne.n	800151a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	4b1c      	ldr	r3, [pc, #112]	; (8001528 <HAL_UART_MspInit+0x98>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	4a1b      	ldr	r2, [pc, #108]	; (8001528 <HAL_UART_MspInit+0x98>)
 80014bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014c0:	6413      	str	r3, [r2, #64]	; 0x40
 80014c2:	4b19      	ldr	r3, [pc, #100]	; (8001528 <HAL_UART_MspInit+0x98>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	4b15      	ldr	r3, [pc, #84]	; (8001528 <HAL_UART_MspInit+0x98>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a14      	ldr	r2, [pc, #80]	; (8001528 <HAL_UART_MspInit+0x98>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b12      	ldr	r3, [pc, #72]	; (8001528 <HAL_UART_MspInit+0x98>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014ea:	230c      	movs	r3, #12
 80014ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ee:	2302      	movs	r3, #2
 80014f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f6:	2303      	movs	r3, #3
 80014f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014fa:	2307      	movs	r3, #7
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fe:	f107 0314 	add.w	r3, r7, #20
 8001502:	4619      	mov	r1, r3
 8001504:	4809      	ldr	r0, [pc, #36]	; (800152c <HAL_UART_MspInit+0x9c>)
 8001506:	f000 fec7 	bl	8002298 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800150a:	2200      	movs	r2, #0
 800150c:	2105      	movs	r1, #5
 800150e:	2026      	movs	r0, #38	; 0x26
 8001510:	f000 fa6e 	bl	80019f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001514:	2026      	movs	r0, #38	; 0x26
 8001516:	f000 fa87 	bl	8001a28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800151a:	bf00      	nop
 800151c:	3728      	adds	r7, #40	; 0x28
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40004400 	.word	0x40004400
 8001528:	40023800 	.word	0x40023800
 800152c:	40020000 	.word	0x40020000

08001530 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08c      	sub	sp, #48	; 0x30
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001538:	2300      	movs	r3, #0
 800153a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800153c:	2300      	movs	r3, #0
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001540:	2300      	movs	r3, #0
 8001542:	60bb      	str	r3, [r7, #8]
 8001544:	4b2f      	ldr	r3, [pc, #188]	; (8001604 <HAL_InitTick+0xd4>)
 8001546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001548:	4a2e      	ldr	r2, [pc, #184]	; (8001604 <HAL_InitTick+0xd4>)
 800154a:	f043 0301 	orr.w	r3, r3, #1
 800154e:	6453      	str	r3, [r2, #68]	; 0x44
 8001550:	4b2c      	ldr	r3, [pc, #176]	; (8001604 <HAL_InitTick+0xd4>)
 8001552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001554:	f003 0301 	and.w	r3, r3, #1
 8001558:	60bb      	str	r3, [r7, #8]
 800155a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800155c:	f107 020c 	add.w	r2, r7, #12
 8001560:	f107 0310 	add.w	r3, r7, #16
 8001564:	4611      	mov	r1, r2
 8001566:	4618      	mov	r0, r3
 8001568:	f001 fec0 	bl	80032ec <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800156c:	f001 feaa 	bl	80032c4 <HAL_RCC_GetPCLK2Freq>
 8001570:	4603      	mov	r3, r0
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001578:	4a23      	ldr	r2, [pc, #140]	; (8001608 <HAL_InitTick+0xd8>)
 800157a:	fba2 2303 	umull	r2, r3, r2, r3
 800157e:	0c9b      	lsrs	r3, r3, #18
 8001580:	3b01      	subs	r3, #1
 8001582:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001584:	4b21      	ldr	r3, [pc, #132]	; (800160c <HAL_InitTick+0xdc>)
 8001586:	4a22      	ldr	r2, [pc, #136]	; (8001610 <HAL_InitTick+0xe0>)
 8001588:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800158a:	4b20      	ldr	r3, [pc, #128]	; (800160c <HAL_InitTick+0xdc>)
 800158c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001590:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001592:	4a1e      	ldr	r2, [pc, #120]	; (800160c <HAL_InitTick+0xdc>)
 8001594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001596:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001598:	4b1c      	ldr	r3, [pc, #112]	; (800160c <HAL_InitTick+0xdc>)
 800159a:	2200      	movs	r2, #0
 800159c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800159e:	4b1b      	ldr	r3, [pc, #108]	; (800160c <HAL_InitTick+0xdc>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a4:	4b19      	ldr	r3, [pc, #100]	; (800160c <HAL_InitTick+0xdc>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80015aa:	4818      	ldr	r0, [pc, #96]	; (800160c <HAL_InitTick+0xdc>)
 80015ac:	f004 fa2a 	bl	8005a04 <HAL_TIM_Base_Init>
 80015b0:	4603      	mov	r3, r0
 80015b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80015b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d11b      	bne.n	80015f6 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80015be:	4813      	ldr	r0, [pc, #76]	; (800160c <HAL_InitTick+0xdc>)
 80015c0:	f004 fa7a 	bl	8005ab8 <HAL_TIM_Base_Start_IT>
 80015c4:	4603      	mov	r3, r0
 80015c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80015ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d111      	bne.n	80015f6 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80015d2:	2019      	movs	r0, #25
 80015d4:	f000 fa28 	bl	8001a28 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2b0f      	cmp	r3, #15
 80015dc:	d808      	bhi.n	80015f0 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80015de:	2200      	movs	r2, #0
 80015e0:	6879      	ldr	r1, [r7, #4]
 80015e2:	2019      	movs	r0, #25
 80015e4:	f000 fa04 	bl	80019f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015e8:	4a0a      	ldr	r2, [pc, #40]	; (8001614 <HAL_InitTick+0xe4>)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6013      	str	r3, [r2, #0]
 80015ee:	e002      	b.n	80015f6 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80015f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3730      	adds	r7, #48	; 0x30
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40023800 	.word	0x40023800
 8001608:	431bde83 	.word	0x431bde83
 800160c:	20000ea0 	.word	0x20000ea0
 8001610:	40010000 	.word	0x40010000
 8001614:	20000008 	.word	0x20000008

08001618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800161c:	e7fe      	b.n	800161c <NMI_Handler+0x4>

0800161e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001622:	e7fe      	b.n	8001622 <HardFault_Handler+0x4>

08001624 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001628:	e7fe      	b.n	8001628 <MemManage_Handler+0x4>

0800162a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800162e:	e7fe      	b.n	800162e <BusFault_Handler+0x4>

08001630 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001634:	e7fe      	b.n	8001634 <UsageFault_Handler+0x4>

08001636 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001636:	b480      	push	{r7}
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001648:	4802      	ldr	r0, [pc, #8]	; (8001654 <DMA1_Stream3_IRQHandler+0x10>)
 800164a:	f000 fbaf 	bl	8001dac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000138 	.word	0x20000138

08001658 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800165c:	4802      	ldr	r0, [pc, #8]	; (8001668 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800165e:	f004 fa9b 	bl	8005b98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000ea0 	.word	0x20000ea0

0800166c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 8001670:	4802      	ldr	r0, [pc, #8]	; (800167c <SPI2_IRQHandler+0x10>)
 8001672:	f001 fb8b 	bl	8002d8c <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	200000f0 	.word	0x200000f0

08001680 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001684:	4802      	ldr	r0, [pc, #8]	; (8001690 <USART2_IRQHandler+0x10>)
 8001686:	f004 fd1d 	bl	80060c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	200002dc 	.word	0x200002dc

08001694 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001698:	4802      	ldr	r0, [pc, #8]	; (80016a4 <SDIO_IRQHandler+0x10>)
 800169a:	f003 fb0b 	bl	8004cb4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000198 	.word	0x20000198

080016a8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80016ac:	4802      	ldr	r0, [pc, #8]	; (80016b8 <DMA2_Stream3_IRQHandler+0x10>)
 80016ae:	f000 fb7d 	bl	8001dac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	2000021c 	.word	0x2000021c

080016bc <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80016c0:	4802      	ldr	r0, [pc, #8]	; (80016cc <DMA2_Stream6_IRQHandler+0x10>)
 80016c2:	f000 fb73 	bl	8001dac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	2000027c 	.word	0x2000027c

080016d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016d8:	4a14      	ldr	r2, [pc, #80]	; (800172c <_sbrk+0x5c>)
 80016da:	4b15      	ldr	r3, [pc, #84]	; (8001730 <_sbrk+0x60>)
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016e4:	4b13      	ldr	r3, [pc, #76]	; (8001734 <_sbrk+0x64>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d102      	bne.n	80016f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016ec:	4b11      	ldr	r3, [pc, #68]	; (8001734 <_sbrk+0x64>)
 80016ee:	4a12      	ldr	r2, [pc, #72]	; (8001738 <_sbrk+0x68>)
 80016f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016f2:	4b10      	ldr	r3, [pc, #64]	; (8001734 <_sbrk+0x64>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4413      	add	r3, r2
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d207      	bcs.n	8001710 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001700:	f00d fb04 	bl	800ed0c <__errno>
 8001704:	4603      	mov	r3, r0
 8001706:	220c      	movs	r2, #12
 8001708:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800170a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800170e:	e009      	b.n	8001724 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001710:	4b08      	ldr	r3, [pc, #32]	; (8001734 <_sbrk+0x64>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001716:	4b07      	ldr	r3, [pc, #28]	; (8001734 <_sbrk+0x64>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4413      	add	r3, r2
 800171e:	4a05      	ldr	r2, [pc, #20]	; (8001734 <_sbrk+0x64>)
 8001720:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001722:	68fb      	ldr	r3, [r7, #12]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3718      	adds	r7, #24
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20020000 	.word	0x20020000
 8001730:	00000400 	.word	0x00000400
 8001734:	20000ee8 	.word	0x20000ee8
 8001738:	20005b88 	.word	0x20005b88

0800173c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <SystemInit+0x20>)
 8001742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001746:	4a05      	ldr	r2, [pc, #20]	; (800175c <SystemInit+0x20>)
 8001748:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800174c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001760:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001798 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001764:	480d      	ldr	r0, [pc, #52]	; (800179c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001766:	490e      	ldr	r1, [pc, #56]	; (80017a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001768:	4a0e      	ldr	r2, [pc, #56]	; (80017a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800176a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800176c:	e002      	b.n	8001774 <LoopCopyDataInit>

0800176e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800176e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001770:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001772:	3304      	adds	r3, #4

08001774 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001774:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001776:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001778:	d3f9      	bcc.n	800176e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800177a:	4a0b      	ldr	r2, [pc, #44]	; (80017a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800177c:	4c0b      	ldr	r4, [pc, #44]	; (80017ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800177e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001780:	e001      	b.n	8001786 <LoopFillZerobss>

08001782 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001782:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001784:	3204      	adds	r2, #4

08001786 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001786:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001788:	d3fb      	bcc.n	8001782 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800178a:	f7ff ffd7 	bl	800173c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800178e:	f00d fac3 	bl	800ed18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001792:	f7fe ff1f 	bl	80005d4 <main>
  bx  lr    
 8001796:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001798:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800179c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017a0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80017a4:	0800fa18 	.word	0x0800fa18
  ldr r2, =_sbss
 80017a8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80017ac:	20005b84 	.word	0x20005b84

080017b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017b0:	e7fe      	b.n	80017b0 <ADC_IRQHandler>
	...

080017b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017b8:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <HAL_Init+0x40>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a0d      	ldr	r2, [pc, #52]	; (80017f4 <HAL_Init+0x40>)
 80017be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017c4:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <HAL_Init+0x40>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a0a      	ldr	r2, [pc, #40]	; (80017f4 <HAL_Init+0x40>)
 80017ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017d0:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <HAL_Init+0x40>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a07      	ldr	r2, [pc, #28]	; (80017f4 <HAL_Init+0x40>)
 80017d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017dc:	2003      	movs	r0, #3
 80017de:	f000 f8fc 	bl	80019da <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017e2:	200f      	movs	r0, #15
 80017e4:	f7ff fea4 	bl	8001530 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017e8:	f7ff fc08 	bl	8000ffc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40023c00 	.word	0x40023c00

080017f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <HAL_IncTick+0x20>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	461a      	mov	r2, r3
 8001802:	4b06      	ldr	r3, [pc, #24]	; (800181c <HAL_IncTick+0x24>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4413      	add	r3, r2
 8001808:	4a04      	ldr	r2, [pc, #16]	; (800181c <HAL_IncTick+0x24>)
 800180a:	6013      	str	r3, [r2, #0]
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	2000000c 	.word	0x2000000c
 800181c:	20000eec 	.word	0x20000eec

08001820 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  return uwTick;
 8001824:	4b03      	ldr	r3, [pc, #12]	; (8001834 <HAL_GetTick+0x14>)
 8001826:	681b      	ldr	r3, [r3, #0]
}
 8001828:	4618      	mov	r0, r3
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	20000eec 	.word	0x20000eec

08001838 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001840:	f7ff ffee 	bl	8001820 <HAL_GetTick>
 8001844:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001850:	d005      	beq.n	800185e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001852:	4b0a      	ldr	r3, [pc, #40]	; (800187c <HAL_Delay+0x44>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	461a      	mov	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	4413      	add	r3, r2
 800185c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800185e:	bf00      	nop
 8001860:	f7ff ffde 	bl	8001820 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	429a      	cmp	r2, r3
 800186e:	d8f7      	bhi.n	8001860 <HAL_Delay+0x28>
  {
  }
}
 8001870:	bf00      	nop
 8001872:	bf00      	nop
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	2000000c 	.word	0x2000000c

08001880 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001890:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001896:	68ba      	ldr	r2, [r7, #8]
 8001898:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800189c:	4013      	ands	r3, r2
 800189e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018b2:	4a04      	ldr	r2, [pc, #16]	; (80018c4 <__NVIC_SetPriorityGrouping+0x44>)
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	60d3      	str	r3, [r2, #12]
}
 80018b8:	bf00      	nop
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018cc:	4b04      	ldr	r3, [pc, #16]	; (80018e0 <__NVIC_GetPriorityGrouping+0x18>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	0a1b      	lsrs	r3, r3, #8
 80018d2:	f003 0307 	and.w	r3, r3, #7
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	db0b      	blt.n	800190e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	f003 021f 	and.w	r2, r3, #31
 80018fc:	4907      	ldr	r1, [pc, #28]	; (800191c <__NVIC_EnableIRQ+0x38>)
 80018fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001902:	095b      	lsrs	r3, r3, #5
 8001904:	2001      	movs	r0, #1
 8001906:	fa00 f202 	lsl.w	r2, r0, r2
 800190a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	e000e100 	.word	0xe000e100

08001920 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	6039      	str	r1, [r7, #0]
 800192a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800192c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001930:	2b00      	cmp	r3, #0
 8001932:	db0a      	blt.n	800194a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	b2da      	uxtb	r2, r3
 8001938:	490c      	ldr	r1, [pc, #48]	; (800196c <__NVIC_SetPriority+0x4c>)
 800193a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193e:	0112      	lsls	r2, r2, #4
 8001940:	b2d2      	uxtb	r2, r2
 8001942:	440b      	add	r3, r1
 8001944:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001948:	e00a      	b.n	8001960 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	b2da      	uxtb	r2, r3
 800194e:	4908      	ldr	r1, [pc, #32]	; (8001970 <__NVIC_SetPriority+0x50>)
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	f003 030f 	and.w	r3, r3, #15
 8001956:	3b04      	subs	r3, #4
 8001958:	0112      	lsls	r2, r2, #4
 800195a:	b2d2      	uxtb	r2, r2
 800195c:	440b      	add	r3, r1
 800195e:	761a      	strb	r2, [r3, #24]
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	e000e100 	.word	0xe000e100
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001974:	b480      	push	{r7}
 8001976:	b089      	sub	sp, #36	; 0x24
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f1c3 0307 	rsb	r3, r3, #7
 800198e:	2b04      	cmp	r3, #4
 8001990:	bf28      	it	cs
 8001992:	2304      	movcs	r3, #4
 8001994:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	3304      	adds	r3, #4
 800199a:	2b06      	cmp	r3, #6
 800199c:	d902      	bls.n	80019a4 <NVIC_EncodePriority+0x30>
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	3b03      	subs	r3, #3
 80019a2:	e000      	b.n	80019a6 <NVIC_EncodePriority+0x32>
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43da      	mvns	r2, r3
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	401a      	ands	r2, r3
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	fa01 f303 	lsl.w	r3, r1, r3
 80019c6:	43d9      	mvns	r1, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019cc:	4313      	orrs	r3, r2
         );
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3724      	adds	r7, #36	; 0x24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f7ff ff4c 	bl	8001880 <__NVIC_SetPriorityGrouping>
}
 80019e8:	bf00      	nop
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
 80019fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019fe:	2300      	movs	r3, #0
 8001a00:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a02:	f7ff ff61 	bl	80018c8 <__NVIC_GetPriorityGrouping>
 8001a06:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	68b9      	ldr	r1, [r7, #8]
 8001a0c:	6978      	ldr	r0, [r7, #20]
 8001a0e:	f7ff ffb1 	bl	8001974 <NVIC_EncodePriority>
 8001a12:	4602      	mov	r2, r0
 8001a14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a18:	4611      	mov	r1, r2
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff ff80 	bl	8001920 <__NVIC_SetPriority>
}
 8001a20:	bf00      	nop
 8001a22:	3718      	adds	r7, #24
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff ff54 	bl	80018e4 <__NVIC_EnableIRQ>
}
 8001a3c:	bf00      	nop
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e00e      	b.n	8001a74 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	795b      	ldrb	r3, [r3, #5]
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d105      	bne.n	8001a6c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff faf4 	bl	8001054 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a88:	f7ff feca 	bl	8001820 <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d101      	bne.n	8001a98 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e099      	b.n	8001bcc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2202      	movs	r2, #2
 8001a9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f022 0201 	bic.w	r2, r2, #1
 8001ab6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ab8:	e00f      	b.n	8001ada <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001aba:	f7ff feb1 	bl	8001820 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b05      	cmp	r3, #5
 8001ac6:	d908      	bls.n	8001ada <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2220      	movs	r2, #32
 8001acc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2203      	movs	r2, #3
 8001ad2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e078      	b.n	8001bcc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1e8      	bne.n	8001aba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001af0:	697a      	ldr	r2, [r7, #20]
 8001af2:	4b38      	ldr	r3, [pc, #224]	; (8001bd4 <HAL_DMA_Init+0x158>)
 8001af4:	4013      	ands	r3, r2
 8001af6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b06:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a1b      	ldr	r3, [r3, #32]
 8001b24:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d107      	bne.n	8001b44 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	697a      	ldr	r2, [r7, #20]
 8001b4a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	695b      	ldr	r3, [r3, #20]
 8001b52:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	f023 0307 	bic.w	r3, r3, #7
 8001b5a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b60:	697a      	ldr	r2, [r7, #20]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	d117      	bne.n	8001b9e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b72:	697a      	ldr	r2, [r7, #20]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d00e      	beq.n	8001b9e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f000 fb0d 	bl	80021a0 <DMA_CheckFifoParam>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d008      	beq.n	8001b9e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2240      	movs	r2, #64	; 0x40
 8001b90:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2201      	movs	r2, #1
 8001b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e016      	b.n	8001bcc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 fac4 	bl	8002134 <DMA_CalcBaseAndBitshift>
 8001bac:	4603      	mov	r3, r0
 8001bae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb4:	223f      	movs	r2, #63	; 0x3f
 8001bb6:	409a      	lsls	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3718      	adds	r7, #24
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	f010803f 	.word	0xf010803f

08001bd8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
 8001be4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001be6:	2300      	movs	r3, #0
 8001be8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d101      	bne.n	8001bfe <HAL_DMA_Start_IT+0x26>
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	e040      	b.n	8001c80 <HAL_DMA_Start_IT+0xa8>
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2201      	movs	r2, #1
 8001c02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d12f      	bne.n	8001c72 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2202      	movs	r2, #2
 8001c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	68b9      	ldr	r1, [r7, #8]
 8001c26:	68f8      	ldr	r0, [r7, #12]
 8001c28:	f000 fa56 	bl	80020d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c30:	223f      	movs	r2, #63	; 0x3f
 8001c32:	409a      	lsls	r2, r3
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f042 0216 	orr.w	r2, r2, #22
 8001c46:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d007      	beq.n	8001c60 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f042 0208 	orr.w	r2, r2, #8
 8001c5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f042 0201 	orr.w	r2, r2, #1
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	e005      	b.n	8001c7e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3718      	adds	r7, #24
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c94:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c96:	f7ff fdc3 	bl	8001820 <HAL_GetTick>
 8001c9a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d008      	beq.n	8001cba <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2280      	movs	r2, #128	; 0x80
 8001cac:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e052      	b.n	8001d60 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f022 0216 	bic.w	r2, r2, #22
 8001cc8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	695a      	ldr	r2, [r3, #20]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cd8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d103      	bne.n	8001cea <HAL_DMA_Abort+0x62>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d007      	beq.n	8001cfa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f022 0208 	bic.w	r2, r2, #8
 8001cf8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 0201 	bic.w	r2, r2, #1
 8001d08:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d0a:	e013      	b.n	8001d34 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d0c:	f7ff fd88 	bl	8001820 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b05      	cmp	r3, #5
 8001d18:	d90c      	bls.n	8001d34 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2220      	movs	r2, #32
 8001d1e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2203      	movs	r2, #3
 8001d24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e015      	b.n	8001d60 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1e4      	bne.n	8001d0c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d46:	223f      	movs	r2, #63	; 0x3f
 8001d48:	409a      	lsls	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d004      	beq.n	8001d86 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2280      	movs	r2, #128	; 0x80
 8001d80:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e00c      	b.n	8001da0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2205      	movs	r2, #5
 8001d8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 0201 	bic.w	r2, r2, #1
 8001d9c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001db4:	2300      	movs	r3, #0
 8001db6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001db8:	4b8e      	ldr	r3, [pc, #568]	; (8001ff4 <HAL_DMA_IRQHandler+0x248>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a8e      	ldr	r2, [pc, #568]	; (8001ff8 <HAL_DMA_IRQHandler+0x24c>)
 8001dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc2:	0a9b      	lsrs	r3, r3, #10
 8001dc4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd6:	2208      	movs	r2, #8
 8001dd8:	409a      	lsls	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d01a      	beq.n	8001e18 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0304 	and.w	r3, r3, #4
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d013      	beq.n	8001e18 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f022 0204 	bic.w	r2, r2, #4
 8001dfe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e04:	2208      	movs	r2, #8
 8001e06:	409a      	lsls	r2, r3
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e10:	f043 0201 	orr.w	r2, r3, #1
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	409a      	lsls	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	4013      	ands	r3, r2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d012      	beq.n	8001e4e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00b      	beq.n	8001e4e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	409a      	lsls	r2, r3
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e46:	f043 0202 	orr.w	r2, r3, #2
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e52:	2204      	movs	r2, #4
 8001e54:	409a      	lsls	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d012      	beq.n	8001e84 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d00b      	beq.n	8001e84 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e70:	2204      	movs	r2, #4
 8001e72:	409a      	lsls	r2, r3
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e7c:	f043 0204 	orr.w	r2, r3, #4
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e88:	2210      	movs	r2, #16
 8001e8a:	409a      	lsls	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d043      	beq.n	8001f1c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0308 	and.w	r3, r3, #8
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d03c      	beq.n	8001f1c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea6:	2210      	movs	r2, #16
 8001ea8:	409a      	lsls	r2, r3
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d018      	beq.n	8001eee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d108      	bne.n	8001edc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d024      	beq.n	8001f1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	4798      	blx	r3
 8001eda:	e01f      	b.n	8001f1c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d01b      	beq.n	8001f1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	4798      	blx	r3
 8001eec:	e016      	b.n	8001f1c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d107      	bne.n	8001f0c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f022 0208 	bic.w	r2, r2, #8
 8001f0a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d003      	beq.n	8001f1c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f20:	2220      	movs	r2, #32
 8001f22:	409a      	lsls	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	4013      	ands	r3, r2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f000 808f 	beq.w	800204c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0310 	and.w	r3, r3, #16
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f000 8087 	beq.w	800204c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f42:	2220      	movs	r2, #32
 8001f44:	409a      	lsls	r2, r3
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b05      	cmp	r3, #5
 8001f54:	d136      	bne.n	8001fc4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 0216 	bic.w	r2, r2, #22
 8001f64:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	695a      	ldr	r2, [r3, #20]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f74:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d103      	bne.n	8001f86 <HAL_DMA_IRQHandler+0x1da>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d007      	beq.n	8001f96 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 0208 	bic.w	r2, r2, #8
 8001f94:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9a:	223f      	movs	r2, #63	; 0x3f
 8001f9c:	409a      	lsls	r2, r3
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d07e      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	4798      	blx	r3
        }
        return;
 8001fc2:	e079      	b.n	80020b8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d01d      	beq.n	800200e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d10d      	bne.n	8001ffc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d031      	beq.n	800204c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	4798      	blx	r3
 8001ff0:	e02c      	b.n	800204c <HAL_DMA_IRQHandler+0x2a0>
 8001ff2:	bf00      	nop
 8001ff4:	20000004 	.word	0x20000004
 8001ff8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002000:	2b00      	cmp	r3, #0
 8002002:	d023      	beq.n	800204c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	4798      	blx	r3
 800200c:	e01e      	b.n	800204c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002018:	2b00      	cmp	r3, #0
 800201a:	d10f      	bne.n	800203c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f022 0210 	bic.w	r2, r2, #16
 800202a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002040:	2b00      	cmp	r3, #0
 8002042:	d003      	beq.n	800204c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002050:	2b00      	cmp	r3, #0
 8002052:	d032      	beq.n	80020ba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	2b00      	cmp	r3, #0
 800205e:	d022      	beq.n	80020a6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2205      	movs	r2, #5
 8002064:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 0201 	bic.w	r2, r2, #1
 8002076:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	3301      	adds	r3, #1
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	429a      	cmp	r2, r3
 8002082:	d307      	bcc.n	8002094 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1f2      	bne.n	8002078 <HAL_DMA_IRQHandler+0x2cc>
 8002092:	e000      	b.n	8002096 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002094:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2201      	movs	r2, #1
 800209a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d005      	beq.n	80020ba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	4798      	blx	r3
 80020b6:	e000      	b.n	80020ba <HAL_DMA_IRQHandler+0x30e>
        return;
 80020b8:	bf00      	nop
    }
  }
}
 80020ba:	3718      	adds	r7, #24
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
 80020e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	2b40      	cmp	r3, #64	; 0x40
 8002104:	d108      	bne.n	8002118 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68ba      	ldr	r2, [r7, #8]
 8002114:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002116:	e007      	b.n	8002128 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68ba      	ldr	r2, [r7, #8]
 800211e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	60da      	str	r2, [r3, #12]
}
 8002128:	bf00      	nop
 800212a:	3714      	adds	r7, #20
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	b2db      	uxtb	r3, r3
 8002142:	3b10      	subs	r3, #16
 8002144:	4a14      	ldr	r2, [pc, #80]	; (8002198 <DMA_CalcBaseAndBitshift+0x64>)
 8002146:	fba2 2303 	umull	r2, r3, r2, r3
 800214a:	091b      	lsrs	r3, r3, #4
 800214c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800214e:	4a13      	ldr	r2, [pc, #76]	; (800219c <DMA_CalcBaseAndBitshift+0x68>)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4413      	add	r3, r2
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	461a      	mov	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2b03      	cmp	r3, #3
 8002160:	d909      	bls.n	8002176 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800216a:	f023 0303 	bic.w	r3, r3, #3
 800216e:	1d1a      	adds	r2, r3, #4
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	659a      	str	r2, [r3, #88]	; 0x58
 8002174:	e007      	b.n	8002186 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800217e:	f023 0303 	bic.w	r3, r3, #3
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800218a:	4618      	mov	r0, r3
 800218c:	3714      	adds	r7, #20
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	aaaaaaab 	.word	0xaaaaaaab
 800219c:	0800f8d8 	.word	0x0800f8d8

080021a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021a8:	2300      	movs	r3, #0
 80021aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d11f      	bne.n	80021fa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	2b03      	cmp	r3, #3
 80021be:	d856      	bhi.n	800226e <DMA_CheckFifoParam+0xce>
 80021c0:	a201      	add	r2, pc, #4	; (adr r2, 80021c8 <DMA_CheckFifoParam+0x28>)
 80021c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c6:	bf00      	nop
 80021c8:	080021d9 	.word	0x080021d9
 80021cc:	080021eb 	.word	0x080021eb
 80021d0:	080021d9 	.word	0x080021d9
 80021d4:	0800226f 	.word	0x0800226f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d046      	beq.n	8002272 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021e8:	e043      	b.n	8002272 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021f2:	d140      	bne.n	8002276 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021f8:	e03d      	b.n	8002276 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002202:	d121      	bne.n	8002248 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	2b03      	cmp	r3, #3
 8002208:	d837      	bhi.n	800227a <DMA_CheckFifoParam+0xda>
 800220a:	a201      	add	r2, pc, #4	; (adr r2, 8002210 <DMA_CheckFifoParam+0x70>)
 800220c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002210:	08002221 	.word	0x08002221
 8002214:	08002227 	.word	0x08002227
 8002218:	08002221 	.word	0x08002221
 800221c:	08002239 	.word	0x08002239
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	73fb      	strb	r3, [r7, #15]
      break;
 8002224:	e030      	b.n	8002288 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d025      	beq.n	800227e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002236:	e022      	b.n	800227e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002240:	d11f      	bne.n	8002282 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002246:	e01c      	b.n	8002282 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	2b02      	cmp	r3, #2
 800224c:	d903      	bls.n	8002256 <DMA_CheckFifoParam+0xb6>
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	2b03      	cmp	r3, #3
 8002252:	d003      	beq.n	800225c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002254:	e018      	b.n	8002288 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	73fb      	strb	r3, [r7, #15]
      break;
 800225a:	e015      	b.n	8002288 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002260:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d00e      	beq.n	8002286 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	73fb      	strb	r3, [r7, #15]
      break;
 800226c:	e00b      	b.n	8002286 <DMA_CheckFifoParam+0xe6>
      break;
 800226e:	bf00      	nop
 8002270:	e00a      	b.n	8002288 <DMA_CheckFifoParam+0xe8>
      break;
 8002272:	bf00      	nop
 8002274:	e008      	b.n	8002288 <DMA_CheckFifoParam+0xe8>
      break;
 8002276:	bf00      	nop
 8002278:	e006      	b.n	8002288 <DMA_CheckFifoParam+0xe8>
      break;
 800227a:	bf00      	nop
 800227c:	e004      	b.n	8002288 <DMA_CheckFifoParam+0xe8>
      break;
 800227e:	bf00      	nop
 8002280:	e002      	b.n	8002288 <DMA_CheckFifoParam+0xe8>
      break;   
 8002282:	bf00      	nop
 8002284:	e000      	b.n	8002288 <DMA_CheckFifoParam+0xe8>
      break;
 8002286:	bf00      	nop
    }
  } 
  
  return status; 
 8002288:	7bfb      	ldrb	r3, [r7, #15]
}
 800228a:	4618      	mov	r0, r3
 800228c:	3714      	adds	r7, #20
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop

08002298 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002298:	b480      	push	{r7}
 800229a:	b089      	sub	sp, #36	; 0x24
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022a2:	2300      	movs	r3, #0
 80022a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ae:	2300      	movs	r3, #0
 80022b0:	61fb      	str	r3, [r7, #28]
 80022b2:	e165      	b.n	8002580 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022b4:	2201      	movs	r2, #1
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	4013      	ands	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	f040 8154 	bne.w	800257a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f003 0303 	and.w	r3, r3, #3
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d005      	beq.n	80022ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d130      	bne.n	800234c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	2203      	movs	r2, #3
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	43db      	mvns	r3, r3
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	4013      	ands	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	68da      	ldr	r2, [r3, #12]
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	4313      	orrs	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002320:	2201      	movs	r2, #1
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4013      	ands	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	091b      	lsrs	r3, r3, #4
 8002336:	f003 0201 	and.w	r2, r3, #1
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4313      	orrs	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f003 0303 	and.w	r3, r3, #3
 8002354:	2b03      	cmp	r3, #3
 8002356:	d017      	beq.n	8002388 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	2203      	movs	r2, #3
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	43db      	mvns	r3, r3
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4013      	ands	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4313      	orrs	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f003 0303 	and.w	r3, r3, #3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d123      	bne.n	80023dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	08da      	lsrs	r2, r3, #3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3208      	adds	r2, #8
 800239c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	f003 0307 	and.w	r3, r3, #7
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	220f      	movs	r2, #15
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4013      	ands	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	691a      	ldr	r2, [r3, #16]
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	08da      	lsrs	r2, r3, #3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	3208      	adds	r2, #8
 80023d6:	69b9      	ldr	r1, [r7, #24]
 80023d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	2203      	movs	r2, #3
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	43db      	mvns	r3, r3
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	4013      	ands	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f003 0203 	and.w	r2, r3, #3
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	4313      	orrs	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002418:	2b00      	cmp	r3, #0
 800241a:	f000 80ae 	beq.w	800257a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	60fb      	str	r3, [r7, #12]
 8002422:	4b5d      	ldr	r3, [pc, #372]	; (8002598 <HAL_GPIO_Init+0x300>)
 8002424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002426:	4a5c      	ldr	r2, [pc, #368]	; (8002598 <HAL_GPIO_Init+0x300>)
 8002428:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800242c:	6453      	str	r3, [r2, #68]	; 0x44
 800242e:	4b5a      	ldr	r3, [pc, #360]	; (8002598 <HAL_GPIO_Init+0x300>)
 8002430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002432:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800243a:	4a58      	ldr	r2, [pc, #352]	; (800259c <HAL_GPIO_Init+0x304>)
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	089b      	lsrs	r3, r3, #2
 8002440:	3302      	adds	r3, #2
 8002442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002446:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	220f      	movs	r2, #15
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	43db      	mvns	r3, r3
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	4013      	ands	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a4f      	ldr	r2, [pc, #316]	; (80025a0 <HAL_GPIO_Init+0x308>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d025      	beq.n	80024b2 <HAL_GPIO_Init+0x21a>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a4e      	ldr	r2, [pc, #312]	; (80025a4 <HAL_GPIO_Init+0x30c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d01f      	beq.n	80024ae <HAL_GPIO_Init+0x216>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a4d      	ldr	r2, [pc, #308]	; (80025a8 <HAL_GPIO_Init+0x310>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d019      	beq.n	80024aa <HAL_GPIO_Init+0x212>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a4c      	ldr	r2, [pc, #304]	; (80025ac <HAL_GPIO_Init+0x314>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d013      	beq.n	80024a6 <HAL_GPIO_Init+0x20e>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a4b      	ldr	r2, [pc, #300]	; (80025b0 <HAL_GPIO_Init+0x318>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d00d      	beq.n	80024a2 <HAL_GPIO_Init+0x20a>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a4a      	ldr	r2, [pc, #296]	; (80025b4 <HAL_GPIO_Init+0x31c>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d007      	beq.n	800249e <HAL_GPIO_Init+0x206>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a49      	ldr	r2, [pc, #292]	; (80025b8 <HAL_GPIO_Init+0x320>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d101      	bne.n	800249a <HAL_GPIO_Init+0x202>
 8002496:	2306      	movs	r3, #6
 8002498:	e00c      	b.n	80024b4 <HAL_GPIO_Init+0x21c>
 800249a:	2307      	movs	r3, #7
 800249c:	e00a      	b.n	80024b4 <HAL_GPIO_Init+0x21c>
 800249e:	2305      	movs	r3, #5
 80024a0:	e008      	b.n	80024b4 <HAL_GPIO_Init+0x21c>
 80024a2:	2304      	movs	r3, #4
 80024a4:	e006      	b.n	80024b4 <HAL_GPIO_Init+0x21c>
 80024a6:	2303      	movs	r3, #3
 80024a8:	e004      	b.n	80024b4 <HAL_GPIO_Init+0x21c>
 80024aa:	2302      	movs	r3, #2
 80024ac:	e002      	b.n	80024b4 <HAL_GPIO_Init+0x21c>
 80024ae:	2301      	movs	r3, #1
 80024b0:	e000      	b.n	80024b4 <HAL_GPIO_Init+0x21c>
 80024b2:	2300      	movs	r3, #0
 80024b4:	69fa      	ldr	r2, [r7, #28]
 80024b6:	f002 0203 	and.w	r2, r2, #3
 80024ba:	0092      	lsls	r2, r2, #2
 80024bc:	4093      	lsls	r3, r2
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024c4:	4935      	ldr	r1, [pc, #212]	; (800259c <HAL_GPIO_Init+0x304>)
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	089b      	lsrs	r3, r3, #2
 80024ca:	3302      	adds	r3, #2
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024d2:	4b3a      	ldr	r3, [pc, #232]	; (80025bc <HAL_GPIO_Init+0x324>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	43db      	mvns	r3, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4013      	ands	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024f6:	4a31      	ldr	r2, [pc, #196]	; (80025bc <HAL_GPIO_Init+0x324>)
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024fc:	4b2f      	ldr	r3, [pc, #188]	; (80025bc <HAL_GPIO_Init+0x324>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	43db      	mvns	r3, r3
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4013      	ands	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d003      	beq.n	8002520 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	4313      	orrs	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002520:	4a26      	ldr	r2, [pc, #152]	; (80025bc <HAL_GPIO_Init+0x324>)
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002526:	4b25      	ldr	r3, [pc, #148]	; (80025bc <HAL_GPIO_Init+0x324>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	43db      	mvns	r3, r3
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	4013      	ands	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	4313      	orrs	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800254a:	4a1c      	ldr	r2, [pc, #112]	; (80025bc <HAL_GPIO_Init+0x324>)
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002550:	4b1a      	ldr	r3, [pc, #104]	; (80025bc <HAL_GPIO_Init+0x324>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	43db      	mvns	r3, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4013      	ands	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d003      	beq.n	8002574 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	4313      	orrs	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002574:	4a11      	ldr	r2, [pc, #68]	; (80025bc <HAL_GPIO_Init+0x324>)
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	3301      	adds	r3, #1
 800257e:	61fb      	str	r3, [r7, #28]
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	2b0f      	cmp	r3, #15
 8002584:	f67f ae96 	bls.w	80022b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002588:	bf00      	nop
 800258a:	bf00      	nop
 800258c:	3724      	adds	r7, #36	; 0x24
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	40023800 	.word	0x40023800
 800259c:	40013800 	.word	0x40013800
 80025a0:	40020000 	.word	0x40020000
 80025a4:	40020400 	.word	0x40020400
 80025a8:	40020800 	.word	0x40020800
 80025ac:	40020c00 	.word	0x40020c00
 80025b0:	40021000 	.word	0x40021000
 80025b4:	40021400 	.word	0x40021400
 80025b8:	40021800 	.word	0x40021800
 80025bc:	40013c00 	.word	0x40013c00

080025c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	460b      	mov	r3, r1
 80025ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	691a      	ldr	r2, [r3, #16]
 80025d0:	887b      	ldrh	r3, [r7, #2]
 80025d2:	4013      	ands	r3, r2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d002      	beq.n	80025de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025d8:	2301      	movs	r3, #1
 80025da:	73fb      	strb	r3, [r7, #15]
 80025dc:	e001      	b.n	80025e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025de:	2300      	movs	r3, #0
 80025e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3714      	adds	r7, #20
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	460b      	mov	r3, r1
 80025fa:	807b      	strh	r3, [r7, #2]
 80025fc:	4613      	mov	r3, r2
 80025fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002600:	787b      	ldrb	r3, [r7, #1]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002606:	887a      	ldrh	r2, [r7, #2]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800260c:	e003      	b.n	8002616 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800260e:	887b      	ldrh	r3, [r7, #2]
 8002610:	041a      	lsls	r2, r3, #16
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	619a      	str	r2, [r3, #24]
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
	...

08002624 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e12b      	b.n	800288e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d106      	bne.n	8002650 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7fe fd24 	bl	8001098 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2224      	movs	r2, #36	; 0x24
 8002654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 0201 	bic.w	r2, r2, #1
 8002666:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002676:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002686:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002688:	f000 fe08 	bl	800329c <HAL_RCC_GetPCLK1Freq>
 800268c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	4a81      	ldr	r2, [pc, #516]	; (8002898 <HAL_I2C_Init+0x274>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d807      	bhi.n	80026a8 <HAL_I2C_Init+0x84>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	4a80      	ldr	r2, [pc, #512]	; (800289c <HAL_I2C_Init+0x278>)
 800269c:	4293      	cmp	r3, r2
 800269e:	bf94      	ite	ls
 80026a0:	2301      	movls	r3, #1
 80026a2:	2300      	movhi	r3, #0
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	e006      	b.n	80026b6 <HAL_I2C_Init+0x92>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	4a7d      	ldr	r2, [pc, #500]	; (80028a0 <HAL_I2C_Init+0x27c>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	bf94      	ite	ls
 80026b0:	2301      	movls	r3, #1
 80026b2:	2300      	movhi	r3, #0
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e0e7      	b.n	800288e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	4a78      	ldr	r2, [pc, #480]	; (80028a4 <HAL_I2C_Init+0x280>)
 80026c2:	fba2 2303 	umull	r2, r3, r2, r3
 80026c6:	0c9b      	lsrs	r3, r3, #18
 80026c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68ba      	ldr	r2, [r7, #8]
 80026da:	430a      	orrs	r2, r1
 80026dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	4a6a      	ldr	r2, [pc, #424]	; (8002898 <HAL_I2C_Init+0x274>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d802      	bhi.n	80026f8 <HAL_I2C_Init+0xd4>
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	3301      	adds	r3, #1
 80026f6:	e009      	b.n	800270c <HAL_I2C_Init+0xe8>
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026fe:	fb02 f303 	mul.w	r3, r2, r3
 8002702:	4a69      	ldr	r2, [pc, #420]	; (80028a8 <HAL_I2C_Init+0x284>)
 8002704:	fba2 2303 	umull	r2, r3, r2, r3
 8002708:	099b      	lsrs	r3, r3, #6
 800270a:	3301      	adds	r3, #1
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	6812      	ldr	r2, [r2, #0]
 8002710:	430b      	orrs	r3, r1
 8002712:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800271e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	495c      	ldr	r1, [pc, #368]	; (8002898 <HAL_I2C_Init+0x274>)
 8002728:	428b      	cmp	r3, r1
 800272a:	d819      	bhi.n	8002760 <HAL_I2C_Init+0x13c>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	1e59      	subs	r1, r3, #1
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	fbb1 f3f3 	udiv	r3, r1, r3
 800273a:	1c59      	adds	r1, r3, #1
 800273c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002740:	400b      	ands	r3, r1
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00a      	beq.n	800275c <HAL_I2C_Init+0x138>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	1e59      	subs	r1, r3, #1
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	fbb1 f3f3 	udiv	r3, r1, r3
 8002754:	3301      	adds	r3, #1
 8002756:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800275a:	e051      	b.n	8002800 <HAL_I2C_Init+0x1dc>
 800275c:	2304      	movs	r3, #4
 800275e:	e04f      	b.n	8002800 <HAL_I2C_Init+0x1dc>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d111      	bne.n	800278c <HAL_I2C_Init+0x168>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	1e58      	subs	r0, r3, #1
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6859      	ldr	r1, [r3, #4]
 8002770:	460b      	mov	r3, r1
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	440b      	add	r3, r1
 8002776:	fbb0 f3f3 	udiv	r3, r0, r3
 800277a:	3301      	adds	r3, #1
 800277c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002780:	2b00      	cmp	r3, #0
 8002782:	bf0c      	ite	eq
 8002784:	2301      	moveq	r3, #1
 8002786:	2300      	movne	r3, #0
 8002788:	b2db      	uxtb	r3, r3
 800278a:	e012      	b.n	80027b2 <HAL_I2C_Init+0x18e>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	1e58      	subs	r0, r3, #1
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6859      	ldr	r1, [r3, #4]
 8002794:	460b      	mov	r3, r1
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	440b      	add	r3, r1
 800279a:	0099      	lsls	r1, r3, #2
 800279c:	440b      	add	r3, r1
 800279e:	fbb0 f3f3 	udiv	r3, r0, r3
 80027a2:	3301      	adds	r3, #1
 80027a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	bf0c      	ite	eq
 80027ac:	2301      	moveq	r3, #1
 80027ae:	2300      	movne	r3, #0
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <HAL_I2C_Init+0x196>
 80027b6:	2301      	movs	r3, #1
 80027b8:	e022      	b.n	8002800 <HAL_I2C_Init+0x1dc>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d10e      	bne.n	80027e0 <HAL_I2C_Init+0x1bc>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	1e58      	subs	r0, r3, #1
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6859      	ldr	r1, [r3, #4]
 80027ca:	460b      	mov	r3, r1
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	440b      	add	r3, r1
 80027d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80027d4:	3301      	adds	r3, #1
 80027d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027de:	e00f      	b.n	8002800 <HAL_I2C_Init+0x1dc>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	1e58      	subs	r0, r3, #1
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6859      	ldr	r1, [r3, #4]
 80027e8:	460b      	mov	r3, r1
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	440b      	add	r3, r1
 80027ee:	0099      	lsls	r1, r3, #2
 80027f0:	440b      	add	r3, r1
 80027f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80027f6:	3301      	adds	r3, #1
 80027f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002800:	6879      	ldr	r1, [r7, #4]
 8002802:	6809      	ldr	r1, [r1, #0]
 8002804:	4313      	orrs	r3, r2
 8002806:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	69da      	ldr	r2, [r3, #28]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	431a      	orrs	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	430a      	orrs	r2, r1
 8002822:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800282e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	6911      	ldr	r1, [r2, #16]
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	68d2      	ldr	r2, [r2, #12]
 800283a:	4311      	orrs	r1, r2
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6812      	ldr	r2, [r2, #0]
 8002840:	430b      	orrs	r3, r1
 8002842:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	695a      	ldr	r2, [r3, #20]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	431a      	orrs	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	430a      	orrs	r2, r1
 800285e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f042 0201 	orr.w	r2, r2, #1
 800286e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2220      	movs	r2, #32
 800287a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	000186a0 	.word	0x000186a0
 800289c:	001e847f 	.word	0x001e847f
 80028a0:	003d08ff 	.word	0x003d08ff
 80028a4:	431bde83 	.word	0x431bde83
 80028a8:	10624dd3 	.word	0x10624dd3

080028ac <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b088      	sub	sp, #32
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e0e1      	b.n	8002a82 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d109      	bne.n	80028de <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a6d      	ldr	r2, [pc, #436]	; (8002a8c <HAL_I2S_Init+0x1e0>)
 80028d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f7fe fc25 	bl	8001128 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2202      	movs	r2, #2
 80028e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	69db      	ldr	r3, [r3, #28]
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6812      	ldr	r2, [r2, #0]
 80028f0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80028f4:	f023 030f 	bic.w	r3, r3, #15
 80028f8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2202      	movs	r2, #2
 8002900:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	2b02      	cmp	r3, #2
 8002908:	d06f      	beq.n	80029ea <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d102      	bne.n	8002918 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002912:	2310      	movs	r3, #16
 8002914:	617b      	str	r3, [r7, #20]
 8002916:	e001      	b.n	800291c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002918:	2320      	movs	r3, #32
 800291a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	2b20      	cmp	r3, #32
 8002922:	d802      	bhi.n	800292a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a58      	ldr	r2, [pc, #352]	; (8002a90 <HAL_I2S_Init+0x1e4>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d004      	beq.n	800293e <HAL_I2S_Init+0x92>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a56      	ldr	r2, [pc, #344]	; (8002a94 <HAL_I2S_Init+0x1e8>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d104      	bne.n	8002948 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 800293e:	2001      	movs	r0, #1
 8002940:	f001 f830 	bl	80039a4 <HAL_RCCEx_GetPeriphCLKFreq>
 8002944:	60f8      	str	r0, [r7, #12]
 8002946:	e003      	b.n	8002950 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8002948:	2002      	movs	r0, #2
 800294a:	f001 f82b 	bl	80039a4 <HAL_RCCEx_GetPeriphCLKFreq>
 800294e:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002958:	d125      	bne.n	80029a6 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d010      	beq.n	8002984 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	fbb2 f2f3 	udiv	r2, r2, r3
 800296c:	4613      	mov	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4413      	add	r3, r2
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	461a      	mov	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	fbb2 f3f3 	udiv	r3, r2, r3
 800297e:	3305      	adds	r3, #5
 8002980:	613b      	str	r3, [r7, #16]
 8002982:	e01f      	b.n	80029c4 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	fbb2 f2f3 	udiv	r2, r2, r3
 800298e:	4613      	mov	r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4413      	add	r3, r2
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	461a      	mov	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	695b      	ldr	r3, [r3, #20]
 800299c:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a0:	3305      	adds	r3, #5
 80029a2:	613b      	str	r3, [r7, #16]
 80029a4:	e00e      	b.n	80029c4 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80029ae:	4613      	mov	r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	4413      	add	r3, r2
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	461a      	mov	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	695b      	ldr	r3, [r3, #20]
 80029bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c0:	3305      	adds	r3, #5
 80029c2:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	4a34      	ldr	r2, [pc, #208]	; (8002a98 <HAL_I2S_Init+0x1ec>)
 80029c8:	fba2 2303 	umull	r2, r3, r2, r3
 80029cc:	08db      	lsrs	r3, r3, #3
 80029ce:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	085b      	lsrs	r3, r3, #1
 80029e0:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	021b      	lsls	r3, r3, #8
 80029e6:	61bb      	str	r3, [r7, #24]
 80029e8:	e003      	b.n	80029f2 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80029ea:	2302      	movs	r3, #2
 80029ec:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80029ee:	2300      	movs	r3, #0
 80029f0:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d902      	bls.n	80029fe <HAL_I2S_Init+0x152>
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	2bff      	cmp	r3, #255	; 0xff
 80029fc:	d907      	bls.n	8002a0e <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a02:	f043 0210 	orr.w	r2, r3, #16
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e039      	b.n	8002a82 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	691a      	ldr	r2, [r3, #16]
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	ea42 0103 	orr.w	r1, r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	69fa      	ldr	r2, [r7, #28]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	69db      	ldr	r3, [r3, #28]
 8002a28:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002a2c:	f023 030f 	bic.w	r3, r3, #15
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	6851      	ldr	r1, [r2, #4]
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	6892      	ldr	r2, [r2, #8]
 8002a38:	4311      	orrs	r1, r2
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	68d2      	ldr	r2, [r2, #12]
 8002a3e:	4311      	orrs	r1, r2
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	6992      	ldr	r2, [r2, #24]
 8002a44:	430a      	orrs	r2, r1
 8002a46:	431a      	orrs	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a50:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	2b30      	cmp	r3, #48	; 0x30
 8002a58:	d003      	beq.n	8002a62 <HAL_I2S_Init+0x1b6>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	2bb0      	cmp	r3, #176	; 0xb0
 8002a60:	d107      	bne.n	8002a72 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	69da      	ldr	r2, [r3, #28]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002a70:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3720      	adds	r7, #32
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	08002f31 	.word	0x08002f31
 8002a90:	40003800 	.word	0x40003800
 8002a94:	40003c00 	.word	0x40003c00
 8002a98:	cccccccd 	.word	0xcccccccd

08002a9c <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d002      	beq.n	8002ab6 <HAL_I2S_Receive_DMA+0x1a>
 8002ab0:	88fb      	ldrh	r3, [r7, #6]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e0a1      	b.n	8002bfe <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d101      	bne.n	8002aca <HAL_I2S_Receive_DMA+0x2e>
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	e099      	b.n	8002bfe <HAL_I2S_Receive_DMA+0x162>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d005      	beq.n	8002aea <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	e089      	b.n	8002bfe <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2204      	movs	r2, #4
 8002aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	69db      	ldr	r3, [r3, #28]
 8002b04:	f003 0307 	and.w	r3, r3, #7
 8002b08:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	2b03      	cmp	r3, #3
 8002b0e:	d002      	beq.n	8002b16 <HAL_I2S_Receive_DMA+0x7a>
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	2b05      	cmp	r3, #5
 8002b14:	d10a      	bne.n	8002b2c <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8002b16:	88fb      	ldrh	r3, [r7, #6]
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8002b20:	88fb      	ldrh	r3, [r7, #6]
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	865a      	strh	r2, [r3, #50]	; 0x32
 8002b2a:	e005      	b.n	8002b38 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	88fa      	ldrh	r2, [r7, #6]
 8002b30:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	88fa      	ldrh	r2, [r7, #6]
 8002b36:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3c:	4a32      	ldr	r2, [pc, #200]	; (8002c08 <HAL_I2S_Receive_DMA+0x16c>)
 8002b3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b44:	4a31      	ldr	r2, [pc, #196]	; (8002c0c <HAL_I2S_Receive_DMA+0x170>)
 8002b46:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b4c:	4a30      	ldr	r2, [pc, #192]	; (8002c10 <HAL_I2S_Receive_DMA+0x174>)
 8002b4e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b5e:	d10a      	bne.n	8002b76 <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002b60:	2300      	movs	r3, #0
 8002b62:	613b      	str	r3, [r7, #16]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	613b      	str	r3, [r7, #16]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	613b      	str	r3, [r7, #16]
 8002b74:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	330c      	adds	r3, #12
 8002b80:	4619      	mov	r1, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b86:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002b8c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002b8e:	f7ff f823 	bl	8001bd8 <HAL_DMA_Start_IT>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d00f      	beq.n	8002bb8 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9c:	f043 0208 	orr.w	r2, r3, #8
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e022      	b.n	8002bfe <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	69db      	ldr	r3, [r3, #28]
 8002bbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d107      	bne.n	8002bd6 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	69da      	ldr	r2, [r3, #28]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002bd4:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f003 0301 	and.w	r3, r3, #1
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d107      	bne.n	8002bf4 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f042 0201 	orr.w	r2, r2, #1
 8002bf2:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3718      	adds	r7, #24
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	08002e0f 	.word	0x08002e0f
 8002c0c:	08002dcd 	.word	0x08002dcd
 8002c10:	08002e2b 	.word	0x08002e2b

08002c14 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	75fb      	strb	r3, [r7, #23]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c28:	d003      	beq.n	8002c32 <HAL_I2S_DMAStop+0x1e>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d155      	bne.n	8002cde <HAL_I2S_DMAStop+0xca>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00f      	beq.n	8002c5a <HAL_I2S_DMAStop+0x46>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff f822 	bl	8001c88 <HAL_DMA_Abort>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d007      	beq.n	8002c5a <HAL_I2S_DMAStop+0x46>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4e:	f043 0208 	orr.w	r2, r3, #8
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	75fb      	strb	r3, [r7, #23]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8002c5a:	2364      	movs	r3, #100	; 0x64
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	2102      	movs	r1, #2
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 f9ef 	bl	8003044 <I2S_WaitFlagStateUntilTimeout>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00b      	beq.n	8002c84 <HAL_I2S_DMAStop+0x70>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c70:	f043 0201 	orr.w	r2, r3, #1
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	75fb      	strb	r3, [r7, #23]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8002c84:	2364      	movs	r3, #100	; 0x64
 8002c86:	2200      	movs	r2, #0
 8002c88:	2180      	movs	r1, #128	; 0x80
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f9da 	bl	8003044 <I2S_WaitFlagStateUntilTimeout>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00b      	beq.n	8002cae <HAL_I2S_DMAStop+0x9a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9a:	f043 0201 	orr.w	r2, r3, #1
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	75fb      	strb	r3, [r7, #23]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	69da      	ldr	r2, [r3, #28]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cbc:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	613b      	str	r3, [r7, #16]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	613b      	str	r3, [r7, #16]
 8002cca:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	685a      	ldr	r2, [r3, #4]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 0202 	bic.w	r2, r2, #2
 8002cda:	605a      	str	r2, [r3, #4]
 8002cdc:	e04d      	b.n	8002d7a <HAL_I2S_DMAStop+0x166>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ce6:	d004      	beq.n	8002cf2 <HAL_I2S_DMAStop+0xde>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cf0:	d143      	bne.n	8002d7a <HAL_I2S_DMAStop+0x166>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00f      	beq.n	8002d1a <HAL_I2S_DMAStop+0x106>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7fe ffc2 	bl	8001c88 <HAL_DMA_Abort>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d007      	beq.n	8002d1a <HAL_I2S_DMAStop+0x106>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0e:	f043 0208 	orr.w	r2, r3, #8
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	75fb      	strb	r3, [r7, #23]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	69da      	ldr	r2, [r3, #28]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d28:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60fb      	str	r3, [r7, #12]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	60fb      	str	r3, [r7, #12]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	60fb      	str	r3, [r7, #12]
 8002d3e:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	685a      	ldr	r2, [r3, #4]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f022 0201 	bic.w	r2, r2, #1
 8002d4e:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d58:	d10c      	bne.n	8002d74 <HAL_I2S_DMAStop+0x160>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	75fb      	strb	r3, [r7, #23]
 8002d72:	e002      	b.n	8002d7a <HAL_I2S_DMAStop+0x166>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8002d82:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3718      	adds	r7, #24
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	4798      	blx	r3
}
 8002d9c:	bf00      	nop
 8002d9e:	3708      	adds	r7, #8
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd8:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10e      	bne.n	8002e00 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	685a      	ldr	r2, [r3, #4]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 0201 	bic.w	r2, r2, #1
 8002df0:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f7fd fe99 	bl	8000b38 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002e06:	bf00      	nop
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b084      	sub	sp, #16
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1a:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f7fd fe75 	bl	8000b0c <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002e22:	bf00      	nop
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b084      	sub	sp, #16
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e36:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	685a      	ldr	r2, [r3, #4]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0203 	bic.w	r2, r2, #3
 8002e46:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e60:	f043 0208 	orr.w	r2, r3, #8
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f7ff ffa5 	bl	8002db8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002e6e:	bf00      	nop
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b082      	sub	sp, #8
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e82:	881a      	ldrh	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8e:	1c9a      	adds	r2, r3, #2
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10e      	bne.n	8002eca <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	685a      	ldr	r2, [r3, #4]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002eba:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f7ff ff6d 	bl	8002da4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002eca:	bf00      	nop
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b082      	sub	sp, #8
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68da      	ldr	r2, [r3, #12]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee4:	b292      	uxth	r2, r2
 8002ee6:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eec:	1c9a      	adds	r2, r3, #2
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d10e      	bne.n	8002f28 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f18:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f7fd fe08 	bl	8000b38 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002f28:	bf00      	nop
 8002f2a:	3708      	adds	r7, #8
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b04      	cmp	r3, #4
 8002f4a:	d13a      	bne.n	8002fc2 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d109      	bne.n	8002f6a <I2S_IRQHandler+0x3a>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f60:	2b40      	cmp	r3, #64	; 0x40
 8002f62:	d102      	bne.n	8002f6a <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f7ff ffb4 	bl	8002ed2 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f70:	2b40      	cmp	r3, #64	; 0x40
 8002f72:	d126      	bne.n	8002fc2 <I2S_IRQHandler+0x92>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f003 0320 	and.w	r3, r3, #32
 8002f7e:	2b20      	cmp	r3, #32
 8002f80:	d11f      	bne.n	8002fc2 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f90:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002f92:	2300      	movs	r3, #0
 8002f94:	613b      	str	r3, [r7, #16]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	613b      	str	r3, [r7, #16]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	613b      	str	r3, [r7, #16]
 8002fa6:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb4:	f043 0202 	orr.w	r2, r3, #2
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f7ff fefb 	bl	8002db8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b03      	cmp	r3, #3
 8002fcc:	d136      	bne.n	800303c <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d109      	bne.n	8002fec <I2S_IRQHandler+0xbc>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe2:	2b80      	cmp	r3, #128	; 0x80
 8002fe4:	d102      	bne.n	8002fec <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f7ff ff45 	bl	8002e76 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	f003 0308 	and.w	r3, r3, #8
 8002ff2:	2b08      	cmp	r3, #8
 8002ff4:	d122      	bne.n	800303c <I2S_IRQHandler+0x10c>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f003 0320 	and.w	r3, r3, #32
 8003000:	2b20      	cmp	r3, #32
 8003002:	d11b      	bne.n	800303c <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	685a      	ldr	r2, [r3, #4]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003012:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003014:	2300      	movs	r3, #0
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	60fb      	str	r3, [r7, #12]
 8003020:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302e:	f043 0204 	orr.w	r2, r3, #4
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7ff febe 	bl	8002db8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800303c:	bf00      	nop
 800303e:	3718      	adds	r7, #24
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	603b      	str	r3, [r7, #0]
 8003050:	4613      	mov	r3, r2
 8003052:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8003054:	f7fe fbe4 	bl	8001820 <HAL_GetTick>
 8003058:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800305a:	e018      	b.n	800308e <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003062:	d014      	beq.n	800308e <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8003064:	f7fe fbdc 	bl	8001820 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	429a      	cmp	r2, r3
 8003072:	d902      	bls.n	800307a <I2S_WaitFlagStateUntilTimeout+0x36>
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d109      	bne.n	800308e <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2201      	movs	r2, #1
 800307e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e00f      	b.n	80030ae <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	4013      	ands	r3, r2
 8003098:	68ba      	ldr	r2, [r7, #8]
 800309a:	429a      	cmp	r2, r3
 800309c:	bf0c      	ite	eq
 800309e:	2301      	moveq	r3, #1
 80030a0:	2300      	movne	r3, #0
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	461a      	mov	r2, r3
 80030a6:	79fb      	ldrb	r3, [r7, #7]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d1d7      	bne.n	800305c <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3718      	adds	r7, #24
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
	...

080030b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e0cc      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030cc:	4b68      	ldr	r3, [pc, #416]	; (8003270 <HAL_RCC_ClockConfig+0x1b8>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 030f 	and.w	r3, r3, #15
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d90c      	bls.n	80030f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030da:	4b65      	ldr	r3, [pc, #404]	; (8003270 <HAL_RCC_ClockConfig+0x1b8>)
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	b2d2      	uxtb	r2, r2
 80030e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030e2:	4b63      	ldr	r3, [pc, #396]	; (8003270 <HAL_RCC_ClockConfig+0x1b8>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 030f 	and.w	r3, r3, #15
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d001      	beq.n	80030f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e0b8      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d020      	beq.n	8003142 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b00      	cmp	r3, #0
 800310a:	d005      	beq.n	8003118 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800310c:	4b59      	ldr	r3, [pc, #356]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	4a58      	ldr	r2, [pc, #352]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 8003112:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003116:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0308 	and.w	r3, r3, #8
 8003120:	2b00      	cmp	r3, #0
 8003122:	d005      	beq.n	8003130 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003124:	4b53      	ldr	r3, [pc, #332]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	4a52      	ldr	r2, [pc, #328]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 800312a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800312e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003130:	4b50      	ldr	r3, [pc, #320]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	494d      	ldr	r1, [pc, #308]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 800313e:	4313      	orrs	r3, r2
 8003140:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	d044      	beq.n	80031d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d107      	bne.n	8003166 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003156:	4b47      	ldr	r3, [pc, #284]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d119      	bne.n	8003196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e07f      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b02      	cmp	r3, #2
 800316c:	d003      	beq.n	8003176 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003172:	2b03      	cmp	r3, #3
 8003174:	d107      	bne.n	8003186 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003176:	4b3f      	ldr	r3, [pc, #252]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d109      	bne.n	8003196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e06f      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003186:	4b3b      	ldr	r3, [pc, #236]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e067      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003196:	4b37      	ldr	r3, [pc, #220]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f023 0203 	bic.w	r2, r3, #3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	4934      	ldr	r1, [pc, #208]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031a8:	f7fe fb3a 	bl	8001820 <HAL_GetTick>
 80031ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ae:	e00a      	b.n	80031c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031b0:	f7fe fb36 	bl	8001820 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80031be:	4293      	cmp	r3, r2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e04f      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c6:	4b2b      	ldr	r3, [pc, #172]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 020c 	and.w	r2, r3, #12
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d1eb      	bne.n	80031b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031d8:	4b25      	ldr	r3, [pc, #148]	; (8003270 <HAL_RCC_ClockConfig+0x1b8>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 030f 	and.w	r3, r3, #15
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d20c      	bcs.n	8003200 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031e6:	4b22      	ldr	r3, [pc, #136]	; (8003270 <HAL_RCC_ClockConfig+0x1b8>)
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	b2d2      	uxtb	r2, r2
 80031ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ee:	4b20      	ldr	r3, [pc, #128]	; (8003270 <HAL_RCC_ClockConfig+0x1b8>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 030f 	and.w	r3, r3, #15
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d001      	beq.n	8003200 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e032      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0304 	and.w	r3, r3, #4
 8003208:	2b00      	cmp	r3, #0
 800320a:	d008      	beq.n	800321e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800320c:	4b19      	ldr	r3, [pc, #100]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	4916      	ldr	r1, [pc, #88]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 800321a:	4313      	orrs	r3, r2
 800321c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0308 	and.w	r3, r3, #8
 8003226:	2b00      	cmp	r3, #0
 8003228:	d009      	beq.n	800323e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800322a:	4b12      	ldr	r3, [pc, #72]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	490e      	ldr	r1, [pc, #56]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 800323a:	4313      	orrs	r3, r2
 800323c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800323e:	f000 fdf9 	bl	8003e34 <HAL_RCC_GetSysClockFreq>
 8003242:	4602      	mov	r2, r0
 8003244:	4b0b      	ldr	r3, [pc, #44]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	091b      	lsrs	r3, r3, #4
 800324a:	f003 030f 	and.w	r3, r3, #15
 800324e:	490a      	ldr	r1, [pc, #40]	; (8003278 <HAL_RCC_ClockConfig+0x1c0>)
 8003250:	5ccb      	ldrb	r3, [r1, r3]
 8003252:	fa22 f303 	lsr.w	r3, r2, r3
 8003256:	4a09      	ldr	r2, [pc, #36]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003258:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800325a:	4b09      	ldr	r3, [pc, #36]	; (8003280 <HAL_RCC_ClockConfig+0x1c8>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4618      	mov	r0, r3
 8003260:	f7fe f966 	bl	8001530 <HAL_InitTick>

  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	40023c00 	.word	0x40023c00
 8003274:	40023800 	.word	0x40023800
 8003278:	0800f8c0 	.word	0x0800f8c0
 800327c:	20000004 	.word	0x20000004
 8003280:	20000008 	.word	0x20000008

08003284 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003288:	4b03      	ldr	r3, [pc, #12]	; (8003298 <HAL_RCC_GetHCLKFreq+0x14>)
 800328a:	681b      	ldr	r3, [r3, #0]
}
 800328c:	4618      	mov	r0, r3
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	20000004 	.word	0x20000004

0800329c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032a0:	f7ff fff0 	bl	8003284 <HAL_RCC_GetHCLKFreq>
 80032a4:	4602      	mov	r2, r0
 80032a6:	4b05      	ldr	r3, [pc, #20]	; (80032bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	0a9b      	lsrs	r3, r3, #10
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	4903      	ldr	r1, [pc, #12]	; (80032c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032b2:	5ccb      	ldrb	r3, [r1, r3]
 80032b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	40023800 	.word	0x40023800
 80032c0:	0800f8d0 	.word	0x0800f8d0

080032c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032c8:	f7ff ffdc 	bl	8003284 <HAL_RCC_GetHCLKFreq>
 80032cc:	4602      	mov	r2, r0
 80032ce:	4b05      	ldr	r3, [pc, #20]	; (80032e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	0b5b      	lsrs	r3, r3, #13
 80032d4:	f003 0307 	and.w	r3, r3, #7
 80032d8:	4903      	ldr	r1, [pc, #12]	; (80032e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032da:	5ccb      	ldrb	r3, [r1, r3]
 80032dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40023800 	.word	0x40023800
 80032e8:	0800f8d0 	.word	0x0800f8d0

080032ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	220f      	movs	r2, #15
 80032fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80032fc:	4b12      	ldr	r3, [pc, #72]	; (8003348 <HAL_RCC_GetClockConfig+0x5c>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 0203 	and.w	r2, r3, #3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003308:	4b0f      	ldr	r3, [pc, #60]	; (8003348 <HAL_RCC_GetClockConfig+0x5c>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003314:	4b0c      	ldr	r3, [pc, #48]	; (8003348 <HAL_RCC_GetClockConfig+0x5c>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003320:	4b09      	ldr	r3, [pc, #36]	; (8003348 <HAL_RCC_GetClockConfig+0x5c>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	08db      	lsrs	r3, r3, #3
 8003326:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800332e:	4b07      	ldr	r3, [pc, #28]	; (800334c <HAL_RCC_GetClockConfig+0x60>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 020f 	and.w	r2, r3, #15
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	601a      	str	r2, [r3, #0]
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	40023800 	.word	0x40023800
 800334c:	40023c00 	.word	0x40023c00

08003350 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b08c      	sub	sp, #48	; 0x30
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003358:	2300      	movs	r3, #0
 800335a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800335c:	2300      	movs	r3, #0
 800335e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003360:	2300      	movs	r3, #0
 8003362:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003364:	2300      	movs	r3, #0
 8003366:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003368:	2300      	movs	r3, #0
 800336a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800336c:	2300      	movs	r3, #0
 800336e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003370:	2300      	movs	r3, #0
 8003372:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003374:	2300      	movs	r3, #0
 8003376:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003378:	2300      	movs	r3, #0
 800337a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	2b00      	cmp	r3, #0
 8003386:	d010      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003388:	4b6f      	ldr	r3, [pc, #444]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800338a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800338e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003396:	496c      	ldr	r1, [pc, #432]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003398:	4313      	orrs	r3, r2
 800339a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80033a6:	2301      	movs	r3, #1
 80033a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d010      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80033b6:	4b64      	ldr	r3, [pc, #400]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80033b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033bc:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c4:	4960      	ldr	r1, [pc, #384]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d101      	bne.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80033d4:	2301      	movs	r3, #1
 80033d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d017      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033e4:	4b58      	ldr	r3, [pc, #352]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80033e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	4955      	ldr	r1, [pc, #340]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003402:	d101      	bne.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003404:	2301      	movs	r3, #1
 8003406:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340c:	2b00      	cmp	r3, #0
 800340e:	d101      	bne.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003410:	2301      	movs	r3, #1
 8003412:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0308 	and.w	r3, r3, #8
 800341c:	2b00      	cmp	r3, #0
 800341e:	d017      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003420:	4b49      	ldr	r3, [pc, #292]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003422:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003426:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800342e:	4946      	ldr	r1, [pc, #280]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003430:	4313      	orrs	r3, r2
 8003432:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800343a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800343e:	d101      	bne.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003440:	2301      	movs	r3, #1
 8003442:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800344c:	2301      	movs	r3, #1
 800344e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0320 	and.w	r3, r3, #32
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 808a 	beq.w	8003572 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800345e:	2300      	movs	r3, #0
 8003460:	60bb      	str	r3, [r7, #8]
 8003462:	4b39      	ldr	r3, [pc, #228]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	4a38      	ldr	r2, [pc, #224]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800346c:	6413      	str	r3, [r2, #64]	; 0x40
 800346e:	4b36      	ldr	r3, [pc, #216]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003476:	60bb      	str	r3, [r7, #8]
 8003478:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800347a:	4b34      	ldr	r3, [pc, #208]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a33      	ldr	r2, [pc, #204]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003484:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003486:	f7fe f9cb 	bl	8001820 <HAL_GetTick>
 800348a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800348c:	e008      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800348e:	f7fe f9c7 	bl	8001820 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d901      	bls.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e278      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80034a0:	4b2a      	ldr	r3, [pc, #168]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d0f0      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034ac:	4b26      	ldr	r3, [pc, #152]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80034ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034b4:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034b6:	6a3b      	ldr	r3, [r7, #32]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d02f      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034c4:	6a3a      	ldr	r2, [r7, #32]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d028      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034ca:	4b1f      	ldr	r3, [pc, #124]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80034cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034d2:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034d4:	4b1e      	ldr	r3, [pc, #120]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80034d6:	2201      	movs	r2, #1
 80034d8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034da:	4b1d      	ldr	r3, [pc, #116]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80034e0:	4a19      	ldr	r2, [pc, #100]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80034e2:	6a3b      	ldr	r3, [r7, #32]
 80034e4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80034e6:	4b18      	ldr	r3, [pc, #96]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80034e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d114      	bne.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80034f2:	f7fe f995 	bl	8001820 <HAL_GetTick>
 80034f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f8:	e00a      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034fa:	f7fe f991 	bl	8001820 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	f241 3288 	movw	r2, #5000	; 0x1388
 8003508:	4293      	cmp	r3, r2
 800350a:	d901      	bls.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e240      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003510:	4b0d      	ldr	r3, [pc, #52]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d0ee      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003520:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003524:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003528:	d114      	bne.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800352a:	4b07      	ldr	r3, [pc, #28]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800353a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800353e:	4902      	ldr	r1, [pc, #8]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003540:	4313      	orrs	r3, r2
 8003542:	608b      	str	r3, [r1, #8]
 8003544:	e00c      	b.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003546:	bf00      	nop
 8003548:	40023800 	.word	0x40023800
 800354c:	40007000 	.word	0x40007000
 8003550:	42470e40 	.word	0x42470e40
 8003554:	4b4a      	ldr	r3, [pc, #296]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	4a49      	ldr	r2, [pc, #292]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800355a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800355e:	6093      	str	r3, [r2, #8]
 8003560:	4b47      	ldr	r3, [pc, #284]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003562:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800356c:	4944      	ldr	r1, [pc, #272]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800356e:	4313      	orrs	r3, r2
 8003570:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0310 	and.w	r3, r3, #16
 800357a:	2b00      	cmp	r3, #0
 800357c:	d004      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003584:	4b3f      	ldr	r3, [pc, #252]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003586:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00a      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003594:	4b3a      	ldr	r3, [pc, #232]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003596:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800359a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035a2:	4937      	ldr	r1, [pc, #220]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00a      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80035b6:	4b32      	ldr	r3, [pc, #200]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80035b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035bc:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035c4:	492e      	ldr	r1, [pc, #184]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d011      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80035d8:	4b29      	ldr	r3, [pc, #164]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80035da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035de:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e6:	4926      	ldr	r1, [pc, #152]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035f6:	d101      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80035f8:	2301      	movs	r3, #1
 80035fa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00a      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003608:	4b1d      	ldr	r3, [pc, #116]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800360a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800360e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003616:	491a      	ldr	r1, [pc, #104]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003618:	4313      	orrs	r3, r2
 800361a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003626:	2b00      	cmp	r3, #0
 8003628:	d011      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800362a:	4b15      	ldr	r3, [pc, #84]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800362c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003630:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003638:	4911      	ldr	r1, [pc, #68]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800363a:	4313      	orrs	r3, r2
 800363c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003644:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003648:	d101      	bne.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800364a:	2301      	movs	r3, #1
 800364c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800364e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003650:	2b01      	cmp	r3, #1
 8003652:	d005      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800365c:	f040 80ff 	bne.w	800385e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003660:	4b09      	ldr	r3, [pc, #36]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003662:	2200      	movs	r2, #0
 8003664:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003666:	f7fe f8db 	bl	8001820 <HAL_GetTick>
 800366a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800366c:	e00e      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800366e:	f7fe f8d7 	bl	8001820 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d907      	bls.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e188      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003680:	40023800 	.word	0x40023800
 8003684:	424711e0 	.word	0x424711e0
 8003688:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800368c:	4b7e      	ldr	r3, [pc, #504]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1ea      	bne.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d003      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d009      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d028      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d124      	bne.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80036c0:	4b71      	ldr	r3, [pc, #452]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80036c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036c6:	0c1b      	lsrs	r3, r3, #16
 80036c8:	f003 0303 	and.w	r3, r3, #3
 80036cc:	3301      	adds	r3, #1
 80036ce:	005b      	lsls	r3, r3, #1
 80036d0:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80036d2:	4b6d      	ldr	r3, [pc, #436]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80036d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036d8:	0e1b      	lsrs	r3, r3, #24
 80036da:	f003 030f 	and.w	r3, r3, #15
 80036de:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	019b      	lsls	r3, r3, #6
 80036ea:	431a      	orrs	r2, r3
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	085b      	lsrs	r3, r3, #1
 80036f0:	3b01      	subs	r3, #1
 80036f2:	041b      	lsls	r3, r3, #16
 80036f4:	431a      	orrs	r2, r3
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	061b      	lsls	r3, r3, #24
 80036fa:	431a      	orrs	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	071b      	lsls	r3, r3, #28
 8003702:	4961      	ldr	r1, [pc, #388]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003704:	4313      	orrs	r3, r2
 8003706:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0304 	and.w	r3, r3, #4
 8003712:	2b00      	cmp	r3, #0
 8003714:	d004      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800371e:	d00a      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003728:	2b00      	cmp	r3, #0
 800372a:	d035      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003730:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003734:	d130      	bne.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003736:	4b54      	ldr	r3, [pc, #336]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003738:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800373c:	0c1b      	lsrs	r3, r3, #16
 800373e:	f003 0303 	and.w	r3, r3, #3
 8003742:	3301      	adds	r3, #1
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003748:	4b4f      	ldr	r3, [pc, #316]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800374a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800374e:	0f1b      	lsrs	r3, r3, #28
 8003750:	f003 0307 	and.w	r3, r3, #7
 8003754:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685a      	ldr	r2, [r3, #4]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	019b      	lsls	r3, r3, #6
 8003760:	431a      	orrs	r2, r3
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	085b      	lsrs	r3, r3, #1
 8003766:	3b01      	subs	r3, #1
 8003768:	041b      	lsls	r3, r3, #16
 800376a:	431a      	orrs	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	061b      	lsls	r3, r3, #24
 8003772:	431a      	orrs	r2, r3
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	071b      	lsls	r3, r3, #28
 8003778:	4943      	ldr	r1, [pc, #268]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800377a:	4313      	orrs	r3, r2
 800377c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003780:	4b41      	ldr	r3, [pc, #260]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003782:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003786:	f023 021f 	bic.w	r2, r3, #31
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378e:	3b01      	subs	r3, #1
 8003790:	493d      	ldr	r1, [pc, #244]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003792:	4313      	orrs	r3, r2
 8003794:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d029      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037ac:	d124      	bne.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80037ae:	4b36      	ldr	r3, [pc, #216]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80037b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037b4:	0c1b      	lsrs	r3, r3, #16
 80037b6:	f003 0303 	and.w	r3, r3, #3
 80037ba:	3301      	adds	r3, #1
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80037c0:	4b31      	ldr	r3, [pc, #196]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80037c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037c6:	0f1b      	lsrs	r3, r3, #28
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	019b      	lsls	r3, r3, #6
 80037d8:	431a      	orrs	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	085b      	lsrs	r3, r3, #1
 80037e0:	3b01      	subs	r3, #1
 80037e2:	041b      	lsls	r3, r3, #16
 80037e4:	431a      	orrs	r2, r3
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	061b      	lsls	r3, r3, #24
 80037ea:	431a      	orrs	r2, r3
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	071b      	lsls	r3, r3, #28
 80037f0:	4925      	ldr	r1, [pc, #148]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003800:	2b00      	cmp	r3, #0
 8003802:	d016      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685a      	ldr	r2, [r3, #4]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	019b      	lsls	r3, r3, #6
 800380e:	431a      	orrs	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	085b      	lsrs	r3, r3, #1
 8003816:	3b01      	subs	r3, #1
 8003818:	041b      	lsls	r3, r3, #16
 800381a:	431a      	orrs	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	061b      	lsls	r3, r3, #24
 8003822:	431a      	orrs	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	695b      	ldr	r3, [r3, #20]
 8003828:	071b      	lsls	r3, r3, #28
 800382a:	4917      	ldr	r1, [pc, #92]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800382c:	4313      	orrs	r3, r2
 800382e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003832:	4b16      	ldr	r3, [pc, #88]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003834:	2201      	movs	r2, #1
 8003836:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003838:	f7fd fff2 	bl	8001820 <HAL_GetTick>
 800383c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800383e:	e008      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003840:	f7fd ffee 	bl	8001820 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d901      	bls.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e09f      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003852:	4b0d      	ldr	r3, [pc, #52]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d0f0      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800385e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003860:	2b01      	cmp	r3, #1
 8003862:	f040 8095 	bne.w	8003990 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003866:	4b0a      	ldr	r3, [pc, #40]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003868:	2200      	movs	r2, #0
 800386a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800386c:	f7fd ffd8 	bl	8001820 <HAL_GetTick>
 8003870:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003872:	e00f      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003874:	f7fd ffd4 	bl	8001820 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b02      	cmp	r3, #2
 8003880:	d908      	bls.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e085      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003886:	bf00      	nop
 8003888:	40023800 	.word	0x40023800
 800388c:	42470068 	.word	0x42470068
 8003890:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003894:	4b41      	ldr	r3, [pc, #260]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800389c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038a0:	d0e8      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0304 	and.w	r3, r3, #4
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d009      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d02b      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d127      	bne.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80038ca:	4b34      	ldr	r3, [pc, #208]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80038cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d0:	0c1b      	lsrs	r3, r3, #16
 80038d2:	f003 0303 	and.w	r3, r3, #3
 80038d6:	3301      	adds	r3, #1
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	699a      	ldr	r2, [r3, #24]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	69db      	ldr	r3, [r3, #28]
 80038e4:	019b      	lsls	r3, r3, #6
 80038e6:	431a      	orrs	r2, r3
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	085b      	lsrs	r3, r3, #1
 80038ec:	3b01      	subs	r3, #1
 80038ee:	041b      	lsls	r3, r3, #16
 80038f0:	431a      	orrs	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f6:	061b      	lsls	r3, r3, #24
 80038f8:	4928      	ldr	r1, [pc, #160]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003900:	4b26      	ldr	r3, [pc, #152]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003902:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003906:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390e:	3b01      	subs	r3, #1
 8003910:	021b      	lsls	r3, r3, #8
 8003912:	4922      	ldr	r1, [pc, #136]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003914:	4313      	orrs	r3, r2
 8003916:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003922:	2b00      	cmp	r3, #0
 8003924:	d01d      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800392a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800392e:	d118      	bne.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003930:	4b1a      	ldr	r3, [pc, #104]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003936:	0e1b      	lsrs	r3, r3, #24
 8003938:	f003 030f 	and.w	r3, r3, #15
 800393c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	699a      	ldr	r2, [r3, #24]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	019b      	lsls	r3, r3, #6
 8003948:	431a      	orrs	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	085b      	lsrs	r3, r3, #1
 8003950:	3b01      	subs	r3, #1
 8003952:	041b      	lsls	r3, r3, #16
 8003954:	431a      	orrs	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	061b      	lsls	r3, r3, #24
 800395a:	4910      	ldr	r1, [pc, #64]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800395c:	4313      	orrs	r3, r2
 800395e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003962:	4b0f      	ldr	r3, [pc, #60]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003964:	2201      	movs	r2, #1
 8003966:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003968:	f7fd ff5a 	bl	8001820 <HAL_GetTick>
 800396c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800396e:	e008      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003970:	f7fd ff56 	bl	8001820 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d901      	bls.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e007      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003982:	4b06      	ldr	r3, [pc, #24]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800398a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800398e:	d1ef      	bne.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3730      	adds	r7, #48	; 0x30
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	40023800 	.word	0x40023800
 80039a0:	42470070 	.word	0x42470070

080039a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b089      	sub	sp, #36	; 0x24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 80039ac:	2300      	movs	r3, #0
 80039ae:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80039b0:	2300      	movs	r3, #0
 80039b2:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80039b4:	2300      	movs	r3, #0
 80039b6:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 80039b8:	2300      	movs	r3, #0
 80039ba:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80039bc:	2300      	movs	r3, #0
 80039be:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80039c0:	2300      	movs	r3, #0
 80039c2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	3b01      	subs	r3, #1
 80039c8:	2b07      	cmp	r3, #7
 80039ca:	f200 8224 	bhi.w	8003e16 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80039ce:	a201      	add	r2, pc, #4	; (adr r2, 80039d4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80039d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d4:	08003bd7 	.word	0x08003bd7
 80039d8:	08003d01 	.word	0x08003d01
 80039dc:	08003e17 	.word	0x08003e17
 80039e0:	080039f5 	.word	0x080039f5
 80039e4:	08003e17 	.word	0x08003e17
 80039e8:	08003e17 	.word	0x08003e17
 80039ec:	08003e17 	.word	0x08003e17
 80039f0:	080039f5 	.word	0x080039f5
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 80039f4:	4ba8      	ldr	r3, [pc, #672]	; (8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80039f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039fa:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8003a02:	613b      	str	r3, [r7, #16]
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a0a:	f000 80d6 	beq.w	8003bba <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a14:	f200 80dd 	bhi.w	8003bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a1e:	f000 809f 	beq.w	8003b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a28:	f200 80d3 	bhi.w	8003bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a32:	d05b      	beq.n	8003aec <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a3a:	f200 80ca 	bhi.w	8003bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003a44:	f000 80b6 	beq.w	8003bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003a4e:	f200 80c0 	bhi.w	8003bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a58:	f000 8082 	beq.w	8003b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a62:	f200 80b6 	bhi.w	8003bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d004      	beq.n	8003a76 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a72:	d03b      	beq.n	8003aec <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 8003a74:	e0ad      	b.n	8003bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003a76:	4b88      	ldr	r3, [pc, #544]	; (8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d109      	bne.n	8003a96 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 8003a82:	4b85      	ldr	r3, [pc, #532]	; (8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a8c:	4a83      	ldr	r2, [pc, #524]	; (8003c9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a92:	61bb      	str	r3, [r7, #24]
 8003a94:	e008      	b.n	8003aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 8003a96:	4b80      	ldr	r3, [pc, #512]	; (8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003aa0:	4a7f      	ldr	r2, [pc, #508]	; (8003ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa6:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8003aa8:	4b7b      	ldr	r3, [pc, #492]	; (8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aae:	0e1b      	lsrs	r3, r3, #24
 8003ab0:	f003 030f 	and.w	r3, r3, #15
 8003ab4:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 8003ab6:	4b78      	ldr	r3, [pc, #480]	; (8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003abc:	099b      	lsrs	r3, r3, #6
 8003abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ac2:	69ba      	ldr	r2, [r7, #24]
 8003ac4:	fb03 f202 	mul.w	r2, r3, r2
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ace:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8003ad0:	4b71      	ldr	r3, [pc, #452]	; (8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003ad2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ad6:	0a1b      	lsrs	r3, r3, #8
 8003ad8:	f003 031f 	and.w	r3, r3, #31
 8003adc:	3301      	adds	r3, #1
 8003ade:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8003ae0:	69fa      	ldr	r2, [r7, #28]
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae8:	61fb      	str	r3, [r7, #28]
          break;
 8003aea:	e073      	b.n	8003bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003aec:	4b6a      	ldr	r3, [pc, #424]	; (8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d109      	bne.n	8003b0c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003af8:	4b67      	ldr	r3, [pc, #412]	; (8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003afa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003afe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b02:	4a66      	ldr	r2, [pc, #408]	; (8003c9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b08:	61bb      	str	r3, [r7, #24]
 8003b0a:	e008      	b.n	8003b1e <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 8003b0c:	4b62      	ldr	r3, [pc, #392]	; (8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003b0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b16:	4a62      	ldr	r2, [pc, #392]	; (8003ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b1c:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 8003b1e:	4b5e      	ldr	r3, [pc, #376]	; (8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003b20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b24:	0e1b      	lsrs	r3, r3, #24
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 8003b2c:	4b5a      	ldr	r3, [pc, #360]	; (8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003b2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b32:	099b      	lsrs	r3, r3, #6
 8003b34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	fb03 f202 	mul.w	r2, r3, r2
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b44:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8003b46:	4b54      	ldr	r3, [pc, #336]	; (8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003b48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b4c:	f003 031f 	and.w	r3, r3, #31
 8003b50:	3301      	adds	r3, #1
 8003b52:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8003b54:	69fa      	ldr	r2, [r7, #28]
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b5c:	61fb      	str	r3, [r7, #28]
          break;
 8003b5e:	e039      	b.n	8003bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003b60:	4b4d      	ldr	r3, [pc, #308]	; (8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d108      	bne.n	8003b7e <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003b6c:	4b4a      	ldr	r3, [pc, #296]	; (8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b74:	4a49      	ldr	r2, [pc, #292]	; (8003c9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b7a:	61bb      	str	r3, [r7, #24]
 8003b7c:	e007      	b.n	8003b8e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003b7e:	4b46      	ldr	r3, [pc, #280]	; (8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b86:	4a46      	ldr	r2, [pc, #280]	; (8003ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b8c:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 8003b8e:	4b42      	ldr	r3, [pc, #264]	; (8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	0f1b      	lsrs	r3, r3, #28
 8003b94:	f003 0307 	and.w	r3, r3, #7
 8003b98:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 8003b9a:	4b3f      	ldr	r3, [pc, #252]	; (8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	099b      	lsrs	r3, r3, #6
 8003ba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	fb03 f202 	mul.w	r2, r3, r2
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb0:	61fb      	str	r3, [r7, #28]
          break;
 8003bb2:	e00f      	b.n	8003bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 8003bb4:	4b3b      	ldr	r3, [pc, #236]	; (8003ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8003bb6:	61fb      	str	r3, [r7, #28]
          break;
 8003bb8:	e00c      	b.n	8003bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003bba:	4b37      	ldr	r3, [pc, #220]	; (8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d102      	bne.n	8003bcc <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 8003bc6:	4b35      	ldr	r3, [pc, #212]	; (8003c9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003bc8:	61fb      	str	r3, [r7, #28]
          break;
 8003bca:	e003      	b.n	8003bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 8003bcc:	4b34      	ldr	r3, [pc, #208]	; (8003ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003bce:	61fb      	str	r3, [r7, #28]
          break;
 8003bd0:	e000      	b.n	8003bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 8003bd2:	bf00      	nop
        }
      }
      break;
 8003bd4:	e11f      	b.n	8003e16 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8003bd6:	4b30      	ldr	r3, [pc, #192]	; (8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003bd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bdc:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8003be0:	60fb      	str	r3, [r7, #12]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003be8:	d079      	beq.n	8003cde <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003bf0:	f200 8082 	bhi.w	8003cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bfa:	d03c      	beq.n	8003c76 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c02:	d879      	bhi.n	8003cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d006      	beq.n	8003c18 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c10:	d172      	bne.n	8003cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003c12:	4b24      	ldr	r3, [pc, #144]	; (8003ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8003c14:	61fb      	str	r3, [r7, #28]
          break;
 8003c16:	e072      	b.n	8003cfe <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003c18:	4b1f      	ldr	r3, [pc, #124]	; (8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c24:	d109      	bne.n	8003c3a <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003c26:	4b1c      	ldr	r3, [pc, #112]	; (8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003c28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c30:	4a1b      	ldr	r2, [pc, #108]	; (8003ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c36:	61bb      	str	r3, [r7, #24]
 8003c38:	e008      	b.n	8003c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003c3a:	4b17      	ldr	r3, [pc, #92]	; (8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003c3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c44:	4a15      	ldr	r2, [pc, #84]	; (8003c9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c4a:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003c4c:	4b12      	ldr	r3, [pc, #72]	; (8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003c4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c52:	099b      	lsrs	r3, r3, #6
 8003c54:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	fb02 f303 	mul.w	r3, r2, r3
 8003c5e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003c60:	4b0d      	ldr	r3, [pc, #52]	; (8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003c62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c66:	0f1b      	lsrs	r3, r3, #28
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	68ba      	ldr	r2, [r7, #8]
 8003c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c72:	61fb      	str	r3, [r7, #28]
          break;
 8003c74:	e043      	b.n	8003cfe <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003c76:	4b08      	ldr	r3, [pc, #32]	; (8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c82:	d111      	bne.n	8003ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003c84:	4b04      	ldr	r3, [pc, #16]	; (8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c8c:	4a04      	ldr	r2, [pc, #16]	; (8003ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c92:	61bb      	str	r3, [r7, #24]
 8003c94:	e010      	b.n	8003cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8003c96:	bf00      	nop
 8003c98:	40023800 	.word	0x40023800
 8003c9c:	00f42400 	.word	0x00f42400
 8003ca0:	007a1200 	.word	0x007a1200
 8003ca4:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003ca8:	4b5e      	ldr	r3, [pc, #376]	; (8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cb0:	4a5d      	ldr	r2, [pc, #372]	; (8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb6:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8003cb8:	4b5a      	ldr	r3, [pc, #360]	; (8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	099b      	lsrs	r3, r3, #6
 8003cbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	fb02 f303 	mul.w	r3, r2, r3
 8003cc8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8003cca:	4b56      	ldr	r3, [pc, #344]	; (8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	0f1b      	lsrs	r3, r3, #28
 8003cd0:	f003 0307 	and.w	r3, r3, #7
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cda:	61fb      	str	r3, [r7, #28]
          break;
 8003cdc:	e00f      	b.n	8003cfe <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003cde:	4b51      	ldr	r3, [pc, #324]	; (8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ce6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cea:	d102      	bne.n	8003cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 8003cec:	4b4f      	ldr	r3, [pc, #316]	; (8003e2c <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003cee:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8003cf0:	e005      	b.n	8003cfe <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 8003cf2:	4b4d      	ldr	r3, [pc, #308]	; (8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003cf4:	61fb      	str	r3, [r7, #28]
          break;
 8003cf6:	e002      	b.n	8003cfe <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	61fb      	str	r3, [r7, #28]
          break;
 8003cfc:	bf00      	nop
        }
      }
      break;
 8003cfe:	e08a      	b.n	8003e16 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8003d00:	4b48      	ldr	r3, [pc, #288]	; (8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003d02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d06:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8003d0a:	60fb      	str	r3, [r7, #12]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003d12:	d06f      	beq.n	8003df4 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003d1a:	d878      	bhi.n	8003e0e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d22:	d03c      	beq.n	8003d9e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d2a:	d870      	bhi.n	8003e0e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d006      	beq.n	8003d40 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d38:	d169      	bne.n	8003e0e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003d3a:	4b3d      	ldr	r3, [pc, #244]	; (8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8003d3c:	61fb      	str	r3, [r7, #28]
          break;
 8003d3e:	e069      	b.n	8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003d40:	4b38      	ldr	r3, [pc, #224]	; (8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d4c:	d109      	bne.n	8003d62 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003d4e:	4b35      	ldr	r3, [pc, #212]	; (8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003d50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d58:	4a34      	ldr	r2, [pc, #208]	; (8003e2c <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d5e:	61bb      	str	r3, [r7, #24]
 8003d60:	e008      	b.n	8003d74 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003d62:	4b30      	ldr	r3, [pc, #192]	; (8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003d64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d6c:	4a2e      	ldr	r2, [pc, #184]	; (8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d72:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003d74:	4b2b      	ldr	r3, [pc, #172]	; (8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003d76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d7a:	099b      	lsrs	r3, r3, #6
 8003d7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	fb02 f303 	mul.w	r3, r2, r3
 8003d86:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003d88:	4b26      	ldr	r3, [pc, #152]	; (8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003d8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d8e:	0f1b      	lsrs	r3, r3, #28
 8003d90:	f003 0307 	and.w	r3, r3, #7
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d9a:	61fb      	str	r3, [r7, #28]
          break;
 8003d9c:	e03a      	b.n	8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003d9e:	4b21      	ldr	r3, [pc, #132]	; (8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003da6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003daa:	d108      	bne.n	8003dbe <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003dac:	4b1d      	ldr	r3, [pc, #116]	; (8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003db4:	4a1d      	ldr	r2, [pc, #116]	; (8003e2c <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dba:	61bb      	str	r3, [r7, #24]
 8003dbc:	e007      	b.n	8003dce <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003dbe:	4b19      	ldr	r3, [pc, #100]	; (8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dc6:	4a18      	ldr	r2, [pc, #96]	; (8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dcc:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8003dce:	4b15      	ldr	r3, [pc, #84]	; (8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	099b      	lsrs	r3, r3, #6
 8003dd4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	fb02 f303 	mul.w	r3, r2, r3
 8003dde:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8003de0:	4b10      	ldr	r3, [pc, #64]	; (8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	0f1b      	lsrs	r3, r3, #28
 8003de6:	f003 0307 	and.w	r3, r3, #7
 8003dea:	68ba      	ldr	r2, [r7, #8]
 8003dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df0:	61fb      	str	r3, [r7, #28]
          break;
 8003df2:	e00f      	b.n	8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003df4:	4b0b      	ldr	r3, [pc, #44]	; (8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e00:	d102      	bne.n	8003e08 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 8003e02:	4b0a      	ldr	r3, [pc, #40]	; (8003e2c <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003e04:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8003e06:	e005      	b.n	8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 8003e08:	4b07      	ldr	r3, [pc, #28]	; (8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003e0a:	61fb      	str	r3, [r7, #28]
          break;
 8003e0c:	e002      	b.n	8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	61fb      	str	r3, [r7, #28]
          break;
 8003e12:	bf00      	nop
        }
      }
      break;
 8003e14:	bf00      	nop
    }
  }
  return frequency;
 8003e16:	69fb      	ldr	r3, [r7, #28]
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3724      	adds	r7, #36	; 0x24
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr
 8003e24:	40023800 	.word	0x40023800
 8003e28:	00f42400 	.word	0x00f42400
 8003e2c:	007a1200 	.word	0x007a1200
 8003e30:	00bb8000 	.word	0x00bb8000

08003e34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e38:	b0ae      	sub	sp, #184	; 0xb8
 8003e3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003e42:	2300      	movs	r3, #0
 8003e44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003e54:	2300      	movs	r3, #0
 8003e56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e5a:	4bcb      	ldr	r3, [pc, #812]	; (8004188 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f003 030c 	and.w	r3, r3, #12
 8003e62:	2b0c      	cmp	r3, #12
 8003e64:	f200 8206 	bhi.w	8004274 <HAL_RCC_GetSysClockFreq+0x440>
 8003e68:	a201      	add	r2, pc, #4	; (adr r2, 8003e70 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e6e:	bf00      	nop
 8003e70:	08003ea5 	.word	0x08003ea5
 8003e74:	08004275 	.word	0x08004275
 8003e78:	08004275 	.word	0x08004275
 8003e7c:	08004275 	.word	0x08004275
 8003e80:	08003ead 	.word	0x08003ead
 8003e84:	08004275 	.word	0x08004275
 8003e88:	08004275 	.word	0x08004275
 8003e8c:	08004275 	.word	0x08004275
 8003e90:	08003eb5 	.word	0x08003eb5
 8003e94:	08004275 	.word	0x08004275
 8003e98:	08004275 	.word	0x08004275
 8003e9c:	08004275 	.word	0x08004275
 8003ea0:	080040a5 	.word	0x080040a5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ea4:	4bb9      	ldr	r3, [pc, #740]	; (800418c <HAL_RCC_GetSysClockFreq+0x358>)
 8003ea6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003eaa:	e1e7      	b.n	800427c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003eac:	4bb8      	ldr	r3, [pc, #736]	; (8004190 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003eae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003eb2:	e1e3      	b.n	800427c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003eb4:	4bb4      	ldr	r3, [pc, #720]	; (8004188 <HAL_RCC_GetSysClockFreq+0x354>)
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ebc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ec0:	4bb1      	ldr	r3, [pc, #708]	; (8004188 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d071      	beq.n	8003fb0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ecc:	4bae      	ldr	r3, [pc, #696]	; (8004188 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	099b      	lsrs	r3, r3, #6
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ed8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003edc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ee0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ee4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ee8:	2300      	movs	r3, #0
 8003eea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003eee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003ef2:	4622      	mov	r2, r4
 8003ef4:	462b      	mov	r3, r5
 8003ef6:	f04f 0000 	mov.w	r0, #0
 8003efa:	f04f 0100 	mov.w	r1, #0
 8003efe:	0159      	lsls	r1, r3, #5
 8003f00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f04:	0150      	lsls	r0, r2, #5
 8003f06:	4602      	mov	r2, r0
 8003f08:	460b      	mov	r3, r1
 8003f0a:	4621      	mov	r1, r4
 8003f0c:	1a51      	subs	r1, r2, r1
 8003f0e:	6439      	str	r1, [r7, #64]	; 0x40
 8003f10:	4629      	mov	r1, r5
 8003f12:	eb63 0301 	sbc.w	r3, r3, r1
 8003f16:	647b      	str	r3, [r7, #68]	; 0x44
 8003f18:	f04f 0200 	mov.w	r2, #0
 8003f1c:	f04f 0300 	mov.w	r3, #0
 8003f20:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003f24:	4649      	mov	r1, r9
 8003f26:	018b      	lsls	r3, r1, #6
 8003f28:	4641      	mov	r1, r8
 8003f2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f2e:	4641      	mov	r1, r8
 8003f30:	018a      	lsls	r2, r1, #6
 8003f32:	4641      	mov	r1, r8
 8003f34:	1a51      	subs	r1, r2, r1
 8003f36:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f38:	4649      	mov	r1, r9
 8003f3a:	eb63 0301 	sbc.w	r3, r3, r1
 8003f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f40:	f04f 0200 	mov.w	r2, #0
 8003f44:	f04f 0300 	mov.w	r3, #0
 8003f48:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003f4c:	4649      	mov	r1, r9
 8003f4e:	00cb      	lsls	r3, r1, #3
 8003f50:	4641      	mov	r1, r8
 8003f52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f56:	4641      	mov	r1, r8
 8003f58:	00ca      	lsls	r2, r1, #3
 8003f5a:	4610      	mov	r0, r2
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	4603      	mov	r3, r0
 8003f60:	4622      	mov	r2, r4
 8003f62:	189b      	adds	r3, r3, r2
 8003f64:	633b      	str	r3, [r7, #48]	; 0x30
 8003f66:	462b      	mov	r3, r5
 8003f68:	460a      	mov	r2, r1
 8003f6a:	eb42 0303 	adc.w	r3, r2, r3
 8003f6e:	637b      	str	r3, [r7, #52]	; 0x34
 8003f70:	f04f 0200 	mov.w	r2, #0
 8003f74:	f04f 0300 	mov.w	r3, #0
 8003f78:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003f7c:	4629      	mov	r1, r5
 8003f7e:	024b      	lsls	r3, r1, #9
 8003f80:	4621      	mov	r1, r4
 8003f82:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f86:	4621      	mov	r1, r4
 8003f88:	024a      	lsls	r2, r1, #9
 8003f8a:	4610      	mov	r0, r2
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f92:	2200      	movs	r2, #0
 8003f94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f98:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003f9c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003fa0:	f7fc f996 	bl	80002d0 <__aeabi_uldivmod>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	4613      	mov	r3, r2
 8003faa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003fae:	e067      	b.n	8004080 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fb0:	4b75      	ldr	r3, [pc, #468]	; (8004188 <HAL_RCC_GetSysClockFreq+0x354>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	099b      	lsrs	r3, r3, #6
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003fbc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003fc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003fc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fc8:	67bb      	str	r3, [r7, #120]	; 0x78
 8003fca:	2300      	movs	r3, #0
 8003fcc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003fce:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003fd2:	4622      	mov	r2, r4
 8003fd4:	462b      	mov	r3, r5
 8003fd6:	f04f 0000 	mov.w	r0, #0
 8003fda:	f04f 0100 	mov.w	r1, #0
 8003fde:	0159      	lsls	r1, r3, #5
 8003fe0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fe4:	0150      	lsls	r0, r2, #5
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	460b      	mov	r3, r1
 8003fea:	4621      	mov	r1, r4
 8003fec:	1a51      	subs	r1, r2, r1
 8003fee:	62b9      	str	r1, [r7, #40]	; 0x28
 8003ff0:	4629      	mov	r1, r5
 8003ff2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ff8:	f04f 0200 	mov.w	r2, #0
 8003ffc:	f04f 0300 	mov.w	r3, #0
 8004000:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004004:	4649      	mov	r1, r9
 8004006:	018b      	lsls	r3, r1, #6
 8004008:	4641      	mov	r1, r8
 800400a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800400e:	4641      	mov	r1, r8
 8004010:	018a      	lsls	r2, r1, #6
 8004012:	4641      	mov	r1, r8
 8004014:	ebb2 0a01 	subs.w	sl, r2, r1
 8004018:	4649      	mov	r1, r9
 800401a:	eb63 0b01 	sbc.w	fp, r3, r1
 800401e:	f04f 0200 	mov.w	r2, #0
 8004022:	f04f 0300 	mov.w	r3, #0
 8004026:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800402a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800402e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004032:	4692      	mov	sl, r2
 8004034:	469b      	mov	fp, r3
 8004036:	4623      	mov	r3, r4
 8004038:	eb1a 0303 	adds.w	r3, sl, r3
 800403c:	623b      	str	r3, [r7, #32]
 800403e:	462b      	mov	r3, r5
 8004040:	eb4b 0303 	adc.w	r3, fp, r3
 8004044:	627b      	str	r3, [r7, #36]	; 0x24
 8004046:	f04f 0200 	mov.w	r2, #0
 800404a:	f04f 0300 	mov.w	r3, #0
 800404e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004052:	4629      	mov	r1, r5
 8004054:	028b      	lsls	r3, r1, #10
 8004056:	4621      	mov	r1, r4
 8004058:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800405c:	4621      	mov	r1, r4
 800405e:	028a      	lsls	r2, r1, #10
 8004060:	4610      	mov	r0, r2
 8004062:	4619      	mov	r1, r3
 8004064:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004068:	2200      	movs	r2, #0
 800406a:	673b      	str	r3, [r7, #112]	; 0x70
 800406c:	677a      	str	r2, [r7, #116]	; 0x74
 800406e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004072:	f7fc f92d 	bl	80002d0 <__aeabi_uldivmod>
 8004076:	4602      	mov	r2, r0
 8004078:	460b      	mov	r3, r1
 800407a:	4613      	mov	r3, r2
 800407c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004080:	4b41      	ldr	r3, [pc, #260]	; (8004188 <HAL_RCC_GetSysClockFreq+0x354>)
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	0c1b      	lsrs	r3, r3, #16
 8004086:	f003 0303 	and.w	r3, r3, #3
 800408a:	3301      	adds	r3, #1
 800408c:	005b      	lsls	r3, r3, #1
 800408e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004092:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004096:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800409a:	fbb2 f3f3 	udiv	r3, r2, r3
 800409e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80040a2:	e0eb      	b.n	800427c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040a4:	4b38      	ldr	r3, [pc, #224]	; (8004188 <HAL_RCC_GetSysClockFreq+0x354>)
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040b0:	4b35      	ldr	r3, [pc, #212]	; (8004188 <HAL_RCC_GetSysClockFreq+0x354>)
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d06b      	beq.n	8004194 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040bc:	4b32      	ldr	r3, [pc, #200]	; (8004188 <HAL_RCC_GetSysClockFreq+0x354>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	099b      	lsrs	r3, r3, #6
 80040c2:	2200      	movs	r2, #0
 80040c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80040c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80040c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040ce:	663b      	str	r3, [r7, #96]	; 0x60
 80040d0:	2300      	movs	r3, #0
 80040d2:	667b      	str	r3, [r7, #100]	; 0x64
 80040d4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80040d8:	4622      	mov	r2, r4
 80040da:	462b      	mov	r3, r5
 80040dc:	f04f 0000 	mov.w	r0, #0
 80040e0:	f04f 0100 	mov.w	r1, #0
 80040e4:	0159      	lsls	r1, r3, #5
 80040e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040ea:	0150      	lsls	r0, r2, #5
 80040ec:	4602      	mov	r2, r0
 80040ee:	460b      	mov	r3, r1
 80040f0:	4621      	mov	r1, r4
 80040f2:	1a51      	subs	r1, r2, r1
 80040f4:	61b9      	str	r1, [r7, #24]
 80040f6:	4629      	mov	r1, r5
 80040f8:	eb63 0301 	sbc.w	r3, r3, r1
 80040fc:	61fb      	str	r3, [r7, #28]
 80040fe:	f04f 0200 	mov.w	r2, #0
 8004102:	f04f 0300 	mov.w	r3, #0
 8004106:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800410a:	4659      	mov	r1, fp
 800410c:	018b      	lsls	r3, r1, #6
 800410e:	4651      	mov	r1, sl
 8004110:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004114:	4651      	mov	r1, sl
 8004116:	018a      	lsls	r2, r1, #6
 8004118:	4651      	mov	r1, sl
 800411a:	ebb2 0801 	subs.w	r8, r2, r1
 800411e:	4659      	mov	r1, fp
 8004120:	eb63 0901 	sbc.w	r9, r3, r1
 8004124:	f04f 0200 	mov.w	r2, #0
 8004128:	f04f 0300 	mov.w	r3, #0
 800412c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004130:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004134:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004138:	4690      	mov	r8, r2
 800413a:	4699      	mov	r9, r3
 800413c:	4623      	mov	r3, r4
 800413e:	eb18 0303 	adds.w	r3, r8, r3
 8004142:	613b      	str	r3, [r7, #16]
 8004144:	462b      	mov	r3, r5
 8004146:	eb49 0303 	adc.w	r3, r9, r3
 800414a:	617b      	str	r3, [r7, #20]
 800414c:	f04f 0200 	mov.w	r2, #0
 8004150:	f04f 0300 	mov.w	r3, #0
 8004154:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004158:	4629      	mov	r1, r5
 800415a:	024b      	lsls	r3, r1, #9
 800415c:	4621      	mov	r1, r4
 800415e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004162:	4621      	mov	r1, r4
 8004164:	024a      	lsls	r2, r1, #9
 8004166:	4610      	mov	r0, r2
 8004168:	4619      	mov	r1, r3
 800416a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800416e:	2200      	movs	r2, #0
 8004170:	65bb      	str	r3, [r7, #88]	; 0x58
 8004172:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004174:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004178:	f7fc f8aa 	bl	80002d0 <__aeabi_uldivmod>
 800417c:	4602      	mov	r2, r0
 800417e:	460b      	mov	r3, r1
 8004180:	4613      	mov	r3, r2
 8004182:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004186:	e065      	b.n	8004254 <HAL_RCC_GetSysClockFreq+0x420>
 8004188:	40023800 	.word	0x40023800
 800418c:	00f42400 	.word	0x00f42400
 8004190:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004194:	4b3d      	ldr	r3, [pc, #244]	; (800428c <HAL_RCC_GetSysClockFreq+0x458>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	099b      	lsrs	r3, r3, #6
 800419a:	2200      	movs	r2, #0
 800419c:	4618      	mov	r0, r3
 800419e:	4611      	mov	r1, r2
 80041a0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80041a4:	653b      	str	r3, [r7, #80]	; 0x50
 80041a6:	2300      	movs	r3, #0
 80041a8:	657b      	str	r3, [r7, #84]	; 0x54
 80041aa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80041ae:	4642      	mov	r2, r8
 80041b0:	464b      	mov	r3, r9
 80041b2:	f04f 0000 	mov.w	r0, #0
 80041b6:	f04f 0100 	mov.w	r1, #0
 80041ba:	0159      	lsls	r1, r3, #5
 80041bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041c0:	0150      	lsls	r0, r2, #5
 80041c2:	4602      	mov	r2, r0
 80041c4:	460b      	mov	r3, r1
 80041c6:	4641      	mov	r1, r8
 80041c8:	1a51      	subs	r1, r2, r1
 80041ca:	60b9      	str	r1, [r7, #8]
 80041cc:	4649      	mov	r1, r9
 80041ce:	eb63 0301 	sbc.w	r3, r3, r1
 80041d2:	60fb      	str	r3, [r7, #12]
 80041d4:	f04f 0200 	mov.w	r2, #0
 80041d8:	f04f 0300 	mov.w	r3, #0
 80041dc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80041e0:	4659      	mov	r1, fp
 80041e2:	018b      	lsls	r3, r1, #6
 80041e4:	4651      	mov	r1, sl
 80041e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041ea:	4651      	mov	r1, sl
 80041ec:	018a      	lsls	r2, r1, #6
 80041ee:	4651      	mov	r1, sl
 80041f0:	1a54      	subs	r4, r2, r1
 80041f2:	4659      	mov	r1, fp
 80041f4:	eb63 0501 	sbc.w	r5, r3, r1
 80041f8:	f04f 0200 	mov.w	r2, #0
 80041fc:	f04f 0300 	mov.w	r3, #0
 8004200:	00eb      	lsls	r3, r5, #3
 8004202:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004206:	00e2      	lsls	r2, r4, #3
 8004208:	4614      	mov	r4, r2
 800420a:	461d      	mov	r5, r3
 800420c:	4643      	mov	r3, r8
 800420e:	18e3      	adds	r3, r4, r3
 8004210:	603b      	str	r3, [r7, #0]
 8004212:	464b      	mov	r3, r9
 8004214:	eb45 0303 	adc.w	r3, r5, r3
 8004218:	607b      	str	r3, [r7, #4]
 800421a:	f04f 0200 	mov.w	r2, #0
 800421e:	f04f 0300 	mov.w	r3, #0
 8004222:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004226:	4629      	mov	r1, r5
 8004228:	028b      	lsls	r3, r1, #10
 800422a:	4621      	mov	r1, r4
 800422c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004230:	4621      	mov	r1, r4
 8004232:	028a      	lsls	r2, r1, #10
 8004234:	4610      	mov	r0, r2
 8004236:	4619      	mov	r1, r3
 8004238:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800423c:	2200      	movs	r2, #0
 800423e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004240:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004242:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004246:	f7fc f843 	bl	80002d0 <__aeabi_uldivmod>
 800424a:	4602      	mov	r2, r0
 800424c:	460b      	mov	r3, r1
 800424e:	4613      	mov	r3, r2
 8004250:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004254:	4b0d      	ldr	r3, [pc, #52]	; (800428c <HAL_RCC_GetSysClockFreq+0x458>)
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	0f1b      	lsrs	r3, r3, #28
 800425a:	f003 0307 	and.w	r3, r3, #7
 800425e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004262:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004266:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800426a:	fbb2 f3f3 	udiv	r3, r2, r3
 800426e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004272:	e003      	b.n	800427c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004274:	4b06      	ldr	r3, [pc, #24]	; (8004290 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004276:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800427a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800427c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004280:	4618      	mov	r0, r3
 8004282:	37b8      	adds	r7, #184	; 0xb8
 8004284:	46bd      	mov	sp, r7
 8004286:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800428a:	bf00      	nop
 800428c:	40023800 	.word	0x40023800
 8004290:	00f42400 	.word	0x00f42400

08004294 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d101      	bne.n	80042a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e28d      	b.n	80047c2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f000 8083 	beq.w	80043ba <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80042b4:	4b94      	ldr	r3, [pc, #592]	; (8004508 <HAL_RCC_OscConfig+0x274>)
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f003 030c 	and.w	r3, r3, #12
 80042bc:	2b04      	cmp	r3, #4
 80042be:	d019      	beq.n	80042f4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80042c0:	4b91      	ldr	r3, [pc, #580]	; (8004508 <HAL_RCC_OscConfig+0x274>)
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80042c8:	2b08      	cmp	r3, #8
 80042ca:	d106      	bne.n	80042da <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80042cc:	4b8e      	ldr	r3, [pc, #568]	; (8004508 <HAL_RCC_OscConfig+0x274>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042d8:	d00c      	beq.n	80042f4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042da:	4b8b      	ldr	r3, [pc, #556]	; (8004508 <HAL_RCC_OscConfig+0x274>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80042e2:	2b0c      	cmp	r3, #12
 80042e4:	d112      	bne.n	800430c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042e6:	4b88      	ldr	r3, [pc, #544]	; (8004508 <HAL_RCC_OscConfig+0x274>)
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042f2:	d10b      	bne.n	800430c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042f4:	4b84      	ldr	r3, [pc, #528]	; (8004508 <HAL_RCC_OscConfig+0x274>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d05b      	beq.n	80043b8 <HAL_RCC_OscConfig+0x124>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d157      	bne.n	80043b8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e25a      	b.n	80047c2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004314:	d106      	bne.n	8004324 <HAL_RCC_OscConfig+0x90>
 8004316:	4b7c      	ldr	r3, [pc, #496]	; (8004508 <HAL_RCC_OscConfig+0x274>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a7b      	ldr	r2, [pc, #492]	; (8004508 <HAL_RCC_OscConfig+0x274>)
 800431c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004320:	6013      	str	r3, [r2, #0]
 8004322:	e01d      	b.n	8004360 <HAL_RCC_OscConfig+0xcc>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800432c:	d10c      	bne.n	8004348 <HAL_RCC_OscConfig+0xb4>
 800432e:	4b76      	ldr	r3, [pc, #472]	; (8004508 <HAL_RCC_OscConfig+0x274>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a75      	ldr	r2, [pc, #468]	; (8004508 <HAL_RCC_OscConfig+0x274>)
 8004334:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004338:	6013      	str	r3, [r2, #0]
 800433a:	4b73      	ldr	r3, [pc, #460]	; (8004508 <HAL_RCC_OscConfig+0x274>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a72      	ldr	r2, [pc, #456]	; (8004508 <HAL_RCC_OscConfig+0x274>)
 8004340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004344:	6013      	str	r3, [r2, #0]
 8004346:	e00b      	b.n	8004360 <HAL_RCC_OscConfig+0xcc>
 8004348:	4b6f      	ldr	r3, [pc, #444]	; (8004508 <HAL_RCC_OscConfig+0x274>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a6e      	ldr	r2, [pc, #440]	; (8004508 <HAL_RCC_OscConfig+0x274>)
 800434e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004352:	6013      	str	r3, [r2, #0]
 8004354:	4b6c      	ldr	r3, [pc, #432]	; (8004508 <HAL_RCC_OscConfig+0x274>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a6b      	ldr	r2, [pc, #428]	; (8004508 <HAL_RCC_OscConfig+0x274>)
 800435a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800435e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d013      	beq.n	8004390 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004368:	f7fd fa5a 	bl	8001820 <HAL_GetTick>
 800436c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004370:	f7fd fa56 	bl	8001820 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b64      	cmp	r3, #100	; 0x64
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e21f      	b.n	80047c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004382:	4b61      	ldr	r3, [pc, #388]	; (8004508 <HAL_RCC_OscConfig+0x274>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d0f0      	beq.n	8004370 <HAL_RCC_OscConfig+0xdc>
 800438e:	e014      	b.n	80043ba <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004390:	f7fd fa46 	bl	8001820 <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004398:	f7fd fa42 	bl	8001820 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b64      	cmp	r3, #100	; 0x64
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e20b      	b.n	80047c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043aa:	4b57      	ldr	r3, [pc, #348]	; (8004508 <HAL_RCC_OscConfig+0x274>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1f0      	bne.n	8004398 <HAL_RCC_OscConfig+0x104>
 80043b6:	e000      	b.n	80043ba <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d06f      	beq.n	80044a6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80043c6:	4b50      	ldr	r3, [pc, #320]	; (8004508 <HAL_RCC_OscConfig+0x274>)
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f003 030c 	and.w	r3, r3, #12
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d017      	beq.n	8004402 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80043d2:	4b4d      	ldr	r3, [pc, #308]	; (8004508 <HAL_RCC_OscConfig+0x274>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80043da:	2b08      	cmp	r3, #8
 80043dc:	d105      	bne.n	80043ea <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80043de:	4b4a      	ldr	r3, [pc, #296]	; (8004508 <HAL_RCC_OscConfig+0x274>)
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00b      	beq.n	8004402 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043ea:	4b47      	ldr	r3, [pc, #284]	; (8004508 <HAL_RCC_OscConfig+0x274>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80043f2:	2b0c      	cmp	r3, #12
 80043f4:	d11c      	bne.n	8004430 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043f6:	4b44      	ldr	r3, [pc, #272]	; (8004508 <HAL_RCC_OscConfig+0x274>)
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d116      	bne.n	8004430 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004402:	4b41      	ldr	r3, [pc, #260]	; (8004508 <HAL_RCC_OscConfig+0x274>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	2b00      	cmp	r3, #0
 800440c:	d005      	beq.n	800441a <HAL_RCC_OscConfig+0x186>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d001      	beq.n	800441a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e1d3      	b.n	80047c2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800441a:	4b3b      	ldr	r3, [pc, #236]	; (8004508 <HAL_RCC_OscConfig+0x274>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	00db      	lsls	r3, r3, #3
 8004428:	4937      	ldr	r1, [pc, #220]	; (8004508 <HAL_RCC_OscConfig+0x274>)
 800442a:	4313      	orrs	r3, r2
 800442c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800442e:	e03a      	b.n	80044a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d020      	beq.n	800447a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004438:	4b34      	ldr	r3, [pc, #208]	; (800450c <HAL_RCC_OscConfig+0x278>)
 800443a:	2201      	movs	r2, #1
 800443c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800443e:	f7fd f9ef 	bl	8001820 <HAL_GetTick>
 8004442:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004444:	e008      	b.n	8004458 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004446:	f7fd f9eb 	bl	8001820 <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	2b02      	cmp	r3, #2
 8004452:	d901      	bls.n	8004458 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e1b4      	b.n	80047c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004458:	4b2b      	ldr	r3, [pc, #172]	; (8004508 <HAL_RCC_OscConfig+0x274>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d0f0      	beq.n	8004446 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004464:	4b28      	ldr	r3, [pc, #160]	; (8004508 <HAL_RCC_OscConfig+0x274>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	00db      	lsls	r3, r3, #3
 8004472:	4925      	ldr	r1, [pc, #148]	; (8004508 <HAL_RCC_OscConfig+0x274>)
 8004474:	4313      	orrs	r3, r2
 8004476:	600b      	str	r3, [r1, #0]
 8004478:	e015      	b.n	80044a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800447a:	4b24      	ldr	r3, [pc, #144]	; (800450c <HAL_RCC_OscConfig+0x278>)
 800447c:	2200      	movs	r2, #0
 800447e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004480:	f7fd f9ce 	bl	8001820 <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004488:	f7fd f9ca 	bl	8001820 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e193      	b.n	80047c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800449a:	4b1b      	ldr	r3, [pc, #108]	; (8004508 <HAL_RCC_OscConfig+0x274>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1f0      	bne.n	8004488 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0308 	and.w	r3, r3, #8
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d036      	beq.n	8004520 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d016      	beq.n	80044e8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044ba:	4b15      	ldr	r3, [pc, #84]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 80044bc:	2201      	movs	r2, #1
 80044be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c0:	f7fd f9ae 	bl	8001820 <HAL_GetTick>
 80044c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044c6:	e008      	b.n	80044da <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044c8:	f7fd f9aa 	bl	8001820 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d901      	bls.n	80044da <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e173      	b.n	80047c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044da:	4b0b      	ldr	r3, [pc, #44]	; (8004508 <HAL_RCC_OscConfig+0x274>)
 80044dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d0f0      	beq.n	80044c8 <HAL_RCC_OscConfig+0x234>
 80044e6:	e01b      	b.n	8004520 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044e8:	4b09      	ldr	r3, [pc, #36]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ee:	f7fd f997 	bl	8001820 <HAL_GetTick>
 80044f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044f4:	e00e      	b.n	8004514 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044f6:	f7fd f993 	bl	8001820 <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	2b02      	cmp	r3, #2
 8004502:	d907      	bls.n	8004514 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e15c      	b.n	80047c2 <HAL_RCC_OscConfig+0x52e>
 8004508:	40023800 	.word	0x40023800
 800450c:	42470000 	.word	0x42470000
 8004510:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004514:	4b8a      	ldr	r3, [pc, #552]	; (8004740 <HAL_RCC_OscConfig+0x4ac>)
 8004516:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004518:	f003 0302 	and.w	r3, r3, #2
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1ea      	bne.n	80044f6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0304 	and.w	r3, r3, #4
 8004528:	2b00      	cmp	r3, #0
 800452a:	f000 8097 	beq.w	800465c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800452e:	2300      	movs	r3, #0
 8004530:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004532:	4b83      	ldr	r3, [pc, #524]	; (8004740 <HAL_RCC_OscConfig+0x4ac>)
 8004534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10f      	bne.n	800455e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800453e:	2300      	movs	r3, #0
 8004540:	60bb      	str	r3, [r7, #8]
 8004542:	4b7f      	ldr	r3, [pc, #508]	; (8004740 <HAL_RCC_OscConfig+0x4ac>)
 8004544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004546:	4a7e      	ldr	r2, [pc, #504]	; (8004740 <HAL_RCC_OscConfig+0x4ac>)
 8004548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800454c:	6413      	str	r3, [r2, #64]	; 0x40
 800454e:	4b7c      	ldr	r3, [pc, #496]	; (8004740 <HAL_RCC_OscConfig+0x4ac>)
 8004550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004556:	60bb      	str	r3, [r7, #8]
 8004558:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800455a:	2301      	movs	r3, #1
 800455c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800455e:	4b79      	ldr	r3, [pc, #484]	; (8004744 <HAL_RCC_OscConfig+0x4b0>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004566:	2b00      	cmp	r3, #0
 8004568:	d118      	bne.n	800459c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800456a:	4b76      	ldr	r3, [pc, #472]	; (8004744 <HAL_RCC_OscConfig+0x4b0>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a75      	ldr	r2, [pc, #468]	; (8004744 <HAL_RCC_OscConfig+0x4b0>)
 8004570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004574:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004576:	f7fd f953 	bl	8001820 <HAL_GetTick>
 800457a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800457c:	e008      	b.n	8004590 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800457e:	f7fd f94f 	bl	8001820 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b02      	cmp	r3, #2
 800458a:	d901      	bls.n	8004590 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e118      	b.n	80047c2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004590:	4b6c      	ldr	r3, [pc, #432]	; (8004744 <HAL_RCC_OscConfig+0x4b0>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004598:	2b00      	cmp	r3, #0
 800459a:	d0f0      	beq.n	800457e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d106      	bne.n	80045b2 <HAL_RCC_OscConfig+0x31e>
 80045a4:	4b66      	ldr	r3, [pc, #408]	; (8004740 <HAL_RCC_OscConfig+0x4ac>)
 80045a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a8:	4a65      	ldr	r2, [pc, #404]	; (8004740 <HAL_RCC_OscConfig+0x4ac>)
 80045aa:	f043 0301 	orr.w	r3, r3, #1
 80045ae:	6713      	str	r3, [r2, #112]	; 0x70
 80045b0:	e01c      	b.n	80045ec <HAL_RCC_OscConfig+0x358>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	2b05      	cmp	r3, #5
 80045b8:	d10c      	bne.n	80045d4 <HAL_RCC_OscConfig+0x340>
 80045ba:	4b61      	ldr	r3, [pc, #388]	; (8004740 <HAL_RCC_OscConfig+0x4ac>)
 80045bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045be:	4a60      	ldr	r2, [pc, #384]	; (8004740 <HAL_RCC_OscConfig+0x4ac>)
 80045c0:	f043 0304 	orr.w	r3, r3, #4
 80045c4:	6713      	str	r3, [r2, #112]	; 0x70
 80045c6:	4b5e      	ldr	r3, [pc, #376]	; (8004740 <HAL_RCC_OscConfig+0x4ac>)
 80045c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ca:	4a5d      	ldr	r2, [pc, #372]	; (8004740 <HAL_RCC_OscConfig+0x4ac>)
 80045cc:	f043 0301 	orr.w	r3, r3, #1
 80045d0:	6713      	str	r3, [r2, #112]	; 0x70
 80045d2:	e00b      	b.n	80045ec <HAL_RCC_OscConfig+0x358>
 80045d4:	4b5a      	ldr	r3, [pc, #360]	; (8004740 <HAL_RCC_OscConfig+0x4ac>)
 80045d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d8:	4a59      	ldr	r2, [pc, #356]	; (8004740 <HAL_RCC_OscConfig+0x4ac>)
 80045da:	f023 0301 	bic.w	r3, r3, #1
 80045de:	6713      	str	r3, [r2, #112]	; 0x70
 80045e0:	4b57      	ldr	r3, [pc, #348]	; (8004740 <HAL_RCC_OscConfig+0x4ac>)
 80045e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e4:	4a56      	ldr	r2, [pc, #344]	; (8004740 <HAL_RCC_OscConfig+0x4ac>)
 80045e6:	f023 0304 	bic.w	r3, r3, #4
 80045ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d015      	beq.n	8004620 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f4:	f7fd f914 	bl	8001820 <HAL_GetTick>
 80045f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045fa:	e00a      	b.n	8004612 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045fc:	f7fd f910 	bl	8001820 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	f241 3288 	movw	r2, #5000	; 0x1388
 800460a:	4293      	cmp	r3, r2
 800460c:	d901      	bls.n	8004612 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e0d7      	b.n	80047c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004612:	4b4b      	ldr	r3, [pc, #300]	; (8004740 <HAL_RCC_OscConfig+0x4ac>)
 8004614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d0ee      	beq.n	80045fc <HAL_RCC_OscConfig+0x368>
 800461e:	e014      	b.n	800464a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004620:	f7fd f8fe 	bl	8001820 <HAL_GetTick>
 8004624:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004626:	e00a      	b.n	800463e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004628:	f7fd f8fa 	bl	8001820 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	f241 3288 	movw	r2, #5000	; 0x1388
 8004636:	4293      	cmp	r3, r2
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e0c1      	b.n	80047c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800463e:	4b40      	ldr	r3, [pc, #256]	; (8004740 <HAL_RCC_OscConfig+0x4ac>)
 8004640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1ee      	bne.n	8004628 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800464a:	7dfb      	ldrb	r3, [r7, #23]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d105      	bne.n	800465c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004650:	4b3b      	ldr	r3, [pc, #236]	; (8004740 <HAL_RCC_OscConfig+0x4ac>)
 8004652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004654:	4a3a      	ldr	r2, [pc, #232]	; (8004740 <HAL_RCC_OscConfig+0x4ac>)
 8004656:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800465a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	2b00      	cmp	r3, #0
 8004662:	f000 80ad 	beq.w	80047c0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004666:	4b36      	ldr	r3, [pc, #216]	; (8004740 <HAL_RCC_OscConfig+0x4ac>)
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f003 030c 	and.w	r3, r3, #12
 800466e:	2b08      	cmp	r3, #8
 8004670:	d060      	beq.n	8004734 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	2b02      	cmp	r3, #2
 8004678:	d145      	bne.n	8004706 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800467a:	4b33      	ldr	r3, [pc, #204]	; (8004748 <HAL_RCC_OscConfig+0x4b4>)
 800467c:	2200      	movs	r2, #0
 800467e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004680:	f7fd f8ce 	bl	8001820 <HAL_GetTick>
 8004684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004686:	e008      	b.n	800469a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004688:	f7fd f8ca 	bl	8001820 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	2b02      	cmp	r3, #2
 8004694:	d901      	bls.n	800469a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e093      	b.n	80047c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800469a:	4b29      	ldr	r3, [pc, #164]	; (8004740 <HAL_RCC_OscConfig+0x4ac>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1f0      	bne.n	8004688 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	69da      	ldr	r2, [r3, #28]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a1b      	ldr	r3, [r3, #32]
 80046ae:	431a      	orrs	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b4:	019b      	lsls	r3, r3, #6
 80046b6:	431a      	orrs	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046bc:	085b      	lsrs	r3, r3, #1
 80046be:	3b01      	subs	r3, #1
 80046c0:	041b      	lsls	r3, r3, #16
 80046c2:	431a      	orrs	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c8:	061b      	lsls	r3, r3, #24
 80046ca:	431a      	orrs	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d0:	071b      	lsls	r3, r3, #28
 80046d2:	491b      	ldr	r1, [pc, #108]	; (8004740 <HAL_RCC_OscConfig+0x4ac>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046d8:	4b1b      	ldr	r3, [pc, #108]	; (8004748 <HAL_RCC_OscConfig+0x4b4>)
 80046da:	2201      	movs	r2, #1
 80046dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046de:	f7fd f89f 	bl	8001820 <HAL_GetTick>
 80046e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046e4:	e008      	b.n	80046f8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046e6:	f7fd f89b 	bl	8001820 <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d901      	bls.n	80046f8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e064      	b.n	80047c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046f8:	4b11      	ldr	r3, [pc, #68]	; (8004740 <HAL_RCC_OscConfig+0x4ac>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d0f0      	beq.n	80046e6 <HAL_RCC_OscConfig+0x452>
 8004704:	e05c      	b.n	80047c0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004706:	4b10      	ldr	r3, [pc, #64]	; (8004748 <HAL_RCC_OscConfig+0x4b4>)
 8004708:	2200      	movs	r2, #0
 800470a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800470c:	f7fd f888 	bl	8001820 <HAL_GetTick>
 8004710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004712:	e008      	b.n	8004726 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004714:	f7fd f884 	bl	8001820 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b02      	cmp	r3, #2
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e04d      	b.n	80047c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004726:	4b06      	ldr	r3, [pc, #24]	; (8004740 <HAL_RCC_OscConfig+0x4ac>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1f0      	bne.n	8004714 <HAL_RCC_OscConfig+0x480>
 8004732:	e045      	b.n	80047c0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	2b01      	cmp	r3, #1
 800473a:	d107      	bne.n	800474c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e040      	b.n	80047c2 <HAL_RCC_OscConfig+0x52e>
 8004740:	40023800 	.word	0x40023800
 8004744:	40007000 	.word	0x40007000
 8004748:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800474c:	4b1f      	ldr	r3, [pc, #124]	; (80047cc <HAL_RCC_OscConfig+0x538>)
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d030      	beq.n	80047bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004764:	429a      	cmp	r2, r3
 8004766:	d129      	bne.n	80047bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004772:	429a      	cmp	r2, r3
 8004774:	d122      	bne.n	80047bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800477c:	4013      	ands	r3, r2
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004782:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004784:	4293      	cmp	r3, r2
 8004786:	d119      	bne.n	80047bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004792:	085b      	lsrs	r3, r3, #1
 8004794:	3b01      	subs	r3, #1
 8004796:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004798:	429a      	cmp	r2, r3
 800479a:	d10f      	bne.n	80047bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d107      	bne.n	80047bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d001      	beq.n	80047c0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e000      	b.n	80047c2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3718      	adds	r7, #24
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	40023800 	.word	0x40023800

080047d0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e022      	b.n	8004828 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d105      	bne.n	80047fa <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f7fc fd3d 	bl	8001274 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2203      	movs	r2, #3
 80047fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 f814 	bl	8004830 <HAL_SD_InitCard>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d001      	beq.n	8004812 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e00a      	b.n	8004828 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3708      	adds	r7, #8
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004830:	b5b0      	push	{r4, r5, r7, lr}
 8004832:	b08e      	sub	sp, #56	; 0x38
 8004834:	af04      	add	r7, sp, #16
 8004836:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004838:	2300      	movs	r3, #0
 800483a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800483c:	2300      	movs	r3, #0
 800483e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004840:	2300      	movs	r3, #0
 8004842:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004844:	2300      	movs	r3, #0
 8004846:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004848:	2300      	movs	r3, #0
 800484a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800484c:	2376      	movs	r3, #118	; 0x76
 800484e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681d      	ldr	r5, [r3, #0]
 8004854:	466c      	mov	r4, sp
 8004856:	f107 0314 	add.w	r3, r7, #20
 800485a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800485e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004862:	f107 0308 	add.w	r3, r7, #8
 8004866:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004868:	4628      	mov	r0, r5
 800486a:	f002 fb23 	bl	8006eb4 <SDIO_Init>
 800486e:	4603      	mov	r3, r0
 8004870:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8004874:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004878:	2b00      	cmp	r3, #0
 800487a:	d001      	beq.n	8004880 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e04f      	b.n	8004920 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004880:	4b29      	ldr	r3, [pc, #164]	; (8004928 <HAL_SD_InitCard+0xf8>)
 8004882:	2200      	movs	r2, #0
 8004884:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4618      	mov	r0, r3
 800488c:	f002 fb5b 	bl	8006f46 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004890:	4b25      	ldr	r3, [pc, #148]	; (8004928 <HAL_SD_InitCard+0xf8>)
 8004892:	2201      	movs	r2, #1
 8004894:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8004896:	2002      	movs	r0, #2
 8004898:	f7fc ffce 	bl	8001838 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 ff55 	bl	800574c <SD_PowerON>
 80048a2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80048a4:	6a3b      	ldr	r3, [r7, #32]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00b      	beq.n	80048c2 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048b6:	6a3b      	ldr	r3, [r7, #32]
 80048b8:	431a      	orrs	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e02e      	b.n	8004920 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 fe74 	bl	80055b0 <SD_InitCard>
 80048c8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80048ca:	6a3b      	ldr	r3, [r7, #32]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00b      	beq.n	80048e8 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048dc:	6a3b      	ldr	r3, [r7, #32]
 80048de:	431a      	orrs	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e01b      	b.n	8004920 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80048f0:	4618      	mov	r0, r3
 80048f2:	f002 fbba 	bl	800706a <SDMMC_CmdBlockLength>
 80048f6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80048f8:	6a3b      	ldr	r3, [r7, #32]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00f      	beq.n	800491e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a0a      	ldr	r2, [pc, #40]	; (800492c <HAL_SD_InitCard+0xfc>)
 8004904:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800490a:	6a3b      	ldr	r3, [r7, #32]
 800490c:	431a      	orrs	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2201      	movs	r2, #1
 8004916:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e000      	b.n	8004920 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3728      	adds	r7, #40	; 0x28
 8004924:	46bd      	mov	sp, r7
 8004926:	bdb0      	pop	{r4, r5, r7, pc}
 8004928:	422580a0 	.word	0x422580a0
 800492c:	004005ff 	.word	0x004005ff

08004930 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b08c      	sub	sp, #48	; 0x30
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
 800493c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d107      	bne.n	8004958 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e0be      	b.n	8004ad6 <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800495e:	b2db      	uxtb	r3, r3
 8004960:	2b01      	cmp	r3, #1
 8004962:	f040 80b7 	bne.w	8004ad4 <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2200      	movs	r2, #0
 800496a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800496c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	441a      	add	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004976:	429a      	cmp	r2, r3
 8004978:	d907      	bls.n	800498a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e0a5      	b.n	8004ad6 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2203      	movs	r2, #3
 800498e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2200      	movs	r2, #0
 8004998:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80049a8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ae:	4a4c      	ldr	r2, [pc, #304]	; (8004ae0 <HAL_SD_ReadBlocks_DMA+0x1b0>)
 80049b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b6:	4a4b      	ldr	r2, [pc, #300]	; (8004ae4 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 80049b8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049be:	2200      	movs	r2, #0
 80049c0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c6:	2200      	movs	r2, #0
 80049c8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049da:	689a      	ldr	r2, [r3, #8]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	430a      	orrs	r2, r1
 80049e4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	3380      	adds	r3, #128	; 0x80
 80049f0:	4619      	mov	r1, r3
 80049f2:	68ba      	ldr	r2, [r7, #8]
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	025b      	lsls	r3, r3, #9
 80049f8:	089b      	lsrs	r3, r3, #2
 80049fa:	f7fd f8ed 	bl	8001bd8 <HAL_DMA_Start_IT>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d017      	beq.n	8004a34 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8004a12:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a33      	ldr	r2, [pc, #204]	; (8004ae8 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8004a1a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a20:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e050      	b.n	8004ad6 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8004a34:	4b2d      	ldr	r3, [pc, #180]	; (8004aec <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8004a36:	2201      	movs	r2, #1
 8004a38:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d002      	beq.n	8004a48 <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 8004a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a44:	025b      	lsls	r3, r3, #9
 8004a46:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004a48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a4c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	025b      	lsls	r3, r3, #9
 8004a52:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004a54:	2390      	movs	r3, #144	; 0x90
 8004a56:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004a58:	2302      	movs	r3, #2
 8004a5a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004a60:	2301      	movs	r3, #1
 8004a62:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f107 0210 	add.w	r2, r7, #16
 8004a6c:	4611      	mov	r1, r2
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f002 facf 	bl	8007012 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d90a      	bls.n	8004a90 <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2282      	movs	r2, #130	; 0x82
 8004a7e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a86:	4618      	mov	r0, r3
 8004a88:	f002 fb33 	bl	80070f2 <SDMMC_CmdReadMultiBlock>
 8004a8c:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004a8e:	e009      	b.n	8004aa4 <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2281      	movs	r2, #129	; 0x81
 8004a94:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f002 fb06 	bl	80070ae <SDMMC_CmdReadSingleBlock>
 8004aa2:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8004aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d012      	beq.n	8004ad0 <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a0e      	ldr	r2, [pc, #56]	; (8004ae8 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8004ab0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab8:	431a      	orrs	r2, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e002      	b.n	8004ad6 <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	e000      	b.n	8004ad6 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 8004ad4:	2302      	movs	r3, #2
  }
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3730      	adds	r7, #48	; 0x30
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	080053bf 	.word	0x080053bf
 8004ae4:	08005431 	.word	0x08005431
 8004ae8:	004005ff 	.word	0x004005ff
 8004aec:	4225858c 	.word	0x4225858c

08004af0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b08c      	sub	sp, #48	; 0x30
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	607a      	str	r2, [r7, #4]
 8004afc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d107      	bne.n	8004b18 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e0c1      	b.n	8004c9c <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	f040 80ba 	bne.w	8004c9a <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004b2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	441a      	add	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d907      	bls.n	8004b4a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e0a8      	b.n	8004c9c <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2203      	movs	r2, #3
 8004b4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2200      	movs	r2, #0
 8004b58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f042 021a 	orr.w	r2, r2, #26
 8004b68:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b6e:	4a4d      	ldr	r2, [pc, #308]	; (8004ca4 <HAL_SD_WriteBlocks_DMA+0x1b4>)
 8004b70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b76:	4a4c      	ldr	r2, [pc, #304]	; (8004ca8 <HAL_SD_WriteBlocks_DMA+0x1b8>)
 8004b78:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b7e:	2200      	movs	r2, #0
 8004b80:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d002      	beq.n	8004b90 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8004b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8c:	025b      	lsls	r3, r3, #9
 8004b8e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d90a      	bls.n	8004bac <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	22a0      	movs	r2, #160	; 0xa0
 8004b9a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f002 fae9 	bl	800717a <SDMMC_CmdWriteMultiBlock>
 8004ba8:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004baa:	e009      	b.n	8004bc0 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2290      	movs	r2, #144	; 0x90
 8004bb0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f002 fabc 	bl	8007136 <SDMMC_CmdWriteSingleBlock>
 8004bbe:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d012      	beq.n	8004bec <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a38      	ldr	r2, [pc, #224]	; (8004cac <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8004bcc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd4:	431a      	orrs	r2, r3
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e057      	b.n	8004c9c <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8004bec:	4b30      	ldr	r3, [pc, #192]	; (8004cb0 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8004bee:	2201      	movs	r2, #1
 8004bf0:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf6:	2240      	movs	r2, #64	; 0x40
 8004bf8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c0a:	689a      	ldr	r2, [r3, #8]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	430a      	orrs	r2, r1
 8004c14:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004c1a:	68b9      	ldr	r1, [r7, #8]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	3380      	adds	r3, #128	; 0x80
 8004c22:	461a      	mov	r2, r3
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	025b      	lsls	r3, r3, #9
 8004c28:	089b      	lsrs	r3, r3, #2
 8004c2a:	f7fc ffd5 	bl	8001bd8 <HAL_DMA_Start_IT>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d01a      	beq.n	8004c6a <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f022 021a 	bic.w	r2, r2, #26
 8004c42:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a18      	ldr	r2, [pc, #96]	; (8004cac <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8004c4a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c50:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e018      	b.n	8004c9c <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004c6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c6e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	025b      	lsls	r3, r3, #9
 8004c74:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004c76:	2390      	movs	r3, #144	; 0x90
 8004c78:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004c82:	2301      	movs	r3, #1
 8004c84:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f107 0210 	add.w	r2, r7, #16
 8004c8e:	4611      	mov	r1, r2
 8004c90:	4618      	mov	r0, r3
 8004c92:	f002 f9be 	bl	8007012 <SDIO_ConfigData>

      return HAL_OK;
 8004c96:	2300      	movs	r3, #0
 8004c98:	e000      	b.n	8004c9c <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 8004c9a:	2302      	movs	r3, #2
  }
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3730      	adds	r7, #48	; 0x30
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	08005395 	.word	0x08005395
 8004ca8:	08005431 	.word	0x08005431
 8004cac:	004005ff 	.word	0x004005ff
 8004cb0:	4225858c 	.word	0x4225858c

08004cb4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc0:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d008      	beq.n	8004ce2 <HAL_SD_IRQHandler+0x2e>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f003 0308 	and.w	r3, r3, #8
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d003      	beq.n	8004ce2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 fdec 	bl	80058b8 <SD_Read_IT>
 8004ce0:	e155      	b.n	8004f8e <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f000 808f 	beq.w	8004e10 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004cfa:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	6812      	ldr	r2, [r2, #0]
 8004d06:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8004d0a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8004d0e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f022 0201 	bic.w	r2, r2, #1
 8004d1e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f003 0308 	and.w	r3, r3, #8
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d039      	beq.n	8004d9e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f003 0302 	and.w	r3, r3, #2
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d104      	bne.n	8004d3e <HAL_SD_IRQHandler+0x8a>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f003 0320 	and.w	r3, r3, #32
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d011      	beq.n	8004d62 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4618      	mov	r0, r3
 8004d44:	f002 fa3c 	bl	80071c0 <SDMMC_CmdStopTransfer>
 8004d48:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d008      	beq.n	8004d62 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	431a      	orrs	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f000 f91f 	bl	8004fa0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f240 523a 	movw	r2, #1338	; 0x53a
 8004d6a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f003 0301 	and.w	r3, r3, #1
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d104      	bne.n	8004d8e <HAL_SD_IRQHandler+0xda>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d003      	beq.n	8004d96 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f002 fe5a 	bl	8007a48 <HAL_SD_RxCpltCallback>
 8004d94:	e0fb      	b.n	8004f8e <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f002 fe4c 	bl	8007a34 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004d9c:	e0f7      	b.n	8004f8e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	f000 80f2 	beq.w	8004f8e <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f003 0320 	and.w	r3, r3, #32
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d011      	beq.n	8004dd8 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4618      	mov	r0, r3
 8004dba:	f002 fa01 	bl	80071c0 <SDMMC_CmdStopTransfer>
 8004dbe:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d008      	beq.n	8004dd8 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	431a      	orrs	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f8e4 	bl	8004fa0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	f040 80d5 	bne.w	8004f8e <HAL_SD_IRQHandler+0x2da>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f003 0302 	and.w	r3, r3, #2
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f040 80cf 	bne.w	8004f8e <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f022 0208 	bic.w	r2, r2, #8
 8004dfe:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f002 fe13 	bl	8007a34 <HAL_SD_TxCpltCallback>
}
 8004e0e:	e0be      	b.n	8004f8e <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d008      	beq.n	8004e30 <HAL_SD_IRQHandler+0x17c>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f003 0308 	and.w	r3, r3, #8
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d003      	beq.n	8004e30 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 fd96 	bl	800595a <SD_Write_IT>
 8004e2e:	e0ae      	b.n	8004f8e <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e36:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f000 80a7 	beq.w	8004f8e <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e46:	f003 0302 	and.w	r3, r3, #2
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d005      	beq.n	8004e5a <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e52:	f043 0202 	orr.w	r2, r3, #2
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e60:	f003 0308 	and.w	r3, r3, #8
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d005      	beq.n	8004e74 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6c:	f043 0208 	orr.w	r2, r3, #8
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e7a:	f003 0320 	and.w	r3, r3, #32
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d005      	beq.n	8004e8e <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e86:	f043 0220 	orr.w	r2, r3, #32
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e94:	f003 0310 	and.w	r3, r3, #16
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d005      	beq.n	8004ea8 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea0:	f043 0210 	orr.w	r2, r3, #16
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f240 523a 	movw	r2, #1338	; 0x53a
 8004eb0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004ec0:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f002 f97a 	bl	80071c0 <SDMMC_CmdStopTransfer>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed2:	431a      	orrs	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f003 0308 	and.w	r3, r3, #8
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00a      	beq.n	8004ef8 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 f855 	bl	8004fa0 <HAL_SD_ErrorCallback>
}
 8004ef6:	e04a      	b.n	8004f8e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d045      	beq.n	8004f8e <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f003 0310 	and.w	r3, r3, #16
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d104      	bne.n	8004f16 <HAL_SD_IRQHandler+0x262>
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f003 0320 	and.w	r3, r3, #32
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d011      	beq.n	8004f3a <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f1a:	4a1f      	ldr	r2, [pc, #124]	; (8004f98 <HAL_SD_IRQHandler+0x2e4>)
 8004f1c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7fc ff20 	bl	8001d68 <HAL_DMA_Abort_IT>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d02f      	beq.n	8004f8e <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f32:	4618      	mov	r0, r3
 8004f34:	f000 face 	bl	80054d4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004f38:	e029      	b.n	8004f8e <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f003 0301 	and.w	r3, r3, #1
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d104      	bne.n	8004f4e <HAL_SD_IRQHandler+0x29a>
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f003 0302 	and.w	r3, r3, #2
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d011      	beq.n	8004f72 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f52:	4a12      	ldr	r2, [pc, #72]	; (8004f9c <HAL_SD_IRQHandler+0x2e8>)
 8004f54:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7fc ff04 	bl	8001d68 <HAL_DMA_Abort_IT>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d013      	beq.n	8004f8e <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f000 fae9 	bl	8005542 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004f70:	e00d      	b.n	8004f8e <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f002 fd4a 	bl	8007a20 <HAL_SD_AbortCallback>
}
 8004f8c:	e7ff      	b.n	8004f8e <HAL_SD_IRQHandler+0x2da>
 8004f8e:	bf00      	nop
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	080054d5 	.word	0x080054d5
 8004f9c:	08005543 	.word	0x08005543

08004fa0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004fa8:	bf00      	nop
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fc2:	0f9b      	lsrs	r3, r3, #30
 8004fc4:	b2da      	uxtb	r2, r3
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fce:	0e9b      	lsrs	r3, r3, #26
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	f003 030f 	and.w	r3, r3, #15
 8004fd6:	b2da      	uxtb	r2, r3
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fe0:	0e1b      	lsrs	r3, r3, #24
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	f003 0303 	and.w	r3, r3, #3
 8004fe8:	b2da      	uxtb	r2, r3
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ff2:	0c1b      	lsrs	r3, r3, #16
 8004ff4:	b2da      	uxtb	r2, r3
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ffe:	0a1b      	lsrs	r3, r3, #8
 8005000:	b2da      	uxtb	r2, r3
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800500a:	b2da      	uxtb	r2, r3
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005014:	0d1b      	lsrs	r3, r3, #20
 8005016:	b29a      	uxth	r2, r3
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005020:	0c1b      	lsrs	r3, r3, #16
 8005022:	b2db      	uxtb	r3, r3
 8005024:	f003 030f 	and.w	r3, r3, #15
 8005028:	b2da      	uxtb	r2, r3
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005032:	0bdb      	lsrs	r3, r3, #15
 8005034:	b2db      	uxtb	r3, r3
 8005036:	f003 0301 	and.w	r3, r3, #1
 800503a:	b2da      	uxtb	r2, r3
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005044:	0b9b      	lsrs	r3, r3, #14
 8005046:	b2db      	uxtb	r3, r3
 8005048:	f003 0301 	and.w	r3, r3, #1
 800504c:	b2da      	uxtb	r2, r3
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005056:	0b5b      	lsrs	r3, r3, #13
 8005058:	b2db      	uxtb	r3, r3
 800505a:	f003 0301 	and.w	r3, r3, #1
 800505e:	b2da      	uxtb	r2, r3
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005068:	0b1b      	lsrs	r3, r3, #12
 800506a:	b2db      	uxtb	r3, r3
 800506c:	f003 0301 	and.w	r3, r3, #1
 8005070:	b2da      	uxtb	r2, r3
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	2200      	movs	r2, #0
 800507a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005080:	2b00      	cmp	r3, #0
 8005082:	d163      	bne.n	800514c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005088:	009a      	lsls	r2, r3, #2
 800508a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800508e:	4013      	ands	r3, r2
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005094:	0f92      	lsrs	r2, r2, #30
 8005096:	431a      	orrs	r2, r3
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050a0:	0edb      	lsrs	r3, r3, #27
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	f003 0307 	and.w	r3, r3, #7
 80050a8:	b2da      	uxtb	r2, r3
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050b2:	0e1b      	lsrs	r3, r3, #24
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	f003 0307 	and.w	r3, r3, #7
 80050ba:	b2da      	uxtb	r2, r3
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050c4:	0d5b      	lsrs	r3, r3, #21
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	f003 0307 	and.w	r3, r3, #7
 80050cc:	b2da      	uxtb	r2, r3
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050d6:	0c9b      	lsrs	r3, r3, #18
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	f003 0307 	and.w	r3, r3, #7
 80050de:	b2da      	uxtb	r2, r3
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050e8:	0bdb      	lsrs	r3, r3, #15
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	f003 0307 	and.w	r3, r3, #7
 80050f0:	b2da      	uxtb	r2, r3
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	1c5a      	adds	r2, r3, #1
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	7e1b      	ldrb	r3, [r3, #24]
 8005104:	b2db      	uxtb	r3, r3
 8005106:	f003 0307 	and.w	r3, r3, #7
 800510a:	3302      	adds	r3, #2
 800510c:	2201      	movs	r2, #1
 800510e:	fa02 f303 	lsl.w	r3, r2, r3
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005116:	fb03 f202 	mul.w	r2, r3, r2
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	7a1b      	ldrb	r3, [r3, #8]
 8005122:	b2db      	uxtb	r3, r3
 8005124:	f003 030f 	and.w	r3, r3, #15
 8005128:	2201      	movs	r2, #1
 800512a:	409a      	lsls	r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005138:	0a52      	lsrs	r2, r2, #9
 800513a:	fb03 f202 	mul.w	r2, r3, r2
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005148:	661a      	str	r2, [r3, #96]	; 0x60
 800514a:	e031      	b.n	80051b0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005150:	2b01      	cmp	r3, #1
 8005152:	d11d      	bne.n	8005190 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005158:	041b      	lsls	r3, r3, #16
 800515a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005162:	0c1b      	lsrs	r3, r3, #16
 8005164:	431a      	orrs	r2, r3
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	3301      	adds	r3, #1
 8005170:	029a      	lsls	r2, r3, #10
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005184:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	661a      	str	r2, [r3, #96]	; 0x60
 800518e:	e00f      	b.n	80051b0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a58      	ldr	r2, [pc, #352]	; (80052f8 <HAL_SD_GetCardCSD+0x344>)
 8005196:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e09d      	b.n	80052ec <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051b4:	0b9b      	lsrs	r3, r3, #14
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	f003 0301 	and.w	r3, r3, #1
 80051bc:	b2da      	uxtb	r2, r3
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051c6:	09db      	lsrs	r3, r3, #7
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051ce:	b2da      	uxtb	r2, r3
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051de:	b2da      	uxtb	r2, r3
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e8:	0fdb      	lsrs	r3, r3, #31
 80051ea:	b2da      	uxtb	r2, r3
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f4:	0f5b      	lsrs	r3, r3, #29
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	f003 0303 	and.w	r3, r3, #3
 80051fc:	b2da      	uxtb	r2, r3
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005206:	0e9b      	lsrs	r3, r3, #26
 8005208:	b2db      	uxtb	r3, r3
 800520a:	f003 0307 	and.w	r3, r3, #7
 800520e:	b2da      	uxtb	r2, r3
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005218:	0d9b      	lsrs	r3, r3, #22
 800521a:	b2db      	uxtb	r3, r3
 800521c:	f003 030f 	and.w	r3, r3, #15
 8005220:	b2da      	uxtb	r2, r3
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800522a:	0d5b      	lsrs	r3, r3, #21
 800522c:	b2db      	uxtb	r3, r3
 800522e:	f003 0301 	and.w	r3, r3, #1
 8005232:	b2da      	uxtb	r2, r3
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005246:	0c1b      	lsrs	r3, r3, #16
 8005248:	b2db      	uxtb	r3, r3
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	b2da      	uxtb	r2, r3
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800525a:	0bdb      	lsrs	r3, r3, #15
 800525c:	b2db      	uxtb	r3, r3
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	b2da      	uxtb	r2, r3
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800526e:	0b9b      	lsrs	r3, r3, #14
 8005270:	b2db      	uxtb	r3, r3
 8005272:	f003 0301 	and.w	r3, r3, #1
 8005276:	b2da      	uxtb	r2, r3
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005282:	0b5b      	lsrs	r3, r3, #13
 8005284:	b2db      	uxtb	r3, r3
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	b2da      	uxtb	r2, r3
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005296:	0b1b      	lsrs	r3, r3, #12
 8005298:	b2db      	uxtb	r3, r3
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	b2da      	uxtb	r2, r3
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052aa:	0a9b      	lsrs	r3, r3, #10
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	f003 0303 	and.w	r3, r3, #3
 80052b2:	b2da      	uxtb	r2, r3
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052be:	0a1b      	lsrs	r3, r3, #8
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	f003 0303 	and.w	r3, r3, #3
 80052c6:	b2da      	uxtb	r2, r3
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052d2:	085b      	lsrs	r3, r3, #1
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052da:	b2da      	uxtb	r2, r3
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr
 80052f8:	004005ff 	.word	0x004005ff

080052fc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b086      	sub	sp, #24
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800535c:	2300      	movs	r3, #0
 800535e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005360:	f107 030c 	add.w	r3, r7, #12
 8005364:	4619      	mov	r1, r3
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 fa7e 	bl	8005868 <SD_SendStatus>
 800536c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d005      	beq.n	8005380 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	431a      	orrs	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	0a5b      	lsrs	r3, r3, #9
 8005384:	f003 030f 	and.w	r3, r3, #15
 8005388:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800538a:	693b      	ldr	r3, [r7, #16]
}
 800538c:	4618      	mov	r0, r3
 800538e:	3718      	adds	r7, #24
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053b0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80053b2:	bf00      	nop
 80053b4:	3714      	adds	r7, #20
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr

080053be <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80053be:	b580      	push	{r7, lr}
 80053c0:	b084      	sub	sp, #16
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ca:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d0:	2b82      	cmp	r3, #130	; 0x82
 80053d2:	d111      	bne.n	80053f8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4618      	mov	r0, r3
 80053da:	f001 fef1 	bl	80071c0 <SDMMC_CmdStopTransfer>
 80053de:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d008      	beq.n	80053f8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	431a      	orrs	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80053f2:	68f8      	ldr	r0, [r7, #12]
 80053f4:	f7ff fdd4 	bl	8004fa0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f022 0208 	bic.w	r2, r2, #8
 8005406:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f240 523a 	movw	r2, #1338	; 0x53a
 8005410:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	f002 fb11 	bl	8007a48 <HAL_SD_RxCpltCallback>
#endif
}
 8005426:	bf00      	nop
 8005428:	3710      	adds	r7, #16
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
	...

08005430 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b086      	sub	sp, #24
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f7fc fe3e 	bl	80020c0 <HAL_DMA_GetError>
 8005444:	4603      	mov	r3, r0
 8005446:	2b02      	cmp	r3, #2
 8005448:	d03e      	beq.n	80054c8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005450:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005458:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	2b01      	cmp	r3, #1
 800545e:	d002      	beq.n	8005466 <SD_DMAError+0x36>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2b01      	cmp	r3, #1
 8005464:	d12d      	bne.n	80054c2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a19      	ldr	r2, [pc, #100]	; (80054d0 <SD_DMAError+0xa0>)
 800546c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800547c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005482:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800548a:	6978      	ldr	r0, [r7, #20]
 800548c:	f7ff ff62 	bl	8005354 <HAL_SD_GetCardState>
 8005490:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	2b06      	cmp	r3, #6
 8005496:	d002      	beq.n	800549e <SD_DMAError+0x6e>
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	2b05      	cmp	r3, #5
 800549c:	d10a      	bne.n	80054b4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4618      	mov	r0, r3
 80054a4:	f001 fe8c 	bl	80071c0 <SDMMC_CmdStopTransfer>
 80054a8:	4602      	mov	r2, r0
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ae:	431a      	orrs	r2, r3
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	2200      	movs	r2, #0
 80054c0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80054c2:	6978      	ldr	r0, [r7, #20]
 80054c4:	f7ff fd6c 	bl	8004fa0 <HAL_SD_ErrorCallback>
#endif
  }
}
 80054c8:	bf00      	nop
 80054ca:	3718      	adds	r7, #24
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	004005ff 	.word	0x004005ff

080054d4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f240 523a 	movw	r2, #1338	; 0x53a
 80054ea:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80054ec:	68f8      	ldr	r0, [r7, #12]
 80054ee:	f7ff ff31 	bl	8005354 <HAL_SD_GetCardState>
 80054f2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	2b06      	cmp	r3, #6
 8005506:	d002      	beq.n	800550e <SD_DMATxAbort+0x3a>
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	2b05      	cmp	r3, #5
 800550c:	d10a      	bne.n	8005524 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4618      	mov	r0, r3
 8005514:	f001 fe54 	bl	80071c0 <SDMMC_CmdStopTransfer>
 8005518:	4602      	mov	r2, r0
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551e:	431a      	orrs	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005528:	2b00      	cmp	r3, #0
 800552a:	d103      	bne.n	8005534 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f002 fa77 	bl	8007a20 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005532:	e002      	b.n	800553a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005534:	68f8      	ldr	r0, [r7, #12]
 8005536:	f7ff fd33 	bl	8004fa0 <HAL_SD_ErrorCallback>
}
 800553a:	bf00      	nop
 800553c:	3710      	adds	r7, #16
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}

08005542 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8005542:	b580      	push	{r7, lr}
 8005544:	b084      	sub	sp, #16
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f240 523a 	movw	r2, #1338	; 0x53a
 8005558:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800555a:	68f8      	ldr	r0, [r7, #12]
 800555c:	f7ff fefa 	bl	8005354 <HAL_SD_GetCardState>
 8005560:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	2b06      	cmp	r3, #6
 8005574:	d002      	beq.n	800557c <SD_DMARxAbort+0x3a>
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	2b05      	cmp	r3, #5
 800557a:	d10a      	bne.n	8005592 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4618      	mov	r0, r3
 8005582:	f001 fe1d 	bl	80071c0 <SDMMC_CmdStopTransfer>
 8005586:	4602      	mov	r2, r0
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558c:	431a      	orrs	r2, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005596:	2b00      	cmp	r3, #0
 8005598:	d103      	bne.n	80055a2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800559a:	68f8      	ldr	r0, [r7, #12]
 800559c:	f002 fa40 	bl	8007a20 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80055a0:	e002      	b.n	80055a8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80055a2:	68f8      	ldr	r0, [r7, #12]
 80055a4:	f7ff fcfc 	bl	8004fa0 <HAL_SD_ErrorCallback>
}
 80055a8:	bf00      	nop
 80055aa:	3710      	adds	r7, #16
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80055b0:	b5b0      	push	{r4, r5, r7, lr}
 80055b2:	b094      	sub	sp, #80	; 0x50
 80055b4:	af04      	add	r7, sp, #16
 80055b6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80055b8:	2301      	movs	r3, #1
 80055ba:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4618      	mov	r0, r3
 80055c2:	f001 fcce 	bl	8006f62 <SDIO_GetPowerState>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d102      	bne.n	80055d2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80055cc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80055d0:	e0b8      	b.n	8005744 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055d6:	2b03      	cmp	r3, #3
 80055d8:	d02f      	beq.n	800563a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4618      	mov	r0, r3
 80055e0:	f001 feb5 	bl	800734e <SDMMC_CmdSendCID>
 80055e4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80055e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d001      	beq.n	80055f0 <SD_InitCard+0x40>
    {
      return errorstate;
 80055ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ee:	e0a9      	b.n	8005744 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2100      	movs	r1, #0
 80055f6:	4618      	mov	r0, r3
 80055f8:	f001 fcf8 	bl	8006fec <SDIO_GetResponse>
 80055fc:	4602      	mov	r2, r0
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2104      	movs	r1, #4
 8005608:	4618      	mov	r0, r3
 800560a:	f001 fcef 	bl	8006fec <SDIO_GetResponse>
 800560e:	4602      	mov	r2, r0
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2108      	movs	r1, #8
 800561a:	4618      	mov	r0, r3
 800561c:	f001 fce6 	bl	8006fec <SDIO_GetResponse>
 8005620:	4602      	mov	r2, r0
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	210c      	movs	r1, #12
 800562c:	4618      	mov	r0, r3
 800562e:	f001 fcdd 	bl	8006fec <SDIO_GetResponse>
 8005632:	4602      	mov	r2, r0
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800563e:	2b03      	cmp	r3, #3
 8005640:	d00d      	beq.n	800565e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f107 020e 	add.w	r2, r7, #14
 800564a:	4611      	mov	r1, r2
 800564c:	4618      	mov	r0, r3
 800564e:	f001 febb 	bl	80073c8 <SDMMC_CmdSetRelAdd>
 8005652:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005656:	2b00      	cmp	r3, #0
 8005658:	d001      	beq.n	800565e <SD_InitCard+0xae>
    {
      return errorstate;
 800565a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800565c:	e072      	b.n	8005744 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005662:	2b03      	cmp	r3, #3
 8005664:	d036      	beq.n	80056d4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005666:	89fb      	ldrh	r3, [r7, #14]
 8005668:	461a      	mov	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005676:	041b      	lsls	r3, r3, #16
 8005678:	4619      	mov	r1, r3
 800567a:	4610      	mov	r0, r2
 800567c:	f001 fe85 	bl	800738a <SDMMC_CmdSendCSD>
 8005680:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005684:	2b00      	cmp	r3, #0
 8005686:	d001      	beq.n	800568c <SD_InitCard+0xdc>
    {
      return errorstate;
 8005688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800568a:	e05b      	b.n	8005744 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2100      	movs	r1, #0
 8005692:	4618      	mov	r0, r3
 8005694:	f001 fcaa 	bl	8006fec <SDIO_GetResponse>
 8005698:	4602      	mov	r2, r0
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2104      	movs	r1, #4
 80056a4:	4618      	mov	r0, r3
 80056a6:	f001 fca1 	bl	8006fec <SDIO_GetResponse>
 80056aa:	4602      	mov	r2, r0
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2108      	movs	r1, #8
 80056b6:	4618      	mov	r0, r3
 80056b8:	f001 fc98 	bl	8006fec <SDIO_GetResponse>
 80056bc:	4602      	mov	r2, r0
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	210c      	movs	r1, #12
 80056c8:	4618      	mov	r0, r3
 80056ca:	f001 fc8f 	bl	8006fec <SDIO_GetResponse>
 80056ce:	4602      	mov	r2, r0
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2104      	movs	r1, #4
 80056da:	4618      	mov	r0, r3
 80056dc:	f001 fc86 	bl	8006fec <SDIO_GetResponse>
 80056e0:	4603      	mov	r3, r0
 80056e2:	0d1a      	lsrs	r2, r3, #20
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80056e8:	f107 0310 	add.w	r3, r7, #16
 80056ec:	4619      	mov	r1, r3
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f7ff fc60 	bl	8004fb4 <HAL_SD_GetCardCSD>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d002      	beq.n	8005700 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80056fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80056fe:	e021      	b.n	8005744 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6819      	ldr	r1, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005708:	041b      	lsls	r3, r3, #16
 800570a:	2200      	movs	r2, #0
 800570c:	461c      	mov	r4, r3
 800570e:	4615      	mov	r5, r2
 8005710:	4622      	mov	r2, r4
 8005712:	462b      	mov	r3, r5
 8005714:	4608      	mov	r0, r1
 8005716:	f001 fd75 	bl	8007204 <SDMMC_CmdSelDesel>
 800571a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800571c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800571e:	2b00      	cmp	r3, #0
 8005720:	d001      	beq.n	8005726 <SD_InitCard+0x176>
  {
    return errorstate;
 8005722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005724:	e00e      	b.n	8005744 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681d      	ldr	r5, [r3, #0]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	466c      	mov	r4, sp
 800572e:	f103 0210 	add.w	r2, r3, #16
 8005732:	ca07      	ldmia	r2, {r0, r1, r2}
 8005734:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005738:	3304      	adds	r3, #4
 800573a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800573c:	4628      	mov	r0, r5
 800573e:	f001 fbb9 	bl	8006eb4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3740      	adds	r7, #64	; 0x40
 8005748:	46bd      	mov	sp, r7
 800574a:	bdb0      	pop	{r4, r5, r7, pc}

0800574c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b086      	sub	sp, #24
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005754:	2300      	movs	r3, #0
 8005756:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005758:	2300      	movs	r3, #0
 800575a:	617b      	str	r3, [r7, #20]
 800575c:	2300      	movs	r3, #0
 800575e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4618      	mov	r0, r3
 8005766:	f001 fd70 	bl	800724a <SDMMC_CmdGoIdleState>
 800576a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d001      	beq.n	8005776 <SD_PowerON+0x2a>
  {
    return errorstate;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	e072      	b.n	800585c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4618      	mov	r0, r3
 800577c:	f001 fd83 	bl	8007286 <SDMMC_CmdOperCond>
 8005780:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00d      	beq.n	80057a4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4618      	mov	r0, r3
 8005794:	f001 fd59 	bl	800724a <SDMMC_CmdGoIdleState>
 8005798:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d004      	beq.n	80057aa <SD_PowerON+0x5e>
    {
      return errorstate;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	e05b      	b.n	800585c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d137      	bne.n	8005822 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2100      	movs	r1, #0
 80057b8:	4618      	mov	r0, r3
 80057ba:	f001 fd83 	bl	80072c4 <SDMMC_CmdAppCommand>
 80057be:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d02d      	beq.n	8005822 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80057c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80057ca:	e047      	b.n	800585c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2100      	movs	r1, #0
 80057d2:	4618      	mov	r0, r3
 80057d4:	f001 fd76 	bl	80072c4 <SDMMC_CmdAppCommand>
 80057d8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d001      	beq.n	80057e4 <SD_PowerON+0x98>
    {
      return errorstate;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	e03b      	b.n	800585c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	491e      	ldr	r1, [pc, #120]	; (8005864 <SD_PowerON+0x118>)
 80057ea:	4618      	mov	r0, r3
 80057ec:	f001 fd8c 	bl	8007308 <SDMMC_CmdAppOperCommand>
 80057f0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d002      	beq.n	80057fe <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80057f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80057fc:	e02e      	b.n	800585c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2100      	movs	r1, #0
 8005804:	4618      	mov	r0, r3
 8005806:	f001 fbf1 	bl	8006fec <SDIO_GetResponse>
 800580a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	0fdb      	lsrs	r3, r3, #31
 8005810:	2b01      	cmp	r3, #1
 8005812:	d101      	bne.n	8005818 <SD_PowerON+0xcc>
 8005814:	2301      	movs	r3, #1
 8005816:	e000      	b.n	800581a <SD_PowerON+0xce>
 8005818:	2300      	movs	r3, #0
 800581a:	613b      	str	r3, [r7, #16]

    count++;
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	3301      	adds	r3, #1
 8005820:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005828:	4293      	cmp	r3, r2
 800582a:	d802      	bhi.n	8005832 <SD_PowerON+0xe6>
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d0cc      	beq.n	80057cc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005838:	4293      	cmp	r3, r2
 800583a:	d902      	bls.n	8005842 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800583c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005840:	e00c      	b.n	800585c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d003      	beq.n	8005854 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	645a      	str	r2, [r3, #68]	; 0x44
 8005852:	e002      	b.n	800585a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	3718      	adds	r7, #24
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	c1100000 	.word	0xc1100000

08005868 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d102      	bne.n	800587e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005878:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800587c:	e018      	b.n	80058b0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005886:	041b      	lsls	r3, r3, #16
 8005888:	4619      	mov	r1, r3
 800588a:	4610      	mov	r0, r2
 800588c:	f001 fdbd 	bl	800740a <SDMMC_CmdSendStatus>
 8005890:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d001      	beq.n	800589c <SD_SendStatus+0x34>
  {
    return errorstate;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	e009      	b.n	80058b0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2100      	movs	r1, #0
 80058a2:	4618      	mov	r0, r3
 80058a4:	f001 fba2 	bl	8006fec <SDIO_GetResponse>
 80058a8:	4602      	mov	r2, r0
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3710      	adds	r7, #16
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b086      	sub	sp, #24
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ca:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d03f      	beq.n	8005952 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80058d2:	2300      	movs	r3, #0
 80058d4:	617b      	str	r3, [r7, #20]
 80058d6:	e033      	b.n	8005940 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4618      	mov	r0, r3
 80058de:	f001 fb14 	bl	8006f0a <SDIO_ReadFIFO>
 80058e2:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	b2da      	uxtb	r2, r3
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	701a      	strb	r2, [r3, #0]
      tmp++;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	3301      	adds	r3, #1
 80058f0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	3b01      	subs	r3, #1
 80058f6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	0a1b      	lsrs	r3, r3, #8
 80058fc:	b2da      	uxtb	r2, r3
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	3301      	adds	r3, #1
 8005906:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	3b01      	subs	r3, #1
 800590c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	0c1b      	lsrs	r3, r3, #16
 8005912:	b2da      	uxtb	r2, r3
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	3301      	adds	r3, #1
 800591c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	3b01      	subs	r3, #1
 8005922:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	0e1b      	lsrs	r3, r3, #24
 8005928:	b2da      	uxtb	r2, r3
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	3301      	adds	r3, #1
 8005932:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	3b01      	subs	r3, #1
 8005938:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	3301      	adds	r3, #1
 800593e:	617b      	str	r3, [r7, #20]
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	2b07      	cmp	r3, #7
 8005944:	d9c8      	bls.n	80058d8 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8005952:	bf00      	nop
 8005954:	3718      	adds	r7, #24
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}

0800595a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800595a:	b580      	push	{r7, lr}
 800595c:	b086      	sub	sp, #24
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a1b      	ldr	r3, [r3, #32]
 8005966:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d043      	beq.n	80059fc <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8005974:	2300      	movs	r3, #0
 8005976:	617b      	str	r3, [r7, #20]
 8005978:	e037      	b.n	80059ea <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	3301      	adds	r3, #1
 8005984:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	3b01      	subs	r3, #1
 800598a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	021a      	lsls	r2, r3, #8
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	4313      	orrs	r3, r2
 8005996:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	3301      	adds	r3, #1
 800599c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	3b01      	subs	r3, #1
 80059a2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	041a      	lsls	r2, r3, #16
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	60bb      	str	r3, [r7, #8]
      tmp++;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	3301      	adds	r3, #1
 80059b4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	3b01      	subs	r3, #1
 80059ba:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	061a      	lsls	r2, r3, #24
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	3301      	adds	r3, #1
 80059cc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	3b01      	subs	r3, #1
 80059d2:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f107 0208 	add.w	r2, r7, #8
 80059dc:	4611      	mov	r1, r2
 80059de:	4618      	mov	r0, r3
 80059e0:	f001 faa0 	bl	8006f24 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	3301      	adds	r3, #1
 80059e8:	617b      	str	r3, [r7, #20]
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	2b07      	cmp	r3, #7
 80059ee:	d9c4      	bls.n	800597a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	693a      	ldr	r2, [r7, #16]
 80059fa:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80059fc:	bf00      	nop
 80059fe:	3718      	adds	r7, #24
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d101      	bne.n	8005a16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e041      	b.n	8005a9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d106      	bne.n	8005a30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f839 	bl	8005aa2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2202      	movs	r2, #2
 8005a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	3304      	adds	r3, #4
 8005a40:	4619      	mov	r1, r3
 8005a42:	4610      	mov	r0, r2
 8005a44:	f000 f9d8 	bl	8005df8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3708      	adds	r7, #8
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b083      	sub	sp, #12
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005aaa:	bf00      	nop
 8005aac:	370c      	adds	r7, #12
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
	...

08005ab8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d001      	beq.n	8005ad0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e04e      	b.n	8005b6e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2202      	movs	r2, #2
 8005ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68da      	ldr	r2, [r3, #12]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f042 0201 	orr.w	r2, r2, #1
 8005ae6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a23      	ldr	r2, [pc, #140]	; (8005b7c <HAL_TIM_Base_Start_IT+0xc4>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d022      	beq.n	8005b38 <HAL_TIM_Base_Start_IT+0x80>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005afa:	d01d      	beq.n	8005b38 <HAL_TIM_Base_Start_IT+0x80>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a1f      	ldr	r2, [pc, #124]	; (8005b80 <HAL_TIM_Base_Start_IT+0xc8>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d018      	beq.n	8005b38 <HAL_TIM_Base_Start_IT+0x80>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a1e      	ldr	r2, [pc, #120]	; (8005b84 <HAL_TIM_Base_Start_IT+0xcc>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d013      	beq.n	8005b38 <HAL_TIM_Base_Start_IT+0x80>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a1c      	ldr	r2, [pc, #112]	; (8005b88 <HAL_TIM_Base_Start_IT+0xd0>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d00e      	beq.n	8005b38 <HAL_TIM_Base_Start_IT+0x80>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a1b      	ldr	r2, [pc, #108]	; (8005b8c <HAL_TIM_Base_Start_IT+0xd4>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d009      	beq.n	8005b38 <HAL_TIM_Base_Start_IT+0x80>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a19      	ldr	r2, [pc, #100]	; (8005b90 <HAL_TIM_Base_Start_IT+0xd8>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d004      	beq.n	8005b38 <HAL_TIM_Base_Start_IT+0x80>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a18      	ldr	r2, [pc, #96]	; (8005b94 <HAL_TIM_Base_Start_IT+0xdc>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d111      	bne.n	8005b5c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	f003 0307 	and.w	r3, r3, #7
 8005b42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2b06      	cmp	r3, #6
 8005b48:	d010      	beq.n	8005b6c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f042 0201 	orr.w	r2, r2, #1
 8005b58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b5a:	e007      	b.n	8005b6c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f042 0201 	orr.w	r2, r2, #1
 8005b6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3714      	adds	r7, #20
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop
 8005b7c:	40010000 	.word	0x40010000
 8005b80:	40000400 	.word	0x40000400
 8005b84:	40000800 	.word	0x40000800
 8005b88:	40000c00 	.word	0x40000c00
 8005b8c:	40010400 	.word	0x40010400
 8005b90:	40014000 	.word	0x40014000
 8005b94:	40001800 	.word	0x40001800

08005b98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	f003 0302 	and.w	r3, r3, #2
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d122      	bne.n	8005bf4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	f003 0302 	and.w	r3, r3, #2
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	d11b      	bne.n	8005bf4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f06f 0202 	mvn.w	r2, #2
 8005bc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	699b      	ldr	r3, [r3, #24]
 8005bd2:	f003 0303 	and.w	r3, r3, #3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d003      	beq.n	8005be2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 f8ee 	bl	8005dbc <HAL_TIM_IC_CaptureCallback>
 8005be0:	e005      	b.n	8005bee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 f8e0 	bl	8005da8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 f8f1 	bl	8005dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	f003 0304 	and.w	r3, r3, #4
 8005bfe:	2b04      	cmp	r3, #4
 8005c00:	d122      	bne.n	8005c48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	f003 0304 	and.w	r3, r3, #4
 8005c0c:	2b04      	cmp	r3, #4
 8005c0e:	d11b      	bne.n	8005c48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f06f 0204 	mvn.w	r2, #4
 8005c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2202      	movs	r2, #2
 8005c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d003      	beq.n	8005c36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 f8c4 	bl	8005dbc <HAL_TIM_IC_CaptureCallback>
 8005c34:	e005      	b.n	8005c42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 f8b6 	bl	8005da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 f8c7 	bl	8005dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	f003 0308 	and.w	r3, r3, #8
 8005c52:	2b08      	cmp	r3, #8
 8005c54:	d122      	bne.n	8005c9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	f003 0308 	and.w	r3, r3, #8
 8005c60:	2b08      	cmp	r3, #8
 8005c62:	d11b      	bne.n	8005c9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f06f 0208 	mvn.w	r2, #8
 8005c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2204      	movs	r2, #4
 8005c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	69db      	ldr	r3, [r3, #28]
 8005c7a:	f003 0303 	and.w	r3, r3, #3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d003      	beq.n	8005c8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 f89a 	bl	8005dbc <HAL_TIM_IC_CaptureCallback>
 8005c88:	e005      	b.n	8005c96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 f88c 	bl	8005da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 f89d 	bl	8005dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	f003 0310 	and.w	r3, r3, #16
 8005ca6:	2b10      	cmp	r3, #16
 8005ca8:	d122      	bne.n	8005cf0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	f003 0310 	and.w	r3, r3, #16
 8005cb4:	2b10      	cmp	r3, #16
 8005cb6:	d11b      	bne.n	8005cf0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f06f 0210 	mvn.w	r2, #16
 8005cc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2208      	movs	r2, #8
 8005cc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	69db      	ldr	r3, [r3, #28]
 8005cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d003      	beq.n	8005cde <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 f870 	bl	8005dbc <HAL_TIM_IC_CaptureCallback>
 8005cdc:	e005      	b.n	8005cea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 f862 	bl	8005da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 f873 	bl	8005dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	f003 0301 	and.w	r3, r3, #1
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d10e      	bne.n	8005d1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	f003 0301 	and.w	r3, r3, #1
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d107      	bne.n	8005d1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f06f 0201 	mvn.w	r2, #1
 8005d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f7fb f958 	bl	8000fcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d26:	2b80      	cmp	r3, #128	; 0x80
 8005d28:	d10e      	bne.n	8005d48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d34:	2b80      	cmp	r3, #128	; 0x80
 8005d36:	d107      	bne.n	8005d48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 f902 	bl	8005f4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d52:	2b40      	cmp	r3, #64	; 0x40
 8005d54:	d10e      	bne.n	8005d74 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d60:	2b40      	cmp	r3, #64	; 0x40
 8005d62:	d107      	bne.n	8005d74 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 f838 	bl	8005de4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	f003 0320 	and.w	r3, r3, #32
 8005d7e:	2b20      	cmp	r3, #32
 8005d80:	d10e      	bne.n	8005da0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	f003 0320 	and.w	r3, r3, #32
 8005d8c:	2b20      	cmp	r3, #32
 8005d8e:	d107      	bne.n	8005da0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f06f 0220 	mvn.w	r2, #32
 8005d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 f8cc 	bl	8005f38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005da0:	bf00      	nop
 8005da2:	3708      	adds	r7, #8
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005db0:	bf00      	nop
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005dc4:	bf00      	nop
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005dd8:	bf00      	nop
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005dec:	bf00      	nop
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a40      	ldr	r2, [pc, #256]	; (8005f0c <TIM_Base_SetConfig+0x114>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d013      	beq.n	8005e38 <TIM_Base_SetConfig+0x40>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e16:	d00f      	beq.n	8005e38 <TIM_Base_SetConfig+0x40>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a3d      	ldr	r2, [pc, #244]	; (8005f10 <TIM_Base_SetConfig+0x118>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d00b      	beq.n	8005e38 <TIM_Base_SetConfig+0x40>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a3c      	ldr	r2, [pc, #240]	; (8005f14 <TIM_Base_SetConfig+0x11c>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d007      	beq.n	8005e38 <TIM_Base_SetConfig+0x40>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a3b      	ldr	r2, [pc, #236]	; (8005f18 <TIM_Base_SetConfig+0x120>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d003      	beq.n	8005e38 <TIM_Base_SetConfig+0x40>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a3a      	ldr	r2, [pc, #232]	; (8005f1c <TIM_Base_SetConfig+0x124>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d108      	bne.n	8005e4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	68fa      	ldr	r2, [r7, #12]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a2f      	ldr	r2, [pc, #188]	; (8005f0c <TIM_Base_SetConfig+0x114>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d02b      	beq.n	8005eaa <TIM_Base_SetConfig+0xb2>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e58:	d027      	beq.n	8005eaa <TIM_Base_SetConfig+0xb2>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a2c      	ldr	r2, [pc, #176]	; (8005f10 <TIM_Base_SetConfig+0x118>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d023      	beq.n	8005eaa <TIM_Base_SetConfig+0xb2>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a2b      	ldr	r2, [pc, #172]	; (8005f14 <TIM_Base_SetConfig+0x11c>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d01f      	beq.n	8005eaa <TIM_Base_SetConfig+0xb2>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a2a      	ldr	r2, [pc, #168]	; (8005f18 <TIM_Base_SetConfig+0x120>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d01b      	beq.n	8005eaa <TIM_Base_SetConfig+0xb2>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a29      	ldr	r2, [pc, #164]	; (8005f1c <TIM_Base_SetConfig+0x124>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d017      	beq.n	8005eaa <TIM_Base_SetConfig+0xb2>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a28      	ldr	r2, [pc, #160]	; (8005f20 <TIM_Base_SetConfig+0x128>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d013      	beq.n	8005eaa <TIM_Base_SetConfig+0xb2>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a27      	ldr	r2, [pc, #156]	; (8005f24 <TIM_Base_SetConfig+0x12c>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d00f      	beq.n	8005eaa <TIM_Base_SetConfig+0xb2>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a26      	ldr	r2, [pc, #152]	; (8005f28 <TIM_Base_SetConfig+0x130>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d00b      	beq.n	8005eaa <TIM_Base_SetConfig+0xb2>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a25      	ldr	r2, [pc, #148]	; (8005f2c <TIM_Base_SetConfig+0x134>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d007      	beq.n	8005eaa <TIM_Base_SetConfig+0xb2>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a24      	ldr	r2, [pc, #144]	; (8005f30 <TIM_Base_SetConfig+0x138>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d003      	beq.n	8005eaa <TIM_Base_SetConfig+0xb2>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a23      	ldr	r2, [pc, #140]	; (8005f34 <TIM_Base_SetConfig+0x13c>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d108      	bne.n	8005ebc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	695b      	ldr	r3, [r3, #20]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	689a      	ldr	r2, [r3, #8]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4a0a      	ldr	r2, [pc, #40]	; (8005f0c <TIM_Base_SetConfig+0x114>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d003      	beq.n	8005ef0 <TIM_Base_SetConfig+0xf8>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a0c      	ldr	r2, [pc, #48]	; (8005f1c <TIM_Base_SetConfig+0x124>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d103      	bne.n	8005ef8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	691a      	ldr	r2, [r3, #16]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	615a      	str	r2, [r3, #20]
}
 8005efe:	bf00      	nop
 8005f00:	3714      	adds	r7, #20
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	40010000 	.word	0x40010000
 8005f10:	40000400 	.word	0x40000400
 8005f14:	40000800 	.word	0x40000800
 8005f18:	40000c00 	.word	0x40000c00
 8005f1c:	40010400 	.word	0x40010400
 8005f20:	40014000 	.word	0x40014000
 8005f24:	40014400 	.word	0x40014400
 8005f28:	40014800 	.word	0x40014800
 8005f2c:	40001800 	.word	0x40001800
 8005f30:	40001c00 	.word	0x40001c00
 8005f34:	40002000 	.word	0x40002000

08005f38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f40:	bf00      	nop
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f54:	bf00      	nop
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d101      	bne.n	8005f72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e03f      	b.n	8005ff2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d106      	bne.n	8005f8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f7fb fa82 	bl	8001490 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2224      	movs	r2, #36	; 0x24
 8005f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68da      	ldr	r2, [r3, #12]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fa2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 fd11 	bl	80069cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	691a      	ldr	r2, [r3, #16]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	695a      	ldr	r2, [r3, #20]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68da      	ldr	r2, [r3, #12]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2220      	movs	r2, #32
 8005fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2220      	movs	r2, #32
 8005fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3708      	adds	r7, #8
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b08c      	sub	sp, #48	; 0x30
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	60f8      	str	r0, [r7, #12]
 8006002:	60b9      	str	r1, [r7, #8]
 8006004:	4613      	mov	r3, r2
 8006006:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800600e:	b2db      	uxtb	r3, r3
 8006010:	2b20      	cmp	r3, #32
 8006012:	d152      	bne.n	80060ba <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d002      	beq.n	8006020 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 800601a:	88fb      	ldrh	r3, [r7, #6]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d101      	bne.n	8006024 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e04b      	b.n	80060bc <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
    }

    __HAL_LOCK(huart);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800602a:	2b01      	cmp	r3, #1
 800602c:	d101      	bne.n	8006032 <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 800602e:	2302      	movs	r3, #2
 8006030:	e044      	b.n	80060bc <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2201      	movs	r2, #1
 8006036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2201      	movs	r2, #1
 800603e:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8006040:	88fb      	ldrh	r3, [r7, #6]
 8006042:	461a      	mov	r2, r3
 8006044:	68b9      	ldr	r1, [r7, #8]
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	f000 fae8 	bl	800661c <UART_Start_Receive_IT>
 800604c:	4603      	mov	r3, r0
 800604e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006052:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006056:	2b00      	cmp	r3, #0
 8006058:	d12c      	bne.n	80060b4 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800605e:	2b01      	cmp	r3, #1
 8006060:	d125      	bne.n	80060ae <HAL_UARTEx_ReceiveToIdle_IT+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006062:	2300      	movs	r3, #0
 8006064:	613b      	str	r3, [r7, #16]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	613b      	str	r3, [r7, #16]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	613b      	str	r3, [r7, #16]
 8006076:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	330c      	adds	r3, #12
 800607e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	e853 3f00 	ldrex	r3, [r3]
 8006086:	617b      	str	r3, [r7, #20]
   return(result);
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	f043 0310 	orr.w	r3, r3, #16
 800608e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	330c      	adds	r3, #12
 8006096:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006098:	627a      	str	r2, [r7, #36]	; 0x24
 800609a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609c:	6a39      	ldr	r1, [r7, #32]
 800609e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060a0:	e841 2300 	strex	r3, r2, [r1]
 80060a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d1e5      	bne.n	8006078 <HAL_UARTEx_ReceiveToIdle_IT+0x7e>
 80060ac:	e002      	b.n	80060b4 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80060b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80060b8:	e000      	b.n	80060bc <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80060ba:	2302      	movs	r3, #2
  }
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3730      	adds	r7, #48	; 0x30
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b0ba      	sub	sp, #232	; 0xe8
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	695b      	ldr	r3, [r3, #20]
 80060e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80060ea:	2300      	movs	r3, #0
 80060ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80060f0:	2300      	movs	r3, #0
 80060f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80060f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060fa:	f003 030f 	and.w	r3, r3, #15
 80060fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006102:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006106:	2b00      	cmp	r3, #0
 8006108:	d10f      	bne.n	800612a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800610a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800610e:	f003 0320 	and.w	r3, r3, #32
 8006112:	2b00      	cmp	r3, #0
 8006114:	d009      	beq.n	800612a <HAL_UART_IRQHandler+0x66>
 8006116:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800611a:	f003 0320 	and.w	r3, r3, #32
 800611e:	2b00      	cmp	r3, #0
 8006120:	d003      	beq.n	800612a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 fb97 	bl	8006856 <UART_Receive_IT>
      return;
 8006128:	e256      	b.n	80065d8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800612a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800612e:	2b00      	cmp	r3, #0
 8006130:	f000 80de 	beq.w	80062f0 <HAL_UART_IRQHandler+0x22c>
 8006134:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006138:	f003 0301 	and.w	r3, r3, #1
 800613c:	2b00      	cmp	r3, #0
 800613e:	d106      	bne.n	800614e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006144:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006148:	2b00      	cmp	r3, #0
 800614a:	f000 80d1 	beq.w	80062f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800614e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006152:	f003 0301 	and.w	r3, r3, #1
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00b      	beq.n	8006172 <HAL_UART_IRQHandler+0xae>
 800615a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800615e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006162:	2b00      	cmp	r3, #0
 8006164:	d005      	beq.n	8006172 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616a:	f043 0201 	orr.w	r2, r3, #1
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006176:	f003 0304 	and.w	r3, r3, #4
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00b      	beq.n	8006196 <HAL_UART_IRQHandler+0xd2>
 800617e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006182:	f003 0301 	and.w	r3, r3, #1
 8006186:	2b00      	cmp	r3, #0
 8006188:	d005      	beq.n	8006196 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618e:	f043 0202 	orr.w	r2, r3, #2
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800619a:	f003 0302 	and.w	r3, r3, #2
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00b      	beq.n	80061ba <HAL_UART_IRQHandler+0xf6>
 80061a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061a6:	f003 0301 	and.w	r3, r3, #1
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d005      	beq.n	80061ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b2:	f043 0204 	orr.w	r2, r3, #4
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80061ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061be:	f003 0308 	and.w	r3, r3, #8
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d011      	beq.n	80061ea <HAL_UART_IRQHandler+0x126>
 80061c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061ca:	f003 0320 	and.w	r3, r3, #32
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d105      	bne.n	80061de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80061d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061d6:	f003 0301 	and.w	r3, r3, #1
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d005      	beq.n	80061ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e2:	f043 0208 	orr.w	r2, r3, #8
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	f000 81ed 	beq.w	80065ce <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061f8:	f003 0320 	and.w	r3, r3, #32
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d008      	beq.n	8006212 <HAL_UART_IRQHandler+0x14e>
 8006200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006204:	f003 0320 	and.w	r3, r3, #32
 8006208:	2b00      	cmp	r3, #0
 800620a:	d002      	beq.n	8006212 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 fb22 	bl	8006856 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	695b      	ldr	r3, [r3, #20]
 8006218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800621c:	2b40      	cmp	r3, #64	; 0x40
 800621e:	bf0c      	ite	eq
 8006220:	2301      	moveq	r3, #1
 8006222:	2300      	movne	r3, #0
 8006224:	b2db      	uxtb	r3, r3
 8006226:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622e:	f003 0308 	and.w	r3, r3, #8
 8006232:	2b00      	cmp	r3, #0
 8006234:	d103      	bne.n	800623e <HAL_UART_IRQHandler+0x17a>
 8006236:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800623a:	2b00      	cmp	r3, #0
 800623c:	d04f      	beq.n	80062de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 fa2a 	bl	8006698 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800624e:	2b40      	cmp	r3, #64	; 0x40
 8006250:	d141      	bne.n	80062d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	3314      	adds	r3, #20
 8006258:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800625c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006260:	e853 3f00 	ldrex	r3, [r3]
 8006264:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006268:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800626c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006270:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	3314      	adds	r3, #20
 800627a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800627e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006282:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006286:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800628a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800628e:	e841 2300 	strex	r3, r2, [r1]
 8006292:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006296:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d1d9      	bne.n	8006252 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d013      	beq.n	80062ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062aa:	4a7d      	ldr	r2, [pc, #500]	; (80064a0 <HAL_UART_IRQHandler+0x3dc>)
 80062ac:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b2:	4618      	mov	r0, r3
 80062b4:	f7fb fd58 	bl	8001d68 <HAL_DMA_Abort_IT>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d016      	beq.n	80062ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80062c8:	4610      	mov	r0, r2
 80062ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062cc:	e00e      	b.n	80062ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 f99a 	bl	8006608 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062d4:	e00a      	b.n	80062ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 f996 	bl	8006608 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062dc:	e006      	b.n	80062ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 f992 	bl	8006608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80062ea:	e170      	b.n	80065ce <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062ec:	bf00      	nop
    return;
 80062ee:	e16e      	b.n	80065ce <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	f040 814a 	bne.w	800658e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80062fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062fe:	f003 0310 	and.w	r3, r3, #16
 8006302:	2b00      	cmp	r3, #0
 8006304:	f000 8143 	beq.w	800658e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800630c:	f003 0310 	and.w	r3, r3, #16
 8006310:	2b00      	cmp	r3, #0
 8006312:	f000 813c 	beq.w	800658e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006316:	2300      	movs	r3, #0
 8006318:	60bb      	str	r3, [r7, #8]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	60bb      	str	r3, [r7, #8]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	60bb      	str	r3, [r7, #8]
 800632a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006336:	2b40      	cmp	r3, #64	; 0x40
 8006338:	f040 80b4 	bne.w	80064a4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006348:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800634c:	2b00      	cmp	r3, #0
 800634e:	f000 8140 	beq.w	80065d2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006356:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800635a:	429a      	cmp	r2, r3
 800635c:	f080 8139 	bcs.w	80065d2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006366:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800636c:	69db      	ldr	r3, [r3, #28]
 800636e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006372:	f000 8088 	beq.w	8006486 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	330c      	adds	r3, #12
 800637c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006380:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006384:	e853 3f00 	ldrex	r3, [r3]
 8006388:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800638c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006390:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006394:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	330c      	adds	r3, #12
 800639e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80063a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80063a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80063ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80063b2:	e841 2300 	strex	r3, r2, [r1]
 80063b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80063ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1d9      	bne.n	8006376 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	3314      	adds	r3, #20
 80063c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063cc:	e853 3f00 	ldrex	r3, [r3]
 80063d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80063d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063d4:	f023 0301 	bic.w	r3, r3, #1
 80063d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	3314      	adds	r3, #20
 80063e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80063e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80063ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80063ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80063f2:	e841 2300 	strex	r3, r2, [r1]
 80063f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80063f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d1e1      	bne.n	80063c2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	3314      	adds	r3, #20
 8006404:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006406:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006408:	e853 3f00 	ldrex	r3, [r3]
 800640c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800640e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006410:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006414:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	3314      	adds	r3, #20
 800641e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006422:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006424:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006426:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006428:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800642a:	e841 2300 	strex	r3, r2, [r1]
 800642e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006430:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006432:	2b00      	cmp	r3, #0
 8006434:	d1e3      	bne.n	80063fe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2220      	movs	r2, #32
 800643a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	330c      	adds	r3, #12
 800644a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800644c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800644e:	e853 3f00 	ldrex	r3, [r3]
 8006452:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006454:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006456:	f023 0310 	bic.w	r3, r3, #16
 800645a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	330c      	adds	r3, #12
 8006464:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006468:	65ba      	str	r2, [r7, #88]	; 0x58
 800646a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800646c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800646e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006470:	e841 2300 	strex	r3, r2, [r1]
 8006474:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006476:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006478:	2b00      	cmp	r3, #0
 800647a:	d1e3      	bne.n	8006444 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006480:	4618      	mov	r0, r3
 8006482:	f7fb fc01 	bl	8001c88 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800648e:	b29b      	uxth	r3, r3
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	b29b      	uxth	r3, r3
 8006494:	4619      	mov	r1, r3
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f7fa fb20 	bl	8000adc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800649c:	e099      	b.n	80065d2 <HAL_UART_IRQHandler+0x50e>
 800649e:	bf00      	nop
 80064a0:	0800675f 	.word	0x0800675f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	f000 808b 	beq.w	80065d6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80064c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	f000 8086 	beq.w	80065d6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	330c      	adds	r3, #12
 80064d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d4:	e853 3f00 	ldrex	r3, [r3]
 80064d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80064da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	330c      	adds	r3, #12
 80064ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80064ee:	647a      	str	r2, [r7, #68]	; 0x44
 80064f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80064f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064f6:	e841 2300 	strex	r3, r2, [r1]
 80064fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80064fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d1e3      	bne.n	80064ca <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	3314      	adds	r3, #20
 8006508:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800650a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650c:	e853 3f00 	ldrex	r3, [r3]
 8006510:	623b      	str	r3, [r7, #32]
   return(result);
 8006512:	6a3b      	ldr	r3, [r7, #32]
 8006514:	f023 0301 	bic.w	r3, r3, #1
 8006518:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	3314      	adds	r3, #20
 8006522:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006526:	633a      	str	r2, [r7, #48]	; 0x30
 8006528:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800652a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800652c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800652e:	e841 2300 	strex	r3, r2, [r1]
 8006532:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006536:	2b00      	cmp	r3, #0
 8006538:	d1e3      	bne.n	8006502 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2220      	movs	r2, #32
 800653e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	330c      	adds	r3, #12
 800654e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	e853 3f00 	ldrex	r3, [r3]
 8006556:	60fb      	str	r3, [r7, #12]
   return(result);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f023 0310 	bic.w	r3, r3, #16
 800655e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	330c      	adds	r3, #12
 8006568:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800656c:	61fa      	str	r2, [r7, #28]
 800656e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006570:	69b9      	ldr	r1, [r7, #24]
 8006572:	69fa      	ldr	r2, [r7, #28]
 8006574:	e841 2300 	strex	r3, r2, [r1]
 8006578:	617b      	str	r3, [r7, #20]
   return(result);
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d1e3      	bne.n	8006548 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006580:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006584:	4619      	mov	r1, r3
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f7fa faa8 	bl	8000adc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800658c:	e023      	b.n	80065d6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800658e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006596:	2b00      	cmp	r3, #0
 8006598:	d009      	beq.n	80065ae <HAL_UART_IRQHandler+0x4ea>
 800659a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800659e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d003      	beq.n	80065ae <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 f8ed 	bl	8006786 <UART_Transmit_IT>
    return;
 80065ac:	e014      	b.n	80065d8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80065ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d00e      	beq.n	80065d8 <HAL_UART_IRQHandler+0x514>
 80065ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d008      	beq.n	80065d8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 f92d 	bl	8006826 <UART_EndTransmit_IT>
    return;
 80065cc:	e004      	b.n	80065d8 <HAL_UART_IRQHandler+0x514>
    return;
 80065ce:	bf00      	nop
 80065d0:	e002      	b.n	80065d8 <HAL_UART_IRQHandler+0x514>
      return;
 80065d2:	bf00      	nop
 80065d4:	e000      	b.n	80065d8 <HAL_UART_IRQHandler+0x514>
      return;
 80065d6:	bf00      	nop
  }
}
 80065d8:	37e8      	adds	r7, #232	; 0xe8
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop

080065e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80065e8:	bf00      	nop
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80065fc:	bf00      	nop
 80065fe:	370c      	adds	r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006610:	bf00      	nop
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800661c:	b480      	push	{r7}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
 8006622:	60f8      	str	r0, [r7, #12]
 8006624:	60b9      	str	r1, [r7, #8]
 8006626:	4613      	mov	r3, r2
 8006628:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	68ba      	ldr	r2, [r7, #8]
 800662e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	88fa      	ldrh	r2, [r7, #6]
 8006634:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	88fa      	ldrh	r2, [r7, #6]
 800663a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2200      	movs	r2, #0
 8006640:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2222      	movs	r2, #34	; 0x22
 8006646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d007      	beq.n	800666a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68da      	ldr	r2, [r3, #12]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006668:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	695a      	ldr	r2, [r3, #20]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f042 0201 	orr.w	r2, r2, #1
 8006678:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68da      	ldr	r2, [r3, #12]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f042 0220 	orr.w	r2, r2, #32
 8006688:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	3714      	adds	r7, #20
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006698:	b480      	push	{r7}
 800669a:	b095      	sub	sp, #84	; 0x54
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	330c      	adds	r3, #12
 80066a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066aa:	e853 3f00 	ldrex	r3, [r3]
 80066ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80066b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	330c      	adds	r3, #12
 80066be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80066c0:	643a      	str	r2, [r7, #64]	; 0x40
 80066c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80066c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066c8:	e841 2300 	strex	r3, r2, [r1]
 80066cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d1e5      	bne.n	80066a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	3314      	adds	r3, #20
 80066da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066dc:	6a3b      	ldr	r3, [r7, #32]
 80066de:	e853 3f00 	ldrex	r3, [r3]
 80066e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	f023 0301 	bic.w	r3, r3, #1
 80066ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	3314      	adds	r3, #20
 80066f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066fc:	e841 2300 	strex	r3, r2, [r1]
 8006700:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006704:	2b00      	cmp	r3, #0
 8006706:	d1e5      	bne.n	80066d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800670c:	2b01      	cmp	r3, #1
 800670e:	d119      	bne.n	8006744 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	330c      	adds	r3, #12
 8006716:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	e853 3f00 	ldrex	r3, [r3]
 800671e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	f023 0310 	bic.w	r3, r3, #16
 8006726:	647b      	str	r3, [r7, #68]	; 0x44
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	330c      	adds	r3, #12
 800672e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006730:	61ba      	str	r2, [r7, #24]
 8006732:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006734:	6979      	ldr	r1, [r7, #20]
 8006736:	69ba      	ldr	r2, [r7, #24]
 8006738:	e841 2300 	strex	r3, r2, [r1]
 800673c:	613b      	str	r3, [r7, #16]
   return(result);
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d1e5      	bne.n	8006710 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2220      	movs	r2, #32
 8006748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006752:	bf00      	nop
 8006754:	3754      	adds	r7, #84	; 0x54
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr

0800675e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800675e:	b580      	push	{r7, lr}
 8006760:	b084      	sub	sp, #16
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800676a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2200      	movs	r2, #0
 8006770:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2200      	movs	r2, #0
 8006776:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006778:	68f8      	ldr	r0, [r7, #12]
 800677a:	f7ff ff45 	bl	8006608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800677e:	bf00      	nop
 8006780:	3710      	adds	r7, #16
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}

08006786 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006786:	b480      	push	{r7}
 8006788:	b085      	sub	sp, #20
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006794:	b2db      	uxtb	r3, r3
 8006796:	2b21      	cmp	r3, #33	; 0x21
 8006798:	d13e      	bne.n	8006818 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067a2:	d114      	bne.n	80067ce <UART_Transmit_IT+0x48>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	691b      	ldr	r3, [r3, #16]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d110      	bne.n	80067ce <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6a1b      	ldr	r3, [r3, #32]
 80067b0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	881b      	ldrh	r3, [r3, #0]
 80067b6:	461a      	mov	r2, r3
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067c0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a1b      	ldr	r3, [r3, #32]
 80067c6:	1c9a      	adds	r2, r3, #2
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	621a      	str	r2, [r3, #32]
 80067cc:	e008      	b.n	80067e0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6a1b      	ldr	r3, [r3, #32]
 80067d2:	1c59      	adds	r1, r3, #1
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	6211      	str	r1, [r2, #32]
 80067d8:	781a      	ldrb	r2, [r3, #0]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	3b01      	subs	r3, #1
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	4619      	mov	r1, r3
 80067ee:	84d1      	strh	r1, [r2, #38]	; 0x26
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d10f      	bne.n	8006814 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68da      	ldr	r2, [r3, #12]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006802:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68da      	ldr	r2, [r3, #12]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006812:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006814:	2300      	movs	r3, #0
 8006816:	e000      	b.n	800681a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006818:	2302      	movs	r3, #2
  }
}
 800681a:	4618      	mov	r0, r3
 800681c:	3714      	adds	r7, #20
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr

08006826 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b082      	sub	sp, #8
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	68da      	ldr	r2, [r3, #12]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800683c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2220      	movs	r2, #32
 8006842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f7ff feca 	bl	80065e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800684c:	2300      	movs	r3, #0
}
 800684e:	4618      	mov	r0, r3
 8006850:	3708      	adds	r7, #8
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}

08006856 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006856:	b580      	push	{r7, lr}
 8006858:	b08c      	sub	sp, #48	; 0x30
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006864:	b2db      	uxtb	r3, r3
 8006866:	2b22      	cmp	r3, #34	; 0x22
 8006868:	f040 80ab 	bne.w	80069c2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006874:	d117      	bne.n	80068a6 <UART_Receive_IT+0x50>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d113      	bne.n	80068a6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800687e:	2300      	movs	r3, #0
 8006880:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006886:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	b29b      	uxth	r3, r3
 8006890:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006894:	b29a      	uxth	r2, r3
 8006896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006898:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800689e:	1c9a      	adds	r2, r3, #2
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	629a      	str	r2, [r3, #40]	; 0x28
 80068a4:	e026      	b.n	80068f4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80068ac:	2300      	movs	r3, #0
 80068ae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068b8:	d007      	beq.n	80068ca <UART_Receive_IT+0x74>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d10a      	bne.n	80068d8 <UART_Receive_IT+0x82>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d106      	bne.n	80068d8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	b2da      	uxtb	r2, r3
 80068d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d4:	701a      	strb	r2, [r3, #0]
 80068d6:	e008      	b.n	80068ea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068e4:	b2da      	uxtb	r2, r3
 80068e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ee:	1c5a      	adds	r2, r3, #1
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	3b01      	subs	r3, #1
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	4619      	mov	r1, r3
 8006902:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006904:	2b00      	cmp	r3, #0
 8006906:	d15a      	bne.n	80069be <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68da      	ldr	r2, [r3, #12]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f022 0220 	bic.w	r2, r2, #32
 8006916:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68da      	ldr	r2, [r3, #12]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006926:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	695a      	ldr	r2, [r3, #20]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f022 0201 	bic.w	r2, r2, #1
 8006936:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2220      	movs	r2, #32
 800693c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006944:	2b01      	cmp	r3, #1
 8006946:	d135      	bne.n	80069b4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	330c      	adds	r3, #12
 8006954:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	e853 3f00 	ldrex	r3, [r3]
 800695c:	613b      	str	r3, [r7, #16]
   return(result);
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	f023 0310 	bic.w	r3, r3, #16
 8006964:	627b      	str	r3, [r7, #36]	; 0x24
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	330c      	adds	r3, #12
 800696c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800696e:	623a      	str	r2, [r7, #32]
 8006970:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006972:	69f9      	ldr	r1, [r7, #28]
 8006974:	6a3a      	ldr	r2, [r7, #32]
 8006976:	e841 2300 	strex	r3, r2, [r1]
 800697a:	61bb      	str	r3, [r7, #24]
   return(result);
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d1e5      	bne.n	800694e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 0310 	and.w	r3, r3, #16
 800698c:	2b10      	cmp	r3, #16
 800698e:	d10a      	bne.n	80069a6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006990:	2300      	movs	r3, #0
 8006992:	60fb      	str	r3, [r7, #12]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	60fb      	str	r3, [r7, #12]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	60fb      	str	r3, [r7, #12]
 80069a4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80069aa:	4619      	mov	r1, r3
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f7fa f895 	bl	8000adc <HAL_UARTEx_RxEventCallback>
 80069b2:	e002      	b.n	80069ba <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f7ff fe1d 	bl	80065f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80069ba:	2300      	movs	r3, #0
 80069bc:	e002      	b.n	80069c4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80069be:	2300      	movs	r3, #0
 80069c0:	e000      	b.n	80069c4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80069c2:	2302      	movs	r3, #2
  }
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3730      	adds	r7, #48	; 0x30
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069d0:	b0c0      	sub	sp, #256	; 0x100
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	691b      	ldr	r3, [r3, #16]
 80069e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80069e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069e8:	68d9      	ldr	r1, [r3, #12]
 80069ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	ea40 0301 	orr.w	r3, r0, r1
 80069f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80069f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069fa:	689a      	ldr	r2, [r3, #8]
 80069fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	431a      	orrs	r2, r3
 8006a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a08:	695b      	ldr	r3, [r3, #20]
 8006a0a:	431a      	orrs	r2, r3
 8006a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a10:	69db      	ldr	r3, [r3, #28]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006a24:	f021 010c 	bic.w	r1, r1, #12
 8006a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a32:	430b      	orrs	r3, r1
 8006a34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	695b      	ldr	r3, [r3, #20]
 8006a3e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a46:	6999      	ldr	r1, [r3, #24]
 8006a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	ea40 0301 	orr.w	r3, r0, r1
 8006a52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	4b8f      	ldr	r3, [pc, #572]	; (8006c98 <UART_SetConfig+0x2cc>)
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d005      	beq.n	8006a6c <UART_SetConfig+0xa0>
 8006a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	4b8d      	ldr	r3, [pc, #564]	; (8006c9c <UART_SetConfig+0x2d0>)
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d104      	bne.n	8006a76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a6c:	f7fc fc2a 	bl	80032c4 <HAL_RCC_GetPCLK2Freq>
 8006a70:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006a74:	e003      	b.n	8006a7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a76:	f7fc fc11 	bl	800329c <HAL_RCC_GetPCLK1Freq>
 8006a7a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a82:	69db      	ldr	r3, [r3, #28]
 8006a84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a88:	f040 810c 	bne.w	8006ca4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a90:	2200      	movs	r2, #0
 8006a92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006a96:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006a9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006a9e:	4622      	mov	r2, r4
 8006aa0:	462b      	mov	r3, r5
 8006aa2:	1891      	adds	r1, r2, r2
 8006aa4:	65b9      	str	r1, [r7, #88]	; 0x58
 8006aa6:	415b      	adcs	r3, r3
 8006aa8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006aaa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006aae:	4621      	mov	r1, r4
 8006ab0:	eb12 0801 	adds.w	r8, r2, r1
 8006ab4:	4629      	mov	r1, r5
 8006ab6:	eb43 0901 	adc.w	r9, r3, r1
 8006aba:	f04f 0200 	mov.w	r2, #0
 8006abe:	f04f 0300 	mov.w	r3, #0
 8006ac2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ac6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006aca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006ace:	4690      	mov	r8, r2
 8006ad0:	4699      	mov	r9, r3
 8006ad2:	4623      	mov	r3, r4
 8006ad4:	eb18 0303 	adds.w	r3, r8, r3
 8006ad8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006adc:	462b      	mov	r3, r5
 8006ade:	eb49 0303 	adc.w	r3, r9, r3
 8006ae2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006af2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006af6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006afa:	460b      	mov	r3, r1
 8006afc:	18db      	adds	r3, r3, r3
 8006afe:	653b      	str	r3, [r7, #80]	; 0x50
 8006b00:	4613      	mov	r3, r2
 8006b02:	eb42 0303 	adc.w	r3, r2, r3
 8006b06:	657b      	str	r3, [r7, #84]	; 0x54
 8006b08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006b0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006b10:	f7f9 fbde 	bl	80002d0 <__aeabi_uldivmod>
 8006b14:	4602      	mov	r2, r0
 8006b16:	460b      	mov	r3, r1
 8006b18:	4b61      	ldr	r3, [pc, #388]	; (8006ca0 <UART_SetConfig+0x2d4>)
 8006b1a:	fba3 2302 	umull	r2, r3, r3, r2
 8006b1e:	095b      	lsrs	r3, r3, #5
 8006b20:	011c      	lsls	r4, r3, #4
 8006b22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b26:	2200      	movs	r2, #0
 8006b28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b2c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006b30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006b34:	4642      	mov	r2, r8
 8006b36:	464b      	mov	r3, r9
 8006b38:	1891      	adds	r1, r2, r2
 8006b3a:	64b9      	str	r1, [r7, #72]	; 0x48
 8006b3c:	415b      	adcs	r3, r3
 8006b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006b44:	4641      	mov	r1, r8
 8006b46:	eb12 0a01 	adds.w	sl, r2, r1
 8006b4a:	4649      	mov	r1, r9
 8006b4c:	eb43 0b01 	adc.w	fp, r3, r1
 8006b50:	f04f 0200 	mov.w	r2, #0
 8006b54:	f04f 0300 	mov.w	r3, #0
 8006b58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006b5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006b60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b64:	4692      	mov	sl, r2
 8006b66:	469b      	mov	fp, r3
 8006b68:	4643      	mov	r3, r8
 8006b6a:	eb1a 0303 	adds.w	r3, sl, r3
 8006b6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b72:	464b      	mov	r3, r9
 8006b74:	eb4b 0303 	adc.w	r3, fp, r3
 8006b78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b88:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006b8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006b90:	460b      	mov	r3, r1
 8006b92:	18db      	adds	r3, r3, r3
 8006b94:	643b      	str	r3, [r7, #64]	; 0x40
 8006b96:	4613      	mov	r3, r2
 8006b98:	eb42 0303 	adc.w	r3, r2, r3
 8006b9c:	647b      	str	r3, [r7, #68]	; 0x44
 8006b9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006ba2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006ba6:	f7f9 fb93 	bl	80002d0 <__aeabi_uldivmod>
 8006baa:	4602      	mov	r2, r0
 8006bac:	460b      	mov	r3, r1
 8006bae:	4611      	mov	r1, r2
 8006bb0:	4b3b      	ldr	r3, [pc, #236]	; (8006ca0 <UART_SetConfig+0x2d4>)
 8006bb2:	fba3 2301 	umull	r2, r3, r3, r1
 8006bb6:	095b      	lsrs	r3, r3, #5
 8006bb8:	2264      	movs	r2, #100	; 0x64
 8006bba:	fb02 f303 	mul.w	r3, r2, r3
 8006bbe:	1acb      	subs	r3, r1, r3
 8006bc0:	00db      	lsls	r3, r3, #3
 8006bc2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006bc6:	4b36      	ldr	r3, [pc, #216]	; (8006ca0 <UART_SetConfig+0x2d4>)
 8006bc8:	fba3 2302 	umull	r2, r3, r3, r2
 8006bcc:	095b      	lsrs	r3, r3, #5
 8006bce:	005b      	lsls	r3, r3, #1
 8006bd0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006bd4:	441c      	add	r4, r3
 8006bd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006be0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006be4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006be8:	4642      	mov	r2, r8
 8006bea:	464b      	mov	r3, r9
 8006bec:	1891      	adds	r1, r2, r2
 8006bee:	63b9      	str	r1, [r7, #56]	; 0x38
 8006bf0:	415b      	adcs	r3, r3
 8006bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bf4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006bf8:	4641      	mov	r1, r8
 8006bfa:	1851      	adds	r1, r2, r1
 8006bfc:	6339      	str	r1, [r7, #48]	; 0x30
 8006bfe:	4649      	mov	r1, r9
 8006c00:	414b      	adcs	r3, r1
 8006c02:	637b      	str	r3, [r7, #52]	; 0x34
 8006c04:	f04f 0200 	mov.w	r2, #0
 8006c08:	f04f 0300 	mov.w	r3, #0
 8006c0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006c10:	4659      	mov	r1, fp
 8006c12:	00cb      	lsls	r3, r1, #3
 8006c14:	4651      	mov	r1, sl
 8006c16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c1a:	4651      	mov	r1, sl
 8006c1c:	00ca      	lsls	r2, r1, #3
 8006c1e:	4610      	mov	r0, r2
 8006c20:	4619      	mov	r1, r3
 8006c22:	4603      	mov	r3, r0
 8006c24:	4642      	mov	r2, r8
 8006c26:	189b      	adds	r3, r3, r2
 8006c28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c2c:	464b      	mov	r3, r9
 8006c2e:	460a      	mov	r2, r1
 8006c30:	eb42 0303 	adc.w	r3, r2, r3
 8006c34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006c44:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006c48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	18db      	adds	r3, r3, r3
 8006c50:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c52:	4613      	mov	r3, r2
 8006c54:	eb42 0303 	adc.w	r3, r2, r3
 8006c58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006c62:	f7f9 fb35 	bl	80002d0 <__aeabi_uldivmod>
 8006c66:	4602      	mov	r2, r0
 8006c68:	460b      	mov	r3, r1
 8006c6a:	4b0d      	ldr	r3, [pc, #52]	; (8006ca0 <UART_SetConfig+0x2d4>)
 8006c6c:	fba3 1302 	umull	r1, r3, r3, r2
 8006c70:	095b      	lsrs	r3, r3, #5
 8006c72:	2164      	movs	r1, #100	; 0x64
 8006c74:	fb01 f303 	mul.w	r3, r1, r3
 8006c78:	1ad3      	subs	r3, r2, r3
 8006c7a:	00db      	lsls	r3, r3, #3
 8006c7c:	3332      	adds	r3, #50	; 0x32
 8006c7e:	4a08      	ldr	r2, [pc, #32]	; (8006ca0 <UART_SetConfig+0x2d4>)
 8006c80:	fba2 2303 	umull	r2, r3, r2, r3
 8006c84:	095b      	lsrs	r3, r3, #5
 8006c86:	f003 0207 	and.w	r2, r3, #7
 8006c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4422      	add	r2, r4
 8006c92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c94:	e105      	b.n	8006ea2 <UART_SetConfig+0x4d6>
 8006c96:	bf00      	nop
 8006c98:	40011000 	.word	0x40011000
 8006c9c:	40011400 	.word	0x40011400
 8006ca0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ca4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006cae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006cb2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006cb6:	4642      	mov	r2, r8
 8006cb8:	464b      	mov	r3, r9
 8006cba:	1891      	adds	r1, r2, r2
 8006cbc:	6239      	str	r1, [r7, #32]
 8006cbe:	415b      	adcs	r3, r3
 8006cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8006cc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006cc6:	4641      	mov	r1, r8
 8006cc8:	1854      	adds	r4, r2, r1
 8006cca:	4649      	mov	r1, r9
 8006ccc:	eb43 0501 	adc.w	r5, r3, r1
 8006cd0:	f04f 0200 	mov.w	r2, #0
 8006cd4:	f04f 0300 	mov.w	r3, #0
 8006cd8:	00eb      	lsls	r3, r5, #3
 8006cda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006cde:	00e2      	lsls	r2, r4, #3
 8006ce0:	4614      	mov	r4, r2
 8006ce2:	461d      	mov	r5, r3
 8006ce4:	4643      	mov	r3, r8
 8006ce6:	18e3      	adds	r3, r4, r3
 8006ce8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006cec:	464b      	mov	r3, r9
 8006cee:	eb45 0303 	adc.w	r3, r5, r3
 8006cf2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006d02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006d06:	f04f 0200 	mov.w	r2, #0
 8006d0a:	f04f 0300 	mov.w	r3, #0
 8006d0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006d12:	4629      	mov	r1, r5
 8006d14:	008b      	lsls	r3, r1, #2
 8006d16:	4621      	mov	r1, r4
 8006d18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d1c:	4621      	mov	r1, r4
 8006d1e:	008a      	lsls	r2, r1, #2
 8006d20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006d24:	f7f9 fad4 	bl	80002d0 <__aeabi_uldivmod>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	460b      	mov	r3, r1
 8006d2c:	4b60      	ldr	r3, [pc, #384]	; (8006eb0 <UART_SetConfig+0x4e4>)
 8006d2e:	fba3 2302 	umull	r2, r3, r3, r2
 8006d32:	095b      	lsrs	r3, r3, #5
 8006d34:	011c      	lsls	r4, r3, #4
 8006d36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006d40:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006d44:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006d48:	4642      	mov	r2, r8
 8006d4a:	464b      	mov	r3, r9
 8006d4c:	1891      	adds	r1, r2, r2
 8006d4e:	61b9      	str	r1, [r7, #24]
 8006d50:	415b      	adcs	r3, r3
 8006d52:	61fb      	str	r3, [r7, #28]
 8006d54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d58:	4641      	mov	r1, r8
 8006d5a:	1851      	adds	r1, r2, r1
 8006d5c:	6139      	str	r1, [r7, #16]
 8006d5e:	4649      	mov	r1, r9
 8006d60:	414b      	adcs	r3, r1
 8006d62:	617b      	str	r3, [r7, #20]
 8006d64:	f04f 0200 	mov.w	r2, #0
 8006d68:	f04f 0300 	mov.w	r3, #0
 8006d6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d70:	4659      	mov	r1, fp
 8006d72:	00cb      	lsls	r3, r1, #3
 8006d74:	4651      	mov	r1, sl
 8006d76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d7a:	4651      	mov	r1, sl
 8006d7c:	00ca      	lsls	r2, r1, #3
 8006d7e:	4610      	mov	r0, r2
 8006d80:	4619      	mov	r1, r3
 8006d82:	4603      	mov	r3, r0
 8006d84:	4642      	mov	r2, r8
 8006d86:	189b      	adds	r3, r3, r2
 8006d88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006d8c:	464b      	mov	r3, r9
 8006d8e:	460a      	mov	r2, r1
 8006d90:	eb42 0303 	adc.w	r3, r2, r3
 8006d94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	67bb      	str	r3, [r7, #120]	; 0x78
 8006da2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006da4:	f04f 0200 	mov.w	r2, #0
 8006da8:	f04f 0300 	mov.w	r3, #0
 8006dac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006db0:	4649      	mov	r1, r9
 8006db2:	008b      	lsls	r3, r1, #2
 8006db4:	4641      	mov	r1, r8
 8006db6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006dba:	4641      	mov	r1, r8
 8006dbc:	008a      	lsls	r2, r1, #2
 8006dbe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006dc2:	f7f9 fa85 	bl	80002d0 <__aeabi_uldivmod>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	460b      	mov	r3, r1
 8006dca:	4b39      	ldr	r3, [pc, #228]	; (8006eb0 <UART_SetConfig+0x4e4>)
 8006dcc:	fba3 1302 	umull	r1, r3, r3, r2
 8006dd0:	095b      	lsrs	r3, r3, #5
 8006dd2:	2164      	movs	r1, #100	; 0x64
 8006dd4:	fb01 f303 	mul.w	r3, r1, r3
 8006dd8:	1ad3      	subs	r3, r2, r3
 8006dda:	011b      	lsls	r3, r3, #4
 8006ddc:	3332      	adds	r3, #50	; 0x32
 8006dde:	4a34      	ldr	r2, [pc, #208]	; (8006eb0 <UART_SetConfig+0x4e4>)
 8006de0:	fba2 2303 	umull	r2, r3, r2, r3
 8006de4:	095b      	lsrs	r3, r3, #5
 8006de6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006dea:	441c      	add	r4, r3
 8006dec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006df0:	2200      	movs	r2, #0
 8006df2:	673b      	str	r3, [r7, #112]	; 0x70
 8006df4:	677a      	str	r2, [r7, #116]	; 0x74
 8006df6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006dfa:	4642      	mov	r2, r8
 8006dfc:	464b      	mov	r3, r9
 8006dfe:	1891      	adds	r1, r2, r2
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	415b      	adcs	r3, r3
 8006e04:	60fb      	str	r3, [r7, #12]
 8006e06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e0a:	4641      	mov	r1, r8
 8006e0c:	1851      	adds	r1, r2, r1
 8006e0e:	6039      	str	r1, [r7, #0]
 8006e10:	4649      	mov	r1, r9
 8006e12:	414b      	adcs	r3, r1
 8006e14:	607b      	str	r3, [r7, #4]
 8006e16:	f04f 0200 	mov.w	r2, #0
 8006e1a:	f04f 0300 	mov.w	r3, #0
 8006e1e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006e22:	4659      	mov	r1, fp
 8006e24:	00cb      	lsls	r3, r1, #3
 8006e26:	4651      	mov	r1, sl
 8006e28:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e2c:	4651      	mov	r1, sl
 8006e2e:	00ca      	lsls	r2, r1, #3
 8006e30:	4610      	mov	r0, r2
 8006e32:	4619      	mov	r1, r3
 8006e34:	4603      	mov	r3, r0
 8006e36:	4642      	mov	r2, r8
 8006e38:	189b      	adds	r3, r3, r2
 8006e3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e3c:	464b      	mov	r3, r9
 8006e3e:	460a      	mov	r2, r1
 8006e40:	eb42 0303 	adc.w	r3, r2, r3
 8006e44:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	663b      	str	r3, [r7, #96]	; 0x60
 8006e50:	667a      	str	r2, [r7, #100]	; 0x64
 8006e52:	f04f 0200 	mov.w	r2, #0
 8006e56:	f04f 0300 	mov.w	r3, #0
 8006e5a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006e5e:	4649      	mov	r1, r9
 8006e60:	008b      	lsls	r3, r1, #2
 8006e62:	4641      	mov	r1, r8
 8006e64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e68:	4641      	mov	r1, r8
 8006e6a:	008a      	lsls	r2, r1, #2
 8006e6c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006e70:	f7f9 fa2e 	bl	80002d0 <__aeabi_uldivmod>
 8006e74:	4602      	mov	r2, r0
 8006e76:	460b      	mov	r3, r1
 8006e78:	4b0d      	ldr	r3, [pc, #52]	; (8006eb0 <UART_SetConfig+0x4e4>)
 8006e7a:	fba3 1302 	umull	r1, r3, r3, r2
 8006e7e:	095b      	lsrs	r3, r3, #5
 8006e80:	2164      	movs	r1, #100	; 0x64
 8006e82:	fb01 f303 	mul.w	r3, r1, r3
 8006e86:	1ad3      	subs	r3, r2, r3
 8006e88:	011b      	lsls	r3, r3, #4
 8006e8a:	3332      	adds	r3, #50	; 0x32
 8006e8c:	4a08      	ldr	r2, [pc, #32]	; (8006eb0 <UART_SetConfig+0x4e4>)
 8006e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e92:	095b      	lsrs	r3, r3, #5
 8006e94:	f003 020f 	and.w	r2, r3, #15
 8006e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4422      	add	r2, r4
 8006ea0:	609a      	str	r2, [r3, #8]
}
 8006ea2:	bf00      	nop
 8006ea4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006eae:	bf00      	nop
 8006eb0:	51eb851f 	.word	0x51eb851f

08006eb4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8006eb4:	b084      	sub	sp, #16
 8006eb6:	b480      	push	{r7}
 8006eb8:	b085      	sub	sp, #20
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
 8006ebe:	f107 001c 	add.w	r0, r7, #28
 8006ec2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006eca:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006ecc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8006ece:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8006ed2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8006ed6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8006eda:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8006ede:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006ee0:	68fa      	ldr	r2, [r7, #12]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8006eee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006ef2:	68fa      	ldr	r2, [r7, #12]
 8006ef4:	431a      	orrs	r2, r3
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3714      	adds	r7, #20
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	b004      	add	sp, #16
 8006f08:	4770      	bx	lr

08006f0a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8006f0a:	b480      	push	{r7}
 8006f0c:	b083      	sub	sp, #12
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	370c      	adds	r7, #12
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr

08006f46 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8006f46:	b480      	push	{r7}
 8006f48:	b083      	sub	sp, #12
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2203      	movs	r2, #3
 8006f52:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	370c      	adds	r7, #12
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr

08006f62 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8006f62:	b480      	push	{r7}
 8006f64:	b083      	sub	sp, #12
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 0303 	and.w	r3, r3, #3
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	370c      	adds	r7, #12
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr

08006f7e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8006f7e:	b480      	push	{r7}
 8006f80:	b085      	sub	sp, #20
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
 8006f86:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006f9c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006fa2:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006fa8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006fb8:	f023 030f 	bic.w	r3, r3, #15
 8006fbc:	68fa      	ldr	r2, [r7, #12]
 8006fbe:	431a      	orrs	r2, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3714      	adds	r7, #20
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr

08006fd2 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8006fd2:	b480      	push	{r7}
 8006fd4:	b083      	sub	sp, #12
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	b2db      	uxtb	r3, r3
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	370c      	adds	r7, #12
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b085      	sub	sp, #20
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	3314      	adds	r3, #20
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	4413      	add	r3, r2
 8007000:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
}  
 8007006:	4618      	mov	r0, r3
 8007008:	3714      	adds	r7, #20
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr

08007012 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8007012:	b480      	push	{r7}
 8007014:	b085      	sub	sp, #20
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
 800701a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800701c:	2300      	movs	r3, #0
 800701e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	685a      	ldr	r2, [r3, #4]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007038:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800703e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007044:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007046:	68fa      	ldr	r2, [r7, #12]
 8007048:	4313      	orrs	r3, r2
 800704a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007050:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	431a      	orrs	r2, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800705c:	2300      	movs	r3, #0

}
 800705e:	4618      	mov	r0, r3
 8007060:	3714      	adds	r7, #20
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr

0800706a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800706a:	b580      	push	{r7, lr}
 800706c:	b088      	sub	sp, #32
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
 8007072:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007078:	2310      	movs	r3, #16
 800707a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800707c:	2340      	movs	r3, #64	; 0x40
 800707e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007080:	2300      	movs	r3, #0
 8007082:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007084:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007088:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800708a:	f107 0308 	add.w	r3, r7, #8
 800708e:	4619      	mov	r1, r3
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f7ff ff74 	bl	8006f7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8007096:	f241 3288 	movw	r2, #5000	; 0x1388
 800709a:	2110      	movs	r1, #16
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 f9d7 	bl	8007450 <SDMMC_GetCmdResp1>
 80070a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80070a4:	69fb      	ldr	r3, [r7, #28]
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3720      	adds	r7, #32
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}

080070ae <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80070ae:	b580      	push	{r7, lr}
 80070b0:	b088      	sub	sp, #32
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
 80070b6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80070bc:	2311      	movs	r3, #17
 80070be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80070c0:	2340      	movs	r3, #64	; 0x40
 80070c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80070c4:	2300      	movs	r3, #0
 80070c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80070c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070cc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80070ce:	f107 0308 	add.w	r3, r7, #8
 80070d2:	4619      	mov	r1, r3
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f7ff ff52 	bl	8006f7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80070da:	f241 3288 	movw	r2, #5000	; 0x1388
 80070de:	2111      	movs	r1, #17
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 f9b5 	bl	8007450 <SDMMC_GetCmdResp1>
 80070e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80070e8:	69fb      	ldr	r3, [r7, #28]
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3720      	adds	r7, #32
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}

080070f2 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b088      	sub	sp, #32
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
 80070fa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007100:	2312      	movs	r3, #18
 8007102:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007104:	2340      	movs	r3, #64	; 0x40
 8007106:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007108:	2300      	movs	r3, #0
 800710a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800710c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007110:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007112:	f107 0308 	add.w	r3, r7, #8
 8007116:	4619      	mov	r1, r3
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f7ff ff30 	bl	8006f7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800711e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007122:	2112      	movs	r1, #18
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 f993 	bl	8007450 <SDMMC_GetCmdResp1>
 800712a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800712c:	69fb      	ldr	r3, [r7, #28]
}
 800712e:	4618      	mov	r0, r3
 8007130:	3720      	adds	r7, #32
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007136:	b580      	push	{r7, lr}
 8007138:	b088      	sub	sp, #32
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
 800713e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007144:	2318      	movs	r3, #24
 8007146:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007148:	2340      	movs	r3, #64	; 0x40
 800714a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800714c:	2300      	movs	r3, #0
 800714e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007150:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007154:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007156:	f107 0308 	add.w	r3, r7, #8
 800715a:	4619      	mov	r1, r3
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f7ff ff0e 	bl	8006f7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007162:	f241 3288 	movw	r2, #5000	; 0x1388
 8007166:	2118      	movs	r1, #24
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 f971 	bl	8007450 <SDMMC_GetCmdResp1>
 800716e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007170:	69fb      	ldr	r3, [r7, #28]
}
 8007172:	4618      	mov	r0, r3
 8007174:	3720      	adds	r7, #32
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}

0800717a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800717a:	b580      	push	{r7, lr}
 800717c:	b088      	sub	sp, #32
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
 8007182:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007188:	2319      	movs	r3, #25
 800718a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800718c:	2340      	movs	r3, #64	; 0x40
 800718e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007190:	2300      	movs	r3, #0
 8007192:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007194:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007198:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800719a:	f107 0308 	add.w	r3, r7, #8
 800719e:	4619      	mov	r1, r3
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f7ff feec 	bl	8006f7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80071a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80071aa:	2119      	movs	r1, #25
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 f94f 	bl	8007450 <SDMMC_GetCmdResp1>
 80071b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80071b4:	69fb      	ldr	r3, [r7, #28]
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3720      	adds	r7, #32
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
	...

080071c0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b088      	sub	sp, #32
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80071c8:	2300      	movs	r3, #0
 80071ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80071cc:	230c      	movs	r3, #12
 80071ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80071d0:	2340      	movs	r3, #64	; 0x40
 80071d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80071d4:	2300      	movs	r3, #0
 80071d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80071d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80071de:	f107 0308 	add.w	r3, r7, #8
 80071e2:	4619      	mov	r1, r3
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f7ff feca 	bl	8006f7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80071ea:	4a05      	ldr	r2, [pc, #20]	; (8007200 <SDMMC_CmdStopTransfer+0x40>)
 80071ec:	210c      	movs	r1, #12
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 f92e 	bl	8007450 <SDMMC_GetCmdResp1>
 80071f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80071f6:	69fb      	ldr	r3, [r7, #28]
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3720      	adds	r7, #32
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	05f5e100 	.word	0x05f5e100

08007204 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b08a      	sub	sp, #40	; 0x28
 8007208:	af00      	add	r7, sp, #0
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007214:	2307      	movs	r3, #7
 8007216:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007218:	2340      	movs	r3, #64	; 0x40
 800721a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800721c:	2300      	movs	r3, #0
 800721e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007220:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007224:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007226:	f107 0310 	add.w	r3, r7, #16
 800722a:	4619      	mov	r1, r3
 800722c:	68f8      	ldr	r0, [r7, #12]
 800722e:	f7ff fea6 	bl	8006f7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8007232:	f241 3288 	movw	r2, #5000	; 0x1388
 8007236:	2107      	movs	r1, #7
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f000 f909 	bl	8007450 <SDMMC_GetCmdResp1>
 800723e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8007240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007242:	4618      	mov	r0, r3
 8007244:	3728      	adds	r7, #40	; 0x28
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800724a:	b580      	push	{r7, lr}
 800724c:	b088      	sub	sp, #32
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8007252:	2300      	movs	r3, #0
 8007254:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007256:	2300      	movs	r3, #0
 8007258:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800725a:	2300      	movs	r3, #0
 800725c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800725e:	2300      	movs	r3, #0
 8007260:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007262:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007266:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007268:	f107 0308 	add.w	r3, r7, #8
 800726c:	4619      	mov	r1, r3
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f7ff fe85 	bl	8006f7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 fb23 	bl	80078c0 <SDMMC_GetCmdError>
 800727a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800727c:	69fb      	ldr	r3, [r7, #28]
}
 800727e:	4618      	mov	r0, r3
 8007280:	3720      	adds	r7, #32
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}

08007286 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8007286:	b580      	push	{r7, lr}
 8007288:	b088      	sub	sp, #32
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800728e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007292:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007294:	2308      	movs	r3, #8
 8007296:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007298:	2340      	movs	r3, #64	; 0x40
 800729a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800729c:	2300      	movs	r3, #0
 800729e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80072a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072a4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80072a6:	f107 0308 	add.w	r3, r7, #8
 80072aa:	4619      	mov	r1, r3
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f7ff fe66 	bl	8006f7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 fab6 	bl	8007824 <SDMMC_GetCmdResp7>
 80072b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80072ba:	69fb      	ldr	r3, [r7, #28]
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3720      	adds	r7, #32
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b088      	sub	sp, #32
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80072d2:	2337      	movs	r3, #55	; 0x37
 80072d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80072d6:	2340      	movs	r3, #64	; 0x40
 80072d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80072da:	2300      	movs	r3, #0
 80072dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80072de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80072e4:	f107 0308 	add.w	r3, r7, #8
 80072e8:	4619      	mov	r1, r3
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f7ff fe47 	bl	8006f7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80072f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80072f4:	2137      	movs	r1, #55	; 0x37
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 f8aa 	bl	8007450 <SDMMC_GetCmdResp1>
 80072fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80072fe:	69fb      	ldr	r3, [r7, #28]
}
 8007300:	4618      	mov	r0, r3
 8007302:	3720      	adds	r7, #32
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b088      	sub	sp, #32
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007318:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800731c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800731e:	2329      	movs	r3, #41	; 0x29
 8007320:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007322:	2340      	movs	r3, #64	; 0x40
 8007324:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007326:	2300      	movs	r3, #0
 8007328:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800732a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800732e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007330:	f107 0308 	add.w	r3, r7, #8
 8007334:	4619      	mov	r1, r3
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f7ff fe21 	bl	8006f7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f000 f9bd 	bl	80076bc <SDMMC_GetCmdResp3>
 8007342:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007344:	69fb      	ldr	r3, [r7, #28]
}
 8007346:	4618      	mov	r0, r3
 8007348:	3720      	adds	r7, #32
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}

0800734e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800734e:	b580      	push	{r7, lr}
 8007350:	b088      	sub	sp, #32
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007356:	2300      	movs	r3, #0
 8007358:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800735a:	2302      	movs	r3, #2
 800735c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800735e:	23c0      	movs	r3, #192	; 0xc0
 8007360:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007362:	2300      	movs	r3, #0
 8007364:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007366:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800736a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800736c:	f107 0308 	add.w	r3, r7, #8
 8007370:	4619      	mov	r1, r3
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f7ff fe03 	bl	8006f7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 f957 	bl	800762c <SDMMC_GetCmdResp2>
 800737e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007380:	69fb      	ldr	r3, [r7, #28]
}
 8007382:	4618      	mov	r0, r3
 8007384:	3720      	adds	r7, #32
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}

0800738a <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800738a:	b580      	push	{r7, lr}
 800738c:	b088      	sub	sp, #32
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
 8007392:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007398:	2309      	movs	r3, #9
 800739a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800739c:	23c0      	movs	r3, #192	; 0xc0
 800739e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80073a0:	2300      	movs	r3, #0
 80073a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80073a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073a8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80073aa:	f107 0308 	add.w	r3, r7, #8
 80073ae:	4619      	mov	r1, r3
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f7ff fde4 	bl	8006f7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 f938 	bl	800762c <SDMMC_GetCmdResp2>
 80073bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80073be:	69fb      	ldr	r3, [r7, #28]
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3720      	adds	r7, #32
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b088      	sub	sp, #32
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80073d2:	2300      	movs	r3, #0
 80073d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80073d6:	2303      	movs	r3, #3
 80073d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80073da:	2340      	movs	r3, #64	; 0x40
 80073dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80073de:	2300      	movs	r3, #0
 80073e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80073e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80073e8:	f107 0308 	add.w	r3, r7, #8
 80073ec:	4619      	mov	r1, r3
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f7ff fdc5 	bl	8006f7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80073f4:	683a      	ldr	r2, [r7, #0]
 80073f6:	2103      	movs	r1, #3
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 f99d 	bl	8007738 <SDMMC_GetCmdResp6>
 80073fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007400:	69fb      	ldr	r3, [r7, #28]
}
 8007402:	4618      	mov	r0, r3
 8007404:	3720      	adds	r7, #32
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800740a:	b580      	push	{r7, lr}
 800740c:	b088      	sub	sp, #32
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
 8007412:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007418:	230d      	movs	r3, #13
 800741a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800741c:	2340      	movs	r3, #64	; 0x40
 800741e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007420:	2300      	movs	r3, #0
 8007422:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007424:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007428:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800742a:	f107 0308 	add.w	r3, r7, #8
 800742e:	4619      	mov	r1, r3
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f7ff fda4 	bl	8006f7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8007436:	f241 3288 	movw	r2, #5000	; 0x1388
 800743a:	210d      	movs	r1, #13
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 f807 	bl	8007450 <SDMMC_GetCmdResp1>
 8007442:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007444:	69fb      	ldr	r3, [r7, #28]
}
 8007446:	4618      	mov	r0, r3
 8007448:	3720      	adds	r7, #32
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
	...

08007450 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b088      	sub	sp, #32
 8007454:	af00      	add	r7, sp, #0
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	460b      	mov	r3, r1
 800745a:	607a      	str	r2, [r7, #4]
 800745c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800745e:	4b70      	ldr	r3, [pc, #448]	; (8007620 <SDMMC_GetCmdResp1+0x1d0>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a70      	ldr	r2, [pc, #448]	; (8007624 <SDMMC_GetCmdResp1+0x1d4>)
 8007464:	fba2 2303 	umull	r2, r3, r2, r3
 8007468:	0a5a      	lsrs	r2, r3, #9
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	fb02 f303 	mul.w	r3, r2, r3
 8007470:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	1e5a      	subs	r2, r3, #1
 8007476:	61fa      	str	r2, [r7, #28]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d102      	bne.n	8007482 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800747c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007480:	e0c9      	b.n	8007616 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007486:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800748e:	2b00      	cmp	r3, #0
 8007490:	d0ef      	beq.n	8007472 <SDMMC_GetCmdResp1+0x22>
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007498:	2b00      	cmp	r3, #0
 800749a:	d1ea      	bne.n	8007472 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074a0:	f003 0304 	and.w	r3, r3, #4
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d004      	beq.n	80074b2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2204      	movs	r2, #4
 80074ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80074ae:	2304      	movs	r3, #4
 80074b0:	e0b1      	b.n	8007616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074b6:	f003 0301 	and.w	r3, r3, #1
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d004      	beq.n	80074c8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2201      	movs	r2, #1
 80074c2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80074c4:	2301      	movs	r3, #1
 80074c6:	e0a6      	b.n	8007616 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	22c5      	movs	r2, #197	; 0xc5
 80074cc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80074ce:	68f8      	ldr	r0, [r7, #12]
 80074d0:	f7ff fd7f 	bl	8006fd2 <SDIO_GetCommandResponse>
 80074d4:	4603      	mov	r3, r0
 80074d6:	461a      	mov	r2, r3
 80074d8:	7afb      	ldrb	r3, [r7, #11]
 80074da:	4293      	cmp	r3, r2
 80074dc:	d001      	beq.n	80074e2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80074de:	2301      	movs	r3, #1
 80074e0:	e099      	b.n	8007616 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80074e2:	2100      	movs	r1, #0
 80074e4:	68f8      	ldr	r0, [r7, #12]
 80074e6:	f7ff fd81 	bl	8006fec <SDIO_GetResponse>
 80074ea:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80074ec:	697a      	ldr	r2, [r7, #20]
 80074ee:	4b4e      	ldr	r3, [pc, #312]	; (8007628 <SDMMC_GetCmdResp1+0x1d8>)
 80074f0:	4013      	ands	r3, r2
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d101      	bne.n	80074fa <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80074f6:	2300      	movs	r3, #0
 80074f8:	e08d      	b.n	8007616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	da02      	bge.n	8007506 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007500:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007504:	e087      	b.n	8007616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800750c:	2b00      	cmp	r3, #0
 800750e:	d001      	beq.n	8007514 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007510:	2340      	movs	r3, #64	; 0x40
 8007512:	e080      	b.n	8007616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800751a:	2b00      	cmp	r3, #0
 800751c:	d001      	beq.n	8007522 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800751e:	2380      	movs	r3, #128	; 0x80
 8007520:	e079      	b.n	8007616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007528:	2b00      	cmp	r3, #0
 800752a:	d002      	beq.n	8007532 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800752c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007530:	e071      	b.n	8007616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007538:	2b00      	cmp	r3, #0
 800753a:	d002      	beq.n	8007542 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800753c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007540:	e069      	b.n	8007616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007548:	2b00      	cmp	r3, #0
 800754a:	d002      	beq.n	8007552 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800754c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007550:	e061      	b.n	8007616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007558:	2b00      	cmp	r3, #0
 800755a:	d002      	beq.n	8007562 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800755c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007560:	e059      	b.n	8007616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007568:	2b00      	cmp	r3, #0
 800756a:	d002      	beq.n	8007572 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800756c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007570:	e051      	b.n	8007616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007578:	2b00      	cmp	r3, #0
 800757a:	d002      	beq.n	8007582 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800757c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007580:	e049      	b.n	8007616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007588:	2b00      	cmp	r3, #0
 800758a:	d002      	beq.n	8007592 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800758c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007590:	e041      	b.n	8007616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007598:	2b00      	cmp	r3, #0
 800759a:	d002      	beq.n	80075a2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800759c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075a0:	e039      	b.n	8007616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d002      	beq.n	80075b2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80075ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80075b0:	e031      	b.n	8007616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d002      	beq.n	80075c2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80075bc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80075c0:	e029      	b.n	8007616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d002      	beq.n	80075d2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80075cc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80075d0:	e021      	b.n	8007616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d002      	beq.n	80075e2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80075dc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80075e0:	e019      	b.n	8007616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d002      	beq.n	80075f2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80075ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80075f0:	e011      	b.n	8007616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d002      	beq.n	8007602 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80075fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007600:	e009      	b.n	8007616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	f003 0308 	and.w	r3, r3, #8
 8007608:	2b00      	cmp	r3, #0
 800760a:	d002      	beq.n	8007612 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800760c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007610:	e001      	b.n	8007616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007612:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007616:	4618      	mov	r0, r3
 8007618:	3720      	adds	r7, #32
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	20000004 	.word	0x20000004
 8007624:	10624dd3 	.word	0x10624dd3
 8007628:	fdffe008 	.word	0xfdffe008

0800762c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800762c:	b480      	push	{r7}
 800762e:	b085      	sub	sp, #20
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007634:	4b1f      	ldr	r3, [pc, #124]	; (80076b4 <SDMMC_GetCmdResp2+0x88>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a1f      	ldr	r2, [pc, #124]	; (80076b8 <SDMMC_GetCmdResp2+0x8c>)
 800763a:	fba2 2303 	umull	r2, r3, r2, r3
 800763e:	0a5b      	lsrs	r3, r3, #9
 8007640:	f241 3288 	movw	r2, #5000	; 0x1388
 8007644:	fb02 f303 	mul.w	r3, r2, r3
 8007648:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	1e5a      	subs	r2, r3, #1
 800764e:	60fa      	str	r2, [r7, #12]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d102      	bne.n	800765a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007654:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007658:	e026      	b.n	80076a8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800765e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007666:	2b00      	cmp	r3, #0
 8007668:	d0ef      	beq.n	800764a <SDMMC_GetCmdResp2+0x1e>
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007670:	2b00      	cmp	r3, #0
 8007672:	d1ea      	bne.n	800764a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007678:	f003 0304 	and.w	r3, r3, #4
 800767c:	2b00      	cmp	r3, #0
 800767e:	d004      	beq.n	800768a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2204      	movs	r2, #4
 8007684:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007686:	2304      	movs	r3, #4
 8007688:	e00e      	b.n	80076a8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800768e:	f003 0301 	and.w	r3, r3, #1
 8007692:	2b00      	cmp	r3, #0
 8007694:	d004      	beq.n	80076a0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2201      	movs	r2, #1
 800769a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800769c:	2301      	movs	r3, #1
 800769e:	e003      	b.n	80076a8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	22c5      	movs	r2, #197	; 0xc5
 80076a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3714      	adds	r7, #20
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr
 80076b4:	20000004 	.word	0x20000004
 80076b8:	10624dd3 	.word	0x10624dd3

080076bc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80076bc:	b480      	push	{r7}
 80076be:	b085      	sub	sp, #20
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80076c4:	4b1a      	ldr	r3, [pc, #104]	; (8007730 <SDMMC_GetCmdResp3+0x74>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a1a      	ldr	r2, [pc, #104]	; (8007734 <SDMMC_GetCmdResp3+0x78>)
 80076ca:	fba2 2303 	umull	r2, r3, r2, r3
 80076ce:	0a5b      	lsrs	r3, r3, #9
 80076d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80076d4:	fb02 f303 	mul.w	r3, r2, r3
 80076d8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	1e5a      	subs	r2, r3, #1
 80076de:	60fa      	str	r2, [r7, #12]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d102      	bne.n	80076ea <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80076e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80076e8:	e01b      	b.n	8007722 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076ee:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d0ef      	beq.n	80076da <SDMMC_GetCmdResp3+0x1e>
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007700:	2b00      	cmp	r3, #0
 8007702:	d1ea      	bne.n	80076da <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007708:	f003 0304 	and.w	r3, r3, #4
 800770c:	2b00      	cmp	r3, #0
 800770e:	d004      	beq.n	800771a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2204      	movs	r2, #4
 8007714:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007716:	2304      	movs	r3, #4
 8007718:	e003      	b.n	8007722 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	22c5      	movs	r2, #197	; 0xc5
 800771e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007720:	2300      	movs	r3, #0
}
 8007722:	4618      	mov	r0, r3
 8007724:	3714      	adds	r7, #20
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr
 800772e:	bf00      	nop
 8007730:	20000004 	.word	0x20000004
 8007734:	10624dd3 	.word	0x10624dd3

08007738 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b088      	sub	sp, #32
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	460b      	mov	r3, r1
 8007742:	607a      	str	r2, [r7, #4]
 8007744:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007746:	4b35      	ldr	r3, [pc, #212]	; (800781c <SDMMC_GetCmdResp6+0xe4>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a35      	ldr	r2, [pc, #212]	; (8007820 <SDMMC_GetCmdResp6+0xe8>)
 800774c:	fba2 2303 	umull	r2, r3, r2, r3
 8007750:	0a5b      	lsrs	r3, r3, #9
 8007752:	f241 3288 	movw	r2, #5000	; 0x1388
 8007756:	fb02 f303 	mul.w	r3, r2, r3
 800775a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	1e5a      	subs	r2, r3, #1
 8007760:	61fa      	str	r2, [r7, #28]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d102      	bne.n	800776c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007766:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800776a:	e052      	b.n	8007812 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007770:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007772:	69bb      	ldr	r3, [r7, #24]
 8007774:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007778:	2b00      	cmp	r3, #0
 800777a:	d0ef      	beq.n	800775c <SDMMC_GetCmdResp6+0x24>
 800777c:	69bb      	ldr	r3, [r7, #24]
 800777e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007782:	2b00      	cmp	r3, #0
 8007784:	d1ea      	bne.n	800775c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800778a:	f003 0304 	and.w	r3, r3, #4
 800778e:	2b00      	cmp	r3, #0
 8007790:	d004      	beq.n	800779c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2204      	movs	r2, #4
 8007796:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007798:	2304      	movs	r3, #4
 800779a:	e03a      	b.n	8007812 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077a0:	f003 0301 	and.w	r3, r3, #1
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d004      	beq.n	80077b2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2201      	movs	r2, #1
 80077ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80077ae:	2301      	movs	r3, #1
 80077b0:	e02f      	b.n	8007812 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80077b2:	68f8      	ldr	r0, [r7, #12]
 80077b4:	f7ff fc0d 	bl	8006fd2 <SDIO_GetCommandResponse>
 80077b8:	4603      	mov	r3, r0
 80077ba:	461a      	mov	r2, r3
 80077bc:	7afb      	ldrb	r3, [r7, #11]
 80077be:	4293      	cmp	r3, r2
 80077c0:	d001      	beq.n	80077c6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80077c2:	2301      	movs	r3, #1
 80077c4:	e025      	b.n	8007812 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	22c5      	movs	r2, #197	; 0xc5
 80077ca:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80077cc:	2100      	movs	r1, #0
 80077ce:	68f8      	ldr	r0, [r7, #12]
 80077d0:	f7ff fc0c 	bl	8006fec <SDIO_GetResponse>
 80077d4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d106      	bne.n	80077ee <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	0c1b      	lsrs	r3, r3, #16
 80077e4:	b29a      	uxth	r2, r3
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80077ea:	2300      	movs	r3, #0
 80077ec:	e011      	b.n	8007812 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d002      	beq.n	80077fe <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80077f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80077fc:	e009      	b.n	8007812 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007804:	2b00      	cmp	r3, #0
 8007806:	d002      	beq.n	800780e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007808:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800780c:	e001      	b.n	8007812 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800780e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007812:	4618      	mov	r0, r3
 8007814:	3720      	adds	r7, #32
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
 800781a:	bf00      	nop
 800781c:	20000004 	.word	0x20000004
 8007820:	10624dd3 	.word	0x10624dd3

08007824 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007824:	b480      	push	{r7}
 8007826:	b085      	sub	sp, #20
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800782c:	4b22      	ldr	r3, [pc, #136]	; (80078b8 <SDMMC_GetCmdResp7+0x94>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a22      	ldr	r2, [pc, #136]	; (80078bc <SDMMC_GetCmdResp7+0x98>)
 8007832:	fba2 2303 	umull	r2, r3, r2, r3
 8007836:	0a5b      	lsrs	r3, r3, #9
 8007838:	f241 3288 	movw	r2, #5000	; 0x1388
 800783c:	fb02 f303 	mul.w	r3, r2, r3
 8007840:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	1e5a      	subs	r2, r3, #1
 8007846:	60fa      	str	r2, [r7, #12]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d102      	bne.n	8007852 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800784c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007850:	e02c      	b.n	80078ac <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007856:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800785e:	2b00      	cmp	r3, #0
 8007860:	d0ef      	beq.n	8007842 <SDMMC_GetCmdResp7+0x1e>
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007868:	2b00      	cmp	r3, #0
 800786a:	d1ea      	bne.n	8007842 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007870:	f003 0304 	and.w	r3, r3, #4
 8007874:	2b00      	cmp	r3, #0
 8007876:	d004      	beq.n	8007882 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2204      	movs	r2, #4
 800787c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800787e:	2304      	movs	r3, #4
 8007880:	e014      	b.n	80078ac <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007886:	f003 0301 	and.w	r3, r3, #1
 800788a:	2b00      	cmp	r3, #0
 800788c:	d004      	beq.n	8007898 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2201      	movs	r2, #1
 8007892:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007894:	2301      	movs	r3, #1
 8007896:	e009      	b.n	80078ac <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800789c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d002      	beq.n	80078aa <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2240      	movs	r2, #64	; 0x40
 80078a8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80078aa:	2300      	movs	r3, #0
  
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3714      	adds	r7, #20
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr
 80078b8:	20000004 	.word	0x20000004
 80078bc:	10624dd3 	.word	0x10624dd3

080078c0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b085      	sub	sp, #20
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80078c8:	4b11      	ldr	r3, [pc, #68]	; (8007910 <SDMMC_GetCmdError+0x50>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a11      	ldr	r2, [pc, #68]	; (8007914 <SDMMC_GetCmdError+0x54>)
 80078ce:	fba2 2303 	umull	r2, r3, r2, r3
 80078d2:	0a5b      	lsrs	r3, r3, #9
 80078d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80078d8:	fb02 f303 	mul.w	r3, r2, r3
 80078dc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	1e5a      	subs	r2, r3, #1
 80078e2:	60fa      	str	r2, [r7, #12]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d102      	bne.n	80078ee <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80078e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80078ec:	e009      	b.n	8007902 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d0f1      	beq.n	80078de <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	22c5      	movs	r2, #197	; 0xc5
 80078fe:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	3714      	adds	r7, #20
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr
 800790e:	bf00      	nop
 8007910:	20000004 	.word	0x20000004
 8007914:	10624dd3 	.word	0x10624dd3

08007918 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800791c:	4904      	ldr	r1, [pc, #16]	; (8007930 <MX_FATFS_Init+0x18>)
 800791e:	4805      	ldr	r0, [pc, #20]	; (8007934 <MX_FATFS_Init+0x1c>)
 8007920:	f003 f988 	bl	800ac34 <FATFS_LinkDriver>
 8007924:	4603      	mov	r3, r0
 8007926:	461a      	mov	r2, r3
 8007928:	4b03      	ldr	r3, [pc, #12]	; (8007938 <MX_FATFS_Init+0x20>)
 800792a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800792c:	bf00      	nop
 800792e:	bd80      	pop	{r7, pc}
 8007930:	20000ef4 	.word	0x20000ef4
 8007934:	0800f8e0 	.word	0x0800f8e0
 8007938:	20000ef0 	.word	0x20000ef0

0800793c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800793c:	b480      	push	{r7}
 800793e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007940:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007942:	4618      	mov	r0, r3
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007952:	2300      	movs	r3, #0
 8007954:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007956:	f000 f888 	bl	8007a6a <BSP_SD_IsDetected>
 800795a:	4603      	mov	r3, r0
 800795c:	2b01      	cmp	r3, #1
 800795e:	d001      	beq.n	8007964 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8007960:	2301      	movs	r3, #1
 8007962:	e005      	b.n	8007970 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8007964:	4804      	ldr	r0, [pc, #16]	; (8007978 <BSP_SD_Init+0x2c>)
 8007966:	f7fc ff33 	bl	80047d0 <HAL_SD_Init>
 800796a:	4603      	mov	r3, r0
 800796c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800796e:	79fb      	ldrb	r3, [r7, #7]
}
 8007970:	4618      	mov	r0, r3
 8007972:	3708      	adds	r7, #8
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}
 8007978:	20000198 	.word	0x20000198

0800797c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b086      	sub	sp, #24
 8007980:	af00      	add	r7, sp, #0
 8007982:	60f8      	str	r0, [r7, #12]
 8007984:	60b9      	str	r1, [r7, #8]
 8007986:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007988:	2300      	movs	r3, #0
 800798a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	68ba      	ldr	r2, [r7, #8]
 8007990:	68f9      	ldr	r1, [r7, #12]
 8007992:	4806      	ldr	r0, [pc, #24]	; (80079ac <BSP_SD_ReadBlocks_DMA+0x30>)
 8007994:	f7fc ffcc 	bl	8004930 <HAL_SD_ReadBlocks_DMA>
 8007998:	4603      	mov	r3, r0
 800799a:	2b00      	cmp	r3, #0
 800799c:	d001      	beq.n	80079a2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800799e:	2301      	movs	r3, #1
 80079a0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80079a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3718      	adds	r7, #24
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	20000198 	.word	0x20000198

080079b0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b086      	sub	sp, #24
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	60b9      	str	r1, [r7, #8]
 80079ba:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80079bc:	2300      	movs	r3, #0
 80079be:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	68ba      	ldr	r2, [r7, #8]
 80079c4:	68f9      	ldr	r1, [r7, #12]
 80079c6:	4806      	ldr	r0, [pc, #24]	; (80079e0 <BSP_SD_WriteBlocks_DMA+0x30>)
 80079c8:	f7fd f892 	bl	8004af0 <HAL_SD_WriteBlocks_DMA>
 80079cc:	4603      	mov	r3, r0
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d001      	beq.n	80079d6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80079d2:	2301      	movs	r3, #1
 80079d4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80079d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3718      	adds	r7, #24
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	20000198 	.word	0x20000198

080079e4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80079e8:	4805      	ldr	r0, [pc, #20]	; (8007a00 <BSP_SD_GetCardState+0x1c>)
 80079ea:	f7fd fcb3 	bl	8005354 <HAL_SD_GetCardState>
 80079ee:	4603      	mov	r3, r0
 80079f0:	2b04      	cmp	r3, #4
 80079f2:	bf14      	ite	ne
 80079f4:	2301      	movne	r3, #1
 80079f6:	2300      	moveq	r3, #0
 80079f8:	b2db      	uxtb	r3, r3
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	20000198 	.word	0x20000198

08007a04 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8007a0c:	6879      	ldr	r1, [r7, #4]
 8007a0e:	4803      	ldr	r0, [pc, #12]	; (8007a1c <BSP_SD_GetCardInfo+0x18>)
 8007a10:	f7fd fc74 	bl	80052fc <HAL_SD_GetCardInfo>
}
 8007a14:	bf00      	nop
 8007a16:	3708      	adds	r7, #8
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	20000198 	.word	0x20000198

08007a20 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8007a28:	f000 f818 	bl	8007a5c <BSP_SD_AbortCallback>
}
 8007a2c:	bf00      	nop
 8007a2e:	3708      	adds	r7, #8
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b082      	sub	sp, #8
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8007a3c:	f000 f9b4 	bl	8007da8 <BSP_SD_WriteCpltCallback>
}
 8007a40:	bf00      	nop
 8007a42:	3708      	adds	r7, #8
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8007a50:	f000 f9bc 	bl	8007dcc <BSP_SD_ReadCpltCallback>
}
 8007a54:	bf00      	nop
 8007a56:	3708      	adds	r7, #8
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	af00      	add	r7, sp, #0

}
 8007a60:	bf00      	nop
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr

08007a6a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	b082      	sub	sp, #8
 8007a6e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007a70:	2301      	movs	r3, #1
 8007a72:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8007a74:	f000 f80c 	bl	8007a90 <BSP_PlatformIsDetected>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d101      	bne.n	8007a82 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8007a82:	79fb      	ldrb	r3, [r7, #7]
 8007a84:	b2db      	uxtb	r3, r3
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3708      	adds	r7, #8
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
	...

08007a90 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b082      	sub	sp, #8
 8007a94:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8007a96:	2301      	movs	r3, #1
 8007a98:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8007a9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007a9e:	4806      	ldr	r0, [pc, #24]	; (8007ab8 <BSP_PlatformIsDetected+0x28>)
 8007aa0:	f7fa fd8e 	bl	80025c0 <HAL_GPIO_ReadPin>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d001      	beq.n	8007aae <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8007aae:	79fb      	ldrb	r3, [r7, #7]
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3708      	adds	r7, #8
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	40020400 	.word	0x40020400

08007abc <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8007ac4:	f003 f9ba 	bl	800ae3c <osKernelGetTickCount>
 8007ac8:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 8007aca:	e006      	b.n	8007ada <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007acc:	f7ff ff8a 	bl	80079e4 <BSP_SD_GetCardState>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d101      	bne.n	8007ada <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	e009      	b.n	8007aee <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 8007ada:	f003 f9af 	bl	800ae3c <osKernelGetTickCount>
 8007ade:	4602      	mov	r2, r0
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	1ad3      	subs	r3, r2, r3
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d8f0      	bhi.n	8007acc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8007aea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3710      	adds	r7, #16
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
	...

08007af8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	4603      	mov	r3, r0
 8007b00:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007b02:	4b0b      	ldr	r3, [pc, #44]	; (8007b30 <SD_CheckStatus+0x38>)
 8007b04:	2201      	movs	r2, #1
 8007b06:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007b08:	f7ff ff6c 	bl	80079e4 <BSP_SD_GetCardState>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d107      	bne.n	8007b22 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8007b12:	4b07      	ldr	r3, [pc, #28]	; (8007b30 <SD_CheckStatus+0x38>)
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	f023 0301 	bic.w	r3, r3, #1
 8007b1c:	b2da      	uxtb	r2, r3
 8007b1e:	4b04      	ldr	r3, [pc, #16]	; (8007b30 <SD_CheckStatus+0x38>)
 8007b20:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007b22:	4b03      	ldr	r3, [pc, #12]	; (8007b30 <SD_CheckStatus+0x38>)
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	b2db      	uxtb	r3, r3
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3708      	adds	r7, #8
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}
 8007b30:	2000000d 	.word	0x2000000d

08007b34 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8007b3e:	4b1c      	ldr	r3, [pc, #112]	; (8007bb0 <SD_initialize+0x7c>)
 8007b40:	2201      	movs	r2, #1
 8007b42:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8007b44:	f003 f932 	bl	800adac <osKernelGetState>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	2b02      	cmp	r3, #2
 8007b4c:	d129      	bne.n	8007ba2 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8007b4e:	f7ff fefd 	bl	800794c <BSP_SD_Init>
 8007b52:	4603      	mov	r3, r0
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d107      	bne.n	8007b68 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8007b58:	79fb      	ldrb	r3, [r7, #7]
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f7ff ffcc 	bl	8007af8 <SD_CheckStatus>
 8007b60:	4603      	mov	r3, r0
 8007b62:	461a      	mov	r2, r3
 8007b64:	4b12      	ldr	r3, [pc, #72]	; (8007bb0 <SD_initialize+0x7c>)
 8007b66:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8007b68:	4b11      	ldr	r3, [pc, #68]	; (8007bb0 <SD_initialize+0x7c>)
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d017      	beq.n	8007ba2 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 8007b72:	4b10      	ldr	r3, [pc, #64]	; (8007bb4 <SD_initialize+0x80>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d107      	bne.n	8007b8a <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	2102      	movs	r1, #2
 8007b7e:	200a      	movs	r0, #10
 8007b80:	f003 fcd4 	bl	800b52c <osMessageQueueNew>
 8007b84:	4603      	mov	r3, r0
 8007b86:	4a0b      	ldr	r2, [pc, #44]	; (8007bb4 <SD_initialize+0x80>)
 8007b88:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 8007b8a:	4b0a      	ldr	r3, [pc, #40]	; (8007bb4 <SD_initialize+0x80>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d107      	bne.n	8007ba2 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 8007b92:	4b07      	ldr	r3, [pc, #28]	; (8007bb0 <SD_initialize+0x7c>)
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	f043 0301 	orr.w	r3, r3, #1
 8007b9c:	b2da      	uxtb	r2, r3
 8007b9e:	4b04      	ldr	r3, [pc, #16]	; (8007bb0 <SD_initialize+0x7c>)
 8007ba0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8007ba2:	4b03      	ldr	r3, [pc, #12]	; (8007bb0 <SD_initialize+0x7c>)
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	b2db      	uxtb	r3, r3
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3708      	adds	r7, #8
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}
 8007bb0:	2000000d 	.word	0x2000000d
 8007bb4:	2000112c 	.word	0x2000112c

08007bb8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8007bc2:	79fb      	ldrb	r3, [r7, #7]
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f7ff ff97 	bl	8007af8 <SD_CheckStatus>
 8007bca:	4603      	mov	r3, r0
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3708      	adds	r7, #8
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b088      	sub	sp, #32
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	60b9      	str	r1, [r7, #8]
 8007bdc:	607a      	str	r2, [r7, #4]
 8007bde:	603b      	str	r3, [r7, #0]
 8007be0:	4603      	mov	r3, r0
 8007be2:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8007be4:	2301      	movs	r3, #1
 8007be6:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007be8:	f247 5030 	movw	r0, #30000	; 0x7530
 8007bec:	f7ff ff66 	bl	8007abc <SD_CheckStatusWithTimeout>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	da01      	bge.n	8007bfa <SD_read+0x26>
  {
    return res;
 8007bf6:	7ffb      	ldrb	r3, [r7, #31]
 8007bf8:	e02f      	b.n	8007c5a <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8007bfa:	683a      	ldr	r2, [r7, #0]
 8007bfc:	6879      	ldr	r1, [r7, #4]
 8007bfe:	68b8      	ldr	r0, [r7, #8]
 8007c00:	f7ff febc 	bl	800797c <BSP_SD_ReadBlocks_DMA>
 8007c04:	4603      	mov	r3, r0
 8007c06:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8007c08:	7fbb      	ldrb	r3, [r7, #30]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d124      	bne.n	8007c58 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8007c0e:	4b15      	ldr	r3, [pc, #84]	; (8007c64 <SD_read+0x90>)
 8007c10:	6818      	ldr	r0, [r3, #0]
 8007c12:	f107 0112 	add.w	r1, r7, #18
 8007c16:	f247 5330 	movw	r3, #30000	; 0x7530
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f003 fd5a 	bl	800b6d4 <osMessageQueueGet>
 8007c20:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 8007c22:	69bb      	ldr	r3, [r7, #24]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d117      	bne.n	8007c58 <SD_read+0x84>
 8007c28:	8a7b      	ldrh	r3, [r7, #18]
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d114      	bne.n	8007c58 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 8007c2e:	f003 f905 	bl	800ae3c <osKernelGetTickCount>
 8007c32:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8007c34:	e007      	b.n	8007c46 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007c36:	f7ff fed5 	bl	80079e4 <BSP_SD_GetCardState>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d102      	bne.n	8007c46 <SD_read+0x72>
              {
                res = RES_OK;
 8007c40:	2300      	movs	r3, #0
 8007c42:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8007c44:	e008      	b.n	8007c58 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8007c46:	f003 f8f9 	bl	800ae3c <osKernelGetTickCount>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	1ad3      	subs	r3, r2, r3
 8007c50:	f247 522f 	movw	r2, #29999	; 0x752f
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d9ee      	bls.n	8007c36 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8007c58:	7ffb      	ldrb	r3, [r7, #31]
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3720      	adds	r7, #32
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop
 8007c64:	2000112c 	.word	0x2000112c

08007c68 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b088      	sub	sp, #32
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	60b9      	str	r1, [r7, #8]
 8007c70:	607a      	str	r2, [r7, #4]
 8007c72:	603b      	str	r3, [r7, #0]
 8007c74:	4603      	mov	r3, r0
 8007c76:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007c7c:	f247 5030 	movw	r0, #30000	; 0x7530
 8007c80:	f7ff ff1c 	bl	8007abc <SD_CheckStatusWithTimeout>
 8007c84:	4603      	mov	r3, r0
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	da01      	bge.n	8007c8e <SD_write+0x26>
  {
    return res;
 8007c8a:	7ffb      	ldrb	r3, [r7, #31]
 8007c8c:	e02d      	b.n	8007cea <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8007c8e:	683a      	ldr	r2, [r7, #0]
 8007c90:	6879      	ldr	r1, [r7, #4]
 8007c92:	68b8      	ldr	r0, [r7, #8]
 8007c94:	f7ff fe8c 	bl	80079b0 <BSP_SD_WriteBlocks_DMA>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d124      	bne.n	8007ce8 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8007c9e:	4b15      	ldr	r3, [pc, #84]	; (8007cf4 <SD_write+0x8c>)
 8007ca0:	6818      	ldr	r0, [r3, #0]
 8007ca2:	f107 0112 	add.w	r1, r7, #18
 8007ca6:	f247 5330 	movw	r3, #30000	; 0x7530
 8007caa:	2200      	movs	r2, #0
 8007cac:	f003 fd12 	bl	800b6d4 <osMessageQueueGet>
 8007cb0:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 8007cb2:	69bb      	ldr	r3, [r7, #24]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d117      	bne.n	8007ce8 <SD_write+0x80>
 8007cb8:	8a7b      	ldrh	r3, [r7, #18]
 8007cba:	2b02      	cmp	r3, #2
 8007cbc:	d114      	bne.n	8007ce8 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 8007cbe:	f003 f8bd 	bl	800ae3c <osKernelGetTickCount>
 8007cc2:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8007cc4:	e007      	b.n	8007cd6 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007cc6:	f7ff fe8d 	bl	80079e4 <BSP_SD_GetCardState>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d102      	bne.n	8007cd6 <SD_write+0x6e>
          {
            res = RES_OK;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	77fb      	strb	r3, [r7, #31]
            break;
 8007cd4:	e008      	b.n	8007ce8 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8007cd6:	f003 f8b1 	bl	800ae3c <osKernelGetTickCount>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	1ad3      	subs	r3, r2, r3
 8007ce0:	f247 522f 	movw	r2, #29999	; 0x752f
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d9ee      	bls.n	8007cc6 <SD_write+0x5e>
    }

  }
#endif

  return res;
 8007ce8:	7ffb      	ldrb	r3, [r7, #31]
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3720      	adds	r7, #32
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
 8007cf2:	bf00      	nop
 8007cf4:	2000112c 	.word	0x2000112c

08007cf8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b08c      	sub	sp, #48	; 0x30
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	4603      	mov	r3, r0
 8007d00:	603a      	str	r2, [r7, #0]
 8007d02:	71fb      	strb	r3, [r7, #7]
 8007d04:	460b      	mov	r3, r1
 8007d06:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007d0e:	4b25      	ldr	r3, [pc, #148]	; (8007da4 <SD_ioctl+0xac>)
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	f003 0301 	and.w	r3, r3, #1
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d001      	beq.n	8007d20 <SD_ioctl+0x28>
 8007d1c:	2303      	movs	r3, #3
 8007d1e:	e03c      	b.n	8007d9a <SD_ioctl+0xa2>

  switch (cmd)
 8007d20:	79bb      	ldrb	r3, [r7, #6]
 8007d22:	2b03      	cmp	r3, #3
 8007d24:	d834      	bhi.n	8007d90 <SD_ioctl+0x98>
 8007d26:	a201      	add	r2, pc, #4	; (adr r2, 8007d2c <SD_ioctl+0x34>)
 8007d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d2c:	08007d3d 	.word	0x08007d3d
 8007d30:	08007d45 	.word	0x08007d45
 8007d34:	08007d5d 	.word	0x08007d5d
 8007d38:	08007d77 	.word	0x08007d77
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007d42:	e028      	b.n	8007d96 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007d44:	f107 030c 	add.w	r3, r7, #12
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f7ff fe5b 	bl	8007a04 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8007d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007d54:	2300      	movs	r3, #0
 8007d56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007d5a:	e01c      	b.n	8007d96 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007d5c:	f107 030c 	add.w	r3, r7, #12
 8007d60:	4618      	mov	r0, r3
 8007d62:	f7ff fe4f 	bl	8007a04 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8007d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d68:	b29a      	uxth	r2, r3
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007d74:	e00f      	b.n	8007d96 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007d76:	f107 030c 	add.w	r3, r7, #12
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7ff fe42 	bl	8007a04 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d82:	0a5a      	lsrs	r2, r3, #9
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007d8e:	e002      	b.n	8007d96 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8007d90:	2304      	movs	r3, #4
 8007d92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8007d96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3730      	adds	r7, #48	; 0x30
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
 8007da2:	bf00      	nop
 8007da4:	2000000d 	.word	0x2000000d

08007da8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 8007dae:	2302      	movs	r3, #2
 8007db0:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8007db2:	4b05      	ldr	r3, [pc, #20]	; (8007dc8 <BSP_SD_WriteCpltCallback+0x20>)
 8007db4:	6818      	ldr	r0, [r3, #0]
 8007db6:	1db9      	adds	r1, r7, #6
 8007db8:	2300      	movs	r3, #0
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f003 fc2a 	bl	800b614 <osMessageQueuePut>
#endif
}
 8007dc0:	bf00      	nop
 8007dc2:	3708      	adds	r7, #8
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}
 8007dc8:	2000112c 	.word	0x2000112c

08007dcc <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b082      	sub	sp, #8
 8007dd0:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8007dd6:	4b05      	ldr	r3, [pc, #20]	; (8007dec <BSP_SD_ReadCpltCallback+0x20>)
 8007dd8:	6818      	ldr	r0, [r3, #0]
 8007dda:	1db9      	adds	r1, r7, #6
 8007ddc:	2300      	movs	r3, #0
 8007dde:	2200      	movs	r2, #0
 8007de0:	f003 fc18 	bl	800b614 <osMessageQueuePut>
#endif
}
 8007de4:	bf00      	nop
 8007de6:	3708      	adds	r7, #8
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	2000112c 	.word	0x2000112c

08007df0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b084      	sub	sp, #16
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	4603      	mov	r3, r0
 8007df8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007dfa:	79fb      	ldrb	r3, [r7, #7]
 8007dfc:	4a08      	ldr	r2, [pc, #32]	; (8007e20 <disk_status+0x30>)
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	4413      	add	r3, r2
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	79fa      	ldrb	r2, [r7, #7]
 8007e08:	4905      	ldr	r1, [pc, #20]	; (8007e20 <disk_status+0x30>)
 8007e0a:	440a      	add	r2, r1
 8007e0c:	7a12      	ldrb	r2, [r2, #8]
 8007e0e:	4610      	mov	r0, r2
 8007e10:	4798      	blx	r3
 8007e12:	4603      	mov	r3, r0
 8007e14:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3710      	adds	r7, #16
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}
 8007e20:	20001158 	.word	0x20001158

08007e24 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b084      	sub	sp, #16
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007e32:	79fb      	ldrb	r3, [r7, #7]
 8007e34:	4a0d      	ldr	r2, [pc, #52]	; (8007e6c <disk_initialize+0x48>)
 8007e36:	5cd3      	ldrb	r3, [r2, r3]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d111      	bne.n	8007e60 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007e3c:	79fb      	ldrb	r3, [r7, #7]
 8007e3e:	4a0b      	ldr	r2, [pc, #44]	; (8007e6c <disk_initialize+0x48>)
 8007e40:	2101      	movs	r1, #1
 8007e42:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007e44:	79fb      	ldrb	r3, [r7, #7]
 8007e46:	4a09      	ldr	r2, [pc, #36]	; (8007e6c <disk_initialize+0x48>)
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	4413      	add	r3, r2
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	79fa      	ldrb	r2, [r7, #7]
 8007e52:	4906      	ldr	r1, [pc, #24]	; (8007e6c <disk_initialize+0x48>)
 8007e54:	440a      	add	r2, r1
 8007e56:	7a12      	ldrb	r2, [r2, #8]
 8007e58:	4610      	mov	r0, r2
 8007e5a:	4798      	blx	r3
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3710      	adds	r7, #16
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	bf00      	nop
 8007e6c:	20001158 	.word	0x20001158

08007e70 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007e70:	b590      	push	{r4, r7, lr}
 8007e72:	b087      	sub	sp, #28
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	60b9      	str	r1, [r7, #8]
 8007e78:	607a      	str	r2, [r7, #4]
 8007e7a:	603b      	str	r3, [r7, #0]
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007e80:	7bfb      	ldrb	r3, [r7, #15]
 8007e82:	4a0a      	ldr	r2, [pc, #40]	; (8007eac <disk_read+0x3c>)
 8007e84:	009b      	lsls	r3, r3, #2
 8007e86:	4413      	add	r3, r2
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	689c      	ldr	r4, [r3, #8]
 8007e8c:	7bfb      	ldrb	r3, [r7, #15]
 8007e8e:	4a07      	ldr	r2, [pc, #28]	; (8007eac <disk_read+0x3c>)
 8007e90:	4413      	add	r3, r2
 8007e92:	7a18      	ldrb	r0, [r3, #8]
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	68b9      	ldr	r1, [r7, #8]
 8007e9a:	47a0      	blx	r4
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	75fb      	strb	r3, [r7, #23]
  return res;
 8007ea0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	371c      	adds	r7, #28
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd90      	pop	{r4, r7, pc}
 8007eaa:	bf00      	nop
 8007eac:	20001158 	.word	0x20001158

08007eb0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007eb0:	b590      	push	{r4, r7, lr}
 8007eb2:	b087      	sub	sp, #28
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	60b9      	str	r1, [r7, #8]
 8007eb8:	607a      	str	r2, [r7, #4]
 8007eba:	603b      	str	r3, [r7, #0]
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007ec0:	7bfb      	ldrb	r3, [r7, #15]
 8007ec2:	4a0a      	ldr	r2, [pc, #40]	; (8007eec <disk_write+0x3c>)
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	4413      	add	r3, r2
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	68dc      	ldr	r4, [r3, #12]
 8007ecc:	7bfb      	ldrb	r3, [r7, #15]
 8007ece:	4a07      	ldr	r2, [pc, #28]	; (8007eec <disk_write+0x3c>)
 8007ed0:	4413      	add	r3, r2
 8007ed2:	7a18      	ldrb	r0, [r3, #8]
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	687a      	ldr	r2, [r7, #4]
 8007ed8:	68b9      	ldr	r1, [r7, #8]
 8007eda:	47a0      	blx	r4
 8007edc:	4603      	mov	r3, r0
 8007ede:	75fb      	strb	r3, [r7, #23]
  return res;
 8007ee0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	371c      	adds	r7, #28
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd90      	pop	{r4, r7, pc}
 8007eea:	bf00      	nop
 8007eec:	20001158 	.word	0x20001158

08007ef0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	603a      	str	r2, [r7, #0]
 8007efa:	71fb      	strb	r3, [r7, #7]
 8007efc:	460b      	mov	r3, r1
 8007efe:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007f00:	79fb      	ldrb	r3, [r7, #7]
 8007f02:	4a09      	ldr	r2, [pc, #36]	; (8007f28 <disk_ioctl+0x38>)
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	4413      	add	r3, r2
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	691b      	ldr	r3, [r3, #16]
 8007f0c:	79fa      	ldrb	r2, [r7, #7]
 8007f0e:	4906      	ldr	r1, [pc, #24]	; (8007f28 <disk_ioctl+0x38>)
 8007f10:	440a      	add	r2, r1
 8007f12:	7a10      	ldrb	r0, [r2, #8]
 8007f14:	79b9      	ldrb	r1, [r7, #6]
 8007f16:	683a      	ldr	r2, [r7, #0]
 8007f18:	4798      	blx	r3
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	73fb      	strb	r3, [r7, #15]
  return res;
 8007f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3710      	adds	r7, #16
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}
 8007f28:	20001158 	.word	0x20001158

08007f2c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b085      	sub	sp, #20
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	3301      	adds	r3, #1
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007f3c:	89fb      	ldrh	r3, [r7, #14]
 8007f3e:	021b      	lsls	r3, r3, #8
 8007f40:	b21a      	sxth	r2, r3
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	781b      	ldrb	r3, [r3, #0]
 8007f46:	b21b      	sxth	r3, r3
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	b21b      	sxth	r3, r3
 8007f4c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007f4e:	89fb      	ldrh	r3, [r7, #14]
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3714      	adds	r7, #20
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr

08007f5c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b085      	sub	sp, #20
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	3303      	adds	r3, #3
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	021b      	lsls	r3, r3, #8
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	3202      	adds	r2, #2
 8007f74:	7812      	ldrb	r2, [r2, #0]
 8007f76:	4313      	orrs	r3, r2
 8007f78:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	021b      	lsls	r3, r3, #8
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	3201      	adds	r2, #1
 8007f82:	7812      	ldrb	r2, [r2, #0]
 8007f84:	4313      	orrs	r3, r2
 8007f86:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	021b      	lsls	r3, r3, #8
 8007f8c:	687a      	ldr	r2, [r7, #4]
 8007f8e:	7812      	ldrb	r2, [r2, #0]
 8007f90:	4313      	orrs	r3, r2
 8007f92:	60fb      	str	r3, [r7, #12]
	return rv;
 8007f94:	68fb      	ldr	r3, [r7, #12]
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3714      	adds	r7, #20
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr

08007fa2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007fa2:	b480      	push	{r7}
 8007fa4:	b083      	sub	sp, #12
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
 8007faa:	460b      	mov	r3, r1
 8007fac:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	1c5a      	adds	r2, r3, #1
 8007fb2:	607a      	str	r2, [r7, #4]
 8007fb4:	887a      	ldrh	r2, [r7, #2]
 8007fb6:	b2d2      	uxtb	r2, r2
 8007fb8:	701a      	strb	r2, [r3, #0]
 8007fba:	887b      	ldrh	r3, [r7, #2]
 8007fbc:	0a1b      	lsrs	r3, r3, #8
 8007fbe:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	1c5a      	adds	r2, r3, #1
 8007fc4:	607a      	str	r2, [r7, #4]
 8007fc6:	887a      	ldrh	r2, [r7, #2]
 8007fc8:	b2d2      	uxtb	r2, r2
 8007fca:	701a      	strb	r2, [r3, #0]
}
 8007fcc:	bf00      	nop
 8007fce:	370c      	adds	r7, #12
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr

08007fd8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	1c5a      	adds	r2, r3, #1
 8007fe6:	607a      	str	r2, [r7, #4]
 8007fe8:	683a      	ldr	r2, [r7, #0]
 8007fea:	b2d2      	uxtb	r2, r2
 8007fec:	701a      	strb	r2, [r3, #0]
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	0a1b      	lsrs	r3, r3, #8
 8007ff2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	1c5a      	adds	r2, r3, #1
 8007ff8:	607a      	str	r2, [r7, #4]
 8007ffa:	683a      	ldr	r2, [r7, #0]
 8007ffc:	b2d2      	uxtb	r2, r2
 8007ffe:	701a      	strb	r2, [r3, #0]
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	0a1b      	lsrs	r3, r3, #8
 8008004:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	1c5a      	adds	r2, r3, #1
 800800a:	607a      	str	r2, [r7, #4]
 800800c:	683a      	ldr	r2, [r7, #0]
 800800e:	b2d2      	uxtb	r2, r2
 8008010:	701a      	strb	r2, [r3, #0]
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	0a1b      	lsrs	r3, r3, #8
 8008016:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	1c5a      	adds	r2, r3, #1
 800801c:	607a      	str	r2, [r7, #4]
 800801e:	683a      	ldr	r2, [r7, #0]
 8008020:	b2d2      	uxtb	r2, r2
 8008022:	701a      	strb	r2, [r3, #0]
}
 8008024:	bf00      	nop
 8008026:	370c      	adds	r7, #12
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008030:	b480      	push	{r7}
 8008032:	b087      	sub	sp, #28
 8008034:	af00      	add	r7, sp, #0
 8008036:	60f8      	str	r0, [r7, #12]
 8008038:	60b9      	str	r1, [r7, #8]
 800803a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d00d      	beq.n	8008066 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800804a:	693a      	ldr	r2, [r7, #16]
 800804c:	1c53      	adds	r3, r2, #1
 800804e:	613b      	str	r3, [r7, #16]
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	1c59      	adds	r1, r3, #1
 8008054:	6179      	str	r1, [r7, #20]
 8008056:	7812      	ldrb	r2, [r2, #0]
 8008058:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	3b01      	subs	r3, #1
 800805e:	607b      	str	r3, [r7, #4]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d1f1      	bne.n	800804a <mem_cpy+0x1a>
	}
}
 8008066:	bf00      	nop
 8008068:	371c      	adds	r7, #28
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr

08008072 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008072:	b480      	push	{r7}
 8008074:	b087      	sub	sp, #28
 8008076:	af00      	add	r7, sp, #0
 8008078:	60f8      	str	r0, [r7, #12]
 800807a:	60b9      	str	r1, [r7, #8]
 800807c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	1c5a      	adds	r2, r3, #1
 8008086:	617a      	str	r2, [r7, #20]
 8008088:	68ba      	ldr	r2, [r7, #8]
 800808a:	b2d2      	uxtb	r2, r2
 800808c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	3b01      	subs	r3, #1
 8008092:	607b      	str	r3, [r7, #4]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d1f3      	bne.n	8008082 <mem_set+0x10>
}
 800809a:	bf00      	nop
 800809c:	bf00      	nop
 800809e:	371c      	adds	r7, #28
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80080a8:	b480      	push	{r7}
 80080aa:	b089      	sub	sp, #36	; 0x24
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	61fb      	str	r3, [r7, #28]
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80080bc:	2300      	movs	r3, #0
 80080be:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	1c5a      	adds	r2, r3, #1
 80080c4:	61fa      	str	r2, [r7, #28]
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	4619      	mov	r1, r3
 80080ca:	69bb      	ldr	r3, [r7, #24]
 80080cc:	1c5a      	adds	r2, r3, #1
 80080ce:	61ba      	str	r2, [r7, #24]
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	1acb      	subs	r3, r1, r3
 80080d4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	3b01      	subs	r3, #1
 80080da:	607b      	str	r3, [r7, #4]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d002      	beq.n	80080e8 <mem_cmp+0x40>
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d0eb      	beq.n	80080c0 <mem_cmp+0x18>

	return r;
 80080e8:	697b      	ldr	r3, [r7, #20]
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3724      	adds	r7, #36	; 0x24
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr

080080f6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80080f6:	b480      	push	{r7}
 80080f8:	b083      	sub	sp, #12
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	6078      	str	r0, [r7, #4]
 80080fe:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008100:	e002      	b.n	8008108 <chk_chr+0x12>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	3301      	adds	r3, #1
 8008106:	607b      	str	r3, [r7, #4]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d005      	beq.n	800811c <chk_chr+0x26>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	461a      	mov	r2, r3
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	4293      	cmp	r3, r2
 800811a:	d1f2      	bne.n	8008102 <chk_chr+0xc>
	return *str;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	781b      	ldrb	r3, [r3, #0]
}
 8008120:	4618      	mov	r0, r3
 8008122:	370c      	adds	r7, #12
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d009      	beq.n	800814e <lock_fs+0x22>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	68db      	ldr	r3, [r3, #12]
 800813e:	4618      	mov	r0, r3
 8008140:	f002 fdac 	bl	800ac9c <ff_req_grant>
 8008144:	4603      	mov	r3, r0
 8008146:	2b00      	cmp	r3, #0
 8008148:	d001      	beq.n	800814e <lock_fs+0x22>
 800814a:	2301      	movs	r3, #1
 800814c:	e000      	b.n	8008150 <lock_fs+0x24>
 800814e:	2300      	movs	r3, #0
}
 8008150:	4618      	mov	r0, r3
 8008152:	3708      	adds	r7, #8
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	460b      	mov	r3, r1
 8008162:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d00d      	beq.n	8008186 <unlock_fs+0x2e>
 800816a:	78fb      	ldrb	r3, [r7, #3]
 800816c:	2b0c      	cmp	r3, #12
 800816e:	d00a      	beq.n	8008186 <unlock_fs+0x2e>
 8008170:	78fb      	ldrb	r3, [r7, #3]
 8008172:	2b0b      	cmp	r3, #11
 8008174:	d007      	beq.n	8008186 <unlock_fs+0x2e>
 8008176:	78fb      	ldrb	r3, [r7, #3]
 8008178:	2b0f      	cmp	r3, #15
 800817a:	d004      	beq.n	8008186 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	68db      	ldr	r3, [r3, #12]
 8008180:	4618      	mov	r0, r3
 8008182:	f002 fda0 	bl	800acc6 <ff_rel_grant>
	}
}
 8008186:	bf00      	nop
 8008188:	3708      	adds	r7, #8
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
	...

08008190 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008190:	b480      	push	{r7}
 8008192:	b085      	sub	sp, #20
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800819a:	2300      	movs	r3, #0
 800819c:	60bb      	str	r3, [r7, #8]
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	60fb      	str	r3, [r7, #12]
 80081a2:	e029      	b.n	80081f8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80081a4:	4a27      	ldr	r2, [pc, #156]	; (8008244 <chk_lock+0xb4>)
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	011b      	lsls	r3, r3, #4
 80081aa:	4413      	add	r3, r2
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d01d      	beq.n	80081ee <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80081b2:	4a24      	ldr	r2, [pc, #144]	; (8008244 <chk_lock+0xb4>)
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	011b      	lsls	r3, r3, #4
 80081b8:	4413      	add	r3, r2
 80081ba:	681a      	ldr	r2, [r3, #0]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d116      	bne.n	80081f2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80081c4:	4a1f      	ldr	r2, [pc, #124]	; (8008244 <chk_lock+0xb4>)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	011b      	lsls	r3, r3, #4
 80081ca:	4413      	add	r3, r2
 80081cc:	3304      	adds	r3, #4
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d10c      	bne.n	80081f2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80081d8:	4a1a      	ldr	r2, [pc, #104]	; (8008244 <chk_lock+0xb4>)
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	011b      	lsls	r3, r3, #4
 80081de:	4413      	add	r3, r2
 80081e0:	3308      	adds	r3, #8
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d102      	bne.n	80081f2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80081ec:	e007      	b.n	80081fe <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80081ee:	2301      	movs	r3, #1
 80081f0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	3301      	adds	r3, #1
 80081f6:	60fb      	str	r3, [r7, #12]
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d9d2      	bls.n	80081a4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2b02      	cmp	r3, #2
 8008202:	d109      	bne.n	8008218 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d102      	bne.n	8008210 <chk_lock+0x80>
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	2b02      	cmp	r3, #2
 800820e:	d101      	bne.n	8008214 <chk_lock+0x84>
 8008210:	2300      	movs	r3, #0
 8008212:	e010      	b.n	8008236 <chk_lock+0xa6>
 8008214:	2312      	movs	r3, #18
 8008216:	e00e      	b.n	8008236 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d108      	bne.n	8008230 <chk_lock+0xa0>
 800821e:	4a09      	ldr	r2, [pc, #36]	; (8008244 <chk_lock+0xb4>)
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	011b      	lsls	r3, r3, #4
 8008224:	4413      	add	r3, r2
 8008226:	330c      	adds	r3, #12
 8008228:	881b      	ldrh	r3, [r3, #0]
 800822a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800822e:	d101      	bne.n	8008234 <chk_lock+0xa4>
 8008230:	2310      	movs	r3, #16
 8008232:	e000      	b.n	8008236 <chk_lock+0xa6>
 8008234:	2300      	movs	r3, #0
}
 8008236:	4618      	mov	r0, r3
 8008238:	3714      	adds	r7, #20
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr
 8008242:	bf00      	nop
 8008244:	20001138 	.word	0x20001138

08008248 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008248:	b480      	push	{r7}
 800824a:	b083      	sub	sp, #12
 800824c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800824e:	2300      	movs	r3, #0
 8008250:	607b      	str	r3, [r7, #4]
 8008252:	e002      	b.n	800825a <enq_lock+0x12>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	3301      	adds	r3, #1
 8008258:	607b      	str	r3, [r7, #4]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2b01      	cmp	r3, #1
 800825e:	d806      	bhi.n	800826e <enq_lock+0x26>
 8008260:	4a09      	ldr	r2, [pc, #36]	; (8008288 <enq_lock+0x40>)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	011b      	lsls	r3, r3, #4
 8008266:	4413      	add	r3, r2
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d1f2      	bne.n	8008254 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2b02      	cmp	r3, #2
 8008272:	bf14      	ite	ne
 8008274:	2301      	movne	r3, #1
 8008276:	2300      	moveq	r3, #0
 8008278:	b2db      	uxtb	r3, r3
}
 800827a:	4618      	mov	r0, r3
 800827c:	370c      	adds	r7, #12
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr
 8008286:	bf00      	nop
 8008288:	20001138 	.word	0x20001138

0800828c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800828c:	b480      	push	{r7}
 800828e:	b085      	sub	sp, #20
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008296:	2300      	movs	r3, #0
 8008298:	60fb      	str	r3, [r7, #12]
 800829a:	e01f      	b.n	80082dc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800829c:	4a41      	ldr	r2, [pc, #260]	; (80083a4 <inc_lock+0x118>)
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	011b      	lsls	r3, r3, #4
 80082a2:	4413      	add	r3, r2
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d113      	bne.n	80082d6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80082ae:	4a3d      	ldr	r2, [pc, #244]	; (80083a4 <inc_lock+0x118>)
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	011b      	lsls	r3, r3, #4
 80082b4:	4413      	add	r3, r2
 80082b6:	3304      	adds	r3, #4
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80082be:	429a      	cmp	r2, r3
 80082c0:	d109      	bne.n	80082d6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80082c2:	4a38      	ldr	r2, [pc, #224]	; (80083a4 <inc_lock+0x118>)
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	011b      	lsls	r3, r3, #4
 80082c8:	4413      	add	r3, r2
 80082ca:	3308      	adds	r3, #8
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d006      	beq.n	80082e4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	3301      	adds	r3, #1
 80082da:	60fb      	str	r3, [r7, #12]
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d9dc      	bls.n	800829c <inc_lock+0x10>
 80082e2:	e000      	b.n	80082e6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80082e4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2b02      	cmp	r3, #2
 80082ea:	d132      	bne.n	8008352 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80082ec:	2300      	movs	r3, #0
 80082ee:	60fb      	str	r3, [r7, #12]
 80082f0:	e002      	b.n	80082f8 <inc_lock+0x6c>
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	3301      	adds	r3, #1
 80082f6:	60fb      	str	r3, [r7, #12]
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d806      	bhi.n	800830c <inc_lock+0x80>
 80082fe:	4a29      	ldr	r2, [pc, #164]	; (80083a4 <inc_lock+0x118>)
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	011b      	lsls	r3, r3, #4
 8008304:	4413      	add	r3, r2
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d1f2      	bne.n	80082f2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2b02      	cmp	r3, #2
 8008310:	d101      	bne.n	8008316 <inc_lock+0x8a>
 8008312:	2300      	movs	r3, #0
 8008314:	e040      	b.n	8008398 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	4922      	ldr	r1, [pc, #136]	; (80083a4 <inc_lock+0x118>)
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	011b      	lsls	r3, r3, #4
 8008320:	440b      	add	r3, r1
 8008322:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	689a      	ldr	r2, [r3, #8]
 8008328:	491e      	ldr	r1, [pc, #120]	; (80083a4 <inc_lock+0x118>)
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	011b      	lsls	r3, r3, #4
 800832e:	440b      	add	r3, r1
 8008330:	3304      	adds	r3, #4
 8008332:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	695a      	ldr	r2, [r3, #20]
 8008338:	491a      	ldr	r1, [pc, #104]	; (80083a4 <inc_lock+0x118>)
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	011b      	lsls	r3, r3, #4
 800833e:	440b      	add	r3, r1
 8008340:	3308      	adds	r3, #8
 8008342:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008344:	4a17      	ldr	r2, [pc, #92]	; (80083a4 <inc_lock+0x118>)
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	011b      	lsls	r3, r3, #4
 800834a:	4413      	add	r3, r2
 800834c:	330c      	adds	r3, #12
 800834e:	2200      	movs	r2, #0
 8008350:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d009      	beq.n	800836c <inc_lock+0xe0>
 8008358:	4a12      	ldr	r2, [pc, #72]	; (80083a4 <inc_lock+0x118>)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	011b      	lsls	r3, r3, #4
 800835e:	4413      	add	r3, r2
 8008360:	330c      	adds	r3, #12
 8008362:	881b      	ldrh	r3, [r3, #0]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d001      	beq.n	800836c <inc_lock+0xe0>
 8008368:	2300      	movs	r3, #0
 800836a:	e015      	b.n	8008398 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d108      	bne.n	8008384 <inc_lock+0xf8>
 8008372:	4a0c      	ldr	r2, [pc, #48]	; (80083a4 <inc_lock+0x118>)
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	011b      	lsls	r3, r3, #4
 8008378:	4413      	add	r3, r2
 800837a:	330c      	adds	r3, #12
 800837c:	881b      	ldrh	r3, [r3, #0]
 800837e:	3301      	adds	r3, #1
 8008380:	b29a      	uxth	r2, r3
 8008382:	e001      	b.n	8008388 <inc_lock+0xfc>
 8008384:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008388:	4906      	ldr	r1, [pc, #24]	; (80083a4 <inc_lock+0x118>)
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	011b      	lsls	r3, r3, #4
 800838e:	440b      	add	r3, r1
 8008390:	330c      	adds	r3, #12
 8008392:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	3301      	adds	r3, #1
}
 8008398:	4618      	mov	r0, r3
 800839a:	3714      	adds	r7, #20
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr
 80083a4:	20001138 	.word	0x20001138

080083a8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b085      	sub	sp, #20
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	3b01      	subs	r3, #1
 80083b4:	607b      	str	r3, [r7, #4]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d825      	bhi.n	8008408 <dec_lock+0x60>
		n = Files[i].ctr;
 80083bc:	4a17      	ldr	r2, [pc, #92]	; (800841c <dec_lock+0x74>)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	011b      	lsls	r3, r3, #4
 80083c2:	4413      	add	r3, r2
 80083c4:	330c      	adds	r3, #12
 80083c6:	881b      	ldrh	r3, [r3, #0]
 80083c8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80083ca:	89fb      	ldrh	r3, [r7, #14]
 80083cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083d0:	d101      	bne.n	80083d6 <dec_lock+0x2e>
 80083d2:	2300      	movs	r3, #0
 80083d4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80083d6:	89fb      	ldrh	r3, [r7, #14]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d002      	beq.n	80083e2 <dec_lock+0x3a>
 80083dc:	89fb      	ldrh	r3, [r7, #14]
 80083de:	3b01      	subs	r3, #1
 80083e0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80083e2:	4a0e      	ldr	r2, [pc, #56]	; (800841c <dec_lock+0x74>)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	011b      	lsls	r3, r3, #4
 80083e8:	4413      	add	r3, r2
 80083ea:	330c      	adds	r3, #12
 80083ec:	89fa      	ldrh	r2, [r7, #14]
 80083ee:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80083f0:	89fb      	ldrh	r3, [r7, #14]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d105      	bne.n	8008402 <dec_lock+0x5a>
 80083f6:	4a09      	ldr	r2, [pc, #36]	; (800841c <dec_lock+0x74>)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	011b      	lsls	r3, r3, #4
 80083fc:	4413      	add	r3, r2
 80083fe:	2200      	movs	r2, #0
 8008400:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008402:	2300      	movs	r3, #0
 8008404:	737b      	strb	r3, [r7, #13]
 8008406:	e001      	b.n	800840c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008408:	2302      	movs	r3, #2
 800840a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800840c:	7b7b      	ldrb	r3, [r7, #13]
}
 800840e:	4618      	mov	r0, r3
 8008410:	3714      	adds	r7, #20
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr
 800841a:	bf00      	nop
 800841c:	20001138 	.word	0x20001138

08008420 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008420:	b480      	push	{r7}
 8008422:	b085      	sub	sp, #20
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008428:	2300      	movs	r3, #0
 800842a:	60fb      	str	r3, [r7, #12]
 800842c:	e010      	b.n	8008450 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800842e:	4a0d      	ldr	r2, [pc, #52]	; (8008464 <clear_lock+0x44>)
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	011b      	lsls	r3, r3, #4
 8008434:	4413      	add	r3, r2
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	429a      	cmp	r2, r3
 800843c:	d105      	bne.n	800844a <clear_lock+0x2a>
 800843e:	4a09      	ldr	r2, [pc, #36]	; (8008464 <clear_lock+0x44>)
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	011b      	lsls	r3, r3, #4
 8008444:	4413      	add	r3, r2
 8008446:	2200      	movs	r2, #0
 8008448:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	3301      	adds	r3, #1
 800844e:	60fb      	str	r3, [r7, #12]
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2b01      	cmp	r3, #1
 8008454:	d9eb      	bls.n	800842e <clear_lock+0xe>
	}
}
 8008456:	bf00      	nop
 8008458:	bf00      	nop
 800845a:	3714      	adds	r7, #20
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr
 8008464:	20001138 	.word	0x20001138

08008468 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b086      	sub	sp, #24
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008470:	2300      	movs	r3, #0
 8008472:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	78db      	ldrb	r3, [r3, #3]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d034      	beq.n	80084e6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008480:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	7858      	ldrb	r0, [r3, #1]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800848c:	2301      	movs	r3, #1
 800848e:	697a      	ldr	r2, [r7, #20]
 8008490:	f7ff fd0e 	bl	8007eb0 <disk_write>
 8008494:	4603      	mov	r3, r0
 8008496:	2b00      	cmp	r3, #0
 8008498:	d002      	beq.n	80084a0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800849a:	2301      	movs	r3, #1
 800849c:	73fb      	strb	r3, [r7, #15]
 800849e:	e022      	b.n	80084e6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084aa:	697a      	ldr	r2, [r7, #20]
 80084ac:	1ad2      	subs	r2, r2, r3
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	69db      	ldr	r3, [r3, #28]
 80084b2:	429a      	cmp	r2, r3
 80084b4:	d217      	bcs.n	80084e6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	789b      	ldrb	r3, [r3, #2]
 80084ba:	613b      	str	r3, [r7, #16]
 80084bc:	e010      	b.n	80084e0 <sync_window+0x78>
					wsect += fs->fsize;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	69db      	ldr	r3, [r3, #28]
 80084c2:	697a      	ldr	r2, [r7, #20]
 80084c4:	4413      	add	r3, r2
 80084c6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	7858      	ldrb	r0, [r3, #1]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80084d2:	2301      	movs	r3, #1
 80084d4:	697a      	ldr	r2, [r7, #20]
 80084d6:	f7ff fceb 	bl	8007eb0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	3b01      	subs	r3, #1
 80084de:	613b      	str	r3, [r7, #16]
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d8eb      	bhi.n	80084be <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80084e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3718      	adds	r7, #24
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b084      	sub	sp, #16
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80084fa:	2300      	movs	r3, #0
 80084fc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008502:	683a      	ldr	r2, [r7, #0]
 8008504:	429a      	cmp	r2, r3
 8008506:	d01b      	beq.n	8008540 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f7ff ffad 	bl	8008468 <sync_window>
 800850e:	4603      	mov	r3, r0
 8008510:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008512:	7bfb      	ldrb	r3, [r7, #15]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d113      	bne.n	8008540 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	7858      	ldrb	r0, [r3, #1]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008522:	2301      	movs	r3, #1
 8008524:	683a      	ldr	r2, [r7, #0]
 8008526:	f7ff fca3 	bl	8007e70 <disk_read>
 800852a:	4603      	mov	r3, r0
 800852c:	2b00      	cmp	r3, #0
 800852e:	d004      	beq.n	800853a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008530:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008534:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008536:	2301      	movs	r3, #1
 8008538:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	683a      	ldr	r2, [r7, #0]
 800853e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8008540:	7bfb      	ldrb	r3, [r7, #15]
}
 8008542:	4618      	mov	r0, r3
 8008544:	3710      	adds	r7, #16
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
	...

0800854c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f7ff ff87 	bl	8008468 <sync_window>
 800855a:	4603      	mov	r3, r0
 800855c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800855e:	7bfb      	ldrb	r3, [r7, #15]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d158      	bne.n	8008616 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	781b      	ldrb	r3, [r3, #0]
 8008568:	2b03      	cmp	r3, #3
 800856a:	d148      	bne.n	80085fe <sync_fs+0xb2>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	791b      	ldrb	r3, [r3, #4]
 8008570:	2b01      	cmp	r3, #1
 8008572:	d144      	bne.n	80085fe <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	3334      	adds	r3, #52	; 0x34
 8008578:	f44f 7200 	mov.w	r2, #512	; 0x200
 800857c:	2100      	movs	r1, #0
 800857e:	4618      	mov	r0, r3
 8008580:	f7ff fd77 	bl	8008072 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	3334      	adds	r3, #52	; 0x34
 8008588:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800858c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008590:	4618      	mov	r0, r3
 8008592:	f7ff fd06 	bl	8007fa2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	3334      	adds	r3, #52	; 0x34
 800859a:	4921      	ldr	r1, [pc, #132]	; (8008620 <sync_fs+0xd4>)
 800859c:	4618      	mov	r0, r3
 800859e:	f7ff fd1b 	bl	8007fd8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	3334      	adds	r3, #52	; 0x34
 80085a6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80085aa:	491e      	ldr	r1, [pc, #120]	; (8008624 <sync_fs+0xd8>)
 80085ac:	4618      	mov	r0, r3
 80085ae:	f7ff fd13 	bl	8007fd8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	3334      	adds	r3, #52	; 0x34
 80085b6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	695b      	ldr	r3, [r3, #20]
 80085be:	4619      	mov	r1, r3
 80085c0:	4610      	mov	r0, r2
 80085c2:	f7ff fd09 	bl	8007fd8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	3334      	adds	r3, #52	; 0x34
 80085ca:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	691b      	ldr	r3, [r3, #16]
 80085d2:	4619      	mov	r1, r3
 80085d4:	4610      	mov	r0, r2
 80085d6:	f7ff fcff 	bl	8007fd8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6a1b      	ldr	r3, [r3, #32]
 80085de:	1c5a      	adds	r2, r3, #1
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	7858      	ldrb	r0, [r3, #1]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085f2:	2301      	movs	r3, #1
 80085f4:	f7ff fc5c 	bl	8007eb0 <disk_write>
			fs->fsi_flag = 0;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2200      	movs	r2, #0
 80085fc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	785b      	ldrb	r3, [r3, #1]
 8008602:	2200      	movs	r2, #0
 8008604:	2100      	movs	r1, #0
 8008606:	4618      	mov	r0, r3
 8008608:	f7ff fc72 	bl	8007ef0 <disk_ioctl>
 800860c:	4603      	mov	r3, r0
 800860e:	2b00      	cmp	r3, #0
 8008610:	d001      	beq.n	8008616 <sync_fs+0xca>
 8008612:	2301      	movs	r3, #1
 8008614:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008616:	7bfb      	ldrb	r3, [r7, #15]
}
 8008618:	4618      	mov	r0, r3
 800861a:	3710      	adds	r7, #16
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}
 8008620:	41615252 	.word	0x41615252
 8008624:	61417272 	.word	0x61417272

08008628 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008628:	b480      	push	{r7}
 800862a:	b083      	sub	sp, #12
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	3b02      	subs	r3, #2
 8008636:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	699b      	ldr	r3, [r3, #24]
 800863c:	3b02      	subs	r3, #2
 800863e:	683a      	ldr	r2, [r7, #0]
 8008640:	429a      	cmp	r2, r3
 8008642:	d301      	bcc.n	8008648 <clust2sect+0x20>
 8008644:	2300      	movs	r3, #0
 8008646:	e008      	b.n	800865a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	895b      	ldrh	r3, [r3, #10]
 800864c:	461a      	mov	r2, r3
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	fb03 f202 	mul.w	r2, r3, r2
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008658:	4413      	add	r3, r2
}
 800865a:	4618      	mov	r0, r3
 800865c:	370c      	adds	r7, #12
 800865e:	46bd      	mov	sp, r7
 8008660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008664:	4770      	bx	lr

08008666 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008666:	b580      	push	{r7, lr}
 8008668:	b086      	sub	sp, #24
 800866a:	af00      	add	r7, sp, #0
 800866c:	6078      	str	r0, [r7, #4]
 800866e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	2b01      	cmp	r3, #1
 800867a:	d904      	bls.n	8008686 <get_fat+0x20>
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	699b      	ldr	r3, [r3, #24]
 8008680:	683a      	ldr	r2, [r7, #0]
 8008682:	429a      	cmp	r2, r3
 8008684:	d302      	bcc.n	800868c <get_fat+0x26>
		val = 1;	/* Internal error */
 8008686:	2301      	movs	r3, #1
 8008688:	617b      	str	r3, [r7, #20]
 800868a:	e08f      	b.n	80087ac <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800868c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008690:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	781b      	ldrb	r3, [r3, #0]
 8008696:	2b03      	cmp	r3, #3
 8008698:	d062      	beq.n	8008760 <get_fat+0xfa>
 800869a:	2b03      	cmp	r3, #3
 800869c:	dc7c      	bgt.n	8008798 <get_fat+0x132>
 800869e:	2b01      	cmp	r3, #1
 80086a0:	d002      	beq.n	80086a8 <get_fat+0x42>
 80086a2:	2b02      	cmp	r3, #2
 80086a4:	d042      	beq.n	800872c <get_fat+0xc6>
 80086a6:	e077      	b.n	8008798 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	60fb      	str	r3, [r7, #12]
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	085b      	lsrs	r3, r3, #1
 80086b0:	68fa      	ldr	r2, [r7, #12]
 80086b2:	4413      	add	r3, r2
 80086b4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	0a5b      	lsrs	r3, r3, #9
 80086be:	4413      	add	r3, r2
 80086c0:	4619      	mov	r1, r3
 80086c2:	6938      	ldr	r0, [r7, #16]
 80086c4:	f7ff ff14 	bl	80084f0 <move_window>
 80086c8:	4603      	mov	r3, r0
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d167      	bne.n	800879e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	1c5a      	adds	r2, r3, #1
 80086d2:	60fa      	str	r2, [r7, #12]
 80086d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086d8:	693a      	ldr	r2, [r7, #16]
 80086da:	4413      	add	r3, r2
 80086dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80086e0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	0a5b      	lsrs	r3, r3, #9
 80086ea:	4413      	add	r3, r2
 80086ec:	4619      	mov	r1, r3
 80086ee:	6938      	ldr	r0, [r7, #16]
 80086f0:	f7ff fefe 	bl	80084f0 <move_window>
 80086f4:	4603      	mov	r3, r0
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d153      	bne.n	80087a2 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008700:	693a      	ldr	r2, [r7, #16]
 8008702:	4413      	add	r3, r2
 8008704:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008708:	021b      	lsls	r3, r3, #8
 800870a:	461a      	mov	r2, r3
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	4313      	orrs	r3, r2
 8008710:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	f003 0301 	and.w	r3, r3, #1
 8008718:	2b00      	cmp	r3, #0
 800871a:	d002      	beq.n	8008722 <get_fat+0xbc>
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	091b      	lsrs	r3, r3, #4
 8008720:	e002      	b.n	8008728 <get_fat+0xc2>
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008728:	617b      	str	r3, [r7, #20]
			break;
 800872a:	e03f      	b.n	80087ac <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	0a1b      	lsrs	r3, r3, #8
 8008734:	4413      	add	r3, r2
 8008736:	4619      	mov	r1, r3
 8008738:	6938      	ldr	r0, [r7, #16]
 800873a:	f7ff fed9 	bl	80084f0 <move_window>
 800873e:	4603      	mov	r3, r0
 8008740:	2b00      	cmp	r3, #0
 8008742:	d130      	bne.n	80087a6 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	005b      	lsls	r3, r3, #1
 800874e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008752:	4413      	add	r3, r2
 8008754:	4618      	mov	r0, r3
 8008756:	f7ff fbe9 	bl	8007f2c <ld_word>
 800875a:	4603      	mov	r3, r0
 800875c:	617b      	str	r3, [r7, #20]
			break;
 800875e:	e025      	b.n	80087ac <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	09db      	lsrs	r3, r3, #7
 8008768:	4413      	add	r3, r2
 800876a:	4619      	mov	r1, r3
 800876c:	6938      	ldr	r0, [r7, #16]
 800876e:	f7ff febf 	bl	80084f0 <move_window>
 8008772:	4603      	mov	r3, r0
 8008774:	2b00      	cmp	r3, #0
 8008776:	d118      	bne.n	80087aa <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008786:	4413      	add	r3, r2
 8008788:	4618      	mov	r0, r3
 800878a:	f7ff fbe7 	bl	8007f5c <ld_dword>
 800878e:	4603      	mov	r3, r0
 8008790:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008794:	617b      	str	r3, [r7, #20]
			break;
 8008796:	e009      	b.n	80087ac <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008798:	2301      	movs	r3, #1
 800879a:	617b      	str	r3, [r7, #20]
 800879c:	e006      	b.n	80087ac <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800879e:	bf00      	nop
 80087a0:	e004      	b.n	80087ac <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80087a2:	bf00      	nop
 80087a4:	e002      	b.n	80087ac <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80087a6:	bf00      	nop
 80087a8:	e000      	b.n	80087ac <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80087aa:	bf00      	nop
		}
	}

	return val;
 80087ac:	697b      	ldr	r3, [r7, #20]
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3718      	adds	r7, #24
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}

080087b6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80087b6:	b590      	push	{r4, r7, lr}
 80087b8:	b089      	sub	sp, #36	; 0x24
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	60f8      	str	r0, [r7, #12]
 80087be:	60b9      	str	r1, [r7, #8]
 80087c0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80087c2:	2302      	movs	r3, #2
 80087c4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	f240 80d2 	bls.w	8008972 <put_fat+0x1bc>
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	699b      	ldr	r3, [r3, #24]
 80087d2:	68ba      	ldr	r2, [r7, #8]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	f080 80cc 	bcs.w	8008972 <put_fat+0x1bc>
		switch (fs->fs_type) {
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	2b03      	cmp	r3, #3
 80087e0:	f000 8096 	beq.w	8008910 <put_fat+0x15a>
 80087e4:	2b03      	cmp	r3, #3
 80087e6:	f300 80cd 	bgt.w	8008984 <put_fat+0x1ce>
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d002      	beq.n	80087f4 <put_fat+0x3e>
 80087ee:	2b02      	cmp	r3, #2
 80087f0:	d06e      	beq.n	80088d0 <put_fat+0x11a>
 80087f2:	e0c7      	b.n	8008984 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	61bb      	str	r3, [r7, #24]
 80087f8:	69bb      	ldr	r3, [r7, #24]
 80087fa:	085b      	lsrs	r3, r3, #1
 80087fc:	69ba      	ldr	r2, [r7, #24]
 80087fe:	4413      	add	r3, r2
 8008800:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008806:	69bb      	ldr	r3, [r7, #24]
 8008808:	0a5b      	lsrs	r3, r3, #9
 800880a:	4413      	add	r3, r2
 800880c:	4619      	mov	r1, r3
 800880e:	68f8      	ldr	r0, [r7, #12]
 8008810:	f7ff fe6e 	bl	80084f0 <move_window>
 8008814:	4603      	mov	r3, r0
 8008816:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008818:	7ffb      	ldrb	r3, [r7, #31]
 800881a:	2b00      	cmp	r3, #0
 800881c:	f040 80ab 	bne.w	8008976 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008826:	69bb      	ldr	r3, [r7, #24]
 8008828:	1c59      	adds	r1, r3, #1
 800882a:	61b9      	str	r1, [r7, #24]
 800882c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008830:	4413      	add	r3, r2
 8008832:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	f003 0301 	and.w	r3, r3, #1
 800883a:	2b00      	cmp	r3, #0
 800883c:	d00d      	beq.n	800885a <put_fat+0xa4>
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	b25b      	sxtb	r3, r3
 8008844:	f003 030f 	and.w	r3, r3, #15
 8008848:	b25a      	sxtb	r2, r3
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	b2db      	uxtb	r3, r3
 800884e:	011b      	lsls	r3, r3, #4
 8008850:	b25b      	sxtb	r3, r3
 8008852:	4313      	orrs	r3, r2
 8008854:	b25b      	sxtb	r3, r3
 8008856:	b2db      	uxtb	r3, r3
 8008858:	e001      	b.n	800885e <put_fat+0xa8>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	b2db      	uxtb	r3, r3
 800885e:	697a      	ldr	r2, [r7, #20]
 8008860:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2201      	movs	r2, #1
 8008866:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800886c:	69bb      	ldr	r3, [r7, #24]
 800886e:	0a5b      	lsrs	r3, r3, #9
 8008870:	4413      	add	r3, r2
 8008872:	4619      	mov	r1, r3
 8008874:	68f8      	ldr	r0, [r7, #12]
 8008876:	f7ff fe3b 	bl	80084f0 <move_window>
 800887a:	4603      	mov	r3, r0
 800887c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800887e:	7ffb      	ldrb	r3, [r7, #31]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d17a      	bne.n	800897a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800888a:	69bb      	ldr	r3, [r7, #24]
 800888c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008890:	4413      	add	r3, r2
 8008892:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	f003 0301 	and.w	r3, r3, #1
 800889a:	2b00      	cmp	r3, #0
 800889c:	d003      	beq.n	80088a6 <put_fat+0xf0>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	091b      	lsrs	r3, r3, #4
 80088a2:	b2db      	uxtb	r3, r3
 80088a4:	e00e      	b.n	80088c4 <put_fat+0x10e>
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	b25b      	sxtb	r3, r3
 80088ac:	f023 030f 	bic.w	r3, r3, #15
 80088b0:	b25a      	sxtb	r2, r3
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	0a1b      	lsrs	r3, r3, #8
 80088b6:	b25b      	sxtb	r3, r3
 80088b8:	f003 030f 	and.w	r3, r3, #15
 80088bc:	b25b      	sxtb	r3, r3
 80088be:	4313      	orrs	r3, r2
 80088c0:	b25b      	sxtb	r3, r3
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	697a      	ldr	r2, [r7, #20]
 80088c6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2201      	movs	r2, #1
 80088cc:	70da      	strb	r2, [r3, #3]
			break;
 80088ce:	e059      	b.n	8008984 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	0a1b      	lsrs	r3, r3, #8
 80088d8:	4413      	add	r3, r2
 80088da:	4619      	mov	r1, r3
 80088dc:	68f8      	ldr	r0, [r7, #12]
 80088de:	f7ff fe07 	bl	80084f0 <move_window>
 80088e2:	4603      	mov	r3, r0
 80088e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80088e6:	7ffb      	ldrb	r3, [r7, #31]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d148      	bne.n	800897e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	005b      	lsls	r3, r3, #1
 80088f6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80088fa:	4413      	add	r3, r2
 80088fc:	687a      	ldr	r2, [r7, #4]
 80088fe:	b292      	uxth	r2, r2
 8008900:	4611      	mov	r1, r2
 8008902:	4618      	mov	r0, r3
 8008904:	f7ff fb4d 	bl	8007fa2 <st_word>
			fs->wflag = 1;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2201      	movs	r2, #1
 800890c:	70da      	strb	r2, [r3, #3]
			break;
 800890e:	e039      	b.n	8008984 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	09db      	lsrs	r3, r3, #7
 8008918:	4413      	add	r3, r2
 800891a:	4619      	mov	r1, r3
 800891c:	68f8      	ldr	r0, [r7, #12]
 800891e:	f7ff fde7 	bl	80084f0 <move_window>
 8008922:	4603      	mov	r3, r0
 8008924:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008926:	7ffb      	ldrb	r3, [r7, #31]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d12a      	bne.n	8008982 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008940:	4413      	add	r3, r2
 8008942:	4618      	mov	r0, r3
 8008944:	f7ff fb0a 	bl	8007f5c <ld_dword>
 8008948:	4603      	mov	r3, r0
 800894a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800894e:	4323      	orrs	r3, r4
 8008950:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008960:	4413      	add	r3, r2
 8008962:	6879      	ldr	r1, [r7, #4]
 8008964:	4618      	mov	r0, r3
 8008966:	f7ff fb37 	bl	8007fd8 <st_dword>
			fs->wflag = 1;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2201      	movs	r2, #1
 800896e:	70da      	strb	r2, [r3, #3]
			break;
 8008970:	e008      	b.n	8008984 <put_fat+0x1ce>
		}
	}
 8008972:	bf00      	nop
 8008974:	e006      	b.n	8008984 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008976:	bf00      	nop
 8008978:	e004      	b.n	8008984 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800897a:	bf00      	nop
 800897c:	e002      	b.n	8008984 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800897e:	bf00      	nop
 8008980:	e000      	b.n	8008984 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008982:	bf00      	nop
	return res;
 8008984:	7ffb      	ldrb	r3, [r7, #31]
}
 8008986:	4618      	mov	r0, r3
 8008988:	3724      	adds	r7, #36	; 0x24
 800898a:	46bd      	mov	sp, r7
 800898c:	bd90      	pop	{r4, r7, pc}

0800898e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800898e:	b580      	push	{r7, lr}
 8008990:	b088      	sub	sp, #32
 8008992:	af00      	add	r7, sp, #0
 8008994:	60f8      	str	r0, [r7, #12]
 8008996:	60b9      	str	r1, [r7, #8]
 8008998:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800899a:	2300      	movs	r3, #0
 800899c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	2b01      	cmp	r3, #1
 80089a8:	d904      	bls.n	80089b4 <remove_chain+0x26>
 80089aa:	69bb      	ldr	r3, [r7, #24]
 80089ac:	699b      	ldr	r3, [r3, #24]
 80089ae:	68ba      	ldr	r2, [r7, #8]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d301      	bcc.n	80089b8 <remove_chain+0x2a>
 80089b4:	2302      	movs	r3, #2
 80089b6:	e04b      	b.n	8008a50 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d00c      	beq.n	80089d8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80089be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80089c2:	6879      	ldr	r1, [r7, #4]
 80089c4:	69b8      	ldr	r0, [r7, #24]
 80089c6:	f7ff fef6 	bl	80087b6 <put_fat>
 80089ca:	4603      	mov	r3, r0
 80089cc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80089ce:	7ffb      	ldrb	r3, [r7, #31]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d001      	beq.n	80089d8 <remove_chain+0x4a>
 80089d4:	7ffb      	ldrb	r3, [r7, #31]
 80089d6:	e03b      	b.n	8008a50 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80089d8:	68b9      	ldr	r1, [r7, #8]
 80089da:	68f8      	ldr	r0, [r7, #12]
 80089dc:	f7ff fe43 	bl	8008666 <get_fat>
 80089e0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d031      	beq.n	8008a4c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	d101      	bne.n	80089f2 <remove_chain+0x64>
 80089ee:	2302      	movs	r3, #2
 80089f0:	e02e      	b.n	8008a50 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089f8:	d101      	bne.n	80089fe <remove_chain+0x70>
 80089fa:	2301      	movs	r3, #1
 80089fc:	e028      	b.n	8008a50 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80089fe:	2200      	movs	r2, #0
 8008a00:	68b9      	ldr	r1, [r7, #8]
 8008a02:	69b8      	ldr	r0, [r7, #24]
 8008a04:	f7ff fed7 	bl	80087b6 <put_fat>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008a0c:	7ffb      	ldrb	r3, [r7, #31]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d001      	beq.n	8008a16 <remove_chain+0x88>
 8008a12:	7ffb      	ldrb	r3, [r7, #31]
 8008a14:	e01c      	b.n	8008a50 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008a16:	69bb      	ldr	r3, [r7, #24]
 8008a18:	695a      	ldr	r2, [r3, #20]
 8008a1a:	69bb      	ldr	r3, [r7, #24]
 8008a1c:	699b      	ldr	r3, [r3, #24]
 8008a1e:	3b02      	subs	r3, #2
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d20b      	bcs.n	8008a3c <remove_chain+0xae>
			fs->free_clst++;
 8008a24:	69bb      	ldr	r3, [r7, #24]
 8008a26:	695b      	ldr	r3, [r3, #20]
 8008a28:	1c5a      	adds	r2, r3, #1
 8008a2a:	69bb      	ldr	r3, [r7, #24]
 8008a2c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8008a2e:	69bb      	ldr	r3, [r7, #24]
 8008a30:	791b      	ldrb	r3, [r3, #4]
 8008a32:	f043 0301 	orr.w	r3, r3, #1
 8008a36:	b2da      	uxtb	r2, r3
 8008a38:	69bb      	ldr	r3, [r7, #24]
 8008a3a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008a40:	69bb      	ldr	r3, [r7, #24]
 8008a42:	699b      	ldr	r3, [r3, #24]
 8008a44:	68ba      	ldr	r2, [r7, #8]
 8008a46:	429a      	cmp	r2, r3
 8008a48:	d3c6      	bcc.n	80089d8 <remove_chain+0x4a>
 8008a4a:	e000      	b.n	8008a4e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008a4c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008a4e:	2300      	movs	r3, #0
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3720      	adds	r7, #32
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}

08008a58 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b088      	sub	sp, #32
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d10d      	bne.n	8008a8a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	691b      	ldr	r3, [r3, #16]
 8008a72:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008a74:	69bb      	ldr	r3, [r7, #24]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d004      	beq.n	8008a84 <create_chain+0x2c>
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	699b      	ldr	r3, [r3, #24]
 8008a7e:	69ba      	ldr	r2, [r7, #24]
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d31b      	bcc.n	8008abc <create_chain+0x64>
 8008a84:	2301      	movs	r3, #1
 8008a86:	61bb      	str	r3, [r7, #24]
 8008a88:	e018      	b.n	8008abc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008a8a:	6839      	ldr	r1, [r7, #0]
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f7ff fdea 	bl	8008666 <get_fat>
 8008a92:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2b01      	cmp	r3, #1
 8008a98:	d801      	bhi.n	8008a9e <create_chain+0x46>
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	e070      	b.n	8008b80 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008aa4:	d101      	bne.n	8008aaa <create_chain+0x52>
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	e06a      	b.n	8008b80 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	699b      	ldr	r3, [r3, #24]
 8008aae:	68fa      	ldr	r2, [r7, #12]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d201      	bcs.n	8008ab8 <create_chain+0x60>
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	e063      	b.n	8008b80 <create_chain+0x128>
		scl = clst;
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008abc:	69bb      	ldr	r3, [r7, #24]
 8008abe:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008ac0:	69fb      	ldr	r3, [r7, #28]
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	699b      	ldr	r3, [r3, #24]
 8008aca:	69fa      	ldr	r2, [r7, #28]
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d307      	bcc.n	8008ae0 <create_chain+0x88>
				ncl = 2;
 8008ad0:	2302      	movs	r3, #2
 8008ad2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008ad4:	69fa      	ldr	r2, [r7, #28]
 8008ad6:	69bb      	ldr	r3, [r7, #24]
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d901      	bls.n	8008ae0 <create_chain+0x88>
 8008adc:	2300      	movs	r3, #0
 8008ade:	e04f      	b.n	8008b80 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008ae0:	69f9      	ldr	r1, [r7, #28]
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f7ff fdbf 	bl	8008666 <get_fat>
 8008ae8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d00e      	beq.n	8008b0e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2b01      	cmp	r3, #1
 8008af4:	d003      	beq.n	8008afe <create_chain+0xa6>
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008afc:	d101      	bne.n	8008b02 <create_chain+0xaa>
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	e03e      	b.n	8008b80 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008b02:	69fa      	ldr	r2, [r7, #28]
 8008b04:	69bb      	ldr	r3, [r7, #24]
 8008b06:	429a      	cmp	r2, r3
 8008b08:	d1da      	bne.n	8008ac0 <create_chain+0x68>
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	e038      	b.n	8008b80 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008b0e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008b10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b14:	69f9      	ldr	r1, [r7, #28]
 8008b16:	6938      	ldr	r0, [r7, #16]
 8008b18:	f7ff fe4d 	bl	80087b6 <put_fat>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008b20:	7dfb      	ldrb	r3, [r7, #23]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d109      	bne.n	8008b3a <create_chain+0xe2>
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d006      	beq.n	8008b3a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008b2c:	69fa      	ldr	r2, [r7, #28]
 8008b2e:	6839      	ldr	r1, [r7, #0]
 8008b30:	6938      	ldr	r0, [r7, #16]
 8008b32:	f7ff fe40 	bl	80087b6 <put_fat>
 8008b36:	4603      	mov	r3, r0
 8008b38:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008b3a:	7dfb      	ldrb	r3, [r7, #23]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d116      	bne.n	8008b6e <create_chain+0x116>
		fs->last_clst = ncl;
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	69fa      	ldr	r2, [r7, #28]
 8008b44:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	695a      	ldr	r2, [r3, #20]
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	699b      	ldr	r3, [r3, #24]
 8008b4e:	3b02      	subs	r3, #2
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d804      	bhi.n	8008b5e <create_chain+0x106>
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	695b      	ldr	r3, [r3, #20]
 8008b58:	1e5a      	subs	r2, r3, #1
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	791b      	ldrb	r3, [r3, #4]
 8008b62:	f043 0301 	orr.w	r3, r3, #1
 8008b66:	b2da      	uxtb	r2, r3
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	711a      	strb	r2, [r3, #4]
 8008b6c:	e007      	b.n	8008b7e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008b6e:	7dfb      	ldrb	r3, [r7, #23]
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d102      	bne.n	8008b7a <create_chain+0x122>
 8008b74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b78:	e000      	b.n	8008b7c <create_chain+0x124>
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008b7e:	69fb      	ldr	r3, [r7, #28]
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3720      	adds	r7, #32
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b087      	sub	sp, #28
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b9c:	3304      	adds	r3, #4
 8008b9e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	0a5b      	lsrs	r3, r3, #9
 8008ba4:	68fa      	ldr	r2, [r7, #12]
 8008ba6:	8952      	ldrh	r2, [r2, #10]
 8008ba8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008bac:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	1d1a      	adds	r2, r3, #4
 8008bb2:	613a      	str	r2, [r7, #16]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d101      	bne.n	8008bc2 <clmt_clust+0x3a>
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	e010      	b.n	8008be4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8008bc2:	697a      	ldr	r2, [r7, #20]
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d307      	bcc.n	8008bda <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8008bca:	697a      	ldr	r2, [r7, #20]
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	1ad3      	subs	r3, r2, r3
 8008bd0:	617b      	str	r3, [r7, #20]
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	3304      	adds	r3, #4
 8008bd6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008bd8:	e7e9      	b.n	8008bae <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8008bda:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	681a      	ldr	r2, [r3, #0]
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	4413      	add	r3, r2
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	371c      	adds	r7, #28
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr

08008bf0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b086      	sub	sp, #24
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c06:	d204      	bcs.n	8008c12 <dir_sdi+0x22>
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	f003 031f 	and.w	r3, r3, #31
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d001      	beq.n	8008c16 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008c12:	2302      	movs	r3, #2
 8008c14:	e063      	b.n	8008cde <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	683a      	ldr	r2, [r7, #0]
 8008c1a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	689b      	ldr	r3, [r3, #8]
 8008c20:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d106      	bne.n	8008c36 <dir_sdi+0x46>
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	781b      	ldrb	r3, [r3, #0]
 8008c2c:	2b02      	cmp	r3, #2
 8008c2e:	d902      	bls.n	8008c36 <dir_sdi+0x46>
		clst = fs->dirbase;
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c34:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d10c      	bne.n	8008c56 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	095b      	lsrs	r3, r3, #5
 8008c40:	693a      	ldr	r2, [r7, #16]
 8008c42:	8912      	ldrh	r2, [r2, #8]
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d301      	bcc.n	8008c4c <dir_sdi+0x5c>
 8008c48:	2302      	movs	r3, #2
 8008c4a:	e048      	b.n	8008cde <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	61da      	str	r2, [r3, #28]
 8008c54:	e029      	b.n	8008caa <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	895b      	ldrh	r3, [r3, #10]
 8008c5a:	025b      	lsls	r3, r3, #9
 8008c5c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008c5e:	e019      	b.n	8008c94 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6979      	ldr	r1, [r7, #20]
 8008c64:	4618      	mov	r0, r3
 8008c66:	f7ff fcfe 	bl	8008666 <get_fat>
 8008c6a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c72:	d101      	bne.n	8008c78 <dir_sdi+0x88>
 8008c74:	2301      	movs	r3, #1
 8008c76:	e032      	b.n	8008cde <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	2b01      	cmp	r3, #1
 8008c7c:	d904      	bls.n	8008c88 <dir_sdi+0x98>
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	699b      	ldr	r3, [r3, #24]
 8008c82:	697a      	ldr	r2, [r7, #20]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d301      	bcc.n	8008c8c <dir_sdi+0x9c>
 8008c88:	2302      	movs	r3, #2
 8008c8a:	e028      	b.n	8008cde <dir_sdi+0xee>
			ofs -= csz;
 8008c8c:	683a      	ldr	r2, [r7, #0]
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	1ad3      	subs	r3, r2, r3
 8008c92:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008c94:	683a      	ldr	r2, [r7, #0]
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	429a      	cmp	r2, r3
 8008c9a:	d2e1      	bcs.n	8008c60 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8008c9c:	6979      	ldr	r1, [r7, #20]
 8008c9e:	6938      	ldr	r0, [r7, #16]
 8008ca0:	f7ff fcc2 	bl	8008628 <clust2sect>
 8008ca4:	4602      	mov	r2, r0
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	697a      	ldr	r2, [r7, #20]
 8008cae:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	69db      	ldr	r3, [r3, #28]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d101      	bne.n	8008cbc <dir_sdi+0xcc>
 8008cb8:	2302      	movs	r3, #2
 8008cba:	e010      	b.n	8008cde <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	69da      	ldr	r2, [r3, #28]
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	0a5b      	lsrs	r3, r3, #9
 8008cc4:	441a      	add	r2, r3
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cd6:	441a      	add	r2, r3
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008cdc:	2300      	movs	r3, #0
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3718      	adds	r7, #24
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}

08008ce6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008ce6:	b580      	push	{r7, lr}
 8008ce8:	b086      	sub	sp, #24
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6078      	str	r0, [r7, #4]
 8008cee:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	695b      	ldr	r3, [r3, #20]
 8008cfa:	3320      	adds	r3, #32
 8008cfc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	69db      	ldr	r3, [r3, #28]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d003      	beq.n	8008d0e <dir_next+0x28>
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d0c:	d301      	bcc.n	8008d12 <dir_next+0x2c>
 8008d0e:	2304      	movs	r3, #4
 8008d10:	e0aa      	b.n	8008e68 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	f040 8098 	bne.w	8008e4e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	69db      	ldr	r3, [r3, #28]
 8008d22:	1c5a      	adds	r2, r3, #1
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	699b      	ldr	r3, [r3, #24]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d10b      	bne.n	8008d48 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	095b      	lsrs	r3, r3, #5
 8008d34:	68fa      	ldr	r2, [r7, #12]
 8008d36:	8912      	ldrh	r2, [r2, #8]
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	f0c0 8088 	bcc.w	8008e4e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2200      	movs	r2, #0
 8008d42:	61da      	str	r2, [r3, #28]
 8008d44:	2304      	movs	r3, #4
 8008d46:	e08f      	b.n	8008e68 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	0a5b      	lsrs	r3, r3, #9
 8008d4c:	68fa      	ldr	r2, [r7, #12]
 8008d4e:	8952      	ldrh	r2, [r2, #10]
 8008d50:	3a01      	subs	r2, #1
 8008d52:	4013      	ands	r3, r2
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d17a      	bne.n	8008e4e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	699b      	ldr	r3, [r3, #24]
 8008d5e:	4619      	mov	r1, r3
 8008d60:	4610      	mov	r0, r2
 8008d62:	f7ff fc80 	bl	8008666 <get_fat>
 8008d66:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	d801      	bhi.n	8008d72 <dir_next+0x8c>
 8008d6e:	2302      	movs	r3, #2
 8008d70:	e07a      	b.n	8008e68 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d78:	d101      	bne.n	8008d7e <dir_next+0x98>
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	e074      	b.n	8008e68 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	699b      	ldr	r3, [r3, #24]
 8008d82:	697a      	ldr	r2, [r7, #20]
 8008d84:	429a      	cmp	r2, r3
 8008d86:	d358      	bcc.n	8008e3a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d104      	bne.n	8008d98 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2200      	movs	r2, #0
 8008d92:	61da      	str	r2, [r3, #28]
 8008d94:	2304      	movs	r3, #4
 8008d96:	e067      	b.n	8008e68 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	699b      	ldr	r3, [r3, #24]
 8008d9e:	4619      	mov	r1, r3
 8008da0:	4610      	mov	r0, r2
 8008da2:	f7ff fe59 	bl	8008a58 <create_chain>
 8008da6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d101      	bne.n	8008db2 <dir_next+0xcc>
 8008dae:	2307      	movs	r3, #7
 8008db0:	e05a      	b.n	8008e68 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d101      	bne.n	8008dbc <dir_next+0xd6>
 8008db8:	2302      	movs	r3, #2
 8008dba:	e055      	b.n	8008e68 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008dc2:	d101      	bne.n	8008dc8 <dir_next+0xe2>
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	e04f      	b.n	8008e68 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008dc8:	68f8      	ldr	r0, [r7, #12]
 8008dca:	f7ff fb4d 	bl	8008468 <sync_window>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d001      	beq.n	8008dd8 <dir_next+0xf2>
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	e047      	b.n	8008e68 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	3334      	adds	r3, #52	; 0x34
 8008ddc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008de0:	2100      	movs	r1, #0
 8008de2:	4618      	mov	r0, r3
 8008de4:	f7ff f945 	bl	8008072 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008de8:	2300      	movs	r3, #0
 8008dea:	613b      	str	r3, [r7, #16]
 8008dec:	6979      	ldr	r1, [r7, #20]
 8008dee:	68f8      	ldr	r0, [r7, #12]
 8008df0:	f7ff fc1a 	bl	8008628 <clust2sect>
 8008df4:	4602      	mov	r2, r0
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	631a      	str	r2, [r3, #48]	; 0x30
 8008dfa:	e012      	b.n	8008e22 <dir_next+0x13c>
						fs->wflag = 1;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2201      	movs	r2, #1
 8008e00:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008e02:	68f8      	ldr	r0, [r7, #12]
 8008e04:	f7ff fb30 	bl	8008468 <sync_window>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d001      	beq.n	8008e12 <dir_next+0x12c>
 8008e0e:	2301      	movs	r3, #1
 8008e10:	e02a      	b.n	8008e68 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	3301      	adds	r3, #1
 8008e16:	613b      	str	r3, [r7, #16]
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e1c:	1c5a      	adds	r2, r3, #1
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	631a      	str	r2, [r3, #48]	; 0x30
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	895b      	ldrh	r3, [r3, #10]
 8008e26:	461a      	mov	r2, r3
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d3e6      	bcc.n	8008dfc <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	1ad2      	subs	r2, r2, r3
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	697a      	ldr	r2, [r7, #20]
 8008e3e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008e40:	6979      	ldr	r1, [r7, #20]
 8008e42:	68f8      	ldr	r0, [r7, #12]
 8008e44:	f7ff fbf0 	bl	8008628 <clust2sect>
 8008e48:	4602      	mov	r2, r0
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	68ba      	ldr	r2, [r7, #8]
 8008e52:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e60:	441a      	add	r2, r3
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008e66:	2300      	movs	r3, #0
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3718      	adds	r7, #24
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b086      	sub	sp, #24
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008e80:	2100      	movs	r1, #0
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f7ff feb4 	bl	8008bf0 <dir_sdi>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008e8c:	7dfb      	ldrb	r3, [r7, #23]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d12b      	bne.n	8008eea <dir_alloc+0x7a>
		n = 0;
 8008e92:	2300      	movs	r3, #0
 8008e94:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	69db      	ldr	r3, [r3, #28]
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	68f8      	ldr	r0, [r7, #12]
 8008e9e:	f7ff fb27 	bl	80084f0 <move_window>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008ea6:	7dfb      	ldrb	r3, [r7, #23]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d11d      	bne.n	8008ee8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6a1b      	ldr	r3, [r3, #32]
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	2be5      	cmp	r3, #229	; 0xe5
 8008eb4:	d004      	beq.n	8008ec0 <dir_alloc+0x50>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6a1b      	ldr	r3, [r3, #32]
 8008eba:	781b      	ldrb	r3, [r3, #0]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d107      	bne.n	8008ed0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	613b      	str	r3, [r7, #16]
 8008ec6:	693a      	ldr	r2, [r7, #16]
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d102      	bne.n	8008ed4 <dir_alloc+0x64>
 8008ece:	e00c      	b.n	8008eea <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008ed4:	2101      	movs	r1, #1
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f7ff ff05 	bl	8008ce6 <dir_next>
 8008edc:	4603      	mov	r3, r0
 8008ede:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008ee0:	7dfb      	ldrb	r3, [r7, #23]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d0d7      	beq.n	8008e96 <dir_alloc+0x26>
 8008ee6:	e000      	b.n	8008eea <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008ee8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008eea:	7dfb      	ldrb	r3, [r7, #23]
 8008eec:	2b04      	cmp	r3, #4
 8008eee:	d101      	bne.n	8008ef4 <dir_alloc+0x84>
 8008ef0:	2307      	movs	r3, #7
 8008ef2:	75fb      	strb	r3, [r7, #23]
	return res;
 8008ef4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3718      	adds	r7, #24
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}

08008efe <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008efe:	b580      	push	{r7, lr}
 8008f00:	b084      	sub	sp, #16
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	6078      	str	r0, [r7, #4]
 8008f06:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	331a      	adds	r3, #26
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f7ff f80d 	bl	8007f2c <ld_word>
 8008f12:	4603      	mov	r3, r0
 8008f14:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	2b03      	cmp	r3, #3
 8008f1c:	d109      	bne.n	8008f32 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	3314      	adds	r3, #20
 8008f22:	4618      	mov	r0, r3
 8008f24:	f7ff f802 	bl	8007f2c <ld_word>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	041b      	lsls	r3, r3, #16
 8008f2c:	68fa      	ldr	r2, [r7, #12]
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008f32:	68fb      	ldr	r3, [r7, #12]
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3710      	adds	r7, #16
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}

08008f3c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b084      	sub	sp, #16
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	60f8      	str	r0, [r7, #12]
 8008f44:	60b9      	str	r1, [r7, #8]
 8008f46:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	331a      	adds	r3, #26
 8008f4c:	687a      	ldr	r2, [r7, #4]
 8008f4e:	b292      	uxth	r2, r2
 8008f50:	4611      	mov	r1, r2
 8008f52:	4618      	mov	r0, r3
 8008f54:	f7ff f825 	bl	8007fa2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	2b03      	cmp	r3, #3
 8008f5e:	d109      	bne.n	8008f74 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	f103 0214 	add.w	r2, r3, #20
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	0c1b      	lsrs	r3, r3, #16
 8008f6a:	b29b      	uxth	r3, r3
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	4610      	mov	r0, r2
 8008f70:	f7ff f817 	bl	8007fa2 <st_word>
	}
}
 8008f74:	bf00      	nop
 8008f76:	3710      	adds	r7, #16
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}

08008f7c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b086      	sub	sp, #24
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8008f86:	2304      	movs	r3, #4
 8008f88:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8008f90:	e03c      	b.n	800900c <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	69db      	ldr	r3, [r3, #28]
 8008f96:	4619      	mov	r1, r3
 8008f98:	6938      	ldr	r0, [r7, #16]
 8008f9a:	f7ff faa9 	bl	80084f0 <move_window>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008fa2:	7dfb      	ldrb	r3, [r7, #23]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d136      	bne.n	8009016 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6a1b      	ldr	r3, [r3, #32]
 8008fac:	781b      	ldrb	r3, [r3, #0]
 8008fae:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8008fb0:	7bfb      	ldrb	r3, [r7, #15]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d102      	bne.n	8008fbc <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8008fb6:	2304      	movs	r3, #4
 8008fb8:	75fb      	strb	r3, [r7, #23]
 8008fba:	e031      	b.n	8009020 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6a1b      	ldr	r3, [r3, #32]
 8008fc0:	330b      	adds	r3, #11
 8008fc2:	781b      	ldrb	r3, [r3, #0]
 8008fc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008fc8:	73bb      	strb	r3, [r7, #14]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	7bba      	ldrb	r2, [r7, #14]
 8008fce:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8008fd0:	7bfb      	ldrb	r3, [r7, #15]
 8008fd2:	2be5      	cmp	r3, #229	; 0xe5
 8008fd4:	d011      	beq.n	8008ffa <dir_read+0x7e>
 8008fd6:	7bfb      	ldrb	r3, [r7, #15]
 8008fd8:	2b2e      	cmp	r3, #46	; 0x2e
 8008fda:	d00e      	beq.n	8008ffa <dir_read+0x7e>
 8008fdc:	7bbb      	ldrb	r3, [r7, #14]
 8008fde:	2b0f      	cmp	r3, #15
 8008fe0:	d00b      	beq.n	8008ffa <dir_read+0x7e>
 8008fe2:	7bbb      	ldrb	r3, [r7, #14]
 8008fe4:	f023 0320 	bic.w	r3, r3, #32
 8008fe8:	2b08      	cmp	r3, #8
 8008fea:	bf0c      	ite	eq
 8008fec:	2301      	moveq	r3, #1
 8008fee:	2300      	movne	r3, #0
 8008ff0:	b2db      	uxtb	r3, r3
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d00f      	beq.n	800901a <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8008ffa:	2100      	movs	r1, #0
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f7ff fe72 	bl	8008ce6 <dir_next>
 8009002:	4603      	mov	r3, r0
 8009004:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009006:	7dfb      	ldrb	r3, [r7, #23]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d108      	bne.n	800901e <dir_read+0xa2>
	while (dp->sect) {
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	69db      	ldr	r3, [r3, #28]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d1be      	bne.n	8008f92 <dir_read+0x16>
 8009014:	e004      	b.n	8009020 <dir_read+0xa4>
		if (res != FR_OK) break;
 8009016:	bf00      	nop
 8009018:	e002      	b.n	8009020 <dir_read+0xa4>
				break;
 800901a:	bf00      	nop
 800901c:	e000      	b.n	8009020 <dir_read+0xa4>
		if (res != FR_OK) break;
 800901e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8009020:	7dfb      	ldrb	r3, [r7, #23]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d002      	beq.n	800902c <dir_read+0xb0>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2200      	movs	r2, #0
 800902a:	61da      	str	r2, [r3, #28]
	return res;
 800902c:	7dfb      	ldrb	r3, [r7, #23]
}
 800902e:	4618      	mov	r0, r3
 8009030:	3718      	adds	r7, #24
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}

08009036 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009036:	b580      	push	{r7, lr}
 8009038:	b086      	sub	sp, #24
 800903a:	af00      	add	r7, sp, #0
 800903c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009044:	2100      	movs	r1, #0
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f7ff fdd2 	bl	8008bf0 <dir_sdi>
 800904c:	4603      	mov	r3, r0
 800904e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009050:	7dfb      	ldrb	r3, [r7, #23]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d001      	beq.n	800905a <dir_find+0x24>
 8009056:	7dfb      	ldrb	r3, [r7, #23]
 8009058:	e03e      	b.n	80090d8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	69db      	ldr	r3, [r3, #28]
 800905e:	4619      	mov	r1, r3
 8009060:	6938      	ldr	r0, [r7, #16]
 8009062:	f7ff fa45 	bl	80084f0 <move_window>
 8009066:	4603      	mov	r3, r0
 8009068:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800906a:	7dfb      	ldrb	r3, [r7, #23]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d12f      	bne.n	80090d0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6a1b      	ldr	r3, [r3, #32]
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009078:	7bfb      	ldrb	r3, [r7, #15]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d102      	bne.n	8009084 <dir_find+0x4e>
 800907e:	2304      	movs	r3, #4
 8009080:	75fb      	strb	r3, [r7, #23]
 8009082:	e028      	b.n	80090d6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6a1b      	ldr	r3, [r3, #32]
 8009088:	330b      	adds	r3, #11
 800908a:	781b      	ldrb	r3, [r3, #0]
 800908c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009090:	b2da      	uxtb	r2, r3
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6a1b      	ldr	r3, [r3, #32]
 800909a:	330b      	adds	r3, #11
 800909c:	781b      	ldrb	r3, [r3, #0]
 800909e:	f003 0308 	and.w	r3, r3, #8
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d10a      	bne.n	80090bc <dir_find+0x86>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6a18      	ldr	r0, [r3, #32]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	3324      	adds	r3, #36	; 0x24
 80090ae:	220b      	movs	r2, #11
 80090b0:	4619      	mov	r1, r3
 80090b2:	f7fe fff9 	bl	80080a8 <mem_cmp>
 80090b6:	4603      	mov	r3, r0
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d00b      	beq.n	80090d4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80090bc:	2100      	movs	r1, #0
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f7ff fe11 	bl	8008ce6 <dir_next>
 80090c4:	4603      	mov	r3, r0
 80090c6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80090c8:	7dfb      	ldrb	r3, [r7, #23]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d0c5      	beq.n	800905a <dir_find+0x24>
 80090ce:	e002      	b.n	80090d6 <dir_find+0xa0>
		if (res != FR_OK) break;
 80090d0:	bf00      	nop
 80090d2:	e000      	b.n	80090d6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80090d4:	bf00      	nop

	return res;
 80090d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3718      	adds	r7, #24
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}

080090e0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b084      	sub	sp, #16
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80090ee:	2101      	movs	r1, #1
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f7ff febd 	bl	8008e70 <dir_alloc>
 80090f6:	4603      	mov	r3, r0
 80090f8:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80090fa:	7bfb      	ldrb	r3, [r7, #15]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d11c      	bne.n	800913a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	69db      	ldr	r3, [r3, #28]
 8009104:	4619      	mov	r1, r3
 8009106:	68b8      	ldr	r0, [r7, #8]
 8009108:	f7ff f9f2 	bl	80084f0 <move_window>
 800910c:	4603      	mov	r3, r0
 800910e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009110:	7bfb      	ldrb	r3, [r7, #15]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d111      	bne.n	800913a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6a1b      	ldr	r3, [r3, #32]
 800911a:	2220      	movs	r2, #32
 800911c:	2100      	movs	r1, #0
 800911e:	4618      	mov	r0, r3
 8009120:	f7fe ffa7 	bl	8008072 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6a18      	ldr	r0, [r3, #32]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	3324      	adds	r3, #36	; 0x24
 800912c:	220b      	movs	r2, #11
 800912e:	4619      	mov	r1, r3
 8009130:	f7fe ff7e 	bl	8008030 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	2201      	movs	r2, #1
 8009138:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800913a:	7bfb      	ldrb	r3, [r7, #15]
}
 800913c:	4618      	mov	r0, r3
 800913e:	3710      	adds	r7, #16
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}

08009144 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b084      	sub	sp, #16
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	69db      	ldr	r3, [r3, #28]
 8009156:	4619      	mov	r1, r3
 8009158:	68f8      	ldr	r0, [r7, #12]
 800915a:	f7ff f9c9 	bl	80084f0 <move_window>
 800915e:	4603      	mov	r3, r0
 8009160:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8009162:	7afb      	ldrb	r3, [r7, #11]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d106      	bne.n	8009176 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6a1b      	ldr	r3, [r3, #32]
 800916c:	22e5      	movs	r2, #229	; 0xe5
 800916e:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	2201      	movs	r2, #1
 8009174:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8009176:	7afb      	ldrb	r3, [r7, #11]
}
 8009178:	4618      	mov	r0, r3
 800917a:	3710      	adds	r7, #16
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}

08009180 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b086      	sub	sp, #24
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
 8009188:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	2200      	movs	r2, #0
 800918e:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	69db      	ldr	r3, [r3, #28]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d04e      	beq.n	8009236 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8009198:	2300      	movs	r3, #0
 800919a:	613b      	str	r3, [r7, #16]
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 80091a0:	e021      	b.n	80091e6 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6a1a      	ldr	r2, [r3, #32]
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	1c59      	adds	r1, r3, #1
 80091aa:	6179      	str	r1, [r7, #20]
 80091ac:	4413      	add	r3, r2
 80091ae:	781b      	ldrb	r3, [r3, #0]
 80091b0:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 80091b2:	7bfb      	ldrb	r3, [r7, #15]
 80091b4:	2b20      	cmp	r3, #32
 80091b6:	d100      	bne.n	80091ba <get_fileinfo+0x3a>
 80091b8:	e015      	b.n	80091e6 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80091ba:	7bfb      	ldrb	r3, [r7, #15]
 80091bc:	2b05      	cmp	r3, #5
 80091be:	d101      	bne.n	80091c4 <get_fileinfo+0x44>
 80091c0:	23e5      	movs	r3, #229	; 0xe5
 80091c2:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	2b09      	cmp	r3, #9
 80091c8:	d106      	bne.n	80091d8 <get_fileinfo+0x58>
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	1c5a      	adds	r2, r3, #1
 80091ce:	613a      	str	r2, [r7, #16]
 80091d0:	683a      	ldr	r2, [r7, #0]
 80091d2:	4413      	add	r3, r2
 80091d4:	222e      	movs	r2, #46	; 0x2e
 80091d6:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	1c5a      	adds	r2, r3, #1
 80091dc:	613a      	str	r2, [r7, #16]
 80091de:	683a      	ldr	r2, [r7, #0]
 80091e0:	4413      	add	r3, r2
 80091e2:	7bfa      	ldrb	r2, [r7, #15]
 80091e4:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	2b0a      	cmp	r3, #10
 80091ea:	d9da      	bls.n	80091a2 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 80091ec:	683a      	ldr	r2, [r7, #0]
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	4413      	add	r3, r2
 80091f2:	3309      	adds	r3, #9
 80091f4:	2200      	movs	r2, #0
 80091f6:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6a1b      	ldr	r3, [r3, #32]
 80091fc:	7ada      	ldrb	r2, [r3, #11]
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6a1b      	ldr	r3, [r3, #32]
 8009206:	331c      	adds	r3, #28
 8009208:	4618      	mov	r0, r3
 800920a:	f7fe fea7 	bl	8007f5c <ld_dword>
 800920e:	4602      	mov	r2, r0
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6a1b      	ldr	r3, [r3, #32]
 8009218:	3316      	adds	r3, #22
 800921a:	4618      	mov	r0, r3
 800921c:	f7fe fe9e 	bl	8007f5c <ld_dword>
 8009220:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	b29a      	uxth	r2, r3
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	80da      	strh	r2, [r3, #6]
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	0c1b      	lsrs	r3, r3, #16
 800922e:	b29a      	uxth	r2, r3
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	809a      	strh	r2, [r3, #4]
 8009234:	e000      	b.n	8009238 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8009236:	bf00      	nop
}
 8009238:	3718      	adds	r7, #24
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
	...

08009240 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b088      	sub	sp, #32
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	60fb      	str	r3, [r7, #12]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	3324      	adds	r3, #36	; 0x24
 8009254:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009256:	220b      	movs	r2, #11
 8009258:	2120      	movs	r1, #32
 800925a:	68b8      	ldr	r0, [r7, #8]
 800925c:	f7fe ff09 	bl	8008072 <mem_set>
	si = i = 0; ni = 8;
 8009260:	2300      	movs	r3, #0
 8009262:	613b      	str	r3, [r7, #16]
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	61fb      	str	r3, [r7, #28]
 8009268:	2308      	movs	r3, #8
 800926a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800926c:	69fb      	ldr	r3, [r7, #28]
 800926e:	1c5a      	adds	r2, r3, #1
 8009270:	61fa      	str	r2, [r7, #28]
 8009272:	68fa      	ldr	r2, [r7, #12]
 8009274:	4413      	add	r3, r2
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800927a:	7efb      	ldrb	r3, [r7, #27]
 800927c:	2b20      	cmp	r3, #32
 800927e:	d94e      	bls.n	800931e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009280:	7efb      	ldrb	r3, [r7, #27]
 8009282:	2b2f      	cmp	r3, #47	; 0x2f
 8009284:	d006      	beq.n	8009294 <create_name+0x54>
 8009286:	7efb      	ldrb	r3, [r7, #27]
 8009288:	2b5c      	cmp	r3, #92	; 0x5c
 800928a:	d110      	bne.n	80092ae <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800928c:	e002      	b.n	8009294 <create_name+0x54>
 800928e:	69fb      	ldr	r3, [r7, #28]
 8009290:	3301      	adds	r3, #1
 8009292:	61fb      	str	r3, [r7, #28]
 8009294:	68fa      	ldr	r2, [r7, #12]
 8009296:	69fb      	ldr	r3, [r7, #28]
 8009298:	4413      	add	r3, r2
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	2b2f      	cmp	r3, #47	; 0x2f
 800929e:	d0f6      	beq.n	800928e <create_name+0x4e>
 80092a0:	68fa      	ldr	r2, [r7, #12]
 80092a2:	69fb      	ldr	r3, [r7, #28]
 80092a4:	4413      	add	r3, r2
 80092a6:	781b      	ldrb	r3, [r3, #0]
 80092a8:	2b5c      	cmp	r3, #92	; 0x5c
 80092aa:	d0f0      	beq.n	800928e <create_name+0x4e>
			break;
 80092ac:	e038      	b.n	8009320 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80092ae:	7efb      	ldrb	r3, [r7, #27]
 80092b0:	2b2e      	cmp	r3, #46	; 0x2e
 80092b2:	d003      	beq.n	80092bc <create_name+0x7c>
 80092b4:	693a      	ldr	r2, [r7, #16]
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d30c      	bcc.n	80092d6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	2b0b      	cmp	r3, #11
 80092c0:	d002      	beq.n	80092c8 <create_name+0x88>
 80092c2:	7efb      	ldrb	r3, [r7, #27]
 80092c4:	2b2e      	cmp	r3, #46	; 0x2e
 80092c6:	d001      	beq.n	80092cc <create_name+0x8c>
 80092c8:	2306      	movs	r3, #6
 80092ca:	e044      	b.n	8009356 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80092cc:	2308      	movs	r3, #8
 80092ce:	613b      	str	r3, [r7, #16]
 80092d0:	230b      	movs	r3, #11
 80092d2:	617b      	str	r3, [r7, #20]
			continue;
 80092d4:	e022      	b.n	800931c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80092d6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	da04      	bge.n	80092e8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80092de:	7efb      	ldrb	r3, [r7, #27]
 80092e0:	3b80      	subs	r3, #128	; 0x80
 80092e2:	4a1f      	ldr	r2, [pc, #124]	; (8009360 <create_name+0x120>)
 80092e4:	5cd3      	ldrb	r3, [r2, r3]
 80092e6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80092e8:	7efb      	ldrb	r3, [r7, #27]
 80092ea:	4619      	mov	r1, r3
 80092ec:	481d      	ldr	r0, [pc, #116]	; (8009364 <create_name+0x124>)
 80092ee:	f7fe ff02 	bl	80080f6 <chk_chr>
 80092f2:	4603      	mov	r3, r0
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d001      	beq.n	80092fc <create_name+0xbc>
 80092f8:	2306      	movs	r3, #6
 80092fa:	e02c      	b.n	8009356 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80092fc:	7efb      	ldrb	r3, [r7, #27]
 80092fe:	2b60      	cmp	r3, #96	; 0x60
 8009300:	d905      	bls.n	800930e <create_name+0xce>
 8009302:	7efb      	ldrb	r3, [r7, #27]
 8009304:	2b7a      	cmp	r3, #122	; 0x7a
 8009306:	d802      	bhi.n	800930e <create_name+0xce>
 8009308:	7efb      	ldrb	r3, [r7, #27]
 800930a:	3b20      	subs	r3, #32
 800930c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	1c5a      	adds	r2, r3, #1
 8009312:	613a      	str	r2, [r7, #16]
 8009314:	68ba      	ldr	r2, [r7, #8]
 8009316:	4413      	add	r3, r2
 8009318:	7efa      	ldrb	r2, [r7, #27]
 800931a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800931c:	e7a6      	b.n	800926c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800931e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009320:	68fa      	ldr	r2, [r7, #12]
 8009322:	69fb      	ldr	r3, [r7, #28]
 8009324:	441a      	add	r2, r3
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d101      	bne.n	8009334 <create_name+0xf4>
 8009330:	2306      	movs	r3, #6
 8009332:	e010      	b.n	8009356 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	781b      	ldrb	r3, [r3, #0]
 8009338:	2be5      	cmp	r3, #229	; 0xe5
 800933a:	d102      	bne.n	8009342 <create_name+0x102>
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	2205      	movs	r2, #5
 8009340:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009342:	7efb      	ldrb	r3, [r7, #27]
 8009344:	2b20      	cmp	r3, #32
 8009346:	d801      	bhi.n	800934c <create_name+0x10c>
 8009348:	2204      	movs	r2, #4
 800934a:	e000      	b.n	800934e <create_name+0x10e>
 800934c:	2200      	movs	r2, #0
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	330b      	adds	r3, #11
 8009352:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009354:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8009356:	4618      	mov	r0, r3
 8009358:	3720      	adds	r7, #32
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
 800935e:	bf00      	nop
 8009360:	0800f8f4 	.word	0x0800f8f4
 8009364:	0800f7b4 	.word	0x0800f7b4

08009368 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b086      	sub	sp, #24
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
 8009370:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800937c:	e002      	b.n	8009384 <follow_path+0x1c>
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	3301      	adds	r3, #1
 8009382:	603b      	str	r3, [r7, #0]
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	781b      	ldrb	r3, [r3, #0]
 8009388:	2b2f      	cmp	r3, #47	; 0x2f
 800938a:	d0f8      	beq.n	800937e <follow_path+0x16>
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	781b      	ldrb	r3, [r3, #0]
 8009390:	2b5c      	cmp	r3, #92	; 0x5c
 8009392:	d0f4      	beq.n	800937e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	2200      	movs	r2, #0
 8009398:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	781b      	ldrb	r3, [r3, #0]
 800939e:	2b1f      	cmp	r3, #31
 80093a0:	d80a      	bhi.n	80093b8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2280      	movs	r2, #128	; 0x80
 80093a6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80093aa:	2100      	movs	r1, #0
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f7ff fc1f 	bl	8008bf0 <dir_sdi>
 80093b2:	4603      	mov	r3, r0
 80093b4:	75fb      	strb	r3, [r7, #23]
 80093b6:	e043      	b.n	8009440 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80093b8:	463b      	mov	r3, r7
 80093ba:	4619      	mov	r1, r3
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f7ff ff3f 	bl	8009240 <create_name>
 80093c2:	4603      	mov	r3, r0
 80093c4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80093c6:	7dfb      	ldrb	r3, [r7, #23]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d134      	bne.n	8009436 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f7ff fe32 	bl	8009036 <dir_find>
 80093d2:	4603      	mov	r3, r0
 80093d4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80093dc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80093de:	7dfb      	ldrb	r3, [r7, #23]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d00a      	beq.n	80093fa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80093e4:	7dfb      	ldrb	r3, [r7, #23]
 80093e6:	2b04      	cmp	r3, #4
 80093e8:	d127      	bne.n	800943a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80093ea:	7afb      	ldrb	r3, [r7, #11]
 80093ec:	f003 0304 	and.w	r3, r3, #4
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d122      	bne.n	800943a <follow_path+0xd2>
 80093f4:	2305      	movs	r3, #5
 80093f6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80093f8:	e01f      	b.n	800943a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80093fa:	7afb      	ldrb	r3, [r7, #11]
 80093fc:	f003 0304 	and.w	r3, r3, #4
 8009400:	2b00      	cmp	r3, #0
 8009402:	d11c      	bne.n	800943e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	799b      	ldrb	r3, [r3, #6]
 8009408:	f003 0310 	and.w	r3, r3, #16
 800940c:	2b00      	cmp	r3, #0
 800940e:	d102      	bne.n	8009416 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009410:	2305      	movs	r3, #5
 8009412:	75fb      	strb	r3, [r7, #23]
 8009414:	e014      	b.n	8009440 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	695b      	ldr	r3, [r3, #20]
 8009420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009424:	4413      	add	r3, r2
 8009426:	4619      	mov	r1, r3
 8009428:	68f8      	ldr	r0, [r7, #12]
 800942a:	f7ff fd68 	bl	8008efe <ld_clust>
 800942e:	4602      	mov	r2, r0
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009434:	e7c0      	b.n	80093b8 <follow_path+0x50>
			if (res != FR_OK) break;
 8009436:	bf00      	nop
 8009438:	e002      	b.n	8009440 <follow_path+0xd8>
				break;
 800943a:	bf00      	nop
 800943c:	e000      	b.n	8009440 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800943e:	bf00      	nop
			}
		}
	}

	return res;
 8009440:	7dfb      	ldrb	r3, [r7, #23]
}
 8009442:	4618      	mov	r0, r3
 8009444:	3718      	adds	r7, #24
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}

0800944a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800944a:	b480      	push	{r7}
 800944c:	b087      	sub	sp, #28
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009452:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009456:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d031      	beq.n	80094c4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	617b      	str	r3, [r7, #20]
 8009466:	e002      	b.n	800946e <get_ldnumber+0x24>
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	3301      	adds	r3, #1
 800946c:	617b      	str	r3, [r7, #20]
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	781b      	ldrb	r3, [r3, #0]
 8009472:	2b20      	cmp	r3, #32
 8009474:	d903      	bls.n	800947e <get_ldnumber+0x34>
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	781b      	ldrb	r3, [r3, #0]
 800947a:	2b3a      	cmp	r3, #58	; 0x3a
 800947c:	d1f4      	bne.n	8009468 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	781b      	ldrb	r3, [r3, #0]
 8009482:	2b3a      	cmp	r3, #58	; 0x3a
 8009484:	d11c      	bne.n	80094c0 <get_ldnumber+0x76>
			tp = *path;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	1c5a      	adds	r2, r3, #1
 8009490:	60fa      	str	r2, [r7, #12]
 8009492:	781b      	ldrb	r3, [r3, #0]
 8009494:	3b30      	subs	r3, #48	; 0x30
 8009496:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	2b09      	cmp	r3, #9
 800949c:	d80e      	bhi.n	80094bc <get_ldnumber+0x72>
 800949e:	68fa      	ldr	r2, [r7, #12]
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d10a      	bne.n	80094bc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d107      	bne.n	80094bc <get_ldnumber+0x72>
					vol = (int)i;
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	3301      	adds	r3, #1
 80094b4:	617b      	str	r3, [r7, #20]
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	697a      	ldr	r2, [r7, #20]
 80094ba:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	e002      	b.n	80094c6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80094c0:	2300      	movs	r3, #0
 80094c2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80094c4:	693b      	ldr	r3, [r7, #16]
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	371c      	adds	r7, #28
 80094ca:	46bd      	mov	sp, r7
 80094cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d0:	4770      	bx	lr
	...

080094d4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b082      	sub	sp, #8
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2200      	movs	r2, #0
 80094e2:	70da      	strb	r2, [r3, #3]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80094ea:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80094ec:	6839      	ldr	r1, [r7, #0]
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f7fe fffe 	bl	80084f0 <move_window>
 80094f4:	4603      	mov	r3, r0
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d001      	beq.n	80094fe <check_fs+0x2a>
 80094fa:	2304      	movs	r3, #4
 80094fc:	e038      	b.n	8009570 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	3334      	adds	r3, #52	; 0x34
 8009502:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009506:	4618      	mov	r0, r3
 8009508:	f7fe fd10 	bl	8007f2c <ld_word>
 800950c:	4603      	mov	r3, r0
 800950e:	461a      	mov	r2, r3
 8009510:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009514:	429a      	cmp	r2, r3
 8009516:	d001      	beq.n	800951c <check_fs+0x48>
 8009518:	2303      	movs	r3, #3
 800951a:	e029      	b.n	8009570 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009522:	2be9      	cmp	r3, #233	; 0xe9
 8009524:	d009      	beq.n	800953a <check_fs+0x66>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800952c:	2beb      	cmp	r3, #235	; 0xeb
 800952e:	d11e      	bne.n	800956e <check_fs+0x9a>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009536:	2b90      	cmp	r3, #144	; 0x90
 8009538:	d119      	bne.n	800956e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	3334      	adds	r3, #52	; 0x34
 800953e:	3336      	adds	r3, #54	; 0x36
 8009540:	4618      	mov	r0, r3
 8009542:	f7fe fd0b 	bl	8007f5c <ld_dword>
 8009546:	4603      	mov	r3, r0
 8009548:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800954c:	4a0a      	ldr	r2, [pc, #40]	; (8009578 <check_fs+0xa4>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d101      	bne.n	8009556 <check_fs+0x82>
 8009552:	2300      	movs	r3, #0
 8009554:	e00c      	b.n	8009570 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	3334      	adds	r3, #52	; 0x34
 800955a:	3352      	adds	r3, #82	; 0x52
 800955c:	4618      	mov	r0, r3
 800955e:	f7fe fcfd 	bl	8007f5c <ld_dword>
 8009562:	4603      	mov	r3, r0
 8009564:	4a05      	ldr	r2, [pc, #20]	; (800957c <check_fs+0xa8>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d101      	bne.n	800956e <check_fs+0x9a>
 800956a:	2300      	movs	r3, #0
 800956c:	e000      	b.n	8009570 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800956e:	2302      	movs	r3, #2
}
 8009570:	4618      	mov	r0, r3
 8009572:	3708      	adds	r7, #8
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}
 8009578:	00544146 	.word	0x00544146
 800957c:	33544146 	.word	0x33544146

08009580 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b096      	sub	sp, #88	; 0x58
 8009584:	af00      	add	r7, sp, #0
 8009586:	60f8      	str	r0, [r7, #12]
 8009588:	60b9      	str	r1, [r7, #8]
 800958a:	4613      	mov	r3, r2
 800958c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	2200      	movs	r2, #0
 8009592:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009594:	68f8      	ldr	r0, [r7, #12]
 8009596:	f7ff ff58 	bl	800944a <get_ldnumber>
 800959a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800959c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800959e:	2b00      	cmp	r3, #0
 80095a0:	da01      	bge.n	80095a6 <find_volume+0x26>
 80095a2:	230b      	movs	r3, #11
 80095a4:	e235      	b.n	8009a12 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80095a6:	4aa5      	ldr	r2, [pc, #660]	; (800983c <find_volume+0x2bc>)
 80095a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095ae:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80095b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d101      	bne.n	80095ba <find_volume+0x3a>
 80095b6:	230c      	movs	r3, #12
 80095b8:	e22b      	b.n	8009a12 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 80095ba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80095bc:	f7fe fdb6 	bl	800812c <lock_fs>
 80095c0:	4603      	mov	r3, r0
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d101      	bne.n	80095ca <find_volume+0x4a>
 80095c6:	230f      	movs	r3, #15
 80095c8:	e223      	b.n	8009a12 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095ce:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80095d0:	79fb      	ldrb	r3, [r7, #7]
 80095d2:	f023 0301 	bic.w	r3, r3, #1
 80095d6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80095d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d01a      	beq.n	8009616 <find_volume+0x96>
		stat = disk_status(fs->drv);
 80095e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095e2:	785b      	ldrb	r3, [r3, #1]
 80095e4:	4618      	mov	r0, r3
 80095e6:	f7fe fc03 	bl	8007df0 <disk_status>
 80095ea:	4603      	mov	r3, r0
 80095ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80095f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80095f4:	f003 0301 	and.w	r3, r3, #1
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d10c      	bne.n	8009616 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80095fc:	79fb      	ldrb	r3, [r7, #7]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d007      	beq.n	8009612 <find_volume+0x92>
 8009602:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009606:	f003 0304 	and.w	r3, r3, #4
 800960a:	2b00      	cmp	r3, #0
 800960c:	d001      	beq.n	8009612 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800960e:	230a      	movs	r3, #10
 8009610:	e1ff      	b.n	8009a12 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 8009612:	2300      	movs	r3, #0
 8009614:	e1fd      	b.n	8009a12 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009618:	2200      	movs	r2, #0
 800961a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800961c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800961e:	b2da      	uxtb	r2, r3
 8009620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009622:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009626:	785b      	ldrb	r3, [r3, #1]
 8009628:	4618      	mov	r0, r3
 800962a:	f7fe fbfb 	bl	8007e24 <disk_initialize>
 800962e:	4603      	mov	r3, r0
 8009630:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009634:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009638:	f003 0301 	and.w	r3, r3, #1
 800963c:	2b00      	cmp	r3, #0
 800963e:	d001      	beq.n	8009644 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009640:	2303      	movs	r3, #3
 8009642:	e1e6      	b.n	8009a12 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009644:	79fb      	ldrb	r3, [r7, #7]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d007      	beq.n	800965a <find_volume+0xda>
 800964a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800964e:	f003 0304 	and.w	r3, r3, #4
 8009652:	2b00      	cmp	r3, #0
 8009654:	d001      	beq.n	800965a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8009656:	230a      	movs	r3, #10
 8009658:	e1db      	b.n	8009a12 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800965a:	2300      	movs	r3, #0
 800965c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800965e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009660:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009662:	f7ff ff37 	bl	80094d4 <check_fs>
 8009666:	4603      	mov	r3, r0
 8009668:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800966c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009670:	2b02      	cmp	r3, #2
 8009672:	d149      	bne.n	8009708 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009674:	2300      	movs	r3, #0
 8009676:	643b      	str	r3, [r7, #64]	; 0x40
 8009678:	e01e      	b.n	80096b8 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800967a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800967c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009682:	011b      	lsls	r3, r3, #4
 8009684:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009688:	4413      	add	r3, r2
 800968a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800968c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800968e:	3304      	adds	r3, #4
 8009690:	781b      	ldrb	r3, [r3, #0]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d006      	beq.n	80096a4 <find_volume+0x124>
 8009696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009698:	3308      	adds	r3, #8
 800969a:	4618      	mov	r0, r3
 800969c:	f7fe fc5e 	bl	8007f5c <ld_dword>
 80096a0:	4602      	mov	r2, r0
 80096a2:	e000      	b.n	80096a6 <find_volume+0x126>
 80096a4:	2200      	movs	r2, #0
 80096a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096a8:	009b      	lsls	r3, r3, #2
 80096aa:	3358      	adds	r3, #88	; 0x58
 80096ac:	443b      	add	r3, r7
 80096ae:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80096b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096b4:	3301      	adds	r3, #1
 80096b6:	643b      	str	r3, [r7, #64]	; 0x40
 80096b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096ba:	2b03      	cmp	r3, #3
 80096bc:	d9dd      	bls.n	800967a <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80096be:	2300      	movs	r3, #0
 80096c0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80096c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d002      	beq.n	80096ce <find_volume+0x14e>
 80096c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096ca:	3b01      	subs	r3, #1
 80096cc:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80096ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096d0:	009b      	lsls	r3, r3, #2
 80096d2:	3358      	adds	r3, #88	; 0x58
 80096d4:	443b      	add	r3, r7
 80096d6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80096da:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80096dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d005      	beq.n	80096ee <find_volume+0x16e>
 80096e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80096e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80096e6:	f7ff fef5 	bl	80094d4 <check_fs>
 80096ea:	4603      	mov	r3, r0
 80096ec:	e000      	b.n	80096f0 <find_volume+0x170>
 80096ee:	2303      	movs	r3, #3
 80096f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80096f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	d905      	bls.n	8009708 <find_volume+0x188>
 80096fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096fe:	3301      	adds	r3, #1
 8009700:	643b      	str	r3, [r7, #64]	; 0x40
 8009702:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009704:	2b03      	cmp	r3, #3
 8009706:	d9e2      	bls.n	80096ce <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009708:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800970c:	2b04      	cmp	r3, #4
 800970e:	d101      	bne.n	8009714 <find_volume+0x194>
 8009710:	2301      	movs	r3, #1
 8009712:	e17e      	b.n	8009a12 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009714:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009718:	2b01      	cmp	r3, #1
 800971a:	d901      	bls.n	8009720 <find_volume+0x1a0>
 800971c:	230d      	movs	r3, #13
 800971e:	e178      	b.n	8009a12 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009722:	3334      	adds	r3, #52	; 0x34
 8009724:	330b      	adds	r3, #11
 8009726:	4618      	mov	r0, r3
 8009728:	f7fe fc00 	bl	8007f2c <ld_word>
 800972c:	4603      	mov	r3, r0
 800972e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009732:	d001      	beq.n	8009738 <find_volume+0x1b8>
 8009734:	230d      	movs	r3, #13
 8009736:	e16c      	b.n	8009a12 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800973a:	3334      	adds	r3, #52	; 0x34
 800973c:	3316      	adds	r3, #22
 800973e:	4618      	mov	r0, r3
 8009740:	f7fe fbf4 	bl	8007f2c <ld_word>
 8009744:	4603      	mov	r3, r0
 8009746:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009748:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800974a:	2b00      	cmp	r3, #0
 800974c:	d106      	bne.n	800975c <find_volume+0x1dc>
 800974e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009750:	3334      	adds	r3, #52	; 0x34
 8009752:	3324      	adds	r3, #36	; 0x24
 8009754:	4618      	mov	r0, r3
 8009756:	f7fe fc01 	bl	8007f5c <ld_dword>
 800975a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800975c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800975e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009760:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009764:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800976a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800976c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800976e:	789b      	ldrb	r3, [r3, #2]
 8009770:	2b01      	cmp	r3, #1
 8009772:	d005      	beq.n	8009780 <find_volume+0x200>
 8009774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009776:	789b      	ldrb	r3, [r3, #2]
 8009778:	2b02      	cmp	r3, #2
 800977a:	d001      	beq.n	8009780 <find_volume+0x200>
 800977c:	230d      	movs	r3, #13
 800977e:	e148      	b.n	8009a12 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009782:	789b      	ldrb	r3, [r3, #2]
 8009784:	461a      	mov	r2, r3
 8009786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009788:	fb02 f303 	mul.w	r3, r2, r3
 800978c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800978e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009790:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009794:	b29a      	uxth	r2, r3
 8009796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009798:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800979a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800979c:	895b      	ldrh	r3, [r3, #10]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d008      	beq.n	80097b4 <find_volume+0x234>
 80097a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a4:	895b      	ldrh	r3, [r3, #10]
 80097a6:	461a      	mov	r2, r3
 80097a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097aa:	895b      	ldrh	r3, [r3, #10]
 80097ac:	3b01      	subs	r3, #1
 80097ae:	4013      	ands	r3, r2
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d001      	beq.n	80097b8 <find_volume+0x238>
 80097b4:	230d      	movs	r3, #13
 80097b6:	e12c      	b.n	8009a12 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80097b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ba:	3334      	adds	r3, #52	; 0x34
 80097bc:	3311      	adds	r3, #17
 80097be:	4618      	mov	r0, r3
 80097c0:	f7fe fbb4 	bl	8007f2c <ld_word>
 80097c4:	4603      	mov	r3, r0
 80097c6:	461a      	mov	r2, r3
 80097c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ca:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80097cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ce:	891b      	ldrh	r3, [r3, #8]
 80097d0:	f003 030f 	and.w	r3, r3, #15
 80097d4:	b29b      	uxth	r3, r3
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d001      	beq.n	80097de <find_volume+0x25e>
 80097da:	230d      	movs	r3, #13
 80097dc:	e119      	b.n	8009a12 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80097de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e0:	3334      	adds	r3, #52	; 0x34
 80097e2:	3313      	adds	r3, #19
 80097e4:	4618      	mov	r0, r3
 80097e6:	f7fe fba1 	bl	8007f2c <ld_word>
 80097ea:	4603      	mov	r3, r0
 80097ec:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80097ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d106      	bne.n	8009802 <find_volume+0x282>
 80097f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097f6:	3334      	adds	r3, #52	; 0x34
 80097f8:	3320      	adds	r3, #32
 80097fa:	4618      	mov	r0, r3
 80097fc:	f7fe fbae 	bl	8007f5c <ld_dword>
 8009800:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009804:	3334      	adds	r3, #52	; 0x34
 8009806:	330e      	adds	r3, #14
 8009808:	4618      	mov	r0, r3
 800980a:	f7fe fb8f 	bl	8007f2c <ld_word>
 800980e:	4603      	mov	r3, r0
 8009810:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009812:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009814:	2b00      	cmp	r3, #0
 8009816:	d101      	bne.n	800981c <find_volume+0x29c>
 8009818:	230d      	movs	r3, #13
 800981a:	e0fa      	b.n	8009a12 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800981c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800981e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009820:	4413      	add	r3, r2
 8009822:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009824:	8912      	ldrh	r2, [r2, #8]
 8009826:	0912      	lsrs	r2, r2, #4
 8009828:	b292      	uxth	r2, r2
 800982a:	4413      	add	r3, r2
 800982c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800982e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009832:	429a      	cmp	r2, r3
 8009834:	d204      	bcs.n	8009840 <find_volume+0x2c0>
 8009836:	230d      	movs	r3, #13
 8009838:	e0eb      	b.n	8009a12 <find_volume+0x492>
 800983a:	bf00      	nop
 800983c:	20001130 	.word	0x20001130
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009840:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009844:	1ad3      	subs	r3, r2, r3
 8009846:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009848:	8952      	ldrh	r2, [r2, #10]
 800984a:	fbb3 f3f2 	udiv	r3, r3, r2
 800984e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009852:	2b00      	cmp	r3, #0
 8009854:	d101      	bne.n	800985a <find_volume+0x2da>
 8009856:	230d      	movs	r3, #13
 8009858:	e0db      	b.n	8009a12 <find_volume+0x492>
		fmt = FS_FAT32;
 800985a:	2303      	movs	r3, #3
 800985c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009862:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009866:	4293      	cmp	r3, r2
 8009868:	d802      	bhi.n	8009870 <find_volume+0x2f0>
 800986a:	2302      	movs	r3, #2
 800986c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009872:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009876:	4293      	cmp	r3, r2
 8009878:	d802      	bhi.n	8009880 <find_volume+0x300>
 800987a:	2301      	movs	r3, #1
 800987c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009882:	1c9a      	adds	r2, r3, #2
 8009884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009886:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8009888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800988a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800988c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800988e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009890:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009892:	441a      	add	r2, r3
 8009894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009896:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8009898:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800989a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800989c:	441a      	add	r2, r3
 800989e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a0:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80098a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80098a6:	2b03      	cmp	r3, #3
 80098a8:	d11e      	bne.n	80098e8 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80098aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ac:	3334      	adds	r3, #52	; 0x34
 80098ae:	332a      	adds	r3, #42	; 0x2a
 80098b0:	4618      	mov	r0, r3
 80098b2:	f7fe fb3b 	bl	8007f2c <ld_word>
 80098b6:	4603      	mov	r3, r0
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d001      	beq.n	80098c0 <find_volume+0x340>
 80098bc:	230d      	movs	r3, #13
 80098be:	e0a8      	b.n	8009a12 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80098c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098c2:	891b      	ldrh	r3, [r3, #8]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d001      	beq.n	80098cc <find_volume+0x34c>
 80098c8:	230d      	movs	r3, #13
 80098ca:	e0a2      	b.n	8009a12 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80098cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ce:	3334      	adds	r3, #52	; 0x34
 80098d0:	332c      	adds	r3, #44	; 0x2c
 80098d2:	4618      	mov	r0, r3
 80098d4:	f7fe fb42 	bl	8007f5c <ld_dword>
 80098d8:	4602      	mov	r2, r0
 80098da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098dc:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80098de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098e0:	699b      	ldr	r3, [r3, #24]
 80098e2:	009b      	lsls	r3, r3, #2
 80098e4:	647b      	str	r3, [r7, #68]	; 0x44
 80098e6:	e01f      	b.n	8009928 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80098e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ea:	891b      	ldrh	r3, [r3, #8]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d101      	bne.n	80098f4 <find_volume+0x374>
 80098f0:	230d      	movs	r3, #13
 80098f2:	e08e      	b.n	8009a12 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80098f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80098f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098fa:	441a      	add	r2, r3
 80098fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098fe:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009900:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009904:	2b02      	cmp	r3, #2
 8009906:	d103      	bne.n	8009910 <find_volume+0x390>
 8009908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800990a:	699b      	ldr	r3, [r3, #24]
 800990c:	005b      	lsls	r3, r3, #1
 800990e:	e00a      	b.n	8009926 <find_volume+0x3a6>
 8009910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009912:	699a      	ldr	r2, [r3, #24]
 8009914:	4613      	mov	r3, r2
 8009916:	005b      	lsls	r3, r3, #1
 8009918:	4413      	add	r3, r2
 800991a:	085a      	lsrs	r2, r3, #1
 800991c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800991e:	699b      	ldr	r3, [r3, #24]
 8009920:	f003 0301 	and.w	r3, r3, #1
 8009924:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009926:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800992a:	69da      	ldr	r2, [r3, #28]
 800992c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800992e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009932:	0a5b      	lsrs	r3, r3, #9
 8009934:	429a      	cmp	r2, r3
 8009936:	d201      	bcs.n	800993c <find_volume+0x3bc>
 8009938:	230d      	movs	r3, #13
 800993a:	e06a      	b.n	8009a12 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800993c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800993e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009942:	615a      	str	r2, [r3, #20]
 8009944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009946:	695a      	ldr	r2, [r3, #20]
 8009948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800994a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800994c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800994e:	2280      	movs	r2, #128	; 0x80
 8009950:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009952:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009956:	2b03      	cmp	r3, #3
 8009958:	d149      	bne.n	80099ee <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800995a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800995c:	3334      	adds	r3, #52	; 0x34
 800995e:	3330      	adds	r3, #48	; 0x30
 8009960:	4618      	mov	r0, r3
 8009962:	f7fe fae3 	bl	8007f2c <ld_word>
 8009966:	4603      	mov	r3, r0
 8009968:	2b01      	cmp	r3, #1
 800996a:	d140      	bne.n	80099ee <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800996c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800996e:	3301      	adds	r3, #1
 8009970:	4619      	mov	r1, r3
 8009972:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009974:	f7fe fdbc 	bl	80084f0 <move_window>
 8009978:	4603      	mov	r3, r0
 800997a:	2b00      	cmp	r3, #0
 800997c:	d137      	bne.n	80099ee <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800997e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009980:	2200      	movs	r2, #0
 8009982:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009986:	3334      	adds	r3, #52	; 0x34
 8009988:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800998c:	4618      	mov	r0, r3
 800998e:	f7fe facd 	bl	8007f2c <ld_word>
 8009992:	4603      	mov	r3, r0
 8009994:	461a      	mov	r2, r3
 8009996:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800999a:	429a      	cmp	r2, r3
 800999c:	d127      	bne.n	80099ee <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800999e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099a0:	3334      	adds	r3, #52	; 0x34
 80099a2:	4618      	mov	r0, r3
 80099a4:	f7fe fada 	bl	8007f5c <ld_dword>
 80099a8:	4603      	mov	r3, r0
 80099aa:	4a1c      	ldr	r2, [pc, #112]	; (8009a1c <find_volume+0x49c>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d11e      	bne.n	80099ee <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80099b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099b2:	3334      	adds	r3, #52	; 0x34
 80099b4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80099b8:	4618      	mov	r0, r3
 80099ba:	f7fe facf 	bl	8007f5c <ld_dword>
 80099be:	4603      	mov	r3, r0
 80099c0:	4a17      	ldr	r2, [pc, #92]	; (8009a20 <find_volume+0x4a0>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d113      	bne.n	80099ee <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80099c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c8:	3334      	adds	r3, #52	; 0x34
 80099ca:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80099ce:	4618      	mov	r0, r3
 80099d0:	f7fe fac4 	bl	8007f5c <ld_dword>
 80099d4:	4602      	mov	r2, r0
 80099d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099d8:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80099da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099dc:	3334      	adds	r3, #52	; 0x34
 80099de:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80099e2:	4618      	mov	r0, r3
 80099e4:	f7fe faba 	bl	8007f5c <ld_dword>
 80099e8:	4602      	mov	r2, r0
 80099ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ec:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80099ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099f0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80099f4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80099f6:	4b0b      	ldr	r3, [pc, #44]	; (8009a24 <find_volume+0x4a4>)
 80099f8:	881b      	ldrh	r3, [r3, #0]
 80099fa:	3301      	adds	r3, #1
 80099fc:	b29a      	uxth	r2, r3
 80099fe:	4b09      	ldr	r3, [pc, #36]	; (8009a24 <find_volume+0x4a4>)
 8009a00:	801a      	strh	r2, [r3, #0]
 8009a02:	4b08      	ldr	r3, [pc, #32]	; (8009a24 <find_volume+0x4a4>)
 8009a04:	881a      	ldrh	r2, [r3, #0]
 8009a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a08:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009a0a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009a0c:	f7fe fd08 	bl	8008420 <clear_lock>
#endif
	return FR_OK;
 8009a10:	2300      	movs	r3, #0
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3758      	adds	r7, #88	; 0x58
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}
 8009a1a:	bf00      	nop
 8009a1c:	41615252 	.word	0x41615252
 8009a20:	61417272 	.word	0x61417272
 8009a24:	20001134 	.word	0x20001134

08009a28 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b084      	sub	sp, #16
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
 8009a30:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009a32:	2309      	movs	r3, #9
 8009a34:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d02e      	beq.n	8009a9a <validate+0x72>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d02a      	beq.n	8009a9a <validate+0x72>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	781b      	ldrb	r3, [r3, #0]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d025      	beq.n	8009a9a <validate+0x72>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	889a      	ldrh	r2, [r3, #4]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	88db      	ldrh	r3, [r3, #6]
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d11e      	bne.n	8009a9a <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4618      	mov	r0, r3
 8009a62:	f7fe fb63 	bl	800812c <lock_fs>
 8009a66:	4603      	mov	r3, r0
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d014      	beq.n	8009a96 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	785b      	ldrb	r3, [r3, #1]
 8009a72:	4618      	mov	r0, r3
 8009a74:	f7fe f9bc 	bl	8007df0 <disk_status>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	f003 0301 	and.w	r3, r3, #1
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d102      	bne.n	8009a88 <validate+0x60>
				res = FR_OK;
 8009a82:	2300      	movs	r3, #0
 8009a84:	73fb      	strb	r3, [r7, #15]
 8009a86:	e008      	b.n	8009a9a <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	2100      	movs	r1, #0
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f7fe fb62 	bl	8008158 <unlock_fs>
 8009a94:	e001      	b.n	8009a9a <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8009a96:	230f      	movs	r3, #15
 8009a98:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009a9a:	7bfb      	ldrb	r3, [r7, #15]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d102      	bne.n	8009aa6 <validate+0x7e>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	e000      	b.n	8009aa8 <validate+0x80>
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	683a      	ldr	r2, [r7, #0]
 8009aaa:	6013      	str	r3, [r2, #0]
	return res;
 8009aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3710      	adds	r7, #16
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}
	...

08009ab8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b088      	sub	sp, #32
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	60f8      	str	r0, [r7, #12]
 8009ac0:	60b9      	str	r1, [r7, #8]
 8009ac2:	4613      	mov	r3, r2
 8009ac4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009aca:	f107 0310 	add.w	r3, r7, #16
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f7ff fcbb 	bl	800944a <get_ldnumber>
 8009ad4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009ad6:	69fb      	ldr	r3, [r7, #28]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	da01      	bge.n	8009ae0 <f_mount+0x28>
 8009adc:	230b      	movs	r3, #11
 8009ade:	e048      	b.n	8009b72 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009ae0:	4a26      	ldr	r2, [pc, #152]	; (8009b7c <f_mount+0xc4>)
 8009ae2:	69fb      	ldr	r3, [r7, #28]
 8009ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ae8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009aea:	69bb      	ldr	r3, [r7, #24]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d00f      	beq.n	8009b10 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009af0:	69b8      	ldr	r0, [r7, #24]
 8009af2:	f7fe fc95 	bl	8008420 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8009af6:	69bb      	ldr	r3, [r7, #24]
 8009af8:	68db      	ldr	r3, [r3, #12]
 8009afa:	4618      	mov	r0, r3
 8009afc:	f001 f8c2 	bl	800ac84 <ff_del_syncobj>
 8009b00:	4603      	mov	r3, r0
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d101      	bne.n	8009b0a <f_mount+0x52>
 8009b06:	2302      	movs	r3, #2
 8009b08:	e033      	b.n	8009b72 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009b0a:	69bb      	ldr	r3, [r7, #24]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d00f      	beq.n	8009b36 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8009b1c:	69fb      	ldr	r3, [r7, #28]
 8009b1e:	b2da      	uxtb	r2, r3
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	330c      	adds	r3, #12
 8009b24:	4619      	mov	r1, r3
 8009b26:	4610      	mov	r0, r2
 8009b28:	f001 f893 	bl	800ac52 <ff_cre_syncobj>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d101      	bne.n	8009b36 <f_mount+0x7e>
 8009b32:	2302      	movs	r3, #2
 8009b34:	e01d      	b.n	8009b72 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009b36:	68fa      	ldr	r2, [r7, #12]
 8009b38:	4910      	ldr	r1, [pc, #64]	; (8009b7c <f_mount+0xc4>)
 8009b3a:	69fb      	ldr	r3, [r7, #28]
 8009b3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d002      	beq.n	8009b4c <f_mount+0x94>
 8009b46:	79fb      	ldrb	r3, [r7, #7]
 8009b48:	2b01      	cmp	r3, #1
 8009b4a:	d001      	beq.n	8009b50 <f_mount+0x98>
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	e010      	b.n	8009b72 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009b50:	f107 010c 	add.w	r1, r7, #12
 8009b54:	f107 0308 	add.w	r3, r7, #8
 8009b58:	2200      	movs	r2, #0
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f7ff fd10 	bl	8009580 <find_volume>
 8009b60:	4603      	mov	r3, r0
 8009b62:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	7dfa      	ldrb	r2, [r7, #23]
 8009b68:	4611      	mov	r1, r2
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f7fe faf4 	bl	8008158 <unlock_fs>
 8009b70:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3720      	adds	r7, #32
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}
 8009b7a:	bf00      	nop
 8009b7c:	20001130 	.word	0x20001130

08009b80 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b098      	sub	sp, #96	; 0x60
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	60f8      	str	r0, [r7, #12]
 8009b88:	60b9      	str	r1, [r7, #8]
 8009b8a:	4613      	mov	r3, r2
 8009b8c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d101      	bne.n	8009b98 <f_open+0x18>
 8009b94:	2309      	movs	r3, #9
 8009b96:	e1b4      	b.n	8009f02 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009b98:	79fb      	ldrb	r3, [r7, #7]
 8009b9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b9e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009ba0:	79fa      	ldrb	r2, [r7, #7]
 8009ba2:	f107 0110 	add.w	r1, r7, #16
 8009ba6:	f107 0308 	add.w	r3, r7, #8
 8009baa:	4618      	mov	r0, r3
 8009bac:	f7ff fce8 	bl	8009580 <find_volume>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8009bb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	f040 8191 	bne.w	8009ee2 <f_open+0x362>
		dj.obj.fs = fs;
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009bc4:	68ba      	ldr	r2, [r7, #8]
 8009bc6:	f107 0314 	add.w	r3, r7, #20
 8009bca:	4611      	mov	r1, r2
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f7ff fbcb 	bl	8009368 <follow_path>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009bd8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d11a      	bne.n	8009c16 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009be0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009be4:	b25b      	sxtb	r3, r3
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	da03      	bge.n	8009bf2 <f_open+0x72>
				res = FR_INVALID_NAME;
 8009bea:	2306      	movs	r3, #6
 8009bec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009bf0:	e011      	b.n	8009c16 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009bf2:	79fb      	ldrb	r3, [r7, #7]
 8009bf4:	f023 0301 	bic.w	r3, r3, #1
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	bf14      	ite	ne
 8009bfc:	2301      	movne	r3, #1
 8009bfe:	2300      	moveq	r3, #0
 8009c00:	b2db      	uxtb	r3, r3
 8009c02:	461a      	mov	r2, r3
 8009c04:	f107 0314 	add.w	r3, r7, #20
 8009c08:	4611      	mov	r1, r2
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f7fe fac0 	bl	8008190 <chk_lock>
 8009c10:	4603      	mov	r3, r0
 8009c12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009c16:	79fb      	ldrb	r3, [r7, #7]
 8009c18:	f003 031c 	and.w	r3, r3, #28
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d07f      	beq.n	8009d20 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009c20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d017      	beq.n	8009c58 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009c28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c2c:	2b04      	cmp	r3, #4
 8009c2e:	d10e      	bne.n	8009c4e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009c30:	f7fe fb0a 	bl	8008248 <enq_lock>
 8009c34:	4603      	mov	r3, r0
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d006      	beq.n	8009c48 <f_open+0xc8>
 8009c3a:	f107 0314 	add.w	r3, r7, #20
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f7ff fa4e 	bl	80090e0 <dir_register>
 8009c44:	4603      	mov	r3, r0
 8009c46:	e000      	b.n	8009c4a <f_open+0xca>
 8009c48:	2312      	movs	r3, #18
 8009c4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009c4e:	79fb      	ldrb	r3, [r7, #7]
 8009c50:	f043 0308 	orr.w	r3, r3, #8
 8009c54:	71fb      	strb	r3, [r7, #7]
 8009c56:	e010      	b.n	8009c7a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009c58:	7ebb      	ldrb	r3, [r7, #26]
 8009c5a:	f003 0311 	and.w	r3, r3, #17
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d003      	beq.n	8009c6a <f_open+0xea>
					res = FR_DENIED;
 8009c62:	2307      	movs	r3, #7
 8009c64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009c68:	e007      	b.n	8009c7a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009c6a:	79fb      	ldrb	r3, [r7, #7]
 8009c6c:	f003 0304 	and.w	r3, r3, #4
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d002      	beq.n	8009c7a <f_open+0xfa>
 8009c74:	2308      	movs	r3, #8
 8009c76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009c7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d168      	bne.n	8009d54 <f_open+0x1d4>
 8009c82:	79fb      	ldrb	r3, [r7, #7]
 8009c84:	f003 0308 	and.w	r3, r3, #8
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d063      	beq.n	8009d54 <f_open+0x1d4>
				dw = GET_FATTIME();
 8009c8c:	f7fd fe56 	bl	800793c <get_fattime>
 8009c90:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c94:	330e      	adds	r3, #14
 8009c96:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f7fe f99d 	bl	8007fd8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ca0:	3316      	adds	r3, #22
 8009ca2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f7fe f997 	bl	8007fd8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cac:	330b      	adds	r3, #11
 8009cae:	2220      	movs	r2, #32
 8009cb0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009cb6:	4611      	mov	r1, r2
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f7ff f920 	bl	8008efe <ld_clust>
 8009cbe:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f7ff f938 	bl	8008f3c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cce:	331c      	adds	r3, #28
 8009cd0:	2100      	movs	r1, #0
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f7fe f980 	bl	8007fd8 <st_dword>
					fs->wflag = 1;
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	2201      	movs	r2, #1
 8009cdc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009cde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d037      	beq.n	8009d54 <f_open+0x1d4>
						dw = fs->winsect;
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ce8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8009cea:	f107 0314 	add.w	r3, r7, #20
 8009cee:	2200      	movs	r2, #0
 8009cf0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f7fe fe4b 	bl	800898e <remove_chain>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8009cfe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d126      	bne.n	8009d54 <f_open+0x1d4>
							res = move_window(fs, dw);
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f7fe fbf0 	bl	80084f0 <move_window>
 8009d10:	4603      	mov	r3, r0
 8009d12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009d1a:	3a01      	subs	r2, #1
 8009d1c:	611a      	str	r2, [r3, #16]
 8009d1e:	e019      	b.n	8009d54 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009d20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d115      	bne.n	8009d54 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009d28:	7ebb      	ldrb	r3, [r7, #26]
 8009d2a:	f003 0310 	and.w	r3, r3, #16
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d003      	beq.n	8009d3a <f_open+0x1ba>
					res = FR_NO_FILE;
 8009d32:	2304      	movs	r3, #4
 8009d34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009d38:	e00c      	b.n	8009d54 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009d3a:	79fb      	ldrb	r3, [r7, #7]
 8009d3c:	f003 0302 	and.w	r3, r3, #2
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d007      	beq.n	8009d54 <f_open+0x1d4>
 8009d44:	7ebb      	ldrb	r3, [r7, #26]
 8009d46:	f003 0301 	and.w	r3, r3, #1
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d002      	beq.n	8009d54 <f_open+0x1d4>
						res = FR_DENIED;
 8009d4e:	2307      	movs	r3, #7
 8009d50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009d54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d128      	bne.n	8009dae <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009d5c:	79fb      	ldrb	r3, [r7, #7]
 8009d5e:	f003 0308 	and.w	r3, r3, #8
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d003      	beq.n	8009d6e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8009d66:	79fb      	ldrb	r3, [r7, #7]
 8009d68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d6c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009d76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009d7c:	79fb      	ldrb	r3, [r7, #7]
 8009d7e:	f023 0301 	bic.w	r3, r3, #1
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	bf14      	ite	ne
 8009d86:	2301      	movne	r3, #1
 8009d88:	2300      	moveq	r3, #0
 8009d8a:	b2db      	uxtb	r3, r3
 8009d8c:	461a      	mov	r2, r3
 8009d8e:	f107 0314 	add.w	r3, r7, #20
 8009d92:	4611      	mov	r1, r2
 8009d94:	4618      	mov	r0, r3
 8009d96:	f7fe fa79 	bl	800828c <inc_lock>
 8009d9a:	4602      	mov	r2, r0
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	691b      	ldr	r3, [r3, #16]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d102      	bne.n	8009dae <f_open+0x22e>
 8009da8:	2302      	movs	r3, #2
 8009daa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009dae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	f040 8095 	bne.w	8009ee2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009dbc:	4611      	mov	r1, r2
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f7ff f89d 	bl	8008efe <ld_clust>
 8009dc4:	4602      	mov	r2, r0
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dcc:	331c      	adds	r3, #28
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f7fe f8c4 	bl	8007f5c <ld_dword>
 8009dd4:	4602      	mov	r2, r0
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009de0:	693a      	ldr	r2, [r7, #16]
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	88da      	ldrh	r2, [r3, #6]
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	79fa      	ldrb	r2, [r7, #7]
 8009df2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	2200      	movs	r2, #0
 8009df8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	2200      	movs	r2, #0
 8009e04:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	3330      	adds	r3, #48	; 0x30
 8009e0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e0e:	2100      	movs	r1, #0
 8009e10:	4618      	mov	r0, r3
 8009e12:	f7fe f92e 	bl	8008072 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009e16:	79fb      	ldrb	r3, [r7, #7]
 8009e18:	f003 0320 	and.w	r3, r3, #32
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d060      	beq.n	8009ee2 <f_open+0x362>
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	68db      	ldr	r3, [r3, #12]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d05c      	beq.n	8009ee2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	68da      	ldr	r2, [r3, #12]
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	895b      	ldrh	r3, [r3, #10]
 8009e34:	025b      	lsls	r3, r3, #9
 8009e36:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	689b      	ldr	r3, [r3, #8]
 8009e3c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	68db      	ldr	r3, [r3, #12]
 8009e42:	657b      	str	r3, [r7, #84]	; 0x54
 8009e44:	e016      	b.n	8009e74 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f7fe fc0b 	bl	8008666 <get_fat>
 8009e50:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009e52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009e54:	2b01      	cmp	r3, #1
 8009e56:	d802      	bhi.n	8009e5e <f_open+0x2de>
 8009e58:	2302      	movs	r3, #2
 8009e5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009e5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009e60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e64:	d102      	bne.n	8009e6c <f_open+0x2ec>
 8009e66:	2301      	movs	r3, #1
 8009e68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009e6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009e6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e70:	1ad3      	subs	r3, r2, r3
 8009e72:	657b      	str	r3, [r7, #84]	; 0x54
 8009e74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d103      	bne.n	8009e84 <f_open+0x304>
 8009e7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009e7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e80:	429a      	cmp	r2, r3
 8009e82:	d8e0      	bhi.n	8009e46 <f_open+0x2c6>
				}
				fp->clust = clst;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009e88:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009e8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d127      	bne.n	8009ee2 <f_open+0x362>
 8009e92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d022      	beq.n	8009ee2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009e9c:	693b      	ldr	r3, [r7, #16]
 8009e9e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f7fe fbc1 	bl	8008628 <clust2sect>
 8009ea6:	6478      	str	r0, [r7, #68]	; 0x44
 8009ea8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d103      	bne.n	8009eb6 <f_open+0x336>
						res = FR_INT_ERR;
 8009eae:	2302      	movs	r3, #2
 8009eb0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009eb4:	e015      	b.n	8009ee2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009eb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009eb8:	0a5a      	lsrs	r2, r3, #9
 8009eba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ebc:	441a      	add	r2, r3
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	7858      	ldrb	r0, [r3, #1]
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	6a1a      	ldr	r2, [r3, #32]
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	f7fd ffcd 	bl	8007e70 <disk_read>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d002      	beq.n	8009ee2 <f_open+0x362>
 8009edc:	2301      	movs	r3, #1
 8009ede:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009ee2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d002      	beq.n	8009ef0 <f_open+0x370>
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2200      	movs	r2, #0
 8009eee:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8009ef6:	4611      	mov	r1, r2
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f7fe f92d 	bl	8008158 <unlock_fs>
 8009efe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3760      	adds	r7, #96	; 0x60
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}

08009f0a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009f0a:	b580      	push	{r7, lr}
 8009f0c:	b08c      	sub	sp, #48	; 0x30
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	60f8      	str	r0, [r7, #12]
 8009f12:	60b9      	str	r1, [r7, #8]
 8009f14:	607a      	str	r2, [r7, #4]
 8009f16:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	f107 0210 	add.w	r2, r7, #16
 8009f28:	4611      	mov	r1, r2
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f7ff fd7c 	bl	8009a28 <validate>
 8009f30:	4603      	mov	r3, r0
 8009f32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009f36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d107      	bne.n	8009f4e <f_write+0x44>
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	7d5b      	ldrb	r3, [r3, #21]
 8009f42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009f46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d009      	beq.n	8009f62 <f_write+0x58>
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009f54:	4611      	mov	r1, r2
 8009f56:	4618      	mov	r0, r3
 8009f58:	f7fe f8fe 	bl	8008158 <unlock_fs>
 8009f5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009f60:	e173      	b.n	800a24a <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	7d1b      	ldrb	r3, [r3, #20]
 8009f66:	f003 0302 	and.w	r3, r3, #2
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d106      	bne.n	8009f7c <f_write+0x72>
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	2107      	movs	r1, #7
 8009f72:	4618      	mov	r0, r3
 8009f74:	f7fe f8f0 	bl	8008158 <unlock_fs>
 8009f78:	2307      	movs	r3, #7
 8009f7a:	e166      	b.n	800a24a <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	699a      	ldr	r2, [r3, #24]
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	441a      	add	r2, r3
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	699b      	ldr	r3, [r3, #24]
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	f080 814b 	bcs.w	800a224 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	699b      	ldr	r3, [r3, #24]
 8009f92:	43db      	mvns	r3, r3
 8009f94:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009f96:	e145      	b.n	800a224 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	699b      	ldr	r3, [r3, #24]
 8009f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	f040 8101 	bne.w	800a1a8 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	699b      	ldr	r3, [r3, #24]
 8009faa:	0a5b      	lsrs	r3, r3, #9
 8009fac:	693a      	ldr	r2, [r7, #16]
 8009fae:	8952      	ldrh	r2, [r2, #10]
 8009fb0:	3a01      	subs	r2, #1
 8009fb2:	4013      	ands	r3, r2
 8009fb4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009fb6:	69bb      	ldr	r3, [r7, #24]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d14d      	bne.n	800a058 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	699b      	ldr	r3, [r3, #24]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d10c      	bne.n	8009fde <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	689b      	ldr	r3, [r3, #8]
 8009fc8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d11a      	bne.n	800a006 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2100      	movs	r1, #0
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f7fe fd3f 	bl	8008a58 <create_chain>
 8009fda:	62b8      	str	r0, [r7, #40]	; 0x28
 8009fdc:	e013      	b.n	800a006 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d007      	beq.n	8009ff6 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	699b      	ldr	r3, [r3, #24]
 8009fea:	4619      	mov	r1, r3
 8009fec:	68f8      	ldr	r0, [r7, #12]
 8009fee:	f7fe fdcb 	bl	8008b88 <clmt_clust>
 8009ff2:	62b8      	str	r0, [r7, #40]	; 0x28
 8009ff4:	e007      	b.n	800a006 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009ff6:	68fa      	ldr	r2, [r7, #12]
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	69db      	ldr	r3, [r3, #28]
 8009ffc:	4619      	mov	r1, r3
 8009ffe:	4610      	mov	r0, r2
 800a000:	f7fe fd2a 	bl	8008a58 <create_chain>
 800a004:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a008:	2b00      	cmp	r3, #0
 800a00a:	f000 8110 	beq.w	800a22e <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a00e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a010:	2b01      	cmp	r3, #1
 800a012:	d109      	bne.n	800a028 <f_write+0x11e>
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2202      	movs	r2, #2
 800a018:	755a      	strb	r2, [r3, #21]
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	2102      	movs	r1, #2
 800a01e:	4618      	mov	r0, r3
 800a020:	f7fe f89a 	bl	8008158 <unlock_fs>
 800a024:	2302      	movs	r3, #2
 800a026:	e110      	b.n	800a24a <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a02a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a02e:	d109      	bne.n	800a044 <f_write+0x13a>
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	2201      	movs	r2, #1
 800a034:	755a      	strb	r2, [r3, #21]
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	2101      	movs	r1, #1
 800a03a:	4618      	mov	r0, r3
 800a03c:	f7fe f88c 	bl	8008158 <unlock_fs>
 800a040:	2301      	movs	r3, #1
 800a042:	e102      	b.n	800a24a <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a048:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	689b      	ldr	r3, [r3, #8]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d102      	bne.n	800a058 <f_write+0x14e>
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a056:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	7d1b      	ldrb	r3, [r3, #20]
 800a05c:	b25b      	sxtb	r3, r3
 800a05e:	2b00      	cmp	r3, #0
 800a060:	da1d      	bge.n	800a09e <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	7858      	ldrb	r0, [r3, #1]
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	6a1a      	ldr	r2, [r3, #32]
 800a070:	2301      	movs	r3, #1
 800a072:	f7fd ff1d 	bl	8007eb0 <disk_write>
 800a076:	4603      	mov	r3, r0
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d009      	beq.n	800a090 <f_write+0x186>
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	2201      	movs	r2, #1
 800a080:	755a      	strb	r2, [r3, #21]
 800a082:	693b      	ldr	r3, [r7, #16]
 800a084:	2101      	movs	r1, #1
 800a086:	4618      	mov	r0, r3
 800a088:	f7fe f866 	bl	8008158 <unlock_fs>
 800a08c:	2301      	movs	r3, #1
 800a08e:	e0dc      	b.n	800a24a <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	7d1b      	ldrb	r3, [r3, #20]
 800a094:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a098:	b2da      	uxtb	r2, r3
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a09e:	693a      	ldr	r2, [r7, #16]
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	69db      	ldr	r3, [r3, #28]
 800a0a4:	4619      	mov	r1, r3
 800a0a6:	4610      	mov	r0, r2
 800a0a8:	f7fe fabe 	bl	8008628 <clust2sect>
 800a0ac:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d109      	bne.n	800a0c8 <f_write+0x1be>
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	2202      	movs	r2, #2
 800a0b8:	755a      	strb	r2, [r3, #21]
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	2102      	movs	r1, #2
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f7fe f84a 	bl	8008158 <unlock_fs>
 800a0c4:	2302      	movs	r3, #2
 800a0c6:	e0c0      	b.n	800a24a <f_write+0x340>
			sect += csect;
 800a0c8:	697a      	ldr	r2, [r7, #20]
 800a0ca:	69bb      	ldr	r3, [r7, #24]
 800a0cc:	4413      	add	r3, r2
 800a0ce:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	0a5b      	lsrs	r3, r3, #9
 800a0d4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a0d6:	6a3b      	ldr	r3, [r7, #32]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d041      	beq.n	800a160 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a0dc:	69ba      	ldr	r2, [r7, #24]
 800a0de:	6a3b      	ldr	r3, [r7, #32]
 800a0e0:	4413      	add	r3, r2
 800a0e2:	693a      	ldr	r2, [r7, #16]
 800a0e4:	8952      	ldrh	r2, [r2, #10]
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d905      	bls.n	800a0f6 <f_write+0x1ec>
					cc = fs->csize - csect;
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	895b      	ldrh	r3, [r3, #10]
 800a0ee:	461a      	mov	r2, r3
 800a0f0:	69bb      	ldr	r3, [r7, #24]
 800a0f2:	1ad3      	subs	r3, r2, r3
 800a0f4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	7858      	ldrb	r0, [r3, #1]
 800a0fa:	6a3b      	ldr	r3, [r7, #32]
 800a0fc:	697a      	ldr	r2, [r7, #20]
 800a0fe:	69f9      	ldr	r1, [r7, #28]
 800a100:	f7fd fed6 	bl	8007eb0 <disk_write>
 800a104:	4603      	mov	r3, r0
 800a106:	2b00      	cmp	r3, #0
 800a108:	d009      	beq.n	800a11e <f_write+0x214>
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	2201      	movs	r2, #1
 800a10e:	755a      	strb	r2, [r3, #21]
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	2101      	movs	r1, #1
 800a114:	4618      	mov	r0, r3
 800a116:	f7fe f81f 	bl	8008158 <unlock_fs>
 800a11a:	2301      	movs	r3, #1
 800a11c:	e095      	b.n	800a24a <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	6a1a      	ldr	r2, [r3, #32]
 800a122:	697b      	ldr	r3, [r7, #20]
 800a124:	1ad3      	subs	r3, r2, r3
 800a126:	6a3a      	ldr	r2, [r7, #32]
 800a128:	429a      	cmp	r2, r3
 800a12a:	d915      	bls.n	800a158 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	6a1a      	ldr	r2, [r3, #32]
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	1ad3      	subs	r3, r2, r3
 800a13a:	025b      	lsls	r3, r3, #9
 800a13c:	69fa      	ldr	r2, [r7, #28]
 800a13e:	4413      	add	r3, r2
 800a140:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a144:	4619      	mov	r1, r3
 800a146:	f7fd ff73 	bl	8008030 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	7d1b      	ldrb	r3, [r3, #20]
 800a14e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a152:	b2da      	uxtb	r2, r3
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a158:	6a3b      	ldr	r3, [r7, #32]
 800a15a:	025b      	lsls	r3, r3, #9
 800a15c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800a15e:	e044      	b.n	800a1ea <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	6a1b      	ldr	r3, [r3, #32]
 800a164:	697a      	ldr	r2, [r7, #20]
 800a166:	429a      	cmp	r2, r3
 800a168:	d01b      	beq.n	800a1a2 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	699a      	ldr	r2, [r3, #24]
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a172:	429a      	cmp	r2, r3
 800a174:	d215      	bcs.n	800a1a2 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	7858      	ldrb	r0, [r3, #1]
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a180:	2301      	movs	r3, #1
 800a182:	697a      	ldr	r2, [r7, #20]
 800a184:	f7fd fe74 	bl	8007e70 <disk_read>
 800a188:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d009      	beq.n	800a1a2 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	2201      	movs	r2, #1
 800a192:	755a      	strb	r2, [r3, #21]
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	2101      	movs	r1, #1
 800a198:	4618      	mov	r0, r3
 800a19a:	f7fd ffdd 	bl	8008158 <unlock_fs>
 800a19e:	2301      	movs	r3, #1
 800a1a0:	e053      	b.n	800a24a <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	697a      	ldr	r2, [r7, #20]
 800a1a6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	699b      	ldr	r3, [r3, #24]
 800a1ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1b0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800a1b4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a1b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	429a      	cmp	r2, r3
 800a1bc:	d901      	bls.n	800a1c2 <f_write+0x2b8>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	699b      	ldr	r3, [r3, #24]
 800a1cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1d0:	4413      	add	r3, r2
 800a1d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1d4:	69f9      	ldr	r1, [r7, #28]
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f7fd ff2a 	bl	8008030 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	7d1b      	ldrb	r3, [r3, #20]
 800a1e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a1e4:	b2da      	uxtb	r2, r3
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a1ea:	69fa      	ldr	r2, [r7, #28]
 800a1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ee:	4413      	add	r3, r2
 800a1f0:	61fb      	str	r3, [r7, #28]
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	699a      	ldr	r2, [r3, #24]
 800a1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f8:	441a      	add	r2, r3
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	619a      	str	r2, [r3, #24]
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	68da      	ldr	r2, [r3, #12]
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	699b      	ldr	r3, [r3, #24]
 800a206:	429a      	cmp	r2, r3
 800a208:	bf38      	it	cc
 800a20a:	461a      	movcc	r2, r3
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	60da      	str	r2, [r3, #12]
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	681a      	ldr	r2, [r3, #0]
 800a214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a216:	441a      	add	r2, r3
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	601a      	str	r2, [r3, #0]
 800a21c:	687a      	ldr	r2, [r7, #4]
 800a21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a220:	1ad3      	subs	r3, r2, r3
 800a222:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2b00      	cmp	r3, #0
 800a228:	f47f aeb6 	bne.w	8009f98 <f_write+0x8e>
 800a22c:	e000      	b.n	800a230 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a22e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	7d1b      	ldrb	r3, [r3, #20]
 800a234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a238:	b2da      	uxtb	r2, r3
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	2100      	movs	r1, #0
 800a242:	4618      	mov	r0, r3
 800a244:	f7fd ff88 	bl	8008158 <unlock_fs>
 800a248:	2300      	movs	r3, #0
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3730      	adds	r7, #48	; 0x30
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}

0800a252 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a252:	b580      	push	{r7, lr}
 800a254:	b086      	sub	sp, #24
 800a256:	af00      	add	r7, sp, #0
 800a258:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f107 0208 	add.w	r2, r7, #8
 800a260:	4611      	mov	r1, r2
 800a262:	4618      	mov	r0, r3
 800a264:	f7ff fbe0 	bl	8009a28 <validate>
 800a268:	4603      	mov	r3, r0
 800a26a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a26c:	7dfb      	ldrb	r3, [r7, #23]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d16d      	bne.n	800a34e <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	7d1b      	ldrb	r3, [r3, #20]
 800a276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d067      	beq.n	800a34e <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	7d1b      	ldrb	r3, [r3, #20]
 800a282:	b25b      	sxtb	r3, r3
 800a284:	2b00      	cmp	r3, #0
 800a286:	da1a      	bge.n	800a2be <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	7858      	ldrb	r0, [r3, #1]
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6a1a      	ldr	r2, [r3, #32]
 800a296:	2301      	movs	r3, #1
 800a298:	f7fd fe0a 	bl	8007eb0 <disk_write>
 800a29c:	4603      	mov	r3, r0
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d006      	beq.n	800a2b0 <f_sync+0x5e>
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	2101      	movs	r1, #1
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f7fd ff56 	bl	8008158 <unlock_fs>
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	e055      	b.n	800a35c <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	7d1b      	ldrb	r3, [r3, #20]
 800a2b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2b8:	b2da      	uxtb	r2, r3
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a2be:	f7fd fb3d 	bl	800793c <get_fattime>
 800a2c2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a2c4:	68ba      	ldr	r2, [r7, #8]
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ca:	4619      	mov	r1, r3
 800a2cc:	4610      	mov	r0, r2
 800a2ce:	f7fe f90f 	bl	80084f0 <move_window>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a2d6:	7dfb      	ldrb	r3, [r7, #23]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d138      	bne.n	800a34e <f_sync+0xfc>
					dir = fp->dir_ptr;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2e0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	330b      	adds	r3, #11
 800a2e6:	781a      	ldrb	r2, [r3, #0]
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	330b      	adds	r3, #11
 800a2ec:	f042 0220 	orr.w	r2, r2, #32
 800a2f0:	b2d2      	uxtb	r2, r2
 800a2f2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6818      	ldr	r0, [r3, #0]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	689b      	ldr	r3, [r3, #8]
 800a2fc:	461a      	mov	r2, r3
 800a2fe:	68f9      	ldr	r1, [r7, #12]
 800a300:	f7fe fe1c 	bl	8008f3c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	f103 021c 	add.w	r2, r3, #28
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	68db      	ldr	r3, [r3, #12]
 800a30e:	4619      	mov	r1, r3
 800a310:	4610      	mov	r0, r2
 800a312:	f7fd fe61 	bl	8007fd8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	3316      	adds	r3, #22
 800a31a:	6939      	ldr	r1, [r7, #16]
 800a31c:	4618      	mov	r0, r3
 800a31e:	f7fd fe5b 	bl	8007fd8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	3312      	adds	r3, #18
 800a326:	2100      	movs	r1, #0
 800a328:	4618      	mov	r0, r3
 800a32a:	f7fd fe3a 	bl	8007fa2 <st_word>
					fs->wflag = 1;
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	2201      	movs	r2, #1
 800a332:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	4618      	mov	r0, r3
 800a338:	f7fe f908 	bl	800854c <sync_fs>
 800a33c:	4603      	mov	r3, r0
 800a33e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	7d1b      	ldrb	r3, [r3, #20]
 800a344:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a348:	b2da      	uxtb	r2, r3
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	7dfa      	ldrb	r2, [r7, #23]
 800a352:	4611      	mov	r1, r2
 800a354:	4618      	mov	r0, r3
 800a356:	f7fd feff 	bl	8008158 <unlock_fs>
 800a35a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	3718      	adds	r7, #24
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}

0800a364 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b084      	sub	sp, #16
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f7ff ff70 	bl	800a252 <f_sync>
 800a372:	4603      	mov	r3, r0
 800a374:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a376:	7bfb      	ldrb	r3, [r7, #15]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d11d      	bne.n	800a3b8 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f107 0208 	add.w	r2, r7, #8
 800a382:	4611      	mov	r1, r2
 800a384:	4618      	mov	r0, r3
 800a386:	f7ff fb4f 	bl	8009a28 <validate>
 800a38a:	4603      	mov	r3, r0
 800a38c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a38e:	7bfb      	ldrb	r3, [r7, #15]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d111      	bne.n	800a3b8 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	691b      	ldr	r3, [r3, #16]
 800a398:	4618      	mov	r0, r3
 800a39a:	f7fe f805 	bl	80083a8 <dec_lock>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a3a2:	7bfb      	ldrb	r3, [r7, #15]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d102      	bne.n	800a3ae <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	2100      	movs	r1, #0
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f7fd fed0 	bl	8008158 <unlock_fs>
#endif
		}
	}
	return res;
 800a3b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3710      	adds	r7, #16
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}

0800a3c2 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800a3c2:	b580      	push	{r7, lr}
 800a3c4:	b090      	sub	sp, #64	; 0x40
 800a3c6:	af00      	add	r7, sp, #0
 800a3c8:	6078      	str	r0, [r7, #4]
 800a3ca:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f107 0208 	add.w	r2, r7, #8
 800a3d2:	4611      	mov	r1, r2
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f7ff fb27 	bl	8009a28 <validate>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800a3e0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d103      	bne.n	800a3f0 <f_lseek+0x2e>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	7d5b      	ldrb	r3, [r3, #21]
 800a3ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800a3f0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d009      	beq.n	800a40c <f_lseek+0x4a>
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800a3fe:	4611      	mov	r1, r2
 800a400:	4618      	mov	r0, r3
 800a402:	f7fd fea9 	bl	8008158 <unlock_fs>
 800a406:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a40a:	e229      	b.n	800a860 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a410:	2b00      	cmp	r3, #0
 800a412:	f000 80ea 	beq.w	800a5ea <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a41c:	d164      	bne.n	800a4e8 <f_lseek+0x126>
			tbl = fp->cltbl;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a422:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800a424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a426:	1d1a      	adds	r2, r3, #4
 800a428:	627a      	str	r2, [r7, #36]	; 0x24
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	617b      	str	r3, [r7, #20]
 800a42e:	2302      	movs	r3, #2
 800a430:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	689b      	ldr	r3, [r3, #8]
 800a436:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800a438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d044      	beq.n	800a4c8 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800a43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a440:	613b      	str	r3, [r7, #16]
 800a442:	2300      	movs	r3, #0
 800a444:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a448:	3302      	adds	r3, #2
 800a44a:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800a44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a44e:	60fb      	str	r3, [r7, #12]
 800a450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a452:	3301      	adds	r3, #1
 800a454:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a45a:	4618      	mov	r0, r3
 800a45c:	f7fe f903 	bl	8008666 <get_fat>
 800a460:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800a462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a464:	2b01      	cmp	r3, #1
 800a466:	d809      	bhi.n	800a47c <f_lseek+0xba>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2202      	movs	r2, #2
 800a46c:	755a      	strb	r2, [r3, #21]
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	2102      	movs	r1, #2
 800a472:	4618      	mov	r0, r3
 800a474:	f7fd fe70 	bl	8008158 <unlock_fs>
 800a478:	2302      	movs	r3, #2
 800a47a:	e1f1      	b.n	800a860 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a47c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a47e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a482:	d109      	bne.n	800a498 <f_lseek+0xd6>
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2201      	movs	r2, #1
 800a488:	755a      	strb	r2, [r3, #21]
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	2101      	movs	r1, #1
 800a48e:	4618      	mov	r0, r3
 800a490:	f7fd fe62 	bl	8008158 <unlock_fs>
 800a494:	2301      	movs	r3, #1
 800a496:	e1e3      	b.n	800a860 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	3301      	adds	r3, #1
 800a49c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a49e:	429a      	cmp	r2, r3
 800a4a0:	d0d4      	beq.n	800a44c <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800a4a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4a4:	697b      	ldr	r3, [r7, #20]
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	d809      	bhi.n	800a4be <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 800a4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ac:	1d1a      	adds	r2, r3, #4
 800a4ae:	627a      	str	r2, [r7, #36]	; 0x24
 800a4b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a4b2:	601a      	str	r2, [r3, #0]
 800a4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b6:	1d1a      	adds	r2, r3, #4
 800a4b8:	627a      	str	r2, [r7, #36]	; 0x24
 800a4ba:	693a      	ldr	r2, [r7, #16]
 800a4bc:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	699b      	ldr	r3, [r3, #24]
 800a4c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4c4:	429a      	cmp	r2, r3
 800a4c6:	d3ba      	bcc.n	800a43e <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4ce:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800a4d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d803      	bhi.n	800a4e0 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 800a4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4da:	2200      	movs	r2, #0
 800a4dc:	601a      	str	r2, [r3, #0]
 800a4de:	e1b6      	b.n	800a84e <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800a4e0:	2311      	movs	r3, #17
 800a4e2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800a4e6:	e1b2      	b.n	800a84e <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	68db      	ldr	r3, [r3, #12]
 800a4ec:	683a      	ldr	r2, [r7, #0]
 800a4ee:	429a      	cmp	r2, r3
 800a4f0:	d902      	bls.n	800a4f8 <f_lseek+0x136>
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	68db      	ldr	r3, [r3, #12]
 800a4f6:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	683a      	ldr	r2, [r7, #0]
 800a4fc:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	2b00      	cmp	r3, #0
 800a502:	f000 81a4 	beq.w	800a84e <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	3b01      	subs	r3, #1
 800a50a:	4619      	mov	r1, r3
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f7fe fb3b 	bl	8008b88 <clmt_clust>
 800a512:	4602      	mov	r2, r0
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800a518:	68ba      	ldr	r2, [r7, #8]
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	69db      	ldr	r3, [r3, #28]
 800a51e:	4619      	mov	r1, r3
 800a520:	4610      	mov	r0, r2
 800a522:	f7fe f881 	bl	8008628 <clust2sect>
 800a526:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800a528:	69bb      	ldr	r3, [r7, #24]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d109      	bne.n	800a542 <f_lseek+0x180>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2202      	movs	r2, #2
 800a532:	755a      	strb	r2, [r3, #21]
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	2102      	movs	r1, #2
 800a538:	4618      	mov	r0, r3
 800a53a:	f7fd fe0d 	bl	8008158 <unlock_fs>
 800a53e:	2302      	movs	r3, #2
 800a540:	e18e      	b.n	800a860 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	3b01      	subs	r3, #1
 800a546:	0a5b      	lsrs	r3, r3, #9
 800a548:	68ba      	ldr	r2, [r7, #8]
 800a54a:	8952      	ldrh	r2, [r2, #10]
 800a54c:	3a01      	subs	r2, #1
 800a54e:	4013      	ands	r3, r2
 800a550:	69ba      	ldr	r2, [r7, #24]
 800a552:	4413      	add	r3, r2
 800a554:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	699b      	ldr	r3, [r3, #24]
 800a55a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a55e:	2b00      	cmp	r3, #0
 800a560:	f000 8175 	beq.w	800a84e <f_lseek+0x48c>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6a1b      	ldr	r3, [r3, #32]
 800a568:	69ba      	ldr	r2, [r7, #24]
 800a56a:	429a      	cmp	r2, r3
 800a56c:	f000 816f 	beq.w	800a84e <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	7d1b      	ldrb	r3, [r3, #20]
 800a574:	b25b      	sxtb	r3, r3
 800a576:	2b00      	cmp	r3, #0
 800a578:	da1d      	bge.n	800a5b6 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	7858      	ldrb	r0, [r3, #1]
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6a1a      	ldr	r2, [r3, #32]
 800a588:	2301      	movs	r3, #1
 800a58a:	f7fd fc91 	bl	8007eb0 <disk_write>
 800a58e:	4603      	mov	r3, r0
 800a590:	2b00      	cmp	r3, #0
 800a592:	d009      	beq.n	800a5a8 <f_lseek+0x1e6>
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2201      	movs	r2, #1
 800a598:	755a      	strb	r2, [r3, #21]
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	2101      	movs	r1, #1
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f7fd fdda 	bl	8008158 <unlock_fs>
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	e15b      	b.n	800a860 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	7d1b      	ldrb	r3, [r3, #20]
 800a5ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5b0:	b2da      	uxtb	r2, r3
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	7858      	ldrb	r0, [r3, #1]
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	69ba      	ldr	r2, [r7, #24]
 800a5c4:	f7fd fc54 	bl	8007e70 <disk_read>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d009      	beq.n	800a5e2 <f_lseek+0x220>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2201      	movs	r2, #1
 800a5d2:	755a      	strb	r2, [r3, #21]
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	2101      	movs	r1, #1
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f7fd fdbd 	bl	8008158 <unlock_fs>
 800a5de:	2301      	movs	r3, #1
 800a5e0:	e13e      	b.n	800a860 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	69ba      	ldr	r2, [r7, #24]
 800a5e6:	621a      	str	r2, [r3, #32]
 800a5e8:	e131      	b.n	800a84e <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	68db      	ldr	r3, [r3, #12]
 800a5ee:	683a      	ldr	r2, [r7, #0]
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d908      	bls.n	800a606 <f_lseek+0x244>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	7d1b      	ldrb	r3, [r3, #20]
 800a5f8:	f003 0302 	and.w	r3, r3, #2
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d102      	bne.n	800a606 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	68db      	ldr	r3, [r3, #12]
 800a604:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	699b      	ldr	r3, [r3, #24]
 800a60a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800a60c:	2300      	movs	r3, #0
 800a60e:	637b      	str	r3, [r7, #52]	; 0x34
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a614:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	f000 80c0 	beq.w	800a79e <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	895b      	ldrh	r3, [r3, #10]
 800a622:	025b      	lsls	r3, r3, #9
 800a624:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800a626:	6a3b      	ldr	r3, [r7, #32]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d01b      	beq.n	800a664 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	1e5a      	subs	r2, r3, #1
 800a630:	69fb      	ldr	r3, [r7, #28]
 800a632:	fbb2 f2f3 	udiv	r2, r2, r3
 800a636:	6a3b      	ldr	r3, [r7, #32]
 800a638:	1e59      	subs	r1, r3, #1
 800a63a:	69fb      	ldr	r3, [r7, #28]
 800a63c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800a640:	429a      	cmp	r2, r3
 800a642:	d30f      	bcc.n	800a664 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800a644:	6a3b      	ldr	r3, [r7, #32]
 800a646:	1e5a      	subs	r2, r3, #1
 800a648:	69fb      	ldr	r3, [r7, #28]
 800a64a:	425b      	negs	r3, r3
 800a64c:	401a      	ands	r2, r3
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	699b      	ldr	r3, [r3, #24]
 800a656:	683a      	ldr	r2, [r7, #0]
 800a658:	1ad3      	subs	r3, r2, r3
 800a65a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	69db      	ldr	r3, [r3, #28]
 800a660:	63bb      	str	r3, [r7, #56]	; 0x38
 800a662:	e02c      	b.n	800a6be <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	689b      	ldr	r3, [r3, #8]
 800a668:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800a66a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d123      	bne.n	800a6b8 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2100      	movs	r1, #0
 800a674:	4618      	mov	r0, r3
 800a676:	f7fe f9ef 	bl	8008a58 <create_chain>
 800a67a:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a67c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a67e:	2b01      	cmp	r3, #1
 800a680:	d109      	bne.n	800a696 <f_lseek+0x2d4>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2202      	movs	r2, #2
 800a686:	755a      	strb	r2, [r3, #21]
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	2102      	movs	r1, #2
 800a68c:	4618      	mov	r0, r3
 800a68e:	f7fd fd63 	bl	8008158 <unlock_fs>
 800a692:	2302      	movs	r3, #2
 800a694:	e0e4      	b.n	800a860 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a698:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a69c:	d109      	bne.n	800a6b2 <f_lseek+0x2f0>
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2201      	movs	r2, #1
 800a6a2:	755a      	strb	r2, [r3, #21]
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	2101      	movs	r1, #1
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f7fd fd55 	bl	8008158 <unlock_fs>
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	e0d6      	b.n	800a860 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a6b6:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a6bc:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800a6be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d06c      	beq.n	800a79e <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 800a6c4:	e044      	b.n	800a750 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 800a6c6:	683a      	ldr	r2, [r7, #0]
 800a6c8:	69fb      	ldr	r3, [r7, #28]
 800a6ca:	1ad3      	subs	r3, r2, r3
 800a6cc:	603b      	str	r3, [r7, #0]
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	699a      	ldr	r2, [r3, #24]
 800a6d2:	69fb      	ldr	r3, [r7, #28]
 800a6d4:	441a      	add	r2, r3
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	7d1b      	ldrb	r3, [r3, #20]
 800a6de:	f003 0302 	and.w	r3, r3, #2
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d00b      	beq.n	800a6fe <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f7fe f9b4 	bl	8008a58 <create_chain>
 800a6f0:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800a6f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d108      	bne.n	800a70a <f_lseek+0x348>
							ofs = 0; break;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	603b      	str	r3, [r7, #0]
 800a6fc:	e02c      	b.n	800a758 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a702:	4618      	mov	r0, r3
 800a704:	f7fd ffaf 	bl	8008666 <get_fat>
 800a708:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a70a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a70c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a710:	d109      	bne.n	800a726 <f_lseek+0x364>
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2201      	movs	r2, #1
 800a716:	755a      	strb	r2, [r3, #21]
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	2101      	movs	r1, #1
 800a71c:	4618      	mov	r0, r3
 800a71e:	f7fd fd1b 	bl	8008158 <unlock_fs>
 800a722:	2301      	movs	r3, #1
 800a724:	e09c      	b.n	800a860 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800a726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a728:	2b01      	cmp	r3, #1
 800a72a:	d904      	bls.n	800a736 <f_lseek+0x374>
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	699b      	ldr	r3, [r3, #24]
 800a730:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a732:	429a      	cmp	r2, r3
 800a734:	d309      	bcc.n	800a74a <f_lseek+0x388>
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2202      	movs	r2, #2
 800a73a:	755a      	strb	r2, [r3, #21]
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	2102      	movs	r1, #2
 800a740:	4618      	mov	r0, r3
 800a742:	f7fd fd09 	bl	8008158 <unlock_fs>
 800a746:	2302      	movs	r3, #2
 800a748:	e08a      	b.n	800a860 <f_lseek+0x49e>
					fp->clust = clst;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a74e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800a750:	683a      	ldr	r2, [r7, #0]
 800a752:	69fb      	ldr	r3, [r7, #28]
 800a754:	429a      	cmp	r2, r3
 800a756:	d8b6      	bhi.n	800a6c6 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	699a      	ldr	r2, [r3, #24]
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	441a      	add	r2, r3
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d017      	beq.n	800a79e <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a772:	4618      	mov	r0, r3
 800a774:	f7fd ff58 	bl	8008628 <clust2sect>
 800a778:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800a77a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d109      	bne.n	800a794 <f_lseek+0x3d2>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2202      	movs	r2, #2
 800a784:	755a      	strb	r2, [r3, #21]
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	2102      	movs	r1, #2
 800a78a:	4618      	mov	r0, r3
 800a78c:	f7fd fce4 	bl	8008158 <unlock_fs>
 800a790:	2302      	movs	r3, #2
 800a792:	e065      	b.n	800a860 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	0a5b      	lsrs	r3, r3, #9
 800a798:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a79a:	4413      	add	r3, r2
 800a79c:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	699a      	ldr	r2, [r3, #24]
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	68db      	ldr	r3, [r3, #12]
 800a7a6:	429a      	cmp	r2, r3
 800a7a8:	d90a      	bls.n	800a7c0 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	699a      	ldr	r2, [r3, #24]
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	7d1b      	ldrb	r3, [r3, #20]
 800a7b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7ba:	b2da      	uxtb	r2, r3
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	699b      	ldr	r3, [r3, #24]
 800a7c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d040      	beq.n	800a84e <f_lseek+0x48c>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6a1b      	ldr	r3, [r3, #32]
 800a7d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a7d2:	429a      	cmp	r2, r3
 800a7d4:	d03b      	beq.n	800a84e <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	7d1b      	ldrb	r3, [r3, #20]
 800a7da:	b25b      	sxtb	r3, r3
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	da1d      	bge.n	800a81c <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	7858      	ldrb	r0, [r3, #1]
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6a1a      	ldr	r2, [r3, #32]
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	f7fd fb5e 	bl	8007eb0 <disk_write>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d009      	beq.n	800a80e <f_lseek+0x44c>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2201      	movs	r2, #1
 800a7fe:	755a      	strb	r2, [r3, #21]
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	2101      	movs	r1, #1
 800a804:	4618      	mov	r0, r3
 800a806:	f7fd fca7 	bl	8008158 <unlock_fs>
 800a80a:	2301      	movs	r3, #1
 800a80c:	e028      	b.n	800a860 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	7d1b      	ldrb	r3, [r3, #20]
 800a812:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a816:	b2da      	uxtb	r2, r3
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	7858      	ldrb	r0, [r3, #1]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a826:	2301      	movs	r3, #1
 800a828:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a82a:	f7fd fb21 	bl	8007e70 <disk_read>
 800a82e:	4603      	mov	r3, r0
 800a830:	2b00      	cmp	r3, #0
 800a832:	d009      	beq.n	800a848 <f_lseek+0x486>
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2201      	movs	r2, #1
 800a838:	755a      	strb	r2, [r3, #21]
 800a83a:	68bb      	ldr	r3, [r7, #8]
 800a83c:	2101      	movs	r1, #1
 800a83e:	4618      	mov	r0, r3
 800a840:	f7fd fc8a 	bl	8008158 <unlock_fs>
 800a844:	2301      	movs	r3, #1
 800a846:	e00b      	b.n	800a860 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a84c:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800a854:	4611      	mov	r1, r2
 800a856:	4618      	mov	r0, r3
 800a858:	f7fd fc7e 	bl	8008158 <unlock_fs>
 800a85c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800a860:	4618      	mov	r0, r3
 800a862:	3740      	adds	r7, #64	; 0x40
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}

0800a868 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b086      	sub	sp, #24
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
 800a870:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d101      	bne.n	800a87c <f_opendir+0x14>
 800a878:	2309      	movs	r3, #9
 800a87a:	e06a      	b.n	800a952 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800a880:	f107 010c 	add.w	r1, r7, #12
 800a884:	463b      	mov	r3, r7
 800a886:	2200      	movs	r2, #0
 800a888:	4618      	mov	r0, r3
 800a88a:	f7fe fe79 	bl	8009580 <find_volume>
 800a88e:	4603      	mov	r3, r0
 800a890:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a892:	7dfb      	ldrb	r3, [r7, #23]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d14f      	bne.n	800a938 <f_opendir+0xd0>
		obj->fs = fs;
 800a898:	68fa      	ldr	r2, [r7, #12]
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	4619      	mov	r1, r3
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f7fe fd60 	bl	8009368 <follow_path>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800a8ac:	7dfb      	ldrb	r3, [r7, #23]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d13d      	bne.n	800a92e <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a8b8:	b25b      	sxtb	r3, r3
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	db12      	blt.n	800a8e4 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800a8be:	693b      	ldr	r3, [r7, #16]
 800a8c0:	799b      	ldrb	r3, [r3, #6]
 800a8c2:	f003 0310 	and.w	r3, r3, #16
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d00a      	beq.n	800a8e0 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800a8ca:	68fa      	ldr	r2, [r7, #12]
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6a1b      	ldr	r3, [r3, #32]
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	4610      	mov	r0, r2
 800a8d4:	f7fe fb13 	bl	8008efe <ld_clust>
 800a8d8:	4602      	mov	r2, r0
 800a8da:	693b      	ldr	r3, [r7, #16]
 800a8dc:	609a      	str	r2, [r3, #8]
 800a8de:	e001      	b.n	800a8e4 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800a8e0:	2305      	movs	r3, #5
 800a8e2:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800a8e4:	7dfb      	ldrb	r3, [r7, #23]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d121      	bne.n	800a92e <f_opendir+0xc6>
				obj->id = fs->id;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	88da      	ldrh	r2, [r3, #6]
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800a8f2:	2100      	movs	r1, #0
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	f7fe f97b 	bl	8008bf0 <dir_sdi>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800a8fe:	7dfb      	ldrb	r3, [r7, #23]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d114      	bne.n	800a92e <f_opendir+0xc6>
					if (obj->sclust) {
 800a904:	693b      	ldr	r3, [r7, #16]
 800a906:	689b      	ldr	r3, [r3, #8]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d00d      	beq.n	800a928 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800a90c:	2100      	movs	r1, #0
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f7fd fcbc 	bl	800828c <inc_lock>
 800a914:	4602      	mov	r2, r0
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	691b      	ldr	r3, [r3, #16]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d105      	bne.n	800a92e <f_opendir+0xc6>
 800a922:	2312      	movs	r3, #18
 800a924:	75fb      	strb	r3, [r7, #23]
 800a926:	e002      	b.n	800a92e <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	2200      	movs	r2, #0
 800a92c:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800a92e:	7dfb      	ldrb	r3, [r7, #23]
 800a930:	2b04      	cmp	r3, #4
 800a932:	d101      	bne.n	800a938 <f_opendir+0xd0>
 800a934:	2305      	movs	r3, #5
 800a936:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800a938:	7dfb      	ldrb	r3, [r7, #23]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d002      	beq.n	800a944 <f_opendir+0xdc>
 800a93e:	693b      	ldr	r3, [r7, #16]
 800a940:	2200      	movs	r2, #0
 800a942:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	7dfa      	ldrb	r2, [r7, #23]
 800a948:	4611      	mov	r1, r2
 800a94a:	4618      	mov	r0, r3
 800a94c:	f7fd fc04 	bl	8008158 <unlock_fs>
 800a950:	7dfb      	ldrb	r3, [r7, #23]
}
 800a952:	4618      	mov	r0, r3
 800a954:	3718      	adds	r7, #24
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}

0800a95a <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800a95a:	b580      	push	{r7, lr}
 800a95c:	b084      	sub	sp, #16
 800a95e:	af00      	add	r7, sp, #0
 800a960:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f107 0208 	add.w	r2, r7, #8
 800a968:	4611      	mov	r1, r2
 800a96a:	4618      	mov	r0, r3
 800a96c:	f7ff f85c 	bl	8009a28 <validate>
 800a970:	4603      	mov	r3, r0
 800a972:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a974:	7bfb      	ldrb	r3, [r7, #15]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d115      	bne.n	800a9a6 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	691b      	ldr	r3, [r3, #16]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d006      	beq.n	800a990 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	691b      	ldr	r3, [r3, #16]
 800a986:	4618      	mov	r0, r3
 800a988:	f7fd fd0e 	bl	80083a8 <dec_lock>
 800a98c:	4603      	mov	r3, r0
 800a98e:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800a990:	7bfb      	ldrb	r3, [r7, #15]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d102      	bne.n	800a99c <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2200      	movs	r2, #0
 800a99a:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	2100      	movs	r1, #0
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f7fd fbd9 	bl	8008158 <unlock_fs>
#endif
	}
	return res;
 800a9a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	3710      	adds	r7, #16
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}

0800a9b0 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b084      	sub	sp, #16
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
 800a9b8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f107 0208 	add.w	r2, r7, #8
 800a9c0:	4611      	mov	r1, r2
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f7ff f830 	bl	8009a28 <validate>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a9cc:	7bfb      	ldrb	r3, [r7, #15]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d126      	bne.n	800aa20 <f_readdir+0x70>
		if (!fno) {
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d106      	bne.n	800a9e6 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800a9d8:	2100      	movs	r1, #0
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f7fe f908 	bl	8008bf0 <dir_sdi>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	73fb      	strb	r3, [r7, #15]
 800a9e4:	e01c      	b.n	800aa20 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800a9e6:	2100      	movs	r1, #0
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f7fe fac7 	bl	8008f7c <dir_read>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800a9f2:	7bfb      	ldrb	r3, [r7, #15]
 800a9f4:	2b04      	cmp	r3, #4
 800a9f6:	d101      	bne.n	800a9fc <f_readdir+0x4c>
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800a9fc:	7bfb      	ldrb	r3, [r7, #15]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d10e      	bne.n	800aa20 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800aa02:	6839      	ldr	r1, [r7, #0]
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f7fe fbbb 	bl	8009180 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800aa0a:	2100      	movs	r1, #0
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f7fe f96a 	bl	8008ce6 <dir_next>
 800aa12:	4603      	mov	r3, r0
 800aa14:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800aa16:	7bfb      	ldrb	r3, [r7, #15]
 800aa18:	2b04      	cmp	r3, #4
 800aa1a:	d101      	bne.n	800aa20 <f_readdir+0x70>
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	7bfa      	ldrb	r2, [r7, #15]
 800aa24:	4611      	mov	r1, r2
 800aa26:	4618      	mov	r0, r3
 800aa28:	f7fd fb96 	bl	8008158 <unlock_fs>
 800aa2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3710      	adds	r7, #16
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}

0800aa36 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800aa36:	b580      	push	{r7, lr}
 800aa38:	b09e      	sub	sp, #120	; 0x78
 800aa3a:	af00      	add	r7, sp, #0
 800aa3c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800aa42:	f107 010c 	add.w	r1, r7, #12
 800aa46:	1d3b      	adds	r3, r7, #4
 800aa48:	2202      	movs	r2, #2
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f7fe fd98 	bl	8009580 <find_volume>
 800aa50:	4603      	mov	r3, r0
 800aa52:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 800aa5a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	f040 808e 	bne.w	800ab80 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800aa64:	687a      	ldr	r2, [r7, #4]
 800aa66:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800aa6a:	4611      	mov	r1, r2
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f7fe fc7b 	bl	8009368 <follow_path>
 800aa72:	4603      	mov	r3, r0
 800aa74:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800aa78:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d108      	bne.n	800aa92 <f_unlink+0x5c>
 800aa80:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800aa84:	2102      	movs	r1, #2
 800aa86:	4618      	mov	r0, r3
 800aa88:	f7fd fb82 	bl	8008190 <chk_lock>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800aa92:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d172      	bne.n	800ab80 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800aa9a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800aa9e:	b25b      	sxtb	r3, r3
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	da03      	bge.n	800aaac <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800aaa4:	2306      	movs	r3, #6
 800aaa6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800aaaa:	e008      	b.n	800aabe <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800aaac:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800aab0:	f003 0301 	and.w	r3, r3, #1
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d002      	beq.n	800aabe <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800aab8:	2307      	movs	r3, #7
 800aaba:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 800aabe:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d134      	bne.n	800ab30 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aaca:	4611      	mov	r1, r2
 800aacc:	4618      	mov	r0, r3
 800aace:	f7fe fa16 	bl	8008efe <ld_clust>
 800aad2:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800aad4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800aad8:	f003 0310 	and.w	r3, r3, #16
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d027      	beq.n	800ab30 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800aae4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aae6:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800aae8:	f107 0310 	add.w	r3, r7, #16
 800aaec:	2100      	movs	r1, #0
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f7fe f87e 	bl	8008bf0 <dir_sdi>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 800aafa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d116      	bne.n	800ab30 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800ab02:	f107 0310 	add.w	r3, r7, #16
 800ab06:	2100      	movs	r1, #0
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f7fe fa37 	bl	8008f7c <dir_read>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800ab14:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d102      	bne.n	800ab22 <f_unlink+0xec>
 800ab1c:	2307      	movs	r3, #7
 800ab1e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800ab22:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ab26:	2b04      	cmp	r3, #4
 800ab28:	d102      	bne.n	800ab30 <f_unlink+0xfa>
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 800ab30:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d123      	bne.n	800ab80 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800ab38:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f7fe fb01 	bl	8009144 <dir_remove>
 800ab42:	4603      	mov	r3, r0
 800ab44:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800ab48:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d10c      	bne.n	800ab6a <f_unlink+0x134>
 800ab50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d009      	beq.n	800ab6a <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800ab56:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f7fd ff15 	bl	800898e <remove_chain>
 800ab64:	4603      	mov	r3, r0
 800ab66:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800ab6a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d106      	bne.n	800ab80 <f_unlink+0x14a>
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	4618      	mov	r0, r3
 800ab76:	f7fd fce9 	bl	800854c <sync_fs>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800ab86:	4611      	mov	r1, r2
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f7fd fae5 	bl	8008158 <unlock_fs>
 800ab8e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3778      	adds	r7, #120	; 0x78
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}
	...

0800ab9c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b087      	sub	sp, #28
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	60f8      	str	r0, [r7, #12]
 800aba4:	60b9      	str	r1, [r7, #8]
 800aba6:	4613      	mov	r3, r2
 800aba8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800abaa:	2301      	movs	r3, #1
 800abac:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800abae:	2300      	movs	r3, #0
 800abb0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800abb2:	4b1f      	ldr	r3, [pc, #124]	; (800ac30 <FATFS_LinkDriverEx+0x94>)
 800abb4:	7a5b      	ldrb	r3, [r3, #9]
 800abb6:	b2db      	uxtb	r3, r3
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d131      	bne.n	800ac20 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800abbc:	4b1c      	ldr	r3, [pc, #112]	; (800ac30 <FATFS_LinkDriverEx+0x94>)
 800abbe:	7a5b      	ldrb	r3, [r3, #9]
 800abc0:	b2db      	uxtb	r3, r3
 800abc2:	461a      	mov	r2, r3
 800abc4:	4b1a      	ldr	r3, [pc, #104]	; (800ac30 <FATFS_LinkDriverEx+0x94>)
 800abc6:	2100      	movs	r1, #0
 800abc8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800abca:	4b19      	ldr	r3, [pc, #100]	; (800ac30 <FATFS_LinkDriverEx+0x94>)
 800abcc:	7a5b      	ldrb	r3, [r3, #9]
 800abce:	b2db      	uxtb	r3, r3
 800abd0:	4a17      	ldr	r2, [pc, #92]	; (800ac30 <FATFS_LinkDriverEx+0x94>)
 800abd2:	009b      	lsls	r3, r3, #2
 800abd4:	4413      	add	r3, r2
 800abd6:	68fa      	ldr	r2, [r7, #12]
 800abd8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800abda:	4b15      	ldr	r3, [pc, #84]	; (800ac30 <FATFS_LinkDriverEx+0x94>)
 800abdc:	7a5b      	ldrb	r3, [r3, #9]
 800abde:	b2db      	uxtb	r3, r3
 800abe0:	461a      	mov	r2, r3
 800abe2:	4b13      	ldr	r3, [pc, #76]	; (800ac30 <FATFS_LinkDriverEx+0x94>)
 800abe4:	4413      	add	r3, r2
 800abe6:	79fa      	ldrb	r2, [r7, #7]
 800abe8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800abea:	4b11      	ldr	r3, [pc, #68]	; (800ac30 <FATFS_LinkDriverEx+0x94>)
 800abec:	7a5b      	ldrb	r3, [r3, #9]
 800abee:	b2db      	uxtb	r3, r3
 800abf0:	1c5a      	adds	r2, r3, #1
 800abf2:	b2d1      	uxtb	r1, r2
 800abf4:	4a0e      	ldr	r2, [pc, #56]	; (800ac30 <FATFS_LinkDriverEx+0x94>)
 800abf6:	7251      	strb	r1, [r2, #9]
 800abf8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800abfa:	7dbb      	ldrb	r3, [r7, #22]
 800abfc:	3330      	adds	r3, #48	; 0x30
 800abfe:	b2da      	uxtb	r2, r3
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	3301      	adds	r3, #1
 800ac08:	223a      	movs	r2, #58	; 0x3a
 800ac0a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	3302      	adds	r3, #2
 800ac10:	222f      	movs	r2, #47	; 0x2f
 800ac12:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	3303      	adds	r3, #3
 800ac18:	2200      	movs	r2, #0
 800ac1a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ac20:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	371c      	adds	r7, #28
 800ac26:	46bd      	mov	sp, r7
 800ac28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2c:	4770      	bx	lr
 800ac2e:	bf00      	nop
 800ac30:	20001158 	.word	0x20001158

0800ac34 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b082      	sub	sp, #8
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
 800ac3c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ac3e:	2200      	movs	r2, #0
 800ac40:	6839      	ldr	r1, [r7, #0]
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f7ff ffaa 	bl	800ab9c <FATFS_LinkDriverEx>
 800ac48:	4603      	mov	r3, r0
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3708      	adds	r7, #8
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}

0800ac52 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800ac52:	b580      	push	{r7, lr}
 800ac54:	b084      	sub	sp, #16
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	4603      	mov	r3, r0
 800ac5a:	6039      	str	r1, [r7, #0]
 800ac5c:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osMutexDef(MTX);
    *sobj = osMutexCreate(osMutex(MTX));
#else
    *sobj = osMutexNew(NULL);
 800ac5e:	2000      	movs	r0, #0
 800ac60:	f000 f9f0 	bl	800b044 <osMutexNew>
 800ac64:	4602      	mov	r2, r0
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	bf14      	ite	ne
 800ac72:	2301      	movne	r3, #1
 800ac74:	2300      	moveq	r3, #0
 800ac76:	b2db      	uxtb	r3, r3
 800ac78:	60fb      	str	r3, [r7, #12]

    return ret;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3710      	adds	r7, #16
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}

0800ac84 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b082      	sub	sp, #8
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f000 fae7 	bl	800b260 <osMutexDelete>
#else
    osSemaphoreDelete (sobj);
#endif
    return 1;
 800ac92:	2301      	movs	r3, #1
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	3708      	adds	r7, #8
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}

0800ac9c <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b084      	sub	sp, #16
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800aca4:	2300      	movs	r3, #0
 800aca6:	60fb      	str	r3, [r7, #12]
#endif

#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
 800aca8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f000 fa4f 	bl	800b150 <osMutexAcquire>
 800acb2:	4603      	mov	r3, r0
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d101      	bne.n	800acbc <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800acb8:	2301      	movs	r3, #1
 800acba:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800acbc:	68fb      	ldr	r3, [r7, #12]
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3710      	adds	r7, #16
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}

0800acc6 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800acc6:	b580      	push	{r7, lr}
 800acc8:	b082      	sub	sp, #8
 800acca:	af00      	add	r7, sp, #0
 800accc:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f000 fa89 	bl	800b1e6 <osMutexRelease>
#else
  osSemaphoreRelease(sobj);
#endif
}
 800acd4:	bf00      	nop
 800acd6:	3708      	adds	r7, #8
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}

0800acdc <__NVIC_SetPriority>:
{
 800acdc:	b480      	push	{r7}
 800acde:	b083      	sub	sp, #12
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	4603      	mov	r3, r0
 800ace4:	6039      	str	r1, [r7, #0]
 800ace6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ace8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800acec:	2b00      	cmp	r3, #0
 800acee:	db0a      	blt.n	800ad06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	b2da      	uxtb	r2, r3
 800acf4:	490c      	ldr	r1, [pc, #48]	; (800ad28 <__NVIC_SetPriority+0x4c>)
 800acf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800acfa:	0112      	lsls	r2, r2, #4
 800acfc:	b2d2      	uxtb	r2, r2
 800acfe:	440b      	add	r3, r1
 800ad00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ad04:	e00a      	b.n	800ad1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	b2da      	uxtb	r2, r3
 800ad0a:	4908      	ldr	r1, [pc, #32]	; (800ad2c <__NVIC_SetPriority+0x50>)
 800ad0c:	79fb      	ldrb	r3, [r7, #7]
 800ad0e:	f003 030f 	and.w	r3, r3, #15
 800ad12:	3b04      	subs	r3, #4
 800ad14:	0112      	lsls	r2, r2, #4
 800ad16:	b2d2      	uxtb	r2, r2
 800ad18:	440b      	add	r3, r1
 800ad1a:	761a      	strb	r2, [r3, #24]
}
 800ad1c:	bf00      	nop
 800ad1e:	370c      	adds	r7, #12
 800ad20:	46bd      	mov	sp, r7
 800ad22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad26:	4770      	bx	lr
 800ad28:	e000e100 	.word	0xe000e100
 800ad2c:	e000ed00 	.word	0xe000ed00

0800ad30 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ad30:	b580      	push	{r7, lr}
 800ad32:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ad34:	4b05      	ldr	r3, [pc, #20]	; (800ad4c <SysTick_Handler+0x1c>)
 800ad36:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ad38:	f002 fe82 	bl	800da40 <xTaskGetSchedulerState>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	2b01      	cmp	r3, #1
 800ad40:	d001      	beq.n	800ad46 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ad42:	f003 fd69 	bl	800e818 <xPortSysTickHandler>
  }
}
 800ad46:	bf00      	nop
 800ad48:	bd80      	pop	{r7, pc}
 800ad4a:	bf00      	nop
 800ad4c:	e000e010 	.word	0xe000e010

0800ad50 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ad50:	b580      	push	{r7, lr}
 800ad52:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ad54:	2100      	movs	r1, #0
 800ad56:	f06f 0004 	mvn.w	r0, #4
 800ad5a:	f7ff ffbf 	bl	800acdc <__NVIC_SetPriority>
#endif
}
 800ad5e:	bf00      	nop
 800ad60:	bd80      	pop	{r7, pc}
	...

0800ad64 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ad64:	b480      	push	{r7}
 800ad66:	b083      	sub	sp, #12
 800ad68:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad6a:	f3ef 8305 	mrs	r3, IPSR
 800ad6e:	603b      	str	r3, [r7, #0]
  return(result);
 800ad70:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d003      	beq.n	800ad7e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ad76:	f06f 0305 	mvn.w	r3, #5
 800ad7a:	607b      	str	r3, [r7, #4]
 800ad7c:	e00c      	b.n	800ad98 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ad7e:	4b0a      	ldr	r3, [pc, #40]	; (800ada8 <osKernelInitialize+0x44>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d105      	bne.n	800ad92 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ad86:	4b08      	ldr	r3, [pc, #32]	; (800ada8 <osKernelInitialize+0x44>)
 800ad88:	2201      	movs	r2, #1
 800ad8a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	607b      	str	r3, [r7, #4]
 800ad90:	e002      	b.n	800ad98 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ad92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ad96:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ad98:	687b      	ldr	r3, [r7, #4]
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	370c      	adds	r7, #12
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada4:	4770      	bx	lr
 800ada6:	bf00      	nop
 800ada8:	20001164 	.word	0x20001164

0800adac <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800adac:	b580      	push	{r7, lr}
 800adae:	b082      	sub	sp, #8
 800adb0:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800adb2:	f002 fe45 	bl	800da40 <xTaskGetSchedulerState>
 800adb6:	4603      	mov	r3, r0
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d004      	beq.n	800adc6 <osKernelGetState+0x1a>
 800adbc:	2b02      	cmp	r3, #2
 800adbe:	d105      	bne.n	800adcc <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800adc0:	2302      	movs	r3, #2
 800adc2:	607b      	str	r3, [r7, #4]
      break;
 800adc4:	e00c      	b.n	800ade0 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800adc6:	2303      	movs	r3, #3
 800adc8:	607b      	str	r3, [r7, #4]
      break;
 800adca:	e009      	b.n	800ade0 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800adcc:	4b07      	ldr	r3, [pc, #28]	; (800adec <osKernelGetState+0x40>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	2b01      	cmp	r3, #1
 800add2:	d102      	bne.n	800adda <osKernelGetState+0x2e>
        state = osKernelReady;
 800add4:	2301      	movs	r3, #1
 800add6:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800add8:	e001      	b.n	800adde <osKernelGetState+0x32>
        state = osKernelInactive;
 800adda:	2300      	movs	r3, #0
 800addc:	607b      	str	r3, [r7, #4]
      break;
 800adde:	bf00      	nop
  }

  return (state);
 800ade0:	687b      	ldr	r3, [r7, #4]
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3708      	adds	r7, #8
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}
 800adea:	bf00      	nop
 800adec:	20001164 	.word	0x20001164

0800adf0 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b082      	sub	sp, #8
 800adf4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800adf6:	f3ef 8305 	mrs	r3, IPSR
 800adfa:	603b      	str	r3, [r7, #0]
  return(result);
 800adfc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d003      	beq.n	800ae0a <osKernelStart+0x1a>
    stat = osErrorISR;
 800ae02:	f06f 0305 	mvn.w	r3, #5
 800ae06:	607b      	str	r3, [r7, #4]
 800ae08:	e010      	b.n	800ae2c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ae0a:	4b0b      	ldr	r3, [pc, #44]	; (800ae38 <osKernelStart+0x48>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	2b01      	cmp	r3, #1
 800ae10:	d109      	bne.n	800ae26 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ae12:	f7ff ff9d 	bl	800ad50 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ae16:	4b08      	ldr	r3, [pc, #32]	; (800ae38 <osKernelStart+0x48>)
 800ae18:	2202      	movs	r2, #2
 800ae1a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ae1c:	f002 f992 	bl	800d144 <vTaskStartScheduler>
      stat = osOK;
 800ae20:	2300      	movs	r3, #0
 800ae22:	607b      	str	r3, [r7, #4]
 800ae24:	e002      	b.n	800ae2c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ae26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae2a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ae2c:	687b      	ldr	r3, [r7, #4]
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3708      	adds	r7, #8
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}
 800ae36:	bf00      	nop
 800ae38:	20001164 	.word	0x20001164

0800ae3c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b082      	sub	sp, #8
 800ae40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae42:	f3ef 8305 	mrs	r3, IPSR
 800ae46:	603b      	str	r3, [r7, #0]
  return(result);
 800ae48:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d003      	beq.n	800ae56 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800ae4e:	f002 faa5 	bl	800d39c <xTaskGetTickCountFromISR>
 800ae52:	6078      	str	r0, [r7, #4]
 800ae54:	e002      	b.n	800ae5c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800ae56:	f002 fa91 	bl	800d37c <xTaskGetTickCount>
 800ae5a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800ae5c:	687b      	ldr	r3, [r7, #4]
}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3708      	adds	r7, #8
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}

0800ae66 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ae66:	b580      	push	{r7, lr}
 800ae68:	b08e      	sub	sp, #56	; 0x38
 800ae6a:	af04      	add	r7, sp, #16
 800ae6c:	60f8      	str	r0, [r7, #12]
 800ae6e:	60b9      	str	r1, [r7, #8]
 800ae70:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ae72:	2300      	movs	r3, #0
 800ae74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae76:	f3ef 8305 	mrs	r3, IPSR
 800ae7a:	617b      	str	r3, [r7, #20]
  return(result);
 800ae7c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d17e      	bne.n	800af80 <osThreadNew+0x11a>
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d07b      	beq.n	800af80 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ae88:	2380      	movs	r3, #128	; 0x80
 800ae8a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ae8c:	2318      	movs	r3, #24
 800ae8e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ae90:	2300      	movs	r3, #0
 800ae92:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800ae94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae98:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d045      	beq.n	800af2c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d002      	beq.n	800aeae <osThreadNew+0x48>
        name = attr->name;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	699b      	ldr	r3, [r3, #24]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d002      	beq.n	800aebc <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	699b      	ldr	r3, [r3, #24]
 800aeba:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800aebc:	69fb      	ldr	r3, [r7, #28]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d008      	beq.n	800aed4 <osThreadNew+0x6e>
 800aec2:	69fb      	ldr	r3, [r7, #28]
 800aec4:	2b38      	cmp	r3, #56	; 0x38
 800aec6:	d805      	bhi.n	800aed4 <osThreadNew+0x6e>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	685b      	ldr	r3, [r3, #4]
 800aecc:	f003 0301 	and.w	r3, r3, #1
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d001      	beq.n	800aed8 <osThreadNew+0x72>
        return (NULL);
 800aed4:	2300      	movs	r3, #0
 800aed6:	e054      	b.n	800af82 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	695b      	ldr	r3, [r3, #20]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d003      	beq.n	800aee8 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	695b      	ldr	r3, [r3, #20]
 800aee4:	089b      	lsrs	r3, r3, #2
 800aee6:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	689b      	ldr	r3, [r3, #8]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d00e      	beq.n	800af0e <osThreadNew+0xa8>
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	68db      	ldr	r3, [r3, #12]
 800aef4:	2bbb      	cmp	r3, #187	; 0xbb
 800aef6:	d90a      	bls.n	800af0e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d006      	beq.n	800af0e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	695b      	ldr	r3, [r3, #20]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d002      	beq.n	800af0e <osThreadNew+0xa8>
        mem = 1;
 800af08:	2301      	movs	r3, #1
 800af0a:	61bb      	str	r3, [r7, #24]
 800af0c:	e010      	b.n	800af30 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	689b      	ldr	r3, [r3, #8]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d10c      	bne.n	800af30 <osThreadNew+0xca>
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	68db      	ldr	r3, [r3, #12]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d108      	bne.n	800af30 <osThreadNew+0xca>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	691b      	ldr	r3, [r3, #16]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d104      	bne.n	800af30 <osThreadNew+0xca>
          mem = 0;
 800af26:	2300      	movs	r3, #0
 800af28:	61bb      	str	r3, [r7, #24]
 800af2a:	e001      	b.n	800af30 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800af2c:	2300      	movs	r3, #0
 800af2e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800af30:	69bb      	ldr	r3, [r7, #24]
 800af32:	2b01      	cmp	r3, #1
 800af34:	d110      	bne.n	800af58 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800af3a:	687a      	ldr	r2, [r7, #4]
 800af3c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800af3e:	9202      	str	r2, [sp, #8]
 800af40:	9301      	str	r3, [sp, #4]
 800af42:	69fb      	ldr	r3, [r7, #28]
 800af44:	9300      	str	r3, [sp, #0]
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	6a3a      	ldr	r2, [r7, #32]
 800af4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800af4c:	68f8      	ldr	r0, [r7, #12]
 800af4e:	f001 fe07 	bl	800cb60 <xTaskCreateStatic>
 800af52:	4603      	mov	r3, r0
 800af54:	613b      	str	r3, [r7, #16]
 800af56:	e013      	b.n	800af80 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800af58:	69bb      	ldr	r3, [r7, #24]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d110      	bne.n	800af80 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800af5e:	6a3b      	ldr	r3, [r7, #32]
 800af60:	b29a      	uxth	r2, r3
 800af62:	f107 0310 	add.w	r3, r7, #16
 800af66:	9301      	str	r3, [sp, #4]
 800af68:	69fb      	ldr	r3, [r7, #28]
 800af6a:	9300      	str	r3, [sp, #0]
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800af70:	68f8      	ldr	r0, [r7, #12]
 800af72:	f001 fe52 	bl	800cc1a <xTaskCreate>
 800af76:	4603      	mov	r3, r0
 800af78:	2b01      	cmp	r3, #1
 800af7a:	d001      	beq.n	800af80 <osThreadNew+0x11a>
            hTask = NULL;
 800af7c:	2300      	movs	r3, #0
 800af7e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800af80:	693b      	ldr	r3, [r7, #16]
}
 800af82:	4618      	mov	r0, r3
 800af84:	3728      	adds	r7, #40	; 0x28
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}

0800af8a <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 800af8a:	b580      	push	{r7, lr}
 800af8c:	b086      	sub	sp, #24
 800af8e:	af00      	add	r7, sp, #0
 800af90:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af96:	f3ef 8305 	mrs	r3, IPSR
 800af9a:	60fb      	str	r3, [r7, #12]
  return(result);
 800af9c:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d003      	beq.n	800afaa <osThreadSuspend+0x20>
    stat = osErrorISR;
 800afa2:	f06f 0305 	mvn.w	r3, #5
 800afa6:	617b      	str	r3, [r7, #20]
 800afa8:	e00b      	b.n	800afc2 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d103      	bne.n	800afb8 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 800afb0:	f06f 0303 	mvn.w	r3, #3
 800afb4:	617b      	str	r3, [r7, #20]
 800afb6:	e004      	b.n	800afc2 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 800afb8:	2300      	movs	r3, #0
 800afba:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 800afbc:	6938      	ldr	r0, [r7, #16]
 800afbe:	f001 ffbb 	bl	800cf38 <vTaskSuspend>
  }

  return (stat);
 800afc2:	697b      	ldr	r3, [r7, #20]
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3718      	adds	r7, #24
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}

0800afcc <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 800afcc:	b580      	push	{r7, lr}
 800afce:	b086      	sub	sp, #24
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800afd8:	f3ef 8305 	mrs	r3, IPSR
 800afdc:	60fb      	str	r3, [r7, #12]
  return(result);
 800afde:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d003      	beq.n	800afec <osThreadResume+0x20>
    stat = osErrorISR;
 800afe4:	f06f 0305 	mvn.w	r3, #5
 800afe8:	617b      	str	r3, [r7, #20]
 800afea:	e00b      	b.n	800b004 <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d103      	bne.n	800affa <osThreadResume+0x2e>
    stat = osErrorParameter;
 800aff2:	f06f 0303 	mvn.w	r3, #3
 800aff6:	617b      	str	r3, [r7, #20]
 800aff8:	e004      	b.n	800b004 <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 800affa:	2300      	movs	r3, #0
 800affc:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 800affe:	6938      	ldr	r0, [r7, #16]
 800b000:	f002 f842 	bl	800d088 <vTaskResume>
  }

  return (stat);
 800b004:	697b      	ldr	r3, [r7, #20]
}
 800b006:	4618      	mov	r0, r3
 800b008:	3718      	adds	r7, #24
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}

0800b00e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b00e:	b580      	push	{r7, lr}
 800b010:	b084      	sub	sp, #16
 800b012:	af00      	add	r7, sp, #0
 800b014:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b016:	f3ef 8305 	mrs	r3, IPSR
 800b01a:	60bb      	str	r3, [r7, #8]
  return(result);
 800b01c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d003      	beq.n	800b02a <osDelay+0x1c>
    stat = osErrorISR;
 800b022:	f06f 0305 	mvn.w	r3, #5
 800b026:	60fb      	str	r3, [r7, #12]
 800b028:	e007      	b.n	800b03a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b02a:	2300      	movs	r3, #0
 800b02c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d002      	beq.n	800b03a <osDelay+0x2c>
      vTaskDelay(ticks);
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f001 ff4b 	bl	800ced0 <vTaskDelay>
    }
  }

  return (stat);
 800b03a:	68fb      	ldr	r3, [r7, #12]
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3710      	adds	r7, #16
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}

0800b044 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800b044:	b580      	push	{r7, lr}
 800b046:	b088      	sub	sp, #32
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800b04c:	2300      	movs	r3, #0
 800b04e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b050:	f3ef 8305 	mrs	r3, IPSR
 800b054:	60bb      	str	r3, [r7, #8]
  return(result);
 800b056:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d174      	bne.n	800b146 <osMutexNew+0x102>
    if (attr != NULL) {
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d003      	beq.n	800b06a <osMutexNew+0x26>
      type = attr->attr_bits;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	685b      	ldr	r3, [r3, #4]
 800b066:	61bb      	str	r3, [r7, #24]
 800b068:	e001      	b.n	800b06e <osMutexNew+0x2a>
    } else {
      type = 0U;
 800b06a:	2300      	movs	r3, #0
 800b06c:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800b06e:	69bb      	ldr	r3, [r7, #24]
 800b070:	f003 0301 	and.w	r3, r3, #1
 800b074:	2b00      	cmp	r3, #0
 800b076:	d002      	beq.n	800b07e <osMutexNew+0x3a>
      rmtx = 1U;
 800b078:	2301      	movs	r3, #1
 800b07a:	617b      	str	r3, [r7, #20]
 800b07c:	e001      	b.n	800b082 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800b07e:	2300      	movs	r3, #0
 800b080:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800b082:	69bb      	ldr	r3, [r7, #24]
 800b084:	f003 0308 	and.w	r3, r3, #8
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d15c      	bne.n	800b146 <osMutexNew+0x102>
      mem = -1;
 800b08c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b090:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d015      	beq.n	800b0c4 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	689b      	ldr	r3, [r3, #8]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d006      	beq.n	800b0ae <osMutexNew+0x6a>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	68db      	ldr	r3, [r3, #12]
 800b0a4:	2b4f      	cmp	r3, #79	; 0x4f
 800b0a6:	d902      	bls.n	800b0ae <osMutexNew+0x6a>
          mem = 1;
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	613b      	str	r3, [r7, #16]
 800b0ac:	e00c      	b.n	800b0c8 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	689b      	ldr	r3, [r3, #8]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d108      	bne.n	800b0c8 <osMutexNew+0x84>
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	68db      	ldr	r3, [r3, #12]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d104      	bne.n	800b0c8 <osMutexNew+0x84>
            mem = 0;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	613b      	str	r3, [r7, #16]
 800b0c2:	e001      	b.n	800b0c8 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	2b01      	cmp	r3, #1
 800b0cc:	d112      	bne.n	800b0f4 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d007      	beq.n	800b0e4 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	689b      	ldr	r3, [r3, #8]
 800b0d8:	4619      	mov	r1, r3
 800b0da:	2004      	movs	r0, #4
 800b0dc:	f000 fdaf 	bl	800bc3e <xQueueCreateMutexStatic>
 800b0e0:	61f8      	str	r0, [r7, #28]
 800b0e2:	e016      	b.n	800b112 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	689b      	ldr	r3, [r3, #8]
 800b0e8:	4619      	mov	r1, r3
 800b0ea:	2001      	movs	r0, #1
 800b0ec:	f000 fda7 	bl	800bc3e <xQueueCreateMutexStatic>
 800b0f0:	61f8      	str	r0, [r7, #28]
 800b0f2:	e00e      	b.n	800b112 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800b0f4:	693b      	ldr	r3, [r7, #16]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d10b      	bne.n	800b112 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d004      	beq.n	800b10a <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800b100:	2004      	movs	r0, #4
 800b102:	f000 fd84 	bl	800bc0e <xQueueCreateMutex>
 800b106:	61f8      	str	r0, [r7, #28]
 800b108:	e003      	b.n	800b112 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800b10a:	2001      	movs	r0, #1
 800b10c:	f000 fd7f 	bl	800bc0e <xQueueCreateMutex>
 800b110:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800b112:	69fb      	ldr	r3, [r7, #28]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d00c      	beq.n	800b132 <osMutexNew+0xee>
        if (attr != NULL) {
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d003      	beq.n	800b126 <osMutexNew+0xe2>
          name = attr->name;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	60fb      	str	r3, [r7, #12]
 800b124:	e001      	b.n	800b12a <osMutexNew+0xe6>
        } else {
          name = NULL;
 800b126:	2300      	movs	r3, #0
 800b128:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800b12a:	68f9      	ldr	r1, [r7, #12]
 800b12c:	69f8      	ldr	r0, [r7, #28]
 800b12e:	f001 fc8f 	bl	800ca50 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800b132:	69fb      	ldr	r3, [r7, #28]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d006      	beq.n	800b146 <osMutexNew+0x102>
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d003      	beq.n	800b146 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800b13e:	69fb      	ldr	r3, [r7, #28]
 800b140:	f043 0301 	orr.w	r3, r3, #1
 800b144:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800b146:	69fb      	ldr	r3, [r7, #28]
}
 800b148:	4618      	mov	r0, r3
 800b14a:	3720      	adds	r7, #32
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}

0800b150 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800b150:	b580      	push	{r7, lr}
 800b152:	b086      	sub	sp, #24
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
 800b158:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f023 0301 	bic.w	r3, r3, #1
 800b160:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f003 0301 	and.w	r3, r3, #1
 800b168:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800b16a:	2300      	movs	r3, #0
 800b16c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b16e:	f3ef 8305 	mrs	r3, IPSR
 800b172:	60bb      	str	r3, [r7, #8]
  return(result);
 800b174:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800b176:	2b00      	cmp	r3, #0
 800b178:	d003      	beq.n	800b182 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800b17a:	f06f 0305 	mvn.w	r3, #5
 800b17e:	617b      	str	r3, [r7, #20]
 800b180:	e02c      	b.n	800b1dc <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800b182:	693b      	ldr	r3, [r7, #16]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d103      	bne.n	800b190 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800b188:	f06f 0303 	mvn.w	r3, #3
 800b18c:	617b      	str	r3, [r7, #20]
 800b18e:	e025      	b.n	800b1dc <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d011      	beq.n	800b1ba <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800b196:	6839      	ldr	r1, [r7, #0]
 800b198:	6938      	ldr	r0, [r7, #16]
 800b19a:	f000 fd9f 	bl	800bcdc <xQueueTakeMutexRecursive>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	2b01      	cmp	r3, #1
 800b1a2:	d01b      	beq.n	800b1dc <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d003      	beq.n	800b1b2 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800b1aa:	f06f 0301 	mvn.w	r3, #1
 800b1ae:	617b      	str	r3, [r7, #20]
 800b1b0:	e014      	b.n	800b1dc <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800b1b2:	f06f 0302 	mvn.w	r3, #2
 800b1b6:	617b      	str	r3, [r7, #20]
 800b1b8:	e010      	b.n	800b1dc <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800b1ba:	6839      	ldr	r1, [r7, #0]
 800b1bc:	6938      	ldr	r0, [r7, #16]
 800b1be:	f001 f933 	bl	800c428 <xQueueSemaphoreTake>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	2b01      	cmp	r3, #1
 800b1c6:	d009      	beq.n	800b1dc <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d003      	beq.n	800b1d6 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800b1ce:	f06f 0301 	mvn.w	r3, #1
 800b1d2:	617b      	str	r3, [r7, #20]
 800b1d4:	e002      	b.n	800b1dc <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800b1d6:	f06f 0302 	mvn.w	r3, #2
 800b1da:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800b1dc:	697b      	ldr	r3, [r7, #20]
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	3718      	adds	r7, #24
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}

0800b1e6 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800b1e6:	b580      	push	{r7, lr}
 800b1e8:	b086      	sub	sp, #24
 800b1ea:	af00      	add	r7, sp, #0
 800b1ec:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f023 0301 	bic.w	r3, r3, #1
 800b1f4:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f003 0301 	and.w	r3, r3, #1
 800b1fc:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800b1fe:	2300      	movs	r3, #0
 800b200:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b202:	f3ef 8305 	mrs	r3, IPSR
 800b206:	60bb      	str	r3, [r7, #8]
  return(result);
 800b208:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d003      	beq.n	800b216 <osMutexRelease+0x30>
    stat = osErrorISR;
 800b20e:	f06f 0305 	mvn.w	r3, #5
 800b212:	617b      	str	r3, [r7, #20]
 800b214:	e01f      	b.n	800b256 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800b216:	693b      	ldr	r3, [r7, #16]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d103      	bne.n	800b224 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800b21c:	f06f 0303 	mvn.w	r3, #3
 800b220:	617b      	str	r3, [r7, #20]
 800b222:	e018      	b.n	800b256 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d009      	beq.n	800b23e <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800b22a:	6938      	ldr	r0, [r7, #16]
 800b22c:	f000 fd22 	bl	800bc74 <xQueueGiveMutexRecursive>
 800b230:	4603      	mov	r3, r0
 800b232:	2b01      	cmp	r3, #1
 800b234:	d00f      	beq.n	800b256 <osMutexRelease+0x70>
        stat = osErrorResource;
 800b236:	f06f 0302 	mvn.w	r3, #2
 800b23a:	617b      	str	r3, [r7, #20]
 800b23c:	e00b      	b.n	800b256 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800b23e:	2300      	movs	r3, #0
 800b240:	2200      	movs	r2, #0
 800b242:	2100      	movs	r1, #0
 800b244:	6938      	ldr	r0, [r7, #16]
 800b246:	f000 fde9 	bl	800be1c <xQueueGenericSend>
 800b24a:	4603      	mov	r3, r0
 800b24c:	2b01      	cmp	r3, #1
 800b24e:	d002      	beq.n	800b256 <osMutexRelease+0x70>
        stat = osErrorResource;
 800b250:	f06f 0302 	mvn.w	r3, #2
 800b254:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b256:	697b      	ldr	r3, [r7, #20]
}
 800b258:	4618      	mov	r0, r3
 800b25a:	3718      	adds	r7, #24
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}

0800b260 <osMutexDelete>:
  }

  return (owner);
}

osStatus_t osMutexDelete (osMutexId_t mutex_id) {
 800b260:	b580      	push	{r7, lr}
 800b262:	b086      	sub	sp, #24
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  SemaphoreHandle_t hMutex;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f023 0301 	bic.w	r3, r3, #1
 800b26e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b270:	f3ef 8305 	mrs	r3, IPSR
 800b274:	60fb      	str	r3, [r7, #12]
  return(result);
 800b276:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ()) {
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d003      	beq.n	800b284 <osMutexDelete+0x24>
    stat = osErrorISR;
 800b27c:	f06f 0305 	mvn.w	r3, #5
 800b280:	617b      	str	r3, [r7, #20]
 800b282:	e00e      	b.n	800b2a2 <osMutexDelete+0x42>
  }
  else if (hMutex == NULL) {
 800b284:	693b      	ldr	r3, [r7, #16]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d103      	bne.n	800b292 <osMutexDelete+0x32>
    stat = osErrorParameter;
 800b28a:	f06f 0303 	mvn.w	r3, #3
 800b28e:	617b      	str	r3, [r7, #20]
 800b290:	e007      	b.n	800b2a2 <osMutexDelete+0x42>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hMutex);
 800b292:	6938      	ldr	r0, [r7, #16]
 800b294:	f001 fc06 	bl	800caa4 <vQueueUnregisterQueue>
    #endif
    stat = osOK;
 800b298:	2300      	movs	r3, #0
 800b29a:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hMutex);
 800b29c:	6938      	ldr	r0, [r7, #16]
 800b29e:	f001 fa8b 	bl	800c7b8 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800b2a2:	697b      	ldr	r3, [r7, #20]
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	3718      	adds	r7, #24
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd80      	pop	{r7, pc}

0800b2ac <osSemaphoreNew>:
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b08a      	sub	sp, #40	; 0x28
 800b2b0:	af02      	add	r7, sp, #8
 800b2b2:	60f8      	str	r0, [r7, #12]
 800b2b4:	60b9      	str	r1, [r7, #8]
 800b2b6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b2bc:	f3ef 8305 	mrs	r3, IPSR
 800b2c0:	613b      	str	r3, [r7, #16]
  return(result);
 800b2c2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d175      	bne.n	800b3b4 <osSemaphoreNew+0x108>
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d072      	beq.n	800b3b4 <osSemaphoreNew+0x108>
 800b2ce:	68ba      	ldr	r2, [r7, #8]
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	429a      	cmp	r2, r3
 800b2d4:	d86e      	bhi.n	800b3b4 <osSemaphoreNew+0x108>
    mem = -1;
 800b2d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b2da:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d015      	beq.n	800b30e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	689b      	ldr	r3, [r3, #8]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d006      	beq.n	800b2f8 <osSemaphoreNew+0x4c>
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	68db      	ldr	r3, [r3, #12]
 800b2ee:	2b4f      	cmp	r3, #79	; 0x4f
 800b2f0:	d902      	bls.n	800b2f8 <osSemaphoreNew+0x4c>
        mem = 1;
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	61bb      	str	r3, [r7, #24]
 800b2f6:	e00c      	b.n	800b312 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	689b      	ldr	r3, [r3, #8]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d108      	bne.n	800b312 <osSemaphoreNew+0x66>
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	68db      	ldr	r3, [r3, #12]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d104      	bne.n	800b312 <osSemaphoreNew+0x66>
          mem = 0;
 800b308:	2300      	movs	r3, #0
 800b30a:	61bb      	str	r3, [r7, #24]
 800b30c:	e001      	b.n	800b312 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800b30e:	2300      	movs	r3, #0
 800b310:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800b312:	69bb      	ldr	r3, [r7, #24]
 800b314:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b318:	d04c      	beq.n	800b3b4 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	2b01      	cmp	r3, #1
 800b31e:	d128      	bne.n	800b372 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800b320:	69bb      	ldr	r3, [r7, #24]
 800b322:	2b01      	cmp	r3, #1
 800b324:	d10a      	bne.n	800b33c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	689b      	ldr	r3, [r3, #8]
 800b32a:	2203      	movs	r2, #3
 800b32c:	9200      	str	r2, [sp, #0]
 800b32e:	2200      	movs	r2, #0
 800b330:	2100      	movs	r1, #0
 800b332:	2001      	movs	r0, #1
 800b334:	f000 fb7c 	bl	800ba30 <xQueueGenericCreateStatic>
 800b338:	61f8      	str	r0, [r7, #28]
 800b33a:	e005      	b.n	800b348 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800b33c:	2203      	movs	r2, #3
 800b33e:	2100      	movs	r1, #0
 800b340:	2001      	movs	r0, #1
 800b342:	f000 fbed 	bl	800bb20 <xQueueGenericCreate>
 800b346:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b348:	69fb      	ldr	r3, [r7, #28]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d022      	beq.n	800b394 <osSemaphoreNew+0xe8>
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d01f      	beq.n	800b394 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b354:	2300      	movs	r3, #0
 800b356:	2200      	movs	r2, #0
 800b358:	2100      	movs	r1, #0
 800b35a:	69f8      	ldr	r0, [r7, #28]
 800b35c:	f000 fd5e 	bl	800be1c <xQueueGenericSend>
 800b360:	4603      	mov	r3, r0
 800b362:	2b01      	cmp	r3, #1
 800b364:	d016      	beq.n	800b394 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800b366:	69f8      	ldr	r0, [r7, #28]
 800b368:	f001 fa26 	bl	800c7b8 <vQueueDelete>
            hSemaphore = NULL;
 800b36c:	2300      	movs	r3, #0
 800b36e:	61fb      	str	r3, [r7, #28]
 800b370:	e010      	b.n	800b394 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800b372:	69bb      	ldr	r3, [r7, #24]
 800b374:	2b01      	cmp	r3, #1
 800b376:	d108      	bne.n	800b38a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	689b      	ldr	r3, [r3, #8]
 800b37c:	461a      	mov	r2, r3
 800b37e:	68b9      	ldr	r1, [r7, #8]
 800b380:	68f8      	ldr	r0, [r7, #12]
 800b382:	f000 fce1 	bl	800bd48 <xQueueCreateCountingSemaphoreStatic>
 800b386:	61f8      	str	r0, [r7, #28]
 800b388:	e004      	b.n	800b394 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b38a:	68b9      	ldr	r1, [r7, #8]
 800b38c:	68f8      	ldr	r0, [r7, #12]
 800b38e:	f000 fd12 	bl	800bdb6 <xQueueCreateCountingSemaphore>
 800b392:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800b394:	69fb      	ldr	r3, [r7, #28]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d00c      	beq.n	800b3b4 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d003      	beq.n	800b3a8 <osSemaphoreNew+0xfc>
          name = attr->name;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	617b      	str	r3, [r7, #20]
 800b3a6:	e001      	b.n	800b3ac <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800b3ac:	6979      	ldr	r1, [r7, #20]
 800b3ae:	69f8      	ldr	r0, [r7, #28]
 800b3b0:	f001 fb4e 	bl	800ca50 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800b3b4:	69fb      	ldr	r3, [r7, #28]
}
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	3720      	adds	r7, #32
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bd80      	pop	{r7, pc}
	...

0800b3c0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b086      	sub	sp, #24
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
 800b3c8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b3d2:	693b      	ldr	r3, [r7, #16]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d103      	bne.n	800b3e0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800b3d8:	f06f 0303 	mvn.w	r3, #3
 800b3dc:	617b      	str	r3, [r7, #20]
 800b3de:	e039      	b.n	800b454 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b3e0:	f3ef 8305 	mrs	r3, IPSR
 800b3e4:	60fb      	str	r3, [r7, #12]
  return(result);
 800b3e6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d022      	beq.n	800b432 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d003      	beq.n	800b3fa <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800b3f2:	f06f 0303 	mvn.w	r3, #3
 800b3f6:	617b      	str	r3, [r7, #20]
 800b3f8:	e02c      	b.n	800b454 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b3fe:	f107 0308 	add.w	r3, r7, #8
 800b402:	461a      	mov	r2, r3
 800b404:	2100      	movs	r1, #0
 800b406:	6938      	ldr	r0, [r7, #16]
 800b408:	f001 f91a 	bl	800c640 <xQueueReceiveFromISR>
 800b40c:	4603      	mov	r3, r0
 800b40e:	2b01      	cmp	r3, #1
 800b410:	d003      	beq.n	800b41a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800b412:	f06f 0302 	mvn.w	r3, #2
 800b416:	617b      	str	r3, [r7, #20]
 800b418:	e01c      	b.n	800b454 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d019      	beq.n	800b454 <osSemaphoreAcquire+0x94>
 800b420:	4b0f      	ldr	r3, [pc, #60]	; (800b460 <osSemaphoreAcquire+0xa0>)
 800b422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b426:	601a      	str	r2, [r3, #0]
 800b428:	f3bf 8f4f 	dsb	sy
 800b42c:	f3bf 8f6f 	isb	sy
 800b430:	e010      	b.n	800b454 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b432:	6839      	ldr	r1, [r7, #0]
 800b434:	6938      	ldr	r0, [r7, #16]
 800b436:	f000 fff7 	bl	800c428 <xQueueSemaphoreTake>
 800b43a:	4603      	mov	r3, r0
 800b43c:	2b01      	cmp	r3, #1
 800b43e:	d009      	beq.n	800b454 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d003      	beq.n	800b44e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800b446:	f06f 0301 	mvn.w	r3, #1
 800b44a:	617b      	str	r3, [r7, #20]
 800b44c:	e002      	b.n	800b454 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800b44e:	f06f 0302 	mvn.w	r3, #2
 800b452:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b454:	697b      	ldr	r3, [r7, #20]
}
 800b456:	4618      	mov	r0, r3
 800b458:	3718      	adds	r7, #24
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}
 800b45e:	bf00      	nop
 800b460:	e000ed04 	.word	0xe000ed04

0800b464 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b464:	b580      	push	{r7, lr}
 800b466:	b086      	sub	sp, #24
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b470:	2300      	movs	r3, #0
 800b472:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b474:	693b      	ldr	r3, [r7, #16]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d103      	bne.n	800b482 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800b47a:	f06f 0303 	mvn.w	r3, #3
 800b47e:	617b      	str	r3, [r7, #20]
 800b480:	e02c      	b.n	800b4dc <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b482:	f3ef 8305 	mrs	r3, IPSR
 800b486:	60fb      	str	r3, [r7, #12]
  return(result);
 800b488:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d01a      	beq.n	800b4c4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800b48e:	2300      	movs	r3, #0
 800b490:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b492:	f107 0308 	add.w	r3, r7, #8
 800b496:	4619      	mov	r1, r3
 800b498:	6938      	ldr	r0, [r7, #16]
 800b49a:	f000 fe58 	bl	800c14e <xQueueGiveFromISR>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	2b01      	cmp	r3, #1
 800b4a2:	d003      	beq.n	800b4ac <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800b4a4:	f06f 0302 	mvn.w	r3, #2
 800b4a8:	617b      	str	r3, [r7, #20]
 800b4aa:	e017      	b.n	800b4dc <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d014      	beq.n	800b4dc <osSemaphoreRelease+0x78>
 800b4b2:	4b0d      	ldr	r3, [pc, #52]	; (800b4e8 <osSemaphoreRelease+0x84>)
 800b4b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4b8:	601a      	str	r2, [r3, #0]
 800b4ba:	f3bf 8f4f 	dsb	sy
 800b4be:	f3bf 8f6f 	isb	sy
 800b4c2:	e00b      	b.n	800b4dc <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	2100      	movs	r1, #0
 800b4ca:	6938      	ldr	r0, [r7, #16]
 800b4cc:	f000 fca6 	bl	800be1c <xQueueGenericSend>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	2b01      	cmp	r3, #1
 800b4d4:	d002      	beq.n	800b4dc <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800b4d6:	f06f 0302 	mvn.w	r3, #2
 800b4da:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800b4dc:	697b      	ldr	r3, [r7, #20]
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	3718      	adds	r7, #24
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bd80      	pop	{r7, pc}
 800b4e6:	bf00      	nop
 800b4e8:	e000ed04 	.word	0xe000ed04

0800b4ec <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b086      	sub	sp, #24
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	613b      	str	r3, [r7, #16]
  uint32_t count;

  if (hSemaphore == NULL) {
 800b4f8:	693b      	ldr	r3, [r7, #16]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d102      	bne.n	800b504 <osSemaphoreGetCount+0x18>
    count = 0U;
 800b4fe:	2300      	movs	r3, #0
 800b500:	617b      	str	r3, [r7, #20]
 800b502:	e00e      	b.n	800b522 <osSemaphoreGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b504:	f3ef 8305 	mrs	r3, IPSR
 800b508:	60fb      	str	r3, [r7, #12]
  return(result);
 800b50a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d004      	beq.n	800b51a <osSemaphoreGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 800b510:	6938      	ldr	r0, [r7, #16]
 800b512:	f001 f933 	bl	800c77c <uxQueueMessagesWaitingFromISR>
 800b516:	6178      	str	r0, [r7, #20]
 800b518:	e003      	b.n	800b522 <osSemaphoreGetCount+0x36>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 800b51a:	6938      	ldr	r0, [r7, #16]
 800b51c:	f001 f910 	bl	800c740 <uxQueueMessagesWaiting>
 800b520:	6178      	str	r0, [r7, #20]
  }

  return (count);
 800b522:	697b      	ldr	r3, [r7, #20]
}
 800b524:	4618      	mov	r0, r3
 800b526:	3718      	adds	r7, #24
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}

0800b52c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b08a      	sub	sp, #40	; 0x28
 800b530:	af02      	add	r7, sp, #8
 800b532:	60f8      	str	r0, [r7, #12]
 800b534:	60b9      	str	r1, [r7, #8]
 800b536:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b538:	2300      	movs	r3, #0
 800b53a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b53c:	f3ef 8305 	mrs	r3, IPSR
 800b540:	613b      	str	r3, [r7, #16]
  return(result);
 800b542:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b544:	2b00      	cmp	r3, #0
 800b546:	d15f      	bne.n	800b608 <osMessageQueueNew+0xdc>
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d05c      	beq.n	800b608 <osMessageQueueNew+0xdc>
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d059      	beq.n	800b608 <osMessageQueueNew+0xdc>
    mem = -1;
 800b554:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b558:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d029      	beq.n	800b5b4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	689b      	ldr	r3, [r3, #8]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d012      	beq.n	800b58e <osMessageQueueNew+0x62>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	68db      	ldr	r3, [r3, #12]
 800b56c:	2b4f      	cmp	r3, #79	; 0x4f
 800b56e:	d90e      	bls.n	800b58e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b574:	2b00      	cmp	r3, #0
 800b576:	d00a      	beq.n	800b58e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	695a      	ldr	r2, [r3, #20]
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	68b9      	ldr	r1, [r7, #8]
 800b580:	fb01 f303 	mul.w	r3, r1, r3
 800b584:	429a      	cmp	r2, r3
 800b586:	d302      	bcc.n	800b58e <osMessageQueueNew+0x62>
        mem = 1;
 800b588:	2301      	movs	r3, #1
 800b58a:	61bb      	str	r3, [r7, #24]
 800b58c:	e014      	b.n	800b5b8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	689b      	ldr	r3, [r3, #8]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d110      	bne.n	800b5b8 <osMessageQueueNew+0x8c>
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	68db      	ldr	r3, [r3, #12]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d10c      	bne.n	800b5b8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d108      	bne.n	800b5b8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	695b      	ldr	r3, [r3, #20]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d104      	bne.n	800b5b8 <osMessageQueueNew+0x8c>
          mem = 0;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	61bb      	str	r3, [r7, #24]
 800b5b2:	e001      	b.n	800b5b8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b5b8:	69bb      	ldr	r3, [r7, #24]
 800b5ba:	2b01      	cmp	r3, #1
 800b5bc:	d10b      	bne.n	800b5d6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	691a      	ldr	r2, [r3, #16]
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	689b      	ldr	r3, [r3, #8]
 800b5c6:	2100      	movs	r1, #0
 800b5c8:	9100      	str	r1, [sp, #0]
 800b5ca:	68b9      	ldr	r1, [r7, #8]
 800b5cc:	68f8      	ldr	r0, [r7, #12]
 800b5ce:	f000 fa2f 	bl	800ba30 <xQueueGenericCreateStatic>
 800b5d2:	61f8      	str	r0, [r7, #28]
 800b5d4:	e008      	b.n	800b5e8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b5d6:	69bb      	ldr	r3, [r7, #24]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d105      	bne.n	800b5e8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b5dc:	2200      	movs	r2, #0
 800b5de:	68b9      	ldr	r1, [r7, #8]
 800b5e0:	68f8      	ldr	r0, [r7, #12]
 800b5e2:	f000 fa9d 	bl	800bb20 <xQueueGenericCreate>
 800b5e6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b5e8:	69fb      	ldr	r3, [r7, #28]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d00c      	beq.n	800b608 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d003      	beq.n	800b5fc <osMessageQueueNew+0xd0>
        name = attr->name;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	617b      	str	r3, [r7, #20]
 800b5fa:	e001      	b.n	800b600 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b600:	6979      	ldr	r1, [r7, #20]
 800b602:	69f8      	ldr	r0, [r7, #28]
 800b604:	f001 fa24 	bl	800ca50 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b608:	69fb      	ldr	r3, [r7, #28]
}
 800b60a:	4618      	mov	r0, r3
 800b60c:	3720      	adds	r7, #32
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd80      	pop	{r7, pc}
	...

0800b614 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b614:	b580      	push	{r7, lr}
 800b616:	b088      	sub	sp, #32
 800b618:	af00      	add	r7, sp, #0
 800b61a:	60f8      	str	r0, [r7, #12]
 800b61c:	60b9      	str	r1, [r7, #8]
 800b61e:	603b      	str	r3, [r7, #0]
 800b620:	4613      	mov	r3, r2
 800b622:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b628:	2300      	movs	r3, #0
 800b62a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b62c:	f3ef 8305 	mrs	r3, IPSR
 800b630:	617b      	str	r3, [r7, #20]
  return(result);
 800b632:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b634:	2b00      	cmp	r3, #0
 800b636:	d028      	beq.n	800b68a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b638:	69bb      	ldr	r3, [r7, #24]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d005      	beq.n	800b64a <osMessageQueuePut+0x36>
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d002      	beq.n	800b64a <osMessageQueuePut+0x36>
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d003      	beq.n	800b652 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800b64a:	f06f 0303 	mvn.w	r3, #3
 800b64e:	61fb      	str	r3, [r7, #28]
 800b650:	e038      	b.n	800b6c4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800b652:	2300      	movs	r3, #0
 800b654:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b656:	f107 0210 	add.w	r2, r7, #16
 800b65a:	2300      	movs	r3, #0
 800b65c:	68b9      	ldr	r1, [r7, #8]
 800b65e:	69b8      	ldr	r0, [r7, #24]
 800b660:	f000 fcda 	bl	800c018 <xQueueGenericSendFromISR>
 800b664:	4603      	mov	r3, r0
 800b666:	2b01      	cmp	r3, #1
 800b668:	d003      	beq.n	800b672 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800b66a:	f06f 0302 	mvn.w	r3, #2
 800b66e:	61fb      	str	r3, [r7, #28]
 800b670:	e028      	b.n	800b6c4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800b672:	693b      	ldr	r3, [r7, #16]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d025      	beq.n	800b6c4 <osMessageQueuePut+0xb0>
 800b678:	4b15      	ldr	r3, [pc, #84]	; (800b6d0 <osMessageQueuePut+0xbc>)
 800b67a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b67e:	601a      	str	r2, [r3, #0]
 800b680:	f3bf 8f4f 	dsb	sy
 800b684:	f3bf 8f6f 	isb	sy
 800b688:	e01c      	b.n	800b6c4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b68a:	69bb      	ldr	r3, [r7, #24]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d002      	beq.n	800b696 <osMessageQueuePut+0x82>
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d103      	bne.n	800b69e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800b696:	f06f 0303 	mvn.w	r3, #3
 800b69a:	61fb      	str	r3, [r7, #28]
 800b69c:	e012      	b.n	800b6c4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b69e:	2300      	movs	r3, #0
 800b6a0:	683a      	ldr	r2, [r7, #0]
 800b6a2:	68b9      	ldr	r1, [r7, #8]
 800b6a4:	69b8      	ldr	r0, [r7, #24]
 800b6a6:	f000 fbb9 	bl	800be1c <xQueueGenericSend>
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	2b01      	cmp	r3, #1
 800b6ae:	d009      	beq.n	800b6c4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d003      	beq.n	800b6be <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800b6b6:	f06f 0301 	mvn.w	r3, #1
 800b6ba:	61fb      	str	r3, [r7, #28]
 800b6bc:	e002      	b.n	800b6c4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800b6be:	f06f 0302 	mvn.w	r3, #2
 800b6c2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b6c4:	69fb      	ldr	r3, [r7, #28]
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	3720      	adds	r7, #32
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd80      	pop	{r7, pc}
 800b6ce:	bf00      	nop
 800b6d0:	e000ed04 	.word	0xe000ed04

0800b6d4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b088      	sub	sp, #32
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	60f8      	str	r0, [r7, #12]
 800b6dc:	60b9      	str	r1, [r7, #8]
 800b6de:	607a      	str	r2, [r7, #4]
 800b6e0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b6ea:	f3ef 8305 	mrs	r3, IPSR
 800b6ee:	617b      	str	r3, [r7, #20]
  return(result);
 800b6f0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d028      	beq.n	800b748 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b6f6:	69bb      	ldr	r3, [r7, #24]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d005      	beq.n	800b708 <osMessageQueueGet+0x34>
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d002      	beq.n	800b708 <osMessageQueueGet+0x34>
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d003      	beq.n	800b710 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800b708:	f06f 0303 	mvn.w	r3, #3
 800b70c:	61fb      	str	r3, [r7, #28]
 800b70e:	e037      	b.n	800b780 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800b710:	2300      	movs	r3, #0
 800b712:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b714:	f107 0310 	add.w	r3, r7, #16
 800b718:	461a      	mov	r2, r3
 800b71a:	68b9      	ldr	r1, [r7, #8]
 800b71c:	69b8      	ldr	r0, [r7, #24]
 800b71e:	f000 ff8f 	bl	800c640 <xQueueReceiveFromISR>
 800b722:	4603      	mov	r3, r0
 800b724:	2b01      	cmp	r3, #1
 800b726:	d003      	beq.n	800b730 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800b728:	f06f 0302 	mvn.w	r3, #2
 800b72c:	61fb      	str	r3, [r7, #28]
 800b72e:	e027      	b.n	800b780 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800b730:	693b      	ldr	r3, [r7, #16]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d024      	beq.n	800b780 <osMessageQueueGet+0xac>
 800b736:	4b15      	ldr	r3, [pc, #84]	; (800b78c <osMessageQueueGet+0xb8>)
 800b738:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b73c:	601a      	str	r2, [r3, #0]
 800b73e:	f3bf 8f4f 	dsb	sy
 800b742:	f3bf 8f6f 	isb	sy
 800b746:	e01b      	b.n	800b780 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b748:	69bb      	ldr	r3, [r7, #24]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d002      	beq.n	800b754 <osMessageQueueGet+0x80>
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d103      	bne.n	800b75c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800b754:	f06f 0303 	mvn.w	r3, #3
 800b758:	61fb      	str	r3, [r7, #28]
 800b75a:	e011      	b.n	800b780 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b75c:	683a      	ldr	r2, [r7, #0]
 800b75e:	68b9      	ldr	r1, [r7, #8]
 800b760:	69b8      	ldr	r0, [r7, #24]
 800b762:	f000 fd81 	bl	800c268 <xQueueReceive>
 800b766:	4603      	mov	r3, r0
 800b768:	2b01      	cmp	r3, #1
 800b76a:	d009      	beq.n	800b780 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d003      	beq.n	800b77a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800b772:	f06f 0301 	mvn.w	r3, #1
 800b776:	61fb      	str	r3, [r7, #28]
 800b778:	e002      	b.n	800b780 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800b77a:	f06f 0302 	mvn.w	r3, #2
 800b77e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b780:	69fb      	ldr	r3, [r7, #28]
}
 800b782:	4618      	mov	r0, r3
 800b784:	3720      	adds	r7, #32
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}
 800b78a:	bf00      	nop
 800b78c:	e000ed04 	.word	0xe000ed04

0800b790 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b790:	b480      	push	{r7}
 800b792:	b085      	sub	sp, #20
 800b794:	af00      	add	r7, sp, #0
 800b796:	60f8      	str	r0, [r7, #12]
 800b798:	60b9      	str	r1, [r7, #8]
 800b79a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	4a07      	ldr	r2, [pc, #28]	; (800b7bc <vApplicationGetIdleTaskMemory+0x2c>)
 800b7a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	4a06      	ldr	r2, [pc, #24]	; (800b7c0 <vApplicationGetIdleTaskMemory+0x30>)
 800b7a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2280      	movs	r2, #128	; 0x80
 800b7ac:	601a      	str	r2, [r3, #0]
}
 800b7ae:	bf00      	nop
 800b7b0:	3714      	adds	r7, #20
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b8:	4770      	bx	lr
 800b7ba:	bf00      	nop
 800b7bc:	20001168 	.word	0x20001168
 800b7c0:	20001224 	.word	0x20001224

0800b7c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b7c4:	b480      	push	{r7}
 800b7c6:	b085      	sub	sp, #20
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	60f8      	str	r0, [r7, #12]
 800b7cc:	60b9      	str	r1, [r7, #8]
 800b7ce:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	4a07      	ldr	r2, [pc, #28]	; (800b7f0 <vApplicationGetTimerTaskMemory+0x2c>)
 800b7d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	4a06      	ldr	r2, [pc, #24]	; (800b7f4 <vApplicationGetTimerTaskMemory+0x30>)
 800b7da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b7e2:	601a      	str	r2, [r3, #0]
}
 800b7e4:	bf00      	nop
 800b7e6:	3714      	adds	r7, #20
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ee:	4770      	bx	lr
 800b7f0:	20001424 	.word	0x20001424
 800b7f4:	200014e0 	.word	0x200014e0

0800b7f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b083      	sub	sp, #12
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f103 0208 	add.w	r2, r3, #8
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b810:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	f103 0208 	add.w	r2, r3, #8
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f103 0208 	add.w	r2, r3, #8
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	2200      	movs	r2, #0
 800b82a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b82c:	bf00      	nop
 800b82e:	370c      	adds	r7, #12
 800b830:	46bd      	mov	sp, r7
 800b832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b836:	4770      	bx	lr

0800b838 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b838:	b480      	push	{r7}
 800b83a:	b083      	sub	sp, #12
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2200      	movs	r2, #0
 800b844:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b846:	bf00      	nop
 800b848:	370c      	adds	r7, #12
 800b84a:	46bd      	mov	sp, r7
 800b84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b850:	4770      	bx	lr

0800b852 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b852:	b480      	push	{r7}
 800b854:	b085      	sub	sp, #20
 800b856:	af00      	add	r7, sp, #0
 800b858:	6078      	str	r0, [r7, #4]
 800b85a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	685b      	ldr	r3, [r3, #4]
 800b860:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	68fa      	ldr	r2, [r7, #12]
 800b866:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	689a      	ldr	r2, [r3, #8]
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	689b      	ldr	r3, [r3, #8]
 800b874:	683a      	ldr	r2, [r7, #0]
 800b876:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	683a      	ldr	r2, [r7, #0]
 800b87c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	687a      	ldr	r2, [r7, #4]
 800b882:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	1c5a      	adds	r2, r3, #1
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	601a      	str	r2, [r3, #0]
}
 800b88e:	bf00      	nop
 800b890:	3714      	adds	r7, #20
 800b892:	46bd      	mov	sp, r7
 800b894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b898:	4770      	bx	lr

0800b89a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b89a:	b480      	push	{r7}
 800b89c:	b085      	sub	sp, #20
 800b89e:	af00      	add	r7, sp, #0
 800b8a0:	6078      	str	r0, [r7, #4]
 800b8a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b8aa:	68bb      	ldr	r3, [r7, #8]
 800b8ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b8b0:	d103      	bne.n	800b8ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	691b      	ldr	r3, [r3, #16]
 800b8b6:	60fb      	str	r3, [r7, #12]
 800b8b8:	e00c      	b.n	800b8d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	3308      	adds	r3, #8
 800b8be:	60fb      	str	r3, [r7, #12]
 800b8c0:	e002      	b.n	800b8c8 <vListInsert+0x2e>
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	685b      	ldr	r3, [r3, #4]
 800b8c6:	60fb      	str	r3, [r7, #12]
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	685b      	ldr	r3, [r3, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	68ba      	ldr	r2, [r7, #8]
 800b8d0:	429a      	cmp	r2, r3
 800b8d2:	d2f6      	bcs.n	800b8c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	685a      	ldr	r2, [r3, #4]
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	685b      	ldr	r3, [r3, #4]
 800b8e0:	683a      	ldr	r2, [r7, #0]
 800b8e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	68fa      	ldr	r2, [r7, #12]
 800b8e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	683a      	ldr	r2, [r7, #0]
 800b8ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	687a      	ldr	r2, [r7, #4]
 800b8f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	1c5a      	adds	r2, r3, #1
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	601a      	str	r2, [r3, #0]
}
 800b900:	bf00      	nop
 800b902:	3714      	adds	r7, #20
 800b904:	46bd      	mov	sp, r7
 800b906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90a:	4770      	bx	lr

0800b90c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b90c:	b480      	push	{r7}
 800b90e:	b085      	sub	sp, #20
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	691b      	ldr	r3, [r3, #16]
 800b918:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	685b      	ldr	r3, [r3, #4]
 800b91e:	687a      	ldr	r2, [r7, #4]
 800b920:	6892      	ldr	r2, [r2, #8]
 800b922:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	689b      	ldr	r3, [r3, #8]
 800b928:	687a      	ldr	r2, [r7, #4]
 800b92a:	6852      	ldr	r2, [r2, #4]
 800b92c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	685b      	ldr	r3, [r3, #4]
 800b932:	687a      	ldr	r2, [r7, #4]
 800b934:	429a      	cmp	r2, r3
 800b936:	d103      	bne.n	800b940 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	689a      	ldr	r2, [r3, #8]
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2200      	movs	r2, #0
 800b944:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	1e5a      	subs	r2, r3, #1
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	681b      	ldr	r3, [r3, #0]
}
 800b954:	4618      	mov	r0, r3
 800b956:	3714      	adds	r7, #20
 800b958:	46bd      	mov	sp, r7
 800b95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95e:	4770      	bx	lr

0800b960 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b084      	sub	sp, #16
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
 800b968:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d10a      	bne.n	800b98a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b974:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b978:	f383 8811 	msr	BASEPRI, r3
 800b97c:	f3bf 8f6f 	isb	sy
 800b980:	f3bf 8f4f 	dsb	sy
 800b984:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b986:	bf00      	nop
 800b988:	e7fe      	b.n	800b988 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b98a:	f002 feb3 	bl	800e6f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	681a      	ldr	r2, [r3, #0]
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b996:	68f9      	ldr	r1, [r7, #12]
 800b998:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b99a:	fb01 f303 	mul.w	r3, r1, r3
 800b99e:	441a      	add	r2, r3
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	681a      	ldr	r2, [r3, #0]
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	681a      	ldr	r2, [r3, #0]
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9ba:	3b01      	subs	r3, #1
 800b9bc:	68f9      	ldr	r1, [r7, #12]
 800b9be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b9c0:	fb01 f303 	mul.w	r3, r1, r3
 800b9c4:	441a      	add	r2, r3
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	22ff      	movs	r2, #255	; 0xff
 800b9ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	22ff      	movs	r2, #255	; 0xff
 800b9d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d114      	bne.n	800ba0a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	691b      	ldr	r3, [r3, #16]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d01a      	beq.n	800ba1e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	3310      	adds	r3, #16
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f001 fe55 	bl	800d69c <xTaskRemoveFromEventList>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d012      	beq.n	800ba1e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b9f8:	4b0c      	ldr	r3, [pc, #48]	; (800ba2c <xQueueGenericReset+0xcc>)
 800b9fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9fe:	601a      	str	r2, [r3, #0]
 800ba00:	f3bf 8f4f 	dsb	sy
 800ba04:	f3bf 8f6f 	isb	sy
 800ba08:	e009      	b.n	800ba1e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	3310      	adds	r3, #16
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f7ff fef2 	bl	800b7f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	3324      	adds	r3, #36	; 0x24
 800ba18:	4618      	mov	r0, r3
 800ba1a:	f7ff feed 	bl	800b7f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ba1e:	f002 fe99 	bl	800e754 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ba22:	2301      	movs	r3, #1
}
 800ba24:	4618      	mov	r0, r3
 800ba26:	3710      	adds	r7, #16
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd80      	pop	{r7, pc}
 800ba2c:	e000ed04 	.word	0xe000ed04

0800ba30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b08e      	sub	sp, #56	; 0x38
 800ba34:	af02      	add	r7, sp, #8
 800ba36:	60f8      	str	r0, [r7, #12]
 800ba38:	60b9      	str	r1, [r7, #8]
 800ba3a:	607a      	str	r2, [r7, #4]
 800ba3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d10a      	bne.n	800ba5a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ba44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba48:	f383 8811 	msr	BASEPRI, r3
 800ba4c:	f3bf 8f6f 	isb	sy
 800ba50:	f3bf 8f4f 	dsb	sy
 800ba54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ba56:	bf00      	nop
 800ba58:	e7fe      	b.n	800ba58 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d10a      	bne.n	800ba76 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ba60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba64:	f383 8811 	msr	BASEPRI, r3
 800ba68:	f3bf 8f6f 	isb	sy
 800ba6c:	f3bf 8f4f 	dsb	sy
 800ba70:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ba72:	bf00      	nop
 800ba74:	e7fe      	b.n	800ba74 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d002      	beq.n	800ba82 <xQueueGenericCreateStatic+0x52>
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d001      	beq.n	800ba86 <xQueueGenericCreateStatic+0x56>
 800ba82:	2301      	movs	r3, #1
 800ba84:	e000      	b.n	800ba88 <xQueueGenericCreateStatic+0x58>
 800ba86:	2300      	movs	r3, #0
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d10a      	bne.n	800baa2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ba8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba90:	f383 8811 	msr	BASEPRI, r3
 800ba94:	f3bf 8f6f 	isb	sy
 800ba98:	f3bf 8f4f 	dsb	sy
 800ba9c:	623b      	str	r3, [r7, #32]
}
 800ba9e:	bf00      	nop
 800baa0:	e7fe      	b.n	800baa0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d102      	bne.n	800baae <xQueueGenericCreateStatic+0x7e>
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d101      	bne.n	800bab2 <xQueueGenericCreateStatic+0x82>
 800baae:	2301      	movs	r3, #1
 800bab0:	e000      	b.n	800bab4 <xQueueGenericCreateStatic+0x84>
 800bab2:	2300      	movs	r3, #0
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d10a      	bne.n	800bace <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800bab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800babc:	f383 8811 	msr	BASEPRI, r3
 800bac0:	f3bf 8f6f 	isb	sy
 800bac4:	f3bf 8f4f 	dsb	sy
 800bac8:	61fb      	str	r3, [r7, #28]
}
 800baca:	bf00      	nop
 800bacc:	e7fe      	b.n	800bacc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bace:	2350      	movs	r3, #80	; 0x50
 800bad0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bad2:	697b      	ldr	r3, [r7, #20]
 800bad4:	2b50      	cmp	r3, #80	; 0x50
 800bad6:	d00a      	beq.n	800baee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800bad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800badc:	f383 8811 	msr	BASEPRI, r3
 800bae0:	f3bf 8f6f 	isb	sy
 800bae4:	f3bf 8f4f 	dsb	sy
 800bae8:	61bb      	str	r3, [r7, #24]
}
 800baea:	bf00      	nop
 800baec:	e7fe      	b.n	800baec <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800baee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800baf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d00d      	beq.n	800bb16 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bafa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bafc:	2201      	movs	r2, #1
 800bafe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bb02:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bb06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb08:	9300      	str	r3, [sp, #0]
 800bb0a:	4613      	mov	r3, r2
 800bb0c:	687a      	ldr	r2, [r7, #4]
 800bb0e:	68b9      	ldr	r1, [r7, #8]
 800bb10:	68f8      	ldr	r0, [r7, #12]
 800bb12:	f000 f83f 	bl	800bb94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bb16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	3730      	adds	r7, #48	; 0x30
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}

0800bb20 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b08a      	sub	sp, #40	; 0x28
 800bb24:	af02      	add	r7, sp, #8
 800bb26:	60f8      	str	r0, [r7, #12]
 800bb28:	60b9      	str	r1, [r7, #8]
 800bb2a:	4613      	mov	r3, r2
 800bb2c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d10a      	bne.n	800bb4a <xQueueGenericCreate+0x2a>
	__asm volatile
 800bb34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb38:	f383 8811 	msr	BASEPRI, r3
 800bb3c:	f3bf 8f6f 	isb	sy
 800bb40:	f3bf 8f4f 	dsb	sy
 800bb44:	613b      	str	r3, [r7, #16]
}
 800bb46:	bf00      	nop
 800bb48:	e7fe      	b.n	800bb48 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	68ba      	ldr	r2, [r7, #8]
 800bb4e:	fb02 f303 	mul.w	r3, r2, r3
 800bb52:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bb54:	69fb      	ldr	r3, [r7, #28]
 800bb56:	3350      	adds	r3, #80	; 0x50
 800bb58:	4618      	mov	r0, r3
 800bb5a:	f002 feed 	bl	800e938 <pvPortMalloc>
 800bb5e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bb60:	69bb      	ldr	r3, [r7, #24]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d011      	beq.n	800bb8a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bb66:	69bb      	ldr	r3, [r7, #24]
 800bb68:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bb6a:	697b      	ldr	r3, [r7, #20]
 800bb6c:	3350      	adds	r3, #80	; 0x50
 800bb6e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bb70:	69bb      	ldr	r3, [r7, #24]
 800bb72:	2200      	movs	r2, #0
 800bb74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bb78:	79fa      	ldrb	r2, [r7, #7]
 800bb7a:	69bb      	ldr	r3, [r7, #24]
 800bb7c:	9300      	str	r3, [sp, #0]
 800bb7e:	4613      	mov	r3, r2
 800bb80:	697a      	ldr	r2, [r7, #20]
 800bb82:	68b9      	ldr	r1, [r7, #8]
 800bb84:	68f8      	ldr	r0, [r7, #12]
 800bb86:	f000 f805 	bl	800bb94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bb8a:	69bb      	ldr	r3, [r7, #24]
	}
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	3720      	adds	r7, #32
 800bb90:	46bd      	mov	sp, r7
 800bb92:	bd80      	pop	{r7, pc}

0800bb94 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b084      	sub	sp, #16
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	60f8      	str	r0, [r7, #12]
 800bb9c:	60b9      	str	r1, [r7, #8]
 800bb9e:	607a      	str	r2, [r7, #4]
 800bba0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d103      	bne.n	800bbb0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bba8:	69bb      	ldr	r3, [r7, #24]
 800bbaa:	69ba      	ldr	r2, [r7, #24]
 800bbac:	601a      	str	r2, [r3, #0]
 800bbae:	e002      	b.n	800bbb6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bbb0:	69bb      	ldr	r3, [r7, #24]
 800bbb2:	687a      	ldr	r2, [r7, #4]
 800bbb4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bbb6:	69bb      	ldr	r3, [r7, #24]
 800bbb8:	68fa      	ldr	r2, [r7, #12]
 800bbba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bbbc:	69bb      	ldr	r3, [r7, #24]
 800bbbe:	68ba      	ldr	r2, [r7, #8]
 800bbc0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bbc2:	2101      	movs	r1, #1
 800bbc4:	69b8      	ldr	r0, [r7, #24]
 800bbc6:	f7ff fecb 	bl	800b960 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bbca:	69bb      	ldr	r3, [r7, #24]
 800bbcc:	78fa      	ldrb	r2, [r7, #3]
 800bbce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bbd2:	bf00      	nop
 800bbd4:	3710      	adds	r7, #16
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}

0800bbda <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800bbda:	b580      	push	{r7, lr}
 800bbdc:	b082      	sub	sp, #8
 800bbde:	af00      	add	r7, sp, #0
 800bbe0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d00e      	beq.n	800bc06 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2200      	movs	r2, #0
 800bbec:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	2100      	movs	r1, #0
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	f000 f90b 	bl	800be1c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800bc06:	bf00      	nop
 800bc08:	3708      	adds	r7, #8
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}

0800bc0e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800bc0e:	b580      	push	{r7, lr}
 800bc10:	b086      	sub	sp, #24
 800bc12:	af00      	add	r7, sp, #0
 800bc14:	4603      	mov	r3, r0
 800bc16:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bc18:	2301      	movs	r3, #1
 800bc1a:	617b      	str	r3, [r7, #20]
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800bc20:	79fb      	ldrb	r3, [r7, #7]
 800bc22:	461a      	mov	r2, r3
 800bc24:	6939      	ldr	r1, [r7, #16]
 800bc26:	6978      	ldr	r0, [r7, #20]
 800bc28:	f7ff ff7a 	bl	800bb20 <xQueueGenericCreate>
 800bc2c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bc2e:	68f8      	ldr	r0, [r7, #12]
 800bc30:	f7ff ffd3 	bl	800bbda <prvInitialiseMutex>

		return xNewQueue;
 800bc34:	68fb      	ldr	r3, [r7, #12]
	}
 800bc36:	4618      	mov	r0, r3
 800bc38:	3718      	adds	r7, #24
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}

0800bc3e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800bc3e:	b580      	push	{r7, lr}
 800bc40:	b088      	sub	sp, #32
 800bc42:	af02      	add	r7, sp, #8
 800bc44:	4603      	mov	r3, r0
 800bc46:	6039      	str	r1, [r7, #0]
 800bc48:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	617b      	str	r3, [r7, #20]
 800bc4e:	2300      	movs	r3, #0
 800bc50:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800bc52:	79fb      	ldrb	r3, [r7, #7]
 800bc54:	9300      	str	r3, [sp, #0]
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	2200      	movs	r2, #0
 800bc5a:	6939      	ldr	r1, [r7, #16]
 800bc5c:	6978      	ldr	r0, [r7, #20]
 800bc5e:	f7ff fee7 	bl	800ba30 <xQueueGenericCreateStatic>
 800bc62:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bc64:	68f8      	ldr	r0, [r7, #12]
 800bc66:	f7ff ffb8 	bl	800bbda <prvInitialiseMutex>

		return xNewQueue;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
	}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	3718      	adds	r7, #24
 800bc70:	46bd      	mov	sp, r7
 800bc72:	bd80      	pop	{r7, pc}

0800bc74 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800bc74:	b590      	push	{r4, r7, lr}
 800bc76:	b087      	sub	sp, #28
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800bc80:	693b      	ldr	r3, [r7, #16]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d10a      	bne.n	800bc9c <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800bc86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc8a:	f383 8811 	msr	BASEPRI, r3
 800bc8e:	f3bf 8f6f 	isb	sy
 800bc92:	f3bf 8f4f 	dsb	sy
 800bc96:	60fb      	str	r3, [r7, #12]
}
 800bc98:	bf00      	nop
 800bc9a:	e7fe      	b.n	800bc9a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800bc9c:	693b      	ldr	r3, [r7, #16]
 800bc9e:	689c      	ldr	r4, [r3, #8]
 800bca0:	f001 febe 	bl	800da20 <xTaskGetCurrentTaskHandle>
 800bca4:	4603      	mov	r3, r0
 800bca6:	429c      	cmp	r4, r3
 800bca8:	d111      	bne.n	800bcce <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800bcaa:	693b      	ldr	r3, [r7, #16]
 800bcac:	68db      	ldr	r3, [r3, #12]
 800bcae:	1e5a      	subs	r2, r3, #1
 800bcb0:	693b      	ldr	r3, [r7, #16]
 800bcb2:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800bcb4:	693b      	ldr	r3, [r7, #16]
 800bcb6:	68db      	ldr	r3, [r3, #12]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d105      	bne.n	800bcc8 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	2100      	movs	r1, #0
 800bcc2:	6938      	ldr	r0, [r7, #16]
 800bcc4:	f000 f8aa 	bl	800be1c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800bcc8:	2301      	movs	r3, #1
 800bcca:	617b      	str	r3, [r7, #20]
 800bccc:	e001      	b.n	800bcd2 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800bcd2:	697b      	ldr	r3, [r7, #20]
	}
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	371c      	adds	r7, #28
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	bd90      	pop	{r4, r7, pc}

0800bcdc <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800bcdc:	b590      	push	{r4, r7, lr}
 800bcde:	b087      	sub	sp, #28
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
 800bce4:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800bcea:	693b      	ldr	r3, [r7, #16]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d10a      	bne.n	800bd06 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800bcf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcf4:	f383 8811 	msr	BASEPRI, r3
 800bcf8:	f3bf 8f6f 	isb	sy
 800bcfc:	f3bf 8f4f 	dsb	sy
 800bd00:	60fb      	str	r3, [r7, #12]
}
 800bd02:	bf00      	nop
 800bd04:	e7fe      	b.n	800bd04 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800bd06:	693b      	ldr	r3, [r7, #16]
 800bd08:	689c      	ldr	r4, [r3, #8]
 800bd0a:	f001 fe89 	bl	800da20 <xTaskGetCurrentTaskHandle>
 800bd0e:	4603      	mov	r3, r0
 800bd10:	429c      	cmp	r4, r3
 800bd12:	d107      	bne.n	800bd24 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800bd14:	693b      	ldr	r3, [r7, #16]
 800bd16:	68db      	ldr	r3, [r3, #12]
 800bd18:	1c5a      	adds	r2, r3, #1
 800bd1a:	693b      	ldr	r3, [r7, #16]
 800bd1c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800bd1e:	2301      	movs	r3, #1
 800bd20:	617b      	str	r3, [r7, #20]
 800bd22:	e00c      	b.n	800bd3e <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800bd24:	6839      	ldr	r1, [r7, #0]
 800bd26:	6938      	ldr	r0, [r7, #16]
 800bd28:	f000 fb7e 	bl	800c428 <xQueueSemaphoreTake>
 800bd2c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800bd2e:	697b      	ldr	r3, [r7, #20]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d004      	beq.n	800bd3e <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800bd34:	693b      	ldr	r3, [r7, #16]
 800bd36:	68db      	ldr	r3, [r3, #12]
 800bd38:	1c5a      	adds	r2, r3, #1
 800bd3a:	693b      	ldr	r3, [r7, #16]
 800bd3c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800bd3e:	697b      	ldr	r3, [r7, #20]
	}
 800bd40:	4618      	mov	r0, r3
 800bd42:	371c      	adds	r7, #28
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd90      	pop	{r4, r7, pc}

0800bd48 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b08a      	sub	sp, #40	; 0x28
 800bd4c:	af02      	add	r7, sp, #8
 800bd4e:	60f8      	str	r0, [r7, #12]
 800bd50:	60b9      	str	r1, [r7, #8]
 800bd52:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d10a      	bne.n	800bd70 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800bd5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd5e:	f383 8811 	msr	BASEPRI, r3
 800bd62:	f3bf 8f6f 	isb	sy
 800bd66:	f3bf 8f4f 	dsb	sy
 800bd6a:	61bb      	str	r3, [r7, #24]
}
 800bd6c:	bf00      	nop
 800bd6e:	e7fe      	b.n	800bd6e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bd70:	68ba      	ldr	r2, [r7, #8]
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	429a      	cmp	r2, r3
 800bd76:	d90a      	bls.n	800bd8e <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800bd78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd7c:	f383 8811 	msr	BASEPRI, r3
 800bd80:	f3bf 8f6f 	isb	sy
 800bd84:	f3bf 8f4f 	dsb	sy
 800bd88:	617b      	str	r3, [r7, #20]
}
 800bd8a:	bf00      	nop
 800bd8c:	e7fe      	b.n	800bd8c <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bd8e:	2302      	movs	r3, #2
 800bd90:	9300      	str	r3, [sp, #0]
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	2200      	movs	r2, #0
 800bd96:	2100      	movs	r1, #0
 800bd98:	68f8      	ldr	r0, [r7, #12]
 800bd9a:	f7ff fe49 	bl	800ba30 <xQueueGenericCreateStatic>
 800bd9e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800bda0:	69fb      	ldr	r3, [r7, #28]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d002      	beq.n	800bdac <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bda6:	69fb      	ldr	r3, [r7, #28]
 800bda8:	68ba      	ldr	r2, [r7, #8]
 800bdaa:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800bdac:	69fb      	ldr	r3, [r7, #28]
	}
 800bdae:	4618      	mov	r0, r3
 800bdb0:	3720      	adds	r7, #32
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bd80      	pop	{r7, pc}

0800bdb6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800bdb6:	b580      	push	{r7, lr}
 800bdb8:	b086      	sub	sp, #24
 800bdba:	af00      	add	r7, sp, #0
 800bdbc:	6078      	str	r0, [r7, #4]
 800bdbe:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d10a      	bne.n	800bddc <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800bdc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdca:	f383 8811 	msr	BASEPRI, r3
 800bdce:	f3bf 8f6f 	isb	sy
 800bdd2:	f3bf 8f4f 	dsb	sy
 800bdd6:	613b      	str	r3, [r7, #16]
}
 800bdd8:	bf00      	nop
 800bdda:	e7fe      	b.n	800bdda <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bddc:	683a      	ldr	r2, [r7, #0]
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	429a      	cmp	r2, r3
 800bde2:	d90a      	bls.n	800bdfa <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800bde4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bde8:	f383 8811 	msr	BASEPRI, r3
 800bdec:	f3bf 8f6f 	isb	sy
 800bdf0:	f3bf 8f4f 	dsb	sy
 800bdf4:	60fb      	str	r3, [r7, #12]
}
 800bdf6:	bf00      	nop
 800bdf8:	e7fe      	b.n	800bdf8 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bdfa:	2202      	movs	r2, #2
 800bdfc:	2100      	movs	r1, #0
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f7ff fe8e 	bl	800bb20 <xQueueGenericCreate>
 800be04:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800be06:	697b      	ldr	r3, [r7, #20]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d002      	beq.n	800be12 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800be0c:	697b      	ldr	r3, [r7, #20]
 800be0e:	683a      	ldr	r2, [r7, #0]
 800be10:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800be12:	697b      	ldr	r3, [r7, #20]
	}
 800be14:	4618      	mov	r0, r3
 800be16:	3718      	adds	r7, #24
 800be18:	46bd      	mov	sp, r7
 800be1a:	bd80      	pop	{r7, pc}

0800be1c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b08e      	sub	sp, #56	; 0x38
 800be20:	af00      	add	r7, sp, #0
 800be22:	60f8      	str	r0, [r7, #12]
 800be24:	60b9      	str	r1, [r7, #8]
 800be26:	607a      	str	r2, [r7, #4]
 800be28:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800be2a:	2300      	movs	r3, #0
 800be2c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800be32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be34:	2b00      	cmp	r3, #0
 800be36:	d10a      	bne.n	800be4e <xQueueGenericSend+0x32>
	__asm volatile
 800be38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be3c:	f383 8811 	msr	BASEPRI, r3
 800be40:	f3bf 8f6f 	isb	sy
 800be44:	f3bf 8f4f 	dsb	sy
 800be48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800be4a:	bf00      	nop
 800be4c:	e7fe      	b.n	800be4c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800be4e:	68bb      	ldr	r3, [r7, #8]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d103      	bne.n	800be5c <xQueueGenericSend+0x40>
 800be54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d101      	bne.n	800be60 <xQueueGenericSend+0x44>
 800be5c:	2301      	movs	r3, #1
 800be5e:	e000      	b.n	800be62 <xQueueGenericSend+0x46>
 800be60:	2300      	movs	r3, #0
 800be62:	2b00      	cmp	r3, #0
 800be64:	d10a      	bne.n	800be7c <xQueueGenericSend+0x60>
	__asm volatile
 800be66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be6a:	f383 8811 	msr	BASEPRI, r3
 800be6e:	f3bf 8f6f 	isb	sy
 800be72:	f3bf 8f4f 	dsb	sy
 800be76:	627b      	str	r3, [r7, #36]	; 0x24
}
 800be78:	bf00      	nop
 800be7a:	e7fe      	b.n	800be7a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	2b02      	cmp	r3, #2
 800be80:	d103      	bne.n	800be8a <xQueueGenericSend+0x6e>
 800be82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be86:	2b01      	cmp	r3, #1
 800be88:	d101      	bne.n	800be8e <xQueueGenericSend+0x72>
 800be8a:	2301      	movs	r3, #1
 800be8c:	e000      	b.n	800be90 <xQueueGenericSend+0x74>
 800be8e:	2300      	movs	r3, #0
 800be90:	2b00      	cmp	r3, #0
 800be92:	d10a      	bne.n	800beaa <xQueueGenericSend+0x8e>
	__asm volatile
 800be94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be98:	f383 8811 	msr	BASEPRI, r3
 800be9c:	f3bf 8f6f 	isb	sy
 800bea0:	f3bf 8f4f 	dsb	sy
 800bea4:	623b      	str	r3, [r7, #32]
}
 800bea6:	bf00      	nop
 800bea8:	e7fe      	b.n	800bea8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800beaa:	f001 fdc9 	bl	800da40 <xTaskGetSchedulerState>
 800beae:	4603      	mov	r3, r0
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d102      	bne.n	800beba <xQueueGenericSend+0x9e>
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d101      	bne.n	800bebe <xQueueGenericSend+0xa2>
 800beba:	2301      	movs	r3, #1
 800bebc:	e000      	b.n	800bec0 <xQueueGenericSend+0xa4>
 800bebe:	2300      	movs	r3, #0
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d10a      	bne.n	800beda <xQueueGenericSend+0xbe>
	__asm volatile
 800bec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bec8:	f383 8811 	msr	BASEPRI, r3
 800becc:	f3bf 8f6f 	isb	sy
 800bed0:	f3bf 8f4f 	dsb	sy
 800bed4:	61fb      	str	r3, [r7, #28]
}
 800bed6:	bf00      	nop
 800bed8:	e7fe      	b.n	800bed8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800beda:	f002 fc0b 	bl	800e6f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bee6:	429a      	cmp	r2, r3
 800bee8:	d302      	bcc.n	800bef0 <xQueueGenericSend+0xd4>
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	2b02      	cmp	r3, #2
 800beee:	d129      	bne.n	800bf44 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bef0:	683a      	ldr	r2, [r7, #0]
 800bef2:	68b9      	ldr	r1, [r7, #8]
 800bef4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bef6:	f000 fc9a 	bl	800c82e <prvCopyDataToQueue>
 800befa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800befc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800befe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d010      	beq.n	800bf26 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bf04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf06:	3324      	adds	r3, #36	; 0x24
 800bf08:	4618      	mov	r0, r3
 800bf0a:	f001 fbc7 	bl	800d69c <xTaskRemoveFromEventList>
 800bf0e:	4603      	mov	r3, r0
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d013      	beq.n	800bf3c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bf14:	4b3f      	ldr	r3, [pc, #252]	; (800c014 <xQueueGenericSend+0x1f8>)
 800bf16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf1a:	601a      	str	r2, [r3, #0]
 800bf1c:	f3bf 8f4f 	dsb	sy
 800bf20:	f3bf 8f6f 	isb	sy
 800bf24:	e00a      	b.n	800bf3c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bf26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d007      	beq.n	800bf3c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bf2c:	4b39      	ldr	r3, [pc, #228]	; (800c014 <xQueueGenericSend+0x1f8>)
 800bf2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf32:	601a      	str	r2, [r3, #0]
 800bf34:	f3bf 8f4f 	dsb	sy
 800bf38:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bf3c:	f002 fc0a 	bl	800e754 <vPortExitCritical>
				return pdPASS;
 800bf40:	2301      	movs	r3, #1
 800bf42:	e063      	b.n	800c00c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d103      	bne.n	800bf52 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bf4a:	f002 fc03 	bl	800e754 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	e05c      	b.n	800c00c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bf52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d106      	bne.n	800bf66 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bf58:	f107 0314 	add.w	r3, r7, #20
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	f001 fc01 	bl	800d764 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bf62:	2301      	movs	r3, #1
 800bf64:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bf66:	f002 fbf5 	bl	800e754 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bf6a:	f001 f95b 	bl	800d224 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bf6e:	f002 fbc1 	bl	800e6f4 <vPortEnterCritical>
 800bf72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bf78:	b25b      	sxtb	r3, r3
 800bf7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf7e:	d103      	bne.n	800bf88 <xQueueGenericSend+0x16c>
 800bf80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf82:	2200      	movs	r2, #0
 800bf84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bf88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf8e:	b25b      	sxtb	r3, r3
 800bf90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf94:	d103      	bne.n	800bf9e <xQueueGenericSend+0x182>
 800bf96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf98:	2200      	movs	r2, #0
 800bf9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bf9e:	f002 fbd9 	bl	800e754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bfa2:	1d3a      	adds	r2, r7, #4
 800bfa4:	f107 0314 	add.w	r3, r7, #20
 800bfa8:	4611      	mov	r1, r2
 800bfaa:	4618      	mov	r0, r3
 800bfac:	f001 fbf0 	bl	800d790 <xTaskCheckForTimeOut>
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d124      	bne.n	800c000 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bfb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfb8:	f000 fd31 	bl	800ca1e <prvIsQueueFull>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d018      	beq.n	800bff4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bfc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfc4:	3310      	adds	r3, #16
 800bfc6:	687a      	ldr	r2, [r7, #4]
 800bfc8:	4611      	mov	r1, r2
 800bfca:	4618      	mov	r0, r3
 800bfcc:	f001 fb16 	bl	800d5fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bfd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfd2:	f000 fcbc 	bl	800c94e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bfd6:	f001 f933 	bl	800d240 <xTaskResumeAll>
 800bfda:	4603      	mov	r3, r0
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	f47f af7c 	bne.w	800beda <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800bfe2:	4b0c      	ldr	r3, [pc, #48]	; (800c014 <xQueueGenericSend+0x1f8>)
 800bfe4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfe8:	601a      	str	r2, [r3, #0]
 800bfea:	f3bf 8f4f 	dsb	sy
 800bfee:	f3bf 8f6f 	isb	sy
 800bff2:	e772      	b.n	800beda <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bff4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bff6:	f000 fcaa 	bl	800c94e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bffa:	f001 f921 	bl	800d240 <xTaskResumeAll>
 800bffe:	e76c      	b.n	800beda <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c000:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c002:	f000 fca4 	bl	800c94e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c006:	f001 f91b 	bl	800d240 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c00a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	3738      	adds	r7, #56	; 0x38
 800c010:	46bd      	mov	sp, r7
 800c012:	bd80      	pop	{r7, pc}
 800c014:	e000ed04 	.word	0xe000ed04

0800c018 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b090      	sub	sp, #64	; 0x40
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	60f8      	str	r0, [r7, #12]
 800c020:	60b9      	str	r1, [r7, #8]
 800c022:	607a      	str	r2, [r7, #4]
 800c024:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d10a      	bne.n	800c046 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c034:	f383 8811 	msr	BASEPRI, r3
 800c038:	f3bf 8f6f 	isb	sy
 800c03c:	f3bf 8f4f 	dsb	sy
 800c040:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c042:	bf00      	nop
 800c044:	e7fe      	b.n	800c044 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c046:	68bb      	ldr	r3, [r7, #8]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d103      	bne.n	800c054 <xQueueGenericSendFromISR+0x3c>
 800c04c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c04e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c050:	2b00      	cmp	r3, #0
 800c052:	d101      	bne.n	800c058 <xQueueGenericSendFromISR+0x40>
 800c054:	2301      	movs	r3, #1
 800c056:	e000      	b.n	800c05a <xQueueGenericSendFromISR+0x42>
 800c058:	2300      	movs	r3, #0
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d10a      	bne.n	800c074 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c062:	f383 8811 	msr	BASEPRI, r3
 800c066:	f3bf 8f6f 	isb	sy
 800c06a:	f3bf 8f4f 	dsb	sy
 800c06e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c070:	bf00      	nop
 800c072:	e7fe      	b.n	800c072 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	2b02      	cmp	r3, #2
 800c078:	d103      	bne.n	800c082 <xQueueGenericSendFromISR+0x6a>
 800c07a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c07c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c07e:	2b01      	cmp	r3, #1
 800c080:	d101      	bne.n	800c086 <xQueueGenericSendFromISR+0x6e>
 800c082:	2301      	movs	r3, #1
 800c084:	e000      	b.n	800c088 <xQueueGenericSendFromISR+0x70>
 800c086:	2300      	movs	r3, #0
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d10a      	bne.n	800c0a2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c090:	f383 8811 	msr	BASEPRI, r3
 800c094:	f3bf 8f6f 	isb	sy
 800c098:	f3bf 8f4f 	dsb	sy
 800c09c:	623b      	str	r3, [r7, #32]
}
 800c09e:	bf00      	nop
 800c0a0:	e7fe      	b.n	800c0a0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c0a2:	f002 fc09 	bl	800e8b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c0a6:	f3ef 8211 	mrs	r2, BASEPRI
 800c0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ae:	f383 8811 	msr	BASEPRI, r3
 800c0b2:	f3bf 8f6f 	isb	sy
 800c0b6:	f3bf 8f4f 	dsb	sy
 800c0ba:	61fa      	str	r2, [r7, #28]
 800c0bc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c0be:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c0c0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0ca:	429a      	cmp	r2, r3
 800c0cc:	d302      	bcc.n	800c0d4 <xQueueGenericSendFromISR+0xbc>
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	2b02      	cmp	r3, #2
 800c0d2:	d12f      	bne.n	800c134 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c0d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c0da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c0de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0e2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c0e4:	683a      	ldr	r2, [r7, #0]
 800c0e6:	68b9      	ldr	r1, [r7, #8]
 800c0e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c0ea:	f000 fba0 	bl	800c82e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c0ee:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c0f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c0f6:	d112      	bne.n	800c11e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d016      	beq.n	800c12e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c102:	3324      	adds	r3, #36	; 0x24
 800c104:	4618      	mov	r0, r3
 800c106:	f001 fac9 	bl	800d69c <xTaskRemoveFromEventList>
 800c10a:	4603      	mov	r3, r0
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d00e      	beq.n	800c12e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d00b      	beq.n	800c12e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2201      	movs	r2, #1
 800c11a:	601a      	str	r2, [r3, #0]
 800c11c:	e007      	b.n	800c12e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c11e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c122:	3301      	adds	r3, #1
 800c124:	b2db      	uxtb	r3, r3
 800c126:	b25a      	sxtb	r2, r3
 800c128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c12a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c12e:	2301      	movs	r3, #1
 800c130:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c132:	e001      	b.n	800c138 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c134:	2300      	movs	r3, #0
 800c136:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c13a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c13c:	697b      	ldr	r3, [r7, #20]
 800c13e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c142:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c146:	4618      	mov	r0, r3
 800c148:	3740      	adds	r7, #64	; 0x40
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bd80      	pop	{r7, pc}

0800c14e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c14e:	b580      	push	{r7, lr}
 800c150:	b08e      	sub	sp, #56	; 0x38
 800c152:	af00      	add	r7, sp, #0
 800c154:	6078      	str	r0, [r7, #4]
 800c156:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d10a      	bne.n	800c178 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800c162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c166:	f383 8811 	msr	BASEPRI, r3
 800c16a:	f3bf 8f6f 	isb	sy
 800c16e:	f3bf 8f4f 	dsb	sy
 800c172:	623b      	str	r3, [r7, #32]
}
 800c174:	bf00      	nop
 800c176:	e7fe      	b.n	800c176 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c17a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d00a      	beq.n	800c196 <xQueueGiveFromISR+0x48>
	__asm volatile
 800c180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c184:	f383 8811 	msr	BASEPRI, r3
 800c188:	f3bf 8f6f 	isb	sy
 800c18c:	f3bf 8f4f 	dsb	sy
 800c190:	61fb      	str	r3, [r7, #28]
}
 800c192:	bf00      	nop
 800c194:	e7fe      	b.n	800c194 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d103      	bne.n	800c1a6 <xQueueGiveFromISR+0x58>
 800c19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a0:	689b      	ldr	r3, [r3, #8]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d101      	bne.n	800c1aa <xQueueGiveFromISR+0x5c>
 800c1a6:	2301      	movs	r3, #1
 800c1a8:	e000      	b.n	800c1ac <xQueueGiveFromISR+0x5e>
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d10a      	bne.n	800c1c6 <xQueueGiveFromISR+0x78>
	__asm volatile
 800c1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1b4:	f383 8811 	msr	BASEPRI, r3
 800c1b8:	f3bf 8f6f 	isb	sy
 800c1bc:	f3bf 8f4f 	dsb	sy
 800c1c0:	61bb      	str	r3, [r7, #24]
}
 800c1c2:	bf00      	nop
 800c1c4:	e7fe      	b.n	800c1c4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c1c6:	f002 fb77 	bl	800e8b8 <vPortValidateInterruptPriority>
	__asm volatile
 800c1ca:	f3ef 8211 	mrs	r2, BASEPRI
 800c1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1d2:	f383 8811 	msr	BASEPRI, r3
 800c1d6:	f3bf 8f6f 	isb	sy
 800c1da:	f3bf 8f4f 	dsb	sy
 800c1de:	617a      	str	r2, [r7, #20]
 800c1e0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c1e2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c1e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1ea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c1f2:	429a      	cmp	r2, r3
 800c1f4:	d22b      	bcs.n	800c24e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c1fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c202:	1c5a      	adds	r2, r3, #1
 800c204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c206:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c208:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c20c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c210:	d112      	bne.n	800c238 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c216:	2b00      	cmp	r3, #0
 800c218:	d016      	beq.n	800c248 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c21c:	3324      	adds	r3, #36	; 0x24
 800c21e:	4618      	mov	r0, r3
 800c220:	f001 fa3c 	bl	800d69c <xTaskRemoveFromEventList>
 800c224:	4603      	mov	r3, r0
 800c226:	2b00      	cmp	r3, #0
 800c228:	d00e      	beq.n	800c248 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c22a:	683b      	ldr	r3, [r7, #0]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d00b      	beq.n	800c248 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	2201      	movs	r2, #1
 800c234:	601a      	str	r2, [r3, #0]
 800c236:	e007      	b.n	800c248 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c238:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c23c:	3301      	adds	r3, #1
 800c23e:	b2db      	uxtb	r3, r3
 800c240:	b25a      	sxtb	r2, r3
 800c242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c244:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c248:	2301      	movs	r3, #1
 800c24a:	637b      	str	r3, [r7, #52]	; 0x34
 800c24c:	e001      	b.n	800c252 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c24e:	2300      	movs	r3, #0
 800c250:	637b      	str	r3, [r7, #52]	; 0x34
 800c252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c254:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	f383 8811 	msr	BASEPRI, r3
}
 800c25c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c25e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c260:	4618      	mov	r0, r3
 800c262:	3738      	adds	r7, #56	; 0x38
 800c264:	46bd      	mov	sp, r7
 800c266:	bd80      	pop	{r7, pc}

0800c268 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b08c      	sub	sp, #48	; 0x30
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	60f8      	str	r0, [r7, #12]
 800c270:	60b9      	str	r1, [r7, #8]
 800c272:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c274:	2300      	movs	r3, #0
 800c276:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d10a      	bne.n	800c298 <xQueueReceive+0x30>
	__asm volatile
 800c282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c286:	f383 8811 	msr	BASEPRI, r3
 800c28a:	f3bf 8f6f 	isb	sy
 800c28e:	f3bf 8f4f 	dsb	sy
 800c292:	623b      	str	r3, [r7, #32]
}
 800c294:	bf00      	nop
 800c296:	e7fe      	b.n	800c296 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d103      	bne.n	800c2a6 <xQueueReceive+0x3e>
 800c29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d101      	bne.n	800c2aa <xQueueReceive+0x42>
 800c2a6:	2301      	movs	r3, #1
 800c2a8:	e000      	b.n	800c2ac <xQueueReceive+0x44>
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d10a      	bne.n	800c2c6 <xQueueReceive+0x5e>
	__asm volatile
 800c2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b4:	f383 8811 	msr	BASEPRI, r3
 800c2b8:	f3bf 8f6f 	isb	sy
 800c2bc:	f3bf 8f4f 	dsb	sy
 800c2c0:	61fb      	str	r3, [r7, #28]
}
 800c2c2:	bf00      	nop
 800c2c4:	e7fe      	b.n	800c2c4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c2c6:	f001 fbbb 	bl	800da40 <xTaskGetSchedulerState>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d102      	bne.n	800c2d6 <xQueueReceive+0x6e>
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d101      	bne.n	800c2da <xQueueReceive+0x72>
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	e000      	b.n	800c2dc <xQueueReceive+0x74>
 800c2da:	2300      	movs	r3, #0
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d10a      	bne.n	800c2f6 <xQueueReceive+0x8e>
	__asm volatile
 800c2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2e4:	f383 8811 	msr	BASEPRI, r3
 800c2e8:	f3bf 8f6f 	isb	sy
 800c2ec:	f3bf 8f4f 	dsb	sy
 800c2f0:	61bb      	str	r3, [r7, #24]
}
 800c2f2:	bf00      	nop
 800c2f4:	e7fe      	b.n	800c2f4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c2f6:	f002 f9fd 	bl	800e6f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2fe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c302:	2b00      	cmp	r3, #0
 800c304:	d01f      	beq.n	800c346 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c306:	68b9      	ldr	r1, [r7, #8]
 800c308:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c30a:	f000 fafa 	bl	800c902 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c310:	1e5a      	subs	r2, r3, #1
 800c312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c314:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c318:	691b      	ldr	r3, [r3, #16]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d00f      	beq.n	800c33e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c31e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c320:	3310      	adds	r3, #16
 800c322:	4618      	mov	r0, r3
 800c324:	f001 f9ba 	bl	800d69c <xTaskRemoveFromEventList>
 800c328:	4603      	mov	r3, r0
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d007      	beq.n	800c33e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c32e:	4b3d      	ldr	r3, [pc, #244]	; (800c424 <xQueueReceive+0x1bc>)
 800c330:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c334:	601a      	str	r2, [r3, #0]
 800c336:	f3bf 8f4f 	dsb	sy
 800c33a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c33e:	f002 fa09 	bl	800e754 <vPortExitCritical>
				return pdPASS;
 800c342:	2301      	movs	r3, #1
 800c344:	e069      	b.n	800c41a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d103      	bne.n	800c354 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c34c:	f002 fa02 	bl	800e754 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c350:	2300      	movs	r3, #0
 800c352:	e062      	b.n	800c41a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c356:	2b00      	cmp	r3, #0
 800c358:	d106      	bne.n	800c368 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c35a:	f107 0310 	add.w	r3, r7, #16
 800c35e:	4618      	mov	r0, r3
 800c360:	f001 fa00 	bl	800d764 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c364:	2301      	movs	r3, #1
 800c366:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c368:	f002 f9f4 	bl	800e754 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c36c:	f000 ff5a 	bl	800d224 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c370:	f002 f9c0 	bl	800e6f4 <vPortEnterCritical>
 800c374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c376:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c37a:	b25b      	sxtb	r3, r3
 800c37c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c380:	d103      	bne.n	800c38a <xQueueReceive+0x122>
 800c382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c384:	2200      	movs	r2, #0
 800c386:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c38c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c390:	b25b      	sxtb	r3, r3
 800c392:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c396:	d103      	bne.n	800c3a0 <xQueueReceive+0x138>
 800c398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c39a:	2200      	movs	r2, #0
 800c39c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c3a0:	f002 f9d8 	bl	800e754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c3a4:	1d3a      	adds	r2, r7, #4
 800c3a6:	f107 0310 	add.w	r3, r7, #16
 800c3aa:	4611      	mov	r1, r2
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	f001 f9ef 	bl	800d790 <xTaskCheckForTimeOut>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d123      	bne.n	800c400 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c3b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3ba:	f000 fb1a 	bl	800c9f2 <prvIsQueueEmpty>
 800c3be:	4603      	mov	r3, r0
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d017      	beq.n	800c3f4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3c6:	3324      	adds	r3, #36	; 0x24
 800c3c8:	687a      	ldr	r2, [r7, #4]
 800c3ca:	4611      	mov	r1, r2
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f001 f915 	bl	800d5fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c3d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3d4:	f000 fabb 	bl	800c94e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c3d8:	f000 ff32 	bl	800d240 <xTaskResumeAll>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d189      	bne.n	800c2f6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c3e2:	4b10      	ldr	r3, [pc, #64]	; (800c424 <xQueueReceive+0x1bc>)
 800c3e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3e8:	601a      	str	r2, [r3, #0]
 800c3ea:	f3bf 8f4f 	dsb	sy
 800c3ee:	f3bf 8f6f 	isb	sy
 800c3f2:	e780      	b.n	800c2f6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c3f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3f6:	f000 faaa 	bl	800c94e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c3fa:	f000 ff21 	bl	800d240 <xTaskResumeAll>
 800c3fe:	e77a      	b.n	800c2f6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c400:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c402:	f000 faa4 	bl	800c94e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c406:	f000 ff1b 	bl	800d240 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c40a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c40c:	f000 faf1 	bl	800c9f2 <prvIsQueueEmpty>
 800c410:	4603      	mov	r3, r0
 800c412:	2b00      	cmp	r3, #0
 800c414:	f43f af6f 	beq.w	800c2f6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c418:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c41a:	4618      	mov	r0, r3
 800c41c:	3730      	adds	r7, #48	; 0x30
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}
 800c422:	bf00      	nop
 800c424:	e000ed04 	.word	0xe000ed04

0800c428 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b08e      	sub	sp, #56	; 0x38
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
 800c430:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c432:	2300      	movs	r3, #0
 800c434:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c43a:	2300      	movs	r3, #0
 800c43c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c43e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c440:	2b00      	cmp	r3, #0
 800c442:	d10a      	bne.n	800c45a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c448:	f383 8811 	msr	BASEPRI, r3
 800c44c:	f3bf 8f6f 	isb	sy
 800c450:	f3bf 8f4f 	dsb	sy
 800c454:	623b      	str	r3, [r7, #32]
}
 800c456:	bf00      	nop
 800c458:	e7fe      	b.n	800c458 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c45a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c45c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d00a      	beq.n	800c478 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c462:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c466:	f383 8811 	msr	BASEPRI, r3
 800c46a:	f3bf 8f6f 	isb	sy
 800c46e:	f3bf 8f4f 	dsb	sy
 800c472:	61fb      	str	r3, [r7, #28]
}
 800c474:	bf00      	nop
 800c476:	e7fe      	b.n	800c476 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c478:	f001 fae2 	bl	800da40 <xTaskGetSchedulerState>
 800c47c:	4603      	mov	r3, r0
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d102      	bne.n	800c488 <xQueueSemaphoreTake+0x60>
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d101      	bne.n	800c48c <xQueueSemaphoreTake+0x64>
 800c488:	2301      	movs	r3, #1
 800c48a:	e000      	b.n	800c48e <xQueueSemaphoreTake+0x66>
 800c48c:	2300      	movs	r3, #0
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d10a      	bne.n	800c4a8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c496:	f383 8811 	msr	BASEPRI, r3
 800c49a:	f3bf 8f6f 	isb	sy
 800c49e:	f3bf 8f4f 	dsb	sy
 800c4a2:	61bb      	str	r3, [r7, #24]
}
 800c4a4:	bf00      	nop
 800c4a6:	e7fe      	b.n	800c4a6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c4a8:	f002 f924 	bl	800e6f4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4b0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c4b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d024      	beq.n	800c502 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c4b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ba:	1e5a      	subs	r2, r3, #1
 800c4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4be:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d104      	bne.n	800c4d2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c4c8:	f001 fc30 	bl	800dd2c <pvTaskIncrementMutexHeldCount>
 800c4cc:	4602      	mov	r2, r0
 800c4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4d0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4d4:	691b      	ldr	r3, [r3, #16]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d00f      	beq.n	800c4fa <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4dc:	3310      	adds	r3, #16
 800c4de:	4618      	mov	r0, r3
 800c4e0:	f001 f8dc 	bl	800d69c <xTaskRemoveFromEventList>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d007      	beq.n	800c4fa <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c4ea:	4b54      	ldr	r3, [pc, #336]	; (800c63c <xQueueSemaphoreTake+0x214>)
 800c4ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4f0:	601a      	str	r2, [r3, #0]
 800c4f2:	f3bf 8f4f 	dsb	sy
 800c4f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c4fa:	f002 f92b 	bl	800e754 <vPortExitCritical>
				return pdPASS;
 800c4fe:	2301      	movs	r3, #1
 800c500:	e097      	b.n	800c632 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d111      	bne.n	800c52c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d00a      	beq.n	800c524 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c512:	f383 8811 	msr	BASEPRI, r3
 800c516:	f3bf 8f6f 	isb	sy
 800c51a:	f3bf 8f4f 	dsb	sy
 800c51e:	617b      	str	r3, [r7, #20]
}
 800c520:	bf00      	nop
 800c522:	e7fe      	b.n	800c522 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c524:	f002 f916 	bl	800e754 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c528:	2300      	movs	r3, #0
 800c52a:	e082      	b.n	800c632 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c52c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d106      	bne.n	800c540 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c532:	f107 030c 	add.w	r3, r7, #12
 800c536:	4618      	mov	r0, r3
 800c538:	f001 f914 	bl	800d764 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c53c:	2301      	movs	r3, #1
 800c53e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c540:	f002 f908 	bl	800e754 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c544:	f000 fe6e 	bl	800d224 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c548:	f002 f8d4 	bl	800e6f4 <vPortEnterCritical>
 800c54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c54e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c552:	b25b      	sxtb	r3, r3
 800c554:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c558:	d103      	bne.n	800c562 <xQueueSemaphoreTake+0x13a>
 800c55a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c55c:	2200      	movs	r2, #0
 800c55e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c564:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c568:	b25b      	sxtb	r3, r3
 800c56a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c56e:	d103      	bne.n	800c578 <xQueueSemaphoreTake+0x150>
 800c570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c572:	2200      	movs	r2, #0
 800c574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c578:	f002 f8ec 	bl	800e754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c57c:	463a      	mov	r2, r7
 800c57e:	f107 030c 	add.w	r3, r7, #12
 800c582:	4611      	mov	r1, r2
 800c584:	4618      	mov	r0, r3
 800c586:	f001 f903 	bl	800d790 <xTaskCheckForTimeOut>
 800c58a:	4603      	mov	r3, r0
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d132      	bne.n	800c5f6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c590:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c592:	f000 fa2e 	bl	800c9f2 <prvIsQueueEmpty>
 800c596:	4603      	mov	r3, r0
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d026      	beq.n	800c5ea <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c59c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d109      	bne.n	800c5b8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c5a4:	f002 f8a6 	bl	800e6f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5aa:	689b      	ldr	r3, [r3, #8]
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	f001 fa65 	bl	800da7c <xTaskPriorityInherit>
 800c5b2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c5b4:	f002 f8ce 	bl	800e754 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ba:	3324      	adds	r3, #36	; 0x24
 800c5bc:	683a      	ldr	r2, [r7, #0]
 800c5be:	4611      	mov	r1, r2
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	f001 f81b 	bl	800d5fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c5c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c5c8:	f000 f9c1 	bl	800c94e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c5cc:	f000 fe38 	bl	800d240 <xTaskResumeAll>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	f47f af68 	bne.w	800c4a8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c5d8:	4b18      	ldr	r3, [pc, #96]	; (800c63c <xQueueSemaphoreTake+0x214>)
 800c5da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5de:	601a      	str	r2, [r3, #0]
 800c5e0:	f3bf 8f4f 	dsb	sy
 800c5e4:	f3bf 8f6f 	isb	sy
 800c5e8:	e75e      	b.n	800c4a8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c5ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c5ec:	f000 f9af 	bl	800c94e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c5f0:	f000 fe26 	bl	800d240 <xTaskResumeAll>
 800c5f4:	e758      	b.n	800c4a8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c5f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c5f8:	f000 f9a9 	bl	800c94e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c5fc:	f000 fe20 	bl	800d240 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c600:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c602:	f000 f9f6 	bl	800c9f2 <prvIsQueueEmpty>
 800c606:	4603      	mov	r3, r0
 800c608:	2b00      	cmp	r3, #0
 800c60a:	f43f af4d 	beq.w	800c4a8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c610:	2b00      	cmp	r3, #0
 800c612:	d00d      	beq.n	800c630 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c614:	f002 f86e 	bl	800e6f4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c618:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c61a:	f000 f8f0 	bl	800c7fe <prvGetDisinheritPriorityAfterTimeout>
 800c61e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c622:	689b      	ldr	r3, [r3, #8]
 800c624:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c626:	4618      	mov	r0, r3
 800c628:	f001 fafe 	bl	800dc28 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c62c:	f002 f892 	bl	800e754 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c630:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c632:	4618      	mov	r0, r3
 800c634:	3738      	adds	r7, #56	; 0x38
 800c636:	46bd      	mov	sp, r7
 800c638:	bd80      	pop	{r7, pc}
 800c63a:	bf00      	nop
 800c63c:	e000ed04 	.word	0xe000ed04

0800c640 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b08e      	sub	sp, #56	; 0x38
 800c644:	af00      	add	r7, sp, #0
 800c646:	60f8      	str	r0, [r7, #12]
 800c648:	60b9      	str	r1, [r7, #8]
 800c64a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c652:	2b00      	cmp	r3, #0
 800c654:	d10a      	bne.n	800c66c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c65a:	f383 8811 	msr	BASEPRI, r3
 800c65e:	f3bf 8f6f 	isb	sy
 800c662:	f3bf 8f4f 	dsb	sy
 800c666:	623b      	str	r3, [r7, #32]
}
 800c668:	bf00      	nop
 800c66a:	e7fe      	b.n	800c66a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d103      	bne.n	800c67a <xQueueReceiveFromISR+0x3a>
 800c672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c676:	2b00      	cmp	r3, #0
 800c678:	d101      	bne.n	800c67e <xQueueReceiveFromISR+0x3e>
 800c67a:	2301      	movs	r3, #1
 800c67c:	e000      	b.n	800c680 <xQueueReceiveFromISR+0x40>
 800c67e:	2300      	movs	r3, #0
 800c680:	2b00      	cmp	r3, #0
 800c682:	d10a      	bne.n	800c69a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c684:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c688:	f383 8811 	msr	BASEPRI, r3
 800c68c:	f3bf 8f6f 	isb	sy
 800c690:	f3bf 8f4f 	dsb	sy
 800c694:	61fb      	str	r3, [r7, #28]
}
 800c696:	bf00      	nop
 800c698:	e7fe      	b.n	800c698 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c69a:	f002 f90d 	bl	800e8b8 <vPortValidateInterruptPriority>
	__asm volatile
 800c69e:	f3ef 8211 	mrs	r2, BASEPRI
 800c6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6a6:	f383 8811 	msr	BASEPRI, r3
 800c6aa:	f3bf 8f6f 	isb	sy
 800c6ae:	f3bf 8f4f 	dsb	sy
 800c6b2:	61ba      	str	r2, [r7, #24]
 800c6b4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c6b6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c6b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6be:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d02f      	beq.n	800c726 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c6cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c6d0:	68b9      	ldr	r1, [r7, #8]
 800c6d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c6d4:	f000 f915 	bl	800c902 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6da:	1e5a      	subs	r2, r3, #1
 800c6dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6de:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c6e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c6e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c6e8:	d112      	bne.n	800c710 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ec:	691b      	ldr	r3, [r3, #16]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d016      	beq.n	800c720 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6f4:	3310      	adds	r3, #16
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	f000 ffd0 	bl	800d69c <xTaskRemoveFromEventList>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d00e      	beq.n	800c720 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d00b      	beq.n	800c720 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2201      	movs	r2, #1
 800c70c:	601a      	str	r2, [r3, #0]
 800c70e:	e007      	b.n	800c720 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c710:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c714:	3301      	adds	r3, #1
 800c716:	b2db      	uxtb	r3, r3
 800c718:	b25a      	sxtb	r2, r3
 800c71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c71c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c720:	2301      	movs	r3, #1
 800c722:	637b      	str	r3, [r7, #52]	; 0x34
 800c724:	e001      	b.n	800c72a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c726:	2300      	movs	r3, #0
 800c728:	637b      	str	r3, [r7, #52]	; 0x34
 800c72a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c72c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c72e:	693b      	ldr	r3, [r7, #16]
 800c730:	f383 8811 	msr	BASEPRI, r3
}
 800c734:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c738:	4618      	mov	r0, r3
 800c73a:	3738      	adds	r7, #56	; 0x38
 800c73c:	46bd      	mov	sp, r7
 800c73e:	bd80      	pop	{r7, pc}

0800c740 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b084      	sub	sp, #16
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d10a      	bne.n	800c764 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800c74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c752:	f383 8811 	msr	BASEPRI, r3
 800c756:	f3bf 8f6f 	isb	sy
 800c75a:	f3bf 8f4f 	dsb	sy
 800c75e:	60bb      	str	r3, [r7, #8]
}
 800c760:	bf00      	nop
 800c762:	e7fe      	b.n	800c762 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800c764:	f001 ffc6 	bl	800e6f4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c76c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800c76e:	f001 fff1 	bl	800e754 <vPortExitCritical>

	return uxReturn;
 800c772:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800c774:	4618      	mov	r0, r3
 800c776:	3710      	adds	r7, #16
 800c778:	46bd      	mov	sp, r7
 800c77a:	bd80      	pop	{r7, pc}

0800c77c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800c77c:	b480      	push	{r7}
 800c77e:	b087      	sub	sp, #28
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d10a      	bne.n	800c7a4 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800c78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c792:	f383 8811 	msr	BASEPRI, r3
 800c796:	f3bf 8f6f 	isb	sy
 800c79a:	f3bf 8f4f 	dsb	sy
 800c79e:	60fb      	str	r3, [r7, #12]
}
 800c7a0:	bf00      	nop
 800c7a2:	e7fe      	b.n	800c7a2 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800c7a4:	697b      	ldr	r3, [r7, #20]
 800c7a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7a8:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800c7aa:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	371c      	adds	r7, #28
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b6:	4770      	bx	lr

0800c7b8 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b084      	sub	sp, #16
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d10a      	bne.n	800c7e0 <vQueueDelete+0x28>
	__asm volatile
 800c7ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ce:	f383 8811 	msr	BASEPRI, r3
 800c7d2:	f3bf 8f6f 	isb	sy
 800c7d6:	f3bf 8f4f 	dsb	sy
 800c7da:	60bb      	str	r3, [r7, #8]
}
 800c7dc:	bf00      	nop
 800c7de:	e7fe      	b.n	800c7de <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c7e0:	68f8      	ldr	r0, [r7, #12]
 800c7e2:	f000 f95f 	bl	800caa4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d102      	bne.n	800c7f6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800c7f0:	68f8      	ldr	r0, [r7, #12]
 800c7f2:	f002 f96d 	bl	800ead0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c7f6:	bf00      	nop
 800c7f8:	3710      	adds	r7, #16
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	bd80      	pop	{r7, pc}

0800c7fe <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c7fe:	b480      	push	{r7}
 800c800:	b085      	sub	sp, #20
 800c802:	af00      	add	r7, sp, #0
 800c804:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d006      	beq.n	800c81c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800c818:	60fb      	str	r3, [r7, #12]
 800c81a:	e001      	b.n	800c820 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c81c:	2300      	movs	r3, #0
 800c81e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c820:	68fb      	ldr	r3, [r7, #12]
	}
 800c822:	4618      	mov	r0, r3
 800c824:	3714      	adds	r7, #20
 800c826:	46bd      	mov	sp, r7
 800c828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82c:	4770      	bx	lr

0800c82e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c82e:	b580      	push	{r7, lr}
 800c830:	b086      	sub	sp, #24
 800c832:	af00      	add	r7, sp, #0
 800c834:	60f8      	str	r0, [r7, #12]
 800c836:	60b9      	str	r1, [r7, #8]
 800c838:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c83a:	2300      	movs	r3, #0
 800c83c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c842:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d10d      	bne.n	800c868 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d14d      	bne.n	800c8f0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	689b      	ldr	r3, [r3, #8]
 800c858:	4618      	mov	r0, r3
 800c85a:	f001 f977 	bl	800db4c <xTaskPriorityDisinherit>
 800c85e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	2200      	movs	r2, #0
 800c864:	609a      	str	r2, [r3, #8]
 800c866:	e043      	b.n	800c8f0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d119      	bne.n	800c8a2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	6858      	ldr	r0, [r3, #4]
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c876:	461a      	mov	r2, r3
 800c878:	68b9      	ldr	r1, [r7, #8]
 800c87a:	f002 fa83 	bl	800ed84 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	685a      	ldr	r2, [r3, #4]
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c886:	441a      	add	r2, r3
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	685a      	ldr	r2, [r3, #4]
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	689b      	ldr	r3, [r3, #8]
 800c894:	429a      	cmp	r2, r3
 800c896:	d32b      	bcc.n	800c8f0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	681a      	ldr	r2, [r3, #0]
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	605a      	str	r2, [r3, #4]
 800c8a0:	e026      	b.n	800c8f0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	68d8      	ldr	r0, [r3, #12]
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8aa:	461a      	mov	r2, r3
 800c8ac:	68b9      	ldr	r1, [r7, #8]
 800c8ae:	f002 fa69 	bl	800ed84 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	68da      	ldr	r2, [r3, #12]
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8ba:	425b      	negs	r3, r3
 800c8bc:	441a      	add	r2, r3
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	68da      	ldr	r2, [r3, #12]
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	429a      	cmp	r2, r3
 800c8cc:	d207      	bcs.n	800c8de <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	689a      	ldr	r2, [r3, #8]
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8d6:	425b      	negs	r3, r3
 800c8d8:	441a      	add	r2, r3
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2b02      	cmp	r3, #2
 800c8e2:	d105      	bne.n	800c8f0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c8e4:	693b      	ldr	r3, [r7, #16]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d002      	beq.n	800c8f0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c8ea:	693b      	ldr	r3, [r7, #16]
 800c8ec:	3b01      	subs	r3, #1
 800c8ee:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c8f0:	693b      	ldr	r3, [r7, #16]
 800c8f2:	1c5a      	adds	r2, r3, #1
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c8f8:	697b      	ldr	r3, [r7, #20]
}
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	3718      	adds	r7, #24
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}

0800c902 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c902:	b580      	push	{r7, lr}
 800c904:	b082      	sub	sp, #8
 800c906:	af00      	add	r7, sp, #0
 800c908:	6078      	str	r0, [r7, #4]
 800c90a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c910:	2b00      	cmp	r3, #0
 800c912:	d018      	beq.n	800c946 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	68da      	ldr	r2, [r3, #12]
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c91c:	441a      	add	r2, r3
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	68da      	ldr	r2, [r3, #12]
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	689b      	ldr	r3, [r3, #8]
 800c92a:	429a      	cmp	r2, r3
 800c92c:	d303      	bcc.n	800c936 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681a      	ldr	r2, [r3, #0]
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	68d9      	ldr	r1, [r3, #12]
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c93e:	461a      	mov	r2, r3
 800c940:	6838      	ldr	r0, [r7, #0]
 800c942:	f002 fa1f 	bl	800ed84 <memcpy>
	}
}
 800c946:	bf00      	nop
 800c948:	3708      	adds	r7, #8
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bd80      	pop	{r7, pc}

0800c94e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c94e:	b580      	push	{r7, lr}
 800c950:	b084      	sub	sp, #16
 800c952:	af00      	add	r7, sp, #0
 800c954:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c956:	f001 fecd 	bl	800e6f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c960:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c962:	e011      	b.n	800c988 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d012      	beq.n	800c992 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	3324      	adds	r3, #36	; 0x24
 800c970:	4618      	mov	r0, r3
 800c972:	f000 fe93 	bl	800d69c <xTaskRemoveFromEventList>
 800c976:	4603      	mov	r3, r0
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d001      	beq.n	800c980 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c97c:	f000 ff6a 	bl	800d854 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c980:	7bfb      	ldrb	r3, [r7, #15]
 800c982:	3b01      	subs	r3, #1
 800c984:	b2db      	uxtb	r3, r3
 800c986:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c988:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	dce9      	bgt.n	800c964 <prvUnlockQueue+0x16>
 800c990:	e000      	b.n	800c994 <prvUnlockQueue+0x46>
					break;
 800c992:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	22ff      	movs	r2, #255	; 0xff
 800c998:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c99c:	f001 feda 	bl	800e754 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c9a0:	f001 fea8 	bl	800e6f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c9aa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c9ac:	e011      	b.n	800c9d2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	691b      	ldr	r3, [r3, #16]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d012      	beq.n	800c9dc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	3310      	adds	r3, #16
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	f000 fe6e 	bl	800d69c <xTaskRemoveFromEventList>
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d001      	beq.n	800c9ca <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c9c6:	f000 ff45 	bl	800d854 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c9ca:	7bbb      	ldrb	r3, [r7, #14]
 800c9cc:	3b01      	subs	r3, #1
 800c9ce:	b2db      	uxtb	r3, r3
 800c9d0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c9d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	dce9      	bgt.n	800c9ae <prvUnlockQueue+0x60>
 800c9da:	e000      	b.n	800c9de <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c9dc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	22ff      	movs	r2, #255	; 0xff
 800c9e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c9e6:	f001 feb5 	bl	800e754 <vPortExitCritical>
}
 800c9ea:	bf00      	nop
 800c9ec:	3710      	adds	r7, #16
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bd80      	pop	{r7, pc}

0800c9f2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c9f2:	b580      	push	{r7, lr}
 800c9f4:	b084      	sub	sp, #16
 800c9f6:	af00      	add	r7, sp, #0
 800c9f8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c9fa:	f001 fe7b 	bl	800e6f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d102      	bne.n	800ca0c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ca06:	2301      	movs	r3, #1
 800ca08:	60fb      	str	r3, [r7, #12]
 800ca0a:	e001      	b.n	800ca10 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ca10:	f001 fea0 	bl	800e754 <vPortExitCritical>

	return xReturn;
 800ca14:	68fb      	ldr	r3, [r7, #12]
}
 800ca16:	4618      	mov	r0, r3
 800ca18:	3710      	adds	r7, #16
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	bd80      	pop	{r7, pc}

0800ca1e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ca1e:	b580      	push	{r7, lr}
 800ca20:	b084      	sub	sp, #16
 800ca22:	af00      	add	r7, sp, #0
 800ca24:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ca26:	f001 fe65 	bl	800e6f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca32:	429a      	cmp	r2, r3
 800ca34:	d102      	bne.n	800ca3c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ca36:	2301      	movs	r3, #1
 800ca38:	60fb      	str	r3, [r7, #12]
 800ca3a:	e001      	b.n	800ca40 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ca40:	f001 fe88 	bl	800e754 <vPortExitCritical>

	return xReturn;
 800ca44:	68fb      	ldr	r3, [r7, #12]
}
 800ca46:	4618      	mov	r0, r3
 800ca48:	3710      	adds	r7, #16
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	bd80      	pop	{r7, pc}
	...

0800ca50 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ca50:	b480      	push	{r7}
 800ca52:	b085      	sub	sp, #20
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
 800ca58:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	60fb      	str	r3, [r7, #12]
 800ca5e:	e014      	b.n	800ca8a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ca60:	4a0f      	ldr	r2, [pc, #60]	; (800caa0 <vQueueAddToRegistry+0x50>)
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d10b      	bne.n	800ca84 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ca6c:	490c      	ldr	r1, [pc, #48]	; (800caa0 <vQueueAddToRegistry+0x50>)
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	683a      	ldr	r2, [r7, #0]
 800ca72:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ca76:	4a0a      	ldr	r2, [pc, #40]	; (800caa0 <vQueueAddToRegistry+0x50>)
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	00db      	lsls	r3, r3, #3
 800ca7c:	4413      	add	r3, r2
 800ca7e:	687a      	ldr	r2, [r7, #4]
 800ca80:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ca82:	e006      	b.n	800ca92 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	3301      	adds	r3, #1
 800ca88:	60fb      	str	r3, [r7, #12]
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	2b07      	cmp	r3, #7
 800ca8e:	d9e7      	bls.n	800ca60 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ca90:	bf00      	nop
 800ca92:	bf00      	nop
 800ca94:	3714      	adds	r7, #20
 800ca96:	46bd      	mov	sp, r7
 800ca98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9c:	4770      	bx	lr
 800ca9e:	bf00      	nop
 800caa0:	200018e0 	.word	0x200018e0

0800caa4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800caa4:	b480      	push	{r7}
 800caa6:	b085      	sub	sp, #20
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800caac:	2300      	movs	r3, #0
 800caae:	60fb      	str	r3, [r7, #12]
 800cab0:	e016      	b.n	800cae0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800cab2:	4a10      	ldr	r2, [pc, #64]	; (800caf4 <vQueueUnregisterQueue+0x50>)
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	00db      	lsls	r3, r3, #3
 800cab8:	4413      	add	r3, r2
 800caba:	685b      	ldr	r3, [r3, #4]
 800cabc:	687a      	ldr	r2, [r7, #4]
 800cabe:	429a      	cmp	r2, r3
 800cac0:	d10b      	bne.n	800cada <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800cac2:	4a0c      	ldr	r2, [pc, #48]	; (800caf4 <vQueueUnregisterQueue+0x50>)
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	2100      	movs	r1, #0
 800cac8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800cacc:	4a09      	ldr	r2, [pc, #36]	; (800caf4 <vQueueUnregisterQueue+0x50>)
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	00db      	lsls	r3, r3, #3
 800cad2:	4413      	add	r3, r2
 800cad4:	2200      	movs	r2, #0
 800cad6:	605a      	str	r2, [r3, #4]
				break;
 800cad8:	e006      	b.n	800cae8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	3301      	adds	r3, #1
 800cade:	60fb      	str	r3, [r7, #12]
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	2b07      	cmp	r3, #7
 800cae4:	d9e5      	bls.n	800cab2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800cae6:	bf00      	nop
 800cae8:	bf00      	nop
 800caea:	3714      	adds	r7, #20
 800caec:	46bd      	mov	sp, r7
 800caee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf2:	4770      	bx	lr
 800caf4:	200018e0 	.word	0x200018e0

0800caf8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b086      	sub	sp, #24
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	60f8      	str	r0, [r7, #12]
 800cb00:	60b9      	str	r1, [r7, #8]
 800cb02:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cb08:	f001 fdf4 	bl	800e6f4 <vPortEnterCritical>
 800cb0c:	697b      	ldr	r3, [r7, #20]
 800cb0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cb12:	b25b      	sxtb	r3, r3
 800cb14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb18:	d103      	bne.n	800cb22 <vQueueWaitForMessageRestricted+0x2a>
 800cb1a:	697b      	ldr	r3, [r7, #20]
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cb22:	697b      	ldr	r3, [r7, #20]
 800cb24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cb28:	b25b      	sxtb	r3, r3
 800cb2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb2e:	d103      	bne.n	800cb38 <vQueueWaitForMessageRestricted+0x40>
 800cb30:	697b      	ldr	r3, [r7, #20]
 800cb32:	2200      	movs	r2, #0
 800cb34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cb38:	f001 fe0c 	bl	800e754 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cb3c:	697b      	ldr	r3, [r7, #20]
 800cb3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d106      	bne.n	800cb52 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cb44:	697b      	ldr	r3, [r7, #20]
 800cb46:	3324      	adds	r3, #36	; 0x24
 800cb48:	687a      	ldr	r2, [r7, #4]
 800cb4a:	68b9      	ldr	r1, [r7, #8]
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	f000 fd79 	bl	800d644 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800cb52:	6978      	ldr	r0, [r7, #20]
 800cb54:	f7ff fefb 	bl	800c94e <prvUnlockQueue>
	}
 800cb58:	bf00      	nop
 800cb5a:	3718      	adds	r7, #24
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	bd80      	pop	{r7, pc}

0800cb60 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b08e      	sub	sp, #56	; 0x38
 800cb64:	af04      	add	r7, sp, #16
 800cb66:	60f8      	str	r0, [r7, #12]
 800cb68:	60b9      	str	r1, [r7, #8]
 800cb6a:	607a      	str	r2, [r7, #4]
 800cb6c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cb6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d10a      	bne.n	800cb8a <xTaskCreateStatic+0x2a>
	__asm volatile
 800cb74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb78:	f383 8811 	msr	BASEPRI, r3
 800cb7c:	f3bf 8f6f 	isb	sy
 800cb80:	f3bf 8f4f 	dsb	sy
 800cb84:	623b      	str	r3, [r7, #32]
}
 800cb86:	bf00      	nop
 800cb88:	e7fe      	b.n	800cb88 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cb8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d10a      	bne.n	800cba6 <xTaskCreateStatic+0x46>
	__asm volatile
 800cb90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb94:	f383 8811 	msr	BASEPRI, r3
 800cb98:	f3bf 8f6f 	isb	sy
 800cb9c:	f3bf 8f4f 	dsb	sy
 800cba0:	61fb      	str	r3, [r7, #28]
}
 800cba2:	bf00      	nop
 800cba4:	e7fe      	b.n	800cba4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cba6:	23bc      	movs	r3, #188	; 0xbc
 800cba8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cbaa:	693b      	ldr	r3, [r7, #16]
 800cbac:	2bbc      	cmp	r3, #188	; 0xbc
 800cbae:	d00a      	beq.n	800cbc6 <xTaskCreateStatic+0x66>
	__asm volatile
 800cbb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb4:	f383 8811 	msr	BASEPRI, r3
 800cbb8:	f3bf 8f6f 	isb	sy
 800cbbc:	f3bf 8f4f 	dsb	sy
 800cbc0:	61bb      	str	r3, [r7, #24]
}
 800cbc2:	bf00      	nop
 800cbc4:	e7fe      	b.n	800cbc4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cbc6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cbc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d01e      	beq.n	800cc0c <xTaskCreateStatic+0xac>
 800cbce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d01b      	beq.n	800cc0c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cbd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbd6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cbd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cbdc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cbde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbe0:	2202      	movs	r2, #2
 800cbe2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	9303      	str	r3, [sp, #12]
 800cbea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbec:	9302      	str	r3, [sp, #8]
 800cbee:	f107 0314 	add.w	r3, r7, #20
 800cbf2:	9301      	str	r3, [sp, #4]
 800cbf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf6:	9300      	str	r3, [sp, #0]
 800cbf8:	683b      	ldr	r3, [r7, #0]
 800cbfa:	687a      	ldr	r2, [r7, #4]
 800cbfc:	68b9      	ldr	r1, [r7, #8]
 800cbfe:	68f8      	ldr	r0, [r7, #12]
 800cc00:	f000 f850 	bl	800cca4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cc04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cc06:	f000 f8f3 	bl	800cdf0 <prvAddNewTaskToReadyList>
 800cc0a:	e001      	b.n	800cc10 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cc10:	697b      	ldr	r3, [r7, #20]
	}
 800cc12:	4618      	mov	r0, r3
 800cc14:	3728      	adds	r7, #40	; 0x28
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bd80      	pop	{r7, pc}

0800cc1a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cc1a:	b580      	push	{r7, lr}
 800cc1c:	b08c      	sub	sp, #48	; 0x30
 800cc1e:	af04      	add	r7, sp, #16
 800cc20:	60f8      	str	r0, [r7, #12]
 800cc22:	60b9      	str	r1, [r7, #8]
 800cc24:	603b      	str	r3, [r7, #0]
 800cc26:	4613      	mov	r3, r2
 800cc28:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cc2a:	88fb      	ldrh	r3, [r7, #6]
 800cc2c:	009b      	lsls	r3, r3, #2
 800cc2e:	4618      	mov	r0, r3
 800cc30:	f001 fe82 	bl	800e938 <pvPortMalloc>
 800cc34:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cc36:	697b      	ldr	r3, [r7, #20]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d00e      	beq.n	800cc5a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cc3c:	20bc      	movs	r0, #188	; 0xbc
 800cc3e:	f001 fe7b 	bl	800e938 <pvPortMalloc>
 800cc42:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cc44:	69fb      	ldr	r3, [r7, #28]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d003      	beq.n	800cc52 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cc4a:	69fb      	ldr	r3, [r7, #28]
 800cc4c:	697a      	ldr	r2, [r7, #20]
 800cc4e:	631a      	str	r2, [r3, #48]	; 0x30
 800cc50:	e005      	b.n	800cc5e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cc52:	6978      	ldr	r0, [r7, #20]
 800cc54:	f001 ff3c 	bl	800ead0 <vPortFree>
 800cc58:	e001      	b.n	800cc5e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cc5e:	69fb      	ldr	r3, [r7, #28]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d017      	beq.n	800cc94 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cc64:	69fb      	ldr	r3, [r7, #28]
 800cc66:	2200      	movs	r2, #0
 800cc68:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cc6c:	88fa      	ldrh	r2, [r7, #6]
 800cc6e:	2300      	movs	r3, #0
 800cc70:	9303      	str	r3, [sp, #12]
 800cc72:	69fb      	ldr	r3, [r7, #28]
 800cc74:	9302      	str	r3, [sp, #8]
 800cc76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc78:	9301      	str	r3, [sp, #4]
 800cc7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc7c:	9300      	str	r3, [sp, #0]
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	68b9      	ldr	r1, [r7, #8]
 800cc82:	68f8      	ldr	r0, [r7, #12]
 800cc84:	f000 f80e 	bl	800cca4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cc88:	69f8      	ldr	r0, [r7, #28]
 800cc8a:	f000 f8b1 	bl	800cdf0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cc8e:	2301      	movs	r3, #1
 800cc90:	61bb      	str	r3, [r7, #24]
 800cc92:	e002      	b.n	800cc9a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cc94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cc98:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cc9a:	69bb      	ldr	r3, [r7, #24]
	}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	3720      	adds	r7, #32
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}

0800cca4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b088      	sub	sp, #32
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	60f8      	str	r0, [r7, #12]
 800ccac:	60b9      	str	r1, [r7, #8]
 800ccae:	607a      	str	r2, [r7, #4]
 800ccb0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ccb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	009b      	lsls	r3, r3, #2
 800ccba:	461a      	mov	r2, r3
 800ccbc:	21a5      	movs	r1, #165	; 0xa5
 800ccbe:	f002 f86f 	bl	800eda0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ccc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cccc:	3b01      	subs	r3, #1
 800ccce:	009b      	lsls	r3, r3, #2
 800ccd0:	4413      	add	r3, r2
 800ccd2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ccd4:	69bb      	ldr	r3, [r7, #24]
 800ccd6:	f023 0307 	bic.w	r3, r3, #7
 800ccda:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ccdc:	69bb      	ldr	r3, [r7, #24]
 800ccde:	f003 0307 	and.w	r3, r3, #7
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d00a      	beq.n	800ccfc <prvInitialiseNewTask+0x58>
	__asm volatile
 800cce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccea:	f383 8811 	msr	BASEPRI, r3
 800ccee:	f3bf 8f6f 	isb	sy
 800ccf2:	f3bf 8f4f 	dsb	sy
 800ccf6:	617b      	str	r3, [r7, #20]
}
 800ccf8:	bf00      	nop
 800ccfa:	e7fe      	b.n	800ccfa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ccfc:	68bb      	ldr	r3, [r7, #8]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d01f      	beq.n	800cd42 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cd02:	2300      	movs	r3, #0
 800cd04:	61fb      	str	r3, [r7, #28]
 800cd06:	e012      	b.n	800cd2e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cd08:	68ba      	ldr	r2, [r7, #8]
 800cd0a:	69fb      	ldr	r3, [r7, #28]
 800cd0c:	4413      	add	r3, r2
 800cd0e:	7819      	ldrb	r1, [r3, #0]
 800cd10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd12:	69fb      	ldr	r3, [r7, #28]
 800cd14:	4413      	add	r3, r2
 800cd16:	3334      	adds	r3, #52	; 0x34
 800cd18:	460a      	mov	r2, r1
 800cd1a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cd1c:	68ba      	ldr	r2, [r7, #8]
 800cd1e:	69fb      	ldr	r3, [r7, #28]
 800cd20:	4413      	add	r3, r2
 800cd22:	781b      	ldrb	r3, [r3, #0]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d006      	beq.n	800cd36 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cd28:	69fb      	ldr	r3, [r7, #28]
 800cd2a:	3301      	adds	r3, #1
 800cd2c:	61fb      	str	r3, [r7, #28]
 800cd2e:	69fb      	ldr	r3, [r7, #28]
 800cd30:	2b0f      	cmp	r3, #15
 800cd32:	d9e9      	bls.n	800cd08 <prvInitialiseNewTask+0x64>
 800cd34:	e000      	b.n	800cd38 <prvInitialiseNewTask+0x94>
			{
				break;
 800cd36:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cd38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cd40:	e003      	b.n	800cd4a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cd42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd44:	2200      	movs	r2, #0
 800cd46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cd4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd4c:	2b37      	cmp	r3, #55	; 0x37
 800cd4e:	d901      	bls.n	800cd54 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cd50:	2337      	movs	r3, #55	; 0x37
 800cd52:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cd54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd58:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cd5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd5e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cd60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd62:	2200      	movs	r2, #0
 800cd64:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cd66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd68:	3304      	adds	r3, #4
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	f7fe fd64 	bl	800b838 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cd70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd72:	3318      	adds	r3, #24
 800cd74:	4618      	mov	r0, r3
 800cd76:	f7fe fd5f 	bl	800b838 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cd7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd7e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd82:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cd86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd88:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cd8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd8e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cd90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd92:	2200      	movs	r2, #0
 800cd94:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cd98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cda0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cda2:	3354      	adds	r3, #84	; 0x54
 800cda4:	2260      	movs	r2, #96	; 0x60
 800cda6:	2100      	movs	r1, #0
 800cda8:	4618      	mov	r0, r3
 800cdaa:	f001 fff9 	bl	800eda0 <memset>
 800cdae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdb0:	4a0c      	ldr	r2, [pc, #48]	; (800cde4 <prvInitialiseNewTask+0x140>)
 800cdb2:	659a      	str	r2, [r3, #88]	; 0x58
 800cdb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdb6:	4a0c      	ldr	r2, [pc, #48]	; (800cde8 <prvInitialiseNewTask+0x144>)
 800cdb8:	65da      	str	r2, [r3, #92]	; 0x5c
 800cdba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdbc:	4a0b      	ldr	r2, [pc, #44]	; (800cdec <prvInitialiseNewTask+0x148>)
 800cdbe:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cdc0:	683a      	ldr	r2, [r7, #0]
 800cdc2:	68f9      	ldr	r1, [r7, #12]
 800cdc4:	69b8      	ldr	r0, [r7, #24]
 800cdc6:	f001 fb67 	bl	800e498 <pxPortInitialiseStack>
 800cdca:	4602      	mov	r2, r0
 800cdcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdce:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cdd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d002      	beq.n	800cddc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cdd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdda:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cddc:	bf00      	nop
 800cdde:	3720      	adds	r7, #32
 800cde0:	46bd      	mov	sp, r7
 800cde2:	bd80      	pop	{r7, pc}
 800cde4:	0800f994 	.word	0x0800f994
 800cde8:	0800f9b4 	.word	0x0800f9b4
 800cdec:	0800f974 	.word	0x0800f974

0800cdf0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b082      	sub	sp, #8
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cdf8:	f001 fc7c 	bl	800e6f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cdfc:	4b2d      	ldr	r3, [pc, #180]	; (800ceb4 <prvAddNewTaskToReadyList+0xc4>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	3301      	adds	r3, #1
 800ce02:	4a2c      	ldr	r2, [pc, #176]	; (800ceb4 <prvAddNewTaskToReadyList+0xc4>)
 800ce04:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ce06:	4b2c      	ldr	r3, [pc, #176]	; (800ceb8 <prvAddNewTaskToReadyList+0xc8>)
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d109      	bne.n	800ce22 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ce0e:	4a2a      	ldr	r2, [pc, #168]	; (800ceb8 <prvAddNewTaskToReadyList+0xc8>)
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ce14:	4b27      	ldr	r3, [pc, #156]	; (800ceb4 <prvAddNewTaskToReadyList+0xc4>)
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	2b01      	cmp	r3, #1
 800ce1a:	d110      	bne.n	800ce3e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ce1c:	f000 fd3e 	bl	800d89c <prvInitialiseTaskLists>
 800ce20:	e00d      	b.n	800ce3e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ce22:	4b26      	ldr	r3, [pc, #152]	; (800cebc <prvAddNewTaskToReadyList+0xcc>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d109      	bne.n	800ce3e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ce2a:	4b23      	ldr	r3, [pc, #140]	; (800ceb8 <prvAddNewTaskToReadyList+0xc8>)
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce34:	429a      	cmp	r2, r3
 800ce36:	d802      	bhi.n	800ce3e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ce38:	4a1f      	ldr	r2, [pc, #124]	; (800ceb8 <prvAddNewTaskToReadyList+0xc8>)
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ce3e:	4b20      	ldr	r3, [pc, #128]	; (800cec0 <prvAddNewTaskToReadyList+0xd0>)
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	3301      	adds	r3, #1
 800ce44:	4a1e      	ldr	r2, [pc, #120]	; (800cec0 <prvAddNewTaskToReadyList+0xd0>)
 800ce46:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ce48:	4b1d      	ldr	r3, [pc, #116]	; (800cec0 <prvAddNewTaskToReadyList+0xd0>)
 800ce4a:	681a      	ldr	r2, [r3, #0]
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce54:	4b1b      	ldr	r3, [pc, #108]	; (800cec4 <prvAddNewTaskToReadyList+0xd4>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	429a      	cmp	r2, r3
 800ce5a:	d903      	bls.n	800ce64 <prvAddNewTaskToReadyList+0x74>
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce60:	4a18      	ldr	r2, [pc, #96]	; (800cec4 <prvAddNewTaskToReadyList+0xd4>)
 800ce62:	6013      	str	r3, [r2, #0]
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce68:	4613      	mov	r3, r2
 800ce6a:	009b      	lsls	r3, r3, #2
 800ce6c:	4413      	add	r3, r2
 800ce6e:	009b      	lsls	r3, r3, #2
 800ce70:	4a15      	ldr	r2, [pc, #84]	; (800cec8 <prvAddNewTaskToReadyList+0xd8>)
 800ce72:	441a      	add	r2, r3
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	3304      	adds	r3, #4
 800ce78:	4619      	mov	r1, r3
 800ce7a:	4610      	mov	r0, r2
 800ce7c:	f7fe fce9 	bl	800b852 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ce80:	f001 fc68 	bl	800e754 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ce84:	4b0d      	ldr	r3, [pc, #52]	; (800cebc <prvAddNewTaskToReadyList+0xcc>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d00e      	beq.n	800ceaa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ce8c:	4b0a      	ldr	r3, [pc, #40]	; (800ceb8 <prvAddNewTaskToReadyList+0xc8>)
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce96:	429a      	cmp	r2, r3
 800ce98:	d207      	bcs.n	800ceaa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ce9a:	4b0c      	ldr	r3, [pc, #48]	; (800cecc <prvAddNewTaskToReadyList+0xdc>)
 800ce9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cea0:	601a      	str	r2, [r3, #0]
 800cea2:	f3bf 8f4f 	dsb	sy
 800cea6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ceaa:	bf00      	nop
 800ceac:	3708      	adds	r7, #8
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	bd80      	pop	{r7, pc}
 800ceb2:	bf00      	nop
 800ceb4:	20001df4 	.word	0x20001df4
 800ceb8:	20001920 	.word	0x20001920
 800cebc:	20001e00 	.word	0x20001e00
 800cec0:	20001e10 	.word	0x20001e10
 800cec4:	20001dfc 	.word	0x20001dfc
 800cec8:	20001924 	.word	0x20001924
 800cecc:	e000ed04 	.word	0xe000ed04

0800ced0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b084      	sub	sp, #16
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ced8:	2300      	movs	r3, #0
 800ceda:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d017      	beq.n	800cf12 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cee2:	4b13      	ldr	r3, [pc, #76]	; (800cf30 <vTaskDelay+0x60>)
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d00a      	beq.n	800cf00 <vTaskDelay+0x30>
	__asm volatile
 800ceea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceee:	f383 8811 	msr	BASEPRI, r3
 800cef2:	f3bf 8f6f 	isb	sy
 800cef6:	f3bf 8f4f 	dsb	sy
 800cefa:	60bb      	str	r3, [r7, #8]
}
 800cefc:	bf00      	nop
 800cefe:	e7fe      	b.n	800cefe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cf00:	f000 f990 	bl	800d224 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cf04:	2100      	movs	r1, #0
 800cf06:	6878      	ldr	r0, [r7, #4]
 800cf08:	f000 ff24 	bl	800dd54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cf0c:	f000 f998 	bl	800d240 <xTaskResumeAll>
 800cf10:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d107      	bne.n	800cf28 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cf18:	4b06      	ldr	r3, [pc, #24]	; (800cf34 <vTaskDelay+0x64>)
 800cf1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf1e:	601a      	str	r2, [r3, #0]
 800cf20:	f3bf 8f4f 	dsb	sy
 800cf24:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cf28:	bf00      	nop
 800cf2a:	3710      	adds	r7, #16
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	bd80      	pop	{r7, pc}
 800cf30:	20001e1c 	.word	0x20001e1c
 800cf34:	e000ed04 	.word	0xe000ed04

0800cf38 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b084      	sub	sp, #16
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800cf40:	f001 fbd8 	bl	800e6f4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d102      	bne.n	800cf50 <vTaskSuspend+0x18>
 800cf4a:	4b30      	ldr	r3, [pc, #192]	; (800d00c <vTaskSuspend+0xd4>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	e000      	b.n	800cf52 <vTaskSuspend+0x1a>
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	3304      	adds	r3, #4
 800cf58:	4618      	mov	r0, r3
 800cf5a:	f7fe fcd7 	bl	800b90c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d004      	beq.n	800cf70 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	3318      	adds	r3, #24
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f7fe fcce 	bl	800b90c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	3304      	adds	r3, #4
 800cf74:	4619      	mov	r1, r3
 800cf76:	4826      	ldr	r0, [pc, #152]	; (800d010 <vTaskSuspend+0xd8>)
 800cf78:	f7fe fc6b 	bl	800b852 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800cf82:	b2db      	uxtb	r3, r3
 800cf84:	2b01      	cmp	r3, #1
 800cf86:	d103      	bne.n	800cf90 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800cf90:	f001 fbe0 	bl	800e754 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800cf94:	4b1f      	ldr	r3, [pc, #124]	; (800d014 <vTaskSuspend+0xdc>)
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d005      	beq.n	800cfa8 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800cf9c:	f001 fbaa 	bl	800e6f4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800cfa0:	f000 fd1e 	bl	800d9e0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800cfa4:	f001 fbd6 	bl	800e754 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800cfa8:	4b18      	ldr	r3, [pc, #96]	; (800d00c <vTaskSuspend+0xd4>)
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	68fa      	ldr	r2, [r7, #12]
 800cfae:	429a      	cmp	r2, r3
 800cfb0:	d127      	bne.n	800d002 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800cfb2:	4b18      	ldr	r3, [pc, #96]	; (800d014 <vTaskSuspend+0xdc>)
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d017      	beq.n	800cfea <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800cfba:	4b17      	ldr	r3, [pc, #92]	; (800d018 <vTaskSuspend+0xe0>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d00a      	beq.n	800cfd8 <vTaskSuspend+0xa0>
	__asm volatile
 800cfc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc6:	f383 8811 	msr	BASEPRI, r3
 800cfca:	f3bf 8f6f 	isb	sy
 800cfce:	f3bf 8f4f 	dsb	sy
 800cfd2:	60bb      	str	r3, [r7, #8]
}
 800cfd4:	bf00      	nop
 800cfd6:	e7fe      	b.n	800cfd6 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800cfd8:	4b10      	ldr	r3, [pc, #64]	; (800d01c <vTaskSuspend+0xe4>)
 800cfda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfde:	601a      	str	r2, [r3, #0]
 800cfe0:	f3bf 8f4f 	dsb	sy
 800cfe4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cfe8:	e00b      	b.n	800d002 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800cfea:	4b09      	ldr	r3, [pc, #36]	; (800d010 <vTaskSuspend+0xd8>)
 800cfec:	681a      	ldr	r2, [r3, #0]
 800cfee:	4b0c      	ldr	r3, [pc, #48]	; (800d020 <vTaskSuspend+0xe8>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	429a      	cmp	r2, r3
 800cff4:	d103      	bne.n	800cffe <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800cff6:	4b05      	ldr	r3, [pc, #20]	; (800d00c <vTaskSuspend+0xd4>)
 800cff8:	2200      	movs	r2, #0
 800cffa:	601a      	str	r2, [r3, #0]
	}
 800cffc:	e001      	b.n	800d002 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800cffe:	f000 fa99 	bl	800d534 <vTaskSwitchContext>
	}
 800d002:	bf00      	nop
 800d004:	3710      	adds	r7, #16
 800d006:	46bd      	mov	sp, r7
 800d008:	bd80      	pop	{r7, pc}
 800d00a:	bf00      	nop
 800d00c:	20001920 	.word	0x20001920
 800d010:	20001de0 	.word	0x20001de0
 800d014:	20001e00 	.word	0x20001e00
 800d018:	20001e1c 	.word	0x20001e1c
 800d01c:	e000ed04 	.word	0xe000ed04
 800d020:	20001df4 	.word	0x20001df4

0800d024 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800d024:	b480      	push	{r7}
 800d026:	b087      	sub	sp, #28
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800d02c:	2300      	movs	r3, #0
 800d02e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d10a      	bne.n	800d050 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800d03a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d03e:	f383 8811 	msr	BASEPRI, r3
 800d042:	f3bf 8f6f 	isb	sy
 800d046:	f3bf 8f4f 	dsb	sy
 800d04a:	60fb      	str	r3, [r7, #12]
}
 800d04c:	bf00      	nop
 800d04e:	e7fe      	b.n	800d04e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d050:	693b      	ldr	r3, [r7, #16]
 800d052:	695b      	ldr	r3, [r3, #20]
 800d054:	4a0a      	ldr	r2, [pc, #40]	; (800d080 <prvTaskIsTaskSuspended+0x5c>)
 800d056:	4293      	cmp	r3, r2
 800d058:	d10a      	bne.n	800d070 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800d05a:	693b      	ldr	r3, [r7, #16]
 800d05c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d05e:	4a09      	ldr	r2, [pc, #36]	; (800d084 <prvTaskIsTaskSuspended+0x60>)
 800d060:	4293      	cmp	r3, r2
 800d062:	d005      	beq.n	800d070 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800d064:	693b      	ldr	r3, [r7, #16]
 800d066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d101      	bne.n	800d070 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800d06c:	2301      	movs	r3, #1
 800d06e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d070:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800d072:	4618      	mov	r0, r3
 800d074:	371c      	adds	r7, #28
 800d076:	46bd      	mov	sp, r7
 800d078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07c:	4770      	bx	lr
 800d07e:	bf00      	nop
 800d080:	20001de0 	.word	0x20001de0
 800d084:	20001db4 	.word	0x20001db4

0800d088 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b084      	sub	sp, #16
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d10a      	bne.n	800d0b0 <vTaskResume+0x28>
	__asm volatile
 800d09a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d09e:	f383 8811 	msr	BASEPRI, r3
 800d0a2:	f3bf 8f6f 	isb	sy
 800d0a6:	f3bf 8f4f 	dsb	sy
 800d0aa:	60bb      	str	r3, [r7, #8]
}
 800d0ac:	bf00      	nop
 800d0ae:	e7fe      	b.n	800d0ae <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800d0b0:	4b20      	ldr	r3, [pc, #128]	; (800d134 <vTaskResume+0xac>)
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	68fa      	ldr	r2, [r7, #12]
 800d0b6:	429a      	cmp	r2, r3
 800d0b8:	d038      	beq.n	800d12c <vTaskResume+0xa4>
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d035      	beq.n	800d12c <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800d0c0:	f001 fb18 	bl	800e6f4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800d0c4:	68f8      	ldr	r0, [r7, #12]
 800d0c6:	f7ff ffad 	bl	800d024 <prvTaskIsTaskSuspended>
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d02b      	beq.n	800d128 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	3304      	adds	r3, #4
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	f7fe fc19 	bl	800b90c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0de:	4b16      	ldr	r3, [pc, #88]	; (800d138 <vTaskResume+0xb0>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	429a      	cmp	r2, r3
 800d0e4:	d903      	bls.n	800d0ee <vTaskResume+0x66>
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0ea:	4a13      	ldr	r2, [pc, #76]	; (800d138 <vTaskResume+0xb0>)
 800d0ec:	6013      	str	r3, [r2, #0]
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0f2:	4613      	mov	r3, r2
 800d0f4:	009b      	lsls	r3, r3, #2
 800d0f6:	4413      	add	r3, r2
 800d0f8:	009b      	lsls	r3, r3, #2
 800d0fa:	4a10      	ldr	r2, [pc, #64]	; (800d13c <vTaskResume+0xb4>)
 800d0fc:	441a      	add	r2, r3
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	3304      	adds	r3, #4
 800d102:	4619      	mov	r1, r3
 800d104:	4610      	mov	r0, r2
 800d106:	f7fe fba4 	bl	800b852 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d10e:	4b09      	ldr	r3, [pc, #36]	; (800d134 <vTaskResume+0xac>)
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d114:	429a      	cmp	r2, r3
 800d116:	d307      	bcc.n	800d128 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800d118:	4b09      	ldr	r3, [pc, #36]	; (800d140 <vTaskResume+0xb8>)
 800d11a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d11e:	601a      	str	r2, [r3, #0]
 800d120:	f3bf 8f4f 	dsb	sy
 800d124:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800d128:	f001 fb14 	bl	800e754 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d12c:	bf00      	nop
 800d12e:	3710      	adds	r7, #16
 800d130:	46bd      	mov	sp, r7
 800d132:	bd80      	pop	{r7, pc}
 800d134:	20001920 	.word	0x20001920
 800d138:	20001dfc 	.word	0x20001dfc
 800d13c:	20001924 	.word	0x20001924
 800d140:	e000ed04 	.word	0xe000ed04

0800d144 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b08a      	sub	sp, #40	; 0x28
 800d148:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d14a:	2300      	movs	r3, #0
 800d14c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d14e:	2300      	movs	r3, #0
 800d150:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d152:	463a      	mov	r2, r7
 800d154:	1d39      	adds	r1, r7, #4
 800d156:	f107 0308 	add.w	r3, r7, #8
 800d15a:	4618      	mov	r0, r3
 800d15c:	f7fe fb18 	bl	800b790 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d160:	6839      	ldr	r1, [r7, #0]
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	68ba      	ldr	r2, [r7, #8]
 800d166:	9202      	str	r2, [sp, #8]
 800d168:	9301      	str	r3, [sp, #4]
 800d16a:	2300      	movs	r3, #0
 800d16c:	9300      	str	r3, [sp, #0]
 800d16e:	2300      	movs	r3, #0
 800d170:	460a      	mov	r2, r1
 800d172:	4924      	ldr	r1, [pc, #144]	; (800d204 <vTaskStartScheduler+0xc0>)
 800d174:	4824      	ldr	r0, [pc, #144]	; (800d208 <vTaskStartScheduler+0xc4>)
 800d176:	f7ff fcf3 	bl	800cb60 <xTaskCreateStatic>
 800d17a:	4603      	mov	r3, r0
 800d17c:	4a23      	ldr	r2, [pc, #140]	; (800d20c <vTaskStartScheduler+0xc8>)
 800d17e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d180:	4b22      	ldr	r3, [pc, #136]	; (800d20c <vTaskStartScheduler+0xc8>)
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d002      	beq.n	800d18e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d188:	2301      	movs	r3, #1
 800d18a:	617b      	str	r3, [r7, #20]
 800d18c:	e001      	b.n	800d192 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d18e:	2300      	movs	r3, #0
 800d190:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d192:	697b      	ldr	r3, [r7, #20]
 800d194:	2b01      	cmp	r3, #1
 800d196:	d102      	bne.n	800d19e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d198:	f000 fe30 	bl	800ddfc <xTimerCreateTimerTask>
 800d19c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d19e:	697b      	ldr	r3, [r7, #20]
 800d1a0:	2b01      	cmp	r3, #1
 800d1a2:	d11b      	bne.n	800d1dc <vTaskStartScheduler+0x98>
	__asm volatile
 800d1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1a8:	f383 8811 	msr	BASEPRI, r3
 800d1ac:	f3bf 8f6f 	isb	sy
 800d1b0:	f3bf 8f4f 	dsb	sy
 800d1b4:	613b      	str	r3, [r7, #16]
}
 800d1b6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d1b8:	4b15      	ldr	r3, [pc, #84]	; (800d210 <vTaskStartScheduler+0xcc>)
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	3354      	adds	r3, #84	; 0x54
 800d1be:	4a15      	ldr	r2, [pc, #84]	; (800d214 <vTaskStartScheduler+0xd0>)
 800d1c0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d1c2:	4b15      	ldr	r3, [pc, #84]	; (800d218 <vTaskStartScheduler+0xd4>)
 800d1c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d1c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d1ca:	4b14      	ldr	r3, [pc, #80]	; (800d21c <vTaskStartScheduler+0xd8>)
 800d1cc:	2201      	movs	r2, #1
 800d1ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d1d0:	4b13      	ldr	r3, [pc, #76]	; (800d220 <vTaskStartScheduler+0xdc>)
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d1d6:	f001 f9eb 	bl	800e5b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d1da:	e00e      	b.n	800d1fa <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d1dc:	697b      	ldr	r3, [r7, #20]
 800d1de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d1e2:	d10a      	bne.n	800d1fa <vTaskStartScheduler+0xb6>
	__asm volatile
 800d1e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1e8:	f383 8811 	msr	BASEPRI, r3
 800d1ec:	f3bf 8f6f 	isb	sy
 800d1f0:	f3bf 8f4f 	dsb	sy
 800d1f4:	60fb      	str	r3, [r7, #12]
}
 800d1f6:	bf00      	nop
 800d1f8:	e7fe      	b.n	800d1f8 <vTaskStartScheduler+0xb4>
}
 800d1fa:	bf00      	nop
 800d1fc:	3718      	adds	r7, #24
 800d1fe:	46bd      	mov	sp, r7
 800d200:	bd80      	pop	{r7, pc}
 800d202:	bf00      	nop
 800d204:	0800f7f8 	.word	0x0800f7f8
 800d208:	0800d86d 	.word	0x0800d86d
 800d20c:	20001e18 	.word	0x20001e18
 800d210:	20001920 	.word	0x20001920
 800d214:	20000014 	.word	0x20000014
 800d218:	20001e14 	.word	0x20001e14
 800d21c:	20001e00 	.word	0x20001e00
 800d220:	20001df8 	.word	0x20001df8

0800d224 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d224:	b480      	push	{r7}
 800d226:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d228:	4b04      	ldr	r3, [pc, #16]	; (800d23c <vTaskSuspendAll+0x18>)
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	3301      	adds	r3, #1
 800d22e:	4a03      	ldr	r2, [pc, #12]	; (800d23c <vTaskSuspendAll+0x18>)
 800d230:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d232:	bf00      	nop
 800d234:	46bd      	mov	sp, r7
 800d236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23a:	4770      	bx	lr
 800d23c:	20001e1c 	.word	0x20001e1c

0800d240 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b084      	sub	sp, #16
 800d244:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d246:	2300      	movs	r3, #0
 800d248:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d24a:	2300      	movs	r3, #0
 800d24c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d24e:	4b42      	ldr	r3, [pc, #264]	; (800d358 <xTaskResumeAll+0x118>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d10a      	bne.n	800d26c <xTaskResumeAll+0x2c>
	__asm volatile
 800d256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d25a:	f383 8811 	msr	BASEPRI, r3
 800d25e:	f3bf 8f6f 	isb	sy
 800d262:	f3bf 8f4f 	dsb	sy
 800d266:	603b      	str	r3, [r7, #0]
}
 800d268:	bf00      	nop
 800d26a:	e7fe      	b.n	800d26a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d26c:	f001 fa42 	bl	800e6f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d270:	4b39      	ldr	r3, [pc, #228]	; (800d358 <xTaskResumeAll+0x118>)
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	3b01      	subs	r3, #1
 800d276:	4a38      	ldr	r2, [pc, #224]	; (800d358 <xTaskResumeAll+0x118>)
 800d278:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d27a:	4b37      	ldr	r3, [pc, #220]	; (800d358 <xTaskResumeAll+0x118>)
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d162      	bne.n	800d348 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d282:	4b36      	ldr	r3, [pc, #216]	; (800d35c <xTaskResumeAll+0x11c>)
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d05e      	beq.n	800d348 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d28a:	e02f      	b.n	800d2ec <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d28c:	4b34      	ldr	r3, [pc, #208]	; (800d360 <xTaskResumeAll+0x120>)
 800d28e:	68db      	ldr	r3, [r3, #12]
 800d290:	68db      	ldr	r3, [r3, #12]
 800d292:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	3318      	adds	r3, #24
 800d298:	4618      	mov	r0, r3
 800d29a:	f7fe fb37 	bl	800b90c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	3304      	adds	r3, #4
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f7fe fb32 	bl	800b90c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2ac:	4b2d      	ldr	r3, [pc, #180]	; (800d364 <xTaskResumeAll+0x124>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	429a      	cmp	r2, r3
 800d2b2:	d903      	bls.n	800d2bc <xTaskResumeAll+0x7c>
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2b8:	4a2a      	ldr	r2, [pc, #168]	; (800d364 <xTaskResumeAll+0x124>)
 800d2ba:	6013      	str	r3, [r2, #0]
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2c0:	4613      	mov	r3, r2
 800d2c2:	009b      	lsls	r3, r3, #2
 800d2c4:	4413      	add	r3, r2
 800d2c6:	009b      	lsls	r3, r3, #2
 800d2c8:	4a27      	ldr	r2, [pc, #156]	; (800d368 <xTaskResumeAll+0x128>)
 800d2ca:	441a      	add	r2, r3
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	3304      	adds	r3, #4
 800d2d0:	4619      	mov	r1, r3
 800d2d2:	4610      	mov	r0, r2
 800d2d4:	f7fe fabd 	bl	800b852 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2dc:	4b23      	ldr	r3, [pc, #140]	; (800d36c <xTaskResumeAll+0x12c>)
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2e2:	429a      	cmp	r2, r3
 800d2e4:	d302      	bcc.n	800d2ec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d2e6:	4b22      	ldr	r3, [pc, #136]	; (800d370 <xTaskResumeAll+0x130>)
 800d2e8:	2201      	movs	r2, #1
 800d2ea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d2ec:	4b1c      	ldr	r3, [pc, #112]	; (800d360 <xTaskResumeAll+0x120>)
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d1cb      	bne.n	800d28c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d001      	beq.n	800d2fe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d2fa:	f000 fb71 	bl	800d9e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d2fe:	4b1d      	ldr	r3, [pc, #116]	; (800d374 <xTaskResumeAll+0x134>)
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d010      	beq.n	800d32c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d30a:	f000 f859 	bl	800d3c0 <xTaskIncrementTick>
 800d30e:	4603      	mov	r3, r0
 800d310:	2b00      	cmp	r3, #0
 800d312:	d002      	beq.n	800d31a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d314:	4b16      	ldr	r3, [pc, #88]	; (800d370 <xTaskResumeAll+0x130>)
 800d316:	2201      	movs	r2, #1
 800d318:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	3b01      	subs	r3, #1
 800d31e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d1f1      	bne.n	800d30a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d326:	4b13      	ldr	r3, [pc, #76]	; (800d374 <xTaskResumeAll+0x134>)
 800d328:	2200      	movs	r2, #0
 800d32a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d32c:	4b10      	ldr	r3, [pc, #64]	; (800d370 <xTaskResumeAll+0x130>)
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d009      	beq.n	800d348 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d334:	2301      	movs	r3, #1
 800d336:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d338:	4b0f      	ldr	r3, [pc, #60]	; (800d378 <xTaskResumeAll+0x138>)
 800d33a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d33e:	601a      	str	r2, [r3, #0]
 800d340:	f3bf 8f4f 	dsb	sy
 800d344:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d348:	f001 fa04 	bl	800e754 <vPortExitCritical>

	return xAlreadyYielded;
 800d34c:	68bb      	ldr	r3, [r7, #8]
}
 800d34e:	4618      	mov	r0, r3
 800d350:	3710      	adds	r7, #16
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}
 800d356:	bf00      	nop
 800d358:	20001e1c 	.word	0x20001e1c
 800d35c:	20001df4 	.word	0x20001df4
 800d360:	20001db4 	.word	0x20001db4
 800d364:	20001dfc 	.word	0x20001dfc
 800d368:	20001924 	.word	0x20001924
 800d36c:	20001920 	.word	0x20001920
 800d370:	20001e08 	.word	0x20001e08
 800d374:	20001e04 	.word	0x20001e04
 800d378:	e000ed04 	.word	0xe000ed04

0800d37c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d37c:	b480      	push	{r7}
 800d37e:	b083      	sub	sp, #12
 800d380:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d382:	4b05      	ldr	r3, [pc, #20]	; (800d398 <xTaskGetTickCount+0x1c>)
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d388:	687b      	ldr	r3, [r7, #4]
}
 800d38a:	4618      	mov	r0, r3
 800d38c:	370c      	adds	r7, #12
 800d38e:	46bd      	mov	sp, r7
 800d390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d394:	4770      	bx	lr
 800d396:	bf00      	nop
 800d398:	20001df8 	.word	0x20001df8

0800d39c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b082      	sub	sp, #8
 800d3a0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d3a2:	f001 fa89 	bl	800e8b8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800d3aa:	4b04      	ldr	r3, [pc, #16]	; (800d3bc <xTaskGetTickCountFromISR+0x20>)
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d3b0:	683b      	ldr	r3, [r7, #0]
}
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	3708      	adds	r7, #8
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}
 800d3ba:	bf00      	nop
 800d3bc:	20001df8 	.word	0x20001df8

0800d3c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b086      	sub	sp, #24
 800d3c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d3ca:	4b4f      	ldr	r3, [pc, #316]	; (800d508 <xTaskIncrementTick+0x148>)
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	f040 808f 	bne.w	800d4f2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d3d4:	4b4d      	ldr	r3, [pc, #308]	; (800d50c <xTaskIncrementTick+0x14c>)
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	3301      	adds	r3, #1
 800d3da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d3dc:	4a4b      	ldr	r2, [pc, #300]	; (800d50c <xTaskIncrementTick+0x14c>)
 800d3de:	693b      	ldr	r3, [r7, #16]
 800d3e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d3e2:	693b      	ldr	r3, [r7, #16]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d120      	bne.n	800d42a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d3e8:	4b49      	ldr	r3, [pc, #292]	; (800d510 <xTaskIncrementTick+0x150>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d00a      	beq.n	800d408 <xTaskIncrementTick+0x48>
	__asm volatile
 800d3f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3f6:	f383 8811 	msr	BASEPRI, r3
 800d3fa:	f3bf 8f6f 	isb	sy
 800d3fe:	f3bf 8f4f 	dsb	sy
 800d402:	603b      	str	r3, [r7, #0]
}
 800d404:	bf00      	nop
 800d406:	e7fe      	b.n	800d406 <xTaskIncrementTick+0x46>
 800d408:	4b41      	ldr	r3, [pc, #260]	; (800d510 <xTaskIncrementTick+0x150>)
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	60fb      	str	r3, [r7, #12]
 800d40e:	4b41      	ldr	r3, [pc, #260]	; (800d514 <xTaskIncrementTick+0x154>)
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	4a3f      	ldr	r2, [pc, #252]	; (800d510 <xTaskIncrementTick+0x150>)
 800d414:	6013      	str	r3, [r2, #0]
 800d416:	4a3f      	ldr	r2, [pc, #252]	; (800d514 <xTaskIncrementTick+0x154>)
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	6013      	str	r3, [r2, #0]
 800d41c:	4b3e      	ldr	r3, [pc, #248]	; (800d518 <xTaskIncrementTick+0x158>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	3301      	adds	r3, #1
 800d422:	4a3d      	ldr	r2, [pc, #244]	; (800d518 <xTaskIncrementTick+0x158>)
 800d424:	6013      	str	r3, [r2, #0]
 800d426:	f000 fadb 	bl	800d9e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d42a:	4b3c      	ldr	r3, [pc, #240]	; (800d51c <xTaskIncrementTick+0x15c>)
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	693a      	ldr	r2, [r7, #16]
 800d430:	429a      	cmp	r2, r3
 800d432:	d349      	bcc.n	800d4c8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d434:	4b36      	ldr	r3, [pc, #216]	; (800d510 <xTaskIncrementTick+0x150>)
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d104      	bne.n	800d448 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d43e:	4b37      	ldr	r3, [pc, #220]	; (800d51c <xTaskIncrementTick+0x15c>)
 800d440:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d444:	601a      	str	r2, [r3, #0]
					break;
 800d446:	e03f      	b.n	800d4c8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d448:	4b31      	ldr	r3, [pc, #196]	; (800d510 <xTaskIncrementTick+0x150>)
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	68db      	ldr	r3, [r3, #12]
 800d44e:	68db      	ldr	r3, [r3, #12]
 800d450:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d452:	68bb      	ldr	r3, [r7, #8]
 800d454:	685b      	ldr	r3, [r3, #4]
 800d456:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d458:	693a      	ldr	r2, [r7, #16]
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	429a      	cmp	r2, r3
 800d45e:	d203      	bcs.n	800d468 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d460:	4a2e      	ldr	r2, [pc, #184]	; (800d51c <xTaskIncrementTick+0x15c>)
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d466:	e02f      	b.n	800d4c8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d468:	68bb      	ldr	r3, [r7, #8]
 800d46a:	3304      	adds	r3, #4
 800d46c:	4618      	mov	r0, r3
 800d46e:	f7fe fa4d 	bl	800b90c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d472:	68bb      	ldr	r3, [r7, #8]
 800d474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d476:	2b00      	cmp	r3, #0
 800d478:	d004      	beq.n	800d484 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d47a:	68bb      	ldr	r3, [r7, #8]
 800d47c:	3318      	adds	r3, #24
 800d47e:	4618      	mov	r0, r3
 800d480:	f7fe fa44 	bl	800b90c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d484:	68bb      	ldr	r3, [r7, #8]
 800d486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d488:	4b25      	ldr	r3, [pc, #148]	; (800d520 <xTaskIncrementTick+0x160>)
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	429a      	cmp	r2, r3
 800d48e:	d903      	bls.n	800d498 <xTaskIncrementTick+0xd8>
 800d490:	68bb      	ldr	r3, [r7, #8]
 800d492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d494:	4a22      	ldr	r2, [pc, #136]	; (800d520 <xTaskIncrementTick+0x160>)
 800d496:	6013      	str	r3, [r2, #0]
 800d498:	68bb      	ldr	r3, [r7, #8]
 800d49a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d49c:	4613      	mov	r3, r2
 800d49e:	009b      	lsls	r3, r3, #2
 800d4a0:	4413      	add	r3, r2
 800d4a2:	009b      	lsls	r3, r3, #2
 800d4a4:	4a1f      	ldr	r2, [pc, #124]	; (800d524 <xTaskIncrementTick+0x164>)
 800d4a6:	441a      	add	r2, r3
 800d4a8:	68bb      	ldr	r3, [r7, #8]
 800d4aa:	3304      	adds	r3, #4
 800d4ac:	4619      	mov	r1, r3
 800d4ae:	4610      	mov	r0, r2
 800d4b0:	f7fe f9cf 	bl	800b852 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d4b4:	68bb      	ldr	r3, [r7, #8]
 800d4b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4b8:	4b1b      	ldr	r3, [pc, #108]	; (800d528 <xTaskIncrementTick+0x168>)
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4be:	429a      	cmp	r2, r3
 800d4c0:	d3b8      	bcc.n	800d434 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d4c2:	2301      	movs	r3, #1
 800d4c4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d4c6:	e7b5      	b.n	800d434 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d4c8:	4b17      	ldr	r3, [pc, #92]	; (800d528 <xTaskIncrementTick+0x168>)
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4ce:	4915      	ldr	r1, [pc, #84]	; (800d524 <xTaskIncrementTick+0x164>)
 800d4d0:	4613      	mov	r3, r2
 800d4d2:	009b      	lsls	r3, r3, #2
 800d4d4:	4413      	add	r3, r2
 800d4d6:	009b      	lsls	r3, r3, #2
 800d4d8:	440b      	add	r3, r1
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	2b01      	cmp	r3, #1
 800d4de:	d901      	bls.n	800d4e4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d4e0:	2301      	movs	r3, #1
 800d4e2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d4e4:	4b11      	ldr	r3, [pc, #68]	; (800d52c <xTaskIncrementTick+0x16c>)
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d007      	beq.n	800d4fc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d4ec:	2301      	movs	r3, #1
 800d4ee:	617b      	str	r3, [r7, #20]
 800d4f0:	e004      	b.n	800d4fc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d4f2:	4b0f      	ldr	r3, [pc, #60]	; (800d530 <xTaskIncrementTick+0x170>)
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	3301      	adds	r3, #1
 800d4f8:	4a0d      	ldr	r2, [pc, #52]	; (800d530 <xTaskIncrementTick+0x170>)
 800d4fa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d4fc:	697b      	ldr	r3, [r7, #20]
}
 800d4fe:	4618      	mov	r0, r3
 800d500:	3718      	adds	r7, #24
 800d502:	46bd      	mov	sp, r7
 800d504:	bd80      	pop	{r7, pc}
 800d506:	bf00      	nop
 800d508:	20001e1c 	.word	0x20001e1c
 800d50c:	20001df8 	.word	0x20001df8
 800d510:	20001dac 	.word	0x20001dac
 800d514:	20001db0 	.word	0x20001db0
 800d518:	20001e0c 	.word	0x20001e0c
 800d51c:	20001e14 	.word	0x20001e14
 800d520:	20001dfc 	.word	0x20001dfc
 800d524:	20001924 	.word	0x20001924
 800d528:	20001920 	.word	0x20001920
 800d52c:	20001e08 	.word	0x20001e08
 800d530:	20001e04 	.word	0x20001e04

0800d534 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d534:	b480      	push	{r7}
 800d536:	b085      	sub	sp, #20
 800d538:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d53a:	4b2a      	ldr	r3, [pc, #168]	; (800d5e4 <vTaskSwitchContext+0xb0>)
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d003      	beq.n	800d54a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d542:	4b29      	ldr	r3, [pc, #164]	; (800d5e8 <vTaskSwitchContext+0xb4>)
 800d544:	2201      	movs	r2, #1
 800d546:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d548:	e046      	b.n	800d5d8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800d54a:	4b27      	ldr	r3, [pc, #156]	; (800d5e8 <vTaskSwitchContext+0xb4>)
 800d54c:	2200      	movs	r2, #0
 800d54e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d550:	4b26      	ldr	r3, [pc, #152]	; (800d5ec <vTaskSwitchContext+0xb8>)
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	60fb      	str	r3, [r7, #12]
 800d556:	e010      	b.n	800d57a <vTaskSwitchContext+0x46>
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d10a      	bne.n	800d574 <vTaskSwitchContext+0x40>
	__asm volatile
 800d55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d562:	f383 8811 	msr	BASEPRI, r3
 800d566:	f3bf 8f6f 	isb	sy
 800d56a:	f3bf 8f4f 	dsb	sy
 800d56e:	607b      	str	r3, [r7, #4]
}
 800d570:	bf00      	nop
 800d572:	e7fe      	b.n	800d572 <vTaskSwitchContext+0x3e>
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	3b01      	subs	r3, #1
 800d578:	60fb      	str	r3, [r7, #12]
 800d57a:	491d      	ldr	r1, [pc, #116]	; (800d5f0 <vTaskSwitchContext+0xbc>)
 800d57c:	68fa      	ldr	r2, [r7, #12]
 800d57e:	4613      	mov	r3, r2
 800d580:	009b      	lsls	r3, r3, #2
 800d582:	4413      	add	r3, r2
 800d584:	009b      	lsls	r3, r3, #2
 800d586:	440b      	add	r3, r1
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d0e4      	beq.n	800d558 <vTaskSwitchContext+0x24>
 800d58e:	68fa      	ldr	r2, [r7, #12]
 800d590:	4613      	mov	r3, r2
 800d592:	009b      	lsls	r3, r3, #2
 800d594:	4413      	add	r3, r2
 800d596:	009b      	lsls	r3, r3, #2
 800d598:	4a15      	ldr	r2, [pc, #84]	; (800d5f0 <vTaskSwitchContext+0xbc>)
 800d59a:	4413      	add	r3, r2
 800d59c:	60bb      	str	r3, [r7, #8]
 800d59e:	68bb      	ldr	r3, [r7, #8]
 800d5a0:	685b      	ldr	r3, [r3, #4]
 800d5a2:	685a      	ldr	r2, [r3, #4]
 800d5a4:	68bb      	ldr	r3, [r7, #8]
 800d5a6:	605a      	str	r2, [r3, #4]
 800d5a8:	68bb      	ldr	r3, [r7, #8]
 800d5aa:	685a      	ldr	r2, [r3, #4]
 800d5ac:	68bb      	ldr	r3, [r7, #8]
 800d5ae:	3308      	adds	r3, #8
 800d5b0:	429a      	cmp	r2, r3
 800d5b2:	d104      	bne.n	800d5be <vTaskSwitchContext+0x8a>
 800d5b4:	68bb      	ldr	r3, [r7, #8]
 800d5b6:	685b      	ldr	r3, [r3, #4]
 800d5b8:	685a      	ldr	r2, [r3, #4]
 800d5ba:	68bb      	ldr	r3, [r7, #8]
 800d5bc:	605a      	str	r2, [r3, #4]
 800d5be:	68bb      	ldr	r3, [r7, #8]
 800d5c0:	685b      	ldr	r3, [r3, #4]
 800d5c2:	68db      	ldr	r3, [r3, #12]
 800d5c4:	4a0b      	ldr	r2, [pc, #44]	; (800d5f4 <vTaskSwitchContext+0xc0>)
 800d5c6:	6013      	str	r3, [r2, #0]
 800d5c8:	4a08      	ldr	r2, [pc, #32]	; (800d5ec <vTaskSwitchContext+0xb8>)
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d5ce:	4b09      	ldr	r3, [pc, #36]	; (800d5f4 <vTaskSwitchContext+0xc0>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	3354      	adds	r3, #84	; 0x54
 800d5d4:	4a08      	ldr	r2, [pc, #32]	; (800d5f8 <vTaskSwitchContext+0xc4>)
 800d5d6:	6013      	str	r3, [r2, #0]
}
 800d5d8:	bf00      	nop
 800d5da:	3714      	adds	r7, #20
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e2:	4770      	bx	lr
 800d5e4:	20001e1c 	.word	0x20001e1c
 800d5e8:	20001e08 	.word	0x20001e08
 800d5ec:	20001dfc 	.word	0x20001dfc
 800d5f0:	20001924 	.word	0x20001924
 800d5f4:	20001920 	.word	0x20001920
 800d5f8:	20000014 	.word	0x20000014

0800d5fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b084      	sub	sp, #16
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
 800d604:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d10a      	bne.n	800d622 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d60c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d610:	f383 8811 	msr	BASEPRI, r3
 800d614:	f3bf 8f6f 	isb	sy
 800d618:	f3bf 8f4f 	dsb	sy
 800d61c:	60fb      	str	r3, [r7, #12]
}
 800d61e:	bf00      	nop
 800d620:	e7fe      	b.n	800d620 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d622:	4b07      	ldr	r3, [pc, #28]	; (800d640 <vTaskPlaceOnEventList+0x44>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	3318      	adds	r3, #24
 800d628:	4619      	mov	r1, r3
 800d62a:	6878      	ldr	r0, [r7, #4]
 800d62c:	f7fe f935 	bl	800b89a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d630:	2101      	movs	r1, #1
 800d632:	6838      	ldr	r0, [r7, #0]
 800d634:	f000 fb8e 	bl	800dd54 <prvAddCurrentTaskToDelayedList>
}
 800d638:	bf00      	nop
 800d63a:	3710      	adds	r7, #16
 800d63c:	46bd      	mov	sp, r7
 800d63e:	bd80      	pop	{r7, pc}
 800d640:	20001920 	.word	0x20001920

0800d644 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d644:	b580      	push	{r7, lr}
 800d646:	b086      	sub	sp, #24
 800d648:	af00      	add	r7, sp, #0
 800d64a:	60f8      	str	r0, [r7, #12]
 800d64c:	60b9      	str	r1, [r7, #8]
 800d64e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d10a      	bne.n	800d66c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d65a:	f383 8811 	msr	BASEPRI, r3
 800d65e:	f3bf 8f6f 	isb	sy
 800d662:	f3bf 8f4f 	dsb	sy
 800d666:	617b      	str	r3, [r7, #20]
}
 800d668:	bf00      	nop
 800d66a:	e7fe      	b.n	800d66a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d66c:	4b0a      	ldr	r3, [pc, #40]	; (800d698 <vTaskPlaceOnEventListRestricted+0x54>)
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	3318      	adds	r3, #24
 800d672:	4619      	mov	r1, r3
 800d674:	68f8      	ldr	r0, [r7, #12]
 800d676:	f7fe f8ec 	bl	800b852 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d002      	beq.n	800d686 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d680:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d684:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d686:	6879      	ldr	r1, [r7, #4]
 800d688:	68b8      	ldr	r0, [r7, #8]
 800d68a:	f000 fb63 	bl	800dd54 <prvAddCurrentTaskToDelayedList>
	}
 800d68e:	bf00      	nop
 800d690:	3718      	adds	r7, #24
 800d692:	46bd      	mov	sp, r7
 800d694:	bd80      	pop	{r7, pc}
 800d696:	bf00      	nop
 800d698:	20001920 	.word	0x20001920

0800d69c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b086      	sub	sp, #24
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	68db      	ldr	r3, [r3, #12]
 800d6a8:	68db      	ldr	r3, [r3, #12]
 800d6aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d6ac:	693b      	ldr	r3, [r7, #16]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d10a      	bne.n	800d6c8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6b6:	f383 8811 	msr	BASEPRI, r3
 800d6ba:	f3bf 8f6f 	isb	sy
 800d6be:	f3bf 8f4f 	dsb	sy
 800d6c2:	60fb      	str	r3, [r7, #12]
}
 800d6c4:	bf00      	nop
 800d6c6:	e7fe      	b.n	800d6c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d6c8:	693b      	ldr	r3, [r7, #16]
 800d6ca:	3318      	adds	r3, #24
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	f7fe f91d 	bl	800b90c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d6d2:	4b1e      	ldr	r3, [pc, #120]	; (800d74c <xTaskRemoveFromEventList+0xb0>)
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d11d      	bne.n	800d716 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d6da:	693b      	ldr	r3, [r7, #16]
 800d6dc:	3304      	adds	r3, #4
 800d6de:	4618      	mov	r0, r3
 800d6e0:	f7fe f914 	bl	800b90c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d6e4:	693b      	ldr	r3, [r7, #16]
 800d6e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6e8:	4b19      	ldr	r3, [pc, #100]	; (800d750 <xTaskRemoveFromEventList+0xb4>)
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	429a      	cmp	r2, r3
 800d6ee:	d903      	bls.n	800d6f8 <xTaskRemoveFromEventList+0x5c>
 800d6f0:	693b      	ldr	r3, [r7, #16]
 800d6f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6f4:	4a16      	ldr	r2, [pc, #88]	; (800d750 <xTaskRemoveFromEventList+0xb4>)
 800d6f6:	6013      	str	r3, [r2, #0]
 800d6f8:	693b      	ldr	r3, [r7, #16]
 800d6fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6fc:	4613      	mov	r3, r2
 800d6fe:	009b      	lsls	r3, r3, #2
 800d700:	4413      	add	r3, r2
 800d702:	009b      	lsls	r3, r3, #2
 800d704:	4a13      	ldr	r2, [pc, #76]	; (800d754 <xTaskRemoveFromEventList+0xb8>)
 800d706:	441a      	add	r2, r3
 800d708:	693b      	ldr	r3, [r7, #16]
 800d70a:	3304      	adds	r3, #4
 800d70c:	4619      	mov	r1, r3
 800d70e:	4610      	mov	r0, r2
 800d710:	f7fe f89f 	bl	800b852 <vListInsertEnd>
 800d714:	e005      	b.n	800d722 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d716:	693b      	ldr	r3, [r7, #16]
 800d718:	3318      	adds	r3, #24
 800d71a:	4619      	mov	r1, r3
 800d71c:	480e      	ldr	r0, [pc, #56]	; (800d758 <xTaskRemoveFromEventList+0xbc>)
 800d71e:	f7fe f898 	bl	800b852 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d722:	693b      	ldr	r3, [r7, #16]
 800d724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d726:	4b0d      	ldr	r3, [pc, #52]	; (800d75c <xTaskRemoveFromEventList+0xc0>)
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d72c:	429a      	cmp	r2, r3
 800d72e:	d905      	bls.n	800d73c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d730:	2301      	movs	r3, #1
 800d732:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d734:	4b0a      	ldr	r3, [pc, #40]	; (800d760 <xTaskRemoveFromEventList+0xc4>)
 800d736:	2201      	movs	r2, #1
 800d738:	601a      	str	r2, [r3, #0]
 800d73a:	e001      	b.n	800d740 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d73c:	2300      	movs	r3, #0
 800d73e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d740:	697b      	ldr	r3, [r7, #20]
}
 800d742:	4618      	mov	r0, r3
 800d744:	3718      	adds	r7, #24
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}
 800d74a:	bf00      	nop
 800d74c:	20001e1c 	.word	0x20001e1c
 800d750:	20001dfc 	.word	0x20001dfc
 800d754:	20001924 	.word	0x20001924
 800d758:	20001db4 	.word	0x20001db4
 800d75c:	20001920 	.word	0x20001920
 800d760:	20001e08 	.word	0x20001e08

0800d764 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d764:	b480      	push	{r7}
 800d766:	b083      	sub	sp, #12
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d76c:	4b06      	ldr	r3, [pc, #24]	; (800d788 <vTaskInternalSetTimeOutState+0x24>)
 800d76e:	681a      	ldr	r2, [r3, #0]
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d774:	4b05      	ldr	r3, [pc, #20]	; (800d78c <vTaskInternalSetTimeOutState+0x28>)
 800d776:	681a      	ldr	r2, [r3, #0]
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	605a      	str	r2, [r3, #4]
}
 800d77c:	bf00      	nop
 800d77e:	370c      	adds	r7, #12
 800d780:	46bd      	mov	sp, r7
 800d782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d786:	4770      	bx	lr
 800d788:	20001e0c 	.word	0x20001e0c
 800d78c:	20001df8 	.word	0x20001df8

0800d790 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b088      	sub	sp, #32
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
 800d798:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d10a      	bne.n	800d7b6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d7a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7a4:	f383 8811 	msr	BASEPRI, r3
 800d7a8:	f3bf 8f6f 	isb	sy
 800d7ac:	f3bf 8f4f 	dsb	sy
 800d7b0:	613b      	str	r3, [r7, #16]
}
 800d7b2:	bf00      	nop
 800d7b4:	e7fe      	b.n	800d7b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d10a      	bne.n	800d7d2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d7bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7c0:	f383 8811 	msr	BASEPRI, r3
 800d7c4:	f3bf 8f6f 	isb	sy
 800d7c8:	f3bf 8f4f 	dsb	sy
 800d7cc:	60fb      	str	r3, [r7, #12]
}
 800d7ce:	bf00      	nop
 800d7d0:	e7fe      	b.n	800d7d0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d7d2:	f000 ff8f 	bl	800e6f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d7d6:	4b1d      	ldr	r3, [pc, #116]	; (800d84c <xTaskCheckForTimeOut+0xbc>)
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	685b      	ldr	r3, [r3, #4]
 800d7e0:	69ba      	ldr	r2, [r7, #24]
 800d7e2:	1ad3      	subs	r3, r2, r3
 800d7e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d7ee:	d102      	bne.n	800d7f6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	61fb      	str	r3, [r7, #28]
 800d7f4:	e023      	b.n	800d83e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681a      	ldr	r2, [r3, #0]
 800d7fa:	4b15      	ldr	r3, [pc, #84]	; (800d850 <xTaskCheckForTimeOut+0xc0>)
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	429a      	cmp	r2, r3
 800d800:	d007      	beq.n	800d812 <xTaskCheckForTimeOut+0x82>
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	685b      	ldr	r3, [r3, #4]
 800d806:	69ba      	ldr	r2, [r7, #24]
 800d808:	429a      	cmp	r2, r3
 800d80a:	d302      	bcc.n	800d812 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d80c:	2301      	movs	r3, #1
 800d80e:	61fb      	str	r3, [r7, #28]
 800d810:	e015      	b.n	800d83e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d812:	683b      	ldr	r3, [r7, #0]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	697a      	ldr	r2, [r7, #20]
 800d818:	429a      	cmp	r2, r3
 800d81a:	d20b      	bcs.n	800d834 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d81c:	683b      	ldr	r3, [r7, #0]
 800d81e:	681a      	ldr	r2, [r3, #0]
 800d820:	697b      	ldr	r3, [r7, #20]
 800d822:	1ad2      	subs	r2, r2, r3
 800d824:	683b      	ldr	r3, [r7, #0]
 800d826:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d828:	6878      	ldr	r0, [r7, #4]
 800d82a:	f7ff ff9b 	bl	800d764 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d82e:	2300      	movs	r3, #0
 800d830:	61fb      	str	r3, [r7, #28]
 800d832:	e004      	b.n	800d83e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d834:	683b      	ldr	r3, [r7, #0]
 800d836:	2200      	movs	r2, #0
 800d838:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d83a:	2301      	movs	r3, #1
 800d83c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d83e:	f000 ff89 	bl	800e754 <vPortExitCritical>

	return xReturn;
 800d842:	69fb      	ldr	r3, [r7, #28]
}
 800d844:	4618      	mov	r0, r3
 800d846:	3720      	adds	r7, #32
 800d848:	46bd      	mov	sp, r7
 800d84a:	bd80      	pop	{r7, pc}
 800d84c:	20001df8 	.word	0x20001df8
 800d850:	20001e0c 	.word	0x20001e0c

0800d854 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d854:	b480      	push	{r7}
 800d856:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d858:	4b03      	ldr	r3, [pc, #12]	; (800d868 <vTaskMissedYield+0x14>)
 800d85a:	2201      	movs	r2, #1
 800d85c:	601a      	str	r2, [r3, #0]
}
 800d85e:	bf00      	nop
 800d860:	46bd      	mov	sp, r7
 800d862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d866:	4770      	bx	lr
 800d868:	20001e08 	.word	0x20001e08

0800d86c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b082      	sub	sp, #8
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d874:	f000 f852 	bl	800d91c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d878:	4b06      	ldr	r3, [pc, #24]	; (800d894 <prvIdleTask+0x28>)
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	2b01      	cmp	r3, #1
 800d87e:	d9f9      	bls.n	800d874 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d880:	4b05      	ldr	r3, [pc, #20]	; (800d898 <prvIdleTask+0x2c>)
 800d882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d886:	601a      	str	r2, [r3, #0]
 800d888:	f3bf 8f4f 	dsb	sy
 800d88c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d890:	e7f0      	b.n	800d874 <prvIdleTask+0x8>
 800d892:	bf00      	nop
 800d894:	20001924 	.word	0x20001924
 800d898:	e000ed04 	.word	0xe000ed04

0800d89c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b082      	sub	sp, #8
 800d8a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	607b      	str	r3, [r7, #4]
 800d8a6:	e00c      	b.n	800d8c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d8a8:	687a      	ldr	r2, [r7, #4]
 800d8aa:	4613      	mov	r3, r2
 800d8ac:	009b      	lsls	r3, r3, #2
 800d8ae:	4413      	add	r3, r2
 800d8b0:	009b      	lsls	r3, r3, #2
 800d8b2:	4a12      	ldr	r2, [pc, #72]	; (800d8fc <prvInitialiseTaskLists+0x60>)
 800d8b4:	4413      	add	r3, r2
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	f7fd ff9e 	bl	800b7f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	3301      	adds	r3, #1
 800d8c0:	607b      	str	r3, [r7, #4]
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	2b37      	cmp	r3, #55	; 0x37
 800d8c6:	d9ef      	bls.n	800d8a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d8c8:	480d      	ldr	r0, [pc, #52]	; (800d900 <prvInitialiseTaskLists+0x64>)
 800d8ca:	f7fd ff95 	bl	800b7f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d8ce:	480d      	ldr	r0, [pc, #52]	; (800d904 <prvInitialiseTaskLists+0x68>)
 800d8d0:	f7fd ff92 	bl	800b7f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d8d4:	480c      	ldr	r0, [pc, #48]	; (800d908 <prvInitialiseTaskLists+0x6c>)
 800d8d6:	f7fd ff8f 	bl	800b7f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d8da:	480c      	ldr	r0, [pc, #48]	; (800d90c <prvInitialiseTaskLists+0x70>)
 800d8dc:	f7fd ff8c 	bl	800b7f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d8e0:	480b      	ldr	r0, [pc, #44]	; (800d910 <prvInitialiseTaskLists+0x74>)
 800d8e2:	f7fd ff89 	bl	800b7f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d8e6:	4b0b      	ldr	r3, [pc, #44]	; (800d914 <prvInitialiseTaskLists+0x78>)
 800d8e8:	4a05      	ldr	r2, [pc, #20]	; (800d900 <prvInitialiseTaskLists+0x64>)
 800d8ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d8ec:	4b0a      	ldr	r3, [pc, #40]	; (800d918 <prvInitialiseTaskLists+0x7c>)
 800d8ee:	4a05      	ldr	r2, [pc, #20]	; (800d904 <prvInitialiseTaskLists+0x68>)
 800d8f0:	601a      	str	r2, [r3, #0]
}
 800d8f2:	bf00      	nop
 800d8f4:	3708      	adds	r7, #8
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bd80      	pop	{r7, pc}
 800d8fa:	bf00      	nop
 800d8fc:	20001924 	.word	0x20001924
 800d900:	20001d84 	.word	0x20001d84
 800d904:	20001d98 	.word	0x20001d98
 800d908:	20001db4 	.word	0x20001db4
 800d90c:	20001dc8 	.word	0x20001dc8
 800d910:	20001de0 	.word	0x20001de0
 800d914:	20001dac 	.word	0x20001dac
 800d918:	20001db0 	.word	0x20001db0

0800d91c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b082      	sub	sp, #8
 800d920:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d922:	e019      	b.n	800d958 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d924:	f000 fee6 	bl	800e6f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d928:	4b10      	ldr	r3, [pc, #64]	; (800d96c <prvCheckTasksWaitingTermination+0x50>)
 800d92a:	68db      	ldr	r3, [r3, #12]
 800d92c:	68db      	ldr	r3, [r3, #12]
 800d92e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	3304      	adds	r3, #4
 800d934:	4618      	mov	r0, r3
 800d936:	f7fd ffe9 	bl	800b90c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d93a:	4b0d      	ldr	r3, [pc, #52]	; (800d970 <prvCheckTasksWaitingTermination+0x54>)
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	3b01      	subs	r3, #1
 800d940:	4a0b      	ldr	r2, [pc, #44]	; (800d970 <prvCheckTasksWaitingTermination+0x54>)
 800d942:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d944:	4b0b      	ldr	r3, [pc, #44]	; (800d974 <prvCheckTasksWaitingTermination+0x58>)
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	3b01      	subs	r3, #1
 800d94a:	4a0a      	ldr	r2, [pc, #40]	; (800d974 <prvCheckTasksWaitingTermination+0x58>)
 800d94c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d94e:	f000 ff01 	bl	800e754 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d952:	6878      	ldr	r0, [r7, #4]
 800d954:	f000 f810 	bl	800d978 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d958:	4b06      	ldr	r3, [pc, #24]	; (800d974 <prvCheckTasksWaitingTermination+0x58>)
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d1e1      	bne.n	800d924 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d960:	bf00      	nop
 800d962:	bf00      	nop
 800d964:	3708      	adds	r7, #8
 800d966:	46bd      	mov	sp, r7
 800d968:	bd80      	pop	{r7, pc}
 800d96a:	bf00      	nop
 800d96c:	20001dc8 	.word	0x20001dc8
 800d970:	20001df4 	.word	0x20001df4
 800d974:	20001ddc 	.word	0x20001ddc

0800d978 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d978:	b580      	push	{r7, lr}
 800d97a:	b084      	sub	sp, #16
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	3354      	adds	r3, #84	; 0x54
 800d984:	4618      	mov	r0, r3
 800d986:	f001 fb01 	bl	800ef8c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d990:	2b00      	cmp	r3, #0
 800d992:	d108      	bne.n	800d9a6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d998:	4618      	mov	r0, r3
 800d99a:	f001 f899 	bl	800ead0 <vPortFree>
				vPortFree( pxTCB );
 800d99e:	6878      	ldr	r0, [r7, #4]
 800d9a0:	f001 f896 	bl	800ead0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d9a4:	e018      	b.n	800d9d8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d9ac:	2b01      	cmp	r3, #1
 800d9ae:	d103      	bne.n	800d9b8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d9b0:	6878      	ldr	r0, [r7, #4]
 800d9b2:	f001 f88d 	bl	800ead0 <vPortFree>
	}
 800d9b6:	e00f      	b.n	800d9d8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d9be:	2b02      	cmp	r3, #2
 800d9c0:	d00a      	beq.n	800d9d8 <prvDeleteTCB+0x60>
	__asm volatile
 800d9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9c6:	f383 8811 	msr	BASEPRI, r3
 800d9ca:	f3bf 8f6f 	isb	sy
 800d9ce:	f3bf 8f4f 	dsb	sy
 800d9d2:	60fb      	str	r3, [r7, #12]
}
 800d9d4:	bf00      	nop
 800d9d6:	e7fe      	b.n	800d9d6 <prvDeleteTCB+0x5e>
	}
 800d9d8:	bf00      	nop
 800d9da:	3710      	adds	r7, #16
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	bd80      	pop	{r7, pc}

0800d9e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d9e0:	b480      	push	{r7}
 800d9e2:	b083      	sub	sp, #12
 800d9e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d9e6:	4b0c      	ldr	r3, [pc, #48]	; (800da18 <prvResetNextTaskUnblockTime+0x38>)
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d104      	bne.n	800d9fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d9f0:	4b0a      	ldr	r3, [pc, #40]	; (800da1c <prvResetNextTaskUnblockTime+0x3c>)
 800d9f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d9f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d9f8:	e008      	b.n	800da0c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d9fa:	4b07      	ldr	r3, [pc, #28]	; (800da18 <prvResetNextTaskUnblockTime+0x38>)
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	68db      	ldr	r3, [r3, #12]
 800da00:	68db      	ldr	r3, [r3, #12]
 800da02:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	685b      	ldr	r3, [r3, #4]
 800da08:	4a04      	ldr	r2, [pc, #16]	; (800da1c <prvResetNextTaskUnblockTime+0x3c>)
 800da0a:	6013      	str	r3, [r2, #0]
}
 800da0c:	bf00      	nop
 800da0e:	370c      	adds	r7, #12
 800da10:	46bd      	mov	sp, r7
 800da12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da16:	4770      	bx	lr
 800da18:	20001dac 	.word	0x20001dac
 800da1c:	20001e14 	.word	0x20001e14

0800da20 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800da20:	b480      	push	{r7}
 800da22:	b083      	sub	sp, #12
 800da24:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800da26:	4b05      	ldr	r3, [pc, #20]	; (800da3c <xTaskGetCurrentTaskHandle+0x1c>)
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800da2c:	687b      	ldr	r3, [r7, #4]
	}
 800da2e:	4618      	mov	r0, r3
 800da30:	370c      	adds	r7, #12
 800da32:	46bd      	mov	sp, r7
 800da34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da38:	4770      	bx	lr
 800da3a:	bf00      	nop
 800da3c:	20001920 	.word	0x20001920

0800da40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800da40:	b480      	push	{r7}
 800da42:	b083      	sub	sp, #12
 800da44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800da46:	4b0b      	ldr	r3, [pc, #44]	; (800da74 <xTaskGetSchedulerState+0x34>)
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d102      	bne.n	800da54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800da4e:	2301      	movs	r3, #1
 800da50:	607b      	str	r3, [r7, #4]
 800da52:	e008      	b.n	800da66 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da54:	4b08      	ldr	r3, [pc, #32]	; (800da78 <xTaskGetSchedulerState+0x38>)
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d102      	bne.n	800da62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800da5c:	2302      	movs	r3, #2
 800da5e:	607b      	str	r3, [r7, #4]
 800da60:	e001      	b.n	800da66 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800da62:	2300      	movs	r3, #0
 800da64:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800da66:	687b      	ldr	r3, [r7, #4]
	}
 800da68:	4618      	mov	r0, r3
 800da6a:	370c      	adds	r7, #12
 800da6c:	46bd      	mov	sp, r7
 800da6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da72:	4770      	bx	lr
 800da74:	20001e00 	.word	0x20001e00
 800da78:	20001e1c 	.word	0x20001e1c

0800da7c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b084      	sub	sp, #16
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800da88:	2300      	movs	r3, #0
 800da8a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d051      	beq.n	800db36 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800da92:	68bb      	ldr	r3, [r7, #8]
 800da94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da96:	4b2a      	ldr	r3, [pc, #168]	; (800db40 <xTaskPriorityInherit+0xc4>)
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da9c:	429a      	cmp	r2, r3
 800da9e:	d241      	bcs.n	800db24 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800daa0:	68bb      	ldr	r3, [r7, #8]
 800daa2:	699b      	ldr	r3, [r3, #24]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	db06      	blt.n	800dab6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800daa8:	4b25      	ldr	r3, [pc, #148]	; (800db40 <xTaskPriorityInherit+0xc4>)
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dab2:	68bb      	ldr	r3, [r7, #8]
 800dab4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800dab6:	68bb      	ldr	r3, [r7, #8]
 800dab8:	6959      	ldr	r1, [r3, #20]
 800daba:	68bb      	ldr	r3, [r7, #8]
 800dabc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dabe:	4613      	mov	r3, r2
 800dac0:	009b      	lsls	r3, r3, #2
 800dac2:	4413      	add	r3, r2
 800dac4:	009b      	lsls	r3, r3, #2
 800dac6:	4a1f      	ldr	r2, [pc, #124]	; (800db44 <xTaskPriorityInherit+0xc8>)
 800dac8:	4413      	add	r3, r2
 800daca:	4299      	cmp	r1, r3
 800dacc:	d122      	bne.n	800db14 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dace:	68bb      	ldr	r3, [r7, #8]
 800dad0:	3304      	adds	r3, #4
 800dad2:	4618      	mov	r0, r3
 800dad4:	f7fd ff1a 	bl	800b90c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dad8:	4b19      	ldr	r3, [pc, #100]	; (800db40 <xTaskPriorityInherit+0xc4>)
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dade:	68bb      	ldr	r3, [r7, #8]
 800dae0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800dae2:	68bb      	ldr	r3, [r7, #8]
 800dae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dae6:	4b18      	ldr	r3, [pc, #96]	; (800db48 <xTaskPriorityInherit+0xcc>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	429a      	cmp	r2, r3
 800daec:	d903      	bls.n	800daf6 <xTaskPriorityInherit+0x7a>
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daf2:	4a15      	ldr	r2, [pc, #84]	; (800db48 <xTaskPriorityInherit+0xcc>)
 800daf4:	6013      	str	r3, [r2, #0]
 800daf6:	68bb      	ldr	r3, [r7, #8]
 800daf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dafa:	4613      	mov	r3, r2
 800dafc:	009b      	lsls	r3, r3, #2
 800dafe:	4413      	add	r3, r2
 800db00:	009b      	lsls	r3, r3, #2
 800db02:	4a10      	ldr	r2, [pc, #64]	; (800db44 <xTaskPriorityInherit+0xc8>)
 800db04:	441a      	add	r2, r3
 800db06:	68bb      	ldr	r3, [r7, #8]
 800db08:	3304      	adds	r3, #4
 800db0a:	4619      	mov	r1, r3
 800db0c:	4610      	mov	r0, r2
 800db0e:	f7fd fea0 	bl	800b852 <vListInsertEnd>
 800db12:	e004      	b.n	800db1e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800db14:	4b0a      	ldr	r3, [pc, #40]	; (800db40 <xTaskPriorityInherit+0xc4>)
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db1a:	68bb      	ldr	r3, [r7, #8]
 800db1c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800db1e:	2301      	movs	r3, #1
 800db20:	60fb      	str	r3, [r7, #12]
 800db22:	e008      	b.n	800db36 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800db24:	68bb      	ldr	r3, [r7, #8]
 800db26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800db28:	4b05      	ldr	r3, [pc, #20]	; (800db40 <xTaskPriorityInherit+0xc4>)
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db2e:	429a      	cmp	r2, r3
 800db30:	d201      	bcs.n	800db36 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800db32:	2301      	movs	r3, #1
 800db34:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800db36:	68fb      	ldr	r3, [r7, #12]
	}
 800db38:	4618      	mov	r0, r3
 800db3a:	3710      	adds	r7, #16
 800db3c:	46bd      	mov	sp, r7
 800db3e:	bd80      	pop	{r7, pc}
 800db40:	20001920 	.word	0x20001920
 800db44:	20001924 	.word	0x20001924
 800db48:	20001dfc 	.word	0x20001dfc

0800db4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b086      	sub	sp, #24
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800db58:	2300      	movs	r3, #0
 800db5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d056      	beq.n	800dc10 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800db62:	4b2e      	ldr	r3, [pc, #184]	; (800dc1c <xTaskPriorityDisinherit+0xd0>)
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	693a      	ldr	r2, [r7, #16]
 800db68:	429a      	cmp	r2, r3
 800db6a:	d00a      	beq.n	800db82 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800db6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db70:	f383 8811 	msr	BASEPRI, r3
 800db74:	f3bf 8f6f 	isb	sy
 800db78:	f3bf 8f4f 	dsb	sy
 800db7c:	60fb      	str	r3, [r7, #12]
}
 800db7e:	bf00      	nop
 800db80:	e7fe      	b.n	800db80 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800db82:	693b      	ldr	r3, [r7, #16]
 800db84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db86:	2b00      	cmp	r3, #0
 800db88:	d10a      	bne.n	800dba0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800db8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db8e:	f383 8811 	msr	BASEPRI, r3
 800db92:	f3bf 8f6f 	isb	sy
 800db96:	f3bf 8f4f 	dsb	sy
 800db9a:	60bb      	str	r3, [r7, #8]
}
 800db9c:	bf00      	nop
 800db9e:	e7fe      	b.n	800db9e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800dba0:	693b      	ldr	r3, [r7, #16]
 800dba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dba4:	1e5a      	subs	r2, r3, #1
 800dba6:	693b      	ldr	r3, [r7, #16]
 800dba8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dbaa:	693b      	ldr	r3, [r7, #16]
 800dbac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbae:	693b      	ldr	r3, [r7, #16]
 800dbb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dbb2:	429a      	cmp	r2, r3
 800dbb4:	d02c      	beq.n	800dc10 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dbb6:	693b      	ldr	r3, [r7, #16]
 800dbb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d128      	bne.n	800dc10 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dbbe:	693b      	ldr	r3, [r7, #16]
 800dbc0:	3304      	adds	r3, #4
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	f7fd fea2 	bl	800b90c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dbc8:	693b      	ldr	r3, [r7, #16]
 800dbca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dbcc:	693b      	ldr	r3, [r7, #16]
 800dbce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dbd0:	693b      	ldr	r3, [r7, #16]
 800dbd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbd4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dbd8:	693b      	ldr	r3, [r7, #16]
 800dbda:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800dbdc:	693b      	ldr	r3, [r7, #16]
 800dbde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbe0:	4b0f      	ldr	r3, [pc, #60]	; (800dc20 <xTaskPriorityDisinherit+0xd4>)
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	429a      	cmp	r2, r3
 800dbe6:	d903      	bls.n	800dbf0 <xTaskPriorityDisinherit+0xa4>
 800dbe8:	693b      	ldr	r3, [r7, #16]
 800dbea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbec:	4a0c      	ldr	r2, [pc, #48]	; (800dc20 <xTaskPriorityDisinherit+0xd4>)
 800dbee:	6013      	str	r3, [r2, #0]
 800dbf0:	693b      	ldr	r3, [r7, #16]
 800dbf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbf4:	4613      	mov	r3, r2
 800dbf6:	009b      	lsls	r3, r3, #2
 800dbf8:	4413      	add	r3, r2
 800dbfa:	009b      	lsls	r3, r3, #2
 800dbfc:	4a09      	ldr	r2, [pc, #36]	; (800dc24 <xTaskPriorityDisinherit+0xd8>)
 800dbfe:	441a      	add	r2, r3
 800dc00:	693b      	ldr	r3, [r7, #16]
 800dc02:	3304      	adds	r3, #4
 800dc04:	4619      	mov	r1, r3
 800dc06:	4610      	mov	r0, r2
 800dc08:	f7fd fe23 	bl	800b852 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800dc0c:	2301      	movs	r3, #1
 800dc0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dc10:	697b      	ldr	r3, [r7, #20]
	}
 800dc12:	4618      	mov	r0, r3
 800dc14:	3718      	adds	r7, #24
 800dc16:	46bd      	mov	sp, r7
 800dc18:	bd80      	pop	{r7, pc}
 800dc1a:	bf00      	nop
 800dc1c:	20001920 	.word	0x20001920
 800dc20:	20001dfc 	.word	0x20001dfc
 800dc24:	20001924 	.word	0x20001924

0800dc28 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b088      	sub	sp, #32
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
 800dc30:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800dc36:	2301      	movs	r3, #1
 800dc38:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d06a      	beq.n	800dd16 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800dc40:	69bb      	ldr	r3, [r7, #24]
 800dc42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d10a      	bne.n	800dc5e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800dc48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc4c:	f383 8811 	msr	BASEPRI, r3
 800dc50:	f3bf 8f6f 	isb	sy
 800dc54:	f3bf 8f4f 	dsb	sy
 800dc58:	60fb      	str	r3, [r7, #12]
}
 800dc5a:	bf00      	nop
 800dc5c:	e7fe      	b.n	800dc5c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800dc5e:	69bb      	ldr	r3, [r7, #24]
 800dc60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dc62:	683a      	ldr	r2, [r7, #0]
 800dc64:	429a      	cmp	r2, r3
 800dc66:	d902      	bls.n	800dc6e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800dc68:	683b      	ldr	r3, [r7, #0]
 800dc6a:	61fb      	str	r3, [r7, #28]
 800dc6c:	e002      	b.n	800dc74 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800dc6e:	69bb      	ldr	r3, [r7, #24]
 800dc70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dc72:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800dc74:	69bb      	ldr	r3, [r7, #24]
 800dc76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc78:	69fa      	ldr	r2, [r7, #28]
 800dc7a:	429a      	cmp	r2, r3
 800dc7c:	d04b      	beq.n	800dd16 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800dc7e:	69bb      	ldr	r3, [r7, #24]
 800dc80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc82:	697a      	ldr	r2, [r7, #20]
 800dc84:	429a      	cmp	r2, r3
 800dc86:	d146      	bne.n	800dd16 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800dc88:	4b25      	ldr	r3, [pc, #148]	; (800dd20 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	69ba      	ldr	r2, [r7, #24]
 800dc8e:	429a      	cmp	r2, r3
 800dc90:	d10a      	bne.n	800dca8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800dc92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc96:	f383 8811 	msr	BASEPRI, r3
 800dc9a:	f3bf 8f6f 	isb	sy
 800dc9e:	f3bf 8f4f 	dsb	sy
 800dca2:	60bb      	str	r3, [r7, #8]
}
 800dca4:	bf00      	nop
 800dca6:	e7fe      	b.n	800dca6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800dca8:	69bb      	ldr	r3, [r7, #24]
 800dcaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcac:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800dcae:	69bb      	ldr	r3, [r7, #24]
 800dcb0:	69fa      	ldr	r2, [r7, #28]
 800dcb2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dcb4:	69bb      	ldr	r3, [r7, #24]
 800dcb6:	699b      	ldr	r3, [r3, #24]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	db04      	blt.n	800dcc6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dcbc:	69fb      	ldr	r3, [r7, #28]
 800dcbe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dcc2:	69bb      	ldr	r3, [r7, #24]
 800dcc4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dcc6:	69bb      	ldr	r3, [r7, #24]
 800dcc8:	6959      	ldr	r1, [r3, #20]
 800dcca:	693a      	ldr	r2, [r7, #16]
 800dccc:	4613      	mov	r3, r2
 800dcce:	009b      	lsls	r3, r3, #2
 800dcd0:	4413      	add	r3, r2
 800dcd2:	009b      	lsls	r3, r3, #2
 800dcd4:	4a13      	ldr	r2, [pc, #76]	; (800dd24 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800dcd6:	4413      	add	r3, r2
 800dcd8:	4299      	cmp	r1, r3
 800dcda:	d11c      	bne.n	800dd16 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dcdc:	69bb      	ldr	r3, [r7, #24]
 800dcde:	3304      	adds	r3, #4
 800dce0:	4618      	mov	r0, r3
 800dce2:	f7fd fe13 	bl	800b90c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800dce6:	69bb      	ldr	r3, [r7, #24]
 800dce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcea:	4b0f      	ldr	r3, [pc, #60]	; (800dd28 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	429a      	cmp	r2, r3
 800dcf0:	d903      	bls.n	800dcfa <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800dcf2:	69bb      	ldr	r3, [r7, #24]
 800dcf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcf6:	4a0c      	ldr	r2, [pc, #48]	; (800dd28 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800dcf8:	6013      	str	r3, [r2, #0]
 800dcfa:	69bb      	ldr	r3, [r7, #24]
 800dcfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcfe:	4613      	mov	r3, r2
 800dd00:	009b      	lsls	r3, r3, #2
 800dd02:	4413      	add	r3, r2
 800dd04:	009b      	lsls	r3, r3, #2
 800dd06:	4a07      	ldr	r2, [pc, #28]	; (800dd24 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800dd08:	441a      	add	r2, r3
 800dd0a:	69bb      	ldr	r3, [r7, #24]
 800dd0c:	3304      	adds	r3, #4
 800dd0e:	4619      	mov	r1, r3
 800dd10:	4610      	mov	r0, r2
 800dd12:	f7fd fd9e 	bl	800b852 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dd16:	bf00      	nop
 800dd18:	3720      	adds	r7, #32
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	bd80      	pop	{r7, pc}
 800dd1e:	bf00      	nop
 800dd20:	20001920 	.word	0x20001920
 800dd24:	20001924 	.word	0x20001924
 800dd28:	20001dfc 	.word	0x20001dfc

0800dd2c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800dd2c:	b480      	push	{r7}
 800dd2e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800dd30:	4b07      	ldr	r3, [pc, #28]	; (800dd50 <pvTaskIncrementMutexHeldCount+0x24>)
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d004      	beq.n	800dd42 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800dd38:	4b05      	ldr	r3, [pc, #20]	; (800dd50 <pvTaskIncrementMutexHeldCount+0x24>)
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dd3e:	3201      	adds	r2, #1
 800dd40:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800dd42:	4b03      	ldr	r3, [pc, #12]	; (800dd50 <pvTaskIncrementMutexHeldCount+0x24>)
 800dd44:	681b      	ldr	r3, [r3, #0]
	}
 800dd46:	4618      	mov	r0, r3
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4e:	4770      	bx	lr
 800dd50:	20001920 	.word	0x20001920

0800dd54 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b084      	sub	sp, #16
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
 800dd5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dd5e:	4b21      	ldr	r3, [pc, #132]	; (800dde4 <prvAddCurrentTaskToDelayedList+0x90>)
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dd64:	4b20      	ldr	r3, [pc, #128]	; (800dde8 <prvAddCurrentTaskToDelayedList+0x94>)
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	3304      	adds	r3, #4
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	f7fd fdce 	bl	800b90c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dd76:	d10a      	bne.n	800dd8e <prvAddCurrentTaskToDelayedList+0x3a>
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d007      	beq.n	800dd8e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dd7e:	4b1a      	ldr	r3, [pc, #104]	; (800dde8 <prvAddCurrentTaskToDelayedList+0x94>)
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	3304      	adds	r3, #4
 800dd84:	4619      	mov	r1, r3
 800dd86:	4819      	ldr	r0, [pc, #100]	; (800ddec <prvAddCurrentTaskToDelayedList+0x98>)
 800dd88:	f7fd fd63 	bl	800b852 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dd8c:	e026      	b.n	800dddc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dd8e:	68fa      	ldr	r2, [r7, #12]
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	4413      	add	r3, r2
 800dd94:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dd96:	4b14      	ldr	r3, [pc, #80]	; (800dde8 <prvAddCurrentTaskToDelayedList+0x94>)
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	68ba      	ldr	r2, [r7, #8]
 800dd9c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dd9e:	68ba      	ldr	r2, [r7, #8]
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	429a      	cmp	r2, r3
 800dda4:	d209      	bcs.n	800ddba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dda6:	4b12      	ldr	r3, [pc, #72]	; (800ddf0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800dda8:	681a      	ldr	r2, [r3, #0]
 800ddaa:	4b0f      	ldr	r3, [pc, #60]	; (800dde8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	3304      	adds	r3, #4
 800ddb0:	4619      	mov	r1, r3
 800ddb2:	4610      	mov	r0, r2
 800ddb4:	f7fd fd71 	bl	800b89a <vListInsert>
}
 800ddb8:	e010      	b.n	800dddc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ddba:	4b0e      	ldr	r3, [pc, #56]	; (800ddf4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ddbc:	681a      	ldr	r2, [r3, #0]
 800ddbe:	4b0a      	ldr	r3, [pc, #40]	; (800dde8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	3304      	adds	r3, #4
 800ddc4:	4619      	mov	r1, r3
 800ddc6:	4610      	mov	r0, r2
 800ddc8:	f7fd fd67 	bl	800b89a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ddcc:	4b0a      	ldr	r3, [pc, #40]	; (800ddf8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	68ba      	ldr	r2, [r7, #8]
 800ddd2:	429a      	cmp	r2, r3
 800ddd4:	d202      	bcs.n	800dddc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ddd6:	4a08      	ldr	r2, [pc, #32]	; (800ddf8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ddd8:	68bb      	ldr	r3, [r7, #8]
 800ddda:	6013      	str	r3, [r2, #0]
}
 800dddc:	bf00      	nop
 800ddde:	3710      	adds	r7, #16
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd80      	pop	{r7, pc}
 800dde4:	20001df8 	.word	0x20001df8
 800dde8:	20001920 	.word	0x20001920
 800ddec:	20001de0 	.word	0x20001de0
 800ddf0:	20001db0 	.word	0x20001db0
 800ddf4:	20001dac 	.word	0x20001dac
 800ddf8:	20001e14 	.word	0x20001e14

0800ddfc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b08a      	sub	sp, #40	; 0x28
 800de00:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800de02:	2300      	movs	r3, #0
 800de04:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800de06:	f000 fb07 	bl	800e418 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800de0a:	4b1c      	ldr	r3, [pc, #112]	; (800de7c <xTimerCreateTimerTask+0x80>)
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d021      	beq.n	800de56 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800de12:	2300      	movs	r3, #0
 800de14:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800de16:	2300      	movs	r3, #0
 800de18:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800de1a:	1d3a      	adds	r2, r7, #4
 800de1c:	f107 0108 	add.w	r1, r7, #8
 800de20:	f107 030c 	add.w	r3, r7, #12
 800de24:	4618      	mov	r0, r3
 800de26:	f7fd fccd 	bl	800b7c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800de2a:	6879      	ldr	r1, [r7, #4]
 800de2c:	68bb      	ldr	r3, [r7, #8]
 800de2e:	68fa      	ldr	r2, [r7, #12]
 800de30:	9202      	str	r2, [sp, #8]
 800de32:	9301      	str	r3, [sp, #4]
 800de34:	2302      	movs	r3, #2
 800de36:	9300      	str	r3, [sp, #0]
 800de38:	2300      	movs	r3, #0
 800de3a:	460a      	mov	r2, r1
 800de3c:	4910      	ldr	r1, [pc, #64]	; (800de80 <xTimerCreateTimerTask+0x84>)
 800de3e:	4811      	ldr	r0, [pc, #68]	; (800de84 <xTimerCreateTimerTask+0x88>)
 800de40:	f7fe fe8e 	bl	800cb60 <xTaskCreateStatic>
 800de44:	4603      	mov	r3, r0
 800de46:	4a10      	ldr	r2, [pc, #64]	; (800de88 <xTimerCreateTimerTask+0x8c>)
 800de48:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800de4a:	4b0f      	ldr	r3, [pc, #60]	; (800de88 <xTimerCreateTimerTask+0x8c>)
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d001      	beq.n	800de56 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800de52:	2301      	movs	r3, #1
 800de54:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800de56:	697b      	ldr	r3, [r7, #20]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d10a      	bne.n	800de72 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800de5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de60:	f383 8811 	msr	BASEPRI, r3
 800de64:	f3bf 8f6f 	isb	sy
 800de68:	f3bf 8f4f 	dsb	sy
 800de6c:	613b      	str	r3, [r7, #16]
}
 800de6e:	bf00      	nop
 800de70:	e7fe      	b.n	800de70 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800de72:	697b      	ldr	r3, [r7, #20]
}
 800de74:	4618      	mov	r0, r3
 800de76:	3718      	adds	r7, #24
 800de78:	46bd      	mov	sp, r7
 800de7a:	bd80      	pop	{r7, pc}
 800de7c:	20001e50 	.word	0x20001e50
 800de80:	0800f800 	.word	0x0800f800
 800de84:	0800dfc1 	.word	0x0800dfc1
 800de88:	20001e54 	.word	0x20001e54

0800de8c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800de8c:	b580      	push	{r7, lr}
 800de8e:	b08a      	sub	sp, #40	; 0x28
 800de90:	af00      	add	r7, sp, #0
 800de92:	60f8      	str	r0, [r7, #12]
 800de94:	60b9      	str	r1, [r7, #8]
 800de96:	607a      	str	r2, [r7, #4]
 800de98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800de9a:	2300      	movs	r3, #0
 800de9c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d10a      	bne.n	800deba <xTimerGenericCommand+0x2e>
	__asm volatile
 800dea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dea8:	f383 8811 	msr	BASEPRI, r3
 800deac:	f3bf 8f6f 	isb	sy
 800deb0:	f3bf 8f4f 	dsb	sy
 800deb4:	623b      	str	r3, [r7, #32]
}
 800deb6:	bf00      	nop
 800deb8:	e7fe      	b.n	800deb8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800deba:	4b1a      	ldr	r3, [pc, #104]	; (800df24 <xTimerGenericCommand+0x98>)
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d02a      	beq.n	800df18 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800dec2:	68bb      	ldr	r3, [r7, #8]
 800dec4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800dece:	68bb      	ldr	r3, [r7, #8]
 800ded0:	2b05      	cmp	r3, #5
 800ded2:	dc18      	bgt.n	800df06 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ded4:	f7ff fdb4 	bl	800da40 <xTaskGetSchedulerState>
 800ded8:	4603      	mov	r3, r0
 800deda:	2b02      	cmp	r3, #2
 800dedc:	d109      	bne.n	800def2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800dede:	4b11      	ldr	r3, [pc, #68]	; (800df24 <xTimerGenericCommand+0x98>)
 800dee0:	6818      	ldr	r0, [r3, #0]
 800dee2:	f107 0110 	add.w	r1, r7, #16
 800dee6:	2300      	movs	r3, #0
 800dee8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800deea:	f7fd ff97 	bl	800be1c <xQueueGenericSend>
 800deee:	6278      	str	r0, [r7, #36]	; 0x24
 800def0:	e012      	b.n	800df18 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800def2:	4b0c      	ldr	r3, [pc, #48]	; (800df24 <xTimerGenericCommand+0x98>)
 800def4:	6818      	ldr	r0, [r3, #0]
 800def6:	f107 0110 	add.w	r1, r7, #16
 800defa:	2300      	movs	r3, #0
 800defc:	2200      	movs	r2, #0
 800defe:	f7fd ff8d 	bl	800be1c <xQueueGenericSend>
 800df02:	6278      	str	r0, [r7, #36]	; 0x24
 800df04:	e008      	b.n	800df18 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800df06:	4b07      	ldr	r3, [pc, #28]	; (800df24 <xTimerGenericCommand+0x98>)
 800df08:	6818      	ldr	r0, [r3, #0]
 800df0a:	f107 0110 	add.w	r1, r7, #16
 800df0e:	2300      	movs	r3, #0
 800df10:	683a      	ldr	r2, [r7, #0]
 800df12:	f7fe f881 	bl	800c018 <xQueueGenericSendFromISR>
 800df16:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800df18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800df1a:	4618      	mov	r0, r3
 800df1c:	3728      	adds	r7, #40	; 0x28
 800df1e:	46bd      	mov	sp, r7
 800df20:	bd80      	pop	{r7, pc}
 800df22:	bf00      	nop
 800df24:	20001e50 	.word	0x20001e50

0800df28 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b088      	sub	sp, #32
 800df2c:	af02      	add	r7, sp, #8
 800df2e:	6078      	str	r0, [r7, #4]
 800df30:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df32:	4b22      	ldr	r3, [pc, #136]	; (800dfbc <prvProcessExpiredTimer+0x94>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	68db      	ldr	r3, [r3, #12]
 800df38:	68db      	ldr	r3, [r3, #12]
 800df3a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800df3c:	697b      	ldr	r3, [r7, #20]
 800df3e:	3304      	adds	r3, #4
 800df40:	4618      	mov	r0, r3
 800df42:	f7fd fce3 	bl	800b90c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800df46:	697b      	ldr	r3, [r7, #20]
 800df48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800df4c:	f003 0304 	and.w	r3, r3, #4
 800df50:	2b00      	cmp	r3, #0
 800df52:	d022      	beq.n	800df9a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800df54:	697b      	ldr	r3, [r7, #20]
 800df56:	699a      	ldr	r2, [r3, #24]
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	18d1      	adds	r1, r2, r3
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	683a      	ldr	r2, [r7, #0]
 800df60:	6978      	ldr	r0, [r7, #20]
 800df62:	f000 f8d1 	bl	800e108 <prvInsertTimerInActiveList>
 800df66:	4603      	mov	r3, r0
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d01f      	beq.n	800dfac <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800df6c:	2300      	movs	r3, #0
 800df6e:	9300      	str	r3, [sp, #0]
 800df70:	2300      	movs	r3, #0
 800df72:	687a      	ldr	r2, [r7, #4]
 800df74:	2100      	movs	r1, #0
 800df76:	6978      	ldr	r0, [r7, #20]
 800df78:	f7ff ff88 	bl	800de8c <xTimerGenericCommand>
 800df7c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800df7e:	693b      	ldr	r3, [r7, #16]
 800df80:	2b00      	cmp	r3, #0
 800df82:	d113      	bne.n	800dfac <prvProcessExpiredTimer+0x84>
	__asm volatile
 800df84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df88:	f383 8811 	msr	BASEPRI, r3
 800df8c:	f3bf 8f6f 	isb	sy
 800df90:	f3bf 8f4f 	dsb	sy
 800df94:	60fb      	str	r3, [r7, #12]
}
 800df96:	bf00      	nop
 800df98:	e7fe      	b.n	800df98 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800df9a:	697b      	ldr	r3, [r7, #20]
 800df9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dfa0:	f023 0301 	bic.w	r3, r3, #1
 800dfa4:	b2da      	uxtb	r2, r3
 800dfa6:	697b      	ldr	r3, [r7, #20]
 800dfa8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dfac:	697b      	ldr	r3, [r7, #20]
 800dfae:	6a1b      	ldr	r3, [r3, #32]
 800dfb0:	6978      	ldr	r0, [r7, #20]
 800dfb2:	4798      	blx	r3
}
 800dfb4:	bf00      	nop
 800dfb6:	3718      	adds	r7, #24
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	bd80      	pop	{r7, pc}
 800dfbc:	20001e48 	.word	0x20001e48

0800dfc0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b084      	sub	sp, #16
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dfc8:	f107 0308 	add.w	r3, r7, #8
 800dfcc:	4618      	mov	r0, r3
 800dfce:	f000 f857 	bl	800e080 <prvGetNextExpireTime>
 800dfd2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800dfd4:	68bb      	ldr	r3, [r7, #8]
 800dfd6:	4619      	mov	r1, r3
 800dfd8:	68f8      	ldr	r0, [r7, #12]
 800dfda:	f000 f803 	bl	800dfe4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800dfde:	f000 f8d5 	bl	800e18c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dfe2:	e7f1      	b.n	800dfc8 <prvTimerTask+0x8>

0800dfe4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	b084      	sub	sp, #16
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
 800dfec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800dfee:	f7ff f919 	bl	800d224 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dff2:	f107 0308 	add.w	r3, r7, #8
 800dff6:	4618      	mov	r0, r3
 800dff8:	f000 f866 	bl	800e0c8 <prvSampleTimeNow>
 800dffc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800dffe:	68bb      	ldr	r3, [r7, #8]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d130      	bne.n	800e066 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e004:	683b      	ldr	r3, [r7, #0]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d10a      	bne.n	800e020 <prvProcessTimerOrBlockTask+0x3c>
 800e00a:	687a      	ldr	r2, [r7, #4]
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	429a      	cmp	r2, r3
 800e010:	d806      	bhi.n	800e020 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e012:	f7ff f915 	bl	800d240 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e016:	68f9      	ldr	r1, [r7, #12]
 800e018:	6878      	ldr	r0, [r7, #4]
 800e01a:	f7ff ff85 	bl	800df28 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e01e:	e024      	b.n	800e06a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e020:	683b      	ldr	r3, [r7, #0]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d008      	beq.n	800e038 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e026:	4b13      	ldr	r3, [pc, #76]	; (800e074 <prvProcessTimerOrBlockTask+0x90>)
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d101      	bne.n	800e034 <prvProcessTimerOrBlockTask+0x50>
 800e030:	2301      	movs	r3, #1
 800e032:	e000      	b.n	800e036 <prvProcessTimerOrBlockTask+0x52>
 800e034:	2300      	movs	r3, #0
 800e036:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e038:	4b0f      	ldr	r3, [pc, #60]	; (800e078 <prvProcessTimerOrBlockTask+0x94>)
 800e03a:	6818      	ldr	r0, [r3, #0]
 800e03c:	687a      	ldr	r2, [r7, #4]
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	1ad3      	subs	r3, r2, r3
 800e042:	683a      	ldr	r2, [r7, #0]
 800e044:	4619      	mov	r1, r3
 800e046:	f7fe fd57 	bl	800caf8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e04a:	f7ff f8f9 	bl	800d240 <xTaskResumeAll>
 800e04e:	4603      	mov	r3, r0
 800e050:	2b00      	cmp	r3, #0
 800e052:	d10a      	bne.n	800e06a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e054:	4b09      	ldr	r3, [pc, #36]	; (800e07c <prvProcessTimerOrBlockTask+0x98>)
 800e056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e05a:	601a      	str	r2, [r3, #0]
 800e05c:	f3bf 8f4f 	dsb	sy
 800e060:	f3bf 8f6f 	isb	sy
}
 800e064:	e001      	b.n	800e06a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e066:	f7ff f8eb 	bl	800d240 <xTaskResumeAll>
}
 800e06a:	bf00      	nop
 800e06c:	3710      	adds	r7, #16
 800e06e:	46bd      	mov	sp, r7
 800e070:	bd80      	pop	{r7, pc}
 800e072:	bf00      	nop
 800e074:	20001e4c 	.word	0x20001e4c
 800e078:	20001e50 	.word	0x20001e50
 800e07c:	e000ed04 	.word	0xe000ed04

0800e080 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e080:	b480      	push	{r7}
 800e082:	b085      	sub	sp, #20
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e088:	4b0e      	ldr	r3, [pc, #56]	; (800e0c4 <prvGetNextExpireTime+0x44>)
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d101      	bne.n	800e096 <prvGetNextExpireTime+0x16>
 800e092:	2201      	movs	r2, #1
 800e094:	e000      	b.n	800e098 <prvGetNextExpireTime+0x18>
 800e096:	2200      	movs	r2, #0
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d105      	bne.n	800e0b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e0a4:	4b07      	ldr	r3, [pc, #28]	; (800e0c4 <prvGetNextExpireTime+0x44>)
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	68db      	ldr	r3, [r3, #12]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	60fb      	str	r3, [r7, #12]
 800e0ae:	e001      	b.n	800e0b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e0b4:	68fb      	ldr	r3, [r7, #12]
}
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	3714      	adds	r7, #20
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c0:	4770      	bx	lr
 800e0c2:	bf00      	nop
 800e0c4:	20001e48 	.word	0x20001e48

0800e0c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b084      	sub	sp, #16
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e0d0:	f7ff f954 	bl	800d37c <xTaskGetTickCount>
 800e0d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e0d6:	4b0b      	ldr	r3, [pc, #44]	; (800e104 <prvSampleTimeNow+0x3c>)
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	68fa      	ldr	r2, [r7, #12]
 800e0dc:	429a      	cmp	r2, r3
 800e0de:	d205      	bcs.n	800e0ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e0e0:	f000 f936 	bl	800e350 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	2201      	movs	r2, #1
 800e0e8:	601a      	str	r2, [r3, #0]
 800e0ea:	e002      	b.n	800e0f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e0f2:	4a04      	ldr	r2, [pc, #16]	; (800e104 <prvSampleTimeNow+0x3c>)
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e0f8:	68fb      	ldr	r3, [r7, #12]
}
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	3710      	adds	r7, #16
 800e0fe:	46bd      	mov	sp, r7
 800e100:	bd80      	pop	{r7, pc}
 800e102:	bf00      	nop
 800e104:	20001e58 	.word	0x20001e58

0800e108 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b086      	sub	sp, #24
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	60f8      	str	r0, [r7, #12]
 800e110:	60b9      	str	r1, [r7, #8]
 800e112:	607a      	str	r2, [r7, #4]
 800e114:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e116:	2300      	movs	r3, #0
 800e118:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	68ba      	ldr	r2, [r7, #8]
 800e11e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	68fa      	ldr	r2, [r7, #12]
 800e124:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e126:	68ba      	ldr	r2, [r7, #8]
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	429a      	cmp	r2, r3
 800e12c:	d812      	bhi.n	800e154 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e12e:	687a      	ldr	r2, [r7, #4]
 800e130:	683b      	ldr	r3, [r7, #0]
 800e132:	1ad2      	subs	r2, r2, r3
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	699b      	ldr	r3, [r3, #24]
 800e138:	429a      	cmp	r2, r3
 800e13a:	d302      	bcc.n	800e142 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e13c:	2301      	movs	r3, #1
 800e13e:	617b      	str	r3, [r7, #20]
 800e140:	e01b      	b.n	800e17a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e142:	4b10      	ldr	r3, [pc, #64]	; (800e184 <prvInsertTimerInActiveList+0x7c>)
 800e144:	681a      	ldr	r2, [r3, #0]
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	3304      	adds	r3, #4
 800e14a:	4619      	mov	r1, r3
 800e14c:	4610      	mov	r0, r2
 800e14e:	f7fd fba4 	bl	800b89a <vListInsert>
 800e152:	e012      	b.n	800e17a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e154:	687a      	ldr	r2, [r7, #4]
 800e156:	683b      	ldr	r3, [r7, #0]
 800e158:	429a      	cmp	r2, r3
 800e15a:	d206      	bcs.n	800e16a <prvInsertTimerInActiveList+0x62>
 800e15c:	68ba      	ldr	r2, [r7, #8]
 800e15e:	683b      	ldr	r3, [r7, #0]
 800e160:	429a      	cmp	r2, r3
 800e162:	d302      	bcc.n	800e16a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e164:	2301      	movs	r3, #1
 800e166:	617b      	str	r3, [r7, #20]
 800e168:	e007      	b.n	800e17a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e16a:	4b07      	ldr	r3, [pc, #28]	; (800e188 <prvInsertTimerInActiveList+0x80>)
 800e16c:	681a      	ldr	r2, [r3, #0]
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	3304      	adds	r3, #4
 800e172:	4619      	mov	r1, r3
 800e174:	4610      	mov	r0, r2
 800e176:	f7fd fb90 	bl	800b89a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e17a:	697b      	ldr	r3, [r7, #20]
}
 800e17c:	4618      	mov	r0, r3
 800e17e:	3718      	adds	r7, #24
 800e180:	46bd      	mov	sp, r7
 800e182:	bd80      	pop	{r7, pc}
 800e184:	20001e4c 	.word	0x20001e4c
 800e188:	20001e48 	.word	0x20001e48

0800e18c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b08e      	sub	sp, #56	; 0x38
 800e190:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e192:	e0ca      	b.n	800e32a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	2b00      	cmp	r3, #0
 800e198:	da18      	bge.n	800e1cc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e19a:	1d3b      	adds	r3, r7, #4
 800e19c:	3304      	adds	r3, #4
 800e19e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e1a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d10a      	bne.n	800e1bc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e1a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1aa:	f383 8811 	msr	BASEPRI, r3
 800e1ae:	f3bf 8f6f 	isb	sy
 800e1b2:	f3bf 8f4f 	dsb	sy
 800e1b6:	61fb      	str	r3, [r7, #28]
}
 800e1b8:	bf00      	nop
 800e1ba:	e7fe      	b.n	800e1ba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e1c2:	6850      	ldr	r0, [r2, #4]
 800e1c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e1c6:	6892      	ldr	r2, [r2, #8]
 800e1c8:	4611      	mov	r1, r2
 800e1ca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	f2c0 80aa 	blt.w	800e328 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1da:	695b      	ldr	r3, [r3, #20]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d004      	beq.n	800e1ea <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1e2:	3304      	adds	r3, #4
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	f7fd fb91 	bl	800b90c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e1ea:	463b      	mov	r3, r7
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	f7ff ff6b 	bl	800e0c8 <prvSampleTimeNow>
 800e1f2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	2b09      	cmp	r3, #9
 800e1f8:	f200 8097 	bhi.w	800e32a <prvProcessReceivedCommands+0x19e>
 800e1fc:	a201      	add	r2, pc, #4	; (adr r2, 800e204 <prvProcessReceivedCommands+0x78>)
 800e1fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e202:	bf00      	nop
 800e204:	0800e22d 	.word	0x0800e22d
 800e208:	0800e22d 	.word	0x0800e22d
 800e20c:	0800e22d 	.word	0x0800e22d
 800e210:	0800e2a1 	.word	0x0800e2a1
 800e214:	0800e2b5 	.word	0x0800e2b5
 800e218:	0800e2ff 	.word	0x0800e2ff
 800e21c:	0800e22d 	.word	0x0800e22d
 800e220:	0800e22d 	.word	0x0800e22d
 800e224:	0800e2a1 	.word	0x0800e2a1
 800e228:	0800e2b5 	.word	0x0800e2b5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e22e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e232:	f043 0301 	orr.w	r3, r3, #1
 800e236:	b2da      	uxtb	r2, r3
 800e238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e23a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e23e:	68ba      	ldr	r2, [r7, #8]
 800e240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e242:	699b      	ldr	r3, [r3, #24]
 800e244:	18d1      	adds	r1, r2, r3
 800e246:	68bb      	ldr	r3, [r7, #8]
 800e248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e24a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e24c:	f7ff ff5c 	bl	800e108 <prvInsertTimerInActiveList>
 800e250:	4603      	mov	r3, r0
 800e252:	2b00      	cmp	r3, #0
 800e254:	d069      	beq.n	800e32a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e258:	6a1b      	ldr	r3, [r3, #32]
 800e25a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e25c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e25e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e260:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e264:	f003 0304 	and.w	r3, r3, #4
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d05e      	beq.n	800e32a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e26c:	68ba      	ldr	r2, [r7, #8]
 800e26e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e270:	699b      	ldr	r3, [r3, #24]
 800e272:	441a      	add	r2, r3
 800e274:	2300      	movs	r3, #0
 800e276:	9300      	str	r3, [sp, #0]
 800e278:	2300      	movs	r3, #0
 800e27a:	2100      	movs	r1, #0
 800e27c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e27e:	f7ff fe05 	bl	800de8c <xTimerGenericCommand>
 800e282:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e284:	6a3b      	ldr	r3, [r7, #32]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d14f      	bne.n	800e32a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e28e:	f383 8811 	msr	BASEPRI, r3
 800e292:	f3bf 8f6f 	isb	sy
 800e296:	f3bf 8f4f 	dsb	sy
 800e29a:	61bb      	str	r3, [r7, #24]
}
 800e29c:	bf00      	nop
 800e29e:	e7fe      	b.n	800e29e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e2a6:	f023 0301 	bic.w	r3, r3, #1
 800e2aa:	b2da      	uxtb	r2, r3
 800e2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e2b2:	e03a      	b.n	800e32a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e2ba:	f043 0301 	orr.w	r3, r3, #1
 800e2be:	b2da      	uxtb	r2, r3
 800e2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e2c6:	68ba      	ldr	r2, [r7, #8]
 800e2c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ce:	699b      	ldr	r3, [r3, #24]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d10a      	bne.n	800e2ea <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2d8:	f383 8811 	msr	BASEPRI, r3
 800e2dc:	f3bf 8f6f 	isb	sy
 800e2e0:	f3bf 8f4f 	dsb	sy
 800e2e4:	617b      	str	r3, [r7, #20]
}
 800e2e6:	bf00      	nop
 800e2e8:	e7fe      	b.n	800e2e8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ec:	699a      	ldr	r2, [r3, #24]
 800e2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2f0:	18d1      	adds	r1, r2, r3
 800e2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e2f8:	f7ff ff06 	bl	800e108 <prvInsertTimerInActiveList>
					break;
 800e2fc:	e015      	b.n	800e32a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e2fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e300:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e304:	f003 0302 	and.w	r3, r3, #2
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d103      	bne.n	800e314 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e30c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e30e:	f000 fbdf 	bl	800ead0 <vPortFree>
 800e312:	e00a      	b.n	800e32a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e316:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e31a:	f023 0301 	bic.w	r3, r3, #1
 800e31e:	b2da      	uxtb	r2, r3
 800e320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e322:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e326:	e000      	b.n	800e32a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e328:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e32a:	4b08      	ldr	r3, [pc, #32]	; (800e34c <prvProcessReceivedCommands+0x1c0>)
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	1d39      	adds	r1, r7, #4
 800e330:	2200      	movs	r2, #0
 800e332:	4618      	mov	r0, r3
 800e334:	f7fd ff98 	bl	800c268 <xQueueReceive>
 800e338:	4603      	mov	r3, r0
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	f47f af2a 	bne.w	800e194 <prvProcessReceivedCommands+0x8>
	}
}
 800e340:	bf00      	nop
 800e342:	bf00      	nop
 800e344:	3730      	adds	r7, #48	; 0x30
 800e346:	46bd      	mov	sp, r7
 800e348:	bd80      	pop	{r7, pc}
 800e34a:	bf00      	nop
 800e34c:	20001e50 	.word	0x20001e50

0800e350 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e350:	b580      	push	{r7, lr}
 800e352:	b088      	sub	sp, #32
 800e354:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e356:	e048      	b.n	800e3ea <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e358:	4b2d      	ldr	r3, [pc, #180]	; (800e410 <prvSwitchTimerLists+0xc0>)
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	68db      	ldr	r3, [r3, #12]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e362:	4b2b      	ldr	r3, [pc, #172]	; (800e410 <prvSwitchTimerLists+0xc0>)
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	68db      	ldr	r3, [r3, #12]
 800e368:	68db      	ldr	r3, [r3, #12]
 800e36a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	3304      	adds	r3, #4
 800e370:	4618      	mov	r0, r3
 800e372:	f7fd facb 	bl	800b90c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	6a1b      	ldr	r3, [r3, #32]
 800e37a:	68f8      	ldr	r0, [r7, #12]
 800e37c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e384:	f003 0304 	and.w	r3, r3, #4
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d02e      	beq.n	800e3ea <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	699b      	ldr	r3, [r3, #24]
 800e390:	693a      	ldr	r2, [r7, #16]
 800e392:	4413      	add	r3, r2
 800e394:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e396:	68ba      	ldr	r2, [r7, #8]
 800e398:	693b      	ldr	r3, [r7, #16]
 800e39a:	429a      	cmp	r2, r3
 800e39c:	d90e      	bls.n	800e3bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	68ba      	ldr	r2, [r7, #8]
 800e3a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	68fa      	ldr	r2, [r7, #12]
 800e3a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e3aa:	4b19      	ldr	r3, [pc, #100]	; (800e410 <prvSwitchTimerLists+0xc0>)
 800e3ac:	681a      	ldr	r2, [r3, #0]
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	3304      	adds	r3, #4
 800e3b2:	4619      	mov	r1, r3
 800e3b4:	4610      	mov	r0, r2
 800e3b6:	f7fd fa70 	bl	800b89a <vListInsert>
 800e3ba:	e016      	b.n	800e3ea <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e3bc:	2300      	movs	r3, #0
 800e3be:	9300      	str	r3, [sp, #0]
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	693a      	ldr	r2, [r7, #16]
 800e3c4:	2100      	movs	r1, #0
 800e3c6:	68f8      	ldr	r0, [r7, #12]
 800e3c8:	f7ff fd60 	bl	800de8c <xTimerGenericCommand>
 800e3cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d10a      	bne.n	800e3ea <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e3d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3d8:	f383 8811 	msr	BASEPRI, r3
 800e3dc:	f3bf 8f6f 	isb	sy
 800e3e0:	f3bf 8f4f 	dsb	sy
 800e3e4:	603b      	str	r3, [r7, #0]
}
 800e3e6:	bf00      	nop
 800e3e8:	e7fe      	b.n	800e3e8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e3ea:	4b09      	ldr	r3, [pc, #36]	; (800e410 <prvSwitchTimerLists+0xc0>)
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d1b1      	bne.n	800e358 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e3f4:	4b06      	ldr	r3, [pc, #24]	; (800e410 <prvSwitchTimerLists+0xc0>)
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e3fa:	4b06      	ldr	r3, [pc, #24]	; (800e414 <prvSwitchTimerLists+0xc4>)
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	4a04      	ldr	r2, [pc, #16]	; (800e410 <prvSwitchTimerLists+0xc0>)
 800e400:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e402:	4a04      	ldr	r2, [pc, #16]	; (800e414 <prvSwitchTimerLists+0xc4>)
 800e404:	697b      	ldr	r3, [r7, #20]
 800e406:	6013      	str	r3, [r2, #0]
}
 800e408:	bf00      	nop
 800e40a:	3718      	adds	r7, #24
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bd80      	pop	{r7, pc}
 800e410:	20001e48 	.word	0x20001e48
 800e414:	20001e4c 	.word	0x20001e4c

0800e418 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b082      	sub	sp, #8
 800e41c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e41e:	f000 f969 	bl	800e6f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e422:	4b15      	ldr	r3, [pc, #84]	; (800e478 <prvCheckForValidListAndQueue+0x60>)
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d120      	bne.n	800e46c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e42a:	4814      	ldr	r0, [pc, #80]	; (800e47c <prvCheckForValidListAndQueue+0x64>)
 800e42c:	f7fd f9e4 	bl	800b7f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e430:	4813      	ldr	r0, [pc, #76]	; (800e480 <prvCheckForValidListAndQueue+0x68>)
 800e432:	f7fd f9e1 	bl	800b7f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e436:	4b13      	ldr	r3, [pc, #76]	; (800e484 <prvCheckForValidListAndQueue+0x6c>)
 800e438:	4a10      	ldr	r2, [pc, #64]	; (800e47c <prvCheckForValidListAndQueue+0x64>)
 800e43a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e43c:	4b12      	ldr	r3, [pc, #72]	; (800e488 <prvCheckForValidListAndQueue+0x70>)
 800e43e:	4a10      	ldr	r2, [pc, #64]	; (800e480 <prvCheckForValidListAndQueue+0x68>)
 800e440:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e442:	2300      	movs	r3, #0
 800e444:	9300      	str	r3, [sp, #0]
 800e446:	4b11      	ldr	r3, [pc, #68]	; (800e48c <prvCheckForValidListAndQueue+0x74>)
 800e448:	4a11      	ldr	r2, [pc, #68]	; (800e490 <prvCheckForValidListAndQueue+0x78>)
 800e44a:	2110      	movs	r1, #16
 800e44c:	200a      	movs	r0, #10
 800e44e:	f7fd faef 	bl	800ba30 <xQueueGenericCreateStatic>
 800e452:	4603      	mov	r3, r0
 800e454:	4a08      	ldr	r2, [pc, #32]	; (800e478 <prvCheckForValidListAndQueue+0x60>)
 800e456:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e458:	4b07      	ldr	r3, [pc, #28]	; (800e478 <prvCheckForValidListAndQueue+0x60>)
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d005      	beq.n	800e46c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e460:	4b05      	ldr	r3, [pc, #20]	; (800e478 <prvCheckForValidListAndQueue+0x60>)
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	490b      	ldr	r1, [pc, #44]	; (800e494 <prvCheckForValidListAndQueue+0x7c>)
 800e466:	4618      	mov	r0, r3
 800e468:	f7fe faf2 	bl	800ca50 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e46c:	f000 f972 	bl	800e754 <vPortExitCritical>
}
 800e470:	bf00      	nop
 800e472:	46bd      	mov	sp, r7
 800e474:	bd80      	pop	{r7, pc}
 800e476:	bf00      	nop
 800e478:	20001e50 	.word	0x20001e50
 800e47c:	20001e20 	.word	0x20001e20
 800e480:	20001e34 	.word	0x20001e34
 800e484:	20001e48 	.word	0x20001e48
 800e488:	20001e4c 	.word	0x20001e4c
 800e48c:	20001efc 	.word	0x20001efc
 800e490:	20001e5c 	.word	0x20001e5c
 800e494:	0800f808 	.word	0x0800f808

0800e498 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e498:	b480      	push	{r7}
 800e49a:	b085      	sub	sp, #20
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	60f8      	str	r0, [r7, #12]
 800e4a0:	60b9      	str	r1, [r7, #8]
 800e4a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	3b04      	subs	r3, #4
 800e4a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e4b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	3b04      	subs	r3, #4
 800e4b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e4b8:	68bb      	ldr	r3, [r7, #8]
 800e4ba:	f023 0201 	bic.w	r2, r3, #1
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	3b04      	subs	r3, #4
 800e4c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e4c8:	4a0c      	ldr	r2, [pc, #48]	; (800e4fc <pxPortInitialiseStack+0x64>)
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	3b14      	subs	r3, #20
 800e4d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e4d4:	687a      	ldr	r2, [r7, #4]
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	3b04      	subs	r3, #4
 800e4de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	f06f 0202 	mvn.w	r2, #2
 800e4e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	3b20      	subs	r3, #32
 800e4ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e4ee:	68fb      	ldr	r3, [r7, #12]
}
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	3714      	adds	r7, #20
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fa:	4770      	bx	lr
 800e4fc:	0800e501 	.word	0x0800e501

0800e500 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e500:	b480      	push	{r7}
 800e502:	b085      	sub	sp, #20
 800e504:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e506:	2300      	movs	r3, #0
 800e508:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e50a:	4b12      	ldr	r3, [pc, #72]	; (800e554 <prvTaskExitError+0x54>)
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e512:	d00a      	beq.n	800e52a <prvTaskExitError+0x2a>
	__asm volatile
 800e514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e518:	f383 8811 	msr	BASEPRI, r3
 800e51c:	f3bf 8f6f 	isb	sy
 800e520:	f3bf 8f4f 	dsb	sy
 800e524:	60fb      	str	r3, [r7, #12]
}
 800e526:	bf00      	nop
 800e528:	e7fe      	b.n	800e528 <prvTaskExitError+0x28>
	__asm volatile
 800e52a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e52e:	f383 8811 	msr	BASEPRI, r3
 800e532:	f3bf 8f6f 	isb	sy
 800e536:	f3bf 8f4f 	dsb	sy
 800e53a:	60bb      	str	r3, [r7, #8]
}
 800e53c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e53e:	bf00      	nop
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d0fc      	beq.n	800e540 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e546:	bf00      	nop
 800e548:	bf00      	nop
 800e54a:	3714      	adds	r7, #20
 800e54c:	46bd      	mov	sp, r7
 800e54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e552:	4770      	bx	lr
 800e554:	20000010 	.word	0x20000010
	...

0800e560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e560:	4b07      	ldr	r3, [pc, #28]	; (800e580 <pxCurrentTCBConst2>)
 800e562:	6819      	ldr	r1, [r3, #0]
 800e564:	6808      	ldr	r0, [r1, #0]
 800e566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e56a:	f380 8809 	msr	PSP, r0
 800e56e:	f3bf 8f6f 	isb	sy
 800e572:	f04f 0000 	mov.w	r0, #0
 800e576:	f380 8811 	msr	BASEPRI, r0
 800e57a:	4770      	bx	lr
 800e57c:	f3af 8000 	nop.w

0800e580 <pxCurrentTCBConst2>:
 800e580:	20001920 	.word	0x20001920
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e584:	bf00      	nop
 800e586:	bf00      	nop

0800e588 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e588:	4808      	ldr	r0, [pc, #32]	; (800e5ac <prvPortStartFirstTask+0x24>)
 800e58a:	6800      	ldr	r0, [r0, #0]
 800e58c:	6800      	ldr	r0, [r0, #0]
 800e58e:	f380 8808 	msr	MSP, r0
 800e592:	f04f 0000 	mov.w	r0, #0
 800e596:	f380 8814 	msr	CONTROL, r0
 800e59a:	b662      	cpsie	i
 800e59c:	b661      	cpsie	f
 800e59e:	f3bf 8f4f 	dsb	sy
 800e5a2:	f3bf 8f6f 	isb	sy
 800e5a6:	df00      	svc	0
 800e5a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e5aa:	bf00      	nop
 800e5ac:	e000ed08 	.word	0xe000ed08

0800e5b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b086      	sub	sp, #24
 800e5b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e5b6:	4b46      	ldr	r3, [pc, #280]	; (800e6d0 <xPortStartScheduler+0x120>)
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	4a46      	ldr	r2, [pc, #280]	; (800e6d4 <xPortStartScheduler+0x124>)
 800e5bc:	4293      	cmp	r3, r2
 800e5be:	d10a      	bne.n	800e5d6 <xPortStartScheduler+0x26>
	__asm volatile
 800e5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5c4:	f383 8811 	msr	BASEPRI, r3
 800e5c8:	f3bf 8f6f 	isb	sy
 800e5cc:	f3bf 8f4f 	dsb	sy
 800e5d0:	613b      	str	r3, [r7, #16]
}
 800e5d2:	bf00      	nop
 800e5d4:	e7fe      	b.n	800e5d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e5d6:	4b3e      	ldr	r3, [pc, #248]	; (800e6d0 <xPortStartScheduler+0x120>)
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	4a3f      	ldr	r2, [pc, #252]	; (800e6d8 <xPortStartScheduler+0x128>)
 800e5dc:	4293      	cmp	r3, r2
 800e5de:	d10a      	bne.n	800e5f6 <xPortStartScheduler+0x46>
	__asm volatile
 800e5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5e4:	f383 8811 	msr	BASEPRI, r3
 800e5e8:	f3bf 8f6f 	isb	sy
 800e5ec:	f3bf 8f4f 	dsb	sy
 800e5f0:	60fb      	str	r3, [r7, #12]
}
 800e5f2:	bf00      	nop
 800e5f4:	e7fe      	b.n	800e5f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e5f6:	4b39      	ldr	r3, [pc, #228]	; (800e6dc <xPortStartScheduler+0x12c>)
 800e5f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e5fa:	697b      	ldr	r3, [r7, #20]
 800e5fc:	781b      	ldrb	r3, [r3, #0]
 800e5fe:	b2db      	uxtb	r3, r3
 800e600:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e602:	697b      	ldr	r3, [r7, #20]
 800e604:	22ff      	movs	r2, #255	; 0xff
 800e606:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e608:	697b      	ldr	r3, [r7, #20]
 800e60a:	781b      	ldrb	r3, [r3, #0]
 800e60c:	b2db      	uxtb	r3, r3
 800e60e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e610:	78fb      	ldrb	r3, [r7, #3]
 800e612:	b2db      	uxtb	r3, r3
 800e614:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e618:	b2da      	uxtb	r2, r3
 800e61a:	4b31      	ldr	r3, [pc, #196]	; (800e6e0 <xPortStartScheduler+0x130>)
 800e61c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e61e:	4b31      	ldr	r3, [pc, #196]	; (800e6e4 <xPortStartScheduler+0x134>)
 800e620:	2207      	movs	r2, #7
 800e622:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e624:	e009      	b.n	800e63a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e626:	4b2f      	ldr	r3, [pc, #188]	; (800e6e4 <xPortStartScheduler+0x134>)
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	3b01      	subs	r3, #1
 800e62c:	4a2d      	ldr	r2, [pc, #180]	; (800e6e4 <xPortStartScheduler+0x134>)
 800e62e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e630:	78fb      	ldrb	r3, [r7, #3]
 800e632:	b2db      	uxtb	r3, r3
 800e634:	005b      	lsls	r3, r3, #1
 800e636:	b2db      	uxtb	r3, r3
 800e638:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e63a:	78fb      	ldrb	r3, [r7, #3]
 800e63c:	b2db      	uxtb	r3, r3
 800e63e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e642:	2b80      	cmp	r3, #128	; 0x80
 800e644:	d0ef      	beq.n	800e626 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e646:	4b27      	ldr	r3, [pc, #156]	; (800e6e4 <xPortStartScheduler+0x134>)
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	f1c3 0307 	rsb	r3, r3, #7
 800e64e:	2b04      	cmp	r3, #4
 800e650:	d00a      	beq.n	800e668 <xPortStartScheduler+0xb8>
	__asm volatile
 800e652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e656:	f383 8811 	msr	BASEPRI, r3
 800e65a:	f3bf 8f6f 	isb	sy
 800e65e:	f3bf 8f4f 	dsb	sy
 800e662:	60bb      	str	r3, [r7, #8]
}
 800e664:	bf00      	nop
 800e666:	e7fe      	b.n	800e666 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e668:	4b1e      	ldr	r3, [pc, #120]	; (800e6e4 <xPortStartScheduler+0x134>)
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	021b      	lsls	r3, r3, #8
 800e66e:	4a1d      	ldr	r2, [pc, #116]	; (800e6e4 <xPortStartScheduler+0x134>)
 800e670:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e672:	4b1c      	ldr	r3, [pc, #112]	; (800e6e4 <xPortStartScheduler+0x134>)
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e67a:	4a1a      	ldr	r2, [pc, #104]	; (800e6e4 <xPortStartScheduler+0x134>)
 800e67c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	b2da      	uxtb	r2, r3
 800e682:	697b      	ldr	r3, [r7, #20]
 800e684:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e686:	4b18      	ldr	r3, [pc, #96]	; (800e6e8 <xPortStartScheduler+0x138>)
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	4a17      	ldr	r2, [pc, #92]	; (800e6e8 <xPortStartScheduler+0x138>)
 800e68c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e690:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e692:	4b15      	ldr	r3, [pc, #84]	; (800e6e8 <xPortStartScheduler+0x138>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	4a14      	ldr	r2, [pc, #80]	; (800e6e8 <xPortStartScheduler+0x138>)
 800e698:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e69c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e69e:	f000 f8dd 	bl	800e85c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e6a2:	4b12      	ldr	r3, [pc, #72]	; (800e6ec <xPortStartScheduler+0x13c>)
 800e6a4:	2200      	movs	r2, #0
 800e6a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e6a8:	f000 f8fc 	bl	800e8a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e6ac:	4b10      	ldr	r3, [pc, #64]	; (800e6f0 <xPortStartScheduler+0x140>)
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	4a0f      	ldr	r2, [pc, #60]	; (800e6f0 <xPortStartScheduler+0x140>)
 800e6b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e6b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e6b8:	f7ff ff66 	bl	800e588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e6bc:	f7fe ff3a 	bl	800d534 <vTaskSwitchContext>
	prvTaskExitError();
 800e6c0:	f7ff ff1e 	bl	800e500 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e6c4:	2300      	movs	r3, #0
}
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	3718      	adds	r7, #24
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	bd80      	pop	{r7, pc}
 800e6ce:	bf00      	nop
 800e6d0:	e000ed00 	.word	0xe000ed00
 800e6d4:	410fc271 	.word	0x410fc271
 800e6d8:	410fc270 	.word	0x410fc270
 800e6dc:	e000e400 	.word	0xe000e400
 800e6e0:	20001f4c 	.word	0x20001f4c
 800e6e4:	20001f50 	.word	0x20001f50
 800e6e8:	e000ed20 	.word	0xe000ed20
 800e6ec:	20000010 	.word	0x20000010
 800e6f0:	e000ef34 	.word	0xe000ef34

0800e6f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e6f4:	b480      	push	{r7}
 800e6f6:	b083      	sub	sp, #12
 800e6f8:	af00      	add	r7, sp, #0
	__asm volatile
 800e6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6fe:	f383 8811 	msr	BASEPRI, r3
 800e702:	f3bf 8f6f 	isb	sy
 800e706:	f3bf 8f4f 	dsb	sy
 800e70a:	607b      	str	r3, [r7, #4]
}
 800e70c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e70e:	4b0f      	ldr	r3, [pc, #60]	; (800e74c <vPortEnterCritical+0x58>)
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	3301      	adds	r3, #1
 800e714:	4a0d      	ldr	r2, [pc, #52]	; (800e74c <vPortEnterCritical+0x58>)
 800e716:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e718:	4b0c      	ldr	r3, [pc, #48]	; (800e74c <vPortEnterCritical+0x58>)
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	2b01      	cmp	r3, #1
 800e71e:	d10f      	bne.n	800e740 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e720:	4b0b      	ldr	r3, [pc, #44]	; (800e750 <vPortEnterCritical+0x5c>)
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	b2db      	uxtb	r3, r3
 800e726:	2b00      	cmp	r3, #0
 800e728:	d00a      	beq.n	800e740 <vPortEnterCritical+0x4c>
	__asm volatile
 800e72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e72e:	f383 8811 	msr	BASEPRI, r3
 800e732:	f3bf 8f6f 	isb	sy
 800e736:	f3bf 8f4f 	dsb	sy
 800e73a:	603b      	str	r3, [r7, #0]
}
 800e73c:	bf00      	nop
 800e73e:	e7fe      	b.n	800e73e <vPortEnterCritical+0x4a>
	}
}
 800e740:	bf00      	nop
 800e742:	370c      	adds	r7, #12
 800e744:	46bd      	mov	sp, r7
 800e746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74a:	4770      	bx	lr
 800e74c:	20000010 	.word	0x20000010
 800e750:	e000ed04 	.word	0xe000ed04

0800e754 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e754:	b480      	push	{r7}
 800e756:	b083      	sub	sp, #12
 800e758:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e75a:	4b12      	ldr	r3, [pc, #72]	; (800e7a4 <vPortExitCritical+0x50>)
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d10a      	bne.n	800e778 <vPortExitCritical+0x24>
	__asm volatile
 800e762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e766:	f383 8811 	msr	BASEPRI, r3
 800e76a:	f3bf 8f6f 	isb	sy
 800e76e:	f3bf 8f4f 	dsb	sy
 800e772:	607b      	str	r3, [r7, #4]
}
 800e774:	bf00      	nop
 800e776:	e7fe      	b.n	800e776 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e778:	4b0a      	ldr	r3, [pc, #40]	; (800e7a4 <vPortExitCritical+0x50>)
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	3b01      	subs	r3, #1
 800e77e:	4a09      	ldr	r2, [pc, #36]	; (800e7a4 <vPortExitCritical+0x50>)
 800e780:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e782:	4b08      	ldr	r3, [pc, #32]	; (800e7a4 <vPortExitCritical+0x50>)
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d105      	bne.n	800e796 <vPortExitCritical+0x42>
 800e78a:	2300      	movs	r3, #0
 800e78c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e78e:	683b      	ldr	r3, [r7, #0]
 800e790:	f383 8811 	msr	BASEPRI, r3
}
 800e794:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e796:	bf00      	nop
 800e798:	370c      	adds	r7, #12
 800e79a:	46bd      	mov	sp, r7
 800e79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a0:	4770      	bx	lr
 800e7a2:	bf00      	nop
 800e7a4:	20000010 	.word	0x20000010
	...

0800e7b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e7b0:	f3ef 8009 	mrs	r0, PSP
 800e7b4:	f3bf 8f6f 	isb	sy
 800e7b8:	4b15      	ldr	r3, [pc, #84]	; (800e810 <pxCurrentTCBConst>)
 800e7ba:	681a      	ldr	r2, [r3, #0]
 800e7bc:	f01e 0f10 	tst.w	lr, #16
 800e7c0:	bf08      	it	eq
 800e7c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e7c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7ca:	6010      	str	r0, [r2, #0]
 800e7cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e7d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e7d4:	f380 8811 	msr	BASEPRI, r0
 800e7d8:	f3bf 8f4f 	dsb	sy
 800e7dc:	f3bf 8f6f 	isb	sy
 800e7e0:	f7fe fea8 	bl	800d534 <vTaskSwitchContext>
 800e7e4:	f04f 0000 	mov.w	r0, #0
 800e7e8:	f380 8811 	msr	BASEPRI, r0
 800e7ec:	bc09      	pop	{r0, r3}
 800e7ee:	6819      	ldr	r1, [r3, #0]
 800e7f0:	6808      	ldr	r0, [r1, #0]
 800e7f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7f6:	f01e 0f10 	tst.w	lr, #16
 800e7fa:	bf08      	it	eq
 800e7fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e800:	f380 8809 	msr	PSP, r0
 800e804:	f3bf 8f6f 	isb	sy
 800e808:	4770      	bx	lr
 800e80a:	bf00      	nop
 800e80c:	f3af 8000 	nop.w

0800e810 <pxCurrentTCBConst>:
 800e810:	20001920 	.word	0x20001920
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e814:	bf00      	nop
 800e816:	bf00      	nop

0800e818 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b082      	sub	sp, #8
 800e81c:	af00      	add	r7, sp, #0
	__asm volatile
 800e81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e822:	f383 8811 	msr	BASEPRI, r3
 800e826:	f3bf 8f6f 	isb	sy
 800e82a:	f3bf 8f4f 	dsb	sy
 800e82e:	607b      	str	r3, [r7, #4]
}
 800e830:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e832:	f7fe fdc5 	bl	800d3c0 <xTaskIncrementTick>
 800e836:	4603      	mov	r3, r0
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d003      	beq.n	800e844 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e83c:	4b06      	ldr	r3, [pc, #24]	; (800e858 <xPortSysTickHandler+0x40>)
 800e83e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e842:	601a      	str	r2, [r3, #0]
 800e844:	2300      	movs	r3, #0
 800e846:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e848:	683b      	ldr	r3, [r7, #0]
 800e84a:	f383 8811 	msr	BASEPRI, r3
}
 800e84e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e850:	bf00      	nop
 800e852:	3708      	adds	r7, #8
 800e854:	46bd      	mov	sp, r7
 800e856:	bd80      	pop	{r7, pc}
 800e858:	e000ed04 	.word	0xe000ed04

0800e85c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e85c:	b480      	push	{r7}
 800e85e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e860:	4b0b      	ldr	r3, [pc, #44]	; (800e890 <vPortSetupTimerInterrupt+0x34>)
 800e862:	2200      	movs	r2, #0
 800e864:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e866:	4b0b      	ldr	r3, [pc, #44]	; (800e894 <vPortSetupTimerInterrupt+0x38>)
 800e868:	2200      	movs	r2, #0
 800e86a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e86c:	4b0a      	ldr	r3, [pc, #40]	; (800e898 <vPortSetupTimerInterrupt+0x3c>)
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	4a0a      	ldr	r2, [pc, #40]	; (800e89c <vPortSetupTimerInterrupt+0x40>)
 800e872:	fba2 2303 	umull	r2, r3, r2, r3
 800e876:	099b      	lsrs	r3, r3, #6
 800e878:	4a09      	ldr	r2, [pc, #36]	; (800e8a0 <vPortSetupTimerInterrupt+0x44>)
 800e87a:	3b01      	subs	r3, #1
 800e87c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e87e:	4b04      	ldr	r3, [pc, #16]	; (800e890 <vPortSetupTimerInterrupt+0x34>)
 800e880:	2207      	movs	r2, #7
 800e882:	601a      	str	r2, [r3, #0]
}
 800e884:	bf00      	nop
 800e886:	46bd      	mov	sp, r7
 800e888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88c:	4770      	bx	lr
 800e88e:	bf00      	nop
 800e890:	e000e010 	.word	0xe000e010
 800e894:	e000e018 	.word	0xe000e018
 800e898:	20000004 	.word	0x20000004
 800e89c:	10624dd3 	.word	0x10624dd3
 800e8a0:	e000e014 	.word	0xe000e014

0800e8a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e8a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e8b4 <vPortEnableVFP+0x10>
 800e8a8:	6801      	ldr	r1, [r0, #0]
 800e8aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e8ae:	6001      	str	r1, [r0, #0]
 800e8b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e8b2:	bf00      	nop
 800e8b4:	e000ed88 	.word	0xe000ed88

0800e8b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e8b8:	b480      	push	{r7}
 800e8ba:	b085      	sub	sp, #20
 800e8bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e8be:	f3ef 8305 	mrs	r3, IPSR
 800e8c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	2b0f      	cmp	r3, #15
 800e8c8:	d914      	bls.n	800e8f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e8ca:	4a17      	ldr	r2, [pc, #92]	; (800e928 <vPortValidateInterruptPriority+0x70>)
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	4413      	add	r3, r2
 800e8d0:	781b      	ldrb	r3, [r3, #0]
 800e8d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e8d4:	4b15      	ldr	r3, [pc, #84]	; (800e92c <vPortValidateInterruptPriority+0x74>)
 800e8d6:	781b      	ldrb	r3, [r3, #0]
 800e8d8:	7afa      	ldrb	r2, [r7, #11]
 800e8da:	429a      	cmp	r2, r3
 800e8dc:	d20a      	bcs.n	800e8f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8e2:	f383 8811 	msr	BASEPRI, r3
 800e8e6:	f3bf 8f6f 	isb	sy
 800e8ea:	f3bf 8f4f 	dsb	sy
 800e8ee:	607b      	str	r3, [r7, #4]
}
 800e8f0:	bf00      	nop
 800e8f2:	e7fe      	b.n	800e8f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e8f4:	4b0e      	ldr	r3, [pc, #56]	; (800e930 <vPortValidateInterruptPriority+0x78>)
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e8fc:	4b0d      	ldr	r3, [pc, #52]	; (800e934 <vPortValidateInterruptPriority+0x7c>)
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	429a      	cmp	r2, r3
 800e902:	d90a      	bls.n	800e91a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e908:	f383 8811 	msr	BASEPRI, r3
 800e90c:	f3bf 8f6f 	isb	sy
 800e910:	f3bf 8f4f 	dsb	sy
 800e914:	603b      	str	r3, [r7, #0]
}
 800e916:	bf00      	nop
 800e918:	e7fe      	b.n	800e918 <vPortValidateInterruptPriority+0x60>
	}
 800e91a:	bf00      	nop
 800e91c:	3714      	adds	r7, #20
 800e91e:	46bd      	mov	sp, r7
 800e920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e924:	4770      	bx	lr
 800e926:	bf00      	nop
 800e928:	e000e3f0 	.word	0xe000e3f0
 800e92c:	20001f4c 	.word	0x20001f4c
 800e930:	e000ed0c 	.word	0xe000ed0c
 800e934:	20001f50 	.word	0x20001f50

0800e938 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e938:	b580      	push	{r7, lr}
 800e93a:	b08a      	sub	sp, #40	; 0x28
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e940:	2300      	movs	r3, #0
 800e942:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e944:	f7fe fc6e 	bl	800d224 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e948:	4b5b      	ldr	r3, [pc, #364]	; (800eab8 <pvPortMalloc+0x180>)
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d101      	bne.n	800e954 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e950:	f000 f920 	bl	800eb94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e954:	4b59      	ldr	r3, [pc, #356]	; (800eabc <pvPortMalloc+0x184>)
 800e956:	681a      	ldr	r2, [r3, #0]
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	4013      	ands	r3, r2
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	f040 8093 	bne.w	800ea88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d01d      	beq.n	800e9a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e968:	2208      	movs	r2, #8
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	4413      	add	r3, r2
 800e96e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	f003 0307 	and.w	r3, r3, #7
 800e976:	2b00      	cmp	r3, #0
 800e978:	d014      	beq.n	800e9a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	f023 0307 	bic.w	r3, r3, #7
 800e980:	3308      	adds	r3, #8
 800e982:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	f003 0307 	and.w	r3, r3, #7
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d00a      	beq.n	800e9a4 <pvPortMalloc+0x6c>
	__asm volatile
 800e98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e992:	f383 8811 	msr	BASEPRI, r3
 800e996:	f3bf 8f6f 	isb	sy
 800e99a:	f3bf 8f4f 	dsb	sy
 800e99e:	617b      	str	r3, [r7, #20]
}
 800e9a0:	bf00      	nop
 800e9a2:	e7fe      	b.n	800e9a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d06e      	beq.n	800ea88 <pvPortMalloc+0x150>
 800e9aa:	4b45      	ldr	r3, [pc, #276]	; (800eac0 <pvPortMalloc+0x188>)
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	687a      	ldr	r2, [r7, #4]
 800e9b0:	429a      	cmp	r2, r3
 800e9b2:	d869      	bhi.n	800ea88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e9b4:	4b43      	ldr	r3, [pc, #268]	; (800eac4 <pvPortMalloc+0x18c>)
 800e9b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e9b8:	4b42      	ldr	r3, [pc, #264]	; (800eac4 <pvPortMalloc+0x18c>)
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e9be:	e004      	b.n	800e9ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9cc:	685b      	ldr	r3, [r3, #4]
 800e9ce:	687a      	ldr	r2, [r7, #4]
 800e9d0:	429a      	cmp	r2, r3
 800e9d2:	d903      	bls.n	800e9dc <pvPortMalloc+0xa4>
 800e9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d1f1      	bne.n	800e9c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e9dc:	4b36      	ldr	r3, [pc, #216]	; (800eab8 <pvPortMalloc+0x180>)
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9e2:	429a      	cmp	r2, r3
 800e9e4:	d050      	beq.n	800ea88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e9e6:	6a3b      	ldr	r3, [r7, #32]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	2208      	movs	r2, #8
 800e9ec:	4413      	add	r3, r2
 800e9ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9f2:	681a      	ldr	r2, [r3, #0]
 800e9f4:	6a3b      	ldr	r3, [r7, #32]
 800e9f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9fa:	685a      	ldr	r2, [r3, #4]
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	1ad2      	subs	r2, r2, r3
 800ea00:	2308      	movs	r3, #8
 800ea02:	005b      	lsls	r3, r3, #1
 800ea04:	429a      	cmp	r2, r3
 800ea06:	d91f      	bls.n	800ea48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ea08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	4413      	add	r3, r2
 800ea0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ea10:	69bb      	ldr	r3, [r7, #24]
 800ea12:	f003 0307 	and.w	r3, r3, #7
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d00a      	beq.n	800ea30 <pvPortMalloc+0xf8>
	__asm volatile
 800ea1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea1e:	f383 8811 	msr	BASEPRI, r3
 800ea22:	f3bf 8f6f 	isb	sy
 800ea26:	f3bf 8f4f 	dsb	sy
 800ea2a:	613b      	str	r3, [r7, #16]
}
 800ea2c:	bf00      	nop
 800ea2e:	e7fe      	b.n	800ea2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ea30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea32:	685a      	ldr	r2, [r3, #4]
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	1ad2      	subs	r2, r2, r3
 800ea38:	69bb      	ldr	r3, [r7, #24]
 800ea3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ea3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea3e:	687a      	ldr	r2, [r7, #4]
 800ea40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ea42:	69b8      	ldr	r0, [r7, #24]
 800ea44:	f000 f908 	bl	800ec58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ea48:	4b1d      	ldr	r3, [pc, #116]	; (800eac0 <pvPortMalloc+0x188>)
 800ea4a:	681a      	ldr	r2, [r3, #0]
 800ea4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea4e:	685b      	ldr	r3, [r3, #4]
 800ea50:	1ad3      	subs	r3, r2, r3
 800ea52:	4a1b      	ldr	r2, [pc, #108]	; (800eac0 <pvPortMalloc+0x188>)
 800ea54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ea56:	4b1a      	ldr	r3, [pc, #104]	; (800eac0 <pvPortMalloc+0x188>)
 800ea58:	681a      	ldr	r2, [r3, #0]
 800ea5a:	4b1b      	ldr	r3, [pc, #108]	; (800eac8 <pvPortMalloc+0x190>)
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	429a      	cmp	r2, r3
 800ea60:	d203      	bcs.n	800ea6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ea62:	4b17      	ldr	r3, [pc, #92]	; (800eac0 <pvPortMalloc+0x188>)
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	4a18      	ldr	r2, [pc, #96]	; (800eac8 <pvPortMalloc+0x190>)
 800ea68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ea6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea6c:	685a      	ldr	r2, [r3, #4]
 800ea6e:	4b13      	ldr	r3, [pc, #76]	; (800eabc <pvPortMalloc+0x184>)
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	431a      	orrs	r2, r3
 800ea74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ea78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ea7e:	4b13      	ldr	r3, [pc, #76]	; (800eacc <pvPortMalloc+0x194>)
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	3301      	adds	r3, #1
 800ea84:	4a11      	ldr	r2, [pc, #68]	; (800eacc <pvPortMalloc+0x194>)
 800ea86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ea88:	f7fe fbda 	bl	800d240 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ea8c:	69fb      	ldr	r3, [r7, #28]
 800ea8e:	f003 0307 	and.w	r3, r3, #7
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d00a      	beq.n	800eaac <pvPortMalloc+0x174>
	__asm volatile
 800ea96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea9a:	f383 8811 	msr	BASEPRI, r3
 800ea9e:	f3bf 8f6f 	isb	sy
 800eaa2:	f3bf 8f4f 	dsb	sy
 800eaa6:	60fb      	str	r3, [r7, #12]
}
 800eaa8:	bf00      	nop
 800eaaa:	e7fe      	b.n	800eaaa <pvPortMalloc+0x172>
	return pvReturn;
 800eaac:	69fb      	ldr	r3, [r7, #28]
}
 800eaae:	4618      	mov	r0, r3
 800eab0:	3728      	adds	r7, #40	; 0x28
 800eab2:	46bd      	mov	sp, r7
 800eab4:	bd80      	pop	{r7, pc}
 800eab6:	bf00      	nop
 800eab8:	20005b5c 	.word	0x20005b5c
 800eabc:	20005b70 	.word	0x20005b70
 800eac0:	20005b60 	.word	0x20005b60
 800eac4:	20005b54 	.word	0x20005b54
 800eac8:	20005b64 	.word	0x20005b64
 800eacc:	20005b68 	.word	0x20005b68

0800ead0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b086      	sub	sp, #24
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d04d      	beq.n	800eb7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800eae2:	2308      	movs	r3, #8
 800eae4:	425b      	negs	r3, r3
 800eae6:	697a      	ldr	r2, [r7, #20]
 800eae8:	4413      	add	r3, r2
 800eaea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800eaec:	697b      	ldr	r3, [r7, #20]
 800eaee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800eaf0:	693b      	ldr	r3, [r7, #16]
 800eaf2:	685a      	ldr	r2, [r3, #4]
 800eaf4:	4b24      	ldr	r3, [pc, #144]	; (800eb88 <vPortFree+0xb8>)
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	4013      	ands	r3, r2
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d10a      	bne.n	800eb14 <vPortFree+0x44>
	__asm volatile
 800eafe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb02:	f383 8811 	msr	BASEPRI, r3
 800eb06:	f3bf 8f6f 	isb	sy
 800eb0a:	f3bf 8f4f 	dsb	sy
 800eb0e:	60fb      	str	r3, [r7, #12]
}
 800eb10:	bf00      	nop
 800eb12:	e7fe      	b.n	800eb12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800eb14:	693b      	ldr	r3, [r7, #16]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d00a      	beq.n	800eb32 <vPortFree+0x62>
	__asm volatile
 800eb1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb20:	f383 8811 	msr	BASEPRI, r3
 800eb24:	f3bf 8f6f 	isb	sy
 800eb28:	f3bf 8f4f 	dsb	sy
 800eb2c:	60bb      	str	r3, [r7, #8]
}
 800eb2e:	bf00      	nop
 800eb30:	e7fe      	b.n	800eb30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800eb32:	693b      	ldr	r3, [r7, #16]
 800eb34:	685a      	ldr	r2, [r3, #4]
 800eb36:	4b14      	ldr	r3, [pc, #80]	; (800eb88 <vPortFree+0xb8>)
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	4013      	ands	r3, r2
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d01e      	beq.n	800eb7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800eb40:	693b      	ldr	r3, [r7, #16]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d11a      	bne.n	800eb7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800eb48:	693b      	ldr	r3, [r7, #16]
 800eb4a:	685a      	ldr	r2, [r3, #4]
 800eb4c:	4b0e      	ldr	r3, [pc, #56]	; (800eb88 <vPortFree+0xb8>)
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	43db      	mvns	r3, r3
 800eb52:	401a      	ands	r2, r3
 800eb54:	693b      	ldr	r3, [r7, #16]
 800eb56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800eb58:	f7fe fb64 	bl	800d224 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800eb5c:	693b      	ldr	r3, [r7, #16]
 800eb5e:	685a      	ldr	r2, [r3, #4]
 800eb60:	4b0a      	ldr	r3, [pc, #40]	; (800eb8c <vPortFree+0xbc>)
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	4413      	add	r3, r2
 800eb66:	4a09      	ldr	r2, [pc, #36]	; (800eb8c <vPortFree+0xbc>)
 800eb68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800eb6a:	6938      	ldr	r0, [r7, #16]
 800eb6c:	f000 f874 	bl	800ec58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800eb70:	4b07      	ldr	r3, [pc, #28]	; (800eb90 <vPortFree+0xc0>)
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	3301      	adds	r3, #1
 800eb76:	4a06      	ldr	r2, [pc, #24]	; (800eb90 <vPortFree+0xc0>)
 800eb78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800eb7a:	f7fe fb61 	bl	800d240 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800eb7e:	bf00      	nop
 800eb80:	3718      	adds	r7, #24
 800eb82:	46bd      	mov	sp, r7
 800eb84:	bd80      	pop	{r7, pc}
 800eb86:	bf00      	nop
 800eb88:	20005b70 	.word	0x20005b70
 800eb8c:	20005b60 	.word	0x20005b60
 800eb90:	20005b6c 	.word	0x20005b6c

0800eb94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800eb94:	b480      	push	{r7}
 800eb96:	b085      	sub	sp, #20
 800eb98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800eb9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800eb9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800eba0:	4b27      	ldr	r3, [pc, #156]	; (800ec40 <prvHeapInit+0xac>)
 800eba2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	f003 0307 	and.w	r3, r3, #7
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d00c      	beq.n	800ebc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	3307      	adds	r3, #7
 800ebb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	f023 0307 	bic.w	r3, r3, #7
 800ebba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ebbc:	68ba      	ldr	r2, [r7, #8]
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	1ad3      	subs	r3, r2, r3
 800ebc2:	4a1f      	ldr	r2, [pc, #124]	; (800ec40 <prvHeapInit+0xac>)
 800ebc4:	4413      	add	r3, r2
 800ebc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ebcc:	4a1d      	ldr	r2, [pc, #116]	; (800ec44 <prvHeapInit+0xb0>)
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ebd2:	4b1c      	ldr	r3, [pc, #112]	; (800ec44 <prvHeapInit+0xb0>)
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	68ba      	ldr	r2, [r7, #8]
 800ebdc:	4413      	add	r3, r2
 800ebde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ebe0:	2208      	movs	r2, #8
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	1a9b      	subs	r3, r3, r2
 800ebe6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	f023 0307 	bic.w	r3, r3, #7
 800ebee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	4a15      	ldr	r2, [pc, #84]	; (800ec48 <prvHeapInit+0xb4>)
 800ebf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ebf6:	4b14      	ldr	r3, [pc, #80]	; (800ec48 <prvHeapInit+0xb4>)
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ebfe:	4b12      	ldr	r3, [pc, #72]	; (800ec48 <prvHeapInit+0xb4>)
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	2200      	movs	r2, #0
 800ec04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ec0a:	683b      	ldr	r3, [r7, #0]
 800ec0c:	68fa      	ldr	r2, [r7, #12]
 800ec0e:	1ad2      	subs	r2, r2, r3
 800ec10:	683b      	ldr	r3, [r7, #0]
 800ec12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ec14:	4b0c      	ldr	r3, [pc, #48]	; (800ec48 <prvHeapInit+0xb4>)
 800ec16:	681a      	ldr	r2, [r3, #0]
 800ec18:	683b      	ldr	r3, [r7, #0]
 800ec1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ec1c:	683b      	ldr	r3, [r7, #0]
 800ec1e:	685b      	ldr	r3, [r3, #4]
 800ec20:	4a0a      	ldr	r2, [pc, #40]	; (800ec4c <prvHeapInit+0xb8>)
 800ec22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ec24:	683b      	ldr	r3, [r7, #0]
 800ec26:	685b      	ldr	r3, [r3, #4]
 800ec28:	4a09      	ldr	r2, [pc, #36]	; (800ec50 <prvHeapInit+0xbc>)
 800ec2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ec2c:	4b09      	ldr	r3, [pc, #36]	; (800ec54 <prvHeapInit+0xc0>)
 800ec2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ec32:	601a      	str	r2, [r3, #0]
}
 800ec34:	bf00      	nop
 800ec36:	3714      	adds	r7, #20
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3e:	4770      	bx	lr
 800ec40:	20001f54 	.word	0x20001f54
 800ec44:	20005b54 	.word	0x20005b54
 800ec48:	20005b5c 	.word	0x20005b5c
 800ec4c:	20005b64 	.word	0x20005b64
 800ec50:	20005b60 	.word	0x20005b60
 800ec54:	20005b70 	.word	0x20005b70

0800ec58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ec58:	b480      	push	{r7}
 800ec5a:	b085      	sub	sp, #20
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ec60:	4b28      	ldr	r3, [pc, #160]	; (800ed04 <prvInsertBlockIntoFreeList+0xac>)
 800ec62:	60fb      	str	r3, [r7, #12]
 800ec64:	e002      	b.n	800ec6c <prvInsertBlockIntoFreeList+0x14>
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	60fb      	str	r3, [r7, #12]
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	687a      	ldr	r2, [r7, #4]
 800ec72:	429a      	cmp	r2, r3
 800ec74:	d8f7      	bhi.n	800ec66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	685b      	ldr	r3, [r3, #4]
 800ec7e:	68ba      	ldr	r2, [r7, #8]
 800ec80:	4413      	add	r3, r2
 800ec82:	687a      	ldr	r2, [r7, #4]
 800ec84:	429a      	cmp	r2, r3
 800ec86:	d108      	bne.n	800ec9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	685a      	ldr	r2, [r3, #4]
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	685b      	ldr	r3, [r3, #4]
 800ec90:	441a      	add	r2, r3
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	685b      	ldr	r3, [r3, #4]
 800eca2:	68ba      	ldr	r2, [r7, #8]
 800eca4:	441a      	add	r2, r3
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	429a      	cmp	r2, r3
 800ecac:	d118      	bne.n	800ece0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	681a      	ldr	r2, [r3, #0]
 800ecb2:	4b15      	ldr	r3, [pc, #84]	; (800ed08 <prvInsertBlockIntoFreeList+0xb0>)
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	429a      	cmp	r2, r3
 800ecb8:	d00d      	beq.n	800ecd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	685a      	ldr	r2, [r3, #4]
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	685b      	ldr	r3, [r3, #4]
 800ecc4:	441a      	add	r2, r3
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	681a      	ldr	r2, [r3, #0]
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	601a      	str	r2, [r3, #0]
 800ecd4:	e008      	b.n	800ece8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ecd6:	4b0c      	ldr	r3, [pc, #48]	; (800ed08 <prvInsertBlockIntoFreeList+0xb0>)
 800ecd8:	681a      	ldr	r2, [r3, #0]
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	601a      	str	r2, [r3, #0]
 800ecde:	e003      	b.n	800ece8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	681a      	ldr	r2, [r3, #0]
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ece8:	68fa      	ldr	r2, [r7, #12]
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	429a      	cmp	r2, r3
 800ecee:	d002      	beq.n	800ecf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	687a      	ldr	r2, [r7, #4]
 800ecf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ecf6:	bf00      	nop
 800ecf8:	3714      	adds	r7, #20
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed00:	4770      	bx	lr
 800ed02:	bf00      	nop
 800ed04:	20005b54 	.word	0x20005b54
 800ed08:	20005b5c 	.word	0x20005b5c

0800ed0c <__errno>:
 800ed0c:	4b01      	ldr	r3, [pc, #4]	; (800ed14 <__errno+0x8>)
 800ed0e:	6818      	ldr	r0, [r3, #0]
 800ed10:	4770      	bx	lr
 800ed12:	bf00      	nop
 800ed14:	20000014 	.word	0x20000014

0800ed18 <__libc_init_array>:
 800ed18:	b570      	push	{r4, r5, r6, lr}
 800ed1a:	4d0d      	ldr	r5, [pc, #52]	; (800ed50 <__libc_init_array+0x38>)
 800ed1c:	4c0d      	ldr	r4, [pc, #52]	; (800ed54 <__libc_init_array+0x3c>)
 800ed1e:	1b64      	subs	r4, r4, r5
 800ed20:	10a4      	asrs	r4, r4, #2
 800ed22:	2600      	movs	r6, #0
 800ed24:	42a6      	cmp	r6, r4
 800ed26:	d109      	bne.n	800ed3c <__libc_init_array+0x24>
 800ed28:	4d0b      	ldr	r5, [pc, #44]	; (800ed58 <__libc_init_array+0x40>)
 800ed2a:	4c0c      	ldr	r4, [pc, #48]	; (800ed5c <__libc_init_array+0x44>)
 800ed2c:	f000 fd08 	bl	800f740 <_init>
 800ed30:	1b64      	subs	r4, r4, r5
 800ed32:	10a4      	asrs	r4, r4, #2
 800ed34:	2600      	movs	r6, #0
 800ed36:	42a6      	cmp	r6, r4
 800ed38:	d105      	bne.n	800ed46 <__libc_init_array+0x2e>
 800ed3a:	bd70      	pop	{r4, r5, r6, pc}
 800ed3c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed40:	4798      	blx	r3
 800ed42:	3601      	adds	r6, #1
 800ed44:	e7ee      	b.n	800ed24 <__libc_init_array+0xc>
 800ed46:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed4a:	4798      	blx	r3
 800ed4c:	3601      	adds	r6, #1
 800ed4e:	e7f2      	b.n	800ed36 <__libc_init_array+0x1e>
 800ed50:	0800fa10 	.word	0x0800fa10
 800ed54:	0800fa10 	.word	0x0800fa10
 800ed58:	0800fa10 	.word	0x0800fa10
 800ed5c:	0800fa14 	.word	0x0800fa14

0800ed60 <__retarget_lock_acquire_recursive>:
 800ed60:	4770      	bx	lr

0800ed62 <__retarget_lock_release_recursive>:
 800ed62:	4770      	bx	lr

0800ed64 <malloc>:
 800ed64:	4b02      	ldr	r3, [pc, #8]	; (800ed70 <malloc+0xc>)
 800ed66:	4601      	mov	r1, r0
 800ed68:	6818      	ldr	r0, [r3, #0]
 800ed6a:	f000 b88d 	b.w	800ee88 <_malloc_r>
 800ed6e:	bf00      	nop
 800ed70:	20000014 	.word	0x20000014

0800ed74 <free>:
 800ed74:	4b02      	ldr	r3, [pc, #8]	; (800ed80 <free+0xc>)
 800ed76:	4601      	mov	r1, r0
 800ed78:	6818      	ldr	r0, [r3, #0]
 800ed7a:	f000 b819 	b.w	800edb0 <_free_r>
 800ed7e:	bf00      	nop
 800ed80:	20000014 	.word	0x20000014

0800ed84 <memcpy>:
 800ed84:	440a      	add	r2, r1
 800ed86:	4291      	cmp	r1, r2
 800ed88:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ed8c:	d100      	bne.n	800ed90 <memcpy+0xc>
 800ed8e:	4770      	bx	lr
 800ed90:	b510      	push	{r4, lr}
 800ed92:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed96:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ed9a:	4291      	cmp	r1, r2
 800ed9c:	d1f9      	bne.n	800ed92 <memcpy+0xe>
 800ed9e:	bd10      	pop	{r4, pc}

0800eda0 <memset>:
 800eda0:	4402      	add	r2, r0
 800eda2:	4603      	mov	r3, r0
 800eda4:	4293      	cmp	r3, r2
 800eda6:	d100      	bne.n	800edaa <memset+0xa>
 800eda8:	4770      	bx	lr
 800edaa:	f803 1b01 	strb.w	r1, [r3], #1
 800edae:	e7f9      	b.n	800eda4 <memset+0x4>

0800edb0 <_free_r>:
 800edb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800edb2:	2900      	cmp	r1, #0
 800edb4:	d044      	beq.n	800ee40 <_free_r+0x90>
 800edb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800edba:	9001      	str	r0, [sp, #4]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	f1a1 0404 	sub.w	r4, r1, #4
 800edc2:	bfb8      	it	lt
 800edc4:	18e4      	addlt	r4, r4, r3
 800edc6:	f000 f96d 	bl	800f0a4 <__malloc_lock>
 800edca:	4a1e      	ldr	r2, [pc, #120]	; (800ee44 <_free_r+0x94>)
 800edcc:	9801      	ldr	r0, [sp, #4]
 800edce:	6813      	ldr	r3, [r2, #0]
 800edd0:	b933      	cbnz	r3, 800ede0 <_free_r+0x30>
 800edd2:	6063      	str	r3, [r4, #4]
 800edd4:	6014      	str	r4, [r2, #0]
 800edd6:	b003      	add	sp, #12
 800edd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eddc:	f000 b968 	b.w	800f0b0 <__malloc_unlock>
 800ede0:	42a3      	cmp	r3, r4
 800ede2:	d908      	bls.n	800edf6 <_free_r+0x46>
 800ede4:	6825      	ldr	r5, [r4, #0]
 800ede6:	1961      	adds	r1, r4, r5
 800ede8:	428b      	cmp	r3, r1
 800edea:	bf01      	itttt	eq
 800edec:	6819      	ldreq	r1, [r3, #0]
 800edee:	685b      	ldreq	r3, [r3, #4]
 800edf0:	1949      	addeq	r1, r1, r5
 800edf2:	6021      	streq	r1, [r4, #0]
 800edf4:	e7ed      	b.n	800edd2 <_free_r+0x22>
 800edf6:	461a      	mov	r2, r3
 800edf8:	685b      	ldr	r3, [r3, #4]
 800edfa:	b10b      	cbz	r3, 800ee00 <_free_r+0x50>
 800edfc:	42a3      	cmp	r3, r4
 800edfe:	d9fa      	bls.n	800edf6 <_free_r+0x46>
 800ee00:	6811      	ldr	r1, [r2, #0]
 800ee02:	1855      	adds	r5, r2, r1
 800ee04:	42a5      	cmp	r5, r4
 800ee06:	d10b      	bne.n	800ee20 <_free_r+0x70>
 800ee08:	6824      	ldr	r4, [r4, #0]
 800ee0a:	4421      	add	r1, r4
 800ee0c:	1854      	adds	r4, r2, r1
 800ee0e:	42a3      	cmp	r3, r4
 800ee10:	6011      	str	r1, [r2, #0]
 800ee12:	d1e0      	bne.n	800edd6 <_free_r+0x26>
 800ee14:	681c      	ldr	r4, [r3, #0]
 800ee16:	685b      	ldr	r3, [r3, #4]
 800ee18:	6053      	str	r3, [r2, #4]
 800ee1a:	4421      	add	r1, r4
 800ee1c:	6011      	str	r1, [r2, #0]
 800ee1e:	e7da      	b.n	800edd6 <_free_r+0x26>
 800ee20:	d902      	bls.n	800ee28 <_free_r+0x78>
 800ee22:	230c      	movs	r3, #12
 800ee24:	6003      	str	r3, [r0, #0]
 800ee26:	e7d6      	b.n	800edd6 <_free_r+0x26>
 800ee28:	6825      	ldr	r5, [r4, #0]
 800ee2a:	1961      	adds	r1, r4, r5
 800ee2c:	428b      	cmp	r3, r1
 800ee2e:	bf04      	itt	eq
 800ee30:	6819      	ldreq	r1, [r3, #0]
 800ee32:	685b      	ldreq	r3, [r3, #4]
 800ee34:	6063      	str	r3, [r4, #4]
 800ee36:	bf04      	itt	eq
 800ee38:	1949      	addeq	r1, r1, r5
 800ee3a:	6021      	streq	r1, [r4, #0]
 800ee3c:	6054      	str	r4, [r2, #4]
 800ee3e:	e7ca      	b.n	800edd6 <_free_r+0x26>
 800ee40:	b003      	add	sp, #12
 800ee42:	bd30      	pop	{r4, r5, pc}
 800ee44:	20005b78 	.word	0x20005b78

0800ee48 <sbrk_aligned>:
 800ee48:	b570      	push	{r4, r5, r6, lr}
 800ee4a:	4e0e      	ldr	r6, [pc, #56]	; (800ee84 <sbrk_aligned+0x3c>)
 800ee4c:	460c      	mov	r4, r1
 800ee4e:	6831      	ldr	r1, [r6, #0]
 800ee50:	4605      	mov	r5, r0
 800ee52:	b911      	cbnz	r1, 800ee5a <sbrk_aligned+0x12>
 800ee54:	f000 f8f6 	bl	800f044 <_sbrk_r>
 800ee58:	6030      	str	r0, [r6, #0]
 800ee5a:	4621      	mov	r1, r4
 800ee5c:	4628      	mov	r0, r5
 800ee5e:	f000 f8f1 	bl	800f044 <_sbrk_r>
 800ee62:	1c43      	adds	r3, r0, #1
 800ee64:	d00a      	beq.n	800ee7c <sbrk_aligned+0x34>
 800ee66:	1cc4      	adds	r4, r0, #3
 800ee68:	f024 0403 	bic.w	r4, r4, #3
 800ee6c:	42a0      	cmp	r0, r4
 800ee6e:	d007      	beq.n	800ee80 <sbrk_aligned+0x38>
 800ee70:	1a21      	subs	r1, r4, r0
 800ee72:	4628      	mov	r0, r5
 800ee74:	f000 f8e6 	bl	800f044 <_sbrk_r>
 800ee78:	3001      	adds	r0, #1
 800ee7a:	d101      	bne.n	800ee80 <sbrk_aligned+0x38>
 800ee7c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ee80:	4620      	mov	r0, r4
 800ee82:	bd70      	pop	{r4, r5, r6, pc}
 800ee84:	20005b7c 	.word	0x20005b7c

0800ee88 <_malloc_r>:
 800ee88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee8c:	1ccd      	adds	r5, r1, #3
 800ee8e:	f025 0503 	bic.w	r5, r5, #3
 800ee92:	3508      	adds	r5, #8
 800ee94:	2d0c      	cmp	r5, #12
 800ee96:	bf38      	it	cc
 800ee98:	250c      	movcc	r5, #12
 800ee9a:	2d00      	cmp	r5, #0
 800ee9c:	4607      	mov	r7, r0
 800ee9e:	db01      	blt.n	800eea4 <_malloc_r+0x1c>
 800eea0:	42a9      	cmp	r1, r5
 800eea2:	d905      	bls.n	800eeb0 <_malloc_r+0x28>
 800eea4:	230c      	movs	r3, #12
 800eea6:	603b      	str	r3, [r7, #0]
 800eea8:	2600      	movs	r6, #0
 800eeaa:	4630      	mov	r0, r6
 800eeac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eeb0:	4e2e      	ldr	r6, [pc, #184]	; (800ef6c <_malloc_r+0xe4>)
 800eeb2:	f000 f8f7 	bl	800f0a4 <__malloc_lock>
 800eeb6:	6833      	ldr	r3, [r6, #0]
 800eeb8:	461c      	mov	r4, r3
 800eeba:	bb34      	cbnz	r4, 800ef0a <_malloc_r+0x82>
 800eebc:	4629      	mov	r1, r5
 800eebe:	4638      	mov	r0, r7
 800eec0:	f7ff ffc2 	bl	800ee48 <sbrk_aligned>
 800eec4:	1c43      	adds	r3, r0, #1
 800eec6:	4604      	mov	r4, r0
 800eec8:	d14d      	bne.n	800ef66 <_malloc_r+0xde>
 800eeca:	6834      	ldr	r4, [r6, #0]
 800eecc:	4626      	mov	r6, r4
 800eece:	2e00      	cmp	r6, #0
 800eed0:	d140      	bne.n	800ef54 <_malloc_r+0xcc>
 800eed2:	6823      	ldr	r3, [r4, #0]
 800eed4:	4631      	mov	r1, r6
 800eed6:	4638      	mov	r0, r7
 800eed8:	eb04 0803 	add.w	r8, r4, r3
 800eedc:	f000 f8b2 	bl	800f044 <_sbrk_r>
 800eee0:	4580      	cmp	r8, r0
 800eee2:	d13a      	bne.n	800ef5a <_malloc_r+0xd2>
 800eee4:	6821      	ldr	r1, [r4, #0]
 800eee6:	3503      	adds	r5, #3
 800eee8:	1a6d      	subs	r5, r5, r1
 800eeea:	f025 0503 	bic.w	r5, r5, #3
 800eeee:	3508      	adds	r5, #8
 800eef0:	2d0c      	cmp	r5, #12
 800eef2:	bf38      	it	cc
 800eef4:	250c      	movcc	r5, #12
 800eef6:	4629      	mov	r1, r5
 800eef8:	4638      	mov	r0, r7
 800eefa:	f7ff ffa5 	bl	800ee48 <sbrk_aligned>
 800eefe:	3001      	adds	r0, #1
 800ef00:	d02b      	beq.n	800ef5a <_malloc_r+0xd2>
 800ef02:	6823      	ldr	r3, [r4, #0]
 800ef04:	442b      	add	r3, r5
 800ef06:	6023      	str	r3, [r4, #0]
 800ef08:	e00e      	b.n	800ef28 <_malloc_r+0xa0>
 800ef0a:	6822      	ldr	r2, [r4, #0]
 800ef0c:	1b52      	subs	r2, r2, r5
 800ef0e:	d41e      	bmi.n	800ef4e <_malloc_r+0xc6>
 800ef10:	2a0b      	cmp	r2, #11
 800ef12:	d916      	bls.n	800ef42 <_malloc_r+0xba>
 800ef14:	1961      	adds	r1, r4, r5
 800ef16:	42a3      	cmp	r3, r4
 800ef18:	6025      	str	r5, [r4, #0]
 800ef1a:	bf18      	it	ne
 800ef1c:	6059      	strne	r1, [r3, #4]
 800ef1e:	6863      	ldr	r3, [r4, #4]
 800ef20:	bf08      	it	eq
 800ef22:	6031      	streq	r1, [r6, #0]
 800ef24:	5162      	str	r2, [r4, r5]
 800ef26:	604b      	str	r3, [r1, #4]
 800ef28:	4638      	mov	r0, r7
 800ef2a:	f104 060b 	add.w	r6, r4, #11
 800ef2e:	f000 f8bf 	bl	800f0b0 <__malloc_unlock>
 800ef32:	f026 0607 	bic.w	r6, r6, #7
 800ef36:	1d23      	adds	r3, r4, #4
 800ef38:	1af2      	subs	r2, r6, r3
 800ef3a:	d0b6      	beq.n	800eeaa <_malloc_r+0x22>
 800ef3c:	1b9b      	subs	r3, r3, r6
 800ef3e:	50a3      	str	r3, [r4, r2]
 800ef40:	e7b3      	b.n	800eeaa <_malloc_r+0x22>
 800ef42:	6862      	ldr	r2, [r4, #4]
 800ef44:	42a3      	cmp	r3, r4
 800ef46:	bf0c      	ite	eq
 800ef48:	6032      	streq	r2, [r6, #0]
 800ef4a:	605a      	strne	r2, [r3, #4]
 800ef4c:	e7ec      	b.n	800ef28 <_malloc_r+0xa0>
 800ef4e:	4623      	mov	r3, r4
 800ef50:	6864      	ldr	r4, [r4, #4]
 800ef52:	e7b2      	b.n	800eeba <_malloc_r+0x32>
 800ef54:	4634      	mov	r4, r6
 800ef56:	6876      	ldr	r6, [r6, #4]
 800ef58:	e7b9      	b.n	800eece <_malloc_r+0x46>
 800ef5a:	230c      	movs	r3, #12
 800ef5c:	603b      	str	r3, [r7, #0]
 800ef5e:	4638      	mov	r0, r7
 800ef60:	f000 f8a6 	bl	800f0b0 <__malloc_unlock>
 800ef64:	e7a1      	b.n	800eeaa <_malloc_r+0x22>
 800ef66:	6025      	str	r5, [r4, #0]
 800ef68:	e7de      	b.n	800ef28 <_malloc_r+0xa0>
 800ef6a:	bf00      	nop
 800ef6c:	20005b78 	.word	0x20005b78

0800ef70 <cleanup_glue>:
 800ef70:	b538      	push	{r3, r4, r5, lr}
 800ef72:	460c      	mov	r4, r1
 800ef74:	6809      	ldr	r1, [r1, #0]
 800ef76:	4605      	mov	r5, r0
 800ef78:	b109      	cbz	r1, 800ef7e <cleanup_glue+0xe>
 800ef7a:	f7ff fff9 	bl	800ef70 <cleanup_glue>
 800ef7e:	4621      	mov	r1, r4
 800ef80:	4628      	mov	r0, r5
 800ef82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ef86:	f7ff bf13 	b.w	800edb0 <_free_r>
	...

0800ef8c <_reclaim_reent>:
 800ef8c:	4b2c      	ldr	r3, [pc, #176]	; (800f040 <_reclaim_reent+0xb4>)
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	4283      	cmp	r3, r0
 800ef92:	b570      	push	{r4, r5, r6, lr}
 800ef94:	4604      	mov	r4, r0
 800ef96:	d051      	beq.n	800f03c <_reclaim_reent+0xb0>
 800ef98:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ef9a:	b143      	cbz	r3, 800efae <_reclaim_reent+0x22>
 800ef9c:	68db      	ldr	r3, [r3, #12]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d14a      	bne.n	800f038 <_reclaim_reent+0xac>
 800efa2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800efa4:	6819      	ldr	r1, [r3, #0]
 800efa6:	b111      	cbz	r1, 800efae <_reclaim_reent+0x22>
 800efa8:	4620      	mov	r0, r4
 800efaa:	f7ff ff01 	bl	800edb0 <_free_r>
 800efae:	6961      	ldr	r1, [r4, #20]
 800efb0:	b111      	cbz	r1, 800efb8 <_reclaim_reent+0x2c>
 800efb2:	4620      	mov	r0, r4
 800efb4:	f7ff fefc 	bl	800edb0 <_free_r>
 800efb8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800efba:	b111      	cbz	r1, 800efc2 <_reclaim_reent+0x36>
 800efbc:	4620      	mov	r0, r4
 800efbe:	f7ff fef7 	bl	800edb0 <_free_r>
 800efc2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800efc4:	b111      	cbz	r1, 800efcc <_reclaim_reent+0x40>
 800efc6:	4620      	mov	r0, r4
 800efc8:	f7ff fef2 	bl	800edb0 <_free_r>
 800efcc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800efce:	b111      	cbz	r1, 800efd6 <_reclaim_reent+0x4a>
 800efd0:	4620      	mov	r0, r4
 800efd2:	f7ff feed 	bl	800edb0 <_free_r>
 800efd6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800efd8:	b111      	cbz	r1, 800efe0 <_reclaim_reent+0x54>
 800efda:	4620      	mov	r0, r4
 800efdc:	f7ff fee8 	bl	800edb0 <_free_r>
 800efe0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800efe2:	b111      	cbz	r1, 800efea <_reclaim_reent+0x5e>
 800efe4:	4620      	mov	r0, r4
 800efe6:	f7ff fee3 	bl	800edb0 <_free_r>
 800efea:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800efec:	b111      	cbz	r1, 800eff4 <_reclaim_reent+0x68>
 800efee:	4620      	mov	r0, r4
 800eff0:	f7ff fede 	bl	800edb0 <_free_r>
 800eff4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eff6:	b111      	cbz	r1, 800effe <_reclaim_reent+0x72>
 800eff8:	4620      	mov	r0, r4
 800effa:	f7ff fed9 	bl	800edb0 <_free_r>
 800effe:	69a3      	ldr	r3, [r4, #24]
 800f000:	b1e3      	cbz	r3, 800f03c <_reclaim_reent+0xb0>
 800f002:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f004:	4620      	mov	r0, r4
 800f006:	4798      	blx	r3
 800f008:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f00a:	b1b9      	cbz	r1, 800f03c <_reclaim_reent+0xb0>
 800f00c:	4620      	mov	r0, r4
 800f00e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f012:	f7ff bfad 	b.w	800ef70 <cleanup_glue>
 800f016:	5949      	ldr	r1, [r1, r5]
 800f018:	b941      	cbnz	r1, 800f02c <_reclaim_reent+0xa0>
 800f01a:	3504      	adds	r5, #4
 800f01c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f01e:	2d80      	cmp	r5, #128	; 0x80
 800f020:	68d9      	ldr	r1, [r3, #12]
 800f022:	d1f8      	bne.n	800f016 <_reclaim_reent+0x8a>
 800f024:	4620      	mov	r0, r4
 800f026:	f7ff fec3 	bl	800edb0 <_free_r>
 800f02a:	e7ba      	b.n	800efa2 <_reclaim_reent+0x16>
 800f02c:	680e      	ldr	r6, [r1, #0]
 800f02e:	4620      	mov	r0, r4
 800f030:	f7ff febe 	bl	800edb0 <_free_r>
 800f034:	4631      	mov	r1, r6
 800f036:	e7ef      	b.n	800f018 <_reclaim_reent+0x8c>
 800f038:	2500      	movs	r5, #0
 800f03a:	e7ef      	b.n	800f01c <_reclaim_reent+0x90>
 800f03c:	bd70      	pop	{r4, r5, r6, pc}
 800f03e:	bf00      	nop
 800f040:	20000014 	.word	0x20000014

0800f044 <_sbrk_r>:
 800f044:	b538      	push	{r3, r4, r5, lr}
 800f046:	4d06      	ldr	r5, [pc, #24]	; (800f060 <_sbrk_r+0x1c>)
 800f048:	2300      	movs	r3, #0
 800f04a:	4604      	mov	r4, r0
 800f04c:	4608      	mov	r0, r1
 800f04e:	602b      	str	r3, [r5, #0]
 800f050:	f7f2 fb3e 	bl	80016d0 <_sbrk>
 800f054:	1c43      	adds	r3, r0, #1
 800f056:	d102      	bne.n	800f05e <_sbrk_r+0x1a>
 800f058:	682b      	ldr	r3, [r5, #0]
 800f05a:	b103      	cbz	r3, 800f05e <_sbrk_r+0x1a>
 800f05c:	6023      	str	r3, [r4, #0]
 800f05e:	bd38      	pop	{r3, r4, r5, pc}
 800f060:	20005b80 	.word	0x20005b80

0800f064 <siprintf>:
 800f064:	b40e      	push	{r1, r2, r3}
 800f066:	b500      	push	{lr}
 800f068:	b09c      	sub	sp, #112	; 0x70
 800f06a:	ab1d      	add	r3, sp, #116	; 0x74
 800f06c:	9002      	str	r0, [sp, #8]
 800f06e:	9006      	str	r0, [sp, #24]
 800f070:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f074:	4809      	ldr	r0, [pc, #36]	; (800f09c <siprintf+0x38>)
 800f076:	9107      	str	r1, [sp, #28]
 800f078:	9104      	str	r1, [sp, #16]
 800f07a:	4909      	ldr	r1, [pc, #36]	; (800f0a0 <siprintf+0x3c>)
 800f07c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f080:	9105      	str	r1, [sp, #20]
 800f082:	6800      	ldr	r0, [r0, #0]
 800f084:	9301      	str	r3, [sp, #4]
 800f086:	a902      	add	r1, sp, #8
 800f088:	f000 f874 	bl	800f174 <_svfiprintf_r>
 800f08c:	9b02      	ldr	r3, [sp, #8]
 800f08e:	2200      	movs	r2, #0
 800f090:	701a      	strb	r2, [r3, #0]
 800f092:	b01c      	add	sp, #112	; 0x70
 800f094:	f85d eb04 	ldr.w	lr, [sp], #4
 800f098:	b003      	add	sp, #12
 800f09a:	4770      	bx	lr
 800f09c:	20000014 	.word	0x20000014
 800f0a0:	ffff0208 	.word	0xffff0208

0800f0a4 <__malloc_lock>:
 800f0a4:	4801      	ldr	r0, [pc, #4]	; (800f0ac <__malloc_lock+0x8>)
 800f0a6:	f7ff be5b 	b.w	800ed60 <__retarget_lock_acquire_recursive>
 800f0aa:	bf00      	nop
 800f0ac:	20005b74 	.word	0x20005b74

0800f0b0 <__malloc_unlock>:
 800f0b0:	4801      	ldr	r0, [pc, #4]	; (800f0b8 <__malloc_unlock+0x8>)
 800f0b2:	f7ff be56 	b.w	800ed62 <__retarget_lock_release_recursive>
 800f0b6:	bf00      	nop
 800f0b8:	20005b74 	.word	0x20005b74

0800f0bc <__ssputs_r>:
 800f0bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0c0:	688e      	ldr	r6, [r1, #8]
 800f0c2:	429e      	cmp	r6, r3
 800f0c4:	4682      	mov	sl, r0
 800f0c6:	460c      	mov	r4, r1
 800f0c8:	4690      	mov	r8, r2
 800f0ca:	461f      	mov	r7, r3
 800f0cc:	d838      	bhi.n	800f140 <__ssputs_r+0x84>
 800f0ce:	898a      	ldrh	r2, [r1, #12]
 800f0d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f0d4:	d032      	beq.n	800f13c <__ssputs_r+0x80>
 800f0d6:	6825      	ldr	r5, [r4, #0]
 800f0d8:	6909      	ldr	r1, [r1, #16]
 800f0da:	eba5 0901 	sub.w	r9, r5, r1
 800f0de:	6965      	ldr	r5, [r4, #20]
 800f0e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f0e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f0e8:	3301      	adds	r3, #1
 800f0ea:	444b      	add	r3, r9
 800f0ec:	106d      	asrs	r5, r5, #1
 800f0ee:	429d      	cmp	r5, r3
 800f0f0:	bf38      	it	cc
 800f0f2:	461d      	movcc	r5, r3
 800f0f4:	0553      	lsls	r3, r2, #21
 800f0f6:	d531      	bpl.n	800f15c <__ssputs_r+0xa0>
 800f0f8:	4629      	mov	r1, r5
 800f0fa:	f7ff fec5 	bl	800ee88 <_malloc_r>
 800f0fe:	4606      	mov	r6, r0
 800f100:	b950      	cbnz	r0, 800f118 <__ssputs_r+0x5c>
 800f102:	230c      	movs	r3, #12
 800f104:	f8ca 3000 	str.w	r3, [sl]
 800f108:	89a3      	ldrh	r3, [r4, #12]
 800f10a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f10e:	81a3      	strh	r3, [r4, #12]
 800f110:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f118:	6921      	ldr	r1, [r4, #16]
 800f11a:	464a      	mov	r2, r9
 800f11c:	f7ff fe32 	bl	800ed84 <memcpy>
 800f120:	89a3      	ldrh	r3, [r4, #12]
 800f122:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f12a:	81a3      	strh	r3, [r4, #12]
 800f12c:	6126      	str	r6, [r4, #16]
 800f12e:	6165      	str	r5, [r4, #20]
 800f130:	444e      	add	r6, r9
 800f132:	eba5 0509 	sub.w	r5, r5, r9
 800f136:	6026      	str	r6, [r4, #0]
 800f138:	60a5      	str	r5, [r4, #8]
 800f13a:	463e      	mov	r6, r7
 800f13c:	42be      	cmp	r6, r7
 800f13e:	d900      	bls.n	800f142 <__ssputs_r+0x86>
 800f140:	463e      	mov	r6, r7
 800f142:	6820      	ldr	r0, [r4, #0]
 800f144:	4632      	mov	r2, r6
 800f146:	4641      	mov	r1, r8
 800f148:	f000 faa8 	bl	800f69c <memmove>
 800f14c:	68a3      	ldr	r3, [r4, #8]
 800f14e:	1b9b      	subs	r3, r3, r6
 800f150:	60a3      	str	r3, [r4, #8]
 800f152:	6823      	ldr	r3, [r4, #0]
 800f154:	4433      	add	r3, r6
 800f156:	6023      	str	r3, [r4, #0]
 800f158:	2000      	movs	r0, #0
 800f15a:	e7db      	b.n	800f114 <__ssputs_r+0x58>
 800f15c:	462a      	mov	r2, r5
 800f15e:	f000 fab7 	bl	800f6d0 <_realloc_r>
 800f162:	4606      	mov	r6, r0
 800f164:	2800      	cmp	r0, #0
 800f166:	d1e1      	bne.n	800f12c <__ssputs_r+0x70>
 800f168:	6921      	ldr	r1, [r4, #16]
 800f16a:	4650      	mov	r0, sl
 800f16c:	f7ff fe20 	bl	800edb0 <_free_r>
 800f170:	e7c7      	b.n	800f102 <__ssputs_r+0x46>
	...

0800f174 <_svfiprintf_r>:
 800f174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f178:	4698      	mov	r8, r3
 800f17a:	898b      	ldrh	r3, [r1, #12]
 800f17c:	061b      	lsls	r3, r3, #24
 800f17e:	b09d      	sub	sp, #116	; 0x74
 800f180:	4607      	mov	r7, r0
 800f182:	460d      	mov	r5, r1
 800f184:	4614      	mov	r4, r2
 800f186:	d50e      	bpl.n	800f1a6 <_svfiprintf_r+0x32>
 800f188:	690b      	ldr	r3, [r1, #16]
 800f18a:	b963      	cbnz	r3, 800f1a6 <_svfiprintf_r+0x32>
 800f18c:	2140      	movs	r1, #64	; 0x40
 800f18e:	f7ff fe7b 	bl	800ee88 <_malloc_r>
 800f192:	6028      	str	r0, [r5, #0]
 800f194:	6128      	str	r0, [r5, #16]
 800f196:	b920      	cbnz	r0, 800f1a2 <_svfiprintf_r+0x2e>
 800f198:	230c      	movs	r3, #12
 800f19a:	603b      	str	r3, [r7, #0]
 800f19c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f1a0:	e0d1      	b.n	800f346 <_svfiprintf_r+0x1d2>
 800f1a2:	2340      	movs	r3, #64	; 0x40
 800f1a4:	616b      	str	r3, [r5, #20]
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	9309      	str	r3, [sp, #36]	; 0x24
 800f1aa:	2320      	movs	r3, #32
 800f1ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f1b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800f1b4:	2330      	movs	r3, #48	; 0x30
 800f1b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f360 <_svfiprintf_r+0x1ec>
 800f1ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f1be:	f04f 0901 	mov.w	r9, #1
 800f1c2:	4623      	mov	r3, r4
 800f1c4:	469a      	mov	sl, r3
 800f1c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f1ca:	b10a      	cbz	r2, 800f1d0 <_svfiprintf_r+0x5c>
 800f1cc:	2a25      	cmp	r2, #37	; 0x25
 800f1ce:	d1f9      	bne.n	800f1c4 <_svfiprintf_r+0x50>
 800f1d0:	ebba 0b04 	subs.w	fp, sl, r4
 800f1d4:	d00b      	beq.n	800f1ee <_svfiprintf_r+0x7a>
 800f1d6:	465b      	mov	r3, fp
 800f1d8:	4622      	mov	r2, r4
 800f1da:	4629      	mov	r1, r5
 800f1dc:	4638      	mov	r0, r7
 800f1de:	f7ff ff6d 	bl	800f0bc <__ssputs_r>
 800f1e2:	3001      	adds	r0, #1
 800f1e4:	f000 80aa 	beq.w	800f33c <_svfiprintf_r+0x1c8>
 800f1e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f1ea:	445a      	add	r2, fp
 800f1ec:	9209      	str	r2, [sp, #36]	; 0x24
 800f1ee:	f89a 3000 	ldrb.w	r3, [sl]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	f000 80a2 	beq.w	800f33c <_svfiprintf_r+0x1c8>
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f1fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f202:	f10a 0a01 	add.w	sl, sl, #1
 800f206:	9304      	str	r3, [sp, #16]
 800f208:	9307      	str	r3, [sp, #28]
 800f20a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f20e:	931a      	str	r3, [sp, #104]	; 0x68
 800f210:	4654      	mov	r4, sl
 800f212:	2205      	movs	r2, #5
 800f214:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f218:	4851      	ldr	r0, [pc, #324]	; (800f360 <_svfiprintf_r+0x1ec>)
 800f21a:	f7f1 f809 	bl	8000230 <memchr>
 800f21e:	9a04      	ldr	r2, [sp, #16]
 800f220:	b9d8      	cbnz	r0, 800f25a <_svfiprintf_r+0xe6>
 800f222:	06d0      	lsls	r0, r2, #27
 800f224:	bf44      	itt	mi
 800f226:	2320      	movmi	r3, #32
 800f228:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f22c:	0711      	lsls	r1, r2, #28
 800f22e:	bf44      	itt	mi
 800f230:	232b      	movmi	r3, #43	; 0x2b
 800f232:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f236:	f89a 3000 	ldrb.w	r3, [sl]
 800f23a:	2b2a      	cmp	r3, #42	; 0x2a
 800f23c:	d015      	beq.n	800f26a <_svfiprintf_r+0xf6>
 800f23e:	9a07      	ldr	r2, [sp, #28]
 800f240:	4654      	mov	r4, sl
 800f242:	2000      	movs	r0, #0
 800f244:	f04f 0c0a 	mov.w	ip, #10
 800f248:	4621      	mov	r1, r4
 800f24a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f24e:	3b30      	subs	r3, #48	; 0x30
 800f250:	2b09      	cmp	r3, #9
 800f252:	d94e      	bls.n	800f2f2 <_svfiprintf_r+0x17e>
 800f254:	b1b0      	cbz	r0, 800f284 <_svfiprintf_r+0x110>
 800f256:	9207      	str	r2, [sp, #28]
 800f258:	e014      	b.n	800f284 <_svfiprintf_r+0x110>
 800f25a:	eba0 0308 	sub.w	r3, r0, r8
 800f25e:	fa09 f303 	lsl.w	r3, r9, r3
 800f262:	4313      	orrs	r3, r2
 800f264:	9304      	str	r3, [sp, #16]
 800f266:	46a2      	mov	sl, r4
 800f268:	e7d2      	b.n	800f210 <_svfiprintf_r+0x9c>
 800f26a:	9b03      	ldr	r3, [sp, #12]
 800f26c:	1d19      	adds	r1, r3, #4
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	9103      	str	r1, [sp, #12]
 800f272:	2b00      	cmp	r3, #0
 800f274:	bfbb      	ittet	lt
 800f276:	425b      	neglt	r3, r3
 800f278:	f042 0202 	orrlt.w	r2, r2, #2
 800f27c:	9307      	strge	r3, [sp, #28]
 800f27e:	9307      	strlt	r3, [sp, #28]
 800f280:	bfb8      	it	lt
 800f282:	9204      	strlt	r2, [sp, #16]
 800f284:	7823      	ldrb	r3, [r4, #0]
 800f286:	2b2e      	cmp	r3, #46	; 0x2e
 800f288:	d10c      	bne.n	800f2a4 <_svfiprintf_r+0x130>
 800f28a:	7863      	ldrb	r3, [r4, #1]
 800f28c:	2b2a      	cmp	r3, #42	; 0x2a
 800f28e:	d135      	bne.n	800f2fc <_svfiprintf_r+0x188>
 800f290:	9b03      	ldr	r3, [sp, #12]
 800f292:	1d1a      	adds	r2, r3, #4
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	9203      	str	r2, [sp, #12]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	bfb8      	it	lt
 800f29c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f2a0:	3402      	adds	r4, #2
 800f2a2:	9305      	str	r3, [sp, #20]
 800f2a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f370 <_svfiprintf_r+0x1fc>
 800f2a8:	7821      	ldrb	r1, [r4, #0]
 800f2aa:	2203      	movs	r2, #3
 800f2ac:	4650      	mov	r0, sl
 800f2ae:	f7f0 ffbf 	bl	8000230 <memchr>
 800f2b2:	b140      	cbz	r0, 800f2c6 <_svfiprintf_r+0x152>
 800f2b4:	2340      	movs	r3, #64	; 0x40
 800f2b6:	eba0 000a 	sub.w	r0, r0, sl
 800f2ba:	fa03 f000 	lsl.w	r0, r3, r0
 800f2be:	9b04      	ldr	r3, [sp, #16]
 800f2c0:	4303      	orrs	r3, r0
 800f2c2:	3401      	adds	r4, #1
 800f2c4:	9304      	str	r3, [sp, #16]
 800f2c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2ca:	4826      	ldr	r0, [pc, #152]	; (800f364 <_svfiprintf_r+0x1f0>)
 800f2cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f2d0:	2206      	movs	r2, #6
 800f2d2:	f7f0 ffad 	bl	8000230 <memchr>
 800f2d6:	2800      	cmp	r0, #0
 800f2d8:	d038      	beq.n	800f34c <_svfiprintf_r+0x1d8>
 800f2da:	4b23      	ldr	r3, [pc, #140]	; (800f368 <_svfiprintf_r+0x1f4>)
 800f2dc:	bb1b      	cbnz	r3, 800f326 <_svfiprintf_r+0x1b2>
 800f2de:	9b03      	ldr	r3, [sp, #12]
 800f2e0:	3307      	adds	r3, #7
 800f2e2:	f023 0307 	bic.w	r3, r3, #7
 800f2e6:	3308      	adds	r3, #8
 800f2e8:	9303      	str	r3, [sp, #12]
 800f2ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2ec:	4433      	add	r3, r6
 800f2ee:	9309      	str	r3, [sp, #36]	; 0x24
 800f2f0:	e767      	b.n	800f1c2 <_svfiprintf_r+0x4e>
 800f2f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800f2f6:	460c      	mov	r4, r1
 800f2f8:	2001      	movs	r0, #1
 800f2fa:	e7a5      	b.n	800f248 <_svfiprintf_r+0xd4>
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	3401      	adds	r4, #1
 800f300:	9305      	str	r3, [sp, #20]
 800f302:	4619      	mov	r1, r3
 800f304:	f04f 0c0a 	mov.w	ip, #10
 800f308:	4620      	mov	r0, r4
 800f30a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f30e:	3a30      	subs	r2, #48	; 0x30
 800f310:	2a09      	cmp	r2, #9
 800f312:	d903      	bls.n	800f31c <_svfiprintf_r+0x1a8>
 800f314:	2b00      	cmp	r3, #0
 800f316:	d0c5      	beq.n	800f2a4 <_svfiprintf_r+0x130>
 800f318:	9105      	str	r1, [sp, #20]
 800f31a:	e7c3      	b.n	800f2a4 <_svfiprintf_r+0x130>
 800f31c:	fb0c 2101 	mla	r1, ip, r1, r2
 800f320:	4604      	mov	r4, r0
 800f322:	2301      	movs	r3, #1
 800f324:	e7f0      	b.n	800f308 <_svfiprintf_r+0x194>
 800f326:	ab03      	add	r3, sp, #12
 800f328:	9300      	str	r3, [sp, #0]
 800f32a:	462a      	mov	r2, r5
 800f32c:	4b0f      	ldr	r3, [pc, #60]	; (800f36c <_svfiprintf_r+0x1f8>)
 800f32e:	a904      	add	r1, sp, #16
 800f330:	4638      	mov	r0, r7
 800f332:	f3af 8000 	nop.w
 800f336:	1c42      	adds	r2, r0, #1
 800f338:	4606      	mov	r6, r0
 800f33a:	d1d6      	bne.n	800f2ea <_svfiprintf_r+0x176>
 800f33c:	89ab      	ldrh	r3, [r5, #12]
 800f33e:	065b      	lsls	r3, r3, #25
 800f340:	f53f af2c 	bmi.w	800f19c <_svfiprintf_r+0x28>
 800f344:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f346:	b01d      	add	sp, #116	; 0x74
 800f348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f34c:	ab03      	add	r3, sp, #12
 800f34e:	9300      	str	r3, [sp, #0]
 800f350:	462a      	mov	r2, r5
 800f352:	4b06      	ldr	r3, [pc, #24]	; (800f36c <_svfiprintf_r+0x1f8>)
 800f354:	a904      	add	r1, sp, #16
 800f356:	4638      	mov	r0, r7
 800f358:	f000 f87a 	bl	800f450 <_printf_i>
 800f35c:	e7eb      	b.n	800f336 <_svfiprintf_r+0x1c2>
 800f35e:	bf00      	nop
 800f360:	0800f9d4 	.word	0x0800f9d4
 800f364:	0800f9de 	.word	0x0800f9de
 800f368:	00000000 	.word	0x00000000
 800f36c:	0800f0bd 	.word	0x0800f0bd
 800f370:	0800f9da 	.word	0x0800f9da

0800f374 <_printf_common>:
 800f374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f378:	4616      	mov	r6, r2
 800f37a:	4699      	mov	r9, r3
 800f37c:	688a      	ldr	r2, [r1, #8]
 800f37e:	690b      	ldr	r3, [r1, #16]
 800f380:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f384:	4293      	cmp	r3, r2
 800f386:	bfb8      	it	lt
 800f388:	4613      	movlt	r3, r2
 800f38a:	6033      	str	r3, [r6, #0]
 800f38c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f390:	4607      	mov	r7, r0
 800f392:	460c      	mov	r4, r1
 800f394:	b10a      	cbz	r2, 800f39a <_printf_common+0x26>
 800f396:	3301      	adds	r3, #1
 800f398:	6033      	str	r3, [r6, #0]
 800f39a:	6823      	ldr	r3, [r4, #0]
 800f39c:	0699      	lsls	r1, r3, #26
 800f39e:	bf42      	ittt	mi
 800f3a0:	6833      	ldrmi	r3, [r6, #0]
 800f3a2:	3302      	addmi	r3, #2
 800f3a4:	6033      	strmi	r3, [r6, #0]
 800f3a6:	6825      	ldr	r5, [r4, #0]
 800f3a8:	f015 0506 	ands.w	r5, r5, #6
 800f3ac:	d106      	bne.n	800f3bc <_printf_common+0x48>
 800f3ae:	f104 0a19 	add.w	sl, r4, #25
 800f3b2:	68e3      	ldr	r3, [r4, #12]
 800f3b4:	6832      	ldr	r2, [r6, #0]
 800f3b6:	1a9b      	subs	r3, r3, r2
 800f3b8:	42ab      	cmp	r3, r5
 800f3ba:	dc26      	bgt.n	800f40a <_printf_common+0x96>
 800f3bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f3c0:	1e13      	subs	r3, r2, #0
 800f3c2:	6822      	ldr	r2, [r4, #0]
 800f3c4:	bf18      	it	ne
 800f3c6:	2301      	movne	r3, #1
 800f3c8:	0692      	lsls	r2, r2, #26
 800f3ca:	d42b      	bmi.n	800f424 <_printf_common+0xb0>
 800f3cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f3d0:	4649      	mov	r1, r9
 800f3d2:	4638      	mov	r0, r7
 800f3d4:	47c0      	blx	r8
 800f3d6:	3001      	adds	r0, #1
 800f3d8:	d01e      	beq.n	800f418 <_printf_common+0xa4>
 800f3da:	6823      	ldr	r3, [r4, #0]
 800f3dc:	68e5      	ldr	r5, [r4, #12]
 800f3de:	6832      	ldr	r2, [r6, #0]
 800f3e0:	f003 0306 	and.w	r3, r3, #6
 800f3e4:	2b04      	cmp	r3, #4
 800f3e6:	bf08      	it	eq
 800f3e8:	1aad      	subeq	r5, r5, r2
 800f3ea:	68a3      	ldr	r3, [r4, #8]
 800f3ec:	6922      	ldr	r2, [r4, #16]
 800f3ee:	bf0c      	ite	eq
 800f3f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f3f4:	2500      	movne	r5, #0
 800f3f6:	4293      	cmp	r3, r2
 800f3f8:	bfc4      	itt	gt
 800f3fa:	1a9b      	subgt	r3, r3, r2
 800f3fc:	18ed      	addgt	r5, r5, r3
 800f3fe:	2600      	movs	r6, #0
 800f400:	341a      	adds	r4, #26
 800f402:	42b5      	cmp	r5, r6
 800f404:	d11a      	bne.n	800f43c <_printf_common+0xc8>
 800f406:	2000      	movs	r0, #0
 800f408:	e008      	b.n	800f41c <_printf_common+0xa8>
 800f40a:	2301      	movs	r3, #1
 800f40c:	4652      	mov	r2, sl
 800f40e:	4649      	mov	r1, r9
 800f410:	4638      	mov	r0, r7
 800f412:	47c0      	blx	r8
 800f414:	3001      	adds	r0, #1
 800f416:	d103      	bne.n	800f420 <_printf_common+0xac>
 800f418:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f41c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f420:	3501      	adds	r5, #1
 800f422:	e7c6      	b.n	800f3b2 <_printf_common+0x3e>
 800f424:	18e1      	adds	r1, r4, r3
 800f426:	1c5a      	adds	r2, r3, #1
 800f428:	2030      	movs	r0, #48	; 0x30
 800f42a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f42e:	4422      	add	r2, r4
 800f430:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f434:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f438:	3302      	adds	r3, #2
 800f43a:	e7c7      	b.n	800f3cc <_printf_common+0x58>
 800f43c:	2301      	movs	r3, #1
 800f43e:	4622      	mov	r2, r4
 800f440:	4649      	mov	r1, r9
 800f442:	4638      	mov	r0, r7
 800f444:	47c0      	blx	r8
 800f446:	3001      	adds	r0, #1
 800f448:	d0e6      	beq.n	800f418 <_printf_common+0xa4>
 800f44a:	3601      	adds	r6, #1
 800f44c:	e7d9      	b.n	800f402 <_printf_common+0x8e>
	...

0800f450 <_printf_i>:
 800f450:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f454:	7e0f      	ldrb	r7, [r1, #24]
 800f456:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f458:	2f78      	cmp	r7, #120	; 0x78
 800f45a:	4691      	mov	r9, r2
 800f45c:	4680      	mov	r8, r0
 800f45e:	460c      	mov	r4, r1
 800f460:	469a      	mov	sl, r3
 800f462:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f466:	d807      	bhi.n	800f478 <_printf_i+0x28>
 800f468:	2f62      	cmp	r7, #98	; 0x62
 800f46a:	d80a      	bhi.n	800f482 <_printf_i+0x32>
 800f46c:	2f00      	cmp	r7, #0
 800f46e:	f000 80d8 	beq.w	800f622 <_printf_i+0x1d2>
 800f472:	2f58      	cmp	r7, #88	; 0x58
 800f474:	f000 80a3 	beq.w	800f5be <_printf_i+0x16e>
 800f478:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f47c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f480:	e03a      	b.n	800f4f8 <_printf_i+0xa8>
 800f482:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f486:	2b15      	cmp	r3, #21
 800f488:	d8f6      	bhi.n	800f478 <_printf_i+0x28>
 800f48a:	a101      	add	r1, pc, #4	; (adr r1, 800f490 <_printf_i+0x40>)
 800f48c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f490:	0800f4e9 	.word	0x0800f4e9
 800f494:	0800f4fd 	.word	0x0800f4fd
 800f498:	0800f479 	.word	0x0800f479
 800f49c:	0800f479 	.word	0x0800f479
 800f4a0:	0800f479 	.word	0x0800f479
 800f4a4:	0800f479 	.word	0x0800f479
 800f4a8:	0800f4fd 	.word	0x0800f4fd
 800f4ac:	0800f479 	.word	0x0800f479
 800f4b0:	0800f479 	.word	0x0800f479
 800f4b4:	0800f479 	.word	0x0800f479
 800f4b8:	0800f479 	.word	0x0800f479
 800f4bc:	0800f609 	.word	0x0800f609
 800f4c0:	0800f52d 	.word	0x0800f52d
 800f4c4:	0800f5eb 	.word	0x0800f5eb
 800f4c8:	0800f479 	.word	0x0800f479
 800f4cc:	0800f479 	.word	0x0800f479
 800f4d0:	0800f62b 	.word	0x0800f62b
 800f4d4:	0800f479 	.word	0x0800f479
 800f4d8:	0800f52d 	.word	0x0800f52d
 800f4dc:	0800f479 	.word	0x0800f479
 800f4e0:	0800f479 	.word	0x0800f479
 800f4e4:	0800f5f3 	.word	0x0800f5f3
 800f4e8:	682b      	ldr	r3, [r5, #0]
 800f4ea:	1d1a      	adds	r2, r3, #4
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	602a      	str	r2, [r5, #0]
 800f4f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f4f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f4f8:	2301      	movs	r3, #1
 800f4fa:	e0a3      	b.n	800f644 <_printf_i+0x1f4>
 800f4fc:	6820      	ldr	r0, [r4, #0]
 800f4fe:	6829      	ldr	r1, [r5, #0]
 800f500:	0606      	lsls	r6, r0, #24
 800f502:	f101 0304 	add.w	r3, r1, #4
 800f506:	d50a      	bpl.n	800f51e <_printf_i+0xce>
 800f508:	680e      	ldr	r6, [r1, #0]
 800f50a:	602b      	str	r3, [r5, #0]
 800f50c:	2e00      	cmp	r6, #0
 800f50e:	da03      	bge.n	800f518 <_printf_i+0xc8>
 800f510:	232d      	movs	r3, #45	; 0x2d
 800f512:	4276      	negs	r6, r6
 800f514:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f518:	485e      	ldr	r0, [pc, #376]	; (800f694 <_printf_i+0x244>)
 800f51a:	230a      	movs	r3, #10
 800f51c:	e019      	b.n	800f552 <_printf_i+0x102>
 800f51e:	680e      	ldr	r6, [r1, #0]
 800f520:	602b      	str	r3, [r5, #0]
 800f522:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f526:	bf18      	it	ne
 800f528:	b236      	sxthne	r6, r6
 800f52a:	e7ef      	b.n	800f50c <_printf_i+0xbc>
 800f52c:	682b      	ldr	r3, [r5, #0]
 800f52e:	6820      	ldr	r0, [r4, #0]
 800f530:	1d19      	adds	r1, r3, #4
 800f532:	6029      	str	r1, [r5, #0]
 800f534:	0601      	lsls	r1, r0, #24
 800f536:	d501      	bpl.n	800f53c <_printf_i+0xec>
 800f538:	681e      	ldr	r6, [r3, #0]
 800f53a:	e002      	b.n	800f542 <_printf_i+0xf2>
 800f53c:	0646      	lsls	r6, r0, #25
 800f53e:	d5fb      	bpl.n	800f538 <_printf_i+0xe8>
 800f540:	881e      	ldrh	r6, [r3, #0]
 800f542:	4854      	ldr	r0, [pc, #336]	; (800f694 <_printf_i+0x244>)
 800f544:	2f6f      	cmp	r7, #111	; 0x6f
 800f546:	bf0c      	ite	eq
 800f548:	2308      	moveq	r3, #8
 800f54a:	230a      	movne	r3, #10
 800f54c:	2100      	movs	r1, #0
 800f54e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f552:	6865      	ldr	r5, [r4, #4]
 800f554:	60a5      	str	r5, [r4, #8]
 800f556:	2d00      	cmp	r5, #0
 800f558:	bfa2      	ittt	ge
 800f55a:	6821      	ldrge	r1, [r4, #0]
 800f55c:	f021 0104 	bicge.w	r1, r1, #4
 800f560:	6021      	strge	r1, [r4, #0]
 800f562:	b90e      	cbnz	r6, 800f568 <_printf_i+0x118>
 800f564:	2d00      	cmp	r5, #0
 800f566:	d04d      	beq.n	800f604 <_printf_i+0x1b4>
 800f568:	4615      	mov	r5, r2
 800f56a:	fbb6 f1f3 	udiv	r1, r6, r3
 800f56e:	fb03 6711 	mls	r7, r3, r1, r6
 800f572:	5dc7      	ldrb	r7, [r0, r7]
 800f574:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f578:	4637      	mov	r7, r6
 800f57a:	42bb      	cmp	r3, r7
 800f57c:	460e      	mov	r6, r1
 800f57e:	d9f4      	bls.n	800f56a <_printf_i+0x11a>
 800f580:	2b08      	cmp	r3, #8
 800f582:	d10b      	bne.n	800f59c <_printf_i+0x14c>
 800f584:	6823      	ldr	r3, [r4, #0]
 800f586:	07de      	lsls	r6, r3, #31
 800f588:	d508      	bpl.n	800f59c <_printf_i+0x14c>
 800f58a:	6923      	ldr	r3, [r4, #16]
 800f58c:	6861      	ldr	r1, [r4, #4]
 800f58e:	4299      	cmp	r1, r3
 800f590:	bfde      	ittt	le
 800f592:	2330      	movle	r3, #48	; 0x30
 800f594:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f598:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800f59c:	1b52      	subs	r2, r2, r5
 800f59e:	6122      	str	r2, [r4, #16]
 800f5a0:	f8cd a000 	str.w	sl, [sp]
 800f5a4:	464b      	mov	r3, r9
 800f5a6:	aa03      	add	r2, sp, #12
 800f5a8:	4621      	mov	r1, r4
 800f5aa:	4640      	mov	r0, r8
 800f5ac:	f7ff fee2 	bl	800f374 <_printf_common>
 800f5b0:	3001      	adds	r0, #1
 800f5b2:	d14c      	bne.n	800f64e <_printf_i+0x1fe>
 800f5b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f5b8:	b004      	add	sp, #16
 800f5ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5be:	4835      	ldr	r0, [pc, #212]	; (800f694 <_printf_i+0x244>)
 800f5c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f5c4:	6829      	ldr	r1, [r5, #0]
 800f5c6:	6823      	ldr	r3, [r4, #0]
 800f5c8:	f851 6b04 	ldr.w	r6, [r1], #4
 800f5cc:	6029      	str	r1, [r5, #0]
 800f5ce:	061d      	lsls	r5, r3, #24
 800f5d0:	d514      	bpl.n	800f5fc <_printf_i+0x1ac>
 800f5d2:	07df      	lsls	r7, r3, #31
 800f5d4:	bf44      	itt	mi
 800f5d6:	f043 0320 	orrmi.w	r3, r3, #32
 800f5da:	6023      	strmi	r3, [r4, #0]
 800f5dc:	b91e      	cbnz	r6, 800f5e6 <_printf_i+0x196>
 800f5de:	6823      	ldr	r3, [r4, #0]
 800f5e0:	f023 0320 	bic.w	r3, r3, #32
 800f5e4:	6023      	str	r3, [r4, #0]
 800f5e6:	2310      	movs	r3, #16
 800f5e8:	e7b0      	b.n	800f54c <_printf_i+0xfc>
 800f5ea:	6823      	ldr	r3, [r4, #0]
 800f5ec:	f043 0320 	orr.w	r3, r3, #32
 800f5f0:	6023      	str	r3, [r4, #0]
 800f5f2:	2378      	movs	r3, #120	; 0x78
 800f5f4:	4828      	ldr	r0, [pc, #160]	; (800f698 <_printf_i+0x248>)
 800f5f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f5fa:	e7e3      	b.n	800f5c4 <_printf_i+0x174>
 800f5fc:	0659      	lsls	r1, r3, #25
 800f5fe:	bf48      	it	mi
 800f600:	b2b6      	uxthmi	r6, r6
 800f602:	e7e6      	b.n	800f5d2 <_printf_i+0x182>
 800f604:	4615      	mov	r5, r2
 800f606:	e7bb      	b.n	800f580 <_printf_i+0x130>
 800f608:	682b      	ldr	r3, [r5, #0]
 800f60a:	6826      	ldr	r6, [r4, #0]
 800f60c:	6961      	ldr	r1, [r4, #20]
 800f60e:	1d18      	adds	r0, r3, #4
 800f610:	6028      	str	r0, [r5, #0]
 800f612:	0635      	lsls	r5, r6, #24
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	d501      	bpl.n	800f61c <_printf_i+0x1cc>
 800f618:	6019      	str	r1, [r3, #0]
 800f61a:	e002      	b.n	800f622 <_printf_i+0x1d2>
 800f61c:	0670      	lsls	r0, r6, #25
 800f61e:	d5fb      	bpl.n	800f618 <_printf_i+0x1c8>
 800f620:	8019      	strh	r1, [r3, #0]
 800f622:	2300      	movs	r3, #0
 800f624:	6123      	str	r3, [r4, #16]
 800f626:	4615      	mov	r5, r2
 800f628:	e7ba      	b.n	800f5a0 <_printf_i+0x150>
 800f62a:	682b      	ldr	r3, [r5, #0]
 800f62c:	1d1a      	adds	r2, r3, #4
 800f62e:	602a      	str	r2, [r5, #0]
 800f630:	681d      	ldr	r5, [r3, #0]
 800f632:	6862      	ldr	r2, [r4, #4]
 800f634:	2100      	movs	r1, #0
 800f636:	4628      	mov	r0, r5
 800f638:	f7f0 fdfa 	bl	8000230 <memchr>
 800f63c:	b108      	cbz	r0, 800f642 <_printf_i+0x1f2>
 800f63e:	1b40      	subs	r0, r0, r5
 800f640:	6060      	str	r0, [r4, #4]
 800f642:	6863      	ldr	r3, [r4, #4]
 800f644:	6123      	str	r3, [r4, #16]
 800f646:	2300      	movs	r3, #0
 800f648:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f64c:	e7a8      	b.n	800f5a0 <_printf_i+0x150>
 800f64e:	6923      	ldr	r3, [r4, #16]
 800f650:	462a      	mov	r2, r5
 800f652:	4649      	mov	r1, r9
 800f654:	4640      	mov	r0, r8
 800f656:	47d0      	blx	sl
 800f658:	3001      	adds	r0, #1
 800f65a:	d0ab      	beq.n	800f5b4 <_printf_i+0x164>
 800f65c:	6823      	ldr	r3, [r4, #0]
 800f65e:	079b      	lsls	r3, r3, #30
 800f660:	d413      	bmi.n	800f68a <_printf_i+0x23a>
 800f662:	68e0      	ldr	r0, [r4, #12]
 800f664:	9b03      	ldr	r3, [sp, #12]
 800f666:	4298      	cmp	r0, r3
 800f668:	bfb8      	it	lt
 800f66a:	4618      	movlt	r0, r3
 800f66c:	e7a4      	b.n	800f5b8 <_printf_i+0x168>
 800f66e:	2301      	movs	r3, #1
 800f670:	4632      	mov	r2, r6
 800f672:	4649      	mov	r1, r9
 800f674:	4640      	mov	r0, r8
 800f676:	47d0      	blx	sl
 800f678:	3001      	adds	r0, #1
 800f67a:	d09b      	beq.n	800f5b4 <_printf_i+0x164>
 800f67c:	3501      	adds	r5, #1
 800f67e:	68e3      	ldr	r3, [r4, #12]
 800f680:	9903      	ldr	r1, [sp, #12]
 800f682:	1a5b      	subs	r3, r3, r1
 800f684:	42ab      	cmp	r3, r5
 800f686:	dcf2      	bgt.n	800f66e <_printf_i+0x21e>
 800f688:	e7eb      	b.n	800f662 <_printf_i+0x212>
 800f68a:	2500      	movs	r5, #0
 800f68c:	f104 0619 	add.w	r6, r4, #25
 800f690:	e7f5      	b.n	800f67e <_printf_i+0x22e>
 800f692:	bf00      	nop
 800f694:	0800f9e5 	.word	0x0800f9e5
 800f698:	0800f9f6 	.word	0x0800f9f6

0800f69c <memmove>:
 800f69c:	4288      	cmp	r0, r1
 800f69e:	b510      	push	{r4, lr}
 800f6a0:	eb01 0402 	add.w	r4, r1, r2
 800f6a4:	d902      	bls.n	800f6ac <memmove+0x10>
 800f6a6:	4284      	cmp	r4, r0
 800f6a8:	4623      	mov	r3, r4
 800f6aa:	d807      	bhi.n	800f6bc <memmove+0x20>
 800f6ac:	1e43      	subs	r3, r0, #1
 800f6ae:	42a1      	cmp	r1, r4
 800f6b0:	d008      	beq.n	800f6c4 <memmove+0x28>
 800f6b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f6b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f6ba:	e7f8      	b.n	800f6ae <memmove+0x12>
 800f6bc:	4402      	add	r2, r0
 800f6be:	4601      	mov	r1, r0
 800f6c0:	428a      	cmp	r2, r1
 800f6c2:	d100      	bne.n	800f6c6 <memmove+0x2a>
 800f6c4:	bd10      	pop	{r4, pc}
 800f6c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f6ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f6ce:	e7f7      	b.n	800f6c0 <memmove+0x24>

0800f6d0 <_realloc_r>:
 800f6d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6d4:	4680      	mov	r8, r0
 800f6d6:	4614      	mov	r4, r2
 800f6d8:	460e      	mov	r6, r1
 800f6da:	b921      	cbnz	r1, 800f6e6 <_realloc_r+0x16>
 800f6dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f6e0:	4611      	mov	r1, r2
 800f6e2:	f7ff bbd1 	b.w	800ee88 <_malloc_r>
 800f6e6:	b92a      	cbnz	r2, 800f6f4 <_realloc_r+0x24>
 800f6e8:	f7ff fb62 	bl	800edb0 <_free_r>
 800f6ec:	4625      	mov	r5, r4
 800f6ee:	4628      	mov	r0, r5
 800f6f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6f4:	f000 f81b 	bl	800f72e <_malloc_usable_size_r>
 800f6f8:	4284      	cmp	r4, r0
 800f6fa:	4607      	mov	r7, r0
 800f6fc:	d802      	bhi.n	800f704 <_realloc_r+0x34>
 800f6fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f702:	d812      	bhi.n	800f72a <_realloc_r+0x5a>
 800f704:	4621      	mov	r1, r4
 800f706:	4640      	mov	r0, r8
 800f708:	f7ff fbbe 	bl	800ee88 <_malloc_r>
 800f70c:	4605      	mov	r5, r0
 800f70e:	2800      	cmp	r0, #0
 800f710:	d0ed      	beq.n	800f6ee <_realloc_r+0x1e>
 800f712:	42bc      	cmp	r4, r7
 800f714:	4622      	mov	r2, r4
 800f716:	4631      	mov	r1, r6
 800f718:	bf28      	it	cs
 800f71a:	463a      	movcs	r2, r7
 800f71c:	f7ff fb32 	bl	800ed84 <memcpy>
 800f720:	4631      	mov	r1, r6
 800f722:	4640      	mov	r0, r8
 800f724:	f7ff fb44 	bl	800edb0 <_free_r>
 800f728:	e7e1      	b.n	800f6ee <_realloc_r+0x1e>
 800f72a:	4635      	mov	r5, r6
 800f72c:	e7df      	b.n	800f6ee <_realloc_r+0x1e>

0800f72e <_malloc_usable_size_r>:
 800f72e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f732:	1f18      	subs	r0, r3, #4
 800f734:	2b00      	cmp	r3, #0
 800f736:	bfbc      	itt	lt
 800f738:	580b      	ldrlt	r3, [r1, r0]
 800f73a:	18c0      	addlt	r0, r0, r3
 800f73c:	4770      	bx	lr
	...

0800f740 <_init>:
 800f740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f742:	bf00      	nop
 800f744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f746:	bc08      	pop	{r3}
 800f748:	469e      	mov	lr, r3
 800f74a:	4770      	bx	lr

0800f74c <_fini>:
 800f74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f74e:	bf00      	nop
 800f750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f752:	bc08      	pop	{r3}
 800f754:	469e      	mov	lr, r3
 800f756:	4770      	bx	lr
