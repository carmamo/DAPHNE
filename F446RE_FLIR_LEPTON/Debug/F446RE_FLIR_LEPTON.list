
F446RE_FLIR_LEPTON.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004890  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004a54  08004a54  00014a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a6c  08004a6c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004a6c  08004a6c  00014a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a74  08004a74  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a74  08004a74  00014a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a78  08004a78  00014a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004a7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006600  20000074  08004af0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006674  08004af0  00026674  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f43a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000209f  00000000  00000000  0002f4de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c70  00000000  00000000  00031580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc0  00000000  00000000  000321f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021fe3  00000000  00000000  00032db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001009b  00000000  00000000  00054d93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ccf3d  00000000  00000000  00064e2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00131d6b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035f8  00000000  00000000  00131dbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000074 	.word	0x20000074
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004a3c 	.word	0x08004a3c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000078 	.word	0x20000078
 8000200:	08004a3c 	.word	0x08004a3c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <lepton_Init>:

static lepton_t dev;


void lepton_Init(I2C_HandleTypeDef *i2c, SPI_HandleTypeDef *spi, UART_HandleTypeDef *uart, GPIO_TypeDef *port, uint16_t pin)
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
 8000514:	603b      	str	r3, [r7, #0]
	dev.spiHandle = spi;
 8000516:	4a0a      	ldr	r2, [pc, #40]	; (8000540 <lepton_Init+0x38>)
 8000518:	68bb      	ldr	r3, [r7, #8]
 800051a:	6053      	str	r3, [r2, #4]
	dev.uartHandle = uart;
 800051c:	4a08      	ldr	r2, [pc, #32]	; (8000540 <lepton_Init+0x38>)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	6113      	str	r3, [r2, #16]
	dev.i2cHandle = i2c;
 8000522:	4a07      	ldr	r2, [pc, #28]	; (8000540 <lepton_Init+0x38>)
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	6013      	str	r3, [r2, #0]
	dev.CS_port = port;
 8000528:	4a05      	ldr	r2, [pc, #20]	; (8000540 <lepton_Init+0x38>)
 800052a:	683b      	ldr	r3, [r7, #0]
 800052c:	6093      	str	r3, [r2, #8]
	dev.CS_pin = pin;
 800052e:	4a04      	ldr	r2, [pc, #16]	; (8000540 <lepton_Init+0x38>)
 8000530:	8b3b      	ldrh	r3, [r7, #24]
 8000532:	8193      	strh	r3, [r2, #12]
}
 8000534:	bf00      	nop
 8000536:	3714      	adds	r7, #20
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr
 8000540:	20006558 	.word	0x20006558

08000544 <print_image_binary_background>:

void print_image_binary_background(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
	switch(image_state)
 8000548:	4b3d      	ldr	r3, [pc, #244]	; (8000640 <print_image_binary_background+0xfc>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	2b04      	cmp	r3, #4
 800054e:	d872      	bhi.n	8000636 <print_image_binary_background+0xf2>
 8000550:	a201      	add	r2, pc, #4	; (adr r2, 8000558 <print_image_binary_background+0x14>)
 8000552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000556:	bf00      	nop
 8000558:	0800056d 	.word	0x0800056d
 800055c:	0800057f 	.word	0x0800057f
 8000560:	08000591 	.word	0x08000591
 8000564:	080005a3 	.word	0x080005a3
 8000568:	080005c1 	.word	0x080005c1
	{
	case 0:
		send_byte(0xDE);
 800056c:	20de      	movs	r0, #222	; 0xde
 800056e:	f000 fa55 	bl	8000a1c <send_byte>
		image_state++;
 8000572:	4b33      	ldr	r3, [pc, #204]	; (8000640 <print_image_binary_background+0xfc>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	3301      	adds	r3, #1
 8000578:	4a31      	ldr	r2, [pc, #196]	; (8000640 <print_image_binary_background+0xfc>)
 800057a:	6013      	str	r3, [r2, #0]
		break;
 800057c:	e05e      	b.n	800063c <print_image_binary_background+0xf8>
	case 1:
		send_byte(0xAD);
 800057e:	20ad      	movs	r0, #173	; 0xad
 8000580:	f000 fa4c 	bl	8000a1c <send_byte>
		image_state++;
 8000584:	4b2e      	ldr	r3, [pc, #184]	; (8000640 <print_image_binary_background+0xfc>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	3301      	adds	r3, #1
 800058a:	4a2d      	ldr	r2, [pc, #180]	; (8000640 <print_image_binary_background+0xfc>)
 800058c:	6013      	str	r3, [r2, #0]
		break;
 800058e:	e055      	b.n	800063c <print_image_binary_background+0xf8>
	case 2:
		send_byte(0xBE);
 8000590:	20be      	movs	r0, #190	; 0xbe
 8000592:	f000 fa43 	bl	8000a1c <send_byte>
		image_state++;
 8000596:	4b2a      	ldr	r3, [pc, #168]	; (8000640 <print_image_binary_background+0xfc>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	3301      	adds	r3, #1
 800059c:	4a28      	ldr	r2, [pc, #160]	; (8000640 <print_image_binary_background+0xfc>)
 800059e:	6013      	str	r3, [r2, #0]
		break;
 80005a0:	e04c      	b.n	800063c <print_image_binary_background+0xf8>
	case 3:
		send_byte(0xEF);
 80005a2:	20ef      	movs	r0, #239	; 0xef
 80005a4:	f000 fa3a 	bl	8000a1c <send_byte>
		image_state++;
 80005a8:	4b25      	ldr	r3, [pc, #148]	; (8000640 <print_image_binary_background+0xfc>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	3301      	adds	r3, #1
 80005ae:	4a24      	ldr	r2, [pc, #144]	; (8000640 <print_image_binary_background+0xfc>)
 80005b0:	6013      	str	r3, [r2, #0]
		print_image_binary_i = 0;
 80005b2:	4b24      	ldr	r3, [pc, #144]	; (8000644 <print_image_binary_background+0x100>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
		print_image_binary_j = 0;
 80005b8:	4b23      	ldr	r3, [pc, #140]	; (8000648 <print_image_binary_background+0x104>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
		break;
 80005be:	e03d      	b.n	800063c <print_image_binary_background+0xf8>
	case 4:
		send_byte((lepton_image[print_image_binary_i][print_image_binary_j] >> 8)&0xff);
 80005c0:	4b20      	ldr	r3, [pc, #128]	; (8000644 <print_image_binary_background+0x100>)
 80005c2:	681a      	ldr	r2, [r3, #0]
 80005c4:	4b20      	ldr	r3, [pc, #128]	; (8000648 <print_image_binary_background+0x104>)
 80005c6:	6819      	ldr	r1, [r3, #0]
 80005c8:	4820      	ldr	r0, [pc, #128]	; (800064c <print_image_binary_background+0x108>)
 80005ca:	4613      	mov	r3, r2
 80005cc:	009b      	lsls	r3, r3, #2
 80005ce:	4413      	add	r3, r2
 80005d0:	011b      	lsls	r3, r3, #4
 80005d2:	440b      	add	r3, r1
 80005d4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80005d8:	121b      	asrs	r3, r3, #8
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	4618      	mov	r0, r3
 80005de:	f000 fa1d 	bl	8000a1c <send_byte>
		send_byte((lepton_image[print_image_binary_i][print_image_binary_j])&0xff);
 80005e2:	4b18      	ldr	r3, [pc, #96]	; (8000644 <print_image_binary_background+0x100>)
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	4b18      	ldr	r3, [pc, #96]	; (8000648 <print_image_binary_background+0x104>)
 80005e8:	6819      	ldr	r1, [r3, #0]
 80005ea:	4818      	ldr	r0, [pc, #96]	; (800064c <print_image_binary_background+0x108>)
 80005ec:	4613      	mov	r3, r2
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	4413      	add	r3, r2
 80005f2:	011b      	lsls	r3, r3, #4
 80005f4:	440b      	add	r3, r1
 80005f6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 fa0d 	bl	8000a1c <send_byte>

		print_image_binary_j++;
 8000602:	4b11      	ldr	r3, [pc, #68]	; (8000648 <print_image_binary_background+0x104>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	3301      	adds	r3, #1
 8000608:	4a0f      	ldr	r2, [pc, #60]	; (8000648 <print_image_binary_background+0x104>)
 800060a:	6013      	str	r3, [r2, #0]
		if(print_image_binary_j >= 80)
 800060c:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <print_image_binary_background+0x104>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2b4f      	cmp	r3, #79	; 0x4f
 8000612:	dd12      	ble.n	800063a <print_image_binary_background+0xf6>
		{
			print_image_binary_j=0;
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <print_image_binary_background+0x104>)
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
			print_image_binary_i++;
 800061a:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <print_image_binary_background+0x100>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	3301      	adds	r3, #1
 8000620:	4a08      	ldr	r2, [pc, #32]	; (8000644 <print_image_binary_background+0x100>)
 8000622:	6013      	str	r3, [r2, #0]
			if(print_image_binary_i >= 60) image_state = -1;
 8000624:	4b07      	ldr	r3, [pc, #28]	; (8000644 <print_image_binary_background+0x100>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	2b3b      	cmp	r3, #59	; 0x3b
 800062a:	dd06      	ble.n	800063a <print_image_binary_background+0xf6>
 800062c:	4b04      	ldr	r3, [pc, #16]	; (8000640 <print_image_binary_background+0xfc>)
 800062e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000632:	601a      	str	r2, [r3, #0]
		}
		break;
 8000634:	e001      	b.n	800063a <print_image_binary_background+0xf6>
	default:
		break;
 8000636:	bf00      	nop
 8000638:	e000      	b.n	800063c <print_image_binary_background+0xf8>
		break;
 800063a:	bf00      	nop
	}

}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000000 	.word	0x20000000
 8000644:	20006534 	.word	0x20006534
 8000648:	20006538 	.word	0x20006538
 800064c:	20000134 	.word	0x20000134

08000650 <transfer>:

void transfer(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(dev.CS_port, dev.CS_pin, GPIO_PIN_RESET);
	//HAL_SPI_Receive(dev.spiHandle, lepton_frame_packet, FRAME_SIZE,100);
	HAL_GPIO_WritePin(dev.CS_port, dev.CS_pin, GPIO_PIN_SET);
 8000656:	4b50      	ldr	r3, [pc, #320]	; (8000798 <transfer+0x148>)
 8000658:	689b      	ldr	r3, [r3, #8]
 800065a:	4a4f      	ldr	r2, [pc, #316]	; (8000798 <transfer+0x148>)
 800065c:	8991      	ldrh	r1, [r2, #12]
 800065e:	2201      	movs	r2, #1
 8000660:	4618      	mov	r0, r3
 8000662:	f001 f93f 	bl	80018e4 <HAL_GPIO_WritePin>

	if((lepton_frame_packet[0] & 0xf) != 0x0f)
 8000666:	4b4d      	ldr	r3, [pc, #308]	; (800079c <transfer+0x14c>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	f003 030f 	and.w	r3, r3, #15
 800066e:	2b0f      	cmp	r3, #15
 8000670:	d05a      	beq.n	8000728 <transfer+0xd8>
	{
		if(lepton_frame_packet[1] == 0)
 8000672:	4b4a      	ldr	r3, [pc, #296]	; (800079c <transfer+0x14c>)
 8000674:	785b      	ldrb	r3, [r3, #1]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d117      	bne.n	80006aa <transfer+0x5a>
		{
			if(last_crc != (lepton_frame_packet[3] << 8 | lepton_frame_packet[4]))
 800067a:	4b48      	ldr	r3, [pc, #288]	; (800079c <transfer+0x14c>)
 800067c:	78db      	ldrb	r3, [r3, #3]
 800067e:	021b      	lsls	r3, r3, #8
 8000680:	4a46      	ldr	r2, [pc, #280]	; (800079c <transfer+0x14c>)
 8000682:	7912      	ldrb	r2, [r2, #4]
 8000684:	431a      	orrs	r2, r3
 8000686:	4b46      	ldr	r3, [pc, #280]	; (80007a0 <transfer+0x150>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	429a      	cmp	r2, r3
 800068c:	d005      	beq.n	800069a <transfer+0x4a>
			{
				lost_frame_counter = 0;
 800068e:	4b45      	ldr	r3, [pc, #276]	; (80007a4 <transfer+0x154>)
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
				new_frame = 1;
 8000694:	4b44      	ldr	r3, [pc, #272]	; (80007a8 <transfer+0x158>)
 8000696:	2201      	movs	r2, #1
 8000698:	601a      	str	r2, [r3, #0]
			}
			last_crc = lepton_frame_packet[3] << 8 | lepton_frame_packet[4];
 800069a:	4b40      	ldr	r3, [pc, #256]	; (800079c <transfer+0x14c>)
 800069c:	78db      	ldrb	r3, [r3, #3]
 800069e:	021b      	lsls	r3, r3, #8
 80006a0:	4a3e      	ldr	r2, [pc, #248]	; (800079c <transfer+0x14c>)
 80006a2:	7912      	ldrb	r2, [r2, #4]
 80006a4:	4313      	orrs	r3, r2
 80006a6:	4a3e      	ldr	r2, [pc, #248]	; (80007a0 <transfer+0x150>)
 80006a8:	6013      	str	r3, [r2, #0]

		}

		frame_number = lepton_frame_packet[1];
 80006aa:	4b3c      	ldr	r3, [pc, #240]	; (800079c <transfer+0x14c>)
 80006ac:	785b      	ldrb	r3, [r3, #1]
 80006ae:	461a      	mov	r2, r3
 80006b0:	4b3e      	ldr	r3, [pc, #248]	; (80007ac <transfer+0x15c>)
 80006b2:	601a      	str	r2, [r3, #0]

		if(frame_number < 60)
 80006b4:	4b3d      	ldr	r3, [pc, #244]	; (80007ac <transfer+0x15c>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b3b      	cmp	r3, #59	; 0x3b
 80006ba:	dc26      	bgt.n	800070a <transfer+0xba>
		{

			if(image_state == -1)
 80006bc:	4b3c      	ldr	r3, [pc, #240]	; (80007b0 <transfer+0x160>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80006c4:	d126      	bne.n	8000714 <transfer+0xc4>
			{
				for(int i = 0; i < 80; i++)
 80006c6:	2300      	movs	r3, #0
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	e01a      	b.n	8000702 <transfer+0xb2>
				{
					lepton_image[frame_number][i] = (lepton_frame_packet[2*i+4] << 8 | lepton_frame_packet[2*i+5]);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	3302      	adds	r3, #2
 80006d0:	005b      	lsls	r3, r3, #1
 80006d2:	4a32      	ldr	r2, [pc, #200]	; (800079c <transfer+0x14c>)
 80006d4:	5cd3      	ldrb	r3, [r2, r3]
 80006d6:	021b      	lsls	r3, r3, #8
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	0052      	lsls	r2, r2, #1
 80006dc:	3205      	adds	r2, #5
 80006de:	492f      	ldr	r1, [pc, #188]	; (800079c <transfer+0x14c>)
 80006e0:	5c8a      	ldrb	r2, [r1, r2]
 80006e2:	4611      	mov	r1, r2
 80006e4:	4a31      	ldr	r2, [pc, #196]	; (80007ac <transfer+0x15c>)
 80006e6:	6812      	ldr	r2, [r2, #0]
 80006e8:	4319      	orrs	r1, r3
 80006ea:	4832      	ldr	r0, [pc, #200]	; (80007b4 <transfer+0x164>)
 80006ec:	4613      	mov	r3, r2
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	4413      	add	r3, r2
 80006f2:	011b      	lsls	r3, r3, #4
 80006f4:	687a      	ldr	r2, [r7, #4]
 80006f6:	4413      	add	r3, r2
 80006f8:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
				for(int i = 0; i < 80; i++)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	3301      	adds	r3, #1
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2b4f      	cmp	r3, #79	; 0x4f
 8000706:	dde1      	ble.n	80006cc <transfer+0x7c>
 8000708:	e004      	b.n	8000714 <transfer+0xc4>
				}
			}
		}
		else
		{
			lost_frame_counter++;
 800070a:	4b26      	ldr	r3, [pc, #152]	; (80007a4 <transfer+0x154>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	3301      	adds	r3, #1
 8000710:	4a24      	ldr	r2, [pc, #144]	; (80007a4 <transfer+0x154>)
 8000712:	6013      	str	r3, [r2, #0]
		}



		if(frame_number == 59)
 8000714:	4b25      	ldr	r3, [pc, #148]	; (80007ac <transfer+0x15c>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	2b3b      	cmp	r3, #59	; 0x3b
 800071a:	d105      	bne.n	8000728 <transfer+0xd8>
		{
			frame_complete = 1;
 800071c:	4b26      	ldr	r3, [pc, #152]	; (80007b8 <transfer+0x168>)
 800071e:	2201      	movs	r2, #1
 8000720:	601a      	str	r2, [r3, #0]
			last_frame_number = 0;
 8000722:	4b26      	ldr	r3, [pc, #152]	; (80007bc <transfer+0x16c>)
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
		}
	}

	lost_frame_counter++;
 8000728:	4b1e      	ldr	r3, [pc, #120]	; (80007a4 <transfer+0x154>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	3301      	adds	r3, #1
 800072e:	4a1d      	ldr	r2, [pc, #116]	; (80007a4 <transfer+0x154>)
 8000730:	6013      	str	r3, [r2, #0]
	if(lost_frame_counter > 100)
 8000732:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <transfer+0x154>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	2b64      	cmp	r3, #100	; 0x64
 8000738:	dd05      	ble.n	8000746 <transfer+0xf6>
	{
		HAL_Delay(185);				// RESYNC
 800073a:	20b9      	movs	r0, #185	; 0xb9
 800073c:	f000 fdb4 	bl	80012a8 <HAL_Delay>
		lost_frame_counter = 0;
 8000740:	4b18      	ldr	r3, [pc, #96]	; (80007a4 <transfer+0x154>)
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
	}


	if(frame_complete)
 8000746:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <transfer+0x168>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d020      	beq.n	8000790 <transfer+0x140>
	{
		if(new_frame)
 800074e:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <transfer+0x158>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d019      	beq.n	800078a <transfer+0x13a>
		{
			frame_counter++;
 8000756:	4b1a      	ldr	r3, [pc, #104]	; (80007c0 <transfer+0x170>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	3301      	adds	r3, #1
 800075c:	4a18      	ldr	r2, [pc, #96]	; (80007c0 <transfer+0x170>)
 800075e:	6013      	str	r3, [r2, #0]
			if(frame_counter%18 == 0)
 8000760:	4b17      	ldr	r3, [pc, #92]	; (80007c0 <transfer+0x170>)
 8000762:	6819      	ldr	r1, [r3, #0]
 8000764:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <transfer+0x174>)
 8000766:	fb83 2301 	smull	r2, r3, r3, r1
 800076a:	109a      	asrs	r2, r3, #2
 800076c:	17cb      	asrs	r3, r1, #31
 800076e:	1ad2      	subs	r2, r2, r3
 8000770:	4613      	mov	r3, r2
 8000772:	00db      	lsls	r3, r3, #3
 8000774:	4413      	add	r3, r2
 8000776:	005b      	lsls	r3, r3, #1
 8000778:	1aca      	subs	r2, r1, r3
 800077a:	2a00      	cmp	r2, #0
 800077c:	d102      	bne.n	8000784 <transfer+0x134>
			{
				image_state = 0;
 800077e:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <transfer+0x160>)
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
			}
			new_frame = 0;
 8000784:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <transfer+0x158>)
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
		}
		frame_complete = 0;
 800078a:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <transfer+0x168>)
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
	}
}
 8000790:	bf00      	nop
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20006558 	.word	0x20006558
 800079c:	20000090 	.word	0x20000090
 80007a0:	20006548 	.word	0x20006548
 80007a4:	2000653c 	.word	0x2000653c
 80007a8:	2000654c 	.word	0x2000654c
 80007ac:	20006554 	.word	0x20006554
 80007b0:	20000000 	.word	0x20000000
 80007b4:	20000134 	.word	0x20000134
 80007b8:	20006544 	.word	0x20006544
 80007bc:	20006540 	.word	0x20006540
 80007c0:	20006550 	.word	0x20006550
 80007c4:	38e38e39 	.word	0x38e38e39

080007c8 <lepton_getPacket>:

void lepton_getPacket(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(dev.CS_port, dev.CS_pin, GPIO_PIN_RESET);
 80007cc:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <lepton_getPacket+0x28>)
 80007ce:	689b      	ldr	r3, [r3, #8]
 80007d0:	4a07      	ldr	r2, [pc, #28]	; (80007f0 <lepton_getPacket+0x28>)
 80007d2:	8991      	ldrh	r1, [r2, #12]
 80007d4:	2200      	movs	r2, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f001 f884 	bl	80018e4 <HAL_GPIO_WritePin>
	HAL_SPI_Receive_IT(dev.spiHandle, lepton_frame_packet, FRAME_SIZE);
 80007dc:	4b04      	ldr	r3, [pc, #16]	; (80007f0 <lepton_getPacket+0x28>)
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	22a4      	movs	r2, #164	; 0xa4
 80007e2:	4904      	ldr	r1, [pc, #16]	; (80007f4 <lepton_getPacket+0x2c>)
 80007e4:	4618      	mov	r0, r3
 80007e6:	f002 fee1 	bl	80035ac <HAL_SPI_Receive_IT>
}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20006558 	.word	0x20006558
 80007f4:	20000090 	.word	0x20000090

080007f8 <lepton_GetReg>:
	array[1] = reg;
	return HAL_I2C_Master_Transmit(dev.i2cHandle, LEPTON_I2C_ADDR, array, 2, 100);
}

HAL_StatusTypeDef lepton_GetReg(uint16_t reg, uint16_t *rxdata)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b088      	sub	sp, #32
 80007fc:	af04      	add	r7, sp, #16
 80007fe:	4603      	mov	r3, r0
 8000800:	6039      	str	r1, [r7, #0]
 8000802:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;

	status = HAL_I2C_Mem_Read(dev.i2cHandle, LEPTON_I2C_ADDR, reg, 2, (uint8_t *)rxdata, 2, 100);
 8000804:	4b10      	ldr	r3, [pc, #64]	; (8000848 <lepton_GetReg+0x50>)
 8000806:	6818      	ldr	r0, [r3, #0]
 8000808:	88fa      	ldrh	r2, [r7, #6]
 800080a:	2364      	movs	r3, #100	; 0x64
 800080c:	9302      	str	r3, [sp, #8]
 800080e:	2302      	movs	r3, #2
 8000810:	9301      	str	r3, [sp, #4]
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	9300      	str	r3, [sp, #0]
 8000816:	2302      	movs	r3, #2
 8000818:	2154      	movs	r1, #84	; 0x54
 800081a:	f001 fad3 	bl	8001dc4 <HAL_I2C_Mem_Read>
 800081e:	4603      	mov	r3, r0
 8000820:	73fb      	strb	r3, [r7, #15]
	*rxdata = (*rxdata >> 8 | *rxdata << 8);
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	881b      	ldrh	r3, [r3, #0]
 8000826:	0a1b      	lsrs	r3, r3, #8
 8000828:	b29b      	uxth	r3, r3
 800082a:	b21a      	sxth	r2, r3
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	881b      	ldrh	r3, [r3, #0]
 8000830:	021b      	lsls	r3, r3, #8
 8000832:	b21b      	sxth	r3, r3
 8000834:	4313      	orrs	r3, r2
 8000836:	b21b      	sxth	r3, r3
 8000838:	b29a      	uxth	r2, r3
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	801a      	strh	r2, [r3, #0]
	return status;
 800083e:	7bfb      	ldrb	r3, [r7, #15]

//	lepton_SetReg(reg);
//	return HAL_I2C_Master_Receive(dev.i2cHandle, LEPTON_I2C_ADDR, (uint8_t *)rxdata, 2, 100);

}
 8000840:	4618      	mov	r0, r3
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20006558 	.word	0x20006558

0800084c <lepton_SetData>:
HAL_StatusTypeDef lepton_SetData(uint8_t *txdata, uint16_t size)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b088      	sub	sp, #32
 8000850:	af04      	add	r7, sp, #16
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	460b      	mov	r3, r1
 8000856:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef status;
	uint16_t *rxdata = (uint16_t *)malloc(sizeof(uint16_t));
 8000858:	2002      	movs	r0, #2
 800085a:	f003 ffd9 	bl	8004810 <malloc>
 800085e:	4603      	mov	r3, r0
 8000860:	60fb      	str	r3, [r7, #12]

	do
	{
		lepton_GetReg(0x0002, rxdata);
 8000862:	68f9      	ldr	r1, [r7, #12]
 8000864:	2002      	movs	r0, #2
 8000866:	f7ff ffc7 	bl	80007f8 <lepton_GetReg>
	}
	while(*rxdata & 0x01);
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	881b      	ldrh	r3, [r3, #0]
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	2b00      	cmp	r3, #0
 8000874:	d1f5      	bne.n	8000862 <lepton_SetData+0x16>

//	HAL_I2C_Master_Transmit(dev.i2cHandle, LEPTON_I2C_ADDR, txdata, size, 100);

	// Write data, 0x0008 Data 0 Address (beginning of data block)
	status = HAL_I2C_Mem_Write(dev.i2cHandle, LEPTON_I2C_ADDR, 0x0008, 2, txdata, size, 100);
 8000876:	4b1e      	ldr	r3, [pc, #120]	; (80008f0 <lepton_SetData+0xa4>)
 8000878:	6818      	ldr	r0, [r3, #0]
 800087a:	887b      	ldrh	r3, [r7, #2]
 800087c:	2264      	movs	r2, #100	; 0x64
 800087e:	9202      	str	r2, [sp, #8]
 8000880:	9301      	str	r3, [sp, #4]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	2302      	movs	r3, #2
 8000888:	2208      	movs	r2, #8
 800088a:	2154      	movs	r1, #84	; 0x54
 800088c:	f001 f9a0 	bl	8001bd0 <HAL_I2C_Mem_Write>
 8000890:	4603      	mov	r3, r0
 8000892:	72fb      	strb	r3, [r7, #11]
	if(status != HAL_OK)
 8000894:	7afb      	ldrb	r3, [r7, #11]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d004      	beq.n	80008a4 <lepton_SetData+0x58>
	{
		free(rxdata);
 800089a:	68f8      	ldr	r0, [r7, #12]
 800089c:	f003 ffc0 	bl	8004820 <free>
		return status;
 80008a0:	7afb      	ldrb	r3, [r7, #11]
 80008a2:	e021      	b.n	80008e8 <lepton_SetData+0x9c>
	}

	// Write data length, 0x0006 Data Length Register
	size = size >> 1;
 80008a4:	887b      	ldrh	r3, [r7, #2]
 80008a6:	085b      	lsrs	r3, r3, #1
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	807b      	strh	r3, [r7, #2]
	size = (size >> 8 | size << 8);
 80008ac:	887b      	ldrh	r3, [r7, #2]
 80008ae:	0a1b      	lsrs	r3, r3, #8
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	b21a      	sxth	r2, r3
 80008b4:	887b      	ldrh	r3, [r7, #2]
 80008b6:	021b      	lsls	r3, r3, #8
 80008b8:	b21b      	sxth	r3, r3
 80008ba:	4313      	orrs	r3, r2
 80008bc:	b21b      	sxth	r3, r3
 80008be:	b29b      	uxth	r3, r3
 80008c0:	807b      	strh	r3, [r7, #2]
	status = HAL_I2C_Mem_Write(dev.i2cHandle, LEPTON_I2C_ADDR, 0x0006, 2, (uint8_t *)&size, 2, 100);
 80008c2:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <lepton_SetData+0xa4>)
 80008c4:	6818      	ldr	r0, [r3, #0]
 80008c6:	2364      	movs	r3, #100	; 0x64
 80008c8:	9302      	str	r3, [sp, #8]
 80008ca:	2302      	movs	r3, #2
 80008cc:	9301      	str	r3, [sp, #4]
 80008ce:	1cbb      	adds	r3, r7, #2
 80008d0:	9300      	str	r3, [sp, #0]
 80008d2:	2302      	movs	r3, #2
 80008d4:	2206      	movs	r2, #6
 80008d6:	2154      	movs	r1, #84	; 0x54
 80008d8:	f001 f97a 	bl	8001bd0 <HAL_I2C_Mem_Write>
 80008dc:	4603      	mov	r3, r0
 80008de:	72fb      	strb	r3, [r7, #11]

	free(rxdata);
 80008e0:	68f8      	ldr	r0, [r7, #12]
 80008e2:	f003 ff9d 	bl	8004820 <free>
	return status;
 80008e6:	7afb      	ldrb	r3, [r7, #11]
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3710      	adds	r7, #16
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20006558 	.word	0x20006558

080008f4 <lepton_command>:
//	*rxdata = (*rxdata >> 8 | *rxdata << 8);
	return status;
}

HAL_StatusTypeDef lepton_command(uint16_t cmd)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b088      	sub	sp, #32
 80008f8:	af04      	add	r7, sp, #16
 80008fa:	4603      	mov	r3, r0
 80008fc:	80fb      	strh	r3, [r7, #6]
	uint16_t *rxdata = (uint16_t *)malloc(sizeof(uint16_t));
 80008fe:	2002      	movs	r0, #2
 8000900:	f003 ff86 	bl	8004810 <malloc>
 8000904:	4603      	mov	r3, r0
 8000906:	60fb      	str	r3, [r7, #12]

	do
	{
		lepton_GetReg(0x02, rxdata);
 8000908:	68f9      	ldr	r1, [r7, #12]
 800090a:	2002      	movs	r0, #2
 800090c:	f7ff ff74 	bl	80007f8 <lepton_GetReg>
	}
	while(*rxdata & 0x01);
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	881b      	ldrh	r3, [r3, #0]
 8000914:	f003 0301 	and.w	r3, r3, #1
 8000918:	2b00      	cmp	r3, #0
 800091a:	d1f5      	bne.n	8000908 <lepton_command+0x14>

	free(rxdata);
 800091c:	68f8      	ldr	r0, [r7, #12]
 800091e:	f003 ff7f 	bl	8004820 <free>
	cmd = (cmd >> 8 | cmd << 8);
 8000922:	88fb      	ldrh	r3, [r7, #6]
 8000924:	0a1b      	lsrs	r3, r3, #8
 8000926:	b29b      	uxth	r3, r3
 8000928:	b21a      	sxth	r2, r3
 800092a:	88fb      	ldrh	r3, [r7, #6]
 800092c:	021b      	lsls	r3, r3, #8
 800092e:	b21b      	sxth	r3, r3
 8000930:	4313      	orrs	r3, r2
 8000932:	b21b      	sxth	r3, r3
 8000934:	b29b      	uxth	r3, r3
 8000936:	80fb      	strh	r3, [r7, #6]
	return HAL_I2C_Mem_Write(dev.i2cHandle, LEPTON_I2C_ADDR, 0x0004, 2, (uint8_t *)&cmd, 2, 100);
 8000938:	4b08      	ldr	r3, [pc, #32]	; (800095c <lepton_command+0x68>)
 800093a:	6818      	ldr	r0, [r3, #0]
 800093c:	2364      	movs	r3, #100	; 0x64
 800093e:	9302      	str	r3, [sp, #8]
 8000940:	2302      	movs	r3, #2
 8000942:	9301      	str	r3, [sp, #4]
 8000944:	1dbb      	adds	r3, r7, #6
 8000946:	9300      	str	r3, [sp, #0]
 8000948:	2302      	movs	r3, #2
 800094a:	2204      	movs	r2, #4
 800094c:	2154      	movs	r1, #84	; 0x54
 800094e:	f001 f93f 	bl	8001bd0 <HAL_I2C_Mem_Write>
 8000952:	4603      	mov	r3, r0
}
 8000954:	4618      	mov	r0, r3
 8000956:	3710      	adds	r7, #16
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20006558 	.word	0x20006558

08000960 <lepton_radiometry>:

HAL_StatusTypeDef lepton_radiometry(bool rad_enabled)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	71fb      	strb	r3, [r7, #7]
	uint8_t *data = (uint8_t *)malloc(4*sizeof(uint8_t));
 800096a:	2004      	movs	r0, #4
 800096c:	f003 ff50 	bl	8004810 <malloc>
 8000970:	4603      	mov	r3, r0
 8000972:	60bb      	str	r3, [r7, #8]
	for(int i=0; i<4; i++)
 8000974:	2300      	movs	r3, #0
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	e007      	b.n	800098a <lepton_radiometry+0x2a>
	{
		data[i] = 0x00;
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	68ba      	ldr	r2, [r7, #8]
 800097e:	4413      	add	r3, r2
 8000980:	2200      	movs	r2, #0
 8000982:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<4; i++)
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	3301      	adds	r3, #1
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	2b03      	cmp	r3, #3
 800098e:	ddf4      	ble.n	800097a <lepton_radiometry+0x1a>
	}

	if(rad_enabled) data[1] = 0x01;
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d003      	beq.n	800099e <lepton_radiometry+0x3e>
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	3301      	adds	r3, #1
 800099a:	2201      	movs	r2, #1
 800099c:	701a      	strb	r2, [r3, #0]

	lepton_SetData(data, 4);
 800099e:	2104      	movs	r1, #4
 80009a0:	68b8      	ldr	r0, [r7, #8]
 80009a2:	f7ff ff53 	bl	800084c <lepton_SetData>
	free(data);
 80009a6:	68b8      	ldr	r0, [r7, #8]
 80009a8:	f003 ff3a 	bl	8004820 <free>

	/* 0x0E00 (RAD Module ID) + 0x10 (Command Base - Ctrl enable) + 0x01 (Set) + 0x4000 (Protection Bit) = 0x4E11 */
	return lepton_command(0x4E11);
 80009ac:	f644 6011 	movw	r0, #19985	; 0x4e11
 80009b0:	f7ff ffa0 	bl	80008f4 <lepton_command>
 80009b4:	4603      	mov	r3, r0
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3710      	adds	r7, #16
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <lepton_vsync>:

HAL_StatusTypeDef lepton_vsync(bool vsync_enabled)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b084      	sub	sp, #16
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	4603      	mov	r3, r0
 80009c6:	71fb      	strb	r3, [r7, #7]
	uint8_t *data = (uint8_t *)malloc(4*sizeof(uint8_t));
 80009c8:	2004      	movs	r0, #4
 80009ca:	f003 ff21 	bl	8004810 <malloc>
 80009ce:	4603      	mov	r3, r0
 80009d0:	60bb      	str	r3, [r7, #8]
		for(int i=0; i<4; i++)
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	e007      	b.n	80009e8 <lepton_vsync+0x2a>
		{
			data[i] = 0x00;
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	68ba      	ldr	r2, [r7, #8]
 80009dc:	4413      	add	r3, r2
 80009de:	2200      	movs	r2, #0
 80009e0:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<4; i++)
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	3301      	adds	r3, #1
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	2b03      	cmp	r3, #3
 80009ec:	ddf4      	ble.n	80009d8 <lepton_vsync+0x1a>
		}

		if(vsync_enabled) data[1] = 0x05;
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d003      	beq.n	80009fc <lepton_vsync+0x3e>
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	3301      	adds	r3, #1
 80009f8:	2205      	movs	r2, #5
 80009fa:	701a      	strb	r2, [r3, #0]

		lepton_SetData(data, 4);
 80009fc:	2104      	movs	r1, #4
 80009fe:	68b8      	ldr	r0, [r7, #8]
 8000a00:	f7ff ff24 	bl	800084c <lepton_SetData>
		free(data);
 8000a04:	68b8      	ldr	r0, [r7, #8]
 8000a06:	f003 ff0b 	bl	8004820 <free>

		/* 0x0800 (OEM Module ID) + 0x54 (Command Base - Ctrl enable) + 0x01 (Set) + 0x4000 (Protection Bit) = 0x4855 */
		return lepton_command(0x4855);
 8000a0a:	f644 0055 	movw	r0, #18517	; 0x4855
 8000a0e:	f7ff ff71 	bl	80008f4 <lepton_command>
 8000a12:	4603      	mov	r3, r0
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3710      	adds	r7, #16
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <send_byte>:


void send_byte(uint8_t data)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(dev.uartHandle, &data, 1, 100);
 8000a26:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <send_byte+0x20>)
 8000a28:	6918      	ldr	r0, [r3, #16]
 8000a2a:	1df9      	adds	r1, r7, #7
 8000a2c:	2364      	movs	r3, #100	; 0x64
 8000a2e:	2201      	movs	r2, #1
 8000a30:	f003 fb50 	bl	80040d4 <HAL_UART_Transmit>
}
 8000a34:	bf00      	nop
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20006558 	.word	0x20006558

08000a40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a46:	f000 fbbd 	bl	80011c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a4a:	f000 f847 	bl	8000adc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a4e:	f000 f93f 	bl	8000cd0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a52:	f000 f913 	bl	8000c7c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000a56:	f000 f8ad 	bl	8000bb4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000a5a:	f000 f8d9 	bl	8000c10 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  lepton_Init(&hi2c1, &hspi1, &huart2, SPI1_CS_GPIO_Port, SPI1_CS_Pin);
 8000a5e:	2340      	movs	r3, #64	; 0x40
 8000a60:	9300      	str	r3, [sp, #0]
 8000a62:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <main+0x88>)
 8000a64:	4a19      	ldr	r2, [pc, #100]	; (8000acc <main+0x8c>)
 8000a66:	491a      	ldr	r1, [pc, #104]	; (8000ad0 <main+0x90>)
 8000a68:	481a      	ldr	r0, [pc, #104]	; (8000ad4 <main+0x94>)
 8000a6a:	f7ff fd4d 	bl	8000508 <lepton_Init>


  HAL_GPIO_WritePin(FLIR_PWR_DWN_L_GPIO_Port, FLIR_PWR_DWN_L_Pin, GPIO_PIN_RESET);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a74:	4818      	ldr	r0, [pc, #96]	; (8000ad8 <main+0x98>)
 8000a76:	f000 ff35 	bl	80018e4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000a7a:	2064      	movs	r0, #100	; 0x64
 8000a7c:	f000 fc14 	bl	80012a8 <HAL_Delay>
  HAL_GPIO_WritePin(FLIR_PWR_DWN_L_GPIO_Port, FLIR_PWR_DWN_L_Pin, GPIO_PIN_SET);
 8000a80:	2201      	movs	r2, #1
 8000a82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a86:	4814      	ldr	r0, [pc, #80]	; (8000ad8 <main+0x98>)
 8000a88:	f000 ff2c 	bl	80018e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FLIR_RESET_L_GPIO_Port, FLIR_RESET_L_Pin, GPIO_PIN_RESET);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a92:	4811      	ldr	r0, [pc, #68]	; (8000ad8 <main+0x98>)
 8000a94:	f000 ff26 	bl	80018e4 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8000a98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a9c:	f000 fc04 	bl	80012a8 <HAL_Delay>
  HAL_GPIO_WritePin(FLIR_RESET_L_GPIO_Port, FLIR_RESET_L_Pin, GPIO_PIN_SET);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aa6:	480c      	ldr	r0, [pc, #48]	; (8000ad8 <main+0x98>)
 8000aa8:	f000 ff1c 	bl	80018e4 <HAL_GPIO_WritePin>
  HAL_Delay(5000);
 8000aac:	f241 3088 	movw	r0, #5000	; 0x1388
 8000ab0:	f000 fbfa 	bl	80012a8 <HAL_Delay>
  lepton_radiometry(true);
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	f7ff ff53 	bl	8000960 <lepton_radiometry>
  lepton_vsync(true);
 8000aba:	2001      	movs	r0, #1
 8000abc:	f7ff ff7f 	bl	80009be <lepton_vsync>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  print_image_binary_background();
 8000ac0:	f7ff fd40 	bl	8000544 <print_image_binary_background>
 8000ac4:	e7fc      	b.n	8000ac0 <main+0x80>
 8000ac6:	bf00      	nop
 8000ac8:	40020400 	.word	0x40020400
 8000acc:	20006618 	.word	0x20006618
 8000ad0:	200065c0 	.word	0x200065c0
 8000ad4:	2000656c 	.word	0x2000656c
 8000ad8:	40020000 	.word	0x40020000

08000adc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b094      	sub	sp, #80	; 0x50
 8000ae0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ae2:	f107 031c 	add.w	r3, r7, #28
 8000ae6:	2234      	movs	r2, #52	; 0x34
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4618      	mov	r0, r3
 8000aec:	f003 fea0 	bl	8004830 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af0:	f107 0308 	add.w	r3, r7, #8
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b00:	2300      	movs	r3, #0
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	4b29      	ldr	r3, [pc, #164]	; (8000bac <SystemClock_Config+0xd0>)
 8000b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b08:	4a28      	ldr	r2, [pc, #160]	; (8000bac <SystemClock_Config+0xd0>)
 8000b0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b10:	4b26      	ldr	r3, [pc, #152]	; (8000bac <SystemClock_Config+0xd0>)
 8000b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	603b      	str	r3, [r7, #0]
 8000b20:	4b23      	ldr	r3, [pc, #140]	; (8000bb0 <SystemClock_Config+0xd4>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a22      	ldr	r2, [pc, #136]	; (8000bb0 <SystemClock_Config+0xd4>)
 8000b26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b2a:	6013      	str	r3, [r2, #0]
 8000b2c:	4b20      	ldr	r3, [pc, #128]	; (8000bb0 <SystemClock_Config+0xd4>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b34:	603b      	str	r3, [r7, #0]
 8000b36:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b40:	2310      	movs	r3, #16
 8000b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b44:	2302      	movs	r3, #2
 8000b46:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b4c:	2308      	movs	r3, #8
 8000b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000b50:	23a0      	movs	r3, #160	; 0xa0
 8000b52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b54:	2302      	movs	r3, #2
 8000b56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b60:	f107 031c 	add.w	r3, r7, #28
 8000b64:	4618      	mov	r0, r3
 8000b66:	f002 f9f9 	bl	8002f5c <HAL_RCC_OscConfig>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b70:	f000 f969 	bl	8000e46 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b74:	230f      	movs	r3, #15
 8000b76:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b80:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b84:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b8a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b8c:	f107 0308 	add.w	r3, r7, #8
 8000b90:	2105      	movs	r1, #5
 8000b92:	4618      	mov	r0, r3
 8000b94:	f001 fe98 	bl	80028c8 <HAL_RCC_ClockConfig>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000b9e:	f000 f952 	bl	8000e46 <Error_Handler>
  }
}
 8000ba2:	bf00      	nop
 8000ba4:	3750      	adds	r7, #80	; 0x50
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	40007000 	.word	0x40007000

08000bb4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bb8:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <MX_I2C1_Init+0x50>)
 8000bba:	4a13      	ldr	r2, [pc, #76]	; (8000c08 <MX_I2C1_Init+0x54>)
 8000bbc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000bbe:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <MX_I2C1_Init+0x50>)
 8000bc0:	4a12      	ldr	r2, [pc, #72]	; (8000c0c <MX_I2C1_Init+0x58>)
 8000bc2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bc4:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <MX_I2C1_Init+0x50>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bca:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <MX_I2C1_Init+0x50>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <MX_I2C1_Init+0x50>)
 8000bd2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bd6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bd8:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <MX_I2C1_Init+0x50>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bde:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <MX_I2C1_Init+0x50>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000be4:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <MX_I2C1_Init+0x50>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <MX_I2C1_Init+0x50>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bf0:	4804      	ldr	r0, [pc, #16]	; (8000c04 <MX_I2C1_Init+0x50>)
 8000bf2:	f000 fea9 	bl	8001948 <HAL_I2C_Init>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000bfc:	f000 f923 	bl	8000e46 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	2000656c 	.word	0x2000656c
 8000c08:	40005400 	.word	0x40005400
 8000c0c:	00061a80 	.word	0x00061a80

08000c10 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c14:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <MX_SPI1_Init+0x64>)
 8000c16:	4a18      	ldr	r2, [pc, #96]	; (8000c78 <MX_SPI1_Init+0x68>)
 8000c18:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c1a:	4b16      	ldr	r3, [pc, #88]	; (8000c74 <MX_SPI1_Init+0x64>)
 8000c1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c20:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c22:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <MX_SPI1_Init+0x64>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c28:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <MX_SPI1_Init+0x64>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <MX_SPI1_Init+0x64>)
 8000c30:	2202      	movs	r2, #2
 8000c32:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000c34:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <MX_SPI1_Init+0x64>)
 8000c36:	2201      	movs	r2, #1
 8000c38:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <MX_SPI1_Init+0x64>)
 8000c3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c40:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000c42:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <MX_SPI1_Init+0x64>)
 8000c44:	2208      	movs	r2, #8
 8000c46:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c48:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <MX_SPI1_Init+0x64>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c4e:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <MX_SPI1_Init+0x64>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c54:	4b07      	ldr	r3, [pc, #28]	; (8000c74 <MX_SPI1_Init+0x64>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c5a:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <MX_SPI1_Init+0x64>)
 8000c5c:	220a      	movs	r2, #10
 8000c5e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c60:	4804      	ldr	r0, [pc, #16]	; (8000c74 <MX_SPI1_Init+0x64>)
 8000c62:	f002 fc19 	bl	8003498 <HAL_SPI_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c6c:	f000 f8eb 	bl	8000e46 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	200065c0 	.word	0x200065c0
 8000c78:	40013000 	.word	0x40013000

08000c7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c80:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <MX_USART2_UART_Init+0x4c>)
 8000c82:	4a12      	ldr	r2, [pc, #72]	; (8000ccc <MX_USART2_UART_Init+0x50>)
 8000c84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c86:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <MX_USART2_UART_Init+0x4c>)
 8000c88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <MX_USART2_UART_Init+0x4c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <MX_USART2_UART_Init+0x4c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <MX_USART2_UART_Init+0x4c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ca0:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <MX_USART2_UART_Init+0x4c>)
 8000ca2:	220c      	movs	r2, #12
 8000ca4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ca6:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <MX_USART2_UART_Init+0x4c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <MX_USART2_UART_Init+0x4c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cb2:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <MX_USART2_UART_Init+0x4c>)
 8000cb4:	f003 f9c1 	bl	800403a <HAL_UART_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cbe:	f000 f8c2 	bl	8000e46 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20006618 	.word	0x20006618
 8000ccc:	40004400 	.word	0x40004400

08000cd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08a      	sub	sp, #40	; 0x28
 8000cd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd6:	f107 0314 	add.w	r3, r7, #20
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]
 8000ce4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]
 8000cea:	4b43      	ldr	r3, [pc, #268]	; (8000df8 <MX_GPIO_Init+0x128>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a42      	ldr	r2, [pc, #264]	; (8000df8 <MX_GPIO_Init+0x128>)
 8000cf0:	f043 0304 	orr.w	r3, r3, #4
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b40      	ldr	r3, [pc, #256]	; (8000df8 <MX_GPIO_Init+0x128>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0304 	and.w	r3, r3, #4
 8000cfe:	613b      	str	r3, [r7, #16]
 8000d00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	4b3c      	ldr	r3, [pc, #240]	; (8000df8 <MX_GPIO_Init+0x128>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a3b      	ldr	r2, [pc, #236]	; (8000df8 <MX_GPIO_Init+0x128>)
 8000d0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b39      	ldr	r3, [pc, #228]	; (8000df8 <MX_GPIO_Init+0x128>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	4b35      	ldr	r3, [pc, #212]	; (8000df8 <MX_GPIO_Init+0x128>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a34      	ldr	r2, [pc, #208]	; (8000df8 <MX_GPIO_Init+0x128>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b32      	ldr	r3, [pc, #200]	; (8000df8 <MX_GPIO_Init+0x128>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	60bb      	str	r3, [r7, #8]
 8000d38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	607b      	str	r3, [r7, #4]
 8000d3e:	4b2e      	ldr	r3, [pc, #184]	; (8000df8 <MX_GPIO_Init+0x128>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4a2d      	ldr	r2, [pc, #180]	; (8000df8 <MX_GPIO_Init+0x128>)
 8000d44:	f043 0302 	orr.w	r3, r3, #2
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4a:	4b2b      	ldr	r3, [pc, #172]	; (8000df8 <MX_GPIO_Init+0x128>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	f003 0302 	and.w	r3, r3, #2
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FLIR_PWR_DWN_L_Pin|FLIR_RESET_L_Pin, GPIO_PIN_RESET);
 8000d56:	2200      	movs	r2, #0
 8000d58:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000d5c:	4827      	ldr	r0, [pc, #156]	; (8000dfc <MX_GPIO_Init+0x12c>)
 8000d5e:	f000 fdc1 	bl	80018e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000d62:	2201      	movs	r2, #1
 8000d64:	2140      	movs	r1, #64	; 0x40
 8000d66:	4826      	ldr	r0, [pc, #152]	; (8000e00 <MX_GPIO_Init+0x130>)
 8000d68:	f000 fdbc 	bl	80018e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d72:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	4619      	mov	r1, r3
 8000d82:	4820      	ldr	r0, [pc, #128]	; (8000e04 <MX_GPIO_Init+0x134>)
 8000d84:	f000 fc1a 	bl	80015bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d8e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4818      	ldr	r0, [pc, #96]	; (8000e00 <MX_GPIO_Init+0x130>)
 8000da0:	f000 fc0c 	bl	80015bc <HAL_GPIO_Init>

  /*Configure GPIO pins : FLIR_PWR_DWN_L_Pin FLIR_RESET_L_Pin */
  GPIO_InitStruct.Pin = FLIR_PWR_DWN_L_Pin|FLIR_RESET_L_Pin;
 8000da4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000da8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000daa:	2301      	movs	r3, #1
 8000dac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db2:	2300      	movs	r3, #0
 8000db4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db6:	f107 0314 	add.w	r3, r7, #20
 8000dba:	4619      	mov	r1, r3
 8000dbc:	480f      	ldr	r0, [pc, #60]	; (8000dfc <MX_GPIO_Init+0x12c>)
 8000dbe:	f000 fbfd 	bl	80015bc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000dc2:	2340      	movs	r3, #64	; 0x40
 8000dc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000dd2:	f107 0314 	add.w	r3, r7, #20
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4809      	ldr	r0, [pc, #36]	; (8000e00 <MX_GPIO_Init+0x130>)
 8000dda:	f000 fbef 	bl	80015bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 1);
 8000dde:	2201      	movs	r2, #1
 8000de0:	2100      	movs	r1, #0
 8000de2:	2028      	movs	r0, #40	; 0x28
 8000de4:	f000 fb83 	bl	80014ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000de8:	2028      	movs	r0, #40	; 0x28
 8000dea:	f000 fb9c 	bl	8001526 <HAL_NVIC_EnableIRQ>

}
 8000dee:	bf00      	nop
 8000df0:	3728      	adds	r7, #40	; 0x28
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	40020000 	.word	0x40020000
 8000e00:	40020400 	.word	0x40020400
 8000e04:	40020800 	.word	0x40020800

08000e08 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_12)
 8000e12:	88fb      	ldrh	r3, [r7, #6]
 8000e14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e18:	d104      	bne.n	8000e24 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8000e1a:	2028      	movs	r0, #40	; 0x28
 8000e1c:	f000 fb91 	bl	8001542 <HAL_NVIC_DisableIRQ>
		lepton_getPacket();
 8000e20:	f7ff fcd2 	bl	80007c8 <lepton_getPacket>
		//transfer();
	}
}
 8000e24:	bf00      	nop
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
	transfer();
 8000e34:	f7ff fc0c 	bl	8000650 <transfer>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e38:	2028      	movs	r0, #40	; 0x28
 8000e3a:	f000 fb74 	bl	8001526 <HAL_NVIC_EnableIRQ>
}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e4a:	b672      	cpsid	i
}
 8000e4c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e4e:	e7fe      	b.n	8000e4e <Error_Handler+0x8>

08000e50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <HAL_MspInit+0x4c>)
 8000e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5e:	4a0f      	ldr	r2, [pc, #60]	; (8000e9c <HAL_MspInit+0x4c>)
 8000e60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e64:	6453      	str	r3, [r2, #68]	; 0x44
 8000e66:	4b0d      	ldr	r3, [pc, #52]	; (8000e9c <HAL_MspInit+0x4c>)
 8000e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	603b      	str	r3, [r7, #0]
 8000e76:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <HAL_MspInit+0x4c>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	4a08      	ldr	r2, [pc, #32]	; (8000e9c <HAL_MspInit+0x4c>)
 8000e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e80:	6413      	str	r3, [r2, #64]	; 0x40
 8000e82:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <HAL_MspInit+0x4c>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e8a:	603b      	str	r3, [r7, #0]
 8000e8c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e8e:	2007      	movs	r0, #7
 8000e90:	f000 fb22 	bl	80014d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e94:	bf00      	nop
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40023800 	.word	0x40023800

08000ea0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	; 0x28
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a19      	ldr	r2, [pc, #100]	; (8000f24 <HAL_I2C_MspInit+0x84>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d12c      	bne.n	8000f1c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	613b      	str	r3, [r7, #16]
 8000ec6:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <HAL_I2C_MspInit+0x88>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a17      	ldr	r2, [pc, #92]	; (8000f28 <HAL_I2C_MspInit+0x88>)
 8000ecc:	f043 0302 	orr.w	r3, r3, #2
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <HAL_I2C_MspInit+0x88>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f003 0302 	and.w	r3, r3, #2
 8000eda:	613b      	str	r3, [r7, #16]
 8000edc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ede:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ee2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ee4:	2312      	movs	r3, #18
 8000ee6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eec:	2303      	movs	r3, #3
 8000eee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ef0:	2304      	movs	r3, #4
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	4619      	mov	r1, r3
 8000efa:	480c      	ldr	r0, [pc, #48]	; (8000f2c <HAL_I2C_MspInit+0x8c>)
 8000efc:	f000 fb5e 	bl	80015bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f00:	2300      	movs	r3, #0
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <HAL_I2C_MspInit+0x88>)
 8000f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f08:	4a07      	ldr	r2, [pc, #28]	; (8000f28 <HAL_I2C_MspInit+0x88>)
 8000f0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f10:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <HAL_I2C_MspInit+0x88>)
 8000f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f1c:	bf00      	nop
 8000f1e:	3728      	adds	r7, #40	; 0x28
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40005400 	.word	0x40005400
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	40020400 	.word	0x40020400

08000f30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08a      	sub	sp, #40	; 0x28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a1d      	ldr	r2, [pc, #116]	; (8000fc4 <HAL_SPI_MspInit+0x94>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d133      	bne.n	8000fba <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
 8000f56:	4b1c      	ldr	r3, [pc, #112]	; (8000fc8 <HAL_SPI_MspInit+0x98>)
 8000f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5a:	4a1b      	ldr	r2, [pc, #108]	; (8000fc8 <HAL_SPI_MspInit+0x98>)
 8000f5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f60:	6453      	str	r3, [r2, #68]	; 0x44
 8000f62:	4b19      	ldr	r3, [pc, #100]	; (8000fc8 <HAL_SPI_MspInit+0x98>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <HAL_SPI_MspInit+0x98>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	4a14      	ldr	r2, [pc, #80]	; (8000fc8 <HAL_SPI_MspInit+0x98>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7e:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <HAL_SPI_MspInit+0x98>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f8a:	23e0      	movs	r3, #224	; 0xe0
 8000f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f96:	2303      	movs	r3, #3
 8000f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f9a:	2305      	movs	r3, #5
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9e:	f107 0314 	add.w	r3, r7, #20
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4809      	ldr	r0, [pc, #36]	; (8000fcc <HAL_SPI_MspInit+0x9c>)
 8000fa6:	f000 fb09 	bl	80015bc <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2100      	movs	r1, #0
 8000fae:	2023      	movs	r0, #35	; 0x23
 8000fb0:	f000 fa9d 	bl	80014ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000fb4:	2023      	movs	r0, #35	; 0x23
 8000fb6:	f000 fab6 	bl	8001526 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000fba:	bf00      	nop
 8000fbc:	3728      	adds	r7, #40	; 0x28
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40013000 	.word	0x40013000
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40020000 	.word	0x40020000

08000fd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08a      	sub	sp, #40	; 0x28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a19      	ldr	r2, [pc, #100]	; (8001054 <HAL_UART_MspInit+0x84>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d12b      	bne.n	800104a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	4b18      	ldr	r3, [pc, #96]	; (8001058 <HAL_UART_MspInit+0x88>)
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffa:	4a17      	ldr	r2, [pc, #92]	; (8001058 <HAL_UART_MspInit+0x88>)
 8000ffc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001000:	6413      	str	r3, [r2, #64]	; 0x40
 8001002:	4b15      	ldr	r3, [pc, #84]	; (8001058 <HAL_UART_MspInit+0x88>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100a:	613b      	str	r3, [r7, #16]
 800100c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	4b11      	ldr	r3, [pc, #68]	; (8001058 <HAL_UART_MspInit+0x88>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a10      	ldr	r2, [pc, #64]	; (8001058 <HAL_UART_MspInit+0x88>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <HAL_UART_MspInit+0x88>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800102a:	230c      	movs	r3, #12
 800102c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102e:	2302      	movs	r3, #2
 8001030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001036:	2303      	movs	r3, #3
 8001038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800103a:	2307      	movs	r3, #7
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	4619      	mov	r1, r3
 8001044:	4805      	ldr	r0, [pc, #20]	; (800105c <HAL_UART_MspInit+0x8c>)
 8001046:	f000 fab9 	bl	80015bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800104a:	bf00      	nop
 800104c:	3728      	adds	r7, #40	; 0x28
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40004400 	.word	0x40004400
 8001058:	40023800 	.word	0x40023800
 800105c:	40020000 	.word	0x40020000

08001060 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001064:	e7fe      	b.n	8001064 <NMI_Handler+0x4>

08001066 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800106a:	e7fe      	b.n	800106a <HardFault_Handler+0x4>

0800106c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001070:	e7fe      	b.n	8001070 <MemManage_Handler+0x4>

08001072 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001076:	e7fe      	b.n	8001076 <BusFault_Handler+0x4>

08001078 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800107c:	e7fe      	b.n	800107c <UsageFault_Handler+0x4>

0800107e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ac:	f000 f8dc 	bl	8001268 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80010b8:	4802      	ldr	r0, [pc, #8]	; (80010c4 <SPI1_IRQHandler+0x10>)
 80010ba:	f002 fba9 	bl	8003810 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	200065c0 	.word	0x200065c0

080010c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80010cc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80010d0:	f000 fc22 	bl	8001918 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80010d4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80010d8:	f000 fc1e 	bl	8001918 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}

080010e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010e8:	4a14      	ldr	r2, [pc, #80]	; (800113c <_sbrk+0x5c>)
 80010ea:	4b15      	ldr	r3, [pc, #84]	; (8001140 <_sbrk+0x60>)
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010f4:	4b13      	ldr	r3, [pc, #76]	; (8001144 <_sbrk+0x64>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d102      	bne.n	8001102 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010fc:	4b11      	ldr	r3, [pc, #68]	; (8001144 <_sbrk+0x64>)
 80010fe:	4a12      	ldr	r2, [pc, #72]	; (8001148 <_sbrk+0x68>)
 8001100:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001102:	4b10      	ldr	r3, [pc, #64]	; (8001144 <_sbrk+0x64>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4413      	add	r3, r2
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	429a      	cmp	r2, r3
 800110e:	d207      	bcs.n	8001120 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001110:	f003 fb54 	bl	80047bc <__errno>
 8001114:	4603      	mov	r3, r0
 8001116:	220c      	movs	r2, #12
 8001118:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800111a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800111e:	e009      	b.n	8001134 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <_sbrk+0x64>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001126:	4b07      	ldr	r3, [pc, #28]	; (8001144 <_sbrk+0x64>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4413      	add	r3, r2
 800112e:	4a05      	ldr	r2, [pc, #20]	; (8001144 <_sbrk+0x64>)
 8001130:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001132:	68fb      	ldr	r3, [r7, #12]
}
 8001134:	4618      	mov	r0, r3
 8001136:	3718      	adds	r7, #24
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20020000 	.word	0x20020000
 8001140:	00000400 	.word	0x00000400
 8001144:	2000665c 	.word	0x2000665c
 8001148:	20006678 	.word	0x20006678

0800114c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <SystemInit+0x20>)
 8001152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001156:	4a05      	ldr	r2, [pc, #20]	; (800116c <SystemInit+0x20>)
 8001158:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800115c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001170:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001174:	480d      	ldr	r0, [pc, #52]	; (80011ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001176:	490e      	ldr	r1, [pc, #56]	; (80011b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001178:	4a0e      	ldr	r2, [pc, #56]	; (80011b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800117a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800117c:	e002      	b.n	8001184 <LoopCopyDataInit>

0800117e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800117e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001180:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001182:	3304      	adds	r3, #4

08001184 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001184:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001186:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001188:	d3f9      	bcc.n	800117e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800118a:	4a0b      	ldr	r2, [pc, #44]	; (80011b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800118c:	4c0b      	ldr	r4, [pc, #44]	; (80011bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800118e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001190:	e001      	b.n	8001196 <LoopFillZerobss>

08001192 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001192:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001194:	3204      	adds	r2, #4

08001196 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001196:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001198:	d3fb      	bcc.n	8001192 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800119a:	f7ff ffd7 	bl	800114c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800119e:	f003 fb13 	bl	80047c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011a2:	f7ff fc4d 	bl	8000a40 <main>
  bx  lr    
 80011a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80011b4:	08004a7c 	.word	0x08004a7c
  ldr r2, =_sbss
 80011b8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80011bc:	20006674 	.word	0x20006674

080011c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011c0:	e7fe      	b.n	80011c0 <ADC_IRQHandler>
	...

080011c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011c8:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <HAL_Init+0x40>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a0d      	ldr	r2, [pc, #52]	; (8001204 <HAL_Init+0x40>)
 80011ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011d4:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <HAL_Init+0x40>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a0a      	ldr	r2, [pc, #40]	; (8001204 <HAL_Init+0x40>)
 80011da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011e0:	4b08      	ldr	r3, [pc, #32]	; (8001204 <HAL_Init+0x40>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a07      	ldr	r2, [pc, #28]	; (8001204 <HAL_Init+0x40>)
 80011e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ec:	2003      	movs	r0, #3
 80011ee:	f000 f973 	bl	80014d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011f2:	2000      	movs	r0, #0
 80011f4:	f000 f808 	bl	8001208 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011f8:	f7ff fe2a 	bl	8000e50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40023c00 	.word	0x40023c00

08001208 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001210:	4b12      	ldr	r3, [pc, #72]	; (800125c <HAL_InitTick+0x54>)
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	4b12      	ldr	r3, [pc, #72]	; (8001260 <HAL_InitTick+0x58>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	4619      	mov	r1, r3
 800121a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001222:	fbb2 f3f3 	udiv	r3, r2, r3
 8001226:	4618      	mov	r0, r3
 8001228:	f000 f999 	bl	800155e <HAL_SYSTICK_Config>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e00e      	b.n	8001254 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2b0f      	cmp	r3, #15
 800123a:	d80a      	bhi.n	8001252 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800123c:	2200      	movs	r2, #0
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001244:	f000 f953 	bl	80014ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001248:	4a06      	ldr	r2, [pc, #24]	; (8001264 <HAL_InitTick+0x5c>)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800124e:	2300      	movs	r3, #0
 8001250:	e000      	b.n	8001254 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
}
 8001254:	4618      	mov	r0, r3
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000004 	.word	0x20000004
 8001260:	2000000c 	.word	0x2000000c
 8001264:	20000008 	.word	0x20000008

08001268 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <HAL_IncTick+0x20>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	461a      	mov	r2, r3
 8001272:	4b06      	ldr	r3, [pc, #24]	; (800128c <HAL_IncTick+0x24>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4413      	add	r3, r2
 8001278:	4a04      	ldr	r2, [pc, #16]	; (800128c <HAL_IncTick+0x24>)
 800127a:	6013      	str	r3, [r2, #0]
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	2000000c 	.word	0x2000000c
 800128c:	20006660 	.word	0x20006660

08001290 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  return uwTick;
 8001294:	4b03      	ldr	r3, [pc, #12]	; (80012a4 <HAL_GetTick+0x14>)
 8001296:	681b      	ldr	r3, [r3, #0]
}
 8001298:	4618      	mov	r0, r3
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	20006660 	.word	0x20006660

080012a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012b0:	f7ff ffee 	bl	8001290 <HAL_GetTick>
 80012b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012c0:	d005      	beq.n	80012ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012c2:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <HAL_Delay+0x44>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	461a      	mov	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4413      	add	r3, r2
 80012cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012ce:	bf00      	nop
 80012d0:	f7ff ffde 	bl	8001290 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d8f7      	bhi.n	80012d0 <HAL_Delay+0x28>
  {
  }
}
 80012e0:	bf00      	nop
 80012e2:	bf00      	nop
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	2000000c 	.word	0x2000000c

080012f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001300:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <__NVIC_SetPriorityGrouping+0x44>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800130c:	4013      	ands	r3, r2
 800130e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001318:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800131c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001320:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001322:	4a04      	ldr	r2, [pc, #16]	; (8001334 <__NVIC_SetPriorityGrouping+0x44>)
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	60d3      	str	r3, [r2, #12]
}
 8001328:	bf00      	nop
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800133c:	4b04      	ldr	r3, [pc, #16]	; (8001350 <__NVIC_GetPriorityGrouping+0x18>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	0a1b      	lsrs	r3, r3, #8
 8001342:	f003 0307 	and.w	r3, r3, #7
}
 8001346:	4618      	mov	r0, r3
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001362:	2b00      	cmp	r3, #0
 8001364:	db0b      	blt.n	800137e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	f003 021f 	and.w	r2, r3, #31
 800136c:	4907      	ldr	r1, [pc, #28]	; (800138c <__NVIC_EnableIRQ+0x38>)
 800136e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001372:	095b      	lsrs	r3, r3, #5
 8001374:	2001      	movs	r0, #1
 8001376:	fa00 f202 	lsl.w	r2, r0, r2
 800137a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	e000e100 	.word	0xe000e100

08001390 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800139a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	db12      	blt.n	80013c8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	f003 021f 	and.w	r2, r3, #31
 80013a8:	490a      	ldr	r1, [pc, #40]	; (80013d4 <__NVIC_DisableIRQ+0x44>)
 80013aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ae:	095b      	lsrs	r3, r3, #5
 80013b0:	2001      	movs	r0, #1
 80013b2:	fa00 f202 	lsl.w	r2, r0, r2
 80013b6:	3320      	adds	r3, #32
 80013b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80013bc:	f3bf 8f4f 	dsb	sy
}
 80013c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013c2:	f3bf 8f6f 	isb	sy
}
 80013c6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	e000e100 	.word	0xe000e100

080013d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	6039      	str	r1, [r7, #0]
 80013e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	db0a      	blt.n	8001402 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	490c      	ldr	r1, [pc, #48]	; (8001424 <__NVIC_SetPriority+0x4c>)
 80013f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f6:	0112      	lsls	r2, r2, #4
 80013f8:	b2d2      	uxtb	r2, r2
 80013fa:	440b      	add	r3, r1
 80013fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001400:	e00a      	b.n	8001418 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	b2da      	uxtb	r2, r3
 8001406:	4908      	ldr	r1, [pc, #32]	; (8001428 <__NVIC_SetPriority+0x50>)
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	f003 030f 	and.w	r3, r3, #15
 800140e:	3b04      	subs	r3, #4
 8001410:	0112      	lsls	r2, r2, #4
 8001412:	b2d2      	uxtb	r2, r2
 8001414:	440b      	add	r3, r1
 8001416:	761a      	strb	r2, [r3, #24]
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	e000e100 	.word	0xe000e100
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800142c:	b480      	push	{r7}
 800142e:	b089      	sub	sp, #36	; 0x24
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	f1c3 0307 	rsb	r3, r3, #7
 8001446:	2b04      	cmp	r3, #4
 8001448:	bf28      	it	cs
 800144a:	2304      	movcs	r3, #4
 800144c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	3304      	adds	r3, #4
 8001452:	2b06      	cmp	r3, #6
 8001454:	d902      	bls.n	800145c <NVIC_EncodePriority+0x30>
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3b03      	subs	r3, #3
 800145a:	e000      	b.n	800145e <NVIC_EncodePriority+0x32>
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001460:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43da      	mvns	r2, r3
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	401a      	ands	r2, r3
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001474:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	fa01 f303 	lsl.w	r3, r1, r3
 800147e:	43d9      	mvns	r1, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001484:	4313      	orrs	r3, r2
         );
}
 8001486:	4618      	mov	r0, r3
 8001488:	3724      	adds	r7, #36	; 0x24
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
	...

08001494 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3b01      	subs	r3, #1
 80014a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014a4:	d301      	bcc.n	80014aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014a6:	2301      	movs	r3, #1
 80014a8:	e00f      	b.n	80014ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014aa:	4a0a      	ldr	r2, [pc, #40]	; (80014d4 <SysTick_Config+0x40>)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014b2:	210f      	movs	r1, #15
 80014b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014b8:	f7ff ff8e 	bl	80013d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014bc:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <SysTick_Config+0x40>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014c2:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <SysTick_Config+0x40>)
 80014c4:	2207      	movs	r2, #7
 80014c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	e000e010 	.word	0xe000e010

080014d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f7ff ff05 	bl	80012f0 <__NVIC_SetPriorityGrouping>
}
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b086      	sub	sp, #24
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	4603      	mov	r3, r0
 80014f6:	60b9      	str	r1, [r7, #8]
 80014f8:	607a      	str	r2, [r7, #4]
 80014fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001500:	f7ff ff1a 	bl	8001338 <__NVIC_GetPriorityGrouping>
 8001504:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	68b9      	ldr	r1, [r7, #8]
 800150a:	6978      	ldr	r0, [r7, #20]
 800150c:	f7ff ff8e 	bl	800142c <NVIC_EncodePriority>
 8001510:	4602      	mov	r2, r0
 8001512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001516:	4611      	mov	r1, r2
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff ff5d 	bl	80013d8 <__NVIC_SetPriority>
}
 800151e:	bf00      	nop
 8001520:	3718      	adds	r7, #24
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
 800152c:	4603      	mov	r3, r0
 800152e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff ff0d 	bl	8001354 <__NVIC_EnableIRQ>
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b082      	sub	sp, #8
 8001546:	af00      	add	r7, sp, #0
 8001548:	4603      	mov	r3, r0
 800154a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800154c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff ff1d 	bl	8001390 <__NVIC_DisableIRQ>
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b082      	sub	sp, #8
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f7ff ff94 	bl	8001494 <SysTick_Config>
 800156c:	4603      	mov	r3, r0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001576:	b480      	push	{r7}
 8001578:	b083      	sub	sp, #12
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d004      	beq.n	8001594 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2280      	movs	r2, #128	; 0x80
 800158e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e00c      	b.n	80015ae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2205      	movs	r2, #5
 8001598:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f022 0201 	bic.w	r2, r2, #1
 80015aa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
	...

080015bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015bc:	b480      	push	{r7}
 80015be:	b089      	sub	sp, #36	; 0x24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015c6:	2300      	movs	r3, #0
 80015c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015ca:	2300      	movs	r3, #0
 80015cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015d2:	2300      	movs	r3, #0
 80015d4:	61fb      	str	r3, [r7, #28]
 80015d6:	e165      	b.n	80018a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015d8:	2201      	movs	r2, #1
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	697a      	ldr	r2, [r7, #20]
 80015e8:	4013      	ands	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	f040 8154 	bne.w	800189e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f003 0303 	and.w	r3, r3, #3
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d005      	beq.n	800160e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800160a:	2b02      	cmp	r3, #2
 800160c:	d130      	bne.n	8001670 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	2203      	movs	r2, #3
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	43db      	mvns	r3, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4013      	ands	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	68da      	ldr	r2, [r3, #12]
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4313      	orrs	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001644:	2201      	movs	r2, #1
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	43db      	mvns	r3, r3
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	4013      	ands	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	091b      	lsrs	r3, r3, #4
 800165a:	f003 0201 	and.w	r2, r3, #1
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4313      	orrs	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f003 0303 	and.w	r3, r3, #3
 8001678:	2b03      	cmp	r3, #3
 800167a:	d017      	beq.n	80016ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	2203      	movs	r2, #3
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	43db      	mvns	r3, r3
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4013      	ands	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	689a      	ldr	r2, [r3, #8]
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f003 0303 	and.w	r3, r3, #3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d123      	bne.n	8001700 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	08da      	lsrs	r2, r3, #3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3208      	adds	r2, #8
 80016c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	f003 0307 	and.w	r3, r3, #7
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	220f      	movs	r2, #15
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	43db      	mvns	r3, r3
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	4013      	ands	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	691a      	ldr	r2, [r3, #16]
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	08da      	lsrs	r2, r3, #3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	3208      	adds	r2, #8
 80016fa:	69b9      	ldr	r1, [r7, #24]
 80016fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	2203      	movs	r2, #3
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	43db      	mvns	r3, r3
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	4013      	ands	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f003 0203 	and.w	r2, r3, #3
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	4313      	orrs	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800173c:	2b00      	cmp	r3, #0
 800173e:	f000 80ae 	beq.w	800189e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	4b5d      	ldr	r3, [pc, #372]	; (80018bc <HAL_GPIO_Init+0x300>)
 8001748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174a:	4a5c      	ldr	r2, [pc, #368]	; (80018bc <HAL_GPIO_Init+0x300>)
 800174c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001750:	6453      	str	r3, [r2, #68]	; 0x44
 8001752:	4b5a      	ldr	r3, [pc, #360]	; (80018bc <HAL_GPIO_Init+0x300>)
 8001754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800175e:	4a58      	ldr	r2, [pc, #352]	; (80018c0 <HAL_GPIO_Init+0x304>)
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	089b      	lsrs	r3, r3, #2
 8001764:	3302      	adds	r3, #2
 8001766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800176a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	f003 0303 	and.w	r3, r3, #3
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	220f      	movs	r2, #15
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43db      	mvns	r3, r3
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4013      	ands	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a4f      	ldr	r2, [pc, #316]	; (80018c4 <HAL_GPIO_Init+0x308>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d025      	beq.n	80017d6 <HAL_GPIO_Init+0x21a>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a4e      	ldr	r2, [pc, #312]	; (80018c8 <HAL_GPIO_Init+0x30c>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d01f      	beq.n	80017d2 <HAL_GPIO_Init+0x216>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a4d      	ldr	r2, [pc, #308]	; (80018cc <HAL_GPIO_Init+0x310>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d019      	beq.n	80017ce <HAL_GPIO_Init+0x212>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a4c      	ldr	r2, [pc, #304]	; (80018d0 <HAL_GPIO_Init+0x314>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d013      	beq.n	80017ca <HAL_GPIO_Init+0x20e>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a4b      	ldr	r2, [pc, #300]	; (80018d4 <HAL_GPIO_Init+0x318>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d00d      	beq.n	80017c6 <HAL_GPIO_Init+0x20a>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a4a      	ldr	r2, [pc, #296]	; (80018d8 <HAL_GPIO_Init+0x31c>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d007      	beq.n	80017c2 <HAL_GPIO_Init+0x206>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a49      	ldr	r2, [pc, #292]	; (80018dc <HAL_GPIO_Init+0x320>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d101      	bne.n	80017be <HAL_GPIO_Init+0x202>
 80017ba:	2306      	movs	r3, #6
 80017bc:	e00c      	b.n	80017d8 <HAL_GPIO_Init+0x21c>
 80017be:	2307      	movs	r3, #7
 80017c0:	e00a      	b.n	80017d8 <HAL_GPIO_Init+0x21c>
 80017c2:	2305      	movs	r3, #5
 80017c4:	e008      	b.n	80017d8 <HAL_GPIO_Init+0x21c>
 80017c6:	2304      	movs	r3, #4
 80017c8:	e006      	b.n	80017d8 <HAL_GPIO_Init+0x21c>
 80017ca:	2303      	movs	r3, #3
 80017cc:	e004      	b.n	80017d8 <HAL_GPIO_Init+0x21c>
 80017ce:	2302      	movs	r3, #2
 80017d0:	e002      	b.n	80017d8 <HAL_GPIO_Init+0x21c>
 80017d2:	2301      	movs	r3, #1
 80017d4:	e000      	b.n	80017d8 <HAL_GPIO_Init+0x21c>
 80017d6:	2300      	movs	r3, #0
 80017d8:	69fa      	ldr	r2, [r7, #28]
 80017da:	f002 0203 	and.w	r2, r2, #3
 80017de:	0092      	lsls	r2, r2, #2
 80017e0:	4093      	lsls	r3, r2
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017e8:	4935      	ldr	r1, [pc, #212]	; (80018c0 <HAL_GPIO_Init+0x304>)
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	089b      	lsrs	r3, r3, #2
 80017ee:	3302      	adds	r3, #2
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017f6:	4b3a      	ldr	r3, [pc, #232]	; (80018e0 <HAL_GPIO_Init+0x324>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	43db      	mvns	r3, r3
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	4013      	ands	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d003      	beq.n	800181a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	4313      	orrs	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800181a:	4a31      	ldr	r2, [pc, #196]	; (80018e0 <HAL_GPIO_Init+0x324>)
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001820:	4b2f      	ldr	r3, [pc, #188]	; (80018e0 <HAL_GPIO_Init+0x324>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	43db      	mvns	r3, r3
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4013      	ands	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d003      	beq.n	8001844 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	4313      	orrs	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001844:	4a26      	ldr	r2, [pc, #152]	; (80018e0 <HAL_GPIO_Init+0x324>)
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800184a:	4b25      	ldr	r3, [pc, #148]	; (80018e0 <HAL_GPIO_Init+0x324>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	43db      	mvns	r3, r3
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	4013      	ands	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	4313      	orrs	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800186e:	4a1c      	ldr	r2, [pc, #112]	; (80018e0 <HAL_GPIO_Init+0x324>)
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001874:	4b1a      	ldr	r3, [pc, #104]	; (80018e0 <HAL_GPIO_Init+0x324>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	43db      	mvns	r3, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4013      	ands	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d003      	beq.n	8001898 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	4313      	orrs	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001898:	4a11      	ldr	r2, [pc, #68]	; (80018e0 <HAL_GPIO_Init+0x324>)
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3301      	adds	r3, #1
 80018a2:	61fb      	str	r3, [r7, #28]
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	2b0f      	cmp	r3, #15
 80018a8:	f67f ae96 	bls.w	80015d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018ac:	bf00      	nop
 80018ae:	bf00      	nop
 80018b0:	3724      	adds	r7, #36	; 0x24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	40023800 	.word	0x40023800
 80018c0:	40013800 	.word	0x40013800
 80018c4:	40020000 	.word	0x40020000
 80018c8:	40020400 	.word	0x40020400
 80018cc:	40020800 	.word	0x40020800
 80018d0:	40020c00 	.word	0x40020c00
 80018d4:	40021000 	.word	0x40021000
 80018d8:	40021400 	.word	0x40021400
 80018dc:	40021800 	.word	0x40021800
 80018e0:	40013c00 	.word	0x40013c00

080018e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	460b      	mov	r3, r1
 80018ee:	807b      	strh	r3, [r7, #2]
 80018f0:	4613      	mov	r3, r2
 80018f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018f4:	787b      	ldrb	r3, [r7, #1]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d003      	beq.n	8001902 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018fa:	887a      	ldrh	r2, [r7, #2]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001900:	e003      	b.n	800190a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001902:	887b      	ldrh	r3, [r7, #2]
 8001904:	041a      	lsls	r2, r3, #16
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	619a      	str	r2, [r3, #24]
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
	...

08001918 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001922:	4b08      	ldr	r3, [pc, #32]	; (8001944 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001924:	695a      	ldr	r2, [r3, #20]
 8001926:	88fb      	ldrh	r3, [r7, #6]
 8001928:	4013      	ands	r3, r2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d006      	beq.n	800193c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800192e:	4a05      	ldr	r2, [pc, #20]	; (8001944 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001930:	88fb      	ldrh	r3, [r7, #6]
 8001932:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001934:	88fb      	ldrh	r3, [r7, #6]
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff fa66 	bl	8000e08 <HAL_GPIO_EXTI_Callback>
  }
}
 800193c:	bf00      	nop
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40013c00 	.word	0x40013c00

08001948 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d101      	bne.n	800195a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e12b      	b.n	8001bb2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b00      	cmp	r3, #0
 8001964:	d106      	bne.n	8001974 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff fa96 	bl	8000ea0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2224      	movs	r2, #36	; 0x24
 8001978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f022 0201 	bic.w	r2, r2, #1
 800198a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800199a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80019ac:	f001 f87e 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 80019b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	4a81      	ldr	r2, [pc, #516]	; (8001bbc <HAL_I2C_Init+0x274>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d807      	bhi.n	80019cc <HAL_I2C_Init+0x84>
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	4a80      	ldr	r2, [pc, #512]	; (8001bc0 <HAL_I2C_Init+0x278>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	bf94      	ite	ls
 80019c4:	2301      	movls	r3, #1
 80019c6:	2300      	movhi	r3, #0
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	e006      	b.n	80019da <HAL_I2C_Init+0x92>
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	4a7d      	ldr	r2, [pc, #500]	; (8001bc4 <HAL_I2C_Init+0x27c>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	bf94      	ite	ls
 80019d4:	2301      	movls	r3, #1
 80019d6:	2300      	movhi	r3, #0
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e0e7      	b.n	8001bb2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	4a78      	ldr	r2, [pc, #480]	; (8001bc8 <HAL_I2C_Init+0x280>)
 80019e6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ea:	0c9b      	lsrs	r3, r3, #18
 80019ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	68ba      	ldr	r2, [r7, #8]
 80019fe:	430a      	orrs	r2, r1
 8001a00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	6a1b      	ldr	r3, [r3, #32]
 8001a08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	4a6a      	ldr	r2, [pc, #424]	; (8001bbc <HAL_I2C_Init+0x274>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d802      	bhi.n	8001a1c <HAL_I2C_Init+0xd4>
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	e009      	b.n	8001a30 <HAL_I2C_Init+0xe8>
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a22:	fb02 f303 	mul.w	r3, r2, r3
 8001a26:	4a69      	ldr	r2, [pc, #420]	; (8001bcc <HAL_I2C_Init+0x284>)
 8001a28:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2c:	099b      	lsrs	r3, r3, #6
 8001a2e:	3301      	adds	r3, #1
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	6812      	ldr	r2, [r2, #0]
 8001a34:	430b      	orrs	r3, r1
 8001a36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	69db      	ldr	r3, [r3, #28]
 8001a3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001a42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	495c      	ldr	r1, [pc, #368]	; (8001bbc <HAL_I2C_Init+0x274>)
 8001a4c:	428b      	cmp	r3, r1
 8001a4e:	d819      	bhi.n	8001a84 <HAL_I2C_Init+0x13c>
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	1e59      	subs	r1, r3, #1
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a5e:	1c59      	adds	r1, r3, #1
 8001a60:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001a64:	400b      	ands	r3, r1
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d00a      	beq.n	8001a80 <HAL_I2C_Init+0x138>
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	1e59      	subs	r1, r3, #1
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a78:	3301      	adds	r3, #1
 8001a7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a7e:	e051      	b.n	8001b24 <HAL_I2C_Init+0x1dc>
 8001a80:	2304      	movs	r3, #4
 8001a82:	e04f      	b.n	8001b24 <HAL_I2C_Init+0x1dc>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d111      	bne.n	8001ab0 <HAL_I2C_Init+0x168>
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	1e58      	subs	r0, r3, #1
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6859      	ldr	r1, [r3, #4]
 8001a94:	460b      	mov	r3, r1
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	440b      	add	r3, r1
 8001a9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	bf0c      	ite	eq
 8001aa8:	2301      	moveq	r3, #1
 8001aaa:	2300      	movne	r3, #0
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	e012      	b.n	8001ad6 <HAL_I2C_Init+0x18e>
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	1e58      	subs	r0, r3, #1
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6859      	ldr	r1, [r3, #4]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	440b      	add	r3, r1
 8001abe:	0099      	lsls	r1, r3, #2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	bf0c      	ite	eq
 8001ad0:	2301      	moveq	r3, #1
 8001ad2:	2300      	movne	r3, #0
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <HAL_I2C_Init+0x196>
 8001ada:	2301      	movs	r3, #1
 8001adc:	e022      	b.n	8001b24 <HAL_I2C_Init+0x1dc>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d10e      	bne.n	8001b04 <HAL_I2C_Init+0x1bc>
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	1e58      	subs	r0, r3, #1
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6859      	ldr	r1, [r3, #4]
 8001aee:	460b      	mov	r3, r1
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	440b      	add	r3, r1
 8001af4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001af8:	3301      	adds	r3, #1
 8001afa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001afe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b02:	e00f      	b.n	8001b24 <HAL_I2C_Init+0x1dc>
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	1e58      	subs	r0, r3, #1
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6859      	ldr	r1, [r3, #4]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	440b      	add	r3, r1
 8001b12:	0099      	lsls	r1, r3, #2
 8001b14:	440b      	add	r3, r1
 8001b16:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b24:	6879      	ldr	r1, [r7, #4]
 8001b26:	6809      	ldr	r1, [r1, #0]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	69da      	ldr	r2, [r3, #28]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a1b      	ldr	r3, [r3, #32]
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	430a      	orrs	r2, r1
 8001b46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001b52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	6911      	ldr	r1, [r2, #16]
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	68d2      	ldr	r2, [r2, #12]
 8001b5e:	4311      	orrs	r1, r2
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	6812      	ldr	r2, [r2, #0]
 8001b64:	430b      	orrs	r3, r1
 8001b66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	695a      	ldr	r2, [r3, #20]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	431a      	orrs	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	430a      	orrs	r2, r1
 8001b82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f042 0201 	orr.w	r2, r2, #1
 8001b92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2220      	movs	r2, #32
 8001b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	000186a0 	.word	0x000186a0
 8001bc0:	001e847f 	.word	0x001e847f
 8001bc4:	003d08ff 	.word	0x003d08ff
 8001bc8:	431bde83 	.word	0x431bde83
 8001bcc:	10624dd3 	.word	0x10624dd3

08001bd0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b088      	sub	sp, #32
 8001bd4:	af02      	add	r7, sp, #8
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	4608      	mov	r0, r1
 8001bda:	4611      	mov	r1, r2
 8001bdc:	461a      	mov	r2, r3
 8001bde:	4603      	mov	r3, r0
 8001be0:	817b      	strh	r3, [r7, #10]
 8001be2:	460b      	mov	r3, r1
 8001be4:	813b      	strh	r3, [r7, #8]
 8001be6:	4613      	mov	r3, r2
 8001be8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001bea:	f7ff fb51 	bl	8001290 <HAL_GetTick>
 8001bee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	2b20      	cmp	r3, #32
 8001bfa:	f040 80d9 	bne.w	8001db0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	2319      	movs	r3, #25
 8001c04:	2201      	movs	r2, #1
 8001c06:	496d      	ldr	r1, [pc, #436]	; (8001dbc <HAL_I2C_Mem_Write+0x1ec>)
 8001c08:	68f8      	ldr	r0, [r7, #12]
 8001c0a:	f000 fc7f 	bl	800250c <I2C_WaitOnFlagUntilTimeout>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001c14:	2302      	movs	r3, #2
 8001c16:	e0cc      	b.n	8001db2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d101      	bne.n	8001c26 <HAL_I2C_Mem_Write+0x56>
 8001c22:	2302      	movs	r3, #2
 8001c24:	e0c5      	b.n	8001db2 <HAL_I2C_Mem_Write+0x1e2>
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d007      	beq.n	8001c4c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f042 0201 	orr.w	r2, r2, #1
 8001c4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2221      	movs	r2, #33	; 0x21
 8001c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2240      	movs	r2, #64	; 0x40
 8001c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6a3a      	ldr	r2, [r7, #32]
 8001c76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001c7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4a4d      	ldr	r2, [pc, #308]	; (8001dc0 <HAL_I2C_Mem_Write+0x1f0>)
 8001c8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c8e:	88f8      	ldrh	r0, [r7, #6]
 8001c90:	893a      	ldrh	r2, [r7, #8]
 8001c92:	8979      	ldrh	r1, [r7, #10]
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	9301      	str	r3, [sp, #4]
 8001c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	68f8      	ldr	r0, [r7, #12]
 8001ca0:	f000 fab6 	bl	8002210 <I2C_RequestMemoryWrite>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d052      	beq.n	8001d50 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e081      	b.n	8001db2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001cb2:	68f8      	ldr	r0, [r7, #12]
 8001cb4:	f000 fd00 	bl	80026b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d00d      	beq.n	8001cda <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	d107      	bne.n	8001cd6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cd4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e06b      	b.n	8001db2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cde:	781a      	ldrb	r2, [r3, #0]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cea:	1c5a      	adds	r2, r3, #1
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	3b01      	subs	r3, #1
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	695b      	ldr	r3, [r3, #20]
 8001d10:	f003 0304 	and.w	r3, r3, #4
 8001d14:	2b04      	cmp	r3, #4
 8001d16:	d11b      	bne.n	8001d50 <HAL_I2C_Mem_Write+0x180>
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d017      	beq.n	8001d50 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d24:	781a      	ldrb	r2, [r3, #0]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d30:	1c5a      	adds	r2, r3, #1
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1aa      	bne.n	8001cae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d5c:	68f8      	ldr	r0, [r7, #12]
 8001d5e:	f000 fcec 	bl	800273a <I2C_WaitOnBTFFlagUntilTimeout>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d00d      	beq.n	8001d84 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6c:	2b04      	cmp	r3, #4
 8001d6e:	d107      	bne.n	8001d80 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d7e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e016      	b.n	8001db2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2220      	movs	r2, #32
 8001d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001dac:	2300      	movs	r3, #0
 8001dae:	e000      	b.n	8001db2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001db0:	2302      	movs	r3, #2
  }
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3718      	adds	r7, #24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	00100002 	.word	0x00100002
 8001dc0:	ffff0000 	.word	0xffff0000

08001dc4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b08c      	sub	sp, #48	; 0x30
 8001dc8:	af02      	add	r7, sp, #8
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	4608      	mov	r0, r1
 8001dce:	4611      	mov	r1, r2
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	817b      	strh	r3, [r7, #10]
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	813b      	strh	r3, [r7, #8]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001dde:	f7ff fa57 	bl	8001290 <HAL_GetTick>
 8001de2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b20      	cmp	r3, #32
 8001dee:	f040 8208 	bne.w	8002202 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	2319      	movs	r3, #25
 8001df8:	2201      	movs	r2, #1
 8001dfa:	497b      	ldr	r1, [pc, #492]	; (8001fe8 <HAL_I2C_Mem_Read+0x224>)
 8001dfc:	68f8      	ldr	r0, [r7, #12]
 8001dfe:	f000 fb85 	bl	800250c <I2C_WaitOnFlagUntilTimeout>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	e1fb      	b.n	8002204 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d101      	bne.n	8001e1a <HAL_I2C_Mem_Read+0x56>
 8001e16:	2302      	movs	r3, #2
 8001e18:	e1f4      	b.n	8002204 <HAL_I2C_Mem_Read+0x440>
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d007      	beq.n	8001e40 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f042 0201 	orr.w	r2, r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2222      	movs	r2, #34	; 0x22
 8001e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2240      	movs	r2, #64	; 0x40
 8001e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2200      	movs	r2, #0
 8001e64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001e70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	4a5b      	ldr	r2, [pc, #364]	; (8001fec <HAL_I2C_Mem_Read+0x228>)
 8001e80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e82:	88f8      	ldrh	r0, [r7, #6]
 8001e84:	893a      	ldrh	r2, [r7, #8]
 8001e86:	8979      	ldrh	r1, [r7, #10]
 8001e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8a:	9301      	str	r3, [sp, #4]
 8001e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e8e:	9300      	str	r3, [sp, #0]
 8001e90:	4603      	mov	r3, r0
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	f000 fa52 	bl	800233c <I2C_RequestMemoryRead>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e1b0      	b.n	8002204 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d113      	bne.n	8001ed2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001eaa:	2300      	movs	r3, #0
 8001eac:	623b      	str	r3, [r7, #32]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	695b      	ldr	r3, [r3, #20]
 8001eb4:	623b      	str	r3, [r7, #32]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	623b      	str	r3, [r7, #32]
 8001ebe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	e184      	b.n	80021dc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d11b      	bne.n	8001f12 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ee8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001eea:	2300      	movs	r3, #0
 8001eec:	61fb      	str	r3, [r7, #28]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	695b      	ldr	r3, [r3, #20]
 8001ef4:	61fb      	str	r3, [r7, #28]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	61fb      	str	r3, [r7, #28]
 8001efe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	e164      	b.n	80021dc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d11b      	bne.n	8001f52 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f28:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61bb      	str	r3, [r7, #24]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	695b      	ldr	r3, [r3, #20]
 8001f44:	61bb      	str	r3, [r7, #24]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	61bb      	str	r3, [r7, #24]
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	e144      	b.n	80021dc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	695b      	ldr	r3, [r3, #20]
 8001f5c:	617b      	str	r3, [r7, #20]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	617b      	str	r3, [r7, #20]
 8001f66:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001f68:	e138      	b.n	80021dc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f6e:	2b03      	cmp	r3, #3
 8001f70:	f200 80f1 	bhi.w	8002156 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d123      	bne.n	8001fc4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001f80:	68f8      	ldr	r0, [r7, #12]
 8001f82:	f000 fc1b 	bl	80027bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e139      	b.n	8002204 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	691a      	ldr	r2, [r3, #16]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9a:	b2d2      	uxtb	r2, r2
 8001f9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa2:	1c5a      	adds	r2, r3, #1
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fac:	3b01      	subs	r3, #1
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001fc2:	e10b      	b.n	80021dc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d14e      	bne.n	800206a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	4906      	ldr	r1, [pc, #24]	; (8001ff0 <HAL_I2C_Mem_Read+0x22c>)
 8001fd6:	68f8      	ldr	r0, [r7, #12]
 8001fd8:	f000 fa98 	bl	800250c <I2C_WaitOnFlagUntilTimeout>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d008      	beq.n	8001ff4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e10e      	b.n	8002204 <HAL_I2C_Mem_Read+0x440>
 8001fe6:	bf00      	nop
 8001fe8:	00100002 	.word	0x00100002
 8001fec:	ffff0000 	.word	0xffff0000
 8001ff0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002002:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	691a      	ldr	r2, [r3, #16]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002016:	1c5a      	adds	r2, r3, #1
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002020:	3b01      	subs	r3, #1
 8002022:	b29a      	uxth	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800202c:	b29b      	uxth	r3, r3
 800202e:	3b01      	subs	r3, #1
 8002030:	b29a      	uxth	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	691a      	ldr	r2, [r3, #16]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002048:	1c5a      	adds	r2, r3, #1
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002052:	3b01      	subs	r3, #1
 8002054:	b29a      	uxth	r2, r3
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800205e:	b29b      	uxth	r3, r3
 8002060:	3b01      	subs	r3, #1
 8002062:	b29a      	uxth	r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002068:	e0b8      	b.n	80021dc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	9300      	str	r3, [sp, #0]
 800206e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002070:	2200      	movs	r2, #0
 8002072:	4966      	ldr	r1, [pc, #408]	; (800220c <HAL_I2C_Mem_Read+0x448>)
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f000 fa49 	bl	800250c <I2C_WaitOnFlagUntilTimeout>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e0bf      	b.n	8002204 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002092:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	691a      	ldr	r2, [r3, #16]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209e:	b2d2      	uxtb	r2, r2
 80020a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a6:	1c5a      	adds	r2, r3, #1
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b0:	3b01      	subs	r3, #1
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020bc:	b29b      	uxth	r3, r3
 80020be:	3b01      	subs	r3, #1
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	9300      	str	r3, [sp, #0]
 80020ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020cc:	2200      	movs	r2, #0
 80020ce:	494f      	ldr	r1, [pc, #316]	; (800220c <HAL_I2C_Mem_Read+0x448>)
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	f000 fa1b 	bl	800250c <I2C_WaitOnFlagUntilTimeout>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e091      	b.n	8002204 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	691a      	ldr	r2, [r3, #16]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fa:	b2d2      	uxtb	r2, r2
 80020fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002102:	1c5a      	adds	r2, r3, #1
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800210c:	3b01      	subs	r3, #1
 800210e:	b29a      	uxth	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002118:	b29b      	uxth	r3, r3
 800211a:	3b01      	subs	r3, #1
 800211c:	b29a      	uxth	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	691a      	ldr	r2, [r3, #16]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212c:	b2d2      	uxtb	r2, r2
 800212e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	1c5a      	adds	r2, r3, #1
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800213e:	3b01      	subs	r3, #1
 8002140:	b29a      	uxth	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800214a:	b29b      	uxth	r3, r3
 800214c:	3b01      	subs	r3, #1
 800214e:	b29a      	uxth	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002154:	e042      	b.n	80021dc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002158:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f000 fb2e 	bl	80027bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e04c      	b.n	8002204 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	691a      	ldr	r2, [r3, #16]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002174:	b2d2      	uxtb	r2, r2
 8002176:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217c:	1c5a      	adds	r2, r3, #1
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002186:	3b01      	subs	r3, #1
 8002188:	b29a      	uxth	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002192:	b29b      	uxth	r3, r3
 8002194:	3b01      	subs	r3, #1
 8002196:	b29a      	uxth	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	f003 0304 	and.w	r3, r3, #4
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	d118      	bne.n	80021dc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	691a      	ldr	r2, [r3, #16]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021bc:	1c5a      	adds	r2, r3, #1
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c6:	3b01      	subs	r3, #1
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	3b01      	subs	r3, #1
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f47f aec2 	bne.w	8001f6a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2220      	movs	r2, #32
 80021ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021fe:	2300      	movs	r3, #0
 8002200:	e000      	b.n	8002204 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002202:	2302      	movs	r3, #2
  }
}
 8002204:	4618      	mov	r0, r3
 8002206:	3728      	adds	r7, #40	; 0x28
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	00010004 	.word	0x00010004

08002210 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b088      	sub	sp, #32
 8002214:	af02      	add	r7, sp, #8
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	4608      	mov	r0, r1
 800221a:	4611      	mov	r1, r2
 800221c:	461a      	mov	r2, r3
 800221e:	4603      	mov	r3, r0
 8002220:	817b      	strh	r3, [r7, #10]
 8002222:	460b      	mov	r3, r1
 8002224:	813b      	strh	r3, [r7, #8]
 8002226:	4613      	mov	r3, r2
 8002228:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002238:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800223a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	6a3b      	ldr	r3, [r7, #32]
 8002240:	2200      	movs	r2, #0
 8002242:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002246:	68f8      	ldr	r0, [r7, #12]
 8002248:	f000 f960 	bl	800250c <I2C_WaitOnFlagUntilTimeout>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00d      	beq.n	800226e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002260:	d103      	bne.n	800226a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002268:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e05f      	b.n	800232e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800226e:	897b      	ldrh	r3, [r7, #10]
 8002270:	b2db      	uxtb	r3, r3
 8002272:	461a      	mov	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800227c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002280:	6a3a      	ldr	r2, [r7, #32]
 8002282:	492d      	ldr	r1, [pc, #180]	; (8002338 <I2C_RequestMemoryWrite+0x128>)
 8002284:	68f8      	ldr	r0, [r7, #12]
 8002286:	f000 f998 	bl	80025ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e04c      	b.n	800232e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	617b      	str	r3, [r7, #20]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	617b      	str	r3, [r7, #20]
 80022a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ac:	6a39      	ldr	r1, [r7, #32]
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	f000 fa02 	bl	80026b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00d      	beq.n	80022d6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	2b04      	cmp	r3, #4
 80022c0:	d107      	bne.n	80022d2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e02b      	b.n	800232e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80022d6:	88fb      	ldrh	r3, [r7, #6]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d105      	bne.n	80022e8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80022dc:	893b      	ldrh	r3, [r7, #8]
 80022de:	b2da      	uxtb	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	611a      	str	r2, [r3, #16]
 80022e6:	e021      	b.n	800232c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80022e8:	893b      	ldrh	r3, [r7, #8]
 80022ea:	0a1b      	lsrs	r3, r3, #8
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	b2da      	uxtb	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022f8:	6a39      	ldr	r1, [r7, #32]
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f000 f9dc 	bl	80026b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d00d      	beq.n	8002322 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	2b04      	cmp	r3, #4
 800230c:	d107      	bne.n	800231e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800231c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e005      	b.n	800232e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002322:	893b      	ldrh	r3, [r7, #8]
 8002324:	b2da      	uxtb	r2, r3
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3718      	adds	r7, #24
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	00010002 	.word	0x00010002

0800233c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b088      	sub	sp, #32
 8002340:	af02      	add	r7, sp, #8
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	4608      	mov	r0, r1
 8002346:	4611      	mov	r1, r2
 8002348:	461a      	mov	r2, r3
 800234a:	4603      	mov	r3, r0
 800234c:	817b      	strh	r3, [r7, #10]
 800234e:	460b      	mov	r3, r1
 8002350:	813b      	strh	r3, [r7, #8]
 8002352:	4613      	mov	r3, r2
 8002354:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002364:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002374:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	6a3b      	ldr	r3, [r7, #32]
 800237c:	2200      	movs	r2, #0
 800237e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f000 f8c2 	bl	800250c <I2C_WaitOnFlagUntilTimeout>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00d      	beq.n	80023aa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002398:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800239c:	d103      	bne.n	80023a6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e0aa      	b.n	8002500 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80023aa:	897b      	ldrh	r3, [r7, #10]
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	461a      	mov	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80023b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	6a3a      	ldr	r2, [r7, #32]
 80023be:	4952      	ldr	r1, [pc, #328]	; (8002508 <I2C_RequestMemoryRead+0x1cc>)
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f000 f8fa 	bl	80025ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e097      	b.n	8002500 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023d0:	2300      	movs	r3, #0
 80023d2:	617b      	str	r3, [r7, #20]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	617b      	str	r3, [r7, #20]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	617b      	str	r3, [r7, #20]
 80023e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e8:	6a39      	ldr	r1, [r7, #32]
 80023ea:	68f8      	ldr	r0, [r7, #12]
 80023ec:	f000 f964 	bl	80026b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00d      	beq.n	8002412 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	2b04      	cmp	r3, #4
 80023fc:	d107      	bne.n	800240e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800240c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e076      	b.n	8002500 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002412:	88fb      	ldrh	r3, [r7, #6]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d105      	bne.n	8002424 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002418:	893b      	ldrh	r3, [r7, #8]
 800241a:	b2da      	uxtb	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	611a      	str	r2, [r3, #16]
 8002422:	e021      	b.n	8002468 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002424:	893b      	ldrh	r3, [r7, #8]
 8002426:	0a1b      	lsrs	r3, r3, #8
 8002428:	b29b      	uxth	r3, r3
 800242a:	b2da      	uxtb	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002434:	6a39      	ldr	r1, [r7, #32]
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f000 f93e 	bl	80026b8 <I2C_WaitOnTXEFlagUntilTimeout>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00d      	beq.n	800245e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	2b04      	cmp	r3, #4
 8002448:	d107      	bne.n	800245a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002458:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e050      	b.n	8002500 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800245e:	893b      	ldrh	r3, [r7, #8]
 8002460:	b2da      	uxtb	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800246a:	6a39      	ldr	r1, [r7, #32]
 800246c:	68f8      	ldr	r0, [r7, #12]
 800246e:	f000 f923 	bl	80026b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00d      	beq.n	8002494 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247c:	2b04      	cmp	r3, #4
 800247e:	d107      	bne.n	8002490 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800248e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e035      	b.n	8002500 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024a2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a6:	9300      	str	r3, [sp, #0]
 80024a8:	6a3b      	ldr	r3, [r7, #32]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	f000 f82b 	bl	800250c <I2C_WaitOnFlagUntilTimeout>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00d      	beq.n	80024d8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024ca:	d103      	bne.n	80024d4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e013      	b.n	8002500 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80024d8:	897b      	ldrh	r3, [r7, #10]
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	f043 0301 	orr.w	r3, r3, #1
 80024e0:	b2da      	uxtb	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ea:	6a3a      	ldr	r2, [r7, #32]
 80024ec:	4906      	ldr	r1, [pc, #24]	; (8002508 <I2C_RequestMemoryRead+0x1cc>)
 80024ee:	68f8      	ldr	r0, [r7, #12]
 80024f0:	f000 f863 	bl	80025ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e000      	b.n	8002500 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	3718      	adds	r7, #24
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	00010002 	.word	0x00010002

0800250c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	603b      	str	r3, [r7, #0]
 8002518:	4613      	mov	r3, r2
 800251a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800251c:	e025      	b.n	800256a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002524:	d021      	beq.n	800256a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002526:	f7fe feb3 	bl	8001290 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	429a      	cmp	r2, r3
 8002534:	d302      	bcc.n	800253c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d116      	bne.n	800256a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2220      	movs	r2, #32
 8002546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	f043 0220 	orr.w	r2, r3, #32
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e023      	b.n	80025b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	0c1b      	lsrs	r3, r3, #16
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b01      	cmp	r3, #1
 8002572:	d10d      	bne.n	8002590 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	43da      	mvns	r2, r3
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	4013      	ands	r3, r2
 8002580:	b29b      	uxth	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	bf0c      	ite	eq
 8002586:	2301      	moveq	r3, #1
 8002588:	2300      	movne	r3, #0
 800258a:	b2db      	uxtb	r3, r3
 800258c:	461a      	mov	r2, r3
 800258e:	e00c      	b.n	80025aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	43da      	mvns	r2, r3
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	4013      	ands	r3, r2
 800259c:	b29b      	uxth	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	bf0c      	ite	eq
 80025a2:	2301      	moveq	r3, #1
 80025a4:	2300      	movne	r3, #0
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	461a      	mov	r2, r3
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d0b6      	beq.n	800251e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b084      	sub	sp, #16
 80025be:	af00      	add	r7, sp, #0
 80025c0:	60f8      	str	r0, [r7, #12]
 80025c2:	60b9      	str	r1, [r7, #8]
 80025c4:	607a      	str	r2, [r7, #4]
 80025c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025c8:	e051      	b.n	800266e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025d8:	d123      	bne.n	8002622 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2220      	movs	r2, #32
 80025fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	f043 0204 	orr.w	r2, r3, #4
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e046      	b.n	80026b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002628:	d021      	beq.n	800266e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800262a:	f7fe fe31 	bl	8001290 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	429a      	cmp	r2, r3
 8002638:	d302      	bcc.n	8002640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d116      	bne.n	800266e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2220      	movs	r2, #32
 800264a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	f043 0220 	orr.w	r2, r3, #32
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e020      	b.n	80026b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	0c1b      	lsrs	r3, r3, #16
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2b01      	cmp	r3, #1
 8002676:	d10c      	bne.n	8002692 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	43da      	mvns	r2, r3
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	4013      	ands	r3, r2
 8002684:	b29b      	uxth	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	bf14      	ite	ne
 800268a:	2301      	movne	r3, #1
 800268c:	2300      	moveq	r3, #0
 800268e:	b2db      	uxtb	r3, r3
 8002690:	e00b      	b.n	80026aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	43da      	mvns	r2, r3
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	4013      	ands	r3, r2
 800269e:	b29b      	uxth	r3, r3
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	bf14      	ite	ne
 80026a4:	2301      	movne	r3, #1
 80026a6:	2300      	moveq	r3, #0
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d18d      	bne.n	80025ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026c4:	e02d      	b.n	8002722 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026c6:	68f8      	ldr	r0, [r7, #12]
 80026c8:	f000 f8ce 	bl	8002868 <I2C_IsAcknowledgeFailed>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e02d      	b.n	8002732 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026dc:	d021      	beq.n	8002722 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026de:	f7fe fdd7 	bl	8001290 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	68ba      	ldr	r2, [r7, #8]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d302      	bcc.n	80026f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d116      	bne.n	8002722 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2220      	movs	r2, #32
 80026fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	f043 0220 	orr.w	r2, r3, #32
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e007      	b.n	8002732 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800272c:	2b80      	cmp	r3, #128	; 0x80
 800272e:	d1ca      	bne.n	80026c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b084      	sub	sp, #16
 800273e:	af00      	add	r7, sp, #0
 8002740:	60f8      	str	r0, [r7, #12]
 8002742:	60b9      	str	r1, [r7, #8]
 8002744:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002746:	e02d      	b.n	80027a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f000 f88d 	bl	8002868 <I2C_IsAcknowledgeFailed>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e02d      	b.n	80027b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800275e:	d021      	beq.n	80027a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002760:	f7fe fd96 	bl	8001290 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	68ba      	ldr	r2, [r7, #8]
 800276c:	429a      	cmp	r2, r3
 800276e:	d302      	bcc.n	8002776 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d116      	bne.n	80027a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2220      	movs	r2, #32
 8002780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002790:	f043 0220 	orr.w	r2, r3, #32
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e007      	b.n	80027b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	f003 0304 	and.w	r3, r3, #4
 80027ae:	2b04      	cmp	r3, #4
 80027b0:	d1ca      	bne.n	8002748 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80027c8:	e042      	b.n	8002850 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	f003 0310 	and.w	r3, r3, #16
 80027d4:	2b10      	cmp	r3, #16
 80027d6:	d119      	bne.n	800280c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f06f 0210 	mvn.w	r2, #16
 80027e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2220      	movs	r2, #32
 80027ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e029      	b.n	8002860 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800280c:	f7fe fd40 	bl	8001290 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	68ba      	ldr	r2, [r7, #8]
 8002818:	429a      	cmp	r2, r3
 800281a:	d302      	bcc.n	8002822 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d116      	bne.n	8002850 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2220      	movs	r2, #32
 800282c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283c:	f043 0220 	orr.w	r2, r3, #32
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e007      	b.n	8002860 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800285a:	2b40      	cmp	r3, #64	; 0x40
 800285c:	d1b5      	bne.n	80027ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3710      	adds	r7, #16
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800287a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800287e:	d11b      	bne.n	80028b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002888:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2220      	movs	r2, #32
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a4:	f043 0204 	orr.w	r2, r3, #4
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e000      	b.n	80028ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
	...

080028c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e0cc      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028dc:	4b68      	ldr	r3, [pc, #416]	; (8002a80 <HAL_RCC_ClockConfig+0x1b8>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 030f 	and.w	r3, r3, #15
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d90c      	bls.n	8002904 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ea:	4b65      	ldr	r3, [pc, #404]	; (8002a80 <HAL_RCC_ClockConfig+0x1b8>)
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f2:	4b63      	ldr	r3, [pc, #396]	; (8002a80 <HAL_RCC_ClockConfig+0x1b8>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d001      	beq.n	8002904 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e0b8      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d020      	beq.n	8002952 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b00      	cmp	r3, #0
 800291a:	d005      	beq.n	8002928 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800291c:	4b59      	ldr	r3, [pc, #356]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	4a58      	ldr	r2, [pc, #352]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 8002922:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002926:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0308 	and.w	r3, r3, #8
 8002930:	2b00      	cmp	r3, #0
 8002932:	d005      	beq.n	8002940 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002934:	4b53      	ldr	r3, [pc, #332]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	4a52      	ldr	r2, [pc, #328]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 800293a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800293e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002940:	4b50      	ldr	r3, [pc, #320]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	494d      	ldr	r1, [pc, #308]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 800294e:	4313      	orrs	r3, r2
 8002950:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b00      	cmp	r3, #0
 800295c:	d044      	beq.n	80029e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d107      	bne.n	8002976 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002966:	4b47      	ldr	r3, [pc, #284]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d119      	bne.n	80029a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e07f      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	2b02      	cmp	r3, #2
 800297c:	d003      	beq.n	8002986 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002982:	2b03      	cmp	r3, #3
 8002984:	d107      	bne.n	8002996 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002986:	4b3f      	ldr	r3, [pc, #252]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d109      	bne.n	80029a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e06f      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002996:	4b3b      	ldr	r3, [pc, #236]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e067      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029a6:	4b37      	ldr	r3, [pc, #220]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f023 0203 	bic.w	r2, r3, #3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	4934      	ldr	r1, [pc, #208]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029b8:	f7fe fc6a 	bl	8001290 <HAL_GetTick>
 80029bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029be:	e00a      	b.n	80029d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c0:	f7fe fc66 	bl	8001290 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e04f      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d6:	4b2b      	ldr	r3, [pc, #172]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f003 020c 	and.w	r2, r3, #12
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d1eb      	bne.n	80029c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029e8:	4b25      	ldr	r3, [pc, #148]	; (8002a80 <HAL_RCC_ClockConfig+0x1b8>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 030f 	and.w	r3, r3, #15
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d20c      	bcs.n	8002a10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f6:	4b22      	ldr	r3, [pc, #136]	; (8002a80 <HAL_RCC_ClockConfig+0x1b8>)
 80029f8:	683a      	ldr	r2, [r7, #0]
 80029fa:	b2d2      	uxtb	r2, r2
 80029fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fe:	4b20      	ldr	r3, [pc, #128]	; (8002a80 <HAL_RCC_ClockConfig+0x1b8>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 030f 	and.w	r3, r3, #15
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d001      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e032      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d008      	beq.n	8002a2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a1c:	4b19      	ldr	r3, [pc, #100]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	4916      	ldr	r1, [pc, #88]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0308 	and.w	r3, r3, #8
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d009      	beq.n	8002a4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a3a:	4b12      	ldr	r3, [pc, #72]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	490e      	ldr	r1, [pc, #56]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a4e:	f000 f855 	bl	8002afc <HAL_RCC_GetSysClockFreq>
 8002a52:	4602      	mov	r2, r0
 8002a54:	4b0b      	ldr	r3, [pc, #44]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	091b      	lsrs	r3, r3, #4
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	490a      	ldr	r1, [pc, #40]	; (8002a88 <HAL_RCC_ClockConfig+0x1c0>)
 8002a60:	5ccb      	ldrb	r3, [r1, r3]
 8002a62:	fa22 f303 	lsr.w	r3, r2, r3
 8002a66:	4a09      	ldr	r2, [pc, #36]	; (8002a8c <HAL_RCC_ClockConfig+0x1c4>)
 8002a68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a6a:	4b09      	ldr	r3, [pc, #36]	; (8002a90 <HAL_RCC_ClockConfig+0x1c8>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7fe fbca 	bl	8001208 <HAL_InitTick>

  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40023c00 	.word	0x40023c00
 8002a84:	40023800 	.word	0x40023800
 8002a88:	08004a54 	.word	0x08004a54
 8002a8c:	20000004 	.word	0x20000004
 8002a90:	20000008 	.word	0x20000008

08002a94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a98:	4b03      	ldr	r3, [pc, #12]	; (8002aa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	20000004 	.word	0x20000004

08002aac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ab0:	f7ff fff0 	bl	8002a94 <HAL_RCC_GetHCLKFreq>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	4b05      	ldr	r3, [pc, #20]	; (8002acc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	0a9b      	lsrs	r3, r3, #10
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	4903      	ldr	r1, [pc, #12]	; (8002ad0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ac2:	5ccb      	ldrb	r3, [r1, r3]
 8002ac4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	08004a64 	.word	0x08004a64

08002ad4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ad8:	f7ff ffdc 	bl	8002a94 <HAL_RCC_GetHCLKFreq>
 8002adc:	4602      	mov	r2, r0
 8002ade:	4b05      	ldr	r3, [pc, #20]	; (8002af4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	0b5b      	lsrs	r3, r3, #13
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	4903      	ldr	r1, [pc, #12]	; (8002af8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aea:	5ccb      	ldrb	r3, [r1, r3]
 8002aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40023800 	.word	0x40023800
 8002af8:	08004a64 	.word	0x08004a64

08002afc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002afc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b00:	b0ae      	sub	sp, #184	; 0xb8
 8002b02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b04:	2300      	movs	r3, #0
 8002b06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002b10:	2300      	movs	r3, #0
 8002b12:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002b16:	2300      	movs	r3, #0
 8002b18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b22:	4bcb      	ldr	r3, [pc, #812]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 030c 	and.w	r3, r3, #12
 8002b2a:	2b0c      	cmp	r3, #12
 8002b2c:	f200 8206 	bhi.w	8002f3c <HAL_RCC_GetSysClockFreq+0x440>
 8002b30:	a201      	add	r2, pc, #4	; (adr r2, 8002b38 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b36:	bf00      	nop
 8002b38:	08002b6d 	.word	0x08002b6d
 8002b3c:	08002f3d 	.word	0x08002f3d
 8002b40:	08002f3d 	.word	0x08002f3d
 8002b44:	08002f3d 	.word	0x08002f3d
 8002b48:	08002b75 	.word	0x08002b75
 8002b4c:	08002f3d 	.word	0x08002f3d
 8002b50:	08002f3d 	.word	0x08002f3d
 8002b54:	08002f3d 	.word	0x08002f3d
 8002b58:	08002b7d 	.word	0x08002b7d
 8002b5c:	08002f3d 	.word	0x08002f3d
 8002b60:	08002f3d 	.word	0x08002f3d
 8002b64:	08002f3d 	.word	0x08002f3d
 8002b68:	08002d6d 	.word	0x08002d6d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b6c:	4bb9      	ldr	r3, [pc, #740]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x358>)
 8002b6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002b72:	e1e7      	b.n	8002f44 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b74:	4bb8      	ldr	r3, [pc, #736]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002b76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002b7a:	e1e3      	b.n	8002f44 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b7c:	4bb4      	ldr	r3, [pc, #720]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b88:	4bb1      	ldr	r3, [pc, #708]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d071      	beq.n	8002c78 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b94:	4bae      	ldr	r3, [pc, #696]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	099b      	lsrs	r3, r3, #6
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ba0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002ba4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ba8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002bb6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002bba:	4622      	mov	r2, r4
 8002bbc:	462b      	mov	r3, r5
 8002bbe:	f04f 0000 	mov.w	r0, #0
 8002bc2:	f04f 0100 	mov.w	r1, #0
 8002bc6:	0159      	lsls	r1, r3, #5
 8002bc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bcc:	0150      	lsls	r0, r2, #5
 8002bce:	4602      	mov	r2, r0
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	4621      	mov	r1, r4
 8002bd4:	1a51      	subs	r1, r2, r1
 8002bd6:	6439      	str	r1, [r7, #64]	; 0x40
 8002bd8:	4629      	mov	r1, r5
 8002bda:	eb63 0301 	sbc.w	r3, r3, r1
 8002bde:	647b      	str	r3, [r7, #68]	; 0x44
 8002be0:	f04f 0200 	mov.w	r2, #0
 8002be4:	f04f 0300 	mov.w	r3, #0
 8002be8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002bec:	4649      	mov	r1, r9
 8002bee:	018b      	lsls	r3, r1, #6
 8002bf0:	4641      	mov	r1, r8
 8002bf2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bf6:	4641      	mov	r1, r8
 8002bf8:	018a      	lsls	r2, r1, #6
 8002bfa:	4641      	mov	r1, r8
 8002bfc:	1a51      	subs	r1, r2, r1
 8002bfe:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c00:	4649      	mov	r1, r9
 8002c02:	eb63 0301 	sbc.w	r3, r3, r1
 8002c06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c08:	f04f 0200 	mov.w	r2, #0
 8002c0c:	f04f 0300 	mov.w	r3, #0
 8002c10:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002c14:	4649      	mov	r1, r9
 8002c16:	00cb      	lsls	r3, r1, #3
 8002c18:	4641      	mov	r1, r8
 8002c1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c1e:	4641      	mov	r1, r8
 8002c20:	00ca      	lsls	r2, r1, #3
 8002c22:	4610      	mov	r0, r2
 8002c24:	4619      	mov	r1, r3
 8002c26:	4603      	mov	r3, r0
 8002c28:	4622      	mov	r2, r4
 8002c2a:	189b      	adds	r3, r3, r2
 8002c2c:	633b      	str	r3, [r7, #48]	; 0x30
 8002c2e:	462b      	mov	r3, r5
 8002c30:	460a      	mov	r2, r1
 8002c32:	eb42 0303 	adc.w	r3, r2, r3
 8002c36:	637b      	str	r3, [r7, #52]	; 0x34
 8002c38:	f04f 0200 	mov.w	r2, #0
 8002c3c:	f04f 0300 	mov.w	r3, #0
 8002c40:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002c44:	4629      	mov	r1, r5
 8002c46:	024b      	lsls	r3, r1, #9
 8002c48:	4621      	mov	r1, r4
 8002c4a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c4e:	4621      	mov	r1, r4
 8002c50:	024a      	lsls	r2, r1, #9
 8002c52:	4610      	mov	r0, r2
 8002c54:	4619      	mov	r1, r3
 8002c56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002c60:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002c64:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002c68:	f7fd facc 	bl	8000204 <__aeabi_uldivmod>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	460b      	mov	r3, r1
 8002c70:	4613      	mov	r3, r2
 8002c72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c76:	e067      	b.n	8002d48 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c78:	4b75      	ldr	r3, [pc, #468]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	099b      	lsrs	r3, r3, #6
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c84:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002c88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c90:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c92:	2300      	movs	r3, #0
 8002c94:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002c96:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002c9a:	4622      	mov	r2, r4
 8002c9c:	462b      	mov	r3, r5
 8002c9e:	f04f 0000 	mov.w	r0, #0
 8002ca2:	f04f 0100 	mov.w	r1, #0
 8002ca6:	0159      	lsls	r1, r3, #5
 8002ca8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cac:	0150      	lsls	r0, r2, #5
 8002cae:	4602      	mov	r2, r0
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	4621      	mov	r1, r4
 8002cb4:	1a51      	subs	r1, r2, r1
 8002cb6:	62b9      	str	r1, [r7, #40]	; 0x28
 8002cb8:	4629      	mov	r1, r5
 8002cba:	eb63 0301 	sbc.w	r3, r3, r1
 8002cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cc0:	f04f 0200 	mov.w	r2, #0
 8002cc4:	f04f 0300 	mov.w	r3, #0
 8002cc8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002ccc:	4649      	mov	r1, r9
 8002cce:	018b      	lsls	r3, r1, #6
 8002cd0:	4641      	mov	r1, r8
 8002cd2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cd6:	4641      	mov	r1, r8
 8002cd8:	018a      	lsls	r2, r1, #6
 8002cda:	4641      	mov	r1, r8
 8002cdc:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ce0:	4649      	mov	r1, r9
 8002ce2:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ce6:	f04f 0200 	mov.w	r2, #0
 8002cea:	f04f 0300 	mov.w	r3, #0
 8002cee:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002cf2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002cf6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002cfa:	4692      	mov	sl, r2
 8002cfc:	469b      	mov	fp, r3
 8002cfe:	4623      	mov	r3, r4
 8002d00:	eb1a 0303 	adds.w	r3, sl, r3
 8002d04:	623b      	str	r3, [r7, #32]
 8002d06:	462b      	mov	r3, r5
 8002d08:	eb4b 0303 	adc.w	r3, fp, r3
 8002d0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d0e:	f04f 0200 	mov.w	r2, #0
 8002d12:	f04f 0300 	mov.w	r3, #0
 8002d16:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002d1a:	4629      	mov	r1, r5
 8002d1c:	028b      	lsls	r3, r1, #10
 8002d1e:	4621      	mov	r1, r4
 8002d20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d24:	4621      	mov	r1, r4
 8002d26:	028a      	lsls	r2, r1, #10
 8002d28:	4610      	mov	r0, r2
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d30:	2200      	movs	r2, #0
 8002d32:	673b      	str	r3, [r7, #112]	; 0x70
 8002d34:	677a      	str	r2, [r7, #116]	; 0x74
 8002d36:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002d3a:	f7fd fa63 	bl	8000204 <__aeabi_uldivmod>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	460b      	mov	r3, r1
 8002d42:	4613      	mov	r3, r2
 8002d44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d48:	4b41      	ldr	r3, [pc, #260]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	0c1b      	lsrs	r3, r3, #16
 8002d4e:	f003 0303 	and.w	r3, r3, #3
 8002d52:	3301      	adds	r3, #1
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002d5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002d5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002d6a:	e0eb      	b.n	8002f44 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d6c:	4b38      	ldr	r3, [pc, #224]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d78:	4b35      	ldr	r3, [pc, #212]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d06b      	beq.n	8002e5c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d84:	4b32      	ldr	r3, [pc, #200]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	099b      	lsrs	r3, r3, #6
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d8e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d96:	663b      	str	r3, [r7, #96]	; 0x60
 8002d98:	2300      	movs	r3, #0
 8002d9a:	667b      	str	r3, [r7, #100]	; 0x64
 8002d9c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002da0:	4622      	mov	r2, r4
 8002da2:	462b      	mov	r3, r5
 8002da4:	f04f 0000 	mov.w	r0, #0
 8002da8:	f04f 0100 	mov.w	r1, #0
 8002dac:	0159      	lsls	r1, r3, #5
 8002dae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002db2:	0150      	lsls	r0, r2, #5
 8002db4:	4602      	mov	r2, r0
 8002db6:	460b      	mov	r3, r1
 8002db8:	4621      	mov	r1, r4
 8002dba:	1a51      	subs	r1, r2, r1
 8002dbc:	61b9      	str	r1, [r7, #24]
 8002dbe:	4629      	mov	r1, r5
 8002dc0:	eb63 0301 	sbc.w	r3, r3, r1
 8002dc4:	61fb      	str	r3, [r7, #28]
 8002dc6:	f04f 0200 	mov.w	r2, #0
 8002dca:	f04f 0300 	mov.w	r3, #0
 8002dce:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002dd2:	4659      	mov	r1, fp
 8002dd4:	018b      	lsls	r3, r1, #6
 8002dd6:	4651      	mov	r1, sl
 8002dd8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ddc:	4651      	mov	r1, sl
 8002dde:	018a      	lsls	r2, r1, #6
 8002de0:	4651      	mov	r1, sl
 8002de2:	ebb2 0801 	subs.w	r8, r2, r1
 8002de6:	4659      	mov	r1, fp
 8002de8:	eb63 0901 	sbc.w	r9, r3, r1
 8002dec:	f04f 0200 	mov.w	r2, #0
 8002df0:	f04f 0300 	mov.w	r3, #0
 8002df4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002df8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002dfc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e00:	4690      	mov	r8, r2
 8002e02:	4699      	mov	r9, r3
 8002e04:	4623      	mov	r3, r4
 8002e06:	eb18 0303 	adds.w	r3, r8, r3
 8002e0a:	613b      	str	r3, [r7, #16]
 8002e0c:	462b      	mov	r3, r5
 8002e0e:	eb49 0303 	adc.w	r3, r9, r3
 8002e12:	617b      	str	r3, [r7, #20]
 8002e14:	f04f 0200 	mov.w	r2, #0
 8002e18:	f04f 0300 	mov.w	r3, #0
 8002e1c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002e20:	4629      	mov	r1, r5
 8002e22:	024b      	lsls	r3, r1, #9
 8002e24:	4621      	mov	r1, r4
 8002e26:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e2a:	4621      	mov	r1, r4
 8002e2c:	024a      	lsls	r2, r1, #9
 8002e2e:	4610      	mov	r0, r2
 8002e30:	4619      	mov	r1, r3
 8002e32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e36:	2200      	movs	r2, #0
 8002e38:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e3a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002e3c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002e40:	f7fd f9e0 	bl	8000204 <__aeabi_uldivmod>
 8002e44:	4602      	mov	r2, r0
 8002e46:	460b      	mov	r3, r1
 8002e48:	4613      	mov	r3, r2
 8002e4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e4e:	e065      	b.n	8002f1c <HAL_RCC_GetSysClockFreq+0x420>
 8002e50:	40023800 	.word	0x40023800
 8002e54:	00f42400 	.word	0x00f42400
 8002e58:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e5c:	4b3d      	ldr	r3, [pc, #244]	; (8002f54 <HAL_RCC_GetSysClockFreq+0x458>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	099b      	lsrs	r3, r3, #6
 8002e62:	2200      	movs	r2, #0
 8002e64:	4618      	mov	r0, r3
 8002e66:	4611      	mov	r1, r2
 8002e68:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e6c:	653b      	str	r3, [r7, #80]	; 0x50
 8002e6e:	2300      	movs	r3, #0
 8002e70:	657b      	str	r3, [r7, #84]	; 0x54
 8002e72:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002e76:	4642      	mov	r2, r8
 8002e78:	464b      	mov	r3, r9
 8002e7a:	f04f 0000 	mov.w	r0, #0
 8002e7e:	f04f 0100 	mov.w	r1, #0
 8002e82:	0159      	lsls	r1, r3, #5
 8002e84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e88:	0150      	lsls	r0, r2, #5
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	4641      	mov	r1, r8
 8002e90:	1a51      	subs	r1, r2, r1
 8002e92:	60b9      	str	r1, [r7, #8]
 8002e94:	4649      	mov	r1, r9
 8002e96:	eb63 0301 	sbc.w	r3, r3, r1
 8002e9a:	60fb      	str	r3, [r7, #12]
 8002e9c:	f04f 0200 	mov.w	r2, #0
 8002ea0:	f04f 0300 	mov.w	r3, #0
 8002ea4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002ea8:	4659      	mov	r1, fp
 8002eaa:	018b      	lsls	r3, r1, #6
 8002eac:	4651      	mov	r1, sl
 8002eae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002eb2:	4651      	mov	r1, sl
 8002eb4:	018a      	lsls	r2, r1, #6
 8002eb6:	4651      	mov	r1, sl
 8002eb8:	1a54      	subs	r4, r2, r1
 8002eba:	4659      	mov	r1, fp
 8002ebc:	eb63 0501 	sbc.w	r5, r3, r1
 8002ec0:	f04f 0200 	mov.w	r2, #0
 8002ec4:	f04f 0300 	mov.w	r3, #0
 8002ec8:	00eb      	lsls	r3, r5, #3
 8002eca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ece:	00e2      	lsls	r2, r4, #3
 8002ed0:	4614      	mov	r4, r2
 8002ed2:	461d      	mov	r5, r3
 8002ed4:	4643      	mov	r3, r8
 8002ed6:	18e3      	adds	r3, r4, r3
 8002ed8:	603b      	str	r3, [r7, #0]
 8002eda:	464b      	mov	r3, r9
 8002edc:	eb45 0303 	adc.w	r3, r5, r3
 8002ee0:	607b      	str	r3, [r7, #4]
 8002ee2:	f04f 0200 	mov.w	r2, #0
 8002ee6:	f04f 0300 	mov.w	r3, #0
 8002eea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002eee:	4629      	mov	r1, r5
 8002ef0:	028b      	lsls	r3, r1, #10
 8002ef2:	4621      	mov	r1, r4
 8002ef4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ef8:	4621      	mov	r1, r4
 8002efa:	028a      	lsls	r2, r1, #10
 8002efc:	4610      	mov	r0, r2
 8002efe:	4619      	mov	r1, r3
 8002f00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f04:	2200      	movs	r2, #0
 8002f06:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f08:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002f0a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002f0e:	f7fd f979 	bl	8000204 <__aeabi_uldivmod>
 8002f12:	4602      	mov	r2, r0
 8002f14:	460b      	mov	r3, r1
 8002f16:	4613      	mov	r3, r2
 8002f18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002f1c:	4b0d      	ldr	r3, [pc, #52]	; (8002f54 <HAL_RCC_GetSysClockFreq+0x458>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	0f1b      	lsrs	r3, r3, #28
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002f2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002f3a:	e003      	b.n	8002f44 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f3c:	4b06      	ldr	r3, [pc, #24]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002f3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002f42:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f44:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	37b8      	adds	r7, #184	; 0xb8
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f52:	bf00      	nop
 8002f54:	40023800 	.word	0x40023800
 8002f58:	00f42400 	.word	0x00f42400

08002f5c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e28d      	b.n	800348a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f000 8083 	beq.w	8003082 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002f7c:	4b94      	ldr	r3, [pc, #592]	; (80031d0 <HAL_RCC_OscConfig+0x274>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f003 030c 	and.w	r3, r3, #12
 8002f84:	2b04      	cmp	r3, #4
 8002f86:	d019      	beq.n	8002fbc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f88:	4b91      	ldr	r3, [pc, #580]	; (80031d0 <HAL_RCC_OscConfig+0x274>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002f90:	2b08      	cmp	r3, #8
 8002f92:	d106      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f94:	4b8e      	ldr	r3, [pc, #568]	; (80031d0 <HAL_RCC_OscConfig+0x274>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fa0:	d00c      	beq.n	8002fbc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fa2:	4b8b      	ldr	r3, [pc, #556]	; (80031d0 <HAL_RCC_OscConfig+0x274>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002faa:	2b0c      	cmp	r3, #12
 8002fac:	d112      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fae:	4b88      	ldr	r3, [pc, #544]	; (80031d0 <HAL_RCC_OscConfig+0x274>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fba:	d10b      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fbc:	4b84      	ldr	r3, [pc, #528]	; (80031d0 <HAL_RCC_OscConfig+0x274>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d05b      	beq.n	8003080 <HAL_RCC_OscConfig+0x124>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d157      	bne.n	8003080 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e25a      	b.n	800348a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fdc:	d106      	bne.n	8002fec <HAL_RCC_OscConfig+0x90>
 8002fde:	4b7c      	ldr	r3, [pc, #496]	; (80031d0 <HAL_RCC_OscConfig+0x274>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a7b      	ldr	r2, [pc, #492]	; (80031d0 <HAL_RCC_OscConfig+0x274>)
 8002fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe8:	6013      	str	r3, [r2, #0]
 8002fea:	e01d      	b.n	8003028 <HAL_RCC_OscConfig+0xcc>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ff4:	d10c      	bne.n	8003010 <HAL_RCC_OscConfig+0xb4>
 8002ff6:	4b76      	ldr	r3, [pc, #472]	; (80031d0 <HAL_RCC_OscConfig+0x274>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a75      	ldr	r2, [pc, #468]	; (80031d0 <HAL_RCC_OscConfig+0x274>)
 8002ffc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003000:	6013      	str	r3, [r2, #0]
 8003002:	4b73      	ldr	r3, [pc, #460]	; (80031d0 <HAL_RCC_OscConfig+0x274>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a72      	ldr	r2, [pc, #456]	; (80031d0 <HAL_RCC_OscConfig+0x274>)
 8003008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800300c:	6013      	str	r3, [r2, #0]
 800300e:	e00b      	b.n	8003028 <HAL_RCC_OscConfig+0xcc>
 8003010:	4b6f      	ldr	r3, [pc, #444]	; (80031d0 <HAL_RCC_OscConfig+0x274>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a6e      	ldr	r2, [pc, #440]	; (80031d0 <HAL_RCC_OscConfig+0x274>)
 8003016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800301a:	6013      	str	r3, [r2, #0]
 800301c:	4b6c      	ldr	r3, [pc, #432]	; (80031d0 <HAL_RCC_OscConfig+0x274>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a6b      	ldr	r2, [pc, #428]	; (80031d0 <HAL_RCC_OscConfig+0x274>)
 8003022:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003026:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d013      	beq.n	8003058 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003030:	f7fe f92e 	bl	8001290 <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003038:	f7fe f92a 	bl	8001290 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b64      	cmp	r3, #100	; 0x64
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e21f      	b.n	800348a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800304a:	4b61      	ldr	r3, [pc, #388]	; (80031d0 <HAL_RCC_OscConfig+0x274>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d0f0      	beq.n	8003038 <HAL_RCC_OscConfig+0xdc>
 8003056:	e014      	b.n	8003082 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003058:	f7fe f91a 	bl	8001290 <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003060:	f7fe f916 	bl	8001290 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b64      	cmp	r3, #100	; 0x64
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e20b      	b.n	800348a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003072:	4b57      	ldr	r3, [pc, #348]	; (80031d0 <HAL_RCC_OscConfig+0x274>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1f0      	bne.n	8003060 <HAL_RCC_OscConfig+0x104>
 800307e:	e000      	b.n	8003082 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003080:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d06f      	beq.n	800316e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800308e:	4b50      	ldr	r3, [pc, #320]	; (80031d0 <HAL_RCC_OscConfig+0x274>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 030c 	and.w	r3, r3, #12
 8003096:	2b00      	cmp	r3, #0
 8003098:	d017      	beq.n	80030ca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800309a:	4b4d      	ldr	r3, [pc, #308]	; (80031d0 <HAL_RCC_OscConfig+0x274>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80030a2:	2b08      	cmp	r3, #8
 80030a4:	d105      	bne.n	80030b2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80030a6:	4b4a      	ldr	r3, [pc, #296]	; (80031d0 <HAL_RCC_OscConfig+0x274>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00b      	beq.n	80030ca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030b2:	4b47      	ldr	r3, [pc, #284]	; (80031d0 <HAL_RCC_OscConfig+0x274>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80030ba:	2b0c      	cmp	r3, #12
 80030bc:	d11c      	bne.n	80030f8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030be:	4b44      	ldr	r3, [pc, #272]	; (80031d0 <HAL_RCC_OscConfig+0x274>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d116      	bne.n	80030f8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ca:	4b41      	ldr	r3, [pc, #260]	; (80031d0 <HAL_RCC_OscConfig+0x274>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d005      	beq.n	80030e2 <HAL_RCC_OscConfig+0x186>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d001      	beq.n	80030e2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e1d3      	b.n	800348a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e2:	4b3b      	ldr	r3, [pc, #236]	; (80031d0 <HAL_RCC_OscConfig+0x274>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	4937      	ldr	r1, [pc, #220]	; (80031d0 <HAL_RCC_OscConfig+0x274>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030f6:	e03a      	b.n	800316e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d020      	beq.n	8003142 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003100:	4b34      	ldr	r3, [pc, #208]	; (80031d4 <HAL_RCC_OscConfig+0x278>)
 8003102:	2201      	movs	r2, #1
 8003104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003106:	f7fe f8c3 	bl	8001290 <HAL_GetTick>
 800310a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800310c:	e008      	b.n	8003120 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800310e:	f7fe f8bf 	bl	8001290 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d901      	bls.n	8003120 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e1b4      	b.n	800348a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003120:	4b2b      	ldr	r3, [pc, #172]	; (80031d0 <HAL_RCC_OscConfig+0x274>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d0f0      	beq.n	800310e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800312c:	4b28      	ldr	r3, [pc, #160]	; (80031d0 <HAL_RCC_OscConfig+0x274>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	4925      	ldr	r1, [pc, #148]	; (80031d0 <HAL_RCC_OscConfig+0x274>)
 800313c:	4313      	orrs	r3, r2
 800313e:	600b      	str	r3, [r1, #0]
 8003140:	e015      	b.n	800316e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003142:	4b24      	ldr	r3, [pc, #144]	; (80031d4 <HAL_RCC_OscConfig+0x278>)
 8003144:	2200      	movs	r2, #0
 8003146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003148:	f7fe f8a2 	bl	8001290 <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800314e:	e008      	b.n	8003162 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003150:	f7fe f89e 	bl	8001290 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b02      	cmp	r3, #2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e193      	b.n	800348a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003162:	4b1b      	ldr	r3, [pc, #108]	; (80031d0 <HAL_RCC_OscConfig+0x274>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1f0      	bne.n	8003150 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0308 	and.w	r3, r3, #8
 8003176:	2b00      	cmp	r3, #0
 8003178:	d036      	beq.n	80031e8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d016      	beq.n	80031b0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003182:	4b15      	ldr	r3, [pc, #84]	; (80031d8 <HAL_RCC_OscConfig+0x27c>)
 8003184:	2201      	movs	r2, #1
 8003186:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003188:	f7fe f882 	bl	8001290 <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003190:	f7fe f87e 	bl	8001290 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e173      	b.n	800348a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031a2:	4b0b      	ldr	r3, [pc, #44]	; (80031d0 <HAL_RCC_OscConfig+0x274>)
 80031a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d0f0      	beq.n	8003190 <HAL_RCC_OscConfig+0x234>
 80031ae:	e01b      	b.n	80031e8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031b0:	4b09      	ldr	r3, [pc, #36]	; (80031d8 <HAL_RCC_OscConfig+0x27c>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b6:	f7fe f86b 	bl	8001290 <HAL_GetTick>
 80031ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031bc:	e00e      	b.n	80031dc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031be:	f7fe f867 	bl	8001290 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d907      	bls.n	80031dc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e15c      	b.n	800348a <HAL_RCC_OscConfig+0x52e>
 80031d0:	40023800 	.word	0x40023800
 80031d4:	42470000 	.word	0x42470000
 80031d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031dc:	4b8a      	ldr	r3, [pc, #552]	; (8003408 <HAL_RCC_OscConfig+0x4ac>)
 80031de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1ea      	bne.n	80031be <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0304 	and.w	r3, r3, #4
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f000 8097 	beq.w	8003324 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031f6:	2300      	movs	r3, #0
 80031f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031fa:	4b83      	ldr	r3, [pc, #524]	; (8003408 <HAL_RCC_OscConfig+0x4ac>)
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10f      	bne.n	8003226 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003206:	2300      	movs	r3, #0
 8003208:	60bb      	str	r3, [r7, #8]
 800320a:	4b7f      	ldr	r3, [pc, #508]	; (8003408 <HAL_RCC_OscConfig+0x4ac>)
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	4a7e      	ldr	r2, [pc, #504]	; (8003408 <HAL_RCC_OscConfig+0x4ac>)
 8003210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003214:	6413      	str	r3, [r2, #64]	; 0x40
 8003216:	4b7c      	ldr	r3, [pc, #496]	; (8003408 <HAL_RCC_OscConfig+0x4ac>)
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800321e:	60bb      	str	r3, [r7, #8]
 8003220:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003222:	2301      	movs	r3, #1
 8003224:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003226:	4b79      	ldr	r3, [pc, #484]	; (800340c <HAL_RCC_OscConfig+0x4b0>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800322e:	2b00      	cmp	r3, #0
 8003230:	d118      	bne.n	8003264 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003232:	4b76      	ldr	r3, [pc, #472]	; (800340c <HAL_RCC_OscConfig+0x4b0>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a75      	ldr	r2, [pc, #468]	; (800340c <HAL_RCC_OscConfig+0x4b0>)
 8003238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800323c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800323e:	f7fe f827 	bl	8001290 <HAL_GetTick>
 8003242:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003244:	e008      	b.n	8003258 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003246:	f7fe f823 	bl	8001290 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d901      	bls.n	8003258 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e118      	b.n	800348a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003258:	4b6c      	ldr	r3, [pc, #432]	; (800340c <HAL_RCC_OscConfig+0x4b0>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003260:	2b00      	cmp	r3, #0
 8003262:	d0f0      	beq.n	8003246 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d106      	bne.n	800327a <HAL_RCC_OscConfig+0x31e>
 800326c:	4b66      	ldr	r3, [pc, #408]	; (8003408 <HAL_RCC_OscConfig+0x4ac>)
 800326e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003270:	4a65      	ldr	r2, [pc, #404]	; (8003408 <HAL_RCC_OscConfig+0x4ac>)
 8003272:	f043 0301 	orr.w	r3, r3, #1
 8003276:	6713      	str	r3, [r2, #112]	; 0x70
 8003278:	e01c      	b.n	80032b4 <HAL_RCC_OscConfig+0x358>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	2b05      	cmp	r3, #5
 8003280:	d10c      	bne.n	800329c <HAL_RCC_OscConfig+0x340>
 8003282:	4b61      	ldr	r3, [pc, #388]	; (8003408 <HAL_RCC_OscConfig+0x4ac>)
 8003284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003286:	4a60      	ldr	r2, [pc, #384]	; (8003408 <HAL_RCC_OscConfig+0x4ac>)
 8003288:	f043 0304 	orr.w	r3, r3, #4
 800328c:	6713      	str	r3, [r2, #112]	; 0x70
 800328e:	4b5e      	ldr	r3, [pc, #376]	; (8003408 <HAL_RCC_OscConfig+0x4ac>)
 8003290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003292:	4a5d      	ldr	r2, [pc, #372]	; (8003408 <HAL_RCC_OscConfig+0x4ac>)
 8003294:	f043 0301 	orr.w	r3, r3, #1
 8003298:	6713      	str	r3, [r2, #112]	; 0x70
 800329a:	e00b      	b.n	80032b4 <HAL_RCC_OscConfig+0x358>
 800329c:	4b5a      	ldr	r3, [pc, #360]	; (8003408 <HAL_RCC_OscConfig+0x4ac>)
 800329e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a0:	4a59      	ldr	r2, [pc, #356]	; (8003408 <HAL_RCC_OscConfig+0x4ac>)
 80032a2:	f023 0301 	bic.w	r3, r3, #1
 80032a6:	6713      	str	r3, [r2, #112]	; 0x70
 80032a8:	4b57      	ldr	r3, [pc, #348]	; (8003408 <HAL_RCC_OscConfig+0x4ac>)
 80032aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ac:	4a56      	ldr	r2, [pc, #344]	; (8003408 <HAL_RCC_OscConfig+0x4ac>)
 80032ae:	f023 0304 	bic.w	r3, r3, #4
 80032b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d015      	beq.n	80032e8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032bc:	f7fd ffe8 	bl	8001290 <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032c2:	e00a      	b.n	80032da <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032c4:	f7fd ffe4 	bl	8001290 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e0d7      	b.n	800348a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032da:	4b4b      	ldr	r3, [pc, #300]	; (8003408 <HAL_RCC_OscConfig+0x4ac>)
 80032dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d0ee      	beq.n	80032c4 <HAL_RCC_OscConfig+0x368>
 80032e6:	e014      	b.n	8003312 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e8:	f7fd ffd2 	bl	8001290 <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ee:	e00a      	b.n	8003306 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032f0:	f7fd ffce 	bl	8001290 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80032fe:	4293      	cmp	r3, r2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e0c1      	b.n	800348a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003306:	4b40      	ldr	r3, [pc, #256]	; (8003408 <HAL_RCC_OscConfig+0x4ac>)
 8003308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1ee      	bne.n	80032f0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003312:	7dfb      	ldrb	r3, [r7, #23]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d105      	bne.n	8003324 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003318:	4b3b      	ldr	r3, [pc, #236]	; (8003408 <HAL_RCC_OscConfig+0x4ac>)
 800331a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331c:	4a3a      	ldr	r2, [pc, #232]	; (8003408 <HAL_RCC_OscConfig+0x4ac>)
 800331e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003322:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 80ad 	beq.w	8003488 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800332e:	4b36      	ldr	r3, [pc, #216]	; (8003408 <HAL_RCC_OscConfig+0x4ac>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f003 030c 	and.w	r3, r3, #12
 8003336:	2b08      	cmp	r3, #8
 8003338:	d060      	beq.n	80033fc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	2b02      	cmp	r3, #2
 8003340:	d145      	bne.n	80033ce <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003342:	4b33      	ldr	r3, [pc, #204]	; (8003410 <HAL_RCC_OscConfig+0x4b4>)
 8003344:	2200      	movs	r2, #0
 8003346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003348:	f7fd ffa2 	bl	8001290 <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003350:	f7fd ff9e 	bl	8001290 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e093      	b.n	800348a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003362:	4b29      	ldr	r3, [pc, #164]	; (8003408 <HAL_RCC_OscConfig+0x4ac>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1f0      	bne.n	8003350 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	69da      	ldr	r2, [r3, #28]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	431a      	orrs	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	019b      	lsls	r3, r3, #6
 800337e:	431a      	orrs	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003384:	085b      	lsrs	r3, r3, #1
 8003386:	3b01      	subs	r3, #1
 8003388:	041b      	lsls	r3, r3, #16
 800338a:	431a      	orrs	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003390:	061b      	lsls	r3, r3, #24
 8003392:	431a      	orrs	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003398:	071b      	lsls	r3, r3, #28
 800339a:	491b      	ldr	r1, [pc, #108]	; (8003408 <HAL_RCC_OscConfig+0x4ac>)
 800339c:	4313      	orrs	r3, r2
 800339e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033a0:	4b1b      	ldr	r3, [pc, #108]	; (8003410 <HAL_RCC_OscConfig+0x4b4>)
 80033a2:	2201      	movs	r2, #1
 80033a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a6:	f7fd ff73 	bl	8001290 <HAL_GetTick>
 80033aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ac:	e008      	b.n	80033c0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033ae:	f7fd ff6f 	bl	8001290 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d901      	bls.n	80033c0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e064      	b.n	800348a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033c0:	4b11      	ldr	r3, [pc, #68]	; (8003408 <HAL_RCC_OscConfig+0x4ac>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d0f0      	beq.n	80033ae <HAL_RCC_OscConfig+0x452>
 80033cc:	e05c      	b.n	8003488 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ce:	4b10      	ldr	r3, [pc, #64]	; (8003410 <HAL_RCC_OscConfig+0x4b4>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d4:	f7fd ff5c 	bl	8001290 <HAL_GetTick>
 80033d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033da:	e008      	b.n	80033ee <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033dc:	f7fd ff58 	bl	8001290 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e04d      	b.n	800348a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ee:	4b06      	ldr	r3, [pc, #24]	; (8003408 <HAL_RCC_OscConfig+0x4ac>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1f0      	bne.n	80033dc <HAL_RCC_OscConfig+0x480>
 80033fa:	e045      	b.n	8003488 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d107      	bne.n	8003414 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e040      	b.n	800348a <HAL_RCC_OscConfig+0x52e>
 8003408:	40023800 	.word	0x40023800
 800340c:	40007000 	.word	0x40007000
 8003410:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003414:	4b1f      	ldr	r3, [pc, #124]	; (8003494 <HAL_RCC_OscConfig+0x538>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d030      	beq.n	8003484 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800342c:	429a      	cmp	r2, r3
 800342e:	d129      	bne.n	8003484 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800343a:	429a      	cmp	r2, r3
 800343c:	d122      	bne.n	8003484 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003444:	4013      	ands	r3, r2
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800344a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800344c:	4293      	cmp	r3, r2
 800344e:	d119      	bne.n	8003484 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345a:	085b      	lsrs	r3, r3, #1
 800345c:	3b01      	subs	r3, #1
 800345e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003460:	429a      	cmp	r2, r3
 8003462:	d10f      	bne.n	8003484 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003470:	429a      	cmp	r2, r3
 8003472:	d107      	bne.n	8003484 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003480:	429a      	cmp	r2, r3
 8003482:	d001      	beq.n	8003488 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e000      	b.n	800348a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3718      	adds	r7, #24
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	40023800 	.word	0x40023800

08003498 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e07b      	b.n	80035a2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d108      	bne.n	80034c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034ba:	d009      	beq.n	80034d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	61da      	str	r2, [r3, #28]
 80034c2:	e005      	b.n	80034d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d106      	bne.n	80034f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f7fd fd20 	bl	8000f30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2202      	movs	r2, #2
 80034f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003506:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003518:	431a      	orrs	r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003522:	431a      	orrs	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	431a      	orrs	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	431a      	orrs	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003540:	431a      	orrs	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800354a:	431a      	orrs	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003554:	ea42 0103 	orr.w	r1, r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	430a      	orrs	r2, r1
 8003566:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	0c1b      	lsrs	r3, r3, #16
 800356e:	f003 0104 	and.w	r1, r3, #4
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003576:	f003 0210 	and.w	r2, r3, #16
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	430a      	orrs	r2, r1
 8003580:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	69da      	ldr	r2, [r3, #28]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003590:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
	...

080035ac <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	4613      	mov	r3, r2
 80035b8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80035ba:	2300      	movs	r3, #0
 80035bc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d110      	bne.n	80035e8 <HAL_SPI_Receive_IT+0x3c>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035ce:	d10b      	bne.n	80035e8 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2204      	movs	r2, #4
 80035d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80035d8:	88fb      	ldrh	r3, [r7, #6]
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	68b9      	ldr	r1, [r7, #8]
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f000 f882 	bl	80036e8 <HAL_SPI_TransmitReceive_IT>
 80035e4:	4603      	mov	r3, r0
 80035e6:	e076      	b.n	80036d6 <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d101      	bne.n	80035f6 <HAL_SPI_Receive_IT+0x4a>
 80035f2:	2302      	movs	r3, #2
 80035f4:	e06f      	b.n	80036d6 <HAL_SPI_Receive_IT+0x12a>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b01      	cmp	r3, #1
 8003608:	d002      	beq.n	8003610 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 800360a:	2302      	movs	r3, #2
 800360c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800360e:	e05d      	b.n	80036cc <HAL_SPI_Receive_IT+0x120>
  }

  if ((pData == NULL) || (Size == 0U))
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d002      	beq.n	800361c <HAL_SPI_Receive_IT+0x70>
 8003616:	88fb      	ldrh	r3, [r7, #6]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d102      	bne.n	8003622 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003620:	e054      	b.n	80036cc <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2204      	movs	r2, #4
 8003626:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	68ba      	ldr	r2, [r7, #8]
 8003634:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	88fa      	ldrh	r2, [r7, #6]
 800363a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	88fa      	ldrh	r2, [r7, #6]
 8003640:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	4a1e      	ldr	r2, [pc, #120]	; (80036e0 <HAL_SPI_Receive_IT+0x134>)
 8003666:	641a      	str	r2, [r3, #64]	; 0x40
 8003668:	e002      	b.n	8003670 <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	4a1d      	ldr	r2, [pc, #116]	; (80036e4 <HAL_SPI_Receive_IT+0x138>)
 800366e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003678:	d10f      	bne.n	800369a <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003688:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003698:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	685a      	ldr	r2, [r3, #4]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80036a8:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b4:	2b40      	cmp	r3, #64	; 0x40
 80036b6:	d008      	beq.n	80036ca <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036c6:	601a      	str	r2, [r3, #0]
 80036c8:	e000      	b.n	80036cc <HAL_SPI_Receive_IT+0x120>
  }

error :
 80036ca:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80036d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3718      	adds	r7, #24
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	08003c2d 	.word	0x08003c2d
 80036e4:	08003be3 	.word	0x08003be3

080036e8 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b087      	sub	sp, #28
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
 80036f4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80036f6:	2300      	movs	r3, #0
 80036f8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003700:	2b01      	cmp	r3, #1
 8003702:	d101      	bne.n	8003708 <HAL_SPI_TransmitReceive_IT+0x20>
 8003704:	2302      	movs	r3, #2
 8003706:	e075      	b.n	80037f4 <HAL_SPI_TransmitReceive_IT+0x10c>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003716:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800371e:	7dbb      	ldrb	r3, [r7, #22]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d00d      	beq.n	8003740 <HAL_SPI_TransmitReceive_IT+0x58>
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800372a:	d106      	bne.n	800373a <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d102      	bne.n	800373a <HAL_SPI_TransmitReceive_IT+0x52>
 8003734:	7dbb      	ldrb	r3, [r7, #22]
 8003736:	2b04      	cmp	r3, #4
 8003738:	d002      	beq.n	8003740 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800373a:	2302      	movs	r3, #2
 800373c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800373e:	e054      	b.n	80037ea <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d005      	beq.n	8003752 <HAL_SPI_TransmitReceive_IT+0x6a>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d002      	beq.n	8003752 <HAL_SPI_TransmitReceive_IT+0x6a>
 800374c:	887b      	ldrh	r3, [r7, #2]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d102      	bne.n	8003758 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003756:	e048      	b.n	80037ea <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b04      	cmp	r3, #4
 8003762:	d003      	beq.n	800376c <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2205      	movs	r2, #5
 8003768:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	68ba      	ldr	r2, [r7, #8]
 8003776:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	887a      	ldrh	r2, [r7, #2]
 800377c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	887a      	ldrh	r2, [r7, #2]
 8003782:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	887a      	ldrh	r2, [r7, #2]
 800378e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	887a      	ldrh	r2, [r7, #2]
 8003794:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d006      	beq.n	80037ac <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	4a17      	ldr	r2, [pc, #92]	; (8003800 <HAL_SPI_TransmitReceive_IT+0x118>)
 80037a2:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	4a17      	ldr	r2, [pc, #92]	; (8003804 <HAL_SPI_TransmitReceive_IT+0x11c>)
 80037a8:	645a      	str	r2, [r3, #68]	; 0x44
 80037aa:	e005      	b.n	80037b8 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	4a16      	ldr	r2, [pc, #88]	; (8003808 <HAL_SPI_TransmitReceive_IT+0x120>)
 80037b0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	4a15      	ldr	r2, [pc, #84]	; (800380c <HAL_SPI_TransmitReceive_IT+0x124>)
 80037b6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	685a      	ldr	r2, [r3, #4]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80037c6:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d2:	2b40      	cmp	r3, #64	; 0x40
 80037d4:	d008      	beq.n	80037e8 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037e4:	601a      	str	r2, [r3, #0]
 80037e6:	e000      	b.n	80037ea <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 80037e8:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80037f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	371c      	adds	r7, #28
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr
 8003800:	08003b25 	.word	0x08003b25
 8003804:	08003b85 	.word	0x08003b85
 8003808:	08003a61 	.word	0x08003a61
 800380c:	08003ac5 	.word	0x08003ac5

08003810 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b088      	sub	sp, #32
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	099b      	lsrs	r3, r3, #6
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	2b00      	cmp	r3, #0
 8003832:	d10f      	bne.n	8003854 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00a      	beq.n	8003854 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	099b      	lsrs	r3, r3, #6
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	2b00      	cmp	r3, #0
 8003848:	d004      	beq.n	8003854 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	4798      	blx	r3
    return;
 8003852:	e0d7      	b.n	8003a04 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	085b      	lsrs	r3, r3, #1
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00a      	beq.n	8003876 <HAL_SPI_IRQHandler+0x66>
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	09db      	lsrs	r3, r3, #7
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	2b00      	cmp	r3, #0
 800386a:	d004      	beq.n	8003876 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	4798      	blx	r3
    return;
 8003874:	e0c6      	b.n	8003a04 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	095b      	lsrs	r3, r3, #5
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b00      	cmp	r3, #0
 8003880:	d10c      	bne.n	800389c <HAL_SPI_IRQHandler+0x8c>
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	099b      	lsrs	r3, r3, #6
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b00      	cmp	r3, #0
 800388c:	d106      	bne.n	800389c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	0a1b      	lsrs	r3, r3, #8
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b00      	cmp	r3, #0
 8003898:	f000 80b4 	beq.w	8003a04 <HAL_SPI_IRQHandler+0x1f4>
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	095b      	lsrs	r3, r3, #5
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f000 80ad 	beq.w	8003a04 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	099b      	lsrs	r3, r3, #6
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d023      	beq.n	80038fe <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b03      	cmp	r3, #3
 80038c0:	d011      	beq.n	80038e6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c6:	f043 0204 	orr.w	r2, r3, #4
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038ce:	2300      	movs	r3, #0
 80038d0:	617b      	str	r3, [r7, #20]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	617b      	str	r3, [r7, #20]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	617b      	str	r3, [r7, #20]
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	e00b      	b.n	80038fe <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038e6:	2300      	movs	r3, #0
 80038e8:	613b      	str	r3, [r7, #16]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	613b      	str	r3, [r7, #16]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	613b      	str	r3, [r7, #16]
 80038fa:	693b      	ldr	r3, [r7, #16]
        return;
 80038fc:	e082      	b.n	8003a04 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	095b      	lsrs	r3, r3, #5
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	2b00      	cmp	r3, #0
 8003908:	d014      	beq.n	8003934 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800390e:	f043 0201 	orr.w	r2, r3, #1
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003916:	2300      	movs	r3, #0
 8003918:	60fb      	str	r3, [r7, #12]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	60fb      	str	r3, [r7, #12]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003930:	601a      	str	r2, [r3, #0]
 8003932:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	0a1b      	lsrs	r3, r3, #8
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00c      	beq.n	800395a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003944:	f043 0208 	orr.w	r2, r3, #8
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800394c:	2300      	movs	r3, #0
 800394e:	60bb      	str	r3, [r7, #8]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	60bb      	str	r3, [r7, #8]
 8003958:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800395e:	2b00      	cmp	r3, #0
 8003960:	d04f      	beq.n	8003a02 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	685a      	ldr	r2, [r3, #4]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003970:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d104      	bne.n	800398e <HAL_SPI_IRQHandler+0x17e>
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	2b00      	cmp	r3, #0
 800398c:	d034      	beq.n	80039f8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f022 0203 	bic.w	r2, r2, #3
 800399c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d011      	beq.n	80039ca <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039aa:	4a18      	ldr	r2, [pc, #96]	; (8003a0c <HAL_SPI_IRQHandler+0x1fc>)
 80039ac:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7fd fddf 	bl	8001576 <HAL_DMA_Abort_IT>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d005      	beq.n	80039ca <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d016      	beq.n	8003a00 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039d6:	4a0d      	ldr	r2, [pc, #52]	; (8003a0c <HAL_SPI_IRQHandler+0x1fc>)
 80039d8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039de:	4618      	mov	r0, r3
 80039e0:	f7fd fdc9 	bl	8001576 <HAL_DMA_Abort_IT>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00a      	beq.n	8003a00 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80039f6:	e003      	b.n	8003a00 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f000 f813 	bl	8003a24 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80039fe:	e000      	b.n	8003a02 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003a00:	bf00      	nop
    return;
 8003a02:	bf00      	nop
  }
}
 8003a04:	3720      	adds	r7, #32
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	08003a39 	.word	0x08003a39

08003a10 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a44:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f7ff ffe6 	bl	8003a24 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003a58:	bf00      	nop
 8003a5a:	3710      	adds	r7, #16
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f103 020c 	add.w	r2, r3, #12
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a74:	7812      	ldrb	r2, [r2, #0]
 8003a76:	b2d2      	uxtb	r2, r2
 8003a78:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7e:	1c5a      	adds	r2, r3, #1
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d10f      	bne.n	8003abc <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	685a      	ldr	r2, [r3, #4]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003aaa:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d102      	bne.n	8003abc <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 fa0c 	bl	8003ed4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003abc:	bf00      	nop
 8003abe:	3708      	adds	r7, #8
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	330c      	adds	r3, #12
 8003ad6:	7812      	ldrb	r2, [r2, #0]
 8003ad8:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ade:	1c5a      	adds	r2, r3, #1
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	3b01      	subs	r3, #1
 8003aec:	b29a      	uxth	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d10f      	bne.n	8003b1c <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b0a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d102      	bne.n	8003b1c <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f9dc 	bl	8003ed4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003b1c:	bf00      	nop
 8003b1e:	3708      	adds	r7, #8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68da      	ldr	r2, [r3, #12]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b36:	b292      	uxth	r2, r2
 8003b38:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3e:	1c9a      	adds	r2, r3, #2
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d10f      	bne.n	8003b7c <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685a      	ldr	r2, [r3, #4]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b6a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d102      	bne.n	8003b7c <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f9ac 	bl	8003ed4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003b7c:	bf00      	nop
 8003b7e:	3708      	adds	r7, #8
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b90:	881a      	ldrh	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9c:	1c9a      	adds	r2, r3, #2
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10f      	bne.n	8003bda <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bc8:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d102      	bne.n	8003bda <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 f97d 	bl	8003ed4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003bda:	bf00      	nop
 8003bdc:	3708      	adds	r7, #8
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b082      	sub	sp, #8
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f103 020c 	add.w	r2, r3, #12
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf6:	7812      	ldrb	r2, [r2, #0]
 8003bf8:	b2d2      	uxtb	r2, r2
 8003bfa:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c00:	1c5a      	adds	r2, r3, #1
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d102      	bne.n	8003c24 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 f9cc 	bl	8003fbc <SPI_CloseRx_ISR>
  }
}
 8003c24:	bf00      	nop
 8003c26:	3708      	adds	r7, #8
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68da      	ldr	r2, [r3, #12]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3e:	b292      	uxth	r2, r2
 8003c40:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c46:	1c9a      	adds	r2, r3, #2
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	3b01      	subs	r3, #1
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d102      	bne.n	8003c6a <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 f9a9 	bl	8003fbc <SPI_CloseRx_ISR>
  }
}
 8003c6a:	bf00      	nop
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
	...

08003c74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b088      	sub	sp, #32
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	603b      	str	r3, [r7, #0]
 8003c80:	4613      	mov	r3, r2
 8003c82:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c84:	f7fd fb04 	bl	8001290 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c8c:	1a9b      	subs	r3, r3, r2
 8003c8e:	683a      	ldr	r2, [r7, #0]
 8003c90:	4413      	add	r3, r2
 8003c92:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c94:	f7fd fafc 	bl	8001290 <HAL_GetTick>
 8003c98:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c9a:	4b39      	ldr	r3, [pc, #228]	; (8003d80 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	015b      	lsls	r3, r3, #5
 8003ca0:	0d1b      	lsrs	r3, r3, #20
 8003ca2:	69fa      	ldr	r2, [r7, #28]
 8003ca4:	fb02 f303 	mul.w	r3, r2, r3
 8003ca8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003caa:	e054      	b.n	8003d56 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cb2:	d050      	beq.n	8003d56 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003cb4:	f7fd faec 	bl	8001290 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	69fa      	ldr	r2, [r7, #28]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d902      	bls.n	8003cca <SPI_WaitFlagStateUntilTimeout+0x56>
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d13d      	bne.n	8003d46 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	685a      	ldr	r2, [r3, #4]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003cd8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ce2:	d111      	bne.n	8003d08 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cec:	d004      	beq.n	8003cf8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cf6:	d107      	bne.n	8003d08 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d10:	d10f      	bne.n	8003d32 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e017      	b.n	8003d76 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d101      	bne.n	8003d50 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	3b01      	subs	r3, #1
 8003d54:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	689a      	ldr	r2, [r3, #8]
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	4013      	ands	r3, r2
 8003d60:	68ba      	ldr	r2, [r7, #8]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	bf0c      	ite	eq
 8003d66:	2301      	moveq	r3, #1
 8003d68:	2300      	movne	r3, #0
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	79fb      	ldrb	r3, [r7, #7]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d19b      	bne.n	8003cac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3720      	adds	r7, #32
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	20000004 	.word	0x20000004

08003d84 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af02      	add	r7, sp, #8
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d98:	d111      	bne.n	8003dbe <SPI_EndRxTransaction+0x3a>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003da2:	d004      	beq.n	8003dae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dac:	d107      	bne.n	8003dbe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dbc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dc6:	d12a      	bne.n	8003e1e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dd0:	d012      	beq.n	8003df8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	2180      	movs	r1, #128	; 0x80
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f7ff ff49 	bl	8003c74 <SPI_WaitFlagStateUntilTimeout>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d02d      	beq.n	8003e44 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dec:	f043 0220 	orr.w	r2, r3, #32
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e026      	b.n	8003e46 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	2101      	movs	r1, #1
 8003e02:	68f8      	ldr	r0, [r7, #12]
 8003e04:	f7ff ff36 	bl	8003c74 <SPI_WaitFlagStateUntilTimeout>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d01a      	beq.n	8003e44 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e12:	f043 0220 	orr.w	r2, r3, #32
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e013      	b.n	8003e46 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	9300      	str	r3, [sp, #0]
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	2200      	movs	r2, #0
 8003e26:	2101      	movs	r1, #1
 8003e28:	68f8      	ldr	r0, [r7, #12]
 8003e2a:	f7ff ff23 	bl	8003c74 <SPI_WaitFlagStateUntilTimeout>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d007      	beq.n	8003e44 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e38:	f043 0220 	orr.w	r2, r3, #32
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e000      	b.n	8003e46 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
	...

08003e50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b088      	sub	sp, #32
 8003e54:	af02      	add	r7, sp, #8
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003e5c:	4b1b      	ldr	r3, [pc, #108]	; (8003ecc <SPI_EndRxTxTransaction+0x7c>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a1b      	ldr	r2, [pc, #108]	; (8003ed0 <SPI_EndRxTxTransaction+0x80>)
 8003e62:	fba2 2303 	umull	r2, r3, r2, r3
 8003e66:	0d5b      	lsrs	r3, r3, #21
 8003e68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e6c:	fb02 f303 	mul.w	r3, r2, r3
 8003e70:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e7a:	d112      	bne.n	8003ea2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	9300      	str	r3, [sp, #0]
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	2200      	movs	r2, #0
 8003e84:	2180      	movs	r1, #128	; 0x80
 8003e86:	68f8      	ldr	r0, [r7, #12]
 8003e88:	f7ff fef4 	bl	8003c74 <SPI_WaitFlagStateUntilTimeout>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d016      	beq.n	8003ec0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e96:	f043 0220 	orr.w	r2, r3, #32
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e00f      	b.n	8003ec2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00a      	beq.n	8003ebe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb8:	2b80      	cmp	r3, #128	; 0x80
 8003eba:	d0f2      	beq.n	8003ea2 <SPI_EndRxTxTransaction+0x52>
 8003ebc:	e000      	b.n	8003ec0 <SPI_EndRxTxTransaction+0x70>
        break;
 8003ebe:	bf00      	nop
  }

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3718      	adds	r7, #24
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	20000004 	.word	0x20000004
 8003ed0:	165e9f81 	.word	0x165e9f81

08003ed4 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b086      	sub	sp, #24
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8003edc:	4b35      	ldr	r3, [pc, #212]	; (8003fb4 <SPI_CloseRxTx_ISR+0xe0>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a35      	ldr	r2, [pc, #212]	; (8003fb8 <SPI_CloseRxTx_ISR+0xe4>)
 8003ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee6:	0a5b      	lsrs	r3, r3, #9
 8003ee8:	2264      	movs	r2, #100	; 0x64
 8003eea:	fb02 f303 	mul.w	r3, r2, r3
 8003eee:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ef0:	f7fd f9ce 	bl	8001290 <HAL_GetTick>
 8003ef4:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 0220 	bic.w	r2, r2, #32
 8003f04:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d106      	bne.n	8003f1a <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f10:	f043 0220 	orr.w	r2, r3, #32
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003f18:	e009      	b.n	8003f2e <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d0eb      	beq.n	8003f06 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	2164      	movs	r1, #100	; 0x64
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f7ff ff8c 	bl	8003e50 <SPI_EndRxTxTransaction>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d005      	beq.n	8003f4a <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f42:	f043 0220 	orr.w	r2, r3, #32
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10a      	bne.n	8003f68 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f52:	2300      	movs	r3, #0
 8003f54:	60fb      	str	r3, [r7, #12]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	60fb      	str	r3, [r7, #12]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	60fb      	str	r3, [r7, #12]
 8003f66:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d115      	bne.n	8003f9c <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	2b04      	cmp	r3, #4
 8003f7a:	d107      	bne.n	8003f8c <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f7fc ff51 	bl	8000e2c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003f8a:	e00e      	b.n	8003faa <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f7ff fd3b 	bl	8003a10 <HAL_SPI_TxRxCpltCallback>
}
 8003f9a:	e006      	b.n	8003faa <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f7ff fd3d 	bl	8003a24 <HAL_SPI_ErrorCallback>
}
 8003faa:	bf00      	nop
 8003fac:	3718      	adds	r7, #24
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	20000004 	.word	0x20000004
 8003fb8:	057619f1 	.word	0x057619f1

08003fbc <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	685a      	ldr	r2, [r3, #4]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003fd2:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8003fd4:	f7fd f95c 	bl	8001290 <HAL_GetTick>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	461a      	mov	r2, r3
 8003fdc:	2164      	movs	r1, #100	; 0x64
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f7ff fed0 	bl	8003d84 <SPI_EndRxTransaction>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d005      	beq.n	8003ff6 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fee:	f043 0220 	orr.w	r2, r3, #32
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10a      	bne.n	8004014 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ffe:	2300      	movs	r3, #0
 8004000:	60fb      	str	r3, [r7, #12]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	60fb      	str	r3, [r7, #12]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	60fb      	str	r3, [r7, #12]
 8004012:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004020:	2b00      	cmp	r3, #0
 8004022:	d103      	bne.n	800402c <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f7fc ff01 	bl	8000e2c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800402a:	e002      	b.n	8004032 <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f7ff fcf9 	bl	8003a24 <HAL_SPI_ErrorCallback>
}
 8004032:	bf00      	nop
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}

0800403a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800403a:	b580      	push	{r7, lr}
 800403c:	b082      	sub	sp, #8
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d101      	bne.n	800404c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e03f      	b.n	80040cc <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2b00      	cmp	r3, #0
 8004056:	d106      	bne.n	8004066 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f7fc ffb5 	bl	8000fd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2224      	movs	r2, #36	; 0x24
 800406a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68da      	ldr	r2, [r3, #12]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800407c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 f928 	bl	80042d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	691a      	ldr	r2, [r3, #16]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004092:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	695a      	ldr	r2, [r3, #20]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040a2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68da      	ldr	r2, [r3, #12]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040b2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2220      	movs	r2, #32
 80040be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2220      	movs	r2, #32
 80040c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3708      	adds	r7, #8
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b08a      	sub	sp, #40	; 0x28
 80040d8:	af02      	add	r7, sp, #8
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	603b      	str	r3, [r7, #0]
 80040e0:	4613      	mov	r3, r2
 80040e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80040e4:	2300      	movs	r3, #0
 80040e6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	2b20      	cmp	r3, #32
 80040f2:	d17c      	bne.n	80041ee <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d002      	beq.n	8004100 <HAL_UART_Transmit+0x2c>
 80040fa:	88fb      	ldrh	r3, [r7, #6]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d101      	bne.n	8004104 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e075      	b.n	80041f0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800410a:	2b01      	cmp	r3, #1
 800410c:	d101      	bne.n	8004112 <HAL_UART_Transmit+0x3e>
 800410e:	2302      	movs	r3, #2
 8004110:	e06e      	b.n	80041f0 <HAL_UART_Transmit+0x11c>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2221      	movs	r2, #33	; 0x21
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004128:	f7fd f8b2 	bl	8001290 <HAL_GetTick>
 800412c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	88fa      	ldrh	r2, [r7, #6]
 8004132:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	88fa      	ldrh	r2, [r7, #6]
 8004138:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004142:	d108      	bne.n	8004156 <HAL_UART_Transmit+0x82>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d104      	bne.n	8004156 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800414c:	2300      	movs	r3, #0
 800414e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	61bb      	str	r3, [r7, #24]
 8004154:	e003      	b.n	800415e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800415a:	2300      	movs	r3, #0
 800415c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004166:	e02a      	b.n	80041be <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	2200      	movs	r2, #0
 8004170:	2180      	movs	r1, #128	; 0x80
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f000 f840 	bl	80041f8 <UART_WaitOnFlagUntilTimeout>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d001      	beq.n	8004182 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e036      	b.n	80041f0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d10b      	bne.n	80041a0 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	881b      	ldrh	r3, [r3, #0]
 800418c:	461a      	mov	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004196:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	3302      	adds	r3, #2
 800419c:	61bb      	str	r3, [r7, #24]
 800419e:	e007      	b.n	80041b0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	781a      	ldrb	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	3301      	adds	r3, #1
 80041ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	3b01      	subs	r3, #1
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1cf      	bne.n	8004168 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	9300      	str	r3, [sp, #0]
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	2200      	movs	r2, #0
 80041d0:	2140      	movs	r1, #64	; 0x40
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f000 f810 	bl	80041f8 <UART_WaitOnFlagUntilTimeout>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e006      	b.n	80041f0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2220      	movs	r2, #32
 80041e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80041ea:	2300      	movs	r3, #0
 80041ec:	e000      	b.n	80041f0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80041ee:	2302      	movs	r3, #2
  }
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3720      	adds	r7, #32
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b090      	sub	sp, #64	; 0x40
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	603b      	str	r3, [r7, #0]
 8004204:	4613      	mov	r3, r2
 8004206:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004208:	e050      	b.n	80042ac <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800420a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800420c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004210:	d04c      	beq.n	80042ac <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004212:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004214:	2b00      	cmp	r3, #0
 8004216:	d007      	beq.n	8004228 <UART_WaitOnFlagUntilTimeout+0x30>
 8004218:	f7fd f83a 	bl	8001290 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004224:	429a      	cmp	r2, r3
 8004226:	d241      	bcs.n	80042ac <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	330c      	adds	r3, #12
 800422e:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004232:	e853 3f00 	ldrex	r3, [r3]
 8004236:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800423e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	330c      	adds	r3, #12
 8004246:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004248:	637a      	str	r2, [r7, #52]	; 0x34
 800424a:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800424e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004250:	e841 2300 	strex	r3, r2, [r1]
 8004254:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1e5      	bne.n	8004228 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	3314      	adds	r3, #20
 8004262:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	e853 3f00 	ldrex	r3, [r3]
 800426a:	613b      	str	r3, [r7, #16]
   return(result);
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	f023 0301 	bic.w	r3, r3, #1
 8004272:	63bb      	str	r3, [r7, #56]	; 0x38
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	3314      	adds	r3, #20
 800427a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800427c:	623a      	str	r2, [r7, #32]
 800427e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004280:	69f9      	ldr	r1, [r7, #28]
 8004282:	6a3a      	ldr	r2, [r7, #32]
 8004284:	e841 2300 	strex	r3, r2, [r1]
 8004288:	61bb      	str	r3, [r7, #24]
   return(result);
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1e5      	bne.n	800425c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2220      	movs	r2, #32
 8004294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2220      	movs	r2, #32
 800429c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e00f      	b.n	80042cc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	4013      	ands	r3, r2
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	bf0c      	ite	eq
 80042bc:	2301      	moveq	r3, #1
 80042be:	2300      	movne	r3, #0
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	461a      	mov	r2, r3
 80042c4:	79fb      	ldrb	r3, [r7, #7]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d09f      	beq.n	800420a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3740      	adds	r7, #64	; 0x40
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042d8:	b0c0      	sub	sp, #256	; 0x100
 80042da:	af00      	add	r7, sp, #0
 80042dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80042ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f0:	68d9      	ldr	r1, [r3, #12]
 80042f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	ea40 0301 	orr.w	r3, r0, r1
 80042fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004302:	689a      	ldr	r2, [r3, #8]
 8004304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	431a      	orrs	r2, r3
 800430c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	431a      	orrs	r2, r3
 8004314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	4313      	orrs	r3, r2
 800431c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800432c:	f021 010c 	bic.w	r1, r1, #12
 8004330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800433a:	430b      	orrs	r3, r1
 800433c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800433e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800434a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800434e:	6999      	ldr	r1, [r3, #24]
 8004350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	ea40 0301 	orr.w	r3, r0, r1
 800435a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800435c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	4b8f      	ldr	r3, [pc, #572]	; (80045a0 <UART_SetConfig+0x2cc>)
 8004364:	429a      	cmp	r2, r3
 8004366:	d005      	beq.n	8004374 <UART_SetConfig+0xa0>
 8004368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	4b8d      	ldr	r3, [pc, #564]	; (80045a4 <UART_SetConfig+0x2d0>)
 8004370:	429a      	cmp	r2, r3
 8004372:	d104      	bne.n	800437e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004374:	f7fe fbae 	bl	8002ad4 <HAL_RCC_GetPCLK2Freq>
 8004378:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800437c:	e003      	b.n	8004386 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800437e:	f7fe fb95 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 8004382:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800438a:	69db      	ldr	r3, [r3, #28]
 800438c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004390:	f040 810c 	bne.w	80045ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004394:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004398:	2200      	movs	r2, #0
 800439a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800439e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80043a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80043a6:	4622      	mov	r2, r4
 80043a8:	462b      	mov	r3, r5
 80043aa:	1891      	adds	r1, r2, r2
 80043ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80043ae:	415b      	adcs	r3, r3
 80043b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80043b6:	4621      	mov	r1, r4
 80043b8:	eb12 0801 	adds.w	r8, r2, r1
 80043bc:	4629      	mov	r1, r5
 80043be:	eb43 0901 	adc.w	r9, r3, r1
 80043c2:	f04f 0200 	mov.w	r2, #0
 80043c6:	f04f 0300 	mov.w	r3, #0
 80043ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043d6:	4690      	mov	r8, r2
 80043d8:	4699      	mov	r9, r3
 80043da:	4623      	mov	r3, r4
 80043dc:	eb18 0303 	adds.w	r3, r8, r3
 80043e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80043e4:	462b      	mov	r3, r5
 80043e6:	eb49 0303 	adc.w	r3, r9, r3
 80043ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80043ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80043fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80043fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004402:	460b      	mov	r3, r1
 8004404:	18db      	adds	r3, r3, r3
 8004406:	653b      	str	r3, [r7, #80]	; 0x50
 8004408:	4613      	mov	r3, r2
 800440a:	eb42 0303 	adc.w	r3, r2, r3
 800440e:	657b      	str	r3, [r7, #84]	; 0x54
 8004410:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004414:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004418:	f7fb fef4 	bl	8000204 <__aeabi_uldivmod>
 800441c:	4602      	mov	r2, r0
 800441e:	460b      	mov	r3, r1
 8004420:	4b61      	ldr	r3, [pc, #388]	; (80045a8 <UART_SetConfig+0x2d4>)
 8004422:	fba3 2302 	umull	r2, r3, r3, r2
 8004426:	095b      	lsrs	r3, r3, #5
 8004428:	011c      	lsls	r4, r3, #4
 800442a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800442e:	2200      	movs	r2, #0
 8004430:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004434:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004438:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800443c:	4642      	mov	r2, r8
 800443e:	464b      	mov	r3, r9
 8004440:	1891      	adds	r1, r2, r2
 8004442:	64b9      	str	r1, [r7, #72]	; 0x48
 8004444:	415b      	adcs	r3, r3
 8004446:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004448:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800444c:	4641      	mov	r1, r8
 800444e:	eb12 0a01 	adds.w	sl, r2, r1
 8004452:	4649      	mov	r1, r9
 8004454:	eb43 0b01 	adc.w	fp, r3, r1
 8004458:	f04f 0200 	mov.w	r2, #0
 800445c:	f04f 0300 	mov.w	r3, #0
 8004460:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004464:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004468:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800446c:	4692      	mov	sl, r2
 800446e:	469b      	mov	fp, r3
 8004470:	4643      	mov	r3, r8
 8004472:	eb1a 0303 	adds.w	r3, sl, r3
 8004476:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800447a:	464b      	mov	r3, r9
 800447c:	eb4b 0303 	adc.w	r3, fp, r3
 8004480:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004490:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004494:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004498:	460b      	mov	r3, r1
 800449a:	18db      	adds	r3, r3, r3
 800449c:	643b      	str	r3, [r7, #64]	; 0x40
 800449e:	4613      	mov	r3, r2
 80044a0:	eb42 0303 	adc.w	r3, r2, r3
 80044a4:	647b      	str	r3, [r7, #68]	; 0x44
 80044a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80044aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80044ae:	f7fb fea9 	bl	8000204 <__aeabi_uldivmod>
 80044b2:	4602      	mov	r2, r0
 80044b4:	460b      	mov	r3, r1
 80044b6:	4611      	mov	r1, r2
 80044b8:	4b3b      	ldr	r3, [pc, #236]	; (80045a8 <UART_SetConfig+0x2d4>)
 80044ba:	fba3 2301 	umull	r2, r3, r3, r1
 80044be:	095b      	lsrs	r3, r3, #5
 80044c0:	2264      	movs	r2, #100	; 0x64
 80044c2:	fb02 f303 	mul.w	r3, r2, r3
 80044c6:	1acb      	subs	r3, r1, r3
 80044c8:	00db      	lsls	r3, r3, #3
 80044ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80044ce:	4b36      	ldr	r3, [pc, #216]	; (80045a8 <UART_SetConfig+0x2d4>)
 80044d0:	fba3 2302 	umull	r2, r3, r3, r2
 80044d4:	095b      	lsrs	r3, r3, #5
 80044d6:	005b      	lsls	r3, r3, #1
 80044d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80044dc:	441c      	add	r4, r3
 80044de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044e2:	2200      	movs	r2, #0
 80044e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80044ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80044f0:	4642      	mov	r2, r8
 80044f2:	464b      	mov	r3, r9
 80044f4:	1891      	adds	r1, r2, r2
 80044f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80044f8:	415b      	adcs	r3, r3
 80044fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004500:	4641      	mov	r1, r8
 8004502:	1851      	adds	r1, r2, r1
 8004504:	6339      	str	r1, [r7, #48]	; 0x30
 8004506:	4649      	mov	r1, r9
 8004508:	414b      	adcs	r3, r1
 800450a:	637b      	str	r3, [r7, #52]	; 0x34
 800450c:	f04f 0200 	mov.w	r2, #0
 8004510:	f04f 0300 	mov.w	r3, #0
 8004514:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004518:	4659      	mov	r1, fp
 800451a:	00cb      	lsls	r3, r1, #3
 800451c:	4651      	mov	r1, sl
 800451e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004522:	4651      	mov	r1, sl
 8004524:	00ca      	lsls	r2, r1, #3
 8004526:	4610      	mov	r0, r2
 8004528:	4619      	mov	r1, r3
 800452a:	4603      	mov	r3, r0
 800452c:	4642      	mov	r2, r8
 800452e:	189b      	adds	r3, r3, r2
 8004530:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004534:	464b      	mov	r3, r9
 8004536:	460a      	mov	r2, r1
 8004538:	eb42 0303 	adc.w	r3, r2, r3
 800453c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800454c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004550:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004554:	460b      	mov	r3, r1
 8004556:	18db      	adds	r3, r3, r3
 8004558:	62bb      	str	r3, [r7, #40]	; 0x28
 800455a:	4613      	mov	r3, r2
 800455c:	eb42 0303 	adc.w	r3, r2, r3
 8004560:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004562:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004566:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800456a:	f7fb fe4b 	bl	8000204 <__aeabi_uldivmod>
 800456e:	4602      	mov	r2, r0
 8004570:	460b      	mov	r3, r1
 8004572:	4b0d      	ldr	r3, [pc, #52]	; (80045a8 <UART_SetConfig+0x2d4>)
 8004574:	fba3 1302 	umull	r1, r3, r3, r2
 8004578:	095b      	lsrs	r3, r3, #5
 800457a:	2164      	movs	r1, #100	; 0x64
 800457c:	fb01 f303 	mul.w	r3, r1, r3
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	00db      	lsls	r3, r3, #3
 8004584:	3332      	adds	r3, #50	; 0x32
 8004586:	4a08      	ldr	r2, [pc, #32]	; (80045a8 <UART_SetConfig+0x2d4>)
 8004588:	fba2 2303 	umull	r2, r3, r2, r3
 800458c:	095b      	lsrs	r3, r3, #5
 800458e:	f003 0207 	and.w	r2, r3, #7
 8004592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4422      	add	r2, r4
 800459a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800459c:	e105      	b.n	80047aa <UART_SetConfig+0x4d6>
 800459e:	bf00      	nop
 80045a0:	40011000 	.word	0x40011000
 80045a4:	40011400 	.word	0x40011400
 80045a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045b0:	2200      	movs	r2, #0
 80045b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80045b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80045ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80045be:	4642      	mov	r2, r8
 80045c0:	464b      	mov	r3, r9
 80045c2:	1891      	adds	r1, r2, r2
 80045c4:	6239      	str	r1, [r7, #32]
 80045c6:	415b      	adcs	r3, r3
 80045c8:	627b      	str	r3, [r7, #36]	; 0x24
 80045ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045ce:	4641      	mov	r1, r8
 80045d0:	1854      	adds	r4, r2, r1
 80045d2:	4649      	mov	r1, r9
 80045d4:	eb43 0501 	adc.w	r5, r3, r1
 80045d8:	f04f 0200 	mov.w	r2, #0
 80045dc:	f04f 0300 	mov.w	r3, #0
 80045e0:	00eb      	lsls	r3, r5, #3
 80045e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045e6:	00e2      	lsls	r2, r4, #3
 80045e8:	4614      	mov	r4, r2
 80045ea:	461d      	mov	r5, r3
 80045ec:	4643      	mov	r3, r8
 80045ee:	18e3      	adds	r3, r4, r3
 80045f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80045f4:	464b      	mov	r3, r9
 80045f6:	eb45 0303 	adc.w	r3, r5, r3
 80045fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80045fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800460a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800460e:	f04f 0200 	mov.w	r2, #0
 8004612:	f04f 0300 	mov.w	r3, #0
 8004616:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800461a:	4629      	mov	r1, r5
 800461c:	008b      	lsls	r3, r1, #2
 800461e:	4621      	mov	r1, r4
 8004620:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004624:	4621      	mov	r1, r4
 8004626:	008a      	lsls	r2, r1, #2
 8004628:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800462c:	f7fb fdea 	bl	8000204 <__aeabi_uldivmod>
 8004630:	4602      	mov	r2, r0
 8004632:	460b      	mov	r3, r1
 8004634:	4b60      	ldr	r3, [pc, #384]	; (80047b8 <UART_SetConfig+0x4e4>)
 8004636:	fba3 2302 	umull	r2, r3, r3, r2
 800463a:	095b      	lsrs	r3, r3, #5
 800463c:	011c      	lsls	r4, r3, #4
 800463e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004642:	2200      	movs	r2, #0
 8004644:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004648:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800464c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004650:	4642      	mov	r2, r8
 8004652:	464b      	mov	r3, r9
 8004654:	1891      	adds	r1, r2, r2
 8004656:	61b9      	str	r1, [r7, #24]
 8004658:	415b      	adcs	r3, r3
 800465a:	61fb      	str	r3, [r7, #28]
 800465c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004660:	4641      	mov	r1, r8
 8004662:	1851      	adds	r1, r2, r1
 8004664:	6139      	str	r1, [r7, #16]
 8004666:	4649      	mov	r1, r9
 8004668:	414b      	adcs	r3, r1
 800466a:	617b      	str	r3, [r7, #20]
 800466c:	f04f 0200 	mov.w	r2, #0
 8004670:	f04f 0300 	mov.w	r3, #0
 8004674:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004678:	4659      	mov	r1, fp
 800467a:	00cb      	lsls	r3, r1, #3
 800467c:	4651      	mov	r1, sl
 800467e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004682:	4651      	mov	r1, sl
 8004684:	00ca      	lsls	r2, r1, #3
 8004686:	4610      	mov	r0, r2
 8004688:	4619      	mov	r1, r3
 800468a:	4603      	mov	r3, r0
 800468c:	4642      	mov	r2, r8
 800468e:	189b      	adds	r3, r3, r2
 8004690:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004694:	464b      	mov	r3, r9
 8004696:	460a      	mov	r2, r1
 8004698:	eb42 0303 	adc.w	r3, r2, r3
 800469c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80046a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80046aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80046ac:	f04f 0200 	mov.w	r2, #0
 80046b0:	f04f 0300 	mov.w	r3, #0
 80046b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80046b8:	4649      	mov	r1, r9
 80046ba:	008b      	lsls	r3, r1, #2
 80046bc:	4641      	mov	r1, r8
 80046be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046c2:	4641      	mov	r1, r8
 80046c4:	008a      	lsls	r2, r1, #2
 80046c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80046ca:	f7fb fd9b 	bl	8000204 <__aeabi_uldivmod>
 80046ce:	4602      	mov	r2, r0
 80046d0:	460b      	mov	r3, r1
 80046d2:	4b39      	ldr	r3, [pc, #228]	; (80047b8 <UART_SetConfig+0x4e4>)
 80046d4:	fba3 1302 	umull	r1, r3, r3, r2
 80046d8:	095b      	lsrs	r3, r3, #5
 80046da:	2164      	movs	r1, #100	; 0x64
 80046dc:	fb01 f303 	mul.w	r3, r1, r3
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	011b      	lsls	r3, r3, #4
 80046e4:	3332      	adds	r3, #50	; 0x32
 80046e6:	4a34      	ldr	r2, [pc, #208]	; (80047b8 <UART_SetConfig+0x4e4>)
 80046e8:	fba2 2303 	umull	r2, r3, r2, r3
 80046ec:	095b      	lsrs	r3, r3, #5
 80046ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046f2:	441c      	add	r4, r3
 80046f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046f8:	2200      	movs	r2, #0
 80046fa:	673b      	str	r3, [r7, #112]	; 0x70
 80046fc:	677a      	str	r2, [r7, #116]	; 0x74
 80046fe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004702:	4642      	mov	r2, r8
 8004704:	464b      	mov	r3, r9
 8004706:	1891      	adds	r1, r2, r2
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	415b      	adcs	r3, r3
 800470c:	60fb      	str	r3, [r7, #12]
 800470e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004712:	4641      	mov	r1, r8
 8004714:	1851      	adds	r1, r2, r1
 8004716:	6039      	str	r1, [r7, #0]
 8004718:	4649      	mov	r1, r9
 800471a:	414b      	adcs	r3, r1
 800471c:	607b      	str	r3, [r7, #4]
 800471e:	f04f 0200 	mov.w	r2, #0
 8004722:	f04f 0300 	mov.w	r3, #0
 8004726:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800472a:	4659      	mov	r1, fp
 800472c:	00cb      	lsls	r3, r1, #3
 800472e:	4651      	mov	r1, sl
 8004730:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004734:	4651      	mov	r1, sl
 8004736:	00ca      	lsls	r2, r1, #3
 8004738:	4610      	mov	r0, r2
 800473a:	4619      	mov	r1, r3
 800473c:	4603      	mov	r3, r0
 800473e:	4642      	mov	r2, r8
 8004740:	189b      	adds	r3, r3, r2
 8004742:	66bb      	str	r3, [r7, #104]	; 0x68
 8004744:	464b      	mov	r3, r9
 8004746:	460a      	mov	r2, r1
 8004748:	eb42 0303 	adc.w	r3, r2, r3
 800474c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800474e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	663b      	str	r3, [r7, #96]	; 0x60
 8004758:	667a      	str	r2, [r7, #100]	; 0x64
 800475a:	f04f 0200 	mov.w	r2, #0
 800475e:	f04f 0300 	mov.w	r3, #0
 8004762:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004766:	4649      	mov	r1, r9
 8004768:	008b      	lsls	r3, r1, #2
 800476a:	4641      	mov	r1, r8
 800476c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004770:	4641      	mov	r1, r8
 8004772:	008a      	lsls	r2, r1, #2
 8004774:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004778:	f7fb fd44 	bl	8000204 <__aeabi_uldivmod>
 800477c:	4602      	mov	r2, r0
 800477e:	460b      	mov	r3, r1
 8004780:	4b0d      	ldr	r3, [pc, #52]	; (80047b8 <UART_SetConfig+0x4e4>)
 8004782:	fba3 1302 	umull	r1, r3, r3, r2
 8004786:	095b      	lsrs	r3, r3, #5
 8004788:	2164      	movs	r1, #100	; 0x64
 800478a:	fb01 f303 	mul.w	r3, r1, r3
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	011b      	lsls	r3, r3, #4
 8004792:	3332      	adds	r3, #50	; 0x32
 8004794:	4a08      	ldr	r2, [pc, #32]	; (80047b8 <UART_SetConfig+0x4e4>)
 8004796:	fba2 2303 	umull	r2, r3, r2, r3
 800479a:	095b      	lsrs	r3, r3, #5
 800479c:	f003 020f 	and.w	r2, r3, #15
 80047a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4422      	add	r2, r4
 80047a8:	609a      	str	r2, [r3, #8]
}
 80047aa:	bf00      	nop
 80047ac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80047b0:	46bd      	mov	sp, r7
 80047b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047b6:	bf00      	nop
 80047b8:	51eb851f 	.word	0x51eb851f

080047bc <__errno>:
 80047bc:	4b01      	ldr	r3, [pc, #4]	; (80047c4 <__errno+0x8>)
 80047be:	6818      	ldr	r0, [r3, #0]
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	20000010 	.word	0x20000010

080047c8 <__libc_init_array>:
 80047c8:	b570      	push	{r4, r5, r6, lr}
 80047ca:	4d0d      	ldr	r5, [pc, #52]	; (8004800 <__libc_init_array+0x38>)
 80047cc:	4c0d      	ldr	r4, [pc, #52]	; (8004804 <__libc_init_array+0x3c>)
 80047ce:	1b64      	subs	r4, r4, r5
 80047d0:	10a4      	asrs	r4, r4, #2
 80047d2:	2600      	movs	r6, #0
 80047d4:	42a6      	cmp	r6, r4
 80047d6:	d109      	bne.n	80047ec <__libc_init_array+0x24>
 80047d8:	4d0b      	ldr	r5, [pc, #44]	; (8004808 <__libc_init_array+0x40>)
 80047da:	4c0c      	ldr	r4, [pc, #48]	; (800480c <__libc_init_array+0x44>)
 80047dc:	f000 f92e 	bl	8004a3c <_init>
 80047e0:	1b64      	subs	r4, r4, r5
 80047e2:	10a4      	asrs	r4, r4, #2
 80047e4:	2600      	movs	r6, #0
 80047e6:	42a6      	cmp	r6, r4
 80047e8:	d105      	bne.n	80047f6 <__libc_init_array+0x2e>
 80047ea:	bd70      	pop	{r4, r5, r6, pc}
 80047ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80047f0:	4798      	blx	r3
 80047f2:	3601      	adds	r6, #1
 80047f4:	e7ee      	b.n	80047d4 <__libc_init_array+0xc>
 80047f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80047fa:	4798      	blx	r3
 80047fc:	3601      	adds	r6, #1
 80047fe:	e7f2      	b.n	80047e6 <__libc_init_array+0x1e>
 8004800:	08004a74 	.word	0x08004a74
 8004804:	08004a74 	.word	0x08004a74
 8004808:	08004a74 	.word	0x08004a74
 800480c:	08004a78 	.word	0x08004a78

08004810 <malloc>:
 8004810:	4b02      	ldr	r3, [pc, #8]	; (800481c <malloc+0xc>)
 8004812:	4601      	mov	r1, r0
 8004814:	6818      	ldr	r0, [r3, #0]
 8004816:	f000 b87f 	b.w	8004918 <_malloc_r>
 800481a:	bf00      	nop
 800481c:	20000010 	.word	0x20000010

08004820 <free>:
 8004820:	4b02      	ldr	r3, [pc, #8]	; (800482c <free+0xc>)
 8004822:	4601      	mov	r1, r0
 8004824:	6818      	ldr	r0, [r3, #0]
 8004826:	f000 b80b 	b.w	8004840 <_free_r>
 800482a:	bf00      	nop
 800482c:	20000010 	.word	0x20000010

08004830 <memset>:
 8004830:	4402      	add	r2, r0
 8004832:	4603      	mov	r3, r0
 8004834:	4293      	cmp	r3, r2
 8004836:	d100      	bne.n	800483a <memset+0xa>
 8004838:	4770      	bx	lr
 800483a:	f803 1b01 	strb.w	r1, [r3], #1
 800483e:	e7f9      	b.n	8004834 <memset+0x4>

08004840 <_free_r>:
 8004840:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004842:	2900      	cmp	r1, #0
 8004844:	d044      	beq.n	80048d0 <_free_r+0x90>
 8004846:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800484a:	9001      	str	r0, [sp, #4]
 800484c:	2b00      	cmp	r3, #0
 800484e:	f1a1 0404 	sub.w	r4, r1, #4
 8004852:	bfb8      	it	lt
 8004854:	18e4      	addlt	r4, r4, r3
 8004856:	f000 f8e3 	bl	8004a20 <__malloc_lock>
 800485a:	4a1e      	ldr	r2, [pc, #120]	; (80048d4 <_free_r+0x94>)
 800485c:	9801      	ldr	r0, [sp, #4]
 800485e:	6813      	ldr	r3, [r2, #0]
 8004860:	b933      	cbnz	r3, 8004870 <_free_r+0x30>
 8004862:	6063      	str	r3, [r4, #4]
 8004864:	6014      	str	r4, [r2, #0]
 8004866:	b003      	add	sp, #12
 8004868:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800486c:	f000 b8de 	b.w	8004a2c <__malloc_unlock>
 8004870:	42a3      	cmp	r3, r4
 8004872:	d908      	bls.n	8004886 <_free_r+0x46>
 8004874:	6825      	ldr	r5, [r4, #0]
 8004876:	1961      	adds	r1, r4, r5
 8004878:	428b      	cmp	r3, r1
 800487a:	bf01      	itttt	eq
 800487c:	6819      	ldreq	r1, [r3, #0]
 800487e:	685b      	ldreq	r3, [r3, #4]
 8004880:	1949      	addeq	r1, r1, r5
 8004882:	6021      	streq	r1, [r4, #0]
 8004884:	e7ed      	b.n	8004862 <_free_r+0x22>
 8004886:	461a      	mov	r2, r3
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	b10b      	cbz	r3, 8004890 <_free_r+0x50>
 800488c:	42a3      	cmp	r3, r4
 800488e:	d9fa      	bls.n	8004886 <_free_r+0x46>
 8004890:	6811      	ldr	r1, [r2, #0]
 8004892:	1855      	adds	r5, r2, r1
 8004894:	42a5      	cmp	r5, r4
 8004896:	d10b      	bne.n	80048b0 <_free_r+0x70>
 8004898:	6824      	ldr	r4, [r4, #0]
 800489a:	4421      	add	r1, r4
 800489c:	1854      	adds	r4, r2, r1
 800489e:	42a3      	cmp	r3, r4
 80048a0:	6011      	str	r1, [r2, #0]
 80048a2:	d1e0      	bne.n	8004866 <_free_r+0x26>
 80048a4:	681c      	ldr	r4, [r3, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	6053      	str	r3, [r2, #4]
 80048aa:	4421      	add	r1, r4
 80048ac:	6011      	str	r1, [r2, #0]
 80048ae:	e7da      	b.n	8004866 <_free_r+0x26>
 80048b0:	d902      	bls.n	80048b8 <_free_r+0x78>
 80048b2:	230c      	movs	r3, #12
 80048b4:	6003      	str	r3, [r0, #0]
 80048b6:	e7d6      	b.n	8004866 <_free_r+0x26>
 80048b8:	6825      	ldr	r5, [r4, #0]
 80048ba:	1961      	adds	r1, r4, r5
 80048bc:	428b      	cmp	r3, r1
 80048be:	bf04      	itt	eq
 80048c0:	6819      	ldreq	r1, [r3, #0]
 80048c2:	685b      	ldreq	r3, [r3, #4]
 80048c4:	6063      	str	r3, [r4, #4]
 80048c6:	bf04      	itt	eq
 80048c8:	1949      	addeq	r1, r1, r5
 80048ca:	6021      	streq	r1, [r4, #0]
 80048cc:	6054      	str	r4, [r2, #4]
 80048ce:	e7ca      	b.n	8004866 <_free_r+0x26>
 80048d0:	b003      	add	sp, #12
 80048d2:	bd30      	pop	{r4, r5, pc}
 80048d4:	20006664 	.word	0x20006664

080048d8 <sbrk_aligned>:
 80048d8:	b570      	push	{r4, r5, r6, lr}
 80048da:	4e0e      	ldr	r6, [pc, #56]	; (8004914 <sbrk_aligned+0x3c>)
 80048dc:	460c      	mov	r4, r1
 80048de:	6831      	ldr	r1, [r6, #0]
 80048e0:	4605      	mov	r5, r0
 80048e2:	b911      	cbnz	r1, 80048ea <sbrk_aligned+0x12>
 80048e4:	f000 f88c 	bl	8004a00 <_sbrk_r>
 80048e8:	6030      	str	r0, [r6, #0]
 80048ea:	4621      	mov	r1, r4
 80048ec:	4628      	mov	r0, r5
 80048ee:	f000 f887 	bl	8004a00 <_sbrk_r>
 80048f2:	1c43      	adds	r3, r0, #1
 80048f4:	d00a      	beq.n	800490c <sbrk_aligned+0x34>
 80048f6:	1cc4      	adds	r4, r0, #3
 80048f8:	f024 0403 	bic.w	r4, r4, #3
 80048fc:	42a0      	cmp	r0, r4
 80048fe:	d007      	beq.n	8004910 <sbrk_aligned+0x38>
 8004900:	1a21      	subs	r1, r4, r0
 8004902:	4628      	mov	r0, r5
 8004904:	f000 f87c 	bl	8004a00 <_sbrk_r>
 8004908:	3001      	adds	r0, #1
 800490a:	d101      	bne.n	8004910 <sbrk_aligned+0x38>
 800490c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004910:	4620      	mov	r0, r4
 8004912:	bd70      	pop	{r4, r5, r6, pc}
 8004914:	20006668 	.word	0x20006668

08004918 <_malloc_r>:
 8004918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800491c:	1ccd      	adds	r5, r1, #3
 800491e:	f025 0503 	bic.w	r5, r5, #3
 8004922:	3508      	adds	r5, #8
 8004924:	2d0c      	cmp	r5, #12
 8004926:	bf38      	it	cc
 8004928:	250c      	movcc	r5, #12
 800492a:	2d00      	cmp	r5, #0
 800492c:	4607      	mov	r7, r0
 800492e:	db01      	blt.n	8004934 <_malloc_r+0x1c>
 8004930:	42a9      	cmp	r1, r5
 8004932:	d905      	bls.n	8004940 <_malloc_r+0x28>
 8004934:	230c      	movs	r3, #12
 8004936:	603b      	str	r3, [r7, #0]
 8004938:	2600      	movs	r6, #0
 800493a:	4630      	mov	r0, r6
 800493c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004940:	4e2e      	ldr	r6, [pc, #184]	; (80049fc <_malloc_r+0xe4>)
 8004942:	f000 f86d 	bl	8004a20 <__malloc_lock>
 8004946:	6833      	ldr	r3, [r6, #0]
 8004948:	461c      	mov	r4, r3
 800494a:	bb34      	cbnz	r4, 800499a <_malloc_r+0x82>
 800494c:	4629      	mov	r1, r5
 800494e:	4638      	mov	r0, r7
 8004950:	f7ff ffc2 	bl	80048d8 <sbrk_aligned>
 8004954:	1c43      	adds	r3, r0, #1
 8004956:	4604      	mov	r4, r0
 8004958:	d14d      	bne.n	80049f6 <_malloc_r+0xde>
 800495a:	6834      	ldr	r4, [r6, #0]
 800495c:	4626      	mov	r6, r4
 800495e:	2e00      	cmp	r6, #0
 8004960:	d140      	bne.n	80049e4 <_malloc_r+0xcc>
 8004962:	6823      	ldr	r3, [r4, #0]
 8004964:	4631      	mov	r1, r6
 8004966:	4638      	mov	r0, r7
 8004968:	eb04 0803 	add.w	r8, r4, r3
 800496c:	f000 f848 	bl	8004a00 <_sbrk_r>
 8004970:	4580      	cmp	r8, r0
 8004972:	d13a      	bne.n	80049ea <_malloc_r+0xd2>
 8004974:	6821      	ldr	r1, [r4, #0]
 8004976:	3503      	adds	r5, #3
 8004978:	1a6d      	subs	r5, r5, r1
 800497a:	f025 0503 	bic.w	r5, r5, #3
 800497e:	3508      	adds	r5, #8
 8004980:	2d0c      	cmp	r5, #12
 8004982:	bf38      	it	cc
 8004984:	250c      	movcc	r5, #12
 8004986:	4629      	mov	r1, r5
 8004988:	4638      	mov	r0, r7
 800498a:	f7ff ffa5 	bl	80048d8 <sbrk_aligned>
 800498e:	3001      	adds	r0, #1
 8004990:	d02b      	beq.n	80049ea <_malloc_r+0xd2>
 8004992:	6823      	ldr	r3, [r4, #0]
 8004994:	442b      	add	r3, r5
 8004996:	6023      	str	r3, [r4, #0]
 8004998:	e00e      	b.n	80049b8 <_malloc_r+0xa0>
 800499a:	6822      	ldr	r2, [r4, #0]
 800499c:	1b52      	subs	r2, r2, r5
 800499e:	d41e      	bmi.n	80049de <_malloc_r+0xc6>
 80049a0:	2a0b      	cmp	r2, #11
 80049a2:	d916      	bls.n	80049d2 <_malloc_r+0xba>
 80049a4:	1961      	adds	r1, r4, r5
 80049a6:	42a3      	cmp	r3, r4
 80049a8:	6025      	str	r5, [r4, #0]
 80049aa:	bf18      	it	ne
 80049ac:	6059      	strne	r1, [r3, #4]
 80049ae:	6863      	ldr	r3, [r4, #4]
 80049b0:	bf08      	it	eq
 80049b2:	6031      	streq	r1, [r6, #0]
 80049b4:	5162      	str	r2, [r4, r5]
 80049b6:	604b      	str	r3, [r1, #4]
 80049b8:	4638      	mov	r0, r7
 80049ba:	f104 060b 	add.w	r6, r4, #11
 80049be:	f000 f835 	bl	8004a2c <__malloc_unlock>
 80049c2:	f026 0607 	bic.w	r6, r6, #7
 80049c6:	1d23      	adds	r3, r4, #4
 80049c8:	1af2      	subs	r2, r6, r3
 80049ca:	d0b6      	beq.n	800493a <_malloc_r+0x22>
 80049cc:	1b9b      	subs	r3, r3, r6
 80049ce:	50a3      	str	r3, [r4, r2]
 80049d0:	e7b3      	b.n	800493a <_malloc_r+0x22>
 80049d2:	6862      	ldr	r2, [r4, #4]
 80049d4:	42a3      	cmp	r3, r4
 80049d6:	bf0c      	ite	eq
 80049d8:	6032      	streq	r2, [r6, #0]
 80049da:	605a      	strne	r2, [r3, #4]
 80049dc:	e7ec      	b.n	80049b8 <_malloc_r+0xa0>
 80049de:	4623      	mov	r3, r4
 80049e0:	6864      	ldr	r4, [r4, #4]
 80049e2:	e7b2      	b.n	800494a <_malloc_r+0x32>
 80049e4:	4634      	mov	r4, r6
 80049e6:	6876      	ldr	r6, [r6, #4]
 80049e8:	e7b9      	b.n	800495e <_malloc_r+0x46>
 80049ea:	230c      	movs	r3, #12
 80049ec:	603b      	str	r3, [r7, #0]
 80049ee:	4638      	mov	r0, r7
 80049f0:	f000 f81c 	bl	8004a2c <__malloc_unlock>
 80049f4:	e7a1      	b.n	800493a <_malloc_r+0x22>
 80049f6:	6025      	str	r5, [r4, #0]
 80049f8:	e7de      	b.n	80049b8 <_malloc_r+0xa0>
 80049fa:	bf00      	nop
 80049fc:	20006664 	.word	0x20006664

08004a00 <_sbrk_r>:
 8004a00:	b538      	push	{r3, r4, r5, lr}
 8004a02:	4d06      	ldr	r5, [pc, #24]	; (8004a1c <_sbrk_r+0x1c>)
 8004a04:	2300      	movs	r3, #0
 8004a06:	4604      	mov	r4, r0
 8004a08:	4608      	mov	r0, r1
 8004a0a:	602b      	str	r3, [r5, #0]
 8004a0c:	f7fc fb68 	bl	80010e0 <_sbrk>
 8004a10:	1c43      	adds	r3, r0, #1
 8004a12:	d102      	bne.n	8004a1a <_sbrk_r+0x1a>
 8004a14:	682b      	ldr	r3, [r5, #0]
 8004a16:	b103      	cbz	r3, 8004a1a <_sbrk_r+0x1a>
 8004a18:	6023      	str	r3, [r4, #0]
 8004a1a:	bd38      	pop	{r3, r4, r5, pc}
 8004a1c:	2000666c 	.word	0x2000666c

08004a20 <__malloc_lock>:
 8004a20:	4801      	ldr	r0, [pc, #4]	; (8004a28 <__malloc_lock+0x8>)
 8004a22:	f000 b809 	b.w	8004a38 <__retarget_lock_acquire_recursive>
 8004a26:	bf00      	nop
 8004a28:	20006670 	.word	0x20006670

08004a2c <__malloc_unlock>:
 8004a2c:	4801      	ldr	r0, [pc, #4]	; (8004a34 <__malloc_unlock+0x8>)
 8004a2e:	f000 b804 	b.w	8004a3a <__retarget_lock_release_recursive>
 8004a32:	bf00      	nop
 8004a34:	20006670 	.word	0x20006670

08004a38 <__retarget_lock_acquire_recursive>:
 8004a38:	4770      	bx	lr

08004a3a <__retarget_lock_release_recursive>:
 8004a3a:	4770      	bx	lr

08004a3c <_init>:
 8004a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a3e:	bf00      	nop
 8004a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a42:	bc08      	pop	{r3}
 8004a44:	469e      	mov	lr, r3
 8004a46:	4770      	bx	lr

08004a48 <_fini>:
 8004a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a4a:	bf00      	nop
 8004a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a4e:	bc08      	pop	{r3}
 8004a50:	469e      	mov	lr, r3
 8004a52:	4770      	bx	lr
