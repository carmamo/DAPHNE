
F446RE_FLIR_LEPTON.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f28  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080030ec  080030ec  000130ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003104  08003104  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003104  08003104  00013104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800310c  0800310c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800310c  0800310c  0001310c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003110  08003110  00013110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003114  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000065f4  20000010  08003124  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006604  08003124  00026604  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da88  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b60  00000000  00000000  0002dac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b58  00000000  00000000  0002f628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ac8  00000000  00000000  00030180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002156e  00000000  00000000  00030c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e9ab  00000000  00000000  000521b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb554  00000000  00000000  00060b61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012c0b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f74  00000000  00000000  0012c108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080030d4 	.word	0x080030d4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	080030d4 	.word	0x080030d4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <lepton_Init>:

static lepton_t dev;


void lepton_Init(SPI_HandleTypeDef *spi, UART_HandleTypeDef *uart, GPIO_TypeDef *port, uint16_t pin)
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
 8000514:	807b      	strh	r3, [r7, #2]
	dev.spiHandle = spi;
 8000516:	4a09      	ldr	r2, [pc, #36]	; (800053c <lepton_Init+0x34>)
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	6053      	str	r3, [r2, #4]
	dev.uartHandle = uart;
 800051c:	4a07      	ldr	r2, [pc, #28]	; (800053c <lepton_Init+0x34>)
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	6113      	str	r3, [r2, #16]
	dev.CS_port = port;
 8000522:	4a06      	ldr	r2, [pc, #24]	; (800053c <lepton_Init+0x34>)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	6093      	str	r3, [r2, #8]
	dev.CS_pin = pin;
 8000528:	4a04      	ldr	r2, [pc, #16]	; (800053c <lepton_Init+0x34>)
 800052a:	887b      	ldrh	r3, [r7, #2]
 800052c:	8193      	strh	r3, [r2, #12]
}
 800052e:	bf00      	nop
 8000530:	3714      	adds	r7, #20
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	200064fc 	.word	0x200064fc

08000540 <print_image_binary_background>:

void print_image_binary_background(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	switch(image_state)
 8000544:	4b3d      	ldr	r3, [pc, #244]	; (800063c <print_image_binary_background+0xfc>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	2b04      	cmp	r3, #4
 800054a:	d872      	bhi.n	8000632 <print_image_binary_background+0xf2>
 800054c:	a201      	add	r2, pc, #4	; (adr r2, 8000554 <print_image_binary_background+0x14>)
 800054e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000552:	bf00      	nop
 8000554:	08000569 	.word	0x08000569
 8000558:	0800057b 	.word	0x0800057b
 800055c:	0800058d 	.word	0x0800058d
 8000560:	0800059f 	.word	0x0800059f
 8000564:	080005bd 	.word	0x080005bd
	{
	case 0:
		send_byte(0xDE);
 8000568:	20de      	movs	r0, #222	; 0xde
 800056a:	f000 f961 	bl	8000830 <send_byte>
		image_state++;
 800056e:	4b33      	ldr	r3, [pc, #204]	; (800063c <print_image_binary_background+0xfc>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	3301      	adds	r3, #1
 8000574:	4a31      	ldr	r2, [pc, #196]	; (800063c <print_image_binary_background+0xfc>)
 8000576:	6013      	str	r3, [r2, #0]
		break;
 8000578:	e05e      	b.n	8000638 <print_image_binary_background+0xf8>
	case 1:
		send_byte(0xAD);
 800057a:	20ad      	movs	r0, #173	; 0xad
 800057c:	f000 f958 	bl	8000830 <send_byte>
		image_state++;
 8000580:	4b2e      	ldr	r3, [pc, #184]	; (800063c <print_image_binary_background+0xfc>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	3301      	adds	r3, #1
 8000586:	4a2d      	ldr	r2, [pc, #180]	; (800063c <print_image_binary_background+0xfc>)
 8000588:	6013      	str	r3, [r2, #0]
		break;
 800058a:	e055      	b.n	8000638 <print_image_binary_background+0xf8>
	case 2:
		send_byte(0xBE);
 800058c:	20be      	movs	r0, #190	; 0xbe
 800058e:	f000 f94f 	bl	8000830 <send_byte>
		image_state++;
 8000592:	4b2a      	ldr	r3, [pc, #168]	; (800063c <print_image_binary_background+0xfc>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	3301      	adds	r3, #1
 8000598:	4a28      	ldr	r2, [pc, #160]	; (800063c <print_image_binary_background+0xfc>)
 800059a:	6013      	str	r3, [r2, #0]
		break;
 800059c:	e04c      	b.n	8000638 <print_image_binary_background+0xf8>
	case 3:
		send_byte(0xEF);
 800059e:	20ef      	movs	r0, #239	; 0xef
 80005a0:	f000 f946 	bl	8000830 <send_byte>
		image_state++;
 80005a4:	4b25      	ldr	r3, [pc, #148]	; (800063c <print_image_binary_background+0xfc>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	3301      	adds	r3, #1
 80005aa:	4a24      	ldr	r2, [pc, #144]	; (800063c <print_image_binary_background+0xfc>)
 80005ac:	6013      	str	r3, [r2, #0]
		print_image_binary_i = 0;
 80005ae:	4b24      	ldr	r3, [pc, #144]	; (8000640 <print_image_binary_background+0x100>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
		print_image_binary_j = 0;
 80005b4:	4b23      	ldr	r3, [pc, #140]	; (8000644 <print_image_binary_background+0x104>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
		break;
 80005ba:	e03d      	b.n	8000638 <print_image_binary_background+0xf8>
	case 4:
		send_byte((lepton_image[print_image_binary_i][print_image_binary_j] >> 8)&0xff);
 80005bc:	4b20      	ldr	r3, [pc, #128]	; (8000640 <print_image_binary_background+0x100>)
 80005be:	681a      	ldr	r2, [r3, #0]
 80005c0:	4b20      	ldr	r3, [pc, #128]	; (8000644 <print_image_binary_background+0x104>)
 80005c2:	6819      	ldr	r1, [r3, #0]
 80005c4:	4820      	ldr	r0, [pc, #128]	; (8000648 <print_image_binary_background+0x108>)
 80005c6:	4613      	mov	r3, r2
 80005c8:	009b      	lsls	r3, r3, #2
 80005ca:	4413      	add	r3, r2
 80005cc:	011b      	lsls	r3, r3, #4
 80005ce:	440b      	add	r3, r1
 80005d0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80005d4:	121b      	asrs	r3, r3, #8
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 f929 	bl	8000830 <send_byte>
		send_byte((lepton_image[print_image_binary_i][print_image_binary_j])&0xff);
 80005de:	4b18      	ldr	r3, [pc, #96]	; (8000640 <print_image_binary_background+0x100>)
 80005e0:	681a      	ldr	r2, [r3, #0]
 80005e2:	4b18      	ldr	r3, [pc, #96]	; (8000644 <print_image_binary_background+0x104>)
 80005e4:	6819      	ldr	r1, [r3, #0]
 80005e6:	4818      	ldr	r0, [pc, #96]	; (8000648 <print_image_binary_background+0x108>)
 80005e8:	4613      	mov	r3, r2
 80005ea:	009b      	lsls	r3, r3, #2
 80005ec:	4413      	add	r3, r2
 80005ee:	011b      	lsls	r3, r3, #4
 80005f0:	440b      	add	r3, r1
 80005f2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	4618      	mov	r0, r3
 80005fa:	f000 f919 	bl	8000830 <send_byte>

		print_image_binary_j++;
 80005fe:	4b11      	ldr	r3, [pc, #68]	; (8000644 <print_image_binary_background+0x104>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	3301      	adds	r3, #1
 8000604:	4a0f      	ldr	r2, [pc, #60]	; (8000644 <print_image_binary_background+0x104>)
 8000606:	6013      	str	r3, [r2, #0]
		if(print_image_binary_j >= 80)
 8000608:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <print_image_binary_background+0x104>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2b4f      	cmp	r3, #79	; 0x4f
 800060e:	dd12      	ble.n	8000636 <print_image_binary_background+0xf6>
		{
			print_image_binary_j=0;
 8000610:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <print_image_binary_background+0x104>)
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
			print_image_binary_i++;
 8000616:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <print_image_binary_background+0x100>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	3301      	adds	r3, #1
 800061c:	4a08      	ldr	r2, [pc, #32]	; (8000640 <print_image_binary_background+0x100>)
 800061e:	6013      	str	r3, [r2, #0]
			if(print_image_binary_i >= 60) image_state = -1;
 8000620:	4b07      	ldr	r3, [pc, #28]	; (8000640 <print_image_binary_background+0x100>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2b3b      	cmp	r3, #59	; 0x3b
 8000626:	dd06      	ble.n	8000636 <print_image_binary_background+0xf6>
 8000628:	4b04      	ldr	r3, [pc, #16]	; (800063c <print_image_binary_background+0xfc>)
 800062a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800062e:	601a      	str	r2, [r3, #0]
		}
		break;
 8000630:	e001      	b.n	8000636 <print_image_binary_background+0xf6>
	default:
		break;
 8000632:	bf00      	nop
 8000634:	e000      	b.n	8000638 <print_image_binary_background+0xf8>
		break;
 8000636:	bf00      	nop
	}

}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000000 	.word	0x20000000
 8000640:	200064d0 	.word	0x200064d0
 8000644:	200064d4 	.word	0x200064d4
 8000648:	200000d0 	.word	0x200000d0

0800064c <transfer>:

void transfer(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af02      	add	r7, sp, #8

	HAL_GPIO_WritePin(dev.CS_port, dev.CS_pin, GPIO_PIN_RESET);
 8000652:	4b69      	ldr	r3, [pc, #420]	; (80007f8 <transfer+0x1ac>)
 8000654:	689b      	ldr	r3, [r3, #8]
 8000656:	4a68      	ldr	r2, [pc, #416]	; (80007f8 <transfer+0x1ac>)
 8000658:	8991      	ldrh	r1, [r2, #12]
 800065a:	2200      	movs	r2, #0
 800065c:	4618      	mov	r0, r3
 800065e:	f000 ff0f 	bl	8001480 <HAL_GPIO_WritePin>
	for(int i = 0; i < FRAME_SIZE; i++)
 8000662:	2300      	movs	r3, #0
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	e00d      	b.n	8000684 <transfer+0x38>
	{
		HAL_SPI_TransmitReceive(dev.spiHandle,&tx[0], &lepton_frame_packet[i], 1, 100);
 8000668:	4b63      	ldr	r3, [pc, #396]	; (80007f8 <transfer+0x1ac>)
 800066a:	6858      	ldr	r0, [r3, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	4a63      	ldr	r2, [pc, #396]	; (80007fc <transfer+0x1b0>)
 8000670:	441a      	add	r2, r3
 8000672:	2364      	movs	r3, #100	; 0x64
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	2301      	movs	r3, #1
 8000678:	4961      	ldr	r1, [pc, #388]	; (8000800 <transfer+0x1b4>)
 800067a:	f001 fed0 	bl	800241e <HAL_SPI_TransmitReceive>
	for(int i = 0; i < FRAME_SIZE; i++)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	3301      	adds	r3, #1
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2ba3      	cmp	r3, #163	; 0xa3
 8000688:	ddee      	ble.n	8000668 <transfer+0x1c>
	}
	HAL_GPIO_WritePin(dev.CS_port, dev.CS_pin, GPIO_PIN_SET);
 800068a:	4b5b      	ldr	r3, [pc, #364]	; (80007f8 <transfer+0x1ac>)
 800068c:	689b      	ldr	r3, [r3, #8]
 800068e:	4a5a      	ldr	r2, [pc, #360]	; (80007f8 <transfer+0x1ac>)
 8000690:	8991      	ldrh	r1, [r2, #12]
 8000692:	2201      	movs	r2, #1
 8000694:	4618      	mov	r0, r3
 8000696:	f000 fef3 	bl	8001480 <HAL_GPIO_WritePin>


	if((lepton_frame_packet[0] & 0xf) != 0x0f)
 800069a:	4b58      	ldr	r3, [pc, #352]	; (80007fc <transfer+0x1b0>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	f003 030f 	and.w	r3, r3, #15
 80006a2:	2b0f      	cmp	r3, #15
 80006a4:	d065      	beq.n	8000772 <transfer+0x126>
	{
		if(lepton_frame_packet[1] == 0)
 80006a6:	4b55      	ldr	r3, [pc, #340]	; (80007fc <transfer+0x1b0>)
 80006a8:	785b      	ldrb	r3, [r3, #1]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d114      	bne.n	80006d8 <transfer+0x8c>
		{
			if(last_crc != (lepton_frame_packet[3] << 8 | lepton_frame_packet[4]))
 80006ae:	4b53      	ldr	r3, [pc, #332]	; (80007fc <transfer+0x1b0>)
 80006b0:	78db      	ldrb	r3, [r3, #3]
 80006b2:	021b      	lsls	r3, r3, #8
 80006b4:	4a51      	ldr	r2, [pc, #324]	; (80007fc <transfer+0x1b0>)
 80006b6:	7912      	ldrb	r2, [r2, #4]
 80006b8:	431a      	orrs	r2, r3
 80006ba:	4b52      	ldr	r3, [pc, #328]	; (8000804 <transfer+0x1b8>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	429a      	cmp	r2, r3
 80006c0:	d002      	beq.n	80006c8 <transfer+0x7c>
			{
				new_frame = 1;
 80006c2:	4b51      	ldr	r3, [pc, #324]	; (8000808 <transfer+0x1bc>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	601a      	str	r2, [r3, #0]
			}
			last_crc = lepton_frame_packet[3] << 8 | lepton_frame_packet[4];
 80006c8:	4b4c      	ldr	r3, [pc, #304]	; (80007fc <transfer+0x1b0>)
 80006ca:	78db      	ldrb	r3, [r3, #3]
 80006cc:	021b      	lsls	r3, r3, #8
 80006ce:	4a4b      	ldr	r2, [pc, #300]	; (80007fc <transfer+0x1b0>)
 80006d0:	7912      	ldrb	r2, [r2, #4]
 80006d2:	4313      	orrs	r3, r2
 80006d4:	4a4b      	ldr	r2, [pc, #300]	; (8000804 <transfer+0x1b8>)
 80006d6:	6013      	str	r3, [r2, #0]
		}
		frame_number = lepton_frame_packet[1];
 80006d8:	4b48      	ldr	r3, [pc, #288]	; (80007fc <transfer+0x1b0>)
 80006da:	785b      	ldrb	r3, [r3, #1]
 80006dc:	461a      	mov	r2, r3
 80006de:	4b4b      	ldr	r3, [pc, #300]	; (800080c <transfer+0x1c0>)
 80006e0:	601a      	str	r2, [r3, #0]

		if(frame_number < 60)
 80006e2:	4b4a      	ldr	r3, [pc, #296]	; (800080c <transfer+0x1c0>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	2b3b      	cmp	r3, #59	; 0x3b
 80006e8:	dc29      	bgt.n	800073e <transfer+0xf2>
		{
			lost_frame_counter = 0;
 80006ea:	4b49      	ldr	r3, [pc, #292]	; (8000810 <transfer+0x1c4>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
			if(image_state == -1)
 80006f0:	4b48      	ldr	r3, [pc, #288]	; (8000814 <transfer+0x1c8>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80006f8:	d126      	bne.n	8000748 <transfer+0xfc>
			{
				for(int i = 0; i < 80; i++)
 80006fa:	2300      	movs	r3, #0
 80006fc:	603b      	str	r3, [r7, #0]
 80006fe:	e01a      	b.n	8000736 <transfer+0xea>
				{
					lepton_image[frame_number][i] = (lepton_frame_packet[2*i+4] << 8 | lepton_frame_packet[2*i+5]);
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	3302      	adds	r3, #2
 8000704:	005b      	lsls	r3, r3, #1
 8000706:	4a3d      	ldr	r2, [pc, #244]	; (80007fc <transfer+0x1b0>)
 8000708:	5cd3      	ldrb	r3, [r2, r3]
 800070a:	021b      	lsls	r3, r3, #8
 800070c:	683a      	ldr	r2, [r7, #0]
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	3205      	adds	r2, #5
 8000712:	493a      	ldr	r1, [pc, #232]	; (80007fc <transfer+0x1b0>)
 8000714:	5c8a      	ldrb	r2, [r1, r2]
 8000716:	4611      	mov	r1, r2
 8000718:	4a3c      	ldr	r2, [pc, #240]	; (800080c <transfer+0x1c0>)
 800071a:	6812      	ldr	r2, [r2, #0]
 800071c:	4319      	orrs	r1, r3
 800071e:	483e      	ldr	r0, [pc, #248]	; (8000818 <transfer+0x1cc>)
 8000720:	4613      	mov	r3, r2
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	4413      	add	r3, r2
 8000726:	011b      	lsls	r3, r3, #4
 8000728:	683a      	ldr	r2, [r7, #0]
 800072a:	4413      	add	r3, r2
 800072c:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
				for(int i = 0; i < 80; i++)
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	3301      	adds	r3, #1
 8000734:	603b      	str	r3, [r7, #0]
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	2b4f      	cmp	r3, #79	; 0x4f
 800073a:	dde1      	ble.n	8000700 <transfer+0xb4>
 800073c:	e004      	b.n	8000748 <transfer+0xfc>
				}
			}
		}
		else
		{
			lost_frame_counter++;
 800073e:	4b34      	ldr	r3, [pc, #208]	; (8000810 <transfer+0x1c4>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	3301      	adds	r3, #1
 8000744:	4a32      	ldr	r2, [pc, #200]	; (8000810 <transfer+0x1c4>)
 8000746:	6013      	str	r3, [r2, #0]
		}
		if(frame_number > 55 && frame_number < 59)
 8000748:	4b30      	ldr	r3, [pc, #192]	; (800080c <transfer+0x1c0>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2b37      	cmp	r3, #55	; 0x37
 800074e:	dd06      	ble.n	800075e <transfer+0x112>
 8000750:	4b2e      	ldr	r3, [pc, #184]	; (800080c <transfer+0x1c0>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2b3a      	cmp	r3, #58	; 0x3a
 8000756:	dc02      	bgt.n	800075e <transfer+0x112>
		{
			send_byte(0x48);
 8000758:	2048      	movs	r0, #72	; 0x48
 800075a:	f000 f869 	bl	8000830 <send_byte>
		}
		if(frame_number == 59)
 800075e:	4b2b      	ldr	r3, [pc, #172]	; (800080c <transfer+0x1c0>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2b3b      	cmp	r3, #59	; 0x3b
 8000764:	d105      	bne.n	8000772 <transfer+0x126>
		{
			frame_complete = 1;
 8000766:	4b2d      	ldr	r3, [pc, #180]	; (800081c <transfer+0x1d0>)
 8000768:	2201      	movs	r2, #1
 800076a:	601a      	str	r2, [r3, #0]
			last_frame_number = 0;
 800076c:	4b2c      	ldr	r3, [pc, #176]	; (8000820 <transfer+0x1d4>)
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
		{

		}
	}

	lost_frame_counter++;
 8000772:	4b27      	ldr	r3, [pc, #156]	; (8000810 <transfer+0x1c4>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	3301      	adds	r3, #1
 8000778:	4a25      	ldr	r2, [pc, #148]	; (8000810 <transfer+0x1c4>)
 800077a:	6013      	str	r3, [r2, #0]
	if(lost_frame_counter > 100)
 800077c:	4b24      	ldr	r3, [pc, #144]	; (8000810 <transfer+0x1c4>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b64      	cmp	r3, #100	; 0x64
 8000782:	dd05      	ble.n	8000790 <transfer+0x144>
	{
		need_resync = 1;
 8000784:	4b27      	ldr	r3, [pc, #156]	; (8000824 <transfer+0x1d8>)
 8000786:	2201      	movs	r2, #1
 8000788:	601a      	str	r2, [r3, #0]
		lost_frame_counter = 0;
 800078a:	4b21      	ldr	r3, [pc, #132]	; (8000810 <transfer+0x1c4>)
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
	}

	if(need_resync)
 8000790:	4b24      	ldr	r3, [pc, #144]	; (8000824 <transfer+0x1d8>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d005      	beq.n	80007a4 <transfer+0x158>
	{
		HAL_Delay(185);
 8000798:	20b9      	movs	r0, #185	; 0xb9
 800079a:	f000 fbd3 	bl	8000f44 <HAL_Delay>
		need_resync = 0;
 800079e:	4b21      	ldr	r3, [pc, #132]	; (8000824 <transfer+0x1d8>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
	}

	if(frame_complete)
 80007a4:	4b1d      	ldr	r3, [pc, #116]	; (800081c <transfer+0x1d0>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d020      	beq.n	80007ee <transfer+0x1a2>
	{
		if(new_frame)
 80007ac:	4b16      	ldr	r3, [pc, #88]	; (8000808 <transfer+0x1bc>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d019      	beq.n	80007e8 <transfer+0x19c>
		{
			frame_counter++;
 80007b4:	4b1c      	ldr	r3, [pc, #112]	; (8000828 <transfer+0x1dc>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	3301      	adds	r3, #1
 80007ba:	4a1b      	ldr	r2, [pc, #108]	; (8000828 <transfer+0x1dc>)
 80007bc:	6013      	str	r3, [r2, #0]
			if(frame_counter%18 == 0)
 80007be:	4b1a      	ldr	r3, [pc, #104]	; (8000828 <transfer+0x1dc>)
 80007c0:	6819      	ldr	r1, [r3, #0]
 80007c2:	4b1a      	ldr	r3, [pc, #104]	; (800082c <transfer+0x1e0>)
 80007c4:	fb83 2301 	smull	r2, r3, r3, r1
 80007c8:	109a      	asrs	r2, r3, #2
 80007ca:	17cb      	asrs	r3, r1, #31
 80007cc:	1ad2      	subs	r2, r2, r3
 80007ce:	4613      	mov	r3, r2
 80007d0:	00db      	lsls	r3, r3, #3
 80007d2:	4413      	add	r3, r2
 80007d4:	005b      	lsls	r3, r3, #1
 80007d6:	1aca      	subs	r2, r1, r3
 80007d8:	2a00      	cmp	r2, #0
 80007da:	d102      	bne.n	80007e2 <transfer+0x196>
			{
				image_state = 0;
 80007dc:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <transfer+0x1c8>)
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
			}
			new_frame = 0;
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <transfer+0x1bc>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
		}
		frame_complete = 0;
 80007e8:	4b0c      	ldr	r3, [pc, #48]	; (800081c <transfer+0x1d0>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
	}

}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	200064fc 	.word	0x200064fc
 80007fc:	2000002c 	.word	0x2000002c
 8000800:	200064f8 	.word	0x200064f8
 8000804:	200064e8 	.word	0x200064e8
 8000808:	200064ec 	.word	0x200064ec
 800080c:	200064f4 	.word	0x200064f4
 8000810:	200064d8 	.word	0x200064d8
 8000814:	20000000 	.word	0x20000000
 8000818:	200000d0 	.word	0x200000d0
 800081c:	200064e0 	.word	0x200064e0
 8000820:	200064dc 	.word	0x200064dc
 8000824:	200064e4 	.word	0x200064e4
 8000828:	200064f0 	.word	0x200064f0
 800082c:	38e38e39 	.word	0x38e38e39

08000830 <send_byte>:

void send_byte(uint8_t data)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(dev.uartHandle, &data, 1, 100);
 800083a:	4b05      	ldr	r3, [pc, #20]	; (8000850 <send_byte+0x20>)
 800083c:	6918      	ldr	r0, [r3, #16]
 800083e:	1df9      	adds	r1, r7, #7
 8000840:	2364      	movs	r3, #100	; 0x64
 8000842:	2201      	movs	r2, #1
 8000844:	f002 f8a5 	bl	8002992 <HAL_UART_Transmit>
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	200064fc 	.word	0x200064fc

08000854 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000858:	f000 fb02 	bl	8000e60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800085c:	f000 f82c 	bl	80008b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000860:	f000 f924 	bl	8000aac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000864:	f000 f8f8 	bl	8000a58 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000868:	f000 f892 	bl	8000990 <MX_I2C1_Init>
  MX_SPI1_Init();
 800086c:	f000 f8be 	bl	80009ec <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  lepton_Init(&hspi1, &huart2, SPI1_CS_GPIO_Port, SPI1_CS_Pin);
 8000870:	2340      	movs	r3, #64	; 0x40
 8000872:	4a0e      	ldr	r2, [pc, #56]	; (80008ac <main+0x58>)
 8000874:	490e      	ldr	r1, [pc, #56]	; (80008b0 <main+0x5c>)
 8000876:	480f      	ldr	r0, [pc, #60]	; (80008b4 <main+0x60>)
 8000878:	f7ff fe46 	bl	8000508 <lepton_Init>

  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800087c:	2201      	movs	r2, #1
 800087e:	2140      	movs	r1, #64	; 0x40
 8000880:	480a      	ldr	r0, [pc, #40]	; (80008ac <main+0x58>)
 8000882:	f000 fdfd 	bl	8001480 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	2140      	movs	r1, #64	; 0x40
 800088a:	4808      	ldr	r0, [pc, #32]	; (80008ac <main+0x58>)
 800088c:	f000 fdf8 	bl	8001480 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000890:	2201      	movs	r2, #1
 8000892:	2140      	movs	r1, #64	; 0x40
 8000894:	4805      	ldr	r0, [pc, #20]	; (80008ac <main+0x58>)
 8000896:	f000 fdf3 	bl	8001480 <HAL_GPIO_WritePin>
  HAL_Delay(185);
 800089a:	20b9      	movs	r0, #185	; 0xb9
 800089c:	f000 fb52 	bl	8000f44 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  transfer();
 80008a0:	f7ff fed4 	bl	800064c <transfer>
	  print_image_binary_background();
 80008a4:	f7ff fe4c 	bl	8000540 <print_image_binary_background>
	  transfer();
 80008a8:	e7fa      	b.n	80008a0 <main+0x4c>
 80008aa:	bf00      	nop
 80008ac:	40020400 	.word	0x40020400
 80008b0:	200065bc 	.word	0x200065bc
 80008b4:	20006564 	.word	0x20006564

080008b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b094      	sub	sp, #80	; 0x50
 80008bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	2234      	movs	r2, #52	; 0x34
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f002 fbfc 	bl	80030c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008cc:	f107 0308 	add.w	r3, r7, #8
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008dc:	2300      	movs	r3, #0
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	4b29      	ldr	r3, [pc, #164]	; (8000988 <SystemClock_Config+0xd0>)
 80008e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e4:	4a28      	ldr	r2, [pc, #160]	; (8000988 <SystemClock_Config+0xd0>)
 80008e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ea:	6413      	str	r3, [r2, #64]	; 0x40
 80008ec:	4b26      	ldr	r3, [pc, #152]	; (8000988 <SystemClock_Config+0xd0>)
 80008ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008f8:	2300      	movs	r3, #0
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	4b23      	ldr	r3, [pc, #140]	; (800098c <SystemClock_Config+0xd4>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a22      	ldr	r2, [pc, #136]	; (800098c <SystemClock_Config+0xd4>)
 8000902:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000906:	6013      	str	r3, [r2, #0]
 8000908:	4b20      	ldr	r3, [pc, #128]	; (800098c <SystemClock_Config+0xd4>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000910:	603b      	str	r3, [r7, #0]
 8000912:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000914:	2302      	movs	r3, #2
 8000916:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000918:	2301      	movs	r3, #1
 800091a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800091c:	2310      	movs	r3, #16
 800091e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000920:	2302      	movs	r3, #2
 8000922:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000924:	2300      	movs	r3, #0
 8000926:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000928:	2308      	movs	r3, #8
 800092a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 800092c:	23a0      	movs	r3, #160	; 0xa0
 800092e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000930:	2302      	movs	r3, #2
 8000932:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000934:	2302      	movs	r3, #2
 8000936:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000938:	2302      	movs	r3, #2
 800093a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4618      	mov	r0, r3
 8000942:	f001 fa45 	bl	8001dd0 <HAL_RCC_OscConfig>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800094c:	f000 f91c 	bl	8000b88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000950:	230f      	movs	r3, #15
 8000952:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000954:	2302      	movs	r3, #2
 8000956:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000958:	2300      	movs	r3, #0
 800095a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800095c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000960:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000962:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000966:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000968:	f107 0308 	add.w	r3, r7, #8
 800096c:	2105      	movs	r1, #5
 800096e:	4618      	mov	r0, r3
 8000970:	f000 fee4 	bl	800173c <HAL_RCC_ClockConfig>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800097a:	f000 f905 	bl	8000b88 <Error_Handler>
  }
}
 800097e:	bf00      	nop
 8000980:	3750      	adds	r7, #80	; 0x50
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40023800 	.word	0x40023800
 800098c:	40007000 	.word	0x40007000

08000990 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <MX_I2C1_Init+0x50>)
 8000996:	4a13      	ldr	r2, [pc, #76]	; (80009e4 <MX_I2C1_Init+0x54>)
 8000998:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800099a:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <MX_I2C1_Init+0x50>)
 800099c:	4a12      	ldr	r2, [pc, #72]	; (80009e8 <MX_I2C1_Init+0x58>)
 800099e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <MX_I2C1_Init+0x50>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <MX_I2C1_Init+0x50>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <MX_I2C1_Init+0x50>)
 80009ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009b4:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <MX_I2C1_Init+0x50>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <MX_I2C1_Init+0x50>)
 80009bc:	2200      	movs	r2, #0
 80009be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009c0:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <MX_I2C1_Init+0x50>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009c6:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <MX_I2C1_Init+0x50>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009cc:	4804      	ldr	r0, [pc, #16]	; (80009e0 <MX_I2C1_Init+0x50>)
 80009ce:	f000 fd71 	bl	80014b4 <HAL_I2C_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009d8:	f000 f8d6 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20006510 	.word	0x20006510
 80009e4:	40005400 	.word	0x40005400
 80009e8:	00061a80 	.word	0x00061a80

080009ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009f0:	4b17      	ldr	r3, [pc, #92]	; (8000a50 <MX_SPI1_Init+0x64>)
 80009f2:	4a18      	ldr	r2, [pc, #96]	; (8000a54 <MX_SPI1_Init+0x68>)
 80009f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009f6:	4b16      	ldr	r3, [pc, #88]	; (8000a50 <MX_SPI1_Init+0x64>)
 80009f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009fe:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <MX_SPI1_Init+0x64>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a04:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <MX_SPI1_Init+0x64>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000a0a:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <MX_SPI1_Init+0x64>)
 8000a0c:	2202      	movs	r2, #2
 8000a0e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000a10:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <MX_SPI1_Init+0x64>)
 8000a12:	2201      	movs	r2, #1
 8000a14:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <MX_SPI1_Init+0x64>)
 8000a18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a1c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <MX_SPI1_Init+0x64>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a24:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <MX_SPI1_Init+0x64>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <MX_SPI1_Init+0x64>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a30:	4b07      	ldr	r3, [pc, #28]	; (8000a50 <MX_SPI1_Init+0x64>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <MX_SPI1_Init+0x64>)
 8000a38:	220a      	movs	r2, #10
 8000a3a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a3c:	4804      	ldr	r0, [pc, #16]	; (8000a50 <MX_SPI1_Init+0x64>)
 8000a3e:	f001 fc65 	bl	800230c <HAL_SPI_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a48:	f000 f89e 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20006564 	.word	0x20006564
 8000a54:	40013000 	.word	0x40013000

08000a58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a5c:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <MX_USART2_UART_Init+0x4c>)
 8000a5e:	4a12      	ldr	r2, [pc, #72]	; (8000aa8 <MX_USART2_UART_Init+0x50>)
 8000a60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a62:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <MX_USART2_UART_Init+0x4c>)
 8000a64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <MX_USART2_UART_Init+0x4c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a70:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <MX_USART2_UART_Init+0x4c>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a76:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <MX_USART2_UART_Init+0x4c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a7c:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <MX_USART2_UART_Init+0x4c>)
 8000a7e:	220c      	movs	r2, #12
 8000a80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a82:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <MX_USART2_UART_Init+0x4c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <MX_USART2_UART_Init+0x4c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a8e:	4805      	ldr	r0, [pc, #20]	; (8000aa4 <MX_USART2_UART_Init+0x4c>)
 8000a90:	f001 ff32 	bl	80028f8 <HAL_UART_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a9a:	f000 f875 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	200065bc 	.word	0x200065bc
 8000aa8:	40004400 	.word	0x40004400

08000aac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08a      	sub	sp, #40	; 0x28
 8000ab0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab2:	f107 0314 	add.w	r3, r7, #20
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]
 8000ac0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	613b      	str	r3, [r7, #16]
 8000ac6:	4b2d      	ldr	r3, [pc, #180]	; (8000b7c <MX_GPIO_Init+0xd0>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a2c      	ldr	r2, [pc, #176]	; (8000b7c <MX_GPIO_Init+0xd0>)
 8000acc:	f043 0304 	orr.w	r3, r3, #4
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b2a      	ldr	r3, [pc, #168]	; (8000b7c <MX_GPIO_Init+0xd0>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0304 	and.w	r3, r3, #4
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	4b26      	ldr	r3, [pc, #152]	; (8000b7c <MX_GPIO_Init+0xd0>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a25      	ldr	r2, [pc, #148]	; (8000b7c <MX_GPIO_Init+0xd0>)
 8000ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b23      	ldr	r3, [pc, #140]	; (8000b7c <MX_GPIO_Init+0xd0>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	60bb      	str	r3, [r7, #8]
 8000afe:	4b1f      	ldr	r3, [pc, #124]	; (8000b7c <MX_GPIO_Init+0xd0>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a1e      	ldr	r2, [pc, #120]	; (8000b7c <MX_GPIO_Init+0xd0>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b1c      	ldr	r3, [pc, #112]	; (8000b7c <MX_GPIO_Init+0xd0>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	60bb      	str	r3, [r7, #8]
 8000b14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	4b18      	ldr	r3, [pc, #96]	; (8000b7c <MX_GPIO_Init+0xd0>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a17      	ldr	r2, [pc, #92]	; (8000b7c <MX_GPIO_Init+0xd0>)
 8000b20:	f043 0302 	orr.w	r3, r3, #2
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <MX_GPIO_Init+0xd0>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0302 	and.w	r3, r3, #2
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000b32:	2201      	movs	r2, #1
 8000b34:	2140      	movs	r1, #64	; 0x40
 8000b36:	4812      	ldr	r0, [pc, #72]	; (8000b80 <MX_GPIO_Init+0xd4>)
 8000b38:	f000 fca2 	bl	8001480 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b42:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	4619      	mov	r1, r3
 8000b52:	480c      	ldr	r0, [pc, #48]	; (8000b84 <MX_GPIO_Init+0xd8>)
 8000b54:	f000 fb00 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000b58:	2340      	movs	r3, #64	; 0x40
 8000b5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b64:	2300      	movs	r3, #0
 8000b66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4804      	ldr	r0, [pc, #16]	; (8000b80 <MX_GPIO_Init+0xd4>)
 8000b70:	f000 faf2 	bl	8001158 <HAL_GPIO_Init>

}
 8000b74:	bf00      	nop
 8000b76:	3728      	adds	r7, #40	; 0x28
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40020400 	.word	0x40020400
 8000b84:	40020800 	.word	0x40020800

08000b88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b8c:	b672      	cpsid	i
}
 8000b8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <Error_Handler+0x8>
	...

08000b94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	607b      	str	r3, [r7, #4]
 8000b9e:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <HAL_MspInit+0x4c>)
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba2:	4a0f      	ldr	r2, [pc, #60]	; (8000be0 <HAL_MspInit+0x4c>)
 8000ba4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ba8:	6453      	str	r3, [r2, #68]	; 0x44
 8000baa:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <HAL_MspInit+0x4c>)
 8000bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	603b      	str	r3, [r7, #0]
 8000bba:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <HAL_MspInit+0x4c>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	4a08      	ldr	r2, [pc, #32]	; (8000be0 <HAL_MspInit+0x4c>)
 8000bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc6:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <HAL_MspInit+0x4c>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bce:	603b      	str	r3, [r7, #0]
 8000bd0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bd2:	2007      	movs	r0, #7
 8000bd4:	f000 fa8c 	bl	80010f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd8:	bf00      	nop
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40023800 	.word	0x40023800

08000be4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a19      	ldr	r2, [pc, #100]	; (8000c68 <HAL_I2C_MspInit+0x84>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d12c      	bne.n	8000c60 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	613b      	str	r3, [r7, #16]
 8000c0a:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <HAL_I2C_MspInit+0x88>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a17      	ldr	r2, [pc, #92]	; (8000c6c <HAL_I2C_MspInit+0x88>)
 8000c10:	f043 0302 	orr.w	r3, r3, #2
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <HAL_I2C_MspInit+0x88>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0302 	and.w	r3, r3, #2
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c28:	2312      	movs	r3, #18
 8000c2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c30:	2303      	movs	r3, #3
 8000c32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c34:	2304      	movs	r3, #4
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	480c      	ldr	r0, [pc, #48]	; (8000c70 <HAL_I2C_MspInit+0x8c>)
 8000c40:	f000 fa8a 	bl	8001158 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c44:	2300      	movs	r3, #0
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <HAL_I2C_MspInit+0x88>)
 8000c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4c:	4a07      	ldr	r2, [pc, #28]	; (8000c6c <HAL_I2C_MspInit+0x88>)
 8000c4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c52:	6413      	str	r3, [r2, #64]	; 0x40
 8000c54:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <HAL_I2C_MspInit+0x88>)
 8000c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c60:	bf00      	nop
 8000c62:	3728      	adds	r7, #40	; 0x28
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40005400 	.word	0x40005400
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40020400 	.word	0x40020400

08000c74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08a      	sub	sp, #40	; 0x28
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a19      	ldr	r2, [pc, #100]	; (8000cf8 <HAL_SPI_MspInit+0x84>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d12b      	bne.n	8000cee <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	613b      	str	r3, [r7, #16]
 8000c9a:	4b18      	ldr	r3, [pc, #96]	; (8000cfc <HAL_SPI_MspInit+0x88>)
 8000c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9e:	4a17      	ldr	r2, [pc, #92]	; (8000cfc <HAL_SPI_MspInit+0x88>)
 8000ca0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ca4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ca6:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <HAL_SPI_MspInit+0x88>)
 8000ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000caa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cae:	613b      	str	r3, [r7, #16]
 8000cb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <HAL_SPI_MspInit+0x88>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a10      	ldr	r2, [pc, #64]	; (8000cfc <HAL_SPI_MspInit+0x88>)
 8000cbc:	f043 0301 	orr.w	r3, r3, #1
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <HAL_SPI_MspInit+0x88>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000cce:	23e0      	movs	r3, #224	; 0xe0
 8000cd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cde:	2305      	movs	r3, #5
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce2:	f107 0314 	add.w	r3, r7, #20
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4805      	ldr	r0, [pc, #20]	; (8000d00 <HAL_SPI_MspInit+0x8c>)
 8000cea:	f000 fa35 	bl	8001158 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cee:	bf00      	nop
 8000cf0:	3728      	adds	r7, #40	; 0x28
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40013000 	.word	0x40013000
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40020000 	.word	0x40020000

08000d04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08a      	sub	sp, #40	; 0x28
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a19      	ldr	r2, [pc, #100]	; (8000d88 <HAL_UART_MspInit+0x84>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d12b      	bne.n	8000d7e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	613b      	str	r3, [r7, #16]
 8000d2a:	4b18      	ldr	r3, [pc, #96]	; (8000d8c <HAL_UART_MspInit+0x88>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2e:	4a17      	ldr	r2, [pc, #92]	; (8000d8c <HAL_UART_MspInit+0x88>)
 8000d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d34:	6413      	str	r3, [r2, #64]	; 0x40
 8000d36:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <HAL_UART_MspInit+0x88>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d3e:	613b      	str	r3, [r7, #16]
 8000d40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <HAL_UART_MspInit+0x88>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a10      	ldr	r2, [pc, #64]	; (8000d8c <HAL_UART_MspInit+0x88>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
 8000d52:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <HAL_UART_MspInit+0x88>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d5e:	230c      	movs	r3, #12
 8000d60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d62:	2302      	movs	r3, #2
 8000d64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d6e:	2307      	movs	r3, #7
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d72:	f107 0314 	add.w	r3, r7, #20
 8000d76:	4619      	mov	r1, r3
 8000d78:	4805      	ldr	r0, [pc, #20]	; (8000d90 <HAL_UART_MspInit+0x8c>)
 8000d7a:	f000 f9ed 	bl	8001158 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d7e:	bf00      	nop
 8000d80:	3728      	adds	r7, #40	; 0x28
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40004400 	.word	0x40004400
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40020000 	.word	0x40020000

08000d94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d98:	e7fe      	b.n	8000d98 <NMI_Handler+0x4>

08000d9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d9e:	e7fe      	b.n	8000d9e <HardFault_Handler+0x4>

08000da0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <MemManage_Handler+0x4>

08000da6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000daa:	e7fe      	b.n	8000daa <BusFault_Handler+0x4>

08000dac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <UsageFault_Handler+0x4>

08000db2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de0:	f000 f890 	bl	8000f04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dec:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <SystemInit+0x20>)
 8000dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000df2:	4a05      	ldr	r2, [pc, #20]	; (8000e08 <SystemInit+0x20>)
 8000df4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000df8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e10:	480d      	ldr	r0, [pc, #52]	; (8000e48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e12:	490e      	ldr	r1, [pc, #56]	; (8000e4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e14:	4a0e      	ldr	r2, [pc, #56]	; (8000e50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e18:	e002      	b.n	8000e20 <LoopCopyDataInit>

08000e1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e1e:	3304      	adds	r3, #4

08000e20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e24:	d3f9      	bcc.n	8000e1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e26:	4a0b      	ldr	r2, [pc, #44]	; (8000e54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e28:	4c0b      	ldr	r4, [pc, #44]	; (8000e58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e2c:	e001      	b.n	8000e32 <LoopFillZerobss>

08000e2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e30:	3204      	adds	r2, #4

08000e32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e34:	d3fb      	bcc.n	8000e2e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e36:	f7ff ffd7 	bl	8000de8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e3a:	f002 f91f 	bl	800307c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e3e:	f7ff fd09 	bl	8000854 <main>
  bx  lr    
 8000e42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e4c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000e50:	08003114 	.word	0x08003114
  ldr r2, =_sbss
 8000e54:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000e58:	20006604 	.word	0x20006604

08000e5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e5c:	e7fe      	b.n	8000e5c <ADC_IRQHandler>
	...

08000e60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e64:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <HAL_Init+0x40>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a0d      	ldr	r2, [pc, #52]	; (8000ea0 <HAL_Init+0x40>)
 8000e6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e70:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <HAL_Init+0x40>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a0a      	ldr	r2, [pc, #40]	; (8000ea0 <HAL_Init+0x40>)
 8000e76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e7c:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <HAL_Init+0x40>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a07      	ldr	r2, [pc, #28]	; (8000ea0 <HAL_Init+0x40>)
 8000e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e88:	2003      	movs	r0, #3
 8000e8a:	f000 f931 	bl	80010f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e8e:	2000      	movs	r0, #0
 8000e90:	f000 f808 	bl	8000ea4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e94:	f7ff fe7e 	bl	8000b94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40023c00 	.word	0x40023c00

08000ea4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eac:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <HAL_InitTick+0x54>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4b12      	ldr	r3, [pc, #72]	; (8000efc <HAL_InitTick+0x58>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 f93b 	bl	800113e <HAL_SYSTICK_Config>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e00e      	b.n	8000ef0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2b0f      	cmp	r3, #15
 8000ed6:	d80a      	bhi.n	8000eee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	6879      	ldr	r1, [r7, #4]
 8000edc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ee0:	f000 f911 	bl	8001106 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ee4:	4a06      	ldr	r2, [pc, #24]	; (8000f00 <HAL_InitTick+0x5c>)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eea:	2300      	movs	r3, #0
 8000eec:	e000      	b.n	8000ef0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000004 	.word	0x20000004
 8000efc:	2000000c 	.word	0x2000000c
 8000f00:	20000008 	.word	0x20000008

08000f04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <HAL_IncTick+0x20>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <HAL_IncTick+0x24>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4413      	add	r3, r2
 8000f14:	4a04      	ldr	r2, [pc, #16]	; (8000f28 <HAL_IncTick+0x24>)
 8000f16:	6013      	str	r3, [r2, #0]
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	2000000c 	.word	0x2000000c
 8000f28:	20006600 	.word	0x20006600

08000f2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f30:	4b03      	ldr	r3, [pc, #12]	; (8000f40 <HAL_GetTick+0x14>)
 8000f32:	681b      	ldr	r3, [r3, #0]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	20006600 	.word	0x20006600

08000f44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f4c:	f7ff ffee 	bl	8000f2c <HAL_GetTick>
 8000f50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f5c:	d005      	beq.n	8000f6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f5e:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <HAL_Delay+0x44>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	461a      	mov	r2, r3
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	4413      	add	r3, r2
 8000f68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f6a:	bf00      	nop
 8000f6c:	f7ff ffde 	bl	8000f2c <HAL_GetTick>
 8000f70:	4602      	mov	r2, r0
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d8f7      	bhi.n	8000f6c <HAL_Delay+0x28>
  {
  }
}
 8000f7c:	bf00      	nop
 8000f7e:	bf00      	nop
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	2000000c 	.word	0x2000000c

08000f8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fa2:	68ba      	ldr	r2, [r7, #8]
 8000fa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fa8:	4013      	ands	r3, r2
 8000faa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fbe:	4a04      	ldr	r2, [pc, #16]	; (8000fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	60d3      	str	r3, [r2, #12]
}
 8000fc4:	bf00      	nop
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fd8:	4b04      	ldr	r3, [pc, #16]	; (8000fec <__NVIC_GetPriorityGrouping+0x18>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	0a1b      	lsrs	r3, r3, #8
 8000fde:	f003 0307 	and.w	r3, r3, #7
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	6039      	str	r1, [r7, #0]
 8000ffa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001000:	2b00      	cmp	r3, #0
 8001002:	db0a      	blt.n	800101a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	b2da      	uxtb	r2, r3
 8001008:	490c      	ldr	r1, [pc, #48]	; (800103c <__NVIC_SetPriority+0x4c>)
 800100a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100e:	0112      	lsls	r2, r2, #4
 8001010:	b2d2      	uxtb	r2, r2
 8001012:	440b      	add	r3, r1
 8001014:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001018:	e00a      	b.n	8001030 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4908      	ldr	r1, [pc, #32]	; (8001040 <__NVIC_SetPriority+0x50>)
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	f003 030f 	and.w	r3, r3, #15
 8001026:	3b04      	subs	r3, #4
 8001028:	0112      	lsls	r2, r2, #4
 800102a:	b2d2      	uxtb	r2, r2
 800102c:	440b      	add	r3, r1
 800102e:	761a      	strb	r2, [r3, #24]
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	e000e100 	.word	0xe000e100
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001044:	b480      	push	{r7}
 8001046:	b089      	sub	sp, #36	; 0x24
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	f1c3 0307 	rsb	r3, r3, #7
 800105e:	2b04      	cmp	r3, #4
 8001060:	bf28      	it	cs
 8001062:	2304      	movcs	r3, #4
 8001064:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3304      	adds	r3, #4
 800106a:	2b06      	cmp	r3, #6
 800106c:	d902      	bls.n	8001074 <NVIC_EncodePriority+0x30>
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	3b03      	subs	r3, #3
 8001072:	e000      	b.n	8001076 <NVIC_EncodePriority+0x32>
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001078:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43da      	mvns	r2, r3
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	401a      	ands	r2, r3
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800108c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	fa01 f303 	lsl.w	r3, r1, r3
 8001096:	43d9      	mvns	r1, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800109c:	4313      	orrs	r3, r2
         );
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3724      	adds	r7, #36	; 0x24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
	...

080010ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010bc:	d301      	bcc.n	80010c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010be:	2301      	movs	r3, #1
 80010c0:	e00f      	b.n	80010e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010c2:	4a0a      	ldr	r2, [pc, #40]	; (80010ec <SysTick_Config+0x40>)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ca:	210f      	movs	r1, #15
 80010cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010d0:	f7ff ff8e 	bl	8000ff0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d4:	4b05      	ldr	r3, [pc, #20]	; (80010ec <SysTick_Config+0x40>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010da:	4b04      	ldr	r3, [pc, #16]	; (80010ec <SysTick_Config+0x40>)
 80010dc:	2207      	movs	r2, #7
 80010de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	e000e010 	.word	0xe000e010

080010f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff ff47 	bl	8000f8c <__NVIC_SetPriorityGrouping>
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001106:	b580      	push	{r7, lr}
 8001108:	b086      	sub	sp, #24
 800110a:	af00      	add	r7, sp, #0
 800110c:	4603      	mov	r3, r0
 800110e:	60b9      	str	r1, [r7, #8]
 8001110:	607a      	str	r2, [r7, #4]
 8001112:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001118:	f7ff ff5c 	bl	8000fd4 <__NVIC_GetPriorityGrouping>
 800111c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	68b9      	ldr	r1, [r7, #8]
 8001122:	6978      	ldr	r0, [r7, #20]
 8001124:	f7ff ff8e 	bl	8001044 <NVIC_EncodePriority>
 8001128:	4602      	mov	r2, r0
 800112a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800112e:	4611      	mov	r1, r2
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ff5d 	bl	8000ff0 <__NVIC_SetPriority>
}
 8001136:	bf00      	nop
 8001138:	3718      	adds	r7, #24
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b082      	sub	sp, #8
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff ffb0 	bl	80010ac <SysTick_Config>
 800114c:	4603      	mov	r3, r0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001158:	b480      	push	{r7}
 800115a:	b089      	sub	sp, #36	; 0x24
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800116a:	2300      	movs	r3, #0
 800116c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800116e:	2300      	movs	r3, #0
 8001170:	61fb      	str	r3, [r7, #28]
 8001172:	e165      	b.n	8001440 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001174:	2201      	movs	r2, #1
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	697a      	ldr	r2, [r7, #20]
 8001184:	4013      	ands	r3, r2
 8001186:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	429a      	cmp	r2, r3
 800118e:	f040 8154 	bne.w	800143a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f003 0303 	and.w	r3, r3, #3
 800119a:	2b01      	cmp	r3, #1
 800119c:	d005      	beq.n	80011aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d130      	bne.n	800120c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	2203      	movs	r2, #3
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43db      	mvns	r3, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4013      	ands	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	68da      	ldr	r2, [r3, #12]
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011e0:	2201      	movs	r2, #1
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	091b      	lsrs	r3, r3, #4
 80011f6:	f003 0201 	and.w	r2, r3, #1
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 0303 	and.w	r3, r3, #3
 8001214:	2b03      	cmp	r3, #3
 8001216:	d017      	beq.n	8001248 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	2203      	movs	r2, #3
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	689a      	ldr	r2, [r3, #8]
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 0303 	and.w	r3, r3, #3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d123      	bne.n	800129c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	08da      	lsrs	r2, r3, #3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3208      	adds	r2, #8
 800125c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001260:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	f003 0307 	and.w	r3, r3, #7
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	220f      	movs	r2, #15
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	691a      	ldr	r2, [r3, #16]
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4313      	orrs	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	08da      	lsrs	r2, r3, #3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	3208      	adds	r2, #8
 8001296:	69b9      	ldr	r1, [r7, #24]
 8001298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	2203      	movs	r2, #3
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 0203 	and.w	r2, r3, #3
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	f000 80ae 	beq.w	800143a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	4b5d      	ldr	r3, [pc, #372]	; (8001458 <HAL_GPIO_Init+0x300>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e6:	4a5c      	ldr	r2, [pc, #368]	; (8001458 <HAL_GPIO_Init+0x300>)
 80012e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ec:	6453      	str	r3, [r2, #68]	; 0x44
 80012ee:	4b5a      	ldr	r3, [pc, #360]	; (8001458 <HAL_GPIO_Init+0x300>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012fa:	4a58      	ldr	r2, [pc, #352]	; (800145c <HAL_GPIO_Init+0x304>)
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	089b      	lsrs	r3, r3, #2
 8001300:	3302      	adds	r3, #2
 8001302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001306:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	f003 0303 	and.w	r3, r3, #3
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	220f      	movs	r2, #15
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43db      	mvns	r3, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4013      	ands	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a4f      	ldr	r2, [pc, #316]	; (8001460 <HAL_GPIO_Init+0x308>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d025      	beq.n	8001372 <HAL_GPIO_Init+0x21a>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a4e      	ldr	r2, [pc, #312]	; (8001464 <HAL_GPIO_Init+0x30c>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d01f      	beq.n	800136e <HAL_GPIO_Init+0x216>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a4d      	ldr	r2, [pc, #308]	; (8001468 <HAL_GPIO_Init+0x310>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d019      	beq.n	800136a <HAL_GPIO_Init+0x212>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a4c      	ldr	r2, [pc, #304]	; (800146c <HAL_GPIO_Init+0x314>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d013      	beq.n	8001366 <HAL_GPIO_Init+0x20e>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a4b      	ldr	r2, [pc, #300]	; (8001470 <HAL_GPIO_Init+0x318>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d00d      	beq.n	8001362 <HAL_GPIO_Init+0x20a>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a4a      	ldr	r2, [pc, #296]	; (8001474 <HAL_GPIO_Init+0x31c>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d007      	beq.n	800135e <HAL_GPIO_Init+0x206>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a49      	ldr	r2, [pc, #292]	; (8001478 <HAL_GPIO_Init+0x320>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d101      	bne.n	800135a <HAL_GPIO_Init+0x202>
 8001356:	2306      	movs	r3, #6
 8001358:	e00c      	b.n	8001374 <HAL_GPIO_Init+0x21c>
 800135a:	2307      	movs	r3, #7
 800135c:	e00a      	b.n	8001374 <HAL_GPIO_Init+0x21c>
 800135e:	2305      	movs	r3, #5
 8001360:	e008      	b.n	8001374 <HAL_GPIO_Init+0x21c>
 8001362:	2304      	movs	r3, #4
 8001364:	e006      	b.n	8001374 <HAL_GPIO_Init+0x21c>
 8001366:	2303      	movs	r3, #3
 8001368:	e004      	b.n	8001374 <HAL_GPIO_Init+0x21c>
 800136a:	2302      	movs	r3, #2
 800136c:	e002      	b.n	8001374 <HAL_GPIO_Init+0x21c>
 800136e:	2301      	movs	r3, #1
 8001370:	e000      	b.n	8001374 <HAL_GPIO_Init+0x21c>
 8001372:	2300      	movs	r3, #0
 8001374:	69fa      	ldr	r2, [r7, #28]
 8001376:	f002 0203 	and.w	r2, r2, #3
 800137a:	0092      	lsls	r2, r2, #2
 800137c:	4093      	lsls	r3, r2
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4313      	orrs	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001384:	4935      	ldr	r1, [pc, #212]	; (800145c <HAL_GPIO_Init+0x304>)
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	089b      	lsrs	r3, r3, #2
 800138a:	3302      	adds	r3, #2
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001392:	4b3a      	ldr	r3, [pc, #232]	; (800147c <HAL_GPIO_Init+0x324>)
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	43db      	mvns	r3, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4013      	ands	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d003      	beq.n	80013b6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013b6:	4a31      	ldr	r2, [pc, #196]	; (800147c <HAL_GPIO_Init+0x324>)
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013bc:	4b2f      	ldr	r3, [pc, #188]	; (800147c <HAL_GPIO_Init+0x324>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	43db      	mvns	r3, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4013      	ands	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d003      	beq.n	80013e0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	4313      	orrs	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013e0:	4a26      	ldr	r2, [pc, #152]	; (800147c <HAL_GPIO_Init+0x324>)
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013e6:	4b25      	ldr	r3, [pc, #148]	; (800147c <HAL_GPIO_Init+0x324>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	43db      	mvns	r3, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4013      	ands	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d003      	beq.n	800140a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	4313      	orrs	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800140a:	4a1c      	ldr	r2, [pc, #112]	; (800147c <HAL_GPIO_Init+0x324>)
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001410:	4b1a      	ldr	r3, [pc, #104]	; (800147c <HAL_GPIO_Init+0x324>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	43db      	mvns	r3, r3
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4013      	ands	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d003      	beq.n	8001434 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	4313      	orrs	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001434:	4a11      	ldr	r2, [pc, #68]	; (800147c <HAL_GPIO_Init+0x324>)
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3301      	adds	r3, #1
 800143e:	61fb      	str	r3, [r7, #28]
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	2b0f      	cmp	r3, #15
 8001444:	f67f ae96 	bls.w	8001174 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001448:	bf00      	nop
 800144a:	bf00      	nop
 800144c:	3724      	adds	r7, #36	; 0x24
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	40023800 	.word	0x40023800
 800145c:	40013800 	.word	0x40013800
 8001460:	40020000 	.word	0x40020000
 8001464:	40020400 	.word	0x40020400
 8001468:	40020800 	.word	0x40020800
 800146c:	40020c00 	.word	0x40020c00
 8001470:	40021000 	.word	0x40021000
 8001474:	40021400 	.word	0x40021400
 8001478:	40021800 	.word	0x40021800
 800147c:	40013c00 	.word	0x40013c00

08001480 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	460b      	mov	r3, r1
 800148a:	807b      	strh	r3, [r7, #2]
 800148c:	4613      	mov	r3, r2
 800148e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001490:	787b      	ldrb	r3, [r7, #1]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001496:	887a      	ldrh	r2, [r7, #2]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800149c:	e003      	b.n	80014a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800149e:	887b      	ldrh	r3, [r7, #2]
 80014a0:	041a      	lsls	r2, r3, #16
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	619a      	str	r2, [r3, #24]
}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
	...

080014b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d101      	bne.n	80014c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e12b      	b.n	800171e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d106      	bne.n	80014e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2200      	movs	r2, #0
 80014d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f7ff fb82 	bl	8000be4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2224      	movs	r2, #36	; 0x24
 80014e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f022 0201 	bic.w	r2, r2, #1
 80014f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001506:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001516:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001518:	f000 fa02 	bl	8001920 <HAL_RCC_GetPCLK1Freq>
 800151c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	4a81      	ldr	r2, [pc, #516]	; (8001728 <HAL_I2C_Init+0x274>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d807      	bhi.n	8001538 <HAL_I2C_Init+0x84>
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	4a80      	ldr	r2, [pc, #512]	; (800172c <HAL_I2C_Init+0x278>)
 800152c:	4293      	cmp	r3, r2
 800152e:	bf94      	ite	ls
 8001530:	2301      	movls	r3, #1
 8001532:	2300      	movhi	r3, #0
 8001534:	b2db      	uxtb	r3, r3
 8001536:	e006      	b.n	8001546 <HAL_I2C_Init+0x92>
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	4a7d      	ldr	r2, [pc, #500]	; (8001730 <HAL_I2C_Init+0x27c>)
 800153c:	4293      	cmp	r3, r2
 800153e:	bf94      	ite	ls
 8001540:	2301      	movls	r3, #1
 8001542:	2300      	movhi	r3, #0
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e0e7      	b.n	800171e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	4a78      	ldr	r2, [pc, #480]	; (8001734 <HAL_I2C_Init+0x280>)
 8001552:	fba2 2303 	umull	r2, r3, r2, r3
 8001556:	0c9b      	lsrs	r3, r3, #18
 8001558:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	68ba      	ldr	r2, [r7, #8]
 800156a:	430a      	orrs	r2, r1
 800156c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6a1b      	ldr	r3, [r3, #32]
 8001574:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	4a6a      	ldr	r2, [pc, #424]	; (8001728 <HAL_I2C_Init+0x274>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d802      	bhi.n	8001588 <HAL_I2C_Init+0xd4>
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	3301      	adds	r3, #1
 8001586:	e009      	b.n	800159c <HAL_I2C_Init+0xe8>
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800158e:	fb02 f303 	mul.w	r3, r2, r3
 8001592:	4a69      	ldr	r2, [pc, #420]	; (8001738 <HAL_I2C_Init+0x284>)
 8001594:	fba2 2303 	umull	r2, r3, r2, r3
 8001598:	099b      	lsrs	r3, r3, #6
 800159a:	3301      	adds	r3, #1
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	6812      	ldr	r2, [r2, #0]
 80015a0:	430b      	orrs	r3, r1
 80015a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80015ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	495c      	ldr	r1, [pc, #368]	; (8001728 <HAL_I2C_Init+0x274>)
 80015b8:	428b      	cmp	r3, r1
 80015ba:	d819      	bhi.n	80015f0 <HAL_I2C_Init+0x13c>
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	1e59      	subs	r1, r3, #1
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80015ca:	1c59      	adds	r1, r3, #1
 80015cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80015d0:	400b      	ands	r3, r1
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d00a      	beq.n	80015ec <HAL_I2C_Init+0x138>
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	1e59      	subs	r1, r3, #1
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80015e4:	3301      	adds	r3, #1
 80015e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015ea:	e051      	b.n	8001690 <HAL_I2C_Init+0x1dc>
 80015ec:	2304      	movs	r3, #4
 80015ee:	e04f      	b.n	8001690 <HAL_I2C_Init+0x1dc>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d111      	bne.n	800161c <HAL_I2C_Init+0x168>
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	1e58      	subs	r0, r3, #1
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6859      	ldr	r1, [r3, #4]
 8001600:	460b      	mov	r3, r1
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	440b      	add	r3, r1
 8001606:	fbb0 f3f3 	udiv	r3, r0, r3
 800160a:	3301      	adds	r3, #1
 800160c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001610:	2b00      	cmp	r3, #0
 8001612:	bf0c      	ite	eq
 8001614:	2301      	moveq	r3, #1
 8001616:	2300      	movne	r3, #0
 8001618:	b2db      	uxtb	r3, r3
 800161a:	e012      	b.n	8001642 <HAL_I2C_Init+0x18e>
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	1e58      	subs	r0, r3, #1
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6859      	ldr	r1, [r3, #4]
 8001624:	460b      	mov	r3, r1
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	440b      	add	r3, r1
 800162a:	0099      	lsls	r1, r3, #2
 800162c:	440b      	add	r3, r1
 800162e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001632:	3301      	adds	r3, #1
 8001634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001638:	2b00      	cmp	r3, #0
 800163a:	bf0c      	ite	eq
 800163c:	2301      	moveq	r3, #1
 800163e:	2300      	movne	r3, #0
 8001640:	b2db      	uxtb	r3, r3
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <HAL_I2C_Init+0x196>
 8001646:	2301      	movs	r3, #1
 8001648:	e022      	b.n	8001690 <HAL_I2C_Init+0x1dc>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d10e      	bne.n	8001670 <HAL_I2C_Init+0x1bc>
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	1e58      	subs	r0, r3, #1
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6859      	ldr	r1, [r3, #4]
 800165a:	460b      	mov	r3, r1
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	440b      	add	r3, r1
 8001660:	fbb0 f3f3 	udiv	r3, r0, r3
 8001664:	3301      	adds	r3, #1
 8001666:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800166a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800166e:	e00f      	b.n	8001690 <HAL_I2C_Init+0x1dc>
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	1e58      	subs	r0, r3, #1
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6859      	ldr	r1, [r3, #4]
 8001678:	460b      	mov	r3, r1
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	440b      	add	r3, r1
 800167e:	0099      	lsls	r1, r3, #2
 8001680:	440b      	add	r3, r1
 8001682:	fbb0 f3f3 	udiv	r3, r0, r3
 8001686:	3301      	adds	r3, #1
 8001688:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800168c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001690:	6879      	ldr	r1, [r7, #4]
 8001692:	6809      	ldr	r1, [r1, #0]
 8001694:	4313      	orrs	r3, r2
 8001696:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	69da      	ldr	r2, [r3, #28]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a1b      	ldr	r3, [r3, #32]
 80016aa:	431a      	orrs	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	430a      	orrs	r2, r1
 80016b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80016be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	6911      	ldr	r1, [r2, #16]
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	68d2      	ldr	r2, [r2, #12]
 80016ca:	4311      	orrs	r1, r2
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	6812      	ldr	r2, [r2, #0]
 80016d0:	430b      	orrs	r3, r1
 80016d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	695a      	ldr	r2, [r3, #20]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	431a      	orrs	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	430a      	orrs	r2, r1
 80016ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f042 0201 	orr.w	r2, r2, #1
 80016fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2220      	movs	r2, #32
 800170a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	000186a0 	.word	0x000186a0
 800172c:	001e847f 	.word	0x001e847f
 8001730:	003d08ff 	.word	0x003d08ff
 8001734:	431bde83 	.word	0x431bde83
 8001738:	10624dd3 	.word	0x10624dd3

0800173c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d101      	bne.n	8001750 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e0cc      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001750:	4b68      	ldr	r3, [pc, #416]	; (80018f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 030f 	and.w	r3, r3, #15
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	429a      	cmp	r2, r3
 800175c:	d90c      	bls.n	8001778 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800175e:	4b65      	ldr	r3, [pc, #404]	; (80018f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	b2d2      	uxtb	r2, r2
 8001764:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001766:	4b63      	ldr	r3, [pc, #396]	; (80018f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 030f 	and.w	r3, r3, #15
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	429a      	cmp	r2, r3
 8001772:	d001      	beq.n	8001778 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e0b8      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d020      	beq.n	80017c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0304 	and.w	r3, r3, #4
 800178c:	2b00      	cmp	r3, #0
 800178e:	d005      	beq.n	800179c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001790:	4b59      	ldr	r3, [pc, #356]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	4a58      	ldr	r2, [pc, #352]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800179a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0308 	and.w	r3, r3, #8
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d005      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017a8:	4b53      	ldr	r3, [pc, #332]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	4a52      	ldr	r2, [pc, #328]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017b4:	4b50      	ldr	r3, [pc, #320]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	494d      	ldr	r1, [pc, #308]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d044      	beq.n	800185c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d107      	bne.n	80017ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017da:	4b47      	ldr	r3, [pc, #284]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d119      	bne.n	800181a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e07f      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d003      	beq.n	80017fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017f6:	2b03      	cmp	r3, #3
 80017f8:	d107      	bne.n	800180a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017fa:	4b3f      	ldr	r3, [pc, #252]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d109      	bne.n	800181a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e06f      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800180a:	4b3b      	ldr	r3, [pc, #236]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e067      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800181a:	4b37      	ldr	r3, [pc, #220]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f023 0203 	bic.w	r2, r3, #3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	4934      	ldr	r1, [pc, #208]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001828:	4313      	orrs	r3, r2
 800182a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800182c:	f7ff fb7e 	bl	8000f2c <HAL_GetTick>
 8001830:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001832:	e00a      	b.n	800184a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001834:	f7ff fb7a 	bl	8000f2c <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001842:	4293      	cmp	r3, r2
 8001844:	d901      	bls.n	800184a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e04f      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800184a:	4b2b      	ldr	r3, [pc, #172]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 020c 	and.w	r2, r3, #12
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	429a      	cmp	r2, r3
 800185a:	d1eb      	bne.n	8001834 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800185c:	4b25      	ldr	r3, [pc, #148]	; (80018f4 <HAL_RCC_ClockConfig+0x1b8>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 030f 	and.w	r3, r3, #15
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	429a      	cmp	r2, r3
 8001868:	d20c      	bcs.n	8001884 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800186a:	4b22      	ldr	r3, [pc, #136]	; (80018f4 <HAL_RCC_ClockConfig+0x1b8>)
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001872:	4b20      	ldr	r3, [pc, #128]	; (80018f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 030f 	and.w	r3, r3, #15
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	429a      	cmp	r2, r3
 800187e:	d001      	beq.n	8001884 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e032      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	2b00      	cmp	r3, #0
 800188e:	d008      	beq.n	80018a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001890:	4b19      	ldr	r3, [pc, #100]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	4916      	ldr	r1, [pc, #88]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0308 	and.w	r3, r3, #8
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d009      	beq.n	80018c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018ae:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	490e      	ldr	r1, [pc, #56]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80018be:	4313      	orrs	r3, r2
 80018c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018c2:	f000 f855 	bl	8001970 <HAL_RCC_GetSysClockFreq>
 80018c6:	4602      	mov	r2, r0
 80018c8:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	091b      	lsrs	r3, r3, #4
 80018ce:	f003 030f 	and.w	r3, r3, #15
 80018d2:	490a      	ldr	r1, [pc, #40]	; (80018fc <HAL_RCC_ClockConfig+0x1c0>)
 80018d4:	5ccb      	ldrb	r3, [r1, r3]
 80018d6:	fa22 f303 	lsr.w	r3, r2, r3
 80018da:	4a09      	ldr	r2, [pc, #36]	; (8001900 <HAL_RCC_ClockConfig+0x1c4>)
 80018dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018de:	4b09      	ldr	r3, [pc, #36]	; (8001904 <HAL_RCC_ClockConfig+0x1c8>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff fade 	bl	8000ea4 <HAL_InitTick>

  return HAL_OK;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40023c00 	.word	0x40023c00
 80018f8:	40023800 	.word	0x40023800
 80018fc:	080030ec 	.word	0x080030ec
 8001900:	20000004 	.word	0x20000004
 8001904:	20000008 	.word	0x20000008

08001908 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800190c:	4b03      	ldr	r3, [pc, #12]	; (800191c <HAL_RCC_GetHCLKFreq+0x14>)
 800190e:	681b      	ldr	r3, [r3, #0]
}
 8001910:	4618      	mov	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	20000004 	.word	0x20000004

08001920 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001924:	f7ff fff0 	bl	8001908 <HAL_RCC_GetHCLKFreq>
 8001928:	4602      	mov	r2, r0
 800192a:	4b05      	ldr	r3, [pc, #20]	; (8001940 <HAL_RCC_GetPCLK1Freq+0x20>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	0a9b      	lsrs	r3, r3, #10
 8001930:	f003 0307 	and.w	r3, r3, #7
 8001934:	4903      	ldr	r1, [pc, #12]	; (8001944 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001936:	5ccb      	ldrb	r3, [r1, r3]
 8001938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800193c:	4618      	mov	r0, r3
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40023800 	.word	0x40023800
 8001944:	080030fc 	.word	0x080030fc

08001948 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800194c:	f7ff ffdc 	bl	8001908 <HAL_RCC_GetHCLKFreq>
 8001950:	4602      	mov	r2, r0
 8001952:	4b05      	ldr	r3, [pc, #20]	; (8001968 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	0b5b      	lsrs	r3, r3, #13
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	4903      	ldr	r1, [pc, #12]	; (800196c <HAL_RCC_GetPCLK2Freq+0x24>)
 800195e:	5ccb      	ldrb	r3, [r1, r3]
 8001960:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001964:	4618      	mov	r0, r3
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40023800 	.word	0x40023800
 800196c:	080030fc 	.word	0x080030fc

08001970 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001970:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001974:	b0ae      	sub	sp, #184	; 0xb8
 8001976:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001978:	2300      	movs	r3, #0
 800197a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800197e:	2300      	movs	r3, #0
 8001980:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001984:	2300      	movs	r3, #0
 8001986:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800198a:	2300      	movs	r3, #0
 800198c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001990:	2300      	movs	r3, #0
 8001992:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001996:	4bcb      	ldr	r3, [pc, #812]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f003 030c 	and.w	r3, r3, #12
 800199e:	2b0c      	cmp	r3, #12
 80019a0:	f200 8206 	bhi.w	8001db0 <HAL_RCC_GetSysClockFreq+0x440>
 80019a4:	a201      	add	r2, pc, #4	; (adr r2, 80019ac <HAL_RCC_GetSysClockFreq+0x3c>)
 80019a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019aa:	bf00      	nop
 80019ac:	080019e1 	.word	0x080019e1
 80019b0:	08001db1 	.word	0x08001db1
 80019b4:	08001db1 	.word	0x08001db1
 80019b8:	08001db1 	.word	0x08001db1
 80019bc:	080019e9 	.word	0x080019e9
 80019c0:	08001db1 	.word	0x08001db1
 80019c4:	08001db1 	.word	0x08001db1
 80019c8:	08001db1 	.word	0x08001db1
 80019cc:	080019f1 	.word	0x080019f1
 80019d0:	08001db1 	.word	0x08001db1
 80019d4:	08001db1 	.word	0x08001db1
 80019d8:	08001db1 	.word	0x08001db1
 80019dc:	08001be1 	.word	0x08001be1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019e0:	4bb9      	ldr	r3, [pc, #740]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x358>)
 80019e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80019e6:	e1e7      	b.n	8001db8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019e8:	4bb8      	ldr	r3, [pc, #736]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x35c>)
 80019ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80019ee:	e1e3      	b.n	8001db8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019f0:	4bb4      	ldr	r3, [pc, #720]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x354>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019fc:	4bb1      	ldr	r3, [pc, #708]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x354>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d071      	beq.n	8001aec <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a08:	4bae      	ldr	r3, [pc, #696]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	099b      	lsrs	r3, r3, #6
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001a14:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001a18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a20:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001a24:	2300      	movs	r3, #0
 8001a26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001a2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001a2e:	4622      	mov	r2, r4
 8001a30:	462b      	mov	r3, r5
 8001a32:	f04f 0000 	mov.w	r0, #0
 8001a36:	f04f 0100 	mov.w	r1, #0
 8001a3a:	0159      	lsls	r1, r3, #5
 8001a3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a40:	0150      	lsls	r0, r2, #5
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	4621      	mov	r1, r4
 8001a48:	1a51      	subs	r1, r2, r1
 8001a4a:	6439      	str	r1, [r7, #64]	; 0x40
 8001a4c:	4629      	mov	r1, r5
 8001a4e:	eb63 0301 	sbc.w	r3, r3, r1
 8001a52:	647b      	str	r3, [r7, #68]	; 0x44
 8001a54:	f04f 0200 	mov.w	r2, #0
 8001a58:	f04f 0300 	mov.w	r3, #0
 8001a5c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001a60:	4649      	mov	r1, r9
 8001a62:	018b      	lsls	r3, r1, #6
 8001a64:	4641      	mov	r1, r8
 8001a66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a6a:	4641      	mov	r1, r8
 8001a6c:	018a      	lsls	r2, r1, #6
 8001a6e:	4641      	mov	r1, r8
 8001a70:	1a51      	subs	r1, r2, r1
 8001a72:	63b9      	str	r1, [r7, #56]	; 0x38
 8001a74:	4649      	mov	r1, r9
 8001a76:	eb63 0301 	sbc.w	r3, r3, r1
 8001a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a7c:	f04f 0200 	mov.w	r2, #0
 8001a80:	f04f 0300 	mov.w	r3, #0
 8001a84:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001a88:	4649      	mov	r1, r9
 8001a8a:	00cb      	lsls	r3, r1, #3
 8001a8c:	4641      	mov	r1, r8
 8001a8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001a92:	4641      	mov	r1, r8
 8001a94:	00ca      	lsls	r2, r1, #3
 8001a96:	4610      	mov	r0, r2
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	4622      	mov	r2, r4
 8001a9e:	189b      	adds	r3, r3, r2
 8001aa0:	633b      	str	r3, [r7, #48]	; 0x30
 8001aa2:	462b      	mov	r3, r5
 8001aa4:	460a      	mov	r2, r1
 8001aa6:	eb42 0303 	adc.w	r3, r2, r3
 8001aaa:	637b      	str	r3, [r7, #52]	; 0x34
 8001aac:	f04f 0200 	mov.w	r2, #0
 8001ab0:	f04f 0300 	mov.w	r3, #0
 8001ab4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001ab8:	4629      	mov	r1, r5
 8001aba:	024b      	lsls	r3, r1, #9
 8001abc:	4621      	mov	r1, r4
 8001abe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ac2:	4621      	mov	r1, r4
 8001ac4:	024a      	lsls	r2, r1, #9
 8001ac6:	4610      	mov	r0, r2
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001ad4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001ad8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001adc:	f7fe fb92 	bl	8000204 <__aeabi_uldivmod>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001aea:	e067      	b.n	8001bbc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aec:	4b75      	ldr	r3, [pc, #468]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	099b      	lsrs	r3, r3, #6
 8001af2:	2200      	movs	r2, #0
 8001af4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001af8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001afc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b04:	67bb      	str	r3, [r7, #120]	; 0x78
 8001b06:	2300      	movs	r3, #0
 8001b08:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001b0a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001b0e:	4622      	mov	r2, r4
 8001b10:	462b      	mov	r3, r5
 8001b12:	f04f 0000 	mov.w	r0, #0
 8001b16:	f04f 0100 	mov.w	r1, #0
 8001b1a:	0159      	lsls	r1, r3, #5
 8001b1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b20:	0150      	lsls	r0, r2, #5
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	4621      	mov	r1, r4
 8001b28:	1a51      	subs	r1, r2, r1
 8001b2a:	62b9      	str	r1, [r7, #40]	; 0x28
 8001b2c:	4629      	mov	r1, r5
 8001b2e:	eb63 0301 	sbc.w	r3, r3, r1
 8001b32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b34:	f04f 0200 	mov.w	r2, #0
 8001b38:	f04f 0300 	mov.w	r3, #0
 8001b3c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001b40:	4649      	mov	r1, r9
 8001b42:	018b      	lsls	r3, r1, #6
 8001b44:	4641      	mov	r1, r8
 8001b46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b4a:	4641      	mov	r1, r8
 8001b4c:	018a      	lsls	r2, r1, #6
 8001b4e:	4641      	mov	r1, r8
 8001b50:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b54:	4649      	mov	r1, r9
 8001b56:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b5a:	f04f 0200 	mov.w	r2, #0
 8001b5e:	f04f 0300 	mov.w	r3, #0
 8001b62:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001b66:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001b6a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001b6e:	4692      	mov	sl, r2
 8001b70:	469b      	mov	fp, r3
 8001b72:	4623      	mov	r3, r4
 8001b74:	eb1a 0303 	adds.w	r3, sl, r3
 8001b78:	623b      	str	r3, [r7, #32]
 8001b7a:	462b      	mov	r3, r5
 8001b7c:	eb4b 0303 	adc.w	r3, fp, r3
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
 8001b82:	f04f 0200 	mov.w	r2, #0
 8001b86:	f04f 0300 	mov.w	r3, #0
 8001b8a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001b8e:	4629      	mov	r1, r5
 8001b90:	028b      	lsls	r3, r1, #10
 8001b92:	4621      	mov	r1, r4
 8001b94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b98:	4621      	mov	r1, r4
 8001b9a:	028a      	lsls	r2, r1, #10
 8001b9c:	4610      	mov	r0, r2
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	673b      	str	r3, [r7, #112]	; 0x70
 8001ba8:	677a      	str	r2, [r7, #116]	; 0x74
 8001baa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001bae:	f7fe fb29 	bl	8000204 <__aeabi_uldivmod>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bbc:	4b41      	ldr	r3, [pc, #260]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	0c1b      	lsrs	r3, r3, #16
 8001bc2:	f003 0303 	and.w	r3, r3, #3
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001bce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001bd2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001bde:	e0eb      	b.n	8001db8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001be0:	4b38      	ldr	r3, [pc, #224]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001be8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bec:	4b35      	ldr	r3, [pc, #212]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d06b      	beq.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bf8:	4b32      	ldr	r3, [pc, #200]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	099b      	lsrs	r3, r3, #6
 8001bfe:	2200      	movs	r2, #0
 8001c00:	66bb      	str	r3, [r7, #104]	; 0x68
 8001c02:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001c04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c0a:	663b      	str	r3, [r7, #96]	; 0x60
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	667b      	str	r3, [r7, #100]	; 0x64
 8001c10:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001c14:	4622      	mov	r2, r4
 8001c16:	462b      	mov	r3, r5
 8001c18:	f04f 0000 	mov.w	r0, #0
 8001c1c:	f04f 0100 	mov.w	r1, #0
 8001c20:	0159      	lsls	r1, r3, #5
 8001c22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c26:	0150      	lsls	r0, r2, #5
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	4621      	mov	r1, r4
 8001c2e:	1a51      	subs	r1, r2, r1
 8001c30:	61b9      	str	r1, [r7, #24]
 8001c32:	4629      	mov	r1, r5
 8001c34:	eb63 0301 	sbc.w	r3, r3, r1
 8001c38:	61fb      	str	r3, [r7, #28]
 8001c3a:	f04f 0200 	mov.w	r2, #0
 8001c3e:	f04f 0300 	mov.w	r3, #0
 8001c42:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001c46:	4659      	mov	r1, fp
 8001c48:	018b      	lsls	r3, r1, #6
 8001c4a:	4651      	mov	r1, sl
 8001c4c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c50:	4651      	mov	r1, sl
 8001c52:	018a      	lsls	r2, r1, #6
 8001c54:	4651      	mov	r1, sl
 8001c56:	ebb2 0801 	subs.w	r8, r2, r1
 8001c5a:	4659      	mov	r1, fp
 8001c5c:	eb63 0901 	sbc.w	r9, r3, r1
 8001c60:	f04f 0200 	mov.w	r2, #0
 8001c64:	f04f 0300 	mov.w	r3, #0
 8001c68:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c6c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c70:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c74:	4690      	mov	r8, r2
 8001c76:	4699      	mov	r9, r3
 8001c78:	4623      	mov	r3, r4
 8001c7a:	eb18 0303 	adds.w	r3, r8, r3
 8001c7e:	613b      	str	r3, [r7, #16]
 8001c80:	462b      	mov	r3, r5
 8001c82:	eb49 0303 	adc.w	r3, r9, r3
 8001c86:	617b      	str	r3, [r7, #20]
 8001c88:	f04f 0200 	mov.w	r2, #0
 8001c8c:	f04f 0300 	mov.w	r3, #0
 8001c90:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001c94:	4629      	mov	r1, r5
 8001c96:	024b      	lsls	r3, r1, #9
 8001c98:	4621      	mov	r1, r4
 8001c9a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c9e:	4621      	mov	r1, r4
 8001ca0:	024a      	lsls	r2, r1, #9
 8001ca2:	4610      	mov	r0, r2
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001caa:	2200      	movs	r2, #0
 8001cac:	65bb      	str	r3, [r7, #88]	; 0x58
 8001cae:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001cb0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001cb4:	f7fe faa6 	bl	8000204 <__aeabi_uldivmod>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001cc2:	e065      	b.n	8001d90 <HAL_RCC_GetSysClockFreq+0x420>
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	00f42400 	.word	0x00f42400
 8001ccc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cd0:	4b3d      	ldr	r3, [pc, #244]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x458>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	099b      	lsrs	r3, r3, #6
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	4618      	mov	r0, r3
 8001cda:	4611      	mov	r1, r2
 8001cdc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ce0:	653b      	str	r3, [r7, #80]	; 0x50
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	657b      	str	r3, [r7, #84]	; 0x54
 8001ce6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001cea:	4642      	mov	r2, r8
 8001cec:	464b      	mov	r3, r9
 8001cee:	f04f 0000 	mov.w	r0, #0
 8001cf2:	f04f 0100 	mov.w	r1, #0
 8001cf6:	0159      	lsls	r1, r3, #5
 8001cf8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cfc:	0150      	lsls	r0, r2, #5
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4641      	mov	r1, r8
 8001d04:	1a51      	subs	r1, r2, r1
 8001d06:	60b9      	str	r1, [r7, #8]
 8001d08:	4649      	mov	r1, r9
 8001d0a:	eb63 0301 	sbc.w	r3, r3, r1
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	f04f 0200 	mov.w	r2, #0
 8001d14:	f04f 0300 	mov.w	r3, #0
 8001d18:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001d1c:	4659      	mov	r1, fp
 8001d1e:	018b      	lsls	r3, r1, #6
 8001d20:	4651      	mov	r1, sl
 8001d22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d26:	4651      	mov	r1, sl
 8001d28:	018a      	lsls	r2, r1, #6
 8001d2a:	4651      	mov	r1, sl
 8001d2c:	1a54      	subs	r4, r2, r1
 8001d2e:	4659      	mov	r1, fp
 8001d30:	eb63 0501 	sbc.w	r5, r3, r1
 8001d34:	f04f 0200 	mov.w	r2, #0
 8001d38:	f04f 0300 	mov.w	r3, #0
 8001d3c:	00eb      	lsls	r3, r5, #3
 8001d3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d42:	00e2      	lsls	r2, r4, #3
 8001d44:	4614      	mov	r4, r2
 8001d46:	461d      	mov	r5, r3
 8001d48:	4643      	mov	r3, r8
 8001d4a:	18e3      	adds	r3, r4, r3
 8001d4c:	603b      	str	r3, [r7, #0]
 8001d4e:	464b      	mov	r3, r9
 8001d50:	eb45 0303 	adc.w	r3, r5, r3
 8001d54:	607b      	str	r3, [r7, #4]
 8001d56:	f04f 0200 	mov.w	r2, #0
 8001d5a:	f04f 0300 	mov.w	r3, #0
 8001d5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d62:	4629      	mov	r1, r5
 8001d64:	028b      	lsls	r3, r1, #10
 8001d66:	4621      	mov	r1, r4
 8001d68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d6c:	4621      	mov	r1, r4
 8001d6e:	028a      	lsls	r2, r1, #10
 8001d70:	4610      	mov	r0, r2
 8001d72:	4619      	mov	r1, r3
 8001d74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d78:	2200      	movs	r2, #0
 8001d7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d7c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001d7e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001d82:	f7fe fa3f 	bl	8000204 <__aeabi_uldivmod>
 8001d86:	4602      	mov	r2, r0
 8001d88:	460b      	mov	r3, r1
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001d90:	4b0d      	ldr	r3, [pc, #52]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x458>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	0f1b      	lsrs	r3, r3, #28
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001d9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001da2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001daa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001dae:	e003      	b.n	8001db8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001db0:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x45c>)
 8001db2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001db6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001db8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	37b8      	adds	r7, #184	; 0xb8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	00f42400 	.word	0x00f42400

08001dd0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e28d      	b.n	80022fe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f000 8083 	beq.w	8001ef6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001df0:	4b94      	ldr	r3, [pc, #592]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f003 030c 	and.w	r3, r3, #12
 8001df8:	2b04      	cmp	r3, #4
 8001dfa:	d019      	beq.n	8001e30 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001dfc:	4b91      	ldr	r3, [pc, #580]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001e04:	2b08      	cmp	r3, #8
 8001e06:	d106      	bne.n	8001e16 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e08:	4b8e      	ldr	r3, [pc, #568]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e14:	d00c      	beq.n	8001e30 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e16:	4b8b      	ldr	r3, [pc, #556]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e1e:	2b0c      	cmp	r3, #12
 8001e20:	d112      	bne.n	8001e48 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e22:	4b88      	ldr	r3, [pc, #544]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e2e:	d10b      	bne.n	8001e48 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e30:	4b84      	ldr	r3, [pc, #528]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d05b      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x124>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d157      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e25a      	b.n	80022fe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e50:	d106      	bne.n	8001e60 <HAL_RCC_OscConfig+0x90>
 8001e52:	4b7c      	ldr	r3, [pc, #496]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a7b      	ldr	r2, [pc, #492]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e5c:	6013      	str	r3, [r2, #0]
 8001e5e:	e01d      	b.n	8001e9c <HAL_RCC_OscConfig+0xcc>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e68:	d10c      	bne.n	8001e84 <HAL_RCC_OscConfig+0xb4>
 8001e6a:	4b76      	ldr	r3, [pc, #472]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a75      	ldr	r2, [pc, #468]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001e70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e74:	6013      	str	r3, [r2, #0]
 8001e76:	4b73      	ldr	r3, [pc, #460]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a72      	ldr	r2, [pc, #456]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	e00b      	b.n	8001e9c <HAL_RCC_OscConfig+0xcc>
 8001e84:	4b6f      	ldr	r3, [pc, #444]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a6e      	ldr	r2, [pc, #440]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001e8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e8e:	6013      	str	r3, [r2, #0]
 8001e90:	4b6c      	ldr	r3, [pc, #432]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a6b      	ldr	r2, [pc, #428]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001e96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d013      	beq.n	8001ecc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea4:	f7ff f842 	bl	8000f2c <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eac:	f7ff f83e 	bl	8000f2c <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b64      	cmp	r3, #100	; 0x64
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e21f      	b.n	80022fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ebe:	4b61      	ldr	r3, [pc, #388]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d0f0      	beq.n	8001eac <HAL_RCC_OscConfig+0xdc>
 8001eca:	e014      	b.n	8001ef6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ecc:	f7ff f82e 	bl	8000f2c <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ed4:	f7ff f82a 	bl	8000f2c <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b64      	cmp	r3, #100	; 0x64
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e20b      	b.n	80022fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ee6:	4b57      	ldr	r3, [pc, #348]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1f0      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x104>
 8001ef2:	e000      	b.n	8001ef6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ef4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d06f      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f02:	4b50      	ldr	r3, [pc, #320]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f003 030c 	and.w	r3, r3, #12
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d017      	beq.n	8001f3e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f0e:	4b4d      	ldr	r3, [pc, #308]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f16:	2b08      	cmp	r3, #8
 8001f18:	d105      	bne.n	8001f26 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f1a:	4b4a      	ldr	r3, [pc, #296]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00b      	beq.n	8001f3e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f26:	4b47      	ldr	r3, [pc, #284]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f2e:	2b0c      	cmp	r3, #12
 8001f30:	d11c      	bne.n	8001f6c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f32:	4b44      	ldr	r3, [pc, #272]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d116      	bne.n	8001f6c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f3e:	4b41      	ldr	r3, [pc, #260]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d005      	beq.n	8001f56 <HAL_RCC_OscConfig+0x186>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d001      	beq.n	8001f56 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e1d3      	b.n	80022fe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f56:	4b3b      	ldr	r3, [pc, #236]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	4937      	ldr	r1, [pc, #220]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f6a:	e03a      	b.n	8001fe2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d020      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f74:	4b34      	ldr	r3, [pc, #208]	; (8002048 <HAL_RCC_OscConfig+0x278>)
 8001f76:	2201      	movs	r2, #1
 8001f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7a:	f7fe ffd7 	bl	8000f2c <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f80:	e008      	b.n	8001f94 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f82:	f7fe ffd3 	bl	8000f2c <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e1b4      	b.n	80022fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f94:	4b2b      	ldr	r3, [pc, #172]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d0f0      	beq.n	8001f82 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa0:	4b28      	ldr	r3, [pc, #160]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	4925      	ldr	r1, [pc, #148]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	600b      	str	r3, [r1, #0]
 8001fb4:	e015      	b.n	8001fe2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fb6:	4b24      	ldr	r3, [pc, #144]	; (8002048 <HAL_RCC_OscConfig+0x278>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fbc:	f7fe ffb6 	bl	8000f2c <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fc4:	f7fe ffb2 	bl	8000f2c <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e193      	b.n	80022fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fd6:	4b1b      	ldr	r3, [pc, #108]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1f0      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d036      	beq.n	800205c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d016      	beq.n	8002024 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ff6:	4b15      	ldr	r3, [pc, #84]	; (800204c <HAL_RCC_OscConfig+0x27c>)
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ffc:	f7fe ff96 	bl	8000f2c <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002004:	f7fe ff92 	bl	8000f2c <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e173      	b.n	80022fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002016:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8002018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d0f0      	beq.n	8002004 <HAL_RCC_OscConfig+0x234>
 8002022:	e01b      	b.n	800205c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002024:	4b09      	ldr	r3, [pc, #36]	; (800204c <HAL_RCC_OscConfig+0x27c>)
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800202a:	f7fe ff7f 	bl	8000f2c <HAL_GetTick>
 800202e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002030:	e00e      	b.n	8002050 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002032:	f7fe ff7b 	bl	8000f2c <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d907      	bls.n	8002050 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e15c      	b.n	80022fe <HAL_RCC_OscConfig+0x52e>
 8002044:	40023800 	.word	0x40023800
 8002048:	42470000 	.word	0x42470000
 800204c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002050:	4b8a      	ldr	r3, [pc, #552]	; (800227c <HAL_RCC_OscConfig+0x4ac>)
 8002052:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d1ea      	bne.n	8002032 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0304 	and.w	r3, r3, #4
 8002064:	2b00      	cmp	r3, #0
 8002066:	f000 8097 	beq.w	8002198 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800206a:	2300      	movs	r3, #0
 800206c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800206e:	4b83      	ldr	r3, [pc, #524]	; (800227c <HAL_RCC_OscConfig+0x4ac>)
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d10f      	bne.n	800209a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	4b7f      	ldr	r3, [pc, #508]	; (800227c <HAL_RCC_OscConfig+0x4ac>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	4a7e      	ldr	r2, [pc, #504]	; (800227c <HAL_RCC_OscConfig+0x4ac>)
 8002084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002088:	6413      	str	r3, [r2, #64]	; 0x40
 800208a:	4b7c      	ldr	r3, [pc, #496]	; (800227c <HAL_RCC_OscConfig+0x4ac>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002092:	60bb      	str	r3, [r7, #8]
 8002094:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002096:	2301      	movs	r3, #1
 8002098:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800209a:	4b79      	ldr	r3, [pc, #484]	; (8002280 <HAL_RCC_OscConfig+0x4b0>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d118      	bne.n	80020d8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020a6:	4b76      	ldr	r3, [pc, #472]	; (8002280 <HAL_RCC_OscConfig+0x4b0>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a75      	ldr	r2, [pc, #468]	; (8002280 <HAL_RCC_OscConfig+0x4b0>)
 80020ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020b2:	f7fe ff3b 	bl	8000f2c <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ba:	f7fe ff37 	bl	8000f2c <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e118      	b.n	80022fe <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020cc:	4b6c      	ldr	r3, [pc, #432]	; (8002280 <HAL_RCC_OscConfig+0x4b0>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d0f0      	beq.n	80020ba <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d106      	bne.n	80020ee <HAL_RCC_OscConfig+0x31e>
 80020e0:	4b66      	ldr	r3, [pc, #408]	; (800227c <HAL_RCC_OscConfig+0x4ac>)
 80020e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e4:	4a65      	ldr	r2, [pc, #404]	; (800227c <HAL_RCC_OscConfig+0x4ac>)
 80020e6:	f043 0301 	orr.w	r3, r3, #1
 80020ea:	6713      	str	r3, [r2, #112]	; 0x70
 80020ec:	e01c      	b.n	8002128 <HAL_RCC_OscConfig+0x358>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	2b05      	cmp	r3, #5
 80020f4:	d10c      	bne.n	8002110 <HAL_RCC_OscConfig+0x340>
 80020f6:	4b61      	ldr	r3, [pc, #388]	; (800227c <HAL_RCC_OscConfig+0x4ac>)
 80020f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fa:	4a60      	ldr	r2, [pc, #384]	; (800227c <HAL_RCC_OscConfig+0x4ac>)
 80020fc:	f043 0304 	orr.w	r3, r3, #4
 8002100:	6713      	str	r3, [r2, #112]	; 0x70
 8002102:	4b5e      	ldr	r3, [pc, #376]	; (800227c <HAL_RCC_OscConfig+0x4ac>)
 8002104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002106:	4a5d      	ldr	r2, [pc, #372]	; (800227c <HAL_RCC_OscConfig+0x4ac>)
 8002108:	f043 0301 	orr.w	r3, r3, #1
 800210c:	6713      	str	r3, [r2, #112]	; 0x70
 800210e:	e00b      	b.n	8002128 <HAL_RCC_OscConfig+0x358>
 8002110:	4b5a      	ldr	r3, [pc, #360]	; (800227c <HAL_RCC_OscConfig+0x4ac>)
 8002112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002114:	4a59      	ldr	r2, [pc, #356]	; (800227c <HAL_RCC_OscConfig+0x4ac>)
 8002116:	f023 0301 	bic.w	r3, r3, #1
 800211a:	6713      	str	r3, [r2, #112]	; 0x70
 800211c:	4b57      	ldr	r3, [pc, #348]	; (800227c <HAL_RCC_OscConfig+0x4ac>)
 800211e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002120:	4a56      	ldr	r2, [pc, #344]	; (800227c <HAL_RCC_OscConfig+0x4ac>)
 8002122:	f023 0304 	bic.w	r3, r3, #4
 8002126:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d015      	beq.n	800215c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002130:	f7fe fefc 	bl	8000f2c <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002136:	e00a      	b.n	800214e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002138:	f7fe fef8 	bl	8000f2c <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	f241 3288 	movw	r2, #5000	; 0x1388
 8002146:	4293      	cmp	r3, r2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e0d7      	b.n	80022fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800214e:	4b4b      	ldr	r3, [pc, #300]	; (800227c <HAL_RCC_OscConfig+0x4ac>)
 8002150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d0ee      	beq.n	8002138 <HAL_RCC_OscConfig+0x368>
 800215a:	e014      	b.n	8002186 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800215c:	f7fe fee6 	bl	8000f2c <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002162:	e00a      	b.n	800217a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002164:	f7fe fee2 	bl	8000f2c <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002172:	4293      	cmp	r3, r2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e0c1      	b.n	80022fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800217a:	4b40      	ldr	r3, [pc, #256]	; (800227c <HAL_RCC_OscConfig+0x4ac>)
 800217c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1ee      	bne.n	8002164 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002186:	7dfb      	ldrb	r3, [r7, #23]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d105      	bne.n	8002198 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800218c:	4b3b      	ldr	r3, [pc, #236]	; (800227c <HAL_RCC_OscConfig+0x4ac>)
 800218e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002190:	4a3a      	ldr	r2, [pc, #232]	; (800227c <HAL_RCC_OscConfig+0x4ac>)
 8002192:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002196:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	2b00      	cmp	r3, #0
 800219e:	f000 80ad 	beq.w	80022fc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021a2:	4b36      	ldr	r3, [pc, #216]	; (800227c <HAL_RCC_OscConfig+0x4ac>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 030c 	and.w	r3, r3, #12
 80021aa:	2b08      	cmp	r3, #8
 80021ac:	d060      	beq.n	8002270 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d145      	bne.n	8002242 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021b6:	4b33      	ldr	r3, [pc, #204]	; (8002284 <HAL_RCC_OscConfig+0x4b4>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021bc:	f7fe feb6 	bl	8000f2c <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021c4:	f7fe feb2 	bl	8000f2c <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e093      	b.n	80022fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021d6:	4b29      	ldr	r3, [pc, #164]	; (800227c <HAL_RCC_OscConfig+0x4ac>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1f0      	bne.n	80021c4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	69da      	ldr	r2, [r3, #28]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a1b      	ldr	r3, [r3, #32]
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f0:	019b      	lsls	r3, r3, #6
 80021f2:	431a      	orrs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f8:	085b      	lsrs	r3, r3, #1
 80021fa:	3b01      	subs	r3, #1
 80021fc:	041b      	lsls	r3, r3, #16
 80021fe:	431a      	orrs	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002204:	061b      	lsls	r3, r3, #24
 8002206:	431a      	orrs	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220c:	071b      	lsls	r3, r3, #28
 800220e:	491b      	ldr	r1, [pc, #108]	; (800227c <HAL_RCC_OscConfig+0x4ac>)
 8002210:	4313      	orrs	r3, r2
 8002212:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002214:	4b1b      	ldr	r3, [pc, #108]	; (8002284 <HAL_RCC_OscConfig+0x4b4>)
 8002216:	2201      	movs	r2, #1
 8002218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800221a:	f7fe fe87 	bl	8000f2c <HAL_GetTick>
 800221e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002220:	e008      	b.n	8002234 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002222:	f7fe fe83 	bl	8000f2c <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e064      	b.n	80022fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002234:	4b11      	ldr	r3, [pc, #68]	; (800227c <HAL_RCC_OscConfig+0x4ac>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d0f0      	beq.n	8002222 <HAL_RCC_OscConfig+0x452>
 8002240:	e05c      	b.n	80022fc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002242:	4b10      	ldr	r3, [pc, #64]	; (8002284 <HAL_RCC_OscConfig+0x4b4>)
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002248:	f7fe fe70 	bl	8000f2c <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002250:	f7fe fe6c 	bl	8000f2c <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e04d      	b.n	80022fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002262:	4b06      	ldr	r3, [pc, #24]	; (800227c <HAL_RCC_OscConfig+0x4ac>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1f0      	bne.n	8002250 <HAL_RCC_OscConfig+0x480>
 800226e:	e045      	b.n	80022fc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d107      	bne.n	8002288 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e040      	b.n	80022fe <HAL_RCC_OscConfig+0x52e>
 800227c:	40023800 	.word	0x40023800
 8002280:	40007000 	.word	0x40007000
 8002284:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002288:	4b1f      	ldr	r3, [pc, #124]	; (8002308 <HAL_RCC_OscConfig+0x538>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d030      	beq.n	80022f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d129      	bne.n	80022f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d122      	bne.n	80022f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022b8:	4013      	ands	r3, r2
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d119      	bne.n	80022f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ce:	085b      	lsrs	r3, r3, #1
 80022d0:	3b01      	subs	r3, #1
 80022d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d10f      	bne.n	80022f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d107      	bne.n	80022f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d001      	beq.n	80022fc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e000      	b.n	80022fe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40023800 	.word	0x40023800

0800230c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e07b      	b.n	8002416 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002322:	2b00      	cmp	r3, #0
 8002324:	d108      	bne.n	8002338 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800232e:	d009      	beq.n	8002344 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	61da      	str	r2, [r3, #28]
 8002336:	e005      	b.n	8002344 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d106      	bne.n	8002364 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7fe fc88 	bl	8000c74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2202      	movs	r2, #2
 8002368:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800237a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800238c:	431a      	orrs	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002396:	431a      	orrs	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	431a      	orrs	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	431a      	orrs	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023b4:	431a      	orrs	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023be:	431a      	orrs	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a1b      	ldr	r3, [r3, #32]
 80023c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c8:	ea42 0103 	orr.w	r1, r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	430a      	orrs	r2, r1
 80023da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	0c1b      	lsrs	r3, r3, #16
 80023e2:	f003 0104 	and.w	r1, r3, #4
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ea:	f003 0210 	and.w	r2, r3, #16
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	430a      	orrs	r2, r1
 80023f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	69da      	ldr	r2, [r3, #28]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002404:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b08c      	sub	sp, #48	; 0x30
 8002422:	af00      	add	r7, sp, #0
 8002424:	60f8      	str	r0, [r7, #12]
 8002426:	60b9      	str	r1, [r7, #8]
 8002428:	607a      	str	r2, [r7, #4]
 800242a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800242c:	2301      	movs	r3, #1
 800242e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002430:	2300      	movs	r3, #0
 8002432:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800243c:	2b01      	cmp	r3, #1
 800243e:	d101      	bne.n	8002444 <HAL_SPI_TransmitReceive+0x26>
 8002440:	2302      	movs	r3, #2
 8002442:	e18a      	b.n	800275a <HAL_SPI_TransmitReceive+0x33c>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800244c:	f7fe fd6e 	bl	8000f2c <HAL_GetTick>
 8002450:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002458:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002462:	887b      	ldrh	r3, [r7, #2]
 8002464:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002466:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800246a:	2b01      	cmp	r3, #1
 800246c:	d00f      	beq.n	800248e <HAL_SPI_TransmitReceive+0x70>
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002474:	d107      	bne.n	8002486 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d103      	bne.n	8002486 <HAL_SPI_TransmitReceive+0x68>
 800247e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002482:	2b04      	cmp	r3, #4
 8002484:	d003      	beq.n	800248e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002486:	2302      	movs	r3, #2
 8002488:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800248c:	e15b      	b.n	8002746 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d005      	beq.n	80024a0 <HAL_SPI_TransmitReceive+0x82>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d002      	beq.n	80024a0 <HAL_SPI_TransmitReceive+0x82>
 800249a:	887b      	ldrh	r3, [r7, #2]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d103      	bne.n	80024a8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80024a6:	e14e      	b.n	8002746 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b04      	cmp	r3, #4
 80024b2:	d003      	beq.n	80024bc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2205      	movs	r2, #5
 80024b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	887a      	ldrh	r2, [r7, #2]
 80024cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	887a      	ldrh	r2, [r7, #2]
 80024d2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	887a      	ldrh	r2, [r7, #2]
 80024de:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	887a      	ldrh	r2, [r7, #2]
 80024e4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2200      	movs	r2, #0
 80024ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2200      	movs	r2, #0
 80024f0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024fc:	2b40      	cmp	r3, #64	; 0x40
 80024fe:	d007      	beq.n	8002510 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800250e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002518:	d178      	bne.n	800260c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d002      	beq.n	8002528 <HAL_SPI_TransmitReceive+0x10a>
 8002522:	8b7b      	ldrh	r3, [r7, #26]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d166      	bne.n	80025f6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252c:	881a      	ldrh	r2, [r3, #0]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002538:	1c9a      	adds	r2, r3, #2
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002542:	b29b      	uxth	r3, r3
 8002544:	3b01      	subs	r3, #1
 8002546:	b29a      	uxth	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800254c:	e053      	b.n	80025f6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b02      	cmp	r3, #2
 800255a:	d11b      	bne.n	8002594 <HAL_SPI_TransmitReceive+0x176>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002560:	b29b      	uxth	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d016      	beq.n	8002594 <HAL_SPI_TransmitReceive+0x176>
 8002566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002568:	2b01      	cmp	r3, #1
 800256a:	d113      	bne.n	8002594 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002570:	881a      	ldrh	r2, [r3, #0]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257c:	1c9a      	adds	r2, r3, #2
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002586:	b29b      	uxth	r3, r3
 8002588:	3b01      	subs	r3, #1
 800258a:	b29a      	uxth	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002590:	2300      	movs	r3, #0
 8002592:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d119      	bne.n	80025d6 <HAL_SPI_TransmitReceive+0x1b8>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d014      	beq.n	80025d6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68da      	ldr	r2, [r3, #12]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b6:	b292      	uxth	r2, r2
 80025b8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025be:	1c9a      	adds	r2, r3, #2
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	3b01      	subs	r3, #1
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80025d2:	2301      	movs	r3, #1
 80025d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80025d6:	f7fe fca9 	bl	8000f2c <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d807      	bhi.n	80025f6 <HAL_SPI_TransmitReceive+0x1d8>
 80025e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025ec:	d003      	beq.n	80025f6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80025f4:	e0a7      	b.n	8002746 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1a6      	bne.n	800254e <HAL_SPI_TransmitReceive+0x130>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002604:	b29b      	uxth	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1a1      	bne.n	800254e <HAL_SPI_TransmitReceive+0x130>
 800260a:	e07c      	b.n	8002706 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d002      	beq.n	800261a <HAL_SPI_TransmitReceive+0x1fc>
 8002614:	8b7b      	ldrh	r3, [r7, #26]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d16b      	bne.n	80026f2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	330c      	adds	r3, #12
 8002624:	7812      	ldrb	r2, [r2, #0]
 8002626:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262c:	1c5a      	adds	r2, r3, #1
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002636:	b29b      	uxth	r3, r3
 8002638:	3b01      	subs	r3, #1
 800263a:	b29a      	uxth	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002640:	e057      	b.n	80026f2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b02      	cmp	r3, #2
 800264e:	d11c      	bne.n	800268a <HAL_SPI_TransmitReceive+0x26c>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002654:	b29b      	uxth	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d017      	beq.n	800268a <HAL_SPI_TransmitReceive+0x26c>
 800265a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800265c:	2b01      	cmp	r3, #1
 800265e:	d114      	bne.n	800268a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	330c      	adds	r3, #12
 800266a:	7812      	ldrb	r2, [r2, #0]
 800266c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	1c5a      	adds	r2, r3, #1
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800267c:	b29b      	uxth	r3, r3
 800267e:	3b01      	subs	r3, #1
 8002680:	b29a      	uxth	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002686:	2300      	movs	r3, #0
 8002688:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b01      	cmp	r3, #1
 8002696:	d119      	bne.n	80026cc <HAL_SPI_TransmitReceive+0x2ae>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800269c:	b29b      	uxth	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d014      	beq.n	80026cc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68da      	ldr	r2, [r3, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ac:	b2d2      	uxtb	r2, r2
 80026ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b4:	1c5a      	adds	r2, r3, #1
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026be:	b29b      	uxth	r3, r3
 80026c0:	3b01      	subs	r3, #1
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80026c8:	2301      	movs	r3, #1
 80026ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80026cc:	f7fe fc2e 	bl	8000f2c <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026d8:	429a      	cmp	r2, r3
 80026da:	d803      	bhi.n	80026e4 <HAL_SPI_TransmitReceive+0x2c6>
 80026dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026e2:	d102      	bne.n	80026ea <HAL_SPI_TransmitReceive+0x2cc>
 80026e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d103      	bne.n	80026f2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80026f0:	e029      	b.n	8002746 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1a2      	bne.n	8002642 <HAL_SPI_TransmitReceive+0x224>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002700:	b29b      	uxth	r3, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d19d      	bne.n	8002642 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002708:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f000 f8b2 	bl	8002874 <SPI_EndRxTxTransaction>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d006      	beq.n	8002724 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2220      	movs	r2, #32
 8002720:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002722:	e010      	b.n	8002746 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d10b      	bne.n	8002744 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800272c:	2300      	movs	r3, #0
 800272e:	617b      	str	r3, [r7, #20]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	617b      	str	r3, [r7, #20]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	617b      	str	r3, [r7, #20]
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	e000      	b.n	8002746 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002744:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002756:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800275a:	4618      	mov	r0, r3
 800275c:	3730      	adds	r7, #48	; 0x30
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
	...

08002764 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b088      	sub	sp, #32
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	603b      	str	r3, [r7, #0]
 8002770:	4613      	mov	r3, r2
 8002772:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002774:	f7fe fbda 	bl	8000f2c <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800277c:	1a9b      	subs	r3, r3, r2
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	4413      	add	r3, r2
 8002782:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002784:	f7fe fbd2 	bl	8000f2c <HAL_GetTick>
 8002788:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800278a:	4b39      	ldr	r3, [pc, #228]	; (8002870 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	015b      	lsls	r3, r3, #5
 8002790:	0d1b      	lsrs	r3, r3, #20
 8002792:	69fa      	ldr	r2, [r7, #28]
 8002794:	fb02 f303 	mul.w	r3, r2, r3
 8002798:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800279a:	e054      	b.n	8002846 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027a2:	d050      	beq.n	8002846 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80027a4:	f7fe fbc2 	bl	8000f2c <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	69fa      	ldr	r2, [r7, #28]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d902      	bls.n	80027ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d13d      	bne.n	8002836 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	685a      	ldr	r2, [r3, #4]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80027c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027d2:	d111      	bne.n	80027f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027dc:	d004      	beq.n	80027e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027e6:	d107      	bne.n	80027f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002800:	d10f      	bne.n	8002822 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002810:	601a      	str	r2, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002820:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2201      	movs	r2, #1
 8002826:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e017      	b.n	8002866 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d101      	bne.n	8002840 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800283c:	2300      	movs	r3, #0
 800283e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	3b01      	subs	r3, #1
 8002844:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	689a      	ldr	r2, [r3, #8]
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	4013      	ands	r3, r2
 8002850:	68ba      	ldr	r2, [r7, #8]
 8002852:	429a      	cmp	r2, r3
 8002854:	bf0c      	ite	eq
 8002856:	2301      	moveq	r3, #1
 8002858:	2300      	movne	r3, #0
 800285a:	b2db      	uxtb	r3, r3
 800285c:	461a      	mov	r2, r3
 800285e:	79fb      	ldrb	r3, [r7, #7]
 8002860:	429a      	cmp	r2, r3
 8002862:	d19b      	bne.n	800279c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3720      	adds	r7, #32
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	20000004 	.word	0x20000004

08002874 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b088      	sub	sp, #32
 8002878:	af02      	add	r7, sp, #8
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002880:	4b1b      	ldr	r3, [pc, #108]	; (80028f0 <SPI_EndRxTxTransaction+0x7c>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a1b      	ldr	r2, [pc, #108]	; (80028f4 <SPI_EndRxTxTransaction+0x80>)
 8002886:	fba2 2303 	umull	r2, r3, r2, r3
 800288a:	0d5b      	lsrs	r3, r3, #21
 800288c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002890:	fb02 f303 	mul.w	r3, r2, r3
 8002894:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800289e:	d112      	bne.n	80028c6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	2200      	movs	r2, #0
 80028a8:	2180      	movs	r1, #128	; 0x80
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f7ff ff5a 	bl	8002764 <SPI_WaitFlagStateUntilTimeout>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d016      	beq.n	80028e4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ba:	f043 0220 	orr.w	r2, r3, #32
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e00f      	b.n	80028e6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00a      	beq.n	80028e2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	3b01      	subs	r3, #1
 80028d0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028dc:	2b80      	cmp	r3, #128	; 0x80
 80028de:	d0f2      	beq.n	80028c6 <SPI_EndRxTxTransaction+0x52>
 80028e0:	e000      	b.n	80028e4 <SPI_EndRxTxTransaction+0x70>
        break;
 80028e2:	bf00      	nop
  }

  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3718      	adds	r7, #24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	20000004 	.word	0x20000004
 80028f4:	165e9f81 	.word	0x165e9f81

080028f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e03f      	b.n	800298a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d106      	bne.n	8002924 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7fe f9f0 	bl	8000d04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2224      	movs	r2, #36	; 0x24
 8002928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68da      	ldr	r2, [r3, #12]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800293a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 f929 	bl	8002b94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	691a      	ldr	r2, [r3, #16]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002950:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	695a      	ldr	r2, [r3, #20]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002960:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68da      	ldr	r2, [r3, #12]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002970:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2220      	movs	r2, #32
 800297c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2220      	movs	r2, #32
 8002984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b08a      	sub	sp, #40	; 0x28
 8002996:	af02      	add	r7, sp, #8
 8002998:	60f8      	str	r0, [r7, #12]
 800299a:	60b9      	str	r1, [r7, #8]
 800299c:	603b      	str	r3, [r7, #0]
 800299e:	4613      	mov	r3, r2
 80029a0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b20      	cmp	r3, #32
 80029b0:	d17c      	bne.n	8002aac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d002      	beq.n	80029be <HAL_UART_Transmit+0x2c>
 80029b8:	88fb      	ldrh	r3, [r7, #6]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e075      	b.n	8002aae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d101      	bne.n	80029d0 <HAL_UART_Transmit+0x3e>
 80029cc:	2302      	movs	r3, #2
 80029ce:	e06e      	b.n	8002aae <HAL_UART_Transmit+0x11c>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2221      	movs	r2, #33	; 0x21
 80029e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029e6:	f7fe faa1 	bl	8000f2c <HAL_GetTick>
 80029ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	88fa      	ldrh	r2, [r7, #6]
 80029f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	88fa      	ldrh	r2, [r7, #6]
 80029f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a00:	d108      	bne.n	8002a14 <HAL_UART_Transmit+0x82>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d104      	bne.n	8002a14 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	61bb      	str	r3, [r7, #24]
 8002a12:	e003      	b.n	8002a1c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002a24:	e02a      	b.n	8002a7c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	2180      	movs	r1, #128	; 0x80
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f000 f840 	bl	8002ab6 <UART_WaitOnFlagUntilTimeout>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e036      	b.n	8002aae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10b      	bne.n	8002a5e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	881b      	ldrh	r3, [r3, #0]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	3302      	adds	r3, #2
 8002a5a:	61bb      	str	r3, [r7, #24]
 8002a5c:	e007      	b.n	8002a6e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	781a      	ldrb	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	3b01      	subs	r3, #1
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1cf      	bne.n	8002a26 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	9300      	str	r3, [sp, #0]
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	2140      	movs	r1, #64	; 0x40
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f000 f810 	bl	8002ab6 <UART_WaitOnFlagUntilTimeout>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e006      	b.n	8002aae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	e000      	b.n	8002aae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002aac:	2302      	movs	r3, #2
  }
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3720      	adds	r7, #32
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b090      	sub	sp, #64	; 0x40
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	60f8      	str	r0, [r7, #12]
 8002abe:	60b9      	str	r1, [r7, #8]
 8002ac0:	603b      	str	r3, [r7, #0]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ac6:	e050      	b.n	8002b6a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ac8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002aca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ace:	d04c      	beq.n	8002b6a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ad0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d007      	beq.n	8002ae6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ad6:	f7fe fa29 	bl	8000f2c <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d241      	bcs.n	8002b6a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	330c      	adds	r3, #12
 8002aec:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af0:	e853 3f00 	ldrex	r3, [r3]
 8002af4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002afc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	330c      	adds	r3, #12
 8002b04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b06:	637a      	str	r2, [r7, #52]	; 0x34
 8002b08:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b0e:	e841 2300 	strex	r3, r2, [r1]
 8002b12:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1e5      	bne.n	8002ae6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	3314      	adds	r3, #20
 8002b20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	e853 3f00 	ldrex	r3, [r3]
 8002b28:	613b      	str	r3, [r7, #16]
   return(result);
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	f023 0301 	bic.w	r3, r3, #1
 8002b30:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	3314      	adds	r3, #20
 8002b38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b3a:	623a      	str	r2, [r7, #32]
 8002b3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b3e:	69f9      	ldr	r1, [r7, #28]
 8002b40:	6a3a      	ldr	r2, [r7, #32]
 8002b42:	e841 2300 	strex	r3, r2, [r1]
 8002b46:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1e5      	bne.n	8002b1a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2220      	movs	r2, #32
 8002b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2220      	movs	r2, #32
 8002b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e00f      	b.n	8002b8a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	4013      	ands	r3, r2
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	bf0c      	ite	eq
 8002b7a:	2301      	moveq	r3, #1
 8002b7c:	2300      	movne	r3, #0
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	461a      	mov	r2, r3
 8002b82:	79fb      	ldrb	r3, [r7, #7]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d09f      	beq.n	8002ac8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3740      	adds	r7, #64	; 0x40
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
	...

08002b94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b98:	b0c0      	sub	sp, #256	; 0x100
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bb0:	68d9      	ldr	r1, [r3, #12]
 8002bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	ea40 0301 	orr.w	r3, r0, r1
 8002bbc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bd8:	69db      	ldr	r3, [r3, #28]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002bec:	f021 010c 	bic.w	r1, r1, #12
 8002bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002bfa:	430b      	orrs	r3, r1
 8002bfc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c0e:	6999      	ldr	r1, [r3, #24]
 8002c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	ea40 0301 	orr.w	r3, r0, r1
 8002c1a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	4b8f      	ldr	r3, [pc, #572]	; (8002e60 <UART_SetConfig+0x2cc>)
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d005      	beq.n	8002c34 <UART_SetConfig+0xa0>
 8002c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	4b8d      	ldr	r3, [pc, #564]	; (8002e64 <UART_SetConfig+0x2d0>)
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d104      	bne.n	8002c3e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c34:	f7fe fe88 	bl	8001948 <HAL_RCC_GetPCLK2Freq>
 8002c38:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002c3c:	e003      	b.n	8002c46 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c3e:	f7fe fe6f 	bl	8001920 <HAL_RCC_GetPCLK1Freq>
 8002c42:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c4a:	69db      	ldr	r3, [r3, #28]
 8002c4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c50:	f040 810c 	bne.w	8002e6c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002c5e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002c62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002c66:	4622      	mov	r2, r4
 8002c68:	462b      	mov	r3, r5
 8002c6a:	1891      	adds	r1, r2, r2
 8002c6c:	65b9      	str	r1, [r7, #88]	; 0x58
 8002c6e:	415b      	adcs	r3, r3
 8002c70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002c76:	4621      	mov	r1, r4
 8002c78:	eb12 0801 	adds.w	r8, r2, r1
 8002c7c:	4629      	mov	r1, r5
 8002c7e:	eb43 0901 	adc.w	r9, r3, r1
 8002c82:	f04f 0200 	mov.w	r2, #0
 8002c86:	f04f 0300 	mov.w	r3, #0
 8002c8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c96:	4690      	mov	r8, r2
 8002c98:	4699      	mov	r9, r3
 8002c9a:	4623      	mov	r3, r4
 8002c9c:	eb18 0303 	adds.w	r3, r8, r3
 8002ca0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002ca4:	462b      	mov	r3, r5
 8002ca6:	eb49 0303 	adc.w	r3, r9, r3
 8002caa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002cba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002cbe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	18db      	adds	r3, r3, r3
 8002cc6:	653b      	str	r3, [r7, #80]	; 0x50
 8002cc8:	4613      	mov	r3, r2
 8002cca:	eb42 0303 	adc.w	r3, r2, r3
 8002cce:	657b      	str	r3, [r7, #84]	; 0x54
 8002cd0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002cd4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002cd8:	f7fd fa94 	bl	8000204 <__aeabi_uldivmod>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	460b      	mov	r3, r1
 8002ce0:	4b61      	ldr	r3, [pc, #388]	; (8002e68 <UART_SetConfig+0x2d4>)
 8002ce2:	fba3 2302 	umull	r2, r3, r3, r2
 8002ce6:	095b      	lsrs	r3, r3, #5
 8002ce8:	011c      	lsls	r4, r3, #4
 8002cea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002cf4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002cf8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002cfc:	4642      	mov	r2, r8
 8002cfe:	464b      	mov	r3, r9
 8002d00:	1891      	adds	r1, r2, r2
 8002d02:	64b9      	str	r1, [r7, #72]	; 0x48
 8002d04:	415b      	adcs	r3, r3
 8002d06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d08:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002d0c:	4641      	mov	r1, r8
 8002d0e:	eb12 0a01 	adds.w	sl, r2, r1
 8002d12:	4649      	mov	r1, r9
 8002d14:	eb43 0b01 	adc.w	fp, r3, r1
 8002d18:	f04f 0200 	mov.w	r2, #0
 8002d1c:	f04f 0300 	mov.w	r3, #0
 8002d20:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d24:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d2c:	4692      	mov	sl, r2
 8002d2e:	469b      	mov	fp, r3
 8002d30:	4643      	mov	r3, r8
 8002d32:	eb1a 0303 	adds.w	r3, sl, r3
 8002d36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d3a:	464b      	mov	r3, r9
 8002d3c:	eb4b 0303 	adc.w	r3, fp, r3
 8002d40:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d50:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002d54:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002d58:	460b      	mov	r3, r1
 8002d5a:	18db      	adds	r3, r3, r3
 8002d5c:	643b      	str	r3, [r7, #64]	; 0x40
 8002d5e:	4613      	mov	r3, r2
 8002d60:	eb42 0303 	adc.w	r3, r2, r3
 8002d64:	647b      	str	r3, [r7, #68]	; 0x44
 8002d66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002d6a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002d6e:	f7fd fa49 	bl	8000204 <__aeabi_uldivmod>
 8002d72:	4602      	mov	r2, r0
 8002d74:	460b      	mov	r3, r1
 8002d76:	4611      	mov	r1, r2
 8002d78:	4b3b      	ldr	r3, [pc, #236]	; (8002e68 <UART_SetConfig+0x2d4>)
 8002d7a:	fba3 2301 	umull	r2, r3, r3, r1
 8002d7e:	095b      	lsrs	r3, r3, #5
 8002d80:	2264      	movs	r2, #100	; 0x64
 8002d82:	fb02 f303 	mul.w	r3, r2, r3
 8002d86:	1acb      	subs	r3, r1, r3
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002d8e:	4b36      	ldr	r3, [pc, #216]	; (8002e68 <UART_SetConfig+0x2d4>)
 8002d90:	fba3 2302 	umull	r2, r3, r3, r2
 8002d94:	095b      	lsrs	r3, r3, #5
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d9c:	441c      	add	r4, r3
 8002d9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002da2:	2200      	movs	r2, #0
 8002da4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002da8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002dac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002db0:	4642      	mov	r2, r8
 8002db2:	464b      	mov	r3, r9
 8002db4:	1891      	adds	r1, r2, r2
 8002db6:	63b9      	str	r1, [r7, #56]	; 0x38
 8002db8:	415b      	adcs	r3, r3
 8002dba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dbc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002dc0:	4641      	mov	r1, r8
 8002dc2:	1851      	adds	r1, r2, r1
 8002dc4:	6339      	str	r1, [r7, #48]	; 0x30
 8002dc6:	4649      	mov	r1, r9
 8002dc8:	414b      	adcs	r3, r1
 8002dca:	637b      	str	r3, [r7, #52]	; 0x34
 8002dcc:	f04f 0200 	mov.w	r2, #0
 8002dd0:	f04f 0300 	mov.w	r3, #0
 8002dd4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002dd8:	4659      	mov	r1, fp
 8002dda:	00cb      	lsls	r3, r1, #3
 8002ddc:	4651      	mov	r1, sl
 8002dde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002de2:	4651      	mov	r1, sl
 8002de4:	00ca      	lsls	r2, r1, #3
 8002de6:	4610      	mov	r0, r2
 8002de8:	4619      	mov	r1, r3
 8002dea:	4603      	mov	r3, r0
 8002dec:	4642      	mov	r2, r8
 8002dee:	189b      	adds	r3, r3, r2
 8002df0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002df4:	464b      	mov	r3, r9
 8002df6:	460a      	mov	r2, r1
 8002df8:	eb42 0303 	adc.w	r3, r2, r3
 8002dfc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002e0c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002e10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002e14:	460b      	mov	r3, r1
 8002e16:	18db      	adds	r3, r3, r3
 8002e18:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	eb42 0303 	adc.w	r3, r2, r3
 8002e20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e26:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002e2a:	f7fd f9eb 	bl	8000204 <__aeabi_uldivmod>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	460b      	mov	r3, r1
 8002e32:	4b0d      	ldr	r3, [pc, #52]	; (8002e68 <UART_SetConfig+0x2d4>)
 8002e34:	fba3 1302 	umull	r1, r3, r3, r2
 8002e38:	095b      	lsrs	r3, r3, #5
 8002e3a:	2164      	movs	r1, #100	; 0x64
 8002e3c:	fb01 f303 	mul.w	r3, r1, r3
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	3332      	adds	r3, #50	; 0x32
 8002e46:	4a08      	ldr	r2, [pc, #32]	; (8002e68 <UART_SetConfig+0x2d4>)
 8002e48:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4c:	095b      	lsrs	r3, r3, #5
 8002e4e:	f003 0207 	and.w	r2, r3, #7
 8002e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4422      	add	r2, r4
 8002e5a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e5c:	e105      	b.n	800306a <UART_SetConfig+0x4d6>
 8002e5e:	bf00      	nop
 8002e60:	40011000 	.word	0x40011000
 8002e64:	40011400 	.word	0x40011400
 8002e68:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e70:	2200      	movs	r2, #0
 8002e72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002e76:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002e7a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002e7e:	4642      	mov	r2, r8
 8002e80:	464b      	mov	r3, r9
 8002e82:	1891      	adds	r1, r2, r2
 8002e84:	6239      	str	r1, [r7, #32]
 8002e86:	415b      	adcs	r3, r3
 8002e88:	627b      	str	r3, [r7, #36]	; 0x24
 8002e8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e8e:	4641      	mov	r1, r8
 8002e90:	1854      	adds	r4, r2, r1
 8002e92:	4649      	mov	r1, r9
 8002e94:	eb43 0501 	adc.w	r5, r3, r1
 8002e98:	f04f 0200 	mov.w	r2, #0
 8002e9c:	f04f 0300 	mov.w	r3, #0
 8002ea0:	00eb      	lsls	r3, r5, #3
 8002ea2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ea6:	00e2      	lsls	r2, r4, #3
 8002ea8:	4614      	mov	r4, r2
 8002eaa:	461d      	mov	r5, r3
 8002eac:	4643      	mov	r3, r8
 8002eae:	18e3      	adds	r3, r4, r3
 8002eb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002eb4:	464b      	mov	r3, r9
 8002eb6:	eb45 0303 	adc.w	r3, r5, r3
 8002eba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002eca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002ece:	f04f 0200 	mov.w	r2, #0
 8002ed2:	f04f 0300 	mov.w	r3, #0
 8002ed6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002eda:	4629      	mov	r1, r5
 8002edc:	008b      	lsls	r3, r1, #2
 8002ede:	4621      	mov	r1, r4
 8002ee0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ee4:	4621      	mov	r1, r4
 8002ee6:	008a      	lsls	r2, r1, #2
 8002ee8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002eec:	f7fd f98a 	bl	8000204 <__aeabi_uldivmod>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	4b60      	ldr	r3, [pc, #384]	; (8003078 <UART_SetConfig+0x4e4>)
 8002ef6:	fba3 2302 	umull	r2, r3, r3, r2
 8002efa:	095b      	lsrs	r3, r3, #5
 8002efc:	011c      	lsls	r4, r3, #4
 8002efe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f02:	2200      	movs	r2, #0
 8002f04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f08:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002f0c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002f10:	4642      	mov	r2, r8
 8002f12:	464b      	mov	r3, r9
 8002f14:	1891      	adds	r1, r2, r2
 8002f16:	61b9      	str	r1, [r7, #24]
 8002f18:	415b      	adcs	r3, r3
 8002f1a:	61fb      	str	r3, [r7, #28]
 8002f1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f20:	4641      	mov	r1, r8
 8002f22:	1851      	adds	r1, r2, r1
 8002f24:	6139      	str	r1, [r7, #16]
 8002f26:	4649      	mov	r1, r9
 8002f28:	414b      	adcs	r3, r1
 8002f2a:	617b      	str	r3, [r7, #20]
 8002f2c:	f04f 0200 	mov.w	r2, #0
 8002f30:	f04f 0300 	mov.w	r3, #0
 8002f34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f38:	4659      	mov	r1, fp
 8002f3a:	00cb      	lsls	r3, r1, #3
 8002f3c:	4651      	mov	r1, sl
 8002f3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f42:	4651      	mov	r1, sl
 8002f44:	00ca      	lsls	r2, r1, #3
 8002f46:	4610      	mov	r0, r2
 8002f48:	4619      	mov	r1, r3
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	4642      	mov	r2, r8
 8002f4e:	189b      	adds	r3, r3, r2
 8002f50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f54:	464b      	mov	r3, r9
 8002f56:	460a      	mov	r2, r1
 8002f58:	eb42 0303 	adc.w	r3, r2, r3
 8002f5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f6a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002f6c:	f04f 0200 	mov.w	r2, #0
 8002f70:	f04f 0300 	mov.w	r3, #0
 8002f74:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002f78:	4649      	mov	r1, r9
 8002f7a:	008b      	lsls	r3, r1, #2
 8002f7c:	4641      	mov	r1, r8
 8002f7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f82:	4641      	mov	r1, r8
 8002f84:	008a      	lsls	r2, r1, #2
 8002f86:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002f8a:	f7fd f93b 	bl	8000204 <__aeabi_uldivmod>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	460b      	mov	r3, r1
 8002f92:	4b39      	ldr	r3, [pc, #228]	; (8003078 <UART_SetConfig+0x4e4>)
 8002f94:	fba3 1302 	umull	r1, r3, r3, r2
 8002f98:	095b      	lsrs	r3, r3, #5
 8002f9a:	2164      	movs	r1, #100	; 0x64
 8002f9c:	fb01 f303 	mul.w	r3, r1, r3
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	011b      	lsls	r3, r3, #4
 8002fa4:	3332      	adds	r3, #50	; 0x32
 8002fa6:	4a34      	ldr	r2, [pc, #208]	; (8003078 <UART_SetConfig+0x4e4>)
 8002fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fac:	095b      	lsrs	r3, r3, #5
 8002fae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fb2:	441c      	add	r4, r3
 8002fb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fb8:	2200      	movs	r2, #0
 8002fba:	673b      	str	r3, [r7, #112]	; 0x70
 8002fbc:	677a      	str	r2, [r7, #116]	; 0x74
 8002fbe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002fc2:	4642      	mov	r2, r8
 8002fc4:	464b      	mov	r3, r9
 8002fc6:	1891      	adds	r1, r2, r2
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	415b      	adcs	r3, r3
 8002fcc:	60fb      	str	r3, [r7, #12]
 8002fce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fd2:	4641      	mov	r1, r8
 8002fd4:	1851      	adds	r1, r2, r1
 8002fd6:	6039      	str	r1, [r7, #0]
 8002fd8:	4649      	mov	r1, r9
 8002fda:	414b      	adcs	r3, r1
 8002fdc:	607b      	str	r3, [r7, #4]
 8002fde:	f04f 0200 	mov.w	r2, #0
 8002fe2:	f04f 0300 	mov.w	r3, #0
 8002fe6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002fea:	4659      	mov	r1, fp
 8002fec:	00cb      	lsls	r3, r1, #3
 8002fee:	4651      	mov	r1, sl
 8002ff0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ff4:	4651      	mov	r1, sl
 8002ff6:	00ca      	lsls	r2, r1, #3
 8002ff8:	4610      	mov	r0, r2
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	4642      	mov	r2, r8
 8003000:	189b      	adds	r3, r3, r2
 8003002:	66bb      	str	r3, [r7, #104]	; 0x68
 8003004:	464b      	mov	r3, r9
 8003006:	460a      	mov	r2, r1
 8003008:	eb42 0303 	adc.w	r3, r2, r3
 800300c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800300e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	663b      	str	r3, [r7, #96]	; 0x60
 8003018:	667a      	str	r2, [r7, #100]	; 0x64
 800301a:	f04f 0200 	mov.w	r2, #0
 800301e:	f04f 0300 	mov.w	r3, #0
 8003022:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003026:	4649      	mov	r1, r9
 8003028:	008b      	lsls	r3, r1, #2
 800302a:	4641      	mov	r1, r8
 800302c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003030:	4641      	mov	r1, r8
 8003032:	008a      	lsls	r2, r1, #2
 8003034:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003038:	f7fd f8e4 	bl	8000204 <__aeabi_uldivmod>
 800303c:	4602      	mov	r2, r0
 800303e:	460b      	mov	r3, r1
 8003040:	4b0d      	ldr	r3, [pc, #52]	; (8003078 <UART_SetConfig+0x4e4>)
 8003042:	fba3 1302 	umull	r1, r3, r3, r2
 8003046:	095b      	lsrs	r3, r3, #5
 8003048:	2164      	movs	r1, #100	; 0x64
 800304a:	fb01 f303 	mul.w	r3, r1, r3
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	011b      	lsls	r3, r3, #4
 8003052:	3332      	adds	r3, #50	; 0x32
 8003054:	4a08      	ldr	r2, [pc, #32]	; (8003078 <UART_SetConfig+0x4e4>)
 8003056:	fba2 2303 	umull	r2, r3, r2, r3
 800305a:	095b      	lsrs	r3, r3, #5
 800305c:	f003 020f 	and.w	r2, r3, #15
 8003060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4422      	add	r2, r4
 8003068:	609a      	str	r2, [r3, #8]
}
 800306a:	bf00      	nop
 800306c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003070:	46bd      	mov	sp, r7
 8003072:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003076:	bf00      	nop
 8003078:	51eb851f 	.word	0x51eb851f

0800307c <__libc_init_array>:
 800307c:	b570      	push	{r4, r5, r6, lr}
 800307e:	4d0d      	ldr	r5, [pc, #52]	; (80030b4 <__libc_init_array+0x38>)
 8003080:	4c0d      	ldr	r4, [pc, #52]	; (80030b8 <__libc_init_array+0x3c>)
 8003082:	1b64      	subs	r4, r4, r5
 8003084:	10a4      	asrs	r4, r4, #2
 8003086:	2600      	movs	r6, #0
 8003088:	42a6      	cmp	r6, r4
 800308a:	d109      	bne.n	80030a0 <__libc_init_array+0x24>
 800308c:	4d0b      	ldr	r5, [pc, #44]	; (80030bc <__libc_init_array+0x40>)
 800308e:	4c0c      	ldr	r4, [pc, #48]	; (80030c0 <__libc_init_array+0x44>)
 8003090:	f000 f820 	bl	80030d4 <_init>
 8003094:	1b64      	subs	r4, r4, r5
 8003096:	10a4      	asrs	r4, r4, #2
 8003098:	2600      	movs	r6, #0
 800309a:	42a6      	cmp	r6, r4
 800309c:	d105      	bne.n	80030aa <__libc_init_array+0x2e>
 800309e:	bd70      	pop	{r4, r5, r6, pc}
 80030a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80030a4:	4798      	blx	r3
 80030a6:	3601      	adds	r6, #1
 80030a8:	e7ee      	b.n	8003088 <__libc_init_array+0xc>
 80030aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80030ae:	4798      	blx	r3
 80030b0:	3601      	adds	r6, #1
 80030b2:	e7f2      	b.n	800309a <__libc_init_array+0x1e>
 80030b4:	0800310c 	.word	0x0800310c
 80030b8:	0800310c 	.word	0x0800310c
 80030bc:	0800310c 	.word	0x0800310c
 80030c0:	08003110 	.word	0x08003110

080030c4 <memset>:
 80030c4:	4402      	add	r2, r0
 80030c6:	4603      	mov	r3, r0
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d100      	bne.n	80030ce <memset+0xa>
 80030cc:	4770      	bx	lr
 80030ce:	f803 1b01 	strb.w	r1, [r3], #1
 80030d2:	e7f9      	b.n	80030c8 <memset+0x4>

080030d4 <_init>:
 80030d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030d6:	bf00      	nop
 80030d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030da:	bc08      	pop	{r3}
 80030dc:	469e      	mov	lr, r3
 80030de:	4770      	bx	lr

080030e0 <_fini>:
 80030e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030e2:	bf00      	nop
 80030e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030e6:	bc08      	pop	{r3}
 80030e8:	469e      	mov	lr, r3
 80030ea:	4770      	bx	lr
