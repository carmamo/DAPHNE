
S7-MARTINEZMORA-CARLOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012be0  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001338  08012ca0  08012ca0  00022ca0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013fd8  08013fd8  0003026c  2**0
                  CONTENTS
  4 .ARM          00000000  08013fd8  08013fd8  0003026c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08013fd8  08013fd8  0003026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013fd8  08013fd8  00023fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013fdc  08013fdc  00023fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000026c  20000000  08013fe0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f54  2000026c  0801424c  0003026c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200021c0  0801424c  000321c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0003026c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005c915  00000000  00000000  00030294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005993  00000000  00000000  0008cba9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003d60  00000000  00000000  00092540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003ab8  00000000  00000000  000962a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006e23  00000000  00000000  00099d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002bcb8  00000000  00000000  000a0b7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090123  00000000  00000000  000cc833  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015c956  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000fd54  00000000  00000000  0015c9a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000026c 	.word	0x2000026c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08012c88 	.word	0x08012c88

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000270 	.word	0x20000270
 8000104:	08012c88 	.word	0x08012c88

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fb7f 	bl	8001b40 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 facf 	bl	80019f0 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fb71 	bl	8001b40 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fb67 	bl	8001b40 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 faf7 	bl	8001a74 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 faed 	bl	8001a74 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_f2uiz>:
 80004a8:	219e      	movs	r1, #158	; 0x9e
 80004aa:	b510      	push	{r4, lr}
 80004ac:	05c9      	lsls	r1, r1, #23
 80004ae:	1c04      	adds	r4, r0, #0
 80004b0:	f002 fb52 	bl	8002b58 <__aeabi_fcmpge>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d103      	bne.n	80004c0 <__aeabi_f2uiz+0x18>
 80004b8:	1c20      	adds	r0, r4, #0
 80004ba:	f000 fbf9 	bl	8000cb0 <__aeabi_f2iz>
 80004be:	bd10      	pop	{r4, pc}
 80004c0:	219e      	movs	r1, #158	; 0x9e
 80004c2:	1c20      	adds	r0, r4, #0
 80004c4:	05c9      	lsls	r1, r1, #23
 80004c6:	f000 fa45 	bl	8000954 <__aeabi_fsub>
 80004ca:	f000 fbf1 	bl	8000cb0 <__aeabi_f2iz>
 80004ce:	2380      	movs	r3, #128	; 0x80
 80004d0:	061b      	lsls	r3, r3, #24
 80004d2:	469c      	mov	ip, r3
 80004d4:	4460      	add	r0, ip
 80004d6:	e7f2      	b.n	80004be <__aeabi_f2uiz+0x16>

080004d8 <__aeabi_fdiv>:
 80004d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004da:	464f      	mov	r7, r9
 80004dc:	4646      	mov	r6, r8
 80004de:	46d6      	mov	lr, sl
 80004e0:	0245      	lsls	r5, r0, #9
 80004e2:	b5c0      	push	{r6, r7, lr}
 80004e4:	0047      	lsls	r7, r0, #1
 80004e6:	1c0c      	adds	r4, r1, #0
 80004e8:	0a6d      	lsrs	r5, r5, #9
 80004ea:	0e3f      	lsrs	r7, r7, #24
 80004ec:	0fc6      	lsrs	r6, r0, #31
 80004ee:	2f00      	cmp	r7, #0
 80004f0:	d100      	bne.n	80004f4 <__aeabi_fdiv+0x1c>
 80004f2:	e070      	b.n	80005d6 <__aeabi_fdiv+0xfe>
 80004f4:	2fff      	cmp	r7, #255	; 0xff
 80004f6:	d100      	bne.n	80004fa <__aeabi_fdiv+0x22>
 80004f8:	e075      	b.n	80005e6 <__aeabi_fdiv+0x10e>
 80004fa:	00eb      	lsls	r3, r5, #3
 80004fc:	2580      	movs	r5, #128	; 0x80
 80004fe:	04ed      	lsls	r5, r5, #19
 8000500:	431d      	orrs	r5, r3
 8000502:	2300      	movs	r3, #0
 8000504:	4699      	mov	r9, r3
 8000506:	469a      	mov	sl, r3
 8000508:	3f7f      	subs	r7, #127	; 0x7f
 800050a:	0260      	lsls	r0, r4, #9
 800050c:	0a43      	lsrs	r3, r0, #9
 800050e:	4698      	mov	r8, r3
 8000510:	0063      	lsls	r3, r4, #1
 8000512:	0e1b      	lsrs	r3, r3, #24
 8000514:	0fe4      	lsrs	r4, r4, #31
 8000516:	2b00      	cmp	r3, #0
 8000518:	d04e      	beq.n	80005b8 <__aeabi_fdiv+0xe0>
 800051a:	2bff      	cmp	r3, #255	; 0xff
 800051c:	d046      	beq.n	80005ac <__aeabi_fdiv+0xd4>
 800051e:	4642      	mov	r2, r8
 8000520:	00d0      	lsls	r0, r2, #3
 8000522:	2280      	movs	r2, #128	; 0x80
 8000524:	04d2      	lsls	r2, r2, #19
 8000526:	4302      	orrs	r2, r0
 8000528:	4690      	mov	r8, r2
 800052a:	2200      	movs	r2, #0
 800052c:	3b7f      	subs	r3, #127	; 0x7f
 800052e:	0031      	movs	r1, r6
 8000530:	1aff      	subs	r7, r7, r3
 8000532:	464b      	mov	r3, r9
 8000534:	4061      	eors	r1, r4
 8000536:	b2c9      	uxtb	r1, r1
 8000538:	4313      	orrs	r3, r2
 800053a:	2b0f      	cmp	r3, #15
 800053c:	d900      	bls.n	8000540 <__aeabi_fdiv+0x68>
 800053e:	e0b5      	b.n	80006ac <__aeabi_fdiv+0x1d4>
 8000540:	486e      	ldr	r0, [pc, #440]	; (80006fc <__aeabi_fdiv+0x224>)
 8000542:	009b      	lsls	r3, r3, #2
 8000544:	58c3      	ldr	r3, [r0, r3]
 8000546:	469f      	mov	pc, r3
 8000548:	2300      	movs	r3, #0
 800054a:	4698      	mov	r8, r3
 800054c:	0026      	movs	r6, r4
 800054e:	4645      	mov	r5, r8
 8000550:	4692      	mov	sl, r2
 8000552:	4653      	mov	r3, sl
 8000554:	2b02      	cmp	r3, #2
 8000556:	d100      	bne.n	800055a <__aeabi_fdiv+0x82>
 8000558:	e089      	b.n	800066e <__aeabi_fdiv+0x196>
 800055a:	2b03      	cmp	r3, #3
 800055c:	d100      	bne.n	8000560 <__aeabi_fdiv+0x88>
 800055e:	e09e      	b.n	800069e <__aeabi_fdiv+0x1c6>
 8000560:	2b01      	cmp	r3, #1
 8000562:	d018      	beq.n	8000596 <__aeabi_fdiv+0xbe>
 8000564:	003b      	movs	r3, r7
 8000566:	337f      	adds	r3, #127	; 0x7f
 8000568:	2b00      	cmp	r3, #0
 800056a:	dd69      	ble.n	8000640 <__aeabi_fdiv+0x168>
 800056c:	076a      	lsls	r2, r5, #29
 800056e:	d004      	beq.n	800057a <__aeabi_fdiv+0xa2>
 8000570:	220f      	movs	r2, #15
 8000572:	402a      	ands	r2, r5
 8000574:	2a04      	cmp	r2, #4
 8000576:	d000      	beq.n	800057a <__aeabi_fdiv+0xa2>
 8000578:	3504      	adds	r5, #4
 800057a:	012a      	lsls	r2, r5, #4
 800057c:	d503      	bpl.n	8000586 <__aeabi_fdiv+0xae>
 800057e:	4b60      	ldr	r3, [pc, #384]	; (8000700 <__aeabi_fdiv+0x228>)
 8000580:	401d      	ands	r5, r3
 8000582:	003b      	movs	r3, r7
 8000584:	3380      	adds	r3, #128	; 0x80
 8000586:	2bfe      	cmp	r3, #254	; 0xfe
 8000588:	dd00      	ble.n	800058c <__aeabi_fdiv+0xb4>
 800058a:	e070      	b.n	800066e <__aeabi_fdiv+0x196>
 800058c:	01ad      	lsls	r5, r5, #6
 800058e:	0a6d      	lsrs	r5, r5, #9
 8000590:	b2d8      	uxtb	r0, r3
 8000592:	e002      	b.n	800059a <__aeabi_fdiv+0xc2>
 8000594:	000e      	movs	r6, r1
 8000596:	2000      	movs	r0, #0
 8000598:	2500      	movs	r5, #0
 800059a:	05c0      	lsls	r0, r0, #23
 800059c:	4328      	orrs	r0, r5
 800059e:	07f6      	lsls	r6, r6, #31
 80005a0:	4330      	orrs	r0, r6
 80005a2:	bce0      	pop	{r5, r6, r7}
 80005a4:	46ba      	mov	sl, r7
 80005a6:	46b1      	mov	r9, r6
 80005a8:	46a8      	mov	r8, r5
 80005aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005ac:	4643      	mov	r3, r8
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d13f      	bne.n	8000632 <__aeabi_fdiv+0x15a>
 80005b2:	2202      	movs	r2, #2
 80005b4:	3fff      	subs	r7, #255	; 0xff
 80005b6:	e003      	b.n	80005c0 <__aeabi_fdiv+0xe8>
 80005b8:	4643      	mov	r3, r8
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d12d      	bne.n	800061a <__aeabi_fdiv+0x142>
 80005be:	2201      	movs	r2, #1
 80005c0:	0031      	movs	r1, r6
 80005c2:	464b      	mov	r3, r9
 80005c4:	4061      	eors	r1, r4
 80005c6:	b2c9      	uxtb	r1, r1
 80005c8:	4313      	orrs	r3, r2
 80005ca:	2b0f      	cmp	r3, #15
 80005cc:	d834      	bhi.n	8000638 <__aeabi_fdiv+0x160>
 80005ce:	484d      	ldr	r0, [pc, #308]	; (8000704 <__aeabi_fdiv+0x22c>)
 80005d0:	009b      	lsls	r3, r3, #2
 80005d2:	58c3      	ldr	r3, [r0, r3]
 80005d4:	469f      	mov	pc, r3
 80005d6:	2d00      	cmp	r5, #0
 80005d8:	d113      	bne.n	8000602 <__aeabi_fdiv+0x12a>
 80005da:	2304      	movs	r3, #4
 80005dc:	4699      	mov	r9, r3
 80005de:	3b03      	subs	r3, #3
 80005e0:	2700      	movs	r7, #0
 80005e2:	469a      	mov	sl, r3
 80005e4:	e791      	b.n	800050a <__aeabi_fdiv+0x32>
 80005e6:	2d00      	cmp	r5, #0
 80005e8:	d105      	bne.n	80005f6 <__aeabi_fdiv+0x11e>
 80005ea:	2308      	movs	r3, #8
 80005ec:	4699      	mov	r9, r3
 80005ee:	3b06      	subs	r3, #6
 80005f0:	27ff      	movs	r7, #255	; 0xff
 80005f2:	469a      	mov	sl, r3
 80005f4:	e789      	b.n	800050a <__aeabi_fdiv+0x32>
 80005f6:	230c      	movs	r3, #12
 80005f8:	4699      	mov	r9, r3
 80005fa:	3b09      	subs	r3, #9
 80005fc:	27ff      	movs	r7, #255	; 0xff
 80005fe:	469a      	mov	sl, r3
 8000600:	e783      	b.n	800050a <__aeabi_fdiv+0x32>
 8000602:	0028      	movs	r0, r5
 8000604:	f002 fab2 	bl	8002b6c <__clzsi2>
 8000608:	2776      	movs	r7, #118	; 0x76
 800060a:	1f43      	subs	r3, r0, #5
 800060c:	409d      	lsls	r5, r3
 800060e:	2300      	movs	r3, #0
 8000610:	427f      	negs	r7, r7
 8000612:	4699      	mov	r9, r3
 8000614:	469a      	mov	sl, r3
 8000616:	1a3f      	subs	r7, r7, r0
 8000618:	e777      	b.n	800050a <__aeabi_fdiv+0x32>
 800061a:	4640      	mov	r0, r8
 800061c:	f002 faa6 	bl	8002b6c <__clzsi2>
 8000620:	4642      	mov	r2, r8
 8000622:	1f43      	subs	r3, r0, #5
 8000624:	409a      	lsls	r2, r3
 8000626:	2376      	movs	r3, #118	; 0x76
 8000628:	425b      	negs	r3, r3
 800062a:	4690      	mov	r8, r2
 800062c:	1a1b      	subs	r3, r3, r0
 800062e:	2200      	movs	r2, #0
 8000630:	e77d      	b.n	800052e <__aeabi_fdiv+0x56>
 8000632:	23ff      	movs	r3, #255	; 0xff
 8000634:	2203      	movs	r2, #3
 8000636:	e77a      	b.n	800052e <__aeabi_fdiv+0x56>
 8000638:	000e      	movs	r6, r1
 800063a:	20ff      	movs	r0, #255	; 0xff
 800063c:	2500      	movs	r5, #0
 800063e:	e7ac      	b.n	800059a <__aeabi_fdiv+0xc2>
 8000640:	2001      	movs	r0, #1
 8000642:	1ac0      	subs	r0, r0, r3
 8000644:	281b      	cmp	r0, #27
 8000646:	dca6      	bgt.n	8000596 <__aeabi_fdiv+0xbe>
 8000648:	379e      	adds	r7, #158	; 0x9e
 800064a:	002a      	movs	r2, r5
 800064c:	40bd      	lsls	r5, r7
 800064e:	40c2      	lsrs	r2, r0
 8000650:	1e6b      	subs	r3, r5, #1
 8000652:	419d      	sbcs	r5, r3
 8000654:	4315      	orrs	r5, r2
 8000656:	076b      	lsls	r3, r5, #29
 8000658:	d004      	beq.n	8000664 <__aeabi_fdiv+0x18c>
 800065a:	230f      	movs	r3, #15
 800065c:	402b      	ands	r3, r5
 800065e:	2b04      	cmp	r3, #4
 8000660:	d000      	beq.n	8000664 <__aeabi_fdiv+0x18c>
 8000662:	3504      	adds	r5, #4
 8000664:	016b      	lsls	r3, r5, #5
 8000666:	d544      	bpl.n	80006f2 <__aeabi_fdiv+0x21a>
 8000668:	2001      	movs	r0, #1
 800066a:	2500      	movs	r5, #0
 800066c:	e795      	b.n	800059a <__aeabi_fdiv+0xc2>
 800066e:	20ff      	movs	r0, #255	; 0xff
 8000670:	2500      	movs	r5, #0
 8000672:	e792      	b.n	800059a <__aeabi_fdiv+0xc2>
 8000674:	2580      	movs	r5, #128	; 0x80
 8000676:	2600      	movs	r6, #0
 8000678:	20ff      	movs	r0, #255	; 0xff
 800067a:	03ed      	lsls	r5, r5, #15
 800067c:	e78d      	b.n	800059a <__aeabi_fdiv+0xc2>
 800067e:	2300      	movs	r3, #0
 8000680:	4698      	mov	r8, r3
 8000682:	2080      	movs	r0, #128	; 0x80
 8000684:	03c0      	lsls	r0, r0, #15
 8000686:	4205      	tst	r5, r0
 8000688:	d009      	beq.n	800069e <__aeabi_fdiv+0x1c6>
 800068a:	4643      	mov	r3, r8
 800068c:	4203      	tst	r3, r0
 800068e:	d106      	bne.n	800069e <__aeabi_fdiv+0x1c6>
 8000690:	4645      	mov	r5, r8
 8000692:	4305      	orrs	r5, r0
 8000694:	026d      	lsls	r5, r5, #9
 8000696:	0026      	movs	r6, r4
 8000698:	20ff      	movs	r0, #255	; 0xff
 800069a:	0a6d      	lsrs	r5, r5, #9
 800069c:	e77d      	b.n	800059a <__aeabi_fdiv+0xc2>
 800069e:	2080      	movs	r0, #128	; 0x80
 80006a0:	03c0      	lsls	r0, r0, #15
 80006a2:	4305      	orrs	r5, r0
 80006a4:	026d      	lsls	r5, r5, #9
 80006a6:	20ff      	movs	r0, #255	; 0xff
 80006a8:	0a6d      	lsrs	r5, r5, #9
 80006aa:	e776      	b.n	800059a <__aeabi_fdiv+0xc2>
 80006ac:	4642      	mov	r2, r8
 80006ae:	016b      	lsls	r3, r5, #5
 80006b0:	0150      	lsls	r0, r2, #5
 80006b2:	4283      	cmp	r3, r0
 80006b4:	d219      	bcs.n	80006ea <__aeabi_fdiv+0x212>
 80006b6:	221b      	movs	r2, #27
 80006b8:	2500      	movs	r5, #0
 80006ba:	3f01      	subs	r7, #1
 80006bc:	2601      	movs	r6, #1
 80006be:	001c      	movs	r4, r3
 80006c0:	006d      	lsls	r5, r5, #1
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	2c00      	cmp	r4, #0
 80006c6:	db01      	blt.n	80006cc <__aeabi_fdiv+0x1f4>
 80006c8:	4298      	cmp	r0, r3
 80006ca:	d801      	bhi.n	80006d0 <__aeabi_fdiv+0x1f8>
 80006cc:	1a1b      	subs	r3, r3, r0
 80006ce:	4335      	orrs	r5, r6
 80006d0:	3a01      	subs	r2, #1
 80006d2:	2a00      	cmp	r2, #0
 80006d4:	d1f3      	bne.n	80006be <__aeabi_fdiv+0x1e6>
 80006d6:	1e5a      	subs	r2, r3, #1
 80006d8:	4193      	sbcs	r3, r2
 80006da:	431d      	orrs	r5, r3
 80006dc:	003b      	movs	r3, r7
 80006de:	337f      	adds	r3, #127	; 0x7f
 80006e0:	000e      	movs	r6, r1
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	dd00      	ble.n	80006e8 <__aeabi_fdiv+0x210>
 80006e6:	e741      	b.n	800056c <__aeabi_fdiv+0x94>
 80006e8:	e7aa      	b.n	8000640 <__aeabi_fdiv+0x168>
 80006ea:	221a      	movs	r2, #26
 80006ec:	2501      	movs	r5, #1
 80006ee:	1a1b      	subs	r3, r3, r0
 80006f0:	e7e4      	b.n	80006bc <__aeabi_fdiv+0x1e4>
 80006f2:	01ad      	lsls	r5, r5, #6
 80006f4:	2000      	movs	r0, #0
 80006f6:	0a6d      	lsrs	r5, r5, #9
 80006f8:	e74f      	b.n	800059a <__aeabi_fdiv+0xc2>
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	08012f34 	.word	0x08012f34
 8000700:	f7ffffff 	.word	0xf7ffffff
 8000704:	08012f74 	.word	0x08012f74

08000708 <__aeabi_fmul>:
 8000708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800070a:	464f      	mov	r7, r9
 800070c:	4646      	mov	r6, r8
 800070e:	46d6      	mov	lr, sl
 8000710:	0244      	lsls	r4, r0, #9
 8000712:	0045      	lsls	r5, r0, #1
 8000714:	b5c0      	push	{r6, r7, lr}
 8000716:	0a64      	lsrs	r4, r4, #9
 8000718:	1c0f      	adds	r7, r1, #0
 800071a:	0e2d      	lsrs	r5, r5, #24
 800071c:	0fc6      	lsrs	r6, r0, #31
 800071e:	2d00      	cmp	r5, #0
 8000720:	d100      	bne.n	8000724 <__aeabi_fmul+0x1c>
 8000722:	e08d      	b.n	8000840 <__aeabi_fmul+0x138>
 8000724:	2dff      	cmp	r5, #255	; 0xff
 8000726:	d100      	bne.n	800072a <__aeabi_fmul+0x22>
 8000728:	e092      	b.n	8000850 <__aeabi_fmul+0x148>
 800072a:	2300      	movs	r3, #0
 800072c:	2080      	movs	r0, #128	; 0x80
 800072e:	4699      	mov	r9, r3
 8000730:	469a      	mov	sl, r3
 8000732:	00e4      	lsls	r4, r4, #3
 8000734:	04c0      	lsls	r0, r0, #19
 8000736:	4304      	orrs	r4, r0
 8000738:	3d7f      	subs	r5, #127	; 0x7f
 800073a:	0278      	lsls	r0, r7, #9
 800073c:	0a43      	lsrs	r3, r0, #9
 800073e:	4698      	mov	r8, r3
 8000740:	007b      	lsls	r3, r7, #1
 8000742:	0e1b      	lsrs	r3, r3, #24
 8000744:	0fff      	lsrs	r7, r7, #31
 8000746:	2b00      	cmp	r3, #0
 8000748:	d100      	bne.n	800074c <__aeabi_fmul+0x44>
 800074a:	e070      	b.n	800082e <__aeabi_fmul+0x126>
 800074c:	2bff      	cmp	r3, #255	; 0xff
 800074e:	d100      	bne.n	8000752 <__aeabi_fmul+0x4a>
 8000750:	e086      	b.n	8000860 <__aeabi_fmul+0x158>
 8000752:	4642      	mov	r2, r8
 8000754:	00d0      	lsls	r0, r2, #3
 8000756:	2280      	movs	r2, #128	; 0x80
 8000758:	3b7f      	subs	r3, #127	; 0x7f
 800075a:	18ed      	adds	r5, r5, r3
 800075c:	2300      	movs	r3, #0
 800075e:	04d2      	lsls	r2, r2, #19
 8000760:	4302      	orrs	r2, r0
 8000762:	4690      	mov	r8, r2
 8000764:	469c      	mov	ip, r3
 8000766:	0031      	movs	r1, r6
 8000768:	464b      	mov	r3, r9
 800076a:	4079      	eors	r1, r7
 800076c:	1c68      	adds	r0, r5, #1
 800076e:	2b0f      	cmp	r3, #15
 8000770:	d81c      	bhi.n	80007ac <__aeabi_fmul+0xa4>
 8000772:	4a76      	ldr	r2, [pc, #472]	; (800094c <__aeabi_fmul+0x244>)
 8000774:	009b      	lsls	r3, r3, #2
 8000776:	58d3      	ldr	r3, [r2, r3]
 8000778:	469f      	mov	pc, r3
 800077a:	0039      	movs	r1, r7
 800077c:	4644      	mov	r4, r8
 800077e:	46e2      	mov	sl, ip
 8000780:	4653      	mov	r3, sl
 8000782:	2b02      	cmp	r3, #2
 8000784:	d00f      	beq.n	80007a6 <__aeabi_fmul+0x9e>
 8000786:	2b03      	cmp	r3, #3
 8000788:	d100      	bne.n	800078c <__aeabi_fmul+0x84>
 800078a:	e0d7      	b.n	800093c <__aeabi_fmul+0x234>
 800078c:	2b01      	cmp	r3, #1
 800078e:	d137      	bne.n	8000800 <__aeabi_fmul+0xf8>
 8000790:	2000      	movs	r0, #0
 8000792:	2400      	movs	r4, #0
 8000794:	05c0      	lsls	r0, r0, #23
 8000796:	4320      	orrs	r0, r4
 8000798:	07c9      	lsls	r1, r1, #31
 800079a:	4308      	orrs	r0, r1
 800079c:	bce0      	pop	{r5, r6, r7}
 800079e:	46ba      	mov	sl, r7
 80007a0:	46b1      	mov	r9, r6
 80007a2:	46a8      	mov	r8, r5
 80007a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007a6:	20ff      	movs	r0, #255	; 0xff
 80007a8:	2400      	movs	r4, #0
 80007aa:	e7f3      	b.n	8000794 <__aeabi_fmul+0x8c>
 80007ac:	0c26      	lsrs	r6, r4, #16
 80007ae:	0424      	lsls	r4, r4, #16
 80007b0:	0c22      	lsrs	r2, r4, #16
 80007b2:	4644      	mov	r4, r8
 80007b4:	0424      	lsls	r4, r4, #16
 80007b6:	0c24      	lsrs	r4, r4, #16
 80007b8:	4643      	mov	r3, r8
 80007ba:	0027      	movs	r7, r4
 80007bc:	0c1b      	lsrs	r3, r3, #16
 80007be:	4357      	muls	r7, r2
 80007c0:	4374      	muls	r4, r6
 80007c2:	435a      	muls	r2, r3
 80007c4:	435e      	muls	r6, r3
 80007c6:	1912      	adds	r2, r2, r4
 80007c8:	0c3b      	lsrs	r3, r7, #16
 80007ca:	189b      	adds	r3, r3, r2
 80007cc:	429c      	cmp	r4, r3
 80007ce:	d903      	bls.n	80007d8 <__aeabi_fmul+0xd0>
 80007d0:	2280      	movs	r2, #128	; 0x80
 80007d2:	0252      	lsls	r2, r2, #9
 80007d4:	4694      	mov	ip, r2
 80007d6:	4466      	add	r6, ip
 80007d8:	043f      	lsls	r7, r7, #16
 80007da:	041a      	lsls	r2, r3, #16
 80007dc:	0c3f      	lsrs	r7, r7, #16
 80007de:	19d2      	adds	r2, r2, r7
 80007e0:	0194      	lsls	r4, r2, #6
 80007e2:	1e67      	subs	r7, r4, #1
 80007e4:	41bc      	sbcs	r4, r7
 80007e6:	0c1b      	lsrs	r3, r3, #16
 80007e8:	0e92      	lsrs	r2, r2, #26
 80007ea:	199b      	adds	r3, r3, r6
 80007ec:	4314      	orrs	r4, r2
 80007ee:	019b      	lsls	r3, r3, #6
 80007f0:	431c      	orrs	r4, r3
 80007f2:	011b      	lsls	r3, r3, #4
 80007f4:	d400      	bmi.n	80007f8 <__aeabi_fmul+0xf0>
 80007f6:	e09b      	b.n	8000930 <__aeabi_fmul+0x228>
 80007f8:	2301      	movs	r3, #1
 80007fa:	0862      	lsrs	r2, r4, #1
 80007fc:	401c      	ands	r4, r3
 80007fe:	4314      	orrs	r4, r2
 8000800:	0002      	movs	r2, r0
 8000802:	327f      	adds	r2, #127	; 0x7f
 8000804:	2a00      	cmp	r2, #0
 8000806:	dd64      	ble.n	80008d2 <__aeabi_fmul+0x1ca>
 8000808:	0763      	lsls	r3, r4, #29
 800080a:	d004      	beq.n	8000816 <__aeabi_fmul+0x10e>
 800080c:	230f      	movs	r3, #15
 800080e:	4023      	ands	r3, r4
 8000810:	2b04      	cmp	r3, #4
 8000812:	d000      	beq.n	8000816 <__aeabi_fmul+0x10e>
 8000814:	3404      	adds	r4, #4
 8000816:	0123      	lsls	r3, r4, #4
 8000818:	d503      	bpl.n	8000822 <__aeabi_fmul+0x11a>
 800081a:	0002      	movs	r2, r0
 800081c:	4b4c      	ldr	r3, [pc, #304]	; (8000950 <__aeabi_fmul+0x248>)
 800081e:	3280      	adds	r2, #128	; 0x80
 8000820:	401c      	ands	r4, r3
 8000822:	2afe      	cmp	r2, #254	; 0xfe
 8000824:	dcbf      	bgt.n	80007a6 <__aeabi_fmul+0x9e>
 8000826:	01a4      	lsls	r4, r4, #6
 8000828:	0a64      	lsrs	r4, r4, #9
 800082a:	b2d0      	uxtb	r0, r2
 800082c:	e7b2      	b.n	8000794 <__aeabi_fmul+0x8c>
 800082e:	4643      	mov	r3, r8
 8000830:	2b00      	cmp	r3, #0
 8000832:	d13d      	bne.n	80008b0 <__aeabi_fmul+0x1a8>
 8000834:	464a      	mov	r2, r9
 8000836:	3301      	adds	r3, #1
 8000838:	431a      	orrs	r2, r3
 800083a:	4691      	mov	r9, r2
 800083c:	469c      	mov	ip, r3
 800083e:	e792      	b.n	8000766 <__aeabi_fmul+0x5e>
 8000840:	2c00      	cmp	r4, #0
 8000842:	d129      	bne.n	8000898 <__aeabi_fmul+0x190>
 8000844:	2304      	movs	r3, #4
 8000846:	4699      	mov	r9, r3
 8000848:	3b03      	subs	r3, #3
 800084a:	2500      	movs	r5, #0
 800084c:	469a      	mov	sl, r3
 800084e:	e774      	b.n	800073a <__aeabi_fmul+0x32>
 8000850:	2c00      	cmp	r4, #0
 8000852:	d11b      	bne.n	800088c <__aeabi_fmul+0x184>
 8000854:	2308      	movs	r3, #8
 8000856:	4699      	mov	r9, r3
 8000858:	3b06      	subs	r3, #6
 800085a:	25ff      	movs	r5, #255	; 0xff
 800085c:	469a      	mov	sl, r3
 800085e:	e76c      	b.n	800073a <__aeabi_fmul+0x32>
 8000860:	4643      	mov	r3, r8
 8000862:	35ff      	adds	r5, #255	; 0xff
 8000864:	2b00      	cmp	r3, #0
 8000866:	d10b      	bne.n	8000880 <__aeabi_fmul+0x178>
 8000868:	2302      	movs	r3, #2
 800086a:	464a      	mov	r2, r9
 800086c:	431a      	orrs	r2, r3
 800086e:	4691      	mov	r9, r2
 8000870:	469c      	mov	ip, r3
 8000872:	e778      	b.n	8000766 <__aeabi_fmul+0x5e>
 8000874:	4653      	mov	r3, sl
 8000876:	0031      	movs	r1, r6
 8000878:	2b02      	cmp	r3, #2
 800087a:	d000      	beq.n	800087e <__aeabi_fmul+0x176>
 800087c:	e783      	b.n	8000786 <__aeabi_fmul+0x7e>
 800087e:	e792      	b.n	80007a6 <__aeabi_fmul+0x9e>
 8000880:	2303      	movs	r3, #3
 8000882:	464a      	mov	r2, r9
 8000884:	431a      	orrs	r2, r3
 8000886:	4691      	mov	r9, r2
 8000888:	469c      	mov	ip, r3
 800088a:	e76c      	b.n	8000766 <__aeabi_fmul+0x5e>
 800088c:	230c      	movs	r3, #12
 800088e:	4699      	mov	r9, r3
 8000890:	3b09      	subs	r3, #9
 8000892:	25ff      	movs	r5, #255	; 0xff
 8000894:	469a      	mov	sl, r3
 8000896:	e750      	b.n	800073a <__aeabi_fmul+0x32>
 8000898:	0020      	movs	r0, r4
 800089a:	f002 f967 	bl	8002b6c <__clzsi2>
 800089e:	2576      	movs	r5, #118	; 0x76
 80008a0:	1f43      	subs	r3, r0, #5
 80008a2:	409c      	lsls	r4, r3
 80008a4:	2300      	movs	r3, #0
 80008a6:	426d      	negs	r5, r5
 80008a8:	4699      	mov	r9, r3
 80008aa:	469a      	mov	sl, r3
 80008ac:	1a2d      	subs	r5, r5, r0
 80008ae:	e744      	b.n	800073a <__aeabi_fmul+0x32>
 80008b0:	4640      	mov	r0, r8
 80008b2:	f002 f95b 	bl	8002b6c <__clzsi2>
 80008b6:	4642      	mov	r2, r8
 80008b8:	1f43      	subs	r3, r0, #5
 80008ba:	409a      	lsls	r2, r3
 80008bc:	2300      	movs	r3, #0
 80008be:	1a2d      	subs	r5, r5, r0
 80008c0:	4690      	mov	r8, r2
 80008c2:	469c      	mov	ip, r3
 80008c4:	3d76      	subs	r5, #118	; 0x76
 80008c6:	e74e      	b.n	8000766 <__aeabi_fmul+0x5e>
 80008c8:	2480      	movs	r4, #128	; 0x80
 80008ca:	2100      	movs	r1, #0
 80008cc:	20ff      	movs	r0, #255	; 0xff
 80008ce:	03e4      	lsls	r4, r4, #15
 80008d0:	e760      	b.n	8000794 <__aeabi_fmul+0x8c>
 80008d2:	2301      	movs	r3, #1
 80008d4:	1a9b      	subs	r3, r3, r2
 80008d6:	2b1b      	cmp	r3, #27
 80008d8:	dd00      	ble.n	80008dc <__aeabi_fmul+0x1d4>
 80008da:	e759      	b.n	8000790 <__aeabi_fmul+0x88>
 80008dc:	0022      	movs	r2, r4
 80008de:	309e      	adds	r0, #158	; 0x9e
 80008e0:	40da      	lsrs	r2, r3
 80008e2:	4084      	lsls	r4, r0
 80008e4:	0013      	movs	r3, r2
 80008e6:	1e62      	subs	r2, r4, #1
 80008e8:	4194      	sbcs	r4, r2
 80008ea:	431c      	orrs	r4, r3
 80008ec:	0763      	lsls	r3, r4, #29
 80008ee:	d004      	beq.n	80008fa <__aeabi_fmul+0x1f2>
 80008f0:	230f      	movs	r3, #15
 80008f2:	4023      	ands	r3, r4
 80008f4:	2b04      	cmp	r3, #4
 80008f6:	d000      	beq.n	80008fa <__aeabi_fmul+0x1f2>
 80008f8:	3404      	adds	r4, #4
 80008fa:	0163      	lsls	r3, r4, #5
 80008fc:	d51a      	bpl.n	8000934 <__aeabi_fmul+0x22c>
 80008fe:	2001      	movs	r0, #1
 8000900:	2400      	movs	r4, #0
 8000902:	e747      	b.n	8000794 <__aeabi_fmul+0x8c>
 8000904:	2080      	movs	r0, #128	; 0x80
 8000906:	03c0      	lsls	r0, r0, #15
 8000908:	4204      	tst	r4, r0
 800090a:	d009      	beq.n	8000920 <__aeabi_fmul+0x218>
 800090c:	4643      	mov	r3, r8
 800090e:	4203      	tst	r3, r0
 8000910:	d106      	bne.n	8000920 <__aeabi_fmul+0x218>
 8000912:	4644      	mov	r4, r8
 8000914:	4304      	orrs	r4, r0
 8000916:	0264      	lsls	r4, r4, #9
 8000918:	0039      	movs	r1, r7
 800091a:	20ff      	movs	r0, #255	; 0xff
 800091c:	0a64      	lsrs	r4, r4, #9
 800091e:	e739      	b.n	8000794 <__aeabi_fmul+0x8c>
 8000920:	2080      	movs	r0, #128	; 0x80
 8000922:	03c0      	lsls	r0, r0, #15
 8000924:	4304      	orrs	r4, r0
 8000926:	0264      	lsls	r4, r4, #9
 8000928:	0031      	movs	r1, r6
 800092a:	20ff      	movs	r0, #255	; 0xff
 800092c:	0a64      	lsrs	r4, r4, #9
 800092e:	e731      	b.n	8000794 <__aeabi_fmul+0x8c>
 8000930:	0028      	movs	r0, r5
 8000932:	e765      	b.n	8000800 <__aeabi_fmul+0xf8>
 8000934:	01a4      	lsls	r4, r4, #6
 8000936:	2000      	movs	r0, #0
 8000938:	0a64      	lsrs	r4, r4, #9
 800093a:	e72b      	b.n	8000794 <__aeabi_fmul+0x8c>
 800093c:	2080      	movs	r0, #128	; 0x80
 800093e:	03c0      	lsls	r0, r0, #15
 8000940:	4304      	orrs	r4, r0
 8000942:	0264      	lsls	r4, r4, #9
 8000944:	20ff      	movs	r0, #255	; 0xff
 8000946:	0a64      	lsrs	r4, r4, #9
 8000948:	e724      	b.n	8000794 <__aeabi_fmul+0x8c>
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	08012fb4 	.word	0x08012fb4
 8000950:	f7ffffff 	.word	0xf7ffffff

08000954 <__aeabi_fsub>:
 8000954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000956:	46ce      	mov	lr, r9
 8000958:	4647      	mov	r7, r8
 800095a:	0243      	lsls	r3, r0, #9
 800095c:	0a5b      	lsrs	r3, r3, #9
 800095e:	024e      	lsls	r6, r1, #9
 8000960:	00da      	lsls	r2, r3, #3
 8000962:	4694      	mov	ip, r2
 8000964:	0a72      	lsrs	r2, r6, #9
 8000966:	4691      	mov	r9, r2
 8000968:	0045      	lsls	r5, r0, #1
 800096a:	004a      	lsls	r2, r1, #1
 800096c:	b580      	push	{r7, lr}
 800096e:	0e2d      	lsrs	r5, r5, #24
 8000970:	001f      	movs	r7, r3
 8000972:	0fc4      	lsrs	r4, r0, #31
 8000974:	0e12      	lsrs	r2, r2, #24
 8000976:	0fc9      	lsrs	r1, r1, #31
 8000978:	09b6      	lsrs	r6, r6, #6
 800097a:	2aff      	cmp	r2, #255	; 0xff
 800097c:	d05b      	beq.n	8000a36 <__aeabi_fsub+0xe2>
 800097e:	2001      	movs	r0, #1
 8000980:	4041      	eors	r1, r0
 8000982:	428c      	cmp	r4, r1
 8000984:	d039      	beq.n	80009fa <__aeabi_fsub+0xa6>
 8000986:	1aa8      	subs	r0, r5, r2
 8000988:	2800      	cmp	r0, #0
 800098a:	dd5a      	ble.n	8000a42 <__aeabi_fsub+0xee>
 800098c:	2a00      	cmp	r2, #0
 800098e:	d06a      	beq.n	8000a66 <__aeabi_fsub+0x112>
 8000990:	2dff      	cmp	r5, #255	; 0xff
 8000992:	d100      	bne.n	8000996 <__aeabi_fsub+0x42>
 8000994:	e0d9      	b.n	8000b4a <__aeabi_fsub+0x1f6>
 8000996:	2280      	movs	r2, #128	; 0x80
 8000998:	04d2      	lsls	r2, r2, #19
 800099a:	4316      	orrs	r6, r2
 800099c:	281b      	cmp	r0, #27
 800099e:	dc00      	bgt.n	80009a2 <__aeabi_fsub+0x4e>
 80009a0:	e0e9      	b.n	8000b76 <__aeabi_fsub+0x222>
 80009a2:	2001      	movs	r0, #1
 80009a4:	4663      	mov	r3, ip
 80009a6:	1a18      	subs	r0, r3, r0
 80009a8:	0143      	lsls	r3, r0, #5
 80009aa:	d400      	bmi.n	80009ae <__aeabi_fsub+0x5a>
 80009ac:	e0b4      	b.n	8000b18 <__aeabi_fsub+0x1c4>
 80009ae:	0180      	lsls	r0, r0, #6
 80009b0:	0987      	lsrs	r7, r0, #6
 80009b2:	0038      	movs	r0, r7
 80009b4:	f002 f8da 	bl	8002b6c <__clzsi2>
 80009b8:	3805      	subs	r0, #5
 80009ba:	4087      	lsls	r7, r0
 80009bc:	4285      	cmp	r5, r0
 80009be:	dc00      	bgt.n	80009c2 <__aeabi_fsub+0x6e>
 80009c0:	e0cc      	b.n	8000b5c <__aeabi_fsub+0x208>
 80009c2:	1a2d      	subs	r5, r5, r0
 80009c4:	48b5      	ldr	r0, [pc, #724]	; (8000c9c <__aeabi_fsub+0x348>)
 80009c6:	4038      	ands	r0, r7
 80009c8:	0743      	lsls	r3, r0, #29
 80009ca:	d004      	beq.n	80009d6 <__aeabi_fsub+0x82>
 80009cc:	230f      	movs	r3, #15
 80009ce:	4003      	ands	r3, r0
 80009d0:	2b04      	cmp	r3, #4
 80009d2:	d000      	beq.n	80009d6 <__aeabi_fsub+0x82>
 80009d4:	3004      	adds	r0, #4
 80009d6:	0143      	lsls	r3, r0, #5
 80009d8:	d400      	bmi.n	80009dc <__aeabi_fsub+0x88>
 80009da:	e0a0      	b.n	8000b1e <__aeabi_fsub+0x1ca>
 80009dc:	1c6a      	adds	r2, r5, #1
 80009de:	2dfe      	cmp	r5, #254	; 0xfe
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fsub+0x90>
 80009e2:	e08d      	b.n	8000b00 <__aeabi_fsub+0x1ac>
 80009e4:	0180      	lsls	r0, r0, #6
 80009e6:	0a47      	lsrs	r7, r0, #9
 80009e8:	b2d2      	uxtb	r2, r2
 80009ea:	05d0      	lsls	r0, r2, #23
 80009ec:	4338      	orrs	r0, r7
 80009ee:	07e4      	lsls	r4, r4, #31
 80009f0:	4320      	orrs	r0, r4
 80009f2:	bcc0      	pop	{r6, r7}
 80009f4:	46b9      	mov	r9, r7
 80009f6:	46b0      	mov	r8, r6
 80009f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009fa:	1aa8      	subs	r0, r5, r2
 80009fc:	4680      	mov	r8, r0
 80009fe:	2800      	cmp	r0, #0
 8000a00:	dd45      	ble.n	8000a8e <__aeabi_fsub+0x13a>
 8000a02:	2a00      	cmp	r2, #0
 8000a04:	d070      	beq.n	8000ae8 <__aeabi_fsub+0x194>
 8000a06:	2dff      	cmp	r5, #255	; 0xff
 8000a08:	d100      	bne.n	8000a0c <__aeabi_fsub+0xb8>
 8000a0a:	e09e      	b.n	8000b4a <__aeabi_fsub+0x1f6>
 8000a0c:	2380      	movs	r3, #128	; 0x80
 8000a0e:	04db      	lsls	r3, r3, #19
 8000a10:	431e      	orrs	r6, r3
 8000a12:	4643      	mov	r3, r8
 8000a14:	2b1b      	cmp	r3, #27
 8000a16:	dc00      	bgt.n	8000a1a <__aeabi_fsub+0xc6>
 8000a18:	e0d2      	b.n	8000bc0 <__aeabi_fsub+0x26c>
 8000a1a:	2001      	movs	r0, #1
 8000a1c:	4460      	add	r0, ip
 8000a1e:	0143      	lsls	r3, r0, #5
 8000a20:	d57a      	bpl.n	8000b18 <__aeabi_fsub+0x1c4>
 8000a22:	3501      	adds	r5, #1
 8000a24:	2dff      	cmp	r5, #255	; 0xff
 8000a26:	d06b      	beq.n	8000b00 <__aeabi_fsub+0x1ac>
 8000a28:	2301      	movs	r3, #1
 8000a2a:	4a9d      	ldr	r2, [pc, #628]	; (8000ca0 <__aeabi_fsub+0x34c>)
 8000a2c:	4003      	ands	r3, r0
 8000a2e:	0840      	lsrs	r0, r0, #1
 8000a30:	4010      	ands	r0, r2
 8000a32:	4318      	orrs	r0, r3
 8000a34:	e7c8      	b.n	80009c8 <__aeabi_fsub+0x74>
 8000a36:	2e00      	cmp	r6, #0
 8000a38:	d020      	beq.n	8000a7c <__aeabi_fsub+0x128>
 8000a3a:	428c      	cmp	r4, r1
 8000a3c:	d023      	beq.n	8000a86 <__aeabi_fsub+0x132>
 8000a3e:	0028      	movs	r0, r5
 8000a40:	38ff      	subs	r0, #255	; 0xff
 8000a42:	2800      	cmp	r0, #0
 8000a44:	d039      	beq.n	8000aba <__aeabi_fsub+0x166>
 8000a46:	1b57      	subs	r7, r2, r5
 8000a48:	2d00      	cmp	r5, #0
 8000a4a:	d000      	beq.n	8000a4e <__aeabi_fsub+0xfa>
 8000a4c:	e09d      	b.n	8000b8a <__aeabi_fsub+0x236>
 8000a4e:	4663      	mov	r3, ip
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d100      	bne.n	8000a56 <__aeabi_fsub+0x102>
 8000a54:	e0db      	b.n	8000c0e <__aeabi_fsub+0x2ba>
 8000a56:	1e7b      	subs	r3, r7, #1
 8000a58:	2f01      	cmp	r7, #1
 8000a5a:	d100      	bne.n	8000a5e <__aeabi_fsub+0x10a>
 8000a5c:	e10d      	b.n	8000c7a <__aeabi_fsub+0x326>
 8000a5e:	2fff      	cmp	r7, #255	; 0xff
 8000a60:	d071      	beq.n	8000b46 <__aeabi_fsub+0x1f2>
 8000a62:	001f      	movs	r7, r3
 8000a64:	e098      	b.n	8000b98 <__aeabi_fsub+0x244>
 8000a66:	2e00      	cmp	r6, #0
 8000a68:	d100      	bne.n	8000a6c <__aeabi_fsub+0x118>
 8000a6a:	e0a7      	b.n	8000bbc <__aeabi_fsub+0x268>
 8000a6c:	1e42      	subs	r2, r0, #1
 8000a6e:	2801      	cmp	r0, #1
 8000a70:	d100      	bne.n	8000a74 <__aeabi_fsub+0x120>
 8000a72:	e0e6      	b.n	8000c42 <__aeabi_fsub+0x2ee>
 8000a74:	28ff      	cmp	r0, #255	; 0xff
 8000a76:	d068      	beq.n	8000b4a <__aeabi_fsub+0x1f6>
 8000a78:	0010      	movs	r0, r2
 8000a7a:	e78f      	b.n	800099c <__aeabi_fsub+0x48>
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	4041      	eors	r1, r0
 8000a80:	42a1      	cmp	r1, r4
 8000a82:	d000      	beq.n	8000a86 <__aeabi_fsub+0x132>
 8000a84:	e77f      	b.n	8000986 <__aeabi_fsub+0x32>
 8000a86:	20ff      	movs	r0, #255	; 0xff
 8000a88:	4240      	negs	r0, r0
 8000a8a:	4680      	mov	r8, r0
 8000a8c:	44a8      	add	r8, r5
 8000a8e:	4640      	mov	r0, r8
 8000a90:	2800      	cmp	r0, #0
 8000a92:	d038      	beq.n	8000b06 <__aeabi_fsub+0x1b2>
 8000a94:	1b51      	subs	r1, r2, r5
 8000a96:	2d00      	cmp	r5, #0
 8000a98:	d100      	bne.n	8000a9c <__aeabi_fsub+0x148>
 8000a9a:	e0ae      	b.n	8000bfa <__aeabi_fsub+0x2a6>
 8000a9c:	2aff      	cmp	r2, #255	; 0xff
 8000a9e:	d100      	bne.n	8000aa2 <__aeabi_fsub+0x14e>
 8000aa0:	e0df      	b.n	8000c62 <__aeabi_fsub+0x30e>
 8000aa2:	2380      	movs	r3, #128	; 0x80
 8000aa4:	4660      	mov	r0, ip
 8000aa6:	04db      	lsls	r3, r3, #19
 8000aa8:	4318      	orrs	r0, r3
 8000aaa:	4684      	mov	ip, r0
 8000aac:	291b      	cmp	r1, #27
 8000aae:	dc00      	bgt.n	8000ab2 <__aeabi_fsub+0x15e>
 8000ab0:	e0d9      	b.n	8000c66 <__aeabi_fsub+0x312>
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	0015      	movs	r5, r2
 8000ab6:	1980      	adds	r0, r0, r6
 8000ab8:	e7b1      	b.n	8000a1e <__aeabi_fsub+0xca>
 8000aba:	20fe      	movs	r0, #254	; 0xfe
 8000abc:	1c6a      	adds	r2, r5, #1
 8000abe:	4210      	tst	r0, r2
 8000ac0:	d171      	bne.n	8000ba6 <__aeabi_fsub+0x252>
 8000ac2:	2d00      	cmp	r5, #0
 8000ac4:	d000      	beq.n	8000ac8 <__aeabi_fsub+0x174>
 8000ac6:	e0a6      	b.n	8000c16 <__aeabi_fsub+0x2c2>
 8000ac8:	4663      	mov	r3, ip
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d100      	bne.n	8000ad0 <__aeabi_fsub+0x17c>
 8000ace:	e0d9      	b.n	8000c84 <__aeabi_fsub+0x330>
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2e00      	cmp	r6, #0
 8000ad4:	d100      	bne.n	8000ad8 <__aeabi_fsub+0x184>
 8000ad6:	e788      	b.n	80009ea <__aeabi_fsub+0x96>
 8000ad8:	1b98      	subs	r0, r3, r6
 8000ada:	0143      	lsls	r3, r0, #5
 8000adc:	d400      	bmi.n	8000ae0 <__aeabi_fsub+0x18c>
 8000ade:	e0e1      	b.n	8000ca4 <__aeabi_fsub+0x350>
 8000ae0:	4663      	mov	r3, ip
 8000ae2:	000c      	movs	r4, r1
 8000ae4:	1af0      	subs	r0, r6, r3
 8000ae6:	e76f      	b.n	80009c8 <__aeabi_fsub+0x74>
 8000ae8:	2e00      	cmp	r6, #0
 8000aea:	d100      	bne.n	8000aee <__aeabi_fsub+0x19a>
 8000aec:	e0b7      	b.n	8000c5e <__aeabi_fsub+0x30a>
 8000aee:	0002      	movs	r2, r0
 8000af0:	3a01      	subs	r2, #1
 8000af2:	2801      	cmp	r0, #1
 8000af4:	d100      	bne.n	8000af8 <__aeabi_fsub+0x1a4>
 8000af6:	e09c      	b.n	8000c32 <__aeabi_fsub+0x2de>
 8000af8:	28ff      	cmp	r0, #255	; 0xff
 8000afa:	d026      	beq.n	8000b4a <__aeabi_fsub+0x1f6>
 8000afc:	4690      	mov	r8, r2
 8000afe:	e788      	b.n	8000a12 <__aeabi_fsub+0xbe>
 8000b00:	22ff      	movs	r2, #255	; 0xff
 8000b02:	2700      	movs	r7, #0
 8000b04:	e771      	b.n	80009ea <__aeabi_fsub+0x96>
 8000b06:	20fe      	movs	r0, #254	; 0xfe
 8000b08:	1c6a      	adds	r2, r5, #1
 8000b0a:	4210      	tst	r0, r2
 8000b0c:	d064      	beq.n	8000bd8 <__aeabi_fsub+0x284>
 8000b0e:	2aff      	cmp	r2, #255	; 0xff
 8000b10:	d0f6      	beq.n	8000b00 <__aeabi_fsub+0x1ac>
 8000b12:	0015      	movs	r5, r2
 8000b14:	4466      	add	r6, ip
 8000b16:	0870      	lsrs	r0, r6, #1
 8000b18:	0743      	lsls	r3, r0, #29
 8000b1a:	d000      	beq.n	8000b1e <__aeabi_fsub+0x1ca>
 8000b1c:	e756      	b.n	80009cc <__aeabi_fsub+0x78>
 8000b1e:	08c3      	lsrs	r3, r0, #3
 8000b20:	2dff      	cmp	r5, #255	; 0xff
 8000b22:	d012      	beq.n	8000b4a <__aeabi_fsub+0x1f6>
 8000b24:	025b      	lsls	r3, r3, #9
 8000b26:	0a5f      	lsrs	r7, r3, #9
 8000b28:	b2ea      	uxtb	r2, r5
 8000b2a:	e75e      	b.n	80009ea <__aeabi_fsub+0x96>
 8000b2c:	4662      	mov	r2, ip
 8000b2e:	2a00      	cmp	r2, #0
 8000b30:	d100      	bne.n	8000b34 <__aeabi_fsub+0x1e0>
 8000b32:	e096      	b.n	8000c62 <__aeabi_fsub+0x30e>
 8000b34:	2e00      	cmp	r6, #0
 8000b36:	d008      	beq.n	8000b4a <__aeabi_fsub+0x1f6>
 8000b38:	2280      	movs	r2, #128	; 0x80
 8000b3a:	03d2      	lsls	r2, r2, #15
 8000b3c:	4213      	tst	r3, r2
 8000b3e:	d004      	beq.n	8000b4a <__aeabi_fsub+0x1f6>
 8000b40:	4648      	mov	r0, r9
 8000b42:	4210      	tst	r0, r2
 8000b44:	d101      	bne.n	8000b4a <__aeabi_fsub+0x1f6>
 8000b46:	000c      	movs	r4, r1
 8000b48:	464b      	mov	r3, r9
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d0d8      	beq.n	8000b00 <__aeabi_fsub+0x1ac>
 8000b4e:	2780      	movs	r7, #128	; 0x80
 8000b50:	03ff      	lsls	r7, r7, #15
 8000b52:	431f      	orrs	r7, r3
 8000b54:	027f      	lsls	r7, r7, #9
 8000b56:	22ff      	movs	r2, #255	; 0xff
 8000b58:	0a7f      	lsrs	r7, r7, #9
 8000b5a:	e746      	b.n	80009ea <__aeabi_fsub+0x96>
 8000b5c:	2320      	movs	r3, #32
 8000b5e:	003a      	movs	r2, r7
 8000b60:	1b45      	subs	r5, r0, r5
 8000b62:	0038      	movs	r0, r7
 8000b64:	3501      	adds	r5, #1
 8000b66:	40ea      	lsrs	r2, r5
 8000b68:	1b5d      	subs	r5, r3, r5
 8000b6a:	40a8      	lsls	r0, r5
 8000b6c:	1e43      	subs	r3, r0, #1
 8000b6e:	4198      	sbcs	r0, r3
 8000b70:	2500      	movs	r5, #0
 8000b72:	4310      	orrs	r0, r2
 8000b74:	e728      	b.n	80009c8 <__aeabi_fsub+0x74>
 8000b76:	2320      	movs	r3, #32
 8000b78:	1a1b      	subs	r3, r3, r0
 8000b7a:	0032      	movs	r2, r6
 8000b7c:	409e      	lsls	r6, r3
 8000b7e:	40c2      	lsrs	r2, r0
 8000b80:	0030      	movs	r0, r6
 8000b82:	1e43      	subs	r3, r0, #1
 8000b84:	4198      	sbcs	r0, r3
 8000b86:	4310      	orrs	r0, r2
 8000b88:	e70c      	b.n	80009a4 <__aeabi_fsub+0x50>
 8000b8a:	2aff      	cmp	r2, #255	; 0xff
 8000b8c:	d0db      	beq.n	8000b46 <__aeabi_fsub+0x1f2>
 8000b8e:	2380      	movs	r3, #128	; 0x80
 8000b90:	4660      	mov	r0, ip
 8000b92:	04db      	lsls	r3, r3, #19
 8000b94:	4318      	orrs	r0, r3
 8000b96:	4684      	mov	ip, r0
 8000b98:	2f1b      	cmp	r7, #27
 8000b9a:	dd56      	ble.n	8000c4a <__aeabi_fsub+0x2f6>
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	000c      	movs	r4, r1
 8000ba0:	0015      	movs	r5, r2
 8000ba2:	1a30      	subs	r0, r6, r0
 8000ba4:	e700      	b.n	80009a8 <__aeabi_fsub+0x54>
 8000ba6:	4663      	mov	r3, ip
 8000ba8:	1b9f      	subs	r7, r3, r6
 8000baa:	017b      	lsls	r3, r7, #5
 8000bac:	d43d      	bmi.n	8000c2a <__aeabi_fsub+0x2d6>
 8000bae:	2f00      	cmp	r7, #0
 8000bb0:	d000      	beq.n	8000bb4 <__aeabi_fsub+0x260>
 8000bb2:	e6fe      	b.n	80009b2 <__aeabi_fsub+0x5e>
 8000bb4:	2400      	movs	r4, #0
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2700      	movs	r7, #0
 8000bba:	e716      	b.n	80009ea <__aeabi_fsub+0x96>
 8000bbc:	0005      	movs	r5, r0
 8000bbe:	e7af      	b.n	8000b20 <__aeabi_fsub+0x1cc>
 8000bc0:	0032      	movs	r2, r6
 8000bc2:	4643      	mov	r3, r8
 8000bc4:	4641      	mov	r1, r8
 8000bc6:	40da      	lsrs	r2, r3
 8000bc8:	2320      	movs	r3, #32
 8000bca:	1a5b      	subs	r3, r3, r1
 8000bcc:	409e      	lsls	r6, r3
 8000bce:	0030      	movs	r0, r6
 8000bd0:	1e43      	subs	r3, r0, #1
 8000bd2:	4198      	sbcs	r0, r3
 8000bd4:	4310      	orrs	r0, r2
 8000bd6:	e721      	b.n	8000a1c <__aeabi_fsub+0xc8>
 8000bd8:	2d00      	cmp	r5, #0
 8000bda:	d1a7      	bne.n	8000b2c <__aeabi_fsub+0x1d8>
 8000bdc:	4663      	mov	r3, ip
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d059      	beq.n	8000c96 <__aeabi_fsub+0x342>
 8000be2:	2200      	movs	r2, #0
 8000be4:	2e00      	cmp	r6, #0
 8000be6:	d100      	bne.n	8000bea <__aeabi_fsub+0x296>
 8000be8:	e6ff      	b.n	80009ea <__aeabi_fsub+0x96>
 8000bea:	0030      	movs	r0, r6
 8000bec:	4460      	add	r0, ip
 8000bee:	0143      	lsls	r3, r0, #5
 8000bf0:	d592      	bpl.n	8000b18 <__aeabi_fsub+0x1c4>
 8000bf2:	4b2a      	ldr	r3, [pc, #168]	; (8000c9c <__aeabi_fsub+0x348>)
 8000bf4:	3501      	adds	r5, #1
 8000bf6:	4018      	ands	r0, r3
 8000bf8:	e78e      	b.n	8000b18 <__aeabi_fsub+0x1c4>
 8000bfa:	4663      	mov	r3, ip
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d047      	beq.n	8000c90 <__aeabi_fsub+0x33c>
 8000c00:	1e4b      	subs	r3, r1, #1
 8000c02:	2901      	cmp	r1, #1
 8000c04:	d015      	beq.n	8000c32 <__aeabi_fsub+0x2de>
 8000c06:	29ff      	cmp	r1, #255	; 0xff
 8000c08:	d02b      	beq.n	8000c62 <__aeabi_fsub+0x30e>
 8000c0a:	0019      	movs	r1, r3
 8000c0c:	e74e      	b.n	8000aac <__aeabi_fsub+0x158>
 8000c0e:	000c      	movs	r4, r1
 8000c10:	464b      	mov	r3, r9
 8000c12:	003d      	movs	r5, r7
 8000c14:	e784      	b.n	8000b20 <__aeabi_fsub+0x1cc>
 8000c16:	4662      	mov	r2, ip
 8000c18:	2a00      	cmp	r2, #0
 8000c1a:	d18b      	bne.n	8000b34 <__aeabi_fsub+0x1e0>
 8000c1c:	2e00      	cmp	r6, #0
 8000c1e:	d192      	bne.n	8000b46 <__aeabi_fsub+0x1f2>
 8000c20:	2780      	movs	r7, #128	; 0x80
 8000c22:	2400      	movs	r4, #0
 8000c24:	22ff      	movs	r2, #255	; 0xff
 8000c26:	03ff      	lsls	r7, r7, #15
 8000c28:	e6df      	b.n	80009ea <__aeabi_fsub+0x96>
 8000c2a:	4663      	mov	r3, ip
 8000c2c:	000c      	movs	r4, r1
 8000c2e:	1af7      	subs	r7, r6, r3
 8000c30:	e6bf      	b.n	80009b2 <__aeabi_fsub+0x5e>
 8000c32:	0030      	movs	r0, r6
 8000c34:	4460      	add	r0, ip
 8000c36:	2501      	movs	r5, #1
 8000c38:	0143      	lsls	r3, r0, #5
 8000c3a:	d400      	bmi.n	8000c3e <__aeabi_fsub+0x2ea>
 8000c3c:	e76c      	b.n	8000b18 <__aeabi_fsub+0x1c4>
 8000c3e:	2502      	movs	r5, #2
 8000c40:	e6f2      	b.n	8000a28 <__aeabi_fsub+0xd4>
 8000c42:	4663      	mov	r3, ip
 8000c44:	2501      	movs	r5, #1
 8000c46:	1b98      	subs	r0, r3, r6
 8000c48:	e6ae      	b.n	80009a8 <__aeabi_fsub+0x54>
 8000c4a:	2320      	movs	r3, #32
 8000c4c:	4664      	mov	r4, ip
 8000c4e:	4660      	mov	r0, ip
 8000c50:	40fc      	lsrs	r4, r7
 8000c52:	1bdf      	subs	r7, r3, r7
 8000c54:	40b8      	lsls	r0, r7
 8000c56:	1e43      	subs	r3, r0, #1
 8000c58:	4198      	sbcs	r0, r3
 8000c5a:	4320      	orrs	r0, r4
 8000c5c:	e79f      	b.n	8000b9e <__aeabi_fsub+0x24a>
 8000c5e:	0005      	movs	r5, r0
 8000c60:	e75e      	b.n	8000b20 <__aeabi_fsub+0x1cc>
 8000c62:	464b      	mov	r3, r9
 8000c64:	e771      	b.n	8000b4a <__aeabi_fsub+0x1f6>
 8000c66:	2320      	movs	r3, #32
 8000c68:	4665      	mov	r5, ip
 8000c6a:	4660      	mov	r0, ip
 8000c6c:	40cd      	lsrs	r5, r1
 8000c6e:	1a59      	subs	r1, r3, r1
 8000c70:	4088      	lsls	r0, r1
 8000c72:	1e43      	subs	r3, r0, #1
 8000c74:	4198      	sbcs	r0, r3
 8000c76:	4328      	orrs	r0, r5
 8000c78:	e71c      	b.n	8000ab4 <__aeabi_fsub+0x160>
 8000c7a:	4663      	mov	r3, ip
 8000c7c:	000c      	movs	r4, r1
 8000c7e:	2501      	movs	r5, #1
 8000c80:	1af0      	subs	r0, r6, r3
 8000c82:	e691      	b.n	80009a8 <__aeabi_fsub+0x54>
 8000c84:	2e00      	cmp	r6, #0
 8000c86:	d095      	beq.n	8000bb4 <__aeabi_fsub+0x260>
 8000c88:	000c      	movs	r4, r1
 8000c8a:	464f      	mov	r7, r9
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	e6ac      	b.n	80009ea <__aeabi_fsub+0x96>
 8000c90:	464b      	mov	r3, r9
 8000c92:	000d      	movs	r5, r1
 8000c94:	e744      	b.n	8000b20 <__aeabi_fsub+0x1cc>
 8000c96:	464f      	mov	r7, r9
 8000c98:	2200      	movs	r2, #0
 8000c9a:	e6a6      	b.n	80009ea <__aeabi_fsub+0x96>
 8000c9c:	fbffffff 	.word	0xfbffffff
 8000ca0:	7dffffff 	.word	0x7dffffff
 8000ca4:	2800      	cmp	r0, #0
 8000ca6:	d000      	beq.n	8000caa <__aeabi_fsub+0x356>
 8000ca8:	e736      	b.n	8000b18 <__aeabi_fsub+0x1c4>
 8000caa:	2400      	movs	r4, #0
 8000cac:	2700      	movs	r7, #0
 8000cae:	e69c      	b.n	80009ea <__aeabi_fsub+0x96>

08000cb0 <__aeabi_f2iz>:
 8000cb0:	0241      	lsls	r1, r0, #9
 8000cb2:	0042      	lsls	r2, r0, #1
 8000cb4:	0fc3      	lsrs	r3, r0, #31
 8000cb6:	0a49      	lsrs	r1, r1, #9
 8000cb8:	2000      	movs	r0, #0
 8000cba:	0e12      	lsrs	r2, r2, #24
 8000cbc:	2a7e      	cmp	r2, #126	; 0x7e
 8000cbe:	dd03      	ble.n	8000cc8 <__aeabi_f2iz+0x18>
 8000cc0:	2a9d      	cmp	r2, #157	; 0x9d
 8000cc2:	dd02      	ble.n	8000cca <__aeabi_f2iz+0x1a>
 8000cc4:	4a09      	ldr	r2, [pc, #36]	; (8000cec <__aeabi_f2iz+0x3c>)
 8000cc6:	1898      	adds	r0, r3, r2
 8000cc8:	4770      	bx	lr
 8000cca:	2080      	movs	r0, #128	; 0x80
 8000ccc:	0400      	lsls	r0, r0, #16
 8000cce:	4301      	orrs	r1, r0
 8000cd0:	2a95      	cmp	r2, #149	; 0x95
 8000cd2:	dc07      	bgt.n	8000ce4 <__aeabi_f2iz+0x34>
 8000cd4:	2096      	movs	r0, #150	; 0x96
 8000cd6:	1a82      	subs	r2, r0, r2
 8000cd8:	40d1      	lsrs	r1, r2
 8000cda:	4248      	negs	r0, r1
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d1f3      	bne.n	8000cc8 <__aeabi_f2iz+0x18>
 8000ce0:	0008      	movs	r0, r1
 8000ce2:	e7f1      	b.n	8000cc8 <__aeabi_f2iz+0x18>
 8000ce4:	3a96      	subs	r2, #150	; 0x96
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	e7f7      	b.n	8000cda <__aeabi_f2iz+0x2a>
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	7fffffff 	.word	0x7fffffff

08000cf0 <__aeabi_i2f>:
 8000cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cf2:	2800      	cmp	r0, #0
 8000cf4:	d013      	beq.n	8000d1e <__aeabi_i2f+0x2e>
 8000cf6:	17c3      	asrs	r3, r0, #31
 8000cf8:	18c6      	adds	r6, r0, r3
 8000cfa:	405e      	eors	r6, r3
 8000cfc:	0fc4      	lsrs	r4, r0, #31
 8000cfe:	0030      	movs	r0, r6
 8000d00:	f001 ff34 	bl	8002b6c <__clzsi2>
 8000d04:	239e      	movs	r3, #158	; 0x9e
 8000d06:	0005      	movs	r5, r0
 8000d08:	1a1b      	subs	r3, r3, r0
 8000d0a:	2b96      	cmp	r3, #150	; 0x96
 8000d0c:	dc0f      	bgt.n	8000d2e <__aeabi_i2f+0x3e>
 8000d0e:	2808      	cmp	r0, #8
 8000d10:	dd01      	ble.n	8000d16 <__aeabi_i2f+0x26>
 8000d12:	3d08      	subs	r5, #8
 8000d14:	40ae      	lsls	r6, r5
 8000d16:	0276      	lsls	r6, r6, #9
 8000d18:	0a76      	lsrs	r6, r6, #9
 8000d1a:	b2d8      	uxtb	r0, r3
 8000d1c:	e002      	b.n	8000d24 <__aeabi_i2f+0x34>
 8000d1e:	2400      	movs	r4, #0
 8000d20:	2000      	movs	r0, #0
 8000d22:	2600      	movs	r6, #0
 8000d24:	05c0      	lsls	r0, r0, #23
 8000d26:	4330      	orrs	r0, r6
 8000d28:	07e4      	lsls	r4, r4, #31
 8000d2a:	4320      	orrs	r0, r4
 8000d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d2e:	2b99      	cmp	r3, #153	; 0x99
 8000d30:	dd0c      	ble.n	8000d4c <__aeabi_i2f+0x5c>
 8000d32:	2205      	movs	r2, #5
 8000d34:	0031      	movs	r1, r6
 8000d36:	1a12      	subs	r2, r2, r0
 8000d38:	40d1      	lsrs	r1, r2
 8000d3a:	000a      	movs	r2, r1
 8000d3c:	0001      	movs	r1, r0
 8000d3e:	0030      	movs	r0, r6
 8000d40:	311b      	adds	r1, #27
 8000d42:	4088      	lsls	r0, r1
 8000d44:	1e41      	subs	r1, r0, #1
 8000d46:	4188      	sbcs	r0, r1
 8000d48:	4302      	orrs	r2, r0
 8000d4a:	0016      	movs	r6, r2
 8000d4c:	2d05      	cmp	r5, #5
 8000d4e:	dc12      	bgt.n	8000d76 <__aeabi_i2f+0x86>
 8000d50:	0031      	movs	r1, r6
 8000d52:	4f0d      	ldr	r7, [pc, #52]	; (8000d88 <__aeabi_i2f+0x98>)
 8000d54:	4039      	ands	r1, r7
 8000d56:	0772      	lsls	r2, r6, #29
 8000d58:	d009      	beq.n	8000d6e <__aeabi_i2f+0x7e>
 8000d5a:	200f      	movs	r0, #15
 8000d5c:	4030      	ands	r0, r6
 8000d5e:	2804      	cmp	r0, #4
 8000d60:	d005      	beq.n	8000d6e <__aeabi_i2f+0x7e>
 8000d62:	3104      	adds	r1, #4
 8000d64:	014a      	lsls	r2, r1, #5
 8000d66:	d502      	bpl.n	8000d6e <__aeabi_i2f+0x7e>
 8000d68:	239f      	movs	r3, #159	; 0x9f
 8000d6a:	4039      	ands	r1, r7
 8000d6c:	1b5b      	subs	r3, r3, r5
 8000d6e:	0189      	lsls	r1, r1, #6
 8000d70:	0a4e      	lsrs	r6, r1, #9
 8000d72:	b2d8      	uxtb	r0, r3
 8000d74:	e7d6      	b.n	8000d24 <__aeabi_i2f+0x34>
 8000d76:	1f6a      	subs	r2, r5, #5
 8000d78:	4096      	lsls	r6, r2
 8000d7a:	0031      	movs	r1, r6
 8000d7c:	4f02      	ldr	r7, [pc, #8]	; (8000d88 <__aeabi_i2f+0x98>)
 8000d7e:	4039      	ands	r1, r7
 8000d80:	0772      	lsls	r2, r6, #29
 8000d82:	d0f4      	beq.n	8000d6e <__aeabi_i2f+0x7e>
 8000d84:	e7e9      	b.n	8000d5a <__aeabi_i2f+0x6a>
 8000d86:	46c0      	nop			; (mov r8, r8)
 8000d88:	fbffffff 	.word	0xfbffffff

08000d8c <__aeabi_dadd>:
 8000d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d8e:	464f      	mov	r7, r9
 8000d90:	4646      	mov	r6, r8
 8000d92:	46d6      	mov	lr, sl
 8000d94:	000d      	movs	r5, r1
 8000d96:	0004      	movs	r4, r0
 8000d98:	b5c0      	push	{r6, r7, lr}
 8000d9a:	001f      	movs	r7, r3
 8000d9c:	0011      	movs	r1, r2
 8000d9e:	0328      	lsls	r0, r5, #12
 8000da0:	0f62      	lsrs	r2, r4, #29
 8000da2:	0a40      	lsrs	r0, r0, #9
 8000da4:	4310      	orrs	r0, r2
 8000da6:	007a      	lsls	r2, r7, #1
 8000da8:	0d52      	lsrs	r2, r2, #21
 8000daa:	00e3      	lsls	r3, r4, #3
 8000dac:	033c      	lsls	r4, r7, #12
 8000dae:	4691      	mov	r9, r2
 8000db0:	0a64      	lsrs	r4, r4, #9
 8000db2:	0ffa      	lsrs	r2, r7, #31
 8000db4:	0f4f      	lsrs	r7, r1, #29
 8000db6:	006e      	lsls	r6, r5, #1
 8000db8:	4327      	orrs	r7, r4
 8000dba:	4692      	mov	sl, r2
 8000dbc:	46b8      	mov	r8, r7
 8000dbe:	0d76      	lsrs	r6, r6, #21
 8000dc0:	0fed      	lsrs	r5, r5, #31
 8000dc2:	00c9      	lsls	r1, r1, #3
 8000dc4:	4295      	cmp	r5, r2
 8000dc6:	d100      	bne.n	8000dca <__aeabi_dadd+0x3e>
 8000dc8:	e099      	b.n	8000efe <__aeabi_dadd+0x172>
 8000dca:	464c      	mov	r4, r9
 8000dcc:	1b34      	subs	r4, r6, r4
 8000dce:	46a4      	mov	ip, r4
 8000dd0:	2c00      	cmp	r4, #0
 8000dd2:	dc00      	bgt.n	8000dd6 <__aeabi_dadd+0x4a>
 8000dd4:	e07c      	b.n	8000ed0 <__aeabi_dadd+0x144>
 8000dd6:	464a      	mov	r2, r9
 8000dd8:	2a00      	cmp	r2, #0
 8000dda:	d100      	bne.n	8000dde <__aeabi_dadd+0x52>
 8000ddc:	e0b8      	b.n	8000f50 <__aeabi_dadd+0x1c4>
 8000dde:	4ac5      	ldr	r2, [pc, #788]	; (80010f4 <__aeabi_dadd+0x368>)
 8000de0:	4296      	cmp	r6, r2
 8000de2:	d100      	bne.n	8000de6 <__aeabi_dadd+0x5a>
 8000de4:	e11c      	b.n	8001020 <__aeabi_dadd+0x294>
 8000de6:	2280      	movs	r2, #128	; 0x80
 8000de8:	003c      	movs	r4, r7
 8000dea:	0412      	lsls	r2, r2, #16
 8000dec:	4314      	orrs	r4, r2
 8000dee:	46a0      	mov	r8, r4
 8000df0:	4662      	mov	r2, ip
 8000df2:	2a38      	cmp	r2, #56	; 0x38
 8000df4:	dd00      	ble.n	8000df8 <__aeabi_dadd+0x6c>
 8000df6:	e161      	b.n	80010bc <__aeabi_dadd+0x330>
 8000df8:	2a1f      	cmp	r2, #31
 8000dfa:	dd00      	ble.n	8000dfe <__aeabi_dadd+0x72>
 8000dfc:	e1cc      	b.n	8001198 <__aeabi_dadd+0x40c>
 8000dfe:	4664      	mov	r4, ip
 8000e00:	2220      	movs	r2, #32
 8000e02:	1b12      	subs	r2, r2, r4
 8000e04:	4644      	mov	r4, r8
 8000e06:	4094      	lsls	r4, r2
 8000e08:	000f      	movs	r7, r1
 8000e0a:	46a1      	mov	r9, r4
 8000e0c:	4664      	mov	r4, ip
 8000e0e:	4091      	lsls	r1, r2
 8000e10:	40e7      	lsrs	r7, r4
 8000e12:	464c      	mov	r4, r9
 8000e14:	1e4a      	subs	r2, r1, #1
 8000e16:	4191      	sbcs	r1, r2
 8000e18:	433c      	orrs	r4, r7
 8000e1a:	4642      	mov	r2, r8
 8000e1c:	4321      	orrs	r1, r4
 8000e1e:	4664      	mov	r4, ip
 8000e20:	40e2      	lsrs	r2, r4
 8000e22:	1a80      	subs	r0, r0, r2
 8000e24:	1a5c      	subs	r4, r3, r1
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	419b      	sbcs	r3, r3
 8000e2a:	425f      	negs	r7, r3
 8000e2c:	1bc7      	subs	r7, r0, r7
 8000e2e:	023b      	lsls	r3, r7, #8
 8000e30:	d400      	bmi.n	8000e34 <__aeabi_dadd+0xa8>
 8000e32:	e0d0      	b.n	8000fd6 <__aeabi_dadd+0x24a>
 8000e34:	027f      	lsls	r7, r7, #9
 8000e36:	0a7f      	lsrs	r7, r7, #9
 8000e38:	2f00      	cmp	r7, #0
 8000e3a:	d100      	bne.n	8000e3e <__aeabi_dadd+0xb2>
 8000e3c:	e0ff      	b.n	800103e <__aeabi_dadd+0x2b2>
 8000e3e:	0038      	movs	r0, r7
 8000e40:	f001 fe94 	bl	8002b6c <__clzsi2>
 8000e44:	0001      	movs	r1, r0
 8000e46:	3908      	subs	r1, #8
 8000e48:	2320      	movs	r3, #32
 8000e4a:	0022      	movs	r2, r4
 8000e4c:	1a5b      	subs	r3, r3, r1
 8000e4e:	408f      	lsls	r7, r1
 8000e50:	40da      	lsrs	r2, r3
 8000e52:	408c      	lsls	r4, r1
 8000e54:	4317      	orrs	r7, r2
 8000e56:	42b1      	cmp	r1, r6
 8000e58:	da00      	bge.n	8000e5c <__aeabi_dadd+0xd0>
 8000e5a:	e0ff      	b.n	800105c <__aeabi_dadd+0x2d0>
 8000e5c:	1b89      	subs	r1, r1, r6
 8000e5e:	1c4b      	adds	r3, r1, #1
 8000e60:	2b1f      	cmp	r3, #31
 8000e62:	dd00      	ble.n	8000e66 <__aeabi_dadd+0xda>
 8000e64:	e0a8      	b.n	8000fb8 <__aeabi_dadd+0x22c>
 8000e66:	2220      	movs	r2, #32
 8000e68:	0039      	movs	r1, r7
 8000e6a:	1ad2      	subs	r2, r2, r3
 8000e6c:	0020      	movs	r0, r4
 8000e6e:	4094      	lsls	r4, r2
 8000e70:	4091      	lsls	r1, r2
 8000e72:	40d8      	lsrs	r0, r3
 8000e74:	1e62      	subs	r2, r4, #1
 8000e76:	4194      	sbcs	r4, r2
 8000e78:	40df      	lsrs	r7, r3
 8000e7a:	2600      	movs	r6, #0
 8000e7c:	4301      	orrs	r1, r0
 8000e7e:	430c      	orrs	r4, r1
 8000e80:	0763      	lsls	r3, r4, #29
 8000e82:	d009      	beq.n	8000e98 <__aeabi_dadd+0x10c>
 8000e84:	230f      	movs	r3, #15
 8000e86:	4023      	ands	r3, r4
 8000e88:	2b04      	cmp	r3, #4
 8000e8a:	d005      	beq.n	8000e98 <__aeabi_dadd+0x10c>
 8000e8c:	1d23      	adds	r3, r4, #4
 8000e8e:	42a3      	cmp	r3, r4
 8000e90:	41a4      	sbcs	r4, r4
 8000e92:	4264      	negs	r4, r4
 8000e94:	193f      	adds	r7, r7, r4
 8000e96:	001c      	movs	r4, r3
 8000e98:	023b      	lsls	r3, r7, #8
 8000e9a:	d400      	bmi.n	8000e9e <__aeabi_dadd+0x112>
 8000e9c:	e09e      	b.n	8000fdc <__aeabi_dadd+0x250>
 8000e9e:	4b95      	ldr	r3, [pc, #596]	; (80010f4 <__aeabi_dadd+0x368>)
 8000ea0:	3601      	adds	r6, #1
 8000ea2:	429e      	cmp	r6, r3
 8000ea4:	d100      	bne.n	8000ea8 <__aeabi_dadd+0x11c>
 8000ea6:	e0b7      	b.n	8001018 <__aeabi_dadd+0x28c>
 8000ea8:	4a93      	ldr	r2, [pc, #588]	; (80010f8 <__aeabi_dadd+0x36c>)
 8000eaa:	08e4      	lsrs	r4, r4, #3
 8000eac:	4017      	ands	r7, r2
 8000eae:	077b      	lsls	r3, r7, #29
 8000eb0:	0571      	lsls	r1, r6, #21
 8000eb2:	027f      	lsls	r7, r7, #9
 8000eb4:	4323      	orrs	r3, r4
 8000eb6:	0b3f      	lsrs	r7, r7, #12
 8000eb8:	0d4a      	lsrs	r2, r1, #21
 8000eba:	0512      	lsls	r2, r2, #20
 8000ebc:	433a      	orrs	r2, r7
 8000ebe:	07ed      	lsls	r5, r5, #31
 8000ec0:	432a      	orrs	r2, r5
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	0011      	movs	r1, r2
 8000ec6:	bce0      	pop	{r5, r6, r7}
 8000ec8:	46ba      	mov	sl, r7
 8000eca:	46b1      	mov	r9, r6
 8000ecc:	46a8      	mov	r8, r5
 8000ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ed0:	2c00      	cmp	r4, #0
 8000ed2:	d04b      	beq.n	8000f6c <__aeabi_dadd+0x1e0>
 8000ed4:	464c      	mov	r4, r9
 8000ed6:	1ba4      	subs	r4, r4, r6
 8000ed8:	46a4      	mov	ip, r4
 8000eda:	2e00      	cmp	r6, #0
 8000edc:	d000      	beq.n	8000ee0 <__aeabi_dadd+0x154>
 8000ede:	e123      	b.n	8001128 <__aeabi_dadd+0x39c>
 8000ee0:	0004      	movs	r4, r0
 8000ee2:	431c      	orrs	r4, r3
 8000ee4:	d100      	bne.n	8000ee8 <__aeabi_dadd+0x15c>
 8000ee6:	e1af      	b.n	8001248 <__aeabi_dadd+0x4bc>
 8000ee8:	4662      	mov	r2, ip
 8000eea:	1e54      	subs	r4, r2, #1
 8000eec:	2a01      	cmp	r2, #1
 8000eee:	d100      	bne.n	8000ef2 <__aeabi_dadd+0x166>
 8000ef0:	e215      	b.n	800131e <__aeabi_dadd+0x592>
 8000ef2:	4d80      	ldr	r5, [pc, #512]	; (80010f4 <__aeabi_dadd+0x368>)
 8000ef4:	45ac      	cmp	ip, r5
 8000ef6:	d100      	bne.n	8000efa <__aeabi_dadd+0x16e>
 8000ef8:	e1c8      	b.n	800128c <__aeabi_dadd+0x500>
 8000efa:	46a4      	mov	ip, r4
 8000efc:	e11b      	b.n	8001136 <__aeabi_dadd+0x3aa>
 8000efe:	464a      	mov	r2, r9
 8000f00:	1ab2      	subs	r2, r6, r2
 8000f02:	4694      	mov	ip, r2
 8000f04:	2a00      	cmp	r2, #0
 8000f06:	dc00      	bgt.n	8000f0a <__aeabi_dadd+0x17e>
 8000f08:	e0ac      	b.n	8001064 <__aeabi_dadd+0x2d8>
 8000f0a:	464a      	mov	r2, r9
 8000f0c:	2a00      	cmp	r2, #0
 8000f0e:	d043      	beq.n	8000f98 <__aeabi_dadd+0x20c>
 8000f10:	4a78      	ldr	r2, [pc, #480]	; (80010f4 <__aeabi_dadd+0x368>)
 8000f12:	4296      	cmp	r6, r2
 8000f14:	d100      	bne.n	8000f18 <__aeabi_dadd+0x18c>
 8000f16:	e1af      	b.n	8001278 <__aeabi_dadd+0x4ec>
 8000f18:	2280      	movs	r2, #128	; 0x80
 8000f1a:	003c      	movs	r4, r7
 8000f1c:	0412      	lsls	r2, r2, #16
 8000f1e:	4314      	orrs	r4, r2
 8000f20:	46a0      	mov	r8, r4
 8000f22:	4662      	mov	r2, ip
 8000f24:	2a38      	cmp	r2, #56	; 0x38
 8000f26:	dc67      	bgt.n	8000ff8 <__aeabi_dadd+0x26c>
 8000f28:	2a1f      	cmp	r2, #31
 8000f2a:	dc00      	bgt.n	8000f2e <__aeabi_dadd+0x1a2>
 8000f2c:	e15f      	b.n	80011ee <__aeabi_dadd+0x462>
 8000f2e:	4647      	mov	r7, r8
 8000f30:	3a20      	subs	r2, #32
 8000f32:	40d7      	lsrs	r7, r2
 8000f34:	4662      	mov	r2, ip
 8000f36:	2a20      	cmp	r2, #32
 8000f38:	d005      	beq.n	8000f46 <__aeabi_dadd+0x1ba>
 8000f3a:	4664      	mov	r4, ip
 8000f3c:	2240      	movs	r2, #64	; 0x40
 8000f3e:	1b12      	subs	r2, r2, r4
 8000f40:	4644      	mov	r4, r8
 8000f42:	4094      	lsls	r4, r2
 8000f44:	4321      	orrs	r1, r4
 8000f46:	1e4a      	subs	r2, r1, #1
 8000f48:	4191      	sbcs	r1, r2
 8000f4a:	000c      	movs	r4, r1
 8000f4c:	433c      	orrs	r4, r7
 8000f4e:	e057      	b.n	8001000 <__aeabi_dadd+0x274>
 8000f50:	003a      	movs	r2, r7
 8000f52:	430a      	orrs	r2, r1
 8000f54:	d100      	bne.n	8000f58 <__aeabi_dadd+0x1cc>
 8000f56:	e105      	b.n	8001164 <__aeabi_dadd+0x3d8>
 8000f58:	0022      	movs	r2, r4
 8000f5a:	3a01      	subs	r2, #1
 8000f5c:	2c01      	cmp	r4, #1
 8000f5e:	d100      	bne.n	8000f62 <__aeabi_dadd+0x1d6>
 8000f60:	e182      	b.n	8001268 <__aeabi_dadd+0x4dc>
 8000f62:	4c64      	ldr	r4, [pc, #400]	; (80010f4 <__aeabi_dadd+0x368>)
 8000f64:	45a4      	cmp	ip, r4
 8000f66:	d05b      	beq.n	8001020 <__aeabi_dadd+0x294>
 8000f68:	4694      	mov	ip, r2
 8000f6a:	e741      	b.n	8000df0 <__aeabi_dadd+0x64>
 8000f6c:	4c63      	ldr	r4, [pc, #396]	; (80010fc <__aeabi_dadd+0x370>)
 8000f6e:	1c77      	adds	r7, r6, #1
 8000f70:	4227      	tst	r7, r4
 8000f72:	d000      	beq.n	8000f76 <__aeabi_dadd+0x1ea>
 8000f74:	e0c4      	b.n	8001100 <__aeabi_dadd+0x374>
 8000f76:	0004      	movs	r4, r0
 8000f78:	431c      	orrs	r4, r3
 8000f7a:	2e00      	cmp	r6, #0
 8000f7c:	d000      	beq.n	8000f80 <__aeabi_dadd+0x1f4>
 8000f7e:	e169      	b.n	8001254 <__aeabi_dadd+0x4c8>
 8000f80:	2c00      	cmp	r4, #0
 8000f82:	d100      	bne.n	8000f86 <__aeabi_dadd+0x1fa>
 8000f84:	e1bf      	b.n	8001306 <__aeabi_dadd+0x57a>
 8000f86:	4644      	mov	r4, r8
 8000f88:	430c      	orrs	r4, r1
 8000f8a:	d000      	beq.n	8000f8e <__aeabi_dadd+0x202>
 8000f8c:	e1d0      	b.n	8001330 <__aeabi_dadd+0x5a4>
 8000f8e:	0742      	lsls	r2, r0, #29
 8000f90:	08db      	lsrs	r3, r3, #3
 8000f92:	4313      	orrs	r3, r2
 8000f94:	08c0      	lsrs	r0, r0, #3
 8000f96:	e029      	b.n	8000fec <__aeabi_dadd+0x260>
 8000f98:	003a      	movs	r2, r7
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	d100      	bne.n	8000fa0 <__aeabi_dadd+0x214>
 8000f9e:	e170      	b.n	8001282 <__aeabi_dadd+0x4f6>
 8000fa0:	4662      	mov	r2, ip
 8000fa2:	4664      	mov	r4, ip
 8000fa4:	3a01      	subs	r2, #1
 8000fa6:	2c01      	cmp	r4, #1
 8000fa8:	d100      	bne.n	8000fac <__aeabi_dadd+0x220>
 8000faa:	e0e0      	b.n	800116e <__aeabi_dadd+0x3e2>
 8000fac:	4c51      	ldr	r4, [pc, #324]	; (80010f4 <__aeabi_dadd+0x368>)
 8000fae:	45a4      	cmp	ip, r4
 8000fb0:	d100      	bne.n	8000fb4 <__aeabi_dadd+0x228>
 8000fb2:	e161      	b.n	8001278 <__aeabi_dadd+0x4ec>
 8000fb4:	4694      	mov	ip, r2
 8000fb6:	e7b4      	b.n	8000f22 <__aeabi_dadd+0x196>
 8000fb8:	003a      	movs	r2, r7
 8000fba:	391f      	subs	r1, #31
 8000fbc:	40ca      	lsrs	r2, r1
 8000fbe:	0011      	movs	r1, r2
 8000fc0:	2b20      	cmp	r3, #32
 8000fc2:	d003      	beq.n	8000fcc <__aeabi_dadd+0x240>
 8000fc4:	2240      	movs	r2, #64	; 0x40
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	409f      	lsls	r7, r3
 8000fca:	433c      	orrs	r4, r7
 8000fcc:	1e63      	subs	r3, r4, #1
 8000fce:	419c      	sbcs	r4, r3
 8000fd0:	2700      	movs	r7, #0
 8000fd2:	2600      	movs	r6, #0
 8000fd4:	430c      	orrs	r4, r1
 8000fd6:	0763      	lsls	r3, r4, #29
 8000fd8:	d000      	beq.n	8000fdc <__aeabi_dadd+0x250>
 8000fda:	e753      	b.n	8000e84 <__aeabi_dadd+0xf8>
 8000fdc:	46b4      	mov	ip, r6
 8000fde:	08e4      	lsrs	r4, r4, #3
 8000fe0:	077b      	lsls	r3, r7, #29
 8000fe2:	4323      	orrs	r3, r4
 8000fe4:	08f8      	lsrs	r0, r7, #3
 8000fe6:	4a43      	ldr	r2, [pc, #268]	; (80010f4 <__aeabi_dadd+0x368>)
 8000fe8:	4594      	cmp	ip, r2
 8000fea:	d01d      	beq.n	8001028 <__aeabi_dadd+0x29c>
 8000fec:	4662      	mov	r2, ip
 8000fee:	0307      	lsls	r7, r0, #12
 8000ff0:	0552      	lsls	r2, r2, #21
 8000ff2:	0b3f      	lsrs	r7, r7, #12
 8000ff4:	0d52      	lsrs	r2, r2, #21
 8000ff6:	e760      	b.n	8000eba <__aeabi_dadd+0x12e>
 8000ff8:	4644      	mov	r4, r8
 8000ffa:	430c      	orrs	r4, r1
 8000ffc:	1e62      	subs	r2, r4, #1
 8000ffe:	4194      	sbcs	r4, r2
 8001000:	18e4      	adds	r4, r4, r3
 8001002:	429c      	cmp	r4, r3
 8001004:	419b      	sbcs	r3, r3
 8001006:	425f      	negs	r7, r3
 8001008:	183f      	adds	r7, r7, r0
 800100a:	023b      	lsls	r3, r7, #8
 800100c:	d5e3      	bpl.n	8000fd6 <__aeabi_dadd+0x24a>
 800100e:	4b39      	ldr	r3, [pc, #228]	; (80010f4 <__aeabi_dadd+0x368>)
 8001010:	3601      	adds	r6, #1
 8001012:	429e      	cmp	r6, r3
 8001014:	d000      	beq.n	8001018 <__aeabi_dadd+0x28c>
 8001016:	e0b5      	b.n	8001184 <__aeabi_dadd+0x3f8>
 8001018:	0032      	movs	r2, r6
 800101a:	2700      	movs	r7, #0
 800101c:	2300      	movs	r3, #0
 800101e:	e74c      	b.n	8000eba <__aeabi_dadd+0x12e>
 8001020:	0742      	lsls	r2, r0, #29
 8001022:	08db      	lsrs	r3, r3, #3
 8001024:	4313      	orrs	r3, r2
 8001026:	08c0      	lsrs	r0, r0, #3
 8001028:	001a      	movs	r2, r3
 800102a:	4302      	orrs	r2, r0
 800102c:	d100      	bne.n	8001030 <__aeabi_dadd+0x2a4>
 800102e:	e1e1      	b.n	80013f4 <__aeabi_dadd+0x668>
 8001030:	2780      	movs	r7, #128	; 0x80
 8001032:	033f      	lsls	r7, r7, #12
 8001034:	4307      	orrs	r7, r0
 8001036:	033f      	lsls	r7, r7, #12
 8001038:	4a2e      	ldr	r2, [pc, #184]	; (80010f4 <__aeabi_dadd+0x368>)
 800103a:	0b3f      	lsrs	r7, r7, #12
 800103c:	e73d      	b.n	8000eba <__aeabi_dadd+0x12e>
 800103e:	0020      	movs	r0, r4
 8001040:	f001 fd94 	bl	8002b6c <__clzsi2>
 8001044:	0001      	movs	r1, r0
 8001046:	3118      	adds	r1, #24
 8001048:	291f      	cmp	r1, #31
 800104a:	dc00      	bgt.n	800104e <__aeabi_dadd+0x2c2>
 800104c:	e6fc      	b.n	8000e48 <__aeabi_dadd+0xbc>
 800104e:	3808      	subs	r0, #8
 8001050:	4084      	lsls	r4, r0
 8001052:	0027      	movs	r7, r4
 8001054:	2400      	movs	r4, #0
 8001056:	42b1      	cmp	r1, r6
 8001058:	db00      	blt.n	800105c <__aeabi_dadd+0x2d0>
 800105a:	e6ff      	b.n	8000e5c <__aeabi_dadd+0xd0>
 800105c:	4a26      	ldr	r2, [pc, #152]	; (80010f8 <__aeabi_dadd+0x36c>)
 800105e:	1a76      	subs	r6, r6, r1
 8001060:	4017      	ands	r7, r2
 8001062:	e70d      	b.n	8000e80 <__aeabi_dadd+0xf4>
 8001064:	2a00      	cmp	r2, #0
 8001066:	d02f      	beq.n	80010c8 <__aeabi_dadd+0x33c>
 8001068:	464a      	mov	r2, r9
 800106a:	1b92      	subs	r2, r2, r6
 800106c:	4694      	mov	ip, r2
 800106e:	2e00      	cmp	r6, #0
 8001070:	d100      	bne.n	8001074 <__aeabi_dadd+0x2e8>
 8001072:	e0ad      	b.n	80011d0 <__aeabi_dadd+0x444>
 8001074:	4a1f      	ldr	r2, [pc, #124]	; (80010f4 <__aeabi_dadd+0x368>)
 8001076:	4591      	cmp	r9, r2
 8001078:	d100      	bne.n	800107c <__aeabi_dadd+0x2f0>
 800107a:	e10f      	b.n	800129c <__aeabi_dadd+0x510>
 800107c:	2280      	movs	r2, #128	; 0x80
 800107e:	0412      	lsls	r2, r2, #16
 8001080:	4310      	orrs	r0, r2
 8001082:	4662      	mov	r2, ip
 8001084:	2a38      	cmp	r2, #56	; 0x38
 8001086:	dd00      	ble.n	800108a <__aeabi_dadd+0x2fe>
 8001088:	e10f      	b.n	80012aa <__aeabi_dadd+0x51e>
 800108a:	2a1f      	cmp	r2, #31
 800108c:	dd00      	ble.n	8001090 <__aeabi_dadd+0x304>
 800108e:	e180      	b.n	8001392 <__aeabi_dadd+0x606>
 8001090:	4664      	mov	r4, ip
 8001092:	2220      	movs	r2, #32
 8001094:	001e      	movs	r6, r3
 8001096:	1b12      	subs	r2, r2, r4
 8001098:	4667      	mov	r7, ip
 800109a:	0004      	movs	r4, r0
 800109c:	4093      	lsls	r3, r2
 800109e:	4094      	lsls	r4, r2
 80010a0:	40fe      	lsrs	r6, r7
 80010a2:	1e5a      	subs	r2, r3, #1
 80010a4:	4193      	sbcs	r3, r2
 80010a6:	40f8      	lsrs	r0, r7
 80010a8:	4334      	orrs	r4, r6
 80010aa:	431c      	orrs	r4, r3
 80010ac:	4480      	add	r8, r0
 80010ae:	1864      	adds	r4, r4, r1
 80010b0:	428c      	cmp	r4, r1
 80010b2:	41bf      	sbcs	r7, r7
 80010b4:	427f      	negs	r7, r7
 80010b6:	464e      	mov	r6, r9
 80010b8:	4447      	add	r7, r8
 80010ba:	e7a6      	b.n	800100a <__aeabi_dadd+0x27e>
 80010bc:	4642      	mov	r2, r8
 80010be:	430a      	orrs	r2, r1
 80010c0:	0011      	movs	r1, r2
 80010c2:	1e4a      	subs	r2, r1, #1
 80010c4:	4191      	sbcs	r1, r2
 80010c6:	e6ad      	b.n	8000e24 <__aeabi_dadd+0x98>
 80010c8:	4c0c      	ldr	r4, [pc, #48]	; (80010fc <__aeabi_dadd+0x370>)
 80010ca:	1c72      	adds	r2, r6, #1
 80010cc:	4222      	tst	r2, r4
 80010ce:	d000      	beq.n	80010d2 <__aeabi_dadd+0x346>
 80010d0:	e0a1      	b.n	8001216 <__aeabi_dadd+0x48a>
 80010d2:	0002      	movs	r2, r0
 80010d4:	431a      	orrs	r2, r3
 80010d6:	2e00      	cmp	r6, #0
 80010d8:	d000      	beq.n	80010dc <__aeabi_dadd+0x350>
 80010da:	e0fa      	b.n	80012d2 <__aeabi_dadd+0x546>
 80010dc:	2a00      	cmp	r2, #0
 80010de:	d100      	bne.n	80010e2 <__aeabi_dadd+0x356>
 80010e0:	e145      	b.n	800136e <__aeabi_dadd+0x5e2>
 80010e2:	003a      	movs	r2, r7
 80010e4:	430a      	orrs	r2, r1
 80010e6:	d000      	beq.n	80010ea <__aeabi_dadd+0x35e>
 80010e8:	e146      	b.n	8001378 <__aeabi_dadd+0x5ec>
 80010ea:	0742      	lsls	r2, r0, #29
 80010ec:	08db      	lsrs	r3, r3, #3
 80010ee:	4313      	orrs	r3, r2
 80010f0:	08c0      	lsrs	r0, r0, #3
 80010f2:	e77b      	b.n	8000fec <__aeabi_dadd+0x260>
 80010f4:	000007ff 	.word	0x000007ff
 80010f8:	ff7fffff 	.word	0xff7fffff
 80010fc:	000007fe 	.word	0x000007fe
 8001100:	4647      	mov	r7, r8
 8001102:	1a5c      	subs	r4, r3, r1
 8001104:	1bc2      	subs	r2, r0, r7
 8001106:	42a3      	cmp	r3, r4
 8001108:	41bf      	sbcs	r7, r7
 800110a:	427f      	negs	r7, r7
 800110c:	46b9      	mov	r9, r7
 800110e:	0017      	movs	r7, r2
 8001110:	464a      	mov	r2, r9
 8001112:	1abf      	subs	r7, r7, r2
 8001114:	023a      	lsls	r2, r7, #8
 8001116:	d500      	bpl.n	800111a <__aeabi_dadd+0x38e>
 8001118:	e08d      	b.n	8001236 <__aeabi_dadd+0x4aa>
 800111a:	0023      	movs	r3, r4
 800111c:	433b      	orrs	r3, r7
 800111e:	d000      	beq.n	8001122 <__aeabi_dadd+0x396>
 8001120:	e68a      	b.n	8000e38 <__aeabi_dadd+0xac>
 8001122:	2000      	movs	r0, #0
 8001124:	2500      	movs	r5, #0
 8001126:	e761      	b.n	8000fec <__aeabi_dadd+0x260>
 8001128:	4cb4      	ldr	r4, [pc, #720]	; (80013fc <__aeabi_dadd+0x670>)
 800112a:	45a1      	cmp	r9, r4
 800112c:	d100      	bne.n	8001130 <__aeabi_dadd+0x3a4>
 800112e:	e0ad      	b.n	800128c <__aeabi_dadd+0x500>
 8001130:	2480      	movs	r4, #128	; 0x80
 8001132:	0424      	lsls	r4, r4, #16
 8001134:	4320      	orrs	r0, r4
 8001136:	4664      	mov	r4, ip
 8001138:	2c38      	cmp	r4, #56	; 0x38
 800113a:	dc3d      	bgt.n	80011b8 <__aeabi_dadd+0x42c>
 800113c:	4662      	mov	r2, ip
 800113e:	2c1f      	cmp	r4, #31
 8001140:	dd00      	ble.n	8001144 <__aeabi_dadd+0x3b8>
 8001142:	e0b7      	b.n	80012b4 <__aeabi_dadd+0x528>
 8001144:	2520      	movs	r5, #32
 8001146:	001e      	movs	r6, r3
 8001148:	1b2d      	subs	r5, r5, r4
 800114a:	0004      	movs	r4, r0
 800114c:	40ab      	lsls	r3, r5
 800114e:	40ac      	lsls	r4, r5
 8001150:	40d6      	lsrs	r6, r2
 8001152:	40d0      	lsrs	r0, r2
 8001154:	4642      	mov	r2, r8
 8001156:	1e5d      	subs	r5, r3, #1
 8001158:	41ab      	sbcs	r3, r5
 800115a:	4334      	orrs	r4, r6
 800115c:	1a12      	subs	r2, r2, r0
 800115e:	4690      	mov	r8, r2
 8001160:	4323      	orrs	r3, r4
 8001162:	e02c      	b.n	80011be <__aeabi_dadd+0x432>
 8001164:	0742      	lsls	r2, r0, #29
 8001166:	08db      	lsrs	r3, r3, #3
 8001168:	4313      	orrs	r3, r2
 800116a:	08c0      	lsrs	r0, r0, #3
 800116c:	e73b      	b.n	8000fe6 <__aeabi_dadd+0x25a>
 800116e:	185c      	adds	r4, r3, r1
 8001170:	429c      	cmp	r4, r3
 8001172:	419b      	sbcs	r3, r3
 8001174:	4440      	add	r0, r8
 8001176:	425b      	negs	r3, r3
 8001178:	18c7      	adds	r7, r0, r3
 800117a:	2601      	movs	r6, #1
 800117c:	023b      	lsls	r3, r7, #8
 800117e:	d400      	bmi.n	8001182 <__aeabi_dadd+0x3f6>
 8001180:	e729      	b.n	8000fd6 <__aeabi_dadd+0x24a>
 8001182:	2602      	movs	r6, #2
 8001184:	4a9e      	ldr	r2, [pc, #632]	; (8001400 <__aeabi_dadd+0x674>)
 8001186:	0863      	lsrs	r3, r4, #1
 8001188:	4017      	ands	r7, r2
 800118a:	2201      	movs	r2, #1
 800118c:	4014      	ands	r4, r2
 800118e:	431c      	orrs	r4, r3
 8001190:	07fb      	lsls	r3, r7, #31
 8001192:	431c      	orrs	r4, r3
 8001194:	087f      	lsrs	r7, r7, #1
 8001196:	e673      	b.n	8000e80 <__aeabi_dadd+0xf4>
 8001198:	4644      	mov	r4, r8
 800119a:	3a20      	subs	r2, #32
 800119c:	40d4      	lsrs	r4, r2
 800119e:	4662      	mov	r2, ip
 80011a0:	2a20      	cmp	r2, #32
 80011a2:	d005      	beq.n	80011b0 <__aeabi_dadd+0x424>
 80011a4:	4667      	mov	r7, ip
 80011a6:	2240      	movs	r2, #64	; 0x40
 80011a8:	1bd2      	subs	r2, r2, r7
 80011aa:	4647      	mov	r7, r8
 80011ac:	4097      	lsls	r7, r2
 80011ae:	4339      	orrs	r1, r7
 80011b0:	1e4a      	subs	r2, r1, #1
 80011b2:	4191      	sbcs	r1, r2
 80011b4:	4321      	orrs	r1, r4
 80011b6:	e635      	b.n	8000e24 <__aeabi_dadd+0x98>
 80011b8:	4303      	orrs	r3, r0
 80011ba:	1e58      	subs	r0, r3, #1
 80011bc:	4183      	sbcs	r3, r0
 80011be:	1acc      	subs	r4, r1, r3
 80011c0:	42a1      	cmp	r1, r4
 80011c2:	41bf      	sbcs	r7, r7
 80011c4:	4643      	mov	r3, r8
 80011c6:	427f      	negs	r7, r7
 80011c8:	4655      	mov	r5, sl
 80011ca:	464e      	mov	r6, r9
 80011cc:	1bdf      	subs	r7, r3, r7
 80011ce:	e62e      	b.n	8000e2e <__aeabi_dadd+0xa2>
 80011d0:	0002      	movs	r2, r0
 80011d2:	431a      	orrs	r2, r3
 80011d4:	d100      	bne.n	80011d8 <__aeabi_dadd+0x44c>
 80011d6:	e0bd      	b.n	8001354 <__aeabi_dadd+0x5c8>
 80011d8:	4662      	mov	r2, ip
 80011da:	4664      	mov	r4, ip
 80011dc:	3a01      	subs	r2, #1
 80011de:	2c01      	cmp	r4, #1
 80011e0:	d100      	bne.n	80011e4 <__aeabi_dadd+0x458>
 80011e2:	e0e5      	b.n	80013b0 <__aeabi_dadd+0x624>
 80011e4:	4c85      	ldr	r4, [pc, #532]	; (80013fc <__aeabi_dadd+0x670>)
 80011e6:	45a4      	cmp	ip, r4
 80011e8:	d058      	beq.n	800129c <__aeabi_dadd+0x510>
 80011ea:	4694      	mov	ip, r2
 80011ec:	e749      	b.n	8001082 <__aeabi_dadd+0x2f6>
 80011ee:	4664      	mov	r4, ip
 80011f0:	2220      	movs	r2, #32
 80011f2:	1b12      	subs	r2, r2, r4
 80011f4:	4644      	mov	r4, r8
 80011f6:	4094      	lsls	r4, r2
 80011f8:	000f      	movs	r7, r1
 80011fa:	46a1      	mov	r9, r4
 80011fc:	4664      	mov	r4, ip
 80011fe:	4091      	lsls	r1, r2
 8001200:	40e7      	lsrs	r7, r4
 8001202:	464c      	mov	r4, r9
 8001204:	1e4a      	subs	r2, r1, #1
 8001206:	4191      	sbcs	r1, r2
 8001208:	433c      	orrs	r4, r7
 800120a:	4642      	mov	r2, r8
 800120c:	430c      	orrs	r4, r1
 800120e:	4661      	mov	r1, ip
 8001210:	40ca      	lsrs	r2, r1
 8001212:	1880      	adds	r0, r0, r2
 8001214:	e6f4      	b.n	8001000 <__aeabi_dadd+0x274>
 8001216:	4c79      	ldr	r4, [pc, #484]	; (80013fc <__aeabi_dadd+0x670>)
 8001218:	42a2      	cmp	r2, r4
 800121a:	d100      	bne.n	800121e <__aeabi_dadd+0x492>
 800121c:	e6fd      	b.n	800101a <__aeabi_dadd+0x28e>
 800121e:	1859      	adds	r1, r3, r1
 8001220:	4299      	cmp	r1, r3
 8001222:	419b      	sbcs	r3, r3
 8001224:	4440      	add	r0, r8
 8001226:	425f      	negs	r7, r3
 8001228:	19c7      	adds	r7, r0, r7
 800122a:	07fc      	lsls	r4, r7, #31
 800122c:	0849      	lsrs	r1, r1, #1
 800122e:	0016      	movs	r6, r2
 8001230:	430c      	orrs	r4, r1
 8001232:	087f      	lsrs	r7, r7, #1
 8001234:	e6cf      	b.n	8000fd6 <__aeabi_dadd+0x24a>
 8001236:	1acc      	subs	r4, r1, r3
 8001238:	42a1      	cmp	r1, r4
 800123a:	41bf      	sbcs	r7, r7
 800123c:	4643      	mov	r3, r8
 800123e:	427f      	negs	r7, r7
 8001240:	1a18      	subs	r0, r3, r0
 8001242:	4655      	mov	r5, sl
 8001244:	1bc7      	subs	r7, r0, r7
 8001246:	e5f7      	b.n	8000e38 <__aeabi_dadd+0xac>
 8001248:	08c9      	lsrs	r1, r1, #3
 800124a:	077b      	lsls	r3, r7, #29
 800124c:	4655      	mov	r5, sl
 800124e:	430b      	orrs	r3, r1
 8001250:	08f8      	lsrs	r0, r7, #3
 8001252:	e6c8      	b.n	8000fe6 <__aeabi_dadd+0x25a>
 8001254:	2c00      	cmp	r4, #0
 8001256:	d000      	beq.n	800125a <__aeabi_dadd+0x4ce>
 8001258:	e081      	b.n	800135e <__aeabi_dadd+0x5d2>
 800125a:	4643      	mov	r3, r8
 800125c:	430b      	orrs	r3, r1
 800125e:	d115      	bne.n	800128c <__aeabi_dadd+0x500>
 8001260:	2080      	movs	r0, #128	; 0x80
 8001262:	2500      	movs	r5, #0
 8001264:	0300      	lsls	r0, r0, #12
 8001266:	e6e3      	b.n	8001030 <__aeabi_dadd+0x2a4>
 8001268:	1a5c      	subs	r4, r3, r1
 800126a:	42a3      	cmp	r3, r4
 800126c:	419b      	sbcs	r3, r3
 800126e:	1bc7      	subs	r7, r0, r7
 8001270:	425b      	negs	r3, r3
 8001272:	2601      	movs	r6, #1
 8001274:	1aff      	subs	r7, r7, r3
 8001276:	e5da      	b.n	8000e2e <__aeabi_dadd+0xa2>
 8001278:	0742      	lsls	r2, r0, #29
 800127a:	08db      	lsrs	r3, r3, #3
 800127c:	4313      	orrs	r3, r2
 800127e:	08c0      	lsrs	r0, r0, #3
 8001280:	e6d2      	b.n	8001028 <__aeabi_dadd+0x29c>
 8001282:	0742      	lsls	r2, r0, #29
 8001284:	08db      	lsrs	r3, r3, #3
 8001286:	4313      	orrs	r3, r2
 8001288:	08c0      	lsrs	r0, r0, #3
 800128a:	e6ac      	b.n	8000fe6 <__aeabi_dadd+0x25a>
 800128c:	4643      	mov	r3, r8
 800128e:	4642      	mov	r2, r8
 8001290:	08c9      	lsrs	r1, r1, #3
 8001292:	075b      	lsls	r3, r3, #29
 8001294:	4655      	mov	r5, sl
 8001296:	430b      	orrs	r3, r1
 8001298:	08d0      	lsrs	r0, r2, #3
 800129a:	e6c5      	b.n	8001028 <__aeabi_dadd+0x29c>
 800129c:	4643      	mov	r3, r8
 800129e:	4642      	mov	r2, r8
 80012a0:	075b      	lsls	r3, r3, #29
 80012a2:	08c9      	lsrs	r1, r1, #3
 80012a4:	430b      	orrs	r3, r1
 80012a6:	08d0      	lsrs	r0, r2, #3
 80012a8:	e6be      	b.n	8001028 <__aeabi_dadd+0x29c>
 80012aa:	4303      	orrs	r3, r0
 80012ac:	001c      	movs	r4, r3
 80012ae:	1e63      	subs	r3, r4, #1
 80012b0:	419c      	sbcs	r4, r3
 80012b2:	e6fc      	b.n	80010ae <__aeabi_dadd+0x322>
 80012b4:	0002      	movs	r2, r0
 80012b6:	3c20      	subs	r4, #32
 80012b8:	40e2      	lsrs	r2, r4
 80012ba:	0014      	movs	r4, r2
 80012bc:	4662      	mov	r2, ip
 80012be:	2a20      	cmp	r2, #32
 80012c0:	d003      	beq.n	80012ca <__aeabi_dadd+0x53e>
 80012c2:	2540      	movs	r5, #64	; 0x40
 80012c4:	1aad      	subs	r5, r5, r2
 80012c6:	40a8      	lsls	r0, r5
 80012c8:	4303      	orrs	r3, r0
 80012ca:	1e58      	subs	r0, r3, #1
 80012cc:	4183      	sbcs	r3, r0
 80012ce:	4323      	orrs	r3, r4
 80012d0:	e775      	b.n	80011be <__aeabi_dadd+0x432>
 80012d2:	2a00      	cmp	r2, #0
 80012d4:	d0e2      	beq.n	800129c <__aeabi_dadd+0x510>
 80012d6:	003a      	movs	r2, r7
 80012d8:	430a      	orrs	r2, r1
 80012da:	d0cd      	beq.n	8001278 <__aeabi_dadd+0x4ec>
 80012dc:	0742      	lsls	r2, r0, #29
 80012de:	08db      	lsrs	r3, r3, #3
 80012e0:	4313      	orrs	r3, r2
 80012e2:	2280      	movs	r2, #128	; 0x80
 80012e4:	08c0      	lsrs	r0, r0, #3
 80012e6:	0312      	lsls	r2, r2, #12
 80012e8:	4210      	tst	r0, r2
 80012ea:	d006      	beq.n	80012fa <__aeabi_dadd+0x56e>
 80012ec:	08fc      	lsrs	r4, r7, #3
 80012ee:	4214      	tst	r4, r2
 80012f0:	d103      	bne.n	80012fa <__aeabi_dadd+0x56e>
 80012f2:	0020      	movs	r0, r4
 80012f4:	08cb      	lsrs	r3, r1, #3
 80012f6:	077a      	lsls	r2, r7, #29
 80012f8:	4313      	orrs	r3, r2
 80012fa:	0f5a      	lsrs	r2, r3, #29
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	0752      	lsls	r2, r2, #29
 8001300:	08db      	lsrs	r3, r3, #3
 8001302:	4313      	orrs	r3, r2
 8001304:	e690      	b.n	8001028 <__aeabi_dadd+0x29c>
 8001306:	4643      	mov	r3, r8
 8001308:	430b      	orrs	r3, r1
 800130a:	d100      	bne.n	800130e <__aeabi_dadd+0x582>
 800130c:	e709      	b.n	8001122 <__aeabi_dadd+0x396>
 800130e:	4643      	mov	r3, r8
 8001310:	4642      	mov	r2, r8
 8001312:	08c9      	lsrs	r1, r1, #3
 8001314:	075b      	lsls	r3, r3, #29
 8001316:	4655      	mov	r5, sl
 8001318:	430b      	orrs	r3, r1
 800131a:	08d0      	lsrs	r0, r2, #3
 800131c:	e666      	b.n	8000fec <__aeabi_dadd+0x260>
 800131e:	1acc      	subs	r4, r1, r3
 8001320:	42a1      	cmp	r1, r4
 8001322:	4189      	sbcs	r1, r1
 8001324:	1a3f      	subs	r7, r7, r0
 8001326:	4249      	negs	r1, r1
 8001328:	4655      	mov	r5, sl
 800132a:	2601      	movs	r6, #1
 800132c:	1a7f      	subs	r7, r7, r1
 800132e:	e57e      	b.n	8000e2e <__aeabi_dadd+0xa2>
 8001330:	4642      	mov	r2, r8
 8001332:	1a5c      	subs	r4, r3, r1
 8001334:	1a87      	subs	r7, r0, r2
 8001336:	42a3      	cmp	r3, r4
 8001338:	4192      	sbcs	r2, r2
 800133a:	4252      	negs	r2, r2
 800133c:	1abf      	subs	r7, r7, r2
 800133e:	023a      	lsls	r2, r7, #8
 8001340:	d53d      	bpl.n	80013be <__aeabi_dadd+0x632>
 8001342:	1acc      	subs	r4, r1, r3
 8001344:	42a1      	cmp	r1, r4
 8001346:	4189      	sbcs	r1, r1
 8001348:	4643      	mov	r3, r8
 800134a:	4249      	negs	r1, r1
 800134c:	1a1f      	subs	r7, r3, r0
 800134e:	4655      	mov	r5, sl
 8001350:	1a7f      	subs	r7, r7, r1
 8001352:	e595      	b.n	8000e80 <__aeabi_dadd+0xf4>
 8001354:	077b      	lsls	r3, r7, #29
 8001356:	08c9      	lsrs	r1, r1, #3
 8001358:	430b      	orrs	r3, r1
 800135a:	08f8      	lsrs	r0, r7, #3
 800135c:	e643      	b.n	8000fe6 <__aeabi_dadd+0x25a>
 800135e:	4644      	mov	r4, r8
 8001360:	08db      	lsrs	r3, r3, #3
 8001362:	430c      	orrs	r4, r1
 8001364:	d130      	bne.n	80013c8 <__aeabi_dadd+0x63c>
 8001366:	0742      	lsls	r2, r0, #29
 8001368:	4313      	orrs	r3, r2
 800136a:	08c0      	lsrs	r0, r0, #3
 800136c:	e65c      	b.n	8001028 <__aeabi_dadd+0x29c>
 800136e:	077b      	lsls	r3, r7, #29
 8001370:	08c9      	lsrs	r1, r1, #3
 8001372:	430b      	orrs	r3, r1
 8001374:	08f8      	lsrs	r0, r7, #3
 8001376:	e639      	b.n	8000fec <__aeabi_dadd+0x260>
 8001378:	185c      	adds	r4, r3, r1
 800137a:	429c      	cmp	r4, r3
 800137c:	419b      	sbcs	r3, r3
 800137e:	4440      	add	r0, r8
 8001380:	425b      	negs	r3, r3
 8001382:	18c7      	adds	r7, r0, r3
 8001384:	023b      	lsls	r3, r7, #8
 8001386:	d400      	bmi.n	800138a <__aeabi_dadd+0x5fe>
 8001388:	e625      	b.n	8000fd6 <__aeabi_dadd+0x24a>
 800138a:	4b1d      	ldr	r3, [pc, #116]	; (8001400 <__aeabi_dadd+0x674>)
 800138c:	2601      	movs	r6, #1
 800138e:	401f      	ands	r7, r3
 8001390:	e621      	b.n	8000fd6 <__aeabi_dadd+0x24a>
 8001392:	0004      	movs	r4, r0
 8001394:	3a20      	subs	r2, #32
 8001396:	40d4      	lsrs	r4, r2
 8001398:	4662      	mov	r2, ip
 800139a:	2a20      	cmp	r2, #32
 800139c:	d004      	beq.n	80013a8 <__aeabi_dadd+0x61c>
 800139e:	2240      	movs	r2, #64	; 0x40
 80013a0:	4666      	mov	r6, ip
 80013a2:	1b92      	subs	r2, r2, r6
 80013a4:	4090      	lsls	r0, r2
 80013a6:	4303      	orrs	r3, r0
 80013a8:	1e5a      	subs	r2, r3, #1
 80013aa:	4193      	sbcs	r3, r2
 80013ac:	431c      	orrs	r4, r3
 80013ae:	e67e      	b.n	80010ae <__aeabi_dadd+0x322>
 80013b0:	185c      	adds	r4, r3, r1
 80013b2:	428c      	cmp	r4, r1
 80013b4:	4189      	sbcs	r1, r1
 80013b6:	4440      	add	r0, r8
 80013b8:	4249      	negs	r1, r1
 80013ba:	1847      	adds	r7, r0, r1
 80013bc:	e6dd      	b.n	800117a <__aeabi_dadd+0x3ee>
 80013be:	0023      	movs	r3, r4
 80013c0:	433b      	orrs	r3, r7
 80013c2:	d100      	bne.n	80013c6 <__aeabi_dadd+0x63a>
 80013c4:	e6ad      	b.n	8001122 <__aeabi_dadd+0x396>
 80013c6:	e606      	b.n	8000fd6 <__aeabi_dadd+0x24a>
 80013c8:	0744      	lsls	r4, r0, #29
 80013ca:	4323      	orrs	r3, r4
 80013cc:	2480      	movs	r4, #128	; 0x80
 80013ce:	08c0      	lsrs	r0, r0, #3
 80013d0:	0324      	lsls	r4, r4, #12
 80013d2:	4220      	tst	r0, r4
 80013d4:	d008      	beq.n	80013e8 <__aeabi_dadd+0x65c>
 80013d6:	4642      	mov	r2, r8
 80013d8:	08d6      	lsrs	r6, r2, #3
 80013da:	4226      	tst	r6, r4
 80013dc:	d104      	bne.n	80013e8 <__aeabi_dadd+0x65c>
 80013de:	4655      	mov	r5, sl
 80013e0:	0030      	movs	r0, r6
 80013e2:	08cb      	lsrs	r3, r1, #3
 80013e4:	0751      	lsls	r1, r2, #29
 80013e6:	430b      	orrs	r3, r1
 80013e8:	0f5a      	lsrs	r2, r3, #29
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	08db      	lsrs	r3, r3, #3
 80013ee:	0752      	lsls	r2, r2, #29
 80013f0:	4313      	orrs	r3, r2
 80013f2:	e619      	b.n	8001028 <__aeabi_dadd+0x29c>
 80013f4:	2300      	movs	r3, #0
 80013f6:	4a01      	ldr	r2, [pc, #4]	; (80013fc <__aeabi_dadd+0x670>)
 80013f8:	001f      	movs	r7, r3
 80013fa:	e55e      	b.n	8000eba <__aeabi_dadd+0x12e>
 80013fc:	000007ff 	.word	0x000007ff
 8001400:	ff7fffff 	.word	0xff7fffff

08001404 <__aeabi_ddiv>:
 8001404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001406:	4657      	mov	r7, sl
 8001408:	464e      	mov	r6, r9
 800140a:	4645      	mov	r5, r8
 800140c:	46de      	mov	lr, fp
 800140e:	b5e0      	push	{r5, r6, r7, lr}
 8001410:	4681      	mov	r9, r0
 8001412:	0005      	movs	r5, r0
 8001414:	030c      	lsls	r4, r1, #12
 8001416:	0048      	lsls	r0, r1, #1
 8001418:	4692      	mov	sl, r2
 800141a:	001f      	movs	r7, r3
 800141c:	b085      	sub	sp, #20
 800141e:	0b24      	lsrs	r4, r4, #12
 8001420:	0d40      	lsrs	r0, r0, #21
 8001422:	0fce      	lsrs	r6, r1, #31
 8001424:	2800      	cmp	r0, #0
 8001426:	d100      	bne.n	800142a <__aeabi_ddiv+0x26>
 8001428:	e156      	b.n	80016d8 <__aeabi_ddiv+0x2d4>
 800142a:	4bd4      	ldr	r3, [pc, #848]	; (800177c <__aeabi_ddiv+0x378>)
 800142c:	4298      	cmp	r0, r3
 800142e:	d100      	bne.n	8001432 <__aeabi_ddiv+0x2e>
 8001430:	e172      	b.n	8001718 <__aeabi_ddiv+0x314>
 8001432:	0f6b      	lsrs	r3, r5, #29
 8001434:	00e4      	lsls	r4, r4, #3
 8001436:	431c      	orrs	r4, r3
 8001438:	2380      	movs	r3, #128	; 0x80
 800143a:	041b      	lsls	r3, r3, #16
 800143c:	4323      	orrs	r3, r4
 800143e:	4698      	mov	r8, r3
 8001440:	4bcf      	ldr	r3, [pc, #828]	; (8001780 <__aeabi_ddiv+0x37c>)
 8001442:	00ed      	lsls	r5, r5, #3
 8001444:	469b      	mov	fp, r3
 8001446:	2300      	movs	r3, #0
 8001448:	4699      	mov	r9, r3
 800144a:	4483      	add	fp, r0
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	033c      	lsls	r4, r7, #12
 8001450:	007b      	lsls	r3, r7, #1
 8001452:	4650      	mov	r0, sl
 8001454:	0b24      	lsrs	r4, r4, #12
 8001456:	0d5b      	lsrs	r3, r3, #21
 8001458:	0fff      	lsrs	r7, r7, #31
 800145a:	2b00      	cmp	r3, #0
 800145c:	d100      	bne.n	8001460 <__aeabi_ddiv+0x5c>
 800145e:	e11f      	b.n	80016a0 <__aeabi_ddiv+0x29c>
 8001460:	4ac6      	ldr	r2, [pc, #792]	; (800177c <__aeabi_ddiv+0x378>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d100      	bne.n	8001468 <__aeabi_ddiv+0x64>
 8001466:	e162      	b.n	800172e <__aeabi_ddiv+0x32a>
 8001468:	49c5      	ldr	r1, [pc, #788]	; (8001780 <__aeabi_ddiv+0x37c>)
 800146a:	0f42      	lsrs	r2, r0, #29
 800146c:	468c      	mov	ip, r1
 800146e:	00e4      	lsls	r4, r4, #3
 8001470:	4659      	mov	r1, fp
 8001472:	4314      	orrs	r4, r2
 8001474:	2280      	movs	r2, #128	; 0x80
 8001476:	4463      	add	r3, ip
 8001478:	0412      	lsls	r2, r2, #16
 800147a:	1acb      	subs	r3, r1, r3
 800147c:	4314      	orrs	r4, r2
 800147e:	469b      	mov	fp, r3
 8001480:	00c2      	lsls	r2, r0, #3
 8001482:	2000      	movs	r0, #0
 8001484:	0033      	movs	r3, r6
 8001486:	407b      	eors	r3, r7
 8001488:	469a      	mov	sl, r3
 800148a:	464b      	mov	r3, r9
 800148c:	2b0f      	cmp	r3, #15
 800148e:	d827      	bhi.n	80014e0 <__aeabi_ddiv+0xdc>
 8001490:	49bc      	ldr	r1, [pc, #752]	; (8001784 <__aeabi_ddiv+0x380>)
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	58cb      	ldr	r3, [r1, r3]
 8001496:	469f      	mov	pc, r3
 8001498:	46b2      	mov	sl, r6
 800149a:	9b00      	ldr	r3, [sp, #0]
 800149c:	2b02      	cmp	r3, #2
 800149e:	d016      	beq.n	80014ce <__aeabi_ddiv+0xca>
 80014a0:	2b03      	cmp	r3, #3
 80014a2:	d100      	bne.n	80014a6 <__aeabi_ddiv+0xa2>
 80014a4:	e28e      	b.n	80019c4 <__aeabi_ddiv+0x5c0>
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d000      	beq.n	80014ac <__aeabi_ddiv+0xa8>
 80014aa:	e0d9      	b.n	8001660 <__aeabi_ddiv+0x25c>
 80014ac:	2300      	movs	r3, #0
 80014ae:	2400      	movs	r4, #0
 80014b0:	2500      	movs	r5, #0
 80014b2:	4652      	mov	r2, sl
 80014b4:	051b      	lsls	r3, r3, #20
 80014b6:	4323      	orrs	r3, r4
 80014b8:	07d2      	lsls	r2, r2, #31
 80014ba:	4313      	orrs	r3, r2
 80014bc:	0028      	movs	r0, r5
 80014be:	0019      	movs	r1, r3
 80014c0:	b005      	add	sp, #20
 80014c2:	bcf0      	pop	{r4, r5, r6, r7}
 80014c4:	46bb      	mov	fp, r7
 80014c6:	46b2      	mov	sl, r6
 80014c8:	46a9      	mov	r9, r5
 80014ca:	46a0      	mov	r8, r4
 80014cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ce:	2400      	movs	r4, #0
 80014d0:	2500      	movs	r5, #0
 80014d2:	4baa      	ldr	r3, [pc, #680]	; (800177c <__aeabi_ddiv+0x378>)
 80014d4:	e7ed      	b.n	80014b2 <__aeabi_ddiv+0xae>
 80014d6:	46ba      	mov	sl, r7
 80014d8:	46a0      	mov	r8, r4
 80014da:	0015      	movs	r5, r2
 80014dc:	9000      	str	r0, [sp, #0]
 80014de:	e7dc      	b.n	800149a <__aeabi_ddiv+0x96>
 80014e0:	4544      	cmp	r4, r8
 80014e2:	d200      	bcs.n	80014e6 <__aeabi_ddiv+0xe2>
 80014e4:	e1c7      	b.n	8001876 <__aeabi_ddiv+0x472>
 80014e6:	d100      	bne.n	80014ea <__aeabi_ddiv+0xe6>
 80014e8:	e1c2      	b.n	8001870 <__aeabi_ddiv+0x46c>
 80014ea:	2301      	movs	r3, #1
 80014ec:	425b      	negs	r3, r3
 80014ee:	469c      	mov	ip, r3
 80014f0:	002e      	movs	r6, r5
 80014f2:	4640      	mov	r0, r8
 80014f4:	2500      	movs	r5, #0
 80014f6:	44e3      	add	fp, ip
 80014f8:	0223      	lsls	r3, r4, #8
 80014fa:	0e14      	lsrs	r4, r2, #24
 80014fc:	431c      	orrs	r4, r3
 80014fe:	0c1b      	lsrs	r3, r3, #16
 8001500:	4699      	mov	r9, r3
 8001502:	0423      	lsls	r3, r4, #16
 8001504:	0c1f      	lsrs	r7, r3, #16
 8001506:	0212      	lsls	r2, r2, #8
 8001508:	4649      	mov	r1, r9
 800150a:	9200      	str	r2, [sp, #0]
 800150c:	9701      	str	r7, [sp, #4]
 800150e:	f7fe fe9d 	bl	800024c <__aeabi_uidivmod>
 8001512:	0002      	movs	r2, r0
 8001514:	437a      	muls	r2, r7
 8001516:	040b      	lsls	r3, r1, #16
 8001518:	0c31      	lsrs	r1, r6, #16
 800151a:	4680      	mov	r8, r0
 800151c:	4319      	orrs	r1, r3
 800151e:	428a      	cmp	r2, r1
 8001520:	d907      	bls.n	8001532 <__aeabi_ddiv+0x12e>
 8001522:	2301      	movs	r3, #1
 8001524:	425b      	negs	r3, r3
 8001526:	469c      	mov	ip, r3
 8001528:	1909      	adds	r1, r1, r4
 800152a:	44e0      	add	r8, ip
 800152c:	428c      	cmp	r4, r1
 800152e:	d800      	bhi.n	8001532 <__aeabi_ddiv+0x12e>
 8001530:	e207      	b.n	8001942 <__aeabi_ddiv+0x53e>
 8001532:	1a88      	subs	r0, r1, r2
 8001534:	4649      	mov	r1, r9
 8001536:	f7fe fe89 	bl	800024c <__aeabi_uidivmod>
 800153a:	0409      	lsls	r1, r1, #16
 800153c:	468c      	mov	ip, r1
 800153e:	0431      	lsls	r1, r6, #16
 8001540:	4666      	mov	r6, ip
 8001542:	9a01      	ldr	r2, [sp, #4]
 8001544:	0c09      	lsrs	r1, r1, #16
 8001546:	4342      	muls	r2, r0
 8001548:	0003      	movs	r3, r0
 800154a:	4331      	orrs	r1, r6
 800154c:	428a      	cmp	r2, r1
 800154e:	d904      	bls.n	800155a <__aeabi_ddiv+0x156>
 8001550:	1909      	adds	r1, r1, r4
 8001552:	3b01      	subs	r3, #1
 8001554:	428c      	cmp	r4, r1
 8001556:	d800      	bhi.n	800155a <__aeabi_ddiv+0x156>
 8001558:	e1ed      	b.n	8001936 <__aeabi_ddiv+0x532>
 800155a:	1a88      	subs	r0, r1, r2
 800155c:	4642      	mov	r2, r8
 800155e:	0412      	lsls	r2, r2, #16
 8001560:	431a      	orrs	r2, r3
 8001562:	4690      	mov	r8, r2
 8001564:	4641      	mov	r1, r8
 8001566:	9b00      	ldr	r3, [sp, #0]
 8001568:	040e      	lsls	r6, r1, #16
 800156a:	0c1b      	lsrs	r3, r3, #16
 800156c:	001f      	movs	r7, r3
 800156e:	9302      	str	r3, [sp, #8]
 8001570:	9b00      	ldr	r3, [sp, #0]
 8001572:	0c36      	lsrs	r6, r6, #16
 8001574:	041b      	lsls	r3, r3, #16
 8001576:	0c19      	lsrs	r1, r3, #16
 8001578:	000b      	movs	r3, r1
 800157a:	4373      	muls	r3, r6
 800157c:	0c12      	lsrs	r2, r2, #16
 800157e:	437e      	muls	r6, r7
 8001580:	9103      	str	r1, [sp, #12]
 8001582:	4351      	muls	r1, r2
 8001584:	437a      	muls	r2, r7
 8001586:	0c1f      	lsrs	r7, r3, #16
 8001588:	46bc      	mov	ip, r7
 800158a:	1876      	adds	r6, r6, r1
 800158c:	4466      	add	r6, ip
 800158e:	42b1      	cmp	r1, r6
 8001590:	d903      	bls.n	800159a <__aeabi_ddiv+0x196>
 8001592:	2180      	movs	r1, #128	; 0x80
 8001594:	0249      	lsls	r1, r1, #9
 8001596:	468c      	mov	ip, r1
 8001598:	4462      	add	r2, ip
 800159a:	0c31      	lsrs	r1, r6, #16
 800159c:	188a      	adds	r2, r1, r2
 800159e:	0431      	lsls	r1, r6, #16
 80015a0:	041e      	lsls	r6, r3, #16
 80015a2:	0c36      	lsrs	r6, r6, #16
 80015a4:	198e      	adds	r6, r1, r6
 80015a6:	4290      	cmp	r0, r2
 80015a8:	d302      	bcc.n	80015b0 <__aeabi_ddiv+0x1ac>
 80015aa:	d112      	bne.n	80015d2 <__aeabi_ddiv+0x1ce>
 80015ac:	42b5      	cmp	r5, r6
 80015ae:	d210      	bcs.n	80015d2 <__aeabi_ddiv+0x1ce>
 80015b0:	4643      	mov	r3, r8
 80015b2:	1e59      	subs	r1, r3, #1
 80015b4:	9b00      	ldr	r3, [sp, #0]
 80015b6:	469c      	mov	ip, r3
 80015b8:	4465      	add	r5, ip
 80015ba:	001f      	movs	r7, r3
 80015bc:	429d      	cmp	r5, r3
 80015be:	419b      	sbcs	r3, r3
 80015c0:	425b      	negs	r3, r3
 80015c2:	191b      	adds	r3, r3, r4
 80015c4:	18c0      	adds	r0, r0, r3
 80015c6:	4284      	cmp	r4, r0
 80015c8:	d200      	bcs.n	80015cc <__aeabi_ddiv+0x1c8>
 80015ca:	e1a0      	b.n	800190e <__aeabi_ddiv+0x50a>
 80015cc:	d100      	bne.n	80015d0 <__aeabi_ddiv+0x1cc>
 80015ce:	e19b      	b.n	8001908 <__aeabi_ddiv+0x504>
 80015d0:	4688      	mov	r8, r1
 80015d2:	1bae      	subs	r6, r5, r6
 80015d4:	42b5      	cmp	r5, r6
 80015d6:	41ad      	sbcs	r5, r5
 80015d8:	1a80      	subs	r0, r0, r2
 80015da:	426d      	negs	r5, r5
 80015dc:	1b40      	subs	r0, r0, r5
 80015de:	4284      	cmp	r4, r0
 80015e0:	d100      	bne.n	80015e4 <__aeabi_ddiv+0x1e0>
 80015e2:	e1d5      	b.n	8001990 <__aeabi_ddiv+0x58c>
 80015e4:	4649      	mov	r1, r9
 80015e6:	f7fe fe31 	bl	800024c <__aeabi_uidivmod>
 80015ea:	9a01      	ldr	r2, [sp, #4]
 80015ec:	040b      	lsls	r3, r1, #16
 80015ee:	4342      	muls	r2, r0
 80015f0:	0c31      	lsrs	r1, r6, #16
 80015f2:	0005      	movs	r5, r0
 80015f4:	4319      	orrs	r1, r3
 80015f6:	428a      	cmp	r2, r1
 80015f8:	d900      	bls.n	80015fc <__aeabi_ddiv+0x1f8>
 80015fa:	e16c      	b.n	80018d6 <__aeabi_ddiv+0x4d2>
 80015fc:	1a88      	subs	r0, r1, r2
 80015fe:	4649      	mov	r1, r9
 8001600:	f7fe fe24 	bl	800024c <__aeabi_uidivmod>
 8001604:	9a01      	ldr	r2, [sp, #4]
 8001606:	0436      	lsls	r6, r6, #16
 8001608:	4342      	muls	r2, r0
 800160a:	0409      	lsls	r1, r1, #16
 800160c:	0c36      	lsrs	r6, r6, #16
 800160e:	0003      	movs	r3, r0
 8001610:	430e      	orrs	r6, r1
 8001612:	42b2      	cmp	r2, r6
 8001614:	d900      	bls.n	8001618 <__aeabi_ddiv+0x214>
 8001616:	e153      	b.n	80018c0 <__aeabi_ddiv+0x4bc>
 8001618:	9803      	ldr	r0, [sp, #12]
 800161a:	1ab6      	subs	r6, r6, r2
 800161c:	0002      	movs	r2, r0
 800161e:	042d      	lsls	r5, r5, #16
 8001620:	431d      	orrs	r5, r3
 8001622:	9f02      	ldr	r7, [sp, #8]
 8001624:	042b      	lsls	r3, r5, #16
 8001626:	0c1b      	lsrs	r3, r3, #16
 8001628:	435a      	muls	r2, r3
 800162a:	437b      	muls	r3, r7
 800162c:	469c      	mov	ip, r3
 800162e:	0c29      	lsrs	r1, r5, #16
 8001630:	4348      	muls	r0, r1
 8001632:	0c13      	lsrs	r3, r2, #16
 8001634:	4484      	add	ip, r0
 8001636:	4463      	add	r3, ip
 8001638:	4379      	muls	r1, r7
 800163a:	4298      	cmp	r0, r3
 800163c:	d903      	bls.n	8001646 <__aeabi_ddiv+0x242>
 800163e:	2080      	movs	r0, #128	; 0x80
 8001640:	0240      	lsls	r0, r0, #9
 8001642:	4684      	mov	ip, r0
 8001644:	4461      	add	r1, ip
 8001646:	0c18      	lsrs	r0, r3, #16
 8001648:	0412      	lsls	r2, r2, #16
 800164a:	041b      	lsls	r3, r3, #16
 800164c:	0c12      	lsrs	r2, r2, #16
 800164e:	1841      	adds	r1, r0, r1
 8001650:	189b      	adds	r3, r3, r2
 8001652:	428e      	cmp	r6, r1
 8001654:	d200      	bcs.n	8001658 <__aeabi_ddiv+0x254>
 8001656:	e0ff      	b.n	8001858 <__aeabi_ddiv+0x454>
 8001658:	d100      	bne.n	800165c <__aeabi_ddiv+0x258>
 800165a:	e0fa      	b.n	8001852 <__aeabi_ddiv+0x44e>
 800165c:	2301      	movs	r3, #1
 800165e:	431d      	orrs	r5, r3
 8001660:	4a49      	ldr	r2, [pc, #292]	; (8001788 <__aeabi_ddiv+0x384>)
 8001662:	445a      	add	r2, fp
 8001664:	2a00      	cmp	r2, #0
 8001666:	dc00      	bgt.n	800166a <__aeabi_ddiv+0x266>
 8001668:	e0aa      	b.n	80017c0 <__aeabi_ddiv+0x3bc>
 800166a:	076b      	lsls	r3, r5, #29
 800166c:	d000      	beq.n	8001670 <__aeabi_ddiv+0x26c>
 800166e:	e13d      	b.n	80018ec <__aeabi_ddiv+0x4e8>
 8001670:	08ed      	lsrs	r5, r5, #3
 8001672:	4643      	mov	r3, r8
 8001674:	01db      	lsls	r3, r3, #7
 8001676:	d506      	bpl.n	8001686 <__aeabi_ddiv+0x282>
 8001678:	4642      	mov	r2, r8
 800167a:	4b44      	ldr	r3, [pc, #272]	; (800178c <__aeabi_ddiv+0x388>)
 800167c:	401a      	ands	r2, r3
 800167e:	4690      	mov	r8, r2
 8001680:	2280      	movs	r2, #128	; 0x80
 8001682:	00d2      	lsls	r2, r2, #3
 8001684:	445a      	add	r2, fp
 8001686:	4b42      	ldr	r3, [pc, #264]	; (8001790 <__aeabi_ddiv+0x38c>)
 8001688:	429a      	cmp	r2, r3
 800168a:	dd00      	ble.n	800168e <__aeabi_ddiv+0x28a>
 800168c:	e71f      	b.n	80014ce <__aeabi_ddiv+0xca>
 800168e:	4643      	mov	r3, r8
 8001690:	075b      	lsls	r3, r3, #29
 8001692:	431d      	orrs	r5, r3
 8001694:	4643      	mov	r3, r8
 8001696:	0552      	lsls	r2, r2, #21
 8001698:	025c      	lsls	r4, r3, #9
 800169a:	0b24      	lsrs	r4, r4, #12
 800169c:	0d53      	lsrs	r3, r2, #21
 800169e:	e708      	b.n	80014b2 <__aeabi_ddiv+0xae>
 80016a0:	4652      	mov	r2, sl
 80016a2:	4322      	orrs	r2, r4
 80016a4:	d100      	bne.n	80016a8 <__aeabi_ddiv+0x2a4>
 80016a6:	e07b      	b.n	80017a0 <__aeabi_ddiv+0x39c>
 80016a8:	2c00      	cmp	r4, #0
 80016aa:	d100      	bne.n	80016ae <__aeabi_ddiv+0x2aa>
 80016ac:	e0fa      	b.n	80018a4 <__aeabi_ddiv+0x4a0>
 80016ae:	0020      	movs	r0, r4
 80016b0:	f001 fa5c 	bl	8002b6c <__clzsi2>
 80016b4:	0002      	movs	r2, r0
 80016b6:	3a0b      	subs	r2, #11
 80016b8:	231d      	movs	r3, #29
 80016ba:	0001      	movs	r1, r0
 80016bc:	1a9b      	subs	r3, r3, r2
 80016be:	4652      	mov	r2, sl
 80016c0:	3908      	subs	r1, #8
 80016c2:	40da      	lsrs	r2, r3
 80016c4:	408c      	lsls	r4, r1
 80016c6:	4314      	orrs	r4, r2
 80016c8:	4652      	mov	r2, sl
 80016ca:	408a      	lsls	r2, r1
 80016cc:	4b31      	ldr	r3, [pc, #196]	; (8001794 <__aeabi_ddiv+0x390>)
 80016ce:	4458      	add	r0, fp
 80016d0:	469b      	mov	fp, r3
 80016d2:	4483      	add	fp, r0
 80016d4:	2000      	movs	r0, #0
 80016d6:	e6d5      	b.n	8001484 <__aeabi_ddiv+0x80>
 80016d8:	464b      	mov	r3, r9
 80016da:	4323      	orrs	r3, r4
 80016dc:	4698      	mov	r8, r3
 80016de:	d044      	beq.n	800176a <__aeabi_ddiv+0x366>
 80016e0:	2c00      	cmp	r4, #0
 80016e2:	d100      	bne.n	80016e6 <__aeabi_ddiv+0x2e2>
 80016e4:	e0ce      	b.n	8001884 <__aeabi_ddiv+0x480>
 80016e6:	0020      	movs	r0, r4
 80016e8:	f001 fa40 	bl	8002b6c <__clzsi2>
 80016ec:	0001      	movs	r1, r0
 80016ee:	0002      	movs	r2, r0
 80016f0:	390b      	subs	r1, #11
 80016f2:	231d      	movs	r3, #29
 80016f4:	1a5b      	subs	r3, r3, r1
 80016f6:	4649      	mov	r1, r9
 80016f8:	0010      	movs	r0, r2
 80016fa:	40d9      	lsrs	r1, r3
 80016fc:	3808      	subs	r0, #8
 80016fe:	4084      	lsls	r4, r0
 8001700:	000b      	movs	r3, r1
 8001702:	464d      	mov	r5, r9
 8001704:	4323      	orrs	r3, r4
 8001706:	4698      	mov	r8, r3
 8001708:	4085      	lsls	r5, r0
 800170a:	4823      	ldr	r0, [pc, #140]	; (8001798 <__aeabi_ddiv+0x394>)
 800170c:	1a83      	subs	r3, r0, r2
 800170e:	469b      	mov	fp, r3
 8001710:	2300      	movs	r3, #0
 8001712:	4699      	mov	r9, r3
 8001714:	9300      	str	r3, [sp, #0]
 8001716:	e69a      	b.n	800144e <__aeabi_ddiv+0x4a>
 8001718:	464b      	mov	r3, r9
 800171a:	4323      	orrs	r3, r4
 800171c:	4698      	mov	r8, r3
 800171e:	d11d      	bne.n	800175c <__aeabi_ddiv+0x358>
 8001720:	2308      	movs	r3, #8
 8001722:	4699      	mov	r9, r3
 8001724:	3b06      	subs	r3, #6
 8001726:	2500      	movs	r5, #0
 8001728:	4683      	mov	fp, r0
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	e68f      	b.n	800144e <__aeabi_ddiv+0x4a>
 800172e:	4652      	mov	r2, sl
 8001730:	4322      	orrs	r2, r4
 8001732:	d109      	bne.n	8001748 <__aeabi_ddiv+0x344>
 8001734:	2302      	movs	r3, #2
 8001736:	4649      	mov	r1, r9
 8001738:	4319      	orrs	r1, r3
 800173a:	4b18      	ldr	r3, [pc, #96]	; (800179c <__aeabi_ddiv+0x398>)
 800173c:	4689      	mov	r9, r1
 800173e:	469c      	mov	ip, r3
 8001740:	2400      	movs	r4, #0
 8001742:	2002      	movs	r0, #2
 8001744:	44e3      	add	fp, ip
 8001746:	e69d      	b.n	8001484 <__aeabi_ddiv+0x80>
 8001748:	2303      	movs	r3, #3
 800174a:	464a      	mov	r2, r9
 800174c:	431a      	orrs	r2, r3
 800174e:	4b13      	ldr	r3, [pc, #76]	; (800179c <__aeabi_ddiv+0x398>)
 8001750:	4691      	mov	r9, r2
 8001752:	469c      	mov	ip, r3
 8001754:	4652      	mov	r2, sl
 8001756:	2003      	movs	r0, #3
 8001758:	44e3      	add	fp, ip
 800175a:	e693      	b.n	8001484 <__aeabi_ddiv+0x80>
 800175c:	230c      	movs	r3, #12
 800175e:	4699      	mov	r9, r3
 8001760:	3b09      	subs	r3, #9
 8001762:	46a0      	mov	r8, r4
 8001764:	4683      	mov	fp, r0
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	e671      	b.n	800144e <__aeabi_ddiv+0x4a>
 800176a:	2304      	movs	r3, #4
 800176c:	4699      	mov	r9, r3
 800176e:	2300      	movs	r3, #0
 8001770:	469b      	mov	fp, r3
 8001772:	3301      	adds	r3, #1
 8001774:	2500      	movs	r5, #0
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	e669      	b.n	800144e <__aeabi_ddiv+0x4a>
 800177a:	46c0      	nop			; (mov r8, r8)
 800177c:	000007ff 	.word	0x000007ff
 8001780:	fffffc01 	.word	0xfffffc01
 8001784:	08012ff4 	.word	0x08012ff4
 8001788:	000003ff 	.word	0x000003ff
 800178c:	feffffff 	.word	0xfeffffff
 8001790:	000007fe 	.word	0x000007fe
 8001794:	000003f3 	.word	0x000003f3
 8001798:	fffffc0d 	.word	0xfffffc0d
 800179c:	fffff801 	.word	0xfffff801
 80017a0:	4649      	mov	r1, r9
 80017a2:	2301      	movs	r3, #1
 80017a4:	4319      	orrs	r1, r3
 80017a6:	4689      	mov	r9, r1
 80017a8:	2400      	movs	r4, #0
 80017aa:	2001      	movs	r0, #1
 80017ac:	e66a      	b.n	8001484 <__aeabi_ddiv+0x80>
 80017ae:	2300      	movs	r3, #0
 80017b0:	2480      	movs	r4, #128	; 0x80
 80017b2:	469a      	mov	sl, r3
 80017b4:	2500      	movs	r5, #0
 80017b6:	4b8a      	ldr	r3, [pc, #552]	; (80019e0 <__aeabi_ddiv+0x5dc>)
 80017b8:	0324      	lsls	r4, r4, #12
 80017ba:	e67a      	b.n	80014b2 <__aeabi_ddiv+0xae>
 80017bc:	2501      	movs	r5, #1
 80017be:	426d      	negs	r5, r5
 80017c0:	2301      	movs	r3, #1
 80017c2:	1a9b      	subs	r3, r3, r2
 80017c4:	2b38      	cmp	r3, #56	; 0x38
 80017c6:	dd00      	ble.n	80017ca <__aeabi_ddiv+0x3c6>
 80017c8:	e670      	b.n	80014ac <__aeabi_ddiv+0xa8>
 80017ca:	2b1f      	cmp	r3, #31
 80017cc:	dc00      	bgt.n	80017d0 <__aeabi_ddiv+0x3cc>
 80017ce:	e0bf      	b.n	8001950 <__aeabi_ddiv+0x54c>
 80017d0:	211f      	movs	r1, #31
 80017d2:	4249      	negs	r1, r1
 80017d4:	1a8a      	subs	r2, r1, r2
 80017d6:	4641      	mov	r1, r8
 80017d8:	40d1      	lsrs	r1, r2
 80017da:	000a      	movs	r2, r1
 80017dc:	2b20      	cmp	r3, #32
 80017de:	d004      	beq.n	80017ea <__aeabi_ddiv+0x3e6>
 80017e0:	4641      	mov	r1, r8
 80017e2:	4b80      	ldr	r3, [pc, #512]	; (80019e4 <__aeabi_ddiv+0x5e0>)
 80017e4:	445b      	add	r3, fp
 80017e6:	4099      	lsls	r1, r3
 80017e8:	430d      	orrs	r5, r1
 80017ea:	1e6b      	subs	r3, r5, #1
 80017ec:	419d      	sbcs	r5, r3
 80017ee:	2307      	movs	r3, #7
 80017f0:	432a      	orrs	r2, r5
 80017f2:	001d      	movs	r5, r3
 80017f4:	2400      	movs	r4, #0
 80017f6:	4015      	ands	r5, r2
 80017f8:	4213      	tst	r3, r2
 80017fa:	d100      	bne.n	80017fe <__aeabi_ddiv+0x3fa>
 80017fc:	e0d4      	b.n	80019a8 <__aeabi_ddiv+0x5a4>
 80017fe:	210f      	movs	r1, #15
 8001800:	2300      	movs	r3, #0
 8001802:	4011      	ands	r1, r2
 8001804:	2904      	cmp	r1, #4
 8001806:	d100      	bne.n	800180a <__aeabi_ddiv+0x406>
 8001808:	e0cb      	b.n	80019a2 <__aeabi_ddiv+0x59e>
 800180a:	1d11      	adds	r1, r2, #4
 800180c:	4291      	cmp	r1, r2
 800180e:	4192      	sbcs	r2, r2
 8001810:	4252      	negs	r2, r2
 8001812:	189b      	adds	r3, r3, r2
 8001814:	000a      	movs	r2, r1
 8001816:	0219      	lsls	r1, r3, #8
 8001818:	d400      	bmi.n	800181c <__aeabi_ddiv+0x418>
 800181a:	e0c2      	b.n	80019a2 <__aeabi_ddiv+0x59e>
 800181c:	2301      	movs	r3, #1
 800181e:	2400      	movs	r4, #0
 8001820:	2500      	movs	r5, #0
 8001822:	e646      	b.n	80014b2 <__aeabi_ddiv+0xae>
 8001824:	2380      	movs	r3, #128	; 0x80
 8001826:	4641      	mov	r1, r8
 8001828:	031b      	lsls	r3, r3, #12
 800182a:	4219      	tst	r1, r3
 800182c:	d008      	beq.n	8001840 <__aeabi_ddiv+0x43c>
 800182e:	421c      	tst	r4, r3
 8001830:	d106      	bne.n	8001840 <__aeabi_ddiv+0x43c>
 8001832:	431c      	orrs	r4, r3
 8001834:	0324      	lsls	r4, r4, #12
 8001836:	46ba      	mov	sl, r7
 8001838:	0015      	movs	r5, r2
 800183a:	4b69      	ldr	r3, [pc, #420]	; (80019e0 <__aeabi_ddiv+0x5dc>)
 800183c:	0b24      	lsrs	r4, r4, #12
 800183e:	e638      	b.n	80014b2 <__aeabi_ddiv+0xae>
 8001840:	2480      	movs	r4, #128	; 0x80
 8001842:	4643      	mov	r3, r8
 8001844:	0324      	lsls	r4, r4, #12
 8001846:	431c      	orrs	r4, r3
 8001848:	0324      	lsls	r4, r4, #12
 800184a:	46b2      	mov	sl, r6
 800184c:	4b64      	ldr	r3, [pc, #400]	; (80019e0 <__aeabi_ddiv+0x5dc>)
 800184e:	0b24      	lsrs	r4, r4, #12
 8001850:	e62f      	b.n	80014b2 <__aeabi_ddiv+0xae>
 8001852:	2b00      	cmp	r3, #0
 8001854:	d100      	bne.n	8001858 <__aeabi_ddiv+0x454>
 8001856:	e703      	b.n	8001660 <__aeabi_ddiv+0x25c>
 8001858:	19a6      	adds	r6, r4, r6
 800185a:	1e68      	subs	r0, r5, #1
 800185c:	42a6      	cmp	r6, r4
 800185e:	d200      	bcs.n	8001862 <__aeabi_ddiv+0x45e>
 8001860:	e08d      	b.n	800197e <__aeabi_ddiv+0x57a>
 8001862:	428e      	cmp	r6, r1
 8001864:	d200      	bcs.n	8001868 <__aeabi_ddiv+0x464>
 8001866:	e0a3      	b.n	80019b0 <__aeabi_ddiv+0x5ac>
 8001868:	d100      	bne.n	800186c <__aeabi_ddiv+0x468>
 800186a:	e0b3      	b.n	80019d4 <__aeabi_ddiv+0x5d0>
 800186c:	0005      	movs	r5, r0
 800186e:	e6f5      	b.n	800165c <__aeabi_ddiv+0x258>
 8001870:	42aa      	cmp	r2, r5
 8001872:	d900      	bls.n	8001876 <__aeabi_ddiv+0x472>
 8001874:	e639      	b.n	80014ea <__aeabi_ddiv+0xe6>
 8001876:	4643      	mov	r3, r8
 8001878:	07de      	lsls	r6, r3, #31
 800187a:	0858      	lsrs	r0, r3, #1
 800187c:	086b      	lsrs	r3, r5, #1
 800187e:	431e      	orrs	r6, r3
 8001880:	07ed      	lsls	r5, r5, #31
 8001882:	e639      	b.n	80014f8 <__aeabi_ddiv+0xf4>
 8001884:	4648      	mov	r0, r9
 8001886:	f001 f971 	bl	8002b6c <__clzsi2>
 800188a:	0001      	movs	r1, r0
 800188c:	0002      	movs	r2, r0
 800188e:	3115      	adds	r1, #21
 8001890:	3220      	adds	r2, #32
 8001892:	291c      	cmp	r1, #28
 8001894:	dc00      	bgt.n	8001898 <__aeabi_ddiv+0x494>
 8001896:	e72c      	b.n	80016f2 <__aeabi_ddiv+0x2ee>
 8001898:	464b      	mov	r3, r9
 800189a:	3808      	subs	r0, #8
 800189c:	4083      	lsls	r3, r0
 800189e:	2500      	movs	r5, #0
 80018a0:	4698      	mov	r8, r3
 80018a2:	e732      	b.n	800170a <__aeabi_ddiv+0x306>
 80018a4:	f001 f962 	bl	8002b6c <__clzsi2>
 80018a8:	0003      	movs	r3, r0
 80018aa:	001a      	movs	r2, r3
 80018ac:	3215      	adds	r2, #21
 80018ae:	3020      	adds	r0, #32
 80018b0:	2a1c      	cmp	r2, #28
 80018b2:	dc00      	bgt.n	80018b6 <__aeabi_ddiv+0x4b2>
 80018b4:	e700      	b.n	80016b8 <__aeabi_ddiv+0x2b4>
 80018b6:	4654      	mov	r4, sl
 80018b8:	3b08      	subs	r3, #8
 80018ba:	2200      	movs	r2, #0
 80018bc:	409c      	lsls	r4, r3
 80018be:	e705      	b.n	80016cc <__aeabi_ddiv+0x2c8>
 80018c0:	1936      	adds	r6, r6, r4
 80018c2:	3b01      	subs	r3, #1
 80018c4:	42b4      	cmp	r4, r6
 80018c6:	d900      	bls.n	80018ca <__aeabi_ddiv+0x4c6>
 80018c8:	e6a6      	b.n	8001618 <__aeabi_ddiv+0x214>
 80018ca:	42b2      	cmp	r2, r6
 80018cc:	d800      	bhi.n	80018d0 <__aeabi_ddiv+0x4cc>
 80018ce:	e6a3      	b.n	8001618 <__aeabi_ddiv+0x214>
 80018d0:	1e83      	subs	r3, r0, #2
 80018d2:	1936      	adds	r6, r6, r4
 80018d4:	e6a0      	b.n	8001618 <__aeabi_ddiv+0x214>
 80018d6:	1909      	adds	r1, r1, r4
 80018d8:	3d01      	subs	r5, #1
 80018da:	428c      	cmp	r4, r1
 80018dc:	d900      	bls.n	80018e0 <__aeabi_ddiv+0x4dc>
 80018de:	e68d      	b.n	80015fc <__aeabi_ddiv+0x1f8>
 80018e0:	428a      	cmp	r2, r1
 80018e2:	d800      	bhi.n	80018e6 <__aeabi_ddiv+0x4e2>
 80018e4:	e68a      	b.n	80015fc <__aeabi_ddiv+0x1f8>
 80018e6:	1e85      	subs	r5, r0, #2
 80018e8:	1909      	adds	r1, r1, r4
 80018ea:	e687      	b.n	80015fc <__aeabi_ddiv+0x1f8>
 80018ec:	230f      	movs	r3, #15
 80018ee:	402b      	ands	r3, r5
 80018f0:	2b04      	cmp	r3, #4
 80018f2:	d100      	bne.n	80018f6 <__aeabi_ddiv+0x4f2>
 80018f4:	e6bc      	b.n	8001670 <__aeabi_ddiv+0x26c>
 80018f6:	2305      	movs	r3, #5
 80018f8:	425b      	negs	r3, r3
 80018fa:	42ab      	cmp	r3, r5
 80018fc:	419b      	sbcs	r3, r3
 80018fe:	3504      	adds	r5, #4
 8001900:	425b      	negs	r3, r3
 8001902:	08ed      	lsrs	r5, r5, #3
 8001904:	4498      	add	r8, r3
 8001906:	e6b4      	b.n	8001672 <__aeabi_ddiv+0x26e>
 8001908:	42af      	cmp	r7, r5
 800190a:	d900      	bls.n	800190e <__aeabi_ddiv+0x50a>
 800190c:	e660      	b.n	80015d0 <__aeabi_ddiv+0x1cc>
 800190e:	4282      	cmp	r2, r0
 8001910:	d804      	bhi.n	800191c <__aeabi_ddiv+0x518>
 8001912:	d000      	beq.n	8001916 <__aeabi_ddiv+0x512>
 8001914:	e65c      	b.n	80015d0 <__aeabi_ddiv+0x1cc>
 8001916:	42ae      	cmp	r6, r5
 8001918:	d800      	bhi.n	800191c <__aeabi_ddiv+0x518>
 800191a:	e659      	b.n	80015d0 <__aeabi_ddiv+0x1cc>
 800191c:	2302      	movs	r3, #2
 800191e:	425b      	negs	r3, r3
 8001920:	469c      	mov	ip, r3
 8001922:	9b00      	ldr	r3, [sp, #0]
 8001924:	44e0      	add	r8, ip
 8001926:	469c      	mov	ip, r3
 8001928:	4465      	add	r5, ip
 800192a:	429d      	cmp	r5, r3
 800192c:	419b      	sbcs	r3, r3
 800192e:	425b      	negs	r3, r3
 8001930:	191b      	adds	r3, r3, r4
 8001932:	18c0      	adds	r0, r0, r3
 8001934:	e64d      	b.n	80015d2 <__aeabi_ddiv+0x1ce>
 8001936:	428a      	cmp	r2, r1
 8001938:	d800      	bhi.n	800193c <__aeabi_ddiv+0x538>
 800193a:	e60e      	b.n	800155a <__aeabi_ddiv+0x156>
 800193c:	1e83      	subs	r3, r0, #2
 800193e:	1909      	adds	r1, r1, r4
 8001940:	e60b      	b.n	800155a <__aeabi_ddiv+0x156>
 8001942:	428a      	cmp	r2, r1
 8001944:	d800      	bhi.n	8001948 <__aeabi_ddiv+0x544>
 8001946:	e5f4      	b.n	8001532 <__aeabi_ddiv+0x12e>
 8001948:	1e83      	subs	r3, r0, #2
 800194a:	4698      	mov	r8, r3
 800194c:	1909      	adds	r1, r1, r4
 800194e:	e5f0      	b.n	8001532 <__aeabi_ddiv+0x12e>
 8001950:	4925      	ldr	r1, [pc, #148]	; (80019e8 <__aeabi_ddiv+0x5e4>)
 8001952:	0028      	movs	r0, r5
 8001954:	4459      	add	r1, fp
 8001956:	408d      	lsls	r5, r1
 8001958:	4642      	mov	r2, r8
 800195a:	408a      	lsls	r2, r1
 800195c:	1e69      	subs	r1, r5, #1
 800195e:	418d      	sbcs	r5, r1
 8001960:	4641      	mov	r1, r8
 8001962:	40d8      	lsrs	r0, r3
 8001964:	40d9      	lsrs	r1, r3
 8001966:	4302      	orrs	r2, r0
 8001968:	432a      	orrs	r2, r5
 800196a:	000b      	movs	r3, r1
 800196c:	0751      	lsls	r1, r2, #29
 800196e:	d100      	bne.n	8001972 <__aeabi_ddiv+0x56e>
 8001970:	e751      	b.n	8001816 <__aeabi_ddiv+0x412>
 8001972:	210f      	movs	r1, #15
 8001974:	4011      	ands	r1, r2
 8001976:	2904      	cmp	r1, #4
 8001978:	d000      	beq.n	800197c <__aeabi_ddiv+0x578>
 800197a:	e746      	b.n	800180a <__aeabi_ddiv+0x406>
 800197c:	e74b      	b.n	8001816 <__aeabi_ddiv+0x412>
 800197e:	0005      	movs	r5, r0
 8001980:	428e      	cmp	r6, r1
 8001982:	d000      	beq.n	8001986 <__aeabi_ddiv+0x582>
 8001984:	e66a      	b.n	800165c <__aeabi_ddiv+0x258>
 8001986:	9a00      	ldr	r2, [sp, #0]
 8001988:	4293      	cmp	r3, r2
 800198a:	d000      	beq.n	800198e <__aeabi_ddiv+0x58a>
 800198c:	e666      	b.n	800165c <__aeabi_ddiv+0x258>
 800198e:	e667      	b.n	8001660 <__aeabi_ddiv+0x25c>
 8001990:	4a16      	ldr	r2, [pc, #88]	; (80019ec <__aeabi_ddiv+0x5e8>)
 8001992:	445a      	add	r2, fp
 8001994:	2a00      	cmp	r2, #0
 8001996:	dc00      	bgt.n	800199a <__aeabi_ddiv+0x596>
 8001998:	e710      	b.n	80017bc <__aeabi_ddiv+0x3b8>
 800199a:	2301      	movs	r3, #1
 800199c:	2500      	movs	r5, #0
 800199e:	4498      	add	r8, r3
 80019a0:	e667      	b.n	8001672 <__aeabi_ddiv+0x26e>
 80019a2:	075d      	lsls	r5, r3, #29
 80019a4:	025b      	lsls	r3, r3, #9
 80019a6:	0b1c      	lsrs	r4, r3, #12
 80019a8:	08d2      	lsrs	r2, r2, #3
 80019aa:	2300      	movs	r3, #0
 80019ac:	4315      	orrs	r5, r2
 80019ae:	e580      	b.n	80014b2 <__aeabi_ddiv+0xae>
 80019b0:	9800      	ldr	r0, [sp, #0]
 80019b2:	3d02      	subs	r5, #2
 80019b4:	0042      	lsls	r2, r0, #1
 80019b6:	4282      	cmp	r2, r0
 80019b8:	41bf      	sbcs	r7, r7
 80019ba:	427f      	negs	r7, r7
 80019bc:	193c      	adds	r4, r7, r4
 80019be:	1936      	adds	r6, r6, r4
 80019c0:	9200      	str	r2, [sp, #0]
 80019c2:	e7dd      	b.n	8001980 <__aeabi_ddiv+0x57c>
 80019c4:	2480      	movs	r4, #128	; 0x80
 80019c6:	4643      	mov	r3, r8
 80019c8:	0324      	lsls	r4, r4, #12
 80019ca:	431c      	orrs	r4, r3
 80019cc:	0324      	lsls	r4, r4, #12
 80019ce:	4b04      	ldr	r3, [pc, #16]	; (80019e0 <__aeabi_ddiv+0x5dc>)
 80019d0:	0b24      	lsrs	r4, r4, #12
 80019d2:	e56e      	b.n	80014b2 <__aeabi_ddiv+0xae>
 80019d4:	9a00      	ldr	r2, [sp, #0]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d3ea      	bcc.n	80019b0 <__aeabi_ddiv+0x5ac>
 80019da:	0005      	movs	r5, r0
 80019dc:	e7d3      	b.n	8001986 <__aeabi_ddiv+0x582>
 80019de:	46c0      	nop			; (mov r8, r8)
 80019e0:	000007ff 	.word	0x000007ff
 80019e4:	0000043e 	.word	0x0000043e
 80019e8:	0000041e 	.word	0x0000041e
 80019ec:	000003ff 	.word	0x000003ff

080019f0 <__eqdf2>:
 80019f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019f2:	464e      	mov	r6, r9
 80019f4:	4645      	mov	r5, r8
 80019f6:	46de      	mov	lr, fp
 80019f8:	4657      	mov	r7, sl
 80019fa:	4690      	mov	r8, r2
 80019fc:	b5e0      	push	{r5, r6, r7, lr}
 80019fe:	0017      	movs	r7, r2
 8001a00:	031a      	lsls	r2, r3, #12
 8001a02:	0b12      	lsrs	r2, r2, #12
 8001a04:	0005      	movs	r5, r0
 8001a06:	4684      	mov	ip, r0
 8001a08:	4819      	ldr	r0, [pc, #100]	; (8001a70 <__eqdf2+0x80>)
 8001a0a:	030e      	lsls	r6, r1, #12
 8001a0c:	004c      	lsls	r4, r1, #1
 8001a0e:	4691      	mov	r9, r2
 8001a10:	005a      	lsls	r2, r3, #1
 8001a12:	0fdb      	lsrs	r3, r3, #31
 8001a14:	469b      	mov	fp, r3
 8001a16:	0b36      	lsrs	r6, r6, #12
 8001a18:	0d64      	lsrs	r4, r4, #21
 8001a1a:	0fc9      	lsrs	r1, r1, #31
 8001a1c:	0d52      	lsrs	r2, r2, #21
 8001a1e:	4284      	cmp	r4, r0
 8001a20:	d019      	beq.n	8001a56 <__eqdf2+0x66>
 8001a22:	4282      	cmp	r2, r0
 8001a24:	d010      	beq.n	8001a48 <__eqdf2+0x58>
 8001a26:	2001      	movs	r0, #1
 8001a28:	4294      	cmp	r4, r2
 8001a2a:	d10e      	bne.n	8001a4a <__eqdf2+0x5a>
 8001a2c:	454e      	cmp	r6, r9
 8001a2e:	d10c      	bne.n	8001a4a <__eqdf2+0x5a>
 8001a30:	2001      	movs	r0, #1
 8001a32:	45c4      	cmp	ip, r8
 8001a34:	d109      	bne.n	8001a4a <__eqdf2+0x5a>
 8001a36:	4559      	cmp	r1, fp
 8001a38:	d017      	beq.n	8001a6a <__eqdf2+0x7a>
 8001a3a:	2c00      	cmp	r4, #0
 8001a3c:	d105      	bne.n	8001a4a <__eqdf2+0x5a>
 8001a3e:	0030      	movs	r0, r6
 8001a40:	4328      	orrs	r0, r5
 8001a42:	1e43      	subs	r3, r0, #1
 8001a44:	4198      	sbcs	r0, r3
 8001a46:	e000      	b.n	8001a4a <__eqdf2+0x5a>
 8001a48:	2001      	movs	r0, #1
 8001a4a:	bcf0      	pop	{r4, r5, r6, r7}
 8001a4c:	46bb      	mov	fp, r7
 8001a4e:	46b2      	mov	sl, r6
 8001a50:	46a9      	mov	r9, r5
 8001a52:	46a0      	mov	r8, r4
 8001a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a56:	0033      	movs	r3, r6
 8001a58:	2001      	movs	r0, #1
 8001a5a:	432b      	orrs	r3, r5
 8001a5c:	d1f5      	bne.n	8001a4a <__eqdf2+0x5a>
 8001a5e:	42a2      	cmp	r2, r4
 8001a60:	d1f3      	bne.n	8001a4a <__eqdf2+0x5a>
 8001a62:	464b      	mov	r3, r9
 8001a64:	433b      	orrs	r3, r7
 8001a66:	d1f0      	bne.n	8001a4a <__eqdf2+0x5a>
 8001a68:	e7e2      	b.n	8001a30 <__eqdf2+0x40>
 8001a6a:	2000      	movs	r0, #0
 8001a6c:	e7ed      	b.n	8001a4a <__eqdf2+0x5a>
 8001a6e:	46c0      	nop			; (mov r8, r8)
 8001a70:	000007ff 	.word	0x000007ff

08001a74 <__gedf2>:
 8001a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a76:	4647      	mov	r7, r8
 8001a78:	46ce      	mov	lr, r9
 8001a7a:	0004      	movs	r4, r0
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	0016      	movs	r6, r2
 8001a80:	031b      	lsls	r3, r3, #12
 8001a82:	0b1b      	lsrs	r3, r3, #12
 8001a84:	4d2d      	ldr	r5, [pc, #180]	; (8001b3c <__gedf2+0xc8>)
 8001a86:	004a      	lsls	r2, r1, #1
 8001a88:	4699      	mov	r9, r3
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	0043      	lsls	r3, r0, #1
 8001a8e:	030f      	lsls	r7, r1, #12
 8001a90:	46a4      	mov	ip, r4
 8001a92:	46b0      	mov	r8, r6
 8001a94:	0b3f      	lsrs	r7, r7, #12
 8001a96:	0d52      	lsrs	r2, r2, #21
 8001a98:	0fc9      	lsrs	r1, r1, #31
 8001a9a:	0d5b      	lsrs	r3, r3, #21
 8001a9c:	0fc0      	lsrs	r0, r0, #31
 8001a9e:	42aa      	cmp	r2, r5
 8001aa0:	d021      	beq.n	8001ae6 <__gedf2+0x72>
 8001aa2:	42ab      	cmp	r3, r5
 8001aa4:	d013      	beq.n	8001ace <__gedf2+0x5a>
 8001aa6:	2a00      	cmp	r2, #0
 8001aa8:	d122      	bne.n	8001af0 <__gedf2+0x7c>
 8001aaa:	433c      	orrs	r4, r7
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d102      	bne.n	8001ab6 <__gedf2+0x42>
 8001ab0:	464d      	mov	r5, r9
 8001ab2:	432e      	orrs	r6, r5
 8001ab4:	d022      	beq.n	8001afc <__gedf2+0x88>
 8001ab6:	2c00      	cmp	r4, #0
 8001ab8:	d010      	beq.n	8001adc <__gedf2+0x68>
 8001aba:	4281      	cmp	r1, r0
 8001abc:	d022      	beq.n	8001b04 <__gedf2+0x90>
 8001abe:	2002      	movs	r0, #2
 8001ac0:	3901      	subs	r1, #1
 8001ac2:	4008      	ands	r0, r1
 8001ac4:	3801      	subs	r0, #1
 8001ac6:	bcc0      	pop	{r6, r7}
 8001ac8:	46b9      	mov	r9, r7
 8001aca:	46b0      	mov	r8, r6
 8001acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ace:	464d      	mov	r5, r9
 8001ad0:	432e      	orrs	r6, r5
 8001ad2:	d129      	bne.n	8001b28 <__gedf2+0xb4>
 8001ad4:	2a00      	cmp	r2, #0
 8001ad6:	d1f0      	bne.n	8001aba <__gedf2+0x46>
 8001ad8:	433c      	orrs	r4, r7
 8001ada:	d1ee      	bne.n	8001aba <__gedf2+0x46>
 8001adc:	2800      	cmp	r0, #0
 8001ade:	d1f2      	bne.n	8001ac6 <__gedf2+0x52>
 8001ae0:	2001      	movs	r0, #1
 8001ae2:	4240      	negs	r0, r0
 8001ae4:	e7ef      	b.n	8001ac6 <__gedf2+0x52>
 8001ae6:	003d      	movs	r5, r7
 8001ae8:	4325      	orrs	r5, r4
 8001aea:	d11d      	bne.n	8001b28 <__gedf2+0xb4>
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d0ee      	beq.n	8001ace <__gedf2+0x5a>
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1e2      	bne.n	8001aba <__gedf2+0x46>
 8001af4:	464c      	mov	r4, r9
 8001af6:	4326      	orrs	r6, r4
 8001af8:	d1df      	bne.n	8001aba <__gedf2+0x46>
 8001afa:	e7e0      	b.n	8001abe <__gedf2+0x4a>
 8001afc:	2000      	movs	r0, #0
 8001afe:	2c00      	cmp	r4, #0
 8001b00:	d0e1      	beq.n	8001ac6 <__gedf2+0x52>
 8001b02:	e7dc      	b.n	8001abe <__gedf2+0x4a>
 8001b04:	429a      	cmp	r2, r3
 8001b06:	dc0a      	bgt.n	8001b1e <__gedf2+0xaa>
 8001b08:	dbe8      	blt.n	8001adc <__gedf2+0x68>
 8001b0a:	454f      	cmp	r7, r9
 8001b0c:	d8d7      	bhi.n	8001abe <__gedf2+0x4a>
 8001b0e:	d00e      	beq.n	8001b2e <__gedf2+0xba>
 8001b10:	2000      	movs	r0, #0
 8001b12:	454f      	cmp	r7, r9
 8001b14:	d2d7      	bcs.n	8001ac6 <__gedf2+0x52>
 8001b16:	2900      	cmp	r1, #0
 8001b18:	d0e2      	beq.n	8001ae0 <__gedf2+0x6c>
 8001b1a:	0008      	movs	r0, r1
 8001b1c:	e7d3      	b.n	8001ac6 <__gedf2+0x52>
 8001b1e:	4243      	negs	r3, r0
 8001b20:	4158      	adcs	r0, r3
 8001b22:	0040      	lsls	r0, r0, #1
 8001b24:	3801      	subs	r0, #1
 8001b26:	e7ce      	b.n	8001ac6 <__gedf2+0x52>
 8001b28:	2002      	movs	r0, #2
 8001b2a:	4240      	negs	r0, r0
 8001b2c:	e7cb      	b.n	8001ac6 <__gedf2+0x52>
 8001b2e:	45c4      	cmp	ip, r8
 8001b30:	d8c5      	bhi.n	8001abe <__gedf2+0x4a>
 8001b32:	2000      	movs	r0, #0
 8001b34:	45c4      	cmp	ip, r8
 8001b36:	d2c6      	bcs.n	8001ac6 <__gedf2+0x52>
 8001b38:	e7ed      	b.n	8001b16 <__gedf2+0xa2>
 8001b3a:	46c0      	nop			; (mov r8, r8)
 8001b3c:	000007ff 	.word	0x000007ff

08001b40 <__ledf2>:
 8001b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b42:	4647      	mov	r7, r8
 8001b44:	46ce      	mov	lr, r9
 8001b46:	0004      	movs	r4, r0
 8001b48:	0018      	movs	r0, r3
 8001b4a:	0016      	movs	r6, r2
 8001b4c:	031b      	lsls	r3, r3, #12
 8001b4e:	0b1b      	lsrs	r3, r3, #12
 8001b50:	4d2c      	ldr	r5, [pc, #176]	; (8001c04 <__ledf2+0xc4>)
 8001b52:	004a      	lsls	r2, r1, #1
 8001b54:	4699      	mov	r9, r3
 8001b56:	b580      	push	{r7, lr}
 8001b58:	0043      	lsls	r3, r0, #1
 8001b5a:	030f      	lsls	r7, r1, #12
 8001b5c:	46a4      	mov	ip, r4
 8001b5e:	46b0      	mov	r8, r6
 8001b60:	0b3f      	lsrs	r7, r7, #12
 8001b62:	0d52      	lsrs	r2, r2, #21
 8001b64:	0fc9      	lsrs	r1, r1, #31
 8001b66:	0d5b      	lsrs	r3, r3, #21
 8001b68:	0fc0      	lsrs	r0, r0, #31
 8001b6a:	42aa      	cmp	r2, r5
 8001b6c:	d00d      	beq.n	8001b8a <__ledf2+0x4a>
 8001b6e:	42ab      	cmp	r3, r5
 8001b70:	d010      	beq.n	8001b94 <__ledf2+0x54>
 8001b72:	2a00      	cmp	r2, #0
 8001b74:	d127      	bne.n	8001bc6 <__ledf2+0x86>
 8001b76:	433c      	orrs	r4, r7
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d111      	bne.n	8001ba0 <__ledf2+0x60>
 8001b7c:	464d      	mov	r5, r9
 8001b7e:	432e      	orrs	r6, r5
 8001b80:	d10e      	bne.n	8001ba0 <__ledf2+0x60>
 8001b82:	2000      	movs	r0, #0
 8001b84:	2c00      	cmp	r4, #0
 8001b86:	d015      	beq.n	8001bb4 <__ledf2+0x74>
 8001b88:	e00e      	b.n	8001ba8 <__ledf2+0x68>
 8001b8a:	003d      	movs	r5, r7
 8001b8c:	4325      	orrs	r5, r4
 8001b8e:	d110      	bne.n	8001bb2 <__ledf2+0x72>
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d118      	bne.n	8001bc6 <__ledf2+0x86>
 8001b94:	464d      	mov	r5, r9
 8001b96:	432e      	orrs	r6, r5
 8001b98:	d10b      	bne.n	8001bb2 <__ledf2+0x72>
 8001b9a:	2a00      	cmp	r2, #0
 8001b9c:	d102      	bne.n	8001ba4 <__ledf2+0x64>
 8001b9e:	433c      	orrs	r4, r7
 8001ba0:	2c00      	cmp	r4, #0
 8001ba2:	d00b      	beq.n	8001bbc <__ledf2+0x7c>
 8001ba4:	4281      	cmp	r1, r0
 8001ba6:	d014      	beq.n	8001bd2 <__ledf2+0x92>
 8001ba8:	2002      	movs	r0, #2
 8001baa:	3901      	subs	r1, #1
 8001bac:	4008      	ands	r0, r1
 8001bae:	3801      	subs	r0, #1
 8001bb0:	e000      	b.n	8001bb4 <__ledf2+0x74>
 8001bb2:	2002      	movs	r0, #2
 8001bb4:	bcc0      	pop	{r6, r7}
 8001bb6:	46b9      	mov	r9, r7
 8001bb8:	46b0      	mov	r8, r6
 8001bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bbc:	2800      	cmp	r0, #0
 8001bbe:	d1f9      	bne.n	8001bb4 <__ledf2+0x74>
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	4240      	negs	r0, r0
 8001bc4:	e7f6      	b.n	8001bb4 <__ledf2+0x74>
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1ec      	bne.n	8001ba4 <__ledf2+0x64>
 8001bca:	464c      	mov	r4, r9
 8001bcc:	4326      	orrs	r6, r4
 8001bce:	d1e9      	bne.n	8001ba4 <__ledf2+0x64>
 8001bd0:	e7ea      	b.n	8001ba8 <__ledf2+0x68>
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	dd04      	ble.n	8001be0 <__ledf2+0xa0>
 8001bd6:	4243      	negs	r3, r0
 8001bd8:	4158      	adcs	r0, r3
 8001bda:	0040      	lsls	r0, r0, #1
 8001bdc:	3801      	subs	r0, #1
 8001bde:	e7e9      	b.n	8001bb4 <__ledf2+0x74>
 8001be0:	429a      	cmp	r2, r3
 8001be2:	dbeb      	blt.n	8001bbc <__ledf2+0x7c>
 8001be4:	454f      	cmp	r7, r9
 8001be6:	d8df      	bhi.n	8001ba8 <__ledf2+0x68>
 8001be8:	d006      	beq.n	8001bf8 <__ledf2+0xb8>
 8001bea:	2000      	movs	r0, #0
 8001bec:	454f      	cmp	r7, r9
 8001bee:	d2e1      	bcs.n	8001bb4 <__ledf2+0x74>
 8001bf0:	2900      	cmp	r1, #0
 8001bf2:	d0e5      	beq.n	8001bc0 <__ledf2+0x80>
 8001bf4:	0008      	movs	r0, r1
 8001bf6:	e7dd      	b.n	8001bb4 <__ledf2+0x74>
 8001bf8:	45c4      	cmp	ip, r8
 8001bfa:	d8d5      	bhi.n	8001ba8 <__ledf2+0x68>
 8001bfc:	2000      	movs	r0, #0
 8001bfe:	45c4      	cmp	ip, r8
 8001c00:	d2d8      	bcs.n	8001bb4 <__ledf2+0x74>
 8001c02:	e7f5      	b.n	8001bf0 <__ledf2+0xb0>
 8001c04:	000007ff 	.word	0x000007ff

08001c08 <__aeabi_dmul>:
 8001c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c0a:	4657      	mov	r7, sl
 8001c0c:	464e      	mov	r6, r9
 8001c0e:	4645      	mov	r5, r8
 8001c10:	46de      	mov	lr, fp
 8001c12:	b5e0      	push	{r5, r6, r7, lr}
 8001c14:	4698      	mov	r8, r3
 8001c16:	030c      	lsls	r4, r1, #12
 8001c18:	004b      	lsls	r3, r1, #1
 8001c1a:	0006      	movs	r6, r0
 8001c1c:	4692      	mov	sl, r2
 8001c1e:	b087      	sub	sp, #28
 8001c20:	0b24      	lsrs	r4, r4, #12
 8001c22:	0d5b      	lsrs	r3, r3, #21
 8001c24:	0fcf      	lsrs	r7, r1, #31
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d100      	bne.n	8001c2c <__aeabi_dmul+0x24>
 8001c2a:	e15c      	b.n	8001ee6 <__aeabi_dmul+0x2de>
 8001c2c:	4ad9      	ldr	r2, [pc, #868]	; (8001f94 <__aeabi_dmul+0x38c>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d100      	bne.n	8001c34 <__aeabi_dmul+0x2c>
 8001c32:	e175      	b.n	8001f20 <__aeabi_dmul+0x318>
 8001c34:	0f42      	lsrs	r2, r0, #29
 8001c36:	00e4      	lsls	r4, r4, #3
 8001c38:	4314      	orrs	r4, r2
 8001c3a:	2280      	movs	r2, #128	; 0x80
 8001c3c:	0412      	lsls	r2, r2, #16
 8001c3e:	4314      	orrs	r4, r2
 8001c40:	4ad5      	ldr	r2, [pc, #852]	; (8001f98 <__aeabi_dmul+0x390>)
 8001c42:	00c5      	lsls	r5, r0, #3
 8001c44:	4694      	mov	ip, r2
 8001c46:	4463      	add	r3, ip
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	4699      	mov	r9, r3
 8001c4e:	469b      	mov	fp, r3
 8001c50:	4643      	mov	r3, r8
 8001c52:	4642      	mov	r2, r8
 8001c54:	031e      	lsls	r6, r3, #12
 8001c56:	0fd2      	lsrs	r2, r2, #31
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	4650      	mov	r0, sl
 8001c5c:	4690      	mov	r8, r2
 8001c5e:	0b36      	lsrs	r6, r6, #12
 8001c60:	0d5b      	lsrs	r3, r3, #21
 8001c62:	d100      	bne.n	8001c66 <__aeabi_dmul+0x5e>
 8001c64:	e120      	b.n	8001ea8 <__aeabi_dmul+0x2a0>
 8001c66:	4acb      	ldr	r2, [pc, #812]	; (8001f94 <__aeabi_dmul+0x38c>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d100      	bne.n	8001c6e <__aeabi_dmul+0x66>
 8001c6c:	e162      	b.n	8001f34 <__aeabi_dmul+0x32c>
 8001c6e:	49ca      	ldr	r1, [pc, #808]	; (8001f98 <__aeabi_dmul+0x390>)
 8001c70:	0f42      	lsrs	r2, r0, #29
 8001c72:	468c      	mov	ip, r1
 8001c74:	9900      	ldr	r1, [sp, #0]
 8001c76:	4463      	add	r3, ip
 8001c78:	00f6      	lsls	r6, r6, #3
 8001c7a:	468c      	mov	ip, r1
 8001c7c:	4316      	orrs	r6, r2
 8001c7e:	2280      	movs	r2, #128	; 0x80
 8001c80:	449c      	add	ip, r3
 8001c82:	0412      	lsls	r2, r2, #16
 8001c84:	4663      	mov	r3, ip
 8001c86:	4316      	orrs	r6, r2
 8001c88:	00c2      	lsls	r2, r0, #3
 8001c8a:	2000      	movs	r0, #0
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	9900      	ldr	r1, [sp, #0]
 8001c90:	4643      	mov	r3, r8
 8001c92:	3101      	adds	r1, #1
 8001c94:	468c      	mov	ip, r1
 8001c96:	4649      	mov	r1, r9
 8001c98:	407b      	eors	r3, r7
 8001c9a:	9301      	str	r3, [sp, #4]
 8001c9c:	290f      	cmp	r1, #15
 8001c9e:	d826      	bhi.n	8001cee <__aeabi_dmul+0xe6>
 8001ca0:	4bbe      	ldr	r3, [pc, #760]	; (8001f9c <__aeabi_dmul+0x394>)
 8001ca2:	0089      	lsls	r1, r1, #2
 8001ca4:	5859      	ldr	r1, [r3, r1]
 8001ca6:	468f      	mov	pc, r1
 8001ca8:	4643      	mov	r3, r8
 8001caa:	9301      	str	r3, [sp, #4]
 8001cac:	0034      	movs	r4, r6
 8001cae:	0015      	movs	r5, r2
 8001cb0:	4683      	mov	fp, r0
 8001cb2:	465b      	mov	r3, fp
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d016      	beq.n	8001ce6 <__aeabi_dmul+0xde>
 8001cb8:	2b03      	cmp	r3, #3
 8001cba:	d100      	bne.n	8001cbe <__aeabi_dmul+0xb6>
 8001cbc:	e203      	b.n	80020c6 <__aeabi_dmul+0x4be>
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d000      	beq.n	8001cc4 <__aeabi_dmul+0xbc>
 8001cc2:	e0cd      	b.n	8001e60 <__aeabi_dmul+0x258>
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	2400      	movs	r4, #0
 8001cc8:	2500      	movs	r5, #0
 8001cca:	9b01      	ldr	r3, [sp, #4]
 8001ccc:	0512      	lsls	r2, r2, #20
 8001cce:	4322      	orrs	r2, r4
 8001cd0:	07db      	lsls	r3, r3, #31
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	0028      	movs	r0, r5
 8001cd6:	0011      	movs	r1, r2
 8001cd8:	b007      	add	sp, #28
 8001cda:	bcf0      	pop	{r4, r5, r6, r7}
 8001cdc:	46bb      	mov	fp, r7
 8001cde:	46b2      	mov	sl, r6
 8001ce0:	46a9      	mov	r9, r5
 8001ce2:	46a0      	mov	r8, r4
 8001ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ce6:	2400      	movs	r4, #0
 8001ce8:	2500      	movs	r5, #0
 8001cea:	4aaa      	ldr	r2, [pc, #680]	; (8001f94 <__aeabi_dmul+0x38c>)
 8001cec:	e7ed      	b.n	8001cca <__aeabi_dmul+0xc2>
 8001cee:	0c28      	lsrs	r0, r5, #16
 8001cf0:	042d      	lsls	r5, r5, #16
 8001cf2:	0c2d      	lsrs	r5, r5, #16
 8001cf4:	002b      	movs	r3, r5
 8001cf6:	0c11      	lsrs	r1, r2, #16
 8001cf8:	0412      	lsls	r2, r2, #16
 8001cfa:	0c12      	lsrs	r2, r2, #16
 8001cfc:	4353      	muls	r3, r2
 8001cfe:	4698      	mov	r8, r3
 8001d00:	0013      	movs	r3, r2
 8001d02:	002f      	movs	r7, r5
 8001d04:	4343      	muls	r3, r0
 8001d06:	4699      	mov	r9, r3
 8001d08:	434f      	muls	r7, r1
 8001d0a:	444f      	add	r7, r9
 8001d0c:	46bb      	mov	fp, r7
 8001d0e:	4647      	mov	r7, r8
 8001d10:	000b      	movs	r3, r1
 8001d12:	0c3f      	lsrs	r7, r7, #16
 8001d14:	46ba      	mov	sl, r7
 8001d16:	4343      	muls	r3, r0
 8001d18:	44da      	add	sl, fp
 8001d1a:	9302      	str	r3, [sp, #8]
 8001d1c:	45d1      	cmp	r9, sl
 8001d1e:	d904      	bls.n	8001d2a <__aeabi_dmul+0x122>
 8001d20:	2780      	movs	r7, #128	; 0x80
 8001d22:	027f      	lsls	r7, r7, #9
 8001d24:	46b9      	mov	r9, r7
 8001d26:	444b      	add	r3, r9
 8001d28:	9302      	str	r3, [sp, #8]
 8001d2a:	4653      	mov	r3, sl
 8001d2c:	0c1b      	lsrs	r3, r3, #16
 8001d2e:	469b      	mov	fp, r3
 8001d30:	4653      	mov	r3, sl
 8001d32:	041f      	lsls	r7, r3, #16
 8001d34:	4643      	mov	r3, r8
 8001d36:	041b      	lsls	r3, r3, #16
 8001d38:	0c1b      	lsrs	r3, r3, #16
 8001d3a:	4698      	mov	r8, r3
 8001d3c:	003b      	movs	r3, r7
 8001d3e:	4443      	add	r3, r8
 8001d40:	9304      	str	r3, [sp, #16]
 8001d42:	0c33      	lsrs	r3, r6, #16
 8001d44:	0436      	lsls	r6, r6, #16
 8001d46:	0c36      	lsrs	r6, r6, #16
 8001d48:	4698      	mov	r8, r3
 8001d4a:	0033      	movs	r3, r6
 8001d4c:	4343      	muls	r3, r0
 8001d4e:	4699      	mov	r9, r3
 8001d50:	4643      	mov	r3, r8
 8001d52:	4343      	muls	r3, r0
 8001d54:	002f      	movs	r7, r5
 8001d56:	469a      	mov	sl, r3
 8001d58:	4643      	mov	r3, r8
 8001d5a:	4377      	muls	r7, r6
 8001d5c:	435d      	muls	r5, r3
 8001d5e:	0c38      	lsrs	r0, r7, #16
 8001d60:	444d      	add	r5, r9
 8001d62:	1945      	adds	r5, r0, r5
 8001d64:	45a9      	cmp	r9, r5
 8001d66:	d903      	bls.n	8001d70 <__aeabi_dmul+0x168>
 8001d68:	2380      	movs	r3, #128	; 0x80
 8001d6a:	025b      	lsls	r3, r3, #9
 8001d6c:	4699      	mov	r9, r3
 8001d6e:	44ca      	add	sl, r9
 8001d70:	043f      	lsls	r7, r7, #16
 8001d72:	0c28      	lsrs	r0, r5, #16
 8001d74:	0c3f      	lsrs	r7, r7, #16
 8001d76:	042d      	lsls	r5, r5, #16
 8001d78:	19ed      	adds	r5, r5, r7
 8001d7a:	0c27      	lsrs	r7, r4, #16
 8001d7c:	0424      	lsls	r4, r4, #16
 8001d7e:	0c24      	lsrs	r4, r4, #16
 8001d80:	0003      	movs	r3, r0
 8001d82:	0020      	movs	r0, r4
 8001d84:	4350      	muls	r0, r2
 8001d86:	437a      	muls	r2, r7
 8001d88:	4691      	mov	r9, r2
 8001d8a:	003a      	movs	r2, r7
 8001d8c:	4453      	add	r3, sl
 8001d8e:	9305      	str	r3, [sp, #20]
 8001d90:	0c03      	lsrs	r3, r0, #16
 8001d92:	469a      	mov	sl, r3
 8001d94:	434a      	muls	r2, r1
 8001d96:	4361      	muls	r1, r4
 8001d98:	4449      	add	r1, r9
 8001d9a:	4451      	add	r1, sl
 8001d9c:	44ab      	add	fp, r5
 8001d9e:	4589      	cmp	r9, r1
 8001da0:	d903      	bls.n	8001daa <__aeabi_dmul+0x1a2>
 8001da2:	2380      	movs	r3, #128	; 0x80
 8001da4:	025b      	lsls	r3, r3, #9
 8001da6:	4699      	mov	r9, r3
 8001da8:	444a      	add	r2, r9
 8001daa:	0400      	lsls	r0, r0, #16
 8001dac:	0c0b      	lsrs	r3, r1, #16
 8001dae:	0c00      	lsrs	r0, r0, #16
 8001db0:	0409      	lsls	r1, r1, #16
 8001db2:	1809      	adds	r1, r1, r0
 8001db4:	0020      	movs	r0, r4
 8001db6:	4699      	mov	r9, r3
 8001db8:	4643      	mov	r3, r8
 8001dba:	4370      	muls	r0, r6
 8001dbc:	435c      	muls	r4, r3
 8001dbe:	437e      	muls	r6, r7
 8001dc0:	435f      	muls	r7, r3
 8001dc2:	0c03      	lsrs	r3, r0, #16
 8001dc4:	4698      	mov	r8, r3
 8001dc6:	19a4      	adds	r4, r4, r6
 8001dc8:	4444      	add	r4, r8
 8001dca:	444a      	add	r2, r9
 8001dcc:	9703      	str	r7, [sp, #12]
 8001dce:	42a6      	cmp	r6, r4
 8001dd0:	d904      	bls.n	8001ddc <__aeabi_dmul+0x1d4>
 8001dd2:	2380      	movs	r3, #128	; 0x80
 8001dd4:	025b      	lsls	r3, r3, #9
 8001dd6:	4698      	mov	r8, r3
 8001dd8:	4447      	add	r7, r8
 8001dda:	9703      	str	r7, [sp, #12]
 8001ddc:	0423      	lsls	r3, r4, #16
 8001dde:	9e02      	ldr	r6, [sp, #8]
 8001de0:	469a      	mov	sl, r3
 8001de2:	9b05      	ldr	r3, [sp, #20]
 8001de4:	445e      	add	r6, fp
 8001de6:	4698      	mov	r8, r3
 8001de8:	42ae      	cmp	r6, r5
 8001dea:	41ad      	sbcs	r5, r5
 8001dec:	1876      	adds	r6, r6, r1
 8001dee:	428e      	cmp	r6, r1
 8001df0:	4189      	sbcs	r1, r1
 8001df2:	0400      	lsls	r0, r0, #16
 8001df4:	0c00      	lsrs	r0, r0, #16
 8001df6:	4450      	add	r0, sl
 8001df8:	4440      	add	r0, r8
 8001dfa:	426d      	negs	r5, r5
 8001dfc:	1947      	adds	r7, r0, r5
 8001dfe:	46b8      	mov	r8, r7
 8001e00:	4693      	mov	fp, r2
 8001e02:	4249      	negs	r1, r1
 8001e04:	4689      	mov	r9, r1
 8001e06:	44c3      	add	fp, r8
 8001e08:	44d9      	add	r9, fp
 8001e0a:	4298      	cmp	r0, r3
 8001e0c:	4180      	sbcs	r0, r0
 8001e0e:	45a8      	cmp	r8, r5
 8001e10:	41ad      	sbcs	r5, r5
 8001e12:	4593      	cmp	fp, r2
 8001e14:	4192      	sbcs	r2, r2
 8001e16:	4589      	cmp	r9, r1
 8001e18:	4189      	sbcs	r1, r1
 8001e1a:	426d      	negs	r5, r5
 8001e1c:	4240      	negs	r0, r0
 8001e1e:	4328      	orrs	r0, r5
 8001e20:	0c24      	lsrs	r4, r4, #16
 8001e22:	4252      	negs	r2, r2
 8001e24:	4249      	negs	r1, r1
 8001e26:	430a      	orrs	r2, r1
 8001e28:	9b03      	ldr	r3, [sp, #12]
 8001e2a:	1900      	adds	r0, r0, r4
 8001e2c:	1880      	adds	r0, r0, r2
 8001e2e:	18c7      	adds	r7, r0, r3
 8001e30:	464b      	mov	r3, r9
 8001e32:	0ddc      	lsrs	r4, r3, #23
 8001e34:	9b04      	ldr	r3, [sp, #16]
 8001e36:	0275      	lsls	r5, r6, #9
 8001e38:	431d      	orrs	r5, r3
 8001e3a:	1e6a      	subs	r2, r5, #1
 8001e3c:	4195      	sbcs	r5, r2
 8001e3e:	464b      	mov	r3, r9
 8001e40:	0df6      	lsrs	r6, r6, #23
 8001e42:	027f      	lsls	r7, r7, #9
 8001e44:	4335      	orrs	r5, r6
 8001e46:	025a      	lsls	r2, r3, #9
 8001e48:	433c      	orrs	r4, r7
 8001e4a:	4315      	orrs	r5, r2
 8001e4c:	01fb      	lsls	r3, r7, #7
 8001e4e:	d400      	bmi.n	8001e52 <__aeabi_dmul+0x24a>
 8001e50:	e11c      	b.n	800208c <__aeabi_dmul+0x484>
 8001e52:	2101      	movs	r1, #1
 8001e54:	086a      	lsrs	r2, r5, #1
 8001e56:	400d      	ands	r5, r1
 8001e58:	4315      	orrs	r5, r2
 8001e5a:	07e2      	lsls	r2, r4, #31
 8001e5c:	4315      	orrs	r5, r2
 8001e5e:	0864      	lsrs	r4, r4, #1
 8001e60:	494f      	ldr	r1, [pc, #316]	; (8001fa0 <__aeabi_dmul+0x398>)
 8001e62:	4461      	add	r1, ip
 8001e64:	2900      	cmp	r1, #0
 8001e66:	dc00      	bgt.n	8001e6a <__aeabi_dmul+0x262>
 8001e68:	e0b0      	b.n	8001fcc <__aeabi_dmul+0x3c4>
 8001e6a:	076b      	lsls	r3, r5, #29
 8001e6c:	d009      	beq.n	8001e82 <__aeabi_dmul+0x27a>
 8001e6e:	220f      	movs	r2, #15
 8001e70:	402a      	ands	r2, r5
 8001e72:	2a04      	cmp	r2, #4
 8001e74:	d005      	beq.n	8001e82 <__aeabi_dmul+0x27a>
 8001e76:	1d2a      	adds	r2, r5, #4
 8001e78:	42aa      	cmp	r2, r5
 8001e7a:	41ad      	sbcs	r5, r5
 8001e7c:	426d      	negs	r5, r5
 8001e7e:	1964      	adds	r4, r4, r5
 8001e80:	0015      	movs	r5, r2
 8001e82:	01e3      	lsls	r3, r4, #7
 8001e84:	d504      	bpl.n	8001e90 <__aeabi_dmul+0x288>
 8001e86:	2180      	movs	r1, #128	; 0x80
 8001e88:	4a46      	ldr	r2, [pc, #280]	; (8001fa4 <__aeabi_dmul+0x39c>)
 8001e8a:	00c9      	lsls	r1, r1, #3
 8001e8c:	4014      	ands	r4, r2
 8001e8e:	4461      	add	r1, ip
 8001e90:	4a45      	ldr	r2, [pc, #276]	; (8001fa8 <__aeabi_dmul+0x3a0>)
 8001e92:	4291      	cmp	r1, r2
 8001e94:	dd00      	ble.n	8001e98 <__aeabi_dmul+0x290>
 8001e96:	e726      	b.n	8001ce6 <__aeabi_dmul+0xde>
 8001e98:	0762      	lsls	r2, r4, #29
 8001e9a:	08ed      	lsrs	r5, r5, #3
 8001e9c:	0264      	lsls	r4, r4, #9
 8001e9e:	0549      	lsls	r1, r1, #21
 8001ea0:	4315      	orrs	r5, r2
 8001ea2:	0b24      	lsrs	r4, r4, #12
 8001ea4:	0d4a      	lsrs	r2, r1, #21
 8001ea6:	e710      	b.n	8001cca <__aeabi_dmul+0xc2>
 8001ea8:	4652      	mov	r2, sl
 8001eaa:	4332      	orrs	r2, r6
 8001eac:	d100      	bne.n	8001eb0 <__aeabi_dmul+0x2a8>
 8001eae:	e07f      	b.n	8001fb0 <__aeabi_dmul+0x3a8>
 8001eb0:	2e00      	cmp	r6, #0
 8001eb2:	d100      	bne.n	8001eb6 <__aeabi_dmul+0x2ae>
 8001eb4:	e0dc      	b.n	8002070 <__aeabi_dmul+0x468>
 8001eb6:	0030      	movs	r0, r6
 8001eb8:	f000 fe58 	bl	8002b6c <__clzsi2>
 8001ebc:	0002      	movs	r2, r0
 8001ebe:	3a0b      	subs	r2, #11
 8001ec0:	231d      	movs	r3, #29
 8001ec2:	0001      	movs	r1, r0
 8001ec4:	1a9b      	subs	r3, r3, r2
 8001ec6:	4652      	mov	r2, sl
 8001ec8:	3908      	subs	r1, #8
 8001eca:	40da      	lsrs	r2, r3
 8001ecc:	408e      	lsls	r6, r1
 8001ece:	4316      	orrs	r6, r2
 8001ed0:	4652      	mov	r2, sl
 8001ed2:	408a      	lsls	r2, r1
 8001ed4:	9b00      	ldr	r3, [sp, #0]
 8001ed6:	4935      	ldr	r1, [pc, #212]	; (8001fac <__aeabi_dmul+0x3a4>)
 8001ed8:	1a18      	subs	r0, r3, r0
 8001eda:	0003      	movs	r3, r0
 8001edc:	468c      	mov	ip, r1
 8001ede:	4463      	add	r3, ip
 8001ee0:	2000      	movs	r0, #0
 8001ee2:	9300      	str	r3, [sp, #0]
 8001ee4:	e6d3      	b.n	8001c8e <__aeabi_dmul+0x86>
 8001ee6:	0025      	movs	r5, r4
 8001ee8:	4305      	orrs	r5, r0
 8001eea:	d04a      	beq.n	8001f82 <__aeabi_dmul+0x37a>
 8001eec:	2c00      	cmp	r4, #0
 8001eee:	d100      	bne.n	8001ef2 <__aeabi_dmul+0x2ea>
 8001ef0:	e0b0      	b.n	8002054 <__aeabi_dmul+0x44c>
 8001ef2:	0020      	movs	r0, r4
 8001ef4:	f000 fe3a 	bl	8002b6c <__clzsi2>
 8001ef8:	0001      	movs	r1, r0
 8001efa:	0002      	movs	r2, r0
 8001efc:	390b      	subs	r1, #11
 8001efe:	231d      	movs	r3, #29
 8001f00:	0010      	movs	r0, r2
 8001f02:	1a5b      	subs	r3, r3, r1
 8001f04:	0031      	movs	r1, r6
 8001f06:	0035      	movs	r5, r6
 8001f08:	3808      	subs	r0, #8
 8001f0a:	4084      	lsls	r4, r0
 8001f0c:	40d9      	lsrs	r1, r3
 8001f0e:	4085      	lsls	r5, r0
 8001f10:	430c      	orrs	r4, r1
 8001f12:	4826      	ldr	r0, [pc, #152]	; (8001fac <__aeabi_dmul+0x3a4>)
 8001f14:	1a83      	subs	r3, r0, r2
 8001f16:	9300      	str	r3, [sp, #0]
 8001f18:	2300      	movs	r3, #0
 8001f1a:	4699      	mov	r9, r3
 8001f1c:	469b      	mov	fp, r3
 8001f1e:	e697      	b.n	8001c50 <__aeabi_dmul+0x48>
 8001f20:	0005      	movs	r5, r0
 8001f22:	4325      	orrs	r5, r4
 8001f24:	d126      	bne.n	8001f74 <__aeabi_dmul+0x36c>
 8001f26:	2208      	movs	r2, #8
 8001f28:	9300      	str	r3, [sp, #0]
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	2400      	movs	r4, #0
 8001f2e:	4691      	mov	r9, r2
 8001f30:	469b      	mov	fp, r3
 8001f32:	e68d      	b.n	8001c50 <__aeabi_dmul+0x48>
 8001f34:	4652      	mov	r2, sl
 8001f36:	9b00      	ldr	r3, [sp, #0]
 8001f38:	4332      	orrs	r2, r6
 8001f3a:	d110      	bne.n	8001f5e <__aeabi_dmul+0x356>
 8001f3c:	4915      	ldr	r1, [pc, #84]	; (8001f94 <__aeabi_dmul+0x38c>)
 8001f3e:	2600      	movs	r6, #0
 8001f40:	468c      	mov	ip, r1
 8001f42:	4463      	add	r3, ip
 8001f44:	4649      	mov	r1, r9
 8001f46:	9300      	str	r3, [sp, #0]
 8001f48:	2302      	movs	r3, #2
 8001f4a:	4319      	orrs	r1, r3
 8001f4c:	4689      	mov	r9, r1
 8001f4e:	2002      	movs	r0, #2
 8001f50:	e69d      	b.n	8001c8e <__aeabi_dmul+0x86>
 8001f52:	465b      	mov	r3, fp
 8001f54:	9701      	str	r7, [sp, #4]
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d000      	beq.n	8001f5c <__aeabi_dmul+0x354>
 8001f5a:	e6ad      	b.n	8001cb8 <__aeabi_dmul+0xb0>
 8001f5c:	e6c3      	b.n	8001ce6 <__aeabi_dmul+0xde>
 8001f5e:	4a0d      	ldr	r2, [pc, #52]	; (8001f94 <__aeabi_dmul+0x38c>)
 8001f60:	2003      	movs	r0, #3
 8001f62:	4694      	mov	ip, r2
 8001f64:	4463      	add	r3, ip
 8001f66:	464a      	mov	r2, r9
 8001f68:	9300      	str	r3, [sp, #0]
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	4691      	mov	r9, r2
 8001f70:	4652      	mov	r2, sl
 8001f72:	e68c      	b.n	8001c8e <__aeabi_dmul+0x86>
 8001f74:	220c      	movs	r2, #12
 8001f76:	9300      	str	r3, [sp, #0]
 8001f78:	2303      	movs	r3, #3
 8001f7a:	0005      	movs	r5, r0
 8001f7c:	4691      	mov	r9, r2
 8001f7e:	469b      	mov	fp, r3
 8001f80:	e666      	b.n	8001c50 <__aeabi_dmul+0x48>
 8001f82:	2304      	movs	r3, #4
 8001f84:	4699      	mov	r9, r3
 8001f86:	2300      	movs	r3, #0
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	2400      	movs	r4, #0
 8001f8e:	469b      	mov	fp, r3
 8001f90:	e65e      	b.n	8001c50 <__aeabi_dmul+0x48>
 8001f92:	46c0      	nop			; (mov r8, r8)
 8001f94:	000007ff 	.word	0x000007ff
 8001f98:	fffffc01 	.word	0xfffffc01
 8001f9c:	08013034 	.word	0x08013034
 8001fa0:	000003ff 	.word	0x000003ff
 8001fa4:	feffffff 	.word	0xfeffffff
 8001fa8:	000007fe 	.word	0x000007fe
 8001fac:	fffffc0d 	.word	0xfffffc0d
 8001fb0:	4649      	mov	r1, r9
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	4319      	orrs	r1, r3
 8001fb6:	4689      	mov	r9, r1
 8001fb8:	2600      	movs	r6, #0
 8001fba:	2001      	movs	r0, #1
 8001fbc:	e667      	b.n	8001c8e <__aeabi_dmul+0x86>
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	2480      	movs	r4, #128	; 0x80
 8001fc2:	2500      	movs	r5, #0
 8001fc4:	4a43      	ldr	r2, [pc, #268]	; (80020d4 <__aeabi_dmul+0x4cc>)
 8001fc6:	9301      	str	r3, [sp, #4]
 8001fc8:	0324      	lsls	r4, r4, #12
 8001fca:	e67e      	b.n	8001cca <__aeabi_dmul+0xc2>
 8001fcc:	2001      	movs	r0, #1
 8001fce:	1a40      	subs	r0, r0, r1
 8001fd0:	2838      	cmp	r0, #56	; 0x38
 8001fd2:	dd00      	ble.n	8001fd6 <__aeabi_dmul+0x3ce>
 8001fd4:	e676      	b.n	8001cc4 <__aeabi_dmul+0xbc>
 8001fd6:	281f      	cmp	r0, #31
 8001fd8:	dd5b      	ble.n	8002092 <__aeabi_dmul+0x48a>
 8001fda:	221f      	movs	r2, #31
 8001fdc:	0023      	movs	r3, r4
 8001fde:	4252      	negs	r2, r2
 8001fe0:	1a51      	subs	r1, r2, r1
 8001fe2:	40cb      	lsrs	r3, r1
 8001fe4:	0019      	movs	r1, r3
 8001fe6:	2820      	cmp	r0, #32
 8001fe8:	d003      	beq.n	8001ff2 <__aeabi_dmul+0x3ea>
 8001fea:	4a3b      	ldr	r2, [pc, #236]	; (80020d8 <__aeabi_dmul+0x4d0>)
 8001fec:	4462      	add	r2, ip
 8001fee:	4094      	lsls	r4, r2
 8001ff0:	4325      	orrs	r5, r4
 8001ff2:	1e6a      	subs	r2, r5, #1
 8001ff4:	4195      	sbcs	r5, r2
 8001ff6:	002a      	movs	r2, r5
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	2107      	movs	r1, #7
 8001ffc:	000d      	movs	r5, r1
 8001ffe:	2400      	movs	r4, #0
 8002000:	4015      	ands	r5, r2
 8002002:	4211      	tst	r1, r2
 8002004:	d05b      	beq.n	80020be <__aeabi_dmul+0x4b6>
 8002006:	210f      	movs	r1, #15
 8002008:	2400      	movs	r4, #0
 800200a:	4011      	ands	r1, r2
 800200c:	2904      	cmp	r1, #4
 800200e:	d053      	beq.n	80020b8 <__aeabi_dmul+0x4b0>
 8002010:	1d11      	adds	r1, r2, #4
 8002012:	4291      	cmp	r1, r2
 8002014:	4192      	sbcs	r2, r2
 8002016:	4252      	negs	r2, r2
 8002018:	18a4      	adds	r4, r4, r2
 800201a:	000a      	movs	r2, r1
 800201c:	0223      	lsls	r3, r4, #8
 800201e:	d54b      	bpl.n	80020b8 <__aeabi_dmul+0x4b0>
 8002020:	2201      	movs	r2, #1
 8002022:	2400      	movs	r4, #0
 8002024:	2500      	movs	r5, #0
 8002026:	e650      	b.n	8001cca <__aeabi_dmul+0xc2>
 8002028:	2380      	movs	r3, #128	; 0x80
 800202a:	031b      	lsls	r3, r3, #12
 800202c:	421c      	tst	r4, r3
 800202e:	d009      	beq.n	8002044 <__aeabi_dmul+0x43c>
 8002030:	421e      	tst	r6, r3
 8002032:	d107      	bne.n	8002044 <__aeabi_dmul+0x43c>
 8002034:	4333      	orrs	r3, r6
 8002036:	031c      	lsls	r4, r3, #12
 8002038:	4643      	mov	r3, r8
 800203a:	0015      	movs	r5, r2
 800203c:	0b24      	lsrs	r4, r4, #12
 800203e:	4a25      	ldr	r2, [pc, #148]	; (80020d4 <__aeabi_dmul+0x4cc>)
 8002040:	9301      	str	r3, [sp, #4]
 8002042:	e642      	b.n	8001cca <__aeabi_dmul+0xc2>
 8002044:	2280      	movs	r2, #128	; 0x80
 8002046:	0312      	lsls	r2, r2, #12
 8002048:	4314      	orrs	r4, r2
 800204a:	0324      	lsls	r4, r4, #12
 800204c:	4a21      	ldr	r2, [pc, #132]	; (80020d4 <__aeabi_dmul+0x4cc>)
 800204e:	0b24      	lsrs	r4, r4, #12
 8002050:	9701      	str	r7, [sp, #4]
 8002052:	e63a      	b.n	8001cca <__aeabi_dmul+0xc2>
 8002054:	f000 fd8a 	bl	8002b6c <__clzsi2>
 8002058:	0001      	movs	r1, r0
 800205a:	0002      	movs	r2, r0
 800205c:	3115      	adds	r1, #21
 800205e:	3220      	adds	r2, #32
 8002060:	291c      	cmp	r1, #28
 8002062:	dc00      	bgt.n	8002066 <__aeabi_dmul+0x45e>
 8002064:	e74b      	b.n	8001efe <__aeabi_dmul+0x2f6>
 8002066:	0034      	movs	r4, r6
 8002068:	3808      	subs	r0, #8
 800206a:	2500      	movs	r5, #0
 800206c:	4084      	lsls	r4, r0
 800206e:	e750      	b.n	8001f12 <__aeabi_dmul+0x30a>
 8002070:	f000 fd7c 	bl	8002b6c <__clzsi2>
 8002074:	0003      	movs	r3, r0
 8002076:	001a      	movs	r2, r3
 8002078:	3215      	adds	r2, #21
 800207a:	3020      	adds	r0, #32
 800207c:	2a1c      	cmp	r2, #28
 800207e:	dc00      	bgt.n	8002082 <__aeabi_dmul+0x47a>
 8002080:	e71e      	b.n	8001ec0 <__aeabi_dmul+0x2b8>
 8002082:	4656      	mov	r6, sl
 8002084:	3b08      	subs	r3, #8
 8002086:	2200      	movs	r2, #0
 8002088:	409e      	lsls	r6, r3
 800208a:	e723      	b.n	8001ed4 <__aeabi_dmul+0x2cc>
 800208c:	9b00      	ldr	r3, [sp, #0]
 800208e:	469c      	mov	ip, r3
 8002090:	e6e6      	b.n	8001e60 <__aeabi_dmul+0x258>
 8002092:	4912      	ldr	r1, [pc, #72]	; (80020dc <__aeabi_dmul+0x4d4>)
 8002094:	0022      	movs	r2, r4
 8002096:	4461      	add	r1, ip
 8002098:	002e      	movs	r6, r5
 800209a:	408d      	lsls	r5, r1
 800209c:	408a      	lsls	r2, r1
 800209e:	40c6      	lsrs	r6, r0
 80020a0:	1e69      	subs	r1, r5, #1
 80020a2:	418d      	sbcs	r5, r1
 80020a4:	4332      	orrs	r2, r6
 80020a6:	432a      	orrs	r2, r5
 80020a8:	40c4      	lsrs	r4, r0
 80020aa:	0753      	lsls	r3, r2, #29
 80020ac:	d0b6      	beq.n	800201c <__aeabi_dmul+0x414>
 80020ae:	210f      	movs	r1, #15
 80020b0:	4011      	ands	r1, r2
 80020b2:	2904      	cmp	r1, #4
 80020b4:	d1ac      	bne.n	8002010 <__aeabi_dmul+0x408>
 80020b6:	e7b1      	b.n	800201c <__aeabi_dmul+0x414>
 80020b8:	0765      	lsls	r5, r4, #29
 80020ba:	0264      	lsls	r4, r4, #9
 80020bc:	0b24      	lsrs	r4, r4, #12
 80020be:	08d2      	lsrs	r2, r2, #3
 80020c0:	4315      	orrs	r5, r2
 80020c2:	2200      	movs	r2, #0
 80020c4:	e601      	b.n	8001cca <__aeabi_dmul+0xc2>
 80020c6:	2280      	movs	r2, #128	; 0x80
 80020c8:	0312      	lsls	r2, r2, #12
 80020ca:	4314      	orrs	r4, r2
 80020cc:	0324      	lsls	r4, r4, #12
 80020ce:	4a01      	ldr	r2, [pc, #4]	; (80020d4 <__aeabi_dmul+0x4cc>)
 80020d0:	0b24      	lsrs	r4, r4, #12
 80020d2:	e5fa      	b.n	8001cca <__aeabi_dmul+0xc2>
 80020d4:	000007ff 	.word	0x000007ff
 80020d8:	0000043e 	.word	0x0000043e
 80020dc:	0000041e 	.word	0x0000041e

080020e0 <__aeabi_dsub>:
 80020e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020e2:	4657      	mov	r7, sl
 80020e4:	464e      	mov	r6, r9
 80020e6:	4645      	mov	r5, r8
 80020e8:	46de      	mov	lr, fp
 80020ea:	b5e0      	push	{r5, r6, r7, lr}
 80020ec:	001e      	movs	r6, r3
 80020ee:	0017      	movs	r7, r2
 80020f0:	004a      	lsls	r2, r1, #1
 80020f2:	030b      	lsls	r3, r1, #12
 80020f4:	0d52      	lsrs	r2, r2, #21
 80020f6:	0a5b      	lsrs	r3, r3, #9
 80020f8:	4690      	mov	r8, r2
 80020fa:	0f42      	lsrs	r2, r0, #29
 80020fc:	431a      	orrs	r2, r3
 80020fe:	0fcd      	lsrs	r5, r1, #31
 8002100:	4ccd      	ldr	r4, [pc, #820]	; (8002438 <__aeabi_dsub+0x358>)
 8002102:	0331      	lsls	r1, r6, #12
 8002104:	00c3      	lsls	r3, r0, #3
 8002106:	4694      	mov	ip, r2
 8002108:	0070      	lsls	r0, r6, #1
 800210a:	0f7a      	lsrs	r2, r7, #29
 800210c:	0a49      	lsrs	r1, r1, #9
 800210e:	00ff      	lsls	r7, r7, #3
 8002110:	469a      	mov	sl, r3
 8002112:	46b9      	mov	r9, r7
 8002114:	0d40      	lsrs	r0, r0, #21
 8002116:	0ff6      	lsrs	r6, r6, #31
 8002118:	4311      	orrs	r1, r2
 800211a:	42a0      	cmp	r0, r4
 800211c:	d100      	bne.n	8002120 <__aeabi_dsub+0x40>
 800211e:	e0b1      	b.n	8002284 <__aeabi_dsub+0x1a4>
 8002120:	2201      	movs	r2, #1
 8002122:	4056      	eors	r6, r2
 8002124:	46b3      	mov	fp, r6
 8002126:	42b5      	cmp	r5, r6
 8002128:	d100      	bne.n	800212c <__aeabi_dsub+0x4c>
 800212a:	e088      	b.n	800223e <__aeabi_dsub+0x15e>
 800212c:	4642      	mov	r2, r8
 800212e:	1a12      	subs	r2, r2, r0
 8002130:	2a00      	cmp	r2, #0
 8002132:	dc00      	bgt.n	8002136 <__aeabi_dsub+0x56>
 8002134:	e0ae      	b.n	8002294 <__aeabi_dsub+0x1b4>
 8002136:	2800      	cmp	r0, #0
 8002138:	d100      	bne.n	800213c <__aeabi_dsub+0x5c>
 800213a:	e0c1      	b.n	80022c0 <__aeabi_dsub+0x1e0>
 800213c:	48be      	ldr	r0, [pc, #760]	; (8002438 <__aeabi_dsub+0x358>)
 800213e:	4580      	cmp	r8, r0
 8002140:	d100      	bne.n	8002144 <__aeabi_dsub+0x64>
 8002142:	e151      	b.n	80023e8 <__aeabi_dsub+0x308>
 8002144:	2080      	movs	r0, #128	; 0x80
 8002146:	0400      	lsls	r0, r0, #16
 8002148:	4301      	orrs	r1, r0
 800214a:	2a38      	cmp	r2, #56	; 0x38
 800214c:	dd00      	ble.n	8002150 <__aeabi_dsub+0x70>
 800214e:	e17b      	b.n	8002448 <__aeabi_dsub+0x368>
 8002150:	2a1f      	cmp	r2, #31
 8002152:	dd00      	ble.n	8002156 <__aeabi_dsub+0x76>
 8002154:	e1ee      	b.n	8002534 <__aeabi_dsub+0x454>
 8002156:	2020      	movs	r0, #32
 8002158:	003e      	movs	r6, r7
 800215a:	1a80      	subs	r0, r0, r2
 800215c:	000c      	movs	r4, r1
 800215e:	40d6      	lsrs	r6, r2
 8002160:	40d1      	lsrs	r1, r2
 8002162:	4087      	lsls	r7, r0
 8002164:	4662      	mov	r2, ip
 8002166:	4084      	lsls	r4, r0
 8002168:	1a52      	subs	r2, r2, r1
 800216a:	1e78      	subs	r0, r7, #1
 800216c:	4187      	sbcs	r7, r0
 800216e:	4694      	mov	ip, r2
 8002170:	4334      	orrs	r4, r6
 8002172:	4327      	orrs	r7, r4
 8002174:	1bdc      	subs	r4, r3, r7
 8002176:	42a3      	cmp	r3, r4
 8002178:	419b      	sbcs	r3, r3
 800217a:	4662      	mov	r2, ip
 800217c:	425b      	negs	r3, r3
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	4699      	mov	r9, r3
 8002182:	464b      	mov	r3, r9
 8002184:	021b      	lsls	r3, r3, #8
 8002186:	d400      	bmi.n	800218a <__aeabi_dsub+0xaa>
 8002188:	e118      	b.n	80023bc <__aeabi_dsub+0x2dc>
 800218a:	464b      	mov	r3, r9
 800218c:	0258      	lsls	r0, r3, #9
 800218e:	0a43      	lsrs	r3, r0, #9
 8002190:	4699      	mov	r9, r3
 8002192:	464b      	mov	r3, r9
 8002194:	2b00      	cmp	r3, #0
 8002196:	d100      	bne.n	800219a <__aeabi_dsub+0xba>
 8002198:	e137      	b.n	800240a <__aeabi_dsub+0x32a>
 800219a:	4648      	mov	r0, r9
 800219c:	f000 fce6 	bl	8002b6c <__clzsi2>
 80021a0:	0001      	movs	r1, r0
 80021a2:	3908      	subs	r1, #8
 80021a4:	2320      	movs	r3, #32
 80021a6:	0022      	movs	r2, r4
 80021a8:	4648      	mov	r0, r9
 80021aa:	1a5b      	subs	r3, r3, r1
 80021ac:	40da      	lsrs	r2, r3
 80021ae:	4088      	lsls	r0, r1
 80021b0:	408c      	lsls	r4, r1
 80021b2:	4643      	mov	r3, r8
 80021b4:	4310      	orrs	r0, r2
 80021b6:	4588      	cmp	r8, r1
 80021b8:	dd00      	ble.n	80021bc <__aeabi_dsub+0xdc>
 80021ba:	e136      	b.n	800242a <__aeabi_dsub+0x34a>
 80021bc:	1ac9      	subs	r1, r1, r3
 80021be:	1c4b      	adds	r3, r1, #1
 80021c0:	2b1f      	cmp	r3, #31
 80021c2:	dd00      	ble.n	80021c6 <__aeabi_dsub+0xe6>
 80021c4:	e0ea      	b.n	800239c <__aeabi_dsub+0x2bc>
 80021c6:	2220      	movs	r2, #32
 80021c8:	0026      	movs	r6, r4
 80021ca:	1ad2      	subs	r2, r2, r3
 80021cc:	0001      	movs	r1, r0
 80021ce:	4094      	lsls	r4, r2
 80021d0:	40de      	lsrs	r6, r3
 80021d2:	40d8      	lsrs	r0, r3
 80021d4:	2300      	movs	r3, #0
 80021d6:	4091      	lsls	r1, r2
 80021d8:	1e62      	subs	r2, r4, #1
 80021da:	4194      	sbcs	r4, r2
 80021dc:	4681      	mov	r9, r0
 80021de:	4698      	mov	r8, r3
 80021e0:	4331      	orrs	r1, r6
 80021e2:	430c      	orrs	r4, r1
 80021e4:	0763      	lsls	r3, r4, #29
 80021e6:	d009      	beq.n	80021fc <__aeabi_dsub+0x11c>
 80021e8:	230f      	movs	r3, #15
 80021ea:	4023      	ands	r3, r4
 80021ec:	2b04      	cmp	r3, #4
 80021ee:	d005      	beq.n	80021fc <__aeabi_dsub+0x11c>
 80021f0:	1d23      	adds	r3, r4, #4
 80021f2:	42a3      	cmp	r3, r4
 80021f4:	41a4      	sbcs	r4, r4
 80021f6:	4264      	negs	r4, r4
 80021f8:	44a1      	add	r9, r4
 80021fa:	001c      	movs	r4, r3
 80021fc:	464b      	mov	r3, r9
 80021fe:	021b      	lsls	r3, r3, #8
 8002200:	d400      	bmi.n	8002204 <__aeabi_dsub+0x124>
 8002202:	e0de      	b.n	80023c2 <__aeabi_dsub+0x2e2>
 8002204:	4641      	mov	r1, r8
 8002206:	4b8c      	ldr	r3, [pc, #560]	; (8002438 <__aeabi_dsub+0x358>)
 8002208:	3101      	adds	r1, #1
 800220a:	4299      	cmp	r1, r3
 800220c:	d100      	bne.n	8002210 <__aeabi_dsub+0x130>
 800220e:	e0e7      	b.n	80023e0 <__aeabi_dsub+0x300>
 8002210:	464b      	mov	r3, r9
 8002212:	488a      	ldr	r0, [pc, #552]	; (800243c <__aeabi_dsub+0x35c>)
 8002214:	08e4      	lsrs	r4, r4, #3
 8002216:	4003      	ands	r3, r0
 8002218:	0018      	movs	r0, r3
 800221a:	0549      	lsls	r1, r1, #21
 800221c:	075b      	lsls	r3, r3, #29
 800221e:	0240      	lsls	r0, r0, #9
 8002220:	4323      	orrs	r3, r4
 8002222:	0d4a      	lsrs	r2, r1, #21
 8002224:	0b04      	lsrs	r4, r0, #12
 8002226:	0512      	lsls	r2, r2, #20
 8002228:	07ed      	lsls	r5, r5, #31
 800222a:	4322      	orrs	r2, r4
 800222c:	432a      	orrs	r2, r5
 800222e:	0018      	movs	r0, r3
 8002230:	0011      	movs	r1, r2
 8002232:	bcf0      	pop	{r4, r5, r6, r7}
 8002234:	46bb      	mov	fp, r7
 8002236:	46b2      	mov	sl, r6
 8002238:	46a9      	mov	r9, r5
 800223a:	46a0      	mov	r8, r4
 800223c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800223e:	4642      	mov	r2, r8
 8002240:	1a12      	subs	r2, r2, r0
 8002242:	2a00      	cmp	r2, #0
 8002244:	dd52      	ble.n	80022ec <__aeabi_dsub+0x20c>
 8002246:	2800      	cmp	r0, #0
 8002248:	d100      	bne.n	800224c <__aeabi_dsub+0x16c>
 800224a:	e09c      	b.n	8002386 <__aeabi_dsub+0x2a6>
 800224c:	45a0      	cmp	r8, r4
 800224e:	d100      	bne.n	8002252 <__aeabi_dsub+0x172>
 8002250:	e0ca      	b.n	80023e8 <__aeabi_dsub+0x308>
 8002252:	2080      	movs	r0, #128	; 0x80
 8002254:	0400      	lsls	r0, r0, #16
 8002256:	4301      	orrs	r1, r0
 8002258:	2a38      	cmp	r2, #56	; 0x38
 800225a:	dd00      	ble.n	800225e <__aeabi_dsub+0x17e>
 800225c:	e149      	b.n	80024f2 <__aeabi_dsub+0x412>
 800225e:	2a1f      	cmp	r2, #31
 8002260:	dc00      	bgt.n	8002264 <__aeabi_dsub+0x184>
 8002262:	e197      	b.n	8002594 <__aeabi_dsub+0x4b4>
 8002264:	0010      	movs	r0, r2
 8002266:	000e      	movs	r6, r1
 8002268:	3820      	subs	r0, #32
 800226a:	40c6      	lsrs	r6, r0
 800226c:	2a20      	cmp	r2, #32
 800226e:	d004      	beq.n	800227a <__aeabi_dsub+0x19a>
 8002270:	2040      	movs	r0, #64	; 0x40
 8002272:	1a82      	subs	r2, r0, r2
 8002274:	4091      	lsls	r1, r2
 8002276:	430f      	orrs	r7, r1
 8002278:	46b9      	mov	r9, r7
 800227a:	464c      	mov	r4, r9
 800227c:	1e62      	subs	r2, r4, #1
 800227e:	4194      	sbcs	r4, r2
 8002280:	4334      	orrs	r4, r6
 8002282:	e13a      	b.n	80024fa <__aeabi_dsub+0x41a>
 8002284:	000a      	movs	r2, r1
 8002286:	433a      	orrs	r2, r7
 8002288:	d028      	beq.n	80022dc <__aeabi_dsub+0x1fc>
 800228a:	46b3      	mov	fp, r6
 800228c:	42b5      	cmp	r5, r6
 800228e:	d02b      	beq.n	80022e8 <__aeabi_dsub+0x208>
 8002290:	4a6b      	ldr	r2, [pc, #428]	; (8002440 <__aeabi_dsub+0x360>)
 8002292:	4442      	add	r2, r8
 8002294:	2a00      	cmp	r2, #0
 8002296:	d05d      	beq.n	8002354 <__aeabi_dsub+0x274>
 8002298:	4642      	mov	r2, r8
 800229a:	4644      	mov	r4, r8
 800229c:	1a82      	subs	r2, r0, r2
 800229e:	2c00      	cmp	r4, #0
 80022a0:	d000      	beq.n	80022a4 <__aeabi_dsub+0x1c4>
 80022a2:	e0f5      	b.n	8002490 <__aeabi_dsub+0x3b0>
 80022a4:	4665      	mov	r5, ip
 80022a6:	431d      	orrs	r5, r3
 80022a8:	d100      	bne.n	80022ac <__aeabi_dsub+0x1cc>
 80022aa:	e19c      	b.n	80025e6 <__aeabi_dsub+0x506>
 80022ac:	1e55      	subs	r5, r2, #1
 80022ae:	2a01      	cmp	r2, #1
 80022b0:	d100      	bne.n	80022b4 <__aeabi_dsub+0x1d4>
 80022b2:	e1fb      	b.n	80026ac <__aeabi_dsub+0x5cc>
 80022b4:	4c60      	ldr	r4, [pc, #384]	; (8002438 <__aeabi_dsub+0x358>)
 80022b6:	42a2      	cmp	r2, r4
 80022b8:	d100      	bne.n	80022bc <__aeabi_dsub+0x1dc>
 80022ba:	e1bd      	b.n	8002638 <__aeabi_dsub+0x558>
 80022bc:	002a      	movs	r2, r5
 80022be:	e0f0      	b.n	80024a2 <__aeabi_dsub+0x3c2>
 80022c0:	0008      	movs	r0, r1
 80022c2:	4338      	orrs	r0, r7
 80022c4:	d100      	bne.n	80022c8 <__aeabi_dsub+0x1e8>
 80022c6:	e0c3      	b.n	8002450 <__aeabi_dsub+0x370>
 80022c8:	1e50      	subs	r0, r2, #1
 80022ca:	2a01      	cmp	r2, #1
 80022cc:	d100      	bne.n	80022d0 <__aeabi_dsub+0x1f0>
 80022ce:	e1a8      	b.n	8002622 <__aeabi_dsub+0x542>
 80022d0:	4c59      	ldr	r4, [pc, #356]	; (8002438 <__aeabi_dsub+0x358>)
 80022d2:	42a2      	cmp	r2, r4
 80022d4:	d100      	bne.n	80022d8 <__aeabi_dsub+0x1f8>
 80022d6:	e087      	b.n	80023e8 <__aeabi_dsub+0x308>
 80022d8:	0002      	movs	r2, r0
 80022da:	e736      	b.n	800214a <__aeabi_dsub+0x6a>
 80022dc:	2201      	movs	r2, #1
 80022de:	4056      	eors	r6, r2
 80022e0:	46b3      	mov	fp, r6
 80022e2:	42b5      	cmp	r5, r6
 80022e4:	d000      	beq.n	80022e8 <__aeabi_dsub+0x208>
 80022e6:	e721      	b.n	800212c <__aeabi_dsub+0x4c>
 80022e8:	4a55      	ldr	r2, [pc, #340]	; (8002440 <__aeabi_dsub+0x360>)
 80022ea:	4442      	add	r2, r8
 80022ec:	2a00      	cmp	r2, #0
 80022ee:	d100      	bne.n	80022f2 <__aeabi_dsub+0x212>
 80022f0:	e0b5      	b.n	800245e <__aeabi_dsub+0x37e>
 80022f2:	4642      	mov	r2, r8
 80022f4:	4644      	mov	r4, r8
 80022f6:	1a82      	subs	r2, r0, r2
 80022f8:	2c00      	cmp	r4, #0
 80022fa:	d100      	bne.n	80022fe <__aeabi_dsub+0x21e>
 80022fc:	e138      	b.n	8002570 <__aeabi_dsub+0x490>
 80022fe:	4e4e      	ldr	r6, [pc, #312]	; (8002438 <__aeabi_dsub+0x358>)
 8002300:	42b0      	cmp	r0, r6
 8002302:	d100      	bne.n	8002306 <__aeabi_dsub+0x226>
 8002304:	e1de      	b.n	80026c4 <__aeabi_dsub+0x5e4>
 8002306:	2680      	movs	r6, #128	; 0x80
 8002308:	4664      	mov	r4, ip
 800230a:	0436      	lsls	r6, r6, #16
 800230c:	4334      	orrs	r4, r6
 800230e:	46a4      	mov	ip, r4
 8002310:	2a38      	cmp	r2, #56	; 0x38
 8002312:	dd00      	ble.n	8002316 <__aeabi_dsub+0x236>
 8002314:	e196      	b.n	8002644 <__aeabi_dsub+0x564>
 8002316:	2a1f      	cmp	r2, #31
 8002318:	dd00      	ble.n	800231c <__aeabi_dsub+0x23c>
 800231a:	e224      	b.n	8002766 <__aeabi_dsub+0x686>
 800231c:	2620      	movs	r6, #32
 800231e:	1ab4      	subs	r4, r6, r2
 8002320:	46a2      	mov	sl, r4
 8002322:	4664      	mov	r4, ip
 8002324:	4656      	mov	r6, sl
 8002326:	40b4      	lsls	r4, r6
 8002328:	46a1      	mov	r9, r4
 800232a:	001c      	movs	r4, r3
 800232c:	464e      	mov	r6, r9
 800232e:	40d4      	lsrs	r4, r2
 8002330:	4326      	orrs	r6, r4
 8002332:	0034      	movs	r4, r6
 8002334:	4656      	mov	r6, sl
 8002336:	40b3      	lsls	r3, r6
 8002338:	1e5e      	subs	r6, r3, #1
 800233a:	41b3      	sbcs	r3, r6
 800233c:	431c      	orrs	r4, r3
 800233e:	4663      	mov	r3, ip
 8002340:	40d3      	lsrs	r3, r2
 8002342:	18c9      	adds	r1, r1, r3
 8002344:	19e4      	adds	r4, r4, r7
 8002346:	42bc      	cmp	r4, r7
 8002348:	41bf      	sbcs	r7, r7
 800234a:	427f      	negs	r7, r7
 800234c:	46b9      	mov	r9, r7
 800234e:	4680      	mov	r8, r0
 8002350:	4489      	add	r9, r1
 8002352:	e0d8      	b.n	8002506 <__aeabi_dsub+0x426>
 8002354:	4640      	mov	r0, r8
 8002356:	4c3b      	ldr	r4, [pc, #236]	; (8002444 <__aeabi_dsub+0x364>)
 8002358:	3001      	adds	r0, #1
 800235a:	4220      	tst	r0, r4
 800235c:	d000      	beq.n	8002360 <__aeabi_dsub+0x280>
 800235e:	e0b4      	b.n	80024ca <__aeabi_dsub+0x3ea>
 8002360:	4640      	mov	r0, r8
 8002362:	2800      	cmp	r0, #0
 8002364:	d000      	beq.n	8002368 <__aeabi_dsub+0x288>
 8002366:	e144      	b.n	80025f2 <__aeabi_dsub+0x512>
 8002368:	4660      	mov	r0, ip
 800236a:	4318      	orrs	r0, r3
 800236c:	d100      	bne.n	8002370 <__aeabi_dsub+0x290>
 800236e:	e190      	b.n	8002692 <__aeabi_dsub+0x5b2>
 8002370:	0008      	movs	r0, r1
 8002372:	4338      	orrs	r0, r7
 8002374:	d000      	beq.n	8002378 <__aeabi_dsub+0x298>
 8002376:	e1aa      	b.n	80026ce <__aeabi_dsub+0x5ee>
 8002378:	4661      	mov	r1, ip
 800237a:	08db      	lsrs	r3, r3, #3
 800237c:	0749      	lsls	r1, r1, #29
 800237e:	430b      	orrs	r3, r1
 8002380:	4661      	mov	r1, ip
 8002382:	08cc      	lsrs	r4, r1, #3
 8002384:	e027      	b.n	80023d6 <__aeabi_dsub+0x2f6>
 8002386:	0008      	movs	r0, r1
 8002388:	4338      	orrs	r0, r7
 800238a:	d061      	beq.n	8002450 <__aeabi_dsub+0x370>
 800238c:	1e50      	subs	r0, r2, #1
 800238e:	2a01      	cmp	r2, #1
 8002390:	d100      	bne.n	8002394 <__aeabi_dsub+0x2b4>
 8002392:	e139      	b.n	8002608 <__aeabi_dsub+0x528>
 8002394:	42a2      	cmp	r2, r4
 8002396:	d027      	beq.n	80023e8 <__aeabi_dsub+0x308>
 8002398:	0002      	movs	r2, r0
 800239a:	e75d      	b.n	8002258 <__aeabi_dsub+0x178>
 800239c:	0002      	movs	r2, r0
 800239e:	391f      	subs	r1, #31
 80023a0:	40ca      	lsrs	r2, r1
 80023a2:	0011      	movs	r1, r2
 80023a4:	2b20      	cmp	r3, #32
 80023a6:	d003      	beq.n	80023b0 <__aeabi_dsub+0x2d0>
 80023a8:	2240      	movs	r2, #64	; 0x40
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	4098      	lsls	r0, r3
 80023ae:	4304      	orrs	r4, r0
 80023b0:	1e63      	subs	r3, r4, #1
 80023b2:	419c      	sbcs	r4, r3
 80023b4:	2300      	movs	r3, #0
 80023b6:	4699      	mov	r9, r3
 80023b8:	4698      	mov	r8, r3
 80023ba:	430c      	orrs	r4, r1
 80023bc:	0763      	lsls	r3, r4, #29
 80023be:	d000      	beq.n	80023c2 <__aeabi_dsub+0x2e2>
 80023c0:	e712      	b.n	80021e8 <__aeabi_dsub+0x108>
 80023c2:	464b      	mov	r3, r9
 80023c4:	464a      	mov	r2, r9
 80023c6:	08e4      	lsrs	r4, r4, #3
 80023c8:	075b      	lsls	r3, r3, #29
 80023ca:	4323      	orrs	r3, r4
 80023cc:	08d4      	lsrs	r4, r2, #3
 80023ce:	4642      	mov	r2, r8
 80023d0:	4919      	ldr	r1, [pc, #100]	; (8002438 <__aeabi_dsub+0x358>)
 80023d2:	428a      	cmp	r2, r1
 80023d4:	d00e      	beq.n	80023f4 <__aeabi_dsub+0x314>
 80023d6:	0324      	lsls	r4, r4, #12
 80023d8:	0552      	lsls	r2, r2, #21
 80023da:	0b24      	lsrs	r4, r4, #12
 80023dc:	0d52      	lsrs	r2, r2, #21
 80023de:	e722      	b.n	8002226 <__aeabi_dsub+0x146>
 80023e0:	000a      	movs	r2, r1
 80023e2:	2400      	movs	r4, #0
 80023e4:	2300      	movs	r3, #0
 80023e6:	e71e      	b.n	8002226 <__aeabi_dsub+0x146>
 80023e8:	08db      	lsrs	r3, r3, #3
 80023ea:	4662      	mov	r2, ip
 80023ec:	0752      	lsls	r2, r2, #29
 80023ee:	4313      	orrs	r3, r2
 80023f0:	4662      	mov	r2, ip
 80023f2:	08d4      	lsrs	r4, r2, #3
 80023f4:	001a      	movs	r2, r3
 80023f6:	4322      	orrs	r2, r4
 80023f8:	d100      	bne.n	80023fc <__aeabi_dsub+0x31c>
 80023fa:	e1fc      	b.n	80027f6 <__aeabi_dsub+0x716>
 80023fc:	2280      	movs	r2, #128	; 0x80
 80023fe:	0312      	lsls	r2, r2, #12
 8002400:	4314      	orrs	r4, r2
 8002402:	0324      	lsls	r4, r4, #12
 8002404:	4a0c      	ldr	r2, [pc, #48]	; (8002438 <__aeabi_dsub+0x358>)
 8002406:	0b24      	lsrs	r4, r4, #12
 8002408:	e70d      	b.n	8002226 <__aeabi_dsub+0x146>
 800240a:	0020      	movs	r0, r4
 800240c:	f000 fbae 	bl	8002b6c <__clzsi2>
 8002410:	0001      	movs	r1, r0
 8002412:	3118      	adds	r1, #24
 8002414:	291f      	cmp	r1, #31
 8002416:	dc00      	bgt.n	800241a <__aeabi_dsub+0x33a>
 8002418:	e6c4      	b.n	80021a4 <__aeabi_dsub+0xc4>
 800241a:	3808      	subs	r0, #8
 800241c:	4084      	lsls	r4, r0
 800241e:	4643      	mov	r3, r8
 8002420:	0020      	movs	r0, r4
 8002422:	2400      	movs	r4, #0
 8002424:	4588      	cmp	r8, r1
 8002426:	dc00      	bgt.n	800242a <__aeabi_dsub+0x34a>
 8002428:	e6c8      	b.n	80021bc <__aeabi_dsub+0xdc>
 800242a:	4a04      	ldr	r2, [pc, #16]	; (800243c <__aeabi_dsub+0x35c>)
 800242c:	1a5b      	subs	r3, r3, r1
 800242e:	4010      	ands	r0, r2
 8002430:	4698      	mov	r8, r3
 8002432:	4681      	mov	r9, r0
 8002434:	e6d6      	b.n	80021e4 <__aeabi_dsub+0x104>
 8002436:	46c0      	nop			; (mov r8, r8)
 8002438:	000007ff 	.word	0x000007ff
 800243c:	ff7fffff 	.word	0xff7fffff
 8002440:	fffff801 	.word	0xfffff801
 8002444:	000007fe 	.word	0x000007fe
 8002448:	430f      	orrs	r7, r1
 800244a:	1e7a      	subs	r2, r7, #1
 800244c:	4197      	sbcs	r7, r2
 800244e:	e691      	b.n	8002174 <__aeabi_dsub+0x94>
 8002450:	4661      	mov	r1, ip
 8002452:	08db      	lsrs	r3, r3, #3
 8002454:	0749      	lsls	r1, r1, #29
 8002456:	430b      	orrs	r3, r1
 8002458:	4661      	mov	r1, ip
 800245a:	08cc      	lsrs	r4, r1, #3
 800245c:	e7b8      	b.n	80023d0 <__aeabi_dsub+0x2f0>
 800245e:	4640      	mov	r0, r8
 8002460:	4cd3      	ldr	r4, [pc, #844]	; (80027b0 <__aeabi_dsub+0x6d0>)
 8002462:	3001      	adds	r0, #1
 8002464:	4220      	tst	r0, r4
 8002466:	d000      	beq.n	800246a <__aeabi_dsub+0x38a>
 8002468:	e0a2      	b.n	80025b0 <__aeabi_dsub+0x4d0>
 800246a:	4640      	mov	r0, r8
 800246c:	2800      	cmp	r0, #0
 800246e:	d000      	beq.n	8002472 <__aeabi_dsub+0x392>
 8002470:	e101      	b.n	8002676 <__aeabi_dsub+0x596>
 8002472:	4660      	mov	r0, ip
 8002474:	4318      	orrs	r0, r3
 8002476:	d100      	bne.n	800247a <__aeabi_dsub+0x39a>
 8002478:	e15e      	b.n	8002738 <__aeabi_dsub+0x658>
 800247a:	0008      	movs	r0, r1
 800247c:	4338      	orrs	r0, r7
 800247e:	d000      	beq.n	8002482 <__aeabi_dsub+0x3a2>
 8002480:	e15f      	b.n	8002742 <__aeabi_dsub+0x662>
 8002482:	4661      	mov	r1, ip
 8002484:	08db      	lsrs	r3, r3, #3
 8002486:	0749      	lsls	r1, r1, #29
 8002488:	430b      	orrs	r3, r1
 800248a:	4661      	mov	r1, ip
 800248c:	08cc      	lsrs	r4, r1, #3
 800248e:	e7a2      	b.n	80023d6 <__aeabi_dsub+0x2f6>
 8002490:	4dc8      	ldr	r5, [pc, #800]	; (80027b4 <__aeabi_dsub+0x6d4>)
 8002492:	42a8      	cmp	r0, r5
 8002494:	d100      	bne.n	8002498 <__aeabi_dsub+0x3b8>
 8002496:	e0cf      	b.n	8002638 <__aeabi_dsub+0x558>
 8002498:	2580      	movs	r5, #128	; 0x80
 800249a:	4664      	mov	r4, ip
 800249c:	042d      	lsls	r5, r5, #16
 800249e:	432c      	orrs	r4, r5
 80024a0:	46a4      	mov	ip, r4
 80024a2:	2a38      	cmp	r2, #56	; 0x38
 80024a4:	dc56      	bgt.n	8002554 <__aeabi_dsub+0x474>
 80024a6:	2a1f      	cmp	r2, #31
 80024a8:	dd00      	ble.n	80024ac <__aeabi_dsub+0x3cc>
 80024aa:	e0d1      	b.n	8002650 <__aeabi_dsub+0x570>
 80024ac:	2520      	movs	r5, #32
 80024ae:	001e      	movs	r6, r3
 80024b0:	1aad      	subs	r5, r5, r2
 80024b2:	4664      	mov	r4, ip
 80024b4:	40ab      	lsls	r3, r5
 80024b6:	40ac      	lsls	r4, r5
 80024b8:	40d6      	lsrs	r6, r2
 80024ba:	1e5d      	subs	r5, r3, #1
 80024bc:	41ab      	sbcs	r3, r5
 80024be:	4334      	orrs	r4, r6
 80024c0:	4323      	orrs	r3, r4
 80024c2:	4664      	mov	r4, ip
 80024c4:	40d4      	lsrs	r4, r2
 80024c6:	1b09      	subs	r1, r1, r4
 80024c8:	e049      	b.n	800255e <__aeabi_dsub+0x47e>
 80024ca:	4660      	mov	r0, ip
 80024cc:	1bdc      	subs	r4, r3, r7
 80024ce:	1a46      	subs	r6, r0, r1
 80024d0:	42a3      	cmp	r3, r4
 80024d2:	4180      	sbcs	r0, r0
 80024d4:	4240      	negs	r0, r0
 80024d6:	4681      	mov	r9, r0
 80024d8:	0030      	movs	r0, r6
 80024da:	464e      	mov	r6, r9
 80024dc:	1b80      	subs	r0, r0, r6
 80024de:	4681      	mov	r9, r0
 80024e0:	0200      	lsls	r0, r0, #8
 80024e2:	d476      	bmi.n	80025d2 <__aeabi_dsub+0x4f2>
 80024e4:	464b      	mov	r3, r9
 80024e6:	4323      	orrs	r3, r4
 80024e8:	d000      	beq.n	80024ec <__aeabi_dsub+0x40c>
 80024ea:	e652      	b.n	8002192 <__aeabi_dsub+0xb2>
 80024ec:	2400      	movs	r4, #0
 80024ee:	2500      	movs	r5, #0
 80024f0:	e771      	b.n	80023d6 <__aeabi_dsub+0x2f6>
 80024f2:	4339      	orrs	r1, r7
 80024f4:	000c      	movs	r4, r1
 80024f6:	1e62      	subs	r2, r4, #1
 80024f8:	4194      	sbcs	r4, r2
 80024fa:	18e4      	adds	r4, r4, r3
 80024fc:	429c      	cmp	r4, r3
 80024fe:	419b      	sbcs	r3, r3
 8002500:	425b      	negs	r3, r3
 8002502:	4463      	add	r3, ip
 8002504:	4699      	mov	r9, r3
 8002506:	464b      	mov	r3, r9
 8002508:	021b      	lsls	r3, r3, #8
 800250a:	d400      	bmi.n	800250e <__aeabi_dsub+0x42e>
 800250c:	e756      	b.n	80023bc <__aeabi_dsub+0x2dc>
 800250e:	2301      	movs	r3, #1
 8002510:	469c      	mov	ip, r3
 8002512:	4ba8      	ldr	r3, [pc, #672]	; (80027b4 <__aeabi_dsub+0x6d4>)
 8002514:	44e0      	add	r8, ip
 8002516:	4598      	cmp	r8, r3
 8002518:	d038      	beq.n	800258c <__aeabi_dsub+0x4ac>
 800251a:	464b      	mov	r3, r9
 800251c:	48a6      	ldr	r0, [pc, #664]	; (80027b8 <__aeabi_dsub+0x6d8>)
 800251e:	2201      	movs	r2, #1
 8002520:	4003      	ands	r3, r0
 8002522:	0018      	movs	r0, r3
 8002524:	0863      	lsrs	r3, r4, #1
 8002526:	4014      	ands	r4, r2
 8002528:	431c      	orrs	r4, r3
 800252a:	07c3      	lsls	r3, r0, #31
 800252c:	431c      	orrs	r4, r3
 800252e:	0843      	lsrs	r3, r0, #1
 8002530:	4699      	mov	r9, r3
 8002532:	e657      	b.n	80021e4 <__aeabi_dsub+0x104>
 8002534:	0010      	movs	r0, r2
 8002536:	000e      	movs	r6, r1
 8002538:	3820      	subs	r0, #32
 800253a:	40c6      	lsrs	r6, r0
 800253c:	2a20      	cmp	r2, #32
 800253e:	d004      	beq.n	800254a <__aeabi_dsub+0x46a>
 8002540:	2040      	movs	r0, #64	; 0x40
 8002542:	1a82      	subs	r2, r0, r2
 8002544:	4091      	lsls	r1, r2
 8002546:	430f      	orrs	r7, r1
 8002548:	46b9      	mov	r9, r7
 800254a:	464f      	mov	r7, r9
 800254c:	1e7a      	subs	r2, r7, #1
 800254e:	4197      	sbcs	r7, r2
 8002550:	4337      	orrs	r7, r6
 8002552:	e60f      	b.n	8002174 <__aeabi_dsub+0x94>
 8002554:	4662      	mov	r2, ip
 8002556:	431a      	orrs	r2, r3
 8002558:	0013      	movs	r3, r2
 800255a:	1e5a      	subs	r2, r3, #1
 800255c:	4193      	sbcs	r3, r2
 800255e:	1afc      	subs	r4, r7, r3
 8002560:	42a7      	cmp	r7, r4
 8002562:	41bf      	sbcs	r7, r7
 8002564:	427f      	negs	r7, r7
 8002566:	1bcb      	subs	r3, r1, r7
 8002568:	4699      	mov	r9, r3
 800256a:	465d      	mov	r5, fp
 800256c:	4680      	mov	r8, r0
 800256e:	e608      	b.n	8002182 <__aeabi_dsub+0xa2>
 8002570:	4666      	mov	r6, ip
 8002572:	431e      	orrs	r6, r3
 8002574:	d100      	bne.n	8002578 <__aeabi_dsub+0x498>
 8002576:	e0be      	b.n	80026f6 <__aeabi_dsub+0x616>
 8002578:	1e56      	subs	r6, r2, #1
 800257a:	2a01      	cmp	r2, #1
 800257c:	d100      	bne.n	8002580 <__aeabi_dsub+0x4a0>
 800257e:	e109      	b.n	8002794 <__aeabi_dsub+0x6b4>
 8002580:	4c8c      	ldr	r4, [pc, #560]	; (80027b4 <__aeabi_dsub+0x6d4>)
 8002582:	42a2      	cmp	r2, r4
 8002584:	d100      	bne.n	8002588 <__aeabi_dsub+0x4a8>
 8002586:	e119      	b.n	80027bc <__aeabi_dsub+0x6dc>
 8002588:	0032      	movs	r2, r6
 800258a:	e6c1      	b.n	8002310 <__aeabi_dsub+0x230>
 800258c:	4642      	mov	r2, r8
 800258e:	2400      	movs	r4, #0
 8002590:	2300      	movs	r3, #0
 8002592:	e648      	b.n	8002226 <__aeabi_dsub+0x146>
 8002594:	2020      	movs	r0, #32
 8002596:	000c      	movs	r4, r1
 8002598:	1a80      	subs	r0, r0, r2
 800259a:	003e      	movs	r6, r7
 800259c:	4087      	lsls	r7, r0
 800259e:	4084      	lsls	r4, r0
 80025a0:	40d6      	lsrs	r6, r2
 80025a2:	1e78      	subs	r0, r7, #1
 80025a4:	4187      	sbcs	r7, r0
 80025a6:	40d1      	lsrs	r1, r2
 80025a8:	4334      	orrs	r4, r6
 80025aa:	433c      	orrs	r4, r7
 80025ac:	448c      	add	ip, r1
 80025ae:	e7a4      	b.n	80024fa <__aeabi_dsub+0x41a>
 80025b0:	4a80      	ldr	r2, [pc, #512]	; (80027b4 <__aeabi_dsub+0x6d4>)
 80025b2:	4290      	cmp	r0, r2
 80025b4:	d100      	bne.n	80025b8 <__aeabi_dsub+0x4d8>
 80025b6:	e0e9      	b.n	800278c <__aeabi_dsub+0x6ac>
 80025b8:	19df      	adds	r7, r3, r7
 80025ba:	429f      	cmp	r7, r3
 80025bc:	419b      	sbcs	r3, r3
 80025be:	4461      	add	r1, ip
 80025c0:	425b      	negs	r3, r3
 80025c2:	18c9      	adds	r1, r1, r3
 80025c4:	07cc      	lsls	r4, r1, #31
 80025c6:	087f      	lsrs	r7, r7, #1
 80025c8:	084b      	lsrs	r3, r1, #1
 80025ca:	4699      	mov	r9, r3
 80025cc:	4680      	mov	r8, r0
 80025ce:	433c      	orrs	r4, r7
 80025d0:	e6f4      	b.n	80023bc <__aeabi_dsub+0x2dc>
 80025d2:	1afc      	subs	r4, r7, r3
 80025d4:	42a7      	cmp	r7, r4
 80025d6:	41bf      	sbcs	r7, r7
 80025d8:	4663      	mov	r3, ip
 80025da:	427f      	negs	r7, r7
 80025dc:	1ac9      	subs	r1, r1, r3
 80025de:	1bcb      	subs	r3, r1, r7
 80025e0:	4699      	mov	r9, r3
 80025e2:	465d      	mov	r5, fp
 80025e4:	e5d5      	b.n	8002192 <__aeabi_dsub+0xb2>
 80025e6:	08ff      	lsrs	r7, r7, #3
 80025e8:	074b      	lsls	r3, r1, #29
 80025ea:	465d      	mov	r5, fp
 80025ec:	433b      	orrs	r3, r7
 80025ee:	08cc      	lsrs	r4, r1, #3
 80025f0:	e6ee      	b.n	80023d0 <__aeabi_dsub+0x2f0>
 80025f2:	4662      	mov	r2, ip
 80025f4:	431a      	orrs	r2, r3
 80025f6:	d000      	beq.n	80025fa <__aeabi_dsub+0x51a>
 80025f8:	e082      	b.n	8002700 <__aeabi_dsub+0x620>
 80025fa:	000b      	movs	r3, r1
 80025fc:	433b      	orrs	r3, r7
 80025fe:	d11b      	bne.n	8002638 <__aeabi_dsub+0x558>
 8002600:	2480      	movs	r4, #128	; 0x80
 8002602:	2500      	movs	r5, #0
 8002604:	0324      	lsls	r4, r4, #12
 8002606:	e6f9      	b.n	80023fc <__aeabi_dsub+0x31c>
 8002608:	19dc      	adds	r4, r3, r7
 800260a:	429c      	cmp	r4, r3
 800260c:	419b      	sbcs	r3, r3
 800260e:	4461      	add	r1, ip
 8002610:	4689      	mov	r9, r1
 8002612:	425b      	negs	r3, r3
 8002614:	4499      	add	r9, r3
 8002616:	464b      	mov	r3, r9
 8002618:	021b      	lsls	r3, r3, #8
 800261a:	d444      	bmi.n	80026a6 <__aeabi_dsub+0x5c6>
 800261c:	2301      	movs	r3, #1
 800261e:	4698      	mov	r8, r3
 8002620:	e6cc      	b.n	80023bc <__aeabi_dsub+0x2dc>
 8002622:	1bdc      	subs	r4, r3, r7
 8002624:	4662      	mov	r2, ip
 8002626:	42a3      	cmp	r3, r4
 8002628:	419b      	sbcs	r3, r3
 800262a:	1a51      	subs	r1, r2, r1
 800262c:	425b      	negs	r3, r3
 800262e:	1acb      	subs	r3, r1, r3
 8002630:	4699      	mov	r9, r3
 8002632:	2301      	movs	r3, #1
 8002634:	4698      	mov	r8, r3
 8002636:	e5a4      	b.n	8002182 <__aeabi_dsub+0xa2>
 8002638:	08ff      	lsrs	r7, r7, #3
 800263a:	074b      	lsls	r3, r1, #29
 800263c:	465d      	mov	r5, fp
 800263e:	433b      	orrs	r3, r7
 8002640:	08cc      	lsrs	r4, r1, #3
 8002642:	e6d7      	b.n	80023f4 <__aeabi_dsub+0x314>
 8002644:	4662      	mov	r2, ip
 8002646:	431a      	orrs	r2, r3
 8002648:	0014      	movs	r4, r2
 800264a:	1e63      	subs	r3, r4, #1
 800264c:	419c      	sbcs	r4, r3
 800264e:	e679      	b.n	8002344 <__aeabi_dsub+0x264>
 8002650:	0015      	movs	r5, r2
 8002652:	4664      	mov	r4, ip
 8002654:	3d20      	subs	r5, #32
 8002656:	40ec      	lsrs	r4, r5
 8002658:	46a0      	mov	r8, r4
 800265a:	2a20      	cmp	r2, #32
 800265c:	d005      	beq.n	800266a <__aeabi_dsub+0x58a>
 800265e:	2540      	movs	r5, #64	; 0x40
 8002660:	4664      	mov	r4, ip
 8002662:	1aaa      	subs	r2, r5, r2
 8002664:	4094      	lsls	r4, r2
 8002666:	4323      	orrs	r3, r4
 8002668:	469a      	mov	sl, r3
 800266a:	4654      	mov	r4, sl
 800266c:	1e63      	subs	r3, r4, #1
 800266e:	419c      	sbcs	r4, r3
 8002670:	4643      	mov	r3, r8
 8002672:	4323      	orrs	r3, r4
 8002674:	e773      	b.n	800255e <__aeabi_dsub+0x47e>
 8002676:	4662      	mov	r2, ip
 8002678:	431a      	orrs	r2, r3
 800267a:	d023      	beq.n	80026c4 <__aeabi_dsub+0x5e4>
 800267c:	000a      	movs	r2, r1
 800267e:	433a      	orrs	r2, r7
 8002680:	d000      	beq.n	8002684 <__aeabi_dsub+0x5a4>
 8002682:	e0a0      	b.n	80027c6 <__aeabi_dsub+0x6e6>
 8002684:	4662      	mov	r2, ip
 8002686:	08db      	lsrs	r3, r3, #3
 8002688:	0752      	lsls	r2, r2, #29
 800268a:	4313      	orrs	r3, r2
 800268c:	4662      	mov	r2, ip
 800268e:	08d4      	lsrs	r4, r2, #3
 8002690:	e6b0      	b.n	80023f4 <__aeabi_dsub+0x314>
 8002692:	000b      	movs	r3, r1
 8002694:	433b      	orrs	r3, r7
 8002696:	d100      	bne.n	800269a <__aeabi_dsub+0x5ba>
 8002698:	e728      	b.n	80024ec <__aeabi_dsub+0x40c>
 800269a:	08ff      	lsrs	r7, r7, #3
 800269c:	074b      	lsls	r3, r1, #29
 800269e:	465d      	mov	r5, fp
 80026a0:	433b      	orrs	r3, r7
 80026a2:	08cc      	lsrs	r4, r1, #3
 80026a4:	e697      	b.n	80023d6 <__aeabi_dsub+0x2f6>
 80026a6:	2302      	movs	r3, #2
 80026a8:	4698      	mov	r8, r3
 80026aa:	e736      	b.n	800251a <__aeabi_dsub+0x43a>
 80026ac:	1afc      	subs	r4, r7, r3
 80026ae:	42a7      	cmp	r7, r4
 80026b0:	41bf      	sbcs	r7, r7
 80026b2:	4663      	mov	r3, ip
 80026b4:	427f      	negs	r7, r7
 80026b6:	1ac9      	subs	r1, r1, r3
 80026b8:	1bcb      	subs	r3, r1, r7
 80026ba:	4699      	mov	r9, r3
 80026bc:	2301      	movs	r3, #1
 80026be:	465d      	mov	r5, fp
 80026c0:	4698      	mov	r8, r3
 80026c2:	e55e      	b.n	8002182 <__aeabi_dsub+0xa2>
 80026c4:	074b      	lsls	r3, r1, #29
 80026c6:	08ff      	lsrs	r7, r7, #3
 80026c8:	433b      	orrs	r3, r7
 80026ca:	08cc      	lsrs	r4, r1, #3
 80026cc:	e692      	b.n	80023f4 <__aeabi_dsub+0x314>
 80026ce:	1bdc      	subs	r4, r3, r7
 80026d0:	4660      	mov	r0, ip
 80026d2:	42a3      	cmp	r3, r4
 80026d4:	41b6      	sbcs	r6, r6
 80026d6:	1a40      	subs	r0, r0, r1
 80026d8:	4276      	negs	r6, r6
 80026da:	1b80      	subs	r0, r0, r6
 80026dc:	4681      	mov	r9, r0
 80026de:	0200      	lsls	r0, r0, #8
 80026e0:	d560      	bpl.n	80027a4 <__aeabi_dsub+0x6c4>
 80026e2:	1afc      	subs	r4, r7, r3
 80026e4:	42a7      	cmp	r7, r4
 80026e6:	41bf      	sbcs	r7, r7
 80026e8:	4663      	mov	r3, ip
 80026ea:	427f      	negs	r7, r7
 80026ec:	1ac9      	subs	r1, r1, r3
 80026ee:	1bcb      	subs	r3, r1, r7
 80026f0:	4699      	mov	r9, r3
 80026f2:	465d      	mov	r5, fp
 80026f4:	e576      	b.n	80021e4 <__aeabi_dsub+0x104>
 80026f6:	08ff      	lsrs	r7, r7, #3
 80026f8:	074b      	lsls	r3, r1, #29
 80026fa:	433b      	orrs	r3, r7
 80026fc:	08cc      	lsrs	r4, r1, #3
 80026fe:	e667      	b.n	80023d0 <__aeabi_dsub+0x2f0>
 8002700:	000a      	movs	r2, r1
 8002702:	08db      	lsrs	r3, r3, #3
 8002704:	433a      	orrs	r2, r7
 8002706:	d100      	bne.n	800270a <__aeabi_dsub+0x62a>
 8002708:	e66f      	b.n	80023ea <__aeabi_dsub+0x30a>
 800270a:	4662      	mov	r2, ip
 800270c:	0752      	lsls	r2, r2, #29
 800270e:	4313      	orrs	r3, r2
 8002710:	4662      	mov	r2, ip
 8002712:	08d4      	lsrs	r4, r2, #3
 8002714:	2280      	movs	r2, #128	; 0x80
 8002716:	0312      	lsls	r2, r2, #12
 8002718:	4214      	tst	r4, r2
 800271a:	d007      	beq.n	800272c <__aeabi_dsub+0x64c>
 800271c:	08c8      	lsrs	r0, r1, #3
 800271e:	4210      	tst	r0, r2
 8002720:	d104      	bne.n	800272c <__aeabi_dsub+0x64c>
 8002722:	465d      	mov	r5, fp
 8002724:	0004      	movs	r4, r0
 8002726:	08fb      	lsrs	r3, r7, #3
 8002728:	0749      	lsls	r1, r1, #29
 800272a:	430b      	orrs	r3, r1
 800272c:	0f5a      	lsrs	r2, r3, #29
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	08db      	lsrs	r3, r3, #3
 8002732:	0752      	lsls	r2, r2, #29
 8002734:	4313      	orrs	r3, r2
 8002736:	e65d      	b.n	80023f4 <__aeabi_dsub+0x314>
 8002738:	074b      	lsls	r3, r1, #29
 800273a:	08ff      	lsrs	r7, r7, #3
 800273c:	433b      	orrs	r3, r7
 800273e:	08cc      	lsrs	r4, r1, #3
 8002740:	e649      	b.n	80023d6 <__aeabi_dsub+0x2f6>
 8002742:	19dc      	adds	r4, r3, r7
 8002744:	429c      	cmp	r4, r3
 8002746:	419b      	sbcs	r3, r3
 8002748:	4461      	add	r1, ip
 800274a:	4689      	mov	r9, r1
 800274c:	425b      	negs	r3, r3
 800274e:	4499      	add	r9, r3
 8002750:	464b      	mov	r3, r9
 8002752:	021b      	lsls	r3, r3, #8
 8002754:	d400      	bmi.n	8002758 <__aeabi_dsub+0x678>
 8002756:	e631      	b.n	80023bc <__aeabi_dsub+0x2dc>
 8002758:	464a      	mov	r2, r9
 800275a:	4b17      	ldr	r3, [pc, #92]	; (80027b8 <__aeabi_dsub+0x6d8>)
 800275c:	401a      	ands	r2, r3
 800275e:	2301      	movs	r3, #1
 8002760:	4691      	mov	r9, r2
 8002762:	4698      	mov	r8, r3
 8002764:	e62a      	b.n	80023bc <__aeabi_dsub+0x2dc>
 8002766:	0016      	movs	r6, r2
 8002768:	4664      	mov	r4, ip
 800276a:	3e20      	subs	r6, #32
 800276c:	40f4      	lsrs	r4, r6
 800276e:	46a0      	mov	r8, r4
 8002770:	2a20      	cmp	r2, #32
 8002772:	d005      	beq.n	8002780 <__aeabi_dsub+0x6a0>
 8002774:	2640      	movs	r6, #64	; 0x40
 8002776:	4664      	mov	r4, ip
 8002778:	1ab2      	subs	r2, r6, r2
 800277a:	4094      	lsls	r4, r2
 800277c:	4323      	orrs	r3, r4
 800277e:	469a      	mov	sl, r3
 8002780:	4654      	mov	r4, sl
 8002782:	1e63      	subs	r3, r4, #1
 8002784:	419c      	sbcs	r4, r3
 8002786:	4643      	mov	r3, r8
 8002788:	431c      	orrs	r4, r3
 800278a:	e5db      	b.n	8002344 <__aeabi_dsub+0x264>
 800278c:	0002      	movs	r2, r0
 800278e:	2400      	movs	r4, #0
 8002790:	2300      	movs	r3, #0
 8002792:	e548      	b.n	8002226 <__aeabi_dsub+0x146>
 8002794:	19dc      	adds	r4, r3, r7
 8002796:	42bc      	cmp	r4, r7
 8002798:	41bf      	sbcs	r7, r7
 800279a:	4461      	add	r1, ip
 800279c:	4689      	mov	r9, r1
 800279e:	427f      	negs	r7, r7
 80027a0:	44b9      	add	r9, r7
 80027a2:	e738      	b.n	8002616 <__aeabi_dsub+0x536>
 80027a4:	464b      	mov	r3, r9
 80027a6:	4323      	orrs	r3, r4
 80027a8:	d100      	bne.n	80027ac <__aeabi_dsub+0x6cc>
 80027aa:	e69f      	b.n	80024ec <__aeabi_dsub+0x40c>
 80027ac:	e606      	b.n	80023bc <__aeabi_dsub+0x2dc>
 80027ae:	46c0      	nop			; (mov r8, r8)
 80027b0:	000007fe 	.word	0x000007fe
 80027b4:	000007ff 	.word	0x000007ff
 80027b8:	ff7fffff 	.word	0xff7fffff
 80027bc:	08ff      	lsrs	r7, r7, #3
 80027be:	074b      	lsls	r3, r1, #29
 80027c0:	433b      	orrs	r3, r7
 80027c2:	08cc      	lsrs	r4, r1, #3
 80027c4:	e616      	b.n	80023f4 <__aeabi_dsub+0x314>
 80027c6:	4662      	mov	r2, ip
 80027c8:	08db      	lsrs	r3, r3, #3
 80027ca:	0752      	lsls	r2, r2, #29
 80027cc:	4313      	orrs	r3, r2
 80027ce:	4662      	mov	r2, ip
 80027d0:	08d4      	lsrs	r4, r2, #3
 80027d2:	2280      	movs	r2, #128	; 0x80
 80027d4:	0312      	lsls	r2, r2, #12
 80027d6:	4214      	tst	r4, r2
 80027d8:	d007      	beq.n	80027ea <__aeabi_dsub+0x70a>
 80027da:	08c8      	lsrs	r0, r1, #3
 80027dc:	4210      	tst	r0, r2
 80027de:	d104      	bne.n	80027ea <__aeabi_dsub+0x70a>
 80027e0:	465d      	mov	r5, fp
 80027e2:	0004      	movs	r4, r0
 80027e4:	08fb      	lsrs	r3, r7, #3
 80027e6:	0749      	lsls	r1, r1, #29
 80027e8:	430b      	orrs	r3, r1
 80027ea:	0f5a      	lsrs	r2, r3, #29
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	0752      	lsls	r2, r2, #29
 80027f0:	08db      	lsrs	r3, r3, #3
 80027f2:	4313      	orrs	r3, r2
 80027f4:	e5fe      	b.n	80023f4 <__aeabi_dsub+0x314>
 80027f6:	2300      	movs	r3, #0
 80027f8:	4a01      	ldr	r2, [pc, #4]	; (8002800 <__aeabi_dsub+0x720>)
 80027fa:	001c      	movs	r4, r3
 80027fc:	e513      	b.n	8002226 <__aeabi_dsub+0x146>
 80027fe:	46c0      	nop			; (mov r8, r8)
 8002800:	000007ff 	.word	0x000007ff

08002804 <__aeabi_dcmpun>:
 8002804:	b570      	push	{r4, r5, r6, lr}
 8002806:	0005      	movs	r5, r0
 8002808:	480c      	ldr	r0, [pc, #48]	; (800283c <__aeabi_dcmpun+0x38>)
 800280a:	031c      	lsls	r4, r3, #12
 800280c:	0016      	movs	r6, r2
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	030a      	lsls	r2, r1, #12
 8002812:	0049      	lsls	r1, r1, #1
 8002814:	0b12      	lsrs	r2, r2, #12
 8002816:	0d49      	lsrs	r1, r1, #21
 8002818:	0b24      	lsrs	r4, r4, #12
 800281a:	0d5b      	lsrs	r3, r3, #21
 800281c:	4281      	cmp	r1, r0
 800281e:	d008      	beq.n	8002832 <__aeabi_dcmpun+0x2e>
 8002820:	4a06      	ldr	r2, [pc, #24]	; (800283c <__aeabi_dcmpun+0x38>)
 8002822:	2000      	movs	r0, #0
 8002824:	4293      	cmp	r3, r2
 8002826:	d103      	bne.n	8002830 <__aeabi_dcmpun+0x2c>
 8002828:	0020      	movs	r0, r4
 800282a:	4330      	orrs	r0, r6
 800282c:	1e43      	subs	r3, r0, #1
 800282e:	4198      	sbcs	r0, r3
 8002830:	bd70      	pop	{r4, r5, r6, pc}
 8002832:	2001      	movs	r0, #1
 8002834:	432a      	orrs	r2, r5
 8002836:	d1fb      	bne.n	8002830 <__aeabi_dcmpun+0x2c>
 8002838:	e7f2      	b.n	8002820 <__aeabi_dcmpun+0x1c>
 800283a:	46c0      	nop			; (mov r8, r8)
 800283c:	000007ff 	.word	0x000007ff

08002840 <__aeabi_d2iz>:
 8002840:	000a      	movs	r2, r1
 8002842:	b530      	push	{r4, r5, lr}
 8002844:	4c13      	ldr	r4, [pc, #76]	; (8002894 <__aeabi_d2iz+0x54>)
 8002846:	0053      	lsls	r3, r2, #1
 8002848:	0309      	lsls	r1, r1, #12
 800284a:	0005      	movs	r5, r0
 800284c:	0b09      	lsrs	r1, r1, #12
 800284e:	2000      	movs	r0, #0
 8002850:	0d5b      	lsrs	r3, r3, #21
 8002852:	0fd2      	lsrs	r2, r2, #31
 8002854:	42a3      	cmp	r3, r4
 8002856:	dd04      	ble.n	8002862 <__aeabi_d2iz+0x22>
 8002858:	480f      	ldr	r0, [pc, #60]	; (8002898 <__aeabi_d2iz+0x58>)
 800285a:	4283      	cmp	r3, r0
 800285c:	dd02      	ble.n	8002864 <__aeabi_d2iz+0x24>
 800285e:	4b0f      	ldr	r3, [pc, #60]	; (800289c <__aeabi_d2iz+0x5c>)
 8002860:	18d0      	adds	r0, r2, r3
 8002862:	bd30      	pop	{r4, r5, pc}
 8002864:	2080      	movs	r0, #128	; 0x80
 8002866:	0340      	lsls	r0, r0, #13
 8002868:	4301      	orrs	r1, r0
 800286a:	480d      	ldr	r0, [pc, #52]	; (80028a0 <__aeabi_d2iz+0x60>)
 800286c:	1ac0      	subs	r0, r0, r3
 800286e:	281f      	cmp	r0, #31
 8002870:	dd08      	ble.n	8002884 <__aeabi_d2iz+0x44>
 8002872:	480c      	ldr	r0, [pc, #48]	; (80028a4 <__aeabi_d2iz+0x64>)
 8002874:	1ac3      	subs	r3, r0, r3
 8002876:	40d9      	lsrs	r1, r3
 8002878:	000b      	movs	r3, r1
 800287a:	4258      	negs	r0, r3
 800287c:	2a00      	cmp	r2, #0
 800287e:	d1f0      	bne.n	8002862 <__aeabi_d2iz+0x22>
 8002880:	0018      	movs	r0, r3
 8002882:	e7ee      	b.n	8002862 <__aeabi_d2iz+0x22>
 8002884:	4c08      	ldr	r4, [pc, #32]	; (80028a8 <__aeabi_d2iz+0x68>)
 8002886:	40c5      	lsrs	r5, r0
 8002888:	46a4      	mov	ip, r4
 800288a:	4463      	add	r3, ip
 800288c:	4099      	lsls	r1, r3
 800288e:	000b      	movs	r3, r1
 8002890:	432b      	orrs	r3, r5
 8002892:	e7f2      	b.n	800287a <__aeabi_d2iz+0x3a>
 8002894:	000003fe 	.word	0x000003fe
 8002898:	0000041d 	.word	0x0000041d
 800289c:	7fffffff 	.word	0x7fffffff
 80028a0:	00000433 	.word	0x00000433
 80028a4:	00000413 	.word	0x00000413
 80028a8:	fffffbed 	.word	0xfffffbed

080028ac <__aeabi_i2d>:
 80028ac:	b570      	push	{r4, r5, r6, lr}
 80028ae:	2800      	cmp	r0, #0
 80028b0:	d016      	beq.n	80028e0 <__aeabi_i2d+0x34>
 80028b2:	17c3      	asrs	r3, r0, #31
 80028b4:	18c5      	adds	r5, r0, r3
 80028b6:	405d      	eors	r5, r3
 80028b8:	0fc4      	lsrs	r4, r0, #31
 80028ba:	0028      	movs	r0, r5
 80028bc:	f000 f956 	bl	8002b6c <__clzsi2>
 80028c0:	4a11      	ldr	r2, [pc, #68]	; (8002908 <__aeabi_i2d+0x5c>)
 80028c2:	1a12      	subs	r2, r2, r0
 80028c4:	280a      	cmp	r0, #10
 80028c6:	dc16      	bgt.n	80028f6 <__aeabi_i2d+0x4a>
 80028c8:	0003      	movs	r3, r0
 80028ca:	002e      	movs	r6, r5
 80028cc:	3315      	adds	r3, #21
 80028ce:	409e      	lsls	r6, r3
 80028d0:	230b      	movs	r3, #11
 80028d2:	1a18      	subs	r0, r3, r0
 80028d4:	40c5      	lsrs	r5, r0
 80028d6:	0552      	lsls	r2, r2, #21
 80028d8:	032d      	lsls	r5, r5, #12
 80028da:	0b2d      	lsrs	r5, r5, #12
 80028dc:	0d53      	lsrs	r3, r2, #21
 80028de:	e003      	b.n	80028e8 <__aeabi_i2d+0x3c>
 80028e0:	2400      	movs	r4, #0
 80028e2:	2300      	movs	r3, #0
 80028e4:	2500      	movs	r5, #0
 80028e6:	2600      	movs	r6, #0
 80028e8:	051b      	lsls	r3, r3, #20
 80028ea:	432b      	orrs	r3, r5
 80028ec:	07e4      	lsls	r4, r4, #31
 80028ee:	4323      	orrs	r3, r4
 80028f0:	0030      	movs	r0, r6
 80028f2:	0019      	movs	r1, r3
 80028f4:	bd70      	pop	{r4, r5, r6, pc}
 80028f6:	380b      	subs	r0, #11
 80028f8:	4085      	lsls	r5, r0
 80028fa:	0552      	lsls	r2, r2, #21
 80028fc:	032d      	lsls	r5, r5, #12
 80028fe:	2600      	movs	r6, #0
 8002900:	0b2d      	lsrs	r5, r5, #12
 8002902:	0d53      	lsrs	r3, r2, #21
 8002904:	e7f0      	b.n	80028e8 <__aeabi_i2d+0x3c>
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	0000041e 	.word	0x0000041e

0800290c <__aeabi_ui2d>:
 800290c:	b510      	push	{r4, lr}
 800290e:	1e04      	subs	r4, r0, #0
 8002910:	d010      	beq.n	8002934 <__aeabi_ui2d+0x28>
 8002912:	f000 f92b 	bl	8002b6c <__clzsi2>
 8002916:	4b0f      	ldr	r3, [pc, #60]	; (8002954 <__aeabi_ui2d+0x48>)
 8002918:	1a1b      	subs	r3, r3, r0
 800291a:	280a      	cmp	r0, #10
 800291c:	dc11      	bgt.n	8002942 <__aeabi_ui2d+0x36>
 800291e:	220b      	movs	r2, #11
 8002920:	0021      	movs	r1, r4
 8002922:	1a12      	subs	r2, r2, r0
 8002924:	40d1      	lsrs	r1, r2
 8002926:	3015      	adds	r0, #21
 8002928:	030a      	lsls	r2, r1, #12
 800292a:	055b      	lsls	r3, r3, #21
 800292c:	4084      	lsls	r4, r0
 800292e:	0b12      	lsrs	r2, r2, #12
 8002930:	0d5b      	lsrs	r3, r3, #21
 8002932:	e001      	b.n	8002938 <__aeabi_ui2d+0x2c>
 8002934:	2300      	movs	r3, #0
 8002936:	2200      	movs	r2, #0
 8002938:	051b      	lsls	r3, r3, #20
 800293a:	4313      	orrs	r3, r2
 800293c:	0020      	movs	r0, r4
 800293e:	0019      	movs	r1, r3
 8002940:	bd10      	pop	{r4, pc}
 8002942:	0022      	movs	r2, r4
 8002944:	380b      	subs	r0, #11
 8002946:	4082      	lsls	r2, r0
 8002948:	055b      	lsls	r3, r3, #21
 800294a:	0312      	lsls	r2, r2, #12
 800294c:	2400      	movs	r4, #0
 800294e:	0b12      	lsrs	r2, r2, #12
 8002950:	0d5b      	lsrs	r3, r3, #21
 8002952:	e7f1      	b.n	8002938 <__aeabi_ui2d+0x2c>
 8002954:	0000041e 	.word	0x0000041e

08002958 <__aeabi_f2d>:
 8002958:	b570      	push	{r4, r5, r6, lr}
 800295a:	0043      	lsls	r3, r0, #1
 800295c:	0246      	lsls	r6, r0, #9
 800295e:	0fc4      	lsrs	r4, r0, #31
 8002960:	20fe      	movs	r0, #254	; 0xfe
 8002962:	0e1b      	lsrs	r3, r3, #24
 8002964:	1c59      	adds	r1, r3, #1
 8002966:	0a75      	lsrs	r5, r6, #9
 8002968:	4208      	tst	r0, r1
 800296a:	d00c      	beq.n	8002986 <__aeabi_f2d+0x2e>
 800296c:	22e0      	movs	r2, #224	; 0xe0
 800296e:	0092      	lsls	r2, r2, #2
 8002970:	4694      	mov	ip, r2
 8002972:	076d      	lsls	r5, r5, #29
 8002974:	0b36      	lsrs	r6, r6, #12
 8002976:	4463      	add	r3, ip
 8002978:	051b      	lsls	r3, r3, #20
 800297a:	4333      	orrs	r3, r6
 800297c:	07e4      	lsls	r4, r4, #31
 800297e:	4323      	orrs	r3, r4
 8002980:	0028      	movs	r0, r5
 8002982:	0019      	movs	r1, r3
 8002984:	bd70      	pop	{r4, r5, r6, pc}
 8002986:	2b00      	cmp	r3, #0
 8002988:	d114      	bne.n	80029b4 <__aeabi_f2d+0x5c>
 800298a:	2d00      	cmp	r5, #0
 800298c:	d01b      	beq.n	80029c6 <__aeabi_f2d+0x6e>
 800298e:	0028      	movs	r0, r5
 8002990:	f000 f8ec 	bl	8002b6c <__clzsi2>
 8002994:	280a      	cmp	r0, #10
 8002996:	dc1c      	bgt.n	80029d2 <__aeabi_f2d+0x7a>
 8002998:	230b      	movs	r3, #11
 800299a:	002e      	movs	r6, r5
 800299c:	1a1b      	subs	r3, r3, r0
 800299e:	40de      	lsrs	r6, r3
 80029a0:	0003      	movs	r3, r0
 80029a2:	3315      	adds	r3, #21
 80029a4:	409d      	lsls	r5, r3
 80029a6:	4a0e      	ldr	r2, [pc, #56]	; (80029e0 <__aeabi_f2d+0x88>)
 80029a8:	0336      	lsls	r6, r6, #12
 80029aa:	1a12      	subs	r2, r2, r0
 80029ac:	0552      	lsls	r2, r2, #21
 80029ae:	0b36      	lsrs	r6, r6, #12
 80029b0:	0d53      	lsrs	r3, r2, #21
 80029b2:	e7e1      	b.n	8002978 <__aeabi_f2d+0x20>
 80029b4:	2d00      	cmp	r5, #0
 80029b6:	d009      	beq.n	80029cc <__aeabi_f2d+0x74>
 80029b8:	2280      	movs	r2, #128	; 0x80
 80029ba:	0b36      	lsrs	r6, r6, #12
 80029bc:	0312      	lsls	r2, r2, #12
 80029be:	4b09      	ldr	r3, [pc, #36]	; (80029e4 <__aeabi_f2d+0x8c>)
 80029c0:	076d      	lsls	r5, r5, #29
 80029c2:	4316      	orrs	r6, r2
 80029c4:	e7d8      	b.n	8002978 <__aeabi_f2d+0x20>
 80029c6:	2300      	movs	r3, #0
 80029c8:	2600      	movs	r6, #0
 80029ca:	e7d5      	b.n	8002978 <__aeabi_f2d+0x20>
 80029cc:	2600      	movs	r6, #0
 80029ce:	4b05      	ldr	r3, [pc, #20]	; (80029e4 <__aeabi_f2d+0x8c>)
 80029d0:	e7d2      	b.n	8002978 <__aeabi_f2d+0x20>
 80029d2:	0003      	movs	r3, r0
 80029d4:	3b0b      	subs	r3, #11
 80029d6:	409d      	lsls	r5, r3
 80029d8:	002e      	movs	r6, r5
 80029da:	2500      	movs	r5, #0
 80029dc:	e7e3      	b.n	80029a6 <__aeabi_f2d+0x4e>
 80029de:	46c0      	nop			; (mov r8, r8)
 80029e0:	00000389 	.word	0x00000389
 80029e4:	000007ff 	.word	0x000007ff

080029e8 <__aeabi_d2f>:
 80029e8:	0002      	movs	r2, r0
 80029ea:	004b      	lsls	r3, r1, #1
 80029ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ee:	0d5b      	lsrs	r3, r3, #21
 80029f0:	030c      	lsls	r4, r1, #12
 80029f2:	4e3d      	ldr	r6, [pc, #244]	; (8002ae8 <__aeabi_d2f+0x100>)
 80029f4:	0a64      	lsrs	r4, r4, #9
 80029f6:	0f40      	lsrs	r0, r0, #29
 80029f8:	1c5f      	adds	r7, r3, #1
 80029fa:	0fc9      	lsrs	r1, r1, #31
 80029fc:	4304      	orrs	r4, r0
 80029fe:	00d5      	lsls	r5, r2, #3
 8002a00:	4237      	tst	r7, r6
 8002a02:	d00a      	beq.n	8002a1a <__aeabi_d2f+0x32>
 8002a04:	4839      	ldr	r0, [pc, #228]	; (8002aec <__aeabi_d2f+0x104>)
 8002a06:	181e      	adds	r6, r3, r0
 8002a08:	2efe      	cmp	r6, #254	; 0xfe
 8002a0a:	dd16      	ble.n	8002a3a <__aeabi_d2f+0x52>
 8002a0c:	20ff      	movs	r0, #255	; 0xff
 8002a0e:	2400      	movs	r4, #0
 8002a10:	05c0      	lsls	r0, r0, #23
 8002a12:	4320      	orrs	r0, r4
 8002a14:	07c9      	lsls	r1, r1, #31
 8002a16:	4308      	orrs	r0, r1
 8002a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d106      	bne.n	8002a2c <__aeabi_d2f+0x44>
 8002a1e:	432c      	orrs	r4, r5
 8002a20:	d026      	beq.n	8002a70 <__aeabi_d2f+0x88>
 8002a22:	2205      	movs	r2, #5
 8002a24:	0192      	lsls	r2, r2, #6
 8002a26:	0a54      	lsrs	r4, r2, #9
 8002a28:	b2d8      	uxtb	r0, r3
 8002a2a:	e7f1      	b.n	8002a10 <__aeabi_d2f+0x28>
 8002a2c:	4325      	orrs	r5, r4
 8002a2e:	d0ed      	beq.n	8002a0c <__aeabi_d2f+0x24>
 8002a30:	2080      	movs	r0, #128	; 0x80
 8002a32:	03c0      	lsls	r0, r0, #15
 8002a34:	4304      	orrs	r4, r0
 8002a36:	20ff      	movs	r0, #255	; 0xff
 8002a38:	e7ea      	b.n	8002a10 <__aeabi_d2f+0x28>
 8002a3a:	2e00      	cmp	r6, #0
 8002a3c:	dd1b      	ble.n	8002a76 <__aeabi_d2f+0x8e>
 8002a3e:	0192      	lsls	r2, r2, #6
 8002a40:	1e53      	subs	r3, r2, #1
 8002a42:	419a      	sbcs	r2, r3
 8002a44:	00e4      	lsls	r4, r4, #3
 8002a46:	0f6d      	lsrs	r5, r5, #29
 8002a48:	4322      	orrs	r2, r4
 8002a4a:	432a      	orrs	r2, r5
 8002a4c:	0753      	lsls	r3, r2, #29
 8002a4e:	d048      	beq.n	8002ae2 <__aeabi_d2f+0xfa>
 8002a50:	230f      	movs	r3, #15
 8002a52:	4013      	ands	r3, r2
 8002a54:	2b04      	cmp	r3, #4
 8002a56:	d000      	beq.n	8002a5a <__aeabi_d2f+0x72>
 8002a58:	3204      	adds	r2, #4
 8002a5a:	2380      	movs	r3, #128	; 0x80
 8002a5c:	04db      	lsls	r3, r3, #19
 8002a5e:	4013      	ands	r3, r2
 8002a60:	d03f      	beq.n	8002ae2 <__aeabi_d2f+0xfa>
 8002a62:	1c70      	adds	r0, r6, #1
 8002a64:	2efe      	cmp	r6, #254	; 0xfe
 8002a66:	d0d1      	beq.n	8002a0c <__aeabi_d2f+0x24>
 8002a68:	0192      	lsls	r2, r2, #6
 8002a6a:	0a54      	lsrs	r4, r2, #9
 8002a6c:	b2c0      	uxtb	r0, r0
 8002a6e:	e7cf      	b.n	8002a10 <__aeabi_d2f+0x28>
 8002a70:	2000      	movs	r0, #0
 8002a72:	2400      	movs	r4, #0
 8002a74:	e7cc      	b.n	8002a10 <__aeabi_d2f+0x28>
 8002a76:	0032      	movs	r2, r6
 8002a78:	3217      	adds	r2, #23
 8002a7a:	db22      	blt.n	8002ac2 <__aeabi_d2f+0xda>
 8002a7c:	2080      	movs	r0, #128	; 0x80
 8002a7e:	0400      	lsls	r0, r0, #16
 8002a80:	4320      	orrs	r0, r4
 8002a82:	241e      	movs	r4, #30
 8002a84:	1ba4      	subs	r4, r4, r6
 8002a86:	2c1f      	cmp	r4, #31
 8002a88:	dd1d      	ble.n	8002ac6 <__aeabi_d2f+0xde>
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	4252      	negs	r2, r2
 8002a8e:	1b96      	subs	r6, r2, r6
 8002a90:	0002      	movs	r2, r0
 8002a92:	40f2      	lsrs	r2, r6
 8002a94:	0016      	movs	r6, r2
 8002a96:	2c20      	cmp	r4, #32
 8002a98:	d004      	beq.n	8002aa4 <__aeabi_d2f+0xbc>
 8002a9a:	4a15      	ldr	r2, [pc, #84]	; (8002af0 <__aeabi_d2f+0x108>)
 8002a9c:	4694      	mov	ip, r2
 8002a9e:	4463      	add	r3, ip
 8002aa0:	4098      	lsls	r0, r3
 8002aa2:	4305      	orrs	r5, r0
 8002aa4:	002a      	movs	r2, r5
 8002aa6:	1e53      	subs	r3, r2, #1
 8002aa8:	419a      	sbcs	r2, r3
 8002aaa:	4332      	orrs	r2, r6
 8002aac:	2600      	movs	r6, #0
 8002aae:	0753      	lsls	r3, r2, #29
 8002ab0:	d1ce      	bne.n	8002a50 <__aeabi_d2f+0x68>
 8002ab2:	2480      	movs	r4, #128	; 0x80
 8002ab4:	0013      	movs	r3, r2
 8002ab6:	04e4      	lsls	r4, r4, #19
 8002ab8:	2001      	movs	r0, #1
 8002aba:	4023      	ands	r3, r4
 8002abc:	4222      	tst	r2, r4
 8002abe:	d1d3      	bne.n	8002a68 <__aeabi_d2f+0x80>
 8002ac0:	e7b0      	b.n	8002a24 <__aeabi_d2f+0x3c>
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	e7ad      	b.n	8002a22 <__aeabi_d2f+0x3a>
 8002ac6:	4a0b      	ldr	r2, [pc, #44]	; (8002af4 <__aeabi_d2f+0x10c>)
 8002ac8:	4694      	mov	ip, r2
 8002aca:	002a      	movs	r2, r5
 8002acc:	40e2      	lsrs	r2, r4
 8002ace:	0014      	movs	r4, r2
 8002ad0:	002a      	movs	r2, r5
 8002ad2:	4463      	add	r3, ip
 8002ad4:	409a      	lsls	r2, r3
 8002ad6:	4098      	lsls	r0, r3
 8002ad8:	1e55      	subs	r5, r2, #1
 8002ada:	41aa      	sbcs	r2, r5
 8002adc:	4302      	orrs	r2, r0
 8002ade:	4322      	orrs	r2, r4
 8002ae0:	e7e4      	b.n	8002aac <__aeabi_d2f+0xc4>
 8002ae2:	0033      	movs	r3, r6
 8002ae4:	e79e      	b.n	8002a24 <__aeabi_d2f+0x3c>
 8002ae6:	46c0      	nop			; (mov r8, r8)
 8002ae8:	000007fe 	.word	0x000007fe
 8002aec:	fffffc80 	.word	0xfffffc80
 8002af0:	fffffca2 	.word	0xfffffca2
 8002af4:	fffffc82 	.word	0xfffffc82

08002af8 <__aeabi_cfrcmple>:
 8002af8:	4684      	mov	ip, r0
 8002afa:	0008      	movs	r0, r1
 8002afc:	4661      	mov	r1, ip
 8002afe:	e7ff      	b.n	8002b00 <__aeabi_cfcmpeq>

08002b00 <__aeabi_cfcmpeq>:
 8002b00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002b02:	f000 f8bd 	bl	8002c80 <__lesf2>
 8002b06:	2800      	cmp	r0, #0
 8002b08:	d401      	bmi.n	8002b0e <__aeabi_cfcmpeq+0xe>
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	42c8      	cmn	r0, r1
 8002b0e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08002b10 <__aeabi_fcmpeq>:
 8002b10:	b510      	push	{r4, lr}
 8002b12:	f000 f849 	bl	8002ba8 <__eqsf2>
 8002b16:	4240      	negs	r0, r0
 8002b18:	3001      	adds	r0, #1
 8002b1a:	bd10      	pop	{r4, pc}

08002b1c <__aeabi_fcmplt>:
 8002b1c:	b510      	push	{r4, lr}
 8002b1e:	f000 f8af 	bl	8002c80 <__lesf2>
 8002b22:	2800      	cmp	r0, #0
 8002b24:	db01      	blt.n	8002b2a <__aeabi_fcmplt+0xe>
 8002b26:	2000      	movs	r0, #0
 8002b28:	bd10      	pop	{r4, pc}
 8002b2a:	2001      	movs	r0, #1
 8002b2c:	bd10      	pop	{r4, pc}
 8002b2e:	46c0      	nop			; (mov r8, r8)

08002b30 <__aeabi_fcmple>:
 8002b30:	b510      	push	{r4, lr}
 8002b32:	f000 f8a5 	bl	8002c80 <__lesf2>
 8002b36:	2800      	cmp	r0, #0
 8002b38:	dd01      	ble.n	8002b3e <__aeabi_fcmple+0xe>
 8002b3a:	2000      	movs	r0, #0
 8002b3c:	bd10      	pop	{r4, pc}
 8002b3e:	2001      	movs	r0, #1
 8002b40:	bd10      	pop	{r4, pc}
 8002b42:	46c0      	nop			; (mov r8, r8)

08002b44 <__aeabi_fcmpgt>:
 8002b44:	b510      	push	{r4, lr}
 8002b46:	f000 f855 	bl	8002bf4 <__gesf2>
 8002b4a:	2800      	cmp	r0, #0
 8002b4c:	dc01      	bgt.n	8002b52 <__aeabi_fcmpgt+0xe>
 8002b4e:	2000      	movs	r0, #0
 8002b50:	bd10      	pop	{r4, pc}
 8002b52:	2001      	movs	r0, #1
 8002b54:	bd10      	pop	{r4, pc}
 8002b56:	46c0      	nop			; (mov r8, r8)

08002b58 <__aeabi_fcmpge>:
 8002b58:	b510      	push	{r4, lr}
 8002b5a:	f000 f84b 	bl	8002bf4 <__gesf2>
 8002b5e:	2800      	cmp	r0, #0
 8002b60:	da01      	bge.n	8002b66 <__aeabi_fcmpge+0xe>
 8002b62:	2000      	movs	r0, #0
 8002b64:	bd10      	pop	{r4, pc}
 8002b66:	2001      	movs	r0, #1
 8002b68:	bd10      	pop	{r4, pc}
 8002b6a:	46c0      	nop			; (mov r8, r8)

08002b6c <__clzsi2>:
 8002b6c:	211c      	movs	r1, #28
 8002b6e:	2301      	movs	r3, #1
 8002b70:	041b      	lsls	r3, r3, #16
 8002b72:	4298      	cmp	r0, r3
 8002b74:	d301      	bcc.n	8002b7a <__clzsi2+0xe>
 8002b76:	0c00      	lsrs	r0, r0, #16
 8002b78:	3910      	subs	r1, #16
 8002b7a:	0a1b      	lsrs	r3, r3, #8
 8002b7c:	4298      	cmp	r0, r3
 8002b7e:	d301      	bcc.n	8002b84 <__clzsi2+0x18>
 8002b80:	0a00      	lsrs	r0, r0, #8
 8002b82:	3908      	subs	r1, #8
 8002b84:	091b      	lsrs	r3, r3, #4
 8002b86:	4298      	cmp	r0, r3
 8002b88:	d301      	bcc.n	8002b8e <__clzsi2+0x22>
 8002b8a:	0900      	lsrs	r0, r0, #4
 8002b8c:	3904      	subs	r1, #4
 8002b8e:	a202      	add	r2, pc, #8	; (adr r2, 8002b98 <__clzsi2+0x2c>)
 8002b90:	5c10      	ldrb	r0, [r2, r0]
 8002b92:	1840      	adds	r0, r0, r1
 8002b94:	4770      	bx	lr
 8002b96:	46c0      	nop			; (mov r8, r8)
 8002b98:	02020304 	.word	0x02020304
 8002b9c:	01010101 	.word	0x01010101
	...

08002ba8 <__eqsf2>:
 8002ba8:	b570      	push	{r4, r5, r6, lr}
 8002baa:	0042      	lsls	r2, r0, #1
 8002bac:	0245      	lsls	r5, r0, #9
 8002bae:	024e      	lsls	r6, r1, #9
 8002bb0:	004c      	lsls	r4, r1, #1
 8002bb2:	0fc3      	lsrs	r3, r0, #31
 8002bb4:	0a6d      	lsrs	r5, r5, #9
 8002bb6:	2001      	movs	r0, #1
 8002bb8:	0e12      	lsrs	r2, r2, #24
 8002bba:	0a76      	lsrs	r6, r6, #9
 8002bbc:	0e24      	lsrs	r4, r4, #24
 8002bbe:	0fc9      	lsrs	r1, r1, #31
 8002bc0:	2aff      	cmp	r2, #255	; 0xff
 8002bc2:	d006      	beq.n	8002bd2 <__eqsf2+0x2a>
 8002bc4:	2cff      	cmp	r4, #255	; 0xff
 8002bc6:	d003      	beq.n	8002bd0 <__eqsf2+0x28>
 8002bc8:	42a2      	cmp	r2, r4
 8002bca:	d101      	bne.n	8002bd0 <__eqsf2+0x28>
 8002bcc:	42b5      	cmp	r5, r6
 8002bce:	d006      	beq.n	8002bde <__eqsf2+0x36>
 8002bd0:	bd70      	pop	{r4, r5, r6, pc}
 8002bd2:	2d00      	cmp	r5, #0
 8002bd4:	d1fc      	bne.n	8002bd0 <__eqsf2+0x28>
 8002bd6:	2cff      	cmp	r4, #255	; 0xff
 8002bd8:	d1fa      	bne.n	8002bd0 <__eqsf2+0x28>
 8002bda:	2e00      	cmp	r6, #0
 8002bdc:	d1f8      	bne.n	8002bd0 <__eqsf2+0x28>
 8002bde:	428b      	cmp	r3, r1
 8002be0:	d006      	beq.n	8002bf0 <__eqsf2+0x48>
 8002be2:	2001      	movs	r0, #1
 8002be4:	2a00      	cmp	r2, #0
 8002be6:	d1f3      	bne.n	8002bd0 <__eqsf2+0x28>
 8002be8:	0028      	movs	r0, r5
 8002bea:	1e43      	subs	r3, r0, #1
 8002bec:	4198      	sbcs	r0, r3
 8002bee:	e7ef      	b.n	8002bd0 <__eqsf2+0x28>
 8002bf0:	2000      	movs	r0, #0
 8002bf2:	e7ed      	b.n	8002bd0 <__eqsf2+0x28>

08002bf4 <__gesf2>:
 8002bf4:	b570      	push	{r4, r5, r6, lr}
 8002bf6:	0042      	lsls	r2, r0, #1
 8002bf8:	0245      	lsls	r5, r0, #9
 8002bfa:	024e      	lsls	r6, r1, #9
 8002bfc:	004c      	lsls	r4, r1, #1
 8002bfe:	0fc3      	lsrs	r3, r0, #31
 8002c00:	0a6d      	lsrs	r5, r5, #9
 8002c02:	0e12      	lsrs	r2, r2, #24
 8002c04:	0a76      	lsrs	r6, r6, #9
 8002c06:	0e24      	lsrs	r4, r4, #24
 8002c08:	0fc8      	lsrs	r0, r1, #31
 8002c0a:	2aff      	cmp	r2, #255	; 0xff
 8002c0c:	d01b      	beq.n	8002c46 <__gesf2+0x52>
 8002c0e:	2cff      	cmp	r4, #255	; 0xff
 8002c10:	d00e      	beq.n	8002c30 <__gesf2+0x3c>
 8002c12:	2a00      	cmp	r2, #0
 8002c14:	d11b      	bne.n	8002c4e <__gesf2+0x5a>
 8002c16:	2c00      	cmp	r4, #0
 8002c18:	d101      	bne.n	8002c1e <__gesf2+0x2a>
 8002c1a:	2e00      	cmp	r6, #0
 8002c1c:	d01c      	beq.n	8002c58 <__gesf2+0x64>
 8002c1e:	2d00      	cmp	r5, #0
 8002c20:	d00c      	beq.n	8002c3c <__gesf2+0x48>
 8002c22:	4283      	cmp	r3, r0
 8002c24:	d01c      	beq.n	8002c60 <__gesf2+0x6c>
 8002c26:	2102      	movs	r1, #2
 8002c28:	1e58      	subs	r0, r3, #1
 8002c2a:	4008      	ands	r0, r1
 8002c2c:	3801      	subs	r0, #1
 8002c2e:	bd70      	pop	{r4, r5, r6, pc}
 8002c30:	2e00      	cmp	r6, #0
 8002c32:	d122      	bne.n	8002c7a <__gesf2+0x86>
 8002c34:	2a00      	cmp	r2, #0
 8002c36:	d1f4      	bne.n	8002c22 <__gesf2+0x2e>
 8002c38:	2d00      	cmp	r5, #0
 8002c3a:	d1f2      	bne.n	8002c22 <__gesf2+0x2e>
 8002c3c:	2800      	cmp	r0, #0
 8002c3e:	d1f6      	bne.n	8002c2e <__gesf2+0x3a>
 8002c40:	2001      	movs	r0, #1
 8002c42:	4240      	negs	r0, r0
 8002c44:	e7f3      	b.n	8002c2e <__gesf2+0x3a>
 8002c46:	2d00      	cmp	r5, #0
 8002c48:	d117      	bne.n	8002c7a <__gesf2+0x86>
 8002c4a:	2cff      	cmp	r4, #255	; 0xff
 8002c4c:	d0f0      	beq.n	8002c30 <__gesf2+0x3c>
 8002c4e:	2c00      	cmp	r4, #0
 8002c50:	d1e7      	bne.n	8002c22 <__gesf2+0x2e>
 8002c52:	2e00      	cmp	r6, #0
 8002c54:	d1e5      	bne.n	8002c22 <__gesf2+0x2e>
 8002c56:	e7e6      	b.n	8002c26 <__gesf2+0x32>
 8002c58:	2000      	movs	r0, #0
 8002c5a:	2d00      	cmp	r5, #0
 8002c5c:	d0e7      	beq.n	8002c2e <__gesf2+0x3a>
 8002c5e:	e7e2      	b.n	8002c26 <__gesf2+0x32>
 8002c60:	42a2      	cmp	r2, r4
 8002c62:	dc05      	bgt.n	8002c70 <__gesf2+0x7c>
 8002c64:	dbea      	blt.n	8002c3c <__gesf2+0x48>
 8002c66:	42b5      	cmp	r5, r6
 8002c68:	d802      	bhi.n	8002c70 <__gesf2+0x7c>
 8002c6a:	d3e7      	bcc.n	8002c3c <__gesf2+0x48>
 8002c6c:	2000      	movs	r0, #0
 8002c6e:	e7de      	b.n	8002c2e <__gesf2+0x3a>
 8002c70:	4243      	negs	r3, r0
 8002c72:	4158      	adcs	r0, r3
 8002c74:	0040      	lsls	r0, r0, #1
 8002c76:	3801      	subs	r0, #1
 8002c78:	e7d9      	b.n	8002c2e <__gesf2+0x3a>
 8002c7a:	2002      	movs	r0, #2
 8002c7c:	4240      	negs	r0, r0
 8002c7e:	e7d6      	b.n	8002c2e <__gesf2+0x3a>

08002c80 <__lesf2>:
 8002c80:	b570      	push	{r4, r5, r6, lr}
 8002c82:	0042      	lsls	r2, r0, #1
 8002c84:	0245      	lsls	r5, r0, #9
 8002c86:	024e      	lsls	r6, r1, #9
 8002c88:	004c      	lsls	r4, r1, #1
 8002c8a:	0fc3      	lsrs	r3, r0, #31
 8002c8c:	0a6d      	lsrs	r5, r5, #9
 8002c8e:	0e12      	lsrs	r2, r2, #24
 8002c90:	0a76      	lsrs	r6, r6, #9
 8002c92:	0e24      	lsrs	r4, r4, #24
 8002c94:	0fc8      	lsrs	r0, r1, #31
 8002c96:	2aff      	cmp	r2, #255	; 0xff
 8002c98:	d00b      	beq.n	8002cb2 <__lesf2+0x32>
 8002c9a:	2cff      	cmp	r4, #255	; 0xff
 8002c9c:	d00d      	beq.n	8002cba <__lesf2+0x3a>
 8002c9e:	2a00      	cmp	r2, #0
 8002ca0:	d11f      	bne.n	8002ce2 <__lesf2+0x62>
 8002ca2:	2c00      	cmp	r4, #0
 8002ca4:	d116      	bne.n	8002cd4 <__lesf2+0x54>
 8002ca6:	2e00      	cmp	r6, #0
 8002ca8:	d114      	bne.n	8002cd4 <__lesf2+0x54>
 8002caa:	2000      	movs	r0, #0
 8002cac:	2d00      	cmp	r5, #0
 8002cae:	d010      	beq.n	8002cd2 <__lesf2+0x52>
 8002cb0:	e009      	b.n	8002cc6 <__lesf2+0x46>
 8002cb2:	2d00      	cmp	r5, #0
 8002cb4:	d10c      	bne.n	8002cd0 <__lesf2+0x50>
 8002cb6:	2cff      	cmp	r4, #255	; 0xff
 8002cb8:	d113      	bne.n	8002ce2 <__lesf2+0x62>
 8002cba:	2e00      	cmp	r6, #0
 8002cbc:	d108      	bne.n	8002cd0 <__lesf2+0x50>
 8002cbe:	2a00      	cmp	r2, #0
 8002cc0:	d008      	beq.n	8002cd4 <__lesf2+0x54>
 8002cc2:	4283      	cmp	r3, r0
 8002cc4:	d012      	beq.n	8002cec <__lesf2+0x6c>
 8002cc6:	2102      	movs	r1, #2
 8002cc8:	1e58      	subs	r0, r3, #1
 8002cca:	4008      	ands	r0, r1
 8002ccc:	3801      	subs	r0, #1
 8002cce:	e000      	b.n	8002cd2 <__lesf2+0x52>
 8002cd0:	2002      	movs	r0, #2
 8002cd2:	bd70      	pop	{r4, r5, r6, pc}
 8002cd4:	2d00      	cmp	r5, #0
 8002cd6:	d1f4      	bne.n	8002cc2 <__lesf2+0x42>
 8002cd8:	2800      	cmp	r0, #0
 8002cda:	d1fa      	bne.n	8002cd2 <__lesf2+0x52>
 8002cdc:	2001      	movs	r0, #1
 8002cde:	4240      	negs	r0, r0
 8002ce0:	e7f7      	b.n	8002cd2 <__lesf2+0x52>
 8002ce2:	2c00      	cmp	r4, #0
 8002ce4:	d1ed      	bne.n	8002cc2 <__lesf2+0x42>
 8002ce6:	2e00      	cmp	r6, #0
 8002ce8:	d1eb      	bne.n	8002cc2 <__lesf2+0x42>
 8002cea:	e7ec      	b.n	8002cc6 <__lesf2+0x46>
 8002cec:	42a2      	cmp	r2, r4
 8002cee:	dc05      	bgt.n	8002cfc <__lesf2+0x7c>
 8002cf0:	dbf2      	blt.n	8002cd8 <__lesf2+0x58>
 8002cf2:	42b5      	cmp	r5, r6
 8002cf4:	d802      	bhi.n	8002cfc <__lesf2+0x7c>
 8002cf6:	d3ef      	bcc.n	8002cd8 <__lesf2+0x58>
 8002cf8:	2000      	movs	r0, #0
 8002cfa:	e7ea      	b.n	8002cd2 <__lesf2+0x52>
 8002cfc:	4243      	negs	r3, r0
 8002cfe:	4158      	adcs	r0, r3
 8002d00:	0040      	lsls	r0, r0, #1
 8002d02:	3801      	subs	r0, #1
 8002d04:	e7e5      	b.n	8002cd2 <__lesf2+0x52>
 8002d06:	46c0      	nop			; (mov r8, r8)

08002d08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d08:	b590      	push	{r4, r7, lr}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d0e:	f001 fd67 	bl	80047e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d12:	f000 f8d7 	bl	8002ec4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d16:	f000 fa97 	bl	8003248 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002d1a:	f000 fa65 	bl	80031e8 <MX_USART2_UART_Init>
  MX_ADC_Init();
 8002d1e:	f000 f939 	bl	8002f94 <MX_ADC_Init>
  MX_I2C1_Init();
 8002d22:	f000 f99f 	bl	8003064 <MX_I2C1_Init>
  MX_TIM3_Init();
 8002d26:	f000 f9dd 	bl	80030e4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /*
   * CALCULATE RPM TABLE
   */
  for(int i = 2; i < 11; i++)
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	607b      	str	r3, [r7, #4]
 8002d2e:	e022      	b.n	8002d76 <main+0x6e>
  {
  	steps_sec = 1000/(i);									// pf = pulse frequency
 8002d30:	6879      	ldr	r1, [r7, #4]
 8002d32:	23fa      	movs	r3, #250	; 0xfa
 8002d34:	0098      	lsls	r0, r3, #2
 8002d36:	f7fd fa8d 	bl	8000254 <__divsi3>
 8002d3a:	0003      	movs	r3, r0
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	f7fd ffd7 	bl	8000cf0 <__aeabi_i2f>
 8002d42:	1c02      	adds	r2, r0, #0
 8002d44:	4b41      	ldr	r3, [pc, #260]	; (8002e4c <main+0x144>)
 8002d46:	601a      	str	r2, [r3, #0]
  	rpm[i-2] = 60*(steps_sec/4096);							// 4096 half steps
 8002d48:	4b40      	ldr	r3, [pc, #256]	; (8002e4c <main+0x144>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	218b      	movs	r1, #139	; 0x8b
 8002d4e:	05c9      	lsls	r1, r1, #23
 8002d50:	1c18      	adds	r0, r3, #0
 8002d52:	f7fd fbc1 	bl	80004d8 <__aeabi_fdiv>
 8002d56:	1c03      	adds	r3, r0, #0
 8002d58:	1c1a      	adds	r2, r3, #0
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	1e9c      	subs	r4, r3, #2
 8002d5e:	493c      	ldr	r1, [pc, #240]	; (8002e50 <main+0x148>)
 8002d60:	1c10      	adds	r0, r2, #0
 8002d62:	f7fd fcd1 	bl	8000708 <__aeabi_fmul>
 8002d66:	1c03      	adds	r3, r0, #0
 8002d68:	1c19      	adds	r1, r3, #0
 8002d6a:	4b3a      	ldr	r3, [pc, #232]	; (8002e54 <main+0x14c>)
 8002d6c:	00a2      	lsls	r2, r4, #2
 8002d6e:	50d1      	str	r1, [r2, r3]
  for(int i = 2; i < 11; i++)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3301      	adds	r3, #1
 8002d74:	607b      	str	r3, [r7, #4]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b0a      	cmp	r3, #10
 8002d7a:	ddd9      	ble.n	8002d30 <main+0x28>
  }
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002d7c:	f008 fc5e 	bl	800b63c <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of Adc_Sem */
  Adc_SemHandle = osSemaphoreNew(1, 1, &Adc_Sem_attributes);
 8002d80:	4b35      	ldr	r3, [pc, #212]	; (8002e58 <main+0x150>)
 8002d82:	001a      	movs	r2, r3
 8002d84:	2101      	movs	r1, #1
 8002d86:	2001      	movs	r0, #1
 8002d88:	f008 fdde 	bl	800b948 <osSemaphoreNew>
 8002d8c:	0002      	movs	r2, r0
 8002d8e:	4b33      	ldr	r3, [pc, #204]	; (8002e5c <main+0x154>)
 8002d90:	601a      	str	r2, [r3, #0]

  /* creation of Rx_Sem */
  Rx_SemHandle = osSemaphoreNew(1, 1, &Rx_Sem_attributes);
 8002d92:	4b33      	ldr	r3, [pc, #204]	; (8002e60 <main+0x158>)
 8002d94:	001a      	movs	r2, r3
 8002d96:	2101      	movs	r1, #1
 8002d98:	2001      	movs	r0, #1
 8002d9a:	f008 fdd5 	bl	800b948 <osSemaphoreNew>
 8002d9e:	0002      	movs	r2, r0
 8002da0:	4b30      	ldr	r3, [pc, #192]	; (8002e64 <main+0x15c>)
 8002da2:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  Rx_SemHandle = osSemaphoreNew(1, 0, &Rx_Sem_attributes);
 8002da4:	4b2e      	ldr	r3, [pc, #184]	; (8002e60 <main+0x158>)
 8002da6:	001a      	movs	r2, r3
 8002da8:	2100      	movs	r1, #0
 8002daa:	2001      	movs	r0, #1
 8002dac:	f008 fdcc 	bl	800b948 <osSemaphoreNew>
 8002db0:	0002      	movs	r2, r0
 8002db2:	4b2c      	ldr	r3, [pc, #176]	; (8002e64 <main+0x15c>)
 8002db4:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of lock_queue */
  lock_queueHandle = osMessageQueueNew (5, sizeof(lock_q), &lock_queue_attributes);
 8002db6:	4b2c      	ldr	r3, [pc, #176]	; (8002e68 <main+0x160>)
 8002db8:	001a      	movs	r2, r3
 8002dba:	2104      	movs	r1, #4
 8002dbc:	2005      	movs	r0, #5
 8002dbe:	f008 ff11 	bl	800bbe4 <osMessageQueueNew>
 8002dc2:	0002      	movs	r2, r0
 8002dc4:	4b29      	ldr	r3, [pc, #164]	; (8002e6c <main+0x164>)
 8002dc6:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002dc8:	4a29      	ldr	r2, [pc, #164]	; (8002e70 <main+0x168>)
 8002dca:	4b2a      	ldr	r3, [pc, #168]	; (8002e74 <main+0x16c>)
 8002dcc:	2100      	movs	r1, #0
 8002dce:	0018      	movs	r0, r3
 8002dd0:	f008 fc8e 	bl	800b6f0 <osThreadNew>
 8002dd4:	0002      	movs	r2, r0
 8002dd6:	4b28      	ldr	r3, [pc, #160]	; (8002e78 <main+0x170>)
 8002dd8:	601a      	str	r2, [r3, #0]

  /* creation of OLED */
  OLEDHandle = osThreadNew(oled_update, NULL, &OLED_attributes);
 8002dda:	4a28      	ldr	r2, [pc, #160]	; (8002e7c <main+0x174>)
 8002ddc:	4b28      	ldr	r3, [pc, #160]	; (8002e80 <main+0x178>)
 8002dde:	2100      	movs	r1, #0
 8002de0:	0018      	movs	r0, r3
 8002de2:	f008 fc85 	bl	800b6f0 <osThreadNew>
 8002de6:	0002      	movs	r2, r0
 8002de8:	4b26      	ldr	r3, [pc, #152]	; (8002e84 <main+0x17c>)
 8002dea:	601a      	str	r2, [r3, #0]

  /* creation of ADC */
  ADCHandle = osThreadNew(adc_read, NULL, &ADC_attributes);
 8002dec:	4a26      	ldr	r2, [pc, #152]	; (8002e88 <main+0x180>)
 8002dee:	4b27      	ldr	r3, [pc, #156]	; (8002e8c <main+0x184>)
 8002df0:	2100      	movs	r1, #0
 8002df2:	0018      	movs	r0, r3
 8002df4:	f008 fc7c 	bl	800b6f0 <osThreadNew>
 8002df8:	0002      	movs	r2, r0
 8002dfa:	4b25      	ldr	r3, [pc, #148]	; (8002e90 <main+0x188>)
 8002dfc:	601a      	str	r2, [r3, #0]

  /* creation of SERVO */
  SERVOHandle = osThreadNew(servo_pos, NULL, &SERVO_attributes);
 8002dfe:	4a25      	ldr	r2, [pc, #148]	; (8002e94 <main+0x18c>)
 8002e00:	4b25      	ldr	r3, [pc, #148]	; (8002e98 <main+0x190>)
 8002e02:	2100      	movs	r1, #0
 8002e04:	0018      	movs	r0, r3
 8002e06:	f008 fc73 	bl	800b6f0 <osThreadNew>
 8002e0a:	0002      	movs	r2, r0
 8002e0c:	4b23      	ldr	r3, [pc, #140]	; (8002e9c <main+0x194>)
 8002e0e:	601a      	str	r2, [r3, #0]

  /* creation of STEPPER */
  STEPPERHandle = osThreadNew(stepper_fx, NULL, &STEPPER_attributes);
 8002e10:	4a23      	ldr	r2, [pc, #140]	; (8002ea0 <main+0x198>)
 8002e12:	4b24      	ldr	r3, [pc, #144]	; (8002ea4 <main+0x19c>)
 8002e14:	2100      	movs	r1, #0
 8002e16:	0018      	movs	r0, r3
 8002e18:	f008 fc6a 	bl	800b6f0 <osThreadNew>
 8002e1c:	0002      	movs	r2, r0
 8002e1e:	4b22      	ldr	r3, [pc, #136]	; (8002ea8 <main+0x1a0>)
 8002e20:	601a      	str	r2, [r3, #0]

  /* creation of SERIAL */
  SERIALHandle = osThreadNew(serial_fx, NULL, &SERIAL_attributes);
 8002e22:	4a22      	ldr	r2, [pc, #136]	; (8002eac <main+0x1a4>)
 8002e24:	4b22      	ldr	r3, [pc, #136]	; (8002eb0 <main+0x1a8>)
 8002e26:	2100      	movs	r1, #0
 8002e28:	0018      	movs	r0, r3
 8002e2a:	f008 fc61 	bl	800b6f0 <osThreadNew>
 8002e2e:	0002      	movs	r2, r0
 8002e30:	4b20      	ldr	r3, [pc, #128]	; (8002eb4 <main+0x1ac>)
 8002e32:	601a      	str	r2, [r3, #0]

  /* creation of LOCK */
  LOCKHandle = osThreadNew(servo_lock, NULL, &LOCK_attributes);
 8002e34:	4a20      	ldr	r2, [pc, #128]	; (8002eb8 <main+0x1b0>)
 8002e36:	4b21      	ldr	r3, [pc, #132]	; (8002ebc <main+0x1b4>)
 8002e38:	2100      	movs	r1, #0
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	f008 fc58 	bl	800b6f0 <osThreadNew>
 8002e40:	0002      	movs	r2, r0
 8002e42:	4b1f      	ldr	r3, [pc, #124]	; (8002ec0 <main+0x1b8>)
 8002e44:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002e46:	f008 fc25 	bl	800b694 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002e4a:	e7fe      	b.n	8002e4a <main+0x142>
 8002e4c:	20000418 	.word	0x20000418
 8002e50:	42700000 	.word	0x42700000
 8002e54:	2000041c 	.word	0x2000041c
 8002e58:	08013188 	.word	0x08013188
 8002e5c:	20000400 	.word	0x20000400
 8002e60:	08013198 	.word	0x08013198
 8002e64:	20000404 	.word	0x20000404
 8002e68:	08013170 	.word	0x08013170
 8002e6c:	200003fc 	.word	0x200003fc
 8002e70:	08013074 	.word	0x08013074
 8002e74:	08003869 	.word	0x08003869
 8002e78:	200003e0 	.word	0x200003e0
 8002e7c:	08013098 	.word	0x08013098
 8002e80:	0800387d 	.word	0x0800387d
 8002e84:	200003e4 	.word	0x200003e4
 8002e88:	080130bc 	.word	0x080130bc
 8002e8c:	08003c09 	.word	0x08003c09
 8002e90:	200003e8 	.word	0x200003e8
 8002e94:	080130e0 	.word	0x080130e0
 8002e98:	08003c41 	.word	0x08003c41
 8002e9c:	200003ec 	.word	0x200003ec
 8002ea0:	08013104 	.word	0x08013104
 8002ea4:	08003c81 	.word	0x08003c81
 8002ea8:	200003f0 	.word	0x200003f0
 8002eac:	08013128 	.word	0x08013128
 8002eb0:	08003d49 	.word	0x08003d49
 8002eb4:	200003f4 	.word	0x200003f4
 8002eb8:	0801314c 	.word	0x0801314c
 8002ebc:	0800406d 	.word	0x0800406d
 8002ec0:	200003f8 	.word	0x200003f8

08002ec4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ec4:	b590      	push	{r4, r7, lr}
 8002ec6:	b097      	sub	sp, #92	; 0x5c
 8002ec8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002eca:	2428      	movs	r4, #40	; 0x28
 8002ecc:	193b      	adds	r3, r7, r4
 8002ece:	0018      	movs	r0, r3
 8002ed0:	2330      	movs	r3, #48	; 0x30
 8002ed2:	001a      	movs	r2, r3
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	f00b fee7 	bl	800eca8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002eda:	2318      	movs	r3, #24
 8002edc:	18fb      	adds	r3, r7, r3
 8002ede:	0018      	movs	r0, r3
 8002ee0:	2310      	movs	r3, #16
 8002ee2:	001a      	movs	r2, r3
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	f00b fedf 	bl	800eca8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002eea:	1d3b      	adds	r3, r7, #4
 8002eec:	0018      	movs	r0, r3
 8002eee:	2314      	movs	r3, #20
 8002ef0:	001a      	movs	r2, r3
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	f00b fed8 	bl	800eca8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8002ef8:	0021      	movs	r1, r4
 8002efa:	187b      	adds	r3, r7, r1
 8002efc:	2212      	movs	r2, #18
 8002efe:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f00:	187b      	adds	r3, r7, r1
 8002f02:	2201      	movs	r2, #1
 8002f04:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8002f06:	187b      	adds	r3, r7, r1
 8002f08:	2201      	movs	r2, #1
 8002f0a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f0c:	187b      	adds	r3, r7, r1
 8002f0e:	2210      	movs	r2, #16
 8002f10:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8002f12:	187b      	adds	r3, r7, r1
 8002f14:	2210      	movs	r2, #16
 8002f16:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f18:	187b      	adds	r3, r7, r1
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002f1e:	187b      	adds	r3, r7, r1
 8002f20:	2280      	movs	r2, #128	; 0x80
 8002f22:	0212      	lsls	r2, r2, #8
 8002f24:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002f26:	187b      	adds	r3, r7, r1
 8002f28:	2280      	movs	r2, #128	; 0x80
 8002f2a:	0352      	lsls	r2, r2, #13
 8002f2c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002f2e:	187b      	adds	r3, r7, r1
 8002f30:	2200      	movs	r2, #0
 8002f32:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f34:	187b      	adds	r3, r7, r1
 8002f36:	0018      	movs	r0, r3
 8002f38:	f003 f8ac 	bl	8006094 <HAL_RCC_OscConfig>
 8002f3c:	1e03      	subs	r3, r0, #0
 8002f3e:	d001      	beq.n	8002f44 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8002f40:	f001 f932 	bl	80041a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f44:	2118      	movs	r1, #24
 8002f46:	187b      	adds	r3, r7, r1
 8002f48:	2207      	movs	r2, #7
 8002f4a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f4c:	187b      	adds	r3, r7, r1
 8002f4e:	2202      	movs	r2, #2
 8002f50:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f52:	187b      	adds	r3, r7, r1
 8002f54:	2200      	movs	r2, #0
 8002f56:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f58:	187b      	adds	r3, r7, r1
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002f5e:	187b      	adds	r3, r7, r1
 8002f60:	2101      	movs	r1, #1
 8002f62:	0018      	movs	r0, r3
 8002f64:	f003 fbb4 	bl	80066d0 <HAL_RCC_ClockConfig>
 8002f68:	1e03      	subs	r3, r0, #0
 8002f6a:	d001      	beq.n	8002f70 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8002f6c:	f001 f91c 	bl	80041a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002f70:	1d3b      	adds	r3, r7, #4
 8002f72:	2220      	movs	r2, #32
 8002f74:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002f76:	1d3b      	adds	r3, r7, #4
 8002f78:	2200      	movs	r2, #0
 8002f7a:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f7c:	1d3b      	adds	r3, r7, #4
 8002f7e:	0018      	movs	r0, r3
 8002f80:	f003 fd24 	bl	80069cc <HAL_RCCEx_PeriphCLKConfig>
 8002f84:	1e03      	subs	r3, r0, #0
 8002f86:	d001      	beq.n	8002f8c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002f88:	f001 f90e 	bl	80041a8 <Error_Handler>
  }
}
 8002f8c:	46c0      	nop			; (mov r8, r8)
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	b017      	add	sp, #92	; 0x5c
 8002f92:	bd90      	pop	{r4, r7, pc}

08002f94 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002f9a:	1d3b      	adds	r3, r7, #4
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	230c      	movs	r3, #12
 8002fa0:	001a      	movs	r2, r3
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	f00b fe80 	bl	800eca8 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002fa8:	4b2c      	ldr	r3, [pc, #176]	; (800305c <MX_ADC_Init+0xc8>)
 8002faa:	4a2d      	ldr	r2, [pc, #180]	; (8003060 <MX_ADC_Init+0xcc>)
 8002fac:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002fae:	4b2b      	ldr	r3, [pc, #172]	; (800305c <MX_ADC_Init+0xc8>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002fb4:	4b29      	ldr	r3, [pc, #164]	; (800305c <MX_ADC_Init+0xc8>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002fba:	4b28      	ldr	r3, [pc, #160]	; (800305c <MX_ADC_Init+0xc8>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002fc0:	4b26      	ldr	r3, [pc, #152]	; (800305c <MX_ADC_Init+0xc8>)
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002fc6:	4b25      	ldr	r3, [pc, #148]	; (800305c <MX_ADC_Init+0xc8>)
 8002fc8:	2204      	movs	r2, #4
 8002fca:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002fcc:	4b23      	ldr	r3, [pc, #140]	; (800305c <MX_ADC_Init+0xc8>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002fd2:	4b22      	ldr	r3, [pc, #136]	; (800305c <MX_ADC_Init+0xc8>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002fd8:	4b20      	ldr	r3, [pc, #128]	; (800305c <MX_ADC_Init+0xc8>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8002fde:	4b1f      	ldr	r3, [pc, #124]	; (800305c <MX_ADC_Init+0xc8>)
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002fe4:	4b1d      	ldr	r3, [pc, #116]	; (800305c <MX_ADC_Init+0xc8>)
 8002fe6:	22c2      	movs	r2, #194	; 0xc2
 8002fe8:	32ff      	adds	r2, #255	; 0xff
 8002fea:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002fec:	4b1b      	ldr	r3, [pc, #108]	; (800305c <MX_ADC_Init+0xc8>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002ff2:	4b1a      	ldr	r3, [pc, #104]	; (800305c <MX_ADC_Init+0xc8>)
 8002ff4:	2224      	movs	r2, #36	; 0x24
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002ffa:	4b18      	ldr	r3, [pc, #96]	; (800305c <MX_ADC_Init+0xc8>)
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003000:	4b16      	ldr	r3, [pc, #88]	; (800305c <MX_ADC_Init+0xc8>)
 8003002:	0018      	movs	r0, r3
 8003004:	f001 fc1c 	bl	8004840 <HAL_ADC_Init>
 8003008:	1e03      	subs	r3, r0, #0
 800300a:	d001      	beq.n	8003010 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 800300c:	f001 f8cc 	bl	80041a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003010:	1d3b      	adds	r3, r7, #4
 8003012:	2200      	movs	r2, #0
 8003014:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003016:	1d3b      	adds	r3, r7, #4
 8003018:	2280      	movs	r2, #128	; 0x80
 800301a:	0152      	lsls	r2, r2, #5
 800301c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 800301e:	1d3b      	adds	r3, r7, #4
 8003020:	2202      	movs	r2, #2
 8003022:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003024:	1d3a      	adds	r2, r7, #4
 8003026:	4b0d      	ldr	r3, [pc, #52]	; (800305c <MX_ADC_Init+0xc8>)
 8003028:	0011      	movs	r1, r2
 800302a:	0018      	movs	r0, r3
 800302c:	f001 fed8 	bl	8004de0 <HAL_ADC_ConfigChannel>
 8003030:	1e03      	subs	r3, r0, #0
 8003032:	d001      	beq.n	8003038 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8003034:	f001 f8b8 	bl	80041a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003038:	1d3b      	adds	r3, r7, #4
 800303a:	2201      	movs	r2, #1
 800303c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800303e:	1d3a      	adds	r2, r7, #4
 8003040:	4b06      	ldr	r3, [pc, #24]	; (800305c <MX_ADC_Init+0xc8>)
 8003042:	0011      	movs	r1, r2
 8003044:	0018      	movs	r0, r3
 8003046:	f001 fecb 	bl	8004de0 <HAL_ADC_ConfigChannel>
 800304a:	1e03      	subs	r3, r0, #0
 800304c:	d001      	beq.n	8003052 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 800304e:	f001 f8ab 	bl	80041a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8003052:	46c0      	nop			; (mov r8, r8)
 8003054:	46bd      	mov	sp, r7
 8003056:	b004      	add	sp, #16
 8003058:	bd80      	pop	{r7, pc}
 800305a:	46c0      	nop			; (mov r8, r8)
 800305c:	20000288 	.word	0x20000288
 8003060:	40012400 	.word	0x40012400

08003064 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003068:	4b1b      	ldr	r3, [pc, #108]	; (80030d8 <MX_I2C1_Init+0x74>)
 800306a:	4a1c      	ldr	r2, [pc, #112]	; (80030dc <MX_I2C1_Init+0x78>)
 800306c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 800306e:	4b1a      	ldr	r3, [pc, #104]	; (80030d8 <MX_I2C1_Init+0x74>)
 8003070:	4a1b      	ldr	r2, [pc, #108]	; (80030e0 <MX_I2C1_Init+0x7c>)
 8003072:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003074:	4b18      	ldr	r3, [pc, #96]	; (80030d8 <MX_I2C1_Init+0x74>)
 8003076:	2200      	movs	r2, #0
 8003078:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800307a:	4b17      	ldr	r3, [pc, #92]	; (80030d8 <MX_I2C1_Init+0x74>)
 800307c:	2201      	movs	r2, #1
 800307e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003080:	4b15      	ldr	r3, [pc, #84]	; (80030d8 <MX_I2C1_Init+0x74>)
 8003082:	2200      	movs	r2, #0
 8003084:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003086:	4b14      	ldr	r3, [pc, #80]	; (80030d8 <MX_I2C1_Init+0x74>)
 8003088:	2200      	movs	r2, #0
 800308a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800308c:	4b12      	ldr	r3, [pc, #72]	; (80030d8 <MX_I2C1_Init+0x74>)
 800308e:	2200      	movs	r2, #0
 8003090:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003092:	4b11      	ldr	r3, [pc, #68]	; (80030d8 <MX_I2C1_Init+0x74>)
 8003094:	2200      	movs	r2, #0
 8003096:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003098:	4b0f      	ldr	r3, [pc, #60]	; (80030d8 <MX_I2C1_Init+0x74>)
 800309a:	2200      	movs	r2, #0
 800309c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800309e:	4b0e      	ldr	r3, [pc, #56]	; (80030d8 <MX_I2C1_Init+0x74>)
 80030a0:	0018      	movs	r0, r3
 80030a2:	f002 fc35 	bl	8005910 <HAL_I2C_Init>
 80030a6:	1e03      	subs	r3, r0, #0
 80030a8:	d001      	beq.n	80030ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80030aa:	f001 f87d 	bl	80041a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80030ae:	4b0a      	ldr	r3, [pc, #40]	; (80030d8 <MX_I2C1_Init+0x74>)
 80030b0:	2100      	movs	r1, #0
 80030b2:	0018      	movs	r0, r3
 80030b4:	f002 ff56 	bl	8005f64 <HAL_I2CEx_ConfigAnalogFilter>
 80030b8:	1e03      	subs	r3, r0, #0
 80030ba:	d001      	beq.n	80030c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80030bc:	f001 f874 	bl	80041a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80030c0:	4b05      	ldr	r3, [pc, #20]	; (80030d8 <MX_I2C1_Init+0x74>)
 80030c2:	2100      	movs	r1, #0
 80030c4:	0018      	movs	r0, r3
 80030c6:	f002 ff99 	bl	8005ffc <HAL_I2CEx_ConfigDigitalFilter>
 80030ca:	1e03      	subs	r3, r0, #0
 80030cc:	d001      	beq.n	80030d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80030ce:	f001 f86b 	bl	80041a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80030d2:	46c0      	nop			; (mov r8, r8)
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	200002c8 	.word	0x200002c8
 80030dc:	40005400 	.word	0x40005400
 80030e0:	0000020b 	.word	0x0000020b

080030e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b08e      	sub	sp, #56	; 0x38
 80030e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030ea:	2328      	movs	r3, #40	; 0x28
 80030ec:	18fb      	adds	r3, r7, r3
 80030ee:	0018      	movs	r0, r3
 80030f0:	2310      	movs	r3, #16
 80030f2:	001a      	movs	r2, r3
 80030f4:	2100      	movs	r1, #0
 80030f6:	f00b fdd7 	bl	800eca8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030fa:	2320      	movs	r3, #32
 80030fc:	18fb      	adds	r3, r7, r3
 80030fe:	0018      	movs	r0, r3
 8003100:	2308      	movs	r3, #8
 8003102:	001a      	movs	r2, r3
 8003104:	2100      	movs	r1, #0
 8003106:	f00b fdcf 	bl	800eca8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800310a:	1d3b      	adds	r3, r7, #4
 800310c:	0018      	movs	r0, r3
 800310e:	231c      	movs	r3, #28
 8003110:	001a      	movs	r2, r3
 8003112:	2100      	movs	r1, #0
 8003114:	f00b fdc8 	bl	800eca8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003118:	4b30      	ldr	r3, [pc, #192]	; (80031dc <MX_TIM3_Init+0xf8>)
 800311a:	4a31      	ldr	r2, [pc, #196]	; (80031e0 <MX_TIM3_Init+0xfc>)
 800311c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 480-1;
 800311e:	4b2f      	ldr	r3, [pc, #188]	; (80031dc <MX_TIM3_Init+0xf8>)
 8003120:	22e0      	movs	r2, #224	; 0xe0
 8003122:	32ff      	adds	r2, #255	; 0xff
 8003124:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003126:	4b2d      	ldr	r3, [pc, #180]	; (80031dc <MX_TIM3_Init+0xf8>)
 8003128:	2200      	movs	r2, #0
 800312a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 800312c:	4b2b      	ldr	r3, [pc, #172]	; (80031dc <MX_TIM3_Init+0xf8>)
 800312e:	4a2d      	ldr	r2, [pc, #180]	; (80031e4 <MX_TIM3_Init+0x100>)
 8003130:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003132:	4b2a      	ldr	r3, [pc, #168]	; (80031dc <MX_TIM3_Init+0xf8>)
 8003134:	2200      	movs	r2, #0
 8003136:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003138:	4b28      	ldr	r3, [pc, #160]	; (80031dc <MX_TIM3_Init+0xf8>)
 800313a:	2200      	movs	r2, #0
 800313c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800313e:	4b27      	ldr	r3, [pc, #156]	; (80031dc <MX_TIM3_Init+0xf8>)
 8003140:	0018      	movs	r0, r3
 8003142:	f003 fd21 	bl	8006b88 <HAL_TIM_Base_Init>
 8003146:	1e03      	subs	r3, r0, #0
 8003148:	d001      	beq.n	800314e <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 800314a:	f001 f82d 	bl	80041a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800314e:	2128      	movs	r1, #40	; 0x28
 8003150:	187b      	adds	r3, r7, r1
 8003152:	2280      	movs	r2, #128	; 0x80
 8003154:	0152      	lsls	r2, r2, #5
 8003156:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003158:	187a      	adds	r2, r7, r1
 800315a:	4b20      	ldr	r3, [pc, #128]	; (80031dc <MX_TIM3_Init+0xf8>)
 800315c:	0011      	movs	r1, r2
 800315e:	0018      	movs	r0, r3
 8003160:	f004 f894 	bl	800728c <HAL_TIM_ConfigClockSource>
 8003164:	1e03      	subs	r3, r0, #0
 8003166:	d001      	beq.n	800316c <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8003168:	f001 f81e 	bl	80041a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800316c:	4b1b      	ldr	r3, [pc, #108]	; (80031dc <MX_TIM3_Init+0xf8>)
 800316e:	0018      	movs	r0, r3
 8003170:	f003 fda6 	bl	8006cc0 <HAL_TIM_PWM_Init>
 8003174:	1e03      	subs	r3, r0, #0
 8003176:	d001      	beq.n	800317c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003178:	f001 f816 	bl	80041a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800317c:	2120      	movs	r1, #32
 800317e:	187b      	adds	r3, r7, r1
 8003180:	2200      	movs	r2, #0
 8003182:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003184:	187b      	adds	r3, r7, r1
 8003186:	2200      	movs	r2, #0
 8003188:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800318a:	187a      	adds	r2, r7, r1
 800318c:	4b13      	ldr	r3, [pc, #76]	; (80031dc <MX_TIM3_Init+0xf8>)
 800318e:	0011      	movs	r1, r2
 8003190:	0018      	movs	r0, r3
 8003192:	f004 fc9f 	bl	8007ad4 <HAL_TIMEx_MasterConfigSynchronization>
 8003196:	1e03      	subs	r3, r0, #0
 8003198:	d001      	beq.n	800319e <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 800319a:	f001 f805 	bl	80041a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800319e:	1d3b      	adds	r3, r7, #4
 80031a0:	2260      	movs	r2, #96	; 0x60
 80031a2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80031a4:	1d3b      	adds	r3, r7, #4
 80031a6:	2200      	movs	r2, #0
 80031a8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80031aa:	1d3b      	adds	r3, r7, #4
 80031ac:	2200      	movs	r2, #0
 80031ae:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80031b0:	1d3b      	adds	r3, r7, #4
 80031b2:	2200      	movs	r2, #0
 80031b4:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80031b6:	1d39      	adds	r1, r7, #4
 80031b8:	4b08      	ldr	r3, [pc, #32]	; (80031dc <MX_TIM3_Init+0xf8>)
 80031ba:	2204      	movs	r2, #4
 80031bc:	0018      	movs	r0, r3
 80031be:	f003 ff9f 	bl	8007100 <HAL_TIM_PWM_ConfigChannel>
 80031c2:	1e03      	subs	r3, r0, #0
 80031c4:	d001      	beq.n	80031ca <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 80031c6:	f000 ffef 	bl	80041a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80031ca:	4b04      	ldr	r3, [pc, #16]	; (80031dc <MX_TIM3_Init+0xf8>)
 80031cc:	0018      	movs	r0, r3
 80031ce:	f001 f8d5 	bl	800437c <HAL_TIM_MspPostInit>

}
 80031d2:	46c0      	nop			; (mov r8, r8)
 80031d4:	46bd      	mov	sp, r7
 80031d6:	b00e      	add	sp, #56	; 0x38
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	46c0      	nop			; (mov r8, r8)
 80031dc:	20000314 	.word	0x20000314
 80031e0:	40000400 	.word	0x40000400
 80031e4:	000007cf 	.word	0x000007cf

080031e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80031ec:	4b14      	ldr	r3, [pc, #80]	; (8003240 <MX_USART2_UART_Init+0x58>)
 80031ee:	4a15      	ldr	r2, [pc, #84]	; (8003244 <MX_USART2_UART_Init+0x5c>)
 80031f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80031f2:	4b13      	ldr	r3, [pc, #76]	; (8003240 <MX_USART2_UART_Init+0x58>)
 80031f4:	2296      	movs	r2, #150	; 0x96
 80031f6:	0212      	lsls	r2, r2, #8
 80031f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80031fa:	4b11      	ldr	r3, [pc, #68]	; (8003240 <MX_USART2_UART_Init+0x58>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003200:	4b0f      	ldr	r3, [pc, #60]	; (8003240 <MX_USART2_UART_Init+0x58>)
 8003202:	2200      	movs	r2, #0
 8003204:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003206:	4b0e      	ldr	r3, [pc, #56]	; (8003240 <MX_USART2_UART_Init+0x58>)
 8003208:	2200      	movs	r2, #0
 800320a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800320c:	4b0c      	ldr	r3, [pc, #48]	; (8003240 <MX_USART2_UART_Init+0x58>)
 800320e:	220c      	movs	r2, #12
 8003210:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003212:	4b0b      	ldr	r3, [pc, #44]	; (8003240 <MX_USART2_UART_Init+0x58>)
 8003214:	2200      	movs	r2, #0
 8003216:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003218:	4b09      	ldr	r3, [pc, #36]	; (8003240 <MX_USART2_UART_Init+0x58>)
 800321a:	2200      	movs	r2, #0
 800321c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800321e:	4b08      	ldr	r3, [pc, #32]	; (8003240 <MX_USART2_UART_Init+0x58>)
 8003220:	2200      	movs	r2, #0
 8003222:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003224:	4b06      	ldr	r3, [pc, #24]	; (8003240 <MX_USART2_UART_Init+0x58>)
 8003226:	2200      	movs	r2, #0
 8003228:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800322a:	4b05      	ldr	r3, [pc, #20]	; (8003240 <MX_USART2_UART_Init+0x58>)
 800322c:	0018      	movs	r0, r3
 800322e:	f004 fcb9 	bl	8007ba4 <HAL_UART_Init>
 8003232:	1e03      	subs	r3, r0, #0
 8003234:	d001      	beq.n	800323a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003236:	f000 ffb7 	bl	80041a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800323a:	46c0      	nop			; (mov r8, r8)
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	2000035c 	.word	0x2000035c
 8003244:	40004400 	.word	0x40004400

08003248 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003248:	b590      	push	{r4, r7, lr}
 800324a:	b08b      	sub	sp, #44	; 0x2c
 800324c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800324e:	2414      	movs	r4, #20
 8003250:	193b      	adds	r3, r7, r4
 8003252:	0018      	movs	r0, r3
 8003254:	2314      	movs	r3, #20
 8003256:	001a      	movs	r2, r3
 8003258:	2100      	movs	r1, #0
 800325a:	f00b fd25 	bl	800eca8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800325e:	4b41      	ldr	r3, [pc, #260]	; (8003364 <MX_GPIO_Init+0x11c>)
 8003260:	695a      	ldr	r2, [r3, #20]
 8003262:	4b40      	ldr	r3, [pc, #256]	; (8003364 <MX_GPIO_Init+0x11c>)
 8003264:	2180      	movs	r1, #128	; 0x80
 8003266:	0309      	lsls	r1, r1, #12
 8003268:	430a      	orrs	r2, r1
 800326a:	615a      	str	r2, [r3, #20]
 800326c:	4b3d      	ldr	r3, [pc, #244]	; (8003364 <MX_GPIO_Init+0x11c>)
 800326e:	695a      	ldr	r2, [r3, #20]
 8003270:	2380      	movs	r3, #128	; 0x80
 8003272:	031b      	lsls	r3, r3, #12
 8003274:	4013      	ands	r3, r2
 8003276:	613b      	str	r3, [r7, #16]
 8003278:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800327a:	4b3a      	ldr	r3, [pc, #232]	; (8003364 <MX_GPIO_Init+0x11c>)
 800327c:	695a      	ldr	r2, [r3, #20]
 800327e:	4b39      	ldr	r3, [pc, #228]	; (8003364 <MX_GPIO_Init+0x11c>)
 8003280:	2180      	movs	r1, #128	; 0x80
 8003282:	03c9      	lsls	r1, r1, #15
 8003284:	430a      	orrs	r2, r1
 8003286:	615a      	str	r2, [r3, #20]
 8003288:	4b36      	ldr	r3, [pc, #216]	; (8003364 <MX_GPIO_Init+0x11c>)
 800328a:	695a      	ldr	r2, [r3, #20]
 800328c:	2380      	movs	r3, #128	; 0x80
 800328e:	03db      	lsls	r3, r3, #15
 8003290:	4013      	ands	r3, r2
 8003292:	60fb      	str	r3, [r7, #12]
 8003294:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003296:	4b33      	ldr	r3, [pc, #204]	; (8003364 <MX_GPIO_Init+0x11c>)
 8003298:	695a      	ldr	r2, [r3, #20]
 800329a:	4b32      	ldr	r3, [pc, #200]	; (8003364 <MX_GPIO_Init+0x11c>)
 800329c:	2180      	movs	r1, #128	; 0x80
 800329e:	0289      	lsls	r1, r1, #10
 80032a0:	430a      	orrs	r2, r1
 80032a2:	615a      	str	r2, [r3, #20]
 80032a4:	4b2f      	ldr	r3, [pc, #188]	; (8003364 <MX_GPIO_Init+0x11c>)
 80032a6:	695a      	ldr	r2, [r3, #20]
 80032a8:	2380      	movs	r3, #128	; 0x80
 80032aa:	029b      	lsls	r3, r3, #10
 80032ac:	4013      	ands	r3, r2
 80032ae:	60bb      	str	r3, [r7, #8]
 80032b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032b2:	4b2c      	ldr	r3, [pc, #176]	; (8003364 <MX_GPIO_Init+0x11c>)
 80032b4:	695a      	ldr	r2, [r3, #20]
 80032b6:	4b2b      	ldr	r3, [pc, #172]	; (8003364 <MX_GPIO_Init+0x11c>)
 80032b8:	2180      	movs	r1, #128	; 0x80
 80032ba:	02c9      	lsls	r1, r1, #11
 80032bc:	430a      	orrs	r2, r1
 80032be:	615a      	str	r2, [r3, #20]
 80032c0:	4b28      	ldr	r3, [pc, #160]	; (8003364 <MX_GPIO_Init+0x11c>)
 80032c2:	695a      	ldr	r2, [r3, #20]
 80032c4:	2380      	movs	r3, #128	; 0x80
 80032c6:	02db      	lsls	r3, r3, #11
 80032c8:	4013      	ands	r3, r2
 80032ca:	607b      	str	r3, [r7, #4]
 80032cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80032ce:	2390      	movs	r3, #144	; 0x90
 80032d0:	05db      	lsls	r3, r3, #23
 80032d2:	2200      	movs	r2, #0
 80032d4:	2120      	movs	r1, #32
 80032d6:	0018      	movs	r0, r3
 80032d8:	f002 fafc 	bl	80058d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80032dc:	2387      	movs	r3, #135	; 0x87
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	4821      	ldr	r0, [pc, #132]	; (8003368 <MX_GPIO_Init+0x120>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	0019      	movs	r1, r3
 80032e6:	f002 faf5 	bl	80058d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80032ea:	193b      	adds	r3, r7, r4
 80032ec:	2280      	movs	r2, #128	; 0x80
 80032ee:	0192      	lsls	r2, r2, #6
 80032f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80032f2:	193b      	adds	r3, r7, r4
 80032f4:	2284      	movs	r2, #132	; 0x84
 80032f6:	0392      	lsls	r2, r2, #14
 80032f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fa:	193b      	adds	r3, r7, r4
 80032fc:	2200      	movs	r2, #0
 80032fe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003300:	193b      	adds	r3, r7, r4
 8003302:	4a1a      	ldr	r2, [pc, #104]	; (800336c <MX_GPIO_Init+0x124>)
 8003304:	0019      	movs	r1, r3
 8003306:	0010      	movs	r0, r2
 8003308:	f002 f974 	bl	80055f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800330c:	193b      	adds	r3, r7, r4
 800330e:	2220      	movs	r2, #32
 8003310:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003312:	193b      	adds	r3, r7, r4
 8003314:	2201      	movs	r2, #1
 8003316:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003318:	193b      	adds	r3, r7, r4
 800331a:	2200      	movs	r2, #0
 800331c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800331e:	193b      	adds	r3, r7, r4
 8003320:	2200      	movs	r2, #0
 8003322:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003324:	193a      	adds	r2, r7, r4
 8003326:	2390      	movs	r3, #144	; 0x90
 8003328:	05db      	lsls	r3, r3, #23
 800332a:	0011      	movs	r1, r2
 800332c:	0018      	movs	r0, r3
 800332e:	f002 f961 	bl	80055f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003332:	0021      	movs	r1, r4
 8003334:	187b      	adds	r3, r7, r1
 8003336:	2287      	movs	r2, #135	; 0x87
 8003338:	00d2      	lsls	r2, r2, #3
 800333a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800333c:	187b      	adds	r3, r7, r1
 800333e:	2201      	movs	r2, #1
 8003340:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003342:	187b      	adds	r3, r7, r1
 8003344:	2200      	movs	r2, #0
 8003346:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003348:	187b      	adds	r3, r7, r1
 800334a:	2200      	movs	r2, #0
 800334c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800334e:	187b      	adds	r3, r7, r1
 8003350:	4a05      	ldr	r2, [pc, #20]	; (8003368 <MX_GPIO_Init+0x120>)
 8003352:	0019      	movs	r1, r3
 8003354:	0010      	movs	r0, r2
 8003356:	f002 f94d 	bl	80055f4 <HAL_GPIO_Init>

}
 800335a:	46c0      	nop			; (mov r8, r8)
 800335c:	46bd      	mov	sp, r7
 800335e:	b00b      	add	sp, #44	; 0x2c
 8003360:	bd90      	pop	{r4, r7, pc}
 8003362:	46c0      	nop			; (mov r8, r8)
 8003364:	40021000 	.word	0x40021000
 8003368:	48000400 	.word	0x48000400
 800336c:	48000800 	.word	0x48000800

08003370 <u8x8_stm32_gpio_and_delay>:

/* USER CODE BEGIN 4 */
// Byte GPIO and Delay Callback
uint8_t u8x8_stm32_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
 8003370:	b590      	push	{r4, r7, lr}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	0008      	movs	r0, r1
 800337a:	0011      	movs	r1, r2
 800337c:	607b      	str	r3, [r7, #4]
 800337e:	240b      	movs	r4, #11
 8003380:	193b      	adds	r3, r7, r4
 8003382:	1c02      	adds	r2, r0, #0
 8003384:	701a      	strb	r2, [r3, #0]
 8003386:	230a      	movs	r3, #10
 8003388:	18fb      	adds	r3, r7, r3
 800338a:	1c0a      	adds	r2, r1, #0
 800338c:	701a      	strb	r2, [r3, #0]
	switch (msg) {
 800338e:	193b      	adds	r3, r7, r4
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	2b28      	cmp	r3, #40	; 0x28
 8003394:	d002      	beq.n	800339c <u8x8_stm32_gpio_and_delay+0x2c>
 8003396:	2b29      	cmp	r3, #41	; 0x29
 8003398:	d004      	beq.n	80033a4 <u8x8_stm32_gpio_and_delay+0x34>
 800339a:	e00a      	b.n	80033b2 <u8x8_stm32_gpio_and_delay+0x42>
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		osDelay(1);
 800339c:	2001      	movs	r0, #1
 800339e:	f008 faab 	bl	800b8f8 <osDelay>
		break;
 80033a2:	e00b      	b.n	80033bc <u8x8_stm32_gpio_and_delay+0x4c>
	case U8X8_MSG_DELAY_MILLI:
		osDelay(arg_int);
 80033a4:	230a      	movs	r3, #10
 80033a6:	18fb      	adds	r3, r7, r3
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	0018      	movs	r0, r3
 80033ac:	f008 faa4 	bl	800b8f8 <osDelay>
		break;
 80033b0:	e004      	b.n	80033bc <u8x8_stm32_gpio_and_delay+0x4c>
	default:
		u8x8_SetGPIOResult(u8x8, 1);			// default return value
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2227      	movs	r2, #39	; 0x27
 80033b6:	2101      	movs	r1, #1
 80033b8:	5499      	strb	r1, [r3, r2]
		break;
 80033ba:	46c0      	nop			; (mov r8, r8)
	}
	return 1;
 80033bc:	2301      	movs	r3, #1
}
 80033be:	0018      	movs	r0, r3
 80033c0:	46bd      	mov	sp, r7
 80033c2:	b005      	add	sp, #20
 80033c4:	bd90      	pop	{r4, r7, pc}
	...

080033c8 <u8x8_byte_i2c>:

// Communication Callback
uint8_t u8x8_byte_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80033c8:	b590      	push	{r4, r7, lr}
 80033ca:	b089      	sub	sp, #36	; 0x24
 80033cc:	af02      	add	r7, sp, #8
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	0008      	movs	r0, r1
 80033d2:	0011      	movs	r1, r2
 80033d4:	607b      	str	r3, [r7, #4]
 80033d6:	240b      	movs	r4, #11
 80033d8:	193b      	adds	r3, r7, r4
 80033da:	1c02      	adds	r2, r0, #0
 80033dc:	701a      	strb	r2, [r3, #0]
 80033de:	230a      	movs	r3, #10
 80033e0:	18fb      	adds	r3, r7, r3
 80033e2:	1c0a      	adds	r2, r1, #0
 80033e4:	701a      	strb	r2, [r3, #0]
	static uint8_t buffer[32];		/* u8g2/u8x8 will never send more than 32 bytes between START_TRANSFER and END_TRANSFER */
	static uint8_t buf_idx;
	uint8_t *data;

	switch(msg)
 80033e6:	193b      	adds	r3, r7, r4
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	3b14      	subs	r3, #20
 80033ec:	2b0c      	cmp	r3, #12
 80033ee:	d835      	bhi.n	800345c <u8x8_byte_i2c+0x94>
 80033f0:	009a      	lsls	r2, r3, #2
 80033f2:	4b1e      	ldr	r3, [pc, #120]	; (800346c <u8x8_byte_i2c+0xa4>)
 80033f4:	18d3      	adds	r3, r2, r3
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	469f      	mov	pc, r3
	{
	case U8X8_MSG_BYTE_SEND:
		data = (uint8_t *)arg_ptr;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	617b      	str	r3, [r7, #20]
		while( arg_int > 0 )
 80033fe:	e013      	b.n	8003428 <u8x8_byte_i2c+0x60>
		{
			buffer[buf_idx++] = *data;
 8003400:	4b1b      	ldr	r3, [pc, #108]	; (8003470 <u8x8_byte_i2c+0xa8>)
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	1c5a      	adds	r2, r3, #1
 8003406:	b2d1      	uxtb	r1, r2
 8003408:	4a19      	ldr	r2, [pc, #100]	; (8003470 <u8x8_byte_i2c+0xa8>)
 800340a:	7011      	strb	r1, [r2, #0]
 800340c:	001a      	movs	r2, r3
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	7819      	ldrb	r1, [r3, #0]
 8003412:	4b18      	ldr	r3, [pc, #96]	; (8003474 <u8x8_byte_i2c+0xac>)
 8003414:	5499      	strb	r1, [r3, r2]
			data++;
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	3301      	adds	r3, #1
 800341a:	617b      	str	r3, [r7, #20]
			arg_int--;
 800341c:	210a      	movs	r1, #10
 800341e:	187b      	adds	r3, r7, r1
 8003420:	781a      	ldrb	r2, [r3, #0]
 8003422:	187b      	adds	r3, r7, r1
 8003424:	3a01      	subs	r2, #1
 8003426:	701a      	strb	r2, [r3, #0]
		while( arg_int > 0 )
 8003428:	230a      	movs	r3, #10
 800342a:	18fb      	adds	r3, r7, r3
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1e6      	bne.n	8003400 <u8x8_byte_i2c+0x38>
		}
		break;
 8003432:	e016      	b.n	8003462 <u8x8_byte_i2c+0x9a>
		break;
	case U8X8_MSG_BYTE_SET_DC:
		/* ignored for i2c */
		break;
	case U8X8_MSG_BYTE_START_TRANSFER:
		buf_idx = 0;
 8003434:	4b0e      	ldr	r3, [pc, #56]	; (8003470 <u8x8_byte_i2c+0xa8>)
 8003436:	2200      	movs	r2, #0
 8003438:	701a      	strb	r2, [r3, #0]
		break;
 800343a:	e012      	b.n	8003462 <u8x8_byte_i2c+0x9a>
	case U8X8_MSG_BYTE_END_TRANSFER:
		HAL_I2C_Master_Transmit(&hi2c1, u8x8_GetI2CAddress(u8x8), buffer, buf_idx, 1000);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2224      	movs	r2, #36	; 0x24
 8003440:	5c9b      	ldrb	r3, [r3, r2]
 8003442:	b299      	uxth	r1, r3
 8003444:	4b0a      	ldr	r3, [pc, #40]	; (8003470 <u8x8_byte_i2c+0xa8>)
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	b29c      	uxth	r4, r3
 800344a:	4a0a      	ldr	r2, [pc, #40]	; (8003474 <u8x8_byte_i2c+0xac>)
 800344c:	480a      	ldr	r0, [pc, #40]	; (8003478 <u8x8_byte_i2c+0xb0>)
 800344e:	23fa      	movs	r3, #250	; 0xfa
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	0023      	movs	r3, r4
 8003456:	f002 faf1 	bl	8005a3c <HAL_I2C_Master_Transmit>
		break;
 800345a:	e002      	b.n	8003462 <u8x8_byte_i2c+0x9a>
	default:
		return 0;
 800345c:	2300      	movs	r3, #0
 800345e:	e001      	b.n	8003464 <u8x8_byte_i2c+0x9c>
		break;
 8003460:	46c0      	nop			; (mov r8, r8)
	}
	return 1;
 8003462:	2301      	movs	r3, #1
}
 8003464:	0018      	movs	r0, r3
 8003466:	46bd      	mov	sp, r7
 8003468:	b007      	add	sp, #28
 800346a:	bd90      	pop	{r4, r7, pc}
 800346c:	08013568 	.word	0x08013568
 8003470:	200004d4 	.word	0x200004d4
 8003474:	200004d8 	.word	0x200004d8
 8003478:	200002c8 	.word	0x200002c8

0800347c <map>:
uint32_t map(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax, uint32_t au32_OUTmin, uint32_t au32_OUTmax)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
 8003488:	603b      	str	r3, [r7, #0]
    return ((((au32_IN - au32_INmin)*(au32_OUTmax - au32_OUTmin))/(au32_INmax - au32_INmin)) + au32_OUTmin);
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	69b9      	ldr	r1, [r7, #24]
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	1a8a      	subs	r2, r1, r2
 8003496:	435a      	muls	r2, r3
 8003498:	0010      	movs	r0, r2
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	0019      	movs	r1, r3
 80034a2:	f7fc fe4d 	bl	8000140 <__udivsi3>
 80034a6:	0003      	movs	r3, r0
 80034a8:	001a      	movs	r2, r3
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	18d3      	adds	r3, r2, r3
}
 80034ae:	0018      	movs	r0, r3
 80034b0:	46bd      	mov	sp, r7
 80034b2:	b004      	add	sp, #16
 80034b4:	bd80      	pop	{r7, pc}
	...

080034b8 <send_uart>:
void send_uart(char *string)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)string, strlen(string), HAL_MAX_DELAY);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	0018      	movs	r0, r3
 80034c4:	f7fc fe20 	bl	8000108 <strlen>
 80034c8:	0003      	movs	r3, r0
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	2301      	movs	r3, #1
 80034ce:	425b      	negs	r3, r3
 80034d0:	6879      	ldr	r1, [r7, #4]
 80034d2:	4803      	ldr	r0, [pc, #12]	; (80034e0 <send_uart+0x28>)
 80034d4:	f004 fbba 	bl	8007c4c <HAL_UART_Transmit>
}
 80034d8:	46c0      	nop			; (mov r8, r8)
 80034da:	46bd      	mov	sp, r7
 80034dc:	b002      	add	sp, #8
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	2000035c 	.word	0x2000035c

080034e4 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
	if(adc_value.first_conv)
 80034ec:	4b3c      	ldr	r3, [pc, #240]	; (80035e0 <HAL_ADC_ConvCpltCallback+0xfc>)
 80034ee:	7b1b      	ldrb	r3, [r3, #12]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d038      	beq.n	8003566 <HAL_ADC_ConvCpltCallback+0x82>
	{
		adc_value.adc_ch0 = HAL_ADC_GetValue(hadc);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	0018      	movs	r0, r3
 80034f8:	f001 fb9e 	bl	8004c38 <HAL_ADC_GetValue>
 80034fc:	0003      	movs	r3, r0
 80034fe:	b29a      	uxth	r2, r3
 8003500:	4b37      	ldr	r3, [pc, #220]	; (80035e0 <HAL_ADC_ConvCpltCallback+0xfc>)
 8003502:	801a      	strh	r2, [r3, #0]
		adc_value.temp = (adc_value.adc_ch0/4096.0) * 3.3;
 8003504:	4b36      	ldr	r3, [pc, #216]	; (80035e0 <HAL_ADC_ConvCpltCallback+0xfc>)
 8003506:	881b      	ldrh	r3, [r3, #0]
 8003508:	0018      	movs	r0, r3
 800350a:	f7ff f9cf 	bl	80028ac <__aeabi_i2d>
 800350e:	2200      	movs	r2, #0
 8003510:	4b34      	ldr	r3, [pc, #208]	; (80035e4 <HAL_ADC_ConvCpltCallback+0x100>)
 8003512:	f7fd ff77 	bl	8001404 <__aeabi_ddiv>
 8003516:	0002      	movs	r2, r0
 8003518:	000b      	movs	r3, r1
 800351a:	0010      	movs	r0, r2
 800351c:	0019      	movs	r1, r3
 800351e:	4a32      	ldr	r2, [pc, #200]	; (80035e8 <HAL_ADC_ConvCpltCallback+0x104>)
 8003520:	4b32      	ldr	r3, [pc, #200]	; (80035ec <HAL_ADC_ConvCpltCallback+0x108>)
 8003522:	f7fe fb71 	bl	8001c08 <__aeabi_dmul>
 8003526:	0002      	movs	r2, r0
 8003528:	000b      	movs	r3, r1
 800352a:	0010      	movs	r0, r2
 800352c:	0019      	movs	r1, r3
 800352e:	f7ff fa5b 	bl	80029e8 <__aeabi_d2f>
 8003532:	1c02      	adds	r2, r0, #0
 8003534:	4b2a      	ldr	r3, [pc, #168]	; (80035e0 <HAL_ADC_ConvCpltCallback+0xfc>)
 8003536:	605a      	str	r2, [r3, #4]
		adc_value.temp = adc_value.temp/0.01;
 8003538:	4b29      	ldr	r3, [pc, #164]	; (80035e0 <HAL_ADC_ConvCpltCallback+0xfc>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	1c18      	adds	r0, r3, #0
 800353e:	f7ff fa0b 	bl	8002958 <__aeabi_f2d>
 8003542:	4a2b      	ldr	r2, [pc, #172]	; (80035f0 <HAL_ADC_ConvCpltCallback+0x10c>)
 8003544:	4b2b      	ldr	r3, [pc, #172]	; (80035f4 <HAL_ADC_ConvCpltCallback+0x110>)
 8003546:	f7fd ff5d 	bl	8001404 <__aeabi_ddiv>
 800354a:	0002      	movs	r2, r0
 800354c:	000b      	movs	r3, r1
 800354e:	0010      	movs	r0, r2
 8003550:	0019      	movs	r1, r3
 8003552:	f7ff fa49 	bl	80029e8 <__aeabi_d2f>
 8003556:	1c02      	adds	r2, r0, #0
 8003558:	4b21      	ldr	r3, [pc, #132]	; (80035e0 <HAL_ADC_ConvCpltCallback+0xfc>)
 800355a:	605a      	str	r2, [r3, #4]
		HAL_ADC_Start_IT(hadc);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	0018      	movs	r0, r3
 8003560:	f001 faae 	bl	8004ac0 <HAL_ADC_Start_IT>
 8003564:	e02a      	b.n	80035bc <HAL_ADC_ConvCpltCallback+0xd8>

	}
	else
	{
		adc_value.adc_ch1 = HAL_ADC_GetValue(hadc);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	0018      	movs	r0, r3
 800356a:	f001 fb65 	bl	8004c38 <HAL_ADC_GetValue>
 800356e:	0003      	movs	r3, r0
 8003570:	b29a      	uxth	r2, r3
 8003572:	4b1b      	ldr	r3, [pc, #108]	; (80035e0 <HAL_ADC_ConvCpltCallback+0xfc>)
 8003574:	805a      	strh	r2, [r3, #2]
		adc_value.pot = (adc_value.adc_ch1/4096.0) * 3.3;
 8003576:	4b1a      	ldr	r3, [pc, #104]	; (80035e0 <HAL_ADC_ConvCpltCallback+0xfc>)
 8003578:	885b      	ldrh	r3, [r3, #2]
 800357a:	0018      	movs	r0, r3
 800357c:	f7ff f996 	bl	80028ac <__aeabi_i2d>
 8003580:	2200      	movs	r2, #0
 8003582:	4b18      	ldr	r3, [pc, #96]	; (80035e4 <HAL_ADC_ConvCpltCallback+0x100>)
 8003584:	f7fd ff3e 	bl	8001404 <__aeabi_ddiv>
 8003588:	0002      	movs	r2, r0
 800358a:	000b      	movs	r3, r1
 800358c:	0010      	movs	r0, r2
 800358e:	0019      	movs	r1, r3
 8003590:	4a15      	ldr	r2, [pc, #84]	; (80035e8 <HAL_ADC_ConvCpltCallback+0x104>)
 8003592:	4b16      	ldr	r3, [pc, #88]	; (80035ec <HAL_ADC_ConvCpltCallback+0x108>)
 8003594:	f7fe fb38 	bl	8001c08 <__aeabi_dmul>
 8003598:	0002      	movs	r2, r0
 800359a:	000b      	movs	r3, r1
 800359c:	0010      	movs	r0, r2
 800359e:	0019      	movs	r1, r3
 80035a0:	f7ff fa22 	bl	80029e8 <__aeabi_d2f>
 80035a4:	1c02      	adds	r2, r0, #0
 80035a6:	4b0e      	ldr	r3, [pc, #56]	; (80035e0 <HAL_ADC_ConvCpltCallback+0xfc>)
 80035a8:	609a      	str	r2, [r3, #8]
		osSemaphoreRelease(Adc_SemHandle);
 80035aa:	4b13      	ldr	r3, [pc, #76]	; (80035f8 <HAL_ADC_ConvCpltCallback+0x114>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	0018      	movs	r0, r3
 80035b0:	f008 faca 	bl	800bb48 <osSemaphoreRelease>
		HAL_ADC_Stop_IT(hadc);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	0018      	movs	r0, r3
 80035b8:	f001 faf4 	bl	8004ba4 <HAL_ADC_Stop_IT>
	}
	adc_value.first_conv = !adc_value.first_conv;
 80035bc:	4b08      	ldr	r3, [pc, #32]	; (80035e0 <HAL_ADC_ConvCpltCallback+0xfc>)
 80035be:	7b1b      	ldrb	r3, [r3, #12]
 80035c0:	1e5a      	subs	r2, r3, #1
 80035c2:	4193      	sbcs	r3, r2
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2201      	movs	r2, #1
 80035c8:	4053      	eors	r3, r2
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	1c1a      	adds	r2, r3, #0
 80035ce:	2301      	movs	r3, #1
 80035d0:	4013      	ands	r3, r2
 80035d2:	b2da      	uxtb	r2, r3
 80035d4:	4b02      	ldr	r3, [pc, #8]	; (80035e0 <HAL_ADC_ConvCpltCallback+0xfc>)
 80035d6:	731a      	strb	r2, [r3, #12]

}
 80035d8:	46c0      	nop			; (mov r8, r8)
 80035da:	46bd      	mov	sp, r7
 80035dc:	b002      	add	sp, #8
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	20000000 	.word	0x20000000
 80035e4:	40b00000 	.word	0x40b00000
 80035e8:	66666666 	.word	0x66666666
 80035ec:	400a6666 	.word	0x400a6666
 80035f0:	47ae147b 	.word	0x47ae147b
 80035f4:	3f847ae1 	.word	0x3f847ae1
 80035f8:	20000400 	.word	0x20000400

080035fc <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	000a      	movs	r2, r1
 8003606:	1cbb      	adds	r3, r7, #2
 8003608:	801a      	strh	r2, [r3, #0]
	osSemaphoreRelease(Rx_SemHandle);
 800360a:	4b07      	ldr	r3, [pc, #28]	; (8003628 <HAL_UARTEx_RxEventCallback+0x2c>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	0018      	movs	r0, r3
 8003610:	f008 fa9a 	bl	800bb48 <osSemaphoreRelease>
	HAL_UARTEx_ReceiveToIdle_IT(&huart2, (uint8_t *)buf, 5);
 8003614:	4905      	ldr	r1, [pc, #20]	; (800362c <HAL_UARTEx_RxEventCallback+0x30>)
 8003616:	4b06      	ldr	r3, [pc, #24]	; (8003630 <HAL_UARTEx_RxEventCallback+0x34>)
 8003618:	2205      	movs	r2, #5
 800361a:	0018      	movs	r0, r3
 800361c:	f005 fc6c 	bl	8008ef8 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8003620:	46c0      	nop			; (mov r8, r8)
 8003622:	46bd      	mov	sp, r7
 8003624:	b002      	add	sp, #8
 8003626:	bd80      	pop	{r7, pc}
 8003628:	20000404 	.word	0x20000404
 800362c:	20000408 	.word	0x20000408
 8003630:	2000035c 	.word	0x2000035c

08003634 <radians>:
double radians(double degrees)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6038      	str	r0, [r7, #0]
 800363c:	6079      	str	r1, [r7, #4]
	return degrees * M_PI / 180.0;
 800363e:	4a0a      	ldr	r2, [pc, #40]	; (8003668 <radians+0x34>)
 8003640:	4b0a      	ldr	r3, [pc, #40]	; (800366c <radians+0x38>)
 8003642:	6838      	ldr	r0, [r7, #0]
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	f7fe fadf 	bl	8001c08 <__aeabi_dmul>
 800364a:	0002      	movs	r2, r0
 800364c:	000b      	movs	r3, r1
 800364e:	0010      	movs	r0, r2
 8003650:	0019      	movs	r1, r3
 8003652:	2200      	movs	r2, #0
 8003654:	4b06      	ldr	r3, [pc, #24]	; (8003670 <radians+0x3c>)
 8003656:	f7fd fed5 	bl	8001404 <__aeabi_ddiv>
 800365a:	0002      	movs	r2, r0
 800365c:	000b      	movs	r3, r1
}
 800365e:	0010      	movs	r0, r2
 8003660:	0019      	movs	r1, r3
 8003662:	46bd      	mov	sp, r7
 8003664:	b002      	add	sp, #8
 8003666:	bd80      	pop	{r7, pc}
 8003668:	54442d18 	.word	0x54442d18
 800366c:	400921fb 	.word	0x400921fb
 8003670:	40668000 	.word	0x40668000

08003674 <calc_needle>:
void calc_needle(needle *s)
{
 8003674:	b5b0      	push	{r4, r5, r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af00      	add	r7, sp, #0
 800367a:	6178      	str	r0, [r7, #20]
	s->end_x = (s->big * -sin(radians(s->angle))) + s->center_x;
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	0018      	movs	r0, r3
 8003682:	f7ff f913 	bl	80028ac <__aeabi_i2d>
 8003686:	0004      	movs	r4, r0
 8003688:	000d      	movs	r5, r1
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	0018      	movs	r0, r3
 8003690:	f7ff f90c 	bl	80028ac <__aeabi_i2d>
 8003694:	0002      	movs	r2, r0
 8003696:	000b      	movs	r3, r1
 8003698:	0010      	movs	r0, r2
 800369a:	0019      	movs	r1, r3
 800369c:	f7ff ffca 	bl	8003634 <radians>
 80036a0:	0002      	movs	r2, r0
 80036a2:	000b      	movs	r3, r1
 80036a4:	0010      	movs	r0, r2
 80036a6:	0019      	movs	r1, r3
 80036a8:	f00e fae0 	bl	8011c6c <sin>
 80036ac:	0002      	movs	r2, r0
 80036ae:	000b      	movs	r3, r1
 80036b0:	0011      	movs	r1, r2
 80036b2:	60b9      	str	r1, [r7, #8]
 80036b4:	2180      	movs	r1, #128	; 0x80
 80036b6:	0609      	lsls	r1, r1, #24
 80036b8:	4059      	eors	r1, r3
 80036ba:	60f9      	str	r1, [r7, #12]
 80036bc:	68ba      	ldr	r2, [r7, #8]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	0020      	movs	r0, r4
 80036c2:	0029      	movs	r1, r5
 80036c4:	f7fe faa0 	bl	8001c08 <__aeabi_dmul>
 80036c8:	0002      	movs	r2, r0
 80036ca:	000b      	movs	r3, r1
 80036cc:	0014      	movs	r4, r2
 80036ce:	001d      	movs	r5, r3
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	0018      	movs	r0, r3
 80036d6:	f7ff f8e9 	bl	80028ac <__aeabi_i2d>
 80036da:	0002      	movs	r2, r0
 80036dc:	000b      	movs	r3, r1
 80036de:	0020      	movs	r0, r4
 80036e0:	0029      	movs	r1, r5
 80036e2:	f7fd fb53 	bl	8000d8c <__aeabi_dadd>
 80036e6:	0002      	movs	r2, r0
 80036e8:	000b      	movs	r3, r1
 80036ea:	0010      	movs	r0, r2
 80036ec:	0019      	movs	r1, r3
 80036ee:	f7ff f8a7 	bl	8002840 <__aeabi_d2iz>
 80036f2:	0002      	movs	r2, r0
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	619a      	str	r2, [r3, #24]
	s->end_y = (s->big * cos(radians(s->angle))) + s->center_y;
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	0018      	movs	r0, r3
 80036fe:	f7ff f8d5 	bl	80028ac <__aeabi_i2d>
 8003702:	0004      	movs	r4, r0
 8003704:	000d      	movs	r5, r1
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	0018      	movs	r0, r3
 800370c:	f7ff f8ce 	bl	80028ac <__aeabi_i2d>
 8003710:	0002      	movs	r2, r0
 8003712:	000b      	movs	r3, r1
 8003714:	0010      	movs	r0, r2
 8003716:	0019      	movs	r1, r3
 8003718:	f7ff ff8c 	bl	8003634 <radians>
 800371c:	0002      	movs	r2, r0
 800371e:	000b      	movs	r3, r1
 8003720:	0010      	movs	r0, r2
 8003722:	0019      	movs	r1, r3
 8003724:	f00e fa60 	bl	8011be8 <cos>
 8003728:	0002      	movs	r2, r0
 800372a:	000b      	movs	r3, r1
 800372c:	0020      	movs	r0, r4
 800372e:	0029      	movs	r1, r5
 8003730:	f7fe fa6a 	bl	8001c08 <__aeabi_dmul>
 8003734:	0002      	movs	r2, r0
 8003736:	000b      	movs	r3, r1
 8003738:	0014      	movs	r4, r2
 800373a:	001d      	movs	r5, r3
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	0018      	movs	r0, r3
 8003742:	f7ff f8b3 	bl	80028ac <__aeabi_i2d>
 8003746:	0002      	movs	r2, r0
 8003748:	000b      	movs	r3, r1
 800374a:	0020      	movs	r0, r4
 800374c:	0029      	movs	r1, r5
 800374e:	f7fd fb1d 	bl	8000d8c <__aeabi_dadd>
 8003752:	0002      	movs	r2, r0
 8003754:	000b      	movs	r3, r1
 8003756:	0010      	movs	r0, r2
 8003758:	0019      	movs	r1, r3
 800375a:	f7ff f871 	bl	8002840 <__aeabi_d2iz>
 800375e:	0002      	movs	r2, r0
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	61da      	str	r2, [r3, #28]
	s->start_x = (s->small * -sin(radians(s->angle + 180.0))) + s->center_x;
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	0018      	movs	r0, r3
 800376a:	f7ff f89f 	bl	80028ac <__aeabi_i2d>
 800376e:	0004      	movs	r4, r0
 8003770:	000d      	movs	r5, r1
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	0018      	movs	r0, r3
 8003778:	f7ff f898 	bl	80028ac <__aeabi_i2d>
 800377c:	2200      	movs	r2, #0
 800377e:	4b39      	ldr	r3, [pc, #228]	; (8003864 <calc_needle+0x1f0>)
 8003780:	f7fd fb04 	bl	8000d8c <__aeabi_dadd>
 8003784:	0002      	movs	r2, r0
 8003786:	000b      	movs	r3, r1
 8003788:	0010      	movs	r0, r2
 800378a:	0019      	movs	r1, r3
 800378c:	f7ff ff52 	bl	8003634 <radians>
 8003790:	0002      	movs	r2, r0
 8003792:	000b      	movs	r3, r1
 8003794:	0010      	movs	r0, r2
 8003796:	0019      	movs	r1, r3
 8003798:	f00e fa68 	bl	8011c6c <sin>
 800379c:	0002      	movs	r2, r0
 800379e:	000b      	movs	r3, r1
 80037a0:	0011      	movs	r1, r2
 80037a2:	6039      	str	r1, [r7, #0]
 80037a4:	2180      	movs	r1, #128	; 0x80
 80037a6:	0609      	lsls	r1, r1, #24
 80037a8:	4059      	eors	r1, r3
 80037aa:	6079      	str	r1, [r7, #4]
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	0020      	movs	r0, r4
 80037b2:	0029      	movs	r1, r5
 80037b4:	f7fe fa28 	bl	8001c08 <__aeabi_dmul>
 80037b8:	0002      	movs	r2, r0
 80037ba:	000b      	movs	r3, r1
 80037bc:	0014      	movs	r4, r2
 80037be:	001d      	movs	r5, r3
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	0018      	movs	r0, r3
 80037c6:	f7ff f871 	bl	80028ac <__aeabi_i2d>
 80037ca:	0002      	movs	r2, r0
 80037cc:	000b      	movs	r3, r1
 80037ce:	0020      	movs	r0, r4
 80037d0:	0029      	movs	r1, r5
 80037d2:	f7fd fadb 	bl	8000d8c <__aeabi_dadd>
 80037d6:	0002      	movs	r2, r0
 80037d8:	000b      	movs	r3, r1
 80037da:	0010      	movs	r0, r2
 80037dc:	0019      	movs	r1, r3
 80037de:	f7ff f82f 	bl	8002840 <__aeabi_d2iz>
 80037e2:	0002      	movs	r2, r0
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	611a      	str	r2, [r3, #16]
	s->start_y = (s->small * cos(radians(s->angle + 180.0))) + s->center_y;
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	0018      	movs	r0, r3
 80037ee:	f7ff f85d 	bl	80028ac <__aeabi_i2d>
 80037f2:	0004      	movs	r4, r0
 80037f4:	000d      	movs	r5, r1
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	0018      	movs	r0, r3
 80037fc:	f7ff f856 	bl	80028ac <__aeabi_i2d>
 8003800:	2200      	movs	r2, #0
 8003802:	4b18      	ldr	r3, [pc, #96]	; (8003864 <calc_needle+0x1f0>)
 8003804:	f7fd fac2 	bl	8000d8c <__aeabi_dadd>
 8003808:	0002      	movs	r2, r0
 800380a:	000b      	movs	r3, r1
 800380c:	0010      	movs	r0, r2
 800380e:	0019      	movs	r1, r3
 8003810:	f7ff ff10 	bl	8003634 <radians>
 8003814:	0002      	movs	r2, r0
 8003816:	000b      	movs	r3, r1
 8003818:	0010      	movs	r0, r2
 800381a:	0019      	movs	r1, r3
 800381c:	f00e f9e4 	bl	8011be8 <cos>
 8003820:	0002      	movs	r2, r0
 8003822:	000b      	movs	r3, r1
 8003824:	0020      	movs	r0, r4
 8003826:	0029      	movs	r1, r5
 8003828:	f7fe f9ee 	bl	8001c08 <__aeabi_dmul>
 800382c:	0002      	movs	r2, r0
 800382e:	000b      	movs	r3, r1
 8003830:	0014      	movs	r4, r2
 8003832:	001d      	movs	r5, r3
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	0018      	movs	r0, r3
 800383a:	f7ff f837 	bl	80028ac <__aeabi_i2d>
 800383e:	0002      	movs	r2, r0
 8003840:	000b      	movs	r3, r1
 8003842:	0020      	movs	r0, r4
 8003844:	0029      	movs	r1, r5
 8003846:	f7fd faa1 	bl	8000d8c <__aeabi_dadd>
 800384a:	0002      	movs	r2, r0
 800384c:	000b      	movs	r3, r1
 800384e:	0010      	movs	r0, r2
 8003850:	0019      	movs	r1, r3
 8003852:	f7fe fff5 	bl	8002840 <__aeabi_d2iz>
 8003856:	0002      	movs	r2, r0
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	615a      	str	r2, [r3, #20]
}
 800385c:	46c0      	nop			; (mov r8, r8)
 800385e:	46bd      	mov	sp, r7
 8003860:	b006      	add	sp, #24
 8003862:	bdb0      	pop	{r4, r5, r7, pc}
 8003864:	40668000 	.word	0x40668000

08003868 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(2000);
 8003870:	23fa      	movs	r3, #250	; 0xfa
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	0018      	movs	r0, r3
 8003876:	f008 f83f 	bl	800b8f8 <osDelay>
 800387a:	e7f9      	b.n	8003870 <StartDefaultTask+0x8>

0800387c <oled_update>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_oled_update */
void oled_update(void *argument)
{
 800387c:	b5b0      	push	{r4, r5, r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af02      	add	r7, sp, #8
 8003882:	6078      	str	r0, [r7, #4]
			.start_y = 0,
			.end_x = 0,
			.end_y = 0,
			.angle = 45 };

	u8g2_Setup_ssd1306_i2c_128x64_noname_2(&u8g2, U8G2_R0, u8x8_byte_i2c, u8x8_stm32_gpio_and_delay);
 8003884:	4bc6      	ldr	r3, [pc, #792]	; (8003ba0 <oled_update+0x324>)
 8003886:	4ac7      	ldr	r2, [pc, #796]	; (8003ba4 <oled_update+0x328>)
 8003888:	49c7      	ldr	r1, [pc, #796]	; (8003ba8 <oled_update+0x32c>)
 800388a:	48c8      	ldr	r0, [pc, #800]	; (8003bac <oled_update+0x330>)
 800388c:	f005 fdb0 	bl	80093f0 <u8g2_Setup_ssd1306_i2c_128x64_noname_2>
	u8g2_SetI2CAddress(&u8g2, OLED_ADDR);	// 0x78
 8003890:	4bc6      	ldr	r3, [pc, #792]	; (8003bac <oled_update+0x330>)
 8003892:	2224      	movs	r2, #36	; 0x24
 8003894:	2178      	movs	r1, #120	; 0x78
 8003896:	5499      	strb	r1, [r3, r2]
	u8g2_InitDisplay(&u8g2); // send init sequence to the display, display is in sleep mode after this,
 8003898:	4bc4      	ldr	r3, [pc, #784]	; (8003bac <oled_update+0x330>)
 800389a:	0018      	movs	r0, r3
 800389c:	f007 fe23 	bl	800b4e6 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0); // wake up display
 80038a0:	4bc2      	ldr	r3, [pc, #776]	; (8003bac <oled_update+0x330>)
 80038a2:	2100      	movs	r1, #0
 80038a4:	0018      	movs	r0, r3
 80038a6:	f007 fe2d 	bl	800b504 <u8x8_SetPowerSave>
	u8g2_SetFont(&u8g2, u8g2_font_5x7_tr);
 80038aa:	4ac1      	ldr	r2, [pc, #772]	; (8003bb0 <oled_update+0x334>)
 80038ac:	4bbf      	ldr	r3, [pc, #764]	; (8003bac <oled_update+0x330>)
 80038ae:	0011      	movs	r1, r2
 80038b0:	0018      	movs	r0, r3
 80038b2:	f006 fce3 	bl	800a27c <u8g2_SetFont>
  /* Infinite loop */
	for(;;)
	{
		left.angle = map(__HAL_TIM_GET_COMPARE(&htim3, TIM_CHANNEL_2), 99, 199, 45, 270+45);
 80038b6:	4bbf      	ldr	r3, [pc, #764]	; (8003bb4 <oled_update+0x338>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80038bc:	233c      	movs	r3, #60	; 0x3c
 80038be:	33ff      	adds	r3, #255	; 0xff
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	232d      	movs	r3, #45	; 0x2d
 80038c4:	22c7      	movs	r2, #199	; 0xc7
 80038c6:	2163      	movs	r1, #99	; 0x63
 80038c8:	f7ff fdd8 	bl	800347c <map>
 80038cc:	0003      	movs	r3, r0
 80038ce:	001a      	movs	r2, r3
 80038d0:	4bb9      	ldr	r3, [pc, #740]	; (8003bb8 <oled_update+0x33c>)
 80038d2:	621a      	str	r2, [r3, #32]
		right.angle = map(rpm[periodo-2], 0, 15, 45, 270+45);
 80038d4:	4bb9      	ldr	r3, [pc, #740]	; (8003bbc <oled_update+0x340>)
 80038d6:	881b      	ldrh	r3, [r3, #0]
 80038d8:	1e9a      	subs	r2, r3, #2
 80038da:	4bb9      	ldr	r3, [pc, #740]	; (8003bc0 <oled_update+0x344>)
 80038dc:	0092      	lsls	r2, r2, #2
 80038de:	58d3      	ldr	r3, [r2, r3]
 80038e0:	1c18      	adds	r0, r3, #0
 80038e2:	f7fc fde1 	bl	80004a8 <__aeabi_f2uiz>
 80038e6:	233c      	movs	r3, #60	; 0x3c
 80038e8:	33ff      	adds	r3, #255	; 0xff
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	232d      	movs	r3, #45	; 0x2d
 80038ee:	220f      	movs	r2, #15
 80038f0:	2100      	movs	r1, #0
 80038f2:	f7ff fdc3 	bl	800347c <map>
 80038f6:	0003      	movs	r3, r0
 80038f8:	001a      	movs	r2, r3
 80038fa:	4bb2      	ldr	r3, [pc, #712]	; (8003bc4 <oled_update+0x348>)
 80038fc:	621a      	str	r2, [r3, #32]


		calc_needle(&left);
 80038fe:	4bae      	ldr	r3, [pc, #696]	; (8003bb8 <oled_update+0x33c>)
 8003900:	0018      	movs	r0, r3
 8003902:	f7ff feb7 	bl	8003674 <calc_needle>
		calc_needle(&right);
 8003906:	4baf      	ldr	r3, [pc, #700]	; (8003bc4 <oled_update+0x348>)
 8003908:	0018      	movs	r0, r3
 800390a:	f7ff feb3 	bl	8003674 <calc_needle>
//		needle_end_x_right = (needle_big * -sin(needle_angle_right * M_PI / 180.0)) + needle_center_x + right_offset;
//		needle_end_y_right = (needle_big * cos(needle_angle_right * M_PI / 180.0)) + needle_center_y;
//		needle_start_x_right = (needle_small * -sin((needle_angle_right + 180.0) * M_PI / 180.0)) + needle_center_x + right_offset;
//		needle_start_y_right = (needle_small * cos((needle_angle_right + 180.0) * M_PI / 180.0)) + needle_center_y;

		sprintf(temp, "%0.2f", adc_value.temp);
 800390e:	4bae      	ldr	r3, [pc, #696]	; (8003bc8 <oled_update+0x34c>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	1c18      	adds	r0, r3, #0
 8003914:	f7ff f820 	bl	8002958 <__aeabi_f2d>
 8003918:	0002      	movs	r2, r0
 800391a:	000b      	movs	r3, r1
 800391c:	49ab      	ldr	r1, [pc, #684]	; (8003bcc <oled_update+0x350>)
 800391e:	48ac      	ldr	r0, [pc, #688]	; (8003bd0 <oled_update+0x354>)
 8003920:	f00b ff56 	bl	800f7d0 <siprintf>
		sprintf(pos, "%li", map(__HAL_TIM_GET_COMPARE(&htim3,TIM_CHANNEL_2), 99, 199, 0, 90));
 8003924:	4ba3      	ldr	r3, [pc, #652]	; (8003bb4 <oled_update+0x338>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800392a:	235a      	movs	r3, #90	; 0x5a
 800392c:	9300      	str	r3, [sp, #0]
 800392e:	2300      	movs	r3, #0
 8003930:	22c7      	movs	r2, #199	; 0xc7
 8003932:	2163      	movs	r1, #99	; 0x63
 8003934:	f7ff fda2 	bl	800347c <map>
 8003938:	0002      	movs	r2, r0
 800393a:	49a6      	ldr	r1, [pc, #664]	; (8003bd4 <oled_update+0x358>)
 800393c:	4ba6      	ldr	r3, [pc, #664]	; (8003bd8 <oled_update+0x35c>)
 800393e:	0018      	movs	r0, r3
 8003940:	f00b ff46 	bl	800f7d0 <siprintf>
		sprintf(speed, "%0.2fRPM", rpm[periodo-2]);
 8003944:	4b9d      	ldr	r3, [pc, #628]	; (8003bbc <oled_update+0x340>)
 8003946:	881b      	ldrh	r3, [r3, #0]
 8003948:	1e9a      	subs	r2, r3, #2
 800394a:	4b9d      	ldr	r3, [pc, #628]	; (8003bc0 <oled_update+0x344>)
 800394c:	0092      	lsls	r2, r2, #2
 800394e:	58d3      	ldr	r3, [r2, r3]
 8003950:	1c18      	adds	r0, r3, #0
 8003952:	f7ff f801 	bl	8002958 <__aeabi_f2d>
 8003956:	0002      	movs	r2, r0
 8003958:	000b      	movs	r3, r1
 800395a:	49a0      	ldr	r1, [pc, #640]	; (8003bdc <oled_update+0x360>)
 800395c:	48a0      	ldr	r0, [pc, #640]	; (8003be0 <oled_update+0x364>)
 800395e:	f00b ff37 	bl	800f7d0 <siprintf>

		if((left.angle > 45 && left.angle < 135) || (left.angle > 225 && left.angle < 315))
 8003962:	4b95      	ldr	r3, [pc, #596]	; (8003bb8 <oled_update+0x33c>)
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	2b2d      	cmp	r3, #45	; 0x2d
 8003968:	dd03      	ble.n	8003972 <oled_update+0xf6>
 800396a:	4b93      	ldr	r3, [pc, #588]	; (8003bb8 <oled_update+0x33c>)
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	2b86      	cmp	r3, #134	; 0x86
 8003970:	dd09      	ble.n	8003986 <oled_update+0x10a>
 8003972:	4b91      	ldr	r3, [pc, #580]	; (8003bb8 <oled_update+0x33c>)
 8003974:	6a1b      	ldr	r3, [r3, #32]
 8003976:	2be1      	cmp	r3, #225	; 0xe1
 8003978:	dd0c      	ble.n	8003994 <oled_update+0x118>
 800397a:	4b8f      	ldr	r3, [pc, #572]	; (8003bb8 <oled_update+0x33c>)
 800397c:	6a1a      	ldr	r2, [r3, #32]
 800397e:	239d      	movs	r3, #157	; 0x9d
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	429a      	cmp	r2, r3
 8003984:	dc06      	bgt.n	8003994 <oled_update+0x118>
		{
			needle_offset_x_left = 0;
 8003986:	4b97      	ldr	r3, [pc, #604]	; (8003be4 <oled_update+0x368>)
 8003988:	2200      	movs	r2, #0
 800398a:	601a      	str	r2, [r3, #0]
			needle_offset_y_left = 1;
 800398c:	4b96      	ldr	r3, [pc, #600]	; (8003be8 <oled_update+0x36c>)
 800398e:	2201      	movs	r2, #1
 8003990:	601a      	str	r2, [r3, #0]
 8003992:	e005      	b.n	80039a0 <oled_update+0x124>
		}
		else
		{
			needle_offset_x_left = 1;
 8003994:	4b93      	ldr	r3, [pc, #588]	; (8003be4 <oled_update+0x368>)
 8003996:	2201      	movs	r2, #1
 8003998:	601a      	str	r2, [r3, #0]
			needle_offset_y_left = 0;
 800399a:	4b93      	ldr	r3, [pc, #588]	; (8003be8 <oled_update+0x36c>)
 800399c:	2200      	movs	r2, #0
 800399e:	601a      	str	r2, [r3, #0]
		}
		if((right.angle > 45 && right.angle < 135) || (right.angle > 225 && right.angle < 315))
 80039a0:	4b88      	ldr	r3, [pc, #544]	; (8003bc4 <oled_update+0x348>)
 80039a2:	6a1b      	ldr	r3, [r3, #32]
 80039a4:	2b2d      	cmp	r3, #45	; 0x2d
 80039a6:	dd03      	ble.n	80039b0 <oled_update+0x134>
 80039a8:	4b86      	ldr	r3, [pc, #536]	; (8003bc4 <oled_update+0x348>)
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	2b86      	cmp	r3, #134	; 0x86
 80039ae:	dd09      	ble.n	80039c4 <oled_update+0x148>
 80039b0:	4b84      	ldr	r3, [pc, #528]	; (8003bc4 <oled_update+0x348>)
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	2be1      	cmp	r3, #225	; 0xe1
 80039b6:	dd0c      	ble.n	80039d2 <oled_update+0x156>
 80039b8:	4b82      	ldr	r3, [pc, #520]	; (8003bc4 <oled_update+0x348>)
 80039ba:	6a1a      	ldr	r2, [r3, #32]
 80039bc:	239d      	movs	r3, #157	; 0x9d
 80039be:	005b      	lsls	r3, r3, #1
 80039c0:	429a      	cmp	r2, r3
 80039c2:	dc06      	bgt.n	80039d2 <oled_update+0x156>
		{
			needle_offset_x_right = 0;
 80039c4:	4b89      	ldr	r3, [pc, #548]	; (8003bec <oled_update+0x370>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	601a      	str	r2, [r3, #0]
			needle_offset_y_right = 1;
 80039ca:	4b89      	ldr	r3, [pc, #548]	; (8003bf0 <oled_update+0x374>)
 80039cc:	2201      	movs	r2, #1
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	e005      	b.n	80039de <oled_update+0x162>
		}
		else
		{
			needle_offset_x_right = 1;
 80039d2:	4b86      	ldr	r3, [pc, #536]	; (8003bec <oled_update+0x370>)
 80039d4:	2201      	movs	r2, #1
 80039d6:	601a      	str	r2, [r3, #0]
			needle_offset_y_right = 0;
 80039d8:	4b85      	ldr	r3, [pc, #532]	; (8003bf0 <oled_update+0x374>)
 80039da:	2200      	movs	r2, #0
 80039dc:	601a      	str	r2, [r3, #0]
		}

		u8g2_FirstPage(&u8g2);
 80039de:	4b73      	ldr	r3, [pc, #460]	; (8003bac <oled_update+0x330>)
 80039e0:	0018      	movs	r0, r3
 80039e2:	f005 fca8 	bl	8009336 <u8g2_FirstPage>
		do {

			// draw gauges & termometer
			u8g2_DrawBitmap(&u8g2, 0, 0, 64/8, 56, Left_Gauge);
 80039e6:	4871      	ldr	r0, [pc, #452]	; (8003bac <oled_update+0x330>)
 80039e8:	4b82      	ldr	r3, [pc, #520]	; (8003bf4 <oled_update+0x378>)
 80039ea:	9301      	str	r3, [sp, #4]
 80039ec:	2338      	movs	r3, #56	; 0x38
 80039ee:	9300      	str	r3, [sp, #0]
 80039f0:	2308      	movs	r3, #8
 80039f2:	2200      	movs	r2, #0
 80039f4:	2100      	movs	r1, #0
 80039f6:	f005 fb87 	bl	8009108 <u8g2_DrawBitmap>
			u8g2_DrawBitmap(&u8g2, 64, 0, 64/8, 56, Right_Gauge);
 80039fa:	486c      	ldr	r0, [pc, #432]	; (8003bac <oled_update+0x330>)
 80039fc:	4b7e      	ldr	r3, [pc, #504]	; (8003bf8 <oled_update+0x37c>)
 80039fe:	9301      	str	r3, [sp, #4]
 8003a00:	2338      	movs	r3, #56	; 0x38
 8003a02:	9300      	str	r3, [sp, #0]
 8003a04:	2308      	movs	r3, #8
 8003a06:	2200      	movs	r2, #0
 8003a08:	2140      	movs	r1, #64	; 0x40
 8003a0a:	f005 fb7d 	bl	8009108 <u8g2_DrawBitmap>
			u8g2_DrawBitmap(&u8g2, 60, 0, 8/8, 56, Termometer);
 8003a0e:	4867      	ldr	r0, [pc, #412]	; (8003bac <oled_update+0x330>)
 8003a10:	4b7a      	ldr	r3, [pc, #488]	; (8003bfc <oled_update+0x380>)
 8003a12:	9301      	str	r3, [sp, #4]
 8003a14:	2338      	movs	r3, #56	; 0x38
 8003a16:	9300      	str	r3, [sp, #0]
 8003a18:	2301      	movs	r3, #1
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	213c      	movs	r1, #60	; 0x3c
 8003a1e:	f005 fb73 	bl	8009108 <u8g2_DrawBitmap>

			// draw temperature
			u8g2_DrawLine(&u8g2, 64, 49, 64, 39-map(adc_value.adc_ch0, 0, 4096, 0, 49));
 8003a22:	4b69      	ldr	r3, [pc, #420]	; (8003bc8 <oled_update+0x34c>)
 8003a24:	881b      	ldrh	r3, [r3, #0]
 8003a26:	0018      	movs	r0, r3
 8003a28:	2380      	movs	r3, #128	; 0x80
 8003a2a:	015a      	lsls	r2, r3, #5
 8003a2c:	2331      	movs	r3, #49	; 0x31
 8003a2e:	9300      	str	r3, [sp, #0]
 8003a30:	2300      	movs	r3, #0
 8003a32:	2100      	movs	r1, #0
 8003a34:	f7ff fd22 	bl	800347c <map>
 8003a38:	0003      	movs	r3, r0
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	2227      	movs	r2, #39	; 0x27
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	485a      	ldr	r0, [pc, #360]	; (8003bac <oled_update+0x330>)
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	2340      	movs	r3, #64	; 0x40
 8003a48:	2231      	movs	r2, #49	; 0x31
 8003a4a:	2140      	movs	r1, #64	; 0x40
 8003a4c:	f006 fe38 	bl	800a6c0 <u8g2_DrawLine>
			u8g2_DrawStr(&u8g2, 52, 64, temp);
 8003a50:	4b5f      	ldr	r3, [pc, #380]	; (8003bd0 <oled_update+0x354>)
 8003a52:	4856      	ldr	r0, [pc, #344]	; (8003bac <oled_update+0x330>)
 8003a54:	2240      	movs	r2, #64	; 0x40
 8003a56:	2134      	movs	r1, #52	; 0x34
 8003a58:	f006 fb6c 	bl	800a134 <u8g2_DrawStr>

			// draw needle and center circle Left Gauge
			u8g2_DrawLine(&u8g2, left.start_x, left.start_y, left.end_x, left.end_y);
 8003a5c:	4b56      	ldr	r3, [pc, #344]	; (8003bb8 <oled_update+0x33c>)
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	b299      	uxth	r1, r3
 8003a62:	4b55      	ldr	r3, [pc, #340]	; (8003bb8 <oled_update+0x33c>)
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	4b53      	ldr	r3, [pc, #332]	; (8003bb8 <oled_update+0x33c>)
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	b29c      	uxth	r4, r3
 8003a6e:	4b52      	ldr	r3, [pc, #328]	; (8003bb8 <oled_update+0x33c>)
 8003a70:	69db      	ldr	r3, [r3, #28]
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	484d      	ldr	r0, [pc, #308]	; (8003bac <oled_update+0x330>)
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	0023      	movs	r3, r4
 8003a7a:	f006 fe21 	bl	800a6c0 <u8g2_DrawLine>
			u8g2_DrawLine(&u8g2, left.start_x + needle_offset_x_left, left.start_y + needle_offset_y_left,
 8003a7e:	4b4e      	ldr	r3, [pc, #312]	; (8003bb8 <oled_update+0x33c>)
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	b29a      	uxth	r2, r3
 8003a84:	4b57      	ldr	r3, [pc, #348]	; (8003be4 <oled_update+0x368>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	18d3      	adds	r3, r2, r3
 8003a8c:	b299      	uxth	r1, r3
 8003a8e:	4b4a      	ldr	r3, [pc, #296]	; (8003bb8 <oled_update+0x33c>)
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	4b54      	ldr	r3, [pc, #336]	; (8003be8 <oled_update+0x36c>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	18d3      	adds	r3, r2, r3
 8003a9c:	b29c      	uxth	r4, r3
								 left.end_x + needle_offset_x_left, left.end_y + needle_offset_y_left);
 8003a9e:	4b46      	ldr	r3, [pc, #280]	; (8003bb8 <oled_update+0x33c>)
 8003aa0:	699b      	ldr	r3, [r3, #24]
			u8g2_DrawLine(&u8g2, left.start_x + needle_offset_x_left, left.start_y + needle_offset_y_left,
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	4b4f      	ldr	r3, [pc, #316]	; (8003be4 <oled_update+0x368>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	18d3      	adds	r3, r2, r3
 8003aac:	b29d      	uxth	r5, r3
								 left.end_x + needle_offset_x_left, left.end_y + needle_offset_y_left);
 8003aae:	4b42      	ldr	r3, [pc, #264]	; (8003bb8 <oled_update+0x33c>)
 8003ab0:	69db      	ldr	r3, [r3, #28]
			u8g2_DrawLine(&u8g2, left.start_x + needle_offset_x_left, left.start_y + needle_offset_y_left,
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	4b4c      	ldr	r3, [pc, #304]	; (8003be8 <oled_update+0x36c>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	18d3      	adds	r3, r2, r3
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	483b      	ldr	r0, [pc, #236]	; (8003bac <oled_update+0x330>)
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	002b      	movs	r3, r5
 8003ac4:	0022      	movs	r2, r4
 8003ac6:	f006 fdfb 	bl	800a6c0 <u8g2_DrawLine>
			u8g2_DrawStr(&u8g2, 26, 64, pos);
 8003aca:	4b43      	ldr	r3, [pc, #268]	; (8003bd8 <oled_update+0x35c>)
 8003acc:	4837      	ldr	r0, [pc, #220]	; (8003bac <oled_update+0x330>)
 8003ace:	2240      	movs	r2, #64	; 0x40
 8003ad0:	211a      	movs	r1, #26
 8003ad2:	f006 fb2f 	bl	800a134 <u8g2_DrawStr>


			u8g2_DrawBitmap(&u8g2, 26, 28, 8/8, 8, Contour_Needle);
 8003ad6:	4835      	ldr	r0, [pc, #212]	; (8003bac <oled_update+0x330>)
 8003ad8:	4b49      	ldr	r3, [pc, #292]	; (8003c00 <oled_update+0x384>)
 8003ada:	9301      	str	r3, [sp, #4]
 8003adc:	2308      	movs	r3, #8
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	221c      	movs	r2, #28
 8003ae4:	211a      	movs	r1, #26
 8003ae6:	f005 fb0f 	bl	8009108 <u8g2_DrawBitmap>

			// draw needle and center circle Right Gauge
			u8g2_DrawLine(&u8g2, right.start_x, right.start_y, right.end_x, right.end_y);
 8003aea:	4b36      	ldr	r3, [pc, #216]	; (8003bc4 <oled_update+0x348>)
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	b299      	uxth	r1, r3
 8003af0:	4b34      	ldr	r3, [pc, #208]	; (8003bc4 <oled_update+0x348>)
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	4b33      	ldr	r3, [pc, #204]	; (8003bc4 <oled_update+0x348>)
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	b29c      	uxth	r4, r3
 8003afc:	4b31      	ldr	r3, [pc, #196]	; (8003bc4 <oled_update+0x348>)
 8003afe:	69db      	ldr	r3, [r3, #28]
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	482a      	ldr	r0, [pc, #168]	; (8003bac <oled_update+0x330>)
 8003b04:	9300      	str	r3, [sp, #0]
 8003b06:	0023      	movs	r3, r4
 8003b08:	f006 fdda 	bl	800a6c0 <u8g2_DrawLine>
			u8g2_DrawLine(&u8g2, right.start_x + needle_offset_x_right, right.start_y + needle_offset_y_right,
 8003b0c:	4b2d      	ldr	r3, [pc, #180]	; (8003bc4 <oled_update+0x348>)
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	4b36      	ldr	r3, [pc, #216]	; (8003bec <oled_update+0x370>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	18d3      	adds	r3, r2, r3
 8003b1a:	b299      	uxth	r1, r3
 8003b1c:	4b29      	ldr	r3, [pc, #164]	; (8003bc4 <oled_update+0x348>)
 8003b1e:	695b      	ldr	r3, [r3, #20]
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	4b33      	ldr	r3, [pc, #204]	; (8003bf0 <oled_update+0x374>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	18d3      	adds	r3, r2, r3
 8003b2a:	b29c      	uxth	r4, r3
								 right.end_x + needle_offset_x_right, right.end_y + needle_offset_y_right);
 8003b2c:	4b25      	ldr	r3, [pc, #148]	; (8003bc4 <oled_update+0x348>)
 8003b2e:	699b      	ldr	r3, [r3, #24]
			u8g2_DrawLine(&u8g2, right.start_x + needle_offset_x_right, right.start_y + needle_offset_y_right,
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	4b2e      	ldr	r3, [pc, #184]	; (8003bec <oled_update+0x370>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	18d3      	adds	r3, r2, r3
 8003b3a:	b29d      	uxth	r5, r3
								 right.end_x + needle_offset_x_right, right.end_y + needle_offset_y_right);
 8003b3c:	4b21      	ldr	r3, [pc, #132]	; (8003bc4 <oled_update+0x348>)
 8003b3e:	69db      	ldr	r3, [r3, #28]
			u8g2_DrawLine(&u8g2, right.start_x + needle_offset_x_right, right.start_y + needle_offset_y_right,
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	4b2b      	ldr	r3, [pc, #172]	; (8003bf0 <oled_update+0x374>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	18d3      	adds	r3, r2, r3
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	4817      	ldr	r0, [pc, #92]	; (8003bac <oled_update+0x330>)
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	002b      	movs	r3, r5
 8003b52:	0022      	movs	r2, r4
 8003b54:	f006 fdb4 	bl	800a6c0 <u8g2_DrawLine>
			u8g2_DrawStr(&u8g2, 26 + right_offset, 64, speed);
 8003b58:	4b2a      	ldr	r3, [pc, #168]	; (8003c04 <oled_update+0x388>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	331a      	adds	r3, #26
 8003b60:	b299      	uxth	r1, r3
 8003b62:	4b1f      	ldr	r3, [pc, #124]	; (8003be0 <oled_update+0x364>)
 8003b64:	4811      	ldr	r0, [pc, #68]	; (8003bac <oled_update+0x330>)
 8003b66:	2240      	movs	r2, #64	; 0x40
 8003b68:	f006 fae4 	bl	800a134 <u8g2_DrawStr>


			u8g2_DrawBitmap(&u8g2, 26 + right_offset, 28, 8/8, 8, Contour_Needle);
 8003b6c:	4b25      	ldr	r3, [pc, #148]	; (8003c04 <oled_update+0x388>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	331a      	adds	r3, #26
 8003b74:	b299      	uxth	r1, r3
 8003b76:	480d      	ldr	r0, [pc, #52]	; (8003bac <oled_update+0x330>)
 8003b78:	4b21      	ldr	r3, [pc, #132]	; (8003c00 <oled_update+0x384>)
 8003b7a:	9301      	str	r3, [sp, #4]
 8003b7c:	2308      	movs	r3, #8
 8003b7e:	9300      	str	r3, [sp, #0]
 8003b80:	2301      	movs	r3, #1
 8003b82:	221c      	movs	r2, #28
 8003b84:	f005 fac0 	bl	8009108 <u8g2_DrawBitmap>

		} while (u8g2_NextPage(&u8g2));
 8003b88:	4b08      	ldr	r3, [pc, #32]	; (8003bac <oled_update+0x330>)
 8003b8a:	0018      	movs	r0, r3
 8003b8c:	f005 fbe9 	bl	8009362 <u8g2_NextPage>
 8003b90:	1e03      	subs	r3, r0, #0
 8003b92:	d000      	beq.n	8003b96 <oled_update+0x31a>
 8003b94:	e727      	b.n	80039e6 <oled_update+0x16a>

		osDelay(250);
 8003b96:	20fa      	movs	r0, #250	; 0xfa
 8003b98:	f007 feae 	bl	800b8f8 <osDelay>
		left.angle = map(__HAL_TIM_GET_COMPARE(&htim3, TIM_CHANNEL_2), 99, 199, 45, 270+45);
 8003b9c:	e68b      	b.n	80038b6 <oled_update+0x3a>
 8003b9e:	46c0      	nop			; (mov r8, r8)
 8003ba0:	08003371 	.word	0x08003371
 8003ba4:	080033c9 	.word	0x080033c9
 8003ba8:	08013960 	.word	0x08013960
 8003bac:	20000440 	.word	0x20000440
 8003bb0:	08013614 	.word	0x08013614
 8003bb4:	20000314 	.word	0x20000314
 8003bb8:	20000040 	.word	0x20000040
 8003bbc:	2000003c 	.word	0x2000003c
 8003bc0:	2000041c 	.word	0x2000041c
 8003bc4:	20000064 	.word	0x20000064
 8003bc8:	20000000 	.word	0x20000000
 8003bcc:	08012cf4 	.word	0x08012cf4
 8003bd0:	200004f8 	.word	0x200004f8
 8003bd4:	08012cfc 	.word	0x08012cfc
 8003bd8:	20000500 	.word	0x20000500
 8003bdc:	08012d00 	.word	0x08012d00
 8003be0:	20000508 	.word	0x20000508
 8003be4:	20000514 	.word	0x20000514
 8003be8:	20000518 	.word	0x20000518
 8003bec:	2000051c 	.word	0x2000051c
 8003bf0:	20000520 	.word	0x20000520
 8003bf4:	080133a8 	.word	0x080133a8
 8003bf8:	080131e8 	.word	0x080131e8
 8003bfc:	080131a8 	.word	0x080131a8
 8003c00:	080131e0 	.word	0x080131e0
 8003c04:	20000088 	.word	0x20000088

08003c08 <adc_read>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_adc_read */
void adc_read(void *argument)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN adc_read */
	HAL_ADCEx_Calibration_Start(&hadc);
 8003c10:	4b09      	ldr	r3, [pc, #36]	; (8003c38 <adc_read+0x30>)
 8003c12:	0018      	movs	r0, r3
 8003c14:	f001 fb1c 	bl	8005250 <HAL_ADCEx_Calibration_Start>
	/* Infinite loop */
	for(;;)
	{
		osSemaphoreAcquire(Adc_SemHandle, osWaitForever);
 8003c18:	4b08      	ldr	r3, [pc, #32]	; (8003c3c <adc_read+0x34>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	4252      	negs	r2, r2
 8003c20:	0011      	movs	r1, r2
 8003c22:	0018      	movs	r0, r3
 8003c24:	f007 ff32 	bl	800ba8c <osSemaphoreAcquire>
		HAL_ADC_Start_IT(&hadc);
 8003c28:	4b03      	ldr	r3, [pc, #12]	; (8003c38 <adc_read+0x30>)
 8003c2a:	0018      	movs	r0, r3
 8003c2c:	f000 ff48 	bl	8004ac0 <HAL_ADC_Start_IT>
		osDelay(10);
 8003c30:	200a      	movs	r0, #10
 8003c32:	f007 fe61 	bl	800b8f8 <osDelay>
		osSemaphoreAcquire(Adc_SemHandle, osWaitForever);
 8003c36:	e7ef      	b.n	8003c18 <adc_read+0x10>
 8003c38:	20000288 	.word	0x20000288
 8003c3c:	20000400 	.word	0x20000400

08003c40 <servo_pos>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_servo_pos */
void servo_pos(void *argument)
{
 8003c40:	b590      	push	{r4, r7, lr}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af02      	add	r7, sp, #8
 8003c46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN servo_pos */
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8003c48:	4b0b      	ldr	r3, [pc, #44]	; (8003c78 <servo_pos+0x38>)
 8003c4a:	2104      	movs	r1, #4
 8003c4c:	0018      	movs	r0, r3
 8003c4e:	f003 f88f 	bl	8006d70 <HAL_TIM_PWM_Start>
	/* Infinite loop */
	for(;;)
	{
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, map(adc_value.adc_ch1, 0, 4096, 99, 199));
 8003c52:	4b0a      	ldr	r3, [pc, #40]	; (8003c7c <servo_pos+0x3c>)
 8003c54:	885b      	ldrh	r3, [r3, #2]
 8003c56:	0018      	movs	r0, r3
 8003c58:	4b07      	ldr	r3, [pc, #28]	; (8003c78 <servo_pos+0x38>)
 8003c5a:	681c      	ldr	r4, [r3, #0]
 8003c5c:	2380      	movs	r3, #128	; 0x80
 8003c5e:	015a      	lsls	r2, r3, #5
 8003c60:	23c7      	movs	r3, #199	; 0xc7
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	2363      	movs	r3, #99	; 0x63
 8003c66:	2100      	movs	r1, #0
 8003c68:	f7ff fc08 	bl	800347c <map>
 8003c6c:	0003      	movs	r3, r0
 8003c6e:	63a3      	str	r3, [r4, #56]	; 0x38
		osDelay(10);
 8003c70:	200a      	movs	r0, #10
 8003c72:	f007 fe41 	bl	800b8f8 <osDelay>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, map(adc_value.adc_ch1, 0, 4096, 99, 199));
 8003c76:	e7ec      	b.n	8003c52 <servo_pos+0x12>
 8003c78:	20000314 	.word	0x20000314
 8003c7c:	20000000 	.word	0x20000000

08003c80 <stepper_fx>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_stepper_fx */
void stepper_fx(void *argument)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN stepper_fx */
int ciclo = 0;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	617b      	str	r3, [r7, #20]

/* Infinite loop */
for(;;)
{
	switch(giro_stepper)
 8003c8c:	4b29      	ldr	r3, [pc, #164]	; (8003d34 <stepper_fx+0xb4>)
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d022      	beq.n	8003cda <stepper_fx+0x5a>
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d141      	bne.n	8003d1c <stepper_fx+0x9c>
	{
	case Horario:
	{
		for(int i = 0; i < 4; i++)
 8003c98:	2300      	movs	r3, #0
 8003c9a:	613b      	str	r3, [r7, #16]
 8003c9c:	e011      	b.n	8003cc2 <stepper_fx+0x42>
		{
			HAL_GPIO_WritePin(GPIOB, pines[i], matrix_half[ciclo][i]);		// Medios pasos, quitar _half para paso completo
 8003c9e:	4b26      	ldr	r3, [pc, #152]	; (8003d38 <stepper_fx+0xb8>)
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	0052      	lsls	r2, r2, #1
 8003ca4:	5ad1      	ldrh	r1, [r2, r3]
 8003ca6:	4a25      	ldr	r2, [pc, #148]	; (8003d3c <stepper_fx+0xbc>)
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	18d2      	adds	r2, r2, r3
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	18d3      	adds	r3, r2, r3
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	4822      	ldr	r0, [pc, #136]	; (8003d40 <stepper_fx+0xc0>)
 8003cb6:	001a      	movs	r2, r3
 8003cb8:	f001 fe0c 	bl	80058d4 <HAL_GPIO_WritePin>
		for(int i = 0; i < 4; i++)
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	613b      	str	r3, [r7, #16]
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	2b03      	cmp	r3, #3
 8003cc6:	ddea      	ble.n	8003c9e <stepper_fx+0x1e>
		}
		ciclo++;
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	3301      	adds	r3, #1
 8003ccc:	617b      	str	r3, [r7, #20]
		//			if(ciclo > 3) ciclo = 0;											// Pasos completos
		if(ciclo > 7) ciclo = 0;											// Medios pasos
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	2b07      	cmp	r3, #7
 8003cd2:	dd25      	ble.n	8003d20 <stepper_fx+0xa0>
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	617b      	str	r3, [r7, #20]
		break;
 8003cd8:	e022      	b.n	8003d20 <stepper_fx+0xa0>
	}
	case Antihorario:
	{
		for(int i = 0; i < 4; i++)
 8003cda:	2300      	movs	r3, #0
 8003cdc:	60fb      	str	r3, [r7, #12]
 8003cde:	e011      	b.n	8003d04 <stepper_fx+0x84>
		{
			HAL_GPIO_WritePin(GPIOB, pines[i], matrix_half[ciclo][i]);		// Medios pasos, quitar _half para paso completo
 8003ce0:	4b15      	ldr	r3, [pc, #84]	; (8003d38 <stepper_fx+0xb8>)
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	0052      	lsls	r2, r2, #1
 8003ce6:	5ad1      	ldrh	r1, [r2, r3]
 8003ce8:	4a14      	ldr	r2, [pc, #80]	; (8003d3c <stepper_fx+0xbc>)
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	18d2      	adds	r2, r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	18d3      	adds	r3, r2, r3
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	4812      	ldr	r0, [pc, #72]	; (8003d40 <stepper_fx+0xc0>)
 8003cf8:	001a      	movs	r2, r3
 8003cfa:	f001 fdeb 	bl	80058d4 <HAL_GPIO_WritePin>
		for(int i = 0; i < 4; i++)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	3301      	adds	r3, #1
 8003d02:	60fb      	str	r3, [r7, #12]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2b03      	cmp	r3, #3
 8003d08:	ddea      	ble.n	8003ce0 <stepper_fx+0x60>
		}
		ciclo--;
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	617b      	str	r3, [r7, #20]
		//			if(ciclo < 0) ciclo = 3;											// Pasos completos
		if(ciclo < 0) ciclo = 7;											// Medios pasos
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	da06      	bge.n	8003d24 <stepper_fx+0xa4>
 8003d16:	2307      	movs	r3, #7
 8003d18:	617b      	str	r3, [r7, #20]
		break;
 8003d1a:	e003      	b.n	8003d24 <stepper_fx+0xa4>
	}
	default:
	{
		break;
 8003d1c:	46c0      	nop			; (mov r8, r8)
 8003d1e:	e002      	b.n	8003d26 <stepper_fx+0xa6>
		break;
 8003d20:	46c0      	nop			; (mov r8, r8)
 8003d22:	e000      	b.n	8003d26 <stepper_fx+0xa6>
		break;
 8003d24:	46c0      	nop			; (mov r8, r8)
	}
	}
	osDelay(periodo);
 8003d26:	4b07      	ldr	r3, [pc, #28]	; (8003d44 <stepper_fx+0xc4>)
 8003d28:	881b      	ldrh	r3, [r3, #0]
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	f007 fde4 	bl	800b8f8 <osDelay>
	switch(giro_stepper)
 8003d30:	e7ac      	b.n	8003c8c <stepper_fx+0xc>
 8003d32:	46c0      	nop			; (mov r8, r8)
 8003d34:	20000414 	.word	0x20000414
 8003d38:	20000010 	.word	0x20000010
 8003d3c:	20000018 	.word	0x20000018
 8003d40:	48000400 	.word	0x48000400
 8003d44:	2000003c 	.word	0x2000003c

08003d48 <serial_fx>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_serial_fx */
void serial_fx(void *argument)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af02      	add	r7, sp, #8
 8003d4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN serial_fx */
	static uint16_t angulo = 0;
	static char msg[50];

	osThreadSuspend(OLEDHandle);
 8003d50:	4ba9      	ldr	r3, [pc, #676]	; (8003ff8 <serial_fx+0x2b0>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	0018      	movs	r0, r3
 8003d56:	f007 fd73 	bl	800b840 <osThreadSuspend>
	osThreadSuspend(LOCKHandle);
 8003d5a:	4ba8      	ldr	r3, [pc, #672]	; (8003ffc <serial_fx+0x2b4>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	0018      	movs	r0, r3
 8003d60:	f007 fd6e 	bl	800b840 <osThreadSuspend>
	u8g2_SetPowerSave(&u8g2, 1); // sleep display
 8003d64:	4ba6      	ldr	r3, [pc, #664]	; (8004000 <serial_fx+0x2b8>)
 8003d66:	2101      	movs	r1, #1
 8003d68:	0018      	movs	r0, r3
 8003d6a:	f007 fbcb 	bl	800b504 <u8x8_SetPowerSave>
	HAL_UARTEx_ReceiveToIdle_IT(&huart2, (uint8_t *)buf, 5);
 8003d6e:	49a5      	ldr	r1, [pc, #660]	; (8004004 <serial_fx+0x2bc>)
 8003d70:	4ba5      	ldr	r3, [pc, #660]	; (8004008 <serial_fx+0x2c0>)
 8003d72:	2205      	movs	r2, #5
 8003d74:	0018      	movs	r0, r3
 8003d76:	f005 f8bf 	bl	8008ef8 <HAL_UARTEx_ReceiveToIdle_IT>
	/* Infinite loop */
	for(;;)
	{
		osSemaphoreAcquire(Rx_SemHandle, osWaitForever);
 8003d7a:	4ba4      	ldr	r3, [pc, #656]	; (800400c <serial_fx+0x2c4>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	4252      	negs	r2, r2
 8003d82:	0011      	movs	r1, r2
 8003d84:	0018      	movs	r0, r3
 8003d86:	f007 fe81 	bl	800ba8c <osSemaphoreAcquire>
		switch(buf[0])
 8003d8a:	4b9e      	ldr	r3, [pc, #632]	; (8004004 <serial_fx+0x2bc>)
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	3b41      	subs	r3, #65	; 0x41
 8003d90:	2b17      	cmp	r3, #23
 8003d92:	d900      	bls.n	8003d96 <serial_fx+0x4e>
 8003d94:	e127      	b.n	8003fe6 <serial_fx+0x29e>
 8003d96:	009a      	lsls	r2, r3, #2
 8003d98:	4b9d      	ldr	r3, [pc, #628]	; (8004010 <serial_fx+0x2c8>)
 8003d9a:	18d3      	adds	r3, r2, r3
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	469f      	mov	pc, r3
		{
		case 'P':
		{
			send_uart("'P': Servo controlado por potenciometro...\r\n\n");
 8003da0:	4b9c      	ldr	r3, [pc, #624]	; (8004014 <serial_fx+0x2cc>)
 8003da2:	0018      	movs	r0, r3
 8003da4:	f7ff fb88 	bl	80034b8 <send_uart>
			osThreadResume(SERVOHandle);
 8003da8:	4b9b      	ldr	r3, [pc, #620]	; (8004018 <serial_fx+0x2d0>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	0018      	movs	r0, r3
 8003dae:	f007 fd75 	bl	800b89c <osThreadResume>
			osThreadSuspend(LOCKHandle);
 8003db2:	4b92      	ldr	r3, [pc, #584]	; (8003ffc <serial_fx+0x2b4>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	0018      	movs	r0, r3
 8003db8:	f007 fd42 	bl	800b840 <osThreadSuspend>
			break;
 8003dbc:	e117      	b.n	8003fee <serial_fx+0x2a6>
		}
		case 'S':
		{
			osThreadSuspend(SERVOHandle);
 8003dbe:	4b96      	ldr	r3, [pc, #600]	; (8004018 <serial_fx+0x2d0>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	0018      	movs	r0, r3
 8003dc4:	f007 fd3c 	bl	800b840 <osThreadSuspend>
			osThreadSuspend(LOCKHandle);
 8003dc8:	4b8c      	ldr	r3, [pc, #560]	; (8003ffc <serial_fx+0x2b4>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	0018      	movs	r0, r3
 8003dce:	f007 fd37 	bl	800b840 <osThreadSuspend>

			send_uart("'S': Introduce el angulo deseado (0-90):\r\n\n");
 8003dd2:	4b92      	ldr	r3, [pc, #584]	; (800401c <serial_fx+0x2d4>)
 8003dd4:	0018      	movs	r0, r3
 8003dd6:	f7ff fb6f 	bl	80034b8 <send_uart>
			osSemaphoreAcquire(Rx_SemHandle, osWaitForever);
 8003dda:	4b8c      	ldr	r3, [pc, #560]	; (800400c <serial_fx+0x2c4>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2201      	movs	r2, #1
 8003de0:	4252      	negs	r2, r2
 8003de2:	0011      	movs	r1, r2
 8003de4:	0018      	movs	r0, r3
 8003de6:	f007 fe51 	bl	800ba8c <osSemaphoreAcquire>
			angulo = atol(buf);
 8003dea:	4b86      	ldr	r3, [pc, #536]	; (8004004 <serial_fx+0x2bc>)
 8003dec:	0018      	movs	r0, r3
 8003dee:	f00a fe1d 	bl	800ea2c <atol>
 8003df2:	0003      	movs	r3, r0
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	4b8a      	ldr	r3, [pc, #552]	; (8004020 <serial_fx+0x2d8>)
 8003df8:	801a      	strh	r2, [r3, #0]
			sprintf(msg,"Angulo recibido: %d\r\n\n", angulo);
 8003dfa:	4b89      	ldr	r3, [pc, #548]	; (8004020 <serial_fx+0x2d8>)
 8003dfc:	881b      	ldrh	r3, [r3, #0]
 8003dfe:	001a      	movs	r2, r3
 8003e00:	4988      	ldr	r1, [pc, #544]	; (8004024 <serial_fx+0x2dc>)
 8003e02:	4b89      	ldr	r3, [pc, #548]	; (8004028 <serial_fx+0x2e0>)
 8003e04:	0018      	movs	r0, r3
 8003e06:	f00b fce3 	bl	800f7d0 <siprintf>
			send_uart(msg);
 8003e0a:	4b87      	ldr	r3, [pc, #540]	; (8004028 <serial_fx+0x2e0>)
 8003e0c:	0018      	movs	r0, r3
 8003e0e:	f7ff fb53 	bl	80034b8 <send_uart>
			angulo = map(angulo, 0, 90, 99, 199);
 8003e12:	4b83      	ldr	r3, [pc, #524]	; (8004020 <serial_fx+0x2d8>)
 8003e14:	881b      	ldrh	r3, [r3, #0]
 8003e16:	0018      	movs	r0, r3
 8003e18:	23c7      	movs	r3, #199	; 0xc7
 8003e1a:	9300      	str	r3, [sp, #0]
 8003e1c:	2363      	movs	r3, #99	; 0x63
 8003e1e:	225a      	movs	r2, #90	; 0x5a
 8003e20:	2100      	movs	r1, #0
 8003e22:	f7ff fb2b 	bl	800347c <map>
 8003e26:	0003      	movs	r3, r0
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	4b7d      	ldr	r3, [pc, #500]	; (8004020 <serial_fx+0x2d8>)
 8003e2c:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, angulo);
 8003e2e:	4b7c      	ldr	r3, [pc, #496]	; (8004020 <serial_fx+0x2d8>)
 8003e30:	881a      	ldrh	r2, [r3, #0]
 8003e32:	4b7e      	ldr	r3, [pc, #504]	; (800402c <serial_fx+0x2e4>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8003e38:	e0d9      	b.n	8003fee <serial_fx+0x2a6>
		}
		case 'A':
		{
			osThreadSuspend(SERVOHandle);
 8003e3a:	4b77      	ldr	r3, [pc, #476]	; (8004018 <serial_fx+0x2d0>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	0018      	movs	r0, r3
 8003e40:	f007 fcfe 	bl	800b840 <osThreadSuspend>
			osThreadResume(LOCKHandle);
 8003e44:	4b6d      	ldr	r3, [pc, #436]	; (8003ffc <serial_fx+0x2b4>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	0018      	movs	r0, r3
 8003e4a:	f007 fd27 	bl	800b89c <osThreadResume>

			send_uart("'A': Introduce la espera deseada: (0-255):\r\n\n");
 8003e4e:	4b78      	ldr	r3, [pc, #480]	; (8004030 <serial_fx+0x2e8>)
 8003e50:	0018      	movs	r0, r3
 8003e52:	f7ff fb31 	bl	80034b8 <send_uart>
			osSemaphoreAcquire(Rx_SemHandle, osWaitForever);
 8003e56:	4b6d      	ldr	r3, [pc, #436]	; (800400c <serial_fx+0x2c4>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	4252      	negs	r2, r2
 8003e5e:	0011      	movs	r1, r2
 8003e60:	0018      	movs	r0, r3
 8003e62:	f007 fe13 	bl	800ba8c <osSemaphoreAcquire>
			segvel_value.espera = atol(buf);
 8003e66:	4b67      	ldr	r3, [pc, #412]	; (8004004 <serial_fx+0x2bc>)
 8003e68:	0018      	movs	r0, r3
 8003e6a:	f00a fddf 	bl	800ea2c <atol>
 8003e6e:	0003      	movs	r3, r0
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	4b70      	ldr	r3, [pc, #448]	; (8004034 <serial_fx+0x2ec>)
 8003e74:	801a      	strh	r2, [r3, #0]
			sprintf(msg,"Espera recibida: %d segundos\r\n\n", segvel_value.espera);
 8003e76:	4b6f      	ldr	r3, [pc, #444]	; (8004034 <serial_fx+0x2ec>)
 8003e78:	881b      	ldrh	r3, [r3, #0]
 8003e7a:	001a      	movs	r2, r3
 8003e7c:	496e      	ldr	r1, [pc, #440]	; (8004038 <serial_fx+0x2f0>)
 8003e7e:	4b6a      	ldr	r3, [pc, #424]	; (8004028 <serial_fx+0x2e0>)
 8003e80:	0018      	movs	r0, r3
 8003e82:	f00b fca5 	bl	800f7d0 <siprintf>
			send_uart(msg);
 8003e86:	4b68      	ldr	r3, [pc, #416]	; (8004028 <serial_fx+0x2e0>)
 8003e88:	0018      	movs	r0, r3
 8003e8a:	f7ff fb15 	bl	80034b8 <send_uart>
			send_uart("'A': Introduce la velocidad deseada: (0-255):\r\n\n");
 8003e8e:	4b6b      	ldr	r3, [pc, #428]	; (800403c <serial_fx+0x2f4>)
 8003e90:	0018      	movs	r0, r3
 8003e92:	f7ff fb11 	bl	80034b8 <send_uart>
			osSemaphoreAcquire(Rx_SemHandle, osWaitForever);
 8003e96:	4b5d      	ldr	r3, [pc, #372]	; (800400c <serial_fx+0x2c4>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	4252      	negs	r2, r2
 8003e9e:	0011      	movs	r1, r2
 8003ea0:	0018      	movs	r0, r3
 8003ea2:	f007 fdf3 	bl	800ba8c <osSemaphoreAcquire>
			segvel_value.velocidad = atol(buf);
 8003ea6:	4b57      	ldr	r3, [pc, #348]	; (8004004 <serial_fx+0x2bc>)
 8003ea8:	0018      	movs	r0, r3
 8003eaa:	f00a fdbf 	bl	800ea2c <atol>
 8003eae:	0003      	movs	r3, r0
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	4b60      	ldr	r3, [pc, #384]	; (8004034 <serial_fx+0x2ec>)
 8003eb4:	805a      	strh	r2, [r3, #2]
			if(segvel_value.velocidad == 0) segvel_value.velocidad++;
 8003eb6:	4b5f      	ldr	r3, [pc, #380]	; (8004034 <serial_fx+0x2ec>)
 8003eb8:	885b      	ldrh	r3, [r3, #2]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d105      	bne.n	8003eca <serial_fx+0x182>
 8003ebe:	4b5d      	ldr	r3, [pc, #372]	; (8004034 <serial_fx+0x2ec>)
 8003ec0:	885b      	ldrh	r3, [r3, #2]
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	4b5b      	ldr	r3, [pc, #364]	; (8004034 <serial_fx+0x2ec>)
 8003ec8:	805a      	strh	r2, [r3, #2]
			sprintf(msg,"Velocidad recibida: %d grados/segundo\r\n\n", segvel_value.velocidad);
 8003eca:	4b5a      	ldr	r3, [pc, #360]	; (8004034 <serial_fx+0x2ec>)
 8003ecc:	885b      	ldrh	r3, [r3, #2]
 8003ece:	001a      	movs	r2, r3
 8003ed0:	495b      	ldr	r1, [pc, #364]	; (8004040 <serial_fx+0x2f8>)
 8003ed2:	4b55      	ldr	r3, [pc, #340]	; (8004028 <serial_fx+0x2e0>)
 8003ed4:	0018      	movs	r0, r3
 8003ed6:	f00b fc7b 	bl	800f7d0 <siprintf>
			send_uart(msg);
 8003eda:	4b53      	ldr	r3, [pc, #332]	; (8004028 <serial_fx+0x2e0>)
 8003edc:	0018      	movs	r0, r3
 8003ede:	f7ff faeb 	bl	80034b8 <send_uart>
			segvel_value.espera = segvel_value.espera * 1000;
 8003ee2:	4b54      	ldr	r3, [pc, #336]	; (8004034 <serial_fx+0x2ec>)
 8003ee4:	881b      	ldrh	r3, [r3, #0]
 8003ee6:	22fa      	movs	r2, #250	; 0xfa
 8003ee8:	0092      	lsls	r2, r2, #2
 8003eea:	4353      	muls	r3, r2
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	4b51      	ldr	r3, [pc, #324]	; (8004034 <serial_fx+0x2ec>)
 8003ef0:	801a      	strh	r2, [r3, #0]
			segvel_value.velocidad = 1000/segvel_value.velocidad;
 8003ef2:	4b50      	ldr	r3, [pc, #320]	; (8004034 <serial_fx+0x2ec>)
 8003ef4:	885b      	ldrh	r3, [r3, #2]
 8003ef6:	0019      	movs	r1, r3
 8003ef8:	23fa      	movs	r3, #250	; 0xfa
 8003efa:	0098      	lsls	r0, r3, #2
 8003efc:	f7fc f9aa 	bl	8000254 <__divsi3>
 8003f00:	0003      	movs	r3, r0
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	4b4b      	ldr	r3, [pc, #300]	; (8004034 <serial_fx+0x2ec>)
 8003f06:	805a      	strh	r2, [r3, #2]
			osMessageQueuePut(lock_queueHandle, &segvel_value, 1, 0);
 8003f08:	4b4e      	ldr	r3, [pc, #312]	; (8004044 <serial_fx+0x2fc>)
 8003f0a:	6818      	ldr	r0, [r3, #0]
 8003f0c:	4949      	ldr	r1, [pc, #292]	; (8004034 <serial_fx+0x2ec>)
 8003f0e:	2300      	movs	r3, #0
 8003f10:	2201      	movs	r2, #1
 8003f12:	f007 feed 	bl	800bcf0 <osMessageQueuePut>
			break;
 8003f16:	e06a      	b.n	8003fee <serial_fx+0x2a6>
		}
		case 'D':
		{
			send_uart("'D': Sentido Horario...\r\n\n");
 8003f18:	4b4b      	ldr	r3, [pc, #300]	; (8004048 <serial_fx+0x300>)
 8003f1a:	0018      	movs	r0, r3
 8003f1c:	f7ff facc 	bl	80034b8 <send_uart>
			giro_stepper = Horario;
 8003f20:	4b4a      	ldr	r3, [pc, #296]	; (800404c <serial_fx+0x304>)
 8003f22:	2201      	movs	r2, #1
 8003f24:	701a      	strb	r2, [r3, #0]
			break;
 8003f26:	e062      	b.n	8003fee <serial_fx+0x2a6>
		}
		case 'I':
		{
			send_uart("'I': Sentido Antihorario...\r\n\n");
 8003f28:	4b49      	ldr	r3, [pc, #292]	; (8004050 <serial_fx+0x308>)
 8003f2a:	0018      	movs	r0, r3
 8003f2c:	f7ff fac4 	bl	80034b8 <send_uart>
			giro_stepper = Antihorario;
 8003f30:	4b46      	ldr	r3, [pc, #280]	; (800404c <serial_fx+0x304>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	701a      	strb	r2, [r3, #0]
			break;
 8003f36:	e05a      	b.n	8003fee <serial_fx+0x2a6>
		}
		case 'M':
		{
			send_uart("'M': Introduzca el PERIODO (1-9):\r\n\n");
 8003f38:	4b46      	ldr	r3, [pc, #280]	; (8004054 <serial_fx+0x30c>)
 8003f3a:	0018      	movs	r0, r3
 8003f3c:	f7ff fabc 	bl	80034b8 <send_uart>
			osSemaphoreAcquire(Rx_SemHandle, osWaitForever);
 8003f40:	4b32      	ldr	r3, [pc, #200]	; (800400c <serial_fx+0x2c4>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2201      	movs	r2, #1
 8003f46:	4252      	negs	r2, r2
 8003f48:	0011      	movs	r1, r2
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	f007 fd9e 	bl	800ba8c <osSemaphoreAcquire>
			if(atol(buf) <= 1)
 8003f50:	4b2c      	ldr	r3, [pc, #176]	; (8004004 <serial_fx+0x2bc>)
 8003f52:	0018      	movs	r0, r3
 8003f54:	f00a fd6a 	bl	800ea2c <atol>
 8003f58:	0003      	movs	r3, r0
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	dc07      	bgt.n	8003f6e <serial_fx+0x226>
			{
				periodo = 2;
 8003f5e:	4b3e      	ldr	r3, [pc, #248]	; (8004058 <serial_fx+0x310>)
 8003f60:	2202      	movs	r2, #2
 8003f62:	801a      	strh	r2, [r3, #0]
				send_uart("'M': Recibido 1...\r\n\n");
 8003f64:	4b3d      	ldr	r3, [pc, #244]	; (800405c <serial_fx+0x314>)
 8003f66:	0018      	movs	r0, r3
 8003f68:	f7ff faa6 	bl	80034b8 <send_uart>
				break;
 8003f6c:	e03f      	b.n	8003fee <serial_fx+0x2a6>
			}
			if(atol(buf) >= 9)
 8003f6e:	4b25      	ldr	r3, [pc, #148]	; (8004004 <serial_fx+0x2bc>)
 8003f70:	0018      	movs	r0, r3
 8003f72:	f00a fd5b 	bl	800ea2c <atol>
 8003f76:	0003      	movs	r3, r0
 8003f78:	2b08      	cmp	r3, #8
 8003f7a:	dd07      	ble.n	8003f8c <serial_fx+0x244>
			{
				periodo = 10;
 8003f7c:	4b36      	ldr	r3, [pc, #216]	; (8004058 <serial_fx+0x310>)
 8003f7e:	220a      	movs	r2, #10
 8003f80:	801a      	strh	r2, [r3, #0]
				send_uart("'M': Recibido 9...\r\n\n");
 8003f82:	4b37      	ldr	r3, [pc, #220]	; (8004060 <serial_fx+0x318>)
 8003f84:	0018      	movs	r0, r3
 8003f86:	f7ff fa97 	bl	80034b8 <send_uart>
				break;
 8003f8a:	e030      	b.n	8003fee <serial_fx+0x2a6>
			}
			periodo = atol(buf) + 1;
 8003f8c:	4b1d      	ldr	r3, [pc, #116]	; (8004004 <serial_fx+0x2bc>)
 8003f8e:	0018      	movs	r0, r3
 8003f90:	f00a fd4c 	bl	800ea2c <atol>
 8003f94:	0003      	movs	r3, r0
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	3301      	adds	r3, #1
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	4b2e      	ldr	r3, [pc, #184]	; (8004058 <serial_fx+0x310>)
 8003f9e:	801a      	strh	r2, [r3, #0]
			sprintf(msg, "'M': Recibido %hu...\r\n\n", periodo - 1);
 8003fa0:	4b2d      	ldr	r3, [pc, #180]	; (8004058 <serial_fx+0x310>)
 8003fa2:	881b      	ldrh	r3, [r3, #0]
 8003fa4:	1e5a      	subs	r2, r3, #1
 8003fa6:	492f      	ldr	r1, [pc, #188]	; (8004064 <serial_fx+0x31c>)
 8003fa8:	4b1f      	ldr	r3, [pc, #124]	; (8004028 <serial_fx+0x2e0>)
 8003faa:	0018      	movs	r0, r3
 8003fac:	f00b fc10 	bl	800f7d0 <siprintf>
			send_uart(msg);
 8003fb0:	4b1d      	ldr	r3, [pc, #116]	; (8004028 <serial_fx+0x2e0>)
 8003fb2:	0018      	movs	r0, r3
 8003fb4:	f7ff fa80 	bl	80034b8 <send_uart>
			break;
 8003fb8:	e019      	b.n	8003fee <serial_fx+0x2a6>
		}
		case 'X':
			osThreadResume(OLEDHandle);
 8003fba:	4b0f      	ldr	r3, [pc, #60]	; (8003ff8 <serial_fx+0x2b0>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	0018      	movs	r0, r3
 8003fc0:	f007 fc6c 	bl	800b89c <osThreadResume>
			u8g2_SetPowerSave(&u8g2, 0); // wake up display
 8003fc4:	4b0e      	ldr	r3, [pc, #56]	; (8004000 <serial_fx+0x2b8>)
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	0018      	movs	r0, r3
 8003fca:	f007 fa9b 	bl	800b504 <u8x8_SetPowerSave>
			break;
 8003fce:	e00e      	b.n	8003fee <serial_fx+0x2a6>
		case 'C':
			osThreadSuspend(OLEDHandle);
 8003fd0:	4b09      	ldr	r3, [pc, #36]	; (8003ff8 <serial_fx+0x2b0>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	f007 fc33 	bl	800b840 <osThreadSuspend>
			u8g2_SetPowerSave(&u8g2, 1); // sleep display
 8003fda:	4b09      	ldr	r3, [pc, #36]	; (8004000 <serial_fx+0x2b8>)
 8003fdc:	2101      	movs	r1, #1
 8003fde:	0018      	movs	r0, r3
 8003fe0:	f007 fa90 	bl	800b504 <u8x8_SetPowerSave>
			break;
 8003fe4:	e003      	b.n	8003fee <serial_fx+0x2a6>
		default:
		{
			send_uart("ERROR!! Comando no valido\r\n\n");
 8003fe6:	4b20      	ldr	r3, [pc, #128]	; (8004068 <serial_fx+0x320>)
 8003fe8:	0018      	movs	r0, r3
 8003fea:	f7ff fa65 	bl	80034b8 <send_uart>
		}
		}
		osDelay(1);
 8003fee:	2001      	movs	r0, #1
 8003ff0:	f007 fc82 	bl	800b8f8 <osDelay>
		osSemaphoreAcquire(Rx_SemHandle, osWaitForever);
 8003ff4:	e6c1      	b.n	8003d7a <serial_fx+0x32>
 8003ff6:	46c0      	nop			; (mov r8, r8)
 8003ff8:	200003e4 	.word	0x200003e4
 8003ffc:	200003f8 	.word	0x200003f8
 8004000:	20000440 	.word	0x20000440
 8004004:	20000408 	.word	0x20000408
 8004008:	2000035c 	.word	0x2000035c
 800400c:	20000404 	.word	0x20000404
 8004010:	0801359c 	.word	0x0801359c
 8004014:	08012d0c 	.word	0x08012d0c
 8004018:	200003ec 	.word	0x200003ec
 800401c:	08012d3c 	.word	0x08012d3c
 8004020:	20000524 	.word	0x20000524
 8004024:	08012d68 	.word	0x08012d68
 8004028:	20000528 	.word	0x20000528
 800402c:	20000314 	.word	0x20000314
 8004030:	08012d80 	.word	0x08012d80
 8004034:	20000410 	.word	0x20000410
 8004038:	08012db0 	.word	0x08012db0
 800403c:	08012dd0 	.word	0x08012dd0
 8004040:	08012e04 	.word	0x08012e04
 8004044:	200003fc 	.word	0x200003fc
 8004048:	08012e30 	.word	0x08012e30
 800404c:	20000414 	.word	0x20000414
 8004050:	08012e4c 	.word	0x08012e4c
 8004054:	08012e6c 	.word	0x08012e6c
 8004058:	2000003c 	.word	0x2000003c
 800405c:	08012e94 	.word	0x08012e94
 8004060:	08012eac 	.word	0x08012eac
 8004064:	08012ec4 	.word	0x08012ec4
 8004068:	08012edc 	.word	0x08012edc

0800406c <servo_lock>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_servo_lock */
void servo_lock(void *argument)
{
 800406c:	b590      	push	{r4, r7, lr}
 800406e:	b089      	sub	sp, #36	; 0x24
 8004070:	af02      	add	r7, sp, #8
 8004072:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN servo_lock */
	enum maquina {
		Reposo, Abriendo, Espera, Cerrando
	} estados;
	estados = Reposo;
 8004074:	2317      	movs	r3, #23
 8004076:	18fb      	adds	r3, r7, r3
 8004078:	2200      	movs	r2, #0
 800407a:	701a      	strb	r2, [r3, #0]
	/* Infinite loop */
	for(;;)
	{
		switch(estados)
 800407c:	2317      	movs	r3, #23
 800407e:	18fb      	adds	r3, r7, r3
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	2b03      	cmp	r3, #3
 8004084:	d043      	beq.n	800410e <servo_lock+0xa2>
 8004086:	dd00      	ble.n	800408a <servo_lock+0x1e>
 8004088:	e06c      	b.n	8004164 <servo_lock+0xf8>
 800408a:	2b02      	cmp	r3, #2
 800408c:	d035      	beq.n	80040fa <servo_lock+0x8e>
 800408e:	dc69      	bgt.n	8004164 <servo_lock+0xf8>
 8004090:	2b00      	cmp	r3, #0
 8004092:	d002      	beq.n	800409a <servo_lock+0x2e>
 8004094:	2b01      	cmp	r3, #1
 8004096:	d011      	beq.n	80040bc <servo_lock+0x50>
			}
			estados = Reposo;
			if(osMessageQueueGetCount(lock_queueHandle) == 0) osThreadSuspend(LOCKHandle);
			break;
		default:
			break;
 8004098:	e064      	b.n	8004164 <servo_lock+0xf8>
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 99);
 800409a:	4b36      	ldr	r3, [pc, #216]	; (8004174 <servo_lock+0x108>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2263      	movs	r2, #99	; 0x63
 80040a0:	639a      	str	r2, [r3, #56]	; 0x38
			osMessageQueueGet(lock_queueHandle, &segvel_value, (uint8_t *)1, osWaitForever);
 80040a2:	4b35      	ldr	r3, [pc, #212]	; (8004178 <servo_lock+0x10c>)
 80040a4:	6818      	ldr	r0, [r3, #0]
 80040a6:	2301      	movs	r3, #1
 80040a8:	425b      	negs	r3, r3
 80040aa:	4934      	ldr	r1, [pc, #208]	; (800417c <servo_lock+0x110>)
 80040ac:	2201      	movs	r2, #1
 80040ae:	f007 fe89 	bl	800bdc4 <osMessageQueueGet>
			estados = Abriendo;
 80040b2:	2317      	movs	r3, #23
 80040b4:	18fb      	adds	r3, r7, r3
 80040b6:	2201      	movs	r2, #1
 80040b8:	701a      	strb	r2, [r3, #0]
			break;
 80040ba:	e056      	b.n	800416a <servo_lock+0xfe>
			for(int i = 0; i<91; i++)
 80040bc:	2300      	movs	r3, #0
 80040be:	613b      	str	r3, [r7, #16]
 80040c0:	e013      	b.n	80040ea <servo_lock+0x7e>
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, map(i, 0, 90, 99, 199));
 80040c2:	6938      	ldr	r0, [r7, #16]
 80040c4:	4b2b      	ldr	r3, [pc, #172]	; (8004174 <servo_lock+0x108>)
 80040c6:	681c      	ldr	r4, [r3, #0]
 80040c8:	23c7      	movs	r3, #199	; 0xc7
 80040ca:	9300      	str	r3, [sp, #0]
 80040cc:	2363      	movs	r3, #99	; 0x63
 80040ce:	225a      	movs	r2, #90	; 0x5a
 80040d0:	2100      	movs	r1, #0
 80040d2:	f7ff f9d3 	bl	800347c <map>
 80040d6:	0003      	movs	r3, r0
 80040d8:	63a3      	str	r3, [r4, #56]	; 0x38
				osDelay(segvel_value.velocidad);
 80040da:	4b28      	ldr	r3, [pc, #160]	; (800417c <servo_lock+0x110>)
 80040dc:	885b      	ldrh	r3, [r3, #2]
 80040de:	0018      	movs	r0, r3
 80040e0:	f007 fc0a 	bl	800b8f8 <osDelay>
			for(int i = 0; i<91; i++)
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	3301      	adds	r3, #1
 80040e8:	613b      	str	r3, [r7, #16]
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	2b5a      	cmp	r3, #90	; 0x5a
 80040ee:	dde8      	ble.n	80040c2 <servo_lock+0x56>
			estados = Espera;
 80040f0:	2317      	movs	r3, #23
 80040f2:	18fb      	adds	r3, r7, r3
 80040f4:	2202      	movs	r2, #2
 80040f6:	701a      	strb	r2, [r3, #0]
			break;
 80040f8:	e037      	b.n	800416a <servo_lock+0xfe>
			osDelay(segvel_value.espera);
 80040fa:	4b20      	ldr	r3, [pc, #128]	; (800417c <servo_lock+0x110>)
 80040fc:	881b      	ldrh	r3, [r3, #0]
 80040fe:	0018      	movs	r0, r3
 8004100:	f007 fbfa 	bl	800b8f8 <osDelay>
			estados = Cerrando;
 8004104:	2317      	movs	r3, #23
 8004106:	18fb      	adds	r3, r7, r3
 8004108:	2203      	movs	r2, #3
 800410a:	701a      	strb	r2, [r3, #0]
			break;
 800410c:	e02d      	b.n	800416a <servo_lock+0xfe>
			for(int i = 90; i>=0; i--)
 800410e:	235a      	movs	r3, #90	; 0x5a
 8004110:	60fb      	str	r3, [r7, #12]
 8004112:	e013      	b.n	800413c <servo_lock+0xd0>
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, map(i, 0, 90, 99, 199));
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	4b17      	ldr	r3, [pc, #92]	; (8004174 <servo_lock+0x108>)
 8004118:	681c      	ldr	r4, [r3, #0]
 800411a:	23c7      	movs	r3, #199	; 0xc7
 800411c:	9300      	str	r3, [sp, #0]
 800411e:	2363      	movs	r3, #99	; 0x63
 8004120:	225a      	movs	r2, #90	; 0x5a
 8004122:	2100      	movs	r1, #0
 8004124:	f7ff f9aa 	bl	800347c <map>
 8004128:	0003      	movs	r3, r0
 800412a:	63a3      	str	r3, [r4, #56]	; 0x38
				osDelay(segvel_value.velocidad);
 800412c:	4b13      	ldr	r3, [pc, #76]	; (800417c <servo_lock+0x110>)
 800412e:	885b      	ldrh	r3, [r3, #2]
 8004130:	0018      	movs	r0, r3
 8004132:	f007 fbe1 	bl	800b8f8 <osDelay>
			for(int i = 90; i>=0; i--)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	3b01      	subs	r3, #1
 800413a:	60fb      	str	r3, [r7, #12]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2b00      	cmp	r3, #0
 8004140:	dae8      	bge.n	8004114 <servo_lock+0xa8>
			estados = Reposo;
 8004142:	2317      	movs	r3, #23
 8004144:	18fb      	adds	r3, r7, r3
 8004146:	2200      	movs	r2, #0
 8004148:	701a      	strb	r2, [r3, #0]
			if(osMessageQueueGetCount(lock_queueHandle) == 0) osThreadSuspend(LOCKHandle);
 800414a:	4b0b      	ldr	r3, [pc, #44]	; (8004178 <servo_lock+0x10c>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	0018      	movs	r0, r3
 8004150:	f007 fea0 	bl	800be94 <osMessageQueueGetCount>
 8004154:	1e03      	subs	r3, r0, #0
 8004156:	d107      	bne.n	8004168 <servo_lock+0xfc>
 8004158:	4b09      	ldr	r3, [pc, #36]	; (8004180 <servo_lock+0x114>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	0018      	movs	r0, r3
 800415e:	f007 fb6f 	bl	800b840 <osThreadSuspend>
			break;
 8004162:	e001      	b.n	8004168 <servo_lock+0xfc>
			break;
 8004164:	46c0      	nop			; (mov r8, r8)
 8004166:	e000      	b.n	800416a <servo_lock+0xfe>
			break;
 8004168:	46c0      	nop			; (mov r8, r8)

		}
		osDelay(1);
 800416a:	2001      	movs	r0, #1
 800416c:	f007 fbc4 	bl	800b8f8 <osDelay>
		switch(estados)
 8004170:	e784      	b.n	800407c <servo_lock+0x10>
 8004172:	46c0      	nop			; (mov r8, r8)
 8004174:	20000314 	.word	0x20000314
 8004178:	200003fc 	.word	0x200003fc
 800417c:	20000410 	.word	0x20000410
 8004180:	200003f8 	.word	0x200003f8

08004184 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a04      	ldr	r2, [pc, #16]	; (80041a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d101      	bne.n	800419a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004196:	f000 fb37 	bl	8004808 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800419a:	46c0      	nop			; (mov r8, r8)
 800419c:	46bd      	mov	sp, r7
 800419e:	b002      	add	sp, #8
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	46c0      	nop			; (mov r8, r8)
 80041a4:	40012c00 	.word	0x40012c00

080041a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80041ac:	b672      	cpsid	i
}
 80041ae:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80041b0:	e7fe      	b.n	80041b0 <Error_Handler+0x8>
	...

080041b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041ba:	4b12      	ldr	r3, [pc, #72]	; (8004204 <HAL_MspInit+0x50>)
 80041bc:	699a      	ldr	r2, [r3, #24]
 80041be:	4b11      	ldr	r3, [pc, #68]	; (8004204 <HAL_MspInit+0x50>)
 80041c0:	2101      	movs	r1, #1
 80041c2:	430a      	orrs	r2, r1
 80041c4:	619a      	str	r2, [r3, #24]
 80041c6:	4b0f      	ldr	r3, [pc, #60]	; (8004204 <HAL_MspInit+0x50>)
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	2201      	movs	r2, #1
 80041cc:	4013      	ands	r3, r2
 80041ce:	607b      	str	r3, [r7, #4]
 80041d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80041d2:	4b0c      	ldr	r3, [pc, #48]	; (8004204 <HAL_MspInit+0x50>)
 80041d4:	69da      	ldr	r2, [r3, #28]
 80041d6:	4b0b      	ldr	r3, [pc, #44]	; (8004204 <HAL_MspInit+0x50>)
 80041d8:	2180      	movs	r1, #128	; 0x80
 80041da:	0549      	lsls	r1, r1, #21
 80041dc:	430a      	orrs	r2, r1
 80041de:	61da      	str	r2, [r3, #28]
 80041e0:	4b08      	ldr	r3, [pc, #32]	; (8004204 <HAL_MspInit+0x50>)
 80041e2:	69da      	ldr	r2, [r3, #28]
 80041e4:	2380      	movs	r3, #128	; 0x80
 80041e6:	055b      	lsls	r3, r3, #21
 80041e8:	4013      	ands	r3, r2
 80041ea:	603b      	str	r3, [r7, #0]
 80041ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80041ee:	2302      	movs	r3, #2
 80041f0:	425b      	negs	r3, r3
 80041f2:	2200      	movs	r2, #0
 80041f4:	2103      	movs	r1, #3
 80041f6:	0018      	movs	r0, r3
 80041f8:	f001 f95a 	bl	80054b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041fc:	46c0      	nop			; (mov r8, r8)
 80041fe:	46bd      	mov	sp, r7
 8004200:	b002      	add	sp, #8
 8004202:	bd80      	pop	{r7, pc}
 8004204:	40021000 	.word	0x40021000

08004208 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004208:	b590      	push	{r4, r7, lr}
 800420a:	b08b      	sub	sp, #44	; 0x2c
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004210:	2414      	movs	r4, #20
 8004212:	193b      	adds	r3, r7, r4
 8004214:	0018      	movs	r0, r3
 8004216:	2314      	movs	r3, #20
 8004218:	001a      	movs	r2, r3
 800421a:	2100      	movs	r1, #0
 800421c:	f00a fd44 	bl	800eca8 <memset>
  if(hadc->Instance==ADC1)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a1d      	ldr	r2, [pc, #116]	; (800429c <HAL_ADC_MspInit+0x94>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d133      	bne.n	8004292 <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800422a:	4b1d      	ldr	r3, [pc, #116]	; (80042a0 <HAL_ADC_MspInit+0x98>)
 800422c:	699a      	ldr	r2, [r3, #24]
 800422e:	4b1c      	ldr	r3, [pc, #112]	; (80042a0 <HAL_ADC_MspInit+0x98>)
 8004230:	2180      	movs	r1, #128	; 0x80
 8004232:	0089      	lsls	r1, r1, #2
 8004234:	430a      	orrs	r2, r1
 8004236:	619a      	str	r2, [r3, #24]
 8004238:	4b19      	ldr	r3, [pc, #100]	; (80042a0 <HAL_ADC_MspInit+0x98>)
 800423a:	699a      	ldr	r2, [r3, #24]
 800423c:	2380      	movs	r3, #128	; 0x80
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4013      	ands	r3, r2
 8004242:	613b      	str	r3, [r7, #16]
 8004244:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004246:	4b16      	ldr	r3, [pc, #88]	; (80042a0 <HAL_ADC_MspInit+0x98>)
 8004248:	695a      	ldr	r2, [r3, #20]
 800424a:	4b15      	ldr	r3, [pc, #84]	; (80042a0 <HAL_ADC_MspInit+0x98>)
 800424c:	2180      	movs	r1, #128	; 0x80
 800424e:	0289      	lsls	r1, r1, #10
 8004250:	430a      	orrs	r2, r1
 8004252:	615a      	str	r2, [r3, #20]
 8004254:	4b12      	ldr	r3, [pc, #72]	; (80042a0 <HAL_ADC_MspInit+0x98>)
 8004256:	695a      	ldr	r2, [r3, #20]
 8004258:	2380      	movs	r3, #128	; 0x80
 800425a:	029b      	lsls	r3, r3, #10
 800425c:	4013      	ands	r3, r2
 800425e:	60fb      	str	r3, [r7, #12]
 8004260:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004262:	193b      	adds	r3, r7, r4
 8004264:	2203      	movs	r2, #3
 8004266:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004268:	193b      	adds	r3, r7, r4
 800426a:	2203      	movs	r2, #3
 800426c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800426e:	193b      	adds	r3, r7, r4
 8004270:	2200      	movs	r2, #0
 8004272:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004274:	193a      	adds	r2, r7, r4
 8004276:	2390      	movs	r3, #144	; 0x90
 8004278:	05db      	lsls	r3, r3, #23
 800427a:	0011      	movs	r1, r2
 800427c:	0018      	movs	r0, r3
 800427e:	f001 f9b9 	bl	80055f4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 3, 0);
 8004282:	2200      	movs	r2, #0
 8004284:	2103      	movs	r1, #3
 8004286:	200c      	movs	r0, #12
 8004288:	f001 f912 	bl	80054b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800428c:	200c      	movs	r0, #12
 800428e:	f001 f924 	bl	80054da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004292:	46c0      	nop			; (mov r8, r8)
 8004294:	46bd      	mov	sp, r7
 8004296:	b00b      	add	sp, #44	; 0x2c
 8004298:	bd90      	pop	{r4, r7, pc}
 800429a:	46c0      	nop			; (mov r8, r8)
 800429c:	40012400 	.word	0x40012400
 80042a0:	40021000 	.word	0x40021000

080042a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80042a4:	b590      	push	{r4, r7, lr}
 80042a6:	b08b      	sub	sp, #44	; 0x2c
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042ac:	2414      	movs	r4, #20
 80042ae:	193b      	adds	r3, r7, r4
 80042b0:	0018      	movs	r0, r3
 80042b2:	2314      	movs	r3, #20
 80042b4:	001a      	movs	r2, r3
 80042b6:	2100      	movs	r1, #0
 80042b8:	f00a fcf6 	bl	800eca8 <memset>
  if(hi2c->Instance==I2C1)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a1c      	ldr	r2, [pc, #112]	; (8004334 <HAL_I2C_MspInit+0x90>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d132      	bne.n	800432c <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042c6:	4b1c      	ldr	r3, [pc, #112]	; (8004338 <HAL_I2C_MspInit+0x94>)
 80042c8:	695a      	ldr	r2, [r3, #20]
 80042ca:	4b1b      	ldr	r3, [pc, #108]	; (8004338 <HAL_I2C_MspInit+0x94>)
 80042cc:	2180      	movs	r1, #128	; 0x80
 80042ce:	02c9      	lsls	r1, r1, #11
 80042d0:	430a      	orrs	r2, r1
 80042d2:	615a      	str	r2, [r3, #20]
 80042d4:	4b18      	ldr	r3, [pc, #96]	; (8004338 <HAL_I2C_MspInit+0x94>)
 80042d6:	695a      	ldr	r2, [r3, #20]
 80042d8:	2380      	movs	r3, #128	; 0x80
 80042da:	02db      	lsls	r3, r3, #11
 80042dc:	4013      	ands	r3, r2
 80042de:	613b      	str	r3, [r7, #16]
 80042e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80042e2:	193b      	adds	r3, r7, r4
 80042e4:	22c0      	movs	r2, #192	; 0xc0
 80042e6:	0092      	lsls	r2, r2, #2
 80042e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80042ea:	0021      	movs	r1, r4
 80042ec:	187b      	adds	r3, r7, r1
 80042ee:	2212      	movs	r2, #18
 80042f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f2:	187b      	adds	r3, r7, r1
 80042f4:	2200      	movs	r2, #0
 80042f6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80042f8:	187b      	adds	r3, r7, r1
 80042fa:	2203      	movs	r2, #3
 80042fc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80042fe:	187b      	adds	r3, r7, r1
 8004300:	2201      	movs	r2, #1
 8004302:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004304:	187b      	adds	r3, r7, r1
 8004306:	4a0d      	ldr	r2, [pc, #52]	; (800433c <HAL_I2C_MspInit+0x98>)
 8004308:	0019      	movs	r1, r3
 800430a:	0010      	movs	r0, r2
 800430c:	f001 f972 	bl	80055f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004310:	4b09      	ldr	r3, [pc, #36]	; (8004338 <HAL_I2C_MspInit+0x94>)
 8004312:	69da      	ldr	r2, [r3, #28]
 8004314:	4b08      	ldr	r3, [pc, #32]	; (8004338 <HAL_I2C_MspInit+0x94>)
 8004316:	2180      	movs	r1, #128	; 0x80
 8004318:	0389      	lsls	r1, r1, #14
 800431a:	430a      	orrs	r2, r1
 800431c:	61da      	str	r2, [r3, #28]
 800431e:	4b06      	ldr	r3, [pc, #24]	; (8004338 <HAL_I2C_MspInit+0x94>)
 8004320:	69da      	ldr	r2, [r3, #28]
 8004322:	2380      	movs	r3, #128	; 0x80
 8004324:	039b      	lsls	r3, r3, #14
 8004326:	4013      	ands	r3, r2
 8004328:	60fb      	str	r3, [r7, #12]
 800432a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800432c:	46c0      	nop			; (mov r8, r8)
 800432e:	46bd      	mov	sp, r7
 8004330:	b00b      	add	sp, #44	; 0x2c
 8004332:	bd90      	pop	{r4, r7, pc}
 8004334:	40005400 	.word	0x40005400
 8004338:	40021000 	.word	0x40021000
 800433c:	48000400 	.word	0x48000400

08004340 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a09      	ldr	r2, [pc, #36]	; (8004374 <HAL_TIM_Base_MspInit+0x34>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d10b      	bne.n	800436a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004352:	4b09      	ldr	r3, [pc, #36]	; (8004378 <HAL_TIM_Base_MspInit+0x38>)
 8004354:	69da      	ldr	r2, [r3, #28]
 8004356:	4b08      	ldr	r3, [pc, #32]	; (8004378 <HAL_TIM_Base_MspInit+0x38>)
 8004358:	2102      	movs	r1, #2
 800435a:	430a      	orrs	r2, r1
 800435c:	61da      	str	r2, [r3, #28]
 800435e:	4b06      	ldr	r3, [pc, #24]	; (8004378 <HAL_TIM_Base_MspInit+0x38>)
 8004360:	69db      	ldr	r3, [r3, #28]
 8004362:	2202      	movs	r2, #2
 8004364:	4013      	ands	r3, r2
 8004366:	60fb      	str	r3, [r7, #12]
 8004368:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800436a:	46c0      	nop			; (mov r8, r8)
 800436c:	46bd      	mov	sp, r7
 800436e:	b004      	add	sp, #16
 8004370:	bd80      	pop	{r7, pc}
 8004372:	46c0      	nop			; (mov r8, r8)
 8004374:	40000400 	.word	0x40000400
 8004378:	40021000 	.word	0x40021000

0800437c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800437c:	b590      	push	{r4, r7, lr}
 800437e:	b089      	sub	sp, #36	; 0x24
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004384:	240c      	movs	r4, #12
 8004386:	193b      	adds	r3, r7, r4
 8004388:	0018      	movs	r0, r3
 800438a:	2314      	movs	r3, #20
 800438c:	001a      	movs	r2, r3
 800438e:	2100      	movs	r1, #0
 8004390:	f00a fc8a 	bl	800eca8 <memset>
  if(htim->Instance==TIM3)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a15      	ldr	r2, [pc, #84]	; (80043f0 <HAL_TIM_MspPostInit+0x74>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d123      	bne.n	80043e6 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800439e:	4b15      	ldr	r3, [pc, #84]	; (80043f4 <HAL_TIM_MspPostInit+0x78>)
 80043a0:	695a      	ldr	r2, [r3, #20]
 80043a2:	4b14      	ldr	r3, [pc, #80]	; (80043f4 <HAL_TIM_MspPostInit+0x78>)
 80043a4:	2180      	movs	r1, #128	; 0x80
 80043a6:	0309      	lsls	r1, r1, #12
 80043a8:	430a      	orrs	r2, r1
 80043aa:	615a      	str	r2, [r3, #20]
 80043ac:	4b11      	ldr	r3, [pc, #68]	; (80043f4 <HAL_TIM_MspPostInit+0x78>)
 80043ae:	695a      	ldr	r2, [r3, #20]
 80043b0:	2380      	movs	r3, #128	; 0x80
 80043b2:	031b      	lsls	r3, r3, #12
 80043b4:	4013      	ands	r3, r2
 80043b6:	60bb      	str	r3, [r7, #8]
 80043b8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80043ba:	0021      	movs	r1, r4
 80043bc:	187b      	adds	r3, r7, r1
 80043be:	2280      	movs	r2, #128	; 0x80
 80043c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043c2:	187b      	adds	r3, r7, r1
 80043c4:	2202      	movs	r2, #2
 80043c6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043c8:	187b      	adds	r3, r7, r1
 80043ca:	2200      	movs	r2, #0
 80043cc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043ce:	187b      	adds	r3, r7, r1
 80043d0:	2200      	movs	r2, #0
 80043d2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM3;
 80043d4:	187b      	adds	r3, r7, r1
 80043d6:	2200      	movs	r2, #0
 80043d8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043da:	187b      	adds	r3, r7, r1
 80043dc:	4a06      	ldr	r2, [pc, #24]	; (80043f8 <HAL_TIM_MspPostInit+0x7c>)
 80043de:	0019      	movs	r1, r3
 80043e0:	0010      	movs	r0, r2
 80043e2:	f001 f907 	bl	80055f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80043e6:	46c0      	nop			; (mov r8, r8)
 80043e8:	46bd      	mov	sp, r7
 80043ea:	b009      	add	sp, #36	; 0x24
 80043ec:	bd90      	pop	{r4, r7, pc}
 80043ee:	46c0      	nop			; (mov r8, r8)
 80043f0:	40000400 	.word	0x40000400
 80043f4:	40021000 	.word	0x40021000
 80043f8:	48000800 	.word	0x48000800

080043fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80043fc:	b590      	push	{r4, r7, lr}
 80043fe:	b08b      	sub	sp, #44	; 0x2c
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004404:	2414      	movs	r4, #20
 8004406:	193b      	adds	r3, r7, r4
 8004408:	0018      	movs	r0, r3
 800440a:	2314      	movs	r3, #20
 800440c:	001a      	movs	r2, r3
 800440e:	2100      	movs	r1, #0
 8004410:	f00a fc4a 	bl	800eca8 <memset>
  if(huart->Instance==USART2)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a20      	ldr	r2, [pc, #128]	; (800449c <HAL_UART_MspInit+0xa0>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d13a      	bne.n	8004494 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800441e:	4b20      	ldr	r3, [pc, #128]	; (80044a0 <HAL_UART_MspInit+0xa4>)
 8004420:	69da      	ldr	r2, [r3, #28]
 8004422:	4b1f      	ldr	r3, [pc, #124]	; (80044a0 <HAL_UART_MspInit+0xa4>)
 8004424:	2180      	movs	r1, #128	; 0x80
 8004426:	0289      	lsls	r1, r1, #10
 8004428:	430a      	orrs	r2, r1
 800442a:	61da      	str	r2, [r3, #28]
 800442c:	4b1c      	ldr	r3, [pc, #112]	; (80044a0 <HAL_UART_MspInit+0xa4>)
 800442e:	69da      	ldr	r2, [r3, #28]
 8004430:	2380      	movs	r3, #128	; 0x80
 8004432:	029b      	lsls	r3, r3, #10
 8004434:	4013      	ands	r3, r2
 8004436:	613b      	str	r3, [r7, #16]
 8004438:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800443a:	4b19      	ldr	r3, [pc, #100]	; (80044a0 <HAL_UART_MspInit+0xa4>)
 800443c:	695a      	ldr	r2, [r3, #20]
 800443e:	4b18      	ldr	r3, [pc, #96]	; (80044a0 <HAL_UART_MspInit+0xa4>)
 8004440:	2180      	movs	r1, #128	; 0x80
 8004442:	0289      	lsls	r1, r1, #10
 8004444:	430a      	orrs	r2, r1
 8004446:	615a      	str	r2, [r3, #20]
 8004448:	4b15      	ldr	r3, [pc, #84]	; (80044a0 <HAL_UART_MspInit+0xa4>)
 800444a:	695a      	ldr	r2, [r3, #20]
 800444c:	2380      	movs	r3, #128	; 0x80
 800444e:	029b      	lsls	r3, r3, #10
 8004450:	4013      	ands	r3, r2
 8004452:	60fb      	str	r3, [r7, #12]
 8004454:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004456:	0021      	movs	r1, r4
 8004458:	187b      	adds	r3, r7, r1
 800445a:	220c      	movs	r2, #12
 800445c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800445e:	187b      	adds	r3, r7, r1
 8004460:	2202      	movs	r2, #2
 8004462:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004464:	187b      	adds	r3, r7, r1
 8004466:	2200      	movs	r2, #0
 8004468:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800446a:	187b      	adds	r3, r7, r1
 800446c:	2203      	movs	r2, #3
 800446e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8004470:	187b      	adds	r3, r7, r1
 8004472:	2201      	movs	r2, #1
 8004474:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004476:	187a      	adds	r2, r7, r1
 8004478:	2390      	movs	r3, #144	; 0x90
 800447a:	05db      	lsls	r3, r3, #23
 800447c:	0011      	movs	r1, r2
 800447e:	0018      	movs	r0, r3
 8004480:	f001 f8b8 	bl	80055f4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8004484:	2200      	movs	r2, #0
 8004486:	2103      	movs	r1, #3
 8004488:	201c      	movs	r0, #28
 800448a:	f001 f811 	bl	80054b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800448e:	201c      	movs	r0, #28
 8004490:	f001 f823 	bl	80054da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004494:	46c0      	nop			; (mov r8, r8)
 8004496:	46bd      	mov	sp, r7
 8004498:	b00b      	add	sp, #44	; 0x2c
 800449a:	bd90      	pop	{r4, r7, pc}
 800449c:	40004400 	.word	0x40004400
 80044a0:	40021000 	.word	0x40021000

080044a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80044a4:	b5b0      	push	{r4, r5, r7, lr}
 80044a6:	b08c      	sub	sp, #48	; 0x30
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80044ac:	2300      	movs	r3, #0
 80044ae:	627b      	str	r3, [r7, #36]	; 0x24

  uint32_t              uwPrescalerValue = 0U;
 80044b0:	2300      	movs	r3, #0
 80044b2:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80044b4:	4b38      	ldr	r3, [pc, #224]	; (8004598 <HAL_InitTick+0xf4>)
 80044b6:	699a      	ldr	r2, [r3, #24]
 80044b8:	4b37      	ldr	r3, [pc, #220]	; (8004598 <HAL_InitTick+0xf4>)
 80044ba:	2180      	movs	r1, #128	; 0x80
 80044bc:	0109      	lsls	r1, r1, #4
 80044be:	430a      	orrs	r2, r1
 80044c0:	619a      	str	r2, [r3, #24]
 80044c2:	4b35      	ldr	r3, [pc, #212]	; (8004598 <HAL_InitTick+0xf4>)
 80044c4:	699a      	ldr	r2, [r3, #24]
 80044c6:	2380      	movs	r3, #128	; 0x80
 80044c8:	011b      	lsls	r3, r3, #4
 80044ca:	4013      	ands	r3, r2
 80044cc:	60bb      	str	r3, [r7, #8]
 80044ce:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80044d0:	230c      	movs	r3, #12
 80044d2:	18fa      	adds	r2, r7, r3
 80044d4:	2410      	movs	r4, #16
 80044d6:	193b      	adds	r3, r7, r4
 80044d8:	0011      	movs	r1, r2
 80044da:	0018      	movs	r0, r3
 80044dc:	f002 fa4c 	bl	8006978 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80044e0:	193b      	adds	r3, r7, r4
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM1 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80044e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d104      	bne.n	80044f6 <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80044ec:	f002 fa2e 	bl	800694c <HAL_RCC_GetPCLK1Freq>
 80044f0:	0003      	movs	r3, r0
 80044f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044f4:	e004      	b.n	8004500 <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80044f6:	f002 fa29 	bl	800694c <HAL_RCC_GetPCLK1Freq>
 80044fa:	0003      	movs	r3, r0
 80044fc:	005b      	lsls	r3, r3, #1
 80044fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004502:	4926      	ldr	r1, [pc, #152]	; (800459c <HAL_InitTick+0xf8>)
 8004504:	0018      	movs	r0, r3
 8004506:	f7fb fe1b 	bl	8000140 <__udivsi3>
 800450a:	0003      	movs	r3, r0
 800450c:	3b01      	subs	r3, #1
 800450e:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004510:	4b23      	ldr	r3, [pc, #140]	; (80045a0 <HAL_InitTick+0xfc>)
 8004512:	4a24      	ldr	r2, [pc, #144]	; (80045a4 <HAL_InitTick+0x100>)
 8004514:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8004516:	4b22      	ldr	r3, [pc, #136]	; (80045a0 <HAL_InitTick+0xfc>)
 8004518:	4a23      	ldr	r2, [pc, #140]	; (80045a8 <HAL_InitTick+0x104>)
 800451a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800451c:	4b20      	ldr	r3, [pc, #128]	; (80045a0 <HAL_InitTick+0xfc>)
 800451e:	6a3a      	ldr	r2, [r7, #32]
 8004520:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 8004522:	4b1f      	ldr	r3, [pc, #124]	; (80045a0 <HAL_InitTick+0xfc>)
 8004524:	2200      	movs	r2, #0
 8004526:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004528:	4b1d      	ldr	r3, [pc, #116]	; (80045a0 <HAL_InitTick+0xfc>)
 800452a:	2200      	movs	r2, #0
 800452c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800452e:	4b1c      	ldr	r3, [pc, #112]	; (80045a0 <HAL_InitTick+0xfc>)
 8004530:	2200      	movs	r2, #0
 8004532:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8004534:	252b      	movs	r5, #43	; 0x2b
 8004536:	197c      	adds	r4, r7, r5
 8004538:	4b19      	ldr	r3, [pc, #100]	; (80045a0 <HAL_InitTick+0xfc>)
 800453a:	0018      	movs	r0, r3
 800453c:	f002 fb24 	bl	8006b88 <HAL_TIM_Base_Init>
 8004540:	0003      	movs	r3, r0
 8004542:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8004544:	197b      	adds	r3, r7, r5
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d11e      	bne.n	800458a <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800454c:	197c      	adds	r4, r7, r5
 800454e:	4b14      	ldr	r3, [pc, #80]	; (80045a0 <HAL_InitTick+0xfc>)
 8004550:	0018      	movs	r0, r3
 8004552:	f002 fb69 	bl	8006c28 <HAL_TIM_Base_Start_IT>
 8004556:	0003      	movs	r3, r0
 8004558:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 800455a:	197b      	adds	r3, r7, r5
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d113      	bne.n	800458a <HAL_InitTick+0xe6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8004562:	200d      	movs	r0, #13
 8004564:	f000 ffb9 	bl	80054da <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b03      	cmp	r3, #3
 800456c:	d809      	bhi.n	8004582 <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority, 0U);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	0019      	movs	r1, r3
 8004574:	200d      	movs	r0, #13
 8004576:	f000 ff9b 	bl	80054b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800457a:	4b0c      	ldr	r3, [pc, #48]	; (80045ac <HAL_InitTick+0x108>)
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	601a      	str	r2, [r3, #0]
 8004580:	e003      	b.n	800458a <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 8004582:	232b      	movs	r3, #43	; 0x2b
 8004584:	18fb      	adds	r3, r7, r3
 8004586:	2201      	movs	r2, #1
 8004588:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 800458a:	232b      	movs	r3, #43	; 0x2b
 800458c:	18fb      	adds	r3, r7, r3
 800458e:	781b      	ldrb	r3, [r3, #0]
}
 8004590:	0018      	movs	r0, r3
 8004592:	46bd      	mov	sp, r7
 8004594:	b00c      	add	sp, #48	; 0x30
 8004596:	bdb0      	pop	{r4, r5, r7, pc}
 8004598:	40021000 	.word	0x40021000
 800459c:	000f4240 	.word	0x000f4240
 80045a0:	2000055c 	.word	0x2000055c
 80045a4:	40012c00 	.word	0x40012c00
 80045a8:	000003e7 	.word	0x000003e7
 80045ac:	20000090 	.word	0x20000090

080045b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80045b4:	e7fe      	b.n	80045b4 <NMI_Handler+0x4>

080045b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80045ba:	e7fe      	b.n	80045ba <HardFault_Handler+0x4>

080045bc <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC interrupt.
  */
void ADC1_IRQHandler(void)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 80045c0:	4b03      	ldr	r3, [pc, #12]	; (80045d0 <ADC1_IRQHandler+0x14>)
 80045c2:	0018      	movs	r0, r3
 80045c4:	f000 fb44 	bl	8004c50 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80045c8:	46c0      	nop			; (mov r8, r8)
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	46c0      	nop			; (mov r8, r8)
 80045d0:	20000288 	.word	0x20000288

080045d4 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80045d8:	4b03      	ldr	r3, [pc, #12]	; (80045e8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80045da:	0018      	movs	r0, r3
 80045dc:	f002 fc7a 	bl	8006ed4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80045e0:	46c0      	nop			; (mov r8, r8)
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	46c0      	nop			; (mov r8, r8)
 80045e8:	2000055c 	.word	0x2000055c

080045ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80045f0:	4b03      	ldr	r3, [pc, #12]	; (8004600 <USART2_IRQHandler+0x14>)
 80045f2:	0018      	movs	r0, r3
 80045f4:	f003 fbd4 	bl	8007da0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80045f8:	46c0      	nop			; (mov r8, r8)
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	46c0      	nop			; (mov r8, r8)
 8004600:	2000035c 	.word	0x2000035c

08004604 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	af00      	add	r7, sp, #0
	return 1;
 8004608:	2301      	movs	r3, #1
}
 800460a:	0018      	movs	r0, r3
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <_kill>:

int _kill(int pid, int sig)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800461a:	f00a fa0d 	bl	800ea38 <__errno>
 800461e:	0003      	movs	r3, r0
 8004620:	2216      	movs	r2, #22
 8004622:	601a      	str	r2, [r3, #0]
	return -1;
 8004624:	2301      	movs	r3, #1
 8004626:	425b      	negs	r3, r3
}
 8004628:	0018      	movs	r0, r3
 800462a:	46bd      	mov	sp, r7
 800462c:	b002      	add	sp, #8
 800462e:	bd80      	pop	{r7, pc}

08004630 <_exit>:

void _exit (int status)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004638:	2301      	movs	r3, #1
 800463a:	425a      	negs	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	0011      	movs	r1, r2
 8004640:	0018      	movs	r0, r3
 8004642:	f7ff ffe5 	bl	8004610 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004646:	e7fe      	b.n	8004646 <_exit+0x16>

08004648 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b086      	sub	sp, #24
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004654:	2300      	movs	r3, #0
 8004656:	617b      	str	r3, [r7, #20]
 8004658:	e00a      	b.n	8004670 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800465a:	e000      	b.n	800465e <_read+0x16>
 800465c:	bf00      	nop
 800465e:	0001      	movs	r1, r0
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	1c5a      	adds	r2, r3, #1
 8004664:	60ba      	str	r2, [r7, #8]
 8004666:	b2ca      	uxtb	r2, r1
 8004668:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	3301      	adds	r3, #1
 800466e:	617b      	str	r3, [r7, #20]
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	429a      	cmp	r2, r3
 8004676:	dbf0      	blt.n	800465a <_read+0x12>
	}

return len;
 8004678:	687b      	ldr	r3, [r7, #4]
}
 800467a:	0018      	movs	r0, r3
 800467c:	46bd      	mov	sp, r7
 800467e:	b006      	add	sp, #24
 8004680:	bd80      	pop	{r7, pc}

08004682 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b086      	sub	sp, #24
 8004686:	af00      	add	r7, sp, #0
 8004688:	60f8      	str	r0, [r7, #12]
 800468a:	60b9      	str	r1, [r7, #8]
 800468c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800468e:	2300      	movs	r3, #0
 8004690:	617b      	str	r3, [r7, #20]
 8004692:	e009      	b.n	80046a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	1c5a      	adds	r2, r3, #1
 8004698:	60ba      	str	r2, [r7, #8]
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	0018      	movs	r0, r3
 800469e:	e000      	b.n	80046a2 <_write+0x20>
 80046a0:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	3301      	adds	r3, #1
 80046a6:	617b      	str	r3, [r7, #20]
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	dbf1      	blt.n	8004694 <_write+0x12>
	}
	return len;
 80046b0:	687b      	ldr	r3, [r7, #4]
}
 80046b2:	0018      	movs	r0, r3
 80046b4:	46bd      	mov	sp, r7
 80046b6:	b006      	add	sp, #24
 80046b8:	bd80      	pop	{r7, pc}

080046ba <_close>:

int _close(int file)
{
 80046ba:	b580      	push	{r7, lr}
 80046bc:	b082      	sub	sp, #8
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
	return -1;
 80046c2:	2301      	movs	r3, #1
 80046c4:	425b      	negs	r3, r3
}
 80046c6:	0018      	movs	r0, r3
 80046c8:	46bd      	mov	sp, r7
 80046ca:	b002      	add	sp, #8
 80046cc:	bd80      	pop	{r7, pc}

080046ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b082      	sub	sp, #8
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
 80046d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	2280      	movs	r2, #128	; 0x80
 80046dc:	0192      	lsls	r2, r2, #6
 80046de:	605a      	str	r2, [r3, #4]
	return 0;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	0018      	movs	r0, r3
 80046e4:	46bd      	mov	sp, r7
 80046e6:	b002      	add	sp, #8
 80046e8:	bd80      	pop	{r7, pc}

080046ea <_isatty>:

int _isatty(int file)
{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b082      	sub	sp, #8
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
	return 1;
 80046f2:	2301      	movs	r3, #1
}
 80046f4:	0018      	movs	r0, r3
 80046f6:	46bd      	mov	sp, r7
 80046f8:	b002      	add	sp, #8
 80046fa:	bd80      	pop	{r7, pc}

080046fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
	return 0;
 8004708:	2300      	movs	r3, #0
}
 800470a:	0018      	movs	r0, r3
 800470c:	46bd      	mov	sp, r7
 800470e:	b004      	add	sp, #16
 8004710:	bd80      	pop	{r7, pc}
	...

08004714 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b086      	sub	sp, #24
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800471c:	4a14      	ldr	r2, [pc, #80]	; (8004770 <_sbrk+0x5c>)
 800471e:	4b15      	ldr	r3, [pc, #84]	; (8004774 <_sbrk+0x60>)
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004728:	4b13      	ldr	r3, [pc, #76]	; (8004778 <_sbrk+0x64>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d102      	bne.n	8004736 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004730:	4b11      	ldr	r3, [pc, #68]	; (8004778 <_sbrk+0x64>)
 8004732:	4a12      	ldr	r2, [pc, #72]	; (800477c <_sbrk+0x68>)
 8004734:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004736:	4b10      	ldr	r3, [pc, #64]	; (8004778 <_sbrk+0x64>)
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	18d3      	adds	r3, r2, r3
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	429a      	cmp	r2, r3
 8004742:	d207      	bcs.n	8004754 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004744:	f00a f978 	bl	800ea38 <__errno>
 8004748:	0003      	movs	r3, r0
 800474a:	220c      	movs	r2, #12
 800474c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800474e:	2301      	movs	r3, #1
 8004750:	425b      	negs	r3, r3
 8004752:	e009      	b.n	8004768 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004754:	4b08      	ldr	r3, [pc, #32]	; (8004778 <_sbrk+0x64>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800475a:	4b07      	ldr	r3, [pc, #28]	; (8004778 <_sbrk+0x64>)
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	18d2      	adds	r2, r2, r3
 8004762:	4b05      	ldr	r3, [pc, #20]	; (8004778 <_sbrk+0x64>)
 8004764:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004766:	68fb      	ldr	r3, [r7, #12]
}
 8004768:	0018      	movs	r0, r3
 800476a:	46bd      	mov	sp, r7
 800476c:	b006      	add	sp, #24
 800476e:	bd80      	pop	{r7, pc}
 8004770:	20004000 	.word	0x20004000
 8004774:	00000400 	.word	0x00000400
 8004778:	200005a4 	.word	0x200005a4
 800477c:	200021c0 	.word	0x200021c0

08004780 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8004784:	46c0      	nop			; (mov r8, r8)
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
	...

0800478c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800478c:	480d      	ldr	r0, [pc, #52]	; (80047c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800478e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004790:	480d      	ldr	r0, [pc, #52]	; (80047c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8004792:	490e      	ldr	r1, [pc, #56]	; (80047cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8004794:	4a0e      	ldr	r2, [pc, #56]	; (80047d0 <LoopForever+0xe>)
  movs r3, #0
 8004796:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004798:	e002      	b.n	80047a0 <LoopCopyDataInit>

0800479a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800479a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800479c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800479e:	3304      	adds	r3, #4

080047a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80047a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80047a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80047a4:	d3f9      	bcc.n	800479a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80047a6:	4a0b      	ldr	r2, [pc, #44]	; (80047d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80047a8:	4c0b      	ldr	r4, [pc, #44]	; (80047d8 <LoopForever+0x16>)
  movs r3, #0
 80047aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80047ac:	e001      	b.n	80047b2 <LoopFillZerobss>

080047ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80047ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80047b0:	3204      	adds	r2, #4

080047b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80047b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80047b4:	d3fb      	bcc.n	80047ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80047b6:	f7ff ffe3 	bl	8004780 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80047ba:	f00a fa45 	bl	800ec48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80047be:	f7fe faa3 	bl	8002d08 <main>

080047c2 <LoopForever>:

LoopForever:
    b LoopForever
 80047c2:	e7fe      	b.n	80047c2 <LoopForever>
  ldr   r0, =_estack
 80047c4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80047c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80047cc:	2000026c 	.word	0x2000026c
  ldr r2, =_sidata
 80047d0:	08013fe0 	.word	0x08013fe0
  ldr r2, =_sbss
 80047d4:	2000026c 	.word	0x2000026c
  ldr r4, =_ebss
 80047d8:	200021c0 	.word	0x200021c0

080047dc <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80047dc:	e7fe      	b.n	80047dc <DMA1_Channel1_IRQHandler>
	...

080047e0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80047e4:	4b07      	ldr	r3, [pc, #28]	; (8004804 <HAL_Init+0x24>)
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	4b06      	ldr	r3, [pc, #24]	; (8004804 <HAL_Init+0x24>)
 80047ea:	2110      	movs	r1, #16
 80047ec:	430a      	orrs	r2, r1
 80047ee:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80047f0:	2003      	movs	r0, #3
 80047f2:	f7ff fe57 	bl	80044a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80047f6:	f7ff fcdd 	bl	80041b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	0018      	movs	r0, r3
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	46c0      	nop			; (mov r8, r8)
 8004804:	40022000 	.word	0x40022000

08004808 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800480c:	4b05      	ldr	r3, [pc, #20]	; (8004824 <HAL_IncTick+0x1c>)
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	001a      	movs	r2, r3
 8004812:	4b05      	ldr	r3, [pc, #20]	; (8004828 <HAL_IncTick+0x20>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	18d2      	adds	r2, r2, r3
 8004818:	4b03      	ldr	r3, [pc, #12]	; (8004828 <HAL_IncTick+0x20>)
 800481a:	601a      	str	r2, [r3, #0]
}
 800481c:	46c0      	nop			; (mov r8, r8)
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	46c0      	nop			; (mov r8, r8)
 8004824:	20000094 	.word	0x20000094
 8004828:	200005a8 	.word	0x200005a8

0800482c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	af00      	add	r7, sp, #0
  return uwTick;
 8004830:	4b02      	ldr	r3, [pc, #8]	; (800483c <HAL_GetTick+0x10>)
 8004832:	681b      	ldr	r3, [r3, #0]
}
 8004834:	0018      	movs	r0, r3
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	46c0      	nop			; (mov r8, r8)
 800483c:	200005a8 	.word	0x200005a8

08004840 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004848:	230f      	movs	r3, #15
 800484a:	18fb      	adds	r3, r7, r3
 800484c:	2200      	movs	r2, #0
 800484e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8004850:	2300      	movs	r3, #0
 8004852:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d101      	bne.n	800485e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e125      	b.n	8004aaa <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10a      	bne.n	800487c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2234      	movs	r2, #52	; 0x34
 8004870:	2100      	movs	r1, #0
 8004872:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	0018      	movs	r0, r3
 8004878:	f7ff fcc6 	bl	8004208 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004880:	2210      	movs	r2, #16
 8004882:	4013      	ands	r3, r2
 8004884:	d000      	beq.n	8004888 <HAL_ADC_Init+0x48>
 8004886:	e103      	b.n	8004a90 <HAL_ADC_Init+0x250>
 8004888:	230f      	movs	r3, #15
 800488a:	18fb      	adds	r3, r7, r3
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d000      	beq.n	8004894 <HAL_ADC_Init+0x54>
 8004892:	e0fd      	b.n	8004a90 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	2204      	movs	r2, #4
 800489c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800489e:	d000      	beq.n	80048a2 <HAL_ADC_Init+0x62>
 80048a0:	e0f6      	b.n	8004a90 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a6:	4a83      	ldr	r2, [pc, #524]	; (8004ab4 <HAL_ADC_Init+0x274>)
 80048a8:	4013      	ands	r3, r2
 80048aa:	2202      	movs	r2, #2
 80048ac:	431a      	orrs	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	2203      	movs	r2, #3
 80048ba:	4013      	ands	r3, r2
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d112      	bne.n	80048e6 <HAL_ADC_Init+0xa6>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2201      	movs	r2, #1
 80048c8:	4013      	ands	r3, r2
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d009      	beq.n	80048e2 <HAL_ADC_Init+0xa2>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68da      	ldr	r2, [r3, #12]
 80048d4:	2380      	movs	r3, #128	; 0x80
 80048d6:	021b      	lsls	r3, r3, #8
 80048d8:	401a      	ands	r2, r3
 80048da:	2380      	movs	r3, #128	; 0x80
 80048dc:	021b      	lsls	r3, r3, #8
 80048de:	429a      	cmp	r2, r3
 80048e0:	d101      	bne.n	80048e6 <HAL_ADC_Init+0xa6>
 80048e2:	2301      	movs	r3, #1
 80048e4:	e000      	b.n	80048e8 <HAL_ADC_Init+0xa8>
 80048e6:	2300      	movs	r3, #0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d116      	bne.n	800491a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	2218      	movs	r2, #24
 80048f4:	4393      	bics	r3, r2
 80048f6:	0019      	movs	r1, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	689a      	ldr	r2, [r3, #8]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	430a      	orrs	r2, r1
 8004902:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	0899      	lsrs	r1, r3, #2
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685a      	ldr	r2, [r3, #4]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	430a      	orrs	r2, r1
 8004918:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68da      	ldr	r2, [r3, #12]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4964      	ldr	r1, [pc, #400]	; (8004ab8 <HAL_ADC_Init+0x278>)
 8004926:	400a      	ands	r2, r1
 8004928:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	7e1b      	ldrb	r3, [r3, #24]
 800492e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	7e5b      	ldrb	r3, [r3, #25]
 8004934:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004936:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	7e9b      	ldrb	r3, [r3, #26]
 800493c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800493e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004944:	2b01      	cmp	r3, #1
 8004946:	d002      	beq.n	800494e <HAL_ADC_Init+0x10e>
 8004948:	2380      	movs	r3, #128	; 0x80
 800494a:	015b      	lsls	r3, r3, #5
 800494c:	e000      	b.n	8004950 <HAL_ADC_Init+0x110>
 800494e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004950:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8004956:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	2b02      	cmp	r3, #2
 800495e:	d101      	bne.n	8004964 <HAL_ADC_Init+0x124>
 8004960:	2304      	movs	r3, #4
 8004962:	e000      	b.n	8004966 <HAL_ADC_Init+0x126>
 8004964:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8004966:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2124      	movs	r1, #36	; 0x24
 800496c:	5c5b      	ldrb	r3, [r3, r1]
 800496e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8004970:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004972:	68ba      	ldr	r2, [r7, #8]
 8004974:	4313      	orrs	r3, r2
 8004976:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	7edb      	ldrb	r3, [r3, #27]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d115      	bne.n	80049ac <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	7e9b      	ldrb	r3, [r3, #26]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d105      	bne.n	8004994 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	2280      	movs	r2, #128	; 0x80
 800498c:	0252      	lsls	r2, r2, #9
 800498e:	4313      	orrs	r3, r2
 8004990:	60bb      	str	r3, [r7, #8]
 8004992:	e00b      	b.n	80049ac <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004998:	2220      	movs	r2, #32
 800499a:	431a      	orrs	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a4:	2201      	movs	r2, #1
 80049a6:	431a      	orrs	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	69da      	ldr	r2, [r3, #28]
 80049b0:	23c2      	movs	r3, #194	; 0xc2
 80049b2:	33ff      	adds	r3, #255	; 0xff
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d007      	beq.n	80049c8 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80049c0:	4313      	orrs	r3, r2
 80049c2:	68ba      	ldr	r2, [r7, #8]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68d9      	ldr	r1, [r3, #12]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68ba      	ldr	r2, [r7, #8]
 80049d4:	430a      	orrs	r2, r1
 80049d6:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049dc:	2380      	movs	r3, #128	; 0x80
 80049de:	055b      	lsls	r3, r3, #21
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d01b      	beq.n	8004a1c <HAL_ADC_Init+0x1dc>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d017      	beq.n	8004a1c <HAL_ADC_Init+0x1dc>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d013      	beq.n	8004a1c <HAL_ADC_Init+0x1dc>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f8:	2b03      	cmp	r3, #3
 80049fa:	d00f      	beq.n	8004a1c <HAL_ADC_Init+0x1dc>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a00:	2b04      	cmp	r3, #4
 8004a02:	d00b      	beq.n	8004a1c <HAL_ADC_Init+0x1dc>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a08:	2b05      	cmp	r3, #5
 8004a0a:	d007      	beq.n	8004a1c <HAL_ADC_Init+0x1dc>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a10:	2b06      	cmp	r3, #6
 8004a12:	d003      	beq.n	8004a1c <HAL_ADC_Init+0x1dc>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a18:	2b07      	cmp	r3, #7
 8004a1a:	d112      	bne.n	8004a42 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	695a      	ldr	r2, [r3, #20]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2107      	movs	r1, #7
 8004a28:	438a      	bics	r2, r1
 8004a2a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	6959      	ldr	r1, [r3, #20]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a36:	2207      	movs	r2, #7
 8004a38:	401a      	ands	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	4a1c      	ldr	r2, [pc, #112]	; (8004abc <HAL_ADC_Init+0x27c>)
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	68ba      	ldr	r2, [r7, #8]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d10b      	bne.n	8004a6a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5c:	2203      	movs	r2, #3
 8004a5e:	4393      	bics	r3, r2
 8004a60:	2201      	movs	r2, #1
 8004a62:	431a      	orrs	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004a68:	e01c      	b.n	8004aa4 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6e:	2212      	movs	r2, #18
 8004a70:	4393      	bics	r3, r2
 8004a72:	2210      	movs	r2, #16
 8004a74:	431a      	orrs	r2, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a7e:	2201      	movs	r2, #1
 8004a80:	431a      	orrs	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8004a86:	230f      	movs	r3, #15
 8004a88:	18fb      	adds	r3, r7, r3
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004a8e:	e009      	b.n	8004aa4 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a94:	2210      	movs	r2, #16
 8004a96:	431a      	orrs	r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8004a9c:	230f      	movs	r3, #15
 8004a9e:	18fb      	adds	r3, r7, r3
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004aa4:	230f      	movs	r3, #15
 8004aa6:	18fb      	adds	r3, r7, r3
 8004aa8:	781b      	ldrb	r3, [r3, #0]
}
 8004aaa:	0018      	movs	r0, r3
 8004aac:	46bd      	mov	sp, r7
 8004aae:	b004      	add	sp, #16
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	46c0      	nop			; (mov r8, r8)
 8004ab4:	fffffefd 	.word	0xfffffefd
 8004ab8:	fffe0219 	.word	0xfffe0219
 8004abc:	833fffe7 	.word	0x833fffe7

08004ac0 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8004ac0:	b590      	push	{r4, r7, lr}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ac8:	230f      	movs	r3, #15
 8004aca:	18fb      	adds	r3, r7, r3
 8004acc:	2200      	movs	r2, #0
 8004ace:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	2204      	movs	r2, #4
 8004ad8:	4013      	ands	r3, r2
 8004ada:	d156      	bne.n	8004b8a <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2234      	movs	r2, #52	; 0x34
 8004ae0:	5c9b      	ldrb	r3, [r3, r2]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d101      	bne.n	8004aea <HAL_ADC_Start_IT+0x2a>
 8004ae6:	2302      	movs	r3, #2
 8004ae8:	e056      	b.n	8004b98 <HAL_ADC_Start_IT+0xd8>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2234      	movs	r2, #52	; 0x34
 8004aee:	2101      	movs	r1, #1
 8004af0:	5499      	strb	r1, [r3, r2]
     
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	7e5b      	ldrb	r3, [r3, #25]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d007      	beq.n	8004b0a <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8004afa:	230f      	movs	r3, #15
 8004afc:	18fc      	adds	r4, r7, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	0018      	movs	r0, r3
 8004b02:	f000 fa63 	bl	8004fcc <ADC_Enable>
 8004b06:	0003      	movs	r3, r0
 8004b08:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004b0a:	230f      	movs	r3, #15
 8004b0c:	18fb      	adds	r3, r7, r3
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d13e      	bne.n	8004b92 <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b18:	4a21      	ldr	r2, [pc, #132]	; (8004ba0 <HAL_ADC_Start_IT+0xe0>)
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	2280      	movs	r2, #128	; 0x80
 8004b1e:	0052      	lsls	r2, r2, #1
 8004b20:	431a      	orrs	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2234      	movs	r2, #52	; 0x34
 8004b30:	2100      	movs	r1, #0
 8004b32:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	221c      	movs	r2, #28
 8004b3a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	695b      	ldr	r3, [r3, #20]
 8004b40:	2b08      	cmp	r3, #8
 8004b42:	d110      	bne.n	8004b66 <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	685a      	ldr	r2, [r3, #4]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2104      	movs	r1, #4
 8004b50:	438a      	bics	r2, r1
 8004b52:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685a      	ldr	r2, [r3, #4]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2118      	movs	r1, #24
 8004b60:	430a      	orrs	r2, r1
 8004b62:	605a      	str	r2, [r3, #4]
          break;
 8004b64:	e008      	b.n	8004b78 <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	211c      	movs	r1, #28
 8004b72:	430a      	orrs	r2, r1
 8004b74:	605a      	str	r2, [r3, #4]
          break;
 8004b76:	46c0      	nop			; (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689a      	ldr	r2, [r3, #8]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2104      	movs	r1, #4
 8004b84:	430a      	orrs	r2, r1
 8004b86:	609a      	str	r2, [r3, #8]
 8004b88:	e003      	b.n	8004b92 <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004b8a:	230f      	movs	r3, #15
 8004b8c:	18fb      	adds	r3, r7, r3
 8004b8e:	2202      	movs	r2, #2
 8004b90:	701a      	strb	r2, [r3, #0]
  }    
    
  /* Return function status */
  return tmp_hal_status;
 8004b92:	230f      	movs	r3, #15
 8004b94:	18fb      	adds	r3, r7, r3
 8004b96:	781b      	ldrb	r3, [r3, #0]
}
 8004b98:	0018      	movs	r0, r3
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	b005      	add	sp, #20
 8004b9e:	bd90      	pop	{r4, r7, pc}
 8004ba0:	fffff0fe 	.word	0xfffff0fe

08004ba4 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8004ba4:	b5b0      	push	{r4, r5, r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004bac:	230f      	movs	r3, #15
 8004bae:	18fb      	adds	r3, r7, r3
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2234      	movs	r2, #52	; 0x34
 8004bb8:	5c9b      	ldrb	r3, [r3, r2]
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d101      	bne.n	8004bc2 <HAL_ADC_Stop_IT+0x1e>
 8004bbe:	2302      	movs	r3, #2
 8004bc0:	e033      	b.n	8004c2a <HAL_ADC_Stop_IT+0x86>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2234      	movs	r2, #52	; 0x34
 8004bc6:	2101      	movs	r1, #1
 8004bc8:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004bca:	250f      	movs	r5, #15
 8004bcc:	197c      	adds	r4, r7, r5
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	0018      	movs	r0, r3
 8004bd2:	f000 faf0 	bl	80051b6 <ADC_ConversionStop>
 8004bd6:	0003      	movs	r3, r0
 8004bd8:	7023      	strb	r3, [r4, #0]
   
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004bda:	0028      	movs	r0, r5
 8004bdc:	183b      	adds	r3, r7, r0
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d11b      	bne.n	8004c1c <HAL_ADC_Stop_IT+0x78>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	685a      	ldr	r2, [r3, #4]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	211c      	movs	r1, #28
 8004bf0:	438a      	bics	r2, r1
 8004bf2:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004bf4:	0005      	movs	r5, r0
 8004bf6:	183c      	adds	r4, r7, r0
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	0018      	movs	r0, r3
 8004bfc:	f000 fa6a 	bl	80050d4 <ADC_Disable>
 8004c00:	0003      	movs	r3, r0
 8004c02:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004c04:	197b      	adds	r3, r7, r5
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d107      	bne.n	8004c1c <HAL_ADC_Stop_IT+0x78>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c10:	4a08      	ldr	r2, [pc, #32]	; (8004c34 <HAL_ADC_Stop_IT+0x90>)
 8004c12:	4013      	ands	r3, r2
 8004c14:	2201      	movs	r2, #1
 8004c16:	431a      	orrs	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2234      	movs	r2, #52	; 0x34
 8004c20:	2100      	movs	r1, #0
 8004c22:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8004c24:	230f      	movs	r3, #15
 8004c26:	18fb      	adds	r3, r7, r3
 8004c28:	781b      	ldrb	r3, [r3, #0]
}
 8004c2a:	0018      	movs	r0, r3
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	b004      	add	sp, #16
 8004c30:	bdb0      	pop	{r4, r5, r7, pc}
 8004c32:	46c0      	nop			; (mov r8, r8)
 8004c34:	fffffefe 	.word	0xfffffefe

08004c38 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004c46:	0018      	movs	r0, r3
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	b002      	add	sp, #8
 8004c4c:	bd80      	pop	{r7, pc}
	...

08004c50 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2204      	movs	r2, #4
 8004c60:	4013      	ands	r3, r2
 8004c62:	2b04      	cmp	r3, #4
 8004c64:	d106      	bne.n	8004c74 <HAL_ADC_IRQHandler+0x24>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	2204      	movs	r2, #4
 8004c6e:	4013      	ands	r3, r2
 8004c70:	2b04      	cmp	r3, #4
 8004c72:	d00d      	beq.n	8004c90 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2208      	movs	r2, #8
 8004c7c:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8004c7e:	2b08      	cmp	r3, #8
 8004c80:	d14f      	bne.n	8004d22 <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	2208      	movs	r2, #8
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	2b08      	cmp	r3, #8
 8004c8e:	d148      	bne.n	8004d22 <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c94:	2210      	movs	r2, #16
 8004c96:	4013      	ands	r3, r2
 8004c98:	d106      	bne.n	8004ca8 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9e:	2280      	movs	r2, #128	; 0x80
 8004ca0:	0092      	lsls	r2, r2, #2
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68da      	ldr	r2, [r3, #12]
 8004cae:	23c0      	movs	r3, #192	; 0xc0
 8004cb0:	011b      	lsls	r3, r3, #4
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	d12d      	bne.n	8004d12 <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d129      	bne.n	8004d12 <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2208      	movs	r2, #8
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	2b08      	cmp	r3, #8
 8004cca:	d122      	bne.n	8004d12 <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	2204      	movs	r2, #4
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	d110      	bne.n	8004cfa <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	685a      	ldr	r2, [r3, #4]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	210c      	movs	r1, #12
 8004ce4:	438a      	bics	r2, r1
 8004ce6:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cec:	4a33      	ldr	r2, [pc, #204]	; (8004dbc <HAL_ADC_IRQHandler+0x16c>)
 8004cee:	4013      	ands	r3, r2
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	431a      	orrs	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	639a      	str	r2, [r3, #56]	; 0x38
 8004cf8:	e00b      	b.n	8004d12 <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfe:	2220      	movs	r2, #32
 8004d00:	431a      	orrs	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	431a      	orrs	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	0018      	movs	r0, r3
 8004d16:	f7fe fbe5 	bl	80034e4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	220c      	movs	r2, #12
 8004d20:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2280      	movs	r2, #128	; 0x80
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	2b80      	cmp	r3, #128	; 0x80
 8004d2e:	d115      	bne.n	8004d5c <HAL_ADC_IRQHandler+0x10c>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	2280      	movs	r2, #128	; 0x80
 8004d38:	4013      	ands	r3, r2
 8004d3a:	2b80      	cmp	r3, #128	; 0x80
 8004d3c:	d10e      	bne.n	8004d5c <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d42:	2280      	movs	r2, #128	; 0x80
 8004d44:	0252      	lsls	r2, r2, #9
 8004d46:	431a      	orrs	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	0018      	movs	r0, r3
 8004d50:	f000 f836 	bl	8004dc0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2280      	movs	r2, #128	; 0x80
 8004d5a:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2210      	movs	r2, #16
 8004d64:	4013      	ands	r3, r2
 8004d66:	2b10      	cmp	r3, #16
 8004d68:	d123      	bne.n	8004db2 <HAL_ADC_IRQHandler+0x162>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	2210      	movs	r2, #16
 8004d72:	4013      	ands	r3, r2
 8004d74:	2b10      	cmp	r3, #16
 8004d76:	d11c      	bne.n	8004db2 <HAL_ADC_IRQHandler+0x162>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d006      	beq.n	8004d8e <HAL_ADC_IRQHandler+0x13e>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	2201      	movs	r2, #1
 8004d88:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d10d      	bne.n	8004daa <HAL_ADC_IRQHandler+0x15a>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d92:	2202      	movs	r2, #2
 8004d94:	431a      	orrs	r2, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2210      	movs	r2, #16
 8004da0:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	0018      	movs	r0, r3
 8004da6:	f000 f813 	bl	8004dd0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2210      	movs	r2, #16
 8004db0:	601a      	str	r2, [r3, #0]
  }

}
 8004db2:	46c0      	nop			; (mov r8, r8)
 8004db4:	46bd      	mov	sp, r7
 8004db6:	b002      	add	sp, #8
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	46c0      	nop			; (mov r8, r8)
 8004dbc:	fffffefe 	.word	0xfffffefe

08004dc0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8004dc8:	46c0      	nop			; (mov r8, r8)
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	b002      	add	sp, #8
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004dd8:	46c0      	nop			; (mov r8, r8)
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	b002      	add	sp, #8
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004dea:	230f      	movs	r3, #15
 8004dec:	18fb      	adds	r3, r7, r3
 8004dee:	2200      	movs	r2, #0
 8004df0:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8004df2:	2300      	movs	r3, #0
 8004df4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dfa:	2380      	movs	r3, #128	; 0x80
 8004dfc:	055b      	lsls	r3, r3, #21
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d011      	beq.n	8004e26 <HAL_ADC_ConfigChannel+0x46>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d00d      	beq.n	8004e26 <HAL_ADC_ConfigChannel+0x46>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d009      	beq.n	8004e26 <HAL_ADC_ConfigChannel+0x46>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e16:	2b03      	cmp	r3, #3
 8004e18:	d005      	beq.n	8004e26 <HAL_ADC_ConfigChannel+0x46>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1e:	2b04      	cmp	r3, #4
 8004e20:	d001      	beq.n	8004e26 <HAL_ADC_ConfigChannel+0x46>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2234      	movs	r2, #52	; 0x34
 8004e2a:	5c9b      	ldrb	r3, [r3, r2]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d101      	bne.n	8004e34 <HAL_ADC_ConfigChannel+0x54>
 8004e30:	2302      	movs	r3, #2
 8004e32:	e0bb      	b.n	8004fac <HAL_ADC_ConfigChannel+0x1cc>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2234      	movs	r2, #52	; 0x34
 8004e38:	2101      	movs	r1, #1
 8004e3a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	2204      	movs	r2, #4
 8004e44:	4013      	ands	r3, r2
 8004e46:	d000      	beq.n	8004e4a <HAL_ADC_ConfigChannel+0x6a>
 8004e48:	e09f      	b.n	8004f8a <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	4a59      	ldr	r2, [pc, #356]	; (8004fb4 <HAL_ADC_ConfigChannel+0x1d4>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d100      	bne.n	8004e56 <HAL_ADC_ConfigChannel+0x76>
 8004e54:	e077      	b.n	8004f46 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2201      	movs	r2, #1
 8004e62:	409a      	lsls	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e70:	2380      	movs	r3, #128	; 0x80
 8004e72:	055b      	lsls	r3, r3, #21
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d037      	beq.n	8004ee8 <HAL_ADC_ConfigChannel+0x108>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d033      	beq.n	8004ee8 <HAL_ADC_ConfigChannel+0x108>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d02f      	beq.n	8004ee8 <HAL_ADC_ConfigChannel+0x108>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8c:	2b03      	cmp	r3, #3
 8004e8e:	d02b      	beq.n	8004ee8 <HAL_ADC_ConfigChannel+0x108>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e94:	2b04      	cmp	r3, #4
 8004e96:	d027      	beq.n	8004ee8 <HAL_ADC_ConfigChannel+0x108>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9c:	2b05      	cmp	r3, #5
 8004e9e:	d023      	beq.n	8004ee8 <HAL_ADC_ConfigChannel+0x108>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea4:	2b06      	cmp	r3, #6
 8004ea6:	d01f      	beq.n	8004ee8 <HAL_ADC_ConfigChannel+0x108>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eac:	2b07      	cmp	r3, #7
 8004eae:	d01b      	beq.n	8004ee8 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	689a      	ldr	r2, [r3, #8]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	2107      	movs	r1, #7
 8004ebc:	400b      	ands	r3, r1
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d012      	beq.n	8004ee8 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	695a      	ldr	r2, [r3, #20]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2107      	movs	r1, #7
 8004ece:	438a      	bics	r2, r1
 8004ed0:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	6959      	ldr	r1, [r3, #20]
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	2207      	movs	r2, #7
 8004ede:	401a      	ands	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2b10      	cmp	r3, #16
 8004eee:	d003      	beq.n	8004ef8 <HAL_ADC_ConfigChannel+0x118>
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2b11      	cmp	r3, #17
 8004ef6:	d152      	bne.n	8004f9e <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004ef8:	4b2f      	ldr	r3, [pc, #188]	; (8004fb8 <HAL_ADC_ConfigChannel+0x1d8>)
 8004efa:	6819      	ldr	r1, [r3, #0]
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2b10      	cmp	r3, #16
 8004f02:	d102      	bne.n	8004f0a <HAL_ADC_ConfigChannel+0x12a>
 8004f04:	2380      	movs	r3, #128	; 0x80
 8004f06:	041b      	lsls	r3, r3, #16
 8004f08:	e001      	b.n	8004f0e <HAL_ADC_ConfigChannel+0x12e>
 8004f0a:	2380      	movs	r3, #128	; 0x80
 8004f0c:	03db      	lsls	r3, r3, #15
 8004f0e:	4a2a      	ldr	r2, [pc, #168]	; (8004fb8 <HAL_ADC_ConfigChannel+0x1d8>)
 8004f10:	430b      	orrs	r3, r1
 8004f12:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2b10      	cmp	r3, #16
 8004f1a:	d140      	bne.n	8004f9e <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004f1c:	4b27      	ldr	r3, [pc, #156]	; (8004fbc <HAL_ADC_ConfigChannel+0x1dc>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4927      	ldr	r1, [pc, #156]	; (8004fc0 <HAL_ADC_ConfigChannel+0x1e0>)
 8004f22:	0018      	movs	r0, r3
 8004f24:	f7fb f90c 	bl	8000140 <__udivsi3>
 8004f28:	0003      	movs	r3, r0
 8004f2a:	001a      	movs	r2, r3
 8004f2c:	0013      	movs	r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	189b      	adds	r3, r3, r2
 8004f32:	005b      	lsls	r3, r3, #1
 8004f34:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004f36:	e002      	b.n	8004f3e <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1f9      	bne.n	8004f38 <HAL_ADC_ConfigChannel+0x158>
 8004f44:	e02b      	b.n	8004f9e <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2101      	movs	r1, #1
 8004f52:	4099      	lsls	r1, r3
 8004f54:	000b      	movs	r3, r1
 8004f56:	43d9      	mvns	r1, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	400a      	ands	r2, r1
 8004f5e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2b10      	cmp	r3, #16
 8004f66:	d003      	beq.n	8004f70 <HAL_ADC_ConfigChannel+0x190>
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2b11      	cmp	r3, #17
 8004f6e:	d116      	bne.n	8004f9e <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004f70:	4b11      	ldr	r3, [pc, #68]	; (8004fb8 <HAL_ADC_ConfigChannel+0x1d8>)
 8004f72:	6819      	ldr	r1, [r3, #0]
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2b10      	cmp	r3, #16
 8004f7a:	d101      	bne.n	8004f80 <HAL_ADC_ConfigChannel+0x1a0>
 8004f7c:	4a11      	ldr	r2, [pc, #68]	; (8004fc4 <HAL_ADC_ConfigChannel+0x1e4>)
 8004f7e:	e000      	b.n	8004f82 <HAL_ADC_ConfigChannel+0x1a2>
 8004f80:	4a11      	ldr	r2, [pc, #68]	; (8004fc8 <HAL_ADC_ConfigChannel+0x1e8>)
 8004f82:	4b0d      	ldr	r3, [pc, #52]	; (8004fb8 <HAL_ADC_ConfigChannel+0x1d8>)
 8004f84:	400a      	ands	r2, r1
 8004f86:	601a      	str	r2, [r3, #0]
 8004f88:	e009      	b.n	8004f9e <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8e:	2220      	movs	r2, #32
 8004f90:	431a      	orrs	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8004f96:	230f      	movs	r3, #15
 8004f98:	18fb      	adds	r3, r7, r3
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2234      	movs	r2, #52	; 0x34
 8004fa2:	2100      	movs	r1, #0
 8004fa4:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8004fa6:	230f      	movs	r3, #15
 8004fa8:	18fb      	adds	r3, r7, r3
 8004faa:	781b      	ldrb	r3, [r3, #0]
}
 8004fac:	0018      	movs	r0, r3
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	b004      	add	sp, #16
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	00001001 	.word	0x00001001
 8004fb8:	40012708 	.word	0x40012708
 8004fbc:	2000008c 	.word	0x2000008c
 8004fc0:	000f4240 	.word	0x000f4240
 8004fc4:	ff7fffff 	.word	0xff7fffff
 8004fc8:	ffbfffff 	.word	0xffbfffff

08004fcc <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	2203      	movs	r2, #3
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d112      	bne.n	8005010 <ADC_Enable+0x44>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d009      	beq.n	800500c <ADC_Enable+0x40>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68da      	ldr	r2, [r3, #12]
 8004ffe:	2380      	movs	r3, #128	; 0x80
 8005000:	021b      	lsls	r3, r3, #8
 8005002:	401a      	ands	r2, r3
 8005004:	2380      	movs	r3, #128	; 0x80
 8005006:	021b      	lsls	r3, r3, #8
 8005008:	429a      	cmp	r2, r3
 800500a:	d101      	bne.n	8005010 <ADC_Enable+0x44>
 800500c:	2301      	movs	r3, #1
 800500e:	e000      	b.n	8005012 <ADC_Enable+0x46>
 8005010:	2300      	movs	r3, #0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d152      	bne.n	80050bc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	4a2a      	ldr	r2, [pc, #168]	; (80050c8 <ADC_Enable+0xfc>)
 800501e:	4013      	ands	r3, r2
 8005020:	d00d      	beq.n	800503e <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005026:	2210      	movs	r2, #16
 8005028:	431a      	orrs	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005032:	2201      	movs	r2, #1
 8005034:	431a      	orrs	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e03f      	b.n	80050be <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	689a      	ldr	r2, [r3, #8]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2101      	movs	r1, #1
 800504a:	430a      	orrs	r2, r1
 800504c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800504e:	4b1f      	ldr	r3, [pc, #124]	; (80050cc <ADC_Enable+0x100>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	491f      	ldr	r1, [pc, #124]	; (80050d0 <ADC_Enable+0x104>)
 8005054:	0018      	movs	r0, r3
 8005056:	f7fb f873 	bl	8000140 <__udivsi3>
 800505a:	0003      	movs	r3, r0
 800505c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800505e:	e002      	b.n	8005066 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	3b01      	subs	r3, #1
 8005064:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d1f9      	bne.n	8005060 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 800506c:	f7ff fbde 	bl	800482c <HAL_GetTick>
 8005070:	0003      	movs	r3, r0
 8005072:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005074:	e01b      	b.n	80050ae <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005076:	f7ff fbd9 	bl	800482c <HAL_GetTick>
 800507a:	0002      	movs	r2, r0
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	2b02      	cmp	r3, #2
 8005082:	d914      	bls.n	80050ae <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2201      	movs	r2, #1
 800508c:	4013      	ands	r3, r2
 800508e:	2b01      	cmp	r3, #1
 8005090:	d00d      	beq.n	80050ae <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005096:	2210      	movs	r2, #16
 8005098:	431a      	orrs	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a2:	2201      	movs	r2, #1
 80050a4:	431a      	orrs	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e007      	b.n	80050be <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2201      	movs	r2, #1
 80050b6:	4013      	ands	r3, r2
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d1dc      	bne.n	8005076 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	0018      	movs	r0, r3
 80050c0:	46bd      	mov	sp, r7
 80050c2:	b004      	add	sp, #16
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	46c0      	nop			; (mov r8, r8)
 80050c8:	80000017 	.word	0x80000017
 80050cc:	2000008c 	.word	0x2000008c
 80050d0:	000f4240 	.word	0x000f4240

080050d4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050dc:	2300      	movs	r3, #0
 80050de:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	2203      	movs	r2, #3
 80050e8:	4013      	ands	r3, r2
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d112      	bne.n	8005114 <ADC_Disable+0x40>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2201      	movs	r2, #1
 80050f6:	4013      	ands	r3, r2
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d009      	beq.n	8005110 <ADC_Disable+0x3c>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68da      	ldr	r2, [r3, #12]
 8005102:	2380      	movs	r3, #128	; 0x80
 8005104:	021b      	lsls	r3, r3, #8
 8005106:	401a      	ands	r2, r3
 8005108:	2380      	movs	r3, #128	; 0x80
 800510a:	021b      	lsls	r3, r3, #8
 800510c:	429a      	cmp	r2, r3
 800510e:	d101      	bne.n	8005114 <ADC_Disable+0x40>
 8005110:	2301      	movs	r3, #1
 8005112:	e000      	b.n	8005116 <ADC_Disable+0x42>
 8005114:	2300      	movs	r3, #0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d048      	beq.n	80051ac <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	2205      	movs	r2, #5
 8005122:	4013      	ands	r3, r2
 8005124:	2b01      	cmp	r3, #1
 8005126:	d110      	bne.n	800514a <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	689a      	ldr	r2, [r3, #8]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2102      	movs	r1, #2
 8005134:	430a      	orrs	r2, r1
 8005136:	609a      	str	r2, [r3, #8]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2203      	movs	r2, #3
 800513e:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005140:	f7ff fb74 	bl	800482c <HAL_GetTick>
 8005144:	0003      	movs	r3, r0
 8005146:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005148:	e029      	b.n	800519e <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514e:	2210      	movs	r2, #16
 8005150:	431a      	orrs	r2, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800515a:	2201      	movs	r2, #1
 800515c:	431a      	orrs	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e023      	b.n	80051ae <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005166:	f7ff fb61 	bl	800482c <HAL_GetTick>
 800516a:	0002      	movs	r2, r0
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	2b02      	cmp	r3, #2
 8005172:	d914      	bls.n	800519e <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	2201      	movs	r2, #1
 800517c:	4013      	ands	r3, r2
 800517e:	2b01      	cmp	r3, #1
 8005180:	d10d      	bne.n	800519e <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005186:	2210      	movs	r2, #16
 8005188:	431a      	orrs	r2, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005192:	2201      	movs	r2, #1
 8005194:	431a      	orrs	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e007      	b.n	80051ae <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	2201      	movs	r2, #1
 80051a6:	4013      	ands	r3, r2
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d0dc      	beq.n	8005166 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	0018      	movs	r0, r3
 80051b0:	46bd      	mov	sp, r7
 80051b2:	b004      	add	sp, #16
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b084      	sub	sp, #16
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80051be:	2300      	movs	r3, #0
 80051c0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	2204      	movs	r2, #4
 80051ca:	4013      	ands	r3, r2
 80051cc:	d03a      	beq.n	8005244 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	2204      	movs	r2, #4
 80051d6:	4013      	ands	r3, r2
 80051d8:	2b04      	cmp	r3, #4
 80051da:	d10d      	bne.n	80051f8 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	2202      	movs	r2, #2
 80051e4:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80051e6:	d107      	bne.n	80051f8 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689a      	ldr	r2, [r3, #8]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2110      	movs	r1, #16
 80051f4:	430a      	orrs	r2, r1
 80051f6:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80051f8:	f7ff fb18 	bl	800482c <HAL_GetTick>
 80051fc:	0003      	movs	r3, r0
 80051fe:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8005200:	e01a      	b.n	8005238 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005202:	f7ff fb13 	bl	800482c <HAL_GetTick>
 8005206:	0002      	movs	r2, r0
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	2b02      	cmp	r3, #2
 800520e:	d913      	bls.n	8005238 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	2204      	movs	r2, #4
 8005218:	4013      	ands	r3, r2
 800521a:	d00d      	beq.n	8005238 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005220:	2210      	movs	r2, #16
 8005222:	431a      	orrs	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800522c:	2201      	movs	r2, #1
 800522e:	431a      	orrs	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e006      	b.n	8005246 <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	2204      	movs	r2, #4
 8005240:	4013      	ands	r3, r2
 8005242:	d1de      	bne.n	8005202 <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	0018      	movs	r0, r3
 8005248:	46bd      	mov	sp, r7
 800524a:	b004      	add	sp, #16
 800524c:	bd80      	pop	{r7, pc}
	...

08005250 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b086      	sub	sp, #24
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005258:	2317      	movs	r3, #23
 800525a:	18fb      	adds	r3, r7, r3
 800525c:	2200      	movs	r2, #0
 800525e:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8005260:	2300      	movs	r3, #0
 8005262:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8005264:	2300      	movs	r3, #0
 8005266:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2234      	movs	r2, #52	; 0x34
 800526c:	5c9b      	ldrb	r3, [r3, r2]
 800526e:	2b01      	cmp	r3, #1
 8005270:	d101      	bne.n	8005276 <HAL_ADCEx_Calibration_Start+0x26>
 8005272:	2302      	movs	r3, #2
 8005274:	e08d      	b.n	8005392 <HAL_ADCEx_Calibration_Start+0x142>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2234      	movs	r2, #52	; 0x34
 800527a:	2101      	movs	r1, #1
 800527c:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	2203      	movs	r2, #3
 8005286:	4013      	ands	r3, r2
 8005288:	2b01      	cmp	r3, #1
 800528a:	d112      	bne.n	80052b2 <HAL_ADCEx_Calibration_Start+0x62>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2201      	movs	r2, #1
 8005294:	4013      	ands	r3, r2
 8005296:	2b01      	cmp	r3, #1
 8005298:	d009      	beq.n	80052ae <HAL_ADCEx_Calibration_Start+0x5e>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68da      	ldr	r2, [r3, #12]
 80052a0:	2380      	movs	r3, #128	; 0x80
 80052a2:	021b      	lsls	r3, r3, #8
 80052a4:	401a      	ands	r2, r3
 80052a6:	2380      	movs	r3, #128	; 0x80
 80052a8:	021b      	lsls	r3, r3, #8
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d101      	bne.n	80052b2 <HAL_ADCEx_Calibration_Start+0x62>
 80052ae:	2301      	movs	r3, #1
 80052b0:	e000      	b.n	80052b4 <HAL_ADCEx_Calibration_Start+0x64>
 80052b2:	2300      	movs	r3, #0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d15b      	bne.n	8005370 <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052bc:	4a37      	ldr	r2, [pc, #220]	; (800539c <HAL_ADCEx_Calibration_Start+0x14c>)
 80052be:	4013      	ands	r3, r2
 80052c0:	2202      	movs	r2, #2
 80052c2:	431a      	orrs	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	2203      	movs	r2, #3
 80052d0:	4013      	ands	r3, r2
 80052d2:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68da      	ldr	r2, [r3, #12]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2103      	movs	r1, #3
 80052e0:	438a      	bics	r2, r1
 80052e2:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	689a      	ldr	r2, [r3, #8]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2180      	movs	r1, #128	; 0x80
 80052f0:	0609      	lsls	r1, r1, #24
 80052f2:	430a      	orrs	r2, r1
 80052f4:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80052f6:	f7ff fa99 	bl	800482c <HAL_GetTick>
 80052fa:	0003      	movs	r3, r0
 80052fc:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80052fe:	e01d      	b.n	800533c <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8005300:	f7ff fa94 	bl	800482c <HAL_GetTick>
 8005304:	0002      	movs	r2, r0
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	2b02      	cmp	r3, #2
 800530c:	d916      	bls.n	800533c <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	0fdb      	lsrs	r3, r3, #31
 8005316:	07da      	lsls	r2, r3, #31
 8005318:	2380      	movs	r3, #128	; 0x80
 800531a:	061b      	lsls	r3, r3, #24
 800531c:	429a      	cmp	r2, r3
 800531e:	d10d      	bne.n	800533c <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005324:	2212      	movs	r2, #18
 8005326:	4393      	bics	r3, r2
 8005328:	2210      	movs	r2, #16
 800532a:	431a      	orrs	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	639a      	str	r2, [r3, #56]	; 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2234      	movs	r2, #52	; 0x34
 8005334:	2100      	movs	r1, #0
 8005336:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e02a      	b.n	8005392 <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	0fdb      	lsrs	r3, r3, #31
 8005344:	07da      	lsls	r2, r3, #31
 8005346:	2380      	movs	r3, #128	; 0x80
 8005348:	061b      	lsls	r3, r3, #24
 800534a:	429a      	cmp	r2, r3
 800534c:	d0d8      	beq.n	8005300 <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68d9      	ldr	r1, [r3, #12]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	430a      	orrs	r2, r1
 800535c:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005362:	2203      	movs	r2, #3
 8005364:	4393      	bics	r3, r2
 8005366:	2201      	movs	r2, #1
 8005368:	431a      	orrs	r2, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	639a      	str	r2, [r3, #56]	; 0x38
 800536e:	e009      	b.n	8005384 <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005374:	2220      	movs	r2, #32
 8005376:	431a      	orrs	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800537c:	2317      	movs	r3, #23
 800537e:	18fb      	adds	r3, r7, r3
 8005380:	2201      	movs	r2, #1
 8005382:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2234      	movs	r2, #52	; 0x34
 8005388:	2100      	movs	r1, #0
 800538a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800538c:	2317      	movs	r3, #23
 800538e:	18fb      	adds	r3, r7, r3
 8005390:	781b      	ldrb	r3, [r3, #0]
}
 8005392:	0018      	movs	r0, r3
 8005394:	46bd      	mov	sp, r7
 8005396:	b006      	add	sp, #24
 8005398:	bd80      	pop	{r7, pc}
 800539a:	46c0      	nop			; (mov r8, r8)
 800539c:	fffffefd 	.word	0xfffffefd

080053a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	0002      	movs	r2, r0
 80053a8:	1dfb      	adds	r3, r7, #7
 80053aa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80053ac:	1dfb      	adds	r3, r7, #7
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	2b7f      	cmp	r3, #127	; 0x7f
 80053b2:	d809      	bhi.n	80053c8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053b4:	1dfb      	adds	r3, r7, #7
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	001a      	movs	r2, r3
 80053ba:	231f      	movs	r3, #31
 80053bc:	401a      	ands	r2, r3
 80053be:	4b04      	ldr	r3, [pc, #16]	; (80053d0 <__NVIC_EnableIRQ+0x30>)
 80053c0:	2101      	movs	r1, #1
 80053c2:	4091      	lsls	r1, r2
 80053c4:	000a      	movs	r2, r1
 80053c6:	601a      	str	r2, [r3, #0]
  }
}
 80053c8:	46c0      	nop			; (mov r8, r8)
 80053ca:	46bd      	mov	sp, r7
 80053cc:	b002      	add	sp, #8
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	e000e100 	.word	0xe000e100

080053d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80053d4:	b590      	push	{r4, r7, lr}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	0002      	movs	r2, r0
 80053dc:	6039      	str	r1, [r7, #0]
 80053de:	1dfb      	adds	r3, r7, #7
 80053e0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80053e2:	1dfb      	adds	r3, r7, #7
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	2b7f      	cmp	r3, #127	; 0x7f
 80053e8:	d828      	bhi.n	800543c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80053ea:	4a2f      	ldr	r2, [pc, #188]	; (80054a8 <__NVIC_SetPriority+0xd4>)
 80053ec:	1dfb      	adds	r3, r7, #7
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	b25b      	sxtb	r3, r3
 80053f2:	089b      	lsrs	r3, r3, #2
 80053f4:	33c0      	adds	r3, #192	; 0xc0
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	589b      	ldr	r3, [r3, r2]
 80053fa:	1dfa      	adds	r2, r7, #7
 80053fc:	7812      	ldrb	r2, [r2, #0]
 80053fe:	0011      	movs	r1, r2
 8005400:	2203      	movs	r2, #3
 8005402:	400a      	ands	r2, r1
 8005404:	00d2      	lsls	r2, r2, #3
 8005406:	21ff      	movs	r1, #255	; 0xff
 8005408:	4091      	lsls	r1, r2
 800540a:	000a      	movs	r2, r1
 800540c:	43d2      	mvns	r2, r2
 800540e:	401a      	ands	r2, r3
 8005410:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	019b      	lsls	r3, r3, #6
 8005416:	22ff      	movs	r2, #255	; 0xff
 8005418:	401a      	ands	r2, r3
 800541a:	1dfb      	adds	r3, r7, #7
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	0018      	movs	r0, r3
 8005420:	2303      	movs	r3, #3
 8005422:	4003      	ands	r3, r0
 8005424:	00db      	lsls	r3, r3, #3
 8005426:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005428:	481f      	ldr	r0, [pc, #124]	; (80054a8 <__NVIC_SetPriority+0xd4>)
 800542a:	1dfb      	adds	r3, r7, #7
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	b25b      	sxtb	r3, r3
 8005430:	089b      	lsrs	r3, r3, #2
 8005432:	430a      	orrs	r2, r1
 8005434:	33c0      	adds	r3, #192	; 0xc0
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800543a:	e031      	b.n	80054a0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800543c:	4a1b      	ldr	r2, [pc, #108]	; (80054ac <__NVIC_SetPriority+0xd8>)
 800543e:	1dfb      	adds	r3, r7, #7
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	0019      	movs	r1, r3
 8005444:	230f      	movs	r3, #15
 8005446:	400b      	ands	r3, r1
 8005448:	3b08      	subs	r3, #8
 800544a:	089b      	lsrs	r3, r3, #2
 800544c:	3306      	adds	r3, #6
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	18d3      	adds	r3, r2, r3
 8005452:	3304      	adds	r3, #4
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	1dfa      	adds	r2, r7, #7
 8005458:	7812      	ldrb	r2, [r2, #0]
 800545a:	0011      	movs	r1, r2
 800545c:	2203      	movs	r2, #3
 800545e:	400a      	ands	r2, r1
 8005460:	00d2      	lsls	r2, r2, #3
 8005462:	21ff      	movs	r1, #255	; 0xff
 8005464:	4091      	lsls	r1, r2
 8005466:	000a      	movs	r2, r1
 8005468:	43d2      	mvns	r2, r2
 800546a:	401a      	ands	r2, r3
 800546c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	019b      	lsls	r3, r3, #6
 8005472:	22ff      	movs	r2, #255	; 0xff
 8005474:	401a      	ands	r2, r3
 8005476:	1dfb      	adds	r3, r7, #7
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	0018      	movs	r0, r3
 800547c:	2303      	movs	r3, #3
 800547e:	4003      	ands	r3, r0
 8005480:	00db      	lsls	r3, r3, #3
 8005482:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005484:	4809      	ldr	r0, [pc, #36]	; (80054ac <__NVIC_SetPriority+0xd8>)
 8005486:	1dfb      	adds	r3, r7, #7
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	001c      	movs	r4, r3
 800548c:	230f      	movs	r3, #15
 800548e:	4023      	ands	r3, r4
 8005490:	3b08      	subs	r3, #8
 8005492:	089b      	lsrs	r3, r3, #2
 8005494:	430a      	orrs	r2, r1
 8005496:	3306      	adds	r3, #6
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	18c3      	adds	r3, r0, r3
 800549c:	3304      	adds	r3, #4
 800549e:	601a      	str	r2, [r3, #0]
}
 80054a0:	46c0      	nop			; (mov r8, r8)
 80054a2:	46bd      	mov	sp, r7
 80054a4:	b003      	add	sp, #12
 80054a6:	bd90      	pop	{r4, r7, pc}
 80054a8:	e000e100 	.word	0xe000e100
 80054ac:	e000ed00 	.word	0xe000ed00

080054b0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60b9      	str	r1, [r7, #8]
 80054b8:	607a      	str	r2, [r7, #4]
 80054ba:	210f      	movs	r1, #15
 80054bc:	187b      	adds	r3, r7, r1
 80054be:	1c02      	adds	r2, r0, #0
 80054c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	187b      	adds	r3, r7, r1
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	b25b      	sxtb	r3, r3
 80054ca:	0011      	movs	r1, r2
 80054cc:	0018      	movs	r0, r3
 80054ce:	f7ff ff81 	bl	80053d4 <__NVIC_SetPriority>
}
 80054d2:	46c0      	nop			; (mov r8, r8)
 80054d4:	46bd      	mov	sp, r7
 80054d6:	b004      	add	sp, #16
 80054d8:	bd80      	pop	{r7, pc}

080054da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054da:	b580      	push	{r7, lr}
 80054dc:	b082      	sub	sp, #8
 80054de:	af00      	add	r7, sp, #0
 80054e0:	0002      	movs	r2, r0
 80054e2:	1dfb      	adds	r3, r7, #7
 80054e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80054e6:	1dfb      	adds	r3, r7, #7
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	b25b      	sxtb	r3, r3
 80054ec:	0018      	movs	r0, r3
 80054ee:	f7ff ff57 	bl	80053a0 <__NVIC_EnableIRQ>
}
 80054f2:	46c0      	nop			; (mov r8, r8)
 80054f4:	46bd      	mov	sp, r7
 80054f6:	b002      	add	sp, #8
 80054f8:	bd80      	pop	{r7, pc}

080054fa <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b082      	sub	sp, #8
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2221      	movs	r2, #33	; 0x21
 8005506:	5c9b      	ldrb	r3, [r3, r2]
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b02      	cmp	r3, #2
 800550c:	d008      	beq.n	8005520 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2204      	movs	r2, #4
 8005512:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2220      	movs	r2, #32
 8005518:	2100      	movs	r1, #0
 800551a:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e020      	b.n	8005562 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	210e      	movs	r1, #14
 800552c:	438a      	bics	r2, r1
 800552e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2101      	movs	r1, #1
 800553c:	438a      	bics	r2, r1
 800553e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005548:	2101      	movs	r1, #1
 800554a:	4091      	lsls	r1, r2
 800554c:	000a      	movs	r2, r1
 800554e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2221      	movs	r2, #33	; 0x21
 8005554:	2101      	movs	r1, #1
 8005556:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2220      	movs	r2, #32
 800555c:	2100      	movs	r1, #0
 800555e:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	0018      	movs	r0, r3
 8005564:	46bd      	mov	sp, r7
 8005566:	b002      	add	sp, #8
 8005568:	bd80      	pop	{r7, pc}

0800556a <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800556a:	b580      	push	{r7, lr}
 800556c:	b084      	sub	sp, #16
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005572:	210f      	movs	r1, #15
 8005574:	187b      	adds	r3, r7, r1
 8005576:	2200      	movs	r2, #0
 8005578:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2221      	movs	r2, #33	; 0x21
 800557e:	5c9b      	ldrb	r3, [r3, r2]
 8005580:	b2db      	uxtb	r3, r3
 8005582:	2b02      	cmp	r3, #2
 8005584:	d006      	beq.n	8005594 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2204      	movs	r2, #4
 800558a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800558c:	187b      	adds	r3, r7, r1
 800558e:	2201      	movs	r2, #1
 8005590:	701a      	strb	r2, [r3, #0]
 8005592:	e028      	b.n	80055e6 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	210e      	movs	r1, #14
 80055a0:	438a      	bics	r2, r1
 80055a2:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2101      	movs	r1, #1
 80055b0:	438a      	bics	r2, r1
 80055b2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055bc:	2101      	movs	r1, #1
 80055be:	4091      	lsls	r1, r2
 80055c0:	000a      	movs	r2, r1
 80055c2:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2221      	movs	r2, #33	; 0x21
 80055c8:	2101      	movs	r1, #1
 80055ca:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2220      	movs	r2, #32
 80055d0:	2100      	movs	r1, #0
 80055d2:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d004      	beq.n	80055e6 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	0010      	movs	r0, r2
 80055e4:	4798      	blx	r3
    } 
  }
  return status;
 80055e6:	230f      	movs	r3, #15
 80055e8:	18fb      	adds	r3, r7, r3
 80055ea:	781b      	ldrb	r3, [r3, #0]
}
 80055ec:	0018      	movs	r0, r3
 80055ee:	46bd      	mov	sp, r7
 80055f0:	b004      	add	sp, #16
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b086      	sub	sp, #24
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80055fe:	2300      	movs	r3, #0
 8005600:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005602:	e14f      	b.n	80058a4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2101      	movs	r1, #1
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	4091      	lsls	r1, r2
 800560e:	000a      	movs	r2, r1
 8005610:	4013      	ands	r3, r2
 8005612:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d100      	bne.n	800561c <HAL_GPIO_Init+0x28>
 800561a:	e140      	b.n	800589e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	2203      	movs	r2, #3
 8005622:	4013      	ands	r3, r2
 8005624:	2b01      	cmp	r3, #1
 8005626:	d005      	beq.n	8005634 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	2203      	movs	r2, #3
 800562e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005630:	2b02      	cmp	r3, #2
 8005632:	d130      	bne.n	8005696 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	005b      	lsls	r3, r3, #1
 800563e:	2203      	movs	r2, #3
 8005640:	409a      	lsls	r2, r3
 8005642:	0013      	movs	r3, r2
 8005644:	43da      	mvns	r2, r3
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	4013      	ands	r3, r2
 800564a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	68da      	ldr	r2, [r3, #12]
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	005b      	lsls	r3, r3, #1
 8005654:	409a      	lsls	r2, r3
 8005656:	0013      	movs	r3, r2
 8005658:	693a      	ldr	r2, [r7, #16]
 800565a:	4313      	orrs	r3, r2
 800565c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800566a:	2201      	movs	r2, #1
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	409a      	lsls	r2, r3
 8005670:	0013      	movs	r3, r2
 8005672:	43da      	mvns	r2, r3
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	4013      	ands	r3, r2
 8005678:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	091b      	lsrs	r3, r3, #4
 8005680:	2201      	movs	r2, #1
 8005682:	401a      	ands	r2, r3
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	409a      	lsls	r2, r3
 8005688:	0013      	movs	r3, r2
 800568a:	693a      	ldr	r2, [r7, #16]
 800568c:	4313      	orrs	r3, r2
 800568e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	2203      	movs	r2, #3
 800569c:	4013      	ands	r3, r2
 800569e:	2b03      	cmp	r3, #3
 80056a0:	d017      	beq.n	80056d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	005b      	lsls	r3, r3, #1
 80056ac:	2203      	movs	r2, #3
 80056ae:	409a      	lsls	r2, r3
 80056b0:	0013      	movs	r3, r2
 80056b2:	43da      	mvns	r2, r3
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	4013      	ands	r3, r2
 80056b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	689a      	ldr	r2, [r3, #8]
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	005b      	lsls	r3, r3, #1
 80056c2:	409a      	lsls	r2, r3
 80056c4:	0013      	movs	r3, r2
 80056c6:	693a      	ldr	r2, [r7, #16]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	693a      	ldr	r2, [r7, #16]
 80056d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	2203      	movs	r2, #3
 80056d8:	4013      	ands	r3, r2
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d123      	bne.n	8005726 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	08da      	lsrs	r2, r3, #3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	3208      	adds	r2, #8
 80056e6:	0092      	lsls	r2, r2, #2
 80056e8:	58d3      	ldr	r3, [r2, r3]
 80056ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	2207      	movs	r2, #7
 80056f0:	4013      	ands	r3, r2
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	220f      	movs	r2, #15
 80056f6:	409a      	lsls	r2, r3
 80056f8:	0013      	movs	r3, r2
 80056fa:	43da      	mvns	r2, r3
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	4013      	ands	r3, r2
 8005700:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	691a      	ldr	r2, [r3, #16]
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	2107      	movs	r1, #7
 800570a:	400b      	ands	r3, r1
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	409a      	lsls	r2, r3
 8005710:	0013      	movs	r3, r2
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	4313      	orrs	r3, r2
 8005716:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	08da      	lsrs	r2, r3, #3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	3208      	adds	r2, #8
 8005720:	0092      	lsls	r2, r2, #2
 8005722:	6939      	ldr	r1, [r7, #16]
 8005724:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	005b      	lsls	r3, r3, #1
 8005730:	2203      	movs	r2, #3
 8005732:	409a      	lsls	r2, r3
 8005734:	0013      	movs	r3, r2
 8005736:	43da      	mvns	r2, r3
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	4013      	ands	r3, r2
 800573c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	2203      	movs	r2, #3
 8005744:	401a      	ands	r2, r3
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	005b      	lsls	r3, r3, #1
 800574a:	409a      	lsls	r2, r3
 800574c:	0013      	movs	r3, r2
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	4313      	orrs	r3, r2
 8005752:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	693a      	ldr	r2, [r7, #16]
 8005758:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	685a      	ldr	r2, [r3, #4]
 800575e:	23c0      	movs	r3, #192	; 0xc0
 8005760:	029b      	lsls	r3, r3, #10
 8005762:	4013      	ands	r3, r2
 8005764:	d100      	bne.n	8005768 <HAL_GPIO_Init+0x174>
 8005766:	e09a      	b.n	800589e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005768:	4b54      	ldr	r3, [pc, #336]	; (80058bc <HAL_GPIO_Init+0x2c8>)
 800576a:	699a      	ldr	r2, [r3, #24]
 800576c:	4b53      	ldr	r3, [pc, #332]	; (80058bc <HAL_GPIO_Init+0x2c8>)
 800576e:	2101      	movs	r1, #1
 8005770:	430a      	orrs	r2, r1
 8005772:	619a      	str	r2, [r3, #24]
 8005774:	4b51      	ldr	r3, [pc, #324]	; (80058bc <HAL_GPIO_Init+0x2c8>)
 8005776:	699b      	ldr	r3, [r3, #24]
 8005778:	2201      	movs	r2, #1
 800577a:	4013      	ands	r3, r2
 800577c:	60bb      	str	r3, [r7, #8]
 800577e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005780:	4a4f      	ldr	r2, [pc, #316]	; (80058c0 <HAL_GPIO_Init+0x2cc>)
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	089b      	lsrs	r3, r3, #2
 8005786:	3302      	adds	r3, #2
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	589b      	ldr	r3, [r3, r2]
 800578c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	2203      	movs	r2, #3
 8005792:	4013      	ands	r3, r2
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	220f      	movs	r2, #15
 8005798:	409a      	lsls	r2, r3
 800579a:	0013      	movs	r3, r2
 800579c:	43da      	mvns	r2, r3
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	4013      	ands	r3, r2
 80057a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	2390      	movs	r3, #144	; 0x90
 80057a8:	05db      	lsls	r3, r3, #23
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d013      	beq.n	80057d6 <HAL_GPIO_Init+0x1e2>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a44      	ldr	r2, [pc, #272]	; (80058c4 <HAL_GPIO_Init+0x2d0>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d00d      	beq.n	80057d2 <HAL_GPIO_Init+0x1de>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a43      	ldr	r2, [pc, #268]	; (80058c8 <HAL_GPIO_Init+0x2d4>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d007      	beq.n	80057ce <HAL_GPIO_Init+0x1da>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a42      	ldr	r2, [pc, #264]	; (80058cc <HAL_GPIO_Init+0x2d8>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d101      	bne.n	80057ca <HAL_GPIO_Init+0x1d6>
 80057c6:	2303      	movs	r3, #3
 80057c8:	e006      	b.n	80057d8 <HAL_GPIO_Init+0x1e4>
 80057ca:	2305      	movs	r3, #5
 80057cc:	e004      	b.n	80057d8 <HAL_GPIO_Init+0x1e4>
 80057ce:	2302      	movs	r3, #2
 80057d0:	e002      	b.n	80057d8 <HAL_GPIO_Init+0x1e4>
 80057d2:	2301      	movs	r3, #1
 80057d4:	e000      	b.n	80057d8 <HAL_GPIO_Init+0x1e4>
 80057d6:	2300      	movs	r3, #0
 80057d8:	697a      	ldr	r2, [r7, #20]
 80057da:	2103      	movs	r1, #3
 80057dc:	400a      	ands	r2, r1
 80057de:	0092      	lsls	r2, r2, #2
 80057e0:	4093      	lsls	r3, r2
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80057e8:	4935      	ldr	r1, [pc, #212]	; (80058c0 <HAL_GPIO_Init+0x2cc>)
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	089b      	lsrs	r3, r3, #2
 80057ee:	3302      	adds	r3, #2
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	693a      	ldr	r2, [r7, #16]
 80057f4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80057f6:	4b36      	ldr	r3, [pc, #216]	; (80058d0 <HAL_GPIO_Init+0x2dc>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	43da      	mvns	r2, r3
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	4013      	ands	r3, r2
 8005804:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	685a      	ldr	r2, [r3, #4]
 800580a:	2380      	movs	r3, #128	; 0x80
 800580c:	025b      	lsls	r3, r3, #9
 800580e:	4013      	ands	r3, r2
 8005810:	d003      	beq.n	800581a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8005812:	693a      	ldr	r2, [r7, #16]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	4313      	orrs	r3, r2
 8005818:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800581a:	4b2d      	ldr	r3, [pc, #180]	; (80058d0 <HAL_GPIO_Init+0x2dc>)
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8005820:	4b2b      	ldr	r3, [pc, #172]	; (80058d0 <HAL_GPIO_Init+0x2dc>)
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	43da      	mvns	r2, r3
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	4013      	ands	r3, r2
 800582e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	685a      	ldr	r2, [r3, #4]
 8005834:	2380      	movs	r3, #128	; 0x80
 8005836:	029b      	lsls	r3, r3, #10
 8005838:	4013      	ands	r3, r2
 800583a:	d003      	beq.n	8005844 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800583c:	693a      	ldr	r2, [r7, #16]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	4313      	orrs	r3, r2
 8005842:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005844:	4b22      	ldr	r3, [pc, #136]	; (80058d0 <HAL_GPIO_Init+0x2dc>)
 8005846:	693a      	ldr	r2, [r7, #16]
 8005848:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800584a:	4b21      	ldr	r3, [pc, #132]	; (80058d0 <HAL_GPIO_Init+0x2dc>)
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	43da      	mvns	r2, r3
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	4013      	ands	r3, r2
 8005858:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	685a      	ldr	r2, [r3, #4]
 800585e:	2380      	movs	r3, #128	; 0x80
 8005860:	035b      	lsls	r3, r3, #13
 8005862:	4013      	ands	r3, r2
 8005864:	d003      	beq.n	800586e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	4313      	orrs	r3, r2
 800586c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800586e:	4b18      	ldr	r3, [pc, #96]	; (80058d0 <HAL_GPIO_Init+0x2dc>)
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8005874:	4b16      	ldr	r3, [pc, #88]	; (80058d0 <HAL_GPIO_Init+0x2dc>)
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	43da      	mvns	r2, r3
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	4013      	ands	r3, r2
 8005882:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	685a      	ldr	r2, [r3, #4]
 8005888:	2380      	movs	r3, #128	; 0x80
 800588a:	039b      	lsls	r3, r3, #14
 800588c:	4013      	ands	r3, r2
 800588e:	d003      	beq.n	8005898 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8005890:	693a      	ldr	r2, [r7, #16]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	4313      	orrs	r3, r2
 8005896:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005898:	4b0d      	ldr	r3, [pc, #52]	; (80058d0 <HAL_GPIO_Init+0x2dc>)
 800589a:	693a      	ldr	r2, [r7, #16]
 800589c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	3301      	adds	r3, #1
 80058a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	40da      	lsrs	r2, r3
 80058ac:	1e13      	subs	r3, r2, #0
 80058ae:	d000      	beq.n	80058b2 <HAL_GPIO_Init+0x2be>
 80058b0:	e6a8      	b.n	8005604 <HAL_GPIO_Init+0x10>
  } 
}
 80058b2:	46c0      	nop			; (mov r8, r8)
 80058b4:	46c0      	nop			; (mov r8, r8)
 80058b6:	46bd      	mov	sp, r7
 80058b8:	b006      	add	sp, #24
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	40021000 	.word	0x40021000
 80058c0:	40010000 	.word	0x40010000
 80058c4:	48000400 	.word	0x48000400
 80058c8:	48000800 	.word	0x48000800
 80058cc:	48000c00 	.word	0x48000c00
 80058d0:	40010400 	.word	0x40010400

080058d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b082      	sub	sp, #8
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	0008      	movs	r0, r1
 80058de:	0011      	movs	r1, r2
 80058e0:	1cbb      	adds	r3, r7, #2
 80058e2:	1c02      	adds	r2, r0, #0
 80058e4:	801a      	strh	r2, [r3, #0]
 80058e6:	1c7b      	adds	r3, r7, #1
 80058e8:	1c0a      	adds	r2, r1, #0
 80058ea:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80058ec:	1c7b      	adds	r3, r7, #1
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d004      	beq.n	80058fe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80058f4:	1cbb      	adds	r3, r7, #2
 80058f6:	881a      	ldrh	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80058fc:	e003      	b.n	8005906 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80058fe:	1cbb      	adds	r3, r7, #2
 8005900:	881a      	ldrh	r2, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005906:	46c0      	nop			; (mov r8, r8)
 8005908:	46bd      	mov	sp, r7
 800590a:	b002      	add	sp, #8
 800590c:	bd80      	pop	{r7, pc}
	...

08005910 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e082      	b.n	8005a28 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2241      	movs	r2, #65	; 0x41
 8005926:	5c9b      	ldrb	r3, [r3, r2]
 8005928:	b2db      	uxtb	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d107      	bne.n	800593e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2240      	movs	r2, #64	; 0x40
 8005932:	2100      	movs	r1, #0
 8005934:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	0018      	movs	r0, r3
 800593a:	f7fe fcb3 	bl	80042a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2241      	movs	r2, #65	; 0x41
 8005942:	2124      	movs	r1, #36	; 0x24
 8005944:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2101      	movs	r1, #1
 8005952:	438a      	bics	r2, r1
 8005954:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685a      	ldr	r2, [r3, #4]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4934      	ldr	r1, [pc, #208]	; (8005a30 <HAL_I2C_Init+0x120>)
 8005960:	400a      	ands	r2, r1
 8005962:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	689a      	ldr	r2, [r3, #8]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4931      	ldr	r1, [pc, #196]	; (8005a34 <HAL_I2C_Init+0x124>)
 8005970:	400a      	ands	r2, r1
 8005972:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	2b01      	cmp	r3, #1
 800597a:	d108      	bne.n	800598e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	689a      	ldr	r2, [r3, #8]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2180      	movs	r1, #128	; 0x80
 8005986:	0209      	lsls	r1, r1, #8
 8005988:	430a      	orrs	r2, r1
 800598a:	609a      	str	r2, [r3, #8]
 800598c:	e007      	b.n	800599e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	689a      	ldr	r2, [r3, #8]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2184      	movs	r1, #132	; 0x84
 8005998:	0209      	lsls	r1, r1, #8
 800599a:	430a      	orrs	r2, r1
 800599c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d104      	bne.n	80059b0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2280      	movs	r2, #128	; 0x80
 80059ac:	0112      	lsls	r2, r2, #4
 80059ae:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	685a      	ldr	r2, [r3, #4]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	491f      	ldr	r1, [pc, #124]	; (8005a38 <HAL_I2C_Init+0x128>)
 80059bc:	430a      	orrs	r2, r1
 80059be:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68da      	ldr	r2, [r3, #12]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	491a      	ldr	r1, [pc, #104]	; (8005a34 <HAL_I2C_Init+0x124>)
 80059cc:	400a      	ands	r2, r1
 80059ce:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	691a      	ldr	r2, [r3, #16]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	695b      	ldr	r3, [r3, #20]
 80059d8:	431a      	orrs	r2, r3
 80059da:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	699b      	ldr	r3, [r3, #24]
 80059e0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	430a      	orrs	r2, r1
 80059e8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	69d9      	ldr	r1, [r3, #28]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a1a      	ldr	r2, [r3, #32]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	430a      	orrs	r2, r1
 80059f8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2101      	movs	r1, #1
 8005a06:	430a      	orrs	r2, r1
 8005a08:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2241      	movs	r2, #65	; 0x41
 8005a14:	2120      	movs	r1, #32
 8005a16:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2242      	movs	r2, #66	; 0x42
 8005a22:	2100      	movs	r1, #0
 8005a24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a26:	2300      	movs	r3, #0
}
 8005a28:	0018      	movs	r0, r3
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	b002      	add	sp, #8
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	f0ffffff 	.word	0xf0ffffff
 8005a34:	ffff7fff 	.word	0xffff7fff
 8005a38:	02008000 	.word	0x02008000

08005a3c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005a3c:	b590      	push	{r4, r7, lr}
 8005a3e:	b089      	sub	sp, #36	; 0x24
 8005a40:	af02      	add	r7, sp, #8
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	0008      	movs	r0, r1
 8005a46:	607a      	str	r2, [r7, #4]
 8005a48:	0019      	movs	r1, r3
 8005a4a:	230a      	movs	r3, #10
 8005a4c:	18fb      	adds	r3, r7, r3
 8005a4e:	1c02      	adds	r2, r0, #0
 8005a50:	801a      	strh	r2, [r3, #0]
 8005a52:	2308      	movs	r3, #8
 8005a54:	18fb      	adds	r3, r7, r3
 8005a56:	1c0a      	adds	r2, r1, #0
 8005a58:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2241      	movs	r2, #65	; 0x41
 8005a5e:	5c9b      	ldrb	r3, [r3, r2]
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	2b20      	cmp	r3, #32
 8005a64:	d000      	beq.n	8005a68 <HAL_I2C_Master_Transmit+0x2c>
 8005a66:	e0e7      	b.n	8005c38 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2240      	movs	r2, #64	; 0x40
 8005a6c:	5c9b      	ldrb	r3, [r3, r2]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d101      	bne.n	8005a76 <HAL_I2C_Master_Transmit+0x3a>
 8005a72:	2302      	movs	r3, #2
 8005a74:	e0e1      	b.n	8005c3a <HAL_I2C_Master_Transmit+0x1fe>
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2240      	movs	r2, #64	; 0x40
 8005a7a:	2101      	movs	r1, #1
 8005a7c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005a7e:	f7fe fed5 	bl	800482c <HAL_GetTick>
 8005a82:	0003      	movs	r3, r0
 8005a84:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005a86:	2380      	movs	r3, #128	; 0x80
 8005a88:	0219      	lsls	r1, r3, #8
 8005a8a:	68f8      	ldr	r0, [r7, #12]
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	9300      	str	r3, [sp, #0]
 8005a90:	2319      	movs	r3, #25
 8005a92:	2201      	movs	r2, #1
 8005a94:	f000 f8fc 	bl	8005c90 <I2C_WaitOnFlagUntilTimeout>
 8005a98:	1e03      	subs	r3, r0, #0
 8005a9a:	d001      	beq.n	8005aa0 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e0cc      	b.n	8005c3a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2241      	movs	r2, #65	; 0x41
 8005aa4:	2121      	movs	r1, #33	; 0x21
 8005aa6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2242      	movs	r2, #66	; 0x42
 8005aac:	2110      	movs	r1, #16
 8005aae:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2208      	movs	r2, #8
 8005ac0:	18ba      	adds	r2, r7, r2
 8005ac2:	8812      	ldrh	r2, [r2, #0]
 8005ac4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	2bff      	cmp	r3, #255	; 0xff
 8005ad4:	d911      	bls.n	8005afa <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	22ff      	movs	r2, #255	; 0xff
 8005ada:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ae0:	b2da      	uxtb	r2, r3
 8005ae2:	2380      	movs	r3, #128	; 0x80
 8005ae4:	045c      	lsls	r4, r3, #17
 8005ae6:	230a      	movs	r3, #10
 8005ae8:	18fb      	adds	r3, r7, r3
 8005aea:	8819      	ldrh	r1, [r3, #0]
 8005aec:	68f8      	ldr	r0, [r7, #12]
 8005aee:	4b55      	ldr	r3, [pc, #340]	; (8005c44 <HAL_I2C_Master_Transmit+0x208>)
 8005af0:	9300      	str	r3, [sp, #0]
 8005af2:	0023      	movs	r3, r4
 8005af4:	f000 fa00 	bl	8005ef8 <I2C_TransferConfig>
 8005af8:	e075      	b.n	8005be6 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b08:	b2da      	uxtb	r2, r3
 8005b0a:	2380      	movs	r3, #128	; 0x80
 8005b0c:	049c      	lsls	r4, r3, #18
 8005b0e:	230a      	movs	r3, #10
 8005b10:	18fb      	adds	r3, r7, r3
 8005b12:	8819      	ldrh	r1, [r3, #0]
 8005b14:	68f8      	ldr	r0, [r7, #12]
 8005b16:	4b4b      	ldr	r3, [pc, #300]	; (8005c44 <HAL_I2C_Master_Transmit+0x208>)
 8005b18:	9300      	str	r3, [sp, #0]
 8005b1a:	0023      	movs	r3, r4
 8005b1c:	f000 f9ec 	bl	8005ef8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005b20:	e061      	b.n	8005be6 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	0018      	movs	r0, r3
 8005b2a:	f000 f8f0 	bl	8005d0e <I2C_WaitOnTXISFlagUntilTimeout>
 8005b2e:	1e03      	subs	r3, r0, #0
 8005b30:	d001      	beq.n	8005b36 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e081      	b.n	8005c3a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3a:	781a      	ldrb	r2, [r3, #0]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b46:	1c5a      	adds	r2, r3, #1
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	3b01      	subs	r3, #1
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	b29a      	uxth	r2, r3
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d03a      	beq.n	8005be6 <HAL_I2C_Master_Transmit+0x1aa>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d136      	bne.n	8005be6 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005b78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b7a:	68f8      	ldr	r0, [r7, #12]
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	9300      	str	r3, [sp, #0]
 8005b80:	0013      	movs	r3, r2
 8005b82:	2200      	movs	r2, #0
 8005b84:	2180      	movs	r1, #128	; 0x80
 8005b86:	f000 f883 	bl	8005c90 <I2C_WaitOnFlagUntilTimeout>
 8005b8a:	1e03      	subs	r3, r0, #0
 8005b8c:	d001      	beq.n	8005b92 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e053      	b.n	8005c3a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	2bff      	cmp	r3, #255	; 0xff
 8005b9a:	d911      	bls.n	8005bc0 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	22ff      	movs	r2, #255	; 0xff
 8005ba0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ba6:	b2da      	uxtb	r2, r3
 8005ba8:	2380      	movs	r3, #128	; 0x80
 8005baa:	045c      	lsls	r4, r3, #17
 8005bac:	230a      	movs	r3, #10
 8005bae:	18fb      	adds	r3, r7, r3
 8005bb0:	8819      	ldrh	r1, [r3, #0]
 8005bb2:	68f8      	ldr	r0, [r7, #12]
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	9300      	str	r3, [sp, #0]
 8005bb8:	0023      	movs	r3, r4
 8005bba:	f000 f99d 	bl	8005ef8 <I2C_TransferConfig>
 8005bbe:	e012      	b.n	8005be6 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bc4:	b29a      	uxth	r2, r3
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bce:	b2da      	uxtb	r2, r3
 8005bd0:	2380      	movs	r3, #128	; 0x80
 8005bd2:	049c      	lsls	r4, r3, #18
 8005bd4:	230a      	movs	r3, #10
 8005bd6:	18fb      	adds	r3, r7, r3
 8005bd8:	8819      	ldrh	r1, [r3, #0]
 8005bda:	68f8      	ldr	r0, [r7, #12]
 8005bdc:	2300      	movs	r3, #0
 8005bde:	9300      	str	r3, [sp, #0]
 8005be0:	0023      	movs	r3, r4
 8005be2:	f000 f989 	bl	8005ef8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d198      	bne.n	8005b22 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bf0:	697a      	ldr	r2, [r7, #20]
 8005bf2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	0018      	movs	r0, r3
 8005bf8:	f000 f8c8 	bl	8005d8c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005bfc:	1e03      	subs	r3, r0, #0
 8005bfe:	d001      	beq.n	8005c04 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e01a      	b.n	8005c3a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2220      	movs	r2, #32
 8005c0a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	685a      	ldr	r2, [r3, #4]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	490c      	ldr	r1, [pc, #48]	; (8005c48 <HAL_I2C_Master_Transmit+0x20c>)
 8005c18:	400a      	ands	r2, r1
 8005c1a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2241      	movs	r2, #65	; 0x41
 8005c20:	2120      	movs	r1, #32
 8005c22:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2242      	movs	r2, #66	; 0x42
 8005c28:	2100      	movs	r1, #0
 8005c2a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2240      	movs	r2, #64	; 0x40
 8005c30:	2100      	movs	r1, #0
 8005c32:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005c34:	2300      	movs	r3, #0
 8005c36:	e000      	b.n	8005c3a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8005c38:	2302      	movs	r3, #2
  }
}
 8005c3a:	0018      	movs	r0, r3
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	b007      	add	sp, #28
 8005c40:	bd90      	pop	{r4, r7, pc}
 8005c42:	46c0      	nop			; (mov r8, r8)
 8005c44:	80002000 	.word	0x80002000
 8005c48:	fe00e800 	.word	0xfe00e800

08005c4c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b082      	sub	sp, #8
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	2202      	movs	r2, #2
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d103      	bne.n	8005c6a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2200      	movs	r2, #0
 8005c68:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	699b      	ldr	r3, [r3, #24]
 8005c70:	2201      	movs	r2, #1
 8005c72:	4013      	ands	r3, r2
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d007      	beq.n	8005c88 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	699a      	ldr	r2, [r3, #24]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2101      	movs	r1, #1
 8005c84:	430a      	orrs	r2, r1
 8005c86:	619a      	str	r2, [r3, #24]
  }
}
 8005c88:	46c0      	nop			; (mov r8, r8)
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	b002      	add	sp, #8
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	603b      	str	r3, [r7, #0]
 8005c9c:	1dfb      	adds	r3, r7, #7
 8005c9e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ca0:	e021      	b.n	8005ce6 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	d01e      	beq.n	8005ce6 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ca8:	f7fe fdc0 	bl	800482c <HAL_GetTick>
 8005cac:	0002      	movs	r2, r0
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	683a      	ldr	r2, [r7, #0]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d302      	bcc.n	8005cbe <I2C_WaitOnFlagUntilTimeout+0x2e>
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d113      	bne.n	8005ce6 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cc2:	2220      	movs	r2, #32
 8005cc4:	431a      	orrs	r2, r3
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2241      	movs	r2, #65	; 0x41
 8005cce:	2120      	movs	r1, #32
 8005cd0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2242      	movs	r2, #66	; 0x42
 8005cd6:	2100      	movs	r1, #0
 8005cd8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2240      	movs	r2, #64	; 0x40
 8005cde:	2100      	movs	r1, #0
 8005ce0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e00f      	b.n	8005d06 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	699b      	ldr	r3, [r3, #24]
 8005cec:	68ba      	ldr	r2, [r7, #8]
 8005cee:	4013      	ands	r3, r2
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	1ad3      	subs	r3, r2, r3
 8005cf4:	425a      	negs	r2, r3
 8005cf6:	4153      	adcs	r3, r2
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	001a      	movs	r2, r3
 8005cfc:	1dfb      	adds	r3, r7, #7
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d0ce      	beq.n	8005ca2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	0018      	movs	r0, r3
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	b004      	add	sp, #16
 8005d0c:	bd80      	pop	{r7, pc}

08005d0e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005d0e:	b580      	push	{r7, lr}
 8005d10:	b084      	sub	sp, #16
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	60f8      	str	r0, [r7, #12]
 8005d16:	60b9      	str	r1, [r7, #8]
 8005d18:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005d1a:	e02b      	b.n	8005d74 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	68b9      	ldr	r1, [r7, #8]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	0018      	movs	r0, r3
 8005d24:	f000 f86e 	bl	8005e04 <I2C_IsAcknowledgeFailed>
 8005d28:	1e03      	subs	r3, r0, #0
 8005d2a:	d001      	beq.n	8005d30 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e029      	b.n	8005d84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	3301      	adds	r3, #1
 8005d34:	d01e      	beq.n	8005d74 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d36:	f7fe fd79 	bl	800482c <HAL_GetTick>
 8005d3a:	0002      	movs	r2, r0
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	1ad3      	subs	r3, r2, r3
 8005d40:	68ba      	ldr	r2, [r7, #8]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d302      	bcc.n	8005d4c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d113      	bne.n	8005d74 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d50:	2220      	movs	r2, #32
 8005d52:	431a      	orrs	r2, r3
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2241      	movs	r2, #65	; 0x41
 8005d5c:	2120      	movs	r1, #32
 8005d5e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2242      	movs	r2, #66	; 0x42
 8005d64:	2100      	movs	r1, #0
 8005d66:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2240      	movs	r2, #64	; 0x40
 8005d6c:	2100      	movs	r1, #0
 8005d6e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e007      	b.n	8005d84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	699b      	ldr	r3, [r3, #24]
 8005d7a:	2202      	movs	r2, #2
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	d1cc      	bne.n	8005d1c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	0018      	movs	r0, r3
 8005d86:	46bd      	mov	sp, r7
 8005d88:	b004      	add	sp, #16
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d98:	e028      	b.n	8005dec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	68b9      	ldr	r1, [r7, #8]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	0018      	movs	r0, r3
 8005da2:	f000 f82f 	bl	8005e04 <I2C_IsAcknowledgeFailed>
 8005da6:	1e03      	subs	r3, r0, #0
 8005da8:	d001      	beq.n	8005dae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e026      	b.n	8005dfc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dae:	f7fe fd3d 	bl	800482c <HAL_GetTick>
 8005db2:	0002      	movs	r2, r0
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	68ba      	ldr	r2, [r7, #8]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d302      	bcc.n	8005dc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d113      	bne.n	8005dec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dc8:	2220      	movs	r2, #32
 8005dca:	431a      	orrs	r2, r3
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2241      	movs	r2, #65	; 0x41
 8005dd4:	2120      	movs	r1, #32
 8005dd6:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2242      	movs	r2, #66	; 0x42
 8005ddc:	2100      	movs	r1, #0
 8005dde:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2240      	movs	r2, #64	; 0x40
 8005de4:	2100      	movs	r1, #0
 8005de6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e007      	b.n	8005dfc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	699b      	ldr	r3, [r3, #24]
 8005df2:	2220      	movs	r2, #32
 8005df4:	4013      	ands	r3, r2
 8005df6:	2b20      	cmp	r3, #32
 8005df8:	d1cf      	bne.n	8005d9a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005dfa:	2300      	movs	r3, #0
}
 8005dfc:	0018      	movs	r0, r3
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	b004      	add	sp, #16
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	2210      	movs	r2, #16
 8005e18:	4013      	ands	r3, r2
 8005e1a:	2b10      	cmp	r3, #16
 8005e1c:	d164      	bne.n	8005ee8 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	685a      	ldr	r2, [r3, #4]
 8005e24:	2380      	movs	r3, #128	; 0x80
 8005e26:	049b      	lsls	r3, r3, #18
 8005e28:	401a      	ands	r2, r3
 8005e2a:	2380      	movs	r3, #128	; 0x80
 8005e2c:	049b      	lsls	r3, r3, #18
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d02b      	beq.n	8005e8a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	685a      	ldr	r2, [r3, #4]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2180      	movs	r1, #128	; 0x80
 8005e3e:	01c9      	lsls	r1, r1, #7
 8005e40:	430a      	orrs	r2, r1
 8005e42:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e44:	e021      	b.n	8005e8a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	3301      	adds	r3, #1
 8005e4a:	d01e      	beq.n	8005e8a <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e4c:	f7fe fcee 	bl	800482c <HAL_GetTick>
 8005e50:	0002      	movs	r2, r0
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	68ba      	ldr	r2, [r7, #8]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d302      	bcc.n	8005e62 <I2C_IsAcknowledgeFailed+0x5e>
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d113      	bne.n	8005e8a <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e66:	2220      	movs	r2, #32
 8005e68:	431a      	orrs	r2, r3
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2241      	movs	r2, #65	; 0x41
 8005e72:	2120      	movs	r1, #32
 8005e74:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2242      	movs	r2, #66	; 0x42
 8005e7a:	2100      	movs	r1, #0
 8005e7c:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2240      	movs	r2, #64	; 0x40
 8005e82:	2100      	movs	r1, #0
 8005e84:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e02f      	b.n	8005eea <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	2220      	movs	r2, #32
 8005e92:	4013      	ands	r3, r2
 8005e94:	2b20      	cmp	r3, #32
 8005e96:	d1d6      	bne.n	8005e46 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2210      	movs	r2, #16
 8005e9e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2220      	movs	r2, #32
 8005ea6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	0018      	movs	r0, r3
 8005eac:	f7ff fece 	bl	8005c4c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	685a      	ldr	r2, [r3, #4]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	490e      	ldr	r1, [pc, #56]	; (8005ef4 <I2C_IsAcknowledgeFailed+0xf0>)
 8005ebc:	400a      	ands	r2, r1
 8005ebe:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ec4:	2204      	movs	r2, #4
 8005ec6:	431a      	orrs	r2, r3
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2241      	movs	r2, #65	; 0x41
 8005ed0:	2120      	movs	r1, #32
 8005ed2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2242      	movs	r2, #66	; 0x42
 8005ed8:	2100      	movs	r1, #0
 8005eda:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2240      	movs	r2, #64	; 0x40
 8005ee0:	2100      	movs	r1, #0
 8005ee2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e000      	b.n	8005eea <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	0018      	movs	r0, r3
 8005eec:	46bd      	mov	sp, r7
 8005eee:	b004      	add	sp, #16
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	46c0      	nop			; (mov r8, r8)
 8005ef4:	fe00e800 	.word	0xfe00e800

08005ef8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005ef8:	b590      	push	{r4, r7, lr}
 8005efa:	b085      	sub	sp, #20
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	0008      	movs	r0, r1
 8005f02:	0011      	movs	r1, r2
 8005f04:	607b      	str	r3, [r7, #4]
 8005f06:	240a      	movs	r4, #10
 8005f08:	193b      	adds	r3, r7, r4
 8005f0a:	1c02      	adds	r2, r0, #0
 8005f0c:	801a      	strh	r2, [r3, #0]
 8005f0e:	2009      	movs	r0, #9
 8005f10:	183b      	adds	r3, r7, r0
 8005f12:	1c0a      	adds	r2, r1, #0
 8005f14:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	6a3a      	ldr	r2, [r7, #32]
 8005f1e:	0d51      	lsrs	r1, r2, #21
 8005f20:	2280      	movs	r2, #128	; 0x80
 8005f22:	00d2      	lsls	r2, r2, #3
 8005f24:	400a      	ands	r2, r1
 8005f26:	490e      	ldr	r1, [pc, #56]	; (8005f60 <I2C_TransferConfig+0x68>)
 8005f28:	430a      	orrs	r2, r1
 8005f2a:	43d2      	mvns	r2, r2
 8005f2c:	401a      	ands	r2, r3
 8005f2e:	0011      	movs	r1, r2
 8005f30:	193b      	adds	r3, r7, r4
 8005f32:	881b      	ldrh	r3, [r3, #0]
 8005f34:	059b      	lsls	r3, r3, #22
 8005f36:	0d9a      	lsrs	r2, r3, #22
 8005f38:	183b      	adds	r3, r7, r0
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	0418      	lsls	r0, r3, #16
 8005f3e:	23ff      	movs	r3, #255	; 0xff
 8005f40:	041b      	lsls	r3, r3, #16
 8005f42:	4003      	ands	r3, r0
 8005f44:	431a      	orrs	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	431a      	orrs	r2, r3
 8005f4a:	6a3b      	ldr	r3, [r7, #32]
 8005f4c:	431a      	orrs	r2, r3
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	430a      	orrs	r2, r1
 8005f54:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8005f56:	46c0      	nop			; (mov r8, r8)
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	b005      	add	sp, #20
 8005f5c:	bd90      	pop	{r4, r7, pc}
 8005f5e:	46c0      	nop			; (mov r8, r8)
 8005f60:	03ff63ff 	.word	0x03ff63ff

08005f64 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2241      	movs	r2, #65	; 0x41
 8005f72:	5c9b      	ldrb	r3, [r3, r2]
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	2b20      	cmp	r3, #32
 8005f78:	d138      	bne.n	8005fec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2240      	movs	r2, #64	; 0x40
 8005f7e:	5c9b      	ldrb	r3, [r3, r2]
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d101      	bne.n	8005f88 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005f84:	2302      	movs	r3, #2
 8005f86:	e032      	b.n	8005fee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2240      	movs	r2, #64	; 0x40
 8005f8c:	2101      	movs	r1, #1
 8005f8e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2241      	movs	r2, #65	; 0x41
 8005f94:	2124      	movs	r1, #36	; 0x24
 8005f96:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	2101      	movs	r1, #1
 8005fa4:	438a      	bics	r2, r1
 8005fa6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4911      	ldr	r1, [pc, #68]	; (8005ff8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005fb4:	400a      	ands	r2, r1
 8005fb6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	6819      	ldr	r1, [r3, #0]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	683a      	ldr	r2, [r7, #0]
 8005fc4:	430a      	orrs	r2, r1
 8005fc6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2101      	movs	r1, #1
 8005fd4:	430a      	orrs	r2, r1
 8005fd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2241      	movs	r2, #65	; 0x41
 8005fdc:	2120      	movs	r1, #32
 8005fde:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2240      	movs	r2, #64	; 0x40
 8005fe4:	2100      	movs	r1, #0
 8005fe6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	e000      	b.n	8005fee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005fec:	2302      	movs	r3, #2
  }
}
 8005fee:	0018      	movs	r0, r3
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	b002      	add	sp, #8
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	46c0      	nop			; (mov r8, r8)
 8005ff8:	ffffefff 	.word	0xffffefff

08005ffc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2241      	movs	r2, #65	; 0x41
 800600a:	5c9b      	ldrb	r3, [r3, r2]
 800600c:	b2db      	uxtb	r3, r3
 800600e:	2b20      	cmp	r3, #32
 8006010:	d139      	bne.n	8006086 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2240      	movs	r2, #64	; 0x40
 8006016:	5c9b      	ldrb	r3, [r3, r2]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d101      	bne.n	8006020 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800601c:	2302      	movs	r3, #2
 800601e:	e033      	b.n	8006088 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2240      	movs	r2, #64	; 0x40
 8006024:	2101      	movs	r1, #1
 8006026:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2241      	movs	r2, #65	; 0x41
 800602c:	2124      	movs	r1, #36	; 0x24
 800602e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2101      	movs	r1, #1
 800603c:	438a      	bics	r2, r1
 800603e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	4a11      	ldr	r2, [pc, #68]	; (8006090 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800604c:	4013      	ands	r3, r2
 800604e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	021b      	lsls	r3, r3, #8
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	4313      	orrs	r3, r2
 8006058:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2101      	movs	r1, #1
 800606e:	430a      	orrs	r2, r1
 8006070:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2241      	movs	r2, #65	; 0x41
 8006076:	2120      	movs	r1, #32
 8006078:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2240      	movs	r2, #64	; 0x40
 800607e:	2100      	movs	r1, #0
 8006080:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006082:	2300      	movs	r3, #0
 8006084:	e000      	b.n	8006088 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006086:	2302      	movs	r3, #2
  }
}
 8006088:	0018      	movs	r0, r3
 800608a:	46bd      	mov	sp, r7
 800608c:	b004      	add	sp, #16
 800608e:	bd80      	pop	{r7, pc}
 8006090:	fffff0ff 	.word	0xfffff0ff

08006094 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b088      	sub	sp, #32
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d101      	bne.n	80060a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e305      	b.n	80066b2 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2201      	movs	r2, #1
 80060ac:	4013      	ands	r3, r2
 80060ae:	d100      	bne.n	80060b2 <HAL_RCC_OscConfig+0x1e>
 80060b0:	e08d      	b.n	80061ce <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80060b2:	4bc5      	ldr	r3, [pc, #788]	; (80063c8 <HAL_RCC_OscConfig+0x334>)
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	220c      	movs	r2, #12
 80060b8:	4013      	ands	r3, r2
 80060ba:	2b04      	cmp	r3, #4
 80060bc:	d00e      	beq.n	80060dc <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80060be:	4bc2      	ldr	r3, [pc, #776]	; (80063c8 <HAL_RCC_OscConfig+0x334>)
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	220c      	movs	r2, #12
 80060c4:	4013      	ands	r3, r2
 80060c6:	2b08      	cmp	r3, #8
 80060c8:	d116      	bne.n	80060f8 <HAL_RCC_OscConfig+0x64>
 80060ca:	4bbf      	ldr	r3, [pc, #764]	; (80063c8 <HAL_RCC_OscConfig+0x334>)
 80060cc:	685a      	ldr	r2, [r3, #4]
 80060ce:	23c0      	movs	r3, #192	; 0xc0
 80060d0:	025b      	lsls	r3, r3, #9
 80060d2:	401a      	ands	r2, r3
 80060d4:	2380      	movs	r3, #128	; 0x80
 80060d6:	025b      	lsls	r3, r3, #9
 80060d8:	429a      	cmp	r2, r3
 80060da:	d10d      	bne.n	80060f8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060dc:	4bba      	ldr	r3, [pc, #744]	; (80063c8 <HAL_RCC_OscConfig+0x334>)
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	2380      	movs	r3, #128	; 0x80
 80060e2:	029b      	lsls	r3, r3, #10
 80060e4:	4013      	ands	r3, r2
 80060e6:	d100      	bne.n	80060ea <HAL_RCC_OscConfig+0x56>
 80060e8:	e070      	b.n	80061cc <HAL_RCC_OscConfig+0x138>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d000      	beq.n	80060f4 <HAL_RCC_OscConfig+0x60>
 80060f2:	e06b      	b.n	80061cc <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e2dc      	b.n	80066b2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d107      	bne.n	8006110 <HAL_RCC_OscConfig+0x7c>
 8006100:	4bb1      	ldr	r3, [pc, #708]	; (80063c8 <HAL_RCC_OscConfig+0x334>)
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	4bb0      	ldr	r3, [pc, #704]	; (80063c8 <HAL_RCC_OscConfig+0x334>)
 8006106:	2180      	movs	r1, #128	; 0x80
 8006108:	0249      	lsls	r1, r1, #9
 800610a:	430a      	orrs	r2, r1
 800610c:	601a      	str	r2, [r3, #0]
 800610e:	e02f      	b.n	8006170 <HAL_RCC_OscConfig+0xdc>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d10c      	bne.n	8006132 <HAL_RCC_OscConfig+0x9e>
 8006118:	4bab      	ldr	r3, [pc, #684]	; (80063c8 <HAL_RCC_OscConfig+0x334>)
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	4baa      	ldr	r3, [pc, #680]	; (80063c8 <HAL_RCC_OscConfig+0x334>)
 800611e:	49ab      	ldr	r1, [pc, #684]	; (80063cc <HAL_RCC_OscConfig+0x338>)
 8006120:	400a      	ands	r2, r1
 8006122:	601a      	str	r2, [r3, #0]
 8006124:	4ba8      	ldr	r3, [pc, #672]	; (80063c8 <HAL_RCC_OscConfig+0x334>)
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	4ba7      	ldr	r3, [pc, #668]	; (80063c8 <HAL_RCC_OscConfig+0x334>)
 800612a:	49a9      	ldr	r1, [pc, #676]	; (80063d0 <HAL_RCC_OscConfig+0x33c>)
 800612c:	400a      	ands	r2, r1
 800612e:	601a      	str	r2, [r3, #0]
 8006130:	e01e      	b.n	8006170 <HAL_RCC_OscConfig+0xdc>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	2b05      	cmp	r3, #5
 8006138:	d10e      	bne.n	8006158 <HAL_RCC_OscConfig+0xc4>
 800613a:	4ba3      	ldr	r3, [pc, #652]	; (80063c8 <HAL_RCC_OscConfig+0x334>)
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	4ba2      	ldr	r3, [pc, #648]	; (80063c8 <HAL_RCC_OscConfig+0x334>)
 8006140:	2180      	movs	r1, #128	; 0x80
 8006142:	02c9      	lsls	r1, r1, #11
 8006144:	430a      	orrs	r2, r1
 8006146:	601a      	str	r2, [r3, #0]
 8006148:	4b9f      	ldr	r3, [pc, #636]	; (80063c8 <HAL_RCC_OscConfig+0x334>)
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	4b9e      	ldr	r3, [pc, #632]	; (80063c8 <HAL_RCC_OscConfig+0x334>)
 800614e:	2180      	movs	r1, #128	; 0x80
 8006150:	0249      	lsls	r1, r1, #9
 8006152:	430a      	orrs	r2, r1
 8006154:	601a      	str	r2, [r3, #0]
 8006156:	e00b      	b.n	8006170 <HAL_RCC_OscConfig+0xdc>
 8006158:	4b9b      	ldr	r3, [pc, #620]	; (80063c8 <HAL_RCC_OscConfig+0x334>)
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	4b9a      	ldr	r3, [pc, #616]	; (80063c8 <HAL_RCC_OscConfig+0x334>)
 800615e:	499b      	ldr	r1, [pc, #620]	; (80063cc <HAL_RCC_OscConfig+0x338>)
 8006160:	400a      	ands	r2, r1
 8006162:	601a      	str	r2, [r3, #0]
 8006164:	4b98      	ldr	r3, [pc, #608]	; (80063c8 <HAL_RCC_OscConfig+0x334>)
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	4b97      	ldr	r3, [pc, #604]	; (80063c8 <HAL_RCC_OscConfig+0x334>)
 800616a:	4999      	ldr	r1, [pc, #612]	; (80063d0 <HAL_RCC_OscConfig+0x33c>)
 800616c:	400a      	ands	r2, r1
 800616e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d014      	beq.n	80061a2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006178:	f7fe fb58 	bl	800482c <HAL_GetTick>
 800617c:	0003      	movs	r3, r0
 800617e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006180:	e008      	b.n	8006194 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006182:	f7fe fb53 	bl	800482c <HAL_GetTick>
 8006186:	0002      	movs	r2, r0
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	2b64      	cmp	r3, #100	; 0x64
 800618e:	d901      	bls.n	8006194 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8006190:	2303      	movs	r3, #3
 8006192:	e28e      	b.n	80066b2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006194:	4b8c      	ldr	r3, [pc, #560]	; (80063c8 <HAL_RCC_OscConfig+0x334>)
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	2380      	movs	r3, #128	; 0x80
 800619a:	029b      	lsls	r3, r3, #10
 800619c:	4013      	ands	r3, r2
 800619e:	d0f0      	beq.n	8006182 <HAL_RCC_OscConfig+0xee>
 80061a0:	e015      	b.n	80061ce <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061a2:	f7fe fb43 	bl	800482c <HAL_GetTick>
 80061a6:	0003      	movs	r3, r0
 80061a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061aa:	e008      	b.n	80061be <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80061ac:	f7fe fb3e 	bl	800482c <HAL_GetTick>
 80061b0:	0002      	movs	r2, r0
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	2b64      	cmp	r3, #100	; 0x64
 80061b8:	d901      	bls.n	80061be <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	e279      	b.n	80066b2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061be:	4b82      	ldr	r3, [pc, #520]	; (80063c8 <HAL_RCC_OscConfig+0x334>)
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	2380      	movs	r3, #128	; 0x80
 80061c4:	029b      	lsls	r3, r3, #10
 80061c6:	4013      	ands	r3, r2
 80061c8:	d1f0      	bne.n	80061ac <HAL_RCC_OscConfig+0x118>
 80061ca:	e000      	b.n	80061ce <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061cc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2202      	movs	r2, #2
 80061d4:	4013      	ands	r3, r2
 80061d6:	d100      	bne.n	80061da <HAL_RCC_OscConfig+0x146>
 80061d8:	e06c      	b.n	80062b4 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80061da:	4b7b      	ldr	r3, [pc, #492]	; (80063c8 <HAL_RCC_OscConfig+0x334>)
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	220c      	movs	r2, #12
 80061e0:	4013      	ands	r3, r2
 80061e2:	d00e      	beq.n	8006202 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80061e4:	4b78      	ldr	r3, [pc, #480]	; (80063c8 <HAL_RCC_OscConfig+0x334>)
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	220c      	movs	r2, #12
 80061ea:	4013      	ands	r3, r2
 80061ec:	2b08      	cmp	r3, #8
 80061ee:	d11f      	bne.n	8006230 <HAL_RCC_OscConfig+0x19c>
 80061f0:	4b75      	ldr	r3, [pc, #468]	; (80063c8 <HAL_RCC_OscConfig+0x334>)
 80061f2:	685a      	ldr	r2, [r3, #4]
 80061f4:	23c0      	movs	r3, #192	; 0xc0
 80061f6:	025b      	lsls	r3, r3, #9
 80061f8:	401a      	ands	r2, r3
 80061fa:	2380      	movs	r3, #128	; 0x80
 80061fc:	021b      	lsls	r3, r3, #8
 80061fe:	429a      	cmp	r2, r3
 8006200:	d116      	bne.n	8006230 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006202:	4b71      	ldr	r3, [pc, #452]	; (80063c8 <HAL_RCC_OscConfig+0x334>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2202      	movs	r2, #2
 8006208:	4013      	ands	r3, r2
 800620a:	d005      	beq.n	8006218 <HAL_RCC_OscConfig+0x184>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	2b01      	cmp	r3, #1
 8006212:	d001      	beq.n	8006218 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	e24c      	b.n	80066b2 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006218:	4b6b      	ldr	r3, [pc, #428]	; (80063c8 <HAL_RCC_OscConfig+0x334>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	22f8      	movs	r2, #248	; 0xf8
 800621e:	4393      	bics	r3, r2
 8006220:	0019      	movs	r1, r3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	00da      	lsls	r2, r3, #3
 8006228:	4b67      	ldr	r3, [pc, #412]	; (80063c8 <HAL_RCC_OscConfig+0x334>)
 800622a:	430a      	orrs	r2, r1
 800622c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800622e:	e041      	b.n	80062b4 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d024      	beq.n	8006282 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006238:	4b63      	ldr	r3, [pc, #396]	; (80063c8 <HAL_RCC_OscConfig+0x334>)
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	4b62      	ldr	r3, [pc, #392]	; (80063c8 <HAL_RCC_OscConfig+0x334>)
 800623e:	2101      	movs	r1, #1
 8006240:	430a      	orrs	r2, r1
 8006242:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006244:	f7fe faf2 	bl	800482c <HAL_GetTick>
 8006248:	0003      	movs	r3, r0
 800624a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800624c:	e008      	b.n	8006260 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800624e:	f7fe faed 	bl	800482c <HAL_GetTick>
 8006252:	0002      	movs	r2, r0
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	1ad3      	subs	r3, r2, r3
 8006258:	2b02      	cmp	r3, #2
 800625a:	d901      	bls.n	8006260 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	e228      	b.n	80066b2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006260:	4b59      	ldr	r3, [pc, #356]	; (80063c8 <HAL_RCC_OscConfig+0x334>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2202      	movs	r2, #2
 8006266:	4013      	ands	r3, r2
 8006268:	d0f1      	beq.n	800624e <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800626a:	4b57      	ldr	r3, [pc, #348]	; (80063c8 <HAL_RCC_OscConfig+0x334>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	22f8      	movs	r2, #248	; 0xf8
 8006270:	4393      	bics	r3, r2
 8006272:	0019      	movs	r1, r3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	691b      	ldr	r3, [r3, #16]
 8006278:	00da      	lsls	r2, r3, #3
 800627a:	4b53      	ldr	r3, [pc, #332]	; (80063c8 <HAL_RCC_OscConfig+0x334>)
 800627c:	430a      	orrs	r2, r1
 800627e:	601a      	str	r2, [r3, #0]
 8006280:	e018      	b.n	80062b4 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006282:	4b51      	ldr	r3, [pc, #324]	; (80063c8 <HAL_RCC_OscConfig+0x334>)
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	4b50      	ldr	r3, [pc, #320]	; (80063c8 <HAL_RCC_OscConfig+0x334>)
 8006288:	2101      	movs	r1, #1
 800628a:	438a      	bics	r2, r1
 800628c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800628e:	f7fe facd 	bl	800482c <HAL_GetTick>
 8006292:	0003      	movs	r3, r0
 8006294:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006296:	e008      	b.n	80062aa <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006298:	f7fe fac8 	bl	800482c <HAL_GetTick>
 800629c:	0002      	movs	r2, r0
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d901      	bls.n	80062aa <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	e203      	b.n	80066b2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062aa:	4b47      	ldr	r3, [pc, #284]	; (80063c8 <HAL_RCC_OscConfig+0x334>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2202      	movs	r2, #2
 80062b0:	4013      	ands	r3, r2
 80062b2:	d1f1      	bne.n	8006298 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2208      	movs	r2, #8
 80062ba:	4013      	ands	r3, r2
 80062bc:	d036      	beq.n	800632c <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	69db      	ldr	r3, [r3, #28]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d019      	beq.n	80062fa <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062c6:	4b40      	ldr	r3, [pc, #256]	; (80063c8 <HAL_RCC_OscConfig+0x334>)
 80062c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062ca:	4b3f      	ldr	r3, [pc, #252]	; (80063c8 <HAL_RCC_OscConfig+0x334>)
 80062cc:	2101      	movs	r1, #1
 80062ce:	430a      	orrs	r2, r1
 80062d0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062d2:	f7fe faab 	bl	800482c <HAL_GetTick>
 80062d6:	0003      	movs	r3, r0
 80062d8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062da:	e008      	b.n	80062ee <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80062dc:	f7fe faa6 	bl	800482c <HAL_GetTick>
 80062e0:	0002      	movs	r2, r0
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	d901      	bls.n	80062ee <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e1e1      	b.n	80066b2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062ee:	4b36      	ldr	r3, [pc, #216]	; (80063c8 <HAL_RCC_OscConfig+0x334>)
 80062f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f2:	2202      	movs	r2, #2
 80062f4:	4013      	ands	r3, r2
 80062f6:	d0f1      	beq.n	80062dc <HAL_RCC_OscConfig+0x248>
 80062f8:	e018      	b.n	800632c <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062fa:	4b33      	ldr	r3, [pc, #204]	; (80063c8 <HAL_RCC_OscConfig+0x334>)
 80062fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062fe:	4b32      	ldr	r3, [pc, #200]	; (80063c8 <HAL_RCC_OscConfig+0x334>)
 8006300:	2101      	movs	r1, #1
 8006302:	438a      	bics	r2, r1
 8006304:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006306:	f7fe fa91 	bl	800482c <HAL_GetTick>
 800630a:	0003      	movs	r3, r0
 800630c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800630e:	e008      	b.n	8006322 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006310:	f7fe fa8c 	bl	800482c <HAL_GetTick>
 8006314:	0002      	movs	r2, r0
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	2b02      	cmp	r3, #2
 800631c:	d901      	bls.n	8006322 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 800631e:	2303      	movs	r3, #3
 8006320:	e1c7      	b.n	80066b2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006322:	4b29      	ldr	r3, [pc, #164]	; (80063c8 <HAL_RCC_OscConfig+0x334>)
 8006324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006326:	2202      	movs	r2, #2
 8006328:	4013      	ands	r3, r2
 800632a:	d1f1      	bne.n	8006310 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2204      	movs	r2, #4
 8006332:	4013      	ands	r3, r2
 8006334:	d100      	bne.n	8006338 <HAL_RCC_OscConfig+0x2a4>
 8006336:	e0b5      	b.n	80064a4 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006338:	201f      	movs	r0, #31
 800633a:	183b      	adds	r3, r7, r0
 800633c:	2200      	movs	r2, #0
 800633e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006340:	4b21      	ldr	r3, [pc, #132]	; (80063c8 <HAL_RCC_OscConfig+0x334>)
 8006342:	69da      	ldr	r2, [r3, #28]
 8006344:	2380      	movs	r3, #128	; 0x80
 8006346:	055b      	lsls	r3, r3, #21
 8006348:	4013      	ands	r3, r2
 800634a:	d110      	bne.n	800636e <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800634c:	4b1e      	ldr	r3, [pc, #120]	; (80063c8 <HAL_RCC_OscConfig+0x334>)
 800634e:	69da      	ldr	r2, [r3, #28]
 8006350:	4b1d      	ldr	r3, [pc, #116]	; (80063c8 <HAL_RCC_OscConfig+0x334>)
 8006352:	2180      	movs	r1, #128	; 0x80
 8006354:	0549      	lsls	r1, r1, #21
 8006356:	430a      	orrs	r2, r1
 8006358:	61da      	str	r2, [r3, #28]
 800635a:	4b1b      	ldr	r3, [pc, #108]	; (80063c8 <HAL_RCC_OscConfig+0x334>)
 800635c:	69da      	ldr	r2, [r3, #28]
 800635e:	2380      	movs	r3, #128	; 0x80
 8006360:	055b      	lsls	r3, r3, #21
 8006362:	4013      	ands	r3, r2
 8006364:	60fb      	str	r3, [r7, #12]
 8006366:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006368:	183b      	adds	r3, r7, r0
 800636a:	2201      	movs	r2, #1
 800636c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800636e:	4b19      	ldr	r3, [pc, #100]	; (80063d4 <HAL_RCC_OscConfig+0x340>)
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	2380      	movs	r3, #128	; 0x80
 8006374:	005b      	lsls	r3, r3, #1
 8006376:	4013      	ands	r3, r2
 8006378:	d11a      	bne.n	80063b0 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800637a:	4b16      	ldr	r3, [pc, #88]	; (80063d4 <HAL_RCC_OscConfig+0x340>)
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	4b15      	ldr	r3, [pc, #84]	; (80063d4 <HAL_RCC_OscConfig+0x340>)
 8006380:	2180      	movs	r1, #128	; 0x80
 8006382:	0049      	lsls	r1, r1, #1
 8006384:	430a      	orrs	r2, r1
 8006386:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006388:	f7fe fa50 	bl	800482c <HAL_GetTick>
 800638c:	0003      	movs	r3, r0
 800638e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006390:	e008      	b.n	80063a4 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006392:	f7fe fa4b 	bl	800482c <HAL_GetTick>
 8006396:	0002      	movs	r2, r0
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	2b64      	cmp	r3, #100	; 0x64
 800639e:	d901      	bls.n	80063a4 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 80063a0:	2303      	movs	r3, #3
 80063a2:	e186      	b.n	80066b2 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063a4:	4b0b      	ldr	r3, [pc, #44]	; (80063d4 <HAL_RCC_OscConfig+0x340>)
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	2380      	movs	r3, #128	; 0x80
 80063aa:	005b      	lsls	r3, r3, #1
 80063ac:	4013      	ands	r3, r2
 80063ae:	d0f0      	beq.n	8006392 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d10f      	bne.n	80063d8 <HAL_RCC_OscConfig+0x344>
 80063b8:	4b03      	ldr	r3, [pc, #12]	; (80063c8 <HAL_RCC_OscConfig+0x334>)
 80063ba:	6a1a      	ldr	r2, [r3, #32]
 80063bc:	4b02      	ldr	r3, [pc, #8]	; (80063c8 <HAL_RCC_OscConfig+0x334>)
 80063be:	2101      	movs	r1, #1
 80063c0:	430a      	orrs	r2, r1
 80063c2:	621a      	str	r2, [r3, #32]
 80063c4:	e036      	b.n	8006434 <HAL_RCC_OscConfig+0x3a0>
 80063c6:	46c0      	nop			; (mov r8, r8)
 80063c8:	40021000 	.word	0x40021000
 80063cc:	fffeffff 	.word	0xfffeffff
 80063d0:	fffbffff 	.word	0xfffbffff
 80063d4:	40007000 	.word	0x40007000
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d10c      	bne.n	80063fa <HAL_RCC_OscConfig+0x366>
 80063e0:	4bb6      	ldr	r3, [pc, #728]	; (80066bc <HAL_RCC_OscConfig+0x628>)
 80063e2:	6a1a      	ldr	r2, [r3, #32]
 80063e4:	4bb5      	ldr	r3, [pc, #724]	; (80066bc <HAL_RCC_OscConfig+0x628>)
 80063e6:	2101      	movs	r1, #1
 80063e8:	438a      	bics	r2, r1
 80063ea:	621a      	str	r2, [r3, #32]
 80063ec:	4bb3      	ldr	r3, [pc, #716]	; (80066bc <HAL_RCC_OscConfig+0x628>)
 80063ee:	6a1a      	ldr	r2, [r3, #32]
 80063f0:	4bb2      	ldr	r3, [pc, #712]	; (80066bc <HAL_RCC_OscConfig+0x628>)
 80063f2:	2104      	movs	r1, #4
 80063f4:	438a      	bics	r2, r1
 80063f6:	621a      	str	r2, [r3, #32]
 80063f8:	e01c      	b.n	8006434 <HAL_RCC_OscConfig+0x3a0>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	2b05      	cmp	r3, #5
 8006400:	d10c      	bne.n	800641c <HAL_RCC_OscConfig+0x388>
 8006402:	4bae      	ldr	r3, [pc, #696]	; (80066bc <HAL_RCC_OscConfig+0x628>)
 8006404:	6a1a      	ldr	r2, [r3, #32]
 8006406:	4bad      	ldr	r3, [pc, #692]	; (80066bc <HAL_RCC_OscConfig+0x628>)
 8006408:	2104      	movs	r1, #4
 800640a:	430a      	orrs	r2, r1
 800640c:	621a      	str	r2, [r3, #32]
 800640e:	4bab      	ldr	r3, [pc, #684]	; (80066bc <HAL_RCC_OscConfig+0x628>)
 8006410:	6a1a      	ldr	r2, [r3, #32]
 8006412:	4baa      	ldr	r3, [pc, #680]	; (80066bc <HAL_RCC_OscConfig+0x628>)
 8006414:	2101      	movs	r1, #1
 8006416:	430a      	orrs	r2, r1
 8006418:	621a      	str	r2, [r3, #32]
 800641a:	e00b      	b.n	8006434 <HAL_RCC_OscConfig+0x3a0>
 800641c:	4ba7      	ldr	r3, [pc, #668]	; (80066bc <HAL_RCC_OscConfig+0x628>)
 800641e:	6a1a      	ldr	r2, [r3, #32]
 8006420:	4ba6      	ldr	r3, [pc, #664]	; (80066bc <HAL_RCC_OscConfig+0x628>)
 8006422:	2101      	movs	r1, #1
 8006424:	438a      	bics	r2, r1
 8006426:	621a      	str	r2, [r3, #32]
 8006428:	4ba4      	ldr	r3, [pc, #656]	; (80066bc <HAL_RCC_OscConfig+0x628>)
 800642a:	6a1a      	ldr	r2, [r3, #32]
 800642c:	4ba3      	ldr	r3, [pc, #652]	; (80066bc <HAL_RCC_OscConfig+0x628>)
 800642e:	2104      	movs	r1, #4
 8006430:	438a      	bics	r2, r1
 8006432:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d014      	beq.n	8006466 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800643c:	f7fe f9f6 	bl	800482c <HAL_GetTick>
 8006440:	0003      	movs	r3, r0
 8006442:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006444:	e009      	b.n	800645a <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006446:	f7fe f9f1 	bl	800482c <HAL_GetTick>
 800644a:	0002      	movs	r2, r0
 800644c:	69bb      	ldr	r3, [r7, #24]
 800644e:	1ad3      	subs	r3, r2, r3
 8006450:	4a9b      	ldr	r2, [pc, #620]	; (80066c0 <HAL_RCC_OscConfig+0x62c>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d901      	bls.n	800645a <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	e12b      	b.n	80066b2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800645a:	4b98      	ldr	r3, [pc, #608]	; (80066bc <HAL_RCC_OscConfig+0x628>)
 800645c:	6a1b      	ldr	r3, [r3, #32]
 800645e:	2202      	movs	r2, #2
 8006460:	4013      	ands	r3, r2
 8006462:	d0f0      	beq.n	8006446 <HAL_RCC_OscConfig+0x3b2>
 8006464:	e013      	b.n	800648e <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006466:	f7fe f9e1 	bl	800482c <HAL_GetTick>
 800646a:	0003      	movs	r3, r0
 800646c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800646e:	e009      	b.n	8006484 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006470:	f7fe f9dc 	bl	800482c <HAL_GetTick>
 8006474:	0002      	movs	r2, r0
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	1ad3      	subs	r3, r2, r3
 800647a:	4a91      	ldr	r2, [pc, #580]	; (80066c0 <HAL_RCC_OscConfig+0x62c>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d901      	bls.n	8006484 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8006480:	2303      	movs	r3, #3
 8006482:	e116      	b.n	80066b2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006484:	4b8d      	ldr	r3, [pc, #564]	; (80066bc <HAL_RCC_OscConfig+0x628>)
 8006486:	6a1b      	ldr	r3, [r3, #32]
 8006488:	2202      	movs	r2, #2
 800648a:	4013      	ands	r3, r2
 800648c:	d1f0      	bne.n	8006470 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800648e:	231f      	movs	r3, #31
 8006490:	18fb      	adds	r3, r7, r3
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	2b01      	cmp	r3, #1
 8006496:	d105      	bne.n	80064a4 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006498:	4b88      	ldr	r3, [pc, #544]	; (80066bc <HAL_RCC_OscConfig+0x628>)
 800649a:	69da      	ldr	r2, [r3, #28]
 800649c:	4b87      	ldr	r3, [pc, #540]	; (80066bc <HAL_RCC_OscConfig+0x628>)
 800649e:	4989      	ldr	r1, [pc, #548]	; (80066c4 <HAL_RCC_OscConfig+0x630>)
 80064a0:	400a      	ands	r2, r1
 80064a2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2210      	movs	r2, #16
 80064aa:	4013      	ands	r3, r2
 80064ac:	d063      	beq.n	8006576 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	695b      	ldr	r3, [r3, #20]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d12a      	bne.n	800650c <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80064b6:	4b81      	ldr	r3, [pc, #516]	; (80066bc <HAL_RCC_OscConfig+0x628>)
 80064b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064ba:	4b80      	ldr	r3, [pc, #512]	; (80066bc <HAL_RCC_OscConfig+0x628>)
 80064bc:	2104      	movs	r1, #4
 80064be:	430a      	orrs	r2, r1
 80064c0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80064c2:	4b7e      	ldr	r3, [pc, #504]	; (80066bc <HAL_RCC_OscConfig+0x628>)
 80064c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064c6:	4b7d      	ldr	r3, [pc, #500]	; (80066bc <HAL_RCC_OscConfig+0x628>)
 80064c8:	2101      	movs	r1, #1
 80064ca:	430a      	orrs	r2, r1
 80064cc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064ce:	f7fe f9ad 	bl	800482c <HAL_GetTick>
 80064d2:	0003      	movs	r3, r0
 80064d4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80064d6:	e008      	b.n	80064ea <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80064d8:	f7fe f9a8 	bl	800482c <HAL_GetTick>
 80064dc:	0002      	movs	r2, r0
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d901      	bls.n	80064ea <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	e0e3      	b.n	80066b2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80064ea:	4b74      	ldr	r3, [pc, #464]	; (80066bc <HAL_RCC_OscConfig+0x628>)
 80064ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ee:	2202      	movs	r2, #2
 80064f0:	4013      	ands	r3, r2
 80064f2:	d0f1      	beq.n	80064d8 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80064f4:	4b71      	ldr	r3, [pc, #452]	; (80066bc <HAL_RCC_OscConfig+0x628>)
 80064f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064f8:	22f8      	movs	r2, #248	; 0xf8
 80064fa:	4393      	bics	r3, r2
 80064fc:	0019      	movs	r1, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	699b      	ldr	r3, [r3, #24]
 8006502:	00da      	lsls	r2, r3, #3
 8006504:	4b6d      	ldr	r3, [pc, #436]	; (80066bc <HAL_RCC_OscConfig+0x628>)
 8006506:	430a      	orrs	r2, r1
 8006508:	635a      	str	r2, [r3, #52]	; 0x34
 800650a:	e034      	b.n	8006576 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	695b      	ldr	r3, [r3, #20]
 8006510:	3305      	adds	r3, #5
 8006512:	d111      	bne.n	8006538 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8006514:	4b69      	ldr	r3, [pc, #420]	; (80066bc <HAL_RCC_OscConfig+0x628>)
 8006516:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006518:	4b68      	ldr	r3, [pc, #416]	; (80066bc <HAL_RCC_OscConfig+0x628>)
 800651a:	2104      	movs	r1, #4
 800651c:	438a      	bics	r2, r1
 800651e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006520:	4b66      	ldr	r3, [pc, #408]	; (80066bc <HAL_RCC_OscConfig+0x628>)
 8006522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006524:	22f8      	movs	r2, #248	; 0xf8
 8006526:	4393      	bics	r3, r2
 8006528:	0019      	movs	r1, r3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	699b      	ldr	r3, [r3, #24]
 800652e:	00da      	lsls	r2, r3, #3
 8006530:	4b62      	ldr	r3, [pc, #392]	; (80066bc <HAL_RCC_OscConfig+0x628>)
 8006532:	430a      	orrs	r2, r1
 8006534:	635a      	str	r2, [r3, #52]	; 0x34
 8006536:	e01e      	b.n	8006576 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006538:	4b60      	ldr	r3, [pc, #384]	; (80066bc <HAL_RCC_OscConfig+0x628>)
 800653a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800653c:	4b5f      	ldr	r3, [pc, #380]	; (80066bc <HAL_RCC_OscConfig+0x628>)
 800653e:	2104      	movs	r1, #4
 8006540:	430a      	orrs	r2, r1
 8006542:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8006544:	4b5d      	ldr	r3, [pc, #372]	; (80066bc <HAL_RCC_OscConfig+0x628>)
 8006546:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006548:	4b5c      	ldr	r3, [pc, #368]	; (80066bc <HAL_RCC_OscConfig+0x628>)
 800654a:	2101      	movs	r1, #1
 800654c:	438a      	bics	r2, r1
 800654e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006550:	f7fe f96c 	bl	800482c <HAL_GetTick>
 8006554:	0003      	movs	r3, r0
 8006556:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006558:	e008      	b.n	800656c <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800655a:	f7fe f967 	bl	800482c <HAL_GetTick>
 800655e:	0002      	movs	r2, r0
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	1ad3      	subs	r3, r2, r3
 8006564:	2b02      	cmp	r3, #2
 8006566:	d901      	bls.n	800656c <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8006568:	2303      	movs	r3, #3
 800656a:	e0a2      	b.n	80066b2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800656c:	4b53      	ldr	r3, [pc, #332]	; (80066bc <HAL_RCC_OscConfig+0x628>)
 800656e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006570:	2202      	movs	r2, #2
 8006572:	4013      	ands	r3, r2
 8006574:	d1f1      	bne.n	800655a <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a1b      	ldr	r3, [r3, #32]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d100      	bne.n	8006580 <HAL_RCC_OscConfig+0x4ec>
 800657e:	e097      	b.n	80066b0 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006580:	4b4e      	ldr	r3, [pc, #312]	; (80066bc <HAL_RCC_OscConfig+0x628>)
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	220c      	movs	r2, #12
 8006586:	4013      	ands	r3, r2
 8006588:	2b08      	cmp	r3, #8
 800658a:	d100      	bne.n	800658e <HAL_RCC_OscConfig+0x4fa>
 800658c:	e06b      	b.n	8006666 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a1b      	ldr	r3, [r3, #32]
 8006592:	2b02      	cmp	r3, #2
 8006594:	d14c      	bne.n	8006630 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006596:	4b49      	ldr	r3, [pc, #292]	; (80066bc <HAL_RCC_OscConfig+0x628>)
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	4b48      	ldr	r3, [pc, #288]	; (80066bc <HAL_RCC_OscConfig+0x628>)
 800659c:	494a      	ldr	r1, [pc, #296]	; (80066c8 <HAL_RCC_OscConfig+0x634>)
 800659e:	400a      	ands	r2, r1
 80065a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065a2:	f7fe f943 	bl	800482c <HAL_GetTick>
 80065a6:	0003      	movs	r3, r0
 80065a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065aa:	e008      	b.n	80065be <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065ac:	f7fe f93e 	bl	800482c <HAL_GetTick>
 80065b0:	0002      	movs	r2, r0
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	2b02      	cmp	r3, #2
 80065b8:	d901      	bls.n	80065be <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 80065ba:	2303      	movs	r3, #3
 80065bc:	e079      	b.n	80066b2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065be:	4b3f      	ldr	r3, [pc, #252]	; (80066bc <HAL_RCC_OscConfig+0x628>)
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	2380      	movs	r3, #128	; 0x80
 80065c4:	049b      	lsls	r3, r3, #18
 80065c6:	4013      	ands	r3, r2
 80065c8:	d1f0      	bne.n	80065ac <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80065ca:	4b3c      	ldr	r3, [pc, #240]	; (80066bc <HAL_RCC_OscConfig+0x628>)
 80065cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ce:	220f      	movs	r2, #15
 80065d0:	4393      	bics	r3, r2
 80065d2:	0019      	movs	r1, r3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065d8:	4b38      	ldr	r3, [pc, #224]	; (80066bc <HAL_RCC_OscConfig+0x628>)
 80065da:	430a      	orrs	r2, r1
 80065dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80065de:	4b37      	ldr	r3, [pc, #220]	; (80066bc <HAL_RCC_OscConfig+0x628>)
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	4a3a      	ldr	r2, [pc, #232]	; (80066cc <HAL_RCC_OscConfig+0x638>)
 80065e4:	4013      	ands	r3, r2
 80065e6:	0019      	movs	r1, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f0:	431a      	orrs	r2, r3
 80065f2:	4b32      	ldr	r3, [pc, #200]	; (80066bc <HAL_RCC_OscConfig+0x628>)
 80065f4:	430a      	orrs	r2, r1
 80065f6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065f8:	4b30      	ldr	r3, [pc, #192]	; (80066bc <HAL_RCC_OscConfig+0x628>)
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	4b2f      	ldr	r3, [pc, #188]	; (80066bc <HAL_RCC_OscConfig+0x628>)
 80065fe:	2180      	movs	r1, #128	; 0x80
 8006600:	0449      	lsls	r1, r1, #17
 8006602:	430a      	orrs	r2, r1
 8006604:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006606:	f7fe f911 	bl	800482c <HAL_GetTick>
 800660a:	0003      	movs	r3, r0
 800660c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800660e:	e008      	b.n	8006622 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006610:	f7fe f90c 	bl	800482c <HAL_GetTick>
 8006614:	0002      	movs	r2, r0
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	2b02      	cmp	r3, #2
 800661c:	d901      	bls.n	8006622 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	e047      	b.n	80066b2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006622:	4b26      	ldr	r3, [pc, #152]	; (80066bc <HAL_RCC_OscConfig+0x628>)
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	2380      	movs	r3, #128	; 0x80
 8006628:	049b      	lsls	r3, r3, #18
 800662a:	4013      	ands	r3, r2
 800662c:	d0f0      	beq.n	8006610 <HAL_RCC_OscConfig+0x57c>
 800662e:	e03f      	b.n	80066b0 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006630:	4b22      	ldr	r3, [pc, #136]	; (80066bc <HAL_RCC_OscConfig+0x628>)
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	4b21      	ldr	r3, [pc, #132]	; (80066bc <HAL_RCC_OscConfig+0x628>)
 8006636:	4924      	ldr	r1, [pc, #144]	; (80066c8 <HAL_RCC_OscConfig+0x634>)
 8006638:	400a      	ands	r2, r1
 800663a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800663c:	f7fe f8f6 	bl	800482c <HAL_GetTick>
 8006640:	0003      	movs	r3, r0
 8006642:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006644:	e008      	b.n	8006658 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006646:	f7fe f8f1 	bl	800482c <HAL_GetTick>
 800664a:	0002      	movs	r2, r0
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	1ad3      	subs	r3, r2, r3
 8006650:	2b02      	cmp	r3, #2
 8006652:	d901      	bls.n	8006658 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8006654:	2303      	movs	r3, #3
 8006656:	e02c      	b.n	80066b2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006658:	4b18      	ldr	r3, [pc, #96]	; (80066bc <HAL_RCC_OscConfig+0x628>)
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	2380      	movs	r3, #128	; 0x80
 800665e:	049b      	lsls	r3, r3, #18
 8006660:	4013      	ands	r3, r2
 8006662:	d1f0      	bne.n	8006646 <HAL_RCC_OscConfig+0x5b2>
 8006664:	e024      	b.n	80066b0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6a1b      	ldr	r3, [r3, #32]
 800666a:	2b01      	cmp	r3, #1
 800666c:	d101      	bne.n	8006672 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e01f      	b.n	80066b2 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8006672:	4b12      	ldr	r3, [pc, #72]	; (80066bc <HAL_RCC_OscConfig+0x628>)
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8006678:	4b10      	ldr	r3, [pc, #64]	; (80066bc <HAL_RCC_OscConfig+0x628>)
 800667a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800667e:	697a      	ldr	r2, [r7, #20]
 8006680:	23c0      	movs	r3, #192	; 0xc0
 8006682:	025b      	lsls	r3, r3, #9
 8006684:	401a      	ands	r2, r3
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668a:	429a      	cmp	r2, r3
 800668c:	d10e      	bne.n	80066ac <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	220f      	movs	r2, #15
 8006692:	401a      	ands	r2, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006698:	429a      	cmp	r2, r3
 800669a:	d107      	bne.n	80066ac <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800669c:	697a      	ldr	r2, [r7, #20]
 800669e:	23f0      	movs	r3, #240	; 0xf0
 80066a0:	039b      	lsls	r3, r3, #14
 80066a2:	401a      	ands	r2, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d001      	beq.n	80066b0 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	e000      	b.n	80066b2 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	0018      	movs	r0, r3
 80066b4:	46bd      	mov	sp, r7
 80066b6:	b008      	add	sp, #32
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	46c0      	nop			; (mov r8, r8)
 80066bc:	40021000 	.word	0x40021000
 80066c0:	00001388 	.word	0x00001388
 80066c4:	efffffff 	.word	0xefffffff
 80066c8:	feffffff 	.word	0xfeffffff
 80066cc:	ffc27fff 	.word	0xffc27fff

080066d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d101      	bne.n	80066e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	e0b3      	b.n	800684c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80066e4:	4b5b      	ldr	r3, [pc, #364]	; (8006854 <HAL_RCC_ClockConfig+0x184>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2201      	movs	r2, #1
 80066ea:	4013      	ands	r3, r2
 80066ec:	683a      	ldr	r2, [r7, #0]
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d911      	bls.n	8006716 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066f2:	4b58      	ldr	r3, [pc, #352]	; (8006854 <HAL_RCC_ClockConfig+0x184>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2201      	movs	r2, #1
 80066f8:	4393      	bics	r3, r2
 80066fa:	0019      	movs	r1, r3
 80066fc:	4b55      	ldr	r3, [pc, #340]	; (8006854 <HAL_RCC_ClockConfig+0x184>)
 80066fe:	683a      	ldr	r2, [r7, #0]
 8006700:	430a      	orrs	r2, r1
 8006702:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006704:	4b53      	ldr	r3, [pc, #332]	; (8006854 <HAL_RCC_ClockConfig+0x184>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2201      	movs	r2, #1
 800670a:	4013      	ands	r3, r2
 800670c:	683a      	ldr	r2, [r7, #0]
 800670e:	429a      	cmp	r2, r3
 8006710:	d001      	beq.n	8006716 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	e09a      	b.n	800684c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2202      	movs	r2, #2
 800671c:	4013      	ands	r3, r2
 800671e:	d015      	beq.n	800674c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2204      	movs	r2, #4
 8006726:	4013      	ands	r3, r2
 8006728:	d006      	beq.n	8006738 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800672a:	4b4b      	ldr	r3, [pc, #300]	; (8006858 <HAL_RCC_ClockConfig+0x188>)
 800672c:	685a      	ldr	r2, [r3, #4]
 800672e:	4b4a      	ldr	r3, [pc, #296]	; (8006858 <HAL_RCC_ClockConfig+0x188>)
 8006730:	21e0      	movs	r1, #224	; 0xe0
 8006732:	00c9      	lsls	r1, r1, #3
 8006734:	430a      	orrs	r2, r1
 8006736:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006738:	4b47      	ldr	r3, [pc, #284]	; (8006858 <HAL_RCC_ClockConfig+0x188>)
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	22f0      	movs	r2, #240	; 0xf0
 800673e:	4393      	bics	r3, r2
 8006740:	0019      	movs	r1, r3
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	689a      	ldr	r2, [r3, #8]
 8006746:	4b44      	ldr	r3, [pc, #272]	; (8006858 <HAL_RCC_ClockConfig+0x188>)
 8006748:	430a      	orrs	r2, r1
 800674a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2201      	movs	r2, #1
 8006752:	4013      	ands	r3, r2
 8006754:	d040      	beq.n	80067d8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	2b01      	cmp	r3, #1
 800675c:	d107      	bne.n	800676e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800675e:	4b3e      	ldr	r3, [pc, #248]	; (8006858 <HAL_RCC_ClockConfig+0x188>)
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	2380      	movs	r3, #128	; 0x80
 8006764:	029b      	lsls	r3, r3, #10
 8006766:	4013      	ands	r3, r2
 8006768:	d114      	bne.n	8006794 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e06e      	b.n	800684c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	2b02      	cmp	r3, #2
 8006774:	d107      	bne.n	8006786 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006776:	4b38      	ldr	r3, [pc, #224]	; (8006858 <HAL_RCC_ClockConfig+0x188>)
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	2380      	movs	r3, #128	; 0x80
 800677c:	049b      	lsls	r3, r3, #18
 800677e:	4013      	ands	r3, r2
 8006780:	d108      	bne.n	8006794 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e062      	b.n	800684c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006786:	4b34      	ldr	r3, [pc, #208]	; (8006858 <HAL_RCC_ClockConfig+0x188>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	2202      	movs	r2, #2
 800678c:	4013      	ands	r3, r2
 800678e:	d101      	bne.n	8006794 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	e05b      	b.n	800684c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006794:	4b30      	ldr	r3, [pc, #192]	; (8006858 <HAL_RCC_ClockConfig+0x188>)
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	2203      	movs	r2, #3
 800679a:	4393      	bics	r3, r2
 800679c:	0019      	movs	r1, r3
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	685a      	ldr	r2, [r3, #4]
 80067a2:	4b2d      	ldr	r3, [pc, #180]	; (8006858 <HAL_RCC_ClockConfig+0x188>)
 80067a4:	430a      	orrs	r2, r1
 80067a6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067a8:	f7fe f840 	bl	800482c <HAL_GetTick>
 80067ac:	0003      	movs	r3, r0
 80067ae:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067b0:	e009      	b.n	80067c6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067b2:	f7fe f83b 	bl	800482c <HAL_GetTick>
 80067b6:	0002      	movs	r2, r0
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	1ad3      	subs	r3, r2, r3
 80067bc:	4a27      	ldr	r2, [pc, #156]	; (800685c <HAL_RCC_ClockConfig+0x18c>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d901      	bls.n	80067c6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80067c2:	2303      	movs	r3, #3
 80067c4:	e042      	b.n	800684c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067c6:	4b24      	ldr	r3, [pc, #144]	; (8006858 <HAL_RCC_ClockConfig+0x188>)
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	220c      	movs	r2, #12
 80067cc:	401a      	ands	r2, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d1ec      	bne.n	80067b2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80067d8:	4b1e      	ldr	r3, [pc, #120]	; (8006854 <HAL_RCC_ClockConfig+0x184>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2201      	movs	r2, #1
 80067de:	4013      	ands	r3, r2
 80067e0:	683a      	ldr	r2, [r7, #0]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d211      	bcs.n	800680a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067e6:	4b1b      	ldr	r3, [pc, #108]	; (8006854 <HAL_RCC_ClockConfig+0x184>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2201      	movs	r2, #1
 80067ec:	4393      	bics	r3, r2
 80067ee:	0019      	movs	r1, r3
 80067f0:	4b18      	ldr	r3, [pc, #96]	; (8006854 <HAL_RCC_ClockConfig+0x184>)
 80067f2:	683a      	ldr	r2, [r7, #0]
 80067f4:	430a      	orrs	r2, r1
 80067f6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067f8:	4b16      	ldr	r3, [pc, #88]	; (8006854 <HAL_RCC_ClockConfig+0x184>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	2201      	movs	r2, #1
 80067fe:	4013      	ands	r3, r2
 8006800:	683a      	ldr	r2, [r7, #0]
 8006802:	429a      	cmp	r2, r3
 8006804:	d001      	beq.n	800680a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e020      	b.n	800684c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2204      	movs	r2, #4
 8006810:	4013      	ands	r3, r2
 8006812:	d009      	beq.n	8006828 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006814:	4b10      	ldr	r3, [pc, #64]	; (8006858 <HAL_RCC_ClockConfig+0x188>)
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	4a11      	ldr	r2, [pc, #68]	; (8006860 <HAL_RCC_ClockConfig+0x190>)
 800681a:	4013      	ands	r3, r2
 800681c:	0019      	movs	r1, r3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	68da      	ldr	r2, [r3, #12]
 8006822:	4b0d      	ldr	r3, [pc, #52]	; (8006858 <HAL_RCC_ClockConfig+0x188>)
 8006824:	430a      	orrs	r2, r1
 8006826:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006828:	f000 f820 	bl	800686c <HAL_RCC_GetSysClockFreq>
 800682c:	0001      	movs	r1, r0
 800682e:	4b0a      	ldr	r3, [pc, #40]	; (8006858 <HAL_RCC_ClockConfig+0x188>)
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	091b      	lsrs	r3, r3, #4
 8006834:	220f      	movs	r2, #15
 8006836:	4013      	ands	r3, r2
 8006838:	4a0a      	ldr	r2, [pc, #40]	; (8006864 <HAL_RCC_ClockConfig+0x194>)
 800683a:	5cd3      	ldrb	r3, [r2, r3]
 800683c:	000a      	movs	r2, r1
 800683e:	40da      	lsrs	r2, r3
 8006840:	4b09      	ldr	r3, [pc, #36]	; (8006868 <HAL_RCC_ClockConfig+0x198>)
 8006842:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006844:	2003      	movs	r0, #3
 8006846:	f7fd fe2d 	bl	80044a4 <HAL_InitTick>
  
  return HAL_OK;
 800684a:	2300      	movs	r3, #0
}
 800684c:	0018      	movs	r0, r3
 800684e:	46bd      	mov	sp, r7
 8006850:	b004      	add	sp, #16
 8006852:	bd80      	pop	{r7, pc}
 8006854:	40022000 	.word	0x40022000
 8006858:	40021000 	.word	0x40021000
 800685c:	00001388 	.word	0x00001388
 8006860:	fffff8ff 	.word	0xfffff8ff
 8006864:	080135fc 	.word	0x080135fc
 8006868:	2000008c 	.word	0x2000008c

0800686c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800686c:	b590      	push	{r4, r7, lr}
 800686e:	b08f      	sub	sp, #60	; 0x3c
 8006870:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8006872:	2314      	movs	r3, #20
 8006874:	18fb      	adds	r3, r7, r3
 8006876:	4a2c      	ldr	r2, [pc, #176]	; (8006928 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006878:	ca13      	ldmia	r2!, {r0, r1, r4}
 800687a:	c313      	stmia	r3!, {r0, r1, r4}
 800687c:	6812      	ldr	r2, [r2, #0]
 800687e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8006880:	1d3b      	adds	r3, r7, #4
 8006882:	4a2a      	ldr	r2, [pc, #168]	; (800692c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006884:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006886:	c313      	stmia	r3!, {r0, r1, r4}
 8006888:	6812      	ldr	r2, [r2, #0]
 800688a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800688c:	2300      	movs	r3, #0
 800688e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006890:	2300      	movs	r3, #0
 8006892:	62bb      	str	r3, [r7, #40]	; 0x28
 8006894:	2300      	movs	r3, #0
 8006896:	637b      	str	r3, [r7, #52]	; 0x34
 8006898:	2300      	movs	r3, #0
 800689a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800689c:	2300      	movs	r3, #0
 800689e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80068a0:	4b23      	ldr	r3, [pc, #140]	; (8006930 <HAL_RCC_GetSysClockFreq+0xc4>)
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80068a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a8:	220c      	movs	r2, #12
 80068aa:	4013      	ands	r3, r2
 80068ac:	2b04      	cmp	r3, #4
 80068ae:	d002      	beq.n	80068b6 <HAL_RCC_GetSysClockFreq+0x4a>
 80068b0:	2b08      	cmp	r3, #8
 80068b2:	d003      	beq.n	80068bc <HAL_RCC_GetSysClockFreq+0x50>
 80068b4:	e02f      	b.n	8006916 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80068b6:	4b1f      	ldr	r3, [pc, #124]	; (8006934 <HAL_RCC_GetSysClockFreq+0xc8>)
 80068b8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80068ba:	e02f      	b.n	800691c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80068bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068be:	0c9b      	lsrs	r3, r3, #18
 80068c0:	220f      	movs	r2, #15
 80068c2:	4013      	ands	r3, r2
 80068c4:	2214      	movs	r2, #20
 80068c6:	18ba      	adds	r2, r7, r2
 80068c8:	5cd3      	ldrb	r3, [r2, r3]
 80068ca:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80068cc:	4b18      	ldr	r3, [pc, #96]	; (8006930 <HAL_RCC_GetSysClockFreq+0xc4>)
 80068ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d0:	220f      	movs	r2, #15
 80068d2:	4013      	ands	r3, r2
 80068d4:	1d3a      	adds	r2, r7, #4
 80068d6:	5cd3      	ldrb	r3, [r2, r3]
 80068d8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80068da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068dc:	23c0      	movs	r3, #192	; 0xc0
 80068de:	025b      	lsls	r3, r3, #9
 80068e0:	401a      	ands	r2, r3
 80068e2:	2380      	movs	r3, #128	; 0x80
 80068e4:	025b      	lsls	r3, r3, #9
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d109      	bne.n	80068fe <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80068ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068ec:	4811      	ldr	r0, [pc, #68]	; (8006934 <HAL_RCC_GetSysClockFreq+0xc8>)
 80068ee:	f7f9 fc27 	bl	8000140 <__udivsi3>
 80068f2:	0003      	movs	r3, r0
 80068f4:	001a      	movs	r2, r3
 80068f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f8:	4353      	muls	r3, r2
 80068fa:	637b      	str	r3, [r7, #52]	; 0x34
 80068fc:	e008      	b.n	8006910 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80068fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006900:	480c      	ldr	r0, [pc, #48]	; (8006934 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006902:	f7f9 fc1d 	bl	8000140 <__udivsi3>
 8006906:	0003      	movs	r3, r0
 8006908:	001a      	movs	r2, r3
 800690a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690c:	4353      	muls	r3, r2
 800690e:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8006910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006912:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006914:	e002      	b.n	800691c <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006916:	4b07      	ldr	r3, [pc, #28]	; (8006934 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006918:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800691a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800691c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800691e:	0018      	movs	r0, r3
 8006920:	46bd      	mov	sp, r7
 8006922:	b00f      	add	sp, #60	; 0x3c
 8006924:	bd90      	pop	{r4, r7, pc}
 8006926:	46c0      	nop			; (mov r8, r8)
 8006928:	08012efc 	.word	0x08012efc
 800692c:	08012f0c 	.word	0x08012f0c
 8006930:	40021000 	.word	0x40021000
 8006934:	007a1200 	.word	0x007a1200

08006938 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800693c:	4b02      	ldr	r3, [pc, #8]	; (8006948 <HAL_RCC_GetHCLKFreq+0x10>)
 800693e:	681b      	ldr	r3, [r3, #0]
}
 8006940:	0018      	movs	r0, r3
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
 8006946:	46c0      	nop			; (mov r8, r8)
 8006948:	2000008c 	.word	0x2000008c

0800694c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8006950:	f7ff fff2 	bl	8006938 <HAL_RCC_GetHCLKFreq>
 8006954:	0001      	movs	r1, r0
 8006956:	4b06      	ldr	r3, [pc, #24]	; (8006970 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	0a1b      	lsrs	r3, r3, #8
 800695c:	2207      	movs	r2, #7
 800695e:	4013      	ands	r3, r2
 8006960:	4a04      	ldr	r2, [pc, #16]	; (8006974 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006962:	5cd3      	ldrb	r3, [r2, r3]
 8006964:	40d9      	lsrs	r1, r3
 8006966:	000b      	movs	r3, r1
}    
 8006968:	0018      	movs	r0, r3
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	46c0      	nop			; (mov r8, r8)
 8006970:	40021000 	.word	0x40021000
 8006974:	0801360c 	.word	0x0801360c

08006978 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2207      	movs	r2, #7
 8006986:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006988:	4b0e      	ldr	r3, [pc, #56]	; (80069c4 <HAL_RCC_GetClockConfig+0x4c>)
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	2203      	movs	r2, #3
 800698e:	401a      	ands	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8006994:	4b0b      	ldr	r3, [pc, #44]	; (80069c4 <HAL_RCC_GetClockConfig+0x4c>)
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	22f0      	movs	r2, #240	; 0xf0
 800699a:	401a      	ands	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 80069a0:	4b08      	ldr	r3, [pc, #32]	; (80069c4 <HAL_RCC_GetClockConfig+0x4c>)
 80069a2:	685a      	ldr	r2, [r3, #4]
 80069a4:	23e0      	movs	r3, #224	; 0xe0
 80069a6:	00db      	lsls	r3, r3, #3
 80069a8:	401a      	ands	r2, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 80069ae:	4b06      	ldr	r3, [pc, #24]	; (80069c8 <HAL_RCC_GetClockConfig+0x50>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	2201      	movs	r2, #1
 80069b4:	401a      	ands	r2, r3
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	601a      	str	r2, [r3, #0]
}
 80069ba:	46c0      	nop			; (mov r8, r8)
 80069bc:	46bd      	mov	sp, r7
 80069be:	b002      	add	sp, #8
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	46c0      	nop			; (mov r8, r8)
 80069c4:	40021000 	.word	0x40021000
 80069c8:	40022000 	.word	0x40022000

080069cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b086      	sub	sp, #24
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80069d4:	2300      	movs	r3, #0
 80069d6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80069d8:	2300      	movs	r3, #0
 80069da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	2380      	movs	r3, #128	; 0x80
 80069e2:	025b      	lsls	r3, r3, #9
 80069e4:	4013      	ands	r3, r2
 80069e6:	d100      	bne.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80069e8:	e08e      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80069ea:	2017      	movs	r0, #23
 80069ec:	183b      	adds	r3, r7, r0
 80069ee:	2200      	movs	r2, #0
 80069f0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069f2:	4b5f      	ldr	r3, [pc, #380]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80069f4:	69da      	ldr	r2, [r3, #28]
 80069f6:	2380      	movs	r3, #128	; 0x80
 80069f8:	055b      	lsls	r3, r3, #21
 80069fa:	4013      	ands	r3, r2
 80069fc:	d110      	bne.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80069fe:	4b5c      	ldr	r3, [pc, #368]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006a00:	69da      	ldr	r2, [r3, #28]
 8006a02:	4b5b      	ldr	r3, [pc, #364]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006a04:	2180      	movs	r1, #128	; 0x80
 8006a06:	0549      	lsls	r1, r1, #21
 8006a08:	430a      	orrs	r2, r1
 8006a0a:	61da      	str	r2, [r3, #28]
 8006a0c:	4b58      	ldr	r3, [pc, #352]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006a0e:	69da      	ldr	r2, [r3, #28]
 8006a10:	2380      	movs	r3, #128	; 0x80
 8006a12:	055b      	lsls	r3, r3, #21
 8006a14:	4013      	ands	r3, r2
 8006a16:	60bb      	str	r3, [r7, #8]
 8006a18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a1a:	183b      	adds	r3, r7, r0
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a20:	4b54      	ldr	r3, [pc, #336]	; (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	2380      	movs	r3, #128	; 0x80
 8006a26:	005b      	lsls	r3, r3, #1
 8006a28:	4013      	ands	r3, r2
 8006a2a:	d11a      	bne.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a2c:	4b51      	ldr	r3, [pc, #324]	; (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	4b50      	ldr	r3, [pc, #320]	; (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006a32:	2180      	movs	r1, #128	; 0x80
 8006a34:	0049      	lsls	r1, r1, #1
 8006a36:	430a      	orrs	r2, r1
 8006a38:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a3a:	f7fd fef7 	bl	800482c <HAL_GetTick>
 8006a3e:	0003      	movs	r3, r0
 8006a40:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a42:	e008      	b.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a44:	f7fd fef2 	bl	800482c <HAL_GetTick>
 8006a48:	0002      	movs	r2, r0
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	1ad3      	subs	r3, r2, r3
 8006a4e:	2b64      	cmp	r3, #100	; 0x64
 8006a50:	d901      	bls.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8006a52:	2303      	movs	r3, #3
 8006a54:	e087      	b.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a56:	4b47      	ldr	r3, [pc, #284]	; (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	2380      	movs	r3, #128	; 0x80
 8006a5c:	005b      	lsls	r3, r3, #1
 8006a5e:	4013      	ands	r3, r2
 8006a60:	d0f0      	beq.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006a62:	4b43      	ldr	r3, [pc, #268]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006a64:	6a1a      	ldr	r2, [r3, #32]
 8006a66:	23c0      	movs	r3, #192	; 0xc0
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	4013      	ands	r3, r2
 8006a6c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d034      	beq.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x112>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	685a      	ldr	r2, [r3, #4]
 8006a78:	23c0      	movs	r3, #192	; 0xc0
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d02c      	beq.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a84:	4b3a      	ldr	r3, [pc, #232]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006a86:	6a1b      	ldr	r3, [r3, #32]
 8006a88:	4a3b      	ldr	r2, [pc, #236]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006a8a:	4013      	ands	r3, r2
 8006a8c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006a8e:	4b38      	ldr	r3, [pc, #224]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006a90:	6a1a      	ldr	r2, [r3, #32]
 8006a92:	4b37      	ldr	r3, [pc, #220]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006a94:	2180      	movs	r1, #128	; 0x80
 8006a96:	0249      	lsls	r1, r1, #9
 8006a98:	430a      	orrs	r2, r1
 8006a9a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006a9c:	4b34      	ldr	r3, [pc, #208]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006a9e:	6a1a      	ldr	r2, [r3, #32]
 8006aa0:	4b33      	ldr	r3, [pc, #204]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006aa2:	4936      	ldr	r1, [pc, #216]	; (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006aa4:	400a      	ands	r2, r1
 8006aa6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006aa8:	4b31      	ldr	r3, [pc, #196]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006aaa:	68fa      	ldr	r2, [r7, #12]
 8006aac:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	4013      	ands	r3, r2
 8006ab4:	d013      	beq.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ab6:	f7fd feb9 	bl	800482c <HAL_GetTick>
 8006aba:	0003      	movs	r3, r0
 8006abc:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006abe:	e009      	b.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ac0:	f7fd feb4 	bl	800482c <HAL_GetTick>
 8006ac4:	0002      	movs	r2, r0
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	4a2d      	ldr	r2, [pc, #180]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d901      	bls.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	e048      	b.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ad4:	4b26      	ldr	r3, [pc, #152]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006ad6:	6a1b      	ldr	r3, [r3, #32]
 8006ad8:	2202      	movs	r2, #2
 8006ada:	4013      	ands	r3, r2
 8006adc:	d0f0      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ade:	4b24      	ldr	r3, [pc, #144]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006ae0:	6a1b      	ldr	r3, [r3, #32]
 8006ae2:	4a25      	ldr	r2, [pc, #148]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ae4:	4013      	ands	r3, r2
 8006ae6:	0019      	movs	r1, r3
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	685a      	ldr	r2, [r3, #4]
 8006aec:	4b20      	ldr	r3, [pc, #128]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006aee:	430a      	orrs	r2, r1
 8006af0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006af2:	2317      	movs	r3, #23
 8006af4:	18fb      	adds	r3, r7, r3
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d105      	bne.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006afc:	4b1c      	ldr	r3, [pc, #112]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006afe:	69da      	ldr	r2, [r3, #28]
 8006b00:	4b1b      	ldr	r3, [pc, #108]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006b02:	4920      	ldr	r1, [pc, #128]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b04:	400a      	ands	r2, r1
 8006b06:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	4013      	ands	r3, r2
 8006b10:	d009      	beq.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006b12:	4b17      	ldr	r3, [pc, #92]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b16:	2203      	movs	r2, #3
 8006b18:	4393      	bics	r3, r2
 8006b1a:	0019      	movs	r1, r3
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	689a      	ldr	r2, [r3, #8]
 8006b20:	4b13      	ldr	r3, [pc, #76]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006b22:	430a      	orrs	r2, r1
 8006b24:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	2220      	movs	r2, #32
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	d009      	beq.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006b30:	4b0f      	ldr	r3, [pc, #60]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b34:	2210      	movs	r2, #16
 8006b36:	4393      	bics	r3, r2
 8006b38:	0019      	movs	r1, r3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	68da      	ldr	r2, [r3, #12]
 8006b3e:	4b0c      	ldr	r3, [pc, #48]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006b40:	430a      	orrs	r2, r1
 8006b42:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	2380      	movs	r3, #128	; 0x80
 8006b4a:	029b      	lsls	r3, r3, #10
 8006b4c:	4013      	ands	r3, r2
 8006b4e:	d009      	beq.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b50:	4b07      	ldr	r3, [pc, #28]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b54:	2280      	movs	r2, #128	; 0x80
 8006b56:	4393      	bics	r3, r2
 8006b58:	0019      	movs	r1, r3
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	691a      	ldr	r2, [r3, #16]
 8006b5e:	4b04      	ldr	r3, [pc, #16]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006b60:	430a      	orrs	r2, r1
 8006b62:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	0018      	movs	r0, r3
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	b006      	add	sp, #24
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	46c0      	nop			; (mov r8, r8)
 8006b70:	40021000 	.word	0x40021000
 8006b74:	40007000 	.word	0x40007000
 8006b78:	fffffcff 	.word	0xfffffcff
 8006b7c:	fffeffff 	.word	0xfffeffff
 8006b80:	00001388 	.word	0x00001388
 8006b84:	efffffff 	.word	0xefffffff

08006b88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d101      	bne.n	8006b9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e042      	b.n	8006c20 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	223d      	movs	r2, #61	; 0x3d
 8006b9e:	5c9b      	ldrb	r3, [r3, r2]
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d107      	bne.n	8006bb6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	223c      	movs	r2, #60	; 0x3c
 8006baa:	2100      	movs	r1, #0
 8006bac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	0018      	movs	r0, r3
 8006bb2:	f7fd fbc5 	bl	8004340 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	223d      	movs	r2, #61	; 0x3d
 8006bba:	2102      	movs	r1, #2
 8006bbc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	3304      	adds	r3, #4
 8006bc6:	0019      	movs	r1, r3
 8006bc8:	0010      	movs	r0, r2
 8006bca:	f000 fc53 	bl	8007474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2246      	movs	r2, #70	; 0x46
 8006bd2:	2101      	movs	r1, #1
 8006bd4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	223e      	movs	r2, #62	; 0x3e
 8006bda:	2101      	movs	r1, #1
 8006bdc:	5499      	strb	r1, [r3, r2]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	223f      	movs	r2, #63	; 0x3f
 8006be2:	2101      	movs	r1, #1
 8006be4:	5499      	strb	r1, [r3, r2]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2240      	movs	r2, #64	; 0x40
 8006bea:	2101      	movs	r1, #1
 8006bec:	5499      	strb	r1, [r3, r2]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2241      	movs	r2, #65	; 0x41
 8006bf2:	2101      	movs	r1, #1
 8006bf4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2242      	movs	r2, #66	; 0x42
 8006bfa:	2101      	movs	r1, #1
 8006bfc:	5499      	strb	r1, [r3, r2]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2243      	movs	r2, #67	; 0x43
 8006c02:	2101      	movs	r1, #1
 8006c04:	5499      	strb	r1, [r3, r2]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2244      	movs	r2, #68	; 0x44
 8006c0a:	2101      	movs	r1, #1
 8006c0c:	5499      	strb	r1, [r3, r2]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2245      	movs	r2, #69	; 0x45
 8006c12:	2101      	movs	r1, #1
 8006c14:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	223d      	movs	r2, #61	; 0x3d
 8006c1a:	2101      	movs	r1, #1
 8006c1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	0018      	movs	r0, r3
 8006c22:	46bd      	mov	sp, r7
 8006c24:	b002      	add	sp, #8
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	223d      	movs	r2, #61	; 0x3d
 8006c34:	5c9b      	ldrb	r3, [r3, r2]
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d001      	beq.n	8006c40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e035      	b.n	8006cac <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	223d      	movs	r2, #61	; 0x3d
 8006c44:	2102      	movs	r1, #2
 8006c46:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	68da      	ldr	r2, [r3, #12]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	2101      	movs	r1, #1
 8006c54:	430a      	orrs	r2, r1
 8006c56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a15      	ldr	r2, [pc, #84]	; (8006cb4 <HAL_TIM_Base_Start_IT+0x8c>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d009      	beq.n	8006c76 <HAL_TIM_Base_Start_IT+0x4e>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a14      	ldr	r2, [pc, #80]	; (8006cb8 <HAL_TIM_Base_Start_IT+0x90>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d004      	beq.n	8006c76 <HAL_TIM_Base_Start_IT+0x4e>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a12      	ldr	r2, [pc, #72]	; (8006cbc <HAL_TIM_Base_Start_IT+0x94>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d111      	bne.n	8006c9a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	2207      	movs	r2, #7
 8006c7e:	4013      	ands	r3, r2
 8006c80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2b06      	cmp	r3, #6
 8006c86:	d010      	beq.n	8006caa <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2101      	movs	r1, #1
 8006c94:	430a      	orrs	r2, r1
 8006c96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c98:	e007      	b.n	8006caa <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2101      	movs	r1, #1
 8006ca6:	430a      	orrs	r2, r1
 8006ca8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006caa:	2300      	movs	r3, #0
}
 8006cac:	0018      	movs	r0, r3
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	b004      	add	sp, #16
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	40012c00 	.word	0x40012c00
 8006cb8:	40000400 	.word	0x40000400
 8006cbc:	40014000 	.word	0x40014000

08006cc0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b082      	sub	sp, #8
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d101      	bne.n	8006cd2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e042      	b.n	8006d58 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	223d      	movs	r2, #61	; 0x3d
 8006cd6:	5c9b      	ldrb	r3, [r3, r2]
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d107      	bne.n	8006cee <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	223c      	movs	r2, #60	; 0x3c
 8006ce2:	2100      	movs	r1, #0
 8006ce4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	0018      	movs	r0, r3
 8006cea:	f000 f839 	bl	8006d60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	223d      	movs	r2, #61	; 0x3d
 8006cf2:	2102      	movs	r1, #2
 8006cf4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	3304      	adds	r3, #4
 8006cfe:	0019      	movs	r1, r3
 8006d00:	0010      	movs	r0, r2
 8006d02:	f000 fbb7 	bl	8007474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2246      	movs	r2, #70	; 0x46
 8006d0a:	2101      	movs	r1, #1
 8006d0c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	223e      	movs	r2, #62	; 0x3e
 8006d12:	2101      	movs	r1, #1
 8006d14:	5499      	strb	r1, [r3, r2]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	223f      	movs	r2, #63	; 0x3f
 8006d1a:	2101      	movs	r1, #1
 8006d1c:	5499      	strb	r1, [r3, r2]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2240      	movs	r2, #64	; 0x40
 8006d22:	2101      	movs	r1, #1
 8006d24:	5499      	strb	r1, [r3, r2]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2241      	movs	r2, #65	; 0x41
 8006d2a:	2101      	movs	r1, #1
 8006d2c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2242      	movs	r2, #66	; 0x42
 8006d32:	2101      	movs	r1, #1
 8006d34:	5499      	strb	r1, [r3, r2]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2243      	movs	r2, #67	; 0x43
 8006d3a:	2101      	movs	r1, #1
 8006d3c:	5499      	strb	r1, [r3, r2]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2244      	movs	r2, #68	; 0x44
 8006d42:	2101      	movs	r1, #1
 8006d44:	5499      	strb	r1, [r3, r2]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2245      	movs	r2, #69	; 0x45
 8006d4a:	2101      	movs	r1, #1
 8006d4c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	223d      	movs	r2, #61	; 0x3d
 8006d52:	2101      	movs	r1, #1
 8006d54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d56:	2300      	movs	r3, #0
}
 8006d58:	0018      	movs	r0, r3
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	b002      	add	sp, #8
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006d68:	46c0      	nop			; (mov r8, r8)
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	b002      	add	sp, #8
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d108      	bne.n	8006d92 <HAL_TIM_PWM_Start+0x22>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	223e      	movs	r2, #62	; 0x3e
 8006d84:	5c9b      	ldrb	r3, [r3, r2]
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	3b01      	subs	r3, #1
 8006d8a:	1e5a      	subs	r2, r3, #1
 8006d8c:	4193      	sbcs	r3, r2
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	e01f      	b.n	8006dd2 <HAL_TIM_PWM_Start+0x62>
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	2b04      	cmp	r3, #4
 8006d96:	d108      	bne.n	8006daa <HAL_TIM_PWM_Start+0x3a>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	223f      	movs	r2, #63	; 0x3f
 8006d9c:	5c9b      	ldrb	r3, [r3, r2]
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	3b01      	subs	r3, #1
 8006da2:	1e5a      	subs	r2, r3, #1
 8006da4:	4193      	sbcs	r3, r2
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	e013      	b.n	8006dd2 <HAL_TIM_PWM_Start+0x62>
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	2b08      	cmp	r3, #8
 8006dae:	d108      	bne.n	8006dc2 <HAL_TIM_PWM_Start+0x52>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2240      	movs	r2, #64	; 0x40
 8006db4:	5c9b      	ldrb	r3, [r3, r2]
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	3b01      	subs	r3, #1
 8006dba:	1e5a      	subs	r2, r3, #1
 8006dbc:	4193      	sbcs	r3, r2
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	e007      	b.n	8006dd2 <HAL_TIM_PWM_Start+0x62>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2241      	movs	r2, #65	; 0x41
 8006dc6:	5c9b      	ldrb	r3, [r3, r2]
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	3b01      	subs	r3, #1
 8006dcc:	1e5a      	subs	r2, r3, #1
 8006dce:	4193      	sbcs	r3, r2
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d001      	beq.n	8006dda <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e06e      	b.n	8006eb8 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d104      	bne.n	8006dea <HAL_TIM_PWM_Start+0x7a>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	223e      	movs	r2, #62	; 0x3e
 8006de4:	2102      	movs	r1, #2
 8006de6:	5499      	strb	r1, [r3, r2]
 8006de8:	e013      	b.n	8006e12 <HAL_TIM_PWM_Start+0xa2>
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	2b04      	cmp	r3, #4
 8006dee:	d104      	bne.n	8006dfa <HAL_TIM_PWM_Start+0x8a>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	223f      	movs	r2, #63	; 0x3f
 8006df4:	2102      	movs	r1, #2
 8006df6:	5499      	strb	r1, [r3, r2]
 8006df8:	e00b      	b.n	8006e12 <HAL_TIM_PWM_Start+0xa2>
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	2b08      	cmp	r3, #8
 8006dfe:	d104      	bne.n	8006e0a <HAL_TIM_PWM_Start+0x9a>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2240      	movs	r2, #64	; 0x40
 8006e04:	2102      	movs	r1, #2
 8006e06:	5499      	strb	r1, [r3, r2]
 8006e08:	e003      	b.n	8006e12 <HAL_TIM_PWM_Start+0xa2>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2241      	movs	r2, #65	; 0x41
 8006e0e:	2102      	movs	r1, #2
 8006e10:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	6839      	ldr	r1, [r7, #0]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	0018      	movs	r0, r3
 8006e1c:	f000 fe36 	bl	8007a8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a26      	ldr	r2, [pc, #152]	; (8006ec0 <HAL_TIM_PWM_Start+0x150>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d00e      	beq.n	8006e48 <HAL_TIM_PWM_Start+0xd8>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a25      	ldr	r2, [pc, #148]	; (8006ec4 <HAL_TIM_PWM_Start+0x154>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d009      	beq.n	8006e48 <HAL_TIM_PWM_Start+0xd8>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a23      	ldr	r2, [pc, #140]	; (8006ec8 <HAL_TIM_PWM_Start+0x158>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d004      	beq.n	8006e48 <HAL_TIM_PWM_Start+0xd8>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a22      	ldr	r2, [pc, #136]	; (8006ecc <HAL_TIM_PWM_Start+0x15c>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d101      	bne.n	8006e4c <HAL_TIM_PWM_Start+0xdc>
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e000      	b.n	8006e4e <HAL_TIM_PWM_Start+0xde>
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d008      	beq.n	8006e64 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2180      	movs	r1, #128	; 0x80
 8006e5e:	0209      	lsls	r1, r1, #8
 8006e60:	430a      	orrs	r2, r1
 8006e62:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a15      	ldr	r2, [pc, #84]	; (8006ec0 <HAL_TIM_PWM_Start+0x150>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d009      	beq.n	8006e82 <HAL_TIM_PWM_Start+0x112>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a17      	ldr	r2, [pc, #92]	; (8006ed0 <HAL_TIM_PWM_Start+0x160>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d004      	beq.n	8006e82 <HAL_TIM_PWM_Start+0x112>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a11      	ldr	r2, [pc, #68]	; (8006ec4 <HAL_TIM_PWM_Start+0x154>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d111      	bne.n	8006ea6 <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	2207      	movs	r2, #7
 8006e8a:	4013      	ands	r3, r2
 8006e8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2b06      	cmp	r3, #6
 8006e92:	d010      	beq.n	8006eb6 <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	2101      	movs	r1, #1
 8006ea0:	430a      	orrs	r2, r1
 8006ea2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ea4:	e007      	b.n	8006eb6 <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2101      	movs	r1, #1
 8006eb2:	430a      	orrs	r2, r1
 8006eb4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	0018      	movs	r0, r3
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	b004      	add	sp, #16
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	40012c00 	.word	0x40012c00
 8006ec4:	40014000 	.word	0x40014000
 8006ec8:	40014400 	.word	0x40014400
 8006ecc:	40014800 	.word	0x40014800
 8006ed0:	40000400 	.word	0x40000400

08006ed4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b082      	sub	sp, #8
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	691b      	ldr	r3, [r3, #16]
 8006ee2:	2202      	movs	r2, #2
 8006ee4:	4013      	ands	r3, r2
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	d124      	bne.n	8006f34 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	68db      	ldr	r3, [r3, #12]
 8006ef0:	2202      	movs	r2, #2
 8006ef2:	4013      	ands	r3, r2
 8006ef4:	2b02      	cmp	r3, #2
 8006ef6:	d11d      	bne.n	8006f34 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2203      	movs	r2, #3
 8006efe:	4252      	negs	r2, r2
 8006f00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2201      	movs	r2, #1
 8006f06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	699b      	ldr	r3, [r3, #24]
 8006f0e:	2203      	movs	r2, #3
 8006f10:	4013      	ands	r3, r2
 8006f12:	d004      	beq.n	8006f1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	0018      	movs	r0, r3
 8006f18:	f000 fa94 	bl	8007444 <HAL_TIM_IC_CaptureCallback>
 8006f1c:	e007      	b.n	8006f2e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	0018      	movs	r0, r3
 8006f22:	f000 fa87 	bl	8007434 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	0018      	movs	r0, r3
 8006f2a:	f000 fa93 	bl	8007454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2200      	movs	r2, #0
 8006f32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	2204      	movs	r2, #4
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	2b04      	cmp	r3, #4
 8006f40:	d125      	bne.n	8006f8e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	2204      	movs	r2, #4
 8006f4a:	4013      	ands	r3, r2
 8006f4c:	2b04      	cmp	r3, #4
 8006f4e:	d11e      	bne.n	8006f8e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2205      	movs	r2, #5
 8006f56:	4252      	negs	r2, r2
 8006f58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2202      	movs	r2, #2
 8006f5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	699a      	ldr	r2, [r3, #24]
 8006f66:	23c0      	movs	r3, #192	; 0xc0
 8006f68:	009b      	lsls	r3, r3, #2
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	d004      	beq.n	8006f78 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	0018      	movs	r0, r3
 8006f72:	f000 fa67 	bl	8007444 <HAL_TIM_IC_CaptureCallback>
 8006f76:	e007      	b.n	8006f88 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	0018      	movs	r0, r3
 8006f7c:	f000 fa5a 	bl	8007434 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	0018      	movs	r0, r3
 8006f84:	f000 fa66 	bl	8007454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	691b      	ldr	r3, [r3, #16]
 8006f94:	2208      	movs	r2, #8
 8006f96:	4013      	ands	r3, r2
 8006f98:	2b08      	cmp	r3, #8
 8006f9a:	d124      	bne.n	8006fe6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	2208      	movs	r2, #8
 8006fa4:	4013      	ands	r3, r2
 8006fa6:	2b08      	cmp	r3, #8
 8006fa8:	d11d      	bne.n	8006fe6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	2209      	movs	r2, #9
 8006fb0:	4252      	negs	r2, r2
 8006fb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2204      	movs	r2, #4
 8006fb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	69db      	ldr	r3, [r3, #28]
 8006fc0:	2203      	movs	r2, #3
 8006fc2:	4013      	ands	r3, r2
 8006fc4:	d004      	beq.n	8006fd0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	0018      	movs	r0, r3
 8006fca:	f000 fa3b 	bl	8007444 <HAL_TIM_IC_CaptureCallback>
 8006fce:	e007      	b.n	8006fe0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	0018      	movs	r0, r3
 8006fd4:	f000 fa2e 	bl	8007434 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	0018      	movs	r0, r3
 8006fdc:	f000 fa3a 	bl	8007454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	691b      	ldr	r3, [r3, #16]
 8006fec:	2210      	movs	r2, #16
 8006fee:	4013      	ands	r3, r2
 8006ff0:	2b10      	cmp	r3, #16
 8006ff2:	d125      	bne.n	8007040 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	2210      	movs	r2, #16
 8006ffc:	4013      	ands	r3, r2
 8006ffe:	2b10      	cmp	r3, #16
 8007000:	d11e      	bne.n	8007040 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	2211      	movs	r2, #17
 8007008:	4252      	negs	r2, r2
 800700a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2208      	movs	r2, #8
 8007010:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	69da      	ldr	r2, [r3, #28]
 8007018:	23c0      	movs	r3, #192	; 0xc0
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	4013      	ands	r3, r2
 800701e:	d004      	beq.n	800702a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	0018      	movs	r0, r3
 8007024:	f000 fa0e 	bl	8007444 <HAL_TIM_IC_CaptureCallback>
 8007028:	e007      	b.n	800703a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	0018      	movs	r0, r3
 800702e:	f000 fa01 	bl	8007434 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	0018      	movs	r0, r3
 8007036:	f000 fa0d 	bl	8007454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	2201      	movs	r2, #1
 8007048:	4013      	ands	r3, r2
 800704a:	2b01      	cmp	r3, #1
 800704c:	d10f      	bne.n	800706e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	2201      	movs	r2, #1
 8007056:	4013      	ands	r3, r2
 8007058:	2b01      	cmp	r3, #1
 800705a:	d108      	bne.n	800706e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2202      	movs	r2, #2
 8007062:	4252      	negs	r2, r2
 8007064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	0018      	movs	r0, r3
 800706a:	f7fd f88b 	bl	8004184 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	2280      	movs	r2, #128	; 0x80
 8007076:	4013      	ands	r3, r2
 8007078:	2b80      	cmp	r3, #128	; 0x80
 800707a:	d10f      	bne.n	800709c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	68db      	ldr	r3, [r3, #12]
 8007082:	2280      	movs	r2, #128	; 0x80
 8007084:	4013      	ands	r3, r2
 8007086:	2b80      	cmp	r3, #128	; 0x80
 8007088:	d108      	bne.n	800709c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2281      	movs	r2, #129	; 0x81
 8007090:	4252      	negs	r2, r2
 8007092:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	0018      	movs	r0, r3
 8007098:	f000 fd7c 	bl	8007b94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	691b      	ldr	r3, [r3, #16]
 80070a2:	2240      	movs	r2, #64	; 0x40
 80070a4:	4013      	ands	r3, r2
 80070a6:	2b40      	cmp	r3, #64	; 0x40
 80070a8:	d10f      	bne.n	80070ca <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	2240      	movs	r2, #64	; 0x40
 80070b2:	4013      	ands	r3, r2
 80070b4:	2b40      	cmp	r3, #64	; 0x40
 80070b6:	d108      	bne.n	80070ca <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2241      	movs	r2, #65	; 0x41
 80070be:	4252      	negs	r2, r2
 80070c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	0018      	movs	r0, r3
 80070c6:	f000 f9cd 	bl	8007464 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	691b      	ldr	r3, [r3, #16]
 80070d0:	2220      	movs	r2, #32
 80070d2:	4013      	ands	r3, r2
 80070d4:	2b20      	cmp	r3, #32
 80070d6:	d10f      	bne.n	80070f8 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	68db      	ldr	r3, [r3, #12]
 80070de:	2220      	movs	r2, #32
 80070e0:	4013      	ands	r3, r2
 80070e2:	2b20      	cmp	r3, #32
 80070e4:	d108      	bne.n	80070f8 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2221      	movs	r2, #33	; 0x21
 80070ec:	4252      	negs	r2, r2
 80070ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	0018      	movs	r0, r3
 80070f4:	f000 fd46 	bl	8007b84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80070f8:	46c0      	nop			; (mov r8, r8)
 80070fa:	46bd      	mov	sp, r7
 80070fc:	b002      	add	sp, #8
 80070fe:	bd80      	pop	{r7, pc}

08007100 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b086      	sub	sp, #24
 8007104:	af00      	add	r7, sp, #0
 8007106:	60f8      	str	r0, [r7, #12]
 8007108:	60b9      	str	r1, [r7, #8]
 800710a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800710c:	2317      	movs	r3, #23
 800710e:	18fb      	adds	r3, r7, r3
 8007110:	2200      	movs	r2, #0
 8007112:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	223c      	movs	r2, #60	; 0x3c
 8007118:	5c9b      	ldrb	r3, [r3, r2]
 800711a:	2b01      	cmp	r3, #1
 800711c:	d101      	bne.n	8007122 <HAL_TIM_PWM_ConfigChannel+0x22>
 800711e:	2302      	movs	r3, #2
 8007120:	e0ad      	b.n	800727e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	223c      	movs	r2, #60	; 0x3c
 8007126:	2101      	movs	r1, #1
 8007128:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2b0c      	cmp	r3, #12
 800712e:	d100      	bne.n	8007132 <HAL_TIM_PWM_ConfigChannel+0x32>
 8007130:	e076      	b.n	8007220 <HAL_TIM_PWM_ConfigChannel+0x120>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2b0c      	cmp	r3, #12
 8007136:	d900      	bls.n	800713a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8007138:	e095      	b.n	8007266 <HAL_TIM_PWM_ConfigChannel+0x166>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2b08      	cmp	r3, #8
 800713e:	d04e      	beq.n	80071de <HAL_TIM_PWM_ConfigChannel+0xde>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2b08      	cmp	r3, #8
 8007144:	d900      	bls.n	8007148 <HAL_TIM_PWM_ConfigChannel+0x48>
 8007146:	e08e      	b.n	8007266 <HAL_TIM_PWM_ConfigChannel+0x166>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d003      	beq.n	8007156 <HAL_TIM_PWM_ConfigChannel+0x56>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2b04      	cmp	r3, #4
 8007152:	d021      	beq.n	8007198 <HAL_TIM_PWM_ConfigChannel+0x98>
 8007154:	e087      	b.n	8007266 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	68ba      	ldr	r2, [r7, #8]
 800715c:	0011      	movs	r1, r2
 800715e:	0018      	movs	r0, r3
 8007160:	f000 f9fe 	bl	8007560 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	699a      	ldr	r2, [r3, #24]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2108      	movs	r1, #8
 8007170:	430a      	orrs	r2, r1
 8007172:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	699a      	ldr	r2, [r3, #24]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2104      	movs	r1, #4
 8007180:	438a      	bics	r2, r1
 8007182:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	6999      	ldr	r1, [r3, #24]
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	691a      	ldr	r2, [r3, #16]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	430a      	orrs	r2, r1
 8007194:	619a      	str	r2, [r3, #24]
      break;
 8007196:	e06b      	b.n	8007270 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	68ba      	ldr	r2, [r7, #8]
 800719e:	0011      	movs	r1, r2
 80071a0:	0018      	movs	r0, r3
 80071a2:	f000 fa65 	bl	8007670 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	699a      	ldr	r2, [r3, #24]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2180      	movs	r1, #128	; 0x80
 80071b2:	0109      	lsls	r1, r1, #4
 80071b4:	430a      	orrs	r2, r1
 80071b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	699a      	ldr	r2, [r3, #24]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4931      	ldr	r1, [pc, #196]	; (8007288 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80071c4:	400a      	ands	r2, r1
 80071c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	6999      	ldr	r1, [r3, #24]
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	021a      	lsls	r2, r3, #8
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	430a      	orrs	r2, r1
 80071da:	619a      	str	r2, [r3, #24]
      break;
 80071dc:	e048      	b.n	8007270 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	68ba      	ldr	r2, [r7, #8]
 80071e4:	0011      	movs	r1, r2
 80071e6:	0018      	movs	r0, r3
 80071e8:	f000 fac6 	bl	8007778 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	69da      	ldr	r2, [r3, #28]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	2108      	movs	r1, #8
 80071f8:	430a      	orrs	r2, r1
 80071fa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	69da      	ldr	r2, [r3, #28]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	2104      	movs	r1, #4
 8007208:	438a      	bics	r2, r1
 800720a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	69d9      	ldr	r1, [r3, #28]
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	691a      	ldr	r2, [r3, #16]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	430a      	orrs	r2, r1
 800721c:	61da      	str	r2, [r3, #28]
      break;
 800721e:	e027      	b.n	8007270 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	68ba      	ldr	r2, [r7, #8]
 8007226:	0011      	movs	r1, r2
 8007228:	0018      	movs	r0, r3
 800722a:	f000 fb2b 	bl	8007884 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	69da      	ldr	r2, [r3, #28]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	2180      	movs	r1, #128	; 0x80
 800723a:	0109      	lsls	r1, r1, #4
 800723c:	430a      	orrs	r2, r1
 800723e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	69da      	ldr	r2, [r3, #28]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	490f      	ldr	r1, [pc, #60]	; (8007288 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800724c:	400a      	ands	r2, r1
 800724e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	69d9      	ldr	r1, [r3, #28]
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	021a      	lsls	r2, r3, #8
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	430a      	orrs	r2, r1
 8007262:	61da      	str	r2, [r3, #28]
      break;
 8007264:	e004      	b.n	8007270 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8007266:	2317      	movs	r3, #23
 8007268:	18fb      	adds	r3, r7, r3
 800726a:	2201      	movs	r2, #1
 800726c:	701a      	strb	r2, [r3, #0]
      break;
 800726e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	223c      	movs	r2, #60	; 0x3c
 8007274:	2100      	movs	r1, #0
 8007276:	5499      	strb	r1, [r3, r2]

  return status;
 8007278:	2317      	movs	r3, #23
 800727a:	18fb      	adds	r3, r7, r3
 800727c:	781b      	ldrb	r3, [r3, #0]
}
 800727e:	0018      	movs	r0, r3
 8007280:	46bd      	mov	sp, r7
 8007282:	b006      	add	sp, #24
 8007284:	bd80      	pop	{r7, pc}
 8007286:	46c0      	nop			; (mov r8, r8)
 8007288:	fffffbff 	.word	0xfffffbff

0800728c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007296:	230f      	movs	r3, #15
 8007298:	18fb      	adds	r3, r7, r3
 800729a:	2200      	movs	r2, #0
 800729c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	223c      	movs	r2, #60	; 0x3c
 80072a2:	5c9b      	ldrb	r3, [r3, r2]
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d101      	bne.n	80072ac <HAL_TIM_ConfigClockSource+0x20>
 80072a8:	2302      	movs	r3, #2
 80072aa:	e0bc      	b.n	8007426 <HAL_TIM_ConfigClockSource+0x19a>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	223c      	movs	r2, #60	; 0x3c
 80072b0:	2101      	movs	r1, #1
 80072b2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	223d      	movs	r2, #61	; 0x3d
 80072b8:	2102      	movs	r1, #2
 80072ba:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	2277      	movs	r2, #119	; 0x77
 80072c8:	4393      	bics	r3, r2
 80072ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	4a58      	ldr	r2, [pc, #352]	; (8007430 <HAL_TIM_ConfigClockSource+0x1a4>)
 80072d0:	4013      	ands	r3, r2
 80072d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	68ba      	ldr	r2, [r7, #8]
 80072da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2280      	movs	r2, #128	; 0x80
 80072e2:	0192      	lsls	r2, r2, #6
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d040      	beq.n	800736a <HAL_TIM_ConfigClockSource+0xde>
 80072e8:	2280      	movs	r2, #128	; 0x80
 80072ea:	0192      	lsls	r2, r2, #6
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d900      	bls.n	80072f2 <HAL_TIM_ConfigClockSource+0x66>
 80072f0:	e088      	b.n	8007404 <HAL_TIM_ConfigClockSource+0x178>
 80072f2:	2280      	movs	r2, #128	; 0x80
 80072f4:	0152      	lsls	r2, r2, #5
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d100      	bne.n	80072fc <HAL_TIM_ConfigClockSource+0x70>
 80072fa:	e088      	b.n	800740e <HAL_TIM_ConfigClockSource+0x182>
 80072fc:	2280      	movs	r2, #128	; 0x80
 80072fe:	0152      	lsls	r2, r2, #5
 8007300:	4293      	cmp	r3, r2
 8007302:	d900      	bls.n	8007306 <HAL_TIM_ConfigClockSource+0x7a>
 8007304:	e07e      	b.n	8007404 <HAL_TIM_ConfigClockSource+0x178>
 8007306:	2b70      	cmp	r3, #112	; 0x70
 8007308:	d018      	beq.n	800733c <HAL_TIM_ConfigClockSource+0xb0>
 800730a:	d900      	bls.n	800730e <HAL_TIM_ConfigClockSource+0x82>
 800730c:	e07a      	b.n	8007404 <HAL_TIM_ConfigClockSource+0x178>
 800730e:	2b60      	cmp	r3, #96	; 0x60
 8007310:	d04f      	beq.n	80073b2 <HAL_TIM_ConfigClockSource+0x126>
 8007312:	d900      	bls.n	8007316 <HAL_TIM_ConfigClockSource+0x8a>
 8007314:	e076      	b.n	8007404 <HAL_TIM_ConfigClockSource+0x178>
 8007316:	2b50      	cmp	r3, #80	; 0x50
 8007318:	d03b      	beq.n	8007392 <HAL_TIM_ConfigClockSource+0x106>
 800731a:	d900      	bls.n	800731e <HAL_TIM_ConfigClockSource+0x92>
 800731c:	e072      	b.n	8007404 <HAL_TIM_ConfigClockSource+0x178>
 800731e:	2b40      	cmp	r3, #64	; 0x40
 8007320:	d057      	beq.n	80073d2 <HAL_TIM_ConfigClockSource+0x146>
 8007322:	d900      	bls.n	8007326 <HAL_TIM_ConfigClockSource+0x9a>
 8007324:	e06e      	b.n	8007404 <HAL_TIM_ConfigClockSource+0x178>
 8007326:	2b30      	cmp	r3, #48	; 0x30
 8007328:	d063      	beq.n	80073f2 <HAL_TIM_ConfigClockSource+0x166>
 800732a:	d86b      	bhi.n	8007404 <HAL_TIM_ConfigClockSource+0x178>
 800732c:	2b20      	cmp	r3, #32
 800732e:	d060      	beq.n	80073f2 <HAL_TIM_ConfigClockSource+0x166>
 8007330:	d868      	bhi.n	8007404 <HAL_TIM_ConfigClockSource+0x178>
 8007332:	2b00      	cmp	r3, #0
 8007334:	d05d      	beq.n	80073f2 <HAL_TIM_ConfigClockSource+0x166>
 8007336:	2b10      	cmp	r3, #16
 8007338:	d05b      	beq.n	80073f2 <HAL_TIM_ConfigClockSource+0x166>
 800733a:	e063      	b.n	8007404 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6818      	ldr	r0, [r3, #0]
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	6899      	ldr	r1, [r3, #8]
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	685a      	ldr	r2, [r3, #4]
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	f000 fb7e 	bl	8007a4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	2277      	movs	r2, #119	; 0x77
 800735c:	4313      	orrs	r3, r2
 800735e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	68ba      	ldr	r2, [r7, #8]
 8007366:	609a      	str	r2, [r3, #8]
      break;
 8007368:	e052      	b.n	8007410 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6818      	ldr	r0, [r3, #0]
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	6899      	ldr	r1, [r3, #8]
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	685a      	ldr	r2, [r3, #4]
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	68db      	ldr	r3, [r3, #12]
 800737a:	f000 fb67 	bl	8007a4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	689a      	ldr	r2, [r3, #8]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	2180      	movs	r1, #128	; 0x80
 800738a:	01c9      	lsls	r1, r1, #7
 800738c:	430a      	orrs	r2, r1
 800738e:	609a      	str	r2, [r3, #8]
      break;
 8007390:	e03e      	b.n	8007410 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6818      	ldr	r0, [r3, #0]
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	6859      	ldr	r1, [r3, #4]
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	001a      	movs	r2, r3
 80073a0:	f000 fada 	bl	8007958 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2150      	movs	r1, #80	; 0x50
 80073aa:	0018      	movs	r0, r3
 80073ac:	f000 fb34 	bl	8007a18 <TIM_ITRx_SetConfig>
      break;
 80073b0:	e02e      	b.n	8007410 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6818      	ldr	r0, [r3, #0]
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	6859      	ldr	r1, [r3, #4]
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	68db      	ldr	r3, [r3, #12]
 80073be:	001a      	movs	r2, r3
 80073c0:	f000 faf8 	bl	80079b4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	2160      	movs	r1, #96	; 0x60
 80073ca:	0018      	movs	r0, r3
 80073cc:	f000 fb24 	bl	8007a18 <TIM_ITRx_SetConfig>
      break;
 80073d0:	e01e      	b.n	8007410 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6818      	ldr	r0, [r3, #0]
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	6859      	ldr	r1, [r3, #4]
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	68db      	ldr	r3, [r3, #12]
 80073de:	001a      	movs	r2, r3
 80073e0:	f000 faba 	bl	8007958 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	2140      	movs	r1, #64	; 0x40
 80073ea:	0018      	movs	r0, r3
 80073ec:	f000 fb14 	bl	8007a18 <TIM_ITRx_SetConfig>
      break;
 80073f0:	e00e      	b.n	8007410 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	0019      	movs	r1, r3
 80073fc:	0010      	movs	r0, r2
 80073fe:	f000 fb0b 	bl	8007a18 <TIM_ITRx_SetConfig>
      break;
 8007402:	e005      	b.n	8007410 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8007404:	230f      	movs	r3, #15
 8007406:	18fb      	adds	r3, r7, r3
 8007408:	2201      	movs	r2, #1
 800740a:	701a      	strb	r2, [r3, #0]
      break;
 800740c:	e000      	b.n	8007410 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800740e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	223d      	movs	r2, #61	; 0x3d
 8007414:	2101      	movs	r1, #1
 8007416:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	223c      	movs	r2, #60	; 0x3c
 800741c:	2100      	movs	r1, #0
 800741e:	5499      	strb	r1, [r3, r2]

  return status;
 8007420:	230f      	movs	r3, #15
 8007422:	18fb      	adds	r3, r7, r3
 8007424:	781b      	ldrb	r3, [r3, #0]
}
 8007426:	0018      	movs	r0, r3
 8007428:	46bd      	mov	sp, r7
 800742a:	b004      	add	sp, #16
 800742c:	bd80      	pop	{r7, pc}
 800742e:	46c0      	nop			; (mov r8, r8)
 8007430:	ffff00ff 	.word	0xffff00ff

08007434 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800743c:	46c0      	nop			; (mov r8, r8)
 800743e:	46bd      	mov	sp, r7
 8007440:	b002      	add	sp, #8
 8007442:	bd80      	pop	{r7, pc}

08007444 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800744c:	46c0      	nop			; (mov r8, r8)
 800744e:	46bd      	mov	sp, r7
 8007450:	b002      	add	sp, #8
 8007452:	bd80      	pop	{r7, pc}

08007454 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800745c:	46c0      	nop			; (mov r8, r8)
 800745e:	46bd      	mov	sp, r7
 8007460:	b002      	add	sp, #8
 8007462:	bd80      	pop	{r7, pc}

08007464 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800746c:	46c0      	nop			; (mov r8, r8)
 800746e:	46bd      	mov	sp, r7
 8007470:	b002      	add	sp, #8
 8007472:	bd80      	pop	{r7, pc}

08007474 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	4a2f      	ldr	r2, [pc, #188]	; (8007544 <TIM_Base_SetConfig+0xd0>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d003      	beq.n	8007494 <TIM_Base_SetConfig+0x20>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	4a2e      	ldr	r2, [pc, #184]	; (8007548 <TIM_Base_SetConfig+0xd4>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d108      	bne.n	80074a6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2270      	movs	r2, #112	; 0x70
 8007498:	4393      	bics	r3, r2
 800749a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	68fa      	ldr	r2, [r7, #12]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	4a26      	ldr	r2, [pc, #152]	; (8007544 <TIM_Base_SetConfig+0xd0>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d013      	beq.n	80074d6 <TIM_Base_SetConfig+0x62>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4a25      	ldr	r2, [pc, #148]	; (8007548 <TIM_Base_SetConfig+0xd4>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d00f      	beq.n	80074d6 <TIM_Base_SetConfig+0x62>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4a24      	ldr	r2, [pc, #144]	; (800754c <TIM_Base_SetConfig+0xd8>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d00b      	beq.n	80074d6 <TIM_Base_SetConfig+0x62>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a23      	ldr	r2, [pc, #140]	; (8007550 <TIM_Base_SetConfig+0xdc>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d007      	beq.n	80074d6 <TIM_Base_SetConfig+0x62>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a22      	ldr	r2, [pc, #136]	; (8007554 <TIM_Base_SetConfig+0xe0>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d003      	beq.n	80074d6 <TIM_Base_SetConfig+0x62>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4a21      	ldr	r2, [pc, #132]	; (8007558 <TIM_Base_SetConfig+0xe4>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d108      	bne.n	80074e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	4a20      	ldr	r2, [pc, #128]	; (800755c <TIM_Base_SetConfig+0xe8>)
 80074da:	4013      	ands	r3, r2
 80074dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	68db      	ldr	r3, [r3, #12]
 80074e2:	68fa      	ldr	r2, [r7, #12]
 80074e4:	4313      	orrs	r3, r2
 80074e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2280      	movs	r2, #128	; 0x80
 80074ec:	4393      	bics	r3, r2
 80074ee:	001a      	movs	r2, r3
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	695b      	ldr	r3, [r3, #20]
 80074f4:	4313      	orrs	r3, r2
 80074f6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	68fa      	ldr	r2, [r7, #12]
 80074fc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	689a      	ldr	r2, [r3, #8]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4a0c      	ldr	r2, [pc, #48]	; (8007544 <TIM_Base_SetConfig+0xd0>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d00b      	beq.n	800752e <TIM_Base_SetConfig+0xba>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	4a0d      	ldr	r2, [pc, #52]	; (8007550 <TIM_Base_SetConfig+0xdc>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d007      	beq.n	800752e <TIM_Base_SetConfig+0xba>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	4a0c      	ldr	r2, [pc, #48]	; (8007554 <TIM_Base_SetConfig+0xe0>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d003      	beq.n	800752e <TIM_Base_SetConfig+0xba>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	4a0b      	ldr	r2, [pc, #44]	; (8007558 <TIM_Base_SetConfig+0xe4>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d103      	bne.n	8007536 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	691a      	ldr	r2, [r3, #16]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2201      	movs	r2, #1
 800753a:	615a      	str	r2, [r3, #20]
}
 800753c:	46c0      	nop			; (mov r8, r8)
 800753e:	46bd      	mov	sp, r7
 8007540:	b004      	add	sp, #16
 8007542:	bd80      	pop	{r7, pc}
 8007544:	40012c00 	.word	0x40012c00
 8007548:	40000400 	.word	0x40000400
 800754c:	40002000 	.word	0x40002000
 8007550:	40014000 	.word	0x40014000
 8007554:	40014400 	.word	0x40014400
 8007558:	40014800 	.word	0x40014800
 800755c:	fffffcff 	.word	0xfffffcff

08007560 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b086      	sub	sp, #24
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6a1b      	ldr	r3, [r3, #32]
 800756e:	2201      	movs	r2, #1
 8007570:	4393      	bics	r3, r2
 8007572:	001a      	movs	r2, r3
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6a1b      	ldr	r3, [r3, #32]
 800757c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	699b      	ldr	r3, [r3, #24]
 8007588:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2270      	movs	r2, #112	; 0x70
 800758e:	4393      	bics	r3, r2
 8007590:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2203      	movs	r2, #3
 8007596:	4393      	bics	r3, r2
 8007598:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	68fa      	ldr	r2, [r7, #12]
 80075a0:	4313      	orrs	r3, r2
 80075a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	2202      	movs	r2, #2
 80075a8:	4393      	bics	r3, r2
 80075aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	697a      	ldr	r2, [r7, #20]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4a27      	ldr	r2, [pc, #156]	; (8007658 <TIM_OC1_SetConfig+0xf8>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d00b      	beq.n	80075d6 <TIM_OC1_SetConfig+0x76>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4a26      	ldr	r2, [pc, #152]	; (800765c <TIM_OC1_SetConfig+0xfc>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d007      	beq.n	80075d6 <TIM_OC1_SetConfig+0x76>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4a25      	ldr	r2, [pc, #148]	; (8007660 <TIM_OC1_SetConfig+0x100>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d003      	beq.n	80075d6 <TIM_OC1_SetConfig+0x76>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4a24      	ldr	r2, [pc, #144]	; (8007664 <TIM_OC1_SetConfig+0x104>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d10c      	bne.n	80075f0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	2208      	movs	r2, #8
 80075da:	4393      	bics	r3, r2
 80075dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	697a      	ldr	r2, [r7, #20]
 80075e4:	4313      	orrs	r3, r2
 80075e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	2204      	movs	r2, #4
 80075ec:	4393      	bics	r3, r2
 80075ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	4a19      	ldr	r2, [pc, #100]	; (8007658 <TIM_OC1_SetConfig+0xf8>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d00b      	beq.n	8007610 <TIM_OC1_SetConfig+0xb0>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	4a18      	ldr	r2, [pc, #96]	; (800765c <TIM_OC1_SetConfig+0xfc>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d007      	beq.n	8007610 <TIM_OC1_SetConfig+0xb0>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	4a17      	ldr	r2, [pc, #92]	; (8007660 <TIM_OC1_SetConfig+0x100>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d003      	beq.n	8007610 <TIM_OC1_SetConfig+0xb0>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	4a16      	ldr	r2, [pc, #88]	; (8007664 <TIM_OC1_SetConfig+0x104>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d111      	bne.n	8007634 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	4a15      	ldr	r2, [pc, #84]	; (8007668 <TIM_OC1_SetConfig+0x108>)
 8007614:	4013      	ands	r3, r2
 8007616:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	4a14      	ldr	r2, [pc, #80]	; (800766c <TIM_OC1_SetConfig+0x10c>)
 800761c:	4013      	ands	r3, r2
 800761e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	695b      	ldr	r3, [r3, #20]
 8007624:	693a      	ldr	r2, [r7, #16]
 8007626:	4313      	orrs	r3, r2
 8007628:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	699b      	ldr	r3, [r3, #24]
 800762e:	693a      	ldr	r2, [r7, #16]
 8007630:	4313      	orrs	r3, r2
 8007632:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	693a      	ldr	r2, [r7, #16]
 8007638:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	68fa      	ldr	r2, [r7, #12]
 800763e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	685a      	ldr	r2, [r3, #4]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	697a      	ldr	r2, [r7, #20]
 800764c:	621a      	str	r2, [r3, #32]
}
 800764e:	46c0      	nop			; (mov r8, r8)
 8007650:	46bd      	mov	sp, r7
 8007652:	b006      	add	sp, #24
 8007654:	bd80      	pop	{r7, pc}
 8007656:	46c0      	nop			; (mov r8, r8)
 8007658:	40012c00 	.word	0x40012c00
 800765c:	40014000 	.word	0x40014000
 8007660:	40014400 	.word	0x40014400
 8007664:	40014800 	.word	0x40014800
 8007668:	fffffeff 	.word	0xfffffeff
 800766c:	fffffdff 	.word	0xfffffdff

08007670 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b086      	sub	sp, #24
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6a1b      	ldr	r3, [r3, #32]
 800767e:	2210      	movs	r2, #16
 8007680:	4393      	bics	r3, r2
 8007682:	001a      	movs	r2, r3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6a1b      	ldr	r3, [r3, #32]
 800768c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	699b      	ldr	r3, [r3, #24]
 8007698:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	4a2e      	ldr	r2, [pc, #184]	; (8007758 <TIM_OC2_SetConfig+0xe8>)
 800769e:	4013      	ands	r3, r2
 80076a0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	4a2d      	ldr	r2, [pc, #180]	; (800775c <TIM_OC2_SetConfig+0xec>)
 80076a6:	4013      	ands	r3, r2
 80076a8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	021b      	lsls	r3, r3, #8
 80076b0:	68fa      	ldr	r2, [r7, #12]
 80076b2:	4313      	orrs	r3, r2
 80076b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	2220      	movs	r2, #32
 80076ba:	4393      	bics	r3, r2
 80076bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	011b      	lsls	r3, r3, #4
 80076c4:	697a      	ldr	r2, [r7, #20]
 80076c6:	4313      	orrs	r3, r2
 80076c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	4a24      	ldr	r2, [pc, #144]	; (8007760 <TIM_OC2_SetConfig+0xf0>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d10d      	bne.n	80076ee <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	2280      	movs	r2, #128	; 0x80
 80076d6:	4393      	bics	r3, r2
 80076d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	011b      	lsls	r3, r3, #4
 80076e0:	697a      	ldr	r2, [r7, #20]
 80076e2:	4313      	orrs	r3, r2
 80076e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	2240      	movs	r2, #64	; 0x40
 80076ea:	4393      	bics	r3, r2
 80076ec:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4a1b      	ldr	r2, [pc, #108]	; (8007760 <TIM_OC2_SetConfig+0xf0>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d00b      	beq.n	800770e <TIM_OC2_SetConfig+0x9e>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4a1a      	ldr	r2, [pc, #104]	; (8007764 <TIM_OC2_SetConfig+0xf4>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d007      	beq.n	800770e <TIM_OC2_SetConfig+0x9e>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4a19      	ldr	r2, [pc, #100]	; (8007768 <TIM_OC2_SetConfig+0xf8>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d003      	beq.n	800770e <TIM_OC2_SetConfig+0x9e>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4a18      	ldr	r2, [pc, #96]	; (800776c <TIM_OC2_SetConfig+0xfc>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d113      	bne.n	8007736 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	4a17      	ldr	r2, [pc, #92]	; (8007770 <TIM_OC2_SetConfig+0x100>)
 8007712:	4013      	ands	r3, r2
 8007714:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	4a16      	ldr	r2, [pc, #88]	; (8007774 <TIM_OC2_SetConfig+0x104>)
 800771a:	4013      	ands	r3, r2
 800771c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	695b      	ldr	r3, [r3, #20]
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	693a      	ldr	r2, [r7, #16]
 8007726:	4313      	orrs	r3, r2
 8007728:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	699b      	ldr	r3, [r3, #24]
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	693a      	ldr	r2, [r7, #16]
 8007732:	4313      	orrs	r3, r2
 8007734:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	693a      	ldr	r2, [r7, #16]
 800773a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	685a      	ldr	r2, [r3, #4]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	697a      	ldr	r2, [r7, #20]
 800774e:	621a      	str	r2, [r3, #32]
}
 8007750:	46c0      	nop			; (mov r8, r8)
 8007752:	46bd      	mov	sp, r7
 8007754:	b006      	add	sp, #24
 8007756:	bd80      	pop	{r7, pc}
 8007758:	ffff8fff 	.word	0xffff8fff
 800775c:	fffffcff 	.word	0xfffffcff
 8007760:	40012c00 	.word	0x40012c00
 8007764:	40014000 	.word	0x40014000
 8007768:	40014400 	.word	0x40014400
 800776c:	40014800 	.word	0x40014800
 8007770:	fffffbff 	.word	0xfffffbff
 8007774:	fffff7ff 	.word	0xfffff7ff

08007778 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b086      	sub	sp, #24
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6a1b      	ldr	r3, [r3, #32]
 8007786:	4a35      	ldr	r2, [pc, #212]	; (800785c <TIM_OC3_SetConfig+0xe4>)
 8007788:	401a      	ands	r2, r3
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6a1b      	ldr	r3, [r3, #32]
 8007792:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	69db      	ldr	r3, [r3, #28]
 800779e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2270      	movs	r2, #112	; 0x70
 80077a4:	4393      	bics	r3, r2
 80077a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2203      	movs	r2, #3
 80077ac:	4393      	bics	r3, r2
 80077ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	68fa      	ldr	r2, [r7, #12]
 80077b6:	4313      	orrs	r3, r2
 80077b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	4a28      	ldr	r2, [pc, #160]	; (8007860 <TIM_OC3_SetConfig+0xe8>)
 80077be:	4013      	ands	r3, r2
 80077c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	021b      	lsls	r3, r3, #8
 80077c8:	697a      	ldr	r2, [r7, #20]
 80077ca:	4313      	orrs	r3, r2
 80077cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	4a24      	ldr	r2, [pc, #144]	; (8007864 <TIM_OC3_SetConfig+0xec>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d10d      	bne.n	80077f2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	4a23      	ldr	r2, [pc, #140]	; (8007868 <TIM_OC3_SetConfig+0xf0>)
 80077da:	4013      	ands	r3, r2
 80077dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	021b      	lsls	r3, r3, #8
 80077e4:	697a      	ldr	r2, [r7, #20]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	4a1f      	ldr	r2, [pc, #124]	; (800786c <TIM_OC3_SetConfig+0xf4>)
 80077ee:	4013      	ands	r3, r2
 80077f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4a1b      	ldr	r2, [pc, #108]	; (8007864 <TIM_OC3_SetConfig+0xec>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d00b      	beq.n	8007812 <TIM_OC3_SetConfig+0x9a>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4a1c      	ldr	r2, [pc, #112]	; (8007870 <TIM_OC3_SetConfig+0xf8>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d007      	beq.n	8007812 <TIM_OC3_SetConfig+0x9a>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	4a1b      	ldr	r2, [pc, #108]	; (8007874 <TIM_OC3_SetConfig+0xfc>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d003      	beq.n	8007812 <TIM_OC3_SetConfig+0x9a>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4a1a      	ldr	r2, [pc, #104]	; (8007878 <TIM_OC3_SetConfig+0x100>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d113      	bne.n	800783a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	4a19      	ldr	r2, [pc, #100]	; (800787c <TIM_OC3_SetConfig+0x104>)
 8007816:	4013      	ands	r3, r2
 8007818:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	4a18      	ldr	r2, [pc, #96]	; (8007880 <TIM_OC3_SetConfig+0x108>)
 800781e:	4013      	ands	r3, r2
 8007820:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	695b      	ldr	r3, [r3, #20]
 8007826:	011b      	lsls	r3, r3, #4
 8007828:	693a      	ldr	r2, [r7, #16]
 800782a:	4313      	orrs	r3, r2
 800782c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	699b      	ldr	r3, [r3, #24]
 8007832:	011b      	lsls	r3, r3, #4
 8007834:	693a      	ldr	r2, [r7, #16]
 8007836:	4313      	orrs	r3, r2
 8007838:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	693a      	ldr	r2, [r7, #16]
 800783e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	68fa      	ldr	r2, [r7, #12]
 8007844:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	685a      	ldr	r2, [r3, #4]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	697a      	ldr	r2, [r7, #20]
 8007852:	621a      	str	r2, [r3, #32]
}
 8007854:	46c0      	nop			; (mov r8, r8)
 8007856:	46bd      	mov	sp, r7
 8007858:	b006      	add	sp, #24
 800785a:	bd80      	pop	{r7, pc}
 800785c:	fffffeff 	.word	0xfffffeff
 8007860:	fffffdff 	.word	0xfffffdff
 8007864:	40012c00 	.word	0x40012c00
 8007868:	fffff7ff 	.word	0xfffff7ff
 800786c:	fffffbff 	.word	0xfffffbff
 8007870:	40014000 	.word	0x40014000
 8007874:	40014400 	.word	0x40014400
 8007878:	40014800 	.word	0x40014800
 800787c:	ffffefff 	.word	0xffffefff
 8007880:	ffffdfff 	.word	0xffffdfff

08007884 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b086      	sub	sp, #24
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6a1b      	ldr	r3, [r3, #32]
 8007892:	4a28      	ldr	r2, [pc, #160]	; (8007934 <TIM_OC4_SetConfig+0xb0>)
 8007894:	401a      	ands	r2, r3
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a1b      	ldr	r3, [r3, #32]
 800789e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	69db      	ldr	r3, [r3, #28]
 80078aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	4a22      	ldr	r2, [pc, #136]	; (8007938 <TIM_OC4_SetConfig+0xb4>)
 80078b0:	4013      	ands	r3, r2
 80078b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	4a21      	ldr	r2, [pc, #132]	; (800793c <TIM_OC4_SetConfig+0xb8>)
 80078b8:	4013      	ands	r3, r2
 80078ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	021b      	lsls	r3, r3, #8
 80078c2:	68fa      	ldr	r2, [r7, #12]
 80078c4:	4313      	orrs	r3, r2
 80078c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	4a1d      	ldr	r2, [pc, #116]	; (8007940 <TIM_OC4_SetConfig+0xbc>)
 80078cc:	4013      	ands	r3, r2
 80078ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	031b      	lsls	r3, r3, #12
 80078d6:	693a      	ldr	r2, [r7, #16]
 80078d8:	4313      	orrs	r3, r2
 80078da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	4a19      	ldr	r2, [pc, #100]	; (8007944 <TIM_OC4_SetConfig+0xc0>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d00b      	beq.n	80078fc <TIM_OC4_SetConfig+0x78>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	4a18      	ldr	r2, [pc, #96]	; (8007948 <TIM_OC4_SetConfig+0xc4>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d007      	beq.n	80078fc <TIM_OC4_SetConfig+0x78>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	4a17      	ldr	r2, [pc, #92]	; (800794c <TIM_OC4_SetConfig+0xc8>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d003      	beq.n	80078fc <TIM_OC4_SetConfig+0x78>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	4a16      	ldr	r2, [pc, #88]	; (8007950 <TIM_OC4_SetConfig+0xcc>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d109      	bne.n	8007910 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	4a15      	ldr	r2, [pc, #84]	; (8007954 <TIM_OC4_SetConfig+0xd0>)
 8007900:	4013      	ands	r3, r2
 8007902:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	695b      	ldr	r3, [r3, #20]
 8007908:	019b      	lsls	r3, r3, #6
 800790a:	697a      	ldr	r2, [r7, #20]
 800790c:	4313      	orrs	r3, r2
 800790e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	697a      	ldr	r2, [r7, #20]
 8007914:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	68fa      	ldr	r2, [r7, #12]
 800791a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	685a      	ldr	r2, [r3, #4]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	693a      	ldr	r2, [r7, #16]
 8007928:	621a      	str	r2, [r3, #32]
}
 800792a:	46c0      	nop			; (mov r8, r8)
 800792c:	46bd      	mov	sp, r7
 800792e:	b006      	add	sp, #24
 8007930:	bd80      	pop	{r7, pc}
 8007932:	46c0      	nop			; (mov r8, r8)
 8007934:	ffffefff 	.word	0xffffefff
 8007938:	ffff8fff 	.word	0xffff8fff
 800793c:	fffffcff 	.word	0xfffffcff
 8007940:	ffffdfff 	.word	0xffffdfff
 8007944:	40012c00 	.word	0x40012c00
 8007948:	40014000 	.word	0x40014000
 800794c:	40014400 	.word	0x40014400
 8007950:	40014800 	.word	0x40014800
 8007954:	ffffbfff 	.word	0xffffbfff

08007958 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b086      	sub	sp, #24
 800795c:	af00      	add	r7, sp, #0
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	60b9      	str	r1, [r7, #8]
 8007962:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6a1b      	ldr	r3, [r3, #32]
 8007968:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6a1b      	ldr	r3, [r3, #32]
 800796e:	2201      	movs	r2, #1
 8007970:	4393      	bics	r3, r2
 8007972:	001a      	movs	r2, r3
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	699b      	ldr	r3, [r3, #24]
 800797c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	22f0      	movs	r2, #240	; 0xf0
 8007982:	4393      	bics	r3, r2
 8007984:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	011b      	lsls	r3, r3, #4
 800798a:	693a      	ldr	r2, [r7, #16]
 800798c:	4313      	orrs	r3, r2
 800798e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	220a      	movs	r2, #10
 8007994:	4393      	bics	r3, r2
 8007996:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007998:	697a      	ldr	r2, [r7, #20]
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	4313      	orrs	r3, r2
 800799e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	693a      	ldr	r2, [r7, #16]
 80079a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	697a      	ldr	r2, [r7, #20]
 80079aa:	621a      	str	r2, [r3, #32]
}
 80079ac:	46c0      	nop			; (mov r8, r8)
 80079ae:	46bd      	mov	sp, r7
 80079b0:	b006      	add	sp, #24
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b086      	sub	sp, #24
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	60b9      	str	r1, [r7, #8]
 80079be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	6a1b      	ldr	r3, [r3, #32]
 80079c4:	2210      	movs	r2, #16
 80079c6:	4393      	bics	r3, r2
 80079c8:	001a      	movs	r2, r3
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	699b      	ldr	r3, [r3, #24]
 80079d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6a1b      	ldr	r3, [r3, #32]
 80079d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	4a0d      	ldr	r2, [pc, #52]	; (8007a14 <TIM_TI2_ConfigInputStage+0x60>)
 80079de:	4013      	ands	r3, r2
 80079e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	031b      	lsls	r3, r3, #12
 80079e6:	697a      	ldr	r2, [r7, #20]
 80079e8:	4313      	orrs	r3, r2
 80079ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	22a0      	movs	r2, #160	; 0xa0
 80079f0:	4393      	bics	r3, r2
 80079f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	011b      	lsls	r3, r3, #4
 80079f8:	693a      	ldr	r2, [r7, #16]
 80079fa:	4313      	orrs	r3, r2
 80079fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	697a      	ldr	r2, [r7, #20]
 8007a02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	693a      	ldr	r2, [r7, #16]
 8007a08:	621a      	str	r2, [r3, #32]
}
 8007a0a:	46c0      	nop			; (mov r8, r8)
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	b006      	add	sp, #24
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	46c0      	nop			; (mov r8, r8)
 8007a14:	ffff0fff 	.word	0xffff0fff

08007a18 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b084      	sub	sp, #16
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2270      	movs	r2, #112	; 0x70
 8007a2c:	4393      	bics	r3, r2
 8007a2e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a30:	683a      	ldr	r2, [r7, #0]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	4313      	orrs	r3, r2
 8007a36:	2207      	movs	r2, #7
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	68fa      	ldr	r2, [r7, #12]
 8007a40:	609a      	str	r2, [r3, #8]
}
 8007a42:	46c0      	nop			; (mov r8, r8)
 8007a44:	46bd      	mov	sp, r7
 8007a46:	b004      	add	sp, #16
 8007a48:	bd80      	pop	{r7, pc}
	...

08007a4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b086      	sub	sp, #24
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	60b9      	str	r1, [r7, #8]
 8007a56:	607a      	str	r2, [r7, #4]
 8007a58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	4a09      	ldr	r2, [pc, #36]	; (8007a88 <TIM_ETR_SetConfig+0x3c>)
 8007a64:	4013      	ands	r3, r2
 8007a66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	021a      	lsls	r2, r3, #8
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	431a      	orrs	r2, r3
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	4313      	orrs	r3, r2
 8007a74:	697a      	ldr	r2, [r7, #20]
 8007a76:	4313      	orrs	r3, r2
 8007a78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	697a      	ldr	r2, [r7, #20]
 8007a7e:	609a      	str	r2, [r3, #8]
}
 8007a80:	46c0      	nop			; (mov r8, r8)
 8007a82:	46bd      	mov	sp, r7
 8007a84:	b006      	add	sp, #24
 8007a86:	bd80      	pop	{r7, pc}
 8007a88:	ffff00ff 	.word	0xffff00ff

08007a8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b086      	sub	sp, #24
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	60b9      	str	r1, [r7, #8]
 8007a96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	221f      	movs	r2, #31
 8007a9c:	4013      	ands	r3, r2
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	409a      	lsls	r2, r3
 8007aa2:	0013      	movs	r3, r2
 8007aa4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	6a1b      	ldr	r3, [r3, #32]
 8007aaa:	697a      	ldr	r2, [r7, #20]
 8007aac:	43d2      	mvns	r2, r2
 8007aae:	401a      	ands	r2, r3
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6a1a      	ldr	r2, [r3, #32]
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	211f      	movs	r1, #31
 8007abc:	400b      	ands	r3, r1
 8007abe:	6879      	ldr	r1, [r7, #4]
 8007ac0:	4099      	lsls	r1, r3
 8007ac2:	000b      	movs	r3, r1
 8007ac4:	431a      	orrs	r2, r3
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	621a      	str	r2, [r3, #32]
}
 8007aca:	46c0      	nop			; (mov r8, r8)
 8007acc:	46bd      	mov	sp, r7
 8007ace:	b006      	add	sp, #24
 8007ad0:	bd80      	pop	{r7, pc}
	...

08007ad4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	223c      	movs	r2, #60	; 0x3c
 8007ae2:	5c9b      	ldrb	r3, [r3, r2]
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d101      	bne.n	8007aec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ae8:	2302      	movs	r3, #2
 8007aea:	e041      	b.n	8007b70 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	223c      	movs	r2, #60	; 0x3c
 8007af0:	2101      	movs	r1, #1
 8007af2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	223d      	movs	r2, #61	; 0x3d
 8007af8:	2102      	movs	r1, #2
 8007afa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2270      	movs	r2, #112	; 0x70
 8007b10:	4393      	bics	r3, r2
 8007b12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	68fa      	ldr	r2, [r7, #12]
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	68fa      	ldr	r2, [r7, #12]
 8007b24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a13      	ldr	r2, [pc, #76]	; (8007b78 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d009      	beq.n	8007b44 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a11      	ldr	r2, [pc, #68]	; (8007b7c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d004      	beq.n	8007b44 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a10      	ldr	r2, [pc, #64]	; (8007b80 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d10c      	bne.n	8007b5e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	2280      	movs	r2, #128	; 0x80
 8007b48:	4393      	bics	r3, r2
 8007b4a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	68ba      	ldr	r2, [r7, #8]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	68ba      	ldr	r2, [r7, #8]
 8007b5c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	223d      	movs	r2, #61	; 0x3d
 8007b62:	2101      	movs	r1, #1
 8007b64:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	223c      	movs	r2, #60	; 0x3c
 8007b6a:	2100      	movs	r1, #0
 8007b6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007b6e:	2300      	movs	r3, #0
}
 8007b70:	0018      	movs	r0, r3
 8007b72:	46bd      	mov	sp, r7
 8007b74:	b004      	add	sp, #16
 8007b76:	bd80      	pop	{r7, pc}
 8007b78:	40012c00 	.word	0x40012c00
 8007b7c:	40000400 	.word	0x40000400
 8007b80:	40014000 	.word	0x40014000

08007b84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b082      	sub	sp, #8
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b8c:	46c0      	nop			; (mov r8, r8)
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	b002      	add	sp, #8
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b082      	sub	sp, #8
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b9c:	46c0      	nop			; (mov r8, r8)
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	b002      	add	sp, #8
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b082      	sub	sp, #8
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d101      	bne.n	8007bb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	e044      	b.n	8007c40 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d107      	bne.n	8007bce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2274      	movs	r2, #116	; 0x74
 8007bc2:	2100      	movs	r1, #0
 8007bc4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	0018      	movs	r0, r3
 8007bca:	f7fc fc17 	bl	80043fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2224      	movs	r2, #36	; 0x24
 8007bd2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2101      	movs	r1, #1
 8007be0:	438a      	bics	r2, r1
 8007be2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	0018      	movs	r0, r3
 8007be8:	f000 fbb2 	bl	8008350 <UART_SetConfig>
 8007bec:	0003      	movs	r3, r0
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d101      	bne.n	8007bf6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e024      	b.n	8007c40 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d003      	beq.n	8007c06 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	0018      	movs	r0, r3
 8007c02:	f000 fcfd 	bl	8008600 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	685a      	ldr	r2, [r3, #4]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	490d      	ldr	r1, [pc, #52]	; (8007c48 <HAL_UART_Init+0xa4>)
 8007c12:	400a      	ands	r2, r1
 8007c14:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	689a      	ldr	r2, [r3, #8]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	2108      	movs	r1, #8
 8007c22:	438a      	bics	r2, r1
 8007c24:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	2101      	movs	r1, #1
 8007c32:	430a      	orrs	r2, r1
 8007c34:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	0018      	movs	r0, r3
 8007c3a:	f000 fd95 	bl	8008768 <UART_CheckIdleState>
 8007c3e:	0003      	movs	r3, r0
}
 8007c40:	0018      	movs	r0, r3
 8007c42:	46bd      	mov	sp, r7
 8007c44:	b002      	add	sp, #8
 8007c46:	bd80      	pop	{r7, pc}
 8007c48:	fffff7ff 	.word	0xfffff7ff

08007c4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b08a      	sub	sp, #40	; 0x28
 8007c50:	af02      	add	r7, sp, #8
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	603b      	str	r3, [r7, #0]
 8007c58:	1dbb      	adds	r3, r7, #6
 8007c5a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c60:	2b20      	cmp	r3, #32
 8007c62:	d000      	beq.n	8007c66 <HAL_UART_Transmit+0x1a>
 8007c64:	e096      	b.n	8007d94 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d003      	beq.n	8007c74 <HAL_UART_Transmit+0x28>
 8007c6c:	1dbb      	adds	r3, r7, #6
 8007c6e:	881b      	ldrh	r3, [r3, #0]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d101      	bne.n	8007c78 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	e08e      	b.n	8007d96 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	689a      	ldr	r2, [r3, #8]
 8007c7c:	2380      	movs	r3, #128	; 0x80
 8007c7e:	015b      	lsls	r3, r3, #5
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d109      	bne.n	8007c98 <HAL_UART_Transmit+0x4c>
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	691b      	ldr	r3, [r3, #16]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d105      	bne.n	8007c98 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	4013      	ands	r3, r2
 8007c92:	d001      	beq.n	8007c98 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8007c94:	2301      	movs	r3, #1
 8007c96:	e07e      	b.n	8007d96 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2274      	movs	r2, #116	; 0x74
 8007c9c:	5c9b      	ldrb	r3, [r3, r2]
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d101      	bne.n	8007ca6 <HAL_UART_Transmit+0x5a>
 8007ca2:	2302      	movs	r3, #2
 8007ca4:	e077      	b.n	8007d96 <HAL_UART_Transmit+0x14a>
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2274      	movs	r2, #116	; 0x74
 8007caa:	2101      	movs	r1, #1
 8007cac:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2280      	movs	r2, #128	; 0x80
 8007cb2:	2100      	movs	r1, #0
 8007cb4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2221      	movs	r2, #33	; 0x21
 8007cba:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007cbc:	f7fc fdb6 	bl	800482c <HAL_GetTick>
 8007cc0:	0003      	movs	r3, r0
 8007cc2:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	1dba      	adds	r2, r7, #6
 8007cc8:	2150      	movs	r1, #80	; 0x50
 8007cca:	8812      	ldrh	r2, [r2, #0]
 8007ccc:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	1dba      	adds	r2, r7, #6
 8007cd2:	2152      	movs	r1, #82	; 0x52
 8007cd4:	8812      	ldrh	r2, [r2, #0]
 8007cd6:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	689a      	ldr	r2, [r3, #8]
 8007cdc:	2380      	movs	r3, #128	; 0x80
 8007cde:	015b      	lsls	r3, r3, #5
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d108      	bne.n	8007cf6 <HAL_UART_Transmit+0xaa>
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d104      	bne.n	8007cf6 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8007cec:	2300      	movs	r3, #0
 8007cee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	61bb      	str	r3, [r7, #24]
 8007cf4:	e003      	b.n	8007cfe <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2274      	movs	r2, #116	; 0x74
 8007d02:	2100      	movs	r1, #0
 8007d04:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8007d06:	e02d      	b.n	8007d64 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007d08:	697a      	ldr	r2, [r7, #20]
 8007d0a:	68f8      	ldr	r0, [r7, #12]
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	9300      	str	r3, [sp, #0]
 8007d10:	0013      	movs	r3, r2
 8007d12:	2200      	movs	r2, #0
 8007d14:	2180      	movs	r1, #128	; 0x80
 8007d16:	f000 fd6f 	bl	80087f8 <UART_WaitOnFlagUntilTimeout>
 8007d1a:	1e03      	subs	r3, r0, #0
 8007d1c:	d001      	beq.n	8007d22 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8007d1e:	2303      	movs	r3, #3
 8007d20:	e039      	b.n	8007d96 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8007d22:	69fb      	ldr	r3, [r7, #28]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d10b      	bne.n	8007d40 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007d28:	69bb      	ldr	r3, [r7, #24]
 8007d2a:	881a      	ldrh	r2, [r3, #0]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	05d2      	lsls	r2, r2, #23
 8007d32:	0dd2      	lsrs	r2, r2, #23
 8007d34:	b292      	uxth	r2, r2
 8007d36:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007d38:	69bb      	ldr	r3, [r7, #24]
 8007d3a:	3302      	adds	r3, #2
 8007d3c:	61bb      	str	r3, [r7, #24]
 8007d3e:	e008      	b.n	8007d52 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007d40:	69fb      	ldr	r3, [r7, #28]
 8007d42:	781a      	ldrb	r2, [r3, #0]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	b292      	uxth	r2, r2
 8007d4a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	3301      	adds	r3, #1
 8007d50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2252      	movs	r2, #82	; 0x52
 8007d56:	5a9b      	ldrh	r3, [r3, r2]
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	3b01      	subs	r3, #1
 8007d5c:	b299      	uxth	r1, r3
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2252      	movs	r2, #82	; 0x52
 8007d62:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2252      	movs	r2, #82	; 0x52
 8007d68:	5a9b      	ldrh	r3, [r3, r2]
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d1cb      	bne.n	8007d08 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007d70:	697a      	ldr	r2, [r7, #20]
 8007d72:	68f8      	ldr	r0, [r7, #12]
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	9300      	str	r3, [sp, #0]
 8007d78:	0013      	movs	r3, r2
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	2140      	movs	r1, #64	; 0x40
 8007d7e:	f000 fd3b 	bl	80087f8 <UART_WaitOnFlagUntilTimeout>
 8007d82:	1e03      	subs	r3, r0, #0
 8007d84:	d001      	beq.n	8007d8a <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8007d86:	2303      	movs	r3, #3
 8007d88:	e005      	b.n	8007d96 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2220      	movs	r2, #32
 8007d8e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007d90:	2300      	movs	r3, #0
 8007d92:	e000      	b.n	8007d96 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8007d94:	2302      	movs	r3, #2
  }
}
 8007d96:	0018      	movs	r0, r3
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	b008      	add	sp, #32
 8007d9c:	bd80      	pop	{r7, pc}
	...

08007da0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007da0:	b590      	push	{r4, r7, lr}
 8007da2:	b0ab      	sub	sp, #172	; 0xac
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	69db      	ldr	r3, [r3, #28]
 8007dae:	22a4      	movs	r2, #164	; 0xa4
 8007db0:	18b9      	adds	r1, r7, r2
 8007db2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	20a0      	movs	r0, #160	; 0xa0
 8007dbc:	1839      	adds	r1, r7, r0
 8007dbe:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	689b      	ldr	r3, [r3, #8]
 8007dc6:	219c      	movs	r1, #156	; 0x9c
 8007dc8:	1879      	adds	r1, r7, r1
 8007dca:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007dcc:	0011      	movs	r1, r2
 8007dce:	18bb      	adds	r3, r7, r2
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a99      	ldr	r2, [pc, #612]	; (8008038 <HAL_UART_IRQHandler+0x298>)
 8007dd4:	4013      	ands	r3, r2
 8007dd6:	2298      	movs	r2, #152	; 0x98
 8007dd8:	18bc      	adds	r4, r7, r2
 8007dda:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8007ddc:	18bb      	adds	r3, r7, r2
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d114      	bne.n	8007e0e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007de4:	187b      	adds	r3, r7, r1
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	2220      	movs	r2, #32
 8007dea:	4013      	ands	r3, r2
 8007dec:	d00f      	beq.n	8007e0e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007dee:	183b      	adds	r3, r7, r0
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	2220      	movs	r2, #32
 8007df4:	4013      	ands	r3, r2
 8007df6:	d00a      	beq.n	8007e0e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d100      	bne.n	8007e02 <HAL_UART_IRQHandler+0x62>
 8007e00:	e27e      	b.n	8008300 <HAL_UART_IRQHandler+0x560>
      {
        huart->RxISR(huart);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	0010      	movs	r0, r2
 8007e0a:	4798      	blx	r3
      }
      return;
 8007e0c:	e278      	b.n	8008300 <HAL_UART_IRQHandler+0x560>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007e0e:	2398      	movs	r3, #152	; 0x98
 8007e10:	18fb      	adds	r3, r7, r3
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d100      	bne.n	8007e1a <HAL_UART_IRQHandler+0x7a>
 8007e18:	e114      	b.n	8008044 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007e1a:	239c      	movs	r3, #156	; 0x9c
 8007e1c:	18fb      	adds	r3, r7, r3
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2201      	movs	r2, #1
 8007e22:	4013      	ands	r3, r2
 8007e24:	d106      	bne.n	8007e34 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007e26:	23a0      	movs	r3, #160	; 0xa0
 8007e28:	18fb      	adds	r3, r7, r3
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a83      	ldr	r2, [pc, #524]	; (800803c <HAL_UART_IRQHandler+0x29c>)
 8007e2e:	4013      	ands	r3, r2
 8007e30:	d100      	bne.n	8007e34 <HAL_UART_IRQHandler+0x94>
 8007e32:	e107      	b.n	8008044 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007e34:	23a4      	movs	r3, #164	; 0xa4
 8007e36:	18fb      	adds	r3, r7, r3
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	4013      	ands	r3, r2
 8007e3e:	d012      	beq.n	8007e66 <HAL_UART_IRQHandler+0xc6>
 8007e40:	23a0      	movs	r3, #160	; 0xa0
 8007e42:	18fb      	adds	r3, r7, r3
 8007e44:	681a      	ldr	r2, [r3, #0]
 8007e46:	2380      	movs	r3, #128	; 0x80
 8007e48:	005b      	lsls	r3, r3, #1
 8007e4a:	4013      	ands	r3, r2
 8007e4c:	d00b      	beq.n	8007e66 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	2201      	movs	r2, #1
 8007e54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2280      	movs	r2, #128	; 0x80
 8007e5a:	589b      	ldr	r3, [r3, r2]
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	431a      	orrs	r2, r3
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2180      	movs	r1, #128	; 0x80
 8007e64:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e66:	23a4      	movs	r3, #164	; 0xa4
 8007e68:	18fb      	adds	r3, r7, r3
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2202      	movs	r2, #2
 8007e6e:	4013      	ands	r3, r2
 8007e70:	d011      	beq.n	8007e96 <HAL_UART_IRQHandler+0xf6>
 8007e72:	239c      	movs	r3, #156	; 0x9c
 8007e74:	18fb      	adds	r3, r7, r3
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	2201      	movs	r2, #1
 8007e7a:	4013      	ands	r3, r2
 8007e7c:	d00b      	beq.n	8007e96 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	2202      	movs	r2, #2
 8007e84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2280      	movs	r2, #128	; 0x80
 8007e8a:	589b      	ldr	r3, [r3, r2]
 8007e8c:	2204      	movs	r2, #4
 8007e8e:	431a      	orrs	r2, r3
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2180      	movs	r1, #128	; 0x80
 8007e94:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e96:	23a4      	movs	r3, #164	; 0xa4
 8007e98:	18fb      	adds	r3, r7, r3
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	2204      	movs	r2, #4
 8007e9e:	4013      	ands	r3, r2
 8007ea0:	d011      	beq.n	8007ec6 <HAL_UART_IRQHandler+0x126>
 8007ea2:	239c      	movs	r3, #156	; 0x9c
 8007ea4:	18fb      	adds	r3, r7, r3
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	4013      	ands	r3, r2
 8007eac:	d00b      	beq.n	8007ec6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	2204      	movs	r2, #4
 8007eb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2280      	movs	r2, #128	; 0x80
 8007eba:	589b      	ldr	r3, [r3, r2]
 8007ebc:	2202      	movs	r2, #2
 8007ebe:	431a      	orrs	r2, r3
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2180      	movs	r1, #128	; 0x80
 8007ec4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007ec6:	23a4      	movs	r3, #164	; 0xa4
 8007ec8:	18fb      	adds	r3, r7, r3
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	2208      	movs	r2, #8
 8007ece:	4013      	ands	r3, r2
 8007ed0:	d017      	beq.n	8007f02 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007ed2:	23a0      	movs	r3, #160	; 0xa0
 8007ed4:	18fb      	adds	r3, r7, r3
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2220      	movs	r2, #32
 8007eda:	4013      	ands	r3, r2
 8007edc:	d105      	bne.n	8007eea <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007ede:	239c      	movs	r3, #156	; 0x9c
 8007ee0:	18fb      	adds	r3, r7, r3
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007ee8:	d00b      	beq.n	8007f02 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	2208      	movs	r2, #8
 8007ef0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2280      	movs	r2, #128	; 0x80
 8007ef6:	589b      	ldr	r3, [r3, r2]
 8007ef8:	2208      	movs	r2, #8
 8007efa:	431a      	orrs	r2, r3
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2180      	movs	r1, #128	; 0x80
 8007f00:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007f02:	23a4      	movs	r3, #164	; 0xa4
 8007f04:	18fb      	adds	r3, r7, r3
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	2380      	movs	r3, #128	; 0x80
 8007f0a:	011b      	lsls	r3, r3, #4
 8007f0c:	4013      	ands	r3, r2
 8007f0e:	d013      	beq.n	8007f38 <HAL_UART_IRQHandler+0x198>
 8007f10:	23a0      	movs	r3, #160	; 0xa0
 8007f12:	18fb      	adds	r3, r7, r3
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	2380      	movs	r3, #128	; 0x80
 8007f18:	04db      	lsls	r3, r3, #19
 8007f1a:	4013      	ands	r3, r2
 8007f1c:	d00c      	beq.n	8007f38 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	2280      	movs	r2, #128	; 0x80
 8007f24:	0112      	lsls	r2, r2, #4
 8007f26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2280      	movs	r2, #128	; 0x80
 8007f2c:	589b      	ldr	r3, [r3, r2]
 8007f2e:	2220      	movs	r2, #32
 8007f30:	431a      	orrs	r2, r3
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2180      	movs	r1, #128	; 0x80
 8007f36:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2280      	movs	r2, #128	; 0x80
 8007f3c:	589b      	ldr	r3, [r3, r2]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d100      	bne.n	8007f44 <HAL_UART_IRQHandler+0x1a4>
 8007f42:	e1df      	b.n	8008304 <HAL_UART_IRQHandler+0x564>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007f44:	23a4      	movs	r3, #164	; 0xa4
 8007f46:	18fb      	adds	r3, r7, r3
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	2220      	movs	r2, #32
 8007f4c:	4013      	ands	r3, r2
 8007f4e:	d00e      	beq.n	8007f6e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007f50:	23a0      	movs	r3, #160	; 0xa0
 8007f52:	18fb      	adds	r3, r7, r3
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	2220      	movs	r2, #32
 8007f58:	4013      	ands	r3, r2
 8007f5a:	d008      	beq.n	8007f6e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d004      	beq.n	8007f6e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	0010      	movs	r0, r2
 8007f6c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2280      	movs	r2, #128	; 0x80
 8007f72:	589b      	ldr	r3, [r3, r2]
 8007f74:	2194      	movs	r1, #148	; 0x94
 8007f76:	187a      	adds	r2, r7, r1
 8007f78:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	2240      	movs	r2, #64	; 0x40
 8007f82:	4013      	ands	r3, r2
 8007f84:	2b40      	cmp	r3, #64	; 0x40
 8007f86:	d004      	beq.n	8007f92 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007f88:	187b      	adds	r3, r7, r1
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	2228      	movs	r2, #40	; 0x28
 8007f8e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f90:	d047      	beq.n	8008022 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	0018      	movs	r0, r3
 8007f96:	f000 fda3 	bl	8008ae0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	2240      	movs	r2, #64	; 0x40
 8007fa2:	4013      	ands	r3, r2
 8007fa4:	2b40      	cmp	r3, #64	; 0x40
 8007fa6:	d137      	bne.n	8008018 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fa8:	f3ef 8310 	mrs	r3, PRIMASK
 8007fac:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8007fae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fb0:	2090      	movs	r0, #144	; 0x90
 8007fb2:	183a      	adds	r2, r7, r0
 8007fb4:	6013      	str	r3, [r2, #0]
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fbc:	f383 8810 	msr	PRIMASK, r3
}
 8007fc0:	46c0      	nop			; (mov r8, r8)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	689a      	ldr	r2, [r3, #8]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	2140      	movs	r1, #64	; 0x40
 8007fce:	438a      	bics	r2, r1
 8007fd0:	609a      	str	r2, [r3, #8]
 8007fd2:	183b      	adds	r3, r7, r0
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007fda:	f383 8810 	msr	PRIMASK, r3
}
 8007fde:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d012      	beq.n	800800e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fec:	4a14      	ldr	r2, [pc, #80]	; (8008040 <HAL_UART_IRQHandler+0x2a0>)
 8007fee:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ff4:	0018      	movs	r0, r3
 8007ff6:	f7fd fab8 	bl	800556a <HAL_DMA_Abort_IT>
 8007ffa:	1e03      	subs	r3, r0, #0
 8007ffc:	d01a      	beq.n	8008034 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008002:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008008:	0018      	movs	r0, r3
 800800a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800800c:	e012      	b.n	8008034 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	0018      	movs	r0, r3
 8008012:	f000 f995 	bl	8008340 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008016:	e00d      	b.n	8008034 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	0018      	movs	r0, r3
 800801c:	f000 f990 	bl	8008340 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008020:	e008      	b.n	8008034 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	0018      	movs	r0, r3
 8008026:	f000 f98b 	bl	8008340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2280      	movs	r2, #128	; 0x80
 800802e:	2100      	movs	r1, #0
 8008030:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8008032:	e167      	b.n	8008304 <HAL_UART_IRQHandler+0x564>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008034:	46c0      	nop			; (mov r8, r8)
    return;
 8008036:	e165      	b.n	8008304 <HAL_UART_IRQHandler+0x564>
 8008038:	0000080f 	.word	0x0000080f
 800803c:	04000120 	.word	0x04000120
 8008040:	08008ba5 	.word	0x08008ba5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008048:	2b01      	cmp	r3, #1
 800804a:	d000      	beq.n	800804e <HAL_UART_IRQHandler+0x2ae>
 800804c:	e131      	b.n	80082b2 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800804e:	23a4      	movs	r3, #164	; 0xa4
 8008050:	18fb      	adds	r3, r7, r3
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2210      	movs	r2, #16
 8008056:	4013      	ands	r3, r2
 8008058:	d100      	bne.n	800805c <HAL_UART_IRQHandler+0x2bc>
 800805a:	e12a      	b.n	80082b2 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800805c:	23a0      	movs	r3, #160	; 0xa0
 800805e:	18fb      	adds	r3, r7, r3
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	2210      	movs	r2, #16
 8008064:	4013      	ands	r3, r2
 8008066:	d100      	bne.n	800806a <HAL_UART_IRQHandler+0x2ca>
 8008068:	e123      	b.n	80082b2 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	2210      	movs	r2, #16
 8008070:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	2240      	movs	r2, #64	; 0x40
 800807a:	4013      	ands	r3, r2
 800807c:	2b40      	cmp	r3, #64	; 0x40
 800807e:	d000      	beq.n	8008082 <HAL_UART_IRQHandler+0x2e2>
 8008080:	e09b      	b.n	80081ba <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	685a      	ldr	r2, [r3, #4]
 800808a:	217e      	movs	r1, #126	; 0x7e
 800808c:	187b      	adds	r3, r7, r1
 800808e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8008090:	187b      	adds	r3, r7, r1
 8008092:	881b      	ldrh	r3, [r3, #0]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d100      	bne.n	800809a <HAL_UART_IRQHandler+0x2fa>
 8008098:	e136      	b.n	8008308 <HAL_UART_IRQHandler+0x568>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2258      	movs	r2, #88	; 0x58
 800809e:	5a9b      	ldrh	r3, [r3, r2]
 80080a0:	187a      	adds	r2, r7, r1
 80080a2:	8812      	ldrh	r2, [r2, #0]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d300      	bcc.n	80080aa <HAL_UART_IRQHandler+0x30a>
 80080a8:	e12e      	b.n	8008308 <HAL_UART_IRQHandler+0x568>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	187a      	adds	r2, r7, r1
 80080ae:	215a      	movs	r1, #90	; 0x5a
 80080b0:	8812      	ldrh	r2, [r2, #0]
 80080b2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080b8:	699b      	ldr	r3, [r3, #24]
 80080ba:	2b20      	cmp	r3, #32
 80080bc:	d06e      	beq.n	800819c <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080be:	f3ef 8310 	mrs	r3, PRIMASK
 80080c2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80080c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080c6:	67bb      	str	r3, [r7, #120]	; 0x78
 80080c8:	2301      	movs	r3, #1
 80080ca:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080ce:	f383 8810 	msr	PRIMASK, r3
}
 80080d2:	46c0      	nop			; (mov r8, r8)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	498e      	ldr	r1, [pc, #568]	; (8008318 <HAL_UART_IRQHandler+0x578>)
 80080e0:	400a      	ands	r2, r1
 80080e2:	601a      	str	r2, [r3, #0]
 80080e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080e6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ea:	f383 8810 	msr	PRIMASK, r3
}
 80080ee:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080f0:	f3ef 8310 	mrs	r3, PRIMASK
 80080f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80080f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080f8:	677b      	str	r3, [r7, #116]	; 0x74
 80080fa:	2301      	movs	r3, #1
 80080fc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008100:	f383 8810 	msr	PRIMASK, r3
}
 8008104:	46c0      	nop			; (mov r8, r8)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	689a      	ldr	r2, [r3, #8]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	2101      	movs	r1, #1
 8008112:	438a      	bics	r2, r1
 8008114:	609a      	str	r2, [r3, #8]
 8008116:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008118:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800811a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800811c:	f383 8810 	msr	PRIMASK, r3
}
 8008120:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008122:	f3ef 8310 	mrs	r3, PRIMASK
 8008126:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8008128:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800812a:	673b      	str	r3, [r7, #112]	; 0x70
 800812c:	2301      	movs	r3, #1
 800812e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008130:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008132:	f383 8810 	msr	PRIMASK, r3
}
 8008136:	46c0      	nop			; (mov r8, r8)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	689a      	ldr	r2, [r3, #8]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	2140      	movs	r1, #64	; 0x40
 8008144:	438a      	bics	r2, r1
 8008146:	609a      	str	r2, [r3, #8]
 8008148:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800814a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800814c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800814e:	f383 8810 	msr	PRIMASK, r3
}
 8008152:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2220      	movs	r2, #32
 8008158:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2200      	movs	r2, #0
 800815e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008160:	f3ef 8310 	mrs	r3, PRIMASK
 8008164:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8008166:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008168:	66fb      	str	r3, [r7, #108]	; 0x6c
 800816a:	2301      	movs	r3, #1
 800816c:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800816e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008170:	f383 8810 	msr	PRIMASK, r3
}
 8008174:	46c0      	nop			; (mov r8, r8)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	681a      	ldr	r2, [r3, #0]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	2110      	movs	r1, #16
 8008182:	438a      	bics	r2, r1
 8008184:	601a      	str	r2, [r3, #0]
 8008186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008188:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800818a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800818c:	f383 8810 	msr	PRIMASK, r3
}
 8008190:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008196:	0018      	movs	r0, r3
 8008198:	f7fd f9af 	bl	80054fa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2258      	movs	r2, #88	; 0x58
 80081a0:	5a9a      	ldrh	r2, [r3, r2]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	215a      	movs	r1, #90	; 0x5a
 80081a6:	5a5b      	ldrh	r3, [r3, r1]
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	1ad3      	subs	r3, r2, r3
 80081ac:	b29a      	uxth	r2, r3
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	0011      	movs	r1, r2
 80081b2:	0018      	movs	r0, r3
 80081b4:	f7fb fa22 	bl	80035fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80081b8:	e0a6      	b.n	8008308 <HAL_UART_IRQHandler+0x568>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2258      	movs	r2, #88	; 0x58
 80081be:	5a99      	ldrh	r1, [r3, r2]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	225a      	movs	r2, #90	; 0x5a
 80081c4:	5a9b      	ldrh	r3, [r3, r2]
 80081c6:	b29a      	uxth	r2, r3
 80081c8:	208e      	movs	r0, #142	; 0x8e
 80081ca:	183b      	adds	r3, r7, r0
 80081cc:	1a8a      	subs	r2, r1, r2
 80081ce:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	225a      	movs	r2, #90	; 0x5a
 80081d4:	5a9b      	ldrh	r3, [r3, r2]
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d100      	bne.n	80081de <HAL_UART_IRQHandler+0x43e>
 80081dc:	e096      	b.n	800830c <HAL_UART_IRQHandler+0x56c>
          && (nb_rx_data > 0U))
 80081de:	183b      	adds	r3, r7, r0
 80081e0:	881b      	ldrh	r3, [r3, #0]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d100      	bne.n	80081e8 <HAL_UART_IRQHandler+0x448>
 80081e6:	e091      	b.n	800830c <HAL_UART_IRQHandler+0x56c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081e8:	f3ef 8310 	mrs	r3, PRIMASK
 80081ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80081ee:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081f0:	2488      	movs	r4, #136	; 0x88
 80081f2:	193a      	adds	r2, r7, r4
 80081f4:	6013      	str	r3, [r2, #0]
 80081f6:	2301      	movs	r3, #1
 80081f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	f383 8810 	msr	PRIMASK, r3
}
 8008200:	46c0      	nop			; (mov r8, r8)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4943      	ldr	r1, [pc, #268]	; (800831c <HAL_UART_IRQHandler+0x57c>)
 800820e:	400a      	ands	r2, r1
 8008210:	601a      	str	r2, [r3, #0]
 8008212:	193b      	adds	r3, r7, r4
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	f383 8810 	msr	PRIMASK, r3
}
 800821e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008220:	f3ef 8310 	mrs	r3, PRIMASK
 8008224:	61bb      	str	r3, [r7, #24]
  return(result);
 8008226:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008228:	2484      	movs	r4, #132	; 0x84
 800822a:	193a      	adds	r2, r7, r4
 800822c:	6013      	str	r3, [r2, #0]
 800822e:	2301      	movs	r3, #1
 8008230:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008232:	69fb      	ldr	r3, [r7, #28]
 8008234:	f383 8810 	msr	PRIMASK, r3
}
 8008238:	46c0      	nop			; (mov r8, r8)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	689a      	ldr	r2, [r3, #8]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	2101      	movs	r1, #1
 8008246:	438a      	bics	r2, r1
 8008248:	609a      	str	r2, [r3, #8]
 800824a:	193b      	adds	r3, r7, r4
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008250:	6a3b      	ldr	r3, [r7, #32]
 8008252:	f383 8810 	msr	PRIMASK, r3
}
 8008256:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2220      	movs	r2, #32
 800825c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2200      	movs	r2, #0
 8008262:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2200      	movs	r2, #0
 8008268:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800826a:	f3ef 8310 	mrs	r3, PRIMASK
 800826e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008270:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008272:	2480      	movs	r4, #128	; 0x80
 8008274:	193a      	adds	r2, r7, r4
 8008276:	6013      	str	r3, [r2, #0]
 8008278:	2301      	movs	r3, #1
 800827a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800827c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800827e:	f383 8810 	msr	PRIMASK, r3
}
 8008282:	46c0      	nop			; (mov r8, r8)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	2110      	movs	r1, #16
 8008290:	438a      	bics	r2, r1
 8008292:	601a      	str	r2, [r3, #0]
 8008294:	193b      	adds	r3, r7, r4
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800829a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800829c:	f383 8810 	msr	PRIMASK, r3
}
 80082a0:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80082a2:	183b      	adds	r3, r7, r0
 80082a4:	881a      	ldrh	r2, [r3, #0]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	0011      	movs	r1, r2
 80082aa:	0018      	movs	r0, r3
 80082ac:	f7fb f9a6 	bl	80035fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80082b0:	e02c      	b.n	800830c <HAL_UART_IRQHandler+0x56c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80082b2:	23a4      	movs	r3, #164	; 0xa4
 80082b4:	18fb      	adds	r3, r7, r3
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	2280      	movs	r2, #128	; 0x80
 80082ba:	4013      	ands	r3, r2
 80082bc:	d00f      	beq.n	80082de <HAL_UART_IRQHandler+0x53e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80082be:	23a0      	movs	r3, #160	; 0xa0
 80082c0:	18fb      	adds	r3, r7, r3
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	2280      	movs	r2, #128	; 0x80
 80082c6:	4013      	ands	r3, r2
 80082c8:	d009      	beq.n	80082de <HAL_UART_IRQHandler+0x53e>
  {
    if (huart->TxISR != NULL)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d01e      	beq.n	8008310 <HAL_UART_IRQHandler+0x570>
    {
      huart->TxISR(huart);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	0010      	movs	r0, r2
 80082da:	4798      	blx	r3
    }
    return;
 80082dc:	e018      	b.n	8008310 <HAL_UART_IRQHandler+0x570>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80082de:	23a4      	movs	r3, #164	; 0xa4
 80082e0:	18fb      	adds	r3, r7, r3
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	2240      	movs	r2, #64	; 0x40
 80082e6:	4013      	ands	r3, r2
 80082e8:	d013      	beq.n	8008312 <HAL_UART_IRQHandler+0x572>
 80082ea:	23a0      	movs	r3, #160	; 0xa0
 80082ec:	18fb      	adds	r3, r7, r3
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2240      	movs	r2, #64	; 0x40
 80082f2:	4013      	ands	r3, r2
 80082f4:	d00d      	beq.n	8008312 <HAL_UART_IRQHandler+0x572>
  {
    UART_EndTransmit_IT(huart);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	0018      	movs	r0, r3
 80082fa:	f000 fc6a 	bl	8008bd2 <UART_EndTransmit_IT>
    return;
 80082fe:	e008      	b.n	8008312 <HAL_UART_IRQHandler+0x572>
      return;
 8008300:	46c0      	nop			; (mov r8, r8)
 8008302:	e006      	b.n	8008312 <HAL_UART_IRQHandler+0x572>
    return;
 8008304:	46c0      	nop			; (mov r8, r8)
 8008306:	e004      	b.n	8008312 <HAL_UART_IRQHandler+0x572>
      return;
 8008308:	46c0      	nop			; (mov r8, r8)
 800830a:	e002      	b.n	8008312 <HAL_UART_IRQHandler+0x572>
      return;
 800830c:	46c0      	nop			; (mov r8, r8)
 800830e:	e000      	b.n	8008312 <HAL_UART_IRQHandler+0x572>
    return;
 8008310:	46c0      	nop			; (mov r8, r8)
  }

}
 8008312:	46bd      	mov	sp, r7
 8008314:	b02b      	add	sp, #172	; 0xac
 8008316:	bd90      	pop	{r4, r7, pc}
 8008318:	fffffeff 	.word	0xfffffeff
 800831c:	fffffedf 	.word	0xfffffedf

08008320 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b082      	sub	sp, #8
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008328:	46c0      	nop			; (mov r8, r8)
 800832a:	46bd      	mov	sp, r7
 800832c:	b002      	add	sp, #8
 800832e:	bd80      	pop	{r7, pc}

08008330 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008338:	46c0      	nop			; (mov r8, r8)
 800833a:	46bd      	mov	sp, r7
 800833c:	b002      	add	sp, #8
 800833e:	bd80      	pop	{r7, pc}

08008340 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008348:	46c0      	nop			; (mov r8, r8)
 800834a:	46bd      	mov	sp, r7
 800834c:	b002      	add	sp, #8
 800834e:	bd80      	pop	{r7, pc}

08008350 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b088      	sub	sp, #32
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008358:	231e      	movs	r3, #30
 800835a:	18fb      	adds	r3, r7, r3
 800835c:	2200      	movs	r2, #0
 800835e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	689a      	ldr	r2, [r3, #8]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	691b      	ldr	r3, [r3, #16]
 8008368:	431a      	orrs	r2, r3
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	695b      	ldr	r3, [r3, #20]
 800836e:	431a      	orrs	r2, r3
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	69db      	ldr	r3, [r3, #28]
 8008374:	4313      	orrs	r3, r2
 8008376:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a97      	ldr	r2, [pc, #604]	; (80085dc <UART_SetConfig+0x28c>)
 8008380:	4013      	ands	r3, r2
 8008382:	0019      	movs	r1, r3
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	697a      	ldr	r2, [r7, #20]
 800838a:	430a      	orrs	r2, r1
 800838c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	4a92      	ldr	r2, [pc, #584]	; (80085e0 <UART_SetConfig+0x290>)
 8008396:	4013      	ands	r3, r2
 8008398:	0019      	movs	r1, r3
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	68da      	ldr	r2, [r3, #12]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	430a      	orrs	r2, r1
 80083a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	699b      	ldr	r3, [r3, #24]
 80083aa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6a1b      	ldr	r3, [r3, #32]
 80083b0:	697a      	ldr	r2, [r7, #20]
 80083b2:	4313      	orrs	r3, r2
 80083b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	4a89      	ldr	r2, [pc, #548]	; (80085e4 <UART_SetConfig+0x294>)
 80083be:	4013      	ands	r3, r2
 80083c0:	0019      	movs	r1, r3
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	697a      	ldr	r2, [r7, #20]
 80083c8:	430a      	orrs	r2, r1
 80083ca:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a85      	ldr	r2, [pc, #532]	; (80085e8 <UART_SetConfig+0x298>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d127      	bne.n	8008426 <UART_SetConfig+0xd6>
 80083d6:	4b85      	ldr	r3, [pc, #532]	; (80085ec <UART_SetConfig+0x29c>)
 80083d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083da:	2203      	movs	r2, #3
 80083dc:	4013      	ands	r3, r2
 80083de:	2b03      	cmp	r3, #3
 80083e0:	d00d      	beq.n	80083fe <UART_SetConfig+0xae>
 80083e2:	d81b      	bhi.n	800841c <UART_SetConfig+0xcc>
 80083e4:	2b02      	cmp	r3, #2
 80083e6:	d014      	beq.n	8008412 <UART_SetConfig+0xc2>
 80083e8:	d818      	bhi.n	800841c <UART_SetConfig+0xcc>
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d002      	beq.n	80083f4 <UART_SetConfig+0xa4>
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	d00a      	beq.n	8008408 <UART_SetConfig+0xb8>
 80083f2:	e013      	b.n	800841c <UART_SetConfig+0xcc>
 80083f4:	231f      	movs	r3, #31
 80083f6:	18fb      	adds	r3, r7, r3
 80083f8:	2200      	movs	r2, #0
 80083fa:	701a      	strb	r2, [r3, #0]
 80083fc:	e035      	b.n	800846a <UART_SetConfig+0x11a>
 80083fe:	231f      	movs	r3, #31
 8008400:	18fb      	adds	r3, r7, r3
 8008402:	2202      	movs	r2, #2
 8008404:	701a      	strb	r2, [r3, #0]
 8008406:	e030      	b.n	800846a <UART_SetConfig+0x11a>
 8008408:	231f      	movs	r3, #31
 800840a:	18fb      	adds	r3, r7, r3
 800840c:	2204      	movs	r2, #4
 800840e:	701a      	strb	r2, [r3, #0]
 8008410:	e02b      	b.n	800846a <UART_SetConfig+0x11a>
 8008412:	231f      	movs	r3, #31
 8008414:	18fb      	adds	r3, r7, r3
 8008416:	2208      	movs	r2, #8
 8008418:	701a      	strb	r2, [r3, #0]
 800841a:	e026      	b.n	800846a <UART_SetConfig+0x11a>
 800841c:	231f      	movs	r3, #31
 800841e:	18fb      	adds	r3, r7, r3
 8008420:	2210      	movs	r2, #16
 8008422:	701a      	strb	r2, [r3, #0]
 8008424:	e021      	b.n	800846a <UART_SetConfig+0x11a>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a71      	ldr	r2, [pc, #452]	; (80085f0 <UART_SetConfig+0x2a0>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d104      	bne.n	800843a <UART_SetConfig+0xea>
 8008430:	231f      	movs	r3, #31
 8008432:	18fb      	adds	r3, r7, r3
 8008434:	2200      	movs	r2, #0
 8008436:	701a      	strb	r2, [r3, #0]
 8008438:	e017      	b.n	800846a <UART_SetConfig+0x11a>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a6d      	ldr	r2, [pc, #436]	; (80085f4 <UART_SetConfig+0x2a4>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d104      	bne.n	800844e <UART_SetConfig+0xfe>
 8008444:	231f      	movs	r3, #31
 8008446:	18fb      	adds	r3, r7, r3
 8008448:	2200      	movs	r2, #0
 800844a:	701a      	strb	r2, [r3, #0]
 800844c:	e00d      	b.n	800846a <UART_SetConfig+0x11a>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a69      	ldr	r2, [pc, #420]	; (80085f8 <UART_SetConfig+0x2a8>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d104      	bne.n	8008462 <UART_SetConfig+0x112>
 8008458:	231f      	movs	r3, #31
 800845a:	18fb      	adds	r3, r7, r3
 800845c:	2200      	movs	r2, #0
 800845e:	701a      	strb	r2, [r3, #0]
 8008460:	e003      	b.n	800846a <UART_SetConfig+0x11a>
 8008462:	231f      	movs	r3, #31
 8008464:	18fb      	adds	r3, r7, r3
 8008466:	2210      	movs	r2, #16
 8008468:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	69da      	ldr	r2, [r3, #28]
 800846e:	2380      	movs	r3, #128	; 0x80
 8008470:	021b      	lsls	r3, r3, #8
 8008472:	429a      	cmp	r2, r3
 8008474:	d15d      	bne.n	8008532 <UART_SetConfig+0x1e2>
  {
    switch (clocksource)
 8008476:	231f      	movs	r3, #31
 8008478:	18fb      	adds	r3, r7, r3
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	2b08      	cmp	r3, #8
 800847e:	d015      	beq.n	80084ac <UART_SetConfig+0x15c>
 8008480:	dc18      	bgt.n	80084b4 <UART_SetConfig+0x164>
 8008482:	2b04      	cmp	r3, #4
 8008484:	d00d      	beq.n	80084a2 <UART_SetConfig+0x152>
 8008486:	dc15      	bgt.n	80084b4 <UART_SetConfig+0x164>
 8008488:	2b00      	cmp	r3, #0
 800848a:	d002      	beq.n	8008492 <UART_SetConfig+0x142>
 800848c:	2b02      	cmp	r3, #2
 800848e:	d005      	beq.n	800849c <UART_SetConfig+0x14c>
 8008490:	e010      	b.n	80084b4 <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008492:	f7fe fa5b 	bl	800694c <HAL_RCC_GetPCLK1Freq>
 8008496:	0003      	movs	r3, r0
 8008498:	61bb      	str	r3, [r7, #24]
        break;
 800849a:	e012      	b.n	80084c2 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800849c:	4b57      	ldr	r3, [pc, #348]	; (80085fc <UART_SetConfig+0x2ac>)
 800849e:	61bb      	str	r3, [r7, #24]
        break;
 80084a0:	e00f      	b.n	80084c2 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80084a2:	f7fe f9e3 	bl	800686c <HAL_RCC_GetSysClockFreq>
 80084a6:	0003      	movs	r3, r0
 80084a8:	61bb      	str	r3, [r7, #24]
        break;
 80084aa:	e00a      	b.n	80084c2 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084ac:	2380      	movs	r3, #128	; 0x80
 80084ae:	021b      	lsls	r3, r3, #8
 80084b0:	61bb      	str	r3, [r7, #24]
        break;
 80084b2:	e006      	b.n	80084c2 <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 80084b4:	2300      	movs	r3, #0
 80084b6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80084b8:	231e      	movs	r3, #30
 80084ba:	18fb      	adds	r3, r7, r3
 80084bc:	2201      	movs	r2, #1
 80084be:	701a      	strb	r2, [r3, #0]
        break;
 80084c0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80084c2:	69bb      	ldr	r3, [r7, #24]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d100      	bne.n	80084ca <UART_SetConfig+0x17a>
 80084c8:	e07b      	b.n	80085c2 <UART_SetConfig+0x272>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80084ca:	69bb      	ldr	r3, [r7, #24]
 80084cc:	005a      	lsls	r2, r3, #1
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	085b      	lsrs	r3, r3, #1
 80084d4:	18d2      	adds	r2, r2, r3
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	0019      	movs	r1, r3
 80084dc:	0010      	movs	r0, r2
 80084de:	f7f7 fe2f 	bl	8000140 <__udivsi3>
 80084e2:	0003      	movs	r3, r0
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	2b0f      	cmp	r3, #15
 80084ec:	d91c      	bls.n	8008528 <UART_SetConfig+0x1d8>
 80084ee:	693a      	ldr	r2, [r7, #16]
 80084f0:	2380      	movs	r3, #128	; 0x80
 80084f2:	025b      	lsls	r3, r3, #9
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d217      	bcs.n	8008528 <UART_SetConfig+0x1d8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	b29a      	uxth	r2, r3
 80084fc:	200e      	movs	r0, #14
 80084fe:	183b      	adds	r3, r7, r0
 8008500:	210f      	movs	r1, #15
 8008502:	438a      	bics	r2, r1
 8008504:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	085b      	lsrs	r3, r3, #1
 800850a:	b29b      	uxth	r3, r3
 800850c:	2207      	movs	r2, #7
 800850e:	4013      	ands	r3, r2
 8008510:	b299      	uxth	r1, r3
 8008512:	183b      	adds	r3, r7, r0
 8008514:	183a      	adds	r2, r7, r0
 8008516:	8812      	ldrh	r2, [r2, #0]
 8008518:	430a      	orrs	r2, r1
 800851a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	183a      	adds	r2, r7, r0
 8008522:	8812      	ldrh	r2, [r2, #0]
 8008524:	60da      	str	r2, [r3, #12]
 8008526:	e04c      	b.n	80085c2 <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 8008528:	231e      	movs	r3, #30
 800852a:	18fb      	adds	r3, r7, r3
 800852c:	2201      	movs	r2, #1
 800852e:	701a      	strb	r2, [r3, #0]
 8008530:	e047      	b.n	80085c2 <UART_SetConfig+0x272>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008532:	231f      	movs	r3, #31
 8008534:	18fb      	adds	r3, r7, r3
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	2b08      	cmp	r3, #8
 800853a:	d015      	beq.n	8008568 <UART_SetConfig+0x218>
 800853c:	dc18      	bgt.n	8008570 <UART_SetConfig+0x220>
 800853e:	2b04      	cmp	r3, #4
 8008540:	d00d      	beq.n	800855e <UART_SetConfig+0x20e>
 8008542:	dc15      	bgt.n	8008570 <UART_SetConfig+0x220>
 8008544:	2b00      	cmp	r3, #0
 8008546:	d002      	beq.n	800854e <UART_SetConfig+0x1fe>
 8008548:	2b02      	cmp	r3, #2
 800854a:	d005      	beq.n	8008558 <UART_SetConfig+0x208>
 800854c:	e010      	b.n	8008570 <UART_SetConfig+0x220>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800854e:	f7fe f9fd 	bl	800694c <HAL_RCC_GetPCLK1Freq>
 8008552:	0003      	movs	r3, r0
 8008554:	61bb      	str	r3, [r7, #24]
        break;
 8008556:	e012      	b.n	800857e <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008558:	4b28      	ldr	r3, [pc, #160]	; (80085fc <UART_SetConfig+0x2ac>)
 800855a:	61bb      	str	r3, [r7, #24]
        break;
 800855c:	e00f      	b.n	800857e <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800855e:	f7fe f985 	bl	800686c <HAL_RCC_GetSysClockFreq>
 8008562:	0003      	movs	r3, r0
 8008564:	61bb      	str	r3, [r7, #24]
        break;
 8008566:	e00a      	b.n	800857e <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008568:	2380      	movs	r3, #128	; 0x80
 800856a:	021b      	lsls	r3, r3, #8
 800856c:	61bb      	str	r3, [r7, #24]
        break;
 800856e:	e006      	b.n	800857e <UART_SetConfig+0x22e>
      default:
        pclk = 0U;
 8008570:	2300      	movs	r3, #0
 8008572:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008574:	231e      	movs	r3, #30
 8008576:	18fb      	adds	r3, r7, r3
 8008578:	2201      	movs	r2, #1
 800857a:	701a      	strb	r2, [r3, #0]
        break;
 800857c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800857e:	69bb      	ldr	r3, [r7, #24]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d01e      	beq.n	80085c2 <UART_SetConfig+0x272>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	085a      	lsrs	r2, r3, #1
 800858a:	69bb      	ldr	r3, [r7, #24]
 800858c:	18d2      	adds	r2, r2, r3
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	0019      	movs	r1, r3
 8008594:	0010      	movs	r0, r2
 8008596:	f7f7 fdd3 	bl	8000140 <__udivsi3>
 800859a:	0003      	movs	r3, r0
 800859c:	b29b      	uxth	r3, r3
 800859e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	2b0f      	cmp	r3, #15
 80085a4:	d909      	bls.n	80085ba <UART_SetConfig+0x26a>
 80085a6:	693a      	ldr	r2, [r7, #16]
 80085a8:	2380      	movs	r3, #128	; 0x80
 80085aa:	025b      	lsls	r3, r3, #9
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d204      	bcs.n	80085ba <UART_SetConfig+0x26a>
      {
        huart->Instance->BRR = usartdiv;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	693a      	ldr	r2, [r7, #16]
 80085b6:	60da      	str	r2, [r3, #12]
 80085b8:	e003      	b.n	80085c2 <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 80085ba:	231e      	movs	r3, #30
 80085bc:	18fb      	adds	r3, r7, r3
 80085be:	2201      	movs	r2, #1
 80085c0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2200      	movs	r2, #0
 80085c6:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2200      	movs	r2, #0
 80085cc:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80085ce:	231e      	movs	r3, #30
 80085d0:	18fb      	adds	r3, r7, r3
 80085d2:	781b      	ldrb	r3, [r3, #0]
}
 80085d4:	0018      	movs	r0, r3
 80085d6:	46bd      	mov	sp, r7
 80085d8:	b008      	add	sp, #32
 80085da:	bd80      	pop	{r7, pc}
 80085dc:	efff69f3 	.word	0xefff69f3
 80085e0:	ffffcfff 	.word	0xffffcfff
 80085e4:	fffff4ff 	.word	0xfffff4ff
 80085e8:	40013800 	.word	0x40013800
 80085ec:	40021000 	.word	0x40021000
 80085f0:	40004400 	.word	0x40004400
 80085f4:	40004800 	.word	0x40004800
 80085f8:	40004c00 	.word	0x40004c00
 80085fc:	007a1200 	.word	0x007a1200

08008600 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800860c:	2201      	movs	r2, #1
 800860e:	4013      	ands	r3, r2
 8008610:	d00b      	beq.n	800862a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	4a4a      	ldr	r2, [pc, #296]	; (8008744 <UART_AdvFeatureConfig+0x144>)
 800861a:	4013      	ands	r3, r2
 800861c:	0019      	movs	r1, r3
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	430a      	orrs	r2, r1
 8008628:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800862e:	2202      	movs	r2, #2
 8008630:	4013      	ands	r3, r2
 8008632:	d00b      	beq.n	800864c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	4a43      	ldr	r2, [pc, #268]	; (8008748 <UART_AdvFeatureConfig+0x148>)
 800863c:	4013      	ands	r3, r2
 800863e:	0019      	movs	r1, r3
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	430a      	orrs	r2, r1
 800864a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008650:	2204      	movs	r2, #4
 8008652:	4013      	ands	r3, r2
 8008654:	d00b      	beq.n	800866e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	4a3b      	ldr	r2, [pc, #236]	; (800874c <UART_AdvFeatureConfig+0x14c>)
 800865e:	4013      	ands	r3, r2
 8008660:	0019      	movs	r1, r3
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	430a      	orrs	r2, r1
 800866c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008672:	2208      	movs	r2, #8
 8008674:	4013      	ands	r3, r2
 8008676:	d00b      	beq.n	8008690 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	4a34      	ldr	r2, [pc, #208]	; (8008750 <UART_AdvFeatureConfig+0x150>)
 8008680:	4013      	ands	r3, r2
 8008682:	0019      	movs	r1, r3
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	430a      	orrs	r2, r1
 800868e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008694:	2210      	movs	r2, #16
 8008696:	4013      	ands	r3, r2
 8008698:	d00b      	beq.n	80086b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	689b      	ldr	r3, [r3, #8]
 80086a0:	4a2c      	ldr	r2, [pc, #176]	; (8008754 <UART_AdvFeatureConfig+0x154>)
 80086a2:	4013      	ands	r3, r2
 80086a4:	0019      	movs	r1, r3
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	430a      	orrs	r2, r1
 80086b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b6:	2220      	movs	r2, #32
 80086b8:	4013      	ands	r3, r2
 80086ba:	d00b      	beq.n	80086d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	4a25      	ldr	r2, [pc, #148]	; (8008758 <UART_AdvFeatureConfig+0x158>)
 80086c4:	4013      	ands	r3, r2
 80086c6:	0019      	movs	r1, r3
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	430a      	orrs	r2, r1
 80086d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d8:	2240      	movs	r2, #64	; 0x40
 80086da:	4013      	ands	r3, r2
 80086dc:	d01d      	beq.n	800871a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	4a1d      	ldr	r2, [pc, #116]	; (800875c <UART_AdvFeatureConfig+0x15c>)
 80086e6:	4013      	ands	r3, r2
 80086e8:	0019      	movs	r1, r3
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	430a      	orrs	r2, r1
 80086f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80086fa:	2380      	movs	r3, #128	; 0x80
 80086fc:	035b      	lsls	r3, r3, #13
 80086fe:	429a      	cmp	r2, r3
 8008700:	d10b      	bne.n	800871a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	4a15      	ldr	r2, [pc, #84]	; (8008760 <UART_AdvFeatureConfig+0x160>)
 800870a:	4013      	ands	r3, r2
 800870c:	0019      	movs	r1, r3
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	430a      	orrs	r2, r1
 8008718:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800871e:	2280      	movs	r2, #128	; 0x80
 8008720:	4013      	ands	r3, r2
 8008722:	d00b      	beq.n	800873c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	4a0e      	ldr	r2, [pc, #56]	; (8008764 <UART_AdvFeatureConfig+0x164>)
 800872c:	4013      	ands	r3, r2
 800872e:	0019      	movs	r1, r3
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	430a      	orrs	r2, r1
 800873a:	605a      	str	r2, [r3, #4]
  }
}
 800873c:	46c0      	nop			; (mov r8, r8)
 800873e:	46bd      	mov	sp, r7
 8008740:	b002      	add	sp, #8
 8008742:	bd80      	pop	{r7, pc}
 8008744:	fffdffff 	.word	0xfffdffff
 8008748:	fffeffff 	.word	0xfffeffff
 800874c:	fffbffff 	.word	0xfffbffff
 8008750:	ffff7fff 	.word	0xffff7fff
 8008754:	ffffefff 	.word	0xffffefff
 8008758:	ffffdfff 	.word	0xffffdfff
 800875c:	ffefffff 	.word	0xffefffff
 8008760:	ff9fffff 	.word	0xff9fffff
 8008764:	fff7ffff 	.word	0xfff7ffff

08008768 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b086      	sub	sp, #24
 800876c:	af02      	add	r7, sp, #8
 800876e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2280      	movs	r2, #128	; 0x80
 8008774:	2100      	movs	r1, #0
 8008776:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008778:	f7fc f858 	bl	800482c <HAL_GetTick>
 800877c:	0003      	movs	r3, r0
 800877e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	2208      	movs	r2, #8
 8008788:	4013      	ands	r3, r2
 800878a:	2b08      	cmp	r3, #8
 800878c:	d10c      	bne.n	80087a8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2280      	movs	r2, #128	; 0x80
 8008792:	0391      	lsls	r1, r2, #14
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	4a17      	ldr	r2, [pc, #92]	; (80087f4 <UART_CheckIdleState+0x8c>)
 8008798:	9200      	str	r2, [sp, #0]
 800879a:	2200      	movs	r2, #0
 800879c:	f000 f82c 	bl	80087f8 <UART_WaitOnFlagUntilTimeout>
 80087a0:	1e03      	subs	r3, r0, #0
 80087a2:	d001      	beq.n	80087a8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087a4:	2303      	movs	r3, #3
 80087a6:	e021      	b.n	80087ec <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	2204      	movs	r2, #4
 80087b0:	4013      	ands	r3, r2
 80087b2:	2b04      	cmp	r3, #4
 80087b4:	d10c      	bne.n	80087d0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2280      	movs	r2, #128	; 0x80
 80087ba:	03d1      	lsls	r1, r2, #15
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	4a0d      	ldr	r2, [pc, #52]	; (80087f4 <UART_CheckIdleState+0x8c>)
 80087c0:	9200      	str	r2, [sp, #0]
 80087c2:	2200      	movs	r2, #0
 80087c4:	f000 f818 	bl	80087f8 <UART_WaitOnFlagUntilTimeout>
 80087c8:	1e03      	subs	r3, r0, #0
 80087ca:	d001      	beq.n	80087d0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087cc:	2303      	movs	r3, #3
 80087ce:	e00d      	b.n	80087ec <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2220      	movs	r2, #32
 80087d4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2220      	movs	r2, #32
 80087da:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2274      	movs	r2, #116	; 0x74
 80087e6:	2100      	movs	r1, #0
 80087e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80087ea:	2300      	movs	r3, #0
}
 80087ec:	0018      	movs	r0, r3
 80087ee:	46bd      	mov	sp, r7
 80087f0:	b004      	add	sp, #16
 80087f2:	bd80      	pop	{r7, pc}
 80087f4:	01ffffff 	.word	0x01ffffff

080087f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b094      	sub	sp, #80	; 0x50
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	60f8      	str	r0, [r7, #12]
 8008800:	60b9      	str	r1, [r7, #8]
 8008802:	603b      	str	r3, [r7, #0]
 8008804:	1dfb      	adds	r3, r7, #7
 8008806:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008808:	e0a3      	b.n	8008952 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800880a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800880c:	3301      	adds	r3, #1
 800880e:	d100      	bne.n	8008812 <UART_WaitOnFlagUntilTimeout+0x1a>
 8008810:	e09f      	b.n	8008952 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008812:	f7fc f80b 	bl	800482c <HAL_GetTick>
 8008816:	0002      	movs	r2, r0
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	1ad3      	subs	r3, r2, r3
 800881c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800881e:	429a      	cmp	r2, r3
 8008820:	d302      	bcc.n	8008828 <UART_WaitOnFlagUntilTimeout+0x30>
 8008822:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008824:	2b00      	cmp	r3, #0
 8008826:	d13d      	bne.n	80088a4 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008828:	f3ef 8310 	mrs	r3, PRIMASK
 800882c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800882e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008830:	647b      	str	r3, [r7, #68]	; 0x44
 8008832:	2301      	movs	r3, #1
 8008834:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008838:	f383 8810 	msr	PRIMASK, r3
}
 800883c:	46c0      	nop			; (mov r8, r8)
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	494c      	ldr	r1, [pc, #304]	; (800897c <UART_WaitOnFlagUntilTimeout+0x184>)
 800884a:	400a      	ands	r2, r1
 800884c:	601a      	str	r2, [r3, #0]
 800884e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008850:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008854:	f383 8810 	msr	PRIMASK, r3
}
 8008858:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800885a:	f3ef 8310 	mrs	r3, PRIMASK
 800885e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8008860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008862:	643b      	str	r3, [r7, #64]	; 0x40
 8008864:	2301      	movs	r3, #1
 8008866:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800886a:	f383 8810 	msr	PRIMASK, r3
}
 800886e:	46c0      	nop			; (mov r8, r8)
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	689a      	ldr	r2, [r3, #8]
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	2101      	movs	r1, #1
 800887c:	438a      	bics	r2, r1
 800887e:	609a      	str	r2, [r3, #8]
 8008880:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008882:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008886:	f383 8810 	msr	PRIMASK, r3
}
 800888a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2220      	movs	r2, #32
 8008890:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2220      	movs	r2, #32
 8008896:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2274      	movs	r2, #116	; 0x74
 800889c:	2100      	movs	r1, #0
 800889e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80088a0:	2303      	movs	r3, #3
 80088a2:	e067      	b.n	8008974 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	2204      	movs	r2, #4
 80088ac:	4013      	ands	r3, r2
 80088ae:	d050      	beq.n	8008952 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	69da      	ldr	r2, [r3, #28]
 80088b6:	2380      	movs	r3, #128	; 0x80
 80088b8:	011b      	lsls	r3, r3, #4
 80088ba:	401a      	ands	r2, r3
 80088bc:	2380      	movs	r3, #128	; 0x80
 80088be:	011b      	lsls	r3, r3, #4
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d146      	bne.n	8008952 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	2280      	movs	r2, #128	; 0x80
 80088ca:	0112      	lsls	r2, r2, #4
 80088cc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088ce:	f3ef 8310 	mrs	r3, PRIMASK
 80088d2:	613b      	str	r3, [r7, #16]
  return(result);
 80088d4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80088d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088d8:	2301      	movs	r3, #1
 80088da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	f383 8810 	msr	PRIMASK, r3
}
 80088e2:	46c0      	nop			; (mov r8, r8)
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4923      	ldr	r1, [pc, #140]	; (800897c <UART_WaitOnFlagUntilTimeout+0x184>)
 80088f0:	400a      	ands	r2, r1
 80088f2:	601a      	str	r2, [r3, #0]
 80088f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088f6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088f8:	69bb      	ldr	r3, [r7, #24]
 80088fa:	f383 8810 	msr	PRIMASK, r3
}
 80088fe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008900:	f3ef 8310 	mrs	r3, PRIMASK
 8008904:	61fb      	str	r3, [r7, #28]
  return(result);
 8008906:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008908:	64bb      	str	r3, [r7, #72]	; 0x48
 800890a:	2301      	movs	r3, #1
 800890c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800890e:	6a3b      	ldr	r3, [r7, #32]
 8008910:	f383 8810 	msr	PRIMASK, r3
}
 8008914:	46c0      	nop			; (mov r8, r8)
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	689a      	ldr	r2, [r3, #8]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	2101      	movs	r1, #1
 8008922:	438a      	bics	r2, r1
 8008924:	609a      	str	r2, [r3, #8]
 8008926:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008928:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800892a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892c:	f383 8810 	msr	PRIMASK, r3
}
 8008930:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2220      	movs	r2, #32
 8008936:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2220      	movs	r2, #32
 800893c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2280      	movs	r2, #128	; 0x80
 8008942:	2120      	movs	r1, #32
 8008944:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2274      	movs	r2, #116	; 0x74
 800894a:	2100      	movs	r1, #0
 800894c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800894e:	2303      	movs	r3, #3
 8008950:	e010      	b.n	8008974 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	69db      	ldr	r3, [r3, #28]
 8008958:	68ba      	ldr	r2, [r7, #8]
 800895a:	4013      	ands	r3, r2
 800895c:	68ba      	ldr	r2, [r7, #8]
 800895e:	1ad3      	subs	r3, r2, r3
 8008960:	425a      	negs	r2, r3
 8008962:	4153      	adcs	r3, r2
 8008964:	b2db      	uxtb	r3, r3
 8008966:	001a      	movs	r2, r3
 8008968:	1dfb      	adds	r3, r7, #7
 800896a:	781b      	ldrb	r3, [r3, #0]
 800896c:	429a      	cmp	r2, r3
 800896e:	d100      	bne.n	8008972 <UART_WaitOnFlagUntilTimeout+0x17a>
 8008970:	e74b      	b.n	800880a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008972:	2300      	movs	r3, #0
}
 8008974:	0018      	movs	r0, r3
 8008976:	46bd      	mov	sp, r7
 8008978:	b014      	add	sp, #80	; 0x50
 800897a:	bd80      	pop	{r7, pc}
 800897c:	fffffe5f 	.word	0xfffffe5f

08008980 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b08c      	sub	sp, #48	; 0x30
 8008984:	af00      	add	r7, sp, #0
 8008986:	60f8      	str	r0, [r7, #12]
 8008988:	60b9      	str	r1, [r7, #8]
 800898a:	1dbb      	adds	r3, r7, #6
 800898c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	68ba      	ldr	r2, [r7, #8]
 8008992:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	1dba      	adds	r2, r7, #6
 8008998:	2158      	movs	r1, #88	; 0x58
 800899a:	8812      	ldrh	r2, [r2, #0]
 800899c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	1dba      	adds	r2, r7, #6
 80089a2:	215a      	movs	r1, #90	; 0x5a
 80089a4:	8812      	ldrh	r2, [r2, #0]
 80089a6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2200      	movs	r2, #0
 80089ac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	689a      	ldr	r2, [r3, #8]
 80089b2:	2380      	movs	r3, #128	; 0x80
 80089b4:	015b      	lsls	r3, r3, #5
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d10d      	bne.n	80089d6 <UART_Start_Receive_IT+0x56>
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	691b      	ldr	r3, [r3, #16]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d104      	bne.n	80089cc <UART_Start_Receive_IT+0x4c>
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	225c      	movs	r2, #92	; 0x5c
 80089c6:	4943      	ldr	r1, [pc, #268]	; (8008ad4 <UART_Start_Receive_IT+0x154>)
 80089c8:	5299      	strh	r1, [r3, r2]
 80089ca:	e02e      	b.n	8008a2a <UART_Start_Receive_IT+0xaa>
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	225c      	movs	r2, #92	; 0x5c
 80089d0:	21ff      	movs	r1, #255	; 0xff
 80089d2:	5299      	strh	r1, [r3, r2]
 80089d4:	e029      	b.n	8008a2a <UART_Start_Receive_IT+0xaa>
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	689b      	ldr	r3, [r3, #8]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d10d      	bne.n	80089fa <UART_Start_Receive_IT+0x7a>
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	691b      	ldr	r3, [r3, #16]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d104      	bne.n	80089f0 <UART_Start_Receive_IT+0x70>
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	225c      	movs	r2, #92	; 0x5c
 80089ea:	21ff      	movs	r1, #255	; 0xff
 80089ec:	5299      	strh	r1, [r3, r2]
 80089ee:	e01c      	b.n	8008a2a <UART_Start_Receive_IT+0xaa>
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	225c      	movs	r2, #92	; 0x5c
 80089f4:	217f      	movs	r1, #127	; 0x7f
 80089f6:	5299      	strh	r1, [r3, r2]
 80089f8:	e017      	b.n	8008a2a <UART_Start_Receive_IT+0xaa>
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	689a      	ldr	r2, [r3, #8]
 80089fe:	2380      	movs	r3, #128	; 0x80
 8008a00:	055b      	lsls	r3, r3, #21
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d10d      	bne.n	8008a22 <UART_Start_Receive_IT+0xa2>
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	691b      	ldr	r3, [r3, #16]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d104      	bne.n	8008a18 <UART_Start_Receive_IT+0x98>
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	225c      	movs	r2, #92	; 0x5c
 8008a12:	217f      	movs	r1, #127	; 0x7f
 8008a14:	5299      	strh	r1, [r3, r2]
 8008a16:	e008      	b.n	8008a2a <UART_Start_Receive_IT+0xaa>
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	225c      	movs	r2, #92	; 0x5c
 8008a1c:	213f      	movs	r1, #63	; 0x3f
 8008a1e:	5299      	strh	r1, [r3, r2]
 8008a20:	e003      	b.n	8008a2a <UART_Start_Receive_IT+0xaa>
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	225c      	movs	r2, #92	; 0x5c
 8008a26:	2100      	movs	r1, #0
 8008a28:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2280      	movs	r2, #128	; 0x80
 8008a2e:	2100      	movs	r1, #0
 8008a30:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2222      	movs	r2, #34	; 0x22
 8008a36:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a38:	f3ef 8310 	mrs	r3, PRIMASK
 8008a3c:	61fb      	str	r3, [r7, #28]
  return(result);
 8008a3e:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a42:	2301      	movs	r3, #1
 8008a44:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a46:	6a3b      	ldr	r3, [r7, #32]
 8008a48:	f383 8810 	msr	PRIMASK, r3
}
 8008a4c:	46c0      	nop			; (mov r8, r8)
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	689a      	ldr	r2, [r3, #8]
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	2101      	movs	r1, #1
 8008a5a:	430a      	orrs	r2, r1
 8008a5c:	609a      	str	r2, [r3, #8]
 8008a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a60:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a64:	f383 8810 	msr	PRIMASK, r3
}
 8008a68:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	689a      	ldr	r2, [r3, #8]
 8008a6e:	2380      	movs	r3, #128	; 0x80
 8008a70:	015b      	lsls	r3, r3, #5
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d107      	bne.n	8008a86 <UART_Start_Receive_IT+0x106>
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	691b      	ldr	r3, [r3, #16]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d103      	bne.n	8008a86 <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	4a15      	ldr	r2, [pc, #84]	; (8008ad8 <UART_Start_Receive_IT+0x158>)
 8008a82:	665a      	str	r2, [r3, #100]	; 0x64
 8008a84:	e002      	b.n	8008a8c <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	4a14      	ldr	r2, [pc, #80]	; (8008adc <UART_Start_Receive_IT+0x15c>)
 8008a8a:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2274      	movs	r2, #116	; 0x74
 8008a90:	2100      	movs	r1, #0
 8008a92:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a94:	f3ef 8310 	mrs	r3, PRIMASK
 8008a98:	613b      	str	r3, [r7, #16]
  return(result);
 8008a9a:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008a9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	f383 8810 	msr	PRIMASK, r3
}
 8008aa8:	46c0      	nop			; (mov r8, r8)
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	681a      	ldr	r2, [r3, #0]
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	2190      	movs	r1, #144	; 0x90
 8008ab6:	0049      	lsls	r1, r1, #1
 8008ab8:	430a      	orrs	r2, r1
 8008aba:	601a      	str	r2, [r3, #0]
 8008abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008abe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ac0:	69bb      	ldr	r3, [r7, #24]
 8008ac2:	f383 8810 	msr	PRIMASK, r3
}
 8008ac6:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8008ac8:	2300      	movs	r3, #0
}
 8008aca:	0018      	movs	r0, r3
 8008acc:	46bd      	mov	sp, r7
 8008ace:	b00c      	add	sp, #48	; 0x30
 8008ad0:	bd80      	pop	{r7, pc}
 8008ad2:	46c0      	nop			; (mov r8, r8)
 8008ad4:	000001ff 	.word	0x000001ff
 8008ad8:	08008d91 	.word	0x08008d91
 8008adc:	08008c29 	.word	0x08008c29

08008ae0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b08e      	sub	sp, #56	; 0x38
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ae8:	f3ef 8310 	mrs	r3, PRIMASK
 8008aec:	617b      	str	r3, [r7, #20]
  return(result);
 8008aee:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008af0:	637b      	str	r3, [r7, #52]	; 0x34
 8008af2:	2301      	movs	r3, #1
 8008af4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008af6:	69bb      	ldr	r3, [r7, #24]
 8008af8:	f383 8810 	msr	PRIMASK, r3
}
 8008afc:	46c0      	nop			; (mov r8, r8)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4925      	ldr	r1, [pc, #148]	; (8008ba0 <UART_EndRxTransfer+0xc0>)
 8008b0a:	400a      	ands	r2, r1
 8008b0c:	601a      	str	r2, [r3, #0]
 8008b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b10:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b12:	69fb      	ldr	r3, [r7, #28]
 8008b14:	f383 8810 	msr	PRIMASK, r3
}
 8008b18:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b1a:	f3ef 8310 	mrs	r3, PRIMASK
 8008b1e:	623b      	str	r3, [r7, #32]
  return(result);
 8008b20:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b22:	633b      	str	r3, [r7, #48]	; 0x30
 8008b24:	2301      	movs	r3, #1
 8008b26:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2a:	f383 8810 	msr	PRIMASK, r3
}
 8008b2e:	46c0      	nop			; (mov r8, r8)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	689a      	ldr	r2, [r3, #8]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	2101      	movs	r1, #1
 8008b3c:	438a      	bics	r2, r1
 8008b3e:	609a      	str	r2, [r3, #8]
 8008b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b42:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b46:	f383 8810 	msr	PRIMASK, r3
}
 8008b4a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d118      	bne.n	8008b86 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b54:	f3ef 8310 	mrs	r3, PRIMASK
 8008b58:	60bb      	str	r3, [r7, #8]
  return(result);
 8008b5a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b5e:	2301      	movs	r3, #1
 8008b60:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	f383 8810 	msr	PRIMASK, r3
}
 8008b68:	46c0      	nop			; (mov r8, r8)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	681a      	ldr	r2, [r3, #0]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	2110      	movs	r1, #16
 8008b76:	438a      	bics	r2, r1
 8008b78:	601a      	str	r2, [r3, #0]
 8008b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b7c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	f383 8810 	msr	PRIMASK, r3
}
 8008b84:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2220      	movs	r2, #32
 8008b8a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2200      	movs	r2, #0
 8008b96:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008b98:	46c0      	nop			; (mov r8, r8)
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	b00e      	add	sp, #56	; 0x38
 8008b9e:	bd80      	pop	{r7, pc}
 8008ba0:	fffffedf 	.word	0xfffffedf

08008ba4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	225a      	movs	r2, #90	; 0x5a
 8008bb6:	2100      	movs	r1, #0
 8008bb8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2252      	movs	r2, #82	; 0x52
 8008bbe:	2100      	movs	r1, #0
 8008bc0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	0018      	movs	r0, r3
 8008bc6:	f7ff fbbb 	bl	8008340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008bca:	46c0      	nop			; (mov r8, r8)
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	b004      	add	sp, #16
 8008bd0:	bd80      	pop	{r7, pc}

08008bd2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008bd2:	b580      	push	{r7, lr}
 8008bd4:	b086      	sub	sp, #24
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bda:	f3ef 8310 	mrs	r3, PRIMASK
 8008bde:	60bb      	str	r3, [r7, #8]
  return(result);
 8008be0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008be2:	617b      	str	r3, [r7, #20]
 8008be4:	2301      	movs	r3, #1
 8008be6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f383 8810 	msr	PRIMASK, r3
}
 8008bee:	46c0      	nop			; (mov r8, r8)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	681a      	ldr	r2, [r3, #0]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	2140      	movs	r1, #64	; 0x40
 8008bfc:	438a      	bics	r2, r1
 8008bfe:	601a      	str	r2, [r3, #0]
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	f383 8810 	msr	PRIMASK, r3
}
 8008c0a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2220      	movs	r2, #32
 8008c10:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2200      	movs	r2, #0
 8008c16:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	0018      	movs	r0, r3
 8008c1c:	f7ff fb80 	bl	8008320 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c20:	46c0      	nop			; (mov r8, r8)
 8008c22:	46bd      	mov	sp, r7
 8008c24:	b006      	add	sp, #24
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b090      	sub	sp, #64	; 0x40
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008c30:	203e      	movs	r0, #62	; 0x3e
 8008c32:	183b      	adds	r3, r7, r0
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	215c      	movs	r1, #92	; 0x5c
 8008c38:	5a52      	ldrh	r2, [r2, r1]
 8008c3a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c40:	2b22      	cmp	r3, #34	; 0x22
 8008c42:	d000      	beq.n	8008c46 <UART_RxISR_8BIT+0x1e>
 8008c44:	e095      	b.n	8008d72 <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681a      	ldr	r2, [r3, #0]
 8008c4a:	213c      	movs	r1, #60	; 0x3c
 8008c4c:	187b      	adds	r3, r7, r1
 8008c4e:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8008c50:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008c52:	187b      	adds	r3, r7, r1
 8008c54:	881b      	ldrh	r3, [r3, #0]
 8008c56:	b2da      	uxtb	r2, r3
 8008c58:	183b      	adds	r3, r7, r0
 8008c5a:	881b      	ldrh	r3, [r3, #0]
 8008c5c:	b2d9      	uxtb	r1, r3
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c62:	400a      	ands	r2, r1
 8008c64:	b2d2      	uxtb	r2, r2
 8008c66:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c6c:	1c5a      	adds	r2, r3, #1
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	225a      	movs	r2, #90	; 0x5a
 8008c76:	5a9b      	ldrh	r3, [r3, r2]
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	3b01      	subs	r3, #1
 8008c7c:	b299      	uxth	r1, r3
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	225a      	movs	r2, #90	; 0x5a
 8008c82:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	225a      	movs	r2, #90	; 0x5a
 8008c88:	5a9b      	ldrh	r3, [r3, r2]
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d178      	bne.n	8008d82 <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c90:	f3ef 8310 	mrs	r3, PRIMASK
 8008c94:	61bb      	str	r3, [r7, #24]
  return(result);
 8008c96:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c98:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c9e:	69fb      	ldr	r3, [r7, #28]
 8008ca0:	f383 8810 	msr	PRIMASK, r3
}
 8008ca4:	46c0      	nop			; (mov r8, r8)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4936      	ldr	r1, [pc, #216]	; (8008d8c <UART_RxISR_8BIT+0x164>)
 8008cb2:	400a      	ands	r2, r1
 8008cb4:	601a      	str	r2, [r3, #0]
 8008cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cb8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cba:	6a3b      	ldr	r3, [r7, #32]
 8008cbc:	f383 8810 	msr	PRIMASK, r3
}
 8008cc0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cc2:	f3ef 8310 	mrs	r3, PRIMASK
 8008cc6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cca:	637b      	str	r3, [r7, #52]	; 0x34
 8008ccc:	2301      	movs	r3, #1
 8008cce:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd2:	f383 8810 	msr	PRIMASK, r3
}
 8008cd6:	46c0      	nop			; (mov r8, r8)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	689a      	ldr	r2, [r3, #8]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	2101      	movs	r1, #1
 8008ce4:	438a      	bics	r2, r1
 8008ce6:	609a      	str	r2, [r3, #8]
 8008ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cee:	f383 8810 	msr	PRIMASK, r3
}
 8008cf2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2220      	movs	r2, #32
 8008cf8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d12f      	bne.n	8008d68 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d0e:	f3ef 8310 	mrs	r3, PRIMASK
 8008d12:	60fb      	str	r3, [r7, #12]
  return(result);
 8008d14:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d16:	633b      	str	r3, [r7, #48]	; 0x30
 8008d18:	2301      	movs	r3, #1
 8008d1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	f383 8810 	msr	PRIMASK, r3
}
 8008d22:	46c0      	nop			; (mov r8, r8)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	681a      	ldr	r2, [r3, #0]
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	2110      	movs	r1, #16
 8008d30:	438a      	bics	r2, r1
 8008d32:	601a      	str	r2, [r3, #0]
 8008d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d36:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	f383 8810 	msr	PRIMASK, r3
}
 8008d3e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	69db      	ldr	r3, [r3, #28]
 8008d46:	2210      	movs	r2, #16
 8008d48:	4013      	ands	r3, r2
 8008d4a:	2b10      	cmp	r3, #16
 8008d4c:	d103      	bne.n	8008d56 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	2210      	movs	r2, #16
 8008d54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2258      	movs	r2, #88	; 0x58
 8008d5a:	5a9a      	ldrh	r2, [r3, r2]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	0011      	movs	r1, r2
 8008d60:	0018      	movs	r0, r3
 8008d62:	f7fa fc4b 	bl	80035fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008d66:	e00c      	b.n	8008d82 <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	0018      	movs	r0, r3
 8008d6c:	f7ff fae0 	bl	8008330 <HAL_UART_RxCpltCallback>
}
 8008d70:	e007      	b.n	8008d82 <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	699a      	ldr	r2, [r3, #24]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	2108      	movs	r1, #8
 8008d7e:	430a      	orrs	r2, r1
 8008d80:	619a      	str	r2, [r3, #24]
}
 8008d82:	46c0      	nop			; (mov r8, r8)
 8008d84:	46bd      	mov	sp, r7
 8008d86:	b010      	add	sp, #64	; 0x40
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	46c0      	nop			; (mov r8, r8)
 8008d8c:	fffffedf 	.word	0xfffffedf

08008d90 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b090      	sub	sp, #64	; 0x40
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008d98:	203e      	movs	r0, #62	; 0x3e
 8008d9a:	183b      	adds	r3, r7, r0
 8008d9c:	687a      	ldr	r2, [r7, #4]
 8008d9e:	215c      	movs	r1, #92	; 0x5c
 8008da0:	5a52      	ldrh	r2, [r2, r1]
 8008da2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008da8:	2b22      	cmp	r3, #34	; 0x22
 8008daa:	d000      	beq.n	8008dae <UART_RxISR_16BIT+0x1e>
 8008dac:	e095      	b.n	8008eda <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	213c      	movs	r1, #60	; 0x3c
 8008db4:	187b      	adds	r3, r7, r1
 8008db6:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8008db8:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dbe:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8008dc0:	187b      	adds	r3, r7, r1
 8008dc2:	183a      	adds	r2, r7, r0
 8008dc4:	881b      	ldrh	r3, [r3, #0]
 8008dc6:	8812      	ldrh	r2, [r2, #0]
 8008dc8:	4013      	ands	r3, r2
 8008dca:	b29a      	uxth	r2, r3
 8008dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dce:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dd4:	1c9a      	adds	r2, r3, #2
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	225a      	movs	r2, #90	; 0x5a
 8008dde:	5a9b      	ldrh	r3, [r3, r2]
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	3b01      	subs	r3, #1
 8008de4:	b299      	uxth	r1, r3
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	225a      	movs	r2, #90	; 0x5a
 8008dea:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	225a      	movs	r2, #90	; 0x5a
 8008df0:	5a9b      	ldrh	r3, [r3, r2]
 8008df2:	b29b      	uxth	r3, r3
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d178      	bne.n	8008eea <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008df8:	f3ef 8310 	mrs	r3, PRIMASK
 8008dfc:	617b      	str	r3, [r7, #20]
  return(result);
 8008dfe:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e00:	637b      	str	r3, [r7, #52]	; 0x34
 8008e02:	2301      	movs	r3, #1
 8008e04:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e06:	69bb      	ldr	r3, [r7, #24]
 8008e08:	f383 8810 	msr	PRIMASK, r3
}
 8008e0c:	46c0      	nop			; (mov r8, r8)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	681a      	ldr	r2, [r3, #0]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4936      	ldr	r1, [pc, #216]	; (8008ef4 <UART_RxISR_16BIT+0x164>)
 8008e1a:	400a      	ands	r2, r1
 8008e1c:	601a      	str	r2, [r3, #0]
 8008e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e22:	69fb      	ldr	r3, [r7, #28]
 8008e24:	f383 8810 	msr	PRIMASK, r3
}
 8008e28:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e2a:	f3ef 8310 	mrs	r3, PRIMASK
 8008e2e:	623b      	str	r3, [r7, #32]
  return(result);
 8008e30:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e32:	633b      	str	r3, [r7, #48]	; 0x30
 8008e34:	2301      	movs	r3, #1
 8008e36:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3a:	f383 8810 	msr	PRIMASK, r3
}
 8008e3e:	46c0      	nop			; (mov r8, r8)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	689a      	ldr	r2, [r3, #8]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	2101      	movs	r1, #1
 8008e4c:	438a      	bics	r2, r1
 8008e4e:	609a      	str	r2, [r3, #8]
 8008e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e52:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e56:	f383 8810 	msr	PRIMASK, r3
}
 8008e5a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2220      	movs	r2, #32
 8008e60:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2200      	movs	r2, #0
 8008e66:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d12f      	bne.n	8008ed0 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2200      	movs	r2, #0
 8008e74:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e76:	f3ef 8310 	mrs	r3, PRIMASK
 8008e7a:	60bb      	str	r3, [r7, #8]
  return(result);
 8008e7c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e80:	2301      	movs	r3, #1
 8008e82:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f383 8810 	msr	PRIMASK, r3
}
 8008e8a:	46c0      	nop			; (mov r8, r8)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	681a      	ldr	r2, [r3, #0]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	2110      	movs	r1, #16
 8008e98:	438a      	bics	r2, r1
 8008e9a:	601a      	str	r2, [r3, #0]
 8008e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	f383 8810 	msr	PRIMASK, r3
}
 8008ea6:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	69db      	ldr	r3, [r3, #28]
 8008eae:	2210      	movs	r2, #16
 8008eb0:	4013      	ands	r3, r2
 8008eb2:	2b10      	cmp	r3, #16
 8008eb4:	d103      	bne.n	8008ebe <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	2210      	movs	r2, #16
 8008ebc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2258      	movs	r2, #88	; 0x58
 8008ec2:	5a9a      	ldrh	r2, [r3, r2]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	0011      	movs	r1, r2
 8008ec8:	0018      	movs	r0, r3
 8008eca:	f7fa fb97 	bl	80035fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008ece:	e00c      	b.n	8008eea <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	0018      	movs	r0, r3
 8008ed4:	f7ff fa2c 	bl	8008330 <HAL_UART_RxCpltCallback>
}
 8008ed8:	e007      	b.n	8008eea <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	699a      	ldr	r2, [r3, #24]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	2108      	movs	r1, #8
 8008ee6:	430a      	orrs	r2, r1
 8008ee8:	619a      	str	r2, [r3, #24]
}
 8008eea:	46c0      	nop			; (mov r8, r8)
 8008eec:	46bd      	mov	sp, r7
 8008eee:	b010      	add	sp, #64	; 0x40
 8008ef0:	bd80      	pop	{r7, pc}
 8008ef2:	46c0      	nop			; (mov r8, r8)
 8008ef4:	fffffedf 	.word	0xfffffedf

08008ef8 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ef8:	b5b0      	push	{r4, r5, r7, lr}
 8008efa:	b08a      	sub	sp, #40	; 0x28
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	60f8      	str	r0, [r7, #12]
 8008f00:	60b9      	str	r1, [r7, #8]
 8008f02:	1dbb      	adds	r3, r7, #6
 8008f04:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f0a:	2b20      	cmp	r3, #32
 8008f0c:	d15e      	bne.n	8008fcc <HAL_UARTEx_ReceiveToIdle_IT+0xd4>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d003      	beq.n	8008f1c <HAL_UARTEx_ReceiveToIdle_IT+0x24>
 8008f14:	1dbb      	adds	r3, r7, #6
 8008f16:	881b      	ldrh	r3, [r3, #0]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d101      	bne.n	8008f20 <HAL_UARTEx_ReceiveToIdle_IT+0x28>
    {
      return HAL_ERROR;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	e056      	b.n	8008fce <HAL_UARTEx_ReceiveToIdle_IT+0xd6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data to be received from RDR will be
       handled through a uint16_t cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	689a      	ldr	r2, [r3, #8]
 8008f24:	2380      	movs	r3, #128	; 0x80
 8008f26:	015b      	lsls	r3, r3, #5
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	d109      	bne.n	8008f40 <HAL_UARTEx_ReceiveToIdle_IT+0x48>
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	691b      	ldr	r3, [r3, #16]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d105      	bne.n	8008f40 <HAL_UARTEx_ReceiveToIdle_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	2201      	movs	r2, #1
 8008f38:	4013      	ands	r3, r2
 8008f3a:	d001      	beq.n	8008f40 <HAL_UARTEx_ReceiveToIdle_IT+0x48>
      {
        return  HAL_ERROR;
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	e046      	b.n	8008fce <HAL_UARTEx_ReceiveToIdle_IT+0xd6>
      }
    }

    __HAL_LOCK(huart);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2274      	movs	r2, #116	; 0x74
 8008f44:	5c9b      	ldrb	r3, [r3, r2]
 8008f46:	2b01      	cmp	r3, #1
 8008f48:	d101      	bne.n	8008f4e <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 8008f4a:	2302      	movs	r3, #2
 8008f4c:	e03f      	b.n	8008fce <HAL_UARTEx_ReceiveToIdle_IT+0xd6>
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2274      	movs	r2, #116	; 0x74
 8008f52:	2101      	movs	r1, #1
 8008f54:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2201      	movs	r2, #1
 8008f5a:	661a      	str	r2, [r3, #96]	; 0x60

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8008f5c:	2527      	movs	r5, #39	; 0x27
 8008f5e:	197c      	adds	r4, r7, r5
 8008f60:	1dbb      	adds	r3, r7, #6
 8008f62:	881a      	ldrh	r2, [r3, #0]
 8008f64:	68b9      	ldr	r1, [r7, #8]
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	0018      	movs	r0, r3
 8008f6a:	f7ff fd09 	bl	8008980 <UART_Start_Receive_IT>
 8008f6e:	0003      	movs	r3, r0
 8008f70:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008f72:	197b      	adds	r3, r7, r5
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d124      	bne.n	8008fc4 <HAL_UARTEx_ReceiveToIdle_IT+0xcc>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d11c      	bne.n	8008fbc <HAL_UARTEx_ReceiveToIdle_IT+0xc4>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	2210      	movs	r2, #16
 8008f88:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f8a:	f3ef 8310 	mrs	r3, PRIMASK
 8008f8e:	617b      	str	r3, [r7, #20]
  return(result);
 8008f90:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f92:	623b      	str	r3, [r7, #32]
 8008f94:	2301      	movs	r3, #1
 8008f96:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f98:	69bb      	ldr	r3, [r7, #24]
 8008f9a:	f383 8810 	msr	PRIMASK, r3
}
 8008f9e:	46c0      	nop			; (mov r8, r8)
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	2110      	movs	r1, #16
 8008fac:	430a      	orrs	r2, r1
 8008fae:	601a      	str	r2, [r3, #0]
 8008fb0:	6a3b      	ldr	r3, [r7, #32]
 8008fb2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fb4:	69fb      	ldr	r3, [r7, #28]
 8008fb6:	f383 8810 	msr	PRIMASK, r3
}
 8008fba:	e003      	b.n	8008fc4 <HAL_UARTEx_ReceiveToIdle_IT+0xcc>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008fbc:	2327      	movs	r3, #39	; 0x27
 8008fbe:	18fb      	adds	r3, r7, r3
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8008fc4:	2327      	movs	r3, #39	; 0x27
 8008fc6:	18fb      	adds	r3, r7, r3
 8008fc8:	781b      	ldrb	r3, [r3, #0]
 8008fca:	e000      	b.n	8008fce <HAL_UARTEx_ReceiveToIdle_IT+0xd6>
  }
  else
  {
    return HAL_BUSY;
 8008fcc:	2302      	movs	r3, #2
  }
}
 8008fce:	0018      	movs	r0, r3
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	b00a      	add	sp, #40	; 0x28
 8008fd4:	bdb0      	pop	{r4, r5, r7, pc}

08008fd6 <u8g2_DrawHorizontalBitmap>:
  b		Pointer to the bitmap line.
  Only draw pixels which are set.
*/

void u8g2_DrawHorizontalBitmap(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 8008fd6:	b5b0      	push	{r4, r5, r7, lr}
 8008fd8:	b088      	sub	sp, #32
 8008fda:	af02      	add	r7, sp, #8
 8008fdc:	60f8      	str	r0, [r7, #12]
 8008fde:	000c      	movs	r4, r1
 8008fe0:	0010      	movs	r0, r2
 8008fe2:	0019      	movs	r1, r3
 8008fe4:	250a      	movs	r5, #10
 8008fe6:	197b      	adds	r3, r7, r5
 8008fe8:	1c22      	adds	r2, r4, #0
 8008fea:	801a      	strh	r2, [r3, #0]
 8008fec:	2408      	movs	r4, #8
 8008fee:	193b      	adds	r3, r7, r4
 8008ff0:	1c02      	adds	r2, r0, #0
 8008ff2:	801a      	strh	r2, [r3, #0]
 8008ff4:	1dbb      	adds	r3, r7, #6
 8008ff6:	1c0a      	adds	r2, r1, #0
 8008ff8:	801a      	strh	r2, [r3, #0]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 8008ffa:	2016      	movs	r0, #22
 8008ffc:	183b      	adds	r3, r7, r0
 8008ffe:	68fa      	ldr	r2, [r7, #12]
 8009000:	2192      	movs	r1, #146	; 0x92
 8009002:	5c52      	ldrb	r2, [r2, r1]
 8009004:	701a      	strb	r2, [r3, #0]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 8009006:	183b      	adds	r3, r7, r0
 8009008:	781b      	ldrb	r3, [r3, #0]
 800900a:	425a      	negs	r2, r3
 800900c:	4153      	adcs	r3, r2
 800900e:	b2da      	uxtb	r2, r3
 8009010:	2315      	movs	r3, #21
 8009012:	18fb      	adds	r3, r7, r3
 8009014:	701a      	strb	r2, [r3, #0]

#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8009016:	0029      	movs	r1, r5
 8009018:	187a      	adds	r2, r7, r1
 800901a:	1dbb      	adds	r3, r7, #6
 800901c:	8812      	ldrh	r2, [r2, #0]
 800901e:	881b      	ldrh	r3, [r3, #0]
 8009020:	18d3      	adds	r3, r2, r3
 8009022:	b29d      	uxth	r5, r3
 8009024:	193b      	adds	r3, r7, r4
 8009026:	881b      	ldrh	r3, [r3, #0]
 8009028:	3301      	adds	r3, #1
 800902a:	b29b      	uxth	r3, r3
 800902c:	193a      	adds	r2, r7, r4
 800902e:	8814      	ldrh	r4, [r2, #0]
 8009030:	187a      	adds	r2, r7, r1
 8009032:	8811      	ldrh	r1, [r2, #0]
 8009034:	68f8      	ldr	r0, [r7, #12]
 8009036:	9300      	str	r3, [sp, #0]
 8009038:	002b      	movs	r3, r5
 800903a:	0022      	movs	r2, r4
 800903c:	f001 fb08 	bl	800a650 <u8g2_IsIntersection>
 8009040:	1e03      	subs	r3, r0, #0
 8009042:	d05d      	beq.n	8009100 <u8g2_DrawHorizontalBitmap+0x12a>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 128;
 8009044:	2317      	movs	r3, #23
 8009046:	18fb      	adds	r3, r7, r3
 8009048:	2280      	movs	r2, #128	; 0x80
 800904a:	701a      	strb	r2, [r3, #0]
  while(len > 0)
 800904c:	e04d      	b.n	80090ea <u8g2_DrawHorizontalBitmap+0x114>
  {
    if ( *b & mask ) {
 800904e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009050:	781b      	ldrb	r3, [r3, #0]
 8009052:	2217      	movs	r2, #23
 8009054:	18ba      	adds	r2, r7, r2
 8009056:	7812      	ldrb	r2, [r2, #0]
 8009058:	4013      	ands	r3, r2
 800905a:	b2db      	uxtb	r3, r3
 800905c:	2b00      	cmp	r3, #0
 800905e:	d012      	beq.n	8009086 <u8g2_DrawHorizontalBitmap+0xb0>
      u8g2->draw_color = color;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2216      	movs	r2, #22
 8009064:	18ba      	adds	r2, r7, r2
 8009066:	2192      	movs	r1, #146	; 0x92
 8009068:	7812      	ldrb	r2, [r2, #0]
 800906a:	545a      	strb	r2, [r3, r1]
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 800906c:	2308      	movs	r3, #8
 800906e:	18fb      	adds	r3, r7, r3
 8009070:	881a      	ldrh	r2, [r3, #0]
 8009072:	230a      	movs	r3, #10
 8009074:	18fb      	adds	r3, r7, r3
 8009076:	8819      	ldrh	r1, [r3, #0]
 8009078:	68f8      	ldr	r0, [r7, #12]
 800907a:	2300      	movs	r3, #0
 800907c:	9300      	str	r3, [sp, #0]
 800907e:	2301      	movs	r3, #1
 8009080:	f001 f9bd 	bl	800a3fe <u8g2_DrawHVLine>
 8009084:	e016      	b.n	80090b4 <u8g2_DrawHorizontalBitmap+0xde>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2291      	movs	r2, #145	; 0x91
 800908a:	5c9b      	ldrb	r3, [r3, r2]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d111      	bne.n	80090b4 <u8g2_DrawHorizontalBitmap+0xde>
      u8g2->draw_color = ncolor;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2215      	movs	r2, #21
 8009094:	18ba      	adds	r2, r7, r2
 8009096:	2192      	movs	r1, #146	; 0x92
 8009098:	7812      	ldrb	r2, [r2, #0]
 800909a:	545a      	strb	r2, [r3, r1]
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 800909c:	2308      	movs	r3, #8
 800909e:	18fb      	adds	r3, r7, r3
 80090a0:	881a      	ldrh	r2, [r3, #0]
 80090a2:	230a      	movs	r3, #10
 80090a4:	18fb      	adds	r3, r7, r3
 80090a6:	8819      	ldrh	r1, [r3, #0]
 80090a8:	68f8      	ldr	r0, [r7, #12]
 80090aa:	2300      	movs	r3, #0
 80090ac:	9300      	str	r3, [sp, #0]
 80090ae:	2301      	movs	r3, #1
 80090b0:	f001 f9a5 	bl	800a3fe <u8g2_DrawHVLine>
    }

    x++;
 80090b4:	210a      	movs	r1, #10
 80090b6:	187b      	adds	r3, r7, r1
 80090b8:	881a      	ldrh	r2, [r3, #0]
 80090ba:	187b      	adds	r3, r7, r1
 80090bc:	3201      	adds	r2, #1
 80090be:	801a      	strh	r2, [r3, #0]
    mask >>= 1;
 80090c0:	2117      	movs	r1, #23
 80090c2:	187b      	adds	r3, r7, r1
 80090c4:	187a      	adds	r2, r7, r1
 80090c6:	7812      	ldrb	r2, [r2, #0]
 80090c8:	0852      	lsrs	r2, r2, #1
 80090ca:	701a      	strb	r2, [r3, #0]
    if ( mask == 0 )
 80090cc:	187b      	adds	r3, r7, r1
 80090ce:	781b      	ldrb	r3, [r3, #0]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d105      	bne.n	80090e0 <u8g2_DrawHorizontalBitmap+0x10a>
    {
      mask = 128;
 80090d4:	187b      	adds	r3, r7, r1
 80090d6:	2280      	movs	r2, #128	; 0x80
 80090d8:	701a      	strb	r2, [r3, #0]
      b++;
 80090da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090dc:	3301      	adds	r3, #1
 80090de:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    len--;
 80090e0:	1dbb      	adds	r3, r7, #6
 80090e2:	881a      	ldrh	r2, [r3, #0]
 80090e4:	1dbb      	adds	r3, r7, #6
 80090e6:	3a01      	subs	r2, #1
 80090e8:	801a      	strh	r2, [r3, #0]
  while(len > 0)
 80090ea:	1dbb      	adds	r3, r7, #6
 80090ec:	881b      	ldrh	r3, [r3, #0]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d1ad      	bne.n	800904e <u8g2_DrawHorizontalBitmap+0x78>
  }
  u8g2->draw_color = color;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2216      	movs	r2, #22
 80090f6:	18ba      	adds	r2, r7, r2
 80090f8:	2192      	movs	r1, #146	; 0x92
 80090fa:	7812      	ldrb	r2, [r2, #0]
 80090fc:	545a      	strb	r2, [r3, r1]
 80090fe:	e000      	b.n	8009102 <u8g2_DrawHorizontalBitmap+0x12c>
    return;
 8009100:	46c0      	nop			; (mov r8, r8)
}
 8009102:	46bd      	mov	sp, r7
 8009104:	b006      	add	sp, #24
 8009106:	bdb0      	pop	{r4, r5, r7, pc}

08009108 <u8g2_DrawBitmap>:


/* u8glib compatible bitmap draw function */
void u8g2_DrawBitmap(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t cnt, u8g2_uint_t h, const uint8_t *bitmap)
{
 8009108:	b5b0      	push	{r4, r5, r7, lr}
 800910a:	b088      	sub	sp, #32
 800910c:	af02      	add	r7, sp, #8
 800910e:	60f8      	str	r0, [r7, #12]
 8009110:	000c      	movs	r4, r1
 8009112:	0010      	movs	r0, r2
 8009114:	0019      	movs	r1, r3
 8009116:	250a      	movs	r5, #10
 8009118:	197b      	adds	r3, r7, r5
 800911a:	1c22      	adds	r2, r4, #0
 800911c:	801a      	strh	r2, [r3, #0]
 800911e:	2408      	movs	r4, #8
 8009120:	193b      	adds	r3, r7, r4
 8009122:	1c02      	adds	r2, r0, #0
 8009124:	801a      	strh	r2, [r3, #0]
 8009126:	1dbb      	adds	r3, r7, #6
 8009128:	1c0a      	adds	r2, r1, #0
 800912a:	801a      	strh	r2, [r3, #0]
  u8g2_uint_t w;
  w = cnt;
 800912c:	2116      	movs	r1, #22
 800912e:	187b      	adds	r3, r7, r1
 8009130:	1dba      	adds	r2, r7, #6
 8009132:	8812      	ldrh	r2, [r2, #0]
 8009134:	801a      	strh	r2, [r3, #0]
  w *= 8;
 8009136:	187b      	adds	r3, r7, r1
 8009138:	187a      	adds	r2, r7, r1
 800913a:	8812      	ldrh	r2, [r2, #0]
 800913c:	00d2      	lsls	r2, r2, #3
 800913e:	801a      	strh	r2, [r3, #0]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8009140:	0028      	movs	r0, r5
 8009142:	183a      	adds	r2, r7, r0
 8009144:	187b      	adds	r3, r7, r1
 8009146:	8812      	ldrh	r2, [r2, #0]
 8009148:	881b      	ldrh	r3, [r3, #0]
 800914a:	18d3      	adds	r3, r2, r3
 800914c:	b29d      	uxth	r5, r3
 800914e:	193a      	adds	r2, r7, r4
 8009150:	2328      	movs	r3, #40	; 0x28
 8009152:	18fb      	adds	r3, r7, r3
 8009154:	8812      	ldrh	r2, [r2, #0]
 8009156:	881b      	ldrh	r3, [r3, #0]
 8009158:	18d3      	adds	r3, r2, r3
 800915a:	b29b      	uxth	r3, r3
 800915c:	193a      	adds	r2, r7, r4
 800915e:	8814      	ldrh	r4, [r2, #0]
 8009160:	183a      	adds	r2, r7, r0
 8009162:	8811      	ldrh	r1, [r2, #0]
 8009164:	68f8      	ldr	r0, [r7, #12]
 8009166:	9300      	str	r3, [sp, #0]
 8009168:	002b      	movs	r3, r5
 800916a:	0022      	movs	r2, r4
 800916c:	f001 fa70 	bl	800a650 <u8g2_IsIntersection>
 8009170:	1e03      	subs	r3, r0, #0
 8009172:	d025      	beq.n	80091c0 <u8g2_DrawBitmap+0xb8>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 8009174:	e01e      	b.n	80091b4 <u8g2_DrawBitmap+0xac>
  {
    u8g2_DrawHorizontalBitmap(u8g2, x, y, w, bitmap);
 8009176:	2316      	movs	r3, #22
 8009178:	18fb      	adds	r3, r7, r3
 800917a:	881c      	ldrh	r4, [r3, #0]
 800917c:	2508      	movs	r5, #8
 800917e:	197b      	adds	r3, r7, r5
 8009180:	881a      	ldrh	r2, [r3, #0]
 8009182:	230a      	movs	r3, #10
 8009184:	18fb      	adds	r3, r7, r3
 8009186:	8819      	ldrh	r1, [r3, #0]
 8009188:	68f8      	ldr	r0, [r7, #12]
 800918a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800918c:	9300      	str	r3, [sp, #0]
 800918e:	0023      	movs	r3, r4
 8009190:	f7ff ff21 	bl	8008fd6 <u8g2_DrawHorizontalBitmap>
    bitmap += cnt;
 8009194:	1dbb      	adds	r3, r7, #6
 8009196:	881b      	ldrh	r3, [r3, #0]
 8009198:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800919a:	18d3      	adds	r3, r2, r3
 800919c:	62fb      	str	r3, [r7, #44]	; 0x2c
    y++;
 800919e:	197b      	adds	r3, r7, r5
 80091a0:	881a      	ldrh	r2, [r3, #0]
 80091a2:	197b      	adds	r3, r7, r5
 80091a4:	3201      	adds	r2, #1
 80091a6:	801a      	strh	r2, [r3, #0]
    h--;
 80091a8:	2128      	movs	r1, #40	; 0x28
 80091aa:	187b      	adds	r3, r7, r1
 80091ac:	881a      	ldrh	r2, [r3, #0]
 80091ae:	187b      	adds	r3, r7, r1
 80091b0:	3a01      	subs	r2, #1
 80091b2:	801a      	strh	r2, [r3, #0]
  while( h > 0 )
 80091b4:	2328      	movs	r3, #40	; 0x28
 80091b6:	18fb      	adds	r3, r7, r3
 80091b8:	881b      	ldrh	r3, [r3, #0]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d1db      	bne.n	8009176 <u8g2_DrawBitmap+0x6e>
 80091be:	e000      	b.n	80091c2 <u8g2_DrawBitmap+0xba>
    return;
 80091c0:	46c0      	nop			; (mov r8, r8)
  }
}
 80091c2:	46bd      	mov	sp, r7
 80091c4:	b006      	add	sp, #24
 80091c6:	bdb0      	pop	{r4, r5, r7, pc}

080091c8 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b084      	sub	sp, #16
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	7c1b      	ldrb	r3, [r3, #16]
 80091d6:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2238      	movs	r2, #56	; 0x38
 80091dc:	5c9b      	ldrb	r3, [r3, r2]
 80091de:	001a      	movs	r2, r3
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	4353      	muls	r3, r2
 80091e4:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	00db      	lsls	r3, r3, #3
 80091ea:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091f0:	68fa      	ldr	r2, [r7, #12]
 80091f2:	2100      	movs	r1, #0
 80091f4:	0018      	movs	r0, r3
 80091f6:	f005 fd57 	bl	800eca8 <memset>
}
 80091fa:	46c0      	nop			; (mov r8, r8)
 80091fc:	46bd      	mov	sp, r7
 80091fe:	b004      	add	sp, #16
 8009200:	bd80      	pop	{r7, pc}

08009202 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8009202:	b590      	push	{r4, r7, lr}
 8009204:	b087      	sub	sp, #28
 8009206:	af02      	add	r7, sp, #8
 8009208:	6078      	str	r0, [r7, #4]
 800920a:	0008      	movs	r0, r1
 800920c:	0011      	movs	r1, r2
 800920e:	1cfb      	adds	r3, r7, #3
 8009210:	1c02      	adds	r2, r0, #0
 8009212:	701a      	strb	r2, [r3, #0]
 8009214:	1cbb      	adds	r3, r7, #2
 8009216:	1c0a      	adds	r2, r1, #0
 8009218:	701a      	strb	r2, [r3, #0]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681a      	ldr	r2, [r3, #0]
 800921e:	240f      	movs	r4, #15
 8009220:	193b      	adds	r3, r7, r4
 8009222:	7c12      	ldrb	r2, [r2, #16]
 8009224:	701a      	strb	r2, [r3, #0]
  offset = src_tile_row;
 8009226:	210c      	movs	r1, #12
 8009228:	187b      	adds	r3, r7, r1
 800922a:	1cfa      	adds	r2, r7, #3
 800922c:	7812      	ldrb	r2, [r2, #0]
 800922e:	801a      	strh	r2, [r3, #0]
  ptr = u8g2->tile_buf_ptr;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009234:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8009236:	193b      	adds	r3, r7, r4
 8009238:	781b      	ldrb	r3, [r3, #0]
 800923a:	b29a      	uxth	r2, r3
 800923c:	187b      	adds	r3, r7, r1
 800923e:	0008      	movs	r0, r1
 8009240:	1879      	adds	r1, r7, r1
 8009242:	8809      	ldrh	r1, [r1, #0]
 8009244:	434a      	muls	r2, r1
 8009246:	801a      	strh	r2, [r3, #0]
  offset *= 8;
 8009248:	0001      	movs	r1, r0
 800924a:	187b      	adds	r3, r7, r1
 800924c:	187a      	adds	r2, r7, r1
 800924e:	8812      	ldrh	r2, [r2, #0]
 8009250:	00d2      	lsls	r2, r2, #3
 8009252:	801a      	strh	r2, [r3, #0]
  ptr += offset;
 8009254:	187b      	adds	r3, r7, r1
 8009256:	881b      	ldrh	r3, [r3, #0]
 8009258:	68ba      	ldr	r2, [r7, #8]
 800925a:	18d3      	adds	r3, r2, r3
 800925c:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 800925e:	193b      	adds	r3, r7, r4
 8009260:	7819      	ldrb	r1, [r3, #0]
 8009262:	1cbb      	adds	r3, r7, #2
 8009264:	781a      	ldrb	r2, [r3, #0]
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	9300      	str	r3, [sp, #0]
 800926c:	000b      	movs	r3, r1
 800926e:	2100      	movs	r1, #0
 8009270:	f002 f8fe 	bl	800b470 <u8x8_DrawTile>
}
 8009274:	46c0      	nop			; (mov r8, r8)
 8009276:	46bd      	mov	sp, r7
 8009278:	b005      	add	sp, #20
 800927a:	bd90      	pop	{r4, r7, pc}

0800927c <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 800927c:	b5b0      	push	{r4, r5, r7, lr}
 800927e:	b084      	sub	sp, #16
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8009284:	230f      	movs	r3, #15
 8009286:	18fb      	adds	r3, r7, r3
 8009288:	2200      	movs	r2, #0
 800928a:	701a      	strb	r2, [r3, #0]
  src_max = u8g2->tile_buf_height;
 800928c:	230d      	movs	r3, #13
 800928e:	18fb      	adds	r3, r7, r3
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	2138      	movs	r1, #56	; 0x38
 8009294:	5c52      	ldrb	r2, [r2, r1]
 8009296:	701a      	strb	r2, [r3, #0]
  dest_row = u8g2->tile_curr_row;
 8009298:	230e      	movs	r3, #14
 800929a:	18fb      	adds	r3, r7, r3
 800929c:	687a      	ldr	r2, [r7, #4]
 800929e:	2139      	movs	r1, #57	; 0x39
 80092a0:	5c52      	ldrb	r2, [r2, r1]
 80092a2:	701a      	strb	r2, [r3, #0]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	230c      	movs	r3, #12
 80092aa:	18fb      	adds	r3, r7, r3
 80092ac:	7c52      	ldrb	r2, [r2, #17]
 80092ae:	701a      	strb	r2, [r3, #0]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 80092b0:	250e      	movs	r5, #14
 80092b2:	197b      	adds	r3, r7, r5
 80092b4:	781a      	ldrb	r2, [r3, #0]
 80092b6:	240f      	movs	r4, #15
 80092b8:	193b      	adds	r3, r7, r4
 80092ba:	7819      	ldrb	r1, [r3, #0]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	0018      	movs	r0, r3
 80092c0:	f7ff ff9f 	bl	8009202 <u8g2_send_tile_row>
    src_row++;
 80092c4:	0021      	movs	r1, r4
 80092c6:	187b      	adds	r3, r7, r1
 80092c8:	781a      	ldrb	r2, [r3, #0]
 80092ca:	187b      	adds	r3, r7, r1
 80092cc:	3201      	adds	r2, #1
 80092ce:	701a      	strb	r2, [r3, #0]
    dest_row++;
 80092d0:	197b      	adds	r3, r7, r5
 80092d2:	781a      	ldrb	r2, [r3, #0]
 80092d4:	197b      	adds	r3, r7, r5
 80092d6:	3201      	adds	r2, #1
 80092d8:	701a      	strb	r2, [r3, #0]
  } while( src_row < src_max && dest_row < dest_max );
 80092da:	187a      	adds	r2, r7, r1
 80092dc:	230d      	movs	r3, #13
 80092de:	18fb      	adds	r3, r7, r3
 80092e0:	7812      	ldrb	r2, [r2, #0]
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d206      	bcs.n	80092f6 <u8g2_send_buffer+0x7a>
 80092e8:	197a      	adds	r2, r7, r5
 80092ea:	230c      	movs	r3, #12
 80092ec:	18fb      	adds	r3, r7, r3
 80092ee:	7812      	ldrb	r2, [r2, #0]
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	429a      	cmp	r2, r3
 80092f4:	d3dc      	bcc.n	80092b0 <u8g2_send_buffer+0x34>
}
 80092f6:	46c0      	nop			; (mov r8, r8)
 80092f8:	46bd      	mov	sp, r7
 80092fa:	b004      	add	sp, #16
 80092fc:	bdb0      	pop	{r4, r5, r7, pc}

080092fe <u8g2_SetBufferCurrTileRow>:
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 80092fe:	b580      	push	{r7, lr}
 8009300:	b082      	sub	sp, #8
 8009302:	af00      	add	r7, sp, #0
 8009304:	6078      	str	r0, [r7, #4]
 8009306:	000a      	movs	r2, r1
 8009308:	1cfb      	adds	r3, r7, #3
 800930a:	701a      	strb	r2, [r3, #0]
  u8g2->tile_curr_row = row;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	1cfa      	adds	r2, r7, #3
 8009310:	2139      	movs	r1, #57	; 0x39
 8009312:	7812      	ldrb	r2, [r2, #0]
 8009314:	545a      	strb	r2, [r3, r1]
  u8g2->cb->update_dimension(u8g2);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	687a      	ldr	r2, [r7, #4]
 800931e:	0010      	movs	r0, r2
 8009320:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	0010      	movs	r0, r2
 800932c:	4798      	blx	r3
}
 800932e:	46c0      	nop			; (mov r8, r8)
 8009330:	46bd      	mov	sp, r7
 8009332:	b002      	add	sp, #8
 8009334:	bd80      	pop	{r7, pc}

08009336 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8009336:	b580      	push	{r7, lr}
 8009338:	b082      	sub	sp, #8
 800933a:	af00      	add	r7, sp, #0
 800933c:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2293      	movs	r2, #147	; 0x93
 8009342:	5c9b      	ldrb	r3, [r3, r2]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d003      	beq.n	8009350 <u8g2_FirstPage+0x1a>
  {
    u8g2_ClearBuffer(u8g2);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	0018      	movs	r0, r3
 800934c:	f7ff ff3c 	bl	80091c8 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2100      	movs	r1, #0
 8009354:	0018      	movs	r0, r3
 8009356:	f7ff ffd2 	bl	80092fe <u8g2_SetBufferCurrTileRow>
}
 800935a:	46c0      	nop			; (mov r8, r8)
 800935c:	46bd      	mov	sp, r7
 800935e:	b002      	add	sp, #8
 8009360:	bd80      	pop	{r7, pc}

08009362 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8009362:	b580      	push	{r7, lr}
 8009364:	b084      	sub	sp, #16
 8009366:	af00      	add	r7, sp, #0
 8009368:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	0018      	movs	r0, r3
 800936e:	f7ff ff85 	bl	800927c <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8009372:	200f      	movs	r0, #15
 8009374:	183b      	adds	r3, r7, r0
 8009376:	687a      	ldr	r2, [r7, #4]
 8009378:	2139      	movs	r1, #57	; 0x39
 800937a:	5c52      	ldrb	r2, [r2, r1]
 800937c:	701a      	strb	r2, [r3, #0]
  row += u8g2->tile_buf_height;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2238      	movs	r2, #56	; 0x38
 8009382:	5c99      	ldrb	r1, [r3, r2]
 8009384:	183b      	adds	r3, r7, r0
 8009386:	183a      	adds	r2, r7, r0
 8009388:	7812      	ldrb	r2, [r2, #0]
 800938a:	188a      	adds	r2, r1, r2
 800938c:	701a      	strb	r2, [r3, #0]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	7c5b      	ldrb	r3, [r3, #17]
 8009394:	183a      	adds	r2, r7, r0
 8009396:	7812      	ldrb	r2, [r2, #0]
 8009398:	429a      	cmp	r2, r3
 800939a:	d305      	bcc.n	80093a8 <u8g2_NextPage+0x46>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	0018      	movs	r0, r3
 80093a0:	f002 f8c3 	bl	800b52a <u8x8_RefreshDisplay>
    return 0;
 80093a4:	2300      	movs	r3, #0
 80093a6:	e011      	b.n	80093cc <u8g2_NextPage+0x6a>
  }
  if ( u8g2->is_auto_page_clear )
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2293      	movs	r2, #147	; 0x93
 80093ac:	5c9b      	ldrb	r3, [r3, r2]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d003      	beq.n	80093ba <u8g2_NextPage+0x58>
  {
    u8g2_ClearBuffer(u8g2);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	0018      	movs	r0, r3
 80093b6:	f7ff ff07 	bl	80091c8 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 80093ba:	230f      	movs	r3, #15
 80093bc:	18fb      	adds	r3, r7, r3
 80093be:	781a      	ldrb	r2, [r3, #0]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	0011      	movs	r1, r2
 80093c4:	0018      	movs	r0, r3
 80093c6:	f7ff ff9a 	bl	80092fe <u8g2_SetBufferCurrTileRow>
  return 1;
 80093ca:	2301      	movs	r3, #1
}
 80093cc:	0018      	movs	r0, r3
 80093ce:	46bd      	mov	sp, r7
 80093d0:	b004      	add	sp, #16
 80093d2:	bd80      	pop	{r7, pc}

080093d4 <u8g2_m_16_8_2>:
  *page_cnt = 1;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_2(uint8_t *page_cnt)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b082      	sub	sp, #8
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 2;
  return 0;
  #else
  static uint8_t buf[256];
  *page_cnt = 2;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2202      	movs	r2, #2
 80093e0:	701a      	strb	r2, [r3, #0]
  return buf;
 80093e2:	4b02      	ldr	r3, [pc, #8]	; (80093ec <u8g2_m_16_8_2+0x18>)
  #endif
}
 80093e4:	0018      	movs	r0, r3
 80093e6:	46bd      	mov	sp, r7
 80093e8:	b002      	add	sp, #8
 80093ea:	bd80      	pop	{r7, pc}
 80093ec:	200005ac 	.word	0x200005ac

080093f0 <u8g2_Setup_ssd1306_i2c_128x64_noname_2>:
  buf = u8g2_m_16_8_1(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 2 */
void u8g2_Setup_ssd1306_i2c_128x64_noname_2(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80093f0:	b590      	push	{r4, r7, lr}
 80093f2:	b089      	sub	sp, #36	; 0x24
 80093f4:	af02      	add	r7, sp, #8
 80093f6:	60f8      	str	r0, [r7, #12]
 80093f8:	60b9      	str	r1, [r7, #8]
 80093fa:	607a      	str	r2, [r7, #4]
 80093fc:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 80093fe:	687c      	ldr	r4, [r7, #4]
 8009400:	4a0e      	ldr	r2, [pc, #56]	; (800943c <u8g2_Setup_ssd1306_i2c_128x64_noname_2+0x4c>)
 8009402:	490f      	ldr	r1, [pc, #60]	; (8009440 <u8g2_Setup_ssd1306_i2c_128x64_noname_2+0x50>)
 8009404:	68f8      	ldr	r0, [r7, #12]
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	9300      	str	r3, [sp, #0]
 800940a:	0023      	movs	r3, r4
 800940c:	f002 f8f6 	bl	800b5fc <u8x8_Setup>
  buf = u8g2_m_16_8_2(&tile_buf_height);
 8009410:	2413      	movs	r4, #19
 8009412:	193b      	adds	r3, r7, r4
 8009414:	0018      	movs	r0, r3
 8009416:	f7ff ffdd 	bl	80093d4 <u8g2_m_16_8_2>
 800941a:	0003      	movs	r3, r0
 800941c:	617b      	str	r3, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 800941e:	193b      	adds	r3, r7, r4
 8009420:	781a      	ldrb	r2, [r3, #0]
 8009422:	4c08      	ldr	r4, [pc, #32]	; (8009444 <u8g2_Setup_ssd1306_i2c_128x64_noname_2+0x54>)
 8009424:	6979      	ldr	r1, [r7, #20]
 8009426:	68f8      	ldr	r0, [r7, #12]
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	9300      	str	r3, [sp, #0]
 800942c:	0023      	movs	r3, r4
 800942e:	f001 fb67 	bl	800ab00 <u8g2_SetupBuffer>
}
 8009432:	46c0      	nop			; (mov r8, r8)
 8009434:	46bd      	mov	sp, r7
 8009436:	b007      	add	sp, #28
 8009438:	bd90      	pop	{r4, r7, pc}
 800943a:	46c0      	nop			; (mov r8, r8)
 800943c:	0800b071 	.word	0x0800b071
 8009440:	0800b34d 	.word	0x0800b34d
 8009444:	0800a905 	.word	0x0800a905

08009448 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b082      	sub	sp, #8
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	000a      	movs	r2, r1
 8009452:	1cfb      	adds	r3, r7, #3
 8009454:	701a      	strb	r2, [r3, #0]
  font += offset;
 8009456:	1cfb      	adds	r3, r7, #3
 8009458:	781b      	ldrb	r3, [r3, #0]
 800945a:	687a      	ldr	r2, [r7, #4]
 800945c:	18d3      	adds	r3, r2, r3
 800945e:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	781b      	ldrb	r3, [r3, #0]
}
 8009464:	0018      	movs	r0, r3
 8009466:	46bd      	mov	sp, r7
 8009468:	b002      	add	sp, #8
 800946a:	bd80      	pop	{r7, pc}

0800946c <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b084      	sub	sp, #16
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	000a      	movs	r2, r1
 8009476:	1cfb      	adds	r3, r7, #3
 8009478:	701a      	strb	r2, [r3, #0]
    uint16_t pos;
    font += offset;
 800947a:	1cfb      	adds	r3, r7, #3
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	687a      	ldr	r2, [r7, #4]
 8009480:	18d3      	adds	r3, r2, r3
 8009482:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	781a      	ldrb	r2, [r3, #0]
 8009488:	200e      	movs	r0, #14
 800948a:	183b      	adds	r3, r7, r0
 800948c:	801a      	strh	r2, [r3, #0]
    font++;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	3301      	adds	r3, #1
 8009492:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8009494:	183b      	adds	r3, r7, r0
 8009496:	183a      	adds	r2, r7, r0
 8009498:	8812      	ldrh	r2, [r2, #0]
 800949a:	0212      	lsls	r2, r2, #8
 800949c:	801a      	strh	r2, [r3, #0]
    pos += u8x8_pgm_read( font);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	781b      	ldrb	r3, [r3, #0]
 80094a2:	b299      	uxth	r1, r3
 80094a4:	183b      	adds	r3, r7, r0
 80094a6:	183a      	adds	r2, r7, r0
 80094a8:	8812      	ldrh	r2, [r2, #0]
 80094aa:	188a      	adds	r2, r1, r2
 80094ac:	801a      	strh	r2, [r3, #0]
    return pos;
 80094ae:	183b      	adds	r3, r7, r0
 80094b0:	881b      	ldrh	r3, [r3, #0]
}
 80094b2:	0018      	movs	r0, r3
 80094b4:	46bd      	mov	sp, r7
 80094b6:	b004      	add	sp, #16
 80094b8:	bd80      	pop	{r7, pc}

080094ba <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b082      	sub	sp, #8
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]
 80094c2:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	2100      	movs	r1, #0
 80094c8:	0018      	movs	r0, r3
 80094ca:	f7ff ffbd 	bl	8009448 <u8g2_font_get_byte>
 80094ce:	0003      	movs	r3, r0
 80094d0:	001a      	movs	r2, r3
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	2101      	movs	r1, #1
 80094da:	0018      	movs	r0, r3
 80094dc:	f7ff ffb4 	bl	8009448 <u8g2_font_get_byte>
 80094e0:	0003      	movs	r3, r0
 80094e2:	001a      	movs	r2, r3
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	2102      	movs	r1, #2
 80094ec:	0018      	movs	r0, r3
 80094ee:	f7ff ffab 	bl	8009448 <u8g2_font_get_byte>
 80094f2:	0003      	movs	r3, r0
 80094f4:	001a      	movs	r2, r3
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	2103      	movs	r1, #3
 80094fe:	0018      	movs	r0, r3
 8009500:	f7ff ffa2 	bl	8009448 <u8g2_font_get_byte>
 8009504:	0003      	movs	r3, r0
 8009506:	001a      	movs	r2, r3
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	2104      	movs	r1, #4
 8009510:	0018      	movs	r0, r3
 8009512:	f7ff ff99 	bl	8009448 <u8g2_font_get_byte>
 8009516:	0003      	movs	r3, r0
 8009518:	001a      	movs	r2, r3
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	2105      	movs	r1, #5
 8009522:	0018      	movs	r0, r3
 8009524:	f7ff ff90 	bl	8009448 <u8g2_font_get_byte>
 8009528:	0003      	movs	r3, r0
 800952a:	001a      	movs	r2, r3
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	2106      	movs	r1, #6
 8009534:	0018      	movs	r0, r3
 8009536:	f7ff ff87 	bl	8009448 <u8g2_font_get_byte>
 800953a:	0003      	movs	r3, r0
 800953c:	001a      	movs	r2, r3
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	2107      	movs	r1, #7
 8009546:	0018      	movs	r0, r3
 8009548:	f7ff ff7e 	bl	8009448 <u8g2_font_get_byte>
 800954c:	0003      	movs	r3, r0
 800954e:	001a      	movs	r2, r3
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	2108      	movs	r1, #8
 8009558:	0018      	movs	r0, r3
 800955a:	f7ff ff75 	bl	8009448 <u8g2_font_get_byte>
 800955e:	0003      	movs	r3, r0
 8009560:	001a      	movs	r2, r3
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	2109      	movs	r1, #9
 800956a:	0018      	movs	r0, r3
 800956c:	f7ff ff6c 	bl	8009448 <u8g2_font_get_byte>
 8009570:	0003      	movs	r3, r0
 8009572:	b25a      	sxtb	r2, r3
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	210a      	movs	r1, #10
 800957c:	0018      	movs	r0, r3
 800957e:	f7ff ff63 	bl	8009448 <u8g2_font_get_byte>
 8009582:	0003      	movs	r3, r0
 8009584:	b25a      	sxtb	r2, r3
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	210b      	movs	r1, #11
 800958e:	0018      	movs	r0, r3
 8009590:	f7ff ff5a 	bl	8009448 <u8g2_font_get_byte>
 8009594:	0003      	movs	r3, r0
 8009596:	b25a      	sxtb	r2, r3
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	210c      	movs	r1, #12
 80095a0:	0018      	movs	r0, r3
 80095a2:	f7ff ff51 	bl	8009448 <u8g2_font_get_byte>
 80095a6:	0003      	movs	r3, r0
 80095a8:	b25a      	sxtb	r2, r3
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	210d      	movs	r1, #13
 80095b2:	0018      	movs	r0, r3
 80095b4:	f7ff ff48 	bl	8009448 <u8g2_font_get_byte>
 80095b8:	0003      	movs	r3, r0
 80095ba:	b25a      	sxtb	r2, r3
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	210e      	movs	r1, #14
 80095c4:	0018      	movs	r0, r3
 80095c6:	f7ff ff3f 	bl	8009448 <u8g2_font_get_byte>
 80095ca:	0003      	movs	r3, r0
 80095cc:	b25a      	sxtb	r2, r3
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	210f      	movs	r1, #15
 80095d6:	0018      	movs	r0, r3
 80095d8:	f7ff ff36 	bl	8009448 <u8g2_font_get_byte>
 80095dc:	0003      	movs	r3, r0
 80095de:	b25a      	sxtb	r2, r3
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	2110      	movs	r1, #16
 80095e8:	0018      	movs	r0, r3
 80095ea:	f7ff ff2d 	bl	8009448 <u8g2_font_get_byte>
 80095ee:	0003      	movs	r3, r0
 80095f0:	b25a      	sxtb	r2, r3
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	2111      	movs	r1, #17
 80095fa:	0018      	movs	r0, r3
 80095fc:	f7ff ff36 	bl	800946c <u8g2_font_get_word>
 8009600:	0003      	movs	r3, r0
 8009602:	001a      	movs	r2, r3
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	2113      	movs	r1, #19
 800960c:	0018      	movs	r0, r3
 800960e:	f7ff ff2d 	bl	800946c <u8g2_font_get_word>
 8009612:	0003      	movs	r3, r0
 8009614:	001a      	movs	r2, r3
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	2115      	movs	r1, #21
 800961e:	0018      	movs	r0, r3
 8009620:	f7ff ff24 	bl	800946c <u8g2_font_get_word>
 8009624:	0003      	movs	r3, r0
 8009626:	001a      	movs	r2, r3
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	82da      	strh	r2, [r3, #22]
#endif
}
 800962c:	46c0      	nop			; (mov r8, r8)
 800962e:	46bd      	mov	sp, r7
 8009630:	b002      	add	sp, #8
 8009632:	bd80      	pop	{r7, pc}

08009634 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8009634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009636:	b085      	sub	sp, #20
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
 800963c:	000a      	movs	r2, r1
 800963e:	1cfb      	adds	r3, r7, #3
 8009640:	701a      	strb	r2, [r3, #0]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8009642:	250d      	movs	r5, #13
 8009644:	197b      	adds	r3, r7, r5
 8009646:	687a      	ldr	r2, [r7, #4]
 8009648:	7b12      	ldrb	r2, [r2, #12]
 800964a:	701a      	strb	r2, [r3, #0]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681a      	ldr	r2, [r3, #0]
 8009650:	240f      	movs	r4, #15
 8009652:	193b      	adds	r3, r7, r4
 8009654:	7812      	ldrb	r2, [r2, #0]
 8009656:	701a      	strb	r2, [r3, #0]
  
  val >>= bit_pos;
 8009658:	193b      	adds	r3, r7, r4
 800965a:	781a      	ldrb	r2, [r3, #0]
 800965c:	197b      	adds	r3, r7, r5
 800965e:	781b      	ldrb	r3, [r3, #0]
 8009660:	411a      	asrs	r2, r3
 8009662:	193b      	adds	r3, r7, r4
 8009664:	701a      	strb	r2, [r3, #0]
  bit_pos_plus_cnt = bit_pos;
 8009666:	200e      	movs	r0, #14
 8009668:	183b      	adds	r3, r7, r0
 800966a:	197a      	adds	r2, r7, r5
 800966c:	7812      	ldrb	r2, [r2, #0]
 800966e:	701a      	strb	r2, [r3, #0]
  bit_pos_plus_cnt += cnt;
 8009670:	183b      	adds	r3, r7, r0
 8009672:	1839      	adds	r1, r7, r0
 8009674:	1cfa      	adds	r2, r7, #3
 8009676:	7809      	ldrb	r1, [r1, #0]
 8009678:	7812      	ldrb	r2, [r2, #0]
 800967a:	188a      	adds	r2, r1, r2
 800967c:	701a      	strb	r2, [r3, #0]
  if ( bit_pos_plus_cnt >= 8 )
 800967e:	183b      	adds	r3, r7, r0
 8009680:	781b      	ldrb	r3, [r3, #0]
 8009682:	2b07      	cmp	r3, #7
 8009684:	d924      	bls.n	80096d0 <u8g2_font_decode_get_unsigned_bits+0x9c>
  {
    uint8_t s = 8;
 8009686:	260c      	movs	r6, #12
 8009688:	19bb      	adds	r3, r7, r6
 800968a:	2208      	movs	r2, #8
 800968c:	701a      	strb	r2, [r3, #0]
    s -= bit_pos;
 800968e:	19bb      	adds	r3, r7, r6
 8009690:	19b9      	adds	r1, r7, r6
 8009692:	197a      	adds	r2, r7, r5
 8009694:	7809      	ldrb	r1, [r1, #0]
 8009696:	7812      	ldrb	r2, [r2, #0]
 8009698:	1a8a      	subs	r2, r1, r2
 800969a:	701a      	strb	r2, [r3, #0]
    f->decode_ptr++;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	1c5a      	adds	r2, r3, #1
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	001a      	movs	r2, r3
 80096ae:	19bb      	adds	r3, r7, r6
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	409a      	lsls	r2, r3
 80096b4:	0013      	movs	r3, r2
 80096b6:	b25a      	sxtb	r2, r3
 80096b8:	193b      	adds	r3, r7, r4
 80096ba:	781b      	ldrb	r3, [r3, #0]
 80096bc:	b25b      	sxtb	r3, r3
 80096be:	4313      	orrs	r3, r2
 80096c0:	b25a      	sxtb	r2, r3
 80096c2:	193b      	adds	r3, r7, r4
 80096c4:	701a      	strb	r2, [r3, #0]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 80096c6:	183b      	adds	r3, r7, r0
 80096c8:	183a      	adds	r2, r7, r0
 80096ca:	7812      	ldrb	r2, [r2, #0]
 80096cc:	3a08      	subs	r2, #8
 80096ce:	701a      	strb	r2, [r3, #0]
  }
  val &= (1U<<cnt)-1;
 80096d0:	1cfb      	adds	r3, r7, #3
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	2201      	movs	r2, #1
 80096d6:	4252      	negs	r2, r2
 80096d8:	409a      	lsls	r2, r3
 80096da:	0013      	movs	r3, r2
 80096dc:	b2db      	uxtb	r3, r3
 80096de:	43db      	mvns	r3, r3
 80096e0:	b2da      	uxtb	r2, r3
 80096e2:	200f      	movs	r0, #15
 80096e4:	183b      	adds	r3, r7, r0
 80096e6:	1839      	adds	r1, r7, r0
 80096e8:	7809      	ldrb	r1, [r1, #0]
 80096ea:	400a      	ands	r2, r1
 80096ec:	701a      	strb	r2, [r3, #0]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	220e      	movs	r2, #14
 80096f2:	18ba      	adds	r2, r7, r2
 80096f4:	7812      	ldrb	r2, [r2, #0]
 80096f6:	731a      	strb	r2, [r3, #12]
  return val;
 80096f8:	183b      	adds	r3, r7, r0
 80096fa:	781b      	ldrb	r3, [r3, #0]
}
 80096fc:	0018      	movs	r0, r3
 80096fe:	46bd      	mov	sp, r7
 8009700:	b005      	add	sp, #20
 8009702:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009704 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b084      	sub	sp, #16
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	000a      	movs	r2, r1
 800970e:	1cfb      	adds	r3, r7, #3
 8009710:	701a      	strb	r2, [r3, #0]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8009712:	1cfb      	adds	r3, r7, #3
 8009714:	781a      	ldrb	r2, [r3, #0]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	0011      	movs	r1, r2
 800971a:	0018      	movs	r0, r3
 800971c:	f7ff ff8a 	bl	8009634 <u8g2_font_decode_get_unsigned_bits>
 8009720:	0003      	movs	r3, r0
 8009722:	001a      	movs	r2, r3
 8009724:	210f      	movs	r1, #15
 8009726:	187b      	adds	r3, r7, r1
 8009728:	701a      	strb	r2, [r3, #0]
  d = 1;
 800972a:	200e      	movs	r0, #14
 800972c:	183b      	adds	r3, r7, r0
 800972e:	2201      	movs	r2, #1
 8009730:	701a      	strb	r2, [r3, #0]
  cnt--;
 8009732:	1cfb      	adds	r3, r7, #3
 8009734:	781a      	ldrb	r2, [r3, #0]
 8009736:	1cfb      	adds	r3, r7, #3
 8009738:	3a01      	subs	r2, #1
 800973a:	701a      	strb	r2, [r3, #0]
  d <<= cnt;
 800973c:	183b      	adds	r3, r7, r0
 800973e:	2200      	movs	r2, #0
 8009740:	569a      	ldrsb	r2, [r3, r2]
 8009742:	1cfb      	adds	r3, r7, #3
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	409a      	lsls	r2, r3
 8009748:	183b      	adds	r3, r7, r0
 800974a:	701a      	strb	r2, [r3, #0]
  v -= d;
 800974c:	187b      	adds	r3, r7, r1
 800974e:	781a      	ldrb	r2, [r3, #0]
 8009750:	183b      	adds	r3, r7, r0
 8009752:	781b      	ldrb	r3, [r3, #0]
 8009754:	1ad3      	subs	r3, r2, r3
 8009756:	b2da      	uxtb	r2, r3
 8009758:	187b      	adds	r3, r7, r1
 800975a:	701a      	strb	r2, [r3, #0]
  return v;
 800975c:	187b      	adds	r3, r7, r1
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	b25b      	sxtb	r3, r3
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8009762:	0018      	movs	r0, r3
 8009764:	46bd      	mov	sp, r7
 8009766:	b004      	add	sp, #16
 8009768:	bd80      	pop	{r7, pc}

0800976a <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 800976a:	b5b0      	push	{r4, r5, r7, lr}
 800976c:	b082      	sub	sp, #8
 800976e:	af00      	add	r7, sp, #0
 8009770:	0005      	movs	r5, r0
 8009772:	000c      	movs	r4, r1
 8009774:	0010      	movs	r0, r2
 8009776:	0019      	movs	r1, r3
 8009778:	1dbb      	adds	r3, r7, #6
 800977a:	1c2a      	adds	r2, r5, #0
 800977c:	801a      	strh	r2, [r3, #0]
 800977e:	1d7b      	adds	r3, r7, #5
 8009780:	1c22      	adds	r2, r4, #0
 8009782:	701a      	strb	r2, [r3, #0]
 8009784:	1d3b      	adds	r3, r7, #4
 8009786:	1c02      	adds	r2, r0, #0
 8009788:	701a      	strb	r2, [r3, #0]
 800978a:	1cfb      	adds	r3, r7, #3
 800978c:	1c0a      	adds	r2, r1, #0
 800978e:	701a      	strb	r2, [r3, #0]
  switch(dir)
 8009790:	1cfb      	adds	r3, r7, #3
 8009792:	781b      	ldrb	r3, [r3, #0]
 8009794:	2b02      	cmp	r3, #2
 8009796:	d019      	beq.n	80097cc <u8g2_add_vector_y+0x62>
 8009798:	dc22      	bgt.n	80097e0 <u8g2_add_vector_y+0x76>
 800979a:	2b00      	cmp	r3, #0
 800979c:	d002      	beq.n	80097a4 <u8g2_add_vector_y+0x3a>
 800979e:	2b01      	cmp	r3, #1
 80097a0:	d00a      	beq.n	80097b8 <u8g2_add_vector_y+0x4e>
 80097a2:	e01d      	b.n	80097e0 <u8g2_add_vector_y+0x76>
  {
    case 0:
      dy += y;
 80097a4:	1d3b      	adds	r3, r7, #4
 80097a6:	781b      	ldrb	r3, [r3, #0]
 80097a8:	b25b      	sxtb	r3, r3
 80097aa:	b299      	uxth	r1, r3
 80097ac:	1dbb      	adds	r3, r7, #6
 80097ae:	1dba      	adds	r2, r7, #6
 80097b0:	8812      	ldrh	r2, [r2, #0]
 80097b2:	188a      	adds	r2, r1, r2
 80097b4:	801a      	strh	r2, [r3, #0]
      break;
 80097b6:	e01d      	b.n	80097f4 <u8g2_add_vector_y+0x8a>
    case 1:
      dy += x;
 80097b8:	1d7b      	adds	r3, r7, #5
 80097ba:	781b      	ldrb	r3, [r3, #0]
 80097bc:	b25b      	sxtb	r3, r3
 80097be:	b299      	uxth	r1, r3
 80097c0:	1dbb      	adds	r3, r7, #6
 80097c2:	1dba      	adds	r2, r7, #6
 80097c4:	8812      	ldrh	r2, [r2, #0]
 80097c6:	188a      	adds	r2, r1, r2
 80097c8:	801a      	strh	r2, [r3, #0]
      break;
 80097ca:	e013      	b.n	80097f4 <u8g2_add_vector_y+0x8a>
    case 2:
      dy -= y;
 80097cc:	1d3b      	adds	r3, r7, #4
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	b25b      	sxtb	r3, r3
 80097d2:	b29a      	uxth	r2, r3
 80097d4:	1dbb      	adds	r3, r7, #6
 80097d6:	1db9      	adds	r1, r7, #6
 80097d8:	8809      	ldrh	r1, [r1, #0]
 80097da:	1a8a      	subs	r2, r1, r2
 80097dc:	801a      	strh	r2, [r3, #0]
      break;
 80097de:	e009      	b.n	80097f4 <u8g2_add_vector_y+0x8a>
    default:
      dy -= x;
 80097e0:	1d7b      	adds	r3, r7, #5
 80097e2:	781b      	ldrb	r3, [r3, #0]
 80097e4:	b25b      	sxtb	r3, r3
 80097e6:	b29a      	uxth	r2, r3
 80097e8:	1dbb      	adds	r3, r7, #6
 80097ea:	1db9      	adds	r1, r7, #6
 80097ec:	8809      	ldrh	r1, [r1, #0]
 80097ee:	1a8a      	subs	r2, r1, r2
 80097f0:	801a      	strh	r2, [r3, #0]
      break;      
 80097f2:	46c0      	nop			; (mov r8, r8)
  }
  return dy;
 80097f4:	1dbb      	adds	r3, r7, #6
 80097f6:	881b      	ldrh	r3, [r3, #0]
}
 80097f8:	0018      	movs	r0, r3
 80097fa:	46bd      	mov	sp, r7
 80097fc:	b002      	add	sp, #8
 80097fe:	bdb0      	pop	{r4, r5, r7, pc}

08009800 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8009800:	b5b0      	push	{r4, r5, r7, lr}
 8009802:	b082      	sub	sp, #8
 8009804:	af00      	add	r7, sp, #0
 8009806:	0005      	movs	r5, r0
 8009808:	000c      	movs	r4, r1
 800980a:	0010      	movs	r0, r2
 800980c:	0019      	movs	r1, r3
 800980e:	1dbb      	adds	r3, r7, #6
 8009810:	1c2a      	adds	r2, r5, #0
 8009812:	801a      	strh	r2, [r3, #0]
 8009814:	1d7b      	adds	r3, r7, #5
 8009816:	1c22      	adds	r2, r4, #0
 8009818:	701a      	strb	r2, [r3, #0]
 800981a:	1d3b      	adds	r3, r7, #4
 800981c:	1c02      	adds	r2, r0, #0
 800981e:	701a      	strb	r2, [r3, #0]
 8009820:	1cfb      	adds	r3, r7, #3
 8009822:	1c0a      	adds	r2, r1, #0
 8009824:	701a      	strb	r2, [r3, #0]
  switch(dir)
 8009826:	1cfb      	adds	r3, r7, #3
 8009828:	781b      	ldrb	r3, [r3, #0]
 800982a:	2b02      	cmp	r3, #2
 800982c:	d019      	beq.n	8009862 <u8g2_add_vector_x+0x62>
 800982e:	dc22      	bgt.n	8009876 <u8g2_add_vector_x+0x76>
 8009830:	2b00      	cmp	r3, #0
 8009832:	d002      	beq.n	800983a <u8g2_add_vector_x+0x3a>
 8009834:	2b01      	cmp	r3, #1
 8009836:	d00a      	beq.n	800984e <u8g2_add_vector_x+0x4e>
 8009838:	e01d      	b.n	8009876 <u8g2_add_vector_x+0x76>
  {
    case 0:
      dx += x;
 800983a:	1d7b      	adds	r3, r7, #5
 800983c:	781b      	ldrb	r3, [r3, #0]
 800983e:	b25b      	sxtb	r3, r3
 8009840:	b299      	uxth	r1, r3
 8009842:	1dbb      	adds	r3, r7, #6
 8009844:	1dba      	adds	r2, r7, #6
 8009846:	8812      	ldrh	r2, [r2, #0]
 8009848:	188a      	adds	r2, r1, r2
 800984a:	801a      	strh	r2, [r3, #0]
      break;
 800984c:	e01d      	b.n	800988a <u8g2_add_vector_x+0x8a>
    case 1:
      dx -= y;
 800984e:	1d3b      	adds	r3, r7, #4
 8009850:	781b      	ldrb	r3, [r3, #0]
 8009852:	b25b      	sxtb	r3, r3
 8009854:	b29a      	uxth	r2, r3
 8009856:	1dbb      	adds	r3, r7, #6
 8009858:	1db9      	adds	r1, r7, #6
 800985a:	8809      	ldrh	r1, [r1, #0]
 800985c:	1a8a      	subs	r2, r1, r2
 800985e:	801a      	strh	r2, [r3, #0]
      break;
 8009860:	e013      	b.n	800988a <u8g2_add_vector_x+0x8a>
    case 2:
      dx -= x;
 8009862:	1d7b      	adds	r3, r7, #5
 8009864:	781b      	ldrb	r3, [r3, #0]
 8009866:	b25b      	sxtb	r3, r3
 8009868:	b29a      	uxth	r2, r3
 800986a:	1dbb      	adds	r3, r7, #6
 800986c:	1db9      	adds	r1, r7, #6
 800986e:	8809      	ldrh	r1, [r1, #0]
 8009870:	1a8a      	subs	r2, r1, r2
 8009872:	801a      	strh	r2, [r3, #0]
      break;
 8009874:	e009      	b.n	800988a <u8g2_add_vector_x+0x8a>
    default:
      dx += y;
 8009876:	1d3b      	adds	r3, r7, #4
 8009878:	781b      	ldrb	r3, [r3, #0]
 800987a:	b25b      	sxtb	r3, r3
 800987c:	b299      	uxth	r1, r3
 800987e:	1dbb      	adds	r3, r7, #6
 8009880:	1dba      	adds	r2, r7, #6
 8009882:	8812      	ldrh	r2, [r2, #0]
 8009884:	188a      	adds	r2, r1, r2
 8009886:	801a      	strh	r2, [r3, #0]
      break;      
 8009888:	46c0      	nop			; (mov r8, r8)
  }
  return dx;
 800988a:	1dbb      	adds	r3, r7, #6
 800988c:	881b      	ldrh	r3, [r3, #0]
}
 800988e:	0018      	movs	r0, r3
 8009890:	46bd      	mov	sp, r7
 8009892:	b002      	add	sp, #8
 8009894:	bdb0      	pop	{r4, r5, r7, pc}

08009896 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8009896:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009898:	b089      	sub	sp, #36	; 0x24
 800989a:	af02      	add	r7, sp, #8
 800989c:	6078      	str	r0, [r7, #4]
 800989e:	0008      	movs	r0, r1
 80098a0:	0011      	movs	r1, r2
 80098a2:	1cfb      	adds	r3, r7, #3
 80098a4:	1c02      	adds	r2, r0, #0
 80098a6:	701a      	strb	r2, [r3, #0]
 80098a8:	1cbb      	adds	r3, r7, #2
 80098aa:	1c0a      	adds	r2, r1, #0
 80098ac:	701a      	strb	r2, [r3, #0]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	3360      	adds	r3, #96	; 0x60
 80098b2:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 80098b4:	2317      	movs	r3, #23
 80098b6:	18fb      	adds	r3, r7, r3
 80098b8:	1cfa      	adds	r2, r7, #3
 80098ba:	7812      	ldrb	r2, [r2, #0]
 80098bc:	701a      	strb	r2, [r3, #0]
  
  /* get the local position */
  lx = decode->x;
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	2208      	movs	r2, #8
 80098c2:	569a      	ldrsb	r2, [r3, r2]
 80098c4:	2315      	movs	r3, #21
 80098c6:	18fb      	adds	r3, r7, r3
 80098c8:	701a      	strb	r2, [r3, #0]
  ly = decode->y;
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	2209      	movs	r2, #9
 80098ce:	569a      	ldrsb	r2, [r3, r2]
 80098d0:	2314      	movs	r3, #20
 80098d2:	18fb      	adds	r3, r7, r3
 80098d4:	701a      	strb	r2, [r3, #0]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	220a      	movs	r2, #10
 80098da:	569a      	ldrsb	r2, [r3, r2]
 80098dc:	200f      	movs	r0, #15
 80098de:	183b      	adds	r3, r7, r0
 80098e0:	701a      	strb	r2, [r3, #0]
    rem -= lx;
 80098e2:	183b      	adds	r3, r7, r0
 80098e4:	1839      	adds	r1, r7, r0
 80098e6:	2215      	movs	r2, #21
 80098e8:	18ba      	adds	r2, r7, r2
 80098ea:	7809      	ldrb	r1, [r1, #0]
 80098ec:	7812      	ldrb	r2, [r2, #0]
 80098ee:	1a8a      	subs	r2, r1, r2
 80098f0:	701a      	strb	r2, [r3, #0]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 80098f2:	2116      	movs	r1, #22
 80098f4:	187b      	adds	r3, r7, r1
 80098f6:	183a      	adds	r2, r7, r0
 80098f8:	7812      	ldrb	r2, [r2, #0]
 80098fa:	701a      	strb	r2, [r3, #0]
    if ( cnt < rem )
 80098fc:	2417      	movs	r4, #23
 80098fe:	193a      	adds	r2, r7, r4
 8009900:	183b      	adds	r3, r7, r0
 8009902:	7812      	ldrb	r2, [r2, #0]
 8009904:	781b      	ldrb	r3, [r3, #0]
 8009906:	429a      	cmp	r2, r3
 8009908:	d203      	bcs.n	8009912 <u8g2_font_decode_len+0x7c>
      current = cnt;
 800990a:	187b      	adds	r3, r7, r1
 800990c:	193a      	adds	r2, r7, r4
 800990e:	7812      	ldrb	r2, [r2, #0]
 8009910:	701a      	strb	r2, [r3, #0]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8009912:	260c      	movs	r6, #12
 8009914:	19bb      	adds	r3, r7, r6
 8009916:	693a      	ldr	r2, [r7, #16]
 8009918:	8892      	ldrh	r2, [r2, #4]
 800991a:	801a      	strh	r2, [r3, #0]
    y = decode->target_y;
 800991c:	230a      	movs	r3, #10
 800991e:	18fb      	adds	r3, r7, r3
 8009920:	693a      	ldr	r2, [r7, #16]
 8009922:	88d2      	ldrh	r2, [r2, #6]
 8009924:	801a      	strh	r2, [r3, #0]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8009926:	2215      	movs	r2, #21
 8009928:	18bb      	adds	r3, r7, r2
 800992a:	2100      	movs	r1, #0
 800992c:	5659      	ldrsb	r1, [r3, r1]
 800992e:	2014      	movs	r0, #20
 8009930:	183b      	adds	r3, r7, r0
 8009932:	2200      	movs	r2, #0
 8009934:	569a      	ldrsb	r2, [r3, r2]
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	7c1d      	ldrb	r5, [r3, #16]
 800993a:	19bc      	adds	r4, r7, r6
 800993c:	19bb      	adds	r3, r7, r6
 800993e:	8818      	ldrh	r0, [r3, #0]
 8009940:	002b      	movs	r3, r5
 8009942:	f7ff ff5d 	bl	8009800 <u8g2_add_vector_x>
 8009946:	0003      	movs	r3, r0
 8009948:	8023      	strh	r3, [r4, #0]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 800994a:	2215      	movs	r2, #21
 800994c:	18bb      	adds	r3, r7, r2
 800994e:	2100      	movs	r1, #0
 8009950:	5659      	ldrsb	r1, [r3, r1]
 8009952:	2014      	movs	r0, #20
 8009954:	183b      	adds	r3, r7, r0
 8009956:	2200      	movs	r2, #0
 8009958:	569a      	ldrsb	r2, [r3, r2]
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	7c1d      	ldrb	r5, [r3, #16]
 800995e:	230a      	movs	r3, #10
 8009960:	18fc      	adds	r4, r7, r3
 8009962:	18fb      	adds	r3, r7, r3
 8009964:	8818      	ldrh	r0, [r3, #0]
 8009966:	002b      	movs	r3, r5
 8009968:	f7ff feff 	bl	800976a <u8g2_add_vector_y>
 800996c:	0003      	movs	r3, r0
 800996e:	8023      	strh	r3, [r4, #0]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8009970:	1cbb      	adds	r3, r7, #2
 8009972:	781b      	ldrb	r3, [r3, #0]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d016      	beq.n	80099a6 <u8g2_font_decode_len+0x110>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8009978:	693b      	ldr	r3, [r7, #16]
 800997a:	7b99      	ldrb	r1, [r3, #14]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2292      	movs	r2, #146	; 0x92
 8009980:	5499      	strb	r1, [r3, r2]
      u8g2_DrawHVLine(u8g2, 
 8009982:	2116      	movs	r1, #22
 8009984:	187b      	adds	r3, r7, r1
 8009986:	781b      	ldrb	r3, [r3, #0]
 8009988:	b29d      	uxth	r5, r3
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	7c1b      	ldrb	r3, [r3, #16]
 800998e:	220a      	movs	r2, #10
 8009990:	18ba      	adds	r2, r7, r2
 8009992:	8814      	ldrh	r4, [r2, #0]
 8009994:	19ba      	adds	r2, r7, r6
 8009996:	8811      	ldrh	r1, [r2, #0]
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	9300      	str	r3, [sp, #0]
 800999c:	002b      	movs	r3, r5
 800999e:	0022      	movs	r2, r4
 80099a0:	f000 fd2d 	bl	800a3fe <u8g2_DrawHVLine>
 80099a4:	e01a      	b.n	80099dc <u8g2_font_decode_len+0x146>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	7b5b      	ldrb	r3, [r3, #13]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d116      	bne.n	80099dc <u8g2_font_decode_len+0x146>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	7bd9      	ldrb	r1, [r3, #15]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2292      	movs	r2, #146	; 0x92
 80099b6:	5499      	strb	r1, [r3, r2]
      u8g2_DrawHVLine(u8g2, 
 80099b8:	2316      	movs	r3, #22
 80099ba:	18fb      	adds	r3, r7, r3
 80099bc:	781b      	ldrb	r3, [r3, #0]
 80099be:	b29d      	uxth	r5, r3
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	7c1b      	ldrb	r3, [r3, #16]
 80099c4:	220a      	movs	r2, #10
 80099c6:	18ba      	adds	r2, r7, r2
 80099c8:	8814      	ldrh	r4, [r2, #0]
 80099ca:	220c      	movs	r2, #12
 80099cc:	18ba      	adds	r2, r7, r2
 80099ce:	8811      	ldrh	r1, [r2, #0]
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	9300      	str	r3, [sp, #0]
 80099d4:	002b      	movs	r3, r5
 80099d6:	0022      	movs	r2, r4
 80099d8:	f000 fd11 	bl	800a3fe <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 80099dc:	2117      	movs	r1, #23
 80099de:	187a      	adds	r2, r7, r1
 80099e0:	200f      	movs	r0, #15
 80099e2:	183b      	adds	r3, r7, r0
 80099e4:	7812      	ldrb	r2, [r2, #0]
 80099e6:	781b      	ldrb	r3, [r3, #0]
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d311      	bcc.n	8009a10 <u8g2_font_decode_len+0x17a>
      break;
    cnt -= rem;
 80099ec:	187b      	adds	r3, r7, r1
 80099ee:	1879      	adds	r1, r7, r1
 80099f0:	183a      	adds	r2, r7, r0
 80099f2:	7809      	ldrb	r1, [r1, #0]
 80099f4:	7812      	ldrb	r2, [r2, #0]
 80099f6:	1a8a      	subs	r2, r1, r2
 80099f8:	701a      	strb	r2, [r3, #0]
    lx = 0;
 80099fa:	2315      	movs	r3, #21
 80099fc:	18fb      	adds	r3, r7, r3
 80099fe:	2200      	movs	r2, #0
 8009a00:	701a      	strb	r2, [r3, #0]
    ly++;
 8009a02:	2114      	movs	r1, #20
 8009a04:	187b      	adds	r3, r7, r1
 8009a06:	781a      	ldrb	r2, [r3, #0]
 8009a08:	187b      	adds	r3, r7, r1
 8009a0a:	3201      	adds	r2, #1
 8009a0c:	701a      	strb	r2, [r3, #0]
    rem = decode->glyph_width;
 8009a0e:	e762      	b.n	80098d6 <u8g2_font_decode_len+0x40>
      break;
 8009a10:	46c0      	nop			; (mov r8, r8)
  }
  lx += cnt;
 8009a12:	2015      	movs	r0, #21
 8009a14:	183b      	adds	r3, r7, r0
 8009a16:	1839      	adds	r1, r7, r0
 8009a18:	2217      	movs	r2, #23
 8009a1a:	18ba      	adds	r2, r7, r2
 8009a1c:	7809      	ldrb	r1, [r1, #0]
 8009a1e:	7812      	ldrb	r2, [r2, #0]
 8009a20:	188a      	adds	r2, r1, r2
 8009a22:	701a      	strb	r2, [r3, #0]
  
  decode->x = lx;
 8009a24:	183b      	adds	r3, r7, r0
 8009a26:	2200      	movs	r2, #0
 8009a28:	569a      	ldrsb	r2, [r3, r2]
 8009a2a:	693b      	ldr	r3, [r7, #16]
 8009a2c:	721a      	strb	r2, [r3, #8]
  decode->y = ly;
 8009a2e:	2314      	movs	r3, #20
 8009a30:	18fb      	adds	r3, r7, r3
 8009a32:	2200      	movs	r2, #0
 8009a34:	569a      	ldrsb	r2, [r3, r2]
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	725a      	strb	r2, [r3, #9]
  
}
 8009a3a:	46c0      	nop			; (mov r8, r8)
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	b007      	add	sp, #28
 8009a40:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009a42 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8009a42:	b580      	push	{r7, lr}
 8009a44:	b084      	sub	sp, #16
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	6078      	str	r0, [r7, #4]
 8009a4a:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	3360      	adds	r3, #96	; 0x60
 8009a50:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	683a      	ldr	r2, [r7, #0]
 8009a56:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2278      	movs	r2, #120	; 0x78
 8009a62:	5c9a      	ldrb	r2, [r3, r2]
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	0011      	movs	r1, r2
 8009a68:	0018      	movs	r0, r3
 8009a6a:	f7ff fde3 	bl	8009634 <u8g2_font_decode_get_unsigned_bits>
 8009a6e:	0003      	movs	r3, r0
 8009a70:	b25a      	sxtb	r2, r3
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2279      	movs	r2, #121	; 0x79
 8009a7a:	5c9a      	ldrb	r2, [r3, r2]
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	0011      	movs	r1, r2
 8009a80:	0018      	movs	r0, r3
 8009a82:	f7ff fdd7 	bl	8009634 <u8g2_font_decode_get_unsigned_bits>
 8009a86:	0003      	movs	r3, r0
 8009a88:	b25a      	sxtb	r2, r3
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2292      	movs	r2, #146	; 0x92
 8009a92:	5c9a      	ldrb	r2, [r3, r2]
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	7b9b      	ldrb	r3, [r3, #14]
 8009a9c:	425a      	negs	r2, r3
 8009a9e:	4153      	adcs	r3, r2
 8009aa0:	b2db      	uxtb	r3, r3
 8009aa2:	001a      	movs	r2, r3
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	73da      	strb	r2, [r3, #15]
}
 8009aa8:	46c0      	nop			; (mov r8, r8)
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	b004      	add	sp, #16
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8009ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ab2:	b08b      	sub	sp, #44	; 0x2c
 8009ab4:	af02      	add	r7, sp, #8
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	3360      	adds	r3, #96	; 0x60
 8009abe:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 8009ac0:	683a      	ldr	r2, [r7, #0]
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	0011      	movs	r1, r2
 8009ac6:	0018      	movs	r0, r3
 8009ac8:	f7ff ffbb 	bl	8009a42 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8009acc:	2513      	movs	r5, #19
 8009ace:	197b      	adds	r3, r7, r5
 8009ad0:	687a      	ldr	r2, [r7, #4]
 8009ad2:	216b      	movs	r1, #107	; 0x6b
 8009ad4:	5c52      	ldrb	r2, [r2, r1]
 8009ad6:	701a      	strb	r2, [r3, #0]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	227a      	movs	r2, #122	; 0x7a
 8009adc:	5c9a      	ldrb	r2, [r3, r2]
 8009ade:	2612      	movs	r6, #18
 8009ae0:	19bc      	adds	r4, r7, r6
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	0011      	movs	r1, r2
 8009ae6:	0018      	movs	r0, r3
 8009ae8:	f7ff fe0c 	bl	8009704 <u8g2_font_decode_get_signed_bits>
 8009aec:	0003      	movs	r3, r0
 8009aee:	7023      	strb	r3, [r4, #0]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	227b      	movs	r2, #123	; 0x7b
 8009af4:	5c9a      	ldrb	r2, [r3, r2]
 8009af6:	2311      	movs	r3, #17
 8009af8:	18fc      	adds	r4, r7, r3
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	0011      	movs	r1, r2
 8009afe:	0018      	movs	r0, r3
 8009b00:	f7ff fe00 	bl	8009704 <u8g2_font_decode_get_signed_bits>
 8009b04:	0003      	movs	r3, r0
 8009b06:	7023      	strb	r3, [r4, #0]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	227c      	movs	r2, #124	; 0x7c
 8009b0c:	5c9a      	ldrb	r2, [r3, r2]
 8009b0e:	2110      	movs	r1, #16
 8009b10:	187c      	adds	r4, r7, r1
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	0011      	movs	r1, r2
 8009b16:	0018      	movs	r0, r3
 8009b18:	f7ff fdf4 	bl	8009704 <u8g2_font_decode_get_signed_bits>
 8009b1c:	0003      	movs	r3, r0
 8009b1e:	7023      	strb	r3, [r4, #0]
  
  if ( decode->glyph_width > 0 )
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	7a9b      	ldrb	r3, [r3, #10]
 8009b24:	b25b      	sxtb	r3, r3
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	dc00      	bgt.n	8009b2c <u8g2_font_decode_glyph+0x7c>
 8009b2a:	e134      	b.n	8009d96 <u8g2_font_decode_glyph+0x2e6>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	8898      	ldrh	r0, [r3, #4]
 8009b30:	197b      	adds	r3, r7, r5
 8009b32:	781a      	ldrb	r2, [r3, #0]
 8009b34:	2311      	movs	r3, #17
 8009b36:	18fb      	adds	r3, r7, r3
 8009b38:	781b      	ldrb	r3, [r3, #0]
 8009b3a:	18d3      	adds	r3, r2, r3
 8009b3c:	b2db      	uxtb	r3, r3
 8009b3e:	425b      	negs	r3, r3
 8009b40:	b2db      	uxtb	r3, r3
 8009b42:	b25a      	sxtb	r2, r3
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	7c1c      	ldrb	r4, [r3, #16]
 8009b48:	19bb      	adds	r3, r7, r6
 8009b4a:	2100      	movs	r1, #0
 8009b4c:	5659      	ldrsb	r1, [r3, r1]
 8009b4e:	0023      	movs	r3, r4
 8009b50:	f7ff fe56 	bl	8009800 <u8g2_add_vector_x>
 8009b54:	0003      	movs	r3, r0
 8009b56:	001a      	movs	r2, r3
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	88d8      	ldrh	r0, [r3, #6]
 8009b60:	197b      	adds	r3, r7, r5
 8009b62:	781a      	ldrb	r2, [r3, #0]
 8009b64:	2311      	movs	r3, #17
 8009b66:	18fb      	adds	r3, r7, r3
 8009b68:	781b      	ldrb	r3, [r3, #0]
 8009b6a:	18d3      	adds	r3, r2, r3
 8009b6c:	b2db      	uxtb	r3, r3
 8009b6e:	425b      	negs	r3, r3
 8009b70:	b2db      	uxtb	r3, r3
 8009b72:	b25a      	sxtb	r2, r3
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	7c1c      	ldrb	r4, [r3, #16]
 8009b78:	19bb      	adds	r3, r7, r6
 8009b7a:	2100      	movs	r1, #0
 8009b7c:	5659      	ldrsb	r1, [r3, r1]
 8009b7e:	0023      	movs	r3, r4
 8009b80:	f7ff fdf3 	bl	800976a <u8g2_add_vector_y>
 8009b84:	0003      	movs	r3, r0
 8009b86:	001a      	movs	r2, r3
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8009b8c:	211e      	movs	r1, #30
 8009b8e:	187b      	adds	r3, r7, r1
 8009b90:	697a      	ldr	r2, [r7, #20]
 8009b92:	8892      	ldrh	r2, [r2, #4]
 8009b94:	801a      	strh	r2, [r3, #0]
      y0 = decode->target_y;
 8009b96:	201a      	movs	r0, #26
 8009b98:	183b      	adds	r3, r7, r0
 8009b9a:	697a      	ldr	r2, [r7, #20]
 8009b9c:	88d2      	ldrh	r2, [r2, #6]
 8009b9e:	801a      	strh	r2, [r3, #0]
      x1 = x0;
 8009ba0:	231c      	movs	r3, #28
 8009ba2:	18fb      	adds	r3, r7, r3
 8009ba4:	187a      	adds	r2, r7, r1
 8009ba6:	8812      	ldrh	r2, [r2, #0]
 8009ba8:	801a      	strh	r2, [r3, #0]
      y1 = y0;
 8009baa:	2318      	movs	r3, #24
 8009bac:	18fb      	adds	r3, r7, r3
 8009bae:	183a      	adds	r2, r7, r0
 8009bb0:	8812      	ldrh	r2, [r2, #0]
 8009bb2:	801a      	strh	r2, [r3, #0]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	7c1b      	ldrb	r3, [r3, #16]
 8009bb8:	2b03      	cmp	r3, #3
 8009bba:	d100      	bne.n	8009bbe <u8g2_font_decode_glyph+0x10e>
 8009bbc:	e06d      	b.n	8009c9a <u8g2_font_decode_glyph+0x1ea>
 8009bbe:	dd00      	ble.n	8009bc2 <u8g2_font_decode_glyph+0x112>
 8009bc0:	e08c      	b.n	8009cdc <u8g2_font_decode_glyph+0x22c>
 8009bc2:	2b02      	cmp	r3, #2
 8009bc4:	d03d      	beq.n	8009c42 <u8g2_font_decode_glyph+0x192>
 8009bc6:	dd00      	ble.n	8009bca <u8g2_font_decode_glyph+0x11a>
 8009bc8:	e088      	b.n	8009cdc <u8g2_font_decode_glyph+0x22c>
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d002      	beq.n	8009bd4 <u8g2_font_decode_glyph+0x124>
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	d016      	beq.n	8009c00 <u8g2_font_decode_glyph+0x150>
 8009bd2:	e083      	b.n	8009cdc <u8g2_font_decode_glyph+0x22c>
      {
	case 0:
	    x1 += decode->glyph_width;
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	7a9b      	ldrb	r3, [r3, #10]
 8009bd8:	b25b      	sxtb	r3, r3
 8009bda:	b299      	uxth	r1, r3
 8009bdc:	221c      	movs	r2, #28
 8009bde:	18bb      	adds	r3, r7, r2
 8009be0:	18ba      	adds	r2, r7, r2
 8009be2:	8812      	ldrh	r2, [r2, #0]
 8009be4:	188a      	adds	r2, r1, r2
 8009be6:	801a      	strh	r2, [r3, #0]
	    y1 += h;
 8009be8:	2313      	movs	r3, #19
 8009bea:	18fb      	adds	r3, r7, r3
 8009bec:	781b      	ldrb	r3, [r3, #0]
 8009bee:	b25b      	sxtb	r3, r3
 8009bf0:	b299      	uxth	r1, r3
 8009bf2:	2218      	movs	r2, #24
 8009bf4:	18bb      	adds	r3, r7, r2
 8009bf6:	18ba      	adds	r2, r7, r2
 8009bf8:	8812      	ldrh	r2, [r2, #0]
 8009bfa:	188a      	adds	r2, r1, r2
 8009bfc:	801a      	strh	r2, [r3, #0]
	    break;
 8009bfe:	e06d      	b.n	8009cdc <u8g2_font_decode_glyph+0x22c>
	case 1:
	    x0 -= h;
 8009c00:	2313      	movs	r3, #19
 8009c02:	18fb      	adds	r3, r7, r3
 8009c04:	781b      	ldrb	r3, [r3, #0]
 8009c06:	b25b      	sxtb	r3, r3
 8009c08:	b29a      	uxth	r2, r3
 8009c0a:	201e      	movs	r0, #30
 8009c0c:	183b      	adds	r3, r7, r0
 8009c0e:	1839      	adds	r1, r7, r0
 8009c10:	8809      	ldrh	r1, [r1, #0]
 8009c12:	1a8a      	subs	r2, r1, r2
 8009c14:	801a      	strh	r2, [r3, #0]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8009c16:	183b      	adds	r3, r7, r0
 8009c18:	881a      	ldrh	r2, [r3, #0]
 8009c1a:	183b      	adds	r3, r7, r0
 8009c1c:	3201      	adds	r2, #1
 8009c1e:	801a      	strh	r2, [r3, #0]
	    x1++;
 8009c20:	211c      	movs	r1, #28
 8009c22:	187b      	adds	r3, r7, r1
 8009c24:	881a      	ldrh	r2, [r3, #0]
 8009c26:	187b      	adds	r3, r7, r1
 8009c28:	3201      	adds	r2, #1
 8009c2a:	801a      	strh	r2, [r3, #0]
	    y1 += decode->glyph_width;
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	7a9b      	ldrb	r3, [r3, #10]
 8009c30:	b25b      	sxtb	r3, r3
 8009c32:	b299      	uxth	r1, r3
 8009c34:	2218      	movs	r2, #24
 8009c36:	18bb      	adds	r3, r7, r2
 8009c38:	18ba      	adds	r2, r7, r2
 8009c3a:	8812      	ldrh	r2, [r2, #0]
 8009c3c:	188a      	adds	r2, r1, r2
 8009c3e:	801a      	strh	r2, [r3, #0]
	    break;
 8009c40:	e04c      	b.n	8009cdc <u8g2_font_decode_glyph+0x22c>
	case 2:
	    x0 -= decode->glyph_width;
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	7a9b      	ldrb	r3, [r3, #10]
 8009c46:	b25b      	sxtb	r3, r3
 8009c48:	b29a      	uxth	r2, r3
 8009c4a:	201e      	movs	r0, #30
 8009c4c:	183b      	adds	r3, r7, r0
 8009c4e:	1839      	adds	r1, r7, r0
 8009c50:	8809      	ldrh	r1, [r1, #0]
 8009c52:	1a8a      	subs	r2, r1, r2
 8009c54:	801a      	strh	r2, [r3, #0]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8009c56:	183b      	adds	r3, r7, r0
 8009c58:	881a      	ldrh	r2, [r3, #0]
 8009c5a:	183b      	adds	r3, r7, r0
 8009c5c:	3201      	adds	r2, #1
 8009c5e:	801a      	strh	r2, [r3, #0]
	    x1++;
 8009c60:	211c      	movs	r1, #28
 8009c62:	187b      	adds	r3, r7, r1
 8009c64:	881a      	ldrh	r2, [r3, #0]
 8009c66:	187b      	adds	r3, r7, r1
 8009c68:	3201      	adds	r2, #1
 8009c6a:	801a      	strh	r2, [r3, #0]
	    y0 -= h;
 8009c6c:	2313      	movs	r3, #19
 8009c6e:	18fb      	adds	r3, r7, r3
 8009c70:	781b      	ldrb	r3, [r3, #0]
 8009c72:	b25b      	sxtb	r3, r3
 8009c74:	b29a      	uxth	r2, r3
 8009c76:	201a      	movs	r0, #26
 8009c78:	183b      	adds	r3, r7, r0
 8009c7a:	1839      	adds	r1, r7, r0
 8009c7c:	8809      	ldrh	r1, [r1, #0]
 8009c7e:	1a8a      	subs	r2, r1, r2
 8009c80:	801a      	strh	r2, [r3, #0]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8009c82:	183b      	adds	r3, r7, r0
 8009c84:	881a      	ldrh	r2, [r3, #0]
 8009c86:	183b      	adds	r3, r7, r0
 8009c88:	3201      	adds	r2, #1
 8009c8a:	801a      	strh	r2, [r3, #0]
	    y1++;
 8009c8c:	2118      	movs	r1, #24
 8009c8e:	187b      	adds	r3, r7, r1
 8009c90:	881a      	ldrh	r2, [r3, #0]
 8009c92:	187b      	adds	r3, r7, r1
 8009c94:	3201      	adds	r2, #1
 8009c96:	801a      	strh	r2, [r3, #0]
	    break;	  
 8009c98:	e020      	b.n	8009cdc <u8g2_font_decode_glyph+0x22c>
	case 3:
	    x1 += h;
 8009c9a:	2313      	movs	r3, #19
 8009c9c:	18fb      	adds	r3, r7, r3
 8009c9e:	781b      	ldrb	r3, [r3, #0]
 8009ca0:	b25b      	sxtb	r3, r3
 8009ca2:	b299      	uxth	r1, r3
 8009ca4:	221c      	movs	r2, #28
 8009ca6:	18bb      	adds	r3, r7, r2
 8009ca8:	18ba      	adds	r2, r7, r2
 8009caa:	8812      	ldrh	r2, [r2, #0]
 8009cac:	188a      	adds	r2, r1, r2
 8009cae:	801a      	strh	r2, [r3, #0]
	    y0 -= decode->glyph_width;
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	7a9b      	ldrb	r3, [r3, #10]
 8009cb4:	b25b      	sxtb	r3, r3
 8009cb6:	b29a      	uxth	r2, r3
 8009cb8:	201a      	movs	r0, #26
 8009cba:	183b      	adds	r3, r7, r0
 8009cbc:	1839      	adds	r1, r7, r0
 8009cbe:	8809      	ldrh	r1, [r1, #0]
 8009cc0:	1a8a      	subs	r2, r1, r2
 8009cc2:	801a      	strh	r2, [r3, #0]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8009cc4:	183b      	adds	r3, r7, r0
 8009cc6:	881a      	ldrh	r2, [r3, #0]
 8009cc8:	183b      	adds	r3, r7, r0
 8009cca:	3201      	adds	r2, #1
 8009ccc:	801a      	strh	r2, [r3, #0]
	    y1++;
 8009cce:	2118      	movs	r1, #24
 8009cd0:	187b      	adds	r3, r7, r1
 8009cd2:	881a      	ldrh	r2, [r3, #0]
 8009cd4:	187b      	adds	r3, r7, r1
 8009cd6:	3201      	adds	r2, #1
 8009cd8:	801a      	strh	r2, [r3, #0]
	    break;	  
 8009cda:	46c0      	nop			; (mov r8, r8)
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8009cdc:	231c      	movs	r3, #28
 8009cde:	18fb      	adds	r3, r7, r3
 8009ce0:	881c      	ldrh	r4, [r3, #0]
 8009ce2:	231a      	movs	r3, #26
 8009ce4:	18fb      	adds	r3, r7, r3
 8009ce6:	881a      	ldrh	r2, [r3, #0]
 8009ce8:	231e      	movs	r3, #30
 8009cea:	18fb      	adds	r3, r7, r3
 8009cec:	8819      	ldrh	r1, [r3, #0]
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	2318      	movs	r3, #24
 8009cf2:	18fb      	adds	r3, r7, r3
 8009cf4:	881b      	ldrh	r3, [r3, #0]
 8009cf6:	9300      	str	r3, [sp, #0]
 8009cf8:	0023      	movs	r3, r4
 8009cfa:	f000 fca9 	bl	800a650 <u8g2_IsIntersection>
 8009cfe:	1e03      	subs	r3, r0, #0
 8009d00:	d104      	bne.n	8009d0c <u8g2_font_decode_glyph+0x25c>
	return d;
 8009d02:	2310      	movs	r3, #16
 8009d04:	18fb      	adds	r3, r7, r3
 8009d06:	781b      	ldrb	r3, [r3, #0]
 8009d08:	b25b      	sxtb	r3, r3
 8009d0a:	e048      	b.n	8009d9e <u8g2_font_decode_glyph+0x2ee>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	2200      	movs	r2, #0
 8009d16:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2276      	movs	r2, #118	; 0x76
 8009d1c:	5c9a      	ldrb	r2, [r3, r2]
 8009d1e:	230f      	movs	r3, #15
 8009d20:	18fc      	adds	r4, r7, r3
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	0011      	movs	r1, r2
 8009d26:	0018      	movs	r0, r3
 8009d28:	f7ff fc84 	bl	8009634 <u8g2_font_decode_get_unsigned_bits>
 8009d2c:	0003      	movs	r3, r0
 8009d2e:	7023      	strb	r3, [r4, #0]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2277      	movs	r2, #119	; 0x77
 8009d34:	5c9a      	ldrb	r2, [r3, r2]
 8009d36:	230e      	movs	r3, #14
 8009d38:	18fc      	adds	r4, r7, r3
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	0011      	movs	r1, r2
 8009d3e:	0018      	movs	r0, r3
 8009d40:	f7ff fc78 	bl	8009634 <u8g2_font_decode_get_unsigned_bits>
 8009d44:	0003      	movs	r3, r0
 8009d46:	7023      	strb	r3, [r4, #0]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8009d48:	230f      	movs	r3, #15
 8009d4a:	18fb      	adds	r3, r7, r3
 8009d4c:	7819      	ldrb	r1, [r3, #0]
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2200      	movs	r2, #0
 8009d52:	0018      	movs	r0, r3
 8009d54:	f7ff fd9f 	bl	8009896 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8009d58:	230e      	movs	r3, #14
 8009d5a:	18fb      	adds	r3, r7, r3
 8009d5c:	7819      	ldrb	r1, [r3, #0]
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2201      	movs	r2, #1
 8009d62:	0018      	movs	r0, r3
 8009d64:	f7ff fd97 	bl	8009896 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	2101      	movs	r1, #1
 8009d6c:	0018      	movs	r0, r3
 8009d6e:	f7ff fc61 	bl	8009634 <u8g2_font_decode_get_unsigned_bits>
 8009d72:	1e03      	subs	r3, r0, #0
 8009d74:	d1e8      	bne.n	8009d48 <u8g2_font_decode_glyph+0x298>

      if ( decode->y >= h )
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	7a5b      	ldrb	r3, [r3, #9]
 8009d7a:	b25b      	sxtb	r3, r3
 8009d7c:	2213      	movs	r2, #19
 8009d7e:	18ba      	adds	r2, r7, r2
 8009d80:	7812      	ldrb	r2, [r2, #0]
 8009d82:	b252      	sxtb	r2, r2
 8009d84:	429a      	cmp	r2, r3
 8009d86:	dd00      	ble.n	8009d8a <u8g2_font_decode_glyph+0x2da>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8009d88:	e7c6      	b.n	8009d18 <u8g2_font_decode_glyph+0x268>
	break;
 8009d8a:	46c0      	nop			; (mov r8, r8)
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	7b99      	ldrb	r1, [r3, #14]
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2292      	movs	r2, #146	; 0x92
 8009d94:	5499      	strb	r1, [r3, r2]
  }
  return d;
 8009d96:	2310      	movs	r3, #16
 8009d98:	18fb      	adds	r3, r7, r3
 8009d9a:	781b      	ldrb	r3, [r3, #0]
 8009d9c:	b25b      	sxtb	r3, r3
}
 8009d9e:	0018      	movs	r0, r3
 8009da0:	46bd      	mov	sp, r7
 8009da2:	b009      	add	sp, #36	; 0x24
 8009da4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009da6 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8009da6:	b5b0      	push	{r4, r5, r7, lr}
 8009da8:	b086      	sub	sp, #24
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	6078      	str	r0, [r7, #4]
 8009dae:	000a      	movs	r2, r1
 8009db0:	1cbb      	adds	r3, r7, #2
 8009db2:	801a      	strh	r2, [r3, #0]
  const uint8_t *font = u8g2->font;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009db8:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	3317      	adds	r3, #23
 8009dbe:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8009dc0:	1cbb      	adds	r3, r7, #2
 8009dc2:	881b      	ldrh	r3, [r3, #0]
 8009dc4:	2bff      	cmp	r3, #255	; 0xff
 8009dc6:	d82d      	bhi.n	8009e24 <u8g2_font_get_glyph_data+0x7e>
  {
    if ( encoding >= 'a' )
 8009dc8:	1cbb      	adds	r3, r7, #2
 8009dca:	881b      	ldrh	r3, [r3, #0]
 8009dcc:	2b60      	cmp	r3, #96	; 0x60
 8009dce:	d907      	bls.n	8009de0 <u8g2_font_get_glyph_data+0x3a>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2288      	movs	r2, #136	; 0x88
 8009dd4:	5a9b      	ldrh	r3, [r3, r2]
 8009dd6:	001a      	movs	r2, r3
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	189b      	adds	r3, r3, r2
 8009ddc:	617b      	str	r3, [r7, #20]
 8009dde:	e00a      	b.n	8009df6 <u8g2_font_get_glyph_data+0x50>
    }
    else if ( encoding >= 'A' )
 8009de0:	1cbb      	adds	r3, r7, #2
 8009de2:	881b      	ldrh	r3, [r3, #0]
 8009de4:	2b40      	cmp	r3, #64	; 0x40
 8009de6:	d906      	bls.n	8009df6 <u8g2_font_get_glyph_data+0x50>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2286      	movs	r2, #134	; 0x86
 8009dec:	5a9b      	ldrh	r3, [r3, r2]
 8009dee:	001a      	movs	r2, r3
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	189b      	adds	r3, r3, r2
 8009df4:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	3301      	adds	r3, #1
 8009dfa:	781b      	ldrb	r3, [r3, #0]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d05e      	beq.n	8009ebe <u8g2_font_get_glyph_data+0x118>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	781b      	ldrb	r3, [r3, #0]
 8009e04:	b29b      	uxth	r3, r3
 8009e06:	1cba      	adds	r2, r7, #2
 8009e08:	8812      	ldrh	r2, [r2, #0]
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d102      	bne.n	8009e14 <u8g2_font_get_glyph_data+0x6e>
      {
	return font+2;	/* skip encoding and glyph size */
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	3302      	adds	r3, #2
 8009e12:	e058      	b.n	8009ec6 <u8g2_font_get_glyph_data+0x120>
      }
      font += u8x8_pgm_read( font + 1 );
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	3301      	adds	r3, #1
 8009e18:	781b      	ldrb	r3, [r3, #0]
 8009e1a:	001a      	movs	r2, r3
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	189b      	adds	r3, r3, r2
 8009e20:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8009e22:	e7e8      	b.n	8009df6 <u8g2_font_get_glyph_data+0x50>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	228a      	movs	r2, #138	; 0x8a
 8009e28:	5a9b      	ldrh	r3, [r3, r2]
 8009e2a:	001a      	movs	r2, r3
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	189b      	adds	r3, r3, r2
 8009e30:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	2100      	movs	r1, #0
 8009e3a:	0018      	movs	r0, r3
 8009e3c:	f7ff fb16 	bl	800946c <u8g2_font_get_word>
 8009e40:	0003      	movs	r3, r0
 8009e42:	001a      	movs	r2, r3
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	189b      	adds	r3, r3, r2
 8009e48:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8009e4a:	250e      	movs	r5, #14
 8009e4c:	197c      	adds	r4, r7, r5
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	2102      	movs	r1, #2
 8009e52:	0018      	movs	r0, r3
 8009e54:	f7ff fb0a 	bl	800946c <u8g2_font_get_word>
 8009e58:	0003      	movs	r3, r0
 8009e5a:	8023      	strh	r3, [r4, #0]
      unicode_lookup_table+=4;
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	3304      	adds	r3, #4
 8009e60:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8009e62:	197a      	adds	r2, r7, r5
 8009e64:	1cbb      	adds	r3, r7, #2
 8009e66:	8812      	ldrh	r2, [r2, #0]
 8009e68:	881b      	ldrh	r3, [r3, #0]
 8009e6a:	429a      	cmp	r2, r3
 8009e6c:	d3e3      	bcc.n	8009e36 <u8g2_font_get_glyph_data+0x90>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	781a      	ldrb	r2, [r3, #0]
 8009e72:	200e      	movs	r0, #14
 8009e74:	183b      	adds	r3, r7, r0
 8009e76:	801a      	strh	r2, [r3, #0]
      e <<= 8;
 8009e78:	183b      	adds	r3, r7, r0
 8009e7a:	183a      	adds	r2, r7, r0
 8009e7c:	8812      	ldrh	r2, [r2, #0]
 8009e7e:	0212      	lsls	r2, r2, #8
 8009e80:	801a      	strh	r2, [r3, #0]
      e |= u8x8_pgm_read( font + 1 );
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	3301      	adds	r3, #1
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	b299      	uxth	r1, r3
 8009e8a:	183b      	adds	r3, r7, r0
 8009e8c:	183a      	adds	r2, r7, r0
 8009e8e:	8812      	ldrh	r2, [r2, #0]
 8009e90:	430a      	orrs	r2, r1
 8009e92:	801a      	strh	r2, [r3, #0]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8009e94:	183b      	adds	r3, r7, r0
 8009e96:	881b      	ldrh	r3, [r3, #0]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d012      	beq.n	8009ec2 <u8g2_font_get_glyph_data+0x11c>
	break;
  
      if ( e == encoding )
 8009e9c:	183a      	adds	r2, r7, r0
 8009e9e:	1cbb      	adds	r3, r7, #2
 8009ea0:	8812      	ldrh	r2, [r2, #0]
 8009ea2:	881b      	ldrh	r3, [r3, #0]
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	d102      	bne.n	8009eae <u8g2_font_get_glyph_data+0x108>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	3303      	adds	r3, #3
 8009eac:	e00b      	b.n	8009ec6 <u8g2_font_get_glyph_data+0x120>
      }
      font += u8x8_pgm_read( font + 2 );
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	3302      	adds	r3, #2
 8009eb2:	781b      	ldrb	r3, [r3, #0]
 8009eb4:	001a      	movs	r2, r3
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	189b      	adds	r3, r3, r2
 8009eba:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8009ebc:	e7d7      	b.n	8009e6e <u8g2_font_get_glyph_data+0xc8>
	break;
 8009ebe:	46c0      	nop			; (mov r8, r8)
 8009ec0:	e000      	b.n	8009ec4 <u8g2_font_get_glyph_data+0x11e>
	break;
 8009ec2:	46c0      	nop			; (mov r8, r8)
    }  
  }
#endif
  
  return NULL;
 8009ec4:	2300      	movs	r3, #0
}
 8009ec6:	0018      	movs	r0, r3
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	b006      	add	sp, #24
 8009ecc:	bdb0      	pop	{r4, r5, r7, pc}

08009ece <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8009ece:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ed0:	b087      	sub	sp, #28
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	60f8      	str	r0, [r7, #12]
 8009ed6:	000c      	movs	r4, r1
 8009ed8:	0010      	movs	r0, r2
 8009eda:	0019      	movs	r1, r3
 8009edc:	250a      	movs	r5, #10
 8009ede:	197b      	adds	r3, r7, r5
 8009ee0:	1c22      	adds	r2, r4, #0
 8009ee2:	801a      	strh	r2, [r3, #0]
 8009ee4:	2408      	movs	r4, #8
 8009ee6:	193b      	adds	r3, r7, r4
 8009ee8:	1c02      	adds	r2, r0, #0
 8009eea:	801a      	strh	r2, [r3, #0]
 8009eec:	1dbb      	adds	r3, r7, #6
 8009eee:	1c0a      	adds	r2, r1, #0
 8009ef0:	801a      	strh	r2, [r3, #0]
  u8g2_uint_t dx = 0;
 8009ef2:	2616      	movs	r6, #22
 8009ef4:	19bb      	adds	r3, r7, r6
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	801a      	strh	r2, [r3, #0]
  u8g2->font_decode.target_x = x;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	197a      	adds	r2, r7, r5
 8009efe:	2164      	movs	r1, #100	; 0x64
 8009f00:	8812      	ldrh	r2, [r2, #0]
 8009f02:	525a      	strh	r2, [r3, r1]
  u8g2->font_decode.target_y = y;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	193a      	adds	r2, r7, r4
 8009f08:	2166      	movs	r1, #102	; 0x66
 8009f0a:	8812      	ldrh	r2, [r2, #0]
 8009f0c:	525a      	strh	r2, [r3, r1]
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8009f0e:	1dbb      	adds	r3, r7, #6
 8009f10:	881a      	ldrh	r2, [r3, #0]
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	0011      	movs	r1, r2
 8009f16:	0018      	movs	r0, r3
 8009f18:	f7ff ff45 	bl	8009da6 <u8g2_font_get_glyph_data>
 8009f1c:	0003      	movs	r3, r0
 8009f1e:	613b      	str	r3, [r7, #16]
  if ( glyph_data != NULL )
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d009      	beq.n	8009f3a <u8g2_font_draw_glyph+0x6c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8009f26:	693a      	ldr	r2, [r7, #16]
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	0011      	movs	r1, r2
 8009f2c:	0018      	movs	r0, r3
 8009f2e:	f7ff fdbf 	bl	8009ab0 <u8g2_font_decode_glyph>
 8009f32:	0003      	movs	r3, r0
 8009f34:	001a      	movs	r2, r3
 8009f36:	19bb      	adds	r3, r7, r6
 8009f38:	801a      	strh	r2, [r3, #0]
  }
  return dx;
 8009f3a:	2316      	movs	r3, #22
 8009f3c:	18fb      	adds	r3, r7, r3
 8009f3e:	881b      	ldrh	r3, [r3, #0]
}
 8009f40:	0018      	movs	r0, r3
 8009f42:	46bd      	mov	sp, r7
 8009f44:	b007      	add	sp, #28
 8009f46:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009f48 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8009f48:	b590      	push	{r4, r7, lr}
 8009f4a:	b085      	sub	sp, #20
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	60f8      	str	r0, [r7, #12]
 8009f50:	000c      	movs	r4, r1
 8009f52:	0010      	movs	r0, r2
 8009f54:	0019      	movs	r1, r3
 8009f56:	230a      	movs	r3, #10
 8009f58:	18fb      	adds	r3, r7, r3
 8009f5a:	1c22      	adds	r2, r4, #0
 8009f5c:	801a      	strh	r2, [r3, #0]
 8009f5e:	2308      	movs	r3, #8
 8009f60:	18fb      	adds	r3, r7, r3
 8009f62:	1c02      	adds	r2, r0, #0
 8009f64:	801a      	strh	r2, [r3, #0]
 8009f66:	1dbb      	adds	r3, r7, #6
 8009f68:	1c0a      	adds	r2, r1, #0
 8009f6a:	801a      	strh	r2, [r3, #0]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2270      	movs	r2, #112	; 0x70
 8009f70:	5c9b      	ldrb	r3, [r3, r2]
 8009f72:	2b03      	cmp	r3, #3
 8009f74:	d032      	beq.n	8009fdc <u8g2_DrawGlyph+0x94>
 8009f76:	dc3f      	bgt.n	8009ff8 <u8g2_DrawGlyph+0xb0>
 8009f78:	2b02      	cmp	r3, #2
 8009f7a:	d021      	beq.n	8009fc0 <u8g2_DrawGlyph+0x78>
 8009f7c:	dc3c      	bgt.n	8009ff8 <u8g2_DrawGlyph+0xb0>
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d002      	beq.n	8009f88 <u8g2_DrawGlyph+0x40>
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d00e      	beq.n	8009fa4 <u8g2_DrawGlyph+0x5c>
 8009f86:	e037      	b.n	8009ff8 <u8g2_DrawGlyph+0xb0>
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f8c:	68fa      	ldr	r2, [r7, #12]
 8009f8e:	0010      	movs	r0, r2
 8009f90:	4798      	blx	r3
 8009f92:	0003      	movs	r3, r0
 8009f94:	0019      	movs	r1, r3
 8009f96:	2208      	movs	r2, #8
 8009f98:	18bb      	adds	r3, r7, r2
 8009f9a:	18ba      	adds	r2, r7, r2
 8009f9c:	8812      	ldrh	r2, [r2, #0]
 8009f9e:	188a      	adds	r2, r1, r2
 8009fa0:	801a      	strh	r2, [r3, #0]
      break;
 8009fa2:	e029      	b.n	8009ff8 <u8g2_DrawGlyph+0xb0>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fa8:	68fa      	ldr	r2, [r7, #12]
 8009faa:	0010      	movs	r0, r2
 8009fac:	4798      	blx	r3
 8009fae:	0003      	movs	r3, r0
 8009fb0:	0019      	movs	r1, r3
 8009fb2:	220a      	movs	r2, #10
 8009fb4:	18bb      	adds	r3, r7, r2
 8009fb6:	18ba      	adds	r2, r7, r2
 8009fb8:	8812      	ldrh	r2, [r2, #0]
 8009fba:	1a52      	subs	r2, r2, r1
 8009fbc:	801a      	strh	r2, [r3, #0]
      break;
 8009fbe:	e01b      	b.n	8009ff8 <u8g2_DrawGlyph+0xb0>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fc4:	68fa      	ldr	r2, [r7, #12]
 8009fc6:	0010      	movs	r0, r2
 8009fc8:	4798      	blx	r3
 8009fca:	0003      	movs	r3, r0
 8009fcc:	0019      	movs	r1, r3
 8009fce:	2208      	movs	r2, #8
 8009fd0:	18bb      	adds	r3, r7, r2
 8009fd2:	18ba      	adds	r2, r7, r2
 8009fd4:	8812      	ldrh	r2, [r2, #0]
 8009fd6:	1a52      	subs	r2, r2, r1
 8009fd8:	801a      	strh	r2, [r3, #0]
      break;
 8009fda:	e00d      	b.n	8009ff8 <u8g2_DrawGlyph+0xb0>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fe0:	68fa      	ldr	r2, [r7, #12]
 8009fe2:	0010      	movs	r0, r2
 8009fe4:	4798      	blx	r3
 8009fe6:	0003      	movs	r3, r0
 8009fe8:	0019      	movs	r1, r3
 8009fea:	220a      	movs	r2, #10
 8009fec:	18bb      	adds	r3, r7, r2
 8009fee:	18ba      	adds	r2, r7, r2
 8009ff0:	8812      	ldrh	r2, [r2, #0]
 8009ff2:	188a      	adds	r2, r1, r2
 8009ff4:	801a      	strh	r2, [r3, #0]
      break;
 8009ff6:	46c0      	nop			; (mov r8, r8)
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8009ff8:	1dbb      	adds	r3, r7, #6
 8009ffa:	881c      	ldrh	r4, [r3, #0]
 8009ffc:	2308      	movs	r3, #8
 8009ffe:	18fb      	adds	r3, r7, r3
 800a000:	881a      	ldrh	r2, [r3, #0]
 800a002:	230a      	movs	r3, #10
 800a004:	18fb      	adds	r3, r7, r3
 800a006:	8819      	ldrh	r1, [r3, #0]
 800a008:	68f8      	ldr	r0, [r7, #12]
 800a00a:	0023      	movs	r3, r4
 800a00c:	f7ff ff5f 	bl	8009ece <u8g2_font_draw_glyph>
 800a010:	0003      	movs	r3, r0
}
 800a012:	0018      	movs	r0, r3
 800a014:	46bd      	mov	sp, r7
 800a016:	b005      	add	sp, #20
 800a018:	bd90      	pop	{r4, r7, pc}
	...

0800a01c <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 800a01c:	b5b0      	push	{r4, r5, r7, lr}
 800a01e:	b086      	sub	sp, #24
 800a020:	af00      	add	r7, sp, #0
 800a022:	60f8      	str	r0, [r7, #12]
 800a024:	0008      	movs	r0, r1
 800a026:	0011      	movs	r1, r2
 800a028:	607b      	str	r3, [r7, #4]
 800a02a:	230a      	movs	r3, #10
 800a02c:	18fb      	adds	r3, r7, r3
 800a02e:	1c02      	adds	r2, r0, #0
 800a030:	801a      	strh	r2, [r3, #0]
 800a032:	2308      	movs	r3, #8
 800a034:	18fb      	adds	r3, r7, r3
 800a036:	1c0a      	adds	r2, r1, #0
 800a038:	801a      	strh	r2, [r3, #0]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	0018      	movs	r0, r3
 800a03e:	f000 fec6 	bl	800adce <u8x8_utf8_init>
  sum = 0;
 800a042:	2316      	movs	r3, #22
 800a044:	18fb      	adds	r3, r7, r3
 800a046:	2200      	movs	r2, #0
 800a048:	801a      	strh	r2, [r3, #0]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	685b      	ldr	r3, [r3, #4]
 800a04e:	687a      	ldr	r2, [r7, #4]
 800a050:	7811      	ldrb	r1, [r2, #0]
 800a052:	2514      	movs	r5, #20
 800a054:	197c      	adds	r4, r7, r5
 800a056:	68fa      	ldr	r2, [r7, #12]
 800a058:	0010      	movs	r0, r2
 800a05a:	4798      	blx	r3
 800a05c:	0003      	movs	r3, r0
 800a05e:	8023      	strh	r3, [r4, #0]
    if ( e == 0x0ffff )
 800a060:	0029      	movs	r1, r5
 800a062:	187b      	adds	r3, r7, r1
 800a064:	881b      	ldrh	r3, [r3, #0]
 800a066:	4a31      	ldr	r2, [pc, #196]	; (800a12c <u8g2_draw_string+0x110>)
 800a068:	4293      	cmp	r3, r2
 800a06a:	d057      	beq.n	800a11c <u8g2_draw_string+0x100>
      break;
    str++;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	3301      	adds	r3, #1
 800a070:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 800a072:	187b      	adds	r3, r7, r1
 800a074:	881b      	ldrh	r3, [r3, #0]
 800a076:	4a2e      	ldr	r2, [pc, #184]	; (800a130 <u8g2_draw_string+0x114>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d0e6      	beq.n	800a04a <u8g2_draw_string+0x2e>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 800a07c:	2312      	movs	r3, #18
 800a07e:	18fc      	adds	r4, r7, r3
 800a080:	187b      	adds	r3, r7, r1
 800a082:	881d      	ldrh	r5, [r3, #0]
 800a084:	2308      	movs	r3, #8
 800a086:	18fb      	adds	r3, r7, r3
 800a088:	881a      	ldrh	r2, [r3, #0]
 800a08a:	230a      	movs	r3, #10
 800a08c:	18fb      	adds	r3, r7, r3
 800a08e:	8819      	ldrh	r1, [r3, #0]
 800a090:	68f8      	ldr	r0, [r7, #12]
 800a092:	002b      	movs	r3, r5
 800a094:	f7ff ff58 	bl	8009f48 <u8g2_DrawGlyph>
 800a098:	0003      	movs	r3, r0
 800a09a:	8023      	strh	r3, [r4, #0]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	2270      	movs	r2, #112	; 0x70
 800a0a0:	5c9b      	ldrb	r3, [r3, r2]
 800a0a2:	2b03      	cmp	r3, #3
 800a0a4:	d026      	beq.n	800a0f4 <u8g2_draw_string+0xd8>
 800a0a6:	dc2f      	bgt.n	800a108 <u8g2_draw_string+0xec>
 800a0a8:	2b02      	cmp	r3, #2
 800a0aa:	d019      	beq.n	800a0e0 <u8g2_draw_string+0xc4>
 800a0ac:	dc2c      	bgt.n	800a108 <u8g2_draw_string+0xec>
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d002      	beq.n	800a0b8 <u8g2_draw_string+0x9c>
 800a0b2:	2b01      	cmp	r3, #1
 800a0b4:	d00a      	beq.n	800a0cc <u8g2_draw_string+0xb0>
 800a0b6:	e027      	b.n	800a108 <u8g2_draw_string+0xec>
      {
	case 0:
	  x += delta;
 800a0b8:	220a      	movs	r2, #10
 800a0ba:	18bb      	adds	r3, r7, r2
 800a0bc:	18b9      	adds	r1, r7, r2
 800a0be:	2212      	movs	r2, #18
 800a0c0:	18ba      	adds	r2, r7, r2
 800a0c2:	8809      	ldrh	r1, [r1, #0]
 800a0c4:	8812      	ldrh	r2, [r2, #0]
 800a0c6:	188a      	adds	r2, r1, r2
 800a0c8:	801a      	strh	r2, [r3, #0]
	  break;
 800a0ca:	e01d      	b.n	800a108 <u8g2_draw_string+0xec>
	case 1:
	  y += delta;
 800a0cc:	2208      	movs	r2, #8
 800a0ce:	18bb      	adds	r3, r7, r2
 800a0d0:	18b9      	adds	r1, r7, r2
 800a0d2:	2212      	movs	r2, #18
 800a0d4:	18ba      	adds	r2, r7, r2
 800a0d6:	8809      	ldrh	r1, [r1, #0]
 800a0d8:	8812      	ldrh	r2, [r2, #0]
 800a0da:	188a      	adds	r2, r1, r2
 800a0dc:	801a      	strh	r2, [r3, #0]
	  break;
 800a0de:	e013      	b.n	800a108 <u8g2_draw_string+0xec>
	case 2:
	  x -= delta;
 800a0e0:	220a      	movs	r2, #10
 800a0e2:	18bb      	adds	r3, r7, r2
 800a0e4:	18b9      	adds	r1, r7, r2
 800a0e6:	2212      	movs	r2, #18
 800a0e8:	18ba      	adds	r2, r7, r2
 800a0ea:	8809      	ldrh	r1, [r1, #0]
 800a0ec:	8812      	ldrh	r2, [r2, #0]
 800a0ee:	1a8a      	subs	r2, r1, r2
 800a0f0:	801a      	strh	r2, [r3, #0]
	  break;
 800a0f2:	e009      	b.n	800a108 <u8g2_draw_string+0xec>
	case 3:
	  y -= delta;
 800a0f4:	2208      	movs	r2, #8
 800a0f6:	18bb      	adds	r3, r7, r2
 800a0f8:	18b9      	adds	r1, r7, r2
 800a0fa:	2212      	movs	r2, #18
 800a0fc:	18ba      	adds	r2, r7, r2
 800a0fe:	8809      	ldrh	r1, [r1, #0]
 800a100:	8812      	ldrh	r2, [r2, #0]
 800a102:	1a8a      	subs	r2, r1, r2
 800a104:	801a      	strh	r2, [r3, #0]
	  break;
 800a106:	46c0      	nop			; (mov r8, r8)

#else
      x += delta;
#endif

      sum += delta;    
 800a108:	2216      	movs	r2, #22
 800a10a:	18bb      	adds	r3, r7, r2
 800a10c:	18b9      	adds	r1, r7, r2
 800a10e:	2212      	movs	r2, #18
 800a110:	18ba      	adds	r2, r7, r2
 800a112:	8809      	ldrh	r1, [r1, #0]
 800a114:	8812      	ldrh	r2, [r2, #0]
 800a116:	188a      	adds	r2, r1, r2
 800a118:	801a      	strh	r2, [r3, #0]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 800a11a:	e796      	b.n	800a04a <u8g2_draw_string+0x2e>
      break;
 800a11c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sum;
 800a11e:	2316      	movs	r3, #22
 800a120:	18fb      	adds	r3, r7, r3
 800a122:	881b      	ldrh	r3, [r3, #0]
}
 800a124:	0018      	movs	r0, r3
 800a126:	46bd      	mov	sp, r7
 800a128:	b006      	add	sp, #24
 800a12a:	bdb0      	pop	{r4, r5, r7, pc}
 800a12c:	0000ffff 	.word	0x0000ffff
 800a130:	0000fffe 	.word	0x0000fffe

0800a134 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 800a134:	b5b0      	push	{r4, r5, r7, lr}
 800a136:	b084      	sub	sp, #16
 800a138:	af00      	add	r7, sp, #0
 800a13a:	60f8      	str	r0, [r7, #12]
 800a13c:	0008      	movs	r0, r1
 800a13e:	0011      	movs	r1, r2
 800a140:	607b      	str	r3, [r7, #4]
 800a142:	250a      	movs	r5, #10
 800a144:	197b      	adds	r3, r7, r5
 800a146:	1c02      	adds	r2, r0, #0
 800a148:	801a      	strh	r2, [r3, #0]
 800a14a:	2008      	movs	r0, #8
 800a14c:	183b      	adds	r3, r7, r0
 800a14e:	1c0a      	adds	r2, r1, #0
 800a150:	801a      	strh	r2, [r3, #0]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	4a07      	ldr	r2, [pc, #28]	; (800a174 <u8g2_DrawStr+0x40>)
 800a156:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 800a158:	687c      	ldr	r4, [r7, #4]
 800a15a:	183b      	adds	r3, r7, r0
 800a15c:	881a      	ldrh	r2, [r3, #0]
 800a15e:	197b      	adds	r3, r7, r5
 800a160:	8819      	ldrh	r1, [r3, #0]
 800a162:	68f8      	ldr	r0, [r7, #12]
 800a164:	0023      	movs	r3, r4
 800a166:	f7ff ff59 	bl	800a01c <u8g2_draw_string>
 800a16a:	0003      	movs	r3, r0
}
 800a16c:	0018      	movs	r0, r3
 800a16e:	46bd      	mov	sp, r7
 800a170:	b004      	add	sp, #16
 800a172:	bdb0      	pop	{r4, r5, r7, pc}
 800a174:	0800ade9 	.word	0x0800ade9

0800a178 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b082      	sub	sp, #8
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a184:	2b00      	cmp	r3, #0
 800a186:	d05d      	beq.n	800a244 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2281      	movs	r2, #129	; 0x81
 800a18c:	5699      	ldrsb	r1, [r3, r2]
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	228e      	movs	r2, #142	; 0x8e
 800a192:	5499      	strb	r1, [r3, r2]
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2282      	movs	r2, #130	; 0x82
 800a198:	5699      	ldrsb	r1, [r3, r2]
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	228f      	movs	r2, #143	; 0x8f
 800a19e:	5499      	strb	r1, [r3, r2]
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	228d      	movs	r2, #141	; 0x8d
 800a1a4:	5c9b      	ldrb	r3, [r3, r2]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d04d      	beq.n	800a246 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	228d      	movs	r2, #141	; 0x8d
 800a1ae:	5c9b      	ldrb	r3, [r3, r2]
 800a1b0:	2b01      	cmp	r3, #1
 800a1b2:	d11c      	bne.n	800a1ee <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	228e      	movs	r2, #142	; 0x8e
 800a1b8:	569a      	ldrsb	r2, [r3, r2]
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2183      	movs	r1, #131	; 0x83
 800a1be:	565b      	ldrsb	r3, [r3, r1]
 800a1c0:	429a      	cmp	r2, r3
 800a1c2:	da05      	bge.n	800a1d0 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2283      	movs	r2, #131	; 0x83
 800a1c8:	5699      	ldrsb	r1, [r3, r2]
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	228e      	movs	r2, #142	; 0x8e
 800a1ce:	5499      	strb	r1, [r3, r2]
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	228f      	movs	r2, #143	; 0x8f
 800a1d4:	569a      	ldrsb	r2, [r3, r2]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2184      	movs	r1, #132	; 0x84
 800a1da:	565b      	ldrsb	r3, [r3, r1]
 800a1dc:	429a      	cmp	r2, r3
 800a1de:	dd32      	ble.n	800a246 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2284      	movs	r2, #132	; 0x84
 800a1e4:	5699      	ldrsb	r1, [r3, r2]
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	228f      	movs	r2, #143	; 0x8f
 800a1ea:	5499      	strb	r1, [r3, r2]
 800a1ec:	e02b      	b.n	800a246 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	228e      	movs	r2, #142	; 0x8e
 800a1f2:	569b      	ldrsb	r3, [r3, r2]
 800a1f4:	0019      	movs	r1, r3
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	227e      	movs	r2, #126	; 0x7e
 800a1fa:	569b      	ldrsb	r3, [r3, r2]
 800a1fc:	0018      	movs	r0, r3
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2280      	movs	r2, #128	; 0x80
 800a202:	569b      	ldrsb	r3, [r3, r2]
 800a204:	18c3      	adds	r3, r0, r3
 800a206:	4299      	cmp	r1, r3
 800a208:	da0d      	bge.n	800a226 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	227e      	movs	r2, #126	; 0x7e
 800a20e:	569b      	ldrsb	r3, [r3, r2]
 800a210:	b2da      	uxtb	r2, r3
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2180      	movs	r1, #128	; 0x80
 800a216:	565b      	ldrsb	r3, [r3, r1]
 800a218:	b2db      	uxtb	r3, r3
 800a21a:	18d3      	adds	r3, r2, r3
 800a21c:	b2db      	uxtb	r3, r3
 800a21e:	b259      	sxtb	r1, r3
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	228e      	movs	r2, #142	; 0x8e
 800a224:	5499      	strb	r1, [r3, r2]
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	228f      	movs	r2, #143	; 0x8f
 800a22a:	569a      	ldrsb	r2, [r3, r2]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2180      	movs	r1, #128	; 0x80
 800a230:	565b      	ldrsb	r3, [r3, r1]
 800a232:	429a      	cmp	r2, r3
 800a234:	dd07      	ble.n	800a246 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2280      	movs	r2, #128	; 0x80
 800a23a:	5699      	ldrsb	r1, [r3, r2]
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	228f      	movs	r2, #143	; 0x8f
 800a240:	5499      	strb	r1, [r3, r2]
 800a242:	e000      	b.n	800a246 <u8g2_UpdateRefHeight+0xce>
    return;
 800a244:	46c0      	nop			; (mov r8, r8)
  }  
}
 800a246:	46bd      	mov	sp, r7
 800a248:	b002      	add	sp, #8
 800a24a:	bd80      	pop	{r7, pc}

0800a24c <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b082      	sub	sp, #8
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  return 0;
 800a254:	2300      	movs	r3, #0
}
 800a256:	0018      	movs	r0, r3
 800a258:	46bd      	mov	sp, r7
 800a25a:	b002      	add	sp, #8
 800a25c:	bd80      	pop	{r7, pc}
	...

0800a260 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b082      	sub	sp, #8
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	4a03      	ldr	r2, [pc, #12]	; (800a278 <u8g2_SetFontPosBaseline+0x18>)
 800a26c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800a26e:	46c0      	nop			; (mov r8, r8)
 800a270:	46bd      	mov	sp, r7
 800a272:	b002      	add	sp, #8
 800a274:	bd80      	pop	{r7, pc}
 800a276:	46c0      	nop			; (mov r8, r8)
 800a278:	0800a24d 	.word	0x0800a24d

0800a27c <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b082      	sub	sp, #8
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a28a:	683a      	ldr	r2, [r7, #0]
 800a28c:	429a      	cmp	r2, r3
 800a28e:	d00d      	beq.n	800a2ac <u8g2_SetFont+0x30>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	683a      	ldr	r2, [r7, #0]
 800a294:	659a      	str	r2, [r3, #88]	; 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	3374      	adds	r3, #116	; 0x74
 800a29a:	683a      	ldr	r2, [r7, #0]
 800a29c:	0011      	movs	r1, r2
 800a29e:	0018      	movs	r0, r3
 800a2a0:	f7ff f90b 	bl	80094ba <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	0018      	movs	r0, r3
 800a2a8:	f7ff ff66 	bl	800a178 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 800a2ac:	46c0      	nop			; (mov r8, r8)
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	b002      	add	sp, #8
 800a2b2:	bd80      	pop	{r7, pc}

0800a2b4 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 800a2b4:	b590      	push	{r4, r7, lr}
 800a2b6:	b087      	sub	sp, #28
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	60f8      	str	r0, [r7, #12]
 800a2bc:	60b9      	str	r1, [r7, #8]
 800a2be:	0019      	movs	r1, r3
 800a2c0:	1dbb      	adds	r3, r7, #6
 800a2c2:	801a      	strh	r2, [r3, #0]
 800a2c4:	1d3b      	adds	r3, r7, #4
 800a2c6:	1c0a      	adds	r2, r1, #0
 800a2c8:	801a      	strh	r2, [r3, #0]
  u8g2_uint_t a = *ap;
 800a2ca:	2416      	movs	r4, #22
 800a2cc:	193b      	adds	r3, r7, r4
 800a2ce:	68fa      	ldr	r2, [r7, #12]
 800a2d0:	8812      	ldrh	r2, [r2, #0]
 800a2d2:	801a      	strh	r2, [r3, #0]
  u8g2_uint_t b;
  b  = a;
 800a2d4:	2014      	movs	r0, #20
 800a2d6:	183b      	adds	r3, r7, r0
 800a2d8:	193a      	adds	r2, r7, r4
 800a2da:	8812      	ldrh	r2, [r2, #0]
 800a2dc:	801a      	strh	r2, [r3, #0]
  b += *len;
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	8819      	ldrh	r1, [r3, #0]
 800a2e2:	183b      	adds	r3, r7, r0
 800a2e4:	183a      	adds	r2, r7, r0
 800a2e6:	8812      	ldrh	r2, [r2, #0]
 800a2e8:	188a      	adds	r2, r1, r2
 800a2ea:	801a      	strh	r2, [r3, #0]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 800a2ec:	193a      	adds	r2, r7, r4
 800a2ee:	0001      	movs	r1, r0
 800a2f0:	187b      	adds	r3, r7, r1
 800a2f2:	8812      	ldrh	r2, [r2, #0]
 800a2f4:	881b      	ldrh	r3, [r3, #0]
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	d914      	bls.n	800a324 <u8g2_clip_intersection2+0x70>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 800a2fa:	193a      	adds	r2, r7, r4
 800a2fc:	1d3b      	adds	r3, r7, #4
 800a2fe:	8812      	ldrh	r2, [r2, #0]
 800a300:	881b      	ldrh	r3, [r3, #0]
 800a302:	429a      	cmp	r2, r3
 800a304:	d209      	bcs.n	800a31a <u8g2_clip_intersection2+0x66>
    {
      b = d;
 800a306:	187b      	adds	r3, r7, r1
 800a308:	1d3a      	adds	r2, r7, #4
 800a30a:	8812      	ldrh	r2, [r2, #0]
 800a30c:	801a      	strh	r2, [r3, #0]
      b--;
 800a30e:	187b      	adds	r3, r7, r1
 800a310:	881a      	ldrh	r2, [r3, #0]
 800a312:	187b      	adds	r3, r7, r1
 800a314:	3a01      	subs	r2, #1
 800a316:	801a      	strh	r2, [r3, #0]
 800a318:	e004      	b.n	800a324 <u8g2_clip_intersection2+0x70>
    }
    else
    {
      a = c;
 800a31a:	2316      	movs	r3, #22
 800a31c:	18fb      	adds	r3, r7, r3
 800a31e:	1dba      	adds	r2, r7, #6
 800a320:	8812      	ldrh	r2, [r2, #0]
 800a322:	801a      	strh	r2, [r3, #0]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 800a324:	2316      	movs	r3, #22
 800a326:	18fa      	adds	r2, r7, r3
 800a328:	1d3b      	adds	r3, r7, #4
 800a32a:	8812      	ldrh	r2, [r2, #0]
 800a32c:	881b      	ldrh	r3, [r3, #0]
 800a32e:	429a      	cmp	r2, r3
 800a330:	d301      	bcc.n	800a336 <u8g2_clip_intersection2+0x82>
    return 0;
 800a332:	2300      	movs	r3, #0
 800a334:	e030      	b.n	800a398 <u8g2_clip_intersection2+0xe4>
  if ( b <= c )
 800a336:	2314      	movs	r3, #20
 800a338:	18fa      	adds	r2, r7, r3
 800a33a:	1dbb      	adds	r3, r7, #6
 800a33c:	8812      	ldrh	r2, [r2, #0]
 800a33e:	881b      	ldrh	r3, [r3, #0]
 800a340:	429a      	cmp	r2, r3
 800a342:	d801      	bhi.n	800a348 <u8g2_clip_intersection2+0x94>
    return 0;
 800a344:	2300      	movs	r3, #0
 800a346:	e027      	b.n	800a398 <u8g2_clip_intersection2+0xe4>
  if ( a < c )		
 800a348:	2116      	movs	r1, #22
 800a34a:	187a      	adds	r2, r7, r1
 800a34c:	1dbb      	adds	r3, r7, #6
 800a34e:	8812      	ldrh	r2, [r2, #0]
 800a350:	881b      	ldrh	r3, [r3, #0]
 800a352:	429a      	cmp	r2, r3
 800a354:	d203      	bcs.n	800a35e <u8g2_clip_intersection2+0xaa>
    a = c;
 800a356:	187b      	adds	r3, r7, r1
 800a358:	1dba      	adds	r2, r7, #6
 800a35a:	8812      	ldrh	r2, [r2, #0]
 800a35c:	801a      	strh	r2, [r3, #0]
  if ( b > d )
 800a35e:	2114      	movs	r1, #20
 800a360:	187a      	adds	r2, r7, r1
 800a362:	1d3b      	adds	r3, r7, #4
 800a364:	8812      	ldrh	r2, [r2, #0]
 800a366:	881b      	ldrh	r3, [r3, #0]
 800a368:	429a      	cmp	r2, r3
 800a36a:	d903      	bls.n	800a374 <u8g2_clip_intersection2+0xc0>
    b = d;
 800a36c:	187b      	adds	r3, r7, r1
 800a36e:	1d3a      	adds	r2, r7, #4
 800a370:	8812      	ldrh	r2, [r2, #0]
 800a372:	801a      	strh	r2, [r3, #0]
  
  *ap = a;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	2416      	movs	r4, #22
 800a378:	193a      	adds	r2, r7, r4
 800a37a:	8812      	ldrh	r2, [r2, #0]
 800a37c:	801a      	strh	r2, [r3, #0]
  b -= a;
 800a37e:	2014      	movs	r0, #20
 800a380:	183b      	adds	r3, r7, r0
 800a382:	1839      	adds	r1, r7, r0
 800a384:	193a      	adds	r2, r7, r4
 800a386:	8809      	ldrh	r1, [r1, #0]
 800a388:	8812      	ldrh	r2, [r2, #0]
 800a38a:	1a8a      	subs	r2, r1, r2
 800a38c:	801a      	strh	r2, [r3, #0]
  *len = b;
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	183a      	adds	r2, r7, r0
 800a392:	8812      	ldrh	r2, [r2, #0]
 800a394:	801a      	strh	r2, [r3, #0]
  return 1;
 800a396:	2301      	movs	r3, #1
}
 800a398:	0018      	movs	r0, r3
 800a39a:	46bd      	mov	sp, r7
 800a39c:	b007      	add	sp, #28
 800a39e:	bd90      	pop	{r4, r7, pc}

0800a3a0 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800a3a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3a2:	b087      	sub	sp, #28
 800a3a4:	af02      	add	r7, sp, #8
 800a3a6:	60f8      	str	r0, [r7, #12]
 800a3a8:	000c      	movs	r4, r1
 800a3aa:	0010      	movs	r0, r2
 800a3ac:	0019      	movs	r1, r3
 800a3ae:	260a      	movs	r6, #10
 800a3b0:	19bb      	adds	r3, r7, r6
 800a3b2:	1c22      	adds	r2, r4, #0
 800a3b4:	801a      	strh	r2, [r3, #0]
 800a3b6:	2408      	movs	r4, #8
 800a3b8:	193b      	adds	r3, r7, r4
 800a3ba:	1c02      	adds	r2, r0, #0
 800a3bc:	801a      	strh	r2, [r3, #0]
 800a3be:	1dbb      	adds	r3, r7, #6
 800a3c0:	1c0a      	adds	r2, r1, #0
 800a3c2:	801a      	strh	r2, [r3, #0]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 800a3c8:	0020      	movs	r0, r4
 800a3ca:	183b      	adds	r3, r7, r0
 800a3cc:	1839      	adds	r1, r7, r0
 800a3ce:	8809      	ldrh	r1, [r1, #0]
 800a3d0:	1a8a      	subs	r2, r1, r2
 800a3d2:	801a      	strh	r2, [r3, #0]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800a3d8:	1dbb      	adds	r3, r7, #6
 800a3da:	881d      	ldrh	r5, [r3, #0]
 800a3dc:	183b      	adds	r3, r7, r0
 800a3de:	881a      	ldrh	r2, [r3, #0]
 800a3e0:	19bb      	adds	r3, r7, r6
 800a3e2:	8819      	ldrh	r1, [r3, #0]
 800a3e4:	68f8      	ldr	r0, [r7, #12]
 800a3e6:	2320      	movs	r3, #32
 800a3e8:	2608      	movs	r6, #8
 800a3ea:	199b      	adds	r3, r3, r6
 800a3ec:	19db      	adds	r3, r3, r7
 800a3ee:	781b      	ldrb	r3, [r3, #0]
 800a3f0:	9300      	str	r3, [sp, #0]
 800a3f2:	002b      	movs	r3, r5
 800a3f4:	47a0      	blx	r4
}
 800a3f6:	46c0      	nop			; (mov r8, r8)
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	b005      	add	sp, #20
 800a3fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a3fe <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800a3fe:	b5b0      	push	{r4, r5, r7, lr}
 800a400:	b086      	sub	sp, #24
 800a402:	af02      	add	r7, sp, #8
 800a404:	60f8      	str	r0, [r7, #12]
 800a406:	000c      	movs	r4, r1
 800a408:	0010      	movs	r0, r2
 800a40a:	0019      	movs	r1, r3
 800a40c:	250a      	movs	r5, #10
 800a40e:	197b      	adds	r3, r7, r5
 800a410:	1c22      	adds	r2, r4, #0
 800a412:	801a      	strh	r2, [r3, #0]
 800a414:	2308      	movs	r3, #8
 800a416:	18fb      	adds	r3, r7, r3
 800a418:	1c02      	adds	r2, r0, #0
 800a41a:	801a      	strh	r2, [r3, #0]
 800a41c:	1dbb      	adds	r3, r7, #6
 800a41e:	1c0a      	adds	r2, r1, #0
 800a420:	801a      	strh	r2, [r3, #0]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	228c      	movs	r2, #140	; 0x8c
 800a426:	5c9b      	ldrb	r3, [r3, r2]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d100      	bne.n	800a42e <u8g2_DrawHVLine+0x30>
 800a42c:	e090      	b.n	800a550 <u8g2_DrawHVLine+0x152>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 800a42e:	1dbb      	adds	r3, r7, #6
 800a430:	881b      	ldrh	r3, [r3, #0]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d100      	bne.n	800a438 <u8g2_DrawHVLine+0x3a>
 800a436:	e08b      	b.n	800a550 <u8g2_DrawHVLine+0x152>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 800a438:	1dbb      	adds	r3, r7, #6
 800a43a:	881b      	ldrh	r3, [r3, #0]
 800a43c:	2b01      	cmp	r3, #1
 800a43e:	d927      	bls.n	800a490 <u8g2_DrawHVLine+0x92>
      {
	if ( dir == 2 )
 800a440:	2320      	movs	r3, #32
 800a442:	18fb      	adds	r3, r7, r3
 800a444:	781b      	ldrb	r3, [r3, #0]
 800a446:	2b02      	cmp	r3, #2
 800a448:	d10e      	bne.n	800a468 <u8g2_DrawHVLine+0x6a>
	{
	  x -= len;
 800a44a:	197b      	adds	r3, r7, r5
 800a44c:	881a      	ldrh	r2, [r3, #0]
 800a44e:	1dbb      	adds	r3, r7, #6
 800a450:	881b      	ldrh	r3, [r3, #0]
 800a452:	1ad3      	subs	r3, r2, r3
 800a454:	b29a      	uxth	r2, r3
 800a456:	197b      	adds	r3, r7, r5
 800a458:	801a      	strh	r2, [r3, #0]
	  x++;
 800a45a:	197b      	adds	r3, r7, r5
 800a45c:	881b      	ldrh	r3, [r3, #0]
 800a45e:	3301      	adds	r3, #1
 800a460:	b29a      	uxth	r2, r3
 800a462:	197b      	adds	r3, r7, r5
 800a464:	801a      	strh	r2, [r3, #0]
 800a466:	e013      	b.n	800a490 <u8g2_DrawHVLine+0x92>
	}
	else if ( dir == 3 )
 800a468:	2320      	movs	r3, #32
 800a46a:	18fb      	adds	r3, r7, r3
 800a46c:	781b      	ldrb	r3, [r3, #0]
 800a46e:	2b03      	cmp	r3, #3
 800a470:	d10e      	bne.n	800a490 <u8g2_DrawHVLine+0x92>
	{
	  y -= len;
 800a472:	2108      	movs	r1, #8
 800a474:	187b      	adds	r3, r7, r1
 800a476:	881a      	ldrh	r2, [r3, #0]
 800a478:	1dbb      	adds	r3, r7, #6
 800a47a:	881b      	ldrh	r3, [r3, #0]
 800a47c:	1ad3      	subs	r3, r2, r3
 800a47e:	b29a      	uxth	r2, r3
 800a480:	187b      	adds	r3, r7, r1
 800a482:	801a      	strh	r2, [r3, #0]
	  y++;
 800a484:	187b      	adds	r3, r7, r1
 800a486:	881b      	ldrh	r3, [r3, #0]
 800a488:	3301      	adds	r3, #1
 800a48a:	b29a      	uxth	r2, r3
 800a48c:	187b      	adds	r3, r7, r1
 800a48e:	801a      	strh	r2, [r3, #0]
	}
      }
      dir &= 1;  
 800a490:	2020      	movs	r0, #32
 800a492:	183b      	adds	r3, r7, r0
 800a494:	183a      	adds	r2, r7, r0
 800a496:	7812      	ldrb	r2, [r2, #0]
 800a498:	2101      	movs	r1, #1
 800a49a:	400a      	ands	r2, r1
 800a49c:	701a      	strb	r2, [r3, #0]
      
      /* clip against the user window */
      if ( dir == 0 )
 800a49e:	183b      	adds	r3, r7, r0
 800a4a0:	781b      	ldrb	r3, [r3, #0]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d11c      	bne.n	800a4e0 <u8g2_DrawHVLine+0xe2>
      {
	if ( y < u8g2->user_y0 )
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	224c      	movs	r2, #76	; 0x4c
 800a4aa:	5a9a      	ldrh	r2, [r3, r2]
 800a4ac:	2108      	movs	r1, #8
 800a4ae:	187b      	adds	r3, r7, r1
 800a4b0:	881b      	ldrh	r3, [r3, #0]
 800a4b2:	429a      	cmp	r2, r3
 800a4b4:	d843      	bhi.n	800a53e <u8g2_DrawHVLine+0x140>
	  return;
	if ( y >= u8g2->user_y1 )
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	224e      	movs	r2, #78	; 0x4e
 800a4ba:	5a9a      	ldrh	r2, [r3, r2]
 800a4bc:	187b      	adds	r3, r7, r1
 800a4be:	881b      	ldrh	r3, [r3, #0]
 800a4c0:	429a      	cmp	r2, r3
 800a4c2:	d93e      	bls.n	800a542 <u8g2_DrawHVLine+0x144>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	2248      	movs	r2, #72	; 0x48
 800a4c8:	5a9a      	ldrh	r2, [r3, r2]
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	214a      	movs	r1, #74	; 0x4a
 800a4ce:	5a5b      	ldrh	r3, [r3, r1]
 800a4d0:	1db9      	adds	r1, r7, #6
 800a4d2:	200a      	movs	r0, #10
 800a4d4:	1838      	adds	r0, r7, r0
 800a4d6:	f7ff feed 	bl	800a2b4 <u8g2_clip_intersection2>
 800a4da:	1e03      	subs	r3, r0, #0
 800a4dc:	d11c      	bne.n	800a518 <u8g2_DrawHVLine+0x11a>
	  return;
 800a4de:	e037      	b.n	800a550 <u8g2_DrawHVLine+0x152>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	2248      	movs	r2, #72	; 0x48
 800a4e4:	5a9a      	ldrh	r2, [r3, r2]
 800a4e6:	210a      	movs	r1, #10
 800a4e8:	187b      	adds	r3, r7, r1
 800a4ea:	881b      	ldrh	r3, [r3, #0]
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	d82a      	bhi.n	800a546 <u8g2_DrawHVLine+0x148>
	  return;
	if ( x >= u8g2->user_x1 )
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	224a      	movs	r2, #74	; 0x4a
 800a4f4:	5a9a      	ldrh	r2, [r3, r2]
 800a4f6:	187b      	adds	r3, r7, r1
 800a4f8:	881b      	ldrh	r3, [r3, #0]
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d925      	bls.n	800a54a <u8g2_DrawHVLine+0x14c>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	224c      	movs	r2, #76	; 0x4c
 800a502:	5a9a      	ldrh	r2, [r3, r2]
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	214e      	movs	r1, #78	; 0x4e
 800a508:	5a5b      	ldrh	r3, [r3, r1]
 800a50a:	1db9      	adds	r1, r7, #6
 800a50c:	2008      	movs	r0, #8
 800a50e:	1838      	adds	r0, r7, r0
 800a510:	f7ff fed0 	bl	800a2b4 <u8g2_clip_intersection2>
 800a514:	1e03      	subs	r3, r0, #0
 800a516:	d01a      	beq.n	800a54e <u8g2_DrawHVLine+0x150>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a51c:	689c      	ldr	r4, [r3, #8]
 800a51e:	230a      	movs	r3, #10
 800a520:	18fb      	adds	r3, r7, r3
 800a522:	8819      	ldrh	r1, [r3, #0]
 800a524:	2308      	movs	r3, #8
 800a526:	18fb      	adds	r3, r7, r3
 800a528:	881a      	ldrh	r2, [r3, #0]
 800a52a:	1dbb      	adds	r3, r7, #6
 800a52c:	881d      	ldrh	r5, [r3, #0]
 800a52e:	68f8      	ldr	r0, [r7, #12]
 800a530:	2320      	movs	r3, #32
 800a532:	18fb      	adds	r3, r7, r3
 800a534:	781b      	ldrb	r3, [r3, #0]
 800a536:	9300      	str	r3, [sp, #0]
 800a538:	002b      	movs	r3, r5
 800a53a:	47a0      	blx	r4
 800a53c:	e008      	b.n	800a550 <u8g2_DrawHVLine+0x152>
	  return;
 800a53e:	46c0      	nop			; (mov r8, r8)
 800a540:	e006      	b.n	800a550 <u8g2_DrawHVLine+0x152>
	  return;
 800a542:	46c0      	nop			; (mov r8, r8)
 800a544:	e004      	b.n	800a550 <u8g2_DrawHVLine+0x152>
	  return;
 800a546:	46c0      	nop			; (mov r8, r8)
 800a548:	e002      	b.n	800a550 <u8g2_DrawHVLine+0x152>
	  return;
 800a54a:	46c0      	nop			; (mov r8, r8)
 800a54c:	e000      	b.n	800a550 <u8g2_DrawHVLine+0x152>
	  return;
 800a54e:	46c0      	nop			; (mov r8, r8)
    }
}
 800a550:	46bd      	mov	sp, r7
 800a552:	b004      	add	sp, #16
 800a554:	bdb0      	pop	{r4, r5, r7, pc}

0800a556 <u8g2_DrawPixel>:
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
}

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 800a556:	b580      	push	{r7, lr}
 800a558:	b084      	sub	sp, #16
 800a55a:	af02      	add	r7, sp, #8
 800a55c:	6078      	str	r0, [r7, #4]
 800a55e:	0008      	movs	r0, r1
 800a560:	0011      	movs	r1, r2
 800a562:	1cbb      	adds	r3, r7, #2
 800a564:	1c02      	adds	r2, r0, #0
 800a566:	801a      	strh	r2, [r3, #0]
 800a568:	003b      	movs	r3, r7
 800a56a:	1c0a      	adds	r2, r1, #0
 800a56c:	801a      	strh	r2, [r3, #0]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	224c      	movs	r2, #76	; 0x4c
 800a572:	5a9b      	ldrh	r3, [r3, r2]
 800a574:	003a      	movs	r2, r7
 800a576:	8812      	ldrh	r2, [r2, #0]
 800a578:	429a      	cmp	r2, r3
 800a57a:	d31f      	bcc.n	800a5bc <u8g2_DrawPixel+0x66>
    return;
  if ( y >= u8g2->user_y1 )
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	224e      	movs	r2, #78	; 0x4e
 800a580:	5a9b      	ldrh	r3, [r3, r2]
 800a582:	003a      	movs	r2, r7
 800a584:	8812      	ldrh	r2, [r2, #0]
 800a586:	429a      	cmp	r2, r3
 800a588:	d21a      	bcs.n	800a5c0 <u8g2_DrawPixel+0x6a>
    return;
  if ( x < u8g2->user_x0 )
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2248      	movs	r2, #72	; 0x48
 800a58e:	5a9b      	ldrh	r3, [r3, r2]
 800a590:	1cba      	adds	r2, r7, #2
 800a592:	8812      	ldrh	r2, [r2, #0]
 800a594:	429a      	cmp	r2, r3
 800a596:	d315      	bcc.n	800a5c4 <u8g2_DrawPixel+0x6e>
    return;
  if ( x >= u8g2->user_x1 )
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	224a      	movs	r2, #74	; 0x4a
 800a59c:	5a9b      	ldrh	r3, [r3, r2]
 800a59e:	1cba      	adds	r2, r7, #2
 800a5a0:	8812      	ldrh	r2, [r2, #0]
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d210      	bcs.n	800a5c8 <u8g2_DrawPixel+0x72>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 800a5a6:	003b      	movs	r3, r7
 800a5a8:	881a      	ldrh	r2, [r3, #0]
 800a5aa:	1cbb      	adds	r3, r7, #2
 800a5ac:	8819      	ldrh	r1, [r3, #0]
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	9300      	str	r3, [sp, #0]
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	f7ff ff22 	bl	800a3fe <u8g2_DrawHVLine>
 800a5ba:	e006      	b.n	800a5ca <u8g2_DrawPixel+0x74>
    return;
 800a5bc:	46c0      	nop			; (mov r8, r8)
 800a5be:	e004      	b.n	800a5ca <u8g2_DrawPixel+0x74>
    return;
 800a5c0:	46c0      	nop			; (mov r8, r8)
 800a5c2:	e002      	b.n	800a5ca <u8g2_DrawPixel+0x74>
    return;
 800a5c4:	46c0      	nop			; (mov r8, r8)
 800a5c6:	e000      	b.n	800a5ca <u8g2_DrawPixel+0x74>
    return;
 800a5c8:	46c0      	nop			; (mov r8, r8)
}
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	b002      	add	sp, #8
 800a5ce:	bd80      	pop	{r7, pc}

0800a5d0 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 800a5d0:	b5b0      	push	{r4, r5, r7, lr}
 800a5d2:	b082      	sub	sp, #8
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	0005      	movs	r5, r0
 800a5d8:	000c      	movs	r4, r1
 800a5da:	0010      	movs	r0, r2
 800a5dc:	0019      	movs	r1, r3
 800a5de:	1dbb      	adds	r3, r7, #6
 800a5e0:	1c2a      	adds	r2, r5, #0
 800a5e2:	801a      	strh	r2, [r3, #0]
 800a5e4:	1d3b      	adds	r3, r7, #4
 800a5e6:	1c22      	adds	r2, r4, #0
 800a5e8:	801a      	strh	r2, [r3, #0]
 800a5ea:	1cbb      	adds	r3, r7, #2
 800a5ec:	1c02      	adds	r2, r0, #0
 800a5ee:	801a      	strh	r2, [r3, #0]
 800a5f0:	003b      	movs	r3, r7
 800a5f2:	1c0a      	adds	r2, r1, #0
 800a5f4:	801a      	strh	r2, [r3, #0]
  if ( v0 < a1 )		// v0 <= a1
 800a5f6:	1cba      	adds	r2, r7, #2
 800a5f8:	1d3b      	adds	r3, r7, #4
 800a5fa:	8812      	ldrh	r2, [r2, #0]
 800a5fc:	881b      	ldrh	r3, [r3, #0]
 800a5fe:	429a      	cmp	r2, r3
 800a600:	d211      	bcs.n	800a626 <u8g2_is_intersection_decision_tree+0x56>
  {
    if ( v1 > a0 )	// v1 >= a0
 800a602:	003a      	movs	r2, r7
 800a604:	1dbb      	adds	r3, r7, #6
 800a606:	8812      	ldrh	r2, [r2, #0]
 800a608:	881b      	ldrh	r3, [r3, #0]
 800a60a:	429a      	cmp	r2, r3
 800a60c:	d901      	bls.n	800a612 <u8g2_is_intersection_decision_tree+0x42>
    {
      return 1;
 800a60e:	2301      	movs	r3, #1
 800a610:	e01a      	b.n	800a648 <u8g2_is_intersection_decision_tree+0x78>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 800a612:	1cba      	adds	r2, r7, #2
 800a614:	003b      	movs	r3, r7
 800a616:	8812      	ldrh	r2, [r2, #0]
 800a618:	881b      	ldrh	r3, [r3, #0]
 800a61a:	429a      	cmp	r2, r3
 800a61c:	d901      	bls.n	800a622 <u8g2_is_intersection_decision_tree+0x52>
      {
	return 1;
 800a61e:	2301      	movs	r3, #1
 800a620:	e012      	b.n	800a648 <u8g2_is_intersection_decision_tree+0x78>
      }
      else
      {
	return 0;
 800a622:	2300      	movs	r3, #0
 800a624:	e010      	b.n	800a648 <u8g2_is_intersection_decision_tree+0x78>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 800a626:	003a      	movs	r2, r7
 800a628:	1dbb      	adds	r3, r7, #6
 800a62a:	8812      	ldrh	r2, [r2, #0]
 800a62c:	881b      	ldrh	r3, [r3, #0]
 800a62e:	429a      	cmp	r2, r3
 800a630:	d909      	bls.n	800a646 <u8g2_is_intersection_decision_tree+0x76>
    {
      if ( v0 > v1 )	// v0 > v1
 800a632:	1cba      	adds	r2, r7, #2
 800a634:	003b      	movs	r3, r7
 800a636:	8812      	ldrh	r2, [r2, #0]
 800a638:	881b      	ldrh	r3, [r3, #0]
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d901      	bls.n	800a642 <u8g2_is_intersection_decision_tree+0x72>
      {
	return 1;
 800a63e:	2301      	movs	r3, #1
 800a640:	e002      	b.n	800a648 <u8g2_is_intersection_decision_tree+0x78>
      }
      else
      {
	return 0;
 800a642:	2300      	movs	r3, #0
 800a644:	e000      	b.n	800a648 <u8g2_is_intersection_decision_tree+0x78>
      }
    }
    else
    {
      return 0;
 800a646:	2300      	movs	r3, #0
    }
  }
}
 800a648:	0018      	movs	r0, r3
 800a64a:	46bd      	mov	sp, r7
 800a64c:	b002      	add	sp, #8
 800a64e:	bdb0      	pop	{r4, r5, r7, pc}

0800a650 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 800a650:	b5b0      	push	{r4, r5, r7, lr}
 800a652:	b084      	sub	sp, #16
 800a654:	af00      	add	r7, sp, #0
 800a656:	60f8      	str	r0, [r7, #12]
 800a658:	000c      	movs	r4, r1
 800a65a:	0010      	movs	r0, r2
 800a65c:	0019      	movs	r1, r3
 800a65e:	230a      	movs	r3, #10
 800a660:	18fb      	adds	r3, r7, r3
 800a662:	1c22      	adds	r2, r4, #0
 800a664:	801a      	strh	r2, [r3, #0]
 800a666:	2508      	movs	r5, #8
 800a668:	197b      	adds	r3, r7, r5
 800a66a:	1c02      	adds	r2, r0, #0
 800a66c:	801a      	strh	r2, [r3, #0]
 800a66e:	1dbb      	adds	r3, r7, #6
 800a670:	1c0a      	adds	r2, r1, #0
 800a672:	801a      	strh	r2, [r3, #0]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	224c      	movs	r2, #76	; 0x4c
 800a678:	5a98      	ldrh	r0, [r3, r2]
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	224e      	movs	r2, #78	; 0x4e
 800a67e:	5a99      	ldrh	r1, [r3, r2]
 800a680:	2320      	movs	r3, #32
 800a682:	18fb      	adds	r3, r7, r3
 800a684:	881c      	ldrh	r4, [r3, #0]
 800a686:	197b      	adds	r3, r7, r5
 800a688:	881a      	ldrh	r2, [r3, #0]
 800a68a:	0023      	movs	r3, r4
 800a68c:	f7ff ffa0 	bl	800a5d0 <u8g2_is_intersection_decision_tree>
 800a690:	1e03      	subs	r3, r0, #0
 800a692:	d101      	bne.n	800a698 <u8g2_IsIntersection+0x48>
    return 0; 
 800a694:	2300      	movs	r3, #0
 800a696:	e00e      	b.n	800a6b6 <u8g2_IsIntersection+0x66>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	2248      	movs	r2, #72	; 0x48
 800a69c:	5a98      	ldrh	r0, [r3, r2]
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	224a      	movs	r2, #74	; 0x4a
 800a6a2:	5a99      	ldrh	r1, [r3, r2]
 800a6a4:	1dbb      	adds	r3, r7, #6
 800a6a6:	881c      	ldrh	r4, [r3, #0]
 800a6a8:	230a      	movs	r3, #10
 800a6aa:	18fb      	adds	r3, r7, r3
 800a6ac:	881a      	ldrh	r2, [r3, #0]
 800a6ae:	0023      	movs	r3, r4
 800a6b0:	f7ff ff8e 	bl	800a5d0 <u8g2_is_intersection_decision_tree>
 800a6b4:	0003      	movs	r3, r0
}
 800a6b6:	0018      	movs	r0, r3
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	b004      	add	sp, #16
 800a6bc:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a6c0 <u8g2_DrawLine>:

#include "u8g2.h"


void u8g2_DrawLine(u8g2_t *u8g2, u8g2_uint_t x1, u8g2_uint_t y1, u8g2_uint_t x2, u8g2_uint_t y2)
{
 800a6c0:	b5b0      	push	{r4, r5, r7, lr}
 800a6c2:	b088      	sub	sp, #32
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	60f8      	str	r0, [r7, #12]
 800a6c8:	000c      	movs	r4, r1
 800a6ca:	0010      	movs	r0, r2
 800a6cc:	0019      	movs	r1, r3
 800a6ce:	250a      	movs	r5, #10
 800a6d0:	197b      	adds	r3, r7, r5
 800a6d2:	1c22      	adds	r2, r4, #0
 800a6d4:	801a      	strh	r2, [r3, #0]
 800a6d6:	2308      	movs	r3, #8
 800a6d8:	18fb      	adds	r3, r7, r3
 800a6da:	1c02      	adds	r2, r0, #0
 800a6dc:	801a      	strh	r2, [r3, #0]
 800a6de:	1dbb      	adds	r3, r7, #6
 800a6e0:	1c0a      	adds	r2, r1, #0
 800a6e2:	801a      	strh	r2, [r3, #0]
  u8g2_uint_t x,y;
  u8g2_uint_t dx, dy;
  u8g2_int_t err;
  u8g2_int_t ystep;

  uint8_t swapxy = 0;
 800a6e4:	2313      	movs	r3, #19
 800a6e6:	18fb      	adds	r3, r7, r3
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	701a      	strb	r2, [r3, #0]
  
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
 800a6ec:	197a      	adds	r2, r7, r5
 800a6ee:	1dbb      	adds	r3, r7, #6
 800a6f0:	8812      	ldrh	r2, [r2, #0]
 800a6f2:	881b      	ldrh	r3, [r3, #0]
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d908      	bls.n	800a70a <u8g2_DrawLine+0x4a>
 800a6f8:	231a      	movs	r3, #26
 800a6fa:	18fb      	adds	r3, r7, r3
 800a6fc:	1979      	adds	r1, r7, r5
 800a6fe:	1dba      	adds	r2, r7, #6
 800a700:	8809      	ldrh	r1, [r1, #0]
 800a702:	8812      	ldrh	r2, [r2, #0]
 800a704:	1a8a      	subs	r2, r1, r2
 800a706:	801a      	strh	r2, [r3, #0]
 800a708:	e008      	b.n	800a71c <u8g2_DrawLine+0x5c>
 800a70a:	231a      	movs	r3, #26
 800a70c:	18fb      	adds	r3, r7, r3
 800a70e:	1db9      	adds	r1, r7, #6
 800a710:	220a      	movs	r2, #10
 800a712:	18ba      	adds	r2, r7, r2
 800a714:	8809      	ldrh	r1, [r1, #0]
 800a716:	8812      	ldrh	r2, [r2, #0]
 800a718:	1a8a      	subs	r2, r1, r2
 800a71a:	801a      	strh	r2, [r3, #0]
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
 800a71c:	2108      	movs	r1, #8
 800a71e:	187a      	adds	r2, r7, r1
 800a720:	2030      	movs	r0, #48	; 0x30
 800a722:	183b      	adds	r3, r7, r0
 800a724:	8812      	ldrh	r2, [r2, #0]
 800a726:	881b      	ldrh	r3, [r3, #0]
 800a728:	429a      	cmp	r2, r3
 800a72a:	d908      	bls.n	800a73e <u8g2_DrawLine+0x7e>
 800a72c:	2318      	movs	r3, #24
 800a72e:	18fa      	adds	r2, r7, r3
 800a730:	1879      	adds	r1, r7, r1
 800a732:	183b      	adds	r3, r7, r0
 800a734:	8809      	ldrh	r1, [r1, #0]
 800a736:	881b      	ldrh	r3, [r3, #0]
 800a738:	1acb      	subs	r3, r1, r3
 800a73a:	8013      	strh	r3, [r2, #0]
 800a73c:	e009      	b.n	800a752 <u8g2_DrawLine+0x92>
 800a73e:	2318      	movs	r3, #24
 800a740:	18fa      	adds	r2, r7, r3
 800a742:	2330      	movs	r3, #48	; 0x30
 800a744:	18fb      	adds	r3, r7, r3
 800a746:	2108      	movs	r1, #8
 800a748:	1878      	adds	r0, r7, r1
 800a74a:	8819      	ldrh	r1, [r3, #0]
 800a74c:	8803      	ldrh	r3, [r0, #0]
 800a74e:	1acb      	subs	r3, r1, r3
 800a750:	8013      	strh	r3, [r2, #0]

  if ( dy > dx ) 
 800a752:	2018      	movs	r0, #24
 800a754:	183a      	adds	r2, r7, r0
 800a756:	241a      	movs	r4, #26
 800a758:	193b      	adds	r3, r7, r4
 800a75a:	8812      	ldrh	r2, [r2, #0]
 800a75c:	881b      	ldrh	r3, [r3, #0]
 800a75e:	429a      	cmp	r2, r3
 800a760:	d92b      	bls.n	800a7ba <u8g2_DrawLine+0xfa>
  {
    swapxy = 1;
 800a762:	2313      	movs	r3, #19
 800a764:	18fb      	adds	r3, r7, r3
 800a766:	2201      	movs	r2, #1
 800a768:	701a      	strb	r2, [r3, #0]
    tmp = dx; dx =dy; dy = tmp;
 800a76a:	2110      	movs	r1, #16
 800a76c:	187b      	adds	r3, r7, r1
 800a76e:	193a      	adds	r2, r7, r4
 800a770:	8812      	ldrh	r2, [r2, #0]
 800a772:	801a      	strh	r2, [r3, #0]
 800a774:	193b      	adds	r3, r7, r4
 800a776:	183a      	adds	r2, r7, r0
 800a778:	8812      	ldrh	r2, [r2, #0]
 800a77a:	801a      	strh	r2, [r3, #0]
 800a77c:	183b      	adds	r3, r7, r0
 800a77e:	187a      	adds	r2, r7, r1
 800a780:	8812      	ldrh	r2, [r2, #0]
 800a782:	801a      	strh	r2, [r3, #0]
    tmp = x1; x1 =y1; y1 = tmp;
 800a784:	187b      	adds	r3, r7, r1
 800a786:	200a      	movs	r0, #10
 800a788:	183a      	adds	r2, r7, r0
 800a78a:	8812      	ldrh	r2, [r2, #0]
 800a78c:	801a      	strh	r2, [r3, #0]
 800a78e:	183b      	adds	r3, r7, r0
 800a790:	2008      	movs	r0, #8
 800a792:	183a      	adds	r2, r7, r0
 800a794:	8812      	ldrh	r2, [r2, #0]
 800a796:	801a      	strh	r2, [r3, #0]
 800a798:	183b      	adds	r3, r7, r0
 800a79a:	187a      	adds	r2, r7, r1
 800a79c:	8812      	ldrh	r2, [r2, #0]
 800a79e:	801a      	strh	r2, [r3, #0]
    tmp = x2; x2 =y2; y2 = tmp;
 800a7a0:	187b      	adds	r3, r7, r1
 800a7a2:	1dba      	adds	r2, r7, #6
 800a7a4:	8812      	ldrh	r2, [r2, #0]
 800a7a6:	801a      	strh	r2, [r3, #0]
 800a7a8:	1dba      	adds	r2, r7, #6
 800a7aa:	2030      	movs	r0, #48	; 0x30
 800a7ac:	183b      	adds	r3, r7, r0
 800a7ae:	881b      	ldrh	r3, [r3, #0]
 800a7b0:	8013      	strh	r3, [r2, #0]
 800a7b2:	183b      	adds	r3, r7, r0
 800a7b4:	187a      	adds	r2, r7, r1
 800a7b6:	8812      	ldrh	r2, [r2, #0]
 800a7b8:	801a      	strh	r2, [r3, #0]
  }
  if ( x1 > x2 ) 
 800a7ba:	200a      	movs	r0, #10
 800a7bc:	183a      	adds	r2, r7, r0
 800a7be:	1dbb      	adds	r3, r7, #6
 800a7c0:	8812      	ldrh	r2, [r2, #0]
 800a7c2:	881b      	ldrh	r3, [r3, #0]
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d91a      	bls.n	800a7fe <u8g2_DrawLine+0x13e>
  {
    tmp = x1; x1 =x2; x2 = tmp;
 800a7c8:	2110      	movs	r1, #16
 800a7ca:	187b      	adds	r3, r7, r1
 800a7cc:	183a      	adds	r2, r7, r0
 800a7ce:	8812      	ldrh	r2, [r2, #0]
 800a7d0:	801a      	strh	r2, [r3, #0]
 800a7d2:	183b      	adds	r3, r7, r0
 800a7d4:	1dba      	adds	r2, r7, #6
 800a7d6:	8812      	ldrh	r2, [r2, #0]
 800a7d8:	801a      	strh	r2, [r3, #0]
 800a7da:	1dbb      	adds	r3, r7, #6
 800a7dc:	187a      	adds	r2, r7, r1
 800a7de:	8812      	ldrh	r2, [r2, #0]
 800a7e0:	801a      	strh	r2, [r3, #0]
    tmp = y1; y1 =y2; y2 = tmp;
 800a7e2:	187b      	adds	r3, r7, r1
 800a7e4:	2008      	movs	r0, #8
 800a7e6:	183a      	adds	r2, r7, r0
 800a7e8:	8812      	ldrh	r2, [r2, #0]
 800a7ea:	801a      	strh	r2, [r3, #0]
 800a7ec:	183a      	adds	r2, r7, r0
 800a7ee:	2030      	movs	r0, #48	; 0x30
 800a7f0:	183b      	adds	r3, r7, r0
 800a7f2:	881b      	ldrh	r3, [r3, #0]
 800a7f4:	8013      	strh	r3, [r2, #0]
 800a7f6:	183b      	adds	r3, r7, r0
 800a7f8:	187a      	adds	r2, r7, r1
 800a7fa:	8812      	ldrh	r2, [r2, #0]
 800a7fc:	801a      	strh	r2, [r3, #0]
  }
  err = dx >> 1;
 800a7fe:	231a      	movs	r3, #26
 800a800:	18fb      	adds	r3, r7, r3
 800a802:	881b      	ldrh	r3, [r3, #0]
 800a804:	085b      	lsrs	r3, r3, #1
 800a806:	b29a      	uxth	r2, r3
 800a808:	2316      	movs	r3, #22
 800a80a:	18fb      	adds	r3, r7, r3
 800a80c:	801a      	strh	r2, [r3, #0]
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
 800a80e:	2330      	movs	r3, #48	; 0x30
 800a810:	18fb      	adds	r3, r7, r3
 800a812:	2208      	movs	r2, #8
 800a814:	18b9      	adds	r1, r7, r2
 800a816:	881a      	ldrh	r2, [r3, #0]
 800a818:	880b      	ldrh	r3, [r1, #0]
 800a81a:	429a      	cmp	r2, r3
 800a81c:	d904      	bls.n	800a828 <u8g2_DrawLine+0x168>
 800a81e:	2314      	movs	r3, #20
 800a820:	18fb      	adds	r3, r7, r3
 800a822:	2201      	movs	r2, #1
 800a824:	801a      	strh	r2, [r3, #0]
 800a826:	e004      	b.n	800a832 <u8g2_DrawLine+0x172>
 800a828:	2314      	movs	r3, #20
 800a82a:	18fb      	adds	r3, r7, r3
 800a82c:	2201      	movs	r2, #1
 800a82e:	4252      	negs	r2, r2
 800a830:	801a      	strh	r2, [r3, #0]
  y = y1;
 800a832:	231c      	movs	r3, #28
 800a834:	18fb      	adds	r3, r7, r3
 800a836:	2208      	movs	r2, #8
 800a838:	18ba      	adds	r2, r7, r2
 800a83a:	8812      	ldrh	r2, [r2, #0]
 800a83c:	801a      	strh	r2, [r3, #0]

#ifndef  U8G2_16BIT
  if ( x2 == 255 )
    x2--;
#else
  if ( x2 == 0xffff )
 800a83e:	1dbb      	adds	r3, r7, #6
 800a840:	881b      	ldrh	r3, [r3, #0]
 800a842:	4a2f      	ldr	r2, [pc, #188]	; (800a900 <u8g2_DrawLine+0x240>)
 800a844:	4293      	cmp	r3, r2
 800a846:	d104      	bne.n	800a852 <u8g2_DrawLine+0x192>
    x2--;
 800a848:	1dbb      	adds	r3, r7, #6
 800a84a:	881a      	ldrh	r2, [r3, #0]
 800a84c:	1dbb      	adds	r3, r7, #6
 800a84e:	3a01      	subs	r2, #1
 800a850:	801a      	strh	r2, [r3, #0]
#endif

  for( x = x1; x <= x2; x++ )
 800a852:	231e      	movs	r3, #30
 800a854:	18fb      	adds	r3, r7, r3
 800a856:	220a      	movs	r2, #10
 800a858:	18ba      	adds	r2, r7, r2
 800a85a:	8812      	ldrh	r2, [r2, #0]
 800a85c:	801a      	strh	r2, [r3, #0]
 800a85e:	e042      	b.n	800a8e6 <u8g2_DrawLine+0x226>
  {
    if ( swapxy == 0 ) 
 800a860:	2313      	movs	r3, #19
 800a862:	18fb      	adds	r3, r7, r3
 800a864:	781b      	ldrb	r3, [r3, #0]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d10a      	bne.n	800a880 <u8g2_DrawLine+0x1c0>
      u8g2_DrawPixel(u8g2, x, y); 
 800a86a:	231c      	movs	r3, #28
 800a86c:	18fb      	adds	r3, r7, r3
 800a86e:	881a      	ldrh	r2, [r3, #0]
 800a870:	231e      	movs	r3, #30
 800a872:	18fb      	adds	r3, r7, r3
 800a874:	8819      	ldrh	r1, [r3, #0]
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	0018      	movs	r0, r3
 800a87a:	f7ff fe6c 	bl	800a556 <u8g2_DrawPixel>
 800a87e:	e009      	b.n	800a894 <u8g2_DrawLine+0x1d4>
    else 
      u8g2_DrawPixel(u8g2, y, x); 
 800a880:	231e      	movs	r3, #30
 800a882:	18fb      	adds	r3, r7, r3
 800a884:	881a      	ldrh	r2, [r3, #0]
 800a886:	231c      	movs	r3, #28
 800a888:	18fb      	adds	r3, r7, r3
 800a88a:	8819      	ldrh	r1, [r3, #0]
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	0018      	movs	r0, r3
 800a890:	f7ff fe61 	bl	800a556 <u8g2_DrawPixel>
    err -= (uint8_t)dy;
 800a894:	2016      	movs	r0, #22
 800a896:	183b      	adds	r3, r7, r0
 800a898:	881a      	ldrh	r2, [r3, #0]
 800a89a:	2318      	movs	r3, #24
 800a89c:	18fb      	adds	r3, r7, r3
 800a89e:	881b      	ldrh	r3, [r3, #0]
 800a8a0:	b2db      	uxtb	r3, r3
 800a8a2:	b29b      	uxth	r3, r3
 800a8a4:	1ad3      	subs	r3, r2, r3
 800a8a6:	b29a      	uxth	r2, r3
 800a8a8:	183b      	adds	r3, r7, r0
 800a8aa:	801a      	strh	r2, [r3, #0]
    if ( err < 0 ) 
 800a8ac:	183b      	adds	r3, r7, r0
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	5e9b      	ldrsh	r3, [r3, r2]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	da11      	bge.n	800a8da <u8g2_DrawLine+0x21a>
    {
      y += (u8g2_uint_t)ystep;
 800a8b6:	2314      	movs	r3, #20
 800a8b8:	18fb      	adds	r3, r7, r3
 800a8ba:	8819      	ldrh	r1, [r3, #0]
 800a8bc:	221c      	movs	r2, #28
 800a8be:	18bb      	adds	r3, r7, r2
 800a8c0:	18ba      	adds	r2, r7, r2
 800a8c2:	8812      	ldrh	r2, [r2, #0]
 800a8c4:	188a      	adds	r2, r1, r2
 800a8c6:	801a      	strh	r2, [r3, #0]
      err += (u8g2_uint_t)dx;
 800a8c8:	183b      	adds	r3, r7, r0
 800a8ca:	881a      	ldrh	r2, [r3, #0]
 800a8cc:	231a      	movs	r3, #26
 800a8ce:	18fb      	adds	r3, r7, r3
 800a8d0:	881b      	ldrh	r3, [r3, #0]
 800a8d2:	18d3      	adds	r3, r2, r3
 800a8d4:	b29a      	uxth	r2, r3
 800a8d6:	183b      	adds	r3, r7, r0
 800a8d8:	801a      	strh	r2, [r3, #0]
  for( x = x1; x <= x2; x++ )
 800a8da:	211e      	movs	r1, #30
 800a8dc:	187b      	adds	r3, r7, r1
 800a8de:	881a      	ldrh	r2, [r3, #0]
 800a8e0:	187b      	adds	r3, r7, r1
 800a8e2:	3201      	adds	r2, #1
 800a8e4:	801a      	strh	r2, [r3, #0]
 800a8e6:	231e      	movs	r3, #30
 800a8e8:	18fa      	adds	r2, r7, r3
 800a8ea:	1dbb      	adds	r3, r7, #6
 800a8ec:	8812      	ldrh	r2, [r2, #0]
 800a8ee:	881b      	ldrh	r3, [r3, #0]
 800a8f0:	429a      	cmp	r2, r3
 800a8f2:	d9b5      	bls.n	800a860 <u8g2_DrawLine+0x1a0>
    }
  }
}
 800a8f4:	46c0      	nop			; (mov r8, r8)
 800a8f6:	46c0      	nop			; (mov r8, r8)
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	b008      	add	sp, #32
 800a8fc:	bdb0      	pop	{r4, r5, r7, pc}
 800a8fe:	46c0      	nop			; (mov r8, r8)
 800a900:	0000ffff 	.word	0x0000ffff

0800a904 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800a904:	b590      	push	{r4, r7, lr}
 800a906:	b089      	sub	sp, #36	; 0x24
 800a908:	af00      	add	r7, sp, #0
 800a90a:	60f8      	str	r0, [r7, #12]
 800a90c:	000c      	movs	r4, r1
 800a90e:	0010      	movs	r0, r2
 800a910:	0019      	movs	r1, r3
 800a912:	230a      	movs	r3, #10
 800a914:	18fb      	adds	r3, r7, r3
 800a916:	1c22      	adds	r2, r4, #0
 800a918:	801a      	strh	r2, [r3, #0]
 800a91a:	2408      	movs	r4, #8
 800a91c:	193b      	adds	r3, r7, r4
 800a91e:	1c02      	adds	r2, r0, #0
 800a920:	801a      	strh	r2, [r3, #0]
 800a922:	1dbb      	adds	r3, r7, #6
 800a924:	1c0a      	adds	r2, r1, #0
 800a926:	801a      	strh	r2, [r3, #0]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 800a928:	201b      	movs	r0, #27
 800a92a:	183b      	adds	r3, r7, r0
 800a92c:	193a      	adds	r2, r7, r4
 800a92e:	8812      	ldrh	r2, [r2, #0]
 800a930:	701a      	strb	r2, [r3, #0]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 800a932:	183b      	adds	r3, r7, r0
 800a934:	183a      	adds	r2, r7, r0
 800a936:	7812      	ldrb	r2, [r2, #0]
 800a938:	2107      	movs	r1, #7
 800a93a:	400a      	ands	r2, r1
 800a93c:	701a      	strb	r2, [r3, #0]
  mask = 1;
 800a93e:	2118      	movs	r1, #24
 800a940:	187b      	adds	r3, r7, r1
 800a942:	2201      	movs	r2, #1
 800a944:	701a      	strb	r2, [r3, #0]
  mask <<= bit_pos;
 800a946:	187b      	adds	r3, r7, r1
 800a948:	781a      	ldrb	r2, [r3, #0]
 800a94a:	183b      	adds	r3, r7, r0
 800a94c:	781b      	ldrb	r3, [r3, #0]
 800a94e:	409a      	lsls	r2, r3
 800a950:	187b      	adds	r3, r7, r1
 800a952:	701a      	strb	r2, [r3, #0]

  or_mask = 0;
 800a954:	201a      	movs	r0, #26
 800a956:	183b      	adds	r3, r7, r0
 800a958:	2200      	movs	r2, #0
 800a95a:	701a      	strb	r2, [r3, #0]
  xor_mask = 0;
 800a95c:	2319      	movs	r3, #25
 800a95e:	18fb      	adds	r3, r7, r3
 800a960:	2200      	movs	r2, #0
 800a962:	701a      	strb	r2, [r3, #0]
  if ( u8g2->draw_color <= 1 )
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	2292      	movs	r2, #146	; 0x92
 800a968:	5c9b      	ldrb	r3, [r3, r2]
 800a96a:	2b01      	cmp	r3, #1
 800a96c:	d803      	bhi.n	800a976 <u8g2_ll_hvline_vertical_top_lsb+0x72>
    or_mask  = mask;
 800a96e:	183b      	adds	r3, r7, r0
 800a970:	187a      	adds	r2, r7, r1
 800a972:	7812      	ldrb	r2, [r2, #0]
 800a974:	701a      	strb	r2, [r3, #0]
  if ( u8g2->draw_color != 1 )
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	2292      	movs	r2, #146	; 0x92
 800a97a:	5c9b      	ldrb	r3, [r3, r2]
 800a97c:	2b01      	cmp	r3, #1
 800a97e:	d005      	beq.n	800a98c <u8g2_ll_hvline_vertical_top_lsb+0x88>
    xor_mask = mask;
 800a980:	2319      	movs	r3, #25
 800a982:	18fb      	adds	r3, r7, r3
 800a984:	2218      	movs	r2, #24
 800a986:	18ba      	adds	r2, r7, r2
 800a988:	7812      	ldrb	r2, [r2, #0]
 800a98a:	701a      	strb	r2, [r3, #0]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 800a98c:	2016      	movs	r0, #22
 800a98e:	183b      	adds	r3, r7, r0
 800a990:	2208      	movs	r2, #8
 800a992:	18ba      	adds	r2, r7, r2
 800a994:	8812      	ldrh	r2, [r2, #0]
 800a996:	801a      	strh	r2, [r3, #0]
  offset &= ~7;
 800a998:	183b      	adds	r3, r7, r0
 800a99a:	183a      	adds	r2, r7, r0
 800a99c:	8812      	ldrh	r2, [r2, #0]
 800a99e:	2107      	movs	r1, #7
 800a9a0:	438a      	bics	r2, r1
 800a9a2:	801a      	strh	r2, [r3, #0]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	7c1b      	ldrb	r3, [r3, #16]
 800a9aa:	b29a      	uxth	r2, r3
 800a9ac:	183b      	adds	r3, r7, r0
 800a9ae:	1839      	adds	r1, r7, r0
 800a9b0:	8809      	ldrh	r1, [r1, #0]
 800a9b2:	434a      	muls	r2, r1
 800a9b4:	801a      	strh	r2, [r3, #0]
  ptr = u8g2->tile_buf_ptr;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9ba:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 800a9bc:	183b      	adds	r3, r7, r0
 800a9be:	881b      	ldrh	r3, [r3, #0]
 800a9c0:	69fa      	ldr	r2, [r7, #28]
 800a9c2:	18d3      	adds	r3, r2, r3
 800a9c4:	61fb      	str	r3, [r7, #28]
  ptr += x;
 800a9c6:	230a      	movs	r3, #10
 800a9c8:	18fb      	adds	r3, r7, r3
 800a9ca:	881b      	ldrh	r3, [r3, #0]
 800a9cc:	69fa      	ldr	r2, [r7, #28]
 800a9ce:	18d3      	adds	r3, r2, r3
 800a9d0:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 800a9d2:	2330      	movs	r3, #48	; 0x30
 800a9d4:	18fb      	adds	r3, r7, r3
 800a9d6:	781b      	ldrb	r3, [r3, #0]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d11e      	bne.n	800aa1a <u8g2_ll_hvline_vertical_top_lsb+0x116>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 800a9dc:	69fb      	ldr	r3, [r7, #28]
 800a9de:	781a      	ldrb	r2, [r3, #0]
 800a9e0:	231a      	movs	r3, #26
 800a9e2:	18fb      	adds	r3, r7, r3
 800a9e4:	781b      	ldrb	r3, [r3, #0]
 800a9e6:	4313      	orrs	r3, r2
 800a9e8:	b2da      	uxtb	r2, r3
 800a9ea:	69fb      	ldr	r3, [r7, #28]
 800a9ec:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 800a9ee:	69fb      	ldr	r3, [r7, #28]
 800a9f0:	781a      	ldrb	r2, [r3, #0]
 800a9f2:	2319      	movs	r3, #25
 800a9f4:	18fb      	adds	r3, r7, r3
 800a9f6:	781b      	ldrb	r3, [r3, #0]
 800a9f8:	4053      	eors	r3, r2
 800a9fa:	b2da      	uxtb	r2, r3
 800a9fc:	69fb      	ldr	r3, [r7, #28]
 800a9fe:	701a      	strb	r2, [r3, #0]
	ptr++;
 800aa00:	69fb      	ldr	r3, [r7, #28]
 800aa02:	3301      	adds	r3, #1
 800aa04:	61fb      	str	r3, [r7, #28]
	len--;
 800aa06:	1dbb      	adds	r3, r7, #6
 800aa08:	881a      	ldrh	r2, [r3, #0]
 800aa0a:	1dbb      	adds	r3, r7, #6
 800aa0c:	3a01      	subs	r2, #1
 800aa0e:	801a      	strh	r2, [r3, #0]
      } while( len != 0 );
 800aa10:	1dbb      	adds	r3, r7, #6
 800aa12:	881b      	ldrh	r3, [r3, #0]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d1e1      	bne.n	800a9dc <u8g2_ll_hvline_vertical_top_lsb+0xd8>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 800aa18:	e04e      	b.n	800aab8 <u8g2_ll_hvline_vertical_top_lsb+0x1b4>
      *ptr |= or_mask;
 800aa1a:	69fb      	ldr	r3, [r7, #28]
 800aa1c:	781a      	ldrb	r2, [r3, #0]
 800aa1e:	241a      	movs	r4, #26
 800aa20:	193b      	adds	r3, r7, r4
 800aa22:	781b      	ldrb	r3, [r3, #0]
 800aa24:	4313      	orrs	r3, r2
 800aa26:	b2da      	uxtb	r2, r3
 800aa28:	69fb      	ldr	r3, [r7, #28]
 800aa2a:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 800aa2c:	69fb      	ldr	r3, [r7, #28]
 800aa2e:	781a      	ldrb	r2, [r3, #0]
 800aa30:	2319      	movs	r3, #25
 800aa32:	18fb      	adds	r3, r7, r3
 800aa34:	781b      	ldrb	r3, [r3, #0]
 800aa36:	4053      	eors	r3, r2
 800aa38:	b2da      	uxtb	r2, r3
 800aa3a:	69fb      	ldr	r3, [r7, #28]
 800aa3c:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 800aa3e:	201b      	movs	r0, #27
 800aa40:	183b      	adds	r3, r7, r0
 800aa42:	781a      	ldrb	r2, [r3, #0]
 800aa44:	183b      	adds	r3, r7, r0
 800aa46:	3201      	adds	r2, #1
 800aa48:	701a      	strb	r2, [r3, #0]
      bit_pos &= 7;
 800aa4a:	183b      	adds	r3, r7, r0
 800aa4c:	183a      	adds	r2, r7, r0
 800aa4e:	7812      	ldrb	r2, [r2, #0]
 800aa50:	2107      	movs	r1, #7
 800aa52:	400a      	ands	r2, r1
 800aa54:	701a      	strb	r2, [r3, #0]
      len--;
 800aa56:	1dbb      	adds	r3, r7, #6
 800aa58:	881a      	ldrh	r2, [r3, #0]
 800aa5a:	1dbb      	adds	r3, r7, #6
 800aa5c:	3a01      	subs	r2, #1
 800aa5e:	801a      	strh	r2, [r3, #0]
      if ( bit_pos == 0 )
 800aa60:	183b      	adds	r3, r7, r0
 800aa62:	781b      	ldrb	r3, [r3, #0]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d117      	bne.n	800aa98 <u8g2_ll_hvline_vertical_top_lsb+0x194>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800aa6c:	001a      	movs	r2, r3
 800aa6e:	69fb      	ldr	r3, [r7, #28]
 800aa70:	189b      	adds	r3, r3, r2
 800aa72:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	2292      	movs	r2, #146	; 0x92
 800aa78:	5c9b      	ldrb	r3, [r3, r2]
 800aa7a:	2b01      	cmp	r3, #1
 800aa7c:	d802      	bhi.n	800aa84 <u8g2_ll_hvline_vertical_top_lsb+0x180>
	  or_mask  = 1;
 800aa7e:	193b      	adds	r3, r7, r4
 800aa80:	2201      	movs	r2, #1
 800aa82:	701a      	strb	r2, [r3, #0]
	if ( u8g2->draw_color != 1 )
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	2292      	movs	r2, #146	; 0x92
 800aa88:	5c9b      	ldrb	r3, [r3, r2]
 800aa8a:	2b01      	cmp	r3, #1
 800aa8c:	d010      	beq.n	800aab0 <u8g2_ll_hvline_vertical_top_lsb+0x1ac>
	  xor_mask = 1;
 800aa8e:	2319      	movs	r3, #25
 800aa90:	18fb      	adds	r3, r7, r3
 800aa92:	2201      	movs	r2, #1
 800aa94:	701a      	strb	r2, [r3, #0]
 800aa96:	e00b      	b.n	800aab0 <u8g2_ll_hvline_vertical_top_lsb+0x1ac>
	or_mask <<= 1;
 800aa98:	231a      	movs	r3, #26
 800aa9a:	18fa      	adds	r2, r7, r3
 800aa9c:	18fb      	adds	r3, r7, r3
 800aa9e:	781b      	ldrb	r3, [r3, #0]
 800aaa0:	18db      	adds	r3, r3, r3
 800aaa2:	7013      	strb	r3, [r2, #0]
	xor_mask <<= 1;
 800aaa4:	2319      	movs	r3, #25
 800aaa6:	18fa      	adds	r2, r7, r3
 800aaa8:	18fb      	adds	r3, r7, r3
 800aaaa:	781b      	ldrb	r3, [r3, #0]
 800aaac:	18db      	adds	r3, r3, r3
 800aaae:	7013      	strb	r3, [r2, #0]
    } while( len != 0 );
 800aab0:	1dbb      	adds	r3, r7, #6
 800aab2:	881b      	ldrh	r3, [r3, #0]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d1b0      	bne.n	800aa1a <u8g2_ll_hvline_vertical_top_lsb+0x116>
}
 800aab8:	46c0      	nop			; (mov r8, r8)
 800aaba:	46bd      	mov	sp, r7
 800aabc:	b009      	add	sp, #36	; 0x24
 800aabe:	bd90      	pop	{r4, r7, pc}

0800aac0 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b082      	sub	sp, #8
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2250      	movs	r2, #80	; 0x50
 800aacc:	2100      	movs	r1, #0
 800aace:	5299      	strh	r1, [r3, r2]
  u8g2->clip_y0 = 0;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2254      	movs	r2, #84	; 0x54
 800aad4:	2100      	movs	r1, #0
 800aad6:	5299      	strh	r1, [r3, r2]
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2252      	movs	r2, #82	; 0x52
 800aadc:	2101      	movs	r1, #1
 800aade:	4249      	negs	r1, r1
 800aae0:	5299      	strh	r1, [r3, r2]
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2256      	movs	r2, #86	; 0x56
 800aae6:	2101      	movs	r1, #1
 800aae8:	4249      	negs	r1, r1
 800aaea:	5299      	strh	r1, [r3, r2]
  
  u8g2->cb->update_page_win(u8g2);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaf0:	685b      	ldr	r3, [r3, #4]
 800aaf2:	687a      	ldr	r2, [r7, #4]
 800aaf4:	0010      	movs	r0, r2
 800aaf6:	4798      	blx	r3
}
 800aaf8:	46c0      	nop			; (mov r8, r8)
 800aafa:	46bd      	mov	sp, r7
 800aafc:	b002      	add	sp, #8
 800aafe:	bd80      	pop	{r7, pc}

0800ab00 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b084      	sub	sp, #16
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	60f8      	str	r0, [r7, #12]
 800ab08:	60b9      	str	r1, [r7, #8]
 800ab0a:	603b      	str	r3, [r7, #0]
 800ab0c:	1dfb      	adds	r3, r7, #7
 800ab0e:	701a      	strb	r2, [r3, #0]
  u8g2->font = NULL;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	2200      	movs	r2, #0
 800ab14:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	683a      	ldr	r2, [r7, #0]
 800ab1a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	68ba      	ldr	r2, [r7, #8]
 800ab20:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	1dfa      	adds	r2, r7, #7
 800ab26:	2138      	movs	r1, #56	; 0x38
 800ab28:	7812      	ldrb	r2, [r2, #0]
 800ab2a:	545a      	strb	r2, [r3, r1]
  
  u8g2->tile_curr_row = 0;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	2239      	movs	r2, #57	; 0x39
 800ab30:	2100      	movs	r1, #0
 800ab32:	5499      	strb	r1, [r3, r2]
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	226d      	movs	r2, #109	; 0x6d
 800ab38:	2100      	movs	r1, #0
 800ab3a:	5499      	strb	r1, [r3, r2]
  u8g2->bitmap_transparency = 0;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	2291      	movs	r2, #145	; 0x91
 800ab40:	2100      	movs	r1, #0
 800ab42:	5499      	strb	r1, [r3, r2]
  
  u8g2->draw_color = 1;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	2292      	movs	r2, #146	; 0x92
 800ab48:	2101      	movs	r1, #1
 800ab4a:	5499      	strb	r1, [r3, r2]
  u8g2->is_auto_page_clear = 1;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	2293      	movs	r2, #147	; 0x93
 800ab50:	2101      	movs	r1, #1
 800ab52:	5499      	strb	r1, [r3, r2]
  
  u8g2->cb = u8g2_cb;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	69ba      	ldr	r2, [r7, #24]
 800ab58:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	68fa      	ldr	r2, [r7, #12]
 800ab62:	0010      	movs	r0, r2
 800ab64:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	0018      	movs	r0, r3
 800ab6a:	f7ff ffa9 	bl	800aac0 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	0018      	movs	r0, r3
 800ab72:	f7ff fb75 	bl	800a260 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	2270      	movs	r2, #112	; 0x70
 800ab7a:	2100      	movs	r1, #0
 800ab7c:	5499      	strb	r1, [r3, r2]
#endif
}
 800ab7e:	46c0      	nop			; (mov r8, r8)
 800ab80:	46bd      	mov	sp, r7
 800ab82:	b004      	add	sp, #16
 800ab84:	bd80      	pop	{r7, pc}

0800ab86 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 800ab86:	b580      	push	{r7, lr}
 800ab88:	b084      	sub	sp, #16
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2238      	movs	r2, #56	; 0x38
 800ab98:	5c9a      	ldrb	r2, [r3, r2]
 800ab9a:	210e      	movs	r1, #14
 800ab9c:	187b      	adds	r3, r7, r1
 800ab9e:	801a      	strh	r2, [r3, #0]
  t *= 8;
 800aba0:	187b      	adds	r3, r7, r1
 800aba2:	187a      	adds	r2, r7, r1
 800aba4:	8812      	ldrh	r2, [r2, #0]
 800aba6:	00d2      	lsls	r2, r2, #3
 800aba8:	801a      	strh	r2, [r3, #0]
  u8g2->pixel_buf_height = t;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	187a      	adds	r2, r7, r1
 800abae:	8812      	ldrh	r2, [r2, #0]
 800abb0:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	7c1a      	ldrb	r2, [r3, #16]
 800abb6:	187b      	adds	r3, r7, r1
 800abb8:	801a      	strh	r2, [r3, #0]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 800abba:	187b      	adds	r3, r7, r1
 800abbc:	187a      	adds	r2, r7, r1
 800abbe:	8812      	ldrh	r2, [r2, #0]
 800abc0:	00d2      	lsls	r2, r2, #3
 800abc2:	801a      	strh	r2, [r3, #0]
  u8g2->pixel_buf_width = t;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	187a      	adds	r2, r7, r1
 800abc8:	8812      	ldrh	r2, [r2, #0]
 800abca:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2239      	movs	r2, #57	; 0x39
 800abd0:	5c9a      	ldrb	r2, [r3, r2]
 800abd2:	187b      	adds	r3, r7, r1
 800abd4:	801a      	strh	r2, [r3, #0]
  t *= 8;
 800abd6:	187b      	adds	r3, r7, r1
 800abd8:	0008      	movs	r0, r1
 800abda:	187a      	adds	r2, r7, r1
 800abdc:	8812      	ldrh	r2, [r2, #0]
 800abde:	00d2      	lsls	r2, r2, #3
 800abe0:	801a      	strh	r2, [r3, #0]
  u8g2->pixel_curr_row = t;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	183a      	adds	r2, r7, r0
 800abe6:	8812      	ldrh	r2, [r2, #0]
 800abe8:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2238      	movs	r2, #56	; 0x38
 800abee:	5c9a      	ldrb	r2, [r3, r2]
 800abf0:	183b      	adds	r3, r7, r0
 800abf2:	801a      	strh	r2, [r3, #0]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 800abf4:	183b      	adds	r3, r7, r0
 800abf6:	881b      	ldrh	r3, [r3, #0]
 800abf8:	687a      	ldr	r2, [r7, #4]
 800abfa:	2139      	movs	r1, #57	; 0x39
 800abfc:	5c52      	ldrb	r2, [r2, r1]
 800abfe:	189b      	adds	r3, r3, r2
 800ac00:	68ba      	ldr	r2, [r7, #8]
 800ac02:	7c52      	ldrb	r2, [r2, #17]
 800ac04:	4293      	cmp	r3, r2
 800ac06:	dd09      	ble.n	800ac1c <u8g2_update_dimension_common+0x96>
    t = display_info->tile_height - u8g2->tile_curr_row;
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	7c5b      	ldrb	r3, [r3, #17]
 800ac0c:	b299      	uxth	r1, r3
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2239      	movs	r2, #57	; 0x39
 800ac12:	5c9b      	ldrb	r3, [r3, r2]
 800ac14:	b29a      	uxth	r2, r3
 800ac16:	183b      	adds	r3, r7, r0
 800ac18:	1a8a      	subs	r2, r1, r2
 800ac1a:	801a      	strh	r2, [r3, #0]
  t *= 8;
 800ac1c:	200e      	movs	r0, #14
 800ac1e:	183b      	adds	r3, r7, r0
 800ac20:	183a      	adds	r2, r7, r0
 800ac22:	8812      	ldrh	r2, [r2, #0]
 800ac24:	00d2      	lsls	r2, r2, #3
 800ac26:	801a      	strh	r2, [r3, #0]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2240      	movs	r2, #64	; 0x40
 800ac30:	5299      	strh	r1, [r3, r2]
  u8g2->buf_y1 = u8g2->buf_y0;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2240      	movs	r2, #64	; 0x40
 800ac36:	5a99      	ldrh	r1, [r3, r2]
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2242      	movs	r2, #66	; 0x42
 800ac3c:	5299      	strh	r1, [r3, r2]
  u8g2->buf_y1 += t;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2242      	movs	r2, #66	; 0x42
 800ac42:	5a9a      	ldrh	r2, [r3, r2]
 800ac44:	183b      	adds	r3, r7, r0
 800ac46:	881b      	ldrh	r3, [r3, #0]
 800ac48:	18d3      	adds	r3, r2, r3
 800ac4a:	b299      	uxth	r1, r3
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2242      	movs	r2, #66	; 0x42
 800ac50:	5299      	strh	r1, [r3, r2]

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	8a99      	ldrh	r1, [r3, #20]
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2244      	movs	r2, #68	; 0x44
 800ac5a:	5299      	strh	r1, [r3, r2]
  u8g2->height = display_info->pixel_height;
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	8ad9      	ldrh	r1, [r3, #22]
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2246      	movs	r2, #70	; 0x46
 800ac64:	5299      	strh	r1, [r3, r2]
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 800ac66:	46c0      	nop			; (mov r8, r8)
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	b004      	add	sp, #16
 800ac6c:	bd80      	pop	{r7, pc}

0800ac6e <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 800ac6e:	b590      	push	{r4, r7, lr}
 800ac70:	b085      	sub	sp, #20
 800ac72:	af02      	add	r7, sp, #8
 800ac74:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2250      	movs	r2, #80	; 0x50
 800ac7a:	5a99      	ldrh	r1, [r3, r2]
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2254      	movs	r2, #84	; 0x54
 800ac80:	5a9a      	ldrh	r2, [r3, r2]
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2052      	movs	r0, #82	; 0x52
 800ac86:	5a1c      	ldrh	r4, [r3, r0]
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2056      	movs	r0, #86	; 0x56
 800ac8c:	5a1b      	ldrh	r3, [r3, r0]
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	9300      	str	r3, [sp, #0]
 800ac92:	0023      	movs	r3, r4
 800ac94:	f7ff fcdc 	bl	800a650 <u8g2_IsIntersection>
 800ac98:	1e03      	subs	r3, r0, #0
 800ac9a:	d104      	bne.n	800aca6 <u8g2_apply_clip_window+0x38>
  {
    u8g2->is_page_clip_window_intersection = 0;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	228c      	movs	r2, #140	; 0x8c
 800aca0:	2100      	movs	r1, #0
 800aca2:	5499      	strb	r1, [r3, r2]
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 800aca4:	e03b      	b.n	800ad1e <u8g2_apply_clip_window+0xb0>
    u8g2->is_page_clip_window_intersection = 1;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	228c      	movs	r2, #140	; 0x8c
 800acaa:	2101      	movs	r1, #1
 800acac:	5499      	strb	r1, [r3, r2]
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2248      	movs	r2, #72	; 0x48
 800acb2:	5a9a      	ldrh	r2, [r3, r2]
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2150      	movs	r1, #80	; 0x50
 800acb8:	5a5b      	ldrh	r3, [r3, r1]
 800acba:	429a      	cmp	r2, r3
 800acbc:	d205      	bcs.n	800acca <u8g2_apply_clip_window+0x5c>
      u8g2->user_x0 = u8g2->clip_x0;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2250      	movs	r2, #80	; 0x50
 800acc2:	5a99      	ldrh	r1, [r3, r2]
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2248      	movs	r2, #72	; 0x48
 800acc8:	5299      	strh	r1, [r3, r2]
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	224a      	movs	r2, #74	; 0x4a
 800acce:	5a9a      	ldrh	r2, [r3, r2]
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2152      	movs	r1, #82	; 0x52
 800acd4:	5a5b      	ldrh	r3, [r3, r1]
 800acd6:	429a      	cmp	r2, r3
 800acd8:	d905      	bls.n	800ace6 <u8g2_apply_clip_window+0x78>
      u8g2->user_x1 = u8g2->clip_x1;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2252      	movs	r2, #82	; 0x52
 800acde:	5a99      	ldrh	r1, [r3, r2]
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	224a      	movs	r2, #74	; 0x4a
 800ace4:	5299      	strh	r1, [r3, r2]
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	224c      	movs	r2, #76	; 0x4c
 800acea:	5a9a      	ldrh	r2, [r3, r2]
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2154      	movs	r1, #84	; 0x54
 800acf0:	5a5b      	ldrh	r3, [r3, r1]
 800acf2:	429a      	cmp	r2, r3
 800acf4:	d205      	bcs.n	800ad02 <u8g2_apply_clip_window+0x94>
      u8g2->user_y0 = u8g2->clip_y0;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2254      	movs	r2, #84	; 0x54
 800acfa:	5a99      	ldrh	r1, [r3, r2]
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	224c      	movs	r2, #76	; 0x4c
 800ad00:	5299      	strh	r1, [r3, r2]
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	224e      	movs	r2, #78	; 0x4e
 800ad06:	5a9a      	ldrh	r2, [r3, r2]
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2156      	movs	r1, #86	; 0x56
 800ad0c:	5a5b      	ldrh	r3, [r3, r1]
 800ad0e:	429a      	cmp	r2, r3
 800ad10:	d905      	bls.n	800ad1e <u8g2_apply_clip_window+0xb0>
      u8g2->user_y1 = u8g2->clip_y1;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2256      	movs	r2, #86	; 0x56
 800ad16:	5a99      	ldrh	r1, [r3, r2]
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	224e      	movs	r2, #78	; 0x4e
 800ad1c:	5299      	strh	r1, [r3, r2]
}
 800ad1e:	46c0      	nop			; (mov r8, r8)
 800ad20:	46bd      	mov	sp, r7
 800ad22:	b003      	add	sp, #12
 800ad24:	bd90      	pop	{r4, r7, pc}

0800ad26 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 800ad26:	b580      	push	{r7, lr}
 800ad28:	b082      	sub	sp, #8
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	0018      	movs	r0, r3
 800ad32:	f7ff ff28 	bl	800ab86 <u8g2_update_dimension_common>
}
 800ad36:	46c0      	nop			; (mov r8, r8)
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	b002      	add	sp, #8
 800ad3c:	bd80      	pop	{r7, pc}

0800ad3e <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 800ad3e:	b580      	push	{r7, lr}
 800ad40:	b082      	sub	sp, #8
 800ad42:	af00      	add	r7, sp, #0
 800ad44:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2248      	movs	r2, #72	; 0x48
 800ad4a:	2100      	movs	r1, #0
 800ad4c:	5299      	strh	r1, [r3, r2]
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2244      	movs	r2, #68	; 0x44
 800ad52:	5a99      	ldrh	r1, [r3, r2]
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	224a      	movs	r2, #74	; 0x4a
 800ad58:	5299      	strh	r1, [r3, r2]
  
  u8g2->user_y0 = u8g2->buf_y0;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2240      	movs	r2, #64	; 0x40
 800ad5e:	5a99      	ldrh	r1, [r3, r2]
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	224c      	movs	r2, #76	; 0x4c
 800ad64:	5299      	strh	r1, [r3, r2]
  u8g2->user_y1 = u8g2->buf_y1;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2242      	movs	r2, #66	; 0x42
 800ad6a:	5a99      	ldrh	r1, [r3, r2]
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	224e      	movs	r2, #78	; 0x4e
 800ad70:	5299      	strh	r1, [r3, r2]
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	0018      	movs	r0, r3
 800ad76:	f7ff ff7a 	bl	800ac6e <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 800ad7a:	46c0      	nop			; (mov r8, r8)
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	b002      	add	sp, #8
 800ad80:	bd80      	pop	{r7, pc}

0800ad82 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800ad82:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad84:	b087      	sub	sp, #28
 800ad86:	af02      	add	r7, sp, #8
 800ad88:	60f8      	str	r0, [r7, #12]
 800ad8a:	000c      	movs	r4, r1
 800ad8c:	0010      	movs	r0, r2
 800ad8e:	0019      	movs	r1, r3
 800ad90:	250a      	movs	r5, #10
 800ad92:	197b      	adds	r3, r7, r5
 800ad94:	1c22      	adds	r2, r4, #0
 800ad96:	801a      	strh	r2, [r3, #0]
 800ad98:	2608      	movs	r6, #8
 800ad9a:	19bb      	adds	r3, r7, r6
 800ad9c:	1c02      	adds	r2, r0, #0
 800ad9e:	801a      	strh	r2, [r3, #0]
 800ada0:	1dbb      	adds	r3, r7, #6
 800ada2:	1c0a      	adds	r2, r1, #0
 800ada4:	801a      	strh	r2, [r3, #0]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 800ada6:	1dbb      	adds	r3, r7, #6
 800ada8:	881c      	ldrh	r4, [r3, #0]
 800adaa:	19bb      	adds	r3, r7, r6
 800adac:	881a      	ldrh	r2, [r3, #0]
 800adae:	197b      	adds	r3, r7, r5
 800adb0:	8819      	ldrh	r1, [r3, #0]
 800adb2:	68f8      	ldr	r0, [r7, #12]
 800adb4:	2320      	movs	r3, #32
 800adb6:	2508      	movs	r5, #8
 800adb8:	195b      	adds	r3, r3, r5
 800adba:	19db      	adds	r3, r3, r7
 800adbc:	781b      	ldrb	r3, [r3, #0]
 800adbe:	9300      	str	r3, [sp, #0]
 800adc0:	0023      	movs	r3, r4
 800adc2:	f7ff faed 	bl	800a3a0 <u8g2_draw_hv_line_2dir>
}
 800adc6:	46c0      	nop			; (mov r8, r8)
 800adc8:	46bd      	mov	sp, r7
 800adca:	b005      	add	sp, #20
 800adcc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800adce <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 800adce:	b580      	push	{r7, lr}
 800add0:	b082      	sub	sp, #8
 800add2:	af00      	add	r7, sp, #0
 800add4:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2226      	movs	r2, #38	; 0x26
 800adda:	2100      	movs	r1, #0
 800addc:	5499      	strb	r1, [r3, r2]
}
 800adde:	46c0      	nop			; (mov r8, r8)
 800ade0:	46bd      	mov	sp, r7
 800ade2:	b002      	add	sp, #8
 800ade4:	bd80      	pop	{r7, pc}
	...

0800ade8 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b082      	sub	sp, #8
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
 800adf0:	000a      	movs	r2, r1
 800adf2:	1cfb      	adds	r3, r7, #3
 800adf4:	701a      	strb	r2, [r3, #0]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 800adf6:	1cfb      	adds	r3, r7, #3
 800adf8:	781b      	ldrb	r3, [r3, #0]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d003      	beq.n	800ae06 <u8x8_ascii_next+0x1e>
 800adfe:	1cfb      	adds	r3, r7, #3
 800ae00:	781b      	ldrb	r3, [r3, #0]
 800ae02:	2b0a      	cmp	r3, #10
 800ae04:	d101      	bne.n	800ae0a <u8x8_ascii_next+0x22>
    return 0x0ffff;	/* end of string detected*/
 800ae06:	4b04      	ldr	r3, [pc, #16]	; (800ae18 <u8x8_ascii_next+0x30>)
 800ae08:	e002      	b.n	800ae10 <u8x8_ascii_next+0x28>
  return b;
 800ae0a:	1cfb      	adds	r3, r7, #3
 800ae0c:	781b      	ldrb	r3, [r3, #0]
 800ae0e:	b29b      	uxth	r3, r3
}
 800ae10:	0018      	movs	r0, r3
 800ae12:	46bd      	mov	sp, r7
 800ae14:	b002      	add	sp, #8
 800ae16:	bd80      	pop	{r7, pc}
 800ae18:	0000ffff 	.word	0x0000ffff

0800ae1c <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 800ae1c:	b590      	push	{r4, r7, lr}
 800ae1e:	b085      	sub	sp, #20
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	60f8      	str	r0, [r7, #12]
 800ae24:	607a      	str	r2, [r7, #4]
 800ae26:	200b      	movs	r0, #11
 800ae28:	183b      	adds	r3, r7, r0
 800ae2a:	1c0a      	adds	r2, r1, #0
 800ae2c:	701a      	strb	r2, [r3, #0]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	691c      	ldr	r4, [r3, #16]
 800ae32:	6879      	ldr	r1, [r7, #4]
 800ae34:	183b      	adds	r3, r7, r0
 800ae36:	781a      	ldrb	r2, [r3, #0]
 800ae38:	68f8      	ldr	r0, [r7, #12]
 800ae3a:	000b      	movs	r3, r1
 800ae3c:	2117      	movs	r1, #23
 800ae3e:	47a0      	blx	r4
 800ae40:	0003      	movs	r3, r0
}
 800ae42:	0018      	movs	r0, r3
 800ae44:	46bd      	mov	sp, r7
 800ae46:	b005      	add	sp, #20
 800ae48:	bd90      	pop	{r4, r7, pc}

0800ae4a <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 800ae4a:	b580      	push	{r7, lr}
 800ae4c:	b082      	sub	sp, #8
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	6078      	str	r0, [r7, #4]
 800ae52:	000a      	movs	r2, r1
 800ae54:	1cfb      	adds	r3, r7, #3
 800ae56:	701a      	strb	r2, [r3, #0]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 800ae58:	1cfa      	adds	r2, r7, #3
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2101      	movs	r1, #1
 800ae5e:	0018      	movs	r0, r3
 800ae60:	f7ff ffdc 	bl	800ae1c <u8x8_byte_SendBytes>
 800ae64:	0003      	movs	r3, r0
}
 800ae66:	0018      	movs	r0, r3
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	b002      	add	sp, #8
 800ae6c:	bd80      	pop	{r7, pc}

0800ae6e <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 800ae6e:	b590      	push	{r4, r7, lr}
 800ae70:	b083      	sub	sp, #12
 800ae72:	af00      	add	r7, sp, #0
 800ae74:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	691c      	ldr	r4, [r3, #16]
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	2200      	movs	r2, #0
 800ae80:	2118      	movs	r1, #24
 800ae82:	47a0      	blx	r4
 800ae84:	0003      	movs	r3, r0
}
 800ae86:	0018      	movs	r0, r3
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	b003      	add	sp, #12
 800ae8c:	bd90      	pop	{r4, r7, pc}

0800ae8e <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 800ae8e:	b590      	push	{r4, r7, lr}
 800ae90:	b083      	sub	sp, #12
 800ae92:	af00      	add	r7, sp, #0
 800ae94:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	691c      	ldr	r4, [r3, #16]
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	2200      	movs	r2, #0
 800aea0:	2119      	movs	r1, #25
 800aea2:	47a0      	blx	r4
 800aea4:	0003      	movs	r3, r0
}
 800aea6:	0018      	movs	r0, r3
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	b003      	add	sp, #12
 800aeac:	bd90      	pop	{r4, r7, pc}

0800aeae <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 800aeae:	b590      	push	{r4, r7, lr}
 800aeb0:	b083      	sub	sp, #12
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	6078      	str	r0, [r7, #4]
 800aeb6:	000a      	movs	r2, r1
 800aeb8:	1cfb      	adds	r3, r7, #3
 800aeba:	701a      	strb	r2, [r3, #0]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	68dc      	ldr	r4, [r3, #12]
 800aec0:	1cfb      	adds	r3, r7, #3
 800aec2:	781a      	ldrb	r2, [r3, #0]
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	2300      	movs	r3, #0
 800aec8:	2115      	movs	r1, #21
 800aeca:	47a0      	blx	r4
 800aecc:	0003      	movs	r3, r0
}
 800aece:	0018      	movs	r0, r3
 800aed0:	46bd      	mov	sp, r7
 800aed2:	b003      	add	sp, #12
 800aed4:	bd90      	pop	{r4, r7, pc}

0800aed6 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 800aed6:	b590      	push	{r4, r7, lr}
 800aed8:	b083      	sub	sp, #12
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	6078      	str	r0, [r7, #4]
 800aede:	000a      	movs	r2, r1
 800aee0:	1cfb      	adds	r3, r7, #3
 800aee2:	701a      	strb	r2, [r3, #0]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	68dc      	ldr	r4, [r3, #12]
 800aee8:	1cfb      	adds	r3, r7, #3
 800aeea:	781a      	ldrb	r2, [r3, #0]
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	2300      	movs	r3, #0
 800aef0:	2116      	movs	r1, #22
 800aef2:	47a0      	blx	r4
 800aef4:	0003      	movs	r3, r0
}
 800aef6:	0018      	movs	r0, r3
 800aef8:	46bd      	mov	sp, r7
 800aefa:	b003      	add	sp, #12
 800aefc:	bd90      	pop	{r4, r7, pc}

0800aefe <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 800aefe:	b590      	push	{r4, r7, lr}
 800af00:	b085      	sub	sp, #20
 800af02:	af00      	add	r7, sp, #0
 800af04:	60f8      	str	r0, [r7, #12]
 800af06:	607a      	str	r2, [r7, #4]
 800af08:	200b      	movs	r0, #11
 800af0a:	183b      	adds	r3, r7, r0
 800af0c:	1c0a      	adds	r2, r1, #0
 800af0e:	701a      	strb	r2, [r3, #0]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	68dc      	ldr	r4, [r3, #12]
 800af14:	6879      	ldr	r1, [r7, #4]
 800af16:	183b      	adds	r3, r7, r0
 800af18:	781a      	ldrb	r2, [r3, #0]
 800af1a:	68f8      	ldr	r0, [r7, #12]
 800af1c:	000b      	movs	r3, r1
 800af1e:	2117      	movs	r1, #23
 800af20:	47a0      	blx	r4
 800af22:	0003      	movs	r3, r0
}
 800af24:	0018      	movs	r0, r3
 800af26:	46bd      	mov	sp, r7
 800af28:	b005      	add	sp, #20
 800af2a:	bd90      	pop	{r4, r7, pc}

0800af2c <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 800af2c:	b590      	push	{r4, r7, lr}
 800af2e:	b083      	sub	sp, #12
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	68dc      	ldr	r4, [r3, #12]
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	2300      	movs	r3, #0
 800af3c:	2200      	movs	r2, #0
 800af3e:	2118      	movs	r1, #24
 800af40:	47a0      	blx	r4
 800af42:	0003      	movs	r3, r0
}
 800af44:	0018      	movs	r0, r3
 800af46:	46bd      	mov	sp, r7
 800af48:	b003      	add	sp, #12
 800af4a:	bd90      	pop	{r4, r7, pc}

0800af4c <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 800af4c:	b590      	push	{r4, r7, lr}
 800af4e:	b083      	sub	sp, #12
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	68dc      	ldr	r4, [r3, #12]
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	2300      	movs	r3, #0
 800af5c:	2200      	movs	r2, #0
 800af5e:	2119      	movs	r1, #25
 800af60:	47a0      	blx	r4
 800af62:	0003      	movs	r3, r0
}
 800af64:	0018      	movs	r0, r3
 800af66:	46bd      	mov	sp, r7
 800af68:	b003      	add	sp, #12
 800af6a:	bd90      	pop	{r4, r7, pc}

0800af6c <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 800af6c:	b590      	push	{r4, r7, lr}
 800af6e:	b085      	sub	sp, #20
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
 800af74:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 800af76:	210f      	movs	r1, #15
 800af78:	187b      	adds	r3, r7, r1
 800af7a:	683a      	ldr	r2, [r7, #0]
 800af7c:	7812      	ldrb	r2, [r2, #0]
 800af7e:	701a      	strb	r2, [r3, #0]
    data++;
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	3301      	adds	r3, #1
 800af84:	603b      	str	r3, [r7, #0]
    switch( cmd )
 800af86:	187b      	adds	r3, r7, r1
 800af88:	781b      	ldrb	r3, [r3, #0]
 800af8a:	2bfe      	cmp	r3, #254	; 0xfe
 800af8c:	d038      	beq.n	800b000 <u8x8_cad_SendSequence+0x94>
 800af8e:	dc48      	bgt.n	800b022 <u8x8_cad_SendSequence+0xb6>
 800af90:	2b19      	cmp	r3, #25
 800af92:	dc46      	bgt.n	800b022 <u8x8_cad_SendSequence+0xb6>
 800af94:	2b18      	cmp	r3, #24
 800af96:	da29      	bge.n	800afec <u8x8_cad_SendSequence+0x80>
 800af98:	2b16      	cmp	r3, #22
 800af9a:	dc02      	bgt.n	800afa2 <u8x8_cad_SendSequence+0x36>
 800af9c:	2b15      	cmp	r3, #21
 800af9e:	da03      	bge.n	800afa8 <u8x8_cad_SendSequence+0x3c>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 800afa0:	e03f      	b.n	800b022 <u8x8_cad_SendSequence+0xb6>
    switch( cmd )
 800afa2:	2b17      	cmp	r3, #23
 800afa4:	d013      	beq.n	800afce <u8x8_cad_SendSequence+0x62>
	return;
 800afa6:	e03c      	b.n	800b022 <u8x8_cad_SendSequence+0xb6>
	  v = *data;
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	781a      	ldrb	r2, [r3, #0]
 800afac:	210e      	movs	r1, #14
 800afae:	187b      	adds	r3, r7, r1
 800afb0:	701a      	strb	r2, [r3, #0]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	68dc      	ldr	r4, [r3, #12]
 800afb6:	187b      	adds	r3, r7, r1
 800afb8:	781a      	ldrb	r2, [r3, #0]
 800afba:	230f      	movs	r3, #15
 800afbc:	18fb      	adds	r3, r7, r3
 800afbe:	7819      	ldrb	r1, [r3, #0]
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	2300      	movs	r3, #0
 800afc4:	47a0      	blx	r4
	  data++;
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	3301      	adds	r3, #1
 800afca:	603b      	str	r3, [r7, #0]
	  break;
 800afcc:	e028      	b.n	800b020 <u8x8_cad_SendSequence+0xb4>
	  v = *data;
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	781a      	ldrb	r2, [r3, #0]
 800afd2:	210e      	movs	r1, #14
 800afd4:	187b      	adds	r3, r7, r1
 800afd6:	701a      	strb	r2, [r3, #0]
	  u8x8_cad_SendData(u8x8, 1, &v);
 800afd8:	187a      	adds	r2, r7, r1
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2101      	movs	r1, #1
 800afde:	0018      	movs	r0, r3
 800afe0:	f7ff ff8d 	bl	800aefe <u8x8_cad_SendData>
	  data++;
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	3301      	adds	r3, #1
 800afe8:	603b      	str	r3, [r7, #0]
	  break;
 800afea:	e019      	b.n	800b020 <u8x8_cad_SendSequence+0xb4>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	68dc      	ldr	r4, [r3, #12]
 800aff0:	230f      	movs	r3, #15
 800aff2:	18fb      	adds	r3, r7, r3
 800aff4:	7819      	ldrb	r1, [r3, #0]
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	2300      	movs	r3, #0
 800affa:	2200      	movs	r2, #0
 800affc:	47a0      	blx	r4
	  break;
 800affe:	e00f      	b.n	800b020 <u8x8_cad_SendSequence+0xb4>
	  v = *data;
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	781a      	ldrb	r2, [r3, #0]
 800b004:	210e      	movs	r1, #14
 800b006:	187b      	adds	r3, r7, r1
 800b008:	701a      	strb	r2, [r3, #0]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 800b00a:	187b      	adds	r3, r7, r1
 800b00c:	781a      	ldrb	r2, [r3, #0]
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2129      	movs	r1, #41	; 0x29
 800b012:	0018      	movs	r0, r3
 800b014:	f000 fa98 	bl	800b548 <u8x8_gpio_call>
	  data++;
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	3301      	adds	r3, #1
 800b01c:	603b      	str	r3, [r7, #0]
	  break;
 800b01e:	46c0      	nop			; (mov r8, r8)
    cmd = *data;
 800b020:	e7a9      	b.n	800af76 <u8x8_cad_SendSequence+0xa>
	return;
 800b022:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800b024:	46bd      	mov	sp, r7
 800b026:	b005      	add	sp, #20
 800b028:	bd90      	pop	{r4, r7, pc}

0800b02a <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 800b02a:	b5b0      	push	{r4, r5, r7, lr}
 800b02c:	b084      	sub	sp, #16
 800b02e:	af00      	add	r7, sp, #0
 800b030:	60f8      	str	r0, [r7, #12]
 800b032:	607a      	str	r2, [r7, #4]
 800b034:	250b      	movs	r5, #11
 800b036:	197b      	adds	r3, r7, r5
 800b038:	1c0a      	adds	r2, r1, #0
 800b03a:	701a      	strb	r2, [r3, #0]
    u8x8_byte_StartTransfer(u8x8);    
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	0018      	movs	r0, r3
 800b040:	f7ff ff15 	bl	800ae6e <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	2140      	movs	r1, #64	; 0x40
 800b048:	0018      	movs	r0, r3
 800b04a:	f7ff fefe 	bl	800ae4a <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	691c      	ldr	r4, [r3, #16]
 800b052:	6879      	ldr	r1, [r7, #4]
 800b054:	197b      	adds	r3, r7, r5
 800b056:	781a      	ldrb	r2, [r3, #0]
 800b058:	68f8      	ldr	r0, [r7, #12]
 800b05a:	000b      	movs	r3, r1
 800b05c:	2117      	movs	r1, #23
 800b05e:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	0018      	movs	r0, r3
 800b064:	f7ff ff13 	bl	800ae8e <u8x8_byte_EndTransfer>
}
 800b068:	46c0      	nop			; (mov r8, r8)
 800b06a:	46bd      	mov	sp, r7
 800b06c:	b004      	add	sp, #16
 800b06e:	bdb0      	pop	{r4, r5, r7, pc}

0800b070 <u8x8_cad_ssd13xx_fast_i2c>:
}


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800b070:	b5b0      	push	{r4, r5, r7, lr}
 800b072:	b086      	sub	sp, #24
 800b074:	af00      	add	r7, sp, #0
 800b076:	60f8      	str	r0, [r7, #12]
 800b078:	0008      	movs	r0, r1
 800b07a:	0011      	movs	r1, r2
 800b07c:	607b      	str	r3, [r7, #4]
 800b07e:	240b      	movs	r4, #11
 800b080:	193b      	adds	r3, r7, r4
 800b082:	1c02      	adds	r2, r0, #0
 800b084:	701a      	strb	r2, [r3, #0]
 800b086:	230a      	movs	r3, #10
 800b088:	18fb      	adds	r3, r7, r3
 800b08a:	1c0a      	adds	r2, r1, #0
 800b08c:	701a      	strb	r2, [r3, #0]
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
 800b08e:	193b      	adds	r3, r7, r4
 800b090:	781b      	ldrb	r3, [r3, #0]
 800b092:	3b14      	subs	r3, #20
 800b094:	2b05      	cmp	r3, #5
 800b096:	d900      	bls.n	800b09a <u8x8_cad_ssd13xx_fast_i2c+0x2a>
 800b098:	e07b      	b.n	800b192 <u8x8_cad_ssd13xx_fast_i2c+0x122>
 800b09a:	009a      	lsls	r2, r3, #2
 800b09c:	4b40      	ldr	r3, [pc, #256]	; (800b1a0 <u8x8_cad_ssd13xx_fast_i2c+0x130>)
 800b09e:	18d3      	adds	r3, r2, r3
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	469f      	mov	pc, r3
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
 800b0a4:	4b3f      	ldr	r3, [pc, #252]	; (800b1a4 <u8x8_cad_ssd13xx_fast_i2c+0x134>)
 800b0a6:	781b      	ldrb	r3, [r3, #0]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d003      	beq.n	800b0b4 <u8x8_cad_ssd13xx_fast_i2c+0x44>
	 u8x8_byte_EndTransfer(u8x8); 
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	0018      	movs	r0, r3
 800b0b0:	f7ff feed 	bl	800ae8e <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	0018      	movs	r0, r3
 800b0b8:	f7ff fed9 	bl	800ae6e <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	2100      	movs	r1, #0
 800b0c0:	0018      	movs	r0, r3
 800b0c2:	f7ff fec2 	bl	800ae4a <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 800b0c6:	230a      	movs	r3, #10
 800b0c8:	18fb      	adds	r3, r7, r3
 800b0ca:	781a      	ldrb	r2, [r3, #0]
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	0011      	movs	r1, r2
 800b0d0:	0018      	movs	r0, r3
 800b0d2:	f7ff feba 	bl	800ae4a <u8x8_byte_SendByte>
      in_transfer = 1;
 800b0d6:	4b33      	ldr	r3, [pc, #204]	; (800b1a4 <u8x8_cad_ssd13xx_fast_i2c+0x134>)
 800b0d8:	2201      	movs	r2, #1
 800b0da:	701a      	strb	r2, [r3, #0]
	//   u8x8_byte_StartTransfer(u8x8);
	//   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
 800b0dc:	e05b      	b.n	800b196 <u8x8_cad_ssd13xx_fast_i2c+0x126>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
 800b0de:	230a      	movs	r3, #10
 800b0e0:	18fb      	adds	r3, r7, r3
 800b0e2:	781a      	ldrb	r2, [r3, #0]
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	0011      	movs	r1, r2
 800b0e8:	0018      	movs	r0, r3
 800b0ea:	f7ff feae 	bl	800ae4a <u8x8_byte_SendByte>
      break;      
 800b0ee:	e052      	b.n	800b196 <u8x8_cad_ssd13xx_fast_i2c+0x126>
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
 800b0f0:	4b2c      	ldr	r3, [pc, #176]	; (800b1a4 <u8x8_cad_ssd13xx_fast_i2c+0x134>)
 800b0f2:	781b      	ldrb	r3, [r3, #0]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d003      	beq.n	800b100 <u8x8_cad_ssd13xx_fast_i2c+0x90>
	u8x8_byte_EndTransfer(u8x8); 
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	0018      	movs	r0, r3
 800b0fc:	f7ff fec7 	bl	800ae8e <u8x8_byte_EndTransfer>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 800b104:	e00e      	b.n	800b124 <u8x8_cad_ssd13xx_fast_i2c+0xb4>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 800b106:	697a      	ldr	r2, [r7, #20]
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	2118      	movs	r1, #24
 800b10c:	0018      	movs	r0, r3
 800b10e:	f7ff ff8c 	bl	800b02a <u8x8_i2c_data_transfer>
	arg_int-=24;
 800b112:	220a      	movs	r2, #10
 800b114:	18bb      	adds	r3, r7, r2
 800b116:	18ba      	adds	r2, r7, r2
 800b118:	7812      	ldrb	r2, [r2, #0]
 800b11a:	3a18      	subs	r2, #24
 800b11c:	701a      	strb	r2, [r3, #0]
	p+=24;
 800b11e:	697b      	ldr	r3, [r7, #20]
 800b120:	3318      	adds	r3, #24
 800b122:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 800b124:	210a      	movs	r1, #10
 800b126:	187b      	adds	r3, r7, r1
 800b128:	781b      	ldrb	r3, [r3, #0]
 800b12a:	2b18      	cmp	r3, #24
 800b12c:	d8eb      	bhi.n	800b106 <u8x8_cad_ssd13xx_fast_i2c+0x96>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 800b12e:	697a      	ldr	r2, [r7, #20]
 800b130:	187b      	adds	r3, r7, r1
 800b132:	7819      	ldrb	r1, [r3, #0]
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	0018      	movs	r0, r3
 800b138:	f7ff ff77 	bl	800b02a <u8x8_i2c_data_transfer>
      in_transfer = 0;
 800b13c:	4b19      	ldr	r3, [pc, #100]	; (800b1a4 <u8x8_cad_ssd13xx_fast_i2c+0x134>)
 800b13e:	2200      	movs	r2, #0
 800b140:	701a      	strb	r2, [r3, #0]
      break;
 800b142:	e028      	b.n	800b196 <u8x8_cad_ssd13xx_fast_i2c+0x126>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	2224      	movs	r2, #36	; 0x24
 800b148:	5c9b      	ldrb	r3, [r3, r2]
 800b14a:	2bff      	cmp	r3, #255	; 0xff
 800b14c:	d103      	bne.n	800b156 <u8x8_cad_ssd13xx_fast_i2c+0xe6>
	u8x8->i2c_address = 0x078;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	2224      	movs	r2, #36	; 0x24
 800b152:	2178      	movs	r1, #120	; 0x78
 800b154:	5499      	strb	r1, [r3, r2]
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	691c      	ldr	r4, [r3, #16]
 800b15a:	687d      	ldr	r5, [r7, #4]
 800b15c:	230a      	movs	r3, #10
 800b15e:	18fb      	adds	r3, r7, r3
 800b160:	781a      	ldrb	r2, [r3, #0]
 800b162:	230b      	movs	r3, #11
 800b164:	18fb      	adds	r3, r7, r3
 800b166:	7819      	ldrb	r1, [r3, #0]
 800b168:	68f8      	ldr	r0, [r7, #12]
 800b16a:	002b      	movs	r3, r5
 800b16c:	47a0      	blx	r4
 800b16e:	0003      	movs	r3, r0
 800b170:	e012      	b.n	800b198 <u8x8_cad_ssd13xx_fast_i2c+0x128>
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
 800b172:	4b0c      	ldr	r3, [pc, #48]	; (800b1a4 <u8x8_cad_ssd13xx_fast_i2c+0x134>)
 800b174:	2200      	movs	r2, #0
 800b176:	701a      	strb	r2, [r3, #0]
      break;
 800b178:	e00d      	b.n	800b196 <u8x8_cad_ssd13xx_fast_i2c+0x126>
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
 800b17a:	4b0a      	ldr	r3, [pc, #40]	; (800b1a4 <u8x8_cad_ssd13xx_fast_i2c+0x134>)
 800b17c:	781b      	ldrb	r3, [r3, #0]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d003      	beq.n	800b18a <u8x8_cad_ssd13xx_fast_i2c+0x11a>
	u8x8_byte_EndTransfer(u8x8); 
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	0018      	movs	r0, r3
 800b186:	f7ff fe82 	bl	800ae8e <u8x8_byte_EndTransfer>
      in_transfer = 0;
 800b18a:	4b06      	ldr	r3, [pc, #24]	; (800b1a4 <u8x8_cad_ssd13xx_fast_i2c+0x134>)
 800b18c:	2200      	movs	r2, #0
 800b18e:	701a      	strb	r2, [r3, #0]
      break;
 800b190:	e001      	b.n	800b196 <u8x8_cad_ssd13xx_fast_i2c+0x126>
    default:
      return 0;
 800b192:	2300      	movs	r3, #0
 800b194:	e000      	b.n	800b198 <u8x8_cad_ssd13xx_fast_i2c+0x128>
  }
  return 1;
 800b196:	2301      	movs	r3, #1
}
 800b198:	0018      	movs	r0, r3
 800b19a:	46bd      	mov	sp, r7
 800b19c:	b006      	add	sp, #24
 800b19e:	bdb0      	pop	{r4, r5, r7, pc}
 800b1a0:	0801396c 	.word	0x0801396c
 800b1a4:	200006ac 	.word	0x200006ac

0800b1a8 <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800b1a8:	b590      	push	{r4, r7, lr}
 800b1aa:	b087      	sub	sp, #28
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	60f8      	str	r0, [r7, #12]
 800b1b0:	0008      	movs	r0, r1
 800b1b2:	0011      	movs	r1, r2
 800b1b4:	607b      	str	r3, [r7, #4]
 800b1b6:	240b      	movs	r4, #11
 800b1b8:	193b      	adds	r3, r7, r4
 800b1ba:	1c02      	adds	r2, r0, #0
 800b1bc:	701a      	strb	r2, [r3, #0]
 800b1be:	230a      	movs	r3, #10
 800b1c0:	18fb      	adds	r3, r7, r3
 800b1c2:	1c0a      	adds	r2, r1, #0
 800b1c4:	701a      	strb	r2, [r3, #0]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 800b1c6:	193b      	adds	r3, r7, r4
 800b1c8:	781b      	ldrb	r3, [r3, #0]
 800b1ca:	2b0f      	cmp	r3, #15
 800b1cc:	d052      	beq.n	800b274 <u8x8_d_ssd1306_sh1106_generic+0xcc>
 800b1ce:	dd00      	ble.n	800b1d2 <u8x8_d_ssd1306_sh1106_generic+0x2a>
 800b1d0:	e0ac      	b.n	800b32c <u8x8_d_ssd1306_sh1106_generic+0x184>
 800b1d2:	2b0e      	cmp	r3, #14
 800b1d4:	d038      	beq.n	800b248 <u8x8_d_ssd1306_sh1106_generic+0xa0>
 800b1d6:	dd00      	ble.n	800b1da <u8x8_d_ssd1306_sh1106_generic+0x32>
 800b1d8:	e0a8      	b.n	800b32c <u8x8_d_ssd1306_sh1106_generic+0x184>
 800b1da:	2b0b      	cmp	r3, #11
 800b1dc:	d002      	beq.n	800b1e4 <u8x8_d_ssd1306_sh1106_generic+0x3c>
 800b1de:	2b0d      	cmp	r3, #13
 800b1e0:	d013      	beq.n	800b20a <u8x8_d_ssd1306_sh1106_generic+0x62>
 800b1e2:	e0a3      	b.n	800b32c <u8x8_d_ssd1306_sh1106_generic+0x184>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 800b1e4:	230a      	movs	r3, #10
 800b1e6:	18fb      	adds	r3, r7, r3
 800b1e8:	781b      	ldrb	r3, [r3, #0]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d106      	bne.n	800b1fc <u8x8_d_ssd1306_sh1106_generic+0x54>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 800b1ee:	4a53      	ldr	r2, [pc, #332]	; (800b33c <u8x8_d_ssd1306_sh1106_generic+0x194>)
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	0011      	movs	r1, r2
 800b1f4:	0018      	movs	r0, r3
 800b1f6:	f7ff feb9 	bl	800af6c <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 800b1fa:	e099      	b.n	800b330 <u8x8_d_ssd1306_sh1106_generic+0x188>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 800b1fc:	4a50      	ldr	r2, [pc, #320]	; (800b340 <u8x8_d_ssd1306_sh1106_generic+0x198>)
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	0011      	movs	r1, r2
 800b202:	0018      	movs	r0, r3
 800b204:	f7ff feb2 	bl	800af6c <u8x8_cad_SendSequence>
      break;
 800b208:	e092      	b.n	800b330 <u8x8_d_ssd1306_sh1106_generic+0x188>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 800b20a:	230a      	movs	r3, #10
 800b20c:	18fb      	adds	r3, r7, r3
 800b20e:	781b      	ldrb	r3, [r3, #0]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d10c      	bne.n	800b22e <u8x8_d_ssd1306_sh1106_generic+0x86>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 800b214:	4a4b      	ldr	r2, [pc, #300]	; (800b344 <u8x8_d_ssd1306_sh1106_generic+0x19c>)
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	0011      	movs	r1, r2
 800b21a:	0018      	movs	r0, r3
 800b21c:	f7ff fea6 	bl	800af6c <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	7c99      	ldrb	r1, [r3, #18]
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	2222      	movs	r2, #34	; 0x22
 800b22a:	5499      	strb	r1, [r3, r2]
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 800b22c:	e080      	b.n	800b330 <u8x8_d_ssd1306_sh1106_generic+0x188>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 800b22e:	4a46      	ldr	r2, [pc, #280]	; (800b348 <u8x8_d_ssd1306_sh1106_generic+0x1a0>)
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	0011      	movs	r1, r2
 800b234:	0018      	movs	r0, r3
 800b236:	f7ff fe99 	bl	800af6c <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	7cd9      	ldrb	r1, [r3, #19]
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	2222      	movs	r2, #34	; 0x22
 800b244:	5499      	strb	r1, [r3, r2]
      break;
 800b246:	e073      	b.n	800b330 <u8x8_d_ssd1306_sh1106_generic+0x188>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	0018      	movs	r0, r3
 800b24c:	f7ff fe6e 	bl	800af2c <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	2181      	movs	r1, #129	; 0x81
 800b254:	0018      	movs	r0, r3
 800b256:	f7ff fe2a 	bl	800aeae <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 800b25a:	230a      	movs	r3, #10
 800b25c:	18fb      	adds	r3, r7, r3
 800b25e:	781a      	ldrb	r2, [r3, #0]
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	0011      	movs	r1, r2
 800b264:	0018      	movs	r0, r3
 800b266:	f7ff fe36 	bl	800aed6 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	0018      	movs	r0, r3
 800b26e:	f7ff fe6d 	bl	800af4c <u8x8_cad_EndTransfer>
      break;
 800b272:	e05d      	b.n	800b330 <u8x8_d_ssd1306_sh1106_generic+0x188>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	0018      	movs	r0, r3
 800b278:	f7ff fe58 	bl	800af2c <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 800b27c:	2417      	movs	r4, #23
 800b27e:	193b      	adds	r3, r7, r4
 800b280:	687a      	ldr	r2, [r7, #4]
 800b282:	7952      	ldrb	r2, [r2, #5]
 800b284:	701a      	strb	r2, [r3, #0]
      x *= 8;
 800b286:	193b      	adds	r3, r7, r4
 800b288:	193a      	adds	r2, r7, r4
 800b28a:	7812      	ldrb	r2, [r2, #0]
 800b28c:	00d2      	lsls	r2, r2, #3
 800b28e:	701a      	strb	r2, [r3, #0]
      x += u8x8->x_offset;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	2222      	movs	r2, #34	; 0x22
 800b294:	5c99      	ldrb	r1, [r3, r2]
 800b296:	193b      	adds	r3, r7, r4
 800b298:	193a      	adds	r2, r7, r4
 800b29a:	7812      	ldrb	r2, [r2, #0]
 800b29c:	188a      	adds	r2, r1, r2
 800b29e:	701a      	strb	r2, [r3, #0]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	2140      	movs	r1, #64	; 0x40
 800b2a4:	0018      	movs	r0, r3
 800b2a6:	f7ff fe02 	bl	800aeae <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 800b2aa:	193b      	adds	r3, r7, r4
 800b2ac:	781b      	ldrb	r3, [r3, #0]
 800b2ae:	091b      	lsrs	r3, r3, #4
 800b2b0:	b2db      	uxtb	r3, r3
 800b2b2:	2210      	movs	r2, #16
 800b2b4:	4313      	orrs	r3, r2
 800b2b6:	b2da      	uxtb	r2, r3
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	0011      	movs	r1, r2
 800b2bc:	0018      	movs	r0, r3
 800b2be:	f7ff fdf6 	bl	800aeae <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 800b2c2:	193b      	adds	r3, r7, r4
 800b2c4:	781b      	ldrb	r3, [r3, #0]
 800b2c6:	220f      	movs	r2, #15
 800b2c8:	4013      	ands	r3, r2
 800b2ca:	b2da      	uxtb	r2, r3
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	0011      	movs	r1, r2
 800b2d0:	0018      	movs	r0, r3
 800b2d2:	f7ff fe00 	bl	800aed6 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	799b      	ldrb	r3, [r3, #6]
 800b2da:	2250      	movs	r2, #80	; 0x50
 800b2dc:	4252      	negs	r2, r2
 800b2de:	4313      	orrs	r3, r2
 800b2e0:	b2da      	uxtb	r2, r3
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	0011      	movs	r1, r2
 800b2e6:	0018      	movs	r0, r3
 800b2e8:	f7ff fdf5 	bl	800aed6 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 800b2ec:	2116      	movs	r1, #22
 800b2ee:	187b      	adds	r3, r7, r1
 800b2f0:	687a      	ldr	r2, [r7, #4]
 800b2f2:	7912      	ldrb	r2, [r2, #4]
 800b2f4:	701a      	strb	r2, [r3, #0]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 800b2fc:	187b      	adds	r3, r7, r1
 800b2fe:	781b      	ldrb	r3, [r3, #0]
 800b300:	00db      	lsls	r3, r3, #3
 800b302:	b2d9      	uxtb	r1, r3
 800b304:	693a      	ldr	r2, [r7, #16]
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	0018      	movs	r0, r3
 800b30a:	f7ff fdf8 	bl	800aefe <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 800b30e:	210a      	movs	r1, #10
 800b310:	187b      	adds	r3, r7, r1
 800b312:	781a      	ldrb	r2, [r3, #0]
 800b314:	187b      	adds	r3, r7, r1
 800b316:	3a01      	subs	r2, #1
 800b318:	701a      	strb	r2, [r3, #0]
      } while( arg_int > 0 );
 800b31a:	187b      	adds	r3, r7, r1
 800b31c:	781b      	ldrb	r3, [r3, #0]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d1e4      	bne.n	800b2ec <u8x8_d_ssd1306_sh1106_generic+0x144>
      
      u8x8_cad_EndTransfer(u8x8);
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	0018      	movs	r0, r3
 800b326:	f7ff fe11 	bl	800af4c <u8x8_cad_EndTransfer>
      break;
 800b32a:	e001      	b.n	800b330 <u8x8_d_ssd1306_sh1106_generic+0x188>
    default:
      return 0;
 800b32c:	2300      	movs	r3, #0
 800b32e:	e000      	b.n	800b332 <u8x8_d_ssd1306_sh1106_generic+0x18a>
  }
  return 1;
 800b330:	2301      	movs	r3, #1
}
 800b332:	0018      	movs	r0, r3
 800b334:	46bd      	mov	sp, r7
 800b336:	b007      	add	sp, #28
 800b338:	bd90      	pop	{r4, r7, pc}
 800b33a:	46c0      	nop			; (mov r8, r8)
 800b33c:	080139bc 	.word	0x080139bc
 800b340:	080139c4 	.word	0x080139c4
 800b344:	080139cc 	.word	0x080139cc
 800b348:	080139d4 	.word	0x080139d4

0800b34c <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800b34c:	b5b0      	push	{r4, r5, r7, lr}
 800b34e:	b084      	sub	sp, #16
 800b350:	af00      	add	r7, sp, #0
 800b352:	60f8      	str	r0, [r7, #12]
 800b354:	0008      	movs	r0, r1
 800b356:	0011      	movs	r1, r2
 800b358:	607b      	str	r3, [r7, #4]
 800b35a:	250b      	movs	r5, #11
 800b35c:	197b      	adds	r3, r7, r5
 800b35e:	1c02      	adds	r2, r0, #0
 800b360:	701a      	strb	r2, [r3, #0]
 800b362:	200a      	movs	r0, #10
 800b364:	183b      	adds	r3, r7, r0
 800b366:	1c0a      	adds	r2, r1, #0
 800b368:	701a      	strb	r2, [r3, #0]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 800b36a:	687c      	ldr	r4, [r7, #4]
 800b36c:	183b      	adds	r3, r7, r0
 800b36e:	781a      	ldrb	r2, [r3, #0]
 800b370:	197b      	adds	r3, r7, r5
 800b372:	7819      	ldrb	r1, [r3, #0]
 800b374:	68f8      	ldr	r0, [r7, #12]
 800b376:	0023      	movs	r3, r4
 800b378:	f7ff ff16 	bl	800b1a8 <u8x8_d_ssd1306_sh1106_generic>
 800b37c:	1e03      	subs	r3, r0, #0
 800b37e:	d001      	beq.n	800b384 <u8x8_d_ssd1306_128x64_noname+0x38>
    return 1;
 800b380:	2301      	movs	r3, #1
 800b382:	e01b      	b.n	800b3bc <u8x8_d_ssd1306_128x64_noname+0x70>
  
  switch(msg)
 800b384:	230b      	movs	r3, #11
 800b386:	18fb      	adds	r3, r7, r3
 800b388:	781b      	ldrb	r3, [r3, #0]
 800b38a:	2b09      	cmp	r3, #9
 800b38c:	d00c      	beq.n	800b3a8 <u8x8_d_ssd1306_128x64_noname+0x5c>
 800b38e:	2b0a      	cmp	r3, #10
 800b390:	d111      	bne.n	800b3b6 <u8x8_d_ssd1306_128x64_noname+0x6a>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	0018      	movs	r0, r3
 800b396:	f000 f82b 	bl	800b3f0 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 800b39a:	4a0a      	ldr	r2, [pc, #40]	; (800b3c4 <u8x8_d_ssd1306_128x64_noname+0x78>)
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	0011      	movs	r1, r2
 800b3a0:	0018      	movs	r0, r3
 800b3a2:	f7ff fde3 	bl	800af6c <u8x8_cad_SendSequence>
      break;
 800b3a6:	e008      	b.n	800b3ba <u8x8_d_ssd1306_128x64_noname+0x6e>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 800b3a8:	4a07      	ldr	r2, [pc, #28]	; (800b3c8 <u8x8_d_ssd1306_128x64_noname+0x7c>)
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	0011      	movs	r1, r2
 800b3ae:	0018      	movs	r0, r3
 800b3b0:	f000 f80c 	bl	800b3cc <u8x8_d_helper_display_setup_memory>
      break;
 800b3b4:	e001      	b.n	800b3ba <u8x8_d_ssd1306_128x64_noname+0x6e>
    default:
      return 0;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	e000      	b.n	800b3bc <u8x8_d_ssd1306_128x64_noname+0x70>
  }
  return 1;
 800b3ba:	2301      	movs	r3, #1
}
 800b3bc:	0018      	movs	r0, r3
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	b004      	add	sp, #16
 800b3c2:	bdb0      	pop	{r4, r5, r7, pc}
 800b3c4:	08013984 	.word	0x08013984
 800b3c8:	080139dc 	.word	0x080139dc

0800b3cc <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b082      	sub	sp, #8
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
 800b3d4:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	683a      	ldr	r2, [r7, #0]
 800b3da:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	7c99      	ldrb	r1, [r3, #18]
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2222      	movs	r2, #34	; 0x22
 800b3e6:	5499      	strb	r1, [r3, r2]
}
 800b3e8:	46c0      	nop			; (mov r8, r8)
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	b002      	add	sp, #8
 800b3ee:	bd80      	pop	{r7, pc}

0800b3f0 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 800b3f0:	b590      	push	{r4, r7, lr}
 800b3f2:	b083      	sub	sp, #12
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	695c      	ldr	r4, [r3, #20]
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	2300      	movs	r3, #0
 800b400:	2200      	movs	r2, #0
 800b402:	2128      	movs	r1, #40	; 0x28
 800b404:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	68dc      	ldr	r4, [r3, #12]
 800b40a:	6878      	ldr	r0, [r7, #4]
 800b40c:	2300      	movs	r3, #0
 800b40e:	2200      	movs	r2, #0
 800b410:	2114      	movs	r1, #20
 800b412:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2201      	movs	r2, #1
 800b418:	214b      	movs	r1, #75	; 0x4b
 800b41a:	0018      	movs	r0, r3
 800b41c:	f000 f894 	bl	800b548 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	791a      	ldrb	r2, [r3, #4]
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2129      	movs	r1, #41	; 0x29
 800b42a:	0018      	movs	r0, r3
 800b42c:	f000 f88c 	bl	800b548 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2200      	movs	r2, #0
 800b434:	214b      	movs	r1, #75	; 0x4b
 800b436:	0018      	movs	r0, r3
 800b438:	f000 f886 	bl	800b548 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	791a      	ldrb	r2, [r3, #4]
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2129      	movs	r1, #41	; 0x29
 800b446:	0018      	movs	r0, r3
 800b448:	f000 f87e 	bl	800b548 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2201      	movs	r2, #1
 800b450:	214b      	movs	r1, #75	; 0x4b
 800b452:	0018      	movs	r0, r3
 800b454:	f000 f878 	bl	800b548 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	795a      	ldrb	r2, [r3, #5]
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2129      	movs	r1, #41	; 0x29
 800b462:	0018      	movs	r0, r3
 800b464:	f000 f870 	bl	800b548 <u8x8_gpio_call>
}    
 800b468:	46c0      	nop			; (mov r8, r8)
 800b46a:	46bd      	mov	sp, r7
 800b46c:	b003      	add	sp, #12
 800b46e:	bd90      	pop	{r4, r7, pc}

0800b470 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 800b470:	b590      	push	{r4, r7, lr}
 800b472:	b085      	sub	sp, #20
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
 800b478:	000c      	movs	r4, r1
 800b47a:	0010      	movs	r0, r2
 800b47c:	0019      	movs	r1, r3
 800b47e:	1cfb      	adds	r3, r7, #3
 800b480:	1c22      	adds	r2, r4, #0
 800b482:	701a      	strb	r2, [r3, #0]
 800b484:	1cbb      	adds	r3, r7, #2
 800b486:	1c02      	adds	r2, r0, #0
 800b488:	701a      	strb	r2, [r3, #0]
 800b48a:	1c7b      	adds	r3, r7, #1
 800b48c:	1c0a      	adds	r2, r1, #0
 800b48e:	701a      	strb	r2, [r3, #0]
  u8x8_tile_t tile;
  tile.x_pos = x;
 800b490:	2108      	movs	r1, #8
 800b492:	187b      	adds	r3, r7, r1
 800b494:	1cfa      	adds	r2, r7, #3
 800b496:	7812      	ldrb	r2, [r2, #0]
 800b498:	715a      	strb	r2, [r3, #5]
  tile.y_pos = y;
 800b49a:	187b      	adds	r3, r7, r1
 800b49c:	1cba      	adds	r2, r7, #2
 800b49e:	7812      	ldrb	r2, [r2, #0]
 800b4a0:	719a      	strb	r2, [r3, #6]
  tile.cnt = cnt;
 800b4a2:	187b      	adds	r3, r7, r1
 800b4a4:	1c7a      	adds	r2, r7, #1
 800b4a6:	7812      	ldrb	r2, [r2, #0]
 800b4a8:	711a      	strb	r2, [r3, #4]
  tile.tile_ptr = tile_ptr;
 800b4aa:	187b      	adds	r3, r7, r1
 800b4ac:	6a3a      	ldr	r2, [r7, #32]
 800b4ae:	601a      	str	r2, [r3, #0]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	689c      	ldr	r4, [r3, #8]
 800b4b4:	187b      	adds	r3, r7, r1
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	2201      	movs	r2, #1
 800b4ba:	210f      	movs	r1, #15
 800b4bc:	47a0      	blx	r4
 800b4be:	0003      	movs	r3, r0
}
 800b4c0:	0018      	movs	r0, r3
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	b005      	add	sp, #20
 800b4c6:	bd90      	pop	{r4, r7, pc}

0800b4c8 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 800b4c8:	b590      	push	{r4, r7, lr}
 800b4ca:	b083      	sub	sp, #12
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	689c      	ldr	r4, [r3, #8]
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	2200      	movs	r2, #0
 800b4da:	2109      	movs	r1, #9
 800b4dc:	47a0      	blx	r4
}
 800b4de:	46c0      	nop			; (mov r8, r8)
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	b003      	add	sp, #12
 800b4e4:	bd90      	pop	{r4, r7, pc}

0800b4e6 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 800b4e6:	b590      	push	{r4, r7, lr}
 800b4e8:	b083      	sub	sp, #12
 800b4ea:	af00      	add	r7, sp, #0
 800b4ec:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	689c      	ldr	r4, [r3, #8]
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	210a      	movs	r1, #10
 800b4fa:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 800b4fc:	46c0      	nop			; (mov r8, r8)
 800b4fe:	46bd      	mov	sp, r7
 800b500:	b003      	add	sp, #12
 800b502:	bd90      	pop	{r4, r7, pc}

0800b504 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 800b504:	b590      	push	{r4, r7, lr}
 800b506:	b083      	sub	sp, #12
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
 800b50c:	000a      	movs	r2, r1
 800b50e:	1cfb      	adds	r3, r7, #3
 800b510:	701a      	strb	r2, [r3, #0]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	689c      	ldr	r4, [r3, #8]
 800b516:	1cfb      	adds	r3, r7, #3
 800b518:	781a      	ldrb	r2, [r3, #0]
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	2300      	movs	r3, #0
 800b51e:	210b      	movs	r1, #11
 800b520:	47a0      	blx	r4
}
 800b522:	46c0      	nop			; (mov r8, r8)
 800b524:	46bd      	mov	sp, r7
 800b526:	b003      	add	sp, #12
 800b528:	bd90      	pop	{r4, r7, pc}

0800b52a <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 800b52a:	b590      	push	{r4, r7, lr}
 800b52c:	b083      	sub	sp, #12
 800b52e:	af00      	add	r7, sp, #0
 800b530:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	689c      	ldr	r4, [r3, #8]
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	2300      	movs	r3, #0
 800b53a:	2200      	movs	r2, #0
 800b53c:	2110      	movs	r1, #16
 800b53e:	47a0      	blx	r4
}
 800b540:	46c0      	nop			; (mov r8, r8)
 800b542:	46bd      	mov	sp, r7
 800b544:	b003      	add	sp, #12
 800b546:	bd90      	pop	{r4, r7, pc}

0800b548 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 800b548:	b590      	push	{r4, r7, lr}
 800b54a:	b083      	sub	sp, #12
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
 800b550:	0008      	movs	r0, r1
 800b552:	0011      	movs	r1, r2
 800b554:	1cfb      	adds	r3, r7, #3
 800b556:	1c02      	adds	r2, r0, #0
 800b558:	701a      	strb	r2, [r3, #0]
 800b55a:	1cbb      	adds	r3, r7, #2
 800b55c:	1c0a      	adds	r2, r1, #0
 800b55e:	701a      	strb	r2, [r3, #0]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	695c      	ldr	r4, [r3, #20]
 800b564:	1cbb      	adds	r3, r7, #2
 800b566:	781a      	ldrb	r2, [r3, #0]
 800b568:	1cfb      	adds	r3, r7, #3
 800b56a:	7819      	ldrb	r1, [r3, #0]
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	2300      	movs	r3, #0
 800b570:	47a0      	blx	r4
}
 800b572:	46c0      	nop			; (mov r8, r8)
 800b574:	46bd      	mov	sp, r7
 800b576:	b003      	add	sp, #12
 800b578:	bd90      	pop	{r4, r7, pc}

0800b57a <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 800b57a:	b580      	push	{r7, lr}
 800b57c:	b084      	sub	sp, #16
 800b57e:	af00      	add	r7, sp, #0
 800b580:	60f8      	str	r0, [r7, #12]
 800b582:	0008      	movs	r0, r1
 800b584:	0011      	movs	r1, r2
 800b586:	607b      	str	r3, [r7, #4]
 800b588:	230b      	movs	r3, #11
 800b58a:	18fb      	adds	r3, r7, r3
 800b58c:	1c02      	adds	r2, r0, #0
 800b58e:	701a      	strb	r2, [r3, #0]
 800b590:	230a      	movs	r3, #10
 800b592:	18fb      	adds	r3, r7, r3
 800b594:	1c0a      	adds	r2, r1, #0
 800b596:	701a      	strb	r2, [r3, #0]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 800b598:	2300      	movs	r3, #0
}
 800b59a:	0018      	movs	r0, r3
 800b59c:	46bd      	mov	sp, r7
 800b59e:	b004      	add	sp, #16
 800b5a0:	bd80      	pop	{r7, pc}
	...

0800b5a4 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b082      	sub	sp, #8
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	4a10      	ldr	r2, [pc, #64]	; (800b5f8 <u8x8_SetupDefaults+0x54>)
 800b5b6:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	4a0f      	ldr	r2, [pc, #60]	; (800b5f8 <u8x8_SetupDefaults+0x54>)
 800b5bc:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	4a0d      	ldr	r2, [pc, #52]	; (800b5f8 <u8x8_SetupDefaults+0x54>)
 800b5c2:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	4a0c      	ldr	r2, [pc, #48]	; (800b5f8 <u8x8_SetupDefaults+0x54>)
 800b5c8:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2223      	movs	r2, #35	; 0x23
 800b5ce:	2100      	movs	r1, #0
 800b5d0:	5499      	strb	r1, [r3, r2]
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2226      	movs	r2, #38	; 0x26
 800b5d6:	2100      	movs	r1, #0
 800b5d8:	5499      	strb	r1, [r3, r2]
    u8x8->bus_clock = 0;		/* issue 769 */
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2200      	movs	r2, #0
 800b5de:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2224      	movs	r2, #36	; 0x24
 800b5e4:	21ff      	movs	r1, #255	; 0xff
 800b5e6:	5499      	strb	r1, [r3, r2]
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2228      	movs	r2, #40	; 0x28
 800b5ec:	21ff      	movs	r1, #255	; 0xff
 800b5ee:	5499      	strb	r1, [r3, r2]
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 800b5f0:	46c0      	nop			; (mov r8, r8)
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	b002      	add	sp, #8
 800b5f6:	bd80      	pop	{r7, pc}
 800b5f8:	0800b57b 	.word	0x0800b57b

0800b5fc <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b084      	sub	sp, #16
 800b600:	af00      	add	r7, sp, #0
 800b602:	60f8      	str	r0, [r7, #12]
 800b604:	60b9      	str	r1, [r7, #8]
 800b606:	607a      	str	r2, [r7, #4]
 800b608:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	0018      	movs	r0, r3
 800b60e:	f7ff ffc9 	bl	800b5a4 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	68ba      	ldr	r2, [r7, #8]
 800b616:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	687a      	ldr	r2, [r7, #4]
 800b61c:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	683a      	ldr	r2, [r7, #0]
 800b622:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	69ba      	ldr	r2, [r7, #24]
 800b628:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	0018      	movs	r0, r3
 800b62e:	f7ff ff4b 	bl	800b4c8 <u8x8_SetupMemory>
}
 800b632:	46c0      	nop			; (mov r8, r8)
 800b634:	46bd      	mov	sp, r7
 800b636:	b004      	add	sp, #16
 800b638:	bd80      	pop	{r7, pc}
	...

0800b63c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b084      	sub	sp, #16
 800b640:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b642:	f3ef 8305 	mrs	r3, IPSR
 800b646:	60bb      	str	r3, [r7, #8]
  return(result);
 800b648:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d109      	bne.n	800b662 <osKernelInitialize+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b64e:	f3ef 8310 	mrs	r3, PRIMASK
 800b652:	607b      	str	r3, [r7, #4]
  return(result);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d007      	beq.n	800b66a <osKernelInitialize+0x2e>
 800b65a:	4b0d      	ldr	r3, [pc, #52]	; (800b690 <osKernelInitialize+0x54>)
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	2b02      	cmp	r3, #2
 800b660:	d103      	bne.n	800b66a <osKernelInitialize+0x2e>
    stat = osErrorISR;
 800b662:	2306      	movs	r3, #6
 800b664:	425b      	negs	r3, r3
 800b666:	60fb      	str	r3, [r7, #12]
 800b668:	e00c      	b.n	800b684 <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b66a:	4b09      	ldr	r3, [pc, #36]	; (800b690 <osKernelInitialize+0x54>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d105      	bne.n	800b67e <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800b672:	4b07      	ldr	r3, [pc, #28]	; (800b690 <osKernelInitialize+0x54>)
 800b674:	2201      	movs	r2, #1
 800b676:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b678:	2300      	movs	r3, #0
 800b67a:	60fb      	str	r3, [r7, #12]
 800b67c:	e002      	b.n	800b684 <osKernelInitialize+0x48>
    } else {
      stat = osError;
 800b67e:	2301      	movs	r3, #1
 800b680:	425b      	negs	r3, r3
 800b682:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b684:	68fb      	ldr	r3, [r7, #12]
}
 800b686:	0018      	movs	r0, r3
 800b688:	46bd      	mov	sp, r7
 800b68a:	b004      	add	sp, #16
 800b68c:	bd80      	pop	{r7, pc}
 800b68e:	46c0      	nop			; (mov r8, r8)
 800b690:	200006b0 	.word	0x200006b0

0800b694 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b694:	b580      	push	{r7, lr}
 800b696:	b084      	sub	sp, #16
 800b698:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b69a:	f3ef 8305 	mrs	r3, IPSR
 800b69e:	60bb      	str	r3, [r7, #8]
  return(result);
 800b6a0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d109      	bne.n	800b6ba <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b6a6:	f3ef 8310 	mrs	r3, PRIMASK
 800b6aa:	607b      	str	r3, [r7, #4]
  return(result);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d007      	beq.n	800b6c2 <osKernelStart+0x2e>
 800b6b2:	4b0e      	ldr	r3, [pc, #56]	; (800b6ec <osKernelStart+0x58>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	2b02      	cmp	r3, #2
 800b6b8:	d103      	bne.n	800b6c2 <osKernelStart+0x2e>
    stat = osErrorISR;
 800b6ba:	2306      	movs	r3, #6
 800b6bc:	425b      	negs	r3, r3
 800b6be:	60fb      	str	r3, [r7, #12]
 800b6c0:	e00e      	b.n	800b6e0 <osKernelStart+0x4c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b6c2:	4b0a      	ldr	r3, [pc, #40]	; (800b6ec <osKernelStart+0x58>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	2b01      	cmp	r3, #1
 800b6c8:	d107      	bne.n	800b6da <osKernelStart+0x46>
      KernelState = osKernelRunning;
 800b6ca:	4b08      	ldr	r3, [pc, #32]	; (800b6ec <osKernelStart+0x58>)
 800b6cc:	2202      	movs	r2, #2
 800b6ce:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800b6d0:	f001 fe4e 	bl	800d370 <vTaskStartScheduler>
      stat = osOK;
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	60fb      	str	r3, [r7, #12]
 800b6d8:	e002      	b.n	800b6e0 <osKernelStart+0x4c>
    } else {
      stat = osError;
 800b6da:	2301      	movs	r3, #1
 800b6dc:	425b      	negs	r3, r3
 800b6de:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b6e0:	68fb      	ldr	r3, [r7, #12]
}
 800b6e2:	0018      	movs	r0, r3
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	b004      	add	sp, #16
 800b6e8:	bd80      	pop	{r7, pc}
 800b6ea:	46c0      	nop			; (mov r8, r8)
 800b6ec:	200006b0 	.word	0x200006b0

0800b6f0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b6f0:	b5b0      	push	{r4, r5, r7, lr}
 800b6f2:	b090      	sub	sp, #64	; 0x40
 800b6f4:	af04      	add	r7, sp, #16
 800b6f6:	60f8      	str	r0, [r7, #12]
 800b6f8:	60b9      	str	r1, [r7, #8]
 800b6fa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b700:	f3ef 8305 	mrs	r3, IPSR
 800b704:	61fb      	str	r3, [r7, #28]
  return(result);
 800b706:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d000      	beq.n	800b70e <osThreadNew+0x1e>
 800b70c:	e090      	b.n	800b830 <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b70e:	f3ef 8310 	mrs	r3, PRIMASK
 800b712:	61bb      	str	r3, [r7, #24]
  return(result);
 800b714:	69bb      	ldr	r3, [r7, #24]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d004      	beq.n	800b724 <osThreadNew+0x34>
 800b71a:	4b48      	ldr	r3, [pc, #288]	; (800b83c <osThreadNew+0x14c>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	2b02      	cmp	r3, #2
 800b720:	d100      	bne.n	800b724 <osThreadNew+0x34>
 800b722:	e085      	b.n	800b830 <osThreadNew+0x140>
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d100      	bne.n	800b72c <osThreadNew+0x3c>
 800b72a:	e081      	b.n	800b830 <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 800b72c:	2340      	movs	r3, #64	; 0x40
 800b72e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800b730:	2318      	movs	r3, #24
 800b732:	627b      	str	r3, [r7, #36]	; 0x24

    empty = '\0';
 800b734:	2117      	movs	r1, #23
 800b736:	187b      	adds	r3, r7, r1
 800b738:	2200      	movs	r2, #0
 800b73a:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 800b73c:	187b      	adds	r3, r7, r1
 800b73e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem   = -1;
 800b740:	2301      	movs	r3, #1
 800b742:	425b      	negs	r3, r3
 800b744:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d044      	beq.n	800b7d6 <osThreadNew+0xe6>
      if (attr->name != NULL) {
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d002      	beq.n	800b75a <osThreadNew+0x6a>
        name = attr->name;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	699b      	ldr	r3, [r3, #24]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d002      	beq.n	800b768 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	699b      	ldr	r3, [r3, #24]
 800b766:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d007      	beq.n	800b77e <osThreadNew+0x8e>
 800b76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b770:	2b38      	cmp	r3, #56	; 0x38
 800b772:	d804      	bhi.n	800b77e <osThreadNew+0x8e>
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	685b      	ldr	r3, [r3, #4]
 800b778:	2201      	movs	r2, #1
 800b77a:	4013      	ands	r3, r2
 800b77c:	d001      	beq.n	800b782 <osThreadNew+0x92>
        return (NULL);
 800b77e:	2300      	movs	r3, #0
 800b780:	e057      	b.n	800b832 <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	695b      	ldr	r3, [r3, #20]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d003      	beq.n	800b792 <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	695b      	ldr	r3, [r3, #20]
 800b78e:	089b      	lsrs	r3, r3, #2
 800b790:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	689b      	ldr	r3, [r3, #8]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d00e      	beq.n	800b7b8 <osThreadNew+0xc8>
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	68db      	ldr	r3, [r3, #12]
 800b79e:	2bbb      	cmp	r3, #187	; 0xbb
 800b7a0:	d90a      	bls.n	800b7b8 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d006      	beq.n	800b7b8 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	695b      	ldr	r3, [r3, #20]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d002      	beq.n	800b7b8 <osThreadNew+0xc8>
        mem = 1;
 800b7b2:	2301      	movs	r3, #1
 800b7b4:	623b      	str	r3, [r7, #32]
 800b7b6:	e010      	b.n	800b7da <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	689b      	ldr	r3, [r3, #8]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d10c      	bne.n	800b7da <osThreadNew+0xea>
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	68db      	ldr	r3, [r3, #12]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d108      	bne.n	800b7da <osThreadNew+0xea>
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	691b      	ldr	r3, [r3, #16]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d104      	bne.n	800b7da <osThreadNew+0xea>
          mem = 0;
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	623b      	str	r3, [r7, #32]
 800b7d4:	e001      	b.n	800b7da <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800b7da:	6a3b      	ldr	r3, [r7, #32]
 800b7dc:	2b01      	cmp	r3, #1
 800b7de:	d112      	bne.n	800b806 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b7e8:	68bd      	ldr	r5, [r7, #8]
 800b7ea:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800b7ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b7ee:	68f8      	ldr	r0, [r7, #12]
 800b7f0:	9302      	str	r3, [sp, #8]
 800b7f2:	9201      	str	r2, [sp, #4]
 800b7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f6:	9300      	str	r3, [sp, #0]
 800b7f8:	002b      	movs	r3, r5
 800b7fa:	0022      	movs	r2, r4
 800b7fc:	f001 fb1f 	bl	800ce3e <xTaskCreateStatic>
 800b800:	0003      	movs	r3, r0
 800b802:	613b      	str	r3, [r7, #16]
 800b804:	e014      	b.n	800b830 <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 800b806:	6a3b      	ldr	r3, [r7, #32]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d111      	bne.n	800b830 <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b80e:	b29a      	uxth	r2, r3
 800b810:	68bc      	ldr	r4, [r7, #8]
 800b812:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b814:	68f8      	ldr	r0, [r7, #12]
 800b816:	2310      	movs	r3, #16
 800b818:	18fb      	adds	r3, r7, r3
 800b81a:	9301      	str	r3, [sp, #4]
 800b81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b81e:	9300      	str	r3, [sp, #0]
 800b820:	0023      	movs	r3, r4
 800b822:	f001 fb4f 	bl	800cec4 <xTaskCreate>
 800b826:	0003      	movs	r3, r0
 800b828:	2b01      	cmp	r3, #1
 800b82a:	d001      	beq.n	800b830 <osThreadNew+0x140>
          hTask = NULL;
 800b82c:	2300      	movs	r3, #0
 800b82e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b830:	693b      	ldr	r3, [r7, #16]
}
 800b832:	0018      	movs	r0, r3
 800b834:	46bd      	mov	sp, r7
 800b836:	b00c      	add	sp, #48	; 0x30
 800b838:	bdb0      	pop	{r4, r5, r7, pc}
 800b83a:	46c0      	nop			; (mov r8, r8)
 800b83c:	200006b0 	.word	0x200006b0

0800b840 <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 800b840:	b580      	push	{r7, lr}
 800b842:	b086      	sub	sp, #24
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b84c:	f3ef 8305 	mrs	r3, IPSR
 800b850:	60fb      	str	r3, [r7, #12]
  return(result);
 800b852:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b854:	2b00      	cmp	r3, #0
 800b856:	d109      	bne.n	800b86c <osThreadSuspend+0x2c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b858:	f3ef 8310 	mrs	r3, PRIMASK
 800b85c:	60bb      	str	r3, [r7, #8]
  return(result);
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d007      	beq.n	800b874 <osThreadSuspend+0x34>
 800b864:	4b0c      	ldr	r3, [pc, #48]	; (800b898 <osThreadSuspend+0x58>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	2b02      	cmp	r3, #2
 800b86a:	d103      	bne.n	800b874 <osThreadSuspend+0x34>
    stat = osErrorISR;
 800b86c:	2306      	movs	r3, #6
 800b86e:	425b      	negs	r3, r3
 800b870:	617b      	str	r3, [r7, #20]
 800b872:	e00c      	b.n	800b88e <osThreadSuspend+0x4e>
  }
  else if (hTask == NULL) {
 800b874:	693b      	ldr	r3, [r7, #16]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d103      	bne.n	800b882 <osThreadSuspend+0x42>
    stat = osErrorParameter;
 800b87a:	2304      	movs	r3, #4
 800b87c:	425b      	negs	r3, r3
 800b87e:	617b      	str	r3, [r7, #20]
 800b880:	e005      	b.n	800b88e <osThreadSuspend+0x4e>
  }
  else {
    stat = osOK;
 800b882:	2300      	movs	r3, #0
 800b884:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 800b886:	693b      	ldr	r3, [r7, #16]
 800b888:	0018      	movs	r0, r3
 800b88a:	f001 fc8d 	bl	800d1a8 <vTaskSuspend>
  }

  return (stat);
 800b88e:	697b      	ldr	r3, [r7, #20]
}
 800b890:	0018      	movs	r0, r3
 800b892:	46bd      	mov	sp, r7
 800b894:	b006      	add	sp, #24
 800b896:	bd80      	pop	{r7, pc}
 800b898:	200006b0 	.word	0x200006b0

0800b89c <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b086      	sub	sp, #24
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b8a8:	f3ef 8305 	mrs	r3, IPSR
 800b8ac:	60fb      	str	r3, [r7, #12]
  return(result);
 800b8ae:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d109      	bne.n	800b8c8 <osThreadResume+0x2c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b8b4:	f3ef 8310 	mrs	r3, PRIMASK
 800b8b8:	60bb      	str	r3, [r7, #8]
  return(result);
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d007      	beq.n	800b8d0 <osThreadResume+0x34>
 800b8c0:	4b0c      	ldr	r3, [pc, #48]	; (800b8f4 <osThreadResume+0x58>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	2b02      	cmp	r3, #2
 800b8c6:	d103      	bne.n	800b8d0 <osThreadResume+0x34>
    stat = osErrorISR;
 800b8c8:	2306      	movs	r3, #6
 800b8ca:	425b      	negs	r3, r3
 800b8cc:	617b      	str	r3, [r7, #20]
 800b8ce:	e00c      	b.n	800b8ea <osThreadResume+0x4e>
  }
  else if (hTask == NULL) {
 800b8d0:	693b      	ldr	r3, [r7, #16]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d103      	bne.n	800b8de <osThreadResume+0x42>
    stat = osErrorParameter;
 800b8d6:	2304      	movs	r3, #4
 800b8d8:	425b      	negs	r3, r3
 800b8da:	617b      	str	r3, [r7, #20]
 800b8dc:	e005      	b.n	800b8ea <osThreadResume+0x4e>
  }
  else {
    stat = osOK;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 800b8e2:	693b      	ldr	r3, [r7, #16]
 800b8e4:	0018      	movs	r0, r3
 800b8e6:	f001 fcf5 	bl	800d2d4 <vTaskResume>
  }

  return (stat);
 800b8ea:	697b      	ldr	r3, [r7, #20]
}
 800b8ec:	0018      	movs	r0, r3
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	b006      	add	sp, #24
 800b8f2:	bd80      	pop	{r7, pc}
 800b8f4:	200006b0 	.word	0x200006b0

0800b8f8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b086      	sub	sp, #24
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b900:	f3ef 8305 	mrs	r3, IPSR
 800b904:	613b      	str	r3, [r7, #16]
  return(result);
 800b906:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d109      	bne.n	800b920 <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b90c:	f3ef 8310 	mrs	r3, PRIMASK
 800b910:	60fb      	str	r3, [r7, #12]
  return(result);
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d007      	beq.n	800b928 <osDelay+0x30>
 800b918:	4b0a      	ldr	r3, [pc, #40]	; (800b944 <osDelay+0x4c>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	2b02      	cmp	r3, #2
 800b91e:	d103      	bne.n	800b928 <osDelay+0x30>
    stat = osErrorISR;
 800b920:	2306      	movs	r3, #6
 800b922:	425b      	negs	r3, r3
 800b924:	617b      	str	r3, [r7, #20]
 800b926:	e008      	b.n	800b93a <osDelay+0x42>
  }
  else {
    stat = osOK;
 800b928:	2300      	movs	r3, #0
 800b92a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d003      	beq.n	800b93a <osDelay+0x42>
      vTaskDelay(ticks);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	0018      	movs	r0, r3
 800b936:	f001 fc11 	bl	800d15c <vTaskDelay>
    }
  }

  return (stat);
 800b93a:	697b      	ldr	r3, [r7, #20]
}
 800b93c:	0018      	movs	r0, r3
 800b93e:	46bd      	mov	sp, r7
 800b940:	b006      	add	sp, #24
 800b942:	bd80      	pop	{r7, pc}
 800b944:	200006b0 	.word	0x200006b0

0800b948 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b948:	b580      	push	{r7, lr}
 800b94a:	b08c      	sub	sp, #48	; 0x30
 800b94c:	af02      	add	r7, sp, #8
 800b94e:	60f8      	str	r0, [r7, #12]
 800b950:	60b9      	str	r1, [r7, #8]
 800b952:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800b954:	2300      	movs	r3, #0
 800b956:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b958:	f3ef 8305 	mrs	r3, IPSR
 800b95c:	61bb      	str	r3, [r7, #24]
  return(result);
 800b95e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b960:	2b00      	cmp	r3, #0
 800b962:	d000      	beq.n	800b966 <osSemaphoreNew+0x1e>
 800b964:	e08a      	b.n	800ba7c <osSemaphoreNew+0x134>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b966:	f3ef 8310 	mrs	r3, PRIMASK
 800b96a:	617b      	str	r3, [r7, #20]
  return(result);
 800b96c:	697b      	ldr	r3, [r7, #20]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d004      	beq.n	800b97c <osSemaphoreNew+0x34>
 800b972:	4b45      	ldr	r3, [pc, #276]	; (800ba88 <osSemaphoreNew+0x140>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	2b02      	cmp	r3, #2
 800b978:	d100      	bne.n	800b97c <osSemaphoreNew+0x34>
 800b97a:	e07f      	b.n	800ba7c <osSemaphoreNew+0x134>
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d100      	bne.n	800b984 <osSemaphoreNew+0x3c>
 800b982:	e07b      	b.n	800ba7c <osSemaphoreNew+0x134>
 800b984:	68ba      	ldr	r2, [r7, #8]
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	429a      	cmp	r2, r3
 800b98a:	d900      	bls.n	800b98e <osSemaphoreNew+0x46>
 800b98c:	e076      	b.n	800ba7c <osSemaphoreNew+0x134>
    mem = -1;
 800b98e:	2301      	movs	r3, #1
 800b990:	425b      	negs	r3, r3
 800b992:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d015      	beq.n	800b9c6 <osSemaphoreNew+0x7e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	689b      	ldr	r3, [r3, #8]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d006      	beq.n	800b9b0 <osSemaphoreNew+0x68>
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	68db      	ldr	r3, [r3, #12]
 800b9a6:	2b4f      	cmp	r3, #79	; 0x4f
 800b9a8:	d902      	bls.n	800b9b0 <osSemaphoreNew+0x68>
        mem = 1;
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	623b      	str	r3, [r7, #32]
 800b9ae:	e00c      	b.n	800b9ca <osSemaphoreNew+0x82>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	689b      	ldr	r3, [r3, #8]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d108      	bne.n	800b9ca <osSemaphoreNew+0x82>
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	68db      	ldr	r3, [r3, #12]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d104      	bne.n	800b9ca <osSemaphoreNew+0x82>
          mem = 0;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	623b      	str	r3, [r7, #32]
 800b9c4:	e001      	b.n	800b9ca <osSemaphoreNew+0x82>
        }
      }
    }
    else {
      mem = 0;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800b9ca:	6a3b      	ldr	r3, [r7, #32]
 800b9cc:	3301      	adds	r3, #1
 800b9ce:	d055      	beq.n	800ba7c <osSemaphoreNew+0x134>
      if (max_count == 1U) {
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	2b01      	cmp	r3, #1
 800b9d4:	d12b      	bne.n	800ba2e <osSemaphoreNew+0xe6>
        if (mem == 1) {
 800b9d6:	6a3b      	ldr	r3, [r7, #32]
 800b9d8:	2b01      	cmp	r3, #1
 800b9da:	d10b      	bne.n	800b9f4 <osSemaphoreNew+0xac>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	689b      	ldr	r3, [r3, #8]
 800b9e0:	2203      	movs	r2, #3
 800b9e2:	9200      	str	r2, [sp, #0]
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	2100      	movs	r1, #0
 800b9e8:	2001      	movs	r0, #1
 800b9ea:	f000 fbb0 	bl	800c14e <xQueueGenericCreateStatic>
 800b9ee:	0003      	movs	r3, r0
 800b9f0:	627b      	str	r3, [r7, #36]	; 0x24
 800b9f2:	e006      	b.n	800ba02 <osSemaphoreNew+0xba>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800b9f4:	2203      	movs	r2, #3
 800b9f6:	2100      	movs	r1, #0
 800b9f8:	2001      	movs	r0, #1
 800b9fa:	f000 fbf3 	bl	800c1e4 <xQueueGenericCreate>
 800b9fe:	0003      	movs	r3, r0
 800ba00:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800ba02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d027      	beq.n	800ba58 <osSemaphoreNew+0x110>
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d024      	beq.n	800ba58 <osSemaphoreNew+0x110>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ba0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba10:	2300      	movs	r3, #0
 800ba12:	2200      	movs	r2, #0
 800ba14:	2100      	movs	r1, #0
 800ba16:	f000 fc8b 	bl	800c330 <xQueueGenericSend>
 800ba1a:	0003      	movs	r3, r0
 800ba1c:	2b01      	cmp	r3, #1
 800ba1e:	d01b      	beq.n	800ba58 <osSemaphoreNew+0x110>
            vSemaphoreDelete (hSemaphore);
 800ba20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba22:	0018      	movs	r0, r3
 800ba24:	f001 f836 	bl	800ca94 <vQueueDelete>
            hSemaphore = NULL;
 800ba28:	2300      	movs	r3, #0
 800ba2a:	627b      	str	r3, [r7, #36]	; 0x24
 800ba2c:	e014      	b.n	800ba58 <osSemaphoreNew+0x110>
          }
        }
      }
      else {
        if (mem == 1) {
 800ba2e:	6a3b      	ldr	r3, [r7, #32]
 800ba30:	2b01      	cmp	r3, #1
 800ba32:	d109      	bne.n	800ba48 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	689a      	ldr	r2, [r3, #8]
 800ba38:	68b9      	ldr	r1, [r7, #8]
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	0018      	movs	r0, r3
 800ba3e:	f000 fc2e 	bl	800c29e <xQueueCreateCountingSemaphoreStatic>
 800ba42:	0003      	movs	r3, r0
 800ba44:	627b      	str	r3, [r7, #36]	; 0x24
 800ba46:	e007      	b.n	800ba58 <osSemaphoreNew+0x110>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800ba48:	68ba      	ldr	r2, [r7, #8]
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	0011      	movs	r1, r2
 800ba4e:	0018      	movs	r0, r3
 800ba50:	f000 fc4b 	bl	800c2ea <xQueueCreateCountingSemaphore>
 800ba54:	0003      	movs	r3, r0
 800ba56:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800ba58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d00e      	beq.n	800ba7c <osSemaphoreNew+0x134>
        if (attr != NULL) {
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d003      	beq.n	800ba6c <osSemaphoreNew+0x124>
          name = attr->name;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	61fb      	str	r3, [r7, #28]
 800ba6a:	e001      	b.n	800ba70 <osSemaphoreNew+0x128>
        } else {
          name = NULL;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800ba70:	69fa      	ldr	r2, [r7, #28]
 800ba72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba74:	0011      	movs	r1, r2
 800ba76:	0018      	movs	r0, r3
 800ba78:	f001 f95c 	bl	800cd34 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800ba7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ba7e:	0018      	movs	r0, r3
 800ba80:	46bd      	mov	sp, r7
 800ba82:	b00a      	add	sp, #40	; 0x28
 800ba84:	bd80      	pop	{r7, pc}
 800ba86:	46c0      	nop			; (mov r8, r8)
 800ba88:	200006b0 	.word	0x200006b0

0800ba8c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b088      	sub	sp, #32
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
 800ba94:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800ba9e:	69bb      	ldr	r3, [r7, #24]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d103      	bne.n	800baac <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800baa4:	2304      	movs	r3, #4
 800baa6:	425b      	negs	r3, r3
 800baa8:	61fb      	str	r3, [r7, #28]
 800baaa:	e043      	b.n	800bb34 <osSemaphoreAcquire+0xa8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800baac:	f3ef 8305 	mrs	r3, IPSR
 800bab0:	617b      	str	r3, [r7, #20]
  return(result);
 800bab2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d109      	bne.n	800bacc <osSemaphoreAcquire+0x40>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bab8:	f3ef 8310 	mrs	r3, PRIMASK
 800babc:	613b      	str	r3, [r7, #16]
  return(result);
 800babe:	693b      	ldr	r3, [r7, #16]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d022      	beq.n	800bb0a <osSemaphoreAcquire+0x7e>
 800bac4:	4b1e      	ldr	r3, [pc, #120]	; (800bb40 <osSemaphoreAcquire+0xb4>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	2b02      	cmp	r3, #2
 800baca:	d11e      	bne.n	800bb0a <osSemaphoreAcquire+0x7e>
    if (timeout != 0U) {
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d003      	beq.n	800bada <osSemaphoreAcquire+0x4e>
      stat = osErrorParameter;
 800bad2:	2304      	movs	r3, #4
 800bad4:	425b      	negs	r3, r3
 800bad6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800bad8:	e02b      	b.n	800bb32 <osSemaphoreAcquire+0xa6>
    }
    else {
      yield = pdFALSE;
 800bada:	2300      	movs	r3, #0
 800badc:	60fb      	str	r3, [r7, #12]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800bade:	230c      	movs	r3, #12
 800bae0:	18fa      	adds	r2, r7, r3
 800bae2:	69bb      	ldr	r3, [r7, #24]
 800bae4:	2100      	movs	r1, #0
 800bae6:	0018      	movs	r0, r3
 800bae8:	f000 ff4b 	bl	800c982 <xQueueReceiveFromISR>
 800baec:	0003      	movs	r3, r0
 800baee:	2b01      	cmp	r3, #1
 800baf0:	d003      	beq.n	800bafa <osSemaphoreAcquire+0x6e>
        stat = osErrorResource;
 800baf2:	2303      	movs	r3, #3
 800baf4:	425b      	negs	r3, r3
 800baf6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800baf8:	e01b      	b.n	800bb32 <osSemaphoreAcquire+0xa6>
      } else {
        portYIELD_FROM_ISR (yield);
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d018      	beq.n	800bb32 <osSemaphoreAcquire+0xa6>
 800bb00:	4b10      	ldr	r3, [pc, #64]	; (800bb44 <osSemaphoreAcquire+0xb8>)
 800bb02:	2280      	movs	r2, #128	; 0x80
 800bb04:	0552      	lsls	r2, r2, #21
 800bb06:	601a      	str	r2, [r3, #0]
    if (timeout != 0U) {
 800bb08:	e013      	b.n	800bb32 <osSemaphoreAcquire+0xa6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800bb0a:	683a      	ldr	r2, [r7, #0]
 800bb0c:	69bb      	ldr	r3, [r7, #24]
 800bb0e:	0011      	movs	r1, r2
 800bb10:	0018      	movs	r0, r3
 800bb12:	f000 fe5c 	bl	800c7ce <xQueueSemaphoreTake>
 800bb16:	0003      	movs	r3, r0
 800bb18:	2b01      	cmp	r3, #1
 800bb1a:	d00b      	beq.n	800bb34 <osSemaphoreAcquire+0xa8>
      if (timeout != 0U) {
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d003      	beq.n	800bb2a <osSemaphoreAcquire+0x9e>
        stat = osErrorTimeout;
 800bb22:	2302      	movs	r3, #2
 800bb24:	425b      	negs	r3, r3
 800bb26:	61fb      	str	r3, [r7, #28]
 800bb28:	e004      	b.n	800bb34 <osSemaphoreAcquire+0xa8>
      } else {
        stat = osErrorResource;
 800bb2a:	2303      	movs	r3, #3
 800bb2c:	425b      	negs	r3, r3
 800bb2e:	61fb      	str	r3, [r7, #28]
 800bb30:	e000      	b.n	800bb34 <osSemaphoreAcquire+0xa8>
    if (timeout != 0U) {
 800bb32:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  return (stat);
 800bb34:	69fb      	ldr	r3, [r7, #28]
}
 800bb36:	0018      	movs	r0, r3
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	b008      	add	sp, #32
 800bb3c:	bd80      	pop	{r7, pc}
 800bb3e:	46c0      	nop			; (mov r8, r8)
 800bb40:	200006b0 	.word	0x200006b0
 800bb44:	e000ed04 	.word	0xe000ed04

0800bb48 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b088      	sub	sp, #32
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800bb54:	2300      	movs	r3, #0
 800bb56:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800bb58:	69bb      	ldr	r3, [r7, #24]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d103      	bne.n	800bb66 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800bb5e:	2304      	movs	r3, #4
 800bb60:	425b      	negs	r3, r3
 800bb62:	61fb      	str	r3, [r7, #28]
 800bb64:	e035      	b.n	800bbd2 <osSemaphoreRelease+0x8a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb66:	f3ef 8305 	mrs	r3, IPSR
 800bb6a:	617b      	str	r3, [r7, #20]
  return(result);
 800bb6c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d109      	bne.n	800bb86 <osSemaphoreRelease+0x3e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bb72:	f3ef 8310 	mrs	r3, PRIMASK
 800bb76:	613b      	str	r3, [r7, #16]
  return(result);
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d01b      	beq.n	800bbb6 <osSemaphoreRelease+0x6e>
 800bb7e:	4b17      	ldr	r3, [pc, #92]	; (800bbdc <osSemaphoreRelease+0x94>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	2b02      	cmp	r3, #2
 800bb84:	d117      	bne.n	800bbb6 <osSemaphoreRelease+0x6e>
    yield = pdFALSE;
 800bb86:	2300      	movs	r3, #0
 800bb88:	60fb      	str	r3, [r7, #12]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800bb8a:	230c      	movs	r3, #12
 800bb8c:	18fa      	adds	r2, r7, r3
 800bb8e:	69bb      	ldr	r3, [r7, #24]
 800bb90:	0011      	movs	r1, r2
 800bb92:	0018      	movs	r0, r3
 800bb94:	f000 fd01 	bl	800c59a <xQueueGiveFromISR>
 800bb98:	0003      	movs	r3, r0
 800bb9a:	2b01      	cmp	r3, #1
 800bb9c:	d003      	beq.n	800bba6 <osSemaphoreRelease+0x5e>
      stat = osErrorResource;
 800bb9e:	2303      	movs	r3, #3
 800bba0:	425b      	negs	r3, r3
 800bba2:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800bba4:	e014      	b.n	800bbd0 <osSemaphoreRelease+0x88>
    } else {
      portYIELD_FROM_ISR (yield);
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d011      	beq.n	800bbd0 <osSemaphoreRelease+0x88>
 800bbac:	4b0c      	ldr	r3, [pc, #48]	; (800bbe0 <osSemaphoreRelease+0x98>)
 800bbae:	2280      	movs	r2, #128	; 0x80
 800bbb0:	0552      	lsls	r2, r2, #21
 800bbb2:	601a      	str	r2, [r3, #0]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800bbb4:	e00c      	b.n	800bbd0 <osSemaphoreRelease+0x88>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800bbb6:	69b8      	ldr	r0, [r7, #24]
 800bbb8:	2300      	movs	r3, #0
 800bbba:	2200      	movs	r2, #0
 800bbbc:	2100      	movs	r1, #0
 800bbbe:	f000 fbb7 	bl	800c330 <xQueueGenericSend>
 800bbc2:	0003      	movs	r3, r0
 800bbc4:	2b01      	cmp	r3, #1
 800bbc6:	d004      	beq.n	800bbd2 <osSemaphoreRelease+0x8a>
      stat = osErrorResource;
 800bbc8:	2303      	movs	r3, #3
 800bbca:	425b      	negs	r3, r3
 800bbcc:	61fb      	str	r3, [r7, #28]
 800bbce:	e000      	b.n	800bbd2 <osSemaphoreRelease+0x8a>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800bbd0:	46c0      	nop			; (mov r8, r8)
    }
  }

  return (stat);
 800bbd2:	69fb      	ldr	r3, [r7, #28]
}
 800bbd4:	0018      	movs	r0, r3
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	b008      	add	sp, #32
 800bbda:	bd80      	pop	{r7, pc}
 800bbdc:	200006b0 	.word	0x200006b0
 800bbe0:	e000ed04 	.word	0xe000ed04

0800bbe4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800bbe4:	b590      	push	{r4, r7, lr}
 800bbe6:	b08d      	sub	sp, #52	; 0x34
 800bbe8:	af02      	add	r7, sp, #8
 800bbea:	60f8      	str	r0, [r7, #12]
 800bbec:	60b9      	str	r1, [r7, #8]
 800bbee:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bbf4:	f3ef 8305 	mrs	r3, IPSR
 800bbf8:	61bb      	str	r3, [r7, #24]
  return(result);
 800bbfa:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d000      	beq.n	800bc02 <osMessageQueueNew+0x1e>
 800bc00:	e06f      	b.n	800bce2 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc02:	f3ef 8310 	mrs	r3, PRIMASK
 800bc06:	617b      	str	r3, [r7, #20]
  return(result);
 800bc08:	697b      	ldr	r3, [r7, #20]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d004      	beq.n	800bc18 <osMessageQueueNew+0x34>
 800bc0e:	4b37      	ldr	r3, [pc, #220]	; (800bcec <osMessageQueueNew+0x108>)
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	2b02      	cmp	r3, #2
 800bc14:	d100      	bne.n	800bc18 <osMessageQueueNew+0x34>
 800bc16:	e064      	b.n	800bce2 <osMessageQueueNew+0xfe>
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d100      	bne.n	800bc20 <osMessageQueueNew+0x3c>
 800bc1e:	e060      	b.n	800bce2 <osMessageQueueNew+0xfe>
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d05d      	beq.n	800bce2 <osMessageQueueNew+0xfe>
    mem = -1;
 800bc26:	2301      	movs	r3, #1
 800bc28:	425b      	negs	r3, r3
 800bc2a:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d028      	beq.n	800bc84 <osMessageQueueNew+0xa0>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	689b      	ldr	r3, [r3, #8]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d011      	beq.n	800bc5e <osMessageQueueNew+0x7a>
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	68db      	ldr	r3, [r3, #12]
 800bc3e:	2b4f      	cmp	r3, #79	; 0x4f
 800bc40:	d90d      	bls.n	800bc5e <osMessageQueueNew+0x7a>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d009      	beq.n	800bc5e <osMessageQueueNew+0x7a>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	695a      	ldr	r2, [r3, #20]
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	68b9      	ldr	r1, [r7, #8]
 800bc52:	434b      	muls	r3, r1
 800bc54:	429a      	cmp	r2, r3
 800bc56:	d302      	bcc.n	800bc5e <osMessageQueueNew+0x7a>
        mem = 1;
 800bc58:	2301      	movs	r3, #1
 800bc5a:	623b      	str	r3, [r7, #32]
 800bc5c:	e014      	b.n	800bc88 <osMessageQueueNew+0xa4>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	689b      	ldr	r3, [r3, #8]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d110      	bne.n	800bc88 <osMessageQueueNew+0xa4>
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	68db      	ldr	r3, [r3, #12]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d10c      	bne.n	800bc88 <osMessageQueueNew+0xa4>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d108      	bne.n	800bc88 <osMessageQueueNew+0xa4>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	695b      	ldr	r3, [r3, #20]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d104      	bne.n	800bc88 <osMessageQueueNew+0xa4>
          mem = 0;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	623b      	str	r3, [r7, #32]
 800bc82:	e001      	b.n	800bc88 <osMessageQueueNew+0xa4>
        }
      }
    }
    else {
      mem = 0;
 800bc84:	2300      	movs	r3, #0
 800bc86:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800bc88:	6a3b      	ldr	r3, [r7, #32]
 800bc8a:	2b01      	cmp	r3, #1
 800bc8c:	d10c      	bne.n	800bca8 <osMessageQueueNew+0xc4>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	691a      	ldr	r2, [r3, #16]
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	689b      	ldr	r3, [r3, #8]
 800bc96:	68b9      	ldr	r1, [r7, #8]
 800bc98:	68f8      	ldr	r0, [r7, #12]
 800bc9a:	2400      	movs	r4, #0
 800bc9c:	9400      	str	r4, [sp, #0]
 800bc9e:	f000 fa56 	bl	800c14e <xQueueGenericCreateStatic>
 800bca2:	0003      	movs	r3, r0
 800bca4:	627b      	str	r3, [r7, #36]	; 0x24
 800bca6:	e00a      	b.n	800bcbe <osMessageQueueNew+0xda>
    }
    else {
      if (mem == 0) {
 800bca8:	6a3b      	ldr	r3, [r7, #32]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d107      	bne.n	800bcbe <osMessageQueueNew+0xda>
        hQueue = xQueueCreate (msg_count, msg_size);
 800bcae:	68b9      	ldr	r1, [r7, #8]
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	0018      	movs	r0, r3
 800bcb6:	f000 fa95 	bl	800c1e4 <xQueueGenericCreate>
 800bcba:	0003      	movs	r3, r0
 800bcbc:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800bcbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d00e      	beq.n	800bce2 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d003      	beq.n	800bcd2 <osMessageQueueNew+0xee>
        name = attr->name;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	61fb      	str	r3, [r7, #28]
 800bcd0:	e001      	b.n	800bcd6 <osMessageQueueNew+0xf2>
      } else {
        name = NULL;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800bcd6:	69fa      	ldr	r2, [r7, #28]
 800bcd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcda:	0011      	movs	r1, r2
 800bcdc:	0018      	movs	r0, r3
 800bcde:	f001 f829 	bl	800cd34 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800bce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bce4:	0018      	movs	r0, r3
 800bce6:	46bd      	mov	sp, r7
 800bce8:	b00b      	add	sp, #44	; 0x2c
 800bcea:	bd90      	pop	{r4, r7, pc}
 800bcec:	200006b0 	.word	0x200006b0

0800bcf0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b08a      	sub	sp, #40	; 0x28
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	60f8      	str	r0, [r7, #12]
 800bcf8:	60b9      	str	r1, [r7, #8]
 800bcfa:	603b      	str	r3, [r7, #0]
 800bcfc:	1dfb      	adds	r3, r7, #7
 800bcfe:	701a      	strb	r2, [r3, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800bd04:	2300      	movs	r3, #0
 800bd06:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd08:	f3ef 8305 	mrs	r3, IPSR
 800bd0c:	61fb      	str	r3, [r7, #28]
  return(result);
 800bd0e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d109      	bne.n	800bd28 <osMessageQueuePut+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bd14:	f3ef 8310 	mrs	r3, PRIMASK
 800bd18:	61bb      	str	r3, [r7, #24]
  return(result);
 800bd1a:	69bb      	ldr	r3, [r7, #24]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d028      	beq.n	800bd72 <osMessageQueuePut+0x82>
 800bd20:	4b26      	ldr	r3, [pc, #152]	; (800bdbc <osMessageQueuePut+0xcc>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	2b02      	cmp	r3, #2
 800bd26:	d124      	bne.n	800bd72 <osMessageQueuePut+0x82>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bd28:	6a3b      	ldr	r3, [r7, #32]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d005      	beq.n	800bd3a <osMessageQueuePut+0x4a>
 800bd2e:	68bb      	ldr	r3, [r7, #8]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d002      	beq.n	800bd3a <osMessageQueuePut+0x4a>
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d003      	beq.n	800bd42 <osMessageQueuePut+0x52>
      stat = osErrorParameter;
 800bd3a:	2304      	movs	r3, #4
 800bd3c:	425b      	negs	r3, r3
 800bd3e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bd40:	e035      	b.n	800bdae <osMessageQueuePut+0xbe>
    }
    else {
      yield = pdFALSE;
 800bd42:	2300      	movs	r3, #0
 800bd44:	617b      	str	r3, [r7, #20]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800bd46:	2314      	movs	r3, #20
 800bd48:	18fa      	adds	r2, r7, r3
 800bd4a:	68b9      	ldr	r1, [r7, #8]
 800bd4c:	6a38      	ldr	r0, [r7, #32]
 800bd4e:	2300      	movs	r3, #0
 800bd50:	f000 fbb2 	bl	800c4b8 <xQueueGenericSendFromISR>
 800bd54:	0003      	movs	r3, r0
 800bd56:	2b01      	cmp	r3, #1
 800bd58:	d003      	beq.n	800bd62 <osMessageQueuePut+0x72>
        stat = osErrorResource;
 800bd5a:	2303      	movs	r3, #3
 800bd5c:	425b      	negs	r3, r3
 800bd5e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bd60:	e025      	b.n	800bdae <osMessageQueuePut+0xbe>
      } else {
        portYIELD_FROM_ISR (yield);
 800bd62:	697b      	ldr	r3, [r7, #20]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d022      	beq.n	800bdae <osMessageQueuePut+0xbe>
 800bd68:	4b15      	ldr	r3, [pc, #84]	; (800bdc0 <osMessageQueuePut+0xd0>)
 800bd6a:	2280      	movs	r2, #128	; 0x80
 800bd6c:	0552      	lsls	r2, r2, #21
 800bd6e:	601a      	str	r2, [r3, #0]
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bd70:	e01d      	b.n	800bdae <osMessageQueuePut+0xbe>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800bd72:	6a3b      	ldr	r3, [r7, #32]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d002      	beq.n	800bd7e <osMessageQueuePut+0x8e>
 800bd78:	68bb      	ldr	r3, [r7, #8]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d103      	bne.n	800bd86 <osMessageQueuePut+0x96>
      stat = osErrorParameter;
 800bd7e:	2304      	movs	r3, #4
 800bd80:	425b      	negs	r3, r3
 800bd82:	627b      	str	r3, [r7, #36]	; 0x24
 800bd84:	e014      	b.n	800bdb0 <osMessageQueuePut+0xc0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800bd86:	683a      	ldr	r2, [r7, #0]
 800bd88:	68b9      	ldr	r1, [r7, #8]
 800bd8a:	6a38      	ldr	r0, [r7, #32]
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	f000 facf 	bl	800c330 <xQueueGenericSend>
 800bd92:	0003      	movs	r3, r0
 800bd94:	2b01      	cmp	r3, #1
 800bd96:	d00b      	beq.n	800bdb0 <osMessageQueuePut+0xc0>
        if (timeout != 0U) {
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d003      	beq.n	800bda6 <osMessageQueuePut+0xb6>
          stat = osErrorTimeout;
 800bd9e:	2302      	movs	r3, #2
 800bda0:	425b      	negs	r3, r3
 800bda2:	627b      	str	r3, [r7, #36]	; 0x24
 800bda4:	e004      	b.n	800bdb0 <osMessageQueuePut+0xc0>
        } else {
          stat = osErrorResource;
 800bda6:	2303      	movs	r3, #3
 800bda8:	425b      	negs	r3, r3
 800bdaa:	627b      	str	r3, [r7, #36]	; 0x24
 800bdac:	e000      	b.n	800bdb0 <osMessageQueuePut+0xc0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bdae:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  return (stat);
 800bdb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bdb2:	0018      	movs	r0, r3
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	b00a      	add	sp, #40	; 0x28
 800bdb8:	bd80      	pop	{r7, pc}
 800bdba:	46c0      	nop			; (mov r8, r8)
 800bdbc:	200006b0 	.word	0x200006b0
 800bdc0:	e000ed04 	.word	0xe000ed04

0800bdc4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b08a      	sub	sp, #40	; 0x28
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	60f8      	str	r0, [r7, #12]
 800bdcc:	60b9      	str	r1, [r7, #8]
 800bdce:	607a      	str	r2, [r7, #4]
 800bdd0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bdda:	f3ef 8305 	mrs	r3, IPSR
 800bdde:	61fb      	str	r3, [r7, #28]
  return(result);
 800bde0:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d109      	bne.n	800bdfa <osMessageQueueGet+0x36>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bde6:	f3ef 8310 	mrs	r3, PRIMASK
 800bdea:	61bb      	str	r3, [r7, #24]
  return(result);
 800bdec:	69bb      	ldr	r3, [r7, #24]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d028      	beq.n	800be44 <osMessageQueueGet+0x80>
 800bdf2:	4b26      	ldr	r3, [pc, #152]	; (800be8c <osMessageQueueGet+0xc8>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	2b02      	cmp	r3, #2
 800bdf8:	d124      	bne.n	800be44 <osMessageQueueGet+0x80>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bdfa:	6a3b      	ldr	r3, [r7, #32]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d005      	beq.n	800be0c <osMessageQueueGet+0x48>
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d002      	beq.n	800be0c <osMessageQueueGet+0x48>
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d003      	beq.n	800be14 <osMessageQueueGet+0x50>
      stat = osErrorParameter;
 800be0c:	2304      	movs	r3, #4
 800be0e:	425b      	negs	r3, r3
 800be10:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800be12:	e035      	b.n	800be80 <osMessageQueueGet+0xbc>
    }
    else {
      yield = pdFALSE;
 800be14:	2300      	movs	r3, #0
 800be16:	617b      	str	r3, [r7, #20]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800be18:	2314      	movs	r3, #20
 800be1a:	18fa      	adds	r2, r7, r3
 800be1c:	68b9      	ldr	r1, [r7, #8]
 800be1e:	6a3b      	ldr	r3, [r7, #32]
 800be20:	0018      	movs	r0, r3
 800be22:	f000 fdae 	bl	800c982 <xQueueReceiveFromISR>
 800be26:	0003      	movs	r3, r0
 800be28:	2b01      	cmp	r3, #1
 800be2a:	d003      	beq.n	800be34 <osMessageQueueGet+0x70>
        stat = osErrorResource;
 800be2c:	2303      	movs	r3, #3
 800be2e:	425b      	negs	r3, r3
 800be30:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800be32:	e025      	b.n	800be80 <osMessageQueueGet+0xbc>
      } else {
        portYIELD_FROM_ISR (yield);
 800be34:	697b      	ldr	r3, [r7, #20]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d022      	beq.n	800be80 <osMessageQueueGet+0xbc>
 800be3a:	4b15      	ldr	r3, [pc, #84]	; (800be90 <osMessageQueueGet+0xcc>)
 800be3c:	2280      	movs	r2, #128	; 0x80
 800be3e:	0552      	lsls	r2, r2, #21
 800be40:	601a      	str	r2, [r3, #0]
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800be42:	e01d      	b.n	800be80 <osMessageQueueGet+0xbc>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800be44:	6a3b      	ldr	r3, [r7, #32]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d002      	beq.n	800be50 <osMessageQueueGet+0x8c>
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d103      	bne.n	800be58 <osMessageQueueGet+0x94>
      stat = osErrorParameter;
 800be50:	2304      	movs	r3, #4
 800be52:	425b      	negs	r3, r3
 800be54:	627b      	str	r3, [r7, #36]	; 0x24
 800be56:	e014      	b.n	800be82 <osMessageQueueGet+0xbe>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800be58:	683a      	ldr	r2, [r7, #0]
 800be5a:	68b9      	ldr	r1, [r7, #8]
 800be5c:	6a3b      	ldr	r3, [r7, #32]
 800be5e:	0018      	movs	r0, r3
 800be60:	f000 fc00 	bl	800c664 <xQueueReceive>
 800be64:	0003      	movs	r3, r0
 800be66:	2b01      	cmp	r3, #1
 800be68:	d00b      	beq.n	800be82 <osMessageQueueGet+0xbe>
        if (timeout != 0U) {
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d003      	beq.n	800be78 <osMessageQueueGet+0xb4>
          stat = osErrorTimeout;
 800be70:	2302      	movs	r3, #2
 800be72:	425b      	negs	r3, r3
 800be74:	627b      	str	r3, [r7, #36]	; 0x24
 800be76:	e004      	b.n	800be82 <osMessageQueueGet+0xbe>
        } else {
          stat = osErrorResource;
 800be78:	2303      	movs	r3, #3
 800be7a:	425b      	negs	r3, r3
 800be7c:	627b      	str	r3, [r7, #36]	; 0x24
 800be7e:	e000      	b.n	800be82 <osMessageQueueGet+0xbe>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800be80:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  return (stat);
 800be82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800be84:	0018      	movs	r0, r3
 800be86:	46bd      	mov	sp, r7
 800be88:	b00a      	add	sp, #40	; 0x28
 800be8a:	bd80      	pop	{r7, pc}
 800be8c:	200006b0 	.word	0x200006b0
 800be90:	e000ed04 	.word	0xe000ed04

0800be94 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800be94:	b580      	push	{r7, lr}
 800be96:	b086      	sub	sp, #24
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 800bea0:	693b      	ldr	r3, [r7, #16]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d102      	bne.n	800beac <osMessageQueueGetCount+0x18>
    count = 0U;
 800bea6:	2300      	movs	r3, #0
 800bea8:	617b      	str	r3, [r7, #20]
 800beaa:	e01c      	b.n	800bee6 <osMessageQueueGetCount+0x52>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800beac:	f3ef 8305 	mrs	r3, IPSR
 800beb0:	60fb      	str	r3, [r7, #12]
  return(result);
 800beb2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d109      	bne.n	800becc <osMessageQueueGetCount+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800beb8:	f3ef 8310 	mrs	r3, PRIMASK
 800bebc:	60bb      	str	r3, [r7, #8]
  return(result);
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d00a      	beq.n	800beda <osMessageQueueGetCount+0x46>
 800bec4:	4b0a      	ldr	r3, [pc, #40]	; (800bef0 <osMessageQueueGetCount+0x5c>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	2b02      	cmp	r3, #2
 800beca:	d106      	bne.n	800beda <osMessageQueueGetCount+0x46>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800becc:	693b      	ldr	r3, [r7, #16]
 800bece:	0018      	movs	r0, r3
 800bed0:	f000 fdcf 	bl	800ca72 <uxQueueMessagesWaitingFromISR>
 800bed4:	0003      	movs	r3, r0
 800bed6:	617b      	str	r3, [r7, #20]
 800bed8:	e005      	b.n	800bee6 <osMessageQueueGetCount+0x52>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800beda:	693b      	ldr	r3, [r7, #16]
 800bedc:	0018      	movs	r0, r3
 800bede:	f000 fdb3 	bl	800ca48 <uxQueueMessagesWaiting>
 800bee2:	0003      	movs	r3, r0
 800bee4:	617b      	str	r3, [r7, #20]
  }

  return ((uint32_t)count);
 800bee6:	697b      	ldr	r3, [r7, #20]
}
 800bee8:	0018      	movs	r0, r3
 800beea:	46bd      	mov	sp, r7
 800beec:	b006      	add	sp, #24
 800beee:	bd80      	pop	{r7, pc}
 800bef0:	200006b0 	.word	0x200006b0

0800bef4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b084      	sub	sp, #16
 800bef8:	af00      	add	r7, sp, #0
 800befa:	60f8      	str	r0, [r7, #12]
 800befc:	60b9      	str	r1, [r7, #8]
 800befe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	4a06      	ldr	r2, [pc, #24]	; (800bf1c <vApplicationGetIdleTaskMemory+0x28>)
 800bf04:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bf06:	68bb      	ldr	r3, [r7, #8]
 800bf08:	4a05      	ldr	r2, [pc, #20]	; (800bf20 <vApplicationGetIdleTaskMemory+0x2c>)
 800bf0a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2240      	movs	r2, #64	; 0x40
 800bf10:	601a      	str	r2, [r3, #0]
}
 800bf12:	46c0      	nop			; (mov r8, r8)
 800bf14:	46bd      	mov	sp, r7
 800bf16:	b004      	add	sp, #16
 800bf18:	bd80      	pop	{r7, pc}
 800bf1a:	46c0      	nop			; (mov r8, r8)
 800bf1c:	200006b4 	.word	0x200006b4
 800bf20:	20000770 	.word	0x20000770

0800bf24 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b084      	sub	sp, #16
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	60f8      	str	r0, [r7, #12]
 800bf2c:	60b9      	str	r1, [r7, #8]
 800bf2e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	4a06      	ldr	r2, [pc, #24]	; (800bf4c <vApplicationGetTimerTaskMemory+0x28>)
 800bf34:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bf36:	68bb      	ldr	r3, [r7, #8]
 800bf38:	4a05      	ldr	r2, [pc, #20]	; (800bf50 <vApplicationGetTimerTaskMemory+0x2c>)
 800bf3a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2280      	movs	r2, #128	; 0x80
 800bf40:	601a      	str	r2, [r3, #0]
}
 800bf42:	46c0      	nop			; (mov r8, r8)
 800bf44:	46bd      	mov	sp, r7
 800bf46:	b004      	add	sp, #16
 800bf48:	bd80      	pop	{r7, pc}
 800bf4a:	46c0      	nop			; (mov r8, r8)
 800bf4c:	20000870 	.word	0x20000870
 800bf50:	2000092c 	.word	0x2000092c

0800bf54 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b082      	sub	sp, #8
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	3308      	adds	r3, #8
 800bf60:	001a      	movs	r2, r3
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2201      	movs	r2, #1
 800bf6a:	4252      	negs	r2, r2
 800bf6c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	3308      	adds	r3, #8
 800bf72:	001a      	movs	r2, r3
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	3308      	adds	r3, #8
 800bf7c:	001a      	movs	r2, r3
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2200      	movs	r2, #0
 800bf86:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bf88:	46c0      	nop			; (mov r8, r8)
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	b002      	add	sp, #8
 800bf8e:	bd80      	pop	{r7, pc}

0800bf90 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b082      	sub	sp, #8
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bf9e:	46c0      	nop			; (mov r8, r8)
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	b002      	add	sp, #8
 800bfa4:	bd80      	pop	{r7, pc}

0800bfa6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bfa6:	b580      	push	{r7, lr}
 800bfa8:	b084      	sub	sp, #16
 800bfaa:	af00      	add	r7, sp, #0
 800bfac:	6078      	str	r0, [r7, #4]
 800bfae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	685b      	ldr	r3, [r3, #4]
 800bfb4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	68fa      	ldr	r2, [r7, #12]
 800bfba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	689a      	ldr	r2, [r3, #8]
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	689b      	ldr	r3, [r3, #8]
 800bfc8:	683a      	ldr	r2, [r7, #0]
 800bfca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	683a      	ldr	r2, [r7, #0]
 800bfd0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	687a      	ldr	r2, [r7, #4]
 800bfd6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	1c5a      	adds	r2, r3, #1
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	601a      	str	r2, [r3, #0]
}
 800bfe2:	46c0      	nop			; (mov r8, r8)
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	b004      	add	sp, #16
 800bfe8:	bd80      	pop	{r7, pc}

0800bfea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bfea:	b580      	push	{r7, lr}
 800bfec:	b084      	sub	sp, #16
 800bfee:	af00      	add	r7, sp, #0
 800bff0:	6078      	str	r0, [r7, #4]
 800bff2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bffa:	68bb      	ldr	r3, [r7, #8]
 800bffc:	3301      	adds	r3, #1
 800bffe:	d103      	bne.n	800c008 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	691b      	ldr	r3, [r3, #16]
 800c004:	60fb      	str	r3, [r7, #12]
 800c006:	e00c      	b.n	800c022 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	3308      	adds	r3, #8
 800c00c:	60fb      	str	r3, [r7, #12]
 800c00e:	e002      	b.n	800c016 <vListInsert+0x2c>
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	685b      	ldr	r3, [r3, #4]
 800c014:	60fb      	str	r3, [r7, #12]
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	685b      	ldr	r3, [r3, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	68ba      	ldr	r2, [r7, #8]
 800c01e:	429a      	cmp	r2, r3
 800c020:	d2f6      	bcs.n	800c010 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	685a      	ldr	r2, [r3, #4]
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	685b      	ldr	r3, [r3, #4]
 800c02e:	683a      	ldr	r2, [r7, #0]
 800c030:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	68fa      	ldr	r2, [r7, #12]
 800c036:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	683a      	ldr	r2, [r7, #0]
 800c03c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	687a      	ldr	r2, [r7, #4]
 800c042:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	1c5a      	adds	r2, r3, #1
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	601a      	str	r2, [r3, #0]
}
 800c04e:	46c0      	nop			; (mov r8, r8)
 800c050:	46bd      	mov	sp, r7
 800c052:	b004      	add	sp, #16
 800c054:	bd80      	pop	{r7, pc}

0800c056 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c056:	b580      	push	{r7, lr}
 800c058:	b084      	sub	sp, #16
 800c05a:	af00      	add	r7, sp, #0
 800c05c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	691b      	ldr	r3, [r3, #16]
 800c062:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	685b      	ldr	r3, [r3, #4]
 800c068:	687a      	ldr	r2, [r7, #4]
 800c06a:	6892      	ldr	r2, [r2, #8]
 800c06c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	689b      	ldr	r3, [r3, #8]
 800c072:	687a      	ldr	r2, [r7, #4]
 800c074:	6852      	ldr	r2, [r2, #4]
 800c076:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	685b      	ldr	r3, [r3, #4]
 800c07c:	687a      	ldr	r2, [r7, #4]
 800c07e:	429a      	cmp	r2, r3
 800c080:	d103      	bne.n	800c08a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	689a      	ldr	r2, [r3, #8]
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2200      	movs	r2, #0
 800c08e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	1e5a      	subs	r2, r3, #1
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	681b      	ldr	r3, [r3, #0]
}
 800c09e:	0018      	movs	r0, r3
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	b004      	add	sp, #16
 800c0a4:	bd80      	pop	{r7, pc}

0800c0a6 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c0a6:	b580      	push	{r7, lr}
 800c0a8:	b084      	sub	sp, #16
 800c0aa:	af00      	add	r7, sp, #0
 800c0ac:	6078      	str	r0, [r7, #4]
 800c0ae:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d101      	bne.n	800c0be <xQueueGenericReset+0x18>
 800c0ba:	b672      	cpsid	i
 800c0bc:	e7fe      	b.n	800c0bc <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 800c0be:	f002 fa77 	bl	800e5b0 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	681a      	ldr	r2, [r3, #0]
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0ce:	434b      	muls	r3, r1
 800c0d0:	18d2      	adds	r2, r2, r3
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	2200      	movs	r2, #0
 800c0da:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	681a      	ldr	r2, [r3, #0]
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	681a      	ldr	r2, [r3, #0]
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0ec:	1e59      	subs	r1, r3, #1
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0f2:	434b      	muls	r3, r1
 800c0f4:	18d2      	adds	r2, r2, r3
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	2244      	movs	r2, #68	; 0x44
 800c0fe:	21ff      	movs	r1, #255	; 0xff
 800c100:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	2245      	movs	r2, #69	; 0x45
 800c106:	21ff      	movs	r1, #255	; 0xff
 800c108:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d10d      	bne.n	800c12c <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	691b      	ldr	r3, [r3, #16]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d013      	beq.n	800c140 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	3310      	adds	r3, #16
 800c11c:	0018      	movs	r0, r3
 800c11e:	f001 fb7d 	bl	800d81c <xTaskRemoveFromEventList>
 800c122:	1e03      	subs	r3, r0, #0
 800c124:	d00c      	beq.n	800c140 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c126:	f002 fa33 	bl	800e590 <vPortYield>
 800c12a:	e009      	b.n	800c140 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	3310      	adds	r3, #16
 800c130:	0018      	movs	r0, r3
 800c132:	f7ff ff0f 	bl	800bf54 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	3324      	adds	r3, #36	; 0x24
 800c13a:	0018      	movs	r0, r3
 800c13c:	f7ff ff0a 	bl	800bf54 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c140:	f002 fa48 	bl	800e5d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c144:	2301      	movs	r3, #1
}
 800c146:	0018      	movs	r0, r3
 800c148:	46bd      	mov	sp, r7
 800c14a:	b004      	add	sp, #16
 800c14c:	bd80      	pop	{r7, pc}

0800c14e <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c14e:	b590      	push	{r4, r7, lr}
 800c150:	b089      	sub	sp, #36	; 0x24
 800c152:	af02      	add	r7, sp, #8
 800c154:	60f8      	str	r0, [r7, #12]
 800c156:	60b9      	str	r1, [r7, #8]
 800c158:	607a      	str	r2, [r7, #4]
 800c15a:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d101      	bne.n	800c166 <xQueueGenericCreateStatic+0x18>
 800c162:	b672      	cpsid	i
 800c164:	e7fe      	b.n	800c164 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d101      	bne.n	800c170 <xQueueGenericCreateStatic+0x22>
 800c16c:	b672      	cpsid	i
 800c16e:	e7fe      	b.n	800c16e <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d002      	beq.n	800c17c <xQueueGenericCreateStatic+0x2e>
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d001      	beq.n	800c180 <xQueueGenericCreateStatic+0x32>
 800c17c:	2301      	movs	r3, #1
 800c17e:	e000      	b.n	800c182 <xQueueGenericCreateStatic+0x34>
 800c180:	2300      	movs	r3, #0
 800c182:	2b00      	cmp	r3, #0
 800c184:	d101      	bne.n	800c18a <xQueueGenericCreateStatic+0x3c>
 800c186:	b672      	cpsid	i
 800c188:	e7fe      	b.n	800c188 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d102      	bne.n	800c196 <xQueueGenericCreateStatic+0x48>
 800c190:	68bb      	ldr	r3, [r7, #8]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d101      	bne.n	800c19a <xQueueGenericCreateStatic+0x4c>
 800c196:	2301      	movs	r3, #1
 800c198:	e000      	b.n	800c19c <xQueueGenericCreateStatic+0x4e>
 800c19a:	2300      	movs	r3, #0
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d101      	bne.n	800c1a4 <xQueueGenericCreateStatic+0x56>
 800c1a0:	b672      	cpsid	i
 800c1a2:	e7fe      	b.n	800c1a2 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c1a4:	2350      	movs	r3, #80	; 0x50
 800c1a6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c1a8:	693b      	ldr	r3, [r7, #16]
 800c1aa:	2b50      	cmp	r3, #80	; 0x50
 800c1ac:	d001      	beq.n	800c1b2 <xQueueGenericCreateStatic+0x64>
 800c1ae:	b672      	cpsid	i
 800c1b0:	e7fe      	b.n	800c1b0 <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 800c1b6:	697b      	ldr	r3, [r7, #20]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d00e      	beq.n	800c1da <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	2246      	movs	r2, #70	; 0x46
 800c1c0:	2101      	movs	r1, #1
 800c1c2:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c1c4:	2328      	movs	r3, #40	; 0x28
 800c1c6:	18fb      	adds	r3, r7, r3
 800c1c8:	781c      	ldrb	r4, [r3, #0]
 800c1ca:	687a      	ldr	r2, [r7, #4]
 800c1cc:	68b9      	ldr	r1, [r7, #8]
 800c1ce:	68f8      	ldr	r0, [r7, #12]
 800c1d0:	697b      	ldr	r3, [r7, #20]
 800c1d2:	9300      	str	r3, [sp, #0]
 800c1d4:	0023      	movs	r3, r4
 800c1d6:	f000 f83b 	bl	800c250 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800c1da:	697b      	ldr	r3, [r7, #20]
	}
 800c1dc:	0018      	movs	r0, r3
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	b007      	add	sp, #28
 800c1e2:	bd90      	pop	{r4, r7, pc}

0800c1e4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c1e4:	b590      	push	{r4, r7, lr}
 800c1e6:	b08b      	sub	sp, #44	; 0x2c
 800c1e8:	af02      	add	r7, sp, #8
 800c1ea:	60f8      	str	r0, [r7, #12]
 800c1ec:	60b9      	str	r1, [r7, #8]
 800c1ee:	1dfb      	adds	r3, r7, #7
 800c1f0:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d101      	bne.n	800c1fc <xQueueGenericCreate+0x18>
 800c1f8:	b672      	cpsid	i
 800c1fa:	e7fe      	b.n	800c1fa <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800c1fc:	68bb      	ldr	r3, [r7, #8]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d102      	bne.n	800c208 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800c202:	2300      	movs	r3, #0
 800c204:	61fb      	str	r3, [r7, #28]
 800c206:	e003      	b.n	800c210 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	68ba      	ldr	r2, [r7, #8]
 800c20c:	4353      	muls	r3, r2
 800c20e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800c210:	69fb      	ldr	r3, [r7, #28]
 800c212:	3350      	adds	r3, #80	; 0x50
 800c214:	0018      	movs	r0, r3
 800c216:	f002 fa63 	bl	800e6e0 <pvPortMalloc>
 800c21a:	0003      	movs	r3, r0
 800c21c:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 800c21e:	69bb      	ldr	r3, [r7, #24]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d010      	beq.n	800c246 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800c224:	69bb      	ldr	r3, [r7, #24]
 800c226:	3350      	adds	r3, #80	; 0x50
 800c228:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c22a:	69bb      	ldr	r3, [r7, #24]
 800c22c:	2246      	movs	r2, #70	; 0x46
 800c22e:	2100      	movs	r1, #0
 800c230:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c232:	1dfb      	adds	r3, r7, #7
 800c234:	781c      	ldrb	r4, [r3, #0]
 800c236:	697a      	ldr	r2, [r7, #20]
 800c238:	68b9      	ldr	r1, [r7, #8]
 800c23a:	68f8      	ldr	r0, [r7, #12]
 800c23c:	69bb      	ldr	r3, [r7, #24]
 800c23e:	9300      	str	r3, [sp, #0]
 800c240:	0023      	movs	r3, r4
 800c242:	f000 f805 	bl	800c250 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800c246:	69bb      	ldr	r3, [r7, #24]
	}
 800c248:	0018      	movs	r0, r3
 800c24a:	46bd      	mov	sp, r7
 800c24c:	b009      	add	sp, #36	; 0x24
 800c24e:	bd90      	pop	{r4, r7, pc}

0800c250 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b084      	sub	sp, #16
 800c254:	af00      	add	r7, sp, #0
 800c256:	60f8      	str	r0, [r7, #12]
 800c258:	60b9      	str	r1, [r7, #8]
 800c25a:	607a      	str	r2, [r7, #4]
 800c25c:	001a      	movs	r2, r3
 800c25e:	1cfb      	adds	r3, r7, #3
 800c260:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d103      	bne.n	800c270 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c268:	69bb      	ldr	r3, [r7, #24]
 800c26a:	69ba      	ldr	r2, [r7, #24]
 800c26c:	601a      	str	r2, [r3, #0]
 800c26e:	e002      	b.n	800c276 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c270:	69bb      	ldr	r3, [r7, #24]
 800c272:	687a      	ldr	r2, [r7, #4]
 800c274:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c276:	69bb      	ldr	r3, [r7, #24]
 800c278:	68fa      	ldr	r2, [r7, #12]
 800c27a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c27c:	69bb      	ldr	r3, [r7, #24]
 800c27e:	68ba      	ldr	r2, [r7, #8]
 800c280:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c282:	69bb      	ldr	r3, [r7, #24]
 800c284:	2101      	movs	r1, #1
 800c286:	0018      	movs	r0, r3
 800c288:	f7ff ff0d 	bl	800c0a6 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c28c:	69bb      	ldr	r3, [r7, #24]
 800c28e:	1cfa      	adds	r2, r7, #3
 800c290:	214c      	movs	r1, #76	; 0x4c
 800c292:	7812      	ldrb	r2, [r2, #0]
 800c294:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c296:	46c0      	nop			; (mov r8, r8)
 800c298:	46bd      	mov	sp, r7
 800c29a:	b004      	add	sp, #16
 800c29c:	bd80      	pop	{r7, pc}

0800c29e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800c29e:	b580      	push	{r7, lr}
 800c2a0:	b088      	sub	sp, #32
 800c2a2:	af02      	add	r7, sp, #8
 800c2a4:	60f8      	str	r0, [r7, #12]
 800c2a6:	60b9      	str	r1, [r7, #8]
 800c2a8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d101      	bne.n	800c2b4 <xQueueCreateCountingSemaphoreStatic+0x16>
 800c2b0:	b672      	cpsid	i
 800c2b2:	e7fe      	b.n	800c2b2 <xQueueCreateCountingSemaphoreStatic+0x14>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c2b4:	68ba      	ldr	r2, [r7, #8]
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	429a      	cmp	r2, r3
 800c2ba:	d901      	bls.n	800c2c0 <xQueueCreateCountingSemaphoreStatic+0x22>
 800c2bc:	b672      	cpsid	i
 800c2be:	e7fe      	b.n	800c2be <xQueueCreateCountingSemaphoreStatic+0x20>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	68f8      	ldr	r0, [r7, #12]
 800c2c4:	2202      	movs	r2, #2
 800c2c6:	9200      	str	r2, [sp, #0]
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	2100      	movs	r1, #0
 800c2cc:	f7ff ff3f 	bl	800c14e <xQueueGenericCreateStatic>
 800c2d0:	0003      	movs	r3, r0
 800c2d2:	617b      	str	r3, [r7, #20]

		if( xHandle != NULL )
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d002      	beq.n	800c2e0 <xQueueCreateCountingSemaphoreStatic+0x42>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c2da:	697b      	ldr	r3, [r7, #20]
 800c2dc:	68ba      	ldr	r2, [r7, #8]
 800c2de:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c2e0:	697b      	ldr	r3, [r7, #20]
	}
 800c2e2:	0018      	movs	r0, r3
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	b006      	add	sp, #24
 800c2e8:	bd80      	pop	{r7, pc}

0800c2ea <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800c2ea:	b580      	push	{r7, lr}
 800c2ec:	b084      	sub	sp, #16
 800c2ee:	af00      	add	r7, sp, #0
 800c2f0:	6078      	str	r0, [r7, #4]
 800c2f2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d101      	bne.n	800c2fe <xQueueCreateCountingSemaphore+0x14>
 800c2fa:	b672      	cpsid	i
 800c2fc:	e7fe      	b.n	800c2fc <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c2fe:	683a      	ldr	r2, [r7, #0]
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	429a      	cmp	r2, r3
 800c304:	d901      	bls.n	800c30a <xQueueCreateCountingSemaphore+0x20>
 800c306:	b672      	cpsid	i
 800c308:	e7fe      	b.n	800c308 <xQueueCreateCountingSemaphore+0x1e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	2202      	movs	r2, #2
 800c30e:	2100      	movs	r1, #0
 800c310:	0018      	movs	r0, r3
 800c312:	f7ff ff67 	bl	800c1e4 <xQueueGenericCreate>
 800c316:	0003      	movs	r3, r0
 800c318:	60fb      	str	r3, [r7, #12]

		if( xHandle != NULL )
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d002      	beq.n	800c326 <xQueueCreateCountingSemaphore+0x3c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	683a      	ldr	r2, [r7, #0]
 800c324:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c326:	68fb      	ldr	r3, [r7, #12]
	}
 800c328:	0018      	movs	r0, r3
 800c32a:	46bd      	mov	sp, r7
 800c32c:	b004      	add	sp, #16
 800c32e:	bd80      	pop	{r7, pc}

0800c330 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b08a      	sub	sp, #40	; 0x28
 800c334:	af00      	add	r7, sp, #0
 800c336:	60f8      	str	r0, [r7, #12]
 800c338:	60b9      	str	r1, [r7, #8]
 800c33a:	607a      	str	r2, [r7, #4]
 800c33c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c33e:	2300      	movs	r3, #0
 800c340:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800c346:	6a3b      	ldr	r3, [r7, #32]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d101      	bne.n	800c350 <xQueueGenericSend+0x20>
 800c34c:	b672      	cpsid	i
 800c34e:	e7fe      	b.n	800c34e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d103      	bne.n	800c35e <xQueueGenericSend+0x2e>
 800c356:	6a3b      	ldr	r3, [r7, #32]
 800c358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d101      	bne.n	800c362 <xQueueGenericSend+0x32>
 800c35e:	2301      	movs	r3, #1
 800c360:	e000      	b.n	800c364 <xQueueGenericSend+0x34>
 800c362:	2300      	movs	r3, #0
 800c364:	2b00      	cmp	r3, #0
 800c366:	d101      	bne.n	800c36c <xQueueGenericSend+0x3c>
 800c368:	b672      	cpsid	i
 800c36a:	e7fe      	b.n	800c36a <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	2b02      	cmp	r3, #2
 800c370:	d103      	bne.n	800c37a <xQueueGenericSend+0x4a>
 800c372:	6a3b      	ldr	r3, [r7, #32]
 800c374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c376:	2b01      	cmp	r3, #1
 800c378:	d101      	bne.n	800c37e <xQueueGenericSend+0x4e>
 800c37a:	2301      	movs	r3, #1
 800c37c:	e000      	b.n	800c380 <xQueueGenericSend+0x50>
 800c37e:	2300      	movs	r3, #0
 800c380:	2b00      	cmp	r3, #0
 800c382:	d101      	bne.n	800c388 <xQueueGenericSend+0x58>
 800c384:	b672      	cpsid	i
 800c386:	e7fe      	b.n	800c386 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c388:	f001 fbe6 	bl	800db58 <xTaskGetSchedulerState>
 800c38c:	1e03      	subs	r3, r0, #0
 800c38e:	d102      	bne.n	800c396 <xQueueGenericSend+0x66>
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d101      	bne.n	800c39a <xQueueGenericSend+0x6a>
 800c396:	2301      	movs	r3, #1
 800c398:	e000      	b.n	800c39c <xQueueGenericSend+0x6c>
 800c39a:	2300      	movs	r3, #0
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d101      	bne.n	800c3a4 <xQueueGenericSend+0x74>
 800c3a0:	b672      	cpsid	i
 800c3a2:	e7fe      	b.n	800c3a2 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c3a4:	f002 f904 	bl	800e5b0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c3a8:	6a3b      	ldr	r3, [r7, #32]
 800c3aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c3ac:	6a3b      	ldr	r3, [r7, #32]
 800c3ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3b0:	429a      	cmp	r2, r3
 800c3b2:	d302      	bcc.n	800c3ba <xQueueGenericSend+0x8a>
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	2b02      	cmp	r3, #2
 800c3b8:	d11e      	bne.n	800c3f8 <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c3ba:	683a      	ldr	r2, [r7, #0]
 800c3bc:	68b9      	ldr	r1, [r7, #8]
 800c3be:	6a3b      	ldr	r3, [r7, #32]
 800c3c0:	0018      	movs	r0, r3
 800c3c2:	f000 fb99 	bl	800caf8 <prvCopyDataToQueue>
 800c3c6:	0003      	movs	r3, r0
 800c3c8:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c3ca:	6a3b      	ldr	r3, [r7, #32]
 800c3cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d009      	beq.n	800c3e6 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c3d2:	6a3b      	ldr	r3, [r7, #32]
 800c3d4:	3324      	adds	r3, #36	; 0x24
 800c3d6:	0018      	movs	r0, r3
 800c3d8:	f001 fa20 	bl	800d81c <xTaskRemoveFromEventList>
 800c3dc:	1e03      	subs	r3, r0, #0
 800c3de:	d007      	beq.n	800c3f0 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c3e0:	f002 f8d6 	bl	800e590 <vPortYield>
 800c3e4:	e004      	b.n	800c3f0 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c3e6:	69fb      	ldr	r3, [r7, #28]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d001      	beq.n	800c3f0 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c3ec:	f002 f8d0 	bl	800e590 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c3f0:	f002 f8f0 	bl	800e5d4 <vPortExitCritical>
				return pdPASS;
 800c3f4:	2301      	movs	r3, #1
 800c3f6:	e05b      	b.n	800c4b0 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d103      	bne.n	800c406 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c3fe:	f002 f8e9 	bl	800e5d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c402:	2300      	movs	r3, #0
 800c404:	e054      	b.n	800c4b0 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d106      	bne.n	800c41a <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c40c:	2314      	movs	r3, #20
 800c40e:	18fb      	adds	r3, r7, r3
 800c410:	0018      	movs	r0, r3
 800c412:	f001 fa5f 	bl	800d8d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c416:	2301      	movs	r3, #1
 800c418:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c41a:	f002 f8db 	bl	800e5d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c41e:	f001 f805 	bl	800d42c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c422:	f002 f8c5 	bl	800e5b0 <vPortEnterCritical>
 800c426:	6a3b      	ldr	r3, [r7, #32]
 800c428:	2244      	movs	r2, #68	; 0x44
 800c42a:	5c9b      	ldrb	r3, [r3, r2]
 800c42c:	b25b      	sxtb	r3, r3
 800c42e:	3301      	adds	r3, #1
 800c430:	d103      	bne.n	800c43a <xQueueGenericSend+0x10a>
 800c432:	6a3b      	ldr	r3, [r7, #32]
 800c434:	2244      	movs	r2, #68	; 0x44
 800c436:	2100      	movs	r1, #0
 800c438:	5499      	strb	r1, [r3, r2]
 800c43a:	6a3b      	ldr	r3, [r7, #32]
 800c43c:	2245      	movs	r2, #69	; 0x45
 800c43e:	5c9b      	ldrb	r3, [r3, r2]
 800c440:	b25b      	sxtb	r3, r3
 800c442:	3301      	adds	r3, #1
 800c444:	d103      	bne.n	800c44e <xQueueGenericSend+0x11e>
 800c446:	6a3b      	ldr	r3, [r7, #32]
 800c448:	2245      	movs	r2, #69	; 0x45
 800c44a:	2100      	movs	r1, #0
 800c44c:	5499      	strb	r1, [r3, r2]
 800c44e:	f002 f8c1 	bl	800e5d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c452:	1d3a      	adds	r2, r7, #4
 800c454:	2314      	movs	r3, #20
 800c456:	18fb      	adds	r3, r7, r3
 800c458:	0011      	movs	r1, r2
 800c45a:	0018      	movs	r0, r3
 800c45c:	f001 fa4e 	bl	800d8fc <xTaskCheckForTimeOut>
 800c460:	1e03      	subs	r3, r0, #0
 800c462:	d11e      	bne.n	800c4a2 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c464:	6a3b      	ldr	r3, [r7, #32]
 800c466:	0018      	movs	r0, r3
 800c468:	f000 fc4b 	bl	800cd02 <prvIsQueueFull>
 800c46c:	1e03      	subs	r3, r0, #0
 800c46e:	d011      	beq.n	800c494 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c470:	6a3b      	ldr	r3, [r7, #32]
 800c472:	3310      	adds	r3, #16
 800c474:	687a      	ldr	r2, [r7, #4]
 800c476:	0011      	movs	r1, r2
 800c478:	0018      	movs	r0, r3
 800c47a:	f001 f98b 	bl	800d794 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c47e:	6a3b      	ldr	r3, [r7, #32]
 800c480:	0018      	movs	r0, r3
 800c482:	f000 fbca 	bl	800cc1a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c486:	f000 ffdd 	bl	800d444 <xTaskResumeAll>
 800c48a:	1e03      	subs	r3, r0, #0
 800c48c:	d18a      	bne.n	800c3a4 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 800c48e:	f002 f87f 	bl	800e590 <vPortYield>
 800c492:	e787      	b.n	800c3a4 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c494:	6a3b      	ldr	r3, [r7, #32]
 800c496:	0018      	movs	r0, r3
 800c498:	f000 fbbf 	bl	800cc1a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c49c:	f000 ffd2 	bl	800d444 <xTaskResumeAll>
 800c4a0:	e780      	b.n	800c3a4 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c4a2:	6a3b      	ldr	r3, [r7, #32]
 800c4a4:	0018      	movs	r0, r3
 800c4a6:	f000 fbb8 	bl	800cc1a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c4aa:	f000 ffcb 	bl	800d444 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c4ae:	2300      	movs	r3, #0
		}
	}
}
 800c4b0:	0018      	movs	r0, r3
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	b00a      	add	sp, #40	; 0x28
 800c4b6:	bd80      	pop	{r7, pc}

0800c4b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c4b8:	b590      	push	{r4, r7, lr}
 800c4ba:	b089      	sub	sp, #36	; 0x24
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	60f8      	str	r0, [r7, #12]
 800c4c0:	60b9      	str	r1, [r7, #8]
 800c4c2:	607a      	str	r2, [r7, #4]
 800c4c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 800c4ca:	69bb      	ldr	r3, [r7, #24]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d101      	bne.n	800c4d4 <xQueueGenericSendFromISR+0x1c>
 800c4d0:	b672      	cpsid	i
 800c4d2:	e7fe      	b.n	800c4d2 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c4d4:	68bb      	ldr	r3, [r7, #8]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d103      	bne.n	800c4e2 <xQueueGenericSendFromISR+0x2a>
 800c4da:	69bb      	ldr	r3, [r7, #24]
 800c4dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d101      	bne.n	800c4e6 <xQueueGenericSendFromISR+0x2e>
 800c4e2:	2301      	movs	r3, #1
 800c4e4:	e000      	b.n	800c4e8 <xQueueGenericSendFromISR+0x30>
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d101      	bne.n	800c4f0 <xQueueGenericSendFromISR+0x38>
 800c4ec:	b672      	cpsid	i
 800c4ee:	e7fe      	b.n	800c4ee <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	2b02      	cmp	r3, #2
 800c4f4:	d103      	bne.n	800c4fe <xQueueGenericSendFromISR+0x46>
 800c4f6:	69bb      	ldr	r3, [r7, #24]
 800c4f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4fa:	2b01      	cmp	r3, #1
 800c4fc:	d101      	bne.n	800c502 <xQueueGenericSendFromISR+0x4a>
 800c4fe:	2301      	movs	r3, #1
 800c500:	e000      	b.n	800c504 <xQueueGenericSendFromISR+0x4c>
 800c502:	2300      	movs	r3, #0
 800c504:	2b00      	cmp	r3, #0
 800c506:	d101      	bne.n	800c50c <xQueueGenericSendFromISR+0x54>
 800c508:	b672      	cpsid	i
 800c50a:	e7fe      	b.n	800c50a <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c50c:	f002 f87a 	bl	800e604 <ulSetInterruptMaskFromISR>
 800c510:	0003      	movs	r3, r0
 800c512:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c514:	69bb      	ldr	r3, [r7, #24]
 800c516:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c518:	69bb      	ldr	r3, [r7, #24]
 800c51a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c51c:	429a      	cmp	r2, r3
 800c51e:	d302      	bcc.n	800c526 <xQueueGenericSendFromISR+0x6e>
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	2b02      	cmp	r3, #2
 800c524:	d12e      	bne.n	800c584 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c526:	2413      	movs	r4, #19
 800c528:	193b      	adds	r3, r7, r4
 800c52a:	69ba      	ldr	r2, [r7, #24]
 800c52c:	2145      	movs	r1, #69	; 0x45
 800c52e:	5c52      	ldrb	r2, [r2, r1]
 800c530:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c532:	683a      	ldr	r2, [r7, #0]
 800c534:	68b9      	ldr	r1, [r7, #8]
 800c536:	69bb      	ldr	r3, [r7, #24]
 800c538:	0018      	movs	r0, r3
 800c53a:	f000 fadd 	bl	800caf8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c53e:	193b      	adds	r3, r7, r4
 800c540:	781b      	ldrb	r3, [r3, #0]
 800c542:	b25b      	sxtb	r3, r3
 800c544:	3301      	adds	r3, #1
 800c546:	d111      	bne.n	800c56c <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c548:	69bb      	ldr	r3, [r7, #24]
 800c54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d016      	beq.n	800c57e <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c550:	69bb      	ldr	r3, [r7, #24]
 800c552:	3324      	adds	r3, #36	; 0x24
 800c554:	0018      	movs	r0, r3
 800c556:	f001 f961 	bl	800d81c <xTaskRemoveFromEventList>
 800c55a:	1e03      	subs	r3, r0, #0
 800c55c:	d00f      	beq.n	800c57e <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d00c      	beq.n	800c57e <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2201      	movs	r2, #1
 800c568:	601a      	str	r2, [r3, #0]
 800c56a:	e008      	b.n	800c57e <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c56c:	2313      	movs	r3, #19
 800c56e:	18fb      	adds	r3, r7, r3
 800c570:	781b      	ldrb	r3, [r3, #0]
 800c572:	3301      	adds	r3, #1
 800c574:	b2db      	uxtb	r3, r3
 800c576:	b259      	sxtb	r1, r3
 800c578:	69bb      	ldr	r3, [r7, #24]
 800c57a:	2245      	movs	r2, #69	; 0x45
 800c57c:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800c57e:	2301      	movs	r3, #1
 800c580:	61fb      	str	r3, [r7, #28]
		{
 800c582:	e001      	b.n	800c588 <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c584:	2300      	movs	r3, #0
 800c586:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800c588:	697b      	ldr	r3, [r7, #20]
 800c58a:	0018      	movs	r0, r3
 800c58c:	f002 f840 	bl	800e610 <vClearInterruptMaskFromISR>

	return xReturn;
 800c590:	69fb      	ldr	r3, [r7, #28]
}
 800c592:	0018      	movs	r0, r3
 800c594:	46bd      	mov	sp, r7
 800c596:	b009      	add	sp, #36	; 0x24
 800c598:	bd90      	pop	{r4, r7, pc}

0800c59a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c59a:	b580      	push	{r7, lr}
 800c59c:	b088      	sub	sp, #32
 800c59e:	af00      	add	r7, sp, #0
 800c5a0:	6078      	str	r0, [r7, #4]
 800c5a2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c5a8:	69bb      	ldr	r3, [r7, #24]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d101      	bne.n	800c5b2 <xQueueGiveFromISR+0x18>
 800c5ae:	b672      	cpsid	i
 800c5b0:	e7fe      	b.n	800c5b0 <xQueueGiveFromISR+0x16>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c5b2:	69bb      	ldr	r3, [r7, #24]
 800c5b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d001      	beq.n	800c5be <xQueueGiveFromISR+0x24>
 800c5ba:	b672      	cpsid	i
 800c5bc:	e7fe      	b.n	800c5bc <xQueueGiveFromISR+0x22>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800c5be:	69bb      	ldr	r3, [r7, #24]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d103      	bne.n	800c5ce <xQueueGiveFromISR+0x34>
 800c5c6:	69bb      	ldr	r3, [r7, #24]
 800c5c8:	685b      	ldr	r3, [r3, #4]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d101      	bne.n	800c5d2 <xQueueGiveFromISR+0x38>
 800c5ce:	2301      	movs	r3, #1
 800c5d0:	e000      	b.n	800c5d4 <xQueueGiveFromISR+0x3a>
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d101      	bne.n	800c5dc <xQueueGiveFromISR+0x42>
 800c5d8:	b672      	cpsid	i
 800c5da:	e7fe      	b.n	800c5da <xQueueGiveFromISR+0x40>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c5dc:	f002 f812 	bl	800e604 <ulSetInterruptMaskFromISR>
 800c5e0:	0003      	movs	r3, r0
 800c5e2:	617b      	str	r3, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c5e4:	69bb      	ldr	r3, [r7, #24]
 800c5e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5e8:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c5ea:	69bb      	ldr	r3, [r7, #24]
 800c5ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5ee:	693a      	ldr	r2, [r7, #16]
 800c5f0:	429a      	cmp	r2, r3
 800c5f2:	d22c      	bcs.n	800c64e <xQueueGiveFromISR+0xb4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c5f4:	200f      	movs	r0, #15
 800c5f6:	183b      	adds	r3, r7, r0
 800c5f8:	69ba      	ldr	r2, [r7, #24]
 800c5fa:	2145      	movs	r1, #69	; 0x45
 800c5fc:	5c52      	ldrb	r2, [r2, r1]
 800c5fe:	701a      	strb	r2, [r3, #0]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c600:	693b      	ldr	r3, [r7, #16]
 800c602:	1c5a      	adds	r2, r3, #1
 800c604:	69bb      	ldr	r3, [r7, #24]
 800c606:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c608:	183b      	adds	r3, r7, r0
 800c60a:	781b      	ldrb	r3, [r3, #0]
 800c60c:	b25b      	sxtb	r3, r3
 800c60e:	3301      	adds	r3, #1
 800c610:	d111      	bne.n	800c636 <xQueueGiveFromISR+0x9c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c612:	69bb      	ldr	r3, [r7, #24]
 800c614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c616:	2b00      	cmp	r3, #0
 800c618:	d016      	beq.n	800c648 <xQueueGiveFromISR+0xae>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c61a:	69bb      	ldr	r3, [r7, #24]
 800c61c:	3324      	adds	r3, #36	; 0x24
 800c61e:	0018      	movs	r0, r3
 800c620:	f001 f8fc 	bl	800d81c <xTaskRemoveFromEventList>
 800c624:	1e03      	subs	r3, r0, #0
 800c626:	d00f      	beq.n	800c648 <xQueueGiveFromISR+0xae>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d00c      	beq.n	800c648 <xQueueGiveFromISR+0xae>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	2201      	movs	r2, #1
 800c632:	601a      	str	r2, [r3, #0]
 800c634:	e008      	b.n	800c648 <xQueueGiveFromISR+0xae>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c636:	230f      	movs	r3, #15
 800c638:	18fb      	adds	r3, r7, r3
 800c63a:	781b      	ldrb	r3, [r3, #0]
 800c63c:	3301      	adds	r3, #1
 800c63e:	b2db      	uxtb	r3, r3
 800c640:	b259      	sxtb	r1, r3
 800c642:	69bb      	ldr	r3, [r7, #24]
 800c644:	2245      	movs	r2, #69	; 0x45
 800c646:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800c648:	2301      	movs	r3, #1
 800c64a:	61fb      	str	r3, [r7, #28]
 800c64c:	e001      	b.n	800c652 <xQueueGiveFromISR+0xb8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c64e:	2300      	movs	r3, #0
 800c650:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800c652:	697b      	ldr	r3, [r7, #20]
 800c654:	0018      	movs	r0, r3
 800c656:	f001 ffdb 	bl	800e610 <vClearInterruptMaskFromISR>

	return xReturn;
 800c65a:	69fb      	ldr	r3, [r7, #28]
}
 800c65c:	0018      	movs	r0, r3
 800c65e:	46bd      	mov	sp, r7
 800c660:	b008      	add	sp, #32
 800c662:	bd80      	pop	{r7, pc}

0800c664 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b08a      	sub	sp, #40	; 0x28
 800c668:	af00      	add	r7, sp, #0
 800c66a:	60f8      	str	r0, [r7, #12]
 800c66c:	60b9      	str	r1, [r7, #8]
 800c66e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c670:	2300      	movs	r3, #0
 800c672:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c678:	6a3b      	ldr	r3, [r7, #32]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d101      	bne.n	800c682 <xQueueReceive+0x1e>
 800c67e:	b672      	cpsid	i
 800c680:	e7fe      	b.n	800c680 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c682:	68bb      	ldr	r3, [r7, #8]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d103      	bne.n	800c690 <xQueueReceive+0x2c>
 800c688:	6a3b      	ldr	r3, [r7, #32]
 800c68a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d101      	bne.n	800c694 <xQueueReceive+0x30>
 800c690:	2301      	movs	r3, #1
 800c692:	e000      	b.n	800c696 <xQueueReceive+0x32>
 800c694:	2300      	movs	r3, #0
 800c696:	2b00      	cmp	r3, #0
 800c698:	d101      	bne.n	800c69e <xQueueReceive+0x3a>
 800c69a:	b672      	cpsid	i
 800c69c:	e7fe      	b.n	800c69c <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c69e:	f001 fa5b 	bl	800db58 <xTaskGetSchedulerState>
 800c6a2:	1e03      	subs	r3, r0, #0
 800c6a4:	d102      	bne.n	800c6ac <xQueueReceive+0x48>
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d101      	bne.n	800c6b0 <xQueueReceive+0x4c>
 800c6ac:	2301      	movs	r3, #1
 800c6ae:	e000      	b.n	800c6b2 <xQueueReceive+0x4e>
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d101      	bne.n	800c6ba <xQueueReceive+0x56>
 800c6b6:	b672      	cpsid	i
 800c6b8:	e7fe      	b.n	800c6b8 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800c6ba:	f001 ff79 	bl	800e5b0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c6be:	6a3b      	ldr	r3, [r7, #32]
 800c6c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6c2:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c6c4:	69fb      	ldr	r3, [r7, #28]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d01a      	beq.n	800c700 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c6ca:	68ba      	ldr	r2, [r7, #8]
 800c6cc:	6a3b      	ldr	r3, [r7, #32]
 800c6ce:	0011      	movs	r1, r2
 800c6d0:	0018      	movs	r0, r3
 800c6d2:	f000 fa7c 	bl	800cbce <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c6d6:	69fb      	ldr	r3, [r7, #28]
 800c6d8:	1e5a      	subs	r2, r3, #1
 800c6da:	6a3b      	ldr	r3, [r7, #32]
 800c6dc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c6de:	6a3b      	ldr	r3, [r7, #32]
 800c6e0:	691b      	ldr	r3, [r3, #16]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d008      	beq.n	800c6f8 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c6e6:	6a3b      	ldr	r3, [r7, #32]
 800c6e8:	3310      	adds	r3, #16
 800c6ea:	0018      	movs	r0, r3
 800c6ec:	f001 f896 	bl	800d81c <xTaskRemoveFromEventList>
 800c6f0:	1e03      	subs	r3, r0, #0
 800c6f2:	d001      	beq.n	800c6f8 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c6f4:	f001 ff4c 	bl	800e590 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c6f8:	f001 ff6c 	bl	800e5d4 <vPortExitCritical>
				return pdPASS;
 800c6fc:	2301      	movs	r3, #1
 800c6fe:	e062      	b.n	800c7c6 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d103      	bne.n	800c70e <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c706:	f001 ff65 	bl	800e5d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c70a:	2300      	movs	r3, #0
 800c70c:	e05b      	b.n	800c7c6 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c710:	2b00      	cmp	r3, #0
 800c712:	d106      	bne.n	800c722 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c714:	2314      	movs	r3, #20
 800c716:	18fb      	adds	r3, r7, r3
 800c718:	0018      	movs	r0, r3
 800c71a:	f001 f8db 	bl	800d8d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c71e:	2301      	movs	r3, #1
 800c720:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c722:	f001 ff57 	bl	800e5d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c726:	f000 fe81 	bl	800d42c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c72a:	f001 ff41 	bl	800e5b0 <vPortEnterCritical>
 800c72e:	6a3b      	ldr	r3, [r7, #32]
 800c730:	2244      	movs	r2, #68	; 0x44
 800c732:	5c9b      	ldrb	r3, [r3, r2]
 800c734:	b25b      	sxtb	r3, r3
 800c736:	3301      	adds	r3, #1
 800c738:	d103      	bne.n	800c742 <xQueueReceive+0xde>
 800c73a:	6a3b      	ldr	r3, [r7, #32]
 800c73c:	2244      	movs	r2, #68	; 0x44
 800c73e:	2100      	movs	r1, #0
 800c740:	5499      	strb	r1, [r3, r2]
 800c742:	6a3b      	ldr	r3, [r7, #32]
 800c744:	2245      	movs	r2, #69	; 0x45
 800c746:	5c9b      	ldrb	r3, [r3, r2]
 800c748:	b25b      	sxtb	r3, r3
 800c74a:	3301      	adds	r3, #1
 800c74c:	d103      	bne.n	800c756 <xQueueReceive+0xf2>
 800c74e:	6a3b      	ldr	r3, [r7, #32]
 800c750:	2245      	movs	r2, #69	; 0x45
 800c752:	2100      	movs	r1, #0
 800c754:	5499      	strb	r1, [r3, r2]
 800c756:	f001 ff3d 	bl	800e5d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c75a:	1d3a      	adds	r2, r7, #4
 800c75c:	2314      	movs	r3, #20
 800c75e:	18fb      	adds	r3, r7, r3
 800c760:	0011      	movs	r1, r2
 800c762:	0018      	movs	r0, r3
 800c764:	f001 f8ca 	bl	800d8fc <xTaskCheckForTimeOut>
 800c768:	1e03      	subs	r3, r0, #0
 800c76a:	d11e      	bne.n	800c7aa <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c76c:	6a3b      	ldr	r3, [r7, #32]
 800c76e:	0018      	movs	r0, r3
 800c770:	f000 fab1 	bl	800ccd6 <prvIsQueueEmpty>
 800c774:	1e03      	subs	r3, r0, #0
 800c776:	d011      	beq.n	800c79c <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c778:	6a3b      	ldr	r3, [r7, #32]
 800c77a:	3324      	adds	r3, #36	; 0x24
 800c77c:	687a      	ldr	r2, [r7, #4]
 800c77e:	0011      	movs	r1, r2
 800c780:	0018      	movs	r0, r3
 800c782:	f001 f807 	bl	800d794 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c786:	6a3b      	ldr	r3, [r7, #32]
 800c788:	0018      	movs	r0, r3
 800c78a:	f000 fa46 	bl	800cc1a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c78e:	f000 fe59 	bl	800d444 <xTaskResumeAll>
 800c792:	1e03      	subs	r3, r0, #0
 800c794:	d191      	bne.n	800c6ba <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 800c796:	f001 fefb 	bl	800e590 <vPortYield>
 800c79a:	e78e      	b.n	800c6ba <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c79c:	6a3b      	ldr	r3, [r7, #32]
 800c79e:	0018      	movs	r0, r3
 800c7a0:	f000 fa3b 	bl	800cc1a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c7a4:	f000 fe4e 	bl	800d444 <xTaskResumeAll>
 800c7a8:	e787      	b.n	800c6ba <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c7aa:	6a3b      	ldr	r3, [r7, #32]
 800c7ac:	0018      	movs	r0, r3
 800c7ae:	f000 fa34 	bl	800cc1a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c7b2:	f000 fe47 	bl	800d444 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c7b6:	6a3b      	ldr	r3, [r7, #32]
 800c7b8:	0018      	movs	r0, r3
 800c7ba:	f000 fa8c 	bl	800ccd6 <prvIsQueueEmpty>
 800c7be:	1e03      	subs	r3, r0, #0
 800c7c0:	d100      	bne.n	800c7c4 <xQueueReceive+0x160>
 800c7c2:	e77a      	b.n	800c6ba <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c7c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800c7c6:	0018      	movs	r0, r3
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	b00a      	add	sp, #40	; 0x28
 800c7cc:	bd80      	pop	{r7, pc}

0800c7ce <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c7ce:	b580      	push	{r7, lr}
 800c7d0:	b08a      	sub	sp, #40	; 0x28
 800c7d2:	af00      	add	r7, sp, #0
 800c7d4:	6078      	str	r0, [r7, #4]
 800c7d6:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c7d8:	2300      	movs	r3, #0
 800c7da:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c7e4:	69fb      	ldr	r3, [r7, #28]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d101      	bne.n	800c7ee <xQueueSemaphoreTake+0x20>
 800c7ea:	b672      	cpsid	i
 800c7ec:	e7fe      	b.n	800c7ec <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c7ee:	69fb      	ldr	r3, [r7, #28]
 800c7f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d001      	beq.n	800c7fa <xQueueSemaphoreTake+0x2c>
 800c7f6:	b672      	cpsid	i
 800c7f8:	e7fe      	b.n	800c7f8 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c7fa:	f001 f9ad 	bl	800db58 <xTaskGetSchedulerState>
 800c7fe:	1e03      	subs	r3, r0, #0
 800c800:	d102      	bne.n	800c808 <xQueueSemaphoreTake+0x3a>
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d101      	bne.n	800c80c <xQueueSemaphoreTake+0x3e>
 800c808:	2301      	movs	r3, #1
 800c80a:	e000      	b.n	800c80e <xQueueSemaphoreTake+0x40>
 800c80c:	2300      	movs	r3, #0
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d101      	bne.n	800c816 <xQueueSemaphoreTake+0x48>
 800c812:	b672      	cpsid	i
 800c814:	e7fe      	b.n	800c814 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800c816:	f001 fecb 	bl	800e5b0 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c81a:	69fb      	ldr	r3, [r7, #28]
 800c81c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c81e:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c820:	69bb      	ldr	r3, [r7, #24]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d01d      	beq.n	800c862 <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c826:	69bb      	ldr	r3, [r7, #24]
 800c828:	1e5a      	subs	r2, r3, #1
 800c82a:	69fb      	ldr	r3, [r7, #28]
 800c82c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c82e:	69fb      	ldr	r3, [r7, #28]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d104      	bne.n	800c840 <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800c836:	f001 fae9 	bl	800de0c <pvTaskIncrementMutexHeldCount>
 800c83a:	0002      	movs	r2, r0
 800c83c:	69fb      	ldr	r3, [r7, #28]
 800c83e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c840:	69fb      	ldr	r3, [r7, #28]
 800c842:	691b      	ldr	r3, [r3, #16]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d008      	beq.n	800c85a <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c848:	69fb      	ldr	r3, [r7, #28]
 800c84a:	3310      	adds	r3, #16
 800c84c:	0018      	movs	r0, r3
 800c84e:	f000 ffe5 	bl	800d81c <xTaskRemoveFromEventList>
 800c852:	1e03      	subs	r3, r0, #0
 800c854:	d001      	beq.n	800c85a <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c856:	f001 fe9b 	bl	800e590 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c85a:	f001 febb 	bl	800e5d4 <vPortExitCritical>
				return pdPASS;
 800c85e:	2301      	movs	r3, #1
 800c860:	e08b      	b.n	800c97a <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d108      	bne.n	800c87a <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c868:	6a3b      	ldr	r3, [r7, #32]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d001      	beq.n	800c872 <xQueueSemaphoreTake+0xa4>
 800c86e:	b672      	cpsid	i
 800c870:	e7fe      	b.n	800c870 <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c872:	f001 feaf 	bl	800e5d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c876:	2300      	movs	r3, #0
 800c878:	e07f      	b.n	800c97a <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d106      	bne.n	800c88e <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c880:	230c      	movs	r3, #12
 800c882:	18fb      	adds	r3, r7, r3
 800c884:	0018      	movs	r0, r3
 800c886:	f001 f825 	bl	800d8d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c88a:	2301      	movs	r3, #1
 800c88c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c88e:	f001 fea1 	bl	800e5d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c892:	f000 fdcb 	bl	800d42c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c896:	f001 fe8b 	bl	800e5b0 <vPortEnterCritical>
 800c89a:	69fb      	ldr	r3, [r7, #28]
 800c89c:	2244      	movs	r2, #68	; 0x44
 800c89e:	5c9b      	ldrb	r3, [r3, r2]
 800c8a0:	b25b      	sxtb	r3, r3
 800c8a2:	3301      	adds	r3, #1
 800c8a4:	d103      	bne.n	800c8ae <xQueueSemaphoreTake+0xe0>
 800c8a6:	69fb      	ldr	r3, [r7, #28]
 800c8a8:	2244      	movs	r2, #68	; 0x44
 800c8aa:	2100      	movs	r1, #0
 800c8ac:	5499      	strb	r1, [r3, r2]
 800c8ae:	69fb      	ldr	r3, [r7, #28]
 800c8b0:	2245      	movs	r2, #69	; 0x45
 800c8b2:	5c9b      	ldrb	r3, [r3, r2]
 800c8b4:	b25b      	sxtb	r3, r3
 800c8b6:	3301      	adds	r3, #1
 800c8b8:	d103      	bne.n	800c8c2 <xQueueSemaphoreTake+0xf4>
 800c8ba:	69fb      	ldr	r3, [r7, #28]
 800c8bc:	2245      	movs	r2, #69	; 0x45
 800c8be:	2100      	movs	r1, #0
 800c8c0:	5499      	strb	r1, [r3, r2]
 800c8c2:	f001 fe87 	bl	800e5d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c8c6:	003a      	movs	r2, r7
 800c8c8:	230c      	movs	r3, #12
 800c8ca:	18fb      	adds	r3, r7, r3
 800c8cc:	0011      	movs	r1, r2
 800c8ce:	0018      	movs	r0, r3
 800c8d0:	f001 f814 	bl	800d8fc <xTaskCheckForTimeOut>
 800c8d4:	1e03      	subs	r3, r0, #0
 800c8d6:	d12e      	bne.n	800c936 <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c8d8:	69fb      	ldr	r3, [r7, #28]
 800c8da:	0018      	movs	r0, r3
 800c8dc:	f000 f9fb 	bl	800ccd6 <prvIsQueueEmpty>
 800c8e0:	1e03      	subs	r3, r0, #0
 800c8e2:	d021      	beq.n	800c928 <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c8e4:	69fb      	ldr	r3, [r7, #28]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d10a      	bne.n	800c902 <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
 800c8ec:	f001 fe60 	bl	800e5b0 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800c8f0:	69fb      	ldr	r3, [r7, #28]
 800c8f2:	685b      	ldr	r3, [r3, #4]
 800c8f4:	0018      	movs	r0, r3
 800c8f6:	f001 f94b 	bl	800db90 <xTaskPriorityInherit>
 800c8fa:	0003      	movs	r3, r0
 800c8fc:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 800c8fe:	f001 fe69 	bl	800e5d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c902:	69fb      	ldr	r3, [r7, #28]
 800c904:	3324      	adds	r3, #36	; 0x24
 800c906:	683a      	ldr	r2, [r7, #0]
 800c908:	0011      	movs	r1, r2
 800c90a:	0018      	movs	r0, r3
 800c90c:	f000 ff42 	bl	800d794 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c910:	69fb      	ldr	r3, [r7, #28]
 800c912:	0018      	movs	r0, r3
 800c914:	f000 f981 	bl	800cc1a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c918:	f000 fd94 	bl	800d444 <xTaskResumeAll>
 800c91c:	1e03      	subs	r3, r0, #0
 800c91e:	d000      	beq.n	800c922 <xQueueSemaphoreTake+0x154>
 800c920:	e779      	b.n	800c816 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
 800c922:	f001 fe35 	bl	800e590 <vPortYield>
 800c926:	e776      	b.n	800c816 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c928:	69fb      	ldr	r3, [r7, #28]
 800c92a:	0018      	movs	r0, r3
 800c92c:	f000 f975 	bl	800cc1a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c930:	f000 fd88 	bl	800d444 <xTaskResumeAll>
 800c934:	e76f      	b.n	800c816 <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c936:	69fb      	ldr	r3, [r7, #28]
 800c938:	0018      	movs	r0, r3
 800c93a:	f000 f96e 	bl	800cc1a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c93e:	f000 fd81 	bl	800d444 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c942:	69fb      	ldr	r3, [r7, #28]
 800c944:	0018      	movs	r0, r3
 800c946:	f000 f9c6 	bl	800ccd6 <prvIsQueueEmpty>
 800c94a:	1e03      	subs	r3, r0, #0
 800c94c:	d100      	bne.n	800c950 <xQueueSemaphoreTake+0x182>
 800c94e:	e762      	b.n	800c816 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c950:	6a3b      	ldr	r3, [r7, #32]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d010      	beq.n	800c978 <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
 800c956:	f001 fe2b 	bl	800e5b0 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c95a:	69fb      	ldr	r3, [r7, #28]
 800c95c:	0018      	movs	r0, r3
 800c95e:	f000 f8b5 	bl	800cacc <prvGetDisinheritPriorityAfterTimeout>
 800c962:	0003      	movs	r3, r0
 800c964:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800c966:	69fb      	ldr	r3, [r7, #28]
 800c968:	685b      	ldr	r3, [r3, #4]
 800c96a:	697a      	ldr	r2, [r7, #20]
 800c96c:	0011      	movs	r1, r2
 800c96e:	0018      	movs	r0, r3
 800c970:	f001 f9d8 	bl	800dd24 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c974:	f001 fe2e 	bl	800e5d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c978:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800c97a:	0018      	movs	r0, r3
 800c97c:	46bd      	mov	sp, r7
 800c97e:	b00a      	add	sp, #40	; 0x28
 800c980:	bd80      	pop	{r7, pc}

0800c982 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c982:	b590      	push	{r4, r7, lr}
 800c984:	b08b      	sub	sp, #44	; 0x2c
 800c986:	af00      	add	r7, sp, #0
 800c988:	60f8      	str	r0, [r7, #12]
 800c98a:	60b9      	str	r1, [r7, #8]
 800c98c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800c992:	6a3b      	ldr	r3, [r7, #32]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d101      	bne.n	800c99c <xQueueReceiveFromISR+0x1a>
 800c998:	b672      	cpsid	i
 800c99a:	e7fe      	b.n	800c99a <xQueueReceiveFromISR+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c99c:	68bb      	ldr	r3, [r7, #8]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d103      	bne.n	800c9aa <xQueueReceiveFromISR+0x28>
 800c9a2:	6a3b      	ldr	r3, [r7, #32]
 800c9a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d101      	bne.n	800c9ae <xQueueReceiveFromISR+0x2c>
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	e000      	b.n	800c9b0 <xQueueReceiveFromISR+0x2e>
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d101      	bne.n	800c9b8 <xQueueReceiveFromISR+0x36>
 800c9b4:	b672      	cpsid	i
 800c9b6:	e7fe      	b.n	800c9b6 <xQueueReceiveFromISR+0x34>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c9b8:	f001 fe24 	bl	800e604 <ulSetInterruptMaskFromISR>
 800c9bc:	0003      	movs	r3, r0
 800c9be:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c9c0:	6a3b      	ldr	r3, [r7, #32]
 800c9c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9c4:	61bb      	str	r3, [r7, #24]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c9c6:	69bb      	ldr	r3, [r7, #24]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d032      	beq.n	800ca32 <xQueueReceiveFromISR+0xb0>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c9cc:	2417      	movs	r4, #23
 800c9ce:	193b      	adds	r3, r7, r4
 800c9d0:	6a3a      	ldr	r2, [r7, #32]
 800c9d2:	2144      	movs	r1, #68	; 0x44
 800c9d4:	5c52      	ldrb	r2, [r2, r1]
 800c9d6:	701a      	strb	r2, [r3, #0]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c9d8:	68ba      	ldr	r2, [r7, #8]
 800c9da:	6a3b      	ldr	r3, [r7, #32]
 800c9dc:	0011      	movs	r1, r2
 800c9de:	0018      	movs	r0, r3
 800c9e0:	f000 f8f5 	bl	800cbce <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c9e4:	69bb      	ldr	r3, [r7, #24]
 800c9e6:	1e5a      	subs	r2, r3, #1
 800c9e8:	6a3b      	ldr	r3, [r7, #32]
 800c9ea:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c9ec:	193b      	adds	r3, r7, r4
 800c9ee:	781b      	ldrb	r3, [r3, #0]
 800c9f0:	b25b      	sxtb	r3, r3
 800c9f2:	3301      	adds	r3, #1
 800c9f4:	d111      	bne.n	800ca1a <xQueueReceiveFromISR+0x98>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c9f6:	6a3b      	ldr	r3, [r7, #32]
 800c9f8:	691b      	ldr	r3, [r3, #16]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d016      	beq.n	800ca2c <xQueueReceiveFromISR+0xaa>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c9fe:	6a3b      	ldr	r3, [r7, #32]
 800ca00:	3310      	adds	r3, #16
 800ca02:	0018      	movs	r0, r3
 800ca04:	f000 ff0a 	bl	800d81c <xTaskRemoveFromEventList>
 800ca08:	1e03      	subs	r3, r0, #0
 800ca0a:	d00f      	beq.n	800ca2c <xQueueReceiveFromISR+0xaa>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d00c      	beq.n	800ca2c <xQueueReceiveFromISR+0xaa>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	2201      	movs	r2, #1
 800ca16:	601a      	str	r2, [r3, #0]
 800ca18:	e008      	b.n	800ca2c <xQueueReceiveFromISR+0xaa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ca1a:	2317      	movs	r3, #23
 800ca1c:	18fb      	adds	r3, r7, r3
 800ca1e:	781b      	ldrb	r3, [r3, #0]
 800ca20:	3301      	adds	r3, #1
 800ca22:	b2db      	uxtb	r3, r3
 800ca24:	b259      	sxtb	r1, r3
 800ca26:	6a3b      	ldr	r3, [r7, #32]
 800ca28:	2244      	movs	r2, #68	; 0x44
 800ca2a:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800ca2c:	2301      	movs	r3, #1
 800ca2e:	627b      	str	r3, [r7, #36]	; 0x24
 800ca30:	e001      	b.n	800ca36 <xQueueReceiveFromISR+0xb4>
		}
		else
		{
			xReturn = pdFAIL;
 800ca32:	2300      	movs	r3, #0
 800ca34:	627b      	str	r3, [r7, #36]	; 0x24
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800ca36:	69fb      	ldr	r3, [r7, #28]
 800ca38:	0018      	movs	r0, r3
 800ca3a:	f001 fde9 	bl	800e610 <vClearInterruptMaskFromISR>

	return xReturn;
 800ca3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ca40:	0018      	movs	r0, r3
 800ca42:	46bd      	mov	sp, r7
 800ca44:	b00b      	add	sp, #44	; 0x2c
 800ca46:	bd90      	pop	{r4, r7, pc}

0800ca48 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b084      	sub	sp, #16
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d101      	bne.n	800ca5a <uxQueueMessagesWaiting+0x12>
 800ca56:	b672      	cpsid	i
 800ca58:	e7fe      	b.n	800ca58 <uxQueueMessagesWaiting+0x10>

	taskENTER_CRITICAL();
 800ca5a:	f001 fda9 	bl	800e5b0 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca62:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800ca64:	f001 fdb6 	bl	800e5d4 <vPortExitCritical>

	return uxReturn;
 800ca68:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800ca6a:	0018      	movs	r0, r3
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	b004      	add	sp, #16
 800ca70:	bd80      	pop	{r7, pc}

0800ca72 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800ca72:	b580      	push	{r7, lr}
 800ca74:	b084      	sub	sp, #16
 800ca76:	af00      	add	r7, sp, #0
 800ca78:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d101      	bne.n	800ca84 <uxQueueMessagesWaitingFromISR+0x12>
 800ca80:	b672      	cpsid	i
 800ca82:	e7fe      	b.n	800ca82 <uxQueueMessagesWaitingFromISR+0x10>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca88:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800ca8c:	0018      	movs	r0, r3
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	b004      	add	sp, #16
 800ca92:	bd80      	pop	{r7, pc}

0800ca94 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b084      	sub	sp, #16
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d101      	bne.n	800caaa <vQueueDelete+0x16>
 800caa6:	b672      	cpsid	i
 800caa8:	e7fe      	b.n	800caa8 <vQueueDelete+0x14>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	0018      	movs	r0, r3
 800caae:	f000 f969 	bl	800cd84 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	2246      	movs	r2, #70	; 0x46
 800cab6:	5c9b      	ldrb	r3, [r3, r2]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d103      	bne.n	800cac4 <vQueueDelete+0x30>
		{
			vPortFree( pxQueue );
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	0018      	movs	r0, r3
 800cac0:	f001 feb4 	bl	800e82c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800cac4:	46c0      	nop			; (mov r8, r8)
 800cac6:	46bd      	mov	sp, r7
 800cac8:	b004      	add	sp, #16
 800caca:	bd80      	pop	{r7, pc}

0800cacc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b084      	sub	sp, #16
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d006      	beq.n	800caea <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	2238      	movs	r2, #56	; 0x38
 800cae4:	1ad3      	subs	r3, r2, r3
 800cae6:	60fb      	str	r3, [r7, #12]
 800cae8:	e001      	b.n	800caee <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800caea:	2300      	movs	r3, #0
 800caec:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800caee:	68fb      	ldr	r3, [r7, #12]
	}
 800caf0:	0018      	movs	r0, r3
 800caf2:	46bd      	mov	sp, r7
 800caf4:	b004      	add	sp, #16
 800caf6:	bd80      	pop	{r7, pc}

0800caf8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b086      	sub	sp, #24
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	60f8      	str	r0, [r7, #12]
 800cb00:	60b9      	str	r1, [r7, #8]
 800cb02:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cb04:	2300      	movs	r3, #0
 800cb06:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb0c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d10e      	bne.n	800cb34 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d14e      	bne.n	800cbbc <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	685b      	ldr	r3, [r3, #4]
 800cb22:	0018      	movs	r0, r3
 800cb24:	f001 f8a2 	bl	800dc6c <xTaskPriorityDisinherit>
 800cb28:	0003      	movs	r3, r0
 800cb2a:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	2200      	movs	r2, #0
 800cb30:	605a      	str	r2, [r3, #4]
 800cb32:	e043      	b.n	800cbbc <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d119      	bne.n	800cb6e <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	6898      	ldr	r0, [r3, #8]
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cb42:	68bb      	ldr	r3, [r7, #8]
 800cb44:	0019      	movs	r1, r3
 800cb46:	f002 f8a6 	bl	800ec96 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	689a      	ldr	r2, [r3, #8]
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb52:	18d2      	adds	r2, r2, r3
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	689a      	ldr	r2, [r3, #8]
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	685b      	ldr	r3, [r3, #4]
 800cb60:	429a      	cmp	r2, r3
 800cb62:	d32b      	bcc.n	800cbbc <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	681a      	ldr	r2, [r3, #0]
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	609a      	str	r2, [r3, #8]
 800cb6c:	e026      	b.n	800cbbc <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	68d8      	ldr	r0, [r3, #12]
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cb76:	68bb      	ldr	r3, [r7, #8]
 800cb78:	0019      	movs	r1, r3
 800cb7a:	f002 f88c 	bl	800ec96 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	68da      	ldr	r2, [r3, #12]
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb86:	425b      	negs	r3, r3
 800cb88:	18d2      	adds	r2, r2, r3
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	68da      	ldr	r2, [r3, #12]
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	429a      	cmp	r2, r3
 800cb98:	d207      	bcs.n	800cbaa <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	685a      	ldr	r2, [r3, #4]
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cba2:	425b      	negs	r3, r3
 800cba4:	18d2      	adds	r2, r2, r3
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	2b02      	cmp	r3, #2
 800cbae:	d105      	bne.n	800cbbc <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cbb0:	693b      	ldr	r3, [r7, #16]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d002      	beq.n	800cbbc <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cbb6:	693b      	ldr	r3, [r7, #16]
 800cbb8:	3b01      	subs	r3, #1
 800cbba:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cbbc:	693b      	ldr	r3, [r7, #16]
 800cbbe:	1c5a      	adds	r2, r3, #1
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800cbc4:	697b      	ldr	r3, [r7, #20]
}
 800cbc6:	0018      	movs	r0, r3
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	b006      	add	sp, #24
 800cbcc:	bd80      	pop	{r7, pc}

0800cbce <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cbce:	b580      	push	{r7, lr}
 800cbd0:	b082      	sub	sp, #8
 800cbd2:	af00      	add	r7, sp, #0
 800cbd4:	6078      	str	r0, [r7, #4]
 800cbd6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d018      	beq.n	800cc12 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	68da      	ldr	r2, [r3, #12]
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbe8:	18d2      	adds	r2, r2, r3
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	68da      	ldr	r2, [r3, #12]
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	685b      	ldr	r3, [r3, #4]
 800cbf6:	429a      	cmp	r2, r3
 800cbf8:	d303      	bcc.n	800cc02 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681a      	ldr	r2, [r3, #0]
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	68d9      	ldr	r1, [r3, #12]
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cc0a:	683b      	ldr	r3, [r7, #0]
 800cc0c:	0018      	movs	r0, r3
 800cc0e:	f002 f842 	bl	800ec96 <memcpy>
	}
}
 800cc12:	46c0      	nop			; (mov r8, r8)
 800cc14:	46bd      	mov	sp, r7
 800cc16:	b002      	add	sp, #8
 800cc18:	bd80      	pop	{r7, pc}

0800cc1a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cc1a:	b580      	push	{r7, lr}
 800cc1c:	b084      	sub	sp, #16
 800cc1e:	af00      	add	r7, sp, #0
 800cc20:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cc22:	f001 fcc5 	bl	800e5b0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cc26:	230f      	movs	r3, #15
 800cc28:	18fb      	adds	r3, r7, r3
 800cc2a:	687a      	ldr	r2, [r7, #4]
 800cc2c:	2145      	movs	r1, #69	; 0x45
 800cc2e:	5c52      	ldrb	r2, [r2, r1]
 800cc30:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cc32:	e013      	b.n	800cc5c <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d016      	beq.n	800cc6a <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	3324      	adds	r3, #36	; 0x24
 800cc40:	0018      	movs	r0, r3
 800cc42:	f000 fdeb 	bl	800d81c <xTaskRemoveFromEventList>
 800cc46:	1e03      	subs	r3, r0, #0
 800cc48:	d001      	beq.n	800cc4e <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cc4a:	f000 fea7 	bl	800d99c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cc4e:	210f      	movs	r1, #15
 800cc50:	187b      	adds	r3, r7, r1
 800cc52:	781b      	ldrb	r3, [r3, #0]
 800cc54:	3b01      	subs	r3, #1
 800cc56:	b2da      	uxtb	r2, r3
 800cc58:	187b      	adds	r3, r7, r1
 800cc5a:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cc5c:	230f      	movs	r3, #15
 800cc5e:	18fb      	adds	r3, r7, r3
 800cc60:	781b      	ldrb	r3, [r3, #0]
 800cc62:	b25b      	sxtb	r3, r3
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	dce5      	bgt.n	800cc34 <prvUnlockQueue+0x1a>
 800cc68:	e000      	b.n	800cc6c <prvUnlockQueue+0x52>
					break;
 800cc6a:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2245      	movs	r2, #69	; 0x45
 800cc70:	21ff      	movs	r1, #255	; 0xff
 800cc72:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800cc74:	f001 fcae 	bl	800e5d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cc78:	f001 fc9a 	bl	800e5b0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cc7c:	230e      	movs	r3, #14
 800cc7e:	18fb      	adds	r3, r7, r3
 800cc80:	687a      	ldr	r2, [r7, #4]
 800cc82:	2144      	movs	r1, #68	; 0x44
 800cc84:	5c52      	ldrb	r2, [r2, r1]
 800cc86:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cc88:	e013      	b.n	800ccb2 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	691b      	ldr	r3, [r3, #16]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d016      	beq.n	800ccc0 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	3310      	adds	r3, #16
 800cc96:	0018      	movs	r0, r3
 800cc98:	f000 fdc0 	bl	800d81c <xTaskRemoveFromEventList>
 800cc9c:	1e03      	subs	r3, r0, #0
 800cc9e:	d001      	beq.n	800cca4 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 800cca0:	f000 fe7c 	bl	800d99c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cca4:	210e      	movs	r1, #14
 800cca6:	187b      	adds	r3, r7, r1
 800cca8:	781b      	ldrb	r3, [r3, #0]
 800ccaa:	3b01      	subs	r3, #1
 800ccac:	b2da      	uxtb	r2, r3
 800ccae:	187b      	adds	r3, r7, r1
 800ccb0:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ccb2:	230e      	movs	r3, #14
 800ccb4:	18fb      	adds	r3, r7, r3
 800ccb6:	781b      	ldrb	r3, [r3, #0]
 800ccb8:	b25b      	sxtb	r3, r3
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	dce5      	bgt.n	800cc8a <prvUnlockQueue+0x70>
 800ccbe:	e000      	b.n	800ccc2 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 800ccc0:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	2244      	movs	r2, #68	; 0x44
 800ccc6:	21ff      	movs	r1, #255	; 0xff
 800ccc8:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800ccca:	f001 fc83 	bl	800e5d4 <vPortExitCritical>
}
 800ccce:	46c0      	nop			; (mov r8, r8)
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	b004      	add	sp, #16
 800ccd4:	bd80      	pop	{r7, pc}

0800ccd6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ccd6:	b580      	push	{r7, lr}
 800ccd8:	b084      	sub	sp, #16
 800ccda:	af00      	add	r7, sp, #0
 800ccdc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ccde:	f001 fc67 	bl	800e5b0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d102      	bne.n	800ccf0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ccea:	2301      	movs	r3, #1
 800ccec:	60fb      	str	r3, [r7, #12]
 800ccee:	e001      	b.n	800ccf4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ccf4:	f001 fc6e 	bl	800e5d4 <vPortExitCritical>

	return xReturn;
 800ccf8:	68fb      	ldr	r3, [r7, #12]
}
 800ccfa:	0018      	movs	r0, r3
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	b004      	add	sp, #16
 800cd00:	bd80      	pop	{r7, pc}

0800cd02 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cd02:	b580      	push	{r7, lr}
 800cd04:	b084      	sub	sp, #16
 800cd06:	af00      	add	r7, sp, #0
 800cd08:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cd0a:	f001 fc51 	bl	800e5b0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd16:	429a      	cmp	r2, r3
 800cd18:	d102      	bne.n	800cd20 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cd1a:	2301      	movs	r3, #1
 800cd1c:	60fb      	str	r3, [r7, #12]
 800cd1e:	e001      	b.n	800cd24 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cd20:	2300      	movs	r3, #0
 800cd22:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cd24:	f001 fc56 	bl	800e5d4 <vPortExitCritical>

	return xReturn;
 800cd28:	68fb      	ldr	r3, [r7, #12]
}
 800cd2a:	0018      	movs	r0, r3
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	b004      	add	sp, #16
 800cd30:	bd80      	pop	{r7, pc}
	...

0800cd34 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b084      	sub	sp, #16
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
 800cd3c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cd3e:	2300      	movs	r3, #0
 800cd40:	60fb      	str	r3, [r7, #12]
 800cd42:	e015      	b.n	800cd70 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cd44:	4b0e      	ldr	r3, [pc, #56]	; (800cd80 <vQueueAddToRegistry+0x4c>)
 800cd46:	68fa      	ldr	r2, [r7, #12]
 800cd48:	00d2      	lsls	r2, r2, #3
 800cd4a:	58d3      	ldr	r3, [r2, r3]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d10c      	bne.n	800cd6a <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cd50:	4b0b      	ldr	r3, [pc, #44]	; (800cd80 <vQueueAddToRegistry+0x4c>)
 800cd52:	68fa      	ldr	r2, [r7, #12]
 800cd54:	00d2      	lsls	r2, r2, #3
 800cd56:	6839      	ldr	r1, [r7, #0]
 800cd58:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cd5a:	4a09      	ldr	r2, [pc, #36]	; (800cd80 <vQueueAddToRegistry+0x4c>)
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	00db      	lsls	r3, r3, #3
 800cd60:	18d3      	adds	r3, r2, r3
 800cd62:	3304      	adds	r3, #4
 800cd64:	687a      	ldr	r2, [r7, #4]
 800cd66:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cd68:	e006      	b.n	800cd78 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	3301      	adds	r3, #1
 800cd6e:	60fb      	str	r3, [r7, #12]
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	2b07      	cmp	r3, #7
 800cd74:	d9e6      	bls.n	800cd44 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cd76:	46c0      	nop			; (mov r8, r8)
 800cd78:	46c0      	nop			; (mov r8, r8)
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	b004      	add	sp, #16
 800cd7e:	bd80      	pop	{r7, pc}
 800cd80:	20000b2c 	.word	0x20000b2c

0800cd84 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b084      	sub	sp, #16
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	60fb      	str	r3, [r7, #12]
 800cd90:	e018      	b.n	800cdc4 <vQueueUnregisterQueue+0x40>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800cd92:	4a10      	ldr	r2, [pc, #64]	; (800cdd4 <vQueueUnregisterQueue+0x50>)
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	00db      	lsls	r3, r3, #3
 800cd98:	18d3      	adds	r3, r2, r3
 800cd9a:	3304      	adds	r3, #4
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	687a      	ldr	r2, [r7, #4]
 800cda0:	429a      	cmp	r2, r3
 800cda2:	d10c      	bne.n	800cdbe <vQueueUnregisterQueue+0x3a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800cda4:	4b0b      	ldr	r3, [pc, #44]	; (800cdd4 <vQueueUnregisterQueue+0x50>)
 800cda6:	68fa      	ldr	r2, [r7, #12]
 800cda8:	00d2      	lsls	r2, r2, #3
 800cdaa:	2100      	movs	r1, #0
 800cdac:	50d1      	str	r1, [r2, r3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800cdae:	4a09      	ldr	r2, [pc, #36]	; (800cdd4 <vQueueUnregisterQueue+0x50>)
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	00db      	lsls	r3, r3, #3
 800cdb4:	18d3      	adds	r3, r2, r3
 800cdb6:	3304      	adds	r3, #4
 800cdb8:	2200      	movs	r2, #0
 800cdba:	601a      	str	r2, [r3, #0]
				break;
 800cdbc:	e006      	b.n	800cdcc <vQueueUnregisterQueue+0x48>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	3301      	adds	r3, #1
 800cdc2:	60fb      	str	r3, [r7, #12]
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	2b07      	cmp	r3, #7
 800cdc8:	d9e3      	bls.n	800cd92 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800cdca:	46c0      	nop			; (mov r8, r8)
 800cdcc:	46c0      	nop			; (mov r8, r8)
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	b004      	add	sp, #16
 800cdd2:	bd80      	pop	{r7, pc}
 800cdd4:	20000b2c 	.word	0x20000b2c

0800cdd8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b086      	sub	sp, #24
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	60f8      	str	r0, [r7, #12]
 800cde0:	60b9      	str	r1, [r7, #8]
 800cde2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cde8:	f001 fbe2 	bl	800e5b0 <vPortEnterCritical>
 800cdec:	697b      	ldr	r3, [r7, #20]
 800cdee:	2244      	movs	r2, #68	; 0x44
 800cdf0:	5c9b      	ldrb	r3, [r3, r2]
 800cdf2:	b25b      	sxtb	r3, r3
 800cdf4:	3301      	adds	r3, #1
 800cdf6:	d103      	bne.n	800ce00 <vQueueWaitForMessageRestricted+0x28>
 800cdf8:	697b      	ldr	r3, [r7, #20]
 800cdfa:	2244      	movs	r2, #68	; 0x44
 800cdfc:	2100      	movs	r1, #0
 800cdfe:	5499      	strb	r1, [r3, r2]
 800ce00:	697b      	ldr	r3, [r7, #20]
 800ce02:	2245      	movs	r2, #69	; 0x45
 800ce04:	5c9b      	ldrb	r3, [r3, r2]
 800ce06:	b25b      	sxtb	r3, r3
 800ce08:	3301      	adds	r3, #1
 800ce0a:	d103      	bne.n	800ce14 <vQueueWaitForMessageRestricted+0x3c>
 800ce0c:	697b      	ldr	r3, [r7, #20]
 800ce0e:	2245      	movs	r2, #69	; 0x45
 800ce10:	2100      	movs	r1, #0
 800ce12:	5499      	strb	r1, [r3, r2]
 800ce14:	f001 fbde 	bl	800e5d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ce18:	697b      	ldr	r3, [r7, #20]
 800ce1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d106      	bne.n	800ce2e <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ce20:	697b      	ldr	r3, [r7, #20]
 800ce22:	3324      	adds	r3, #36	; 0x24
 800ce24:	687a      	ldr	r2, [r7, #4]
 800ce26:	68b9      	ldr	r1, [r7, #8]
 800ce28:	0018      	movs	r0, r3
 800ce2a:	f000 fcd1 	bl	800d7d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ce2e:	697b      	ldr	r3, [r7, #20]
 800ce30:	0018      	movs	r0, r3
 800ce32:	f7ff fef2 	bl	800cc1a <prvUnlockQueue>
	}
 800ce36:	46c0      	nop			; (mov r8, r8)
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	b006      	add	sp, #24
 800ce3c:	bd80      	pop	{r7, pc}

0800ce3e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ce3e:	b590      	push	{r4, r7, lr}
 800ce40:	b08d      	sub	sp, #52	; 0x34
 800ce42:	af04      	add	r7, sp, #16
 800ce44:	60f8      	str	r0, [r7, #12]
 800ce46:	60b9      	str	r1, [r7, #8]
 800ce48:	607a      	str	r2, [r7, #4]
 800ce4a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ce4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d101      	bne.n	800ce56 <xTaskCreateStatic+0x18>
 800ce52:	b672      	cpsid	i
 800ce54:	e7fe      	b.n	800ce54 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800ce56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d101      	bne.n	800ce60 <xTaskCreateStatic+0x22>
 800ce5c:	b672      	cpsid	i
 800ce5e:	e7fe      	b.n	800ce5e <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ce60:	23bc      	movs	r3, #188	; 0xbc
 800ce62:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ce64:	697b      	ldr	r3, [r7, #20]
 800ce66:	2bbc      	cmp	r3, #188	; 0xbc
 800ce68:	d001      	beq.n	800ce6e <xTaskCreateStatic+0x30>
 800ce6a:	b672      	cpsid	i
 800ce6c:	e7fe      	b.n	800ce6c <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ce6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d020      	beq.n	800ceb6 <xTaskCreateStatic+0x78>
 800ce74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d01d      	beq.n	800ceb6 <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ce7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce7c:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ce7e:	69fb      	ldr	r3, [r7, #28]
 800ce80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ce82:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ce84:	69fb      	ldr	r3, [r7, #28]
 800ce86:	22b9      	movs	r2, #185	; 0xb9
 800ce88:	2102      	movs	r1, #2
 800ce8a:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ce8c:	683c      	ldr	r4, [r7, #0]
 800ce8e:	687a      	ldr	r2, [r7, #4]
 800ce90:	68b9      	ldr	r1, [r7, #8]
 800ce92:	68f8      	ldr	r0, [r7, #12]
 800ce94:	2300      	movs	r3, #0
 800ce96:	9303      	str	r3, [sp, #12]
 800ce98:	69fb      	ldr	r3, [r7, #28]
 800ce9a:	9302      	str	r3, [sp, #8]
 800ce9c:	2318      	movs	r3, #24
 800ce9e:	18fb      	adds	r3, r7, r3
 800cea0:	9301      	str	r3, [sp, #4]
 800cea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cea4:	9300      	str	r3, [sp, #0]
 800cea6:	0023      	movs	r3, r4
 800cea8:	f000 f858 	bl	800cf5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ceac:	69fb      	ldr	r3, [r7, #28]
 800ceae:	0018      	movs	r0, r3
 800ceb0:	f000 f8ec 	bl	800d08c <prvAddNewTaskToReadyList>
 800ceb4:	e001      	b.n	800ceba <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ceba:	69bb      	ldr	r3, [r7, #24]
	}
 800cebc:	0018      	movs	r0, r3
 800cebe:	46bd      	mov	sp, r7
 800cec0:	b009      	add	sp, #36	; 0x24
 800cec2:	bd90      	pop	{r4, r7, pc}

0800cec4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cec4:	b590      	push	{r4, r7, lr}
 800cec6:	b08d      	sub	sp, #52	; 0x34
 800cec8:	af04      	add	r7, sp, #16
 800ceca:	60f8      	str	r0, [r7, #12]
 800cecc:	60b9      	str	r1, [r7, #8]
 800cece:	603b      	str	r3, [r7, #0]
 800ced0:	1dbb      	adds	r3, r7, #6
 800ced2:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ced4:	1dbb      	adds	r3, r7, #6
 800ced6:	881b      	ldrh	r3, [r3, #0]
 800ced8:	009b      	lsls	r3, r3, #2
 800ceda:	0018      	movs	r0, r3
 800cedc:	f001 fc00 	bl	800e6e0 <pvPortMalloc>
 800cee0:	0003      	movs	r3, r0
 800cee2:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800cee4:	697b      	ldr	r3, [r7, #20]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d010      	beq.n	800cf0c <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800ceea:	20bc      	movs	r0, #188	; 0xbc
 800ceec:	f001 fbf8 	bl	800e6e0 <pvPortMalloc>
 800cef0:	0003      	movs	r3, r0
 800cef2:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800cef4:	69fb      	ldr	r3, [r7, #28]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d003      	beq.n	800cf02 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cefa:	69fb      	ldr	r3, [r7, #28]
 800cefc:	697a      	ldr	r2, [r7, #20]
 800cefe:	631a      	str	r2, [r3, #48]	; 0x30
 800cf00:	e006      	b.n	800cf10 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cf02:	697b      	ldr	r3, [r7, #20]
 800cf04:	0018      	movs	r0, r3
 800cf06:	f001 fc91 	bl	800e82c <vPortFree>
 800cf0a:	e001      	b.n	800cf10 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cf10:	69fb      	ldr	r3, [r7, #28]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d01a      	beq.n	800cf4c <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cf16:	69fb      	ldr	r3, [r7, #28]
 800cf18:	22b9      	movs	r2, #185	; 0xb9
 800cf1a:	2100      	movs	r1, #0
 800cf1c:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cf1e:	1dbb      	adds	r3, r7, #6
 800cf20:	881a      	ldrh	r2, [r3, #0]
 800cf22:	683c      	ldr	r4, [r7, #0]
 800cf24:	68b9      	ldr	r1, [r7, #8]
 800cf26:	68f8      	ldr	r0, [r7, #12]
 800cf28:	2300      	movs	r3, #0
 800cf2a:	9303      	str	r3, [sp, #12]
 800cf2c:	69fb      	ldr	r3, [r7, #28]
 800cf2e:	9302      	str	r3, [sp, #8]
 800cf30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf32:	9301      	str	r3, [sp, #4]
 800cf34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf36:	9300      	str	r3, [sp, #0]
 800cf38:	0023      	movs	r3, r4
 800cf3a:	f000 f80f 	bl	800cf5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cf3e:	69fb      	ldr	r3, [r7, #28]
 800cf40:	0018      	movs	r0, r3
 800cf42:	f000 f8a3 	bl	800d08c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cf46:	2301      	movs	r3, #1
 800cf48:	61bb      	str	r3, [r7, #24]
 800cf4a:	e002      	b.n	800cf52 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cf4c:	2301      	movs	r3, #1
 800cf4e:	425b      	negs	r3, r3
 800cf50:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cf52:	69bb      	ldr	r3, [r7, #24]
	}
 800cf54:	0018      	movs	r0, r3
 800cf56:	46bd      	mov	sp, r7
 800cf58:	b009      	add	sp, #36	; 0x24
 800cf5a:	bd90      	pop	{r4, r7, pc}

0800cf5c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b086      	sub	sp, #24
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	60f8      	str	r0, [r7, #12]
 800cf64:	60b9      	str	r1, [r7, #8]
 800cf66:	607a      	str	r2, [r7, #4]
 800cf68:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cf6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf6c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	009b      	lsls	r3, r3, #2
 800cf72:	001a      	movs	r2, r3
 800cf74:	21a5      	movs	r1, #165	; 0xa5
 800cf76:	f001 fe97 	bl	800eca8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800cf7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	493e      	ldr	r1, [pc, #248]	; (800d07c <prvInitialiseNewTask+0x120>)
 800cf82:	468c      	mov	ip, r1
 800cf84:	4463      	add	r3, ip
 800cf86:	009b      	lsls	r3, r3, #2
 800cf88:	18d3      	adds	r3, r2, r3
 800cf8a:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800cf8c:	693b      	ldr	r3, [r7, #16]
 800cf8e:	2207      	movs	r2, #7
 800cf90:	4393      	bics	r3, r2
 800cf92:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cf94:	693b      	ldr	r3, [r7, #16]
 800cf96:	2207      	movs	r2, #7
 800cf98:	4013      	ands	r3, r2
 800cf9a:	d001      	beq.n	800cfa0 <prvInitialiseNewTask+0x44>
 800cf9c:	b672      	cpsid	i
 800cf9e:	e7fe      	b.n	800cf9e <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	617b      	str	r3, [r7, #20]
 800cfa4:	e013      	b.n	800cfce <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cfa6:	68ba      	ldr	r2, [r7, #8]
 800cfa8:	697b      	ldr	r3, [r7, #20]
 800cfaa:	18d3      	adds	r3, r2, r3
 800cfac:	7818      	ldrb	r0, [r3, #0]
 800cfae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cfb0:	2134      	movs	r1, #52	; 0x34
 800cfb2:	697b      	ldr	r3, [r7, #20]
 800cfb4:	18d3      	adds	r3, r2, r3
 800cfb6:	185b      	adds	r3, r3, r1
 800cfb8:	1c02      	adds	r2, r0, #0
 800cfba:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800cfbc:	68ba      	ldr	r2, [r7, #8]
 800cfbe:	697b      	ldr	r3, [r7, #20]
 800cfc0:	18d3      	adds	r3, r2, r3
 800cfc2:	781b      	ldrb	r3, [r3, #0]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d006      	beq.n	800cfd6 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cfc8:	697b      	ldr	r3, [r7, #20]
 800cfca:	3301      	adds	r3, #1
 800cfcc:	617b      	str	r3, [r7, #20]
 800cfce:	697b      	ldr	r3, [r7, #20]
 800cfd0:	2b0f      	cmp	r3, #15
 800cfd2:	d9e8      	bls.n	800cfa6 <prvInitialiseNewTask+0x4a>
 800cfd4:	e000      	b.n	800cfd8 <prvInitialiseNewTask+0x7c>
		{
			break;
 800cfd6:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cfd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfda:	2243      	movs	r2, #67	; 0x43
 800cfdc:	2100      	movs	r1, #0
 800cfde:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cfe0:	6a3b      	ldr	r3, [r7, #32]
 800cfe2:	2b37      	cmp	r3, #55	; 0x37
 800cfe4:	d901      	bls.n	800cfea <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cfe6:	2337      	movs	r3, #55	; 0x37
 800cfe8:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cfea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfec:	6a3a      	ldr	r2, [r7, #32]
 800cfee:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cff2:	6a3a      	ldr	r2, [r7, #32]
 800cff4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cff8:	2200      	movs	r2, #0
 800cffa:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cffe:	3304      	adds	r3, #4
 800d000:	0018      	movs	r0, r3
 800d002:	f7fe ffc5 	bl	800bf90 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d008:	3318      	adds	r3, #24
 800d00a:	0018      	movs	r0, r3
 800d00c:	f7fe ffc0 	bl	800bf90 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d012:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d014:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d016:	6a3b      	ldr	r3, [r7, #32]
 800d018:	2238      	movs	r2, #56	; 0x38
 800d01a:	1ad2      	subs	r2, r2, r3
 800d01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d01e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d022:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d024:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d028:	22b4      	movs	r2, #180	; 0xb4
 800d02a:	2100      	movs	r1, #0
 800d02c:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d02e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d030:	22b8      	movs	r2, #184	; 0xb8
 800d032:	2100      	movs	r1, #0
 800d034:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d038:	3354      	adds	r3, #84	; 0x54
 800d03a:	2260      	movs	r2, #96	; 0x60
 800d03c:	2100      	movs	r1, #0
 800d03e:	0018      	movs	r0, r3
 800d040:	f001 fe32 	bl	800eca8 <memset>
 800d044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d046:	4a0e      	ldr	r2, [pc, #56]	; (800d080 <prvInitialiseNewTask+0x124>)
 800d048:	659a      	str	r2, [r3, #88]	; 0x58
 800d04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d04c:	4a0d      	ldr	r2, [pc, #52]	; (800d084 <prvInitialiseNewTask+0x128>)
 800d04e:	65da      	str	r2, [r3, #92]	; 0x5c
 800d050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d052:	4a0d      	ldr	r2, [pc, #52]	; (800d088 <prvInitialiseNewTask+0x12c>)
 800d054:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d056:	683a      	ldr	r2, [r7, #0]
 800d058:	68f9      	ldr	r1, [r7, #12]
 800d05a:	693b      	ldr	r3, [r7, #16]
 800d05c:	0018      	movs	r0, r3
 800d05e:	f001 fa0b 	bl	800e478 <pxPortInitialiseStack>
 800d062:	0002      	movs	r2, r0
 800d064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d066:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800d068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d002      	beq.n	800d074 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d070:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d072:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d074:	46c0      	nop			; (mov r8, r8)
 800d076:	46bd      	mov	sp, r7
 800d078:	b006      	add	sp, #24
 800d07a:	bd80      	pop	{r7, pc}
 800d07c:	3fffffff 	.word	0x3fffffff
 800d080:	08013a3c 	.word	0x08013a3c
 800d084:	08013a5c 	.word	0x08013a5c
 800d088:	08013a1c 	.word	0x08013a1c

0800d08c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b082      	sub	sp, #8
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d094:	f001 fa8c 	bl	800e5b0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d098:	4b2a      	ldr	r3, [pc, #168]	; (800d144 <prvAddNewTaskToReadyList+0xb8>)
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	1c5a      	adds	r2, r3, #1
 800d09e:	4b29      	ldr	r3, [pc, #164]	; (800d144 <prvAddNewTaskToReadyList+0xb8>)
 800d0a0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800d0a2:	4b29      	ldr	r3, [pc, #164]	; (800d148 <prvAddNewTaskToReadyList+0xbc>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d109      	bne.n	800d0be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d0aa:	4b27      	ldr	r3, [pc, #156]	; (800d148 <prvAddNewTaskToReadyList+0xbc>)
 800d0ac:	687a      	ldr	r2, [r7, #4]
 800d0ae:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d0b0:	4b24      	ldr	r3, [pc, #144]	; (800d144 <prvAddNewTaskToReadyList+0xb8>)
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	2b01      	cmp	r3, #1
 800d0b6:	d110      	bne.n	800d0da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d0b8:	f000 fc8a 	bl	800d9d0 <prvInitialiseTaskLists>
 800d0bc:	e00d      	b.n	800d0da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d0be:	4b23      	ldr	r3, [pc, #140]	; (800d14c <prvAddNewTaskToReadyList+0xc0>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d109      	bne.n	800d0da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d0c6:	4b20      	ldr	r3, [pc, #128]	; (800d148 <prvAddNewTaskToReadyList+0xbc>)
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0d0:	429a      	cmp	r2, r3
 800d0d2:	d802      	bhi.n	800d0da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d0d4:	4b1c      	ldr	r3, [pc, #112]	; (800d148 <prvAddNewTaskToReadyList+0xbc>)
 800d0d6:	687a      	ldr	r2, [r7, #4]
 800d0d8:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d0da:	4b1d      	ldr	r3, [pc, #116]	; (800d150 <prvAddNewTaskToReadyList+0xc4>)
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	1c5a      	adds	r2, r3, #1
 800d0e0:	4b1b      	ldr	r3, [pc, #108]	; (800d150 <prvAddNewTaskToReadyList+0xc4>)
 800d0e2:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d0e4:	4b1a      	ldr	r3, [pc, #104]	; (800d150 <prvAddNewTaskToReadyList+0xc4>)
 800d0e6:	681a      	ldr	r2, [r3, #0]
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0f0:	4b18      	ldr	r3, [pc, #96]	; (800d154 <prvAddNewTaskToReadyList+0xc8>)
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	429a      	cmp	r2, r3
 800d0f6:	d903      	bls.n	800d100 <prvAddNewTaskToReadyList+0x74>
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0fc:	4b15      	ldr	r3, [pc, #84]	; (800d154 <prvAddNewTaskToReadyList+0xc8>)
 800d0fe:	601a      	str	r2, [r3, #0]
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d104:	0013      	movs	r3, r2
 800d106:	009b      	lsls	r3, r3, #2
 800d108:	189b      	adds	r3, r3, r2
 800d10a:	009b      	lsls	r3, r3, #2
 800d10c:	4a12      	ldr	r2, [pc, #72]	; (800d158 <prvAddNewTaskToReadyList+0xcc>)
 800d10e:	189a      	adds	r2, r3, r2
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	3304      	adds	r3, #4
 800d114:	0019      	movs	r1, r3
 800d116:	0010      	movs	r0, r2
 800d118:	f7fe ff45 	bl	800bfa6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d11c:	f001 fa5a 	bl	800e5d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d120:	4b0a      	ldr	r3, [pc, #40]	; (800d14c <prvAddNewTaskToReadyList+0xc0>)
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d008      	beq.n	800d13a <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d128:	4b07      	ldr	r3, [pc, #28]	; (800d148 <prvAddNewTaskToReadyList+0xbc>)
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d132:	429a      	cmp	r2, r3
 800d134:	d201      	bcs.n	800d13a <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d136:	f001 fa2b 	bl	800e590 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d13a:	46c0      	nop			; (mov r8, r8)
 800d13c:	46bd      	mov	sp, r7
 800d13e:	b002      	add	sp, #8
 800d140:	bd80      	pop	{r7, pc}
 800d142:	46c0      	nop			; (mov r8, r8)
 800d144:	20001040 	.word	0x20001040
 800d148:	20000b6c 	.word	0x20000b6c
 800d14c:	2000104c 	.word	0x2000104c
 800d150:	2000105c 	.word	0x2000105c
 800d154:	20001048 	.word	0x20001048
 800d158:	20000b70 	.word	0x20000b70

0800d15c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b084      	sub	sp, #16
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d164:	2300      	movs	r3, #0
 800d166:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d010      	beq.n	800d190 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d16e:	4b0d      	ldr	r3, [pc, #52]	; (800d1a4 <vTaskDelay+0x48>)
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d001      	beq.n	800d17a <vTaskDelay+0x1e>
 800d176:	b672      	cpsid	i
 800d178:	e7fe      	b.n	800d178 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800d17a:	f000 f957 	bl	800d42c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	2100      	movs	r1, #0
 800d182:	0018      	movs	r0, r3
 800d184:	f000 fe54 	bl	800de30 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d188:	f000 f95c 	bl	800d444 <xTaskResumeAll>
 800d18c:	0003      	movs	r3, r0
 800d18e:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d101      	bne.n	800d19a <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 800d196:	f001 f9fb 	bl	800e590 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d19a:	46c0      	nop			; (mov r8, r8)
 800d19c:	46bd      	mov	sp, r7
 800d19e:	b004      	add	sp, #16
 800d1a0:	bd80      	pop	{r7, pc}
 800d1a2:	46c0      	nop			; (mov r8, r8)
 800d1a4:	20001068 	.word	0x20001068

0800d1a8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b084      	sub	sp, #16
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800d1b0:	f001 f9fe 	bl	800e5b0 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d102      	bne.n	800d1c0 <vTaskSuspend+0x18>
 800d1ba:	4b29      	ldr	r3, [pc, #164]	; (800d260 <vTaskSuspend+0xb8>)
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	e000      	b.n	800d1c2 <vTaskSuspend+0x1a>
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	3304      	adds	r3, #4
 800d1c8:	0018      	movs	r0, r3
 800d1ca:	f7fe ff44 	bl	800c056 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d004      	beq.n	800d1e0 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	3318      	adds	r3, #24
 800d1da:	0018      	movs	r0, r3
 800d1dc:	f7fe ff3b 	bl	800c056 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	1d1a      	adds	r2, r3, #4
 800d1e4:	4b1f      	ldr	r3, [pc, #124]	; (800d264 <vTaskSuspend+0xbc>)
 800d1e6:	0011      	movs	r1, r2
 800d1e8:	0018      	movs	r0, r3
 800d1ea:	f7fe fedc 	bl	800bfa6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	22b8      	movs	r2, #184	; 0xb8
 800d1f2:	5c9b      	ldrb	r3, [r3, r2]
 800d1f4:	b2db      	uxtb	r3, r3
 800d1f6:	2b01      	cmp	r3, #1
 800d1f8:	d103      	bne.n	800d202 <vTaskSuspend+0x5a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	22b8      	movs	r2, #184	; 0xb8
 800d1fe:	2100      	movs	r1, #0
 800d200:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800d202:	f001 f9e7 	bl	800e5d4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800d206:	4b18      	ldr	r3, [pc, #96]	; (800d268 <vTaskSuspend+0xc0>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d005      	beq.n	800d21a <vTaskSuspend+0x72>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800d20e:	f001 f9cf 	bl	800e5b0 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800d212:	f000 fc7d 	bl	800db10 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800d216:	f001 f9dd 	bl	800e5d4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800d21a:	4b11      	ldr	r3, [pc, #68]	; (800d260 <vTaskSuspend+0xb8>)
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	68fa      	ldr	r2, [r7, #12]
 800d220:	429a      	cmp	r2, r3
 800d222:	d118      	bne.n	800d256 <vTaskSuspend+0xae>
		{
			if( xSchedulerRunning != pdFALSE )
 800d224:	4b10      	ldr	r3, [pc, #64]	; (800d268 <vTaskSuspend+0xc0>)
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d008      	beq.n	800d23e <vTaskSuspend+0x96>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800d22c:	4b0f      	ldr	r3, [pc, #60]	; (800d26c <vTaskSuspend+0xc4>)
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d001      	beq.n	800d238 <vTaskSuspend+0x90>
 800d234:	b672      	cpsid	i
 800d236:	e7fe      	b.n	800d236 <vTaskSuspend+0x8e>
				portYIELD_WITHIN_API();
 800d238:	f001 f9aa 	bl	800e590 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d23c:	e00b      	b.n	800d256 <vTaskSuspend+0xae>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 800d23e:	4b09      	ldr	r3, [pc, #36]	; (800d264 <vTaskSuspend+0xbc>)
 800d240:	681a      	ldr	r2, [r3, #0]
 800d242:	4b0b      	ldr	r3, [pc, #44]	; (800d270 <vTaskSuspend+0xc8>)
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	429a      	cmp	r2, r3
 800d248:	d103      	bne.n	800d252 <vTaskSuspend+0xaa>
					pxCurrentTCB = NULL;
 800d24a:	4b05      	ldr	r3, [pc, #20]	; (800d260 <vTaskSuspend+0xb8>)
 800d24c:	2200      	movs	r2, #0
 800d24e:	601a      	str	r2, [r3, #0]
	}
 800d250:	e001      	b.n	800d256 <vTaskSuspend+0xae>
					vTaskSwitchContext();
 800d252:	f000 fa45 	bl	800d6e0 <vTaskSwitchContext>
	}
 800d256:	46c0      	nop			; (mov r8, r8)
 800d258:	46bd      	mov	sp, r7
 800d25a:	b004      	add	sp, #16
 800d25c:	bd80      	pop	{r7, pc}
 800d25e:	46c0      	nop			; (mov r8, r8)
 800d260:	20000b6c 	.word	0x20000b6c
 800d264:	2000102c 	.word	0x2000102c
 800d268:	2000104c 	.word	0x2000104c
 800d26c:	20001068 	.word	0x20001068
 800d270:	20001040 	.word	0x20001040

0800d274 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800d274:	b580      	push	{r7, lr}
 800d276:	b084      	sub	sp, #16
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800d27c:	2300      	movs	r3, #0
 800d27e:	60fb      	str	r3, [r7, #12]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	60bb      	str	r3, [r7, #8]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d101      	bne.n	800d28e <prvTaskIsTaskSuspended+0x1a>
 800d28a:	b672      	cpsid	i
 800d28c:	e7fe      	b.n	800d28c <prvTaskIsTaskSuspended+0x18>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d28e:	68bb      	ldr	r3, [r7, #8]
 800d290:	695a      	ldr	r2, [r3, #20]
 800d292:	4b0e      	ldr	r3, [pc, #56]	; (800d2cc <prvTaskIsTaskSuspended+0x58>)
 800d294:	429a      	cmp	r2, r3
 800d296:	d101      	bne.n	800d29c <prvTaskIsTaskSuspended+0x28>
 800d298:	2301      	movs	r3, #1
 800d29a:	e000      	b.n	800d29e <prvTaskIsTaskSuspended+0x2a>
 800d29c:	2300      	movs	r3, #0
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d00f      	beq.n	800d2c2 <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800d2a2:	68bb      	ldr	r3, [r7, #8]
 800d2a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d2a6:	4b0a      	ldr	r3, [pc, #40]	; (800d2d0 <prvTaskIsTaskSuspended+0x5c>)
 800d2a8:	429a      	cmp	r2, r3
 800d2aa:	d00a      	beq.n	800d2c2 <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800d2ac:	68bb      	ldr	r3, [r7, #8]
 800d2ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d101      	bne.n	800d2b8 <prvTaskIsTaskSuspended+0x44>
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	e000      	b.n	800d2ba <prvTaskIsTaskSuspended+0x46>
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d001      	beq.n	800d2c2 <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 800d2be:	2301      	movs	r3, #1
 800d2c0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d2c2:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800d2c4:	0018      	movs	r0, r3
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	b004      	add	sp, #16
 800d2ca:	bd80      	pop	{r7, pc}
 800d2cc:	2000102c 	.word	0x2000102c
 800d2d0:	20001000 	.word	0x20001000

0800d2d4 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b084      	sub	sp, #16
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d101      	bne.n	800d2ea <vTaskResume+0x16>
 800d2e6:	b672      	cpsid	i
 800d2e8:	e7fe      	b.n	800d2e8 <vTaskResume+0x14>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d034      	beq.n	800d35a <vTaskResume+0x86>
 800d2f0:	4b1c      	ldr	r3, [pc, #112]	; (800d364 <vTaskResume+0x90>)
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	68fa      	ldr	r2, [r7, #12]
 800d2f6:	429a      	cmp	r2, r3
 800d2f8:	d02f      	beq.n	800d35a <vTaskResume+0x86>
		{
			taskENTER_CRITICAL();
 800d2fa:	f001 f959 	bl	800e5b0 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	0018      	movs	r0, r3
 800d302:	f7ff ffb7 	bl	800d274 <prvTaskIsTaskSuspended>
 800d306:	1e03      	subs	r3, r0, #0
 800d308:	d025      	beq.n	800d356 <vTaskResume+0x82>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	3304      	adds	r3, #4
 800d30e:	0018      	movs	r0, r3
 800d310:	f7fe fea1 	bl	800c056 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d318:	4b13      	ldr	r3, [pc, #76]	; (800d368 <vTaskResume+0x94>)
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	429a      	cmp	r2, r3
 800d31e:	d903      	bls.n	800d328 <vTaskResume+0x54>
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d324:	4b10      	ldr	r3, [pc, #64]	; (800d368 <vTaskResume+0x94>)
 800d326:	601a      	str	r2, [r3, #0]
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d32c:	0013      	movs	r3, r2
 800d32e:	009b      	lsls	r3, r3, #2
 800d330:	189b      	adds	r3, r3, r2
 800d332:	009b      	lsls	r3, r3, #2
 800d334:	4a0d      	ldr	r2, [pc, #52]	; (800d36c <vTaskResume+0x98>)
 800d336:	189a      	adds	r2, r3, r2
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	3304      	adds	r3, #4
 800d33c:	0019      	movs	r1, r3
 800d33e:	0010      	movs	r0, r2
 800d340:	f7fe fe31 	bl	800bfa6 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d348:	4b06      	ldr	r3, [pc, #24]	; (800d364 <vTaskResume+0x90>)
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d34e:	429a      	cmp	r2, r3
 800d350:	d301      	bcc.n	800d356 <vTaskResume+0x82>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800d352:	f001 f91d 	bl	800e590 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800d356:	f001 f93d 	bl	800e5d4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d35a:	46c0      	nop			; (mov r8, r8)
 800d35c:	46bd      	mov	sp, r7
 800d35e:	b004      	add	sp, #16
 800d360:	bd80      	pop	{r7, pc}
 800d362:	46c0      	nop			; (mov r8, r8)
 800d364:	20000b6c 	.word	0x20000b6c
 800d368:	20001048 	.word	0x20001048
 800d36c:	20000b70 	.word	0x20000b70

0800d370 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d370:	b590      	push	{r4, r7, lr}
 800d372:	b089      	sub	sp, #36	; 0x24
 800d374:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d376:	2300      	movs	r3, #0
 800d378:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d37a:	2300      	movs	r3, #0
 800d37c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d37e:	003a      	movs	r2, r7
 800d380:	1d39      	adds	r1, r7, #4
 800d382:	2308      	movs	r3, #8
 800d384:	18fb      	adds	r3, r7, r3
 800d386:	0018      	movs	r0, r3
 800d388:	f7fe fdb4 	bl	800bef4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d38c:	683c      	ldr	r4, [r7, #0]
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	68ba      	ldr	r2, [r7, #8]
 800d392:	491e      	ldr	r1, [pc, #120]	; (800d40c <vTaskStartScheduler+0x9c>)
 800d394:	481e      	ldr	r0, [pc, #120]	; (800d410 <vTaskStartScheduler+0xa0>)
 800d396:	9202      	str	r2, [sp, #8]
 800d398:	9301      	str	r3, [sp, #4]
 800d39a:	2300      	movs	r3, #0
 800d39c:	9300      	str	r3, [sp, #0]
 800d39e:	2300      	movs	r3, #0
 800d3a0:	0022      	movs	r2, r4
 800d3a2:	f7ff fd4c 	bl	800ce3e <xTaskCreateStatic>
 800d3a6:	0002      	movs	r2, r0
 800d3a8:	4b1a      	ldr	r3, [pc, #104]	; (800d414 <vTaskStartScheduler+0xa4>)
 800d3aa:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d3ac:	4b19      	ldr	r3, [pc, #100]	; (800d414 <vTaskStartScheduler+0xa4>)
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d002      	beq.n	800d3ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d3b4:	2301      	movs	r3, #1
 800d3b6:	60fb      	str	r3, [r7, #12]
 800d3b8:	e001      	b.n	800d3be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	2b01      	cmp	r3, #1
 800d3c2:	d103      	bne.n	800d3cc <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 800d3c4:	f000 fd88 	bl	800ded8 <xTimerCreateTimerTask>
 800d3c8:	0003      	movs	r3, r0
 800d3ca:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	2b01      	cmp	r3, #1
 800d3d0:	d113      	bne.n	800d3fa <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800d3d2:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d3d4:	4b10      	ldr	r3, [pc, #64]	; (800d418 <vTaskStartScheduler+0xa8>)
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	3354      	adds	r3, #84	; 0x54
 800d3da:	001a      	movs	r2, r3
 800d3dc:	4b0f      	ldr	r3, [pc, #60]	; (800d41c <vTaskStartScheduler+0xac>)
 800d3de:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d3e0:	4b0f      	ldr	r3, [pc, #60]	; (800d420 <vTaskStartScheduler+0xb0>)
 800d3e2:	2201      	movs	r2, #1
 800d3e4:	4252      	negs	r2, r2
 800d3e6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d3e8:	4b0e      	ldr	r3, [pc, #56]	; (800d424 <vTaskStartScheduler+0xb4>)
 800d3ea:	2201      	movs	r2, #1
 800d3ec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800d3ee:	4b0e      	ldr	r3, [pc, #56]	; (800d428 <vTaskStartScheduler+0xb8>)
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d3f4:	f001 f8a8 	bl	800e548 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d3f8:	e004      	b.n	800d404 <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	3301      	adds	r3, #1
 800d3fe:	d101      	bne.n	800d404 <vTaskStartScheduler+0x94>
 800d400:	b672      	cpsid	i
 800d402:	e7fe      	b.n	800d402 <vTaskStartScheduler+0x92>
}
 800d404:	46c0      	nop			; (mov r8, r8)
 800d406:	46bd      	mov	sp, r7
 800d408:	b005      	add	sp, #20
 800d40a:	bd90      	pop	{r4, r7, pc}
 800d40c:	08012f1c 	.word	0x08012f1c
 800d410:	0800d9b1 	.word	0x0800d9b1
 800d414:	20001064 	.word	0x20001064
 800d418:	20000b6c 	.word	0x20000b6c
 800d41c:	2000009c 	.word	0x2000009c
 800d420:	20001060 	.word	0x20001060
 800d424:	2000104c 	.word	0x2000104c
 800d428:	20001044 	.word	0x20001044

0800d42c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800d430:	4b03      	ldr	r3, [pc, #12]	; (800d440 <vTaskSuspendAll+0x14>)
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	1c5a      	adds	r2, r3, #1
 800d436:	4b02      	ldr	r3, [pc, #8]	; (800d440 <vTaskSuspendAll+0x14>)
 800d438:	601a      	str	r2, [r3, #0]
}
 800d43a:	46c0      	nop			; (mov r8, r8)
 800d43c:	46bd      	mov	sp, r7
 800d43e:	bd80      	pop	{r7, pc}
 800d440:	20001068 	.word	0x20001068

0800d444 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b084      	sub	sp, #16
 800d448:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d44a:	2300      	movs	r3, #0
 800d44c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d44e:	2300      	movs	r3, #0
 800d450:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d452:	4b3a      	ldr	r3, [pc, #232]	; (800d53c <xTaskResumeAll+0xf8>)
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d101      	bne.n	800d45e <xTaskResumeAll+0x1a>
 800d45a:	b672      	cpsid	i
 800d45c:	e7fe      	b.n	800d45c <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d45e:	f001 f8a7 	bl	800e5b0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d462:	4b36      	ldr	r3, [pc, #216]	; (800d53c <xTaskResumeAll+0xf8>)
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	1e5a      	subs	r2, r3, #1
 800d468:	4b34      	ldr	r3, [pc, #208]	; (800d53c <xTaskResumeAll+0xf8>)
 800d46a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d46c:	4b33      	ldr	r3, [pc, #204]	; (800d53c <xTaskResumeAll+0xf8>)
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d15b      	bne.n	800d52c <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d474:	4b32      	ldr	r3, [pc, #200]	; (800d540 <xTaskResumeAll+0xfc>)
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d057      	beq.n	800d52c <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d47c:	e02f      	b.n	800d4de <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800d47e:	4b31      	ldr	r3, [pc, #196]	; (800d544 <xTaskResumeAll+0x100>)
 800d480:	68db      	ldr	r3, [r3, #12]
 800d482:	68db      	ldr	r3, [r3, #12]
 800d484:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	3318      	adds	r3, #24
 800d48a:	0018      	movs	r0, r3
 800d48c:	f7fe fde3 	bl	800c056 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	3304      	adds	r3, #4
 800d494:	0018      	movs	r0, r3
 800d496:	f7fe fdde 	bl	800c056 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d49e:	4b2a      	ldr	r3, [pc, #168]	; (800d548 <xTaskResumeAll+0x104>)
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	429a      	cmp	r2, r3
 800d4a4:	d903      	bls.n	800d4ae <xTaskResumeAll+0x6a>
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4aa:	4b27      	ldr	r3, [pc, #156]	; (800d548 <xTaskResumeAll+0x104>)
 800d4ac:	601a      	str	r2, [r3, #0]
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4b2:	0013      	movs	r3, r2
 800d4b4:	009b      	lsls	r3, r3, #2
 800d4b6:	189b      	adds	r3, r3, r2
 800d4b8:	009b      	lsls	r3, r3, #2
 800d4ba:	4a24      	ldr	r2, [pc, #144]	; (800d54c <xTaskResumeAll+0x108>)
 800d4bc:	189a      	adds	r2, r3, r2
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	3304      	adds	r3, #4
 800d4c2:	0019      	movs	r1, r3
 800d4c4:	0010      	movs	r0, r2
 800d4c6:	f7fe fd6e 	bl	800bfa6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4ce:	4b20      	ldr	r3, [pc, #128]	; (800d550 <xTaskResumeAll+0x10c>)
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4d4:	429a      	cmp	r2, r3
 800d4d6:	d302      	bcc.n	800d4de <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 800d4d8:	4b1e      	ldr	r3, [pc, #120]	; (800d554 <xTaskResumeAll+0x110>)
 800d4da:	2201      	movs	r2, #1
 800d4dc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d4de:	4b19      	ldr	r3, [pc, #100]	; (800d544 <xTaskResumeAll+0x100>)
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d1cb      	bne.n	800d47e <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d001      	beq.n	800d4f0 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d4ec:	f000 fb10 	bl	800db10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d4f0:	4b19      	ldr	r3, [pc, #100]	; (800d558 <xTaskResumeAll+0x114>)
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d00f      	beq.n	800d51c <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d4fc:	f000 f83c 	bl	800d578 <xTaskIncrementTick>
 800d500:	1e03      	subs	r3, r0, #0
 800d502:	d002      	beq.n	800d50a <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 800d504:	4b13      	ldr	r3, [pc, #76]	; (800d554 <xTaskResumeAll+0x110>)
 800d506:	2201      	movs	r2, #1
 800d508:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	3b01      	subs	r3, #1
 800d50e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d1f2      	bne.n	800d4fc <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 800d516:	4b10      	ldr	r3, [pc, #64]	; (800d558 <xTaskResumeAll+0x114>)
 800d518:	2200      	movs	r2, #0
 800d51a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d51c:	4b0d      	ldr	r3, [pc, #52]	; (800d554 <xTaskResumeAll+0x110>)
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d003      	beq.n	800d52c <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d524:	2301      	movs	r3, #1
 800d526:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d528:	f001 f832 	bl	800e590 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d52c:	f001 f852 	bl	800e5d4 <vPortExitCritical>

	return xAlreadyYielded;
 800d530:	68bb      	ldr	r3, [r7, #8]
}
 800d532:	0018      	movs	r0, r3
 800d534:	46bd      	mov	sp, r7
 800d536:	b004      	add	sp, #16
 800d538:	bd80      	pop	{r7, pc}
 800d53a:	46c0      	nop			; (mov r8, r8)
 800d53c:	20001068 	.word	0x20001068
 800d540:	20001040 	.word	0x20001040
 800d544:	20001000 	.word	0x20001000
 800d548:	20001048 	.word	0x20001048
 800d54c:	20000b70 	.word	0x20000b70
 800d550:	20000b6c 	.word	0x20000b6c
 800d554:	20001054 	.word	0x20001054
 800d558:	20001050 	.word	0x20001050

0800d55c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b082      	sub	sp, #8
 800d560:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d562:	4b04      	ldr	r3, [pc, #16]	; (800d574 <xTaskGetTickCount+0x18>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d568:	687b      	ldr	r3, [r7, #4]
}
 800d56a:	0018      	movs	r0, r3
 800d56c:	46bd      	mov	sp, r7
 800d56e:	b002      	add	sp, #8
 800d570:	bd80      	pop	{r7, pc}
 800d572:	46c0      	nop			; (mov r8, r8)
 800d574:	20001044 	.word	0x20001044

0800d578 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b086      	sub	sp, #24
 800d57c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d57e:	2300      	movs	r3, #0
 800d580:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d582:	4b4c      	ldr	r3, [pc, #304]	; (800d6b4 <xTaskIncrementTick+0x13c>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d000      	beq.n	800d58c <xTaskIncrementTick+0x14>
 800d58a:	e083      	b.n	800d694 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d58c:	4b4a      	ldr	r3, [pc, #296]	; (800d6b8 <xTaskIncrementTick+0x140>)
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	3301      	adds	r3, #1
 800d592:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d594:	4b48      	ldr	r3, [pc, #288]	; (800d6b8 <xTaskIncrementTick+0x140>)
 800d596:	693a      	ldr	r2, [r7, #16]
 800d598:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d59a:	693b      	ldr	r3, [r7, #16]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d117      	bne.n	800d5d0 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 800d5a0:	4b46      	ldr	r3, [pc, #280]	; (800d6bc <xTaskIncrementTick+0x144>)
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d001      	beq.n	800d5ae <xTaskIncrementTick+0x36>
 800d5aa:	b672      	cpsid	i
 800d5ac:	e7fe      	b.n	800d5ac <xTaskIncrementTick+0x34>
 800d5ae:	4b43      	ldr	r3, [pc, #268]	; (800d6bc <xTaskIncrementTick+0x144>)
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	60fb      	str	r3, [r7, #12]
 800d5b4:	4b42      	ldr	r3, [pc, #264]	; (800d6c0 <xTaskIncrementTick+0x148>)
 800d5b6:	681a      	ldr	r2, [r3, #0]
 800d5b8:	4b40      	ldr	r3, [pc, #256]	; (800d6bc <xTaskIncrementTick+0x144>)
 800d5ba:	601a      	str	r2, [r3, #0]
 800d5bc:	4b40      	ldr	r3, [pc, #256]	; (800d6c0 <xTaskIncrementTick+0x148>)
 800d5be:	68fa      	ldr	r2, [r7, #12]
 800d5c0:	601a      	str	r2, [r3, #0]
 800d5c2:	4b40      	ldr	r3, [pc, #256]	; (800d6c4 <xTaskIncrementTick+0x14c>)
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	1c5a      	adds	r2, r3, #1
 800d5c8:	4b3e      	ldr	r3, [pc, #248]	; (800d6c4 <xTaskIncrementTick+0x14c>)
 800d5ca:	601a      	str	r2, [r3, #0]
 800d5cc:	f000 faa0 	bl	800db10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d5d0:	4b3d      	ldr	r3, [pc, #244]	; (800d6c8 <xTaskIncrementTick+0x150>)
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	693a      	ldr	r2, [r7, #16]
 800d5d6:	429a      	cmp	r2, r3
 800d5d8:	d34e      	bcc.n	800d678 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d5da:	4b38      	ldr	r3, [pc, #224]	; (800d6bc <xTaskIncrementTick+0x144>)
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d101      	bne.n	800d5e8 <xTaskIncrementTick+0x70>
 800d5e4:	2301      	movs	r3, #1
 800d5e6:	e000      	b.n	800d5ea <xTaskIncrementTick+0x72>
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d004      	beq.n	800d5f8 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d5ee:	4b36      	ldr	r3, [pc, #216]	; (800d6c8 <xTaskIncrementTick+0x150>)
 800d5f0:	2201      	movs	r2, #1
 800d5f2:	4252      	negs	r2, r2
 800d5f4:	601a      	str	r2, [r3, #0]
					break;
 800d5f6:	e03f      	b.n	800d678 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d5f8:	4b30      	ldr	r3, [pc, #192]	; (800d6bc <xTaskIncrementTick+0x144>)
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	68db      	ldr	r3, [r3, #12]
 800d5fe:	68db      	ldr	r3, [r3, #12]
 800d600:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d602:	68bb      	ldr	r3, [r7, #8]
 800d604:	685b      	ldr	r3, [r3, #4]
 800d606:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d608:	693a      	ldr	r2, [r7, #16]
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	429a      	cmp	r2, r3
 800d60e:	d203      	bcs.n	800d618 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d610:	4b2d      	ldr	r3, [pc, #180]	; (800d6c8 <xTaskIncrementTick+0x150>)
 800d612:	687a      	ldr	r2, [r7, #4]
 800d614:	601a      	str	r2, [r3, #0]
						break;
 800d616:	e02f      	b.n	800d678 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d618:	68bb      	ldr	r3, [r7, #8]
 800d61a:	3304      	adds	r3, #4
 800d61c:	0018      	movs	r0, r3
 800d61e:	f7fe fd1a 	bl	800c056 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d622:	68bb      	ldr	r3, [r7, #8]
 800d624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d626:	2b00      	cmp	r3, #0
 800d628:	d004      	beq.n	800d634 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d62a:	68bb      	ldr	r3, [r7, #8]
 800d62c:	3318      	adds	r3, #24
 800d62e:	0018      	movs	r0, r3
 800d630:	f7fe fd11 	bl	800c056 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d634:	68bb      	ldr	r3, [r7, #8]
 800d636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d638:	4b24      	ldr	r3, [pc, #144]	; (800d6cc <xTaskIncrementTick+0x154>)
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	429a      	cmp	r2, r3
 800d63e:	d903      	bls.n	800d648 <xTaskIncrementTick+0xd0>
 800d640:	68bb      	ldr	r3, [r7, #8]
 800d642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d644:	4b21      	ldr	r3, [pc, #132]	; (800d6cc <xTaskIncrementTick+0x154>)
 800d646:	601a      	str	r2, [r3, #0]
 800d648:	68bb      	ldr	r3, [r7, #8]
 800d64a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d64c:	0013      	movs	r3, r2
 800d64e:	009b      	lsls	r3, r3, #2
 800d650:	189b      	adds	r3, r3, r2
 800d652:	009b      	lsls	r3, r3, #2
 800d654:	4a1e      	ldr	r2, [pc, #120]	; (800d6d0 <xTaskIncrementTick+0x158>)
 800d656:	189a      	adds	r2, r3, r2
 800d658:	68bb      	ldr	r3, [r7, #8]
 800d65a:	3304      	adds	r3, #4
 800d65c:	0019      	movs	r1, r3
 800d65e:	0010      	movs	r0, r2
 800d660:	f7fe fca1 	bl	800bfa6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d664:	68bb      	ldr	r3, [r7, #8]
 800d666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d668:	4b1a      	ldr	r3, [pc, #104]	; (800d6d4 <xTaskIncrementTick+0x15c>)
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d66e:	429a      	cmp	r2, r3
 800d670:	d3b3      	bcc.n	800d5da <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 800d672:	2301      	movs	r3, #1
 800d674:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d676:	e7b0      	b.n	800d5da <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d678:	4b16      	ldr	r3, [pc, #88]	; (800d6d4 <xTaskIncrementTick+0x15c>)
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d67e:	4914      	ldr	r1, [pc, #80]	; (800d6d0 <xTaskIncrementTick+0x158>)
 800d680:	0013      	movs	r3, r2
 800d682:	009b      	lsls	r3, r3, #2
 800d684:	189b      	adds	r3, r3, r2
 800d686:	009b      	lsls	r3, r3, #2
 800d688:	585b      	ldr	r3, [r3, r1]
 800d68a:	2b01      	cmp	r3, #1
 800d68c:	d907      	bls.n	800d69e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800d68e:	2301      	movs	r3, #1
 800d690:	617b      	str	r3, [r7, #20]
 800d692:	e004      	b.n	800d69e <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800d694:	4b10      	ldr	r3, [pc, #64]	; (800d6d8 <xTaskIncrementTick+0x160>)
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	1c5a      	adds	r2, r3, #1
 800d69a:	4b0f      	ldr	r3, [pc, #60]	; (800d6d8 <xTaskIncrementTick+0x160>)
 800d69c:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800d69e:	4b0f      	ldr	r3, [pc, #60]	; (800d6dc <xTaskIncrementTick+0x164>)
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d001      	beq.n	800d6aa <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 800d6a6:	2301      	movs	r3, #1
 800d6a8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800d6aa:	697b      	ldr	r3, [r7, #20]
}
 800d6ac:	0018      	movs	r0, r3
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	b006      	add	sp, #24
 800d6b2:	bd80      	pop	{r7, pc}
 800d6b4:	20001068 	.word	0x20001068
 800d6b8:	20001044 	.word	0x20001044
 800d6bc:	20000ff8 	.word	0x20000ff8
 800d6c0:	20000ffc 	.word	0x20000ffc
 800d6c4:	20001058 	.word	0x20001058
 800d6c8:	20001060 	.word	0x20001060
 800d6cc:	20001048 	.word	0x20001048
 800d6d0:	20000b70 	.word	0x20000b70
 800d6d4:	20000b6c 	.word	0x20000b6c
 800d6d8:	20001050 	.word	0x20001050
 800d6dc:	20001054 	.word	0x20001054

0800d6e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b082      	sub	sp, #8
 800d6e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d6e6:	4b25      	ldr	r3, [pc, #148]	; (800d77c <vTaskSwitchContext+0x9c>)
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d003      	beq.n	800d6f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d6ee:	4b24      	ldr	r3, [pc, #144]	; (800d780 <vTaskSwitchContext+0xa0>)
 800d6f0:	2201      	movs	r2, #1
 800d6f2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d6f4:	e03d      	b.n	800d772 <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 800d6f6:	4b22      	ldr	r3, [pc, #136]	; (800d780 <vTaskSwitchContext+0xa0>)
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800d6fc:	4b21      	ldr	r3, [pc, #132]	; (800d784 <vTaskSwitchContext+0xa4>)
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	607b      	str	r3, [r7, #4]
 800d702:	e007      	b.n	800d714 <vTaskSwitchContext+0x34>
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d101      	bne.n	800d70e <vTaskSwitchContext+0x2e>
 800d70a:	b672      	cpsid	i
 800d70c:	e7fe      	b.n	800d70c <vTaskSwitchContext+0x2c>
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	3b01      	subs	r3, #1
 800d712:	607b      	str	r3, [r7, #4]
 800d714:	491c      	ldr	r1, [pc, #112]	; (800d788 <vTaskSwitchContext+0xa8>)
 800d716:	687a      	ldr	r2, [r7, #4]
 800d718:	0013      	movs	r3, r2
 800d71a:	009b      	lsls	r3, r3, #2
 800d71c:	189b      	adds	r3, r3, r2
 800d71e:	009b      	lsls	r3, r3, #2
 800d720:	585b      	ldr	r3, [r3, r1]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d0ee      	beq.n	800d704 <vTaskSwitchContext+0x24>
 800d726:	687a      	ldr	r2, [r7, #4]
 800d728:	0013      	movs	r3, r2
 800d72a:	009b      	lsls	r3, r3, #2
 800d72c:	189b      	adds	r3, r3, r2
 800d72e:	009b      	lsls	r3, r3, #2
 800d730:	4a15      	ldr	r2, [pc, #84]	; (800d788 <vTaskSwitchContext+0xa8>)
 800d732:	189b      	adds	r3, r3, r2
 800d734:	603b      	str	r3, [r7, #0]
 800d736:	683b      	ldr	r3, [r7, #0]
 800d738:	685b      	ldr	r3, [r3, #4]
 800d73a:	685a      	ldr	r2, [r3, #4]
 800d73c:	683b      	ldr	r3, [r7, #0]
 800d73e:	605a      	str	r2, [r3, #4]
 800d740:	683b      	ldr	r3, [r7, #0]
 800d742:	685a      	ldr	r2, [r3, #4]
 800d744:	683b      	ldr	r3, [r7, #0]
 800d746:	3308      	adds	r3, #8
 800d748:	429a      	cmp	r2, r3
 800d74a:	d104      	bne.n	800d756 <vTaskSwitchContext+0x76>
 800d74c:	683b      	ldr	r3, [r7, #0]
 800d74e:	685b      	ldr	r3, [r3, #4]
 800d750:	685a      	ldr	r2, [r3, #4]
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	605a      	str	r2, [r3, #4]
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	685b      	ldr	r3, [r3, #4]
 800d75a:	68da      	ldr	r2, [r3, #12]
 800d75c:	4b0b      	ldr	r3, [pc, #44]	; (800d78c <vTaskSwitchContext+0xac>)
 800d75e:	601a      	str	r2, [r3, #0]
 800d760:	4b08      	ldr	r3, [pc, #32]	; (800d784 <vTaskSwitchContext+0xa4>)
 800d762:	687a      	ldr	r2, [r7, #4]
 800d764:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d766:	4b09      	ldr	r3, [pc, #36]	; (800d78c <vTaskSwitchContext+0xac>)
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	3354      	adds	r3, #84	; 0x54
 800d76c:	001a      	movs	r2, r3
 800d76e:	4b08      	ldr	r3, [pc, #32]	; (800d790 <vTaskSwitchContext+0xb0>)
 800d770:	601a      	str	r2, [r3, #0]
}
 800d772:	46c0      	nop			; (mov r8, r8)
 800d774:	46bd      	mov	sp, r7
 800d776:	b002      	add	sp, #8
 800d778:	bd80      	pop	{r7, pc}
 800d77a:	46c0      	nop			; (mov r8, r8)
 800d77c:	20001068 	.word	0x20001068
 800d780:	20001054 	.word	0x20001054
 800d784:	20001048 	.word	0x20001048
 800d788:	20000b70 	.word	0x20000b70
 800d78c:	20000b6c 	.word	0x20000b6c
 800d790:	2000009c 	.word	0x2000009c

0800d794 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b082      	sub	sp, #8
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
 800d79c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d101      	bne.n	800d7a8 <vTaskPlaceOnEventList+0x14>
 800d7a4:	b672      	cpsid	i
 800d7a6:	e7fe      	b.n	800d7a6 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d7a8:	4b08      	ldr	r3, [pc, #32]	; (800d7cc <vTaskPlaceOnEventList+0x38>)
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	3318      	adds	r3, #24
 800d7ae:	001a      	movs	r2, r3
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	0011      	movs	r1, r2
 800d7b4:	0018      	movs	r0, r3
 800d7b6:	f7fe fc18 	bl	800bfea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d7ba:	683b      	ldr	r3, [r7, #0]
 800d7bc:	2101      	movs	r1, #1
 800d7be:	0018      	movs	r0, r3
 800d7c0:	f000 fb36 	bl	800de30 <prvAddCurrentTaskToDelayedList>
}
 800d7c4:	46c0      	nop			; (mov r8, r8)
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	b002      	add	sp, #8
 800d7ca:	bd80      	pop	{r7, pc}
 800d7cc:	20000b6c 	.word	0x20000b6c

0800d7d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b084      	sub	sp, #16
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	60f8      	str	r0, [r7, #12]
 800d7d8:	60b9      	str	r1, [r7, #8]
 800d7da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d101      	bne.n	800d7e6 <vTaskPlaceOnEventListRestricted+0x16>
 800d7e2:	b672      	cpsid	i
 800d7e4:	e7fe      	b.n	800d7e4 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d7e6:	4b0c      	ldr	r3, [pc, #48]	; (800d818 <vTaskPlaceOnEventListRestricted+0x48>)
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	3318      	adds	r3, #24
 800d7ec:	001a      	movs	r2, r3
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	0011      	movs	r1, r2
 800d7f2:	0018      	movs	r0, r3
 800d7f4:	f7fe fbd7 	bl	800bfa6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d002      	beq.n	800d804 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 800d7fe:	2301      	movs	r3, #1
 800d800:	425b      	negs	r3, r3
 800d802:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d804:	687a      	ldr	r2, [r7, #4]
 800d806:	68bb      	ldr	r3, [r7, #8]
 800d808:	0011      	movs	r1, r2
 800d80a:	0018      	movs	r0, r3
 800d80c:	f000 fb10 	bl	800de30 <prvAddCurrentTaskToDelayedList>
	}
 800d810:	46c0      	nop			; (mov r8, r8)
 800d812:	46bd      	mov	sp, r7
 800d814:	b004      	add	sp, #16
 800d816:	bd80      	pop	{r7, pc}
 800d818:	20000b6c 	.word	0x20000b6c

0800d81c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b084      	sub	sp, #16
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	68db      	ldr	r3, [r3, #12]
 800d828:	68db      	ldr	r3, [r3, #12]
 800d82a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 800d82c:	68bb      	ldr	r3, [r7, #8]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d101      	bne.n	800d836 <xTaskRemoveFromEventList+0x1a>
 800d832:	b672      	cpsid	i
 800d834:	e7fe      	b.n	800d834 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d836:	68bb      	ldr	r3, [r7, #8]
 800d838:	3318      	adds	r3, #24
 800d83a:	0018      	movs	r0, r3
 800d83c:	f7fe fc0b 	bl	800c056 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d840:	4b1e      	ldr	r3, [pc, #120]	; (800d8bc <xTaskRemoveFromEventList+0xa0>)
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d11d      	bne.n	800d884 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d848:	68bb      	ldr	r3, [r7, #8]
 800d84a:	3304      	adds	r3, #4
 800d84c:	0018      	movs	r0, r3
 800d84e:	f7fe fc02 	bl	800c056 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d852:	68bb      	ldr	r3, [r7, #8]
 800d854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d856:	4b1a      	ldr	r3, [pc, #104]	; (800d8c0 <xTaskRemoveFromEventList+0xa4>)
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	429a      	cmp	r2, r3
 800d85c:	d903      	bls.n	800d866 <xTaskRemoveFromEventList+0x4a>
 800d85e:	68bb      	ldr	r3, [r7, #8]
 800d860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d862:	4b17      	ldr	r3, [pc, #92]	; (800d8c0 <xTaskRemoveFromEventList+0xa4>)
 800d864:	601a      	str	r2, [r3, #0]
 800d866:	68bb      	ldr	r3, [r7, #8]
 800d868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d86a:	0013      	movs	r3, r2
 800d86c:	009b      	lsls	r3, r3, #2
 800d86e:	189b      	adds	r3, r3, r2
 800d870:	009b      	lsls	r3, r3, #2
 800d872:	4a14      	ldr	r2, [pc, #80]	; (800d8c4 <xTaskRemoveFromEventList+0xa8>)
 800d874:	189a      	adds	r2, r3, r2
 800d876:	68bb      	ldr	r3, [r7, #8]
 800d878:	3304      	adds	r3, #4
 800d87a:	0019      	movs	r1, r3
 800d87c:	0010      	movs	r0, r2
 800d87e:	f7fe fb92 	bl	800bfa6 <vListInsertEnd>
 800d882:	e007      	b.n	800d894 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d884:	68bb      	ldr	r3, [r7, #8]
 800d886:	3318      	adds	r3, #24
 800d888:	001a      	movs	r2, r3
 800d88a:	4b0f      	ldr	r3, [pc, #60]	; (800d8c8 <xTaskRemoveFromEventList+0xac>)
 800d88c:	0011      	movs	r1, r2
 800d88e:	0018      	movs	r0, r3
 800d890:	f7fe fb89 	bl	800bfa6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d894:	68bb      	ldr	r3, [r7, #8]
 800d896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d898:	4b0c      	ldr	r3, [pc, #48]	; (800d8cc <xTaskRemoveFromEventList+0xb0>)
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d89e:	429a      	cmp	r2, r3
 800d8a0:	d905      	bls.n	800d8ae <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d8a2:	2301      	movs	r3, #1
 800d8a4:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d8a6:	4b0a      	ldr	r3, [pc, #40]	; (800d8d0 <xTaskRemoveFromEventList+0xb4>)
 800d8a8:	2201      	movs	r2, #1
 800d8aa:	601a      	str	r2, [r3, #0]
 800d8ac:	e001      	b.n	800d8b2 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800d8b2:	68fb      	ldr	r3, [r7, #12]
}
 800d8b4:	0018      	movs	r0, r3
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	b004      	add	sp, #16
 800d8ba:	bd80      	pop	{r7, pc}
 800d8bc:	20001068 	.word	0x20001068
 800d8c0:	20001048 	.word	0x20001048
 800d8c4:	20000b70 	.word	0x20000b70
 800d8c8:	20001000 	.word	0x20001000
 800d8cc:	20000b6c 	.word	0x20000b6c
 800d8d0:	20001054 	.word	0x20001054

0800d8d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b082      	sub	sp, #8
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d8dc:	4b05      	ldr	r3, [pc, #20]	; (800d8f4 <vTaskInternalSetTimeOutState+0x20>)
 800d8de:	681a      	ldr	r2, [r3, #0]
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d8e4:	4b04      	ldr	r3, [pc, #16]	; (800d8f8 <vTaskInternalSetTimeOutState+0x24>)
 800d8e6:	681a      	ldr	r2, [r3, #0]
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	605a      	str	r2, [r3, #4]
}
 800d8ec:	46c0      	nop			; (mov r8, r8)
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	b002      	add	sp, #8
 800d8f2:	bd80      	pop	{r7, pc}
 800d8f4:	20001058 	.word	0x20001058
 800d8f8:	20001044 	.word	0x20001044

0800d8fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b086      	sub	sp, #24
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
 800d904:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d101      	bne.n	800d910 <xTaskCheckForTimeOut+0x14>
 800d90c:	b672      	cpsid	i
 800d90e:	e7fe      	b.n	800d90e <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 800d910:	683b      	ldr	r3, [r7, #0]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d101      	bne.n	800d91a <xTaskCheckForTimeOut+0x1e>
 800d916:	b672      	cpsid	i
 800d918:	e7fe      	b.n	800d918 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 800d91a:	f000 fe49 	bl	800e5b0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d91e:	4b1d      	ldr	r3, [pc, #116]	; (800d994 <xTaskCheckForTimeOut+0x98>)
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	685b      	ldr	r3, [r3, #4]
 800d928:	693a      	ldr	r2, [r7, #16]
 800d92a:	1ad3      	subs	r3, r2, r3
 800d92c:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d92e:	683b      	ldr	r3, [r7, #0]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	3301      	adds	r3, #1
 800d934:	d102      	bne.n	800d93c <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d936:	2300      	movs	r3, #0
 800d938:	617b      	str	r3, [r7, #20]
 800d93a:	e024      	b.n	800d986 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681a      	ldr	r2, [r3, #0]
 800d940:	4b15      	ldr	r3, [pc, #84]	; (800d998 <xTaskCheckForTimeOut+0x9c>)
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	429a      	cmp	r2, r3
 800d946:	d007      	beq.n	800d958 <xTaskCheckForTimeOut+0x5c>
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	685b      	ldr	r3, [r3, #4]
 800d94c:	693a      	ldr	r2, [r7, #16]
 800d94e:	429a      	cmp	r2, r3
 800d950:	d302      	bcc.n	800d958 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d952:	2301      	movs	r3, #1
 800d954:	617b      	str	r3, [r7, #20]
 800d956:	e016      	b.n	800d986 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	68fa      	ldr	r2, [r7, #12]
 800d95e:	429a      	cmp	r2, r3
 800d960:	d20c      	bcs.n	800d97c <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	681a      	ldr	r2, [r3, #0]
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	1ad2      	subs	r2, r2, r3
 800d96a:	683b      	ldr	r3, [r7, #0]
 800d96c:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	0018      	movs	r0, r3
 800d972:	f7ff ffaf 	bl	800d8d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d976:	2300      	movs	r3, #0
 800d978:	617b      	str	r3, [r7, #20]
 800d97a:	e004      	b.n	800d986 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	2200      	movs	r2, #0
 800d980:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d982:	2301      	movs	r3, #1
 800d984:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800d986:	f000 fe25 	bl	800e5d4 <vPortExitCritical>

	return xReturn;
 800d98a:	697b      	ldr	r3, [r7, #20]
}
 800d98c:	0018      	movs	r0, r3
 800d98e:	46bd      	mov	sp, r7
 800d990:	b006      	add	sp, #24
 800d992:	bd80      	pop	{r7, pc}
 800d994:	20001044 	.word	0x20001044
 800d998:	20001058 	.word	0x20001058

0800d99c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d9a0:	4b02      	ldr	r3, [pc, #8]	; (800d9ac <vTaskMissedYield+0x10>)
 800d9a2:	2201      	movs	r2, #1
 800d9a4:	601a      	str	r2, [r3, #0]
}
 800d9a6:	46c0      	nop			; (mov r8, r8)
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	bd80      	pop	{r7, pc}
 800d9ac:	20001054 	.word	0x20001054

0800d9b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b082      	sub	sp, #8
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d9b8:	f000 f84e 	bl	800da58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d9bc:	4b03      	ldr	r3, [pc, #12]	; (800d9cc <prvIdleTask+0x1c>)
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	2b01      	cmp	r3, #1
 800d9c2:	d9f9      	bls.n	800d9b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d9c4:	f000 fde4 	bl	800e590 <vPortYield>
		prvCheckTasksWaitingTermination();
 800d9c8:	e7f6      	b.n	800d9b8 <prvIdleTask+0x8>
 800d9ca:	46c0      	nop			; (mov r8, r8)
 800d9cc:	20000b70 	.word	0x20000b70

0800d9d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b082      	sub	sp, #8
 800d9d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	607b      	str	r3, [r7, #4]
 800d9da:	e00c      	b.n	800d9f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d9dc:	687a      	ldr	r2, [r7, #4]
 800d9de:	0013      	movs	r3, r2
 800d9e0:	009b      	lsls	r3, r3, #2
 800d9e2:	189b      	adds	r3, r3, r2
 800d9e4:	009b      	lsls	r3, r3, #2
 800d9e6:	4a14      	ldr	r2, [pc, #80]	; (800da38 <prvInitialiseTaskLists+0x68>)
 800d9e8:	189b      	adds	r3, r3, r2
 800d9ea:	0018      	movs	r0, r3
 800d9ec:	f7fe fab2 	bl	800bf54 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	3301      	adds	r3, #1
 800d9f4:	607b      	str	r3, [r7, #4]
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	2b37      	cmp	r3, #55	; 0x37
 800d9fa:	d9ef      	bls.n	800d9dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d9fc:	4b0f      	ldr	r3, [pc, #60]	; (800da3c <prvInitialiseTaskLists+0x6c>)
 800d9fe:	0018      	movs	r0, r3
 800da00:	f7fe faa8 	bl	800bf54 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800da04:	4b0e      	ldr	r3, [pc, #56]	; (800da40 <prvInitialiseTaskLists+0x70>)
 800da06:	0018      	movs	r0, r3
 800da08:	f7fe faa4 	bl	800bf54 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800da0c:	4b0d      	ldr	r3, [pc, #52]	; (800da44 <prvInitialiseTaskLists+0x74>)
 800da0e:	0018      	movs	r0, r3
 800da10:	f7fe faa0 	bl	800bf54 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800da14:	4b0c      	ldr	r3, [pc, #48]	; (800da48 <prvInitialiseTaskLists+0x78>)
 800da16:	0018      	movs	r0, r3
 800da18:	f7fe fa9c 	bl	800bf54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800da1c:	4b0b      	ldr	r3, [pc, #44]	; (800da4c <prvInitialiseTaskLists+0x7c>)
 800da1e:	0018      	movs	r0, r3
 800da20:	f7fe fa98 	bl	800bf54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800da24:	4b0a      	ldr	r3, [pc, #40]	; (800da50 <prvInitialiseTaskLists+0x80>)
 800da26:	4a05      	ldr	r2, [pc, #20]	; (800da3c <prvInitialiseTaskLists+0x6c>)
 800da28:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800da2a:	4b0a      	ldr	r3, [pc, #40]	; (800da54 <prvInitialiseTaskLists+0x84>)
 800da2c:	4a04      	ldr	r2, [pc, #16]	; (800da40 <prvInitialiseTaskLists+0x70>)
 800da2e:	601a      	str	r2, [r3, #0]
}
 800da30:	46c0      	nop			; (mov r8, r8)
 800da32:	46bd      	mov	sp, r7
 800da34:	b002      	add	sp, #8
 800da36:	bd80      	pop	{r7, pc}
 800da38:	20000b70 	.word	0x20000b70
 800da3c:	20000fd0 	.word	0x20000fd0
 800da40:	20000fe4 	.word	0x20000fe4
 800da44:	20001000 	.word	0x20001000
 800da48:	20001014 	.word	0x20001014
 800da4c:	2000102c 	.word	0x2000102c
 800da50:	20000ff8 	.word	0x20000ff8
 800da54:	20000ffc 	.word	0x20000ffc

0800da58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b082      	sub	sp, #8
 800da5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800da5e:	e01a      	b.n	800da96 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 800da60:	f000 fda6 	bl	800e5b0 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800da64:	4b10      	ldr	r3, [pc, #64]	; (800daa8 <prvCheckTasksWaitingTermination+0x50>)
 800da66:	68db      	ldr	r3, [r3, #12]
 800da68:	68db      	ldr	r3, [r3, #12]
 800da6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	3304      	adds	r3, #4
 800da70:	0018      	movs	r0, r3
 800da72:	f7fe faf0 	bl	800c056 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800da76:	4b0d      	ldr	r3, [pc, #52]	; (800daac <prvCheckTasksWaitingTermination+0x54>)
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	1e5a      	subs	r2, r3, #1
 800da7c:	4b0b      	ldr	r3, [pc, #44]	; (800daac <prvCheckTasksWaitingTermination+0x54>)
 800da7e:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 800da80:	4b0b      	ldr	r3, [pc, #44]	; (800dab0 <prvCheckTasksWaitingTermination+0x58>)
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	1e5a      	subs	r2, r3, #1
 800da86:	4b0a      	ldr	r3, [pc, #40]	; (800dab0 <prvCheckTasksWaitingTermination+0x58>)
 800da88:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 800da8a:	f000 fda3 	bl	800e5d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	0018      	movs	r0, r3
 800da92:	f000 f80f 	bl	800dab4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800da96:	4b06      	ldr	r3, [pc, #24]	; (800dab0 <prvCheckTasksWaitingTermination+0x58>)
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d1e0      	bne.n	800da60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800da9e:	46c0      	nop			; (mov r8, r8)
 800daa0:	46c0      	nop			; (mov r8, r8)
 800daa2:	46bd      	mov	sp, r7
 800daa4:	b002      	add	sp, #8
 800daa6:	bd80      	pop	{r7, pc}
 800daa8:	20001014 	.word	0x20001014
 800daac:	20001040 	.word	0x20001040
 800dab0:	20001028 	.word	0x20001028

0800dab4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b082      	sub	sp, #8
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	3354      	adds	r3, #84	; 0x54
 800dac0:	0018      	movs	r0, r3
 800dac2:	f001 fe0d 	bl	800f6e0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	22b9      	movs	r2, #185	; 0xb9
 800daca:	5c9b      	ldrb	r3, [r3, r2]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d109      	bne.n	800dae4 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dad4:	0018      	movs	r0, r3
 800dad6:	f000 fea9 	bl	800e82c <vPortFree>
				vPortFree( pxTCB );
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	0018      	movs	r0, r3
 800dade:	f000 fea5 	bl	800e82c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800dae2:	e010      	b.n	800db06 <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	22b9      	movs	r2, #185	; 0xb9
 800dae8:	5c9b      	ldrb	r3, [r3, r2]
 800daea:	2b01      	cmp	r3, #1
 800daec:	d104      	bne.n	800daf8 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	0018      	movs	r0, r3
 800daf2:	f000 fe9b 	bl	800e82c <vPortFree>
	}
 800daf6:	e006      	b.n	800db06 <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	22b9      	movs	r2, #185	; 0xb9
 800dafc:	5c9b      	ldrb	r3, [r3, r2]
 800dafe:	2b02      	cmp	r3, #2
 800db00:	d001      	beq.n	800db06 <prvDeleteTCB+0x52>
 800db02:	b672      	cpsid	i
 800db04:	e7fe      	b.n	800db04 <prvDeleteTCB+0x50>
	}
 800db06:	46c0      	nop			; (mov r8, r8)
 800db08:	46bd      	mov	sp, r7
 800db0a:	b002      	add	sp, #8
 800db0c:	bd80      	pop	{r7, pc}
	...

0800db10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b082      	sub	sp, #8
 800db14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800db16:	4b0e      	ldr	r3, [pc, #56]	; (800db50 <prvResetNextTaskUnblockTime+0x40>)
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d101      	bne.n	800db24 <prvResetNextTaskUnblockTime+0x14>
 800db20:	2301      	movs	r3, #1
 800db22:	e000      	b.n	800db26 <prvResetNextTaskUnblockTime+0x16>
 800db24:	2300      	movs	r3, #0
 800db26:	2b00      	cmp	r3, #0
 800db28:	d004      	beq.n	800db34 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800db2a:	4b0a      	ldr	r3, [pc, #40]	; (800db54 <prvResetNextTaskUnblockTime+0x44>)
 800db2c:	2201      	movs	r2, #1
 800db2e:	4252      	negs	r2, r2
 800db30:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800db32:	e008      	b.n	800db46 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800db34:	4b06      	ldr	r3, [pc, #24]	; (800db50 <prvResetNextTaskUnblockTime+0x40>)
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	68db      	ldr	r3, [r3, #12]
 800db3a:	68db      	ldr	r3, [r3, #12]
 800db3c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	685a      	ldr	r2, [r3, #4]
 800db42:	4b04      	ldr	r3, [pc, #16]	; (800db54 <prvResetNextTaskUnblockTime+0x44>)
 800db44:	601a      	str	r2, [r3, #0]
}
 800db46:	46c0      	nop			; (mov r8, r8)
 800db48:	46bd      	mov	sp, r7
 800db4a:	b002      	add	sp, #8
 800db4c:	bd80      	pop	{r7, pc}
 800db4e:	46c0      	nop			; (mov r8, r8)
 800db50:	20000ff8 	.word	0x20000ff8
 800db54:	20001060 	.word	0x20001060

0800db58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b082      	sub	sp, #8
 800db5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800db5e:	4b0a      	ldr	r3, [pc, #40]	; (800db88 <xTaskGetSchedulerState+0x30>)
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d102      	bne.n	800db6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800db66:	2301      	movs	r3, #1
 800db68:	607b      	str	r3, [r7, #4]
 800db6a:	e008      	b.n	800db7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db6c:	4b07      	ldr	r3, [pc, #28]	; (800db8c <xTaskGetSchedulerState+0x34>)
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d102      	bne.n	800db7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800db74:	2302      	movs	r3, #2
 800db76:	607b      	str	r3, [r7, #4]
 800db78:	e001      	b.n	800db7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800db7a:	2300      	movs	r3, #0
 800db7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800db7e:	687b      	ldr	r3, [r7, #4]
	}
 800db80:	0018      	movs	r0, r3
 800db82:	46bd      	mov	sp, r7
 800db84:	b002      	add	sp, #8
 800db86:	bd80      	pop	{r7, pc}
 800db88:	2000104c 	.word	0x2000104c
 800db8c:	20001068 	.word	0x20001068

0800db90 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800db90:	b580      	push	{r7, lr}
 800db92:	b084      	sub	sp, #16
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800db9c:	2300      	movs	r3, #0
 800db9e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d056      	beq.n	800dc54 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800dba6:	68bb      	ldr	r3, [r7, #8]
 800dba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbaa:	4b2d      	ldr	r3, [pc, #180]	; (800dc60 <xTaskPriorityInherit+0xd0>)
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbb0:	429a      	cmp	r2, r3
 800dbb2:	d246      	bcs.n	800dc42 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dbb4:	68bb      	ldr	r3, [r7, #8]
 800dbb6:	699b      	ldr	r3, [r3, #24]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	db06      	blt.n	800dbca <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dbbc:	4b28      	ldr	r3, [pc, #160]	; (800dc60 <xTaskPriorityInherit+0xd0>)
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbc2:	2238      	movs	r2, #56	; 0x38
 800dbc4:	1ad2      	subs	r2, r2, r3
 800dbc6:	68bb      	ldr	r3, [r7, #8]
 800dbc8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800dbca:	68bb      	ldr	r3, [r7, #8]
 800dbcc:	6959      	ldr	r1, [r3, #20]
 800dbce:	68bb      	ldr	r3, [r7, #8]
 800dbd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbd2:	0013      	movs	r3, r2
 800dbd4:	009b      	lsls	r3, r3, #2
 800dbd6:	189b      	adds	r3, r3, r2
 800dbd8:	009b      	lsls	r3, r3, #2
 800dbda:	4a22      	ldr	r2, [pc, #136]	; (800dc64 <xTaskPriorityInherit+0xd4>)
 800dbdc:	189b      	adds	r3, r3, r2
 800dbde:	4299      	cmp	r1, r3
 800dbe0:	d101      	bne.n	800dbe6 <xTaskPriorityInherit+0x56>
 800dbe2:	2301      	movs	r3, #1
 800dbe4:	e000      	b.n	800dbe8 <xTaskPriorityInherit+0x58>
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d022      	beq.n	800dc32 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dbec:	68bb      	ldr	r3, [r7, #8]
 800dbee:	3304      	adds	r3, #4
 800dbf0:	0018      	movs	r0, r3
 800dbf2:	f7fe fa30 	bl	800c056 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dbf6:	4b1a      	ldr	r3, [pc, #104]	; (800dc60 <xTaskPriorityInherit+0xd0>)
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbfc:	68bb      	ldr	r3, [r7, #8]
 800dbfe:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800dc00:	68bb      	ldr	r3, [r7, #8]
 800dc02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc04:	4b18      	ldr	r3, [pc, #96]	; (800dc68 <xTaskPriorityInherit+0xd8>)
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	429a      	cmp	r2, r3
 800dc0a:	d903      	bls.n	800dc14 <xTaskPriorityInherit+0x84>
 800dc0c:	68bb      	ldr	r3, [r7, #8]
 800dc0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc10:	4b15      	ldr	r3, [pc, #84]	; (800dc68 <xTaskPriorityInherit+0xd8>)
 800dc12:	601a      	str	r2, [r3, #0]
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc18:	0013      	movs	r3, r2
 800dc1a:	009b      	lsls	r3, r3, #2
 800dc1c:	189b      	adds	r3, r3, r2
 800dc1e:	009b      	lsls	r3, r3, #2
 800dc20:	4a10      	ldr	r2, [pc, #64]	; (800dc64 <xTaskPriorityInherit+0xd4>)
 800dc22:	189a      	adds	r2, r3, r2
 800dc24:	68bb      	ldr	r3, [r7, #8]
 800dc26:	3304      	adds	r3, #4
 800dc28:	0019      	movs	r1, r3
 800dc2a:	0010      	movs	r0, r2
 800dc2c:	f7fe f9bb 	bl	800bfa6 <vListInsertEnd>
 800dc30:	e004      	b.n	800dc3c <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dc32:	4b0b      	ldr	r3, [pc, #44]	; (800dc60 <xTaskPriorityInherit+0xd0>)
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc38:	68bb      	ldr	r3, [r7, #8]
 800dc3a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800dc3c:	2301      	movs	r3, #1
 800dc3e:	60fb      	str	r3, [r7, #12]
 800dc40:	e008      	b.n	800dc54 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800dc42:	68bb      	ldr	r3, [r7, #8]
 800dc44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dc46:	4b06      	ldr	r3, [pc, #24]	; (800dc60 <xTaskPriorityInherit+0xd0>)
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc4c:	429a      	cmp	r2, r3
 800dc4e:	d201      	bcs.n	800dc54 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800dc50:	2301      	movs	r3, #1
 800dc52:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dc54:	68fb      	ldr	r3, [r7, #12]
	}
 800dc56:	0018      	movs	r0, r3
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	b004      	add	sp, #16
 800dc5c:	bd80      	pop	{r7, pc}
 800dc5e:	46c0      	nop			; (mov r8, r8)
 800dc60:	20000b6c 	.word	0x20000b6c
 800dc64:	20000b70 	.word	0x20000b70
 800dc68:	20001048 	.word	0x20001048

0800dc6c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b084      	sub	sp, #16
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800dc78:	2300      	movs	r3, #0
 800dc7a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d044      	beq.n	800dd0c <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800dc82:	4b25      	ldr	r3, [pc, #148]	; (800dd18 <xTaskPriorityDisinherit+0xac>)
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	68ba      	ldr	r2, [r7, #8]
 800dc88:	429a      	cmp	r2, r3
 800dc8a:	d001      	beq.n	800dc90 <xTaskPriorityDisinherit+0x24>
 800dc8c:	b672      	cpsid	i
 800dc8e:	e7fe      	b.n	800dc8e <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800dc90:	68bb      	ldr	r3, [r7, #8]
 800dc92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d101      	bne.n	800dc9c <xTaskPriorityDisinherit+0x30>
 800dc98:	b672      	cpsid	i
 800dc9a:	e7fe      	b.n	800dc9a <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 800dc9c:	68bb      	ldr	r3, [r7, #8]
 800dc9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dca0:	1e5a      	subs	r2, r3, #1
 800dca2:	68bb      	ldr	r3, [r7, #8]
 800dca4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dca6:	68bb      	ldr	r3, [r7, #8]
 800dca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcaa:	68bb      	ldr	r3, [r7, #8]
 800dcac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dcae:	429a      	cmp	r2, r3
 800dcb0:	d02c      	beq.n	800dd0c <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dcb2:	68bb      	ldr	r3, [r7, #8]
 800dcb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d128      	bne.n	800dd0c <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dcba:	68bb      	ldr	r3, [r7, #8]
 800dcbc:	3304      	adds	r3, #4
 800dcbe:	0018      	movs	r0, r3
 800dcc0:	f7fe f9c9 	bl	800c056 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dcc4:	68bb      	ldr	r3, [r7, #8]
 800dcc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dcc8:	68bb      	ldr	r3, [r7, #8]
 800dcca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dccc:	68bb      	ldr	r3, [r7, #8]
 800dcce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcd0:	2238      	movs	r2, #56	; 0x38
 800dcd2:	1ad2      	subs	r2, r2, r3
 800dcd4:	68bb      	ldr	r3, [r7, #8]
 800dcd6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800dcd8:	68bb      	ldr	r3, [r7, #8]
 800dcda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcdc:	4b0f      	ldr	r3, [pc, #60]	; (800dd1c <xTaskPriorityDisinherit+0xb0>)
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	429a      	cmp	r2, r3
 800dce2:	d903      	bls.n	800dcec <xTaskPriorityDisinherit+0x80>
 800dce4:	68bb      	ldr	r3, [r7, #8]
 800dce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dce8:	4b0c      	ldr	r3, [pc, #48]	; (800dd1c <xTaskPriorityDisinherit+0xb0>)
 800dcea:	601a      	str	r2, [r3, #0]
 800dcec:	68bb      	ldr	r3, [r7, #8]
 800dcee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcf0:	0013      	movs	r3, r2
 800dcf2:	009b      	lsls	r3, r3, #2
 800dcf4:	189b      	adds	r3, r3, r2
 800dcf6:	009b      	lsls	r3, r3, #2
 800dcf8:	4a09      	ldr	r2, [pc, #36]	; (800dd20 <xTaskPriorityDisinherit+0xb4>)
 800dcfa:	189a      	adds	r2, r3, r2
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	3304      	adds	r3, #4
 800dd00:	0019      	movs	r1, r3
 800dd02:	0010      	movs	r0, r2
 800dd04:	f7fe f94f 	bl	800bfa6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800dd08:	2301      	movs	r3, #1
 800dd0a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dd0c:	68fb      	ldr	r3, [r7, #12]
	}
 800dd0e:	0018      	movs	r0, r3
 800dd10:	46bd      	mov	sp, r7
 800dd12:	b004      	add	sp, #16
 800dd14:	bd80      	pop	{r7, pc}
 800dd16:	46c0      	nop			; (mov r8, r8)
 800dd18:	20000b6c 	.word	0x20000b6c
 800dd1c:	20001048 	.word	0x20001048
 800dd20:	20000b70 	.word	0x20000b70

0800dd24 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b086      	sub	sp, #24
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	6078      	str	r0, [r7, #4]
 800dd2c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800dd32:	2301      	movs	r3, #1
 800dd34:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d05d      	beq.n	800ddf8 <vTaskPriorityDisinheritAfterTimeout+0xd4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800dd3c:	693b      	ldr	r3, [r7, #16]
 800dd3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d101      	bne.n	800dd48 <vTaskPriorityDisinheritAfterTimeout+0x24>
 800dd44:	b672      	cpsid	i
 800dd46:	e7fe      	b.n	800dd46 <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800dd48:	693b      	ldr	r3, [r7, #16]
 800dd4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd4c:	683a      	ldr	r2, [r7, #0]
 800dd4e:	429a      	cmp	r2, r3
 800dd50:	d902      	bls.n	800dd58 <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	617b      	str	r3, [r7, #20]
 800dd56:	e002      	b.n	800dd5e <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800dd58:	693b      	ldr	r3, [r7, #16]
 800dd5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd5c:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800dd5e:	693b      	ldr	r3, [r7, #16]
 800dd60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd62:	697a      	ldr	r2, [r7, #20]
 800dd64:	429a      	cmp	r2, r3
 800dd66:	d047      	beq.n	800ddf8 <vTaskPriorityDisinheritAfterTimeout+0xd4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800dd68:	693b      	ldr	r3, [r7, #16]
 800dd6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd6c:	68fa      	ldr	r2, [r7, #12]
 800dd6e:	429a      	cmp	r2, r3
 800dd70:	d142      	bne.n	800ddf8 <vTaskPriorityDisinheritAfterTimeout+0xd4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800dd72:	4b23      	ldr	r3, [pc, #140]	; (800de00 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	693a      	ldr	r2, [r7, #16]
 800dd78:	429a      	cmp	r2, r3
 800dd7a:	d101      	bne.n	800dd80 <vTaskPriorityDisinheritAfterTimeout+0x5c>
 800dd7c:	b672      	cpsid	i
 800dd7e:	e7fe      	b.n	800dd7e <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800dd80:	693b      	ldr	r3, [r7, #16]
 800dd82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd84:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 800dd86:	693b      	ldr	r3, [r7, #16]
 800dd88:	697a      	ldr	r2, [r7, #20]
 800dd8a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dd8c:	693b      	ldr	r3, [r7, #16]
 800dd8e:	699b      	ldr	r3, [r3, #24]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	db04      	blt.n	800dd9e <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd94:	697b      	ldr	r3, [r7, #20]
 800dd96:	2238      	movs	r2, #56	; 0x38
 800dd98:	1ad2      	subs	r2, r2, r3
 800dd9a:	693b      	ldr	r3, [r7, #16]
 800dd9c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dd9e:	693b      	ldr	r3, [r7, #16]
 800dda0:	6959      	ldr	r1, [r3, #20]
 800dda2:	68ba      	ldr	r2, [r7, #8]
 800dda4:	0013      	movs	r3, r2
 800dda6:	009b      	lsls	r3, r3, #2
 800dda8:	189b      	adds	r3, r3, r2
 800ddaa:	009b      	lsls	r3, r3, #2
 800ddac:	4a15      	ldr	r2, [pc, #84]	; (800de04 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 800ddae:	189b      	adds	r3, r3, r2
 800ddb0:	4299      	cmp	r1, r3
 800ddb2:	d101      	bne.n	800ddb8 <vTaskPriorityDisinheritAfterTimeout+0x94>
 800ddb4:	2301      	movs	r3, #1
 800ddb6:	e000      	b.n	800ddba <vTaskPriorityDisinheritAfterTimeout+0x96>
 800ddb8:	2300      	movs	r3, #0
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d01c      	beq.n	800ddf8 <vTaskPriorityDisinheritAfterTimeout+0xd4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ddbe:	693b      	ldr	r3, [r7, #16]
 800ddc0:	3304      	adds	r3, #4
 800ddc2:	0018      	movs	r0, r3
 800ddc4:	f7fe f947 	bl	800c056 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ddc8:	693b      	ldr	r3, [r7, #16]
 800ddca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddcc:	4b0e      	ldr	r3, [pc, #56]	; (800de08 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	429a      	cmp	r2, r3
 800ddd2:	d903      	bls.n	800dddc <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800ddd4:	693b      	ldr	r3, [r7, #16]
 800ddd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddd8:	4b0b      	ldr	r3, [pc, #44]	; (800de08 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 800ddda:	601a      	str	r2, [r3, #0]
 800dddc:	693b      	ldr	r3, [r7, #16]
 800ddde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dde0:	0013      	movs	r3, r2
 800dde2:	009b      	lsls	r3, r3, #2
 800dde4:	189b      	adds	r3, r3, r2
 800dde6:	009b      	lsls	r3, r3, #2
 800dde8:	4a06      	ldr	r2, [pc, #24]	; (800de04 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 800ddea:	189a      	adds	r2, r3, r2
 800ddec:	693b      	ldr	r3, [r7, #16]
 800ddee:	3304      	adds	r3, #4
 800ddf0:	0019      	movs	r1, r3
 800ddf2:	0010      	movs	r0, r2
 800ddf4:	f7fe f8d7 	bl	800bfa6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ddf8:	46c0      	nop			; (mov r8, r8)
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	b006      	add	sp, #24
 800ddfe:	bd80      	pop	{r7, pc}
 800de00:	20000b6c 	.word	0x20000b6c
 800de04:	20000b70 	.word	0x20000b70
 800de08:	20001048 	.word	0x20001048

0800de0c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800de10:	4b06      	ldr	r3, [pc, #24]	; (800de2c <pvTaskIncrementMutexHeldCount+0x20>)
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d004      	beq.n	800de22 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800de18:	4b04      	ldr	r3, [pc, #16]	; (800de2c <pvTaskIncrementMutexHeldCount+0x20>)
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800de1e:	3201      	adds	r2, #1
 800de20:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800de22:	4b02      	ldr	r3, [pc, #8]	; (800de2c <pvTaskIncrementMutexHeldCount+0x20>)
 800de24:	681b      	ldr	r3, [r3, #0]
	}
 800de26:	0018      	movs	r0, r3
 800de28:	46bd      	mov	sp, r7
 800de2a:	bd80      	pop	{r7, pc}
 800de2c:	20000b6c 	.word	0x20000b6c

0800de30 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b084      	sub	sp, #16
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
 800de38:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800de3a:	4b21      	ldr	r3, [pc, #132]	; (800dec0 <prvAddCurrentTaskToDelayedList+0x90>)
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800de40:	4b20      	ldr	r3, [pc, #128]	; (800dec4 <prvAddCurrentTaskToDelayedList+0x94>)
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	3304      	adds	r3, #4
 800de46:	0018      	movs	r0, r3
 800de48:	f7fe f905 	bl	800c056 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	3301      	adds	r3, #1
 800de50:	d10b      	bne.n	800de6a <prvAddCurrentTaskToDelayedList+0x3a>
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d008      	beq.n	800de6a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800de58:	4b1a      	ldr	r3, [pc, #104]	; (800dec4 <prvAddCurrentTaskToDelayedList+0x94>)
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	1d1a      	adds	r2, r3, #4
 800de5e:	4b1a      	ldr	r3, [pc, #104]	; (800dec8 <prvAddCurrentTaskToDelayedList+0x98>)
 800de60:	0011      	movs	r1, r2
 800de62:	0018      	movs	r0, r3
 800de64:	f7fe f89f 	bl	800bfa6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800de68:	e026      	b.n	800deb8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800de6a:	68fa      	ldr	r2, [r7, #12]
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	18d3      	adds	r3, r2, r3
 800de70:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800de72:	4b14      	ldr	r3, [pc, #80]	; (800dec4 <prvAddCurrentTaskToDelayedList+0x94>)
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	68ba      	ldr	r2, [r7, #8]
 800de78:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800de7a:	68ba      	ldr	r2, [r7, #8]
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	429a      	cmp	r2, r3
 800de80:	d209      	bcs.n	800de96 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800de82:	4b12      	ldr	r3, [pc, #72]	; (800decc <prvAddCurrentTaskToDelayedList+0x9c>)
 800de84:	681a      	ldr	r2, [r3, #0]
 800de86:	4b0f      	ldr	r3, [pc, #60]	; (800dec4 <prvAddCurrentTaskToDelayedList+0x94>)
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	3304      	adds	r3, #4
 800de8c:	0019      	movs	r1, r3
 800de8e:	0010      	movs	r0, r2
 800de90:	f7fe f8ab 	bl	800bfea <vListInsert>
}
 800de94:	e010      	b.n	800deb8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800de96:	4b0e      	ldr	r3, [pc, #56]	; (800ded0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800de98:	681a      	ldr	r2, [r3, #0]
 800de9a:	4b0a      	ldr	r3, [pc, #40]	; (800dec4 <prvAddCurrentTaskToDelayedList+0x94>)
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	3304      	adds	r3, #4
 800dea0:	0019      	movs	r1, r3
 800dea2:	0010      	movs	r0, r2
 800dea4:	f7fe f8a1 	bl	800bfea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dea8:	4b0a      	ldr	r3, [pc, #40]	; (800ded4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	68ba      	ldr	r2, [r7, #8]
 800deae:	429a      	cmp	r2, r3
 800deb0:	d202      	bcs.n	800deb8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800deb2:	4b08      	ldr	r3, [pc, #32]	; (800ded4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800deb4:	68ba      	ldr	r2, [r7, #8]
 800deb6:	601a      	str	r2, [r3, #0]
}
 800deb8:	46c0      	nop			; (mov r8, r8)
 800deba:	46bd      	mov	sp, r7
 800debc:	b004      	add	sp, #16
 800debe:	bd80      	pop	{r7, pc}
 800dec0:	20001044 	.word	0x20001044
 800dec4:	20000b6c 	.word	0x20000b6c
 800dec8:	2000102c 	.word	0x2000102c
 800decc:	20000ffc 	.word	0x20000ffc
 800ded0:	20000ff8 	.word	0x20000ff8
 800ded4:	20001060 	.word	0x20001060

0800ded8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ded8:	b590      	push	{r4, r7, lr}
 800deda:	b089      	sub	sp, #36	; 0x24
 800dedc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800dede:	2300      	movs	r3, #0
 800dee0:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800dee2:	f000 fa87 	bl	800e3f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800dee6:	4b17      	ldr	r3, [pc, #92]	; (800df44 <xTimerCreateTimerTask+0x6c>)
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d020      	beq.n	800df30 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800deee:	2300      	movs	r3, #0
 800def0:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800def2:	2300      	movs	r3, #0
 800def4:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800def6:	003a      	movs	r2, r7
 800def8:	1d39      	adds	r1, r7, #4
 800defa:	2308      	movs	r3, #8
 800defc:	18fb      	adds	r3, r7, r3
 800defe:	0018      	movs	r0, r3
 800df00:	f7fe f810 	bl	800bf24 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800df04:	683c      	ldr	r4, [r7, #0]
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	68ba      	ldr	r2, [r7, #8]
 800df0a:	490f      	ldr	r1, [pc, #60]	; (800df48 <xTimerCreateTimerTask+0x70>)
 800df0c:	480f      	ldr	r0, [pc, #60]	; (800df4c <xTimerCreateTimerTask+0x74>)
 800df0e:	9202      	str	r2, [sp, #8]
 800df10:	9301      	str	r3, [sp, #4]
 800df12:	2302      	movs	r3, #2
 800df14:	9300      	str	r3, [sp, #0]
 800df16:	2300      	movs	r3, #0
 800df18:	0022      	movs	r2, r4
 800df1a:	f7fe ff90 	bl	800ce3e <xTaskCreateStatic>
 800df1e:	0002      	movs	r2, r0
 800df20:	4b0b      	ldr	r3, [pc, #44]	; (800df50 <xTimerCreateTimerTask+0x78>)
 800df22:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800df24:	4b0a      	ldr	r3, [pc, #40]	; (800df50 <xTimerCreateTimerTask+0x78>)
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d001      	beq.n	800df30 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 800df2c:	2301      	movs	r3, #1
 800df2e:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d101      	bne.n	800df3a <xTimerCreateTimerTask+0x62>
 800df36:	b672      	cpsid	i
 800df38:	e7fe      	b.n	800df38 <xTimerCreateTimerTask+0x60>
	return xReturn;
 800df3a:	68fb      	ldr	r3, [r7, #12]
}
 800df3c:	0018      	movs	r0, r3
 800df3e:	46bd      	mov	sp, r7
 800df40:	b005      	add	sp, #20
 800df42:	bd90      	pop	{r4, r7, pc}
 800df44:	2000109c 	.word	0x2000109c
 800df48:	08012f24 	.word	0x08012f24
 800df4c:	0800e059 	.word	0x0800e059
 800df50:	200010a0 	.word	0x200010a0

0800df54 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800df54:	b590      	push	{r4, r7, lr}
 800df56:	b08b      	sub	sp, #44	; 0x2c
 800df58:	af00      	add	r7, sp, #0
 800df5a:	60f8      	str	r0, [r7, #12]
 800df5c:	60b9      	str	r1, [r7, #8]
 800df5e:	607a      	str	r2, [r7, #4]
 800df60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800df62:	2300      	movs	r3, #0
 800df64:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d101      	bne.n	800df70 <xTimerGenericCommand+0x1c>
 800df6c:	b672      	cpsid	i
 800df6e:	e7fe      	b.n	800df6e <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800df70:	4b1c      	ldr	r3, [pc, #112]	; (800dfe4 <xTimerGenericCommand+0x90>)
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d030      	beq.n	800dfda <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800df78:	2414      	movs	r4, #20
 800df7a:	193b      	adds	r3, r7, r4
 800df7c:	68ba      	ldr	r2, [r7, #8]
 800df7e:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800df80:	193b      	adds	r3, r7, r4
 800df82:	687a      	ldr	r2, [r7, #4]
 800df84:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800df86:	193b      	adds	r3, r7, r4
 800df88:	68fa      	ldr	r2, [r7, #12]
 800df8a:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800df8c:	68bb      	ldr	r3, [r7, #8]
 800df8e:	2b05      	cmp	r3, #5
 800df90:	dc19      	bgt.n	800dfc6 <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800df92:	f7ff fde1 	bl	800db58 <xTaskGetSchedulerState>
 800df96:	0003      	movs	r3, r0
 800df98:	2b02      	cmp	r3, #2
 800df9a:	d109      	bne.n	800dfb0 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800df9c:	4b11      	ldr	r3, [pc, #68]	; (800dfe4 <xTimerGenericCommand+0x90>)
 800df9e:	6818      	ldr	r0, [r3, #0]
 800dfa0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dfa2:	1939      	adds	r1, r7, r4
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	f7fe f9c3 	bl	800c330 <xQueueGenericSend>
 800dfaa:	0003      	movs	r3, r0
 800dfac:	627b      	str	r3, [r7, #36]	; 0x24
 800dfae:	e014      	b.n	800dfda <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800dfb0:	4b0c      	ldr	r3, [pc, #48]	; (800dfe4 <xTimerGenericCommand+0x90>)
 800dfb2:	6818      	ldr	r0, [r3, #0]
 800dfb4:	2314      	movs	r3, #20
 800dfb6:	18f9      	adds	r1, r7, r3
 800dfb8:	2300      	movs	r3, #0
 800dfba:	2200      	movs	r2, #0
 800dfbc:	f7fe f9b8 	bl	800c330 <xQueueGenericSend>
 800dfc0:	0003      	movs	r3, r0
 800dfc2:	627b      	str	r3, [r7, #36]	; 0x24
 800dfc4:	e009      	b.n	800dfda <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800dfc6:	4b07      	ldr	r3, [pc, #28]	; (800dfe4 <xTimerGenericCommand+0x90>)
 800dfc8:	6818      	ldr	r0, [r3, #0]
 800dfca:	683a      	ldr	r2, [r7, #0]
 800dfcc:	2314      	movs	r3, #20
 800dfce:	18f9      	adds	r1, r7, r3
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	f7fe fa71 	bl	800c4b8 <xQueueGenericSendFromISR>
 800dfd6:	0003      	movs	r3, r0
 800dfd8:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800dfda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dfdc:	0018      	movs	r0, r3
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	b00b      	add	sp, #44	; 0x2c
 800dfe2:	bd90      	pop	{r4, r7, pc}
 800dfe4:	2000109c 	.word	0x2000109c

0800dfe8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b086      	sub	sp, #24
 800dfec:	af02      	add	r7, sp, #8
 800dfee:	6078      	str	r0, [r7, #4]
 800dff0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dff2:	4b18      	ldr	r3, [pc, #96]	; (800e054 <prvProcessExpiredTimer+0x6c>)
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	68db      	ldr	r3, [r3, #12]
 800dff8:	68db      	ldr	r3, [r3, #12]
 800dffa:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	3304      	adds	r3, #4
 800e000:	0018      	movs	r0, r3
 800e002:	f7fe f828 	bl	800c056 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	69db      	ldr	r3, [r3, #28]
 800e00a:	2b01      	cmp	r3, #1
 800e00c:	d119      	bne.n	800e042 <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	699a      	ldr	r2, [r3, #24]
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	18d1      	adds	r1, r2, r3
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	683a      	ldr	r2, [r7, #0]
 800e01a:	68f8      	ldr	r0, [r7, #12]
 800e01c:	f000 f8b6 	bl	800e18c <prvInsertTimerInActiveList>
 800e020:	1e03      	subs	r3, r0, #0
 800e022:	d00e      	beq.n	800e042 <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e024:	687a      	ldr	r2, [r7, #4]
 800e026:	68f8      	ldr	r0, [r7, #12]
 800e028:	2300      	movs	r3, #0
 800e02a:	9300      	str	r3, [sp, #0]
 800e02c:	2300      	movs	r3, #0
 800e02e:	2100      	movs	r1, #0
 800e030:	f7ff ff90 	bl	800df54 <xTimerGenericCommand>
 800e034:	0003      	movs	r3, r0
 800e036:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 800e038:	68bb      	ldr	r3, [r7, #8]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d101      	bne.n	800e042 <prvProcessExpiredTimer+0x5a>
 800e03e:	b672      	cpsid	i
 800e040:	e7fe      	b.n	800e040 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e046:	68fa      	ldr	r2, [r7, #12]
 800e048:	0010      	movs	r0, r2
 800e04a:	4798      	blx	r3
}
 800e04c:	46c0      	nop			; (mov r8, r8)
 800e04e:	46bd      	mov	sp, r7
 800e050:	b004      	add	sp, #16
 800e052:	bd80      	pop	{r7, pc}
 800e054:	20001094 	.word	0x20001094

0800e058 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b084      	sub	sp, #16
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e060:	2308      	movs	r3, #8
 800e062:	18fb      	adds	r3, r7, r3
 800e064:	0018      	movs	r0, r3
 800e066:	f000 f851 	bl	800e10c <prvGetNextExpireTime>
 800e06a:	0003      	movs	r3, r0
 800e06c:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e06e:	68ba      	ldr	r2, [r7, #8]
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	0011      	movs	r1, r2
 800e074:	0018      	movs	r0, r3
 800e076:	f000 f803 	bl	800e080 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e07a:	f000 f8c9 	bl	800e210 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e07e:	e7ef      	b.n	800e060 <prvTimerTask+0x8>

0800e080 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b084      	sub	sp, #16
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
 800e088:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e08a:	f7ff f9cf 	bl	800d42c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e08e:	2308      	movs	r3, #8
 800e090:	18fb      	adds	r3, r7, r3
 800e092:	0018      	movs	r0, r3
 800e094:	f000 f85a 	bl	800e14c <prvSampleTimeNow>
 800e098:	0003      	movs	r3, r0
 800e09a:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e09c:	68bb      	ldr	r3, [r7, #8]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d129      	bne.n	800e0f6 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e0a2:	683b      	ldr	r3, [r7, #0]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d10c      	bne.n	800e0c2 <prvProcessTimerOrBlockTask+0x42>
 800e0a8:	687a      	ldr	r2, [r7, #4]
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	429a      	cmp	r2, r3
 800e0ae:	d808      	bhi.n	800e0c2 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 800e0b0:	f7ff f9c8 	bl	800d444 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e0b4:	68fa      	ldr	r2, [r7, #12]
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	0011      	movs	r1, r2
 800e0ba:	0018      	movs	r0, r3
 800e0bc:	f7ff ff94 	bl	800dfe8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e0c0:	e01b      	b.n	800e0fa <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 800e0c2:	683b      	ldr	r3, [r7, #0]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d006      	beq.n	800e0d6 <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e0c8:	4b0e      	ldr	r3, [pc, #56]	; (800e104 <prvProcessTimerOrBlockTask+0x84>)
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	425a      	negs	r2, r3
 800e0d0:	4153      	adcs	r3, r2
 800e0d2:	b2db      	uxtb	r3, r3
 800e0d4:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e0d6:	4b0c      	ldr	r3, [pc, #48]	; (800e108 <prvProcessTimerOrBlockTask+0x88>)
 800e0d8:	6818      	ldr	r0, [r3, #0]
 800e0da:	687a      	ldr	r2, [r7, #4]
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	1ad3      	subs	r3, r2, r3
 800e0e0:	683a      	ldr	r2, [r7, #0]
 800e0e2:	0019      	movs	r1, r3
 800e0e4:	f7fe fe78 	bl	800cdd8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e0e8:	f7ff f9ac 	bl	800d444 <xTaskResumeAll>
 800e0ec:	1e03      	subs	r3, r0, #0
 800e0ee:	d104      	bne.n	800e0fa <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 800e0f0:	f000 fa4e 	bl	800e590 <vPortYield>
}
 800e0f4:	e001      	b.n	800e0fa <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 800e0f6:	f7ff f9a5 	bl	800d444 <xTaskResumeAll>
}
 800e0fa:	46c0      	nop			; (mov r8, r8)
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	b004      	add	sp, #16
 800e100:	bd80      	pop	{r7, pc}
 800e102:	46c0      	nop			; (mov r8, r8)
 800e104:	20001098 	.word	0x20001098
 800e108:	2000109c 	.word	0x2000109c

0800e10c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e10c:	b580      	push	{r7, lr}
 800e10e:	b084      	sub	sp, #16
 800e110:	af00      	add	r7, sp, #0
 800e112:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e114:	4b0c      	ldr	r3, [pc, #48]	; (800e148 <prvGetNextExpireTime+0x3c>)
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	425a      	negs	r2, r3
 800e11c:	4153      	adcs	r3, r2
 800e11e:	b2db      	uxtb	r3, r3
 800e120:	001a      	movs	r2, r3
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d105      	bne.n	800e13a <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e12e:	4b06      	ldr	r3, [pc, #24]	; (800e148 <prvGetNextExpireTime+0x3c>)
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	68db      	ldr	r3, [r3, #12]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	60fb      	str	r3, [r7, #12]
 800e138:	e001      	b.n	800e13e <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e13a:	2300      	movs	r3, #0
 800e13c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e13e:	68fb      	ldr	r3, [r7, #12]
}
 800e140:	0018      	movs	r0, r3
 800e142:	46bd      	mov	sp, r7
 800e144:	b004      	add	sp, #16
 800e146:	bd80      	pop	{r7, pc}
 800e148:	20001094 	.word	0x20001094

0800e14c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b084      	sub	sp, #16
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e154:	f7ff fa02 	bl	800d55c <xTaskGetTickCount>
 800e158:	0003      	movs	r3, r0
 800e15a:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 800e15c:	4b0a      	ldr	r3, [pc, #40]	; (800e188 <prvSampleTimeNow+0x3c>)
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	68fa      	ldr	r2, [r7, #12]
 800e162:	429a      	cmp	r2, r3
 800e164:	d205      	bcs.n	800e172 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 800e166:	f000 f8eb 	bl	800e340 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	2201      	movs	r2, #1
 800e16e:	601a      	str	r2, [r3, #0]
 800e170:	e002      	b.n	800e178 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	2200      	movs	r2, #0
 800e176:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e178:	4b03      	ldr	r3, [pc, #12]	; (800e188 <prvSampleTimeNow+0x3c>)
 800e17a:	68fa      	ldr	r2, [r7, #12]
 800e17c:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 800e17e:	68fb      	ldr	r3, [r7, #12]
}
 800e180:	0018      	movs	r0, r3
 800e182:	46bd      	mov	sp, r7
 800e184:	b004      	add	sp, #16
 800e186:	bd80      	pop	{r7, pc}
 800e188:	200010a4 	.word	0x200010a4

0800e18c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b086      	sub	sp, #24
 800e190:	af00      	add	r7, sp, #0
 800e192:	60f8      	str	r0, [r7, #12]
 800e194:	60b9      	str	r1, [r7, #8]
 800e196:	607a      	str	r2, [r7, #4]
 800e198:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e19a:	2300      	movs	r3, #0
 800e19c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	68ba      	ldr	r2, [r7, #8]
 800e1a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	68fa      	ldr	r2, [r7, #12]
 800e1a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e1aa:	68ba      	ldr	r2, [r7, #8]
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	429a      	cmp	r2, r3
 800e1b0:	d812      	bhi.n	800e1d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1b2:	687a      	ldr	r2, [r7, #4]
 800e1b4:	683b      	ldr	r3, [r7, #0]
 800e1b6:	1ad2      	subs	r2, r2, r3
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	699b      	ldr	r3, [r3, #24]
 800e1bc:	429a      	cmp	r2, r3
 800e1be:	d302      	bcc.n	800e1c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e1c0:	2301      	movs	r3, #1
 800e1c2:	617b      	str	r3, [r7, #20]
 800e1c4:	e01b      	b.n	800e1fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e1c6:	4b10      	ldr	r3, [pc, #64]	; (800e208 <prvInsertTimerInActiveList+0x7c>)
 800e1c8:	681a      	ldr	r2, [r3, #0]
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	3304      	adds	r3, #4
 800e1ce:	0019      	movs	r1, r3
 800e1d0:	0010      	movs	r0, r2
 800e1d2:	f7fd ff0a 	bl	800bfea <vListInsert>
 800e1d6:	e012      	b.n	800e1fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e1d8:	687a      	ldr	r2, [r7, #4]
 800e1da:	683b      	ldr	r3, [r7, #0]
 800e1dc:	429a      	cmp	r2, r3
 800e1de:	d206      	bcs.n	800e1ee <prvInsertTimerInActiveList+0x62>
 800e1e0:	68ba      	ldr	r2, [r7, #8]
 800e1e2:	683b      	ldr	r3, [r7, #0]
 800e1e4:	429a      	cmp	r2, r3
 800e1e6:	d302      	bcc.n	800e1ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e1e8:	2301      	movs	r3, #1
 800e1ea:	617b      	str	r3, [r7, #20]
 800e1ec:	e007      	b.n	800e1fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e1ee:	4b07      	ldr	r3, [pc, #28]	; (800e20c <prvInsertTimerInActiveList+0x80>)
 800e1f0:	681a      	ldr	r2, [r3, #0]
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	3304      	adds	r3, #4
 800e1f6:	0019      	movs	r1, r3
 800e1f8:	0010      	movs	r0, r2
 800e1fa:	f7fd fef6 	bl	800bfea <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e1fe:	697b      	ldr	r3, [r7, #20]
}
 800e200:	0018      	movs	r0, r3
 800e202:	46bd      	mov	sp, r7
 800e204:	b006      	add	sp, #24
 800e206:	bd80      	pop	{r7, pc}
 800e208:	20001098 	.word	0x20001098
 800e20c:	20001094 	.word	0x20001094

0800e210 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e210:	b590      	push	{r4, r7, lr}
 800e212:	b08d      	sub	sp, #52	; 0x34
 800e214:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e216:	e07f      	b.n	800e318 <prvProcessReceivedCommands+0x108>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e218:	2208      	movs	r2, #8
 800e21a:	18bb      	adds	r3, r7, r2
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	da0f      	bge.n	800e242 <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e222:	18bb      	adds	r3, r7, r2
 800e224:	3304      	adds	r3, #4
 800e226:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d101      	bne.n	800e232 <prvProcessReceivedCommands+0x22>
 800e22e:	b672      	cpsid	i
 800e230:	e7fe      	b.n	800e230 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e234:	681a      	ldr	r2, [r3, #0]
 800e236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e238:	6858      	ldr	r0, [r3, #4]
 800e23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e23c:	689b      	ldr	r3, [r3, #8]
 800e23e:	0019      	movs	r1, r3
 800e240:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e242:	2208      	movs	r2, #8
 800e244:	18bb      	adds	r3, r7, r2
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	db64      	blt.n	800e316 <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e24c:	18bb      	adds	r3, r7, r2
 800e24e:	689b      	ldr	r3, [r3, #8]
 800e250:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e252:	6a3b      	ldr	r3, [r7, #32]
 800e254:	695b      	ldr	r3, [r3, #20]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d004      	beq.n	800e264 <prvProcessReceivedCommands+0x54>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e25a:	6a3b      	ldr	r3, [r7, #32]
 800e25c:	3304      	adds	r3, #4
 800e25e:	0018      	movs	r0, r3
 800e260:	f7fd fef9 	bl	800c056 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e264:	1d3b      	adds	r3, r7, #4
 800e266:	0018      	movs	r0, r3
 800e268:	f7ff ff70 	bl	800e14c <prvSampleTimeNow>
 800e26c:	0003      	movs	r3, r0
 800e26e:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 800e270:	2308      	movs	r3, #8
 800e272:	18fb      	adds	r3, r7, r3
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	2b09      	cmp	r3, #9
 800e278:	d84e      	bhi.n	800e318 <prvProcessReceivedCommands+0x108>
 800e27a:	009a      	lsls	r2, r3, #2
 800e27c:	4b2e      	ldr	r3, [pc, #184]	; (800e338 <prvProcessReceivedCommands+0x128>)
 800e27e:	18d3      	adds	r3, r2, r3
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e284:	2408      	movs	r4, #8
 800e286:	193b      	adds	r3, r7, r4
 800e288:	685a      	ldr	r2, [r3, #4]
 800e28a:	6a3b      	ldr	r3, [r7, #32]
 800e28c:	699b      	ldr	r3, [r3, #24]
 800e28e:	18d1      	adds	r1, r2, r3
 800e290:	193b      	adds	r3, r7, r4
 800e292:	685b      	ldr	r3, [r3, #4]
 800e294:	69fa      	ldr	r2, [r7, #28]
 800e296:	6a38      	ldr	r0, [r7, #32]
 800e298:	f7ff ff78 	bl	800e18c <prvInsertTimerInActiveList>
 800e29c:	1e03      	subs	r3, r0, #0
 800e29e:	d03b      	beq.n	800e318 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e2a0:	6a3b      	ldr	r3, [r7, #32]
 800e2a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2a4:	6a3a      	ldr	r2, [r7, #32]
 800e2a6:	0010      	movs	r0, r2
 800e2a8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800e2aa:	6a3b      	ldr	r3, [r7, #32]
 800e2ac:	69db      	ldr	r3, [r3, #28]
 800e2ae:	2b01      	cmp	r3, #1
 800e2b0:	d132      	bne.n	800e318 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e2b2:	193b      	adds	r3, r7, r4
 800e2b4:	685a      	ldr	r2, [r3, #4]
 800e2b6:	6a3b      	ldr	r3, [r7, #32]
 800e2b8:	699b      	ldr	r3, [r3, #24]
 800e2ba:	18d2      	adds	r2, r2, r3
 800e2bc:	6a38      	ldr	r0, [r7, #32]
 800e2be:	2300      	movs	r3, #0
 800e2c0:	9300      	str	r3, [sp, #0]
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	2100      	movs	r1, #0
 800e2c6:	f7ff fe45 	bl	800df54 <xTimerGenericCommand>
 800e2ca:	0003      	movs	r3, r0
 800e2cc:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 800e2ce:	69bb      	ldr	r3, [r7, #24]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d121      	bne.n	800e318 <prvProcessReceivedCommands+0x108>
 800e2d4:	b672      	cpsid	i
 800e2d6:	e7fe      	b.n	800e2d6 <prvProcessReceivedCommands+0xc6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e2d8:	2308      	movs	r3, #8
 800e2da:	18fb      	adds	r3, r7, r3
 800e2dc:	685a      	ldr	r2, [r3, #4]
 800e2de:	6a3b      	ldr	r3, [r7, #32]
 800e2e0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e2e2:	6a3b      	ldr	r3, [r7, #32]
 800e2e4:	699b      	ldr	r3, [r3, #24]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d101      	bne.n	800e2ee <prvProcessReceivedCommands+0xde>
 800e2ea:	b672      	cpsid	i
 800e2ec:	e7fe      	b.n	800e2ec <prvProcessReceivedCommands+0xdc>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e2ee:	6a3b      	ldr	r3, [r7, #32]
 800e2f0:	699a      	ldr	r2, [r3, #24]
 800e2f2:	69fb      	ldr	r3, [r7, #28]
 800e2f4:	18d1      	adds	r1, r2, r3
 800e2f6:	69fb      	ldr	r3, [r7, #28]
 800e2f8:	69fa      	ldr	r2, [r7, #28]
 800e2fa:	6a38      	ldr	r0, [r7, #32]
 800e2fc:	f7ff ff46 	bl	800e18c <prvInsertTimerInActiveList>
					break;
 800e300:	e00a      	b.n	800e318 <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800e302:	6a3b      	ldr	r3, [r7, #32]
 800e304:	222c      	movs	r2, #44	; 0x2c
 800e306:	5c9b      	ldrb	r3, [r3, r2]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d105      	bne.n	800e318 <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 800e30c:	6a3b      	ldr	r3, [r7, #32]
 800e30e:	0018      	movs	r0, r3
 800e310:	f000 fa8c 	bl	800e82c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e314:	e000      	b.n	800e318 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e316:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e318:	4b08      	ldr	r3, [pc, #32]	; (800e33c <prvProcessReceivedCommands+0x12c>)
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	2208      	movs	r2, #8
 800e31e:	18b9      	adds	r1, r7, r2
 800e320:	2200      	movs	r2, #0
 800e322:	0018      	movs	r0, r3
 800e324:	f7fe f99e 	bl	800c664 <xQueueReceive>
 800e328:	1e03      	subs	r3, r0, #0
 800e32a:	d000      	beq.n	800e32e <prvProcessReceivedCommands+0x11e>
 800e32c:	e774      	b.n	800e218 <prvProcessReceivedCommands+0x8>
	}
}
 800e32e:	46c0      	nop			; (mov r8, r8)
 800e330:	46c0      	nop			; (mov r8, r8)
 800e332:	46bd      	mov	sp, r7
 800e334:	b00b      	add	sp, #44	; 0x2c
 800e336:	bd90      	pop	{r4, r7, pc}
 800e338:	080139f4 	.word	0x080139f4
 800e33c:	2000109c 	.word	0x2000109c

0800e340 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b088      	sub	sp, #32
 800e344:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e346:	e03e      	b.n	800e3c6 <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e348:	4b28      	ldr	r3, [pc, #160]	; (800e3ec <prvSwitchTimerLists+0xac>)
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	68db      	ldr	r3, [r3, #12]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e352:	4b26      	ldr	r3, [pc, #152]	; (800e3ec <prvSwitchTimerLists+0xac>)
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	68db      	ldr	r3, [r3, #12]
 800e358:	68db      	ldr	r3, [r3, #12]
 800e35a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	3304      	adds	r3, #4
 800e360:	0018      	movs	r0, r3
 800e362:	f7fd fe78 	bl	800c056 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e36a:	68fa      	ldr	r2, [r7, #12]
 800e36c:	0010      	movs	r0, r2
 800e36e:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	69db      	ldr	r3, [r3, #28]
 800e374:	2b01      	cmp	r3, #1
 800e376:	d126      	bne.n	800e3c6 <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	699b      	ldr	r3, [r3, #24]
 800e37c:	693a      	ldr	r2, [r7, #16]
 800e37e:	18d3      	adds	r3, r2, r3
 800e380:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e382:	68ba      	ldr	r2, [r7, #8]
 800e384:	693b      	ldr	r3, [r7, #16]
 800e386:	429a      	cmp	r2, r3
 800e388:	d90e      	bls.n	800e3a8 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	68ba      	ldr	r2, [r7, #8]
 800e38e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	68fa      	ldr	r2, [r7, #12]
 800e394:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e396:	4b15      	ldr	r3, [pc, #84]	; (800e3ec <prvSwitchTimerLists+0xac>)
 800e398:	681a      	ldr	r2, [r3, #0]
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	3304      	adds	r3, #4
 800e39e:	0019      	movs	r1, r3
 800e3a0:	0010      	movs	r0, r2
 800e3a2:	f7fd fe22 	bl	800bfea <vListInsert>
 800e3a6:	e00e      	b.n	800e3c6 <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e3a8:	693a      	ldr	r2, [r7, #16]
 800e3aa:	68f8      	ldr	r0, [r7, #12]
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	9300      	str	r3, [sp, #0]
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	2100      	movs	r1, #0
 800e3b4:	f7ff fdce 	bl	800df54 <xTimerGenericCommand>
 800e3b8:	0003      	movs	r3, r0
 800e3ba:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d101      	bne.n	800e3c6 <prvSwitchTimerLists+0x86>
 800e3c2:	b672      	cpsid	i
 800e3c4:	e7fe      	b.n	800e3c4 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e3c6:	4b09      	ldr	r3, [pc, #36]	; (800e3ec <prvSwitchTimerLists+0xac>)
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d1bb      	bne.n	800e348 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e3d0:	4b06      	ldr	r3, [pc, #24]	; (800e3ec <prvSwitchTimerLists+0xac>)
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e3d6:	4b06      	ldr	r3, [pc, #24]	; (800e3f0 <prvSwitchTimerLists+0xb0>)
 800e3d8:	681a      	ldr	r2, [r3, #0]
 800e3da:	4b04      	ldr	r3, [pc, #16]	; (800e3ec <prvSwitchTimerLists+0xac>)
 800e3dc:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 800e3de:	4b04      	ldr	r3, [pc, #16]	; (800e3f0 <prvSwitchTimerLists+0xb0>)
 800e3e0:	697a      	ldr	r2, [r7, #20]
 800e3e2:	601a      	str	r2, [r3, #0]
}
 800e3e4:	46c0      	nop			; (mov r8, r8)
 800e3e6:	46bd      	mov	sp, r7
 800e3e8:	b006      	add	sp, #24
 800e3ea:	bd80      	pop	{r7, pc}
 800e3ec:	20001094 	.word	0x20001094
 800e3f0:	20001098 	.word	0x20001098

0800e3f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b082      	sub	sp, #8
 800e3f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e3fa:	f000 f8d9 	bl	800e5b0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e3fe:	4b16      	ldr	r3, [pc, #88]	; (800e458 <prvCheckForValidListAndQueue+0x64>)
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d123      	bne.n	800e44e <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 800e406:	4b15      	ldr	r3, [pc, #84]	; (800e45c <prvCheckForValidListAndQueue+0x68>)
 800e408:	0018      	movs	r0, r3
 800e40a:	f7fd fda3 	bl	800bf54 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e40e:	4b14      	ldr	r3, [pc, #80]	; (800e460 <prvCheckForValidListAndQueue+0x6c>)
 800e410:	0018      	movs	r0, r3
 800e412:	f7fd fd9f 	bl	800bf54 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e416:	4b13      	ldr	r3, [pc, #76]	; (800e464 <prvCheckForValidListAndQueue+0x70>)
 800e418:	4a10      	ldr	r2, [pc, #64]	; (800e45c <prvCheckForValidListAndQueue+0x68>)
 800e41a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e41c:	4b12      	ldr	r3, [pc, #72]	; (800e468 <prvCheckForValidListAndQueue+0x74>)
 800e41e:	4a10      	ldr	r2, [pc, #64]	; (800e460 <prvCheckForValidListAndQueue+0x6c>)
 800e420:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e422:	4b12      	ldr	r3, [pc, #72]	; (800e46c <prvCheckForValidListAndQueue+0x78>)
 800e424:	4a12      	ldr	r2, [pc, #72]	; (800e470 <prvCheckForValidListAndQueue+0x7c>)
 800e426:	2100      	movs	r1, #0
 800e428:	9100      	str	r1, [sp, #0]
 800e42a:	2110      	movs	r1, #16
 800e42c:	200a      	movs	r0, #10
 800e42e:	f7fd fe8e 	bl	800c14e <xQueueGenericCreateStatic>
 800e432:	0002      	movs	r2, r0
 800e434:	4b08      	ldr	r3, [pc, #32]	; (800e458 <prvCheckForValidListAndQueue+0x64>)
 800e436:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e438:	4b07      	ldr	r3, [pc, #28]	; (800e458 <prvCheckForValidListAndQueue+0x64>)
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d006      	beq.n	800e44e <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e440:	4b05      	ldr	r3, [pc, #20]	; (800e458 <prvCheckForValidListAndQueue+0x64>)
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	4a0b      	ldr	r2, [pc, #44]	; (800e474 <prvCheckForValidListAndQueue+0x80>)
 800e446:	0011      	movs	r1, r2
 800e448:	0018      	movs	r0, r3
 800e44a:	f7fe fc73 	bl	800cd34 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e44e:	f000 f8c1 	bl	800e5d4 <vPortExitCritical>
}
 800e452:	46c0      	nop			; (mov r8, r8)
 800e454:	46bd      	mov	sp, r7
 800e456:	bd80      	pop	{r7, pc}
 800e458:	2000109c 	.word	0x2000109c
 800e45c:	2000106c 	.word	0x2000106c
 800e460:	20001080 	.word	0x20001080
 800e464:	20001094 	.word	0x20001094
 800e468:	20001098 	.word	0x20001098
 800e46c:	20001148 	.word	0x20001148
 800e470:	200010a8 	.word	0x200010a8
 800e474:	08012f2c 	.word	0x08012f2c

0800e478 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b084      	sub	sp, #16
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	60f8      	str	r0, [r7, #12]
 800e480:	60b9      	str	r1, [r7, #8]
 800e482:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	3b04      	subs	r3, #4
 800e488:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	2280      	movs	r2, #128	; 0x80
 800e48e:	0452      	lsls	r2, r2, #17
 800e490:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	3b04      	subs	r3, #4
 800e496:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800e498:	68ba      	ldr	r2, [r7, #8]
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	3b04      	subs	r3, #4
 800e4a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e4a4:	4a08      	ldr	r2, [pc, #32]	; (800e4c8 <pxPortInitialiseStack+0x50>)
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	3b14      	subs	r3, #20
 800e4ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e4b0:	687a      	ldr	r2, [r7, #4]
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	3b20      	subs	r3, #32
 800e4ba:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e4bc:	68fb      	ldr	r3, [r7, #12]
}
 800e4be:	0018      	movs	r0, r3
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	b004      	add	sp, #16
 800e4c4:	bd80      	pop	{r7, pc}
 800e4c6:	46c0      	nop			; (mov r8, r8)
 800e4c8:	0800e4cd 	.word	0x0800e4cd

0800e4cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b082      	sub	sp, #8
 800e4d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e4d6:	4b08      	ldr	r3, [pc, #32]	; (800e4f8 <prvTaskExitError+0x2c>)
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	3301      	adds	r3, #1
 800e4dc:	d001      	beq.n	800e4e2 <prvTaskExitError+0x16>
 800e4de:	b672      	cpsid	i
 800e4e0:	e7fe      	b.n	800e4e0 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800e4e2:	b672      	cpsid	i
	while( ulDummy == 0 )
 800e4e4:	46c0      	nop			; (mov r8, r8)
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d0fc      	beq.n	800e4e6 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e4ec:	46c0      	nop			; (mov r8, r8)
 800e4ee:	46c0      	nop			; (mov r8, r8)
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	b002      	add	sp, #8
 800e4f4:	bd80      	pop	{r7, pc}
 800e4f6:	46c0      	nop			; (mov r8, r8)
 800e4f8:	20000098 	.word	0x20000098

0800e4fc <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 800e500:	46c0      	nop			; (mov r8, r8)
 800e502:	46bd      	mov	sp, r7
 800e504:	bd80      	pop	{r7, pc}
	...

0800e510 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800e510:	4a0b      	ldr	r2, [pc, #44]	; (800e540 <pxCurrentTCBConst2>)
 800e512:	6813      	ldr	r3, [r2, #0]
 800e514:	6818      	ldr	r0, [r3, #0]
 800e516:	3020      	adds	r0, #32
 800e518:	f380 8809 	msr	PSP, r0
 800e51c:	2002      	movs	r0, #2
 800e51e:	f380 8814 	msr	CONTROL, r0
 800e522:	f3bf 8f6f 	isb	sy
 800e526:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800e528:	46ae      	mov	lr, r5
 800e52a:	bc08      	pop	{r3}
 800e52c:	bc04      	pop	{r2}
 800e52e:	b662      	cpsie	i
 800e530:	4718      	bx	r3
 800e532:	46c0      	nop			; (mov r8, r8)
 800e534:	46c0      	nop			; (mov r8, r8)
 800e536:	46c0      	nop			; (mov r8, r8)
 800e538:	46c0      	nop			; (mov r8, r8)
 800e53a:	46c0      	nop			; (mov r8, r8)
 800e53c:	46c0      	nop			; (mov r8, r8)
 800e53e:	46c0      	nop			; (mov r8, r8)

0800e540 <pxCurrentTCBConst2>:
 800e540:	20000b6c 	.word	0x20000b6c
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 800e544:	46c0      	nop			; (mov r8, r8)
 800e546:	46c0      	nop			; (mov r8, r8)

0800e548 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800e54c:	4b0e      	ldr	r3, [pc, #56]	; (800e588 <xPortStartScheduler+0x40>)
 800e54e:	681a      	ldr	r2, [r3, #0]
 800e550:	4b0d      	ldr	r3, [pc, #52]	; (800e588 <xPortStartScheduler+0x40>)
 800e552:	21ff      	movs	r1, #255	; 0xff
 800e554:	0409      	lsls	r1, r1, #16
 800e556:	430a      	orrs	r2, r1
 800e558:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800e55a:	4b0b      	ldr	r3, [pc, #44]	; (800e588 <xPortStartScheduler+0x40>)
 800e55c:	681a      	ldr	r2, [r3, #0]
 800e55e:	4b0a      	ldr	r3, [pc, #40]	; (800e588 <xPortStartScheduler+0x40>)
 800e560:	21ff      	movs	r1, #255	; 0xff
 800e562:	0609      	lsls	r1, r1, #24
 800e564:	430a      	orrs	r2, r1
 800e566:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 800e568:	f000 f898 	bl	800e69c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e56c:	4b07      	ldr	r3, [pc, #28]	; (800e58c <xPortStartScheduler+0x44>)
 800e56e:	2200      	movs	r2, #0
 800e570:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 800e572:	f7ff ffcd 	bl	800e510 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e576:	f7ff f8b3 	bl	800d6e0 <vTaskSwitchContext>
	prvTaskExitError();
 800e57a:	f7ff ffa7 	bl	800e4cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e57e:	2300      	movs	r3, #0
}
 800e580:	0018      	movs	r0, r3
 800e582:	46bd      	mov	sp, r7
 800e584:	bd80      	pop	{r7, pc}
 800e586:	46c0      	nop			; (mov r8, r8)
 800e588:	e000ed20 	.word	0xe000ed20
 800e58c:	20000098 	.word	0x20000098

0800e590 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 800e590:	b580      	push	{r7, lr}
 800e592:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 800e594:	4b05      	ldr	r3, [pc, #20]	; (800e5ac <vPortYield+0x1c>)
 800e596:	2280      	movs	r2, #128	; 0x80
 800e598:	0552      	lsls	r2, r2, #21
 800e59a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800e59c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800e5a0:	f3bf 8f6f 	isb	sy
}
 800e5a4:	46c0      	nop			; (mov r8, r8)
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	bd80      	pop	{r7, pc}
 800e5aa:	46c0      	nop			; (mov r8, r8)
 800e5ac:	e000ed04 	.word	0xe000ed04

0800e5b0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 800e5b4:	b672      	cpsid	i
    uxCriticalNesting++;
 800e5b6:	4b06      	ldr	r3, [pc, #24]	; (800e5d0 <vPortEnterCritical+0x20>)
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	1c5a      	adds	r2, r3, #1
 800e5bc:	4b04      	ldr	r3, [pc, #16]	; (800e5d0 <vPortEnterCritical+0x20>)
 800e5be:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 800e5c0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800e5c4:	f3bf 8f6f 	isb	sy
}
 800e5c8:	46c0      	nop			; (mov r8, r8)
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	bd80      	pop	{r7, pc}
 800e5ce:	46c0      	nop			; (mov r8, r8)
 800e5d0:	20000098 	.word	0x20000098

0800e5d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e5d4:	b580      	push	{r7, lr}
 800e5d6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e5d8:	4b09      	ldr	r3, [pc, #36]	; (800e600 <vPortExitCritical+0x2c>)
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d101      	bne.n	800e5e4 <vPortExitCritical+0x10>
 800e5e0:	b672      	cpsid	i
 800e5e2:	e7fe      	b.n	800e5e2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 800e5e4:	4b06      	ldr	r3, [pc, #24]	; (800e600 <vPortExitCritical+0x2c>)
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	1e5a      	subs	r2, r3, #1
 800e5ea:	4b05      	ldr	r3, [pc, #20]	; (800e600 <vPortExitCritical+0x2c>)
 800e5ec:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800e5ee:	4b04      	ldr	r3, [pc, #16]	; (800e600 <vPortExitCritical+0x2c>)
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d100      	bne.n	800e5f8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 800e5f6:	b662      	cpsie	i
    }
}
 800e5f8:	46c0      	nop			; (mov r8, r8)
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	bd80      	pop	{r7, pc}
 800e5fe:	46c0      	nop			; (mov r8, r8)
 800e600:	20000098 	.word	0x20000098

0800e604 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 800e604:	f3ef 8010 	mrs	r0, PRIMASK
 800e608:	b672      	cpsid	i
 800e60a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800e60c:	46c0      	nop			; (mov r8, r8)
 800e60e:	0018      	movs	r0, r3

0800e610 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 800e610:	f380 8810 	msr	PRIMASK, r0
 800e614:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 800e616:	46c0      	nop			; (mov r8, r8)
	...

0800e620 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e620:	f3ef 8009 	mrs	r0, PSP
 800e624:	4b0e      	ldr	r3, [pc, #56]	; (800e660 <pxCurrentTCBConst>)
 800e626:	681a      	ldr	r2, [r3, #0]
 800e628:	3820      	subs	r0, #32
 800e62a:	6010      	str	r0, [r2, #0]
 800e62c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800e62e:	4644      	mov	r4, r8
 800e630:	464d      	mov	r5, r9
 800e632:	4656      	mov	r6, sl
 800e634:	465f      	mov	r7, fp
 800e636:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800e638:	b508      	push	{r3, lr}
 800e63a:	b672      	cpsid	i
 800e63c:	f7ff f850 	bl	800d6e0 <vTaskSwitchContext>
 800e640:	b662      	cpsie	i
 800e642:	bc0c      	pop	{r2, r3}
 800e644:	6811      	ldr	r1, [r2, #0]
 800e646:	6808      	ldr	r0, [r1, #0]
 800e648:	3010      	adds	r0, #16
 800e64a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800e64c:	46a0      	mov	r8, r4
 800e64e:	46a9      	mov	r9, r5
 800e650:	46b2      	mov	sl, r6
 800e652:	46bb      	mov	fp, r7
 800e654:	f380 8809 	msr	PSP, r0
 800e658:	3820      	subs	r0, #32
 800e65a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800e65c:	4718      	bx	r3
 800e65e:	46c0      	nop			; (mov r8, r8)

0800e660 <pxCurrentTCBConst>:
 800e660:	20000b6c 	.word	0x20000b6c
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 800e664:	46c0      	nop			; (mov r8, r8)
 800e666:	46c0      	nop			; (mov r8, r8)

0800e668 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e668:	b580      	push	{r7, lr}
 800e66a:	b082      	sub	sp, #8
 800e66c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800e66e:	f7ff ffc9 	bl	800e604 <ulSetInterruptMaskFromISR>
 800e672:	0003      	movs	r3, r0
 800e674:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e676:	f7fe ff7f 	bl	800d578 <xTaskIncrementTick>
 800e67a:	1e03      	subs	r3, r0, #0
 800e67c:	d003      	beq.n	800e686 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800e67e:	4b06      	ldr	r3, [pc, #24]	; (800e698 <SysTick_Handler+0x30>)
 800e680:	2280      	movs	r2, #128	; 0x80
 800e682:	0552      	lsls	r2, r2, #21
 800e684:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	0018      	movs	r0, r3
 800e68a:	f7ff ffc1 	bl	800e610 <vClearInterruptMaskFromISR>
}
 800e68e:	46c0      	nop			; (mov r8, r8)
 800e690:	46bd      	mov	sp, r7
 800e692:	b002      	add	sp, #8
 800e694:	bd80      	pop	{r7, pc}
 800e696:	46c0      	nop			; (mov r8, r8)
 800e698:	e000ed04 	.word	0xe000ed04

0800e69c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 800e6a0:	4b0b      	ldr	r3, [pc, #44]	; (800e6d0 <prvSetupTimerInterrupt+0x34>)
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 800e6a6:	4b0b      	ldr	r3, [pc, #44]	; (800e6d4 <prvSetupTimerInterrupt+0x38>)
 800e6a8:	2200      	movs	r2, #0
 800e6aa:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e6ac:	4b0a      	ldr	r3, [pc, #40]	; (800e6d8 <prvSetupTimerInterrupt+0x3c>)
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	22fa      	movs	r2, #250	; 0xfa
 800e6b2:	0091      	lsls	r1, r2, #2
 800e6b4:	0018      	movs	r0, r3
 800e6b6:	f7f1 fd43 	bl	8000140 <__udivsi3>
 800e6ba:	0003      	movs	r3, r0
 800e6bc:	001a      	movs	r2, r3
 800e6be:	4b07      	ldr	r3, [pc, #28]	; (800e6dc <prvSetupTimerInterrupt+0x40>)
 800e6c0:	3a01      	subs	r2, #1
 800e6c2:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800e6c4:	4b02      	ldr	r3, [pc, #8]	; (800e6d0 <prvSetupTimerInterrupt+0x34>)
 800e6c6:	2207      	movs	r2, #7
 800e6c8:	601a      	str	r2, [r3, #0]
}
 800e6ca:	46c0      	nop			; (mov r8, r8)
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	bd80      	pop	{r7, pc}
 800e6d0:	e000e010 	.word	0xe000e010
 800e6d4:	e000e018 	.word	0xe000e018
 800e6d8:	2000008c 	.word	0x2000008c
 800e6dc:	e000e014 	.word	0xe000e014

0800e6e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b086      	sub	sp, #24
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800e6ec:	f7fe fe9e 	bl	800d42c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e6f0:	4b49      	ldr	r3, [pc, #292]	; (800e818 <pvPortMalloc+0x138>)
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d101      	bne.n	800e6fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e6f8:	f000 f8e0 	bl	800e8bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e6fc:	4b47      	ldr	r3, [pc, #284]	; (800e81c <pvPortMalloc+0x13c>)
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	687a      	ldr	r2, [r7, #4]
 800e702:	4013      	ands	r3, r2
 800e704:	d000      	beq.n	800e708 <pvPortMalloc+0x28>
 800e706:	e079      	b.n	800e7fc <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d012      	beq.n	800e734 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800e70e:	2208      	movs	r2, #8
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	189b      	adds	r3, r3, r2
 800e714:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	2207      	movs	r2, #7
 800e71a:	4013      	ands	r3, r2
 800e71c:	d00a      	beq.n	800e734 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	2207      	movs	r2, #7
 800e722:	4393      	bics	r3, r2
 800e724:	3308      	adds	r3, #8
 800e726:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	2207      	movs	r2, #7
 800e72c:	4013      	ands	r3, r2
 800e72e:	d001      	beq.n	800e734 <pvPortMalloc+0x54>
 800e730:	b672      	cpsid	i
 800e732:	e7fe      	b.n	800e732 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d060      	beq.n	800e7fc <pvPortMalloc+0x11c>
 800e73a:	4b39      	ldr	r3, [pc, #228]	; (800e820 <pvPortMalloc+0x140>)
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	687a      	ldr	r2, [r7, #4]
 800e740:	429a      	cmp	r2, r3
 800e742:	d85b      	bhi.n	800e7fc <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e744:	4b37      	ldr	r3, [pc, #220]	; (800e824 <pvPortMalloc+0x144>)
 800e746:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800e748:	4b36      	ldr	r3, [pc, #216]	; (800e824 <pvPortMalloc+0x144>)
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e74e:	e004      	b.n	800e75a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 800e750:	697b      	ldr	r3, [r7, #20]
 800e752:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e754:	697b      	ldr	r3, [r7, #20]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e75a:	697b      	ldr	r3, [r7, #20]
 800e75c:	685b      	ldr	r3, [r3, #4]
 800e75e:	687a      	ldr	r2, [r7, #4]
 800e760:	429a      	cmp	r2, r3
 800e762:	d903      	bls.n	800e76c <pvPortMalloc+0x8c>
 800e764:	697b      	ldr	r3, [r7, #20]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d1f1      	bne.n	800e750 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e76c:	4b2a      	ldr	r3, [pc, #168]	; (800e818 <pvPortMalloc+0x138>)
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	697a      	ldr	r2, [r7, #20]
 800e772:	429a      	cmp	r2, r3
 800e774:	d042      	beq.n	800e7fc <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e776:	693b      	ldr	r3, [r7, #16]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	2208      	movs	r2, #8
 800e77c:	189b      	adds	r3, r3, r2
 800e77e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e780:	697b      	ldr	r3, [r7, #20]
 800e782:	681a      	ldr	r2, [r3, #0]
 800e784:	693b      	ldr	r3, [r7, #16]
 800e786:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e788:	697b      	ldr	r3, [r7, #20]
 800e78a:	685a      	ldr	r2, [r3, #4]
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	1ad2      	subs	r2, r2, r3
 800e790:	2308      	movs	r3, #8
 800e792:	005b      	lsls	r3, r3, #1
 800e794:	429a      	cmp	r2, r3
 800e796:	d916      	bls.n	800e7c6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e798:	697a      	ldr	r2, [r7, #20]
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	18d3      	adds	r3, r2, r3
 800e79e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e7a0:	68bb      	ldr	r3, [r7, #8]
 800e7a2:	2207      	movs	r2, #7
 800e7a4:	4013      	ands	r3, r2
 800e7a6:	d001      	beq.n	800e7ac <pvPortMalloc+0xcc>
 800e7a8:	b672      	cpsid	i
 800e7aa:	e7fe      	b.n	800e7aa <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e7ac:	697b      	ldr	r3, [r7, #20]
 800e7ae:	685a      	ldr	r2, [r3, #4]
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	1ad2      	subs	r2, r2, r3
 800e7b4:	68bb      	ldr	r3, [r7, #8]
 800e7b6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e7b8:	697b      	ldr	r3, [r7, #20]
 800e7ba:	687a      	ldr	r2, [r7, #4]
 800e7bc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e7be:	68bb      	ldr	r3, [r7, #8]
 800e7c0:	0018      	movs	r0, r3
 800e7c2:	f000 f8db 	bl	800e97c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e7c6:	4b16      	ldr	r3, [pc, #88]	; (800e820 <pvPortMalloc+0x140>)
 800e7c8:	681a      	ldr	r2, [r3, #0]
 800e7ca:	697b      	ldr	r3, [r7, #20]
 800e7cc:	685b      	ldr	r3, [r3, #4]
 800e7ce:	1ad2      	subs	r2, r2, r3
 800e7d0:	4b13      	ldr	r3, [pc, #76]	; (800e820 <pvPortMalloc+0x140>)
 800e7d2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e7d4:	4b12      	ldr	r3, [pc, #72]	; (800e820 <pvPortMalloc+0x140>)
 800e7d6:	681a      	ldr	r2, [r3, #0]
 800e7d8:	4b13      	ldr	r3, [pc, #76]	; (800e828 <pvPortMalloc+0x148>)
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	429a      	cmp	r2, r3
 800e7de:	d203      	bcs.n	800e7e8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e7e0:	4b0f      	ldr	r3, [pc, #60]	; (800e820 <pvPortMalloc+0x140>)
 800e7e2:	681a      	ldr	r2, [r3, #0]
 800e7e4:	4b10      	ldr	r3, [pc, #64]	; (800e828 <pvPortMalloc+0x148>)
 800e7e6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e7e8:	697b      	ldr	r3, [r7, #20]
 800e7ea:	685a      	ldr	r2, [r3, #4]
 800e7ec:	4b0b      	ldr	r3, [pc, #44]	; (800e81c <pvPortMalloc+0x13c>)
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	431a      	orrs	r2, r3
 800e7f2:	697b      	ldr	r3, [r7, #20]
 800e7f4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e7f6:	697b      	ldr	r3, [r7, #20]
 800e7f8:	2200      	movs	r2, #0
 800e7fa:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e7fc:	f7fe fe22 	bl	800d444 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	2207      	movs	r2, #7
 800e804:	4013      	ands	r3, r2
 800e806:	d001      	beq.n	800e80c <pvPortMalloc+0x12c>
 800e808:	b672      	cpsid	i
 800e80a:	e7fe      	b.n	800e80a <pvPortMalloc+0x12a>
	return pvReturn;
 800e80c:	68fb      	ldr	r3, [r7, #12]
}
 800e80e:	0018      	movs	r0, r3
 800e810:	46bd      	mov	sp, r7
 800e812:	b006      	add	sp, #24
 800e814:	bd80      	pop	{r7, pc}
 800e816:	46c0      	nop			; (mov r8, r8)
 800e818:	200021a0 	.word	0x200021a0
 800e81c:	200021ac 	.word	0x200021ac
 800e820:	200021a4 	.word	0x200021a4
 800e824:	20002198 	.word	0x20002198
 800e828:	200021a8 	.word	0x200021a8

0800e82c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b084      	sub	sp, #16
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d035      	beq.n	800e8aa <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e83e:	2308      	movs	r3, #8
 800e840:	425b      	negs	r3, r3
 800e842:	68fa      	ldr	r2, [r7, #12]
 800e844:	18d3      	adds	r3, r2, r3
 800e846:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e84c:	68bb      	ldr	r3, [r7, #8]
 800e84e:	685a      	ldr	r2, [r3, #4]
 800e850:	4b18      	ldr	r3, [pc, #96]	; (800e8b4 <vPortFree+0x88>)
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	4013      	ands	r3, r2
 800e856:	d101      	bne.n	800e85c <vPortFree+0x30>
 800e858:	b672      	cpsid	i
 800e85a:	e7fe      	b.n	800e85a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e85c:	68bb      	ldr	r3, [r7, #8]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d001      	beq.n	800e868 <vPortFree+0x3c>
 800e864:	b672      	cpsid	i
 800e866:	e7fe      	b.n	800e866 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e868:	68bb      	ldr	r3, [r7, #8]
 800e86a:	685a      	ldr	r2, [r3, #4]
 800e86c:	4b11      	ldr	r3, [pc, #68]	; (800e8b4 <vPortFree+0x88>)
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	4013      	ands	r3, r2
 800e872:	d01a      	beq.n	800e8aa <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e874:	68bb      	ldr	r3, [r7, #8]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d116      	bne.n	800e8aa <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e87c:	68bb      	ldr	r3, [r7, #8]
 800e87e:	685a      	ldr	r2, [r3, #4]
 800e880:	4b0c      	ldr	r3, [pc, #48]	; (800e8b4 <vPortFree+0x88>)
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	43db      	mvns	r3, r3
 800e886:	401a      	ands	r2, r3
 800e888:	68bb      	ldr	r3, [r7, #8]
 800e88a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e88c:	f7fe fdce 	bl	800d42c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e890:	68bb      	ldr	r3, [r7, #8]
 800e892:	685a      	ldr	r2, [r3, #4]
 800e894:	4b08      	ldr	r3, [pc, #32]	; (800e8b8 <vPortFree+0x8c>)
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	18d2      	adds	r2, r2, r3
 800e89a:	4b07      	ldr	r3, [pc, #28]	; (800e8b8 <vPortFree+0x8c>)
 800e89c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e89e:	68bb      	ldr	r3, [r7, #8]
 800e8a0:	0018      	movs	r0, r3
 800e8a2:	f000 f86b 	bl	800e97c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e8a6:	f7fe fdcd 	bl	800d444 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e8aa:	46c0      	nop			; (mov r8, r8)
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	b004      	add	sp, #16
 800e8b0:	bd80      	pop	{r7, pc}
 800e8b2:	46c0      	nop			; (mov r8, r8)
 800e8b4:	200021ac 	.word	0x200021ac
 800e8b8:	200021a4 	.word	0x200021a4

0800e8bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b084      	sub	sp, #16
 800e8c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e8c2:	2380      	movs	r3, #128	; 0x80
 800e8c4:	015b      	lsls	r3, r3, #5
 800e8c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e8c8:	4b26      	ldr	r3, [pc, #152]	; (800e964 <prvHeapInit+0xa8>)
 800e8ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	2207      	movs	r2, #7
 800e8d0:	4013      	ands	r3, r2
 800e8d2:	d00c      	beq.n	800e8ee <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	3307      	adds	r3, #7
 800e8d8:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	2207      	movs	r2, #7
 800e8de:	4393      	bics	r3, r2
 800e8e0:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e8e2:	68ba      	ldr	r2, [r7, #8]
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	1ad2      	subs	r2, r2, r3
 800e8e8:	4b1e      	ldr	r3, [pc, #120]	; (800e964 <prvHeapInit+0xa8>)
 800e8ea:	18d3      	adds	r3, r2, r3
 800e8ec:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e8f2:	4b1d      	ldr	r3, [pc, #116]	; (800e968 <prvHeapInit+0xac>)
 800e8f4:	687a      	ldr	r2, [r7, #4]
 800e8f6:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e8f8:	4b1b      	ldr	r3, [pc, #108]	; (800e968 <prvHeapInit+0xac>)
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	68ba      	ldr	r2, [r7, #8]
 800e902:	18d3      	adds	r3, r2, r3
 800e904:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e906:	2208      	movs	r2, #8
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	1a9b      	subs	r3, r3, r2
 800e90c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	2207      	movs	r2, #7
 800e912:	4393      	bics	r3, r2
 800e914:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e916:	68fa      	ldr	r2, [r7, #12]
 800e918:	4b14      	ldr	r3, [pc, #80]	; (800e96c <prvHeapInit+0xb0>)
 800e91a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800e91c:	4b13      	ldr	r3, [pc, #76]	; (800e96c <prvHeapInit+0xb0>)
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	2200      	movs	r2, #0
 800e922:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e924:	4b11      	ldr	r3, [pc, #68]	; (800e96c <prvHeapInit+0xb0>)
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	2200      	movs	r2, #0
 800e92a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e930:	683b      	ldr	r3, [r7, #0]
 800e932:	68fa      	ldr	r2, [r7, #12]
 800e934:	1ad2      	subs	r2, r2, r3
 800e936:	683b      	ldr	r3, [r7, #0]
 800e938:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e93a:	4b0c      	ldr	r3, [pc, #48]	; (800e96c <prvHeapInit+0xb0>)
 800e93c:	681a      	ldr	r2, [r3, #0]
 800e93e:	683b      	ldr	r3, [r7, #0]
 800e940:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e942:	683b      	ldr	r3, [r7, #0]
 800e944:	685a      	ldr	r2, [r3, #4]
 800e946:	4b0a      	ldr	r3, [pc, #40]	; (800e970 <prvHeapInit+0xb4>)
 800e948:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e94a:	683b      	ldr	r3, [r7, #0]
 800e94c:	685a      	ldr	r2, [r3, #4]
 800e94e:	4b09      	ldr	r3, [pc, #36]	; (800e974 <prvHeapInit+0xb8>)
 800e950:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e952:	4b09      	ldr	r3, [pc, #36]	; (800e978 <prvHeapInit+0xbc>)
 800e954:	2280      	movs	r2, #128	; 0x80
 800e956:	0612      	lsls	r2, r2, #24
 800e958:	601a      	str	r2, [r3, #0]
}
 800e95a:	46c0      	nop			; (mov r8, r8)
 800e95c:	46bd      	mov	sp, r7
 800e95e:	b004      	add	sp, #16
 800e960:	bd80      	pop	{r7, pc}
 800e962:	46c0      	nop			; (mov r8, r8)
 800e964:	20001198 	.word	0x20001198
 800e968:	20002198 	.word	0x20002198
 800e96c:	200021a0 	.word	0x200021a0
 800e970:	200021a8 	.word	0x200021a8
 800e974:	200021a4 	.word	0x200021a4
 800e978:	200021ac 	.word	0x200021ac

0800e97c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b084      	sub	sp, #16
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e984:	4b27      	ldr	r3, [pc, #156]	; (800ea24 <prvInsertBlockIntoFreeList+0xa8>)
 800e986:	60fb      	str	r3, [r7, #12]
 800e988:	e002      	b.n	800e990 <prvInsertBlockIntoFreeList+0x14>
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	60fb      	str	r3, [r7, #12]
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	687a      	ldr	r2, [r7, #4]
 800e996:	429a      	cmp	r2, r3
 800e998:	d8f7      	bhi.n	800e98a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	685b      	ldr	r3, [r3, #4]
 800e9a2:	68ba      	ldr	r2, [r7, #8]
 800e9a4:	18d3      	adds	r3, r2, r3
 800e9a6:	687a      	ldr	r2, [r7, #4]
 800e9a8:	429a      	cmp	r2, r3
 800e9aa:	d108      	bne.n	800e9be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	685a      	ldr	r2, [r3, #4]
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	685b      	ldr	r3, [r3, #4]
 800e9b4:	18d2      	adds	r2, r2, r3
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	685b      	ldr	r3, [r3, #4]
 800e9c6:	68ba      	ldr	r2, [r7, #8]
 800e9c8:	18d2      	adds	r2, r2, r3
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	429a      	cmp	r2, r3
 800e9d0:	d118      	bne.n	800ea04 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	681a      	ldr	r2, [r3, #0]
 800e9d6:	4b14      	ldr	r3, [pc, #80]	; (800ea28 <prvInsertBlockIntoFreeList+0xac>)
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	429a      	cmp	r2, r3
 800e9dc:	d00d      	beq.n	800e9fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	685a      	ldr	r2, [r3, #4]
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	685b      	ldr	r3, [r3, #4]
 800e9e8:	18d2      	adds	r2, r2, r3
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	681a      	ldr	r2, [r3, #0]
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	601a      	str	r2, [r3, #0]
 800e9f8:	e008      	b.n	800ea0c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e9fa:	4b0b      	ldr	r3, [pc, #44]	; (800ea28 <prvInsertBlockIntoFreeList+0xac>)
 800e9fc:	681a      	ldr	r2, [r3, #0]
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	601a      	str	r2, [r3, #0]
 800ea02:	e003      	b.n	800ea0c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	681a      	ldr	r2, [r3, #0]
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ea0c:	68fa      	ldr	r2, [r7, #12]
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	429a      	cmp	r2, r3
 800ea12:	d002      	beq.n	800ea1a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	687a      	ldr	r2, [r7, #4]
 800ea18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ea1a:	46c0      	nop			; (mov r8, r8)
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	b004      	add	sp, #16
 800ea20:	bd80      	pop	{r7, pc}
 800ea22:	46c0      	nop			; (mov r8, r8)
 800ea24:	20002198 	.word	0x20002198
 800ea28:	200021a0 	.word	0x200021a0

0800ea2c <atol>:
 800ea2c:	b510      	push	{r4, lr}
 800ea2e:	220a      	movs	r2, #10
 800ea30:	2100      	movs	r1, #0
 800ea32:	f000 ffc7 	bl	800f9c4 <strtol>
 800ea36:	bd10      	pop	{r4, pc}

0800ea38 <__errno>:
 800ea38:	4b01      	ldr	r3, [pc, #4]	; (800ea40 <__errno+0x8>)
 800ea3a:	6818      	ldr	r0, [r3, #0]
 800ea3c:	4770      	bx	lr
 800ea3e:	46c0      	nop			; (mov r8, r8)
 800ea40:	2000009c 	.word	0x2000009c

0800ea44 <std>:
 800ea44:	2300      	movs	r3, #0
 800ea46:	b510      	push	{r4, lr}
 800ea48:	0004      	movs	r4, r0
 800ea4a:	6003      	str	r3, [r0, #0]
 800ea4c:	6043      	str	r3, [r0, #4]
 800ea4e:	6083      	str	r3, [r0, #8]
 800ea50:	8181      	strh	r1, [r0, #12]
 800ea52:	6643      	str	r3, [r0, #100]	; 0x64
 800ea54:	0019      	movs	r1, r3
 800ea56:	81c2      	strh	r2, [r0, #14]
 800ea58:	6103      	str	r3, [r0, #16]
 800ea5a:	6143      	str	r3, [r0, #20]
 800ea5c:	6183      	str	r3, [r0, #24]
 800ea5e:	2208      	movs	r2, #8
 800ea60:	305c      	adds	r0, #92	; 0x5c
 800ea62:	f000 f921 	bl	800eca8 <memset>
 800ea66:	4b05      	ldr	r3, [pc, #20]	; (800ea7c <std+0x38>)
 800ea68:	6224      	str	r4, [r4, #32]
 800ea6a:	6263      	str	r3, [r4, #36]	; 0x24
 800ea6c:	4b04      	ldr	r3, [pc, #16]	; (800ea80 <std+0x3c>)
 800ea6e:	62a3      	str	r3, [r4, #40]	; 0x28
 800ea70:	4b04      	ldr	r3, [pc, #16]	; (800ea84 <std+0x40>)
 800ea72:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ea74:	4b04      	ldr	r3, [pc, #16]	; (800ea88 <std+0x44>)
 800ea76:	6323      	str	r3, [r4, #48]	; 0x30
 800ea78:	bd10      	pop	{r4, pc}
 800ea7a:	46c0      	nop			; (mov r8, r8)
 800ea7c:	0800f811 	.word	0x0800f811
 800ea80:	0800f839 	.word	0x0800f839
 800ea84:	0800f871 	.word	0x0800f871
 800ea88:	0800f89d 	.word	0x0800f89d

0800ea8c <_cleanup_r>:
 800ea8c:	b510      	push	{r4, lr}
 800ea8e:	4902      	ldr	r1, [pc, #8]	; (800ea98 <_cleanup_r+0xc>)
 800ea90:	f000 f8ba 	bl	800ec08 <_fwalk_reent>
 800ea94:	bd10      	pop	{r4, pc}
 800ea96:	46c0      	nop			; (mov r8, r8)
 800ea98:	0801088d 	.word	0x0801088d

0800ea9c <__sfmoreglue>:
 800ea9c:	b570      	push	{r4, r5, r6, lr}
 800ea9e:	2568      	movs	r5, #104	; 0x68
 800eaa0:	1e4a      	subs	r2, r1, #1
 800eaa2:	4355      	muls	r5, r2
 800eaa4:	000e      	movs	r6, r1
 800eaa6:	0029      	movs	r1, r5
 800eaa8:	3174      	adds	r1, #116	; 0x74
 800eaaa:	f000 f927 	bl	800ecfc <_malloc_r>
 800eaae:	1e04      	subs	r4, r0, #0
 800eab0:	d008      	beq.n	800eac4 <__sfmoreglue+0x28>
 800eab2:	2100      	movs	r1, #0
 800eab4:	002a      	movs	r2, r5
 800eab6:	6001      	str	r1, [r0, #0]
 800eab8:	6046      	str	r6, [r0, #4]
 800eaba:	300c      	adds	r0, #12
 800eabc:	60a0      	str	r0, [r4, #8]
 800eabe:	3268      	adds	r2, #104	; 0x68
 800eac0:	f000 f8f2 	bl	800eca8 <memset>
 800eac4:	0020      	movs	r0, r4
 800eac6:	bd70      	pop	{r4, r5, r6, pc}

0800eac8 <__sfp_lock_acquire>:
 800eac8:	b510      	push	{r4, lr}
 800eaca:	4802      	ldr	r0, [pc, #8]	; (800ead4 <__sfp_lock_acquire+0xc>)
 800eacc:	f000 f8e1 	bl	800ec92 <__retarget_lock_acquire_recursive>
 800ead0:	bd10      	pop	{r4, pc}
 800ead2:	46c0      	nop			; (mov r8, r8)
 800ead4:	200021b1 	.word	0x200021b1

0800ead8 <__sfp_lock_release>:
 800ead8:	b510      	push	{r4, lr}
 800eada:	4802      	ldr	r0, [pc, #8]	; (800eae4 <__sfp_lock_release+0xc>)
 800eadc:	f000 f8da 	bl	800ec94 <__retarget_lock_release_recursive>
 800eae0:	bd10      	pop	{r4, pc}
 800eae2:	46c0      	nop			; (mov r8, r8)
 800eae4:	200021b1 	.word	0x200021b1

0800eae8 <__sinit_lock_acquire>:
 800eae8:	b510      	push	{r4, lr}
 800eaea:	4802      	ldr	r0, [pc, #8]	; (800eaf4 <__sinit_lock_acquire+0xc>)
 800eaec:	f000 f8d1 	bl	800ec92 <__retarget_lock_acquire_recursive>
 800eaf0:	bd10      	pop	{r4, pc}
 800eaf2:	46c0      	nop			; (mov r8, r8)
 800eaf4:	200021b2 	.word	0x200021b2

0800eaf8 <__sinit_lock_release>:
 800eaf8:	b510      	push	{r4, lr}
 800eafa:	4802      	ldr	r0, [pc, #8]	; (800eb04 <__sinit_lock_release+0xc>)
 800eafc:	f000 f8ca 	bl	800ec94 <__retarget_lock_release_recursive>
 800eb00:	bd10      	pop	{r4, pc}
 800eb02:	46c0      	nop			; (mov r8, r8)
 800eb04:	200021b2 	.word	0x200021b2

0800eb08 <__sinit>:
 800eb08:	b513      	push	{r0, r1, r4, lr}
 800eb0a:	0004      	movs	r4, r0
 800eb0c:	f7ff ffec 	bl	800eae8 <__sinit_lock_acquire>
 800eb10:	69a3      	ldr	r3, [r4, #24]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d002      	beq.n	800eb1c <__sinit+0x14>
 800eb16:	f7ff ffef 	bl	800eaf8 <__sinit_lock_release>
 800eb1a:	bd13      	pop	{r0, r1, r4, pc}
 800eb1c:	64a3      	str	r3, [r4, #72]	; 0x48
 800eb1e:	64e3      	str	r3, [r4, #76]	; 0x4c
 800eb20:	6523      	str	r3, [r4, #80]	; 0x50
 800eb22:	4b13      	ldr	r3, [pc, #76]	; (800eb70 <__sinit+0x68>)
 800eb24:	4a13      	ldr	r2, [pc, #76]	; (800eb74 <__sinit+0x6c>)
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	62a2      	str	r2, [r4, #40]	; 0x28
 800eb2a:	9301      	str	r3, [sp, #4]
 800eb2c:	42a3      	cmp	r3, r4
 800eb2e:	d101      	bne.n	800eb34 <__sinit+0x2c>
 800eb30:	2301      	movs	r3, #1
 800eb32:	61a3      	str	r3, [r4, #24]
 800eb34:	0020      	movs	r0, r4
 800eb36:	f000 f81f 	bl	800eb78 <__sfp>
 800eb3a:	6060      	str	r0, [r4, #4]
 800eb3c:	0020      	movs	r0, r4
 800eb3e:	f000 f81b 	bl	800eb78 <__sfp>
 800eb42:	60a0      	str	r0, [r4, #8]
 800eb44:	0020      	movs	r0, r4
 800eb46:	f000 f817 	bl	800eb78 <__sfp>
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	2104      	movs	r1, #4
 800eb4e:	60e0      	str	r0, [r4, #12]
 800eb50:	6860      	ldr	r0, [r4, #4]
 800eb52:	f7ff ff77 	bl	800ea44 <std>
 800eb56:	2201      	movs	r2, #1
 800eb58:	2109      	movs	r1, #9
 800eb5a:	68a0      	ldr	r0, [r4, #8]
 800eb5c:	f7ff ff72 	bl	800ea44 <std>
 800eb60:	2202      	movs	r2, #2
 800eb62:	2112      	movs	r1, #18
 800eb64:	68e0      	ldr	r0, [r4, #12]
 800eb66:	f7ff ff6d 	bl	800ea44 <std>
 800eb6a:	2301      	movs	r3, #1
 800eb6c:	61a3      	str	r3, [r4, #24]
 800eb6e:	e7d2      	b.n	800eb16 <__sinit+0xe>
 800eb70:	08013a7c 	.word	0x08013a7c
 800eb74:	0800ea8d 	.word	0x0800ea8d

0800eb78 <__sfp>:
 800eb78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb7a:	0007      	movs	r7, r0
 800eb7c:	f7ff ffa4 	bl	800eac8 <__sfp_lock_acquire>
 800eb80:	4b1f      	ldr	r3, [pc, #124]	; (800ec00 <__sfp+0x88>)
 800eb82:	681e      	ldr	r6, [r3, #0]
 800eb84:	69b3      	ldr	r3, [r6, #24]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d102      	bne.n	800eb90 <__sfp+0x18>
 800eb8a:	0030      	movs	r0, r6
 800eb8c:	f7ff ffbc 	bl	800eb08 <__sinit>
 800eb90:	3648      	adds	r6, #72	; 0x48
 800eb92:	68b4      	ldr	r4, [r6, #8]
 800eb94:	6873      	ldr	r3, [r6, #4]
 800eb96:	3b01      	subs	r3, #1
 800eb98:	d504      	bpl.n	800eba4 <__sfp+0x2c>
 800eb9a:	6833      	ldr	r3, [r6, #0]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d022      	beq.n	800ebe6 <__sfp+0x6e>
 800eba0:	6836      	ldr	r6, [r6, #0]
 800eba2:	e7f6      	b.n	800eb92 <__sfp+0x1a>
 800eba4:	220c      	movs	r2, #12
 800eba6:	5ea5      	ldrsh	r5, [r4, r2]
 800eba8:	2d00      	cmp	r5, #0
 800ebaa:	d11a      	bne.n	800ebe2 <__sfp+0x6a>
 800ebac:	0020      	movs	r0, r4
 800ebae:	4b15      	ldr	r3, [pc, #84]	; (800ec04 <__sfp+0x8c>)
 800ebb0:	3058      	adds	r0, #88	; 0x58
 800ebb2:	60e3      	str	r3, [r4, #12]
 800ebb4:	6665      	str	r5, [r4, #100]	; 0x64
 800ebb6:	f000 f86b 	bl	800ec90 <__retarget_lock_init_recursive>
 800ebba:	f7ff ff8d 	bl	800ead8 <__sfp_lock_release>
 800ebbe:	0020      	movs	r0, r4
 800ebc0:	2208      	movs	r2, #8
 800ebc2:	0029      	movs	r1, r5
 800ebc4:	6025      	str	r5, [r4, #0]
 800ebc6:	60a5      	str	r5, [r4, #8]
 800ebc8:	6065      	str	r5, [r4, #4]
 800ebca:	6125      	str	r5, [r4, #16]
 800ebcc:	6165      	str	r5, [r4, #20]
 800ebce:	61a5      	str	r5, [r4, #24]
 800ebd0:	305c      	adds	r0, #92	; 0x5c
 800ebd2:	f000 f869 	bl	800eca8 <memset>
 800ebd6:	6365      	str	r5, [r4, #52]	; 0x34
 800ebd8:	63a5      	str	r5, [r4, #56]	; 0x38
 800ebda:	64a5      	str	r5, [r4, #72]	; 0x48
 800ebdc:	64e5      	str	r5, [r4, #76]	; 0x4c
 800ebde:	0020      	movs	r0, r4
 800ebe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebe2:	3468      	adds	r4, #104	; 0x68
 800ebe4:	e7d7      	b.n	800eb96 <__sfp+0x1e>
 800ebe6:	2104      	movs	r1, #4
 800ebe8:	0038      	movs	r0, r7
 800ebea:	f7ff ff57 	bl	800ea9c <__sfmoreglue>
 800ebee:	1e04      	subs	r4, r0, #0
 800ebf0:	6030      	str	r0, [r6, #0]
 800ebf2:	d1d5      	bne.n	800eba0 <__sfp+0x28>
 800ebf4:	f7ff ff70 	bl	800ead8 <__sfp_lock_release>
 800ebf8:	230c      	movs	r3, #12
 800ebfa:	603b      	str	r3, [r7, #0]
 800ebfc:	e7ef      	b.n	800ebde <__sfp+0x66>
 800ebfe:	46c0      	nop			; (mov r8, r8)
 800ec00:	08013a7c 	.word	0x08013a7c
 800ec04:	ffff0001 	.word	0xffff0001

0800ec08 <_fwalk_reent>:
 800ec08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ec0a:	0004      	movs	r4, r0
 800ec0c:	0006      	movs	r6, r0
 800ec0e:	2700      	movs	r7, #0
 800ec10:	9101      	str	r1, [sp, #4]
 800ec12:	3448      	adds	r4, #72	; 0x48
 800ec14:	6863      	ldr	r3, [r4, #4]
 800ec16:	68a5      	ldr	r5, [r4, #8]
 800ec18:	9300      	str	r3, [sp, #0]
 800ec1a:	9b00      	ldr	r3, [sp, #0]
 800ec1c:	3b01      	subs	r3, #1
 800ec1e:	9300      	str	r3, [sp, #0]
 800ec20:	d504      	bpl.n	800ec2c <_fwalk_reent+0x24>
 800ec22:	6824      	ldr	r4, [r4, #0]
 800ec24:	2c00      	cmp	r4, #0
 800ec26:	d1f5      	bne.n	800ec14 <_fwalk_reent+0xc>
 800ec28:	0038      	movs	r0, r7
 800ec2a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ec2c:	89ab      	ldrh	r3, [r5, #12]
 800ec2e:	2b01      	cmp	r3, #1
 800ec30:	d908      	bls.n	800ec44 <_fwalk_reent+0x3c>
 800ec32:	220e      	movs	r2, #14
 800ec34:	5eab      	ldrsh	r3, [r5, r2]
 800ec36:	3301      	adds	r3, #1
 800ec38:	d004      	beq.n	800ec44 <_fwalk_reent+0x3c>
 800ec3a:	0029      	movs	r1, r5
 800ec3c:	0030      	movs	r0, r6
 800ec3e:	9b01      	ldr	r3, [sp, #4]
 800ec40:	4798      	blx	r3
 800ec42:	4307      	orrs	r7, r0
 800ec44:	3568      	adds	r5, #104	; 0x68
 800ec46:	e7e8      	b.n	800ec1a <_fwalk_reent+0x12>

0800ec48 <__libc_init_array>:
 800ec48:	b570      	push	{r4, r5, r6, lr}
 800ec4a:	2600      	movs	r6, #0
 800ec4c:	4d0c      	ldr	r5, [pc, #48]	; (800ec80 <__libc_init_array+0x38>)
 800ec4e:	4c0d      	ldr	r4, [pc, #52]	; (800ec84 <__libc_init_array+0x3c>)
 800ec50:	1b64      	subs	r4, r4, r5
 800ec52:	10a4      	asrs	r4, r4, #2
 800ec54:	42a6      	cmp	r6, r4
 800ec56:	d109      	bne.n	800ec6c <__libc_init_array+0x24>
 800ec58:	2600      	movs	r6, #0
 800ec5a:	f004 f815 	bl	8012c88 <_init>
 800ec5e:	4d0a      	ldr	r5, [pc, #40]	; (800ec88 <__libc_init_array+0x40>)
 800ec60:	4c0a      	ldr	r4, [pc, #40]	; (800ec8c <__libc_init_array+0x44>)
 800ec62:	1b64      	subs	r4, r4, r5
 800ec64:	10a4      	asrs	r4, r4, #2
 800ec66:	42a6      	cmp	r6, r4
 800ec68:	d105      	bne.n	800ec76 <__libc_init_array+0x2e>
 800ec6a:	bd70      	pop	{r4, r5, r6, pc}
 800ec6c:	00b3      	lsls	r3, r6, #2
 800ec6e:	58eb      	ldr	r3, [r5, r3]
 800ec70:	4798      	blx	r3
 800ec72:	3601      	adds	r6, #1
 800ec74:	e7ee      	b.n	800ec54 <__libc_init_array+0xc>
 800ec76:	00b3      	lsls	r3, r6, #2
 800ec78:	58eb      	ldr	r3, [r5, r3]
 800ec7a:	4798      	blx	r3
 800ec7c:	3601      	adds	r6, #1
 800ec7e:	e7f2      	b.n	800ec66 <__libc_init_array+0x1e>
 800ec80:	08013fd8 	.word	0x08013fd8
 800ec84:	08013fd8 	.word	0x08013fd8
 800ec88:	08013fd8 	.word	0x08013fd8
 800ec8c:	08013fdc 	.word	0x08013fdc

0800ec90 <__retarget_lock_init_recursive>:
 800ec90:	4770      	bx	lr

0800ec92 <__retarget_lock_acquire_recursive>:
 800ec92:	4770      	bx	lr

0800ec94 <__retarget_lock_release_recursive>:
 800ec94:	4770      	bx	lr

0800ec96 <memcpy>:
 800ec96:	2300      	movs	r3, #0
 800ec98:	b510      	push	{r4, lr}
 800ec9a:	429a      	cmp	r2, r3
 800ec9c:	d100      	bne.n	800eca0 <memcpy+0xa>
 800ec9e:	bd10      	pop	{r4, pc}
 800eca0:	5ccc      	ldrb	r4, [r1, r3]
 800eca2:	54c4      	strb	r4, [r0, r3]
 800eca4:	3301      	adds	r3, #1
 800eca6:	e7f8      	b.n	800ec9a <memcpy+0x4>

0800eca8 <memset>:
 800eca8:	0003      	movs	r3, r0
 800ecaa:	1882      	adds	r2, r0, r2
 800ecac:	4293      	cmp	r3, r2
 800ecae:	d100      	bne.n	800ecb2 <memset+0xa>
 800ecb0:	4770      	bx	lr
 800ecb2:	7019      	strb	r1, [r3, #0]
 800ecb4:	3301      	adds	r3, #1
 800ecb6:	e7f9      	b.n	800ecac <memset+0x4>

0800ecb8 <sbrk_aligned>:
 800ecb8:	b570      	push	{r4, r5, r6, lr}
 800ecba:	4e0f      	ldr	r6, [pc, #60]	; (800ecf8 <sbrk_aligned+0x40>)
 800ecbc:	000d      	movs	r5, r1
 800ecbe:	6831      	ldr	r1, [r6, #0]
 800ecc0:	0004      	movs	r4, r0
 800ecc2:	2900      	cmp	r1, #0
 800ecc4:	d102      	bne.n	800eccc <sbrk_aligned+0x14>
 800ecc6:	f000 fd71 	bl	800f7ac <_sbrk_r>
 800ecca:	6030      	str	r0, [r6, #0]
 800eccc:	0029      	movs	r1, r5
 800ecce:	0020      	movs	r0, r4
 800ecd0:	f000 fd6c 	bl	800f7ac <_sbrk_r>
 800ecd4:	1c43      	adds	r3, r0, #1
 800ecd6:	d00a      	beq.n	800ecee <sbrk_aligned+0x36>
 800ecd8:	2303      	movs	r3, #3
 800ecda:	1cc5      	adds	r5, r0, #3
 800ecdc:	439d      	bics	r5, r3
 800ecde:	42a8      	cmp	r0, r5
 800ece0:	d007      	beq.n	800ecf2 <sbrk_aligned+0x3a>
 800ece2:	1a29      	subs	r1, r5, r0
 800ece4:	0020      	movs	r0, r4
 800ece6:	f000 fd61 	bl	800f7ac <_sbrk_r>
 800ecea:	1c43      	adds	r3, r0, #1
 800ecec:	d101      	bne.n	800ecf2 <sbrk_aligned+0x3a>
 800ecee:	2501      	movs	r5, #1
 800ecf0:	426d      	negs	r5, r5
 800ecf2:	0028      	movs	r0, r5
 800ecf4:	bd70      	pop	{r4, r5, r6, pc}
 800ecf6:	46c0      	nop			; (mov r8, r8)
 800ecf8:	200021b8 	.word	0x200021b8

0800ecfc <_malloc_r>:
 800ecfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ecfe:	2203      	movs	r2, #3
 800ed00:	1ccb      	adds	r3, r1, #3
 800ed02:	4393      	bics	r3, r2
 800ed04:	3308      	adds	r3, #8
 800ed06:	0006      	movs	r6, r0
 800ed08:	001f      	movs	r7, r3
 800ed0a:	2b0c      	cmp	r3, #12
 800ed0c:	d232      	bcs.n	800ed74 <_malloc_r+0x78>
 800ed0e:	270c      	movs	r7, #12
 800ed10:	42b9      	cmp	r1, r7
 800ed12:	d831      	bhi.n	800ed78 <_malloc_r+0x7c>
 800ed14:	0030      	movs	r0, r6
 800ed16:	f001 fe27 	bl	8010968 <__malloc_lock>
 800ed1a:	4d32      	ldr	r5, [pc, #200]	; (800ede4 <_malloc_r+0xe8>)
 800ed1c:	682b      	ldr	r3, [r5, #0]
 800ed1e:	001c      	movs	r4, r3
 800ed20:	2c00      	cmp	r4, #0
 800ed22:	d12e      	bne.n	800ed82 <_malloc_r+0x86>
 800ed24:	0039      	movs	r1, r7
 800ed26:	0030      	movs	r0, r6
 800ed28:	f7ff ffc6 	bl	800ecb8 <sbrk_aligned>
 800ed2c:	0004      	movs	r4, r0
 800ed2e:	1c43      	adds	r3, r0, #1
 800ed30:	d11e      	bne.n	800ed70 <_malloc_r+0x74>
 800ed32:	682c      	ldr	r4, [r5, #0]
 800ed34:	0025      	movs	r5, r4
 800ed36:	2d00      	cmp	r5, #0
 800ed38:	d14a      	bne.n	800edd0 <_malloc_r+0xd4>
 800ed3a:	6823      	ldr	r3, [r4, #0]
 800ed3c:	0029      	movs	r1, r5
 800ed3e:	18e3      	adds	r3, r4, r3
 800ed40:	0030      	movs	r0, r6
 800ed42:	9301      	str	r3, [sp, #4]
 800ed44:	f000 fd32 	bl	800f7ac <_sbrk_r>
 800ed48:	9b01      	ldr	r3, [sp, #4]
 800ed4a:	4283      	cmp	r3, r0
 800ed4c:	d143      	bne.n	800edd6 <_malloc_r+0xda>
 800ed4e:	6823      	ldr	r3, [r4, #0]
 800ed50:	3703      	adds	r7, #3
 800ed52:	1aff      	subs	r7, r7, r3
 800ed54:	2303      	movs	r3, #3
 800ed56:	439f      	bics	r7, r3
 800ed58:	3708      	adds	r7, #8
 800ed5a:	2f0c      	cmp	r7, #12
 800ed5c:	d200      	bcs.n	800ed60 <_malloc_r+0x64>
 800ed5e:	270c      	movs	r7, #12
 800ed60:	0039      	movs	r1, r7
 800ed62:	0030      	movs	r0, r6
 800ed64:	f7ff ffa8 	bl	800ecb8 <sbrk_aligned>
 800ed68:	1c43      	adds	r3, r0, #1
 800ed6a:	d034      	beq.n	800edd6 <_malloc_r+0xda>
 800ed6c:	6823      	ldr	r3, [r4, #0]
 800ed6e:	19df      	adds	r7, r3, r7
 800ed70:	6027      	str	r7, [r4, #0]
 800ed72:	e013      	b.n	800ed9c <_malloc_r+0xa0>
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	dacb      	bge.n	800ed10 <_malloc_r+0x14>
 800ed78:	230c      	movs	r3, #12
 800ed7a:	2500      	movs	r5, #0
 800ed7c:	6033      	str	r3, [r6, #0]
 800ed7e:	0028      	movs	r0, r5
 800ed80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ed82:	6822      	ldr	r2, [r4, #0]
 800ed84:	1bd1      	subs	r1, r2, r7
 800ed86:	d420      	bmi.n	800edca <_malloc_r+0xce>
 800ed88:	290b      	cmp	r1, #11
 800ed8a:	d917      	bls.n	800edbc <_malloc_r+0xc0>
 800ed8c:	19e2      	adds	r2, r4, r7
 800ed8e:	6027      	str	r7, [r4, #0]
 800ed90:	42a3      	cmp	r3, r4
 800ed92:	d111      	bne.n	800edb8 <_malloc_r+0xbc>
 800ed94:	602a      	str	r2, [r5, #0]
 800ed96:	6863      	ldr	r3, [r4, #4]
 800ed98:	6011      	str	r1, [r2, #0]
 800ed9a:	6053      	str	r3, [r2, #4]
 800ed9c:	0030      	movs	r0, r6
 800ed9e:	0025      	movs	r5, r4
 800eda0:	f001 fdea 	bl	8010978 <__malloc_unlock>
 800eda4:	2207      	movs	r2, #7
 800eda6:	350b      	adds	r5, #11
 800eda8:	1d23      	adds	r3, r4, #4
 800edaa:	4395      	bics	r5, r2
 800edac:	1aea      	subs	r2, r5, r3
 800edae:	429d      	cmp	r5, r3
 800edb0:	d0e5      	beq.n	800ed7e <_malloc_r+0x82>
 800edb2:	1b5b      	subs	r3, r3, r5
 800edb4:	50a3      	str	r3, [r4, r2]
 800edb6:	e7e2      	b.n	800ed7e <_malloc_r+0x82>
 800edb8:	605a      	str	r2, [r3, #4]
 800edba:	e7ec      	b.n	800ed96 <_malloc_r+0x9a>
 800edbc:	6862      	ldr	r2, [r4, #4]
 800edbe:	42a3      	cmp	r3, r4
 800edc0:	d101      	bne.n	800edc6 <_malloc_r+0xca>
 800edc2:	602a      	str	r2, [r5, #0]
 800edc4:	e7ea      	b.n	800ed9c <_malloc_r+0xa0>
 800edc6:	605a      	str	r2, [r3, #4]
 800edc8:	e7e8      	b.n	800ed9c <_malloc_r+0xa0>
 800edca:	0023      	movs	r3, r4
 800edcc:	6864      	ldr	r4, [r4, #4]
 800edce:	e7a7      	b.n	800ed20 <_malloc_r+0x24>
 800edd0:	002c      	movs	r4, r5
 800edd2:	686d      	ldr	r5, [r5, #4]
 800edd4:	e7af      	b.n	800ed36 <_malloc_r+0x3a>
 800edd6:	230c      	movs	r3, #12
 800edd8:	0030      	movs	r0, r6
 800edda:	6033      	str	r3, [r6, #0]
 800eddc:	f001 fdcc 	bl	8010978 <__malloc_unlock>
 800ede0:	e7cd      	b.n	800ed7e <_malloc_r+0x82>
 800ede2:	46c0      	nop			; (mov r8, r8)
 800ede4:	200021b4 	.word	0x200021b4

0800ede8 <__cvt>:
 800ede8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800edea:	001e      	movs	r6, r3
 800edec:	2300      	movs	r3, #0
 800edee:	0014      	movs	r4, r2
 800edf0:	b08b      	sub	sp, #44	; 0x2c
 800edf2:	429e      	cmp	r6, r3
 800edf4:	da04      	bge.n	800ee00 <__cvt+0x18>
 800edf6:	2180      	movs	r1, #128	; 0x80
 800edf8:	0609      	lsls	r1, r1, #24
 800edfa:	1873      	adds	r3, r6, r1
 800edfc:	001e      	movs	r6, r3
 800edfe:	232d      	movs	r3, #45	; 0x2d
 800ee00:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ee02:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800ee04:	7013      	strb	r3, [r2, #0]
 800ee06:	2320      	movs	r3, #32
 800ee08:	2203      	movs	r2, #3
 800ee0a:	439f      	bics	r7, r3
 800ee0c:	2f46      	cmp	r7, #70	; 0x46
 800ee0e:	d007      	beq.n	800ee20 <__cvt+0x38>
 800ee10:	003b      	movs	r3, r7
 800ee12:	3b45      	subs	r3, #69	; 0x45
 800ee14:	4259      	negs	r1, r3
 800ee16:	414b      	adcs	r3, r1
 800ee18:	9910      	ldr	r1, [sp, #64]	; 0x40
 800ee1a:	3a01      	subs	r2, #1
 800ee1c:	18cb      	adds	r3, r1, r3
 800ee1e:	9310      	str	r3, [sp, #64]	; 0x40
 800ee20:	ab09      	add	r3, sp, #36	; 0x24
 800ee22:	9304      	str	r3, [sp, #16]
 800ee24:	ab08      	add	r3, sp, #32
 800ee26:	9303      	str	r3, [sp, #12]
 800ee28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ee2a:	9200      	str	r2, [sp, #0]
 800ee2c:	9302      	str	r3, [sp, #8]
 800ee2e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ee30:	0022      	movs	r2, r4
 800ee32:	9301      	str	r3, [sp, #4]
 800ee34:	0033      	movs	r3, r6
 800ee36:	f000 fe83 	bl	800fb40 <_dtoa_r>
 800ee3a:	0005      	movs	r5, r0
 800ee3c:	2f47      	cmp	r7, #71	; 0x47
 800ee3e:	d102      	bne.n	800ee46 <__cvt+0x5e>
 800ee40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ee42:	07db      	lsls	r3, r3, #31
 800ee44:	d528      	bpl.n	800ee98 <__cvt+0xb0>
 800ee46:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ee48:	18eb      	adds	r3, r5, r3
 800ee4a:	9307      	str	r3, [sp, #28]
 800ee4c:	2f46      	cmp	r7, #70	; 0x46
 800ee4e:	d114      	bne.n	800ee7a <__cvt+0x92>
 800ee50:	782b      	ldrb	r3, [r5, #0]
 800ee52:	2b30      	cmp	r3, #48	; 0x30
 800ee54:	d10c      	bne.n	800ee70 <__cvt+0x88>
 800ee56:	2200      	movs	r2, #0
 800ee58:	2300      	movs	r3, #0
 800ee5a:	0020      	movs	r0, r4
 800ee5c:	0031      	movs	r1, r6
 800ee5e:	f7f1 faf5 	bl	800044c <__aeabi_dcmpeq>
 800ee62:	2800      	cmp	r0, #0
 800ee64:	d104      	bne.n	800ee70 <__cvt+0x88>
 800ee66:	2301      	movs	r3, #1
 800ee68:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ee6a:	1a9b      	subs	r3, r3, r2
 800ee6c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ee6e:	6013      	str	r3, [r2, #0]
 800ee70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ee72:	9a07      	ldr	r2, [sp, #28]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	18d3      	adds	r3, r2, r3
 800ee78:	9307      	str	r3, [sp, #28]
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	2300      	movs	r3, #0
 800ee7e:	0020      	movs	r0, r4
 800ee80:	0031      	movs	r1, r6
 800ee82:	f7f1 fae3 	bl	800044c <__aeabi_dcmpeq>
 800ee86:	2800      	cmp	r0, #0
 800ee88:	d001      	beq.n	800ee8e <__cvt+0xa6>
 800ee8a:	9b07      	ldr	r3, [sp, #28]
 800ee8c:	9309      	str	r3, [sp, #36]	; 0x24
 800ee8e:	2230      	movs	r2, #48	; 0x30
 800ee90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee92:	9907      	ldr	r1, [sp, #28]
 800ee94:	428b      	cmp	r3, r1
 800ee96:	d306      	bcc.n	800eea6 <__cvt+0xbe>
 800ee98:	0028      	movs	r0, r5
 800ee9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee9c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ee9e:	1b5b      	subs	r3, r3, r5
 800eea0:	6013      	str	r3, [r2, #0]
 800eea2:	b00b      	add	sp, #44	; 0x2c
 800eea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eea6:	1c59      	adds	r1, r3, #1
 800eea8:	9109      	str	r1, [sp, #36]	; 0x24
 800eeaa:	701a      	strb	r2, [r3, #0]
 800eeac:	e7f0      	b.n	800ee90 <__cvt+0xa8>

0800eeae <__exponent>:
 800eeae:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eeb0:	1c83      	adds	r3, r0, #2
 800eeb2:	b087      	sub	sp, #28
 800eeb4:	9303      	str	r3, [sp, #12]
 800eeb6:	0005      	movs	r5, r0
 800eeb8:	000c      	movs	r4, r1
 800eeba:	232b      	movs	r3, #43	; 0x2b
 800eebc:	7002      	strb	r2, [r0, #0]
 800eebe:	2900      	cmp	r1, #0
 800eec0:	da01      	bge.n	800eec6 <__exponent+0x18>
 800eec2:	424c      	negs	r4, r1
 800eec4:	3302      	adds	r3, #2
 800eec6:	706b      	strb	r3, [r5, #1]
 800eec8:	2c09      	cmp	r4, #9
 800eeca:	dd31      	ble.n	800ef30 <__exponent+0x82>
 800eecc:	270a      	movs	r7, #10
 800eece:	ab04      	add	r3, sp, #16
 800eed0:	1dde      	adds	r6, r3, #7
 800eed2:	0020      	movs	r0, r4
 800eed4:	0039      	movs	r1, r7
 800eed6:	9601      	str	r6, [sp, #4]
 800eed8:	f7f1 faa2 	bl	8000420 <__aeabi_idivmod>
 800eedc:	3e01      	subs	r6, #1
 800eede:	3130      	adds	r1, #48	; 0x30
 800eee0:	0020      	movs	r0, r4
 800eee2:	7031      	strb	r1, [r6, #0]
 800eee4:	0039      	movs	r1, r7
 800eee6:	9402      	str	r4, [sp, #8]
 800eee8:	f7f1 f9b4 	bl	8000254 <__divsi3>
 800eeec:	9b02      	ldr	r3, [sp, #8]
 800eeee:	0004      	movs	r4, r0
 800eef0:	2b63      	cmp	r3, #99	; 0x63
 800eef2:	dcee      	bgt.n	800eed2 <__exponent+0x24>
 800eef4:	9b01      	ldr	r3, [sp, #4]
 800eef6:	3430      	adds	r4, #48	; 0x30
 800eef8:	1e9a      	subs	r2, r3, #2
 800eefa:	0013      	movs	r3, r2
 800eefc:	9903      	ldr	r1, [sp, #12]
 800eefe:	7014      	strb	r4, [r2, #0]
 800ef00:	a804      	add	r0, sp, #16
 800ef02:	3007      	adds	r0, #7
 800ef04:	4298      	cmp	r0, r3
 800ef06:	d80e      	bhi.n	800ef26 <__exponent+0x78>
 800ef08:	ab04      	add	r3, sp, #16
 800ef0a:	3307      	adds	r3, #7
 800ef0c:	2000      	movs	r0, #0
 800ef0e:	429a      	cmp	r2, r3
 800ef10:	d804      	bhi.n	800ef1c <__exponent+0x6e>
 800ef12:	ab04      	add	r3, sp, #16
 800ef14:	3009      	adds	r0, #9
 800ef16:	18c0      	adds	r0, r0, r3
 800ef18:	9b01      	ldr	r3, [sp, #4]
 800ef1a:	1ac0      	subs	r0, r0, r3
 800ef1c:	9b03      	ldr	r3, [sp, #12]
 800ef1e:	1818      	adds	r0, r3, r0
 800ef20:	1b40      	subs	r0, r0, r5
 800ef22:	b007      	add	sp, #28
 800ef24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef26:	7818      	ldrb	r0, [r3, #0]
 800ef28:	3301      	adds	r3, #1
 800ef2a:	7008      	strb	r0, [r1, #0]
 800ef2c:	3101      	adds	r1, #1
 800ef2e:	e7e7      	b.n	800ef00 <__exponent+0x52>
 800ef30:	2330      	movs	r3, #48	; 0x30
 800ef32:	18e4      	adds	r4, r4, r3
 800ef34:	70ab      	strb	r3, [r5, #2]
 800ef36:	1d28      	adds	r0, r5, #4
 800ef38:	70ec      	strb	r4, [r5, #3]
 800ef3a:	e7f1      	b.n	800ef20 <__exponent+0x72>

0800ef3c <_printf_float>:
 800ef3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef3e:	b095      	sub	sp, #84	; 0x54
 800ef40:	000c      	movs	r4, r1
 800ef42:	9209      	str	r2, [sp, #36]	; 0x24
 800ef44:	001e      	movs	r6, r3
 800ef46:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800ef48:	0007      	movs	r7, r0
 800ef4a:	f001 fcdf 	bl	801090c <_localeconv_r>
 800ef4e:	6803      	ldr	r3, [r0, #0]
 800ef50:	0018      	movs	r0, r3
 800ef52:	930c      	str	r3, [sp, #48]	; 0x30
 800ef54:	f7f1 f8d8 	bl	8000108 <strlen>
 800ef58:	2300      	movs	r3, #0
 800ef5a:	9312      	str	r3, [sp, #72]	; 0x48
 800ef5c:	7e23      	ldrb	r3, [r4, #24]
 800ef5e:	2207      	movs	r2, #7
 800ef60:	930a      	str	r3, [sp, #40]	; 0x28
 800ef62:	6823      	ldr	r3, [r4, #0]
 800ef64:	900e      	str	r0, [sp, #56]	; 0x38
 800ef66:	930d      	str	r3, [sp, #52]	; 0x34
 800ef68:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ef6a:	682b      	ldr	r3, [r5, #0]
 800ef6c:	05c9      	lsls	r1, r1, #23
 800ef6e:	d547      	bpl.n	800f000 <_printf_float+0xc4>
 800ef70:	189b      	adds	r3, r3, r2
 800ef72:	4393      	bics	r3, r2
 800ef74:	001a      	movs	r2, r3
 800ef76:	3208      	adds	r2, #8
 800ef78:	602a      	str	r2, [r5, #0]
 800ef7a:	681a      	ldr	r2, [r3, #0]
 800ef7c:	685b      	ldr	r3, [r3, #4]
 800ef7e:	64a2      	str	r2, [r4, #72]	; 0x48
 800ef80:	64e3      	str	r3, [r4, #76]	; 0x4c
 800ef82:	2201      	movs	r2, #1
 800ef84:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ef86:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800ef88:	930b      	str	r3, [sp, #44]	; 0x2c
 800ef8a:	006b      	lsls	r3, r5, #1
 800ef8c:	085b      	lsrs	r3, r3, #1
 800ef8e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ef90:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ef92:	4ba7      	ldr	r3, [pc, #668]	; (800f230 <_printf_float+0x2f4>)
 800ef94:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ef96:	4252      	negs	r2, r2
 800ef98:	f7f3 fc34 	bl	8002804 <__aeabi_dcmpun>
 800ef9c:	2800      	cmp	r0, #0
 800ef9e:	d131      	bne.n	800f004 <_printf_float+0xc8>
 800efa0:	2201      	movs	r2, #1
 800efa2:	4ba3      	ldr	r3, [pc, #652]	; (800f230 <_printf_float+0x2f4>)
 800efa4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800efa6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800efa8:	4252      	negs	r2, r2
 800efaa:	f7f1 fa5f 	bl	800046c <__aeabi_dcmple>
 800efae:	2800      	cmp	r0, #0
 800efb0:	d128      	bne.n	800f004 <_printf_float+0xc8>
 800efb2:	2200      	movs	r2, #0
 800efb4:	2300      	movs	r3, #0
 800efb6:	0029      	movs	r1, r5
 800efb8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800efba:	f7f1 fa4d 	bl	8000458 <__aeabi_dcmplt>
 800efbe:	2800      	cmp	r0, #0
 800efc0:	d003      	beq.n	800efca <_printf_float+0x8e>
 800efc2:	0023      	movs	r3, r4
 800efc4:	222d      	movs	r2, #45	; 0x2d
 800efc6:	3343      	adds	r3, #67	; 0x43
 800efc8:	701a      	strb	r2, [r3, #0]
 800efca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800efcc:	4d99      	ldr	r5, [pc, #612]	; (800f234 <_printf_float+0x2f8>)
 800efce:	2b47      	cmp	r3, #71	; 0x47
 800efd0:	d900      	bls.n	800efd4 <_printf_float+0x98>
 800efd2:	4d99      	ldr	r5, [pc, #612]	; (800f238 <_printf_float+0x2fc>)
 800efd4:	2303      	movs	r3, #3
 800efd6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800efd8:	6123      	str	r3, [r4, #16]
 800efda:	3301      	adds	r3, #1
 800efdc:	439a      	bics	r2, r3
 800efde:	2300      	movs	r3, #0
 800efe0:	6022      	str	r2, [r4, #0]
 800efe2:	930b      	str	r3, [sp, #44]	; 0x2c
 800efe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efe6:	0021      	movs	r1, r4
 800efe8:	0038      	movs	r0, r7
 800efea:	9600      	str	r6, [sp, #0]
 800efec:	aa13      	add	r2, sp, #76	; 0x4c
 800efee:	f000 f9e7 	bl	800f3c0 <_printf_common>
 800eff2:	1c43      	adds	r3, r0, #1
 800eff4:	d000      	beq.n	800eff8 <_printf_float+0xbc>
 800eff6:	e0a2      	b.n	800f13e <_printf_float+0x202>
 800eff8:	2001      	movs	r0, #1
 800effa:	4240      	negs	r0, r0
 800effc:	b015      	add	sp, #84	; 0x54
 800effe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f000:	3307      	adds	r3, #7
 800f002:	e7b6      	b.n	800ef72 <_printf_float+0x36>
 800f004:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f006:	002b      	movs	r3, r5
 800f008:	0010      	movs	r0, r2
 800f00a:	0029      	movs	r1, r5
 800f00c:	f7f3 fbfa 	bl	8002804 <__aeabi_dcmpun>
 800f010:	2800      	cmp	r0, #0
 800f012:	d00b      	beq.n	800f02c <_printf_float+0xf0>
 800f014:	2d00      	cmp	r5, #0
 800f016:	da03      	bge.n	800f020 <_printf_float+0xe4>
 800f018:	0023      	movs	r3, r4
 800f01a:	222d      	movs	r2, #45	; 0x2d
 800f01c:	3343      	adds	r3, #67	; 0x43
 800f01e:	701a      	strb	r2, [r3, #0]
 800f020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f022:	4d86      	ldr	r5, [pc, #536]	; (800f23c <_printf_float+0x300>)
 800f024:	2b47      	cmp	r3, #71	; 0x47
 800f026:	d9d5      	bls.n	800efd4 <_printf_float+0x98>
 800f028:	4d85      	ldr	r5, [pc, #532]	; (800f240 <_printf_float+0x304>)
 800f02a:	e7d3      	b.n	800efd4 <_printf_float+0x98>
 800f02c:	2220      	movs	r2, #32
 800f02e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f030:	6863      	ldr	r3, [r4, #4]
 800f032:	4391      	bics	r1, r2
 800f034:	910f      	str	r1, [sp, #60]	; 0x3c
 800f036:	1c5a      	adds	r2, r3, #1
 800f038:	d149      	bne.n	800f0ce <_printf_float+0x192>
 800f03a:	3307      	adds	r3, #7
 800f03c:	6063      	str	r3, [r4, #4]
 800f03e:	2380      	movs	r3, #128	; 0x80
 800f040:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f042:	00db      	lsls	r3, r3, #3
 800f044:	4313      	orrs	r3, r2
 800f046:	2200      	movs	r2, #0
 800f048:	9206      	str	r2, [sp, #24]
 800f04a:	aa12      	add	r2, sp, #72	; 0x48
 800f04c:	9205      	str	r2, [sp, #20]
 800f04e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f050:	a908      	add	r1, sp, #32
 800f052:	9204      	str	r2, [sp, #16]
 800f054:	aa11      	add	r2, sp, #68	; 0x44
 800f056:	9203      	str	r2, [sp, #12]
 800f058:	2223      	movs	r2, #35	; 0x23
 800f05a:	6023      	str	r3, [r4, #0]
 800f05c:	9301      	str	r3, [sp, #4]
 800f05e:	6863      	ldr	r3, [r4, #4]
 800f060:	1852      	adds	r2, r2, r1
 800f062:	9202      	str	r2, [sp, #8]
 800f064:	9300      	str	r3, [sp, #0]
 800f066:	0038      	movs	r0, r7
 800f068:	002b      	movs	r3, r5
 800f06a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f06c:	f7ff febc 	bl	800ede8 <__cvt>
 800f070:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f072:	0005      	movs	r5, r0
 800f074:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f076:	2b47      	cmp	r3, #71	; 0x47
 800f078:	d108      	bne.n	800f08c <_printf_float+0x150>
 800f07a:	1ccb      	adds	r3, r1, #3
 800f07c:	db02      	blt.n	800f084 <_printf_float+0x148>
 800f07e:	6863      	ldr	r3, [r4, #4]
 800f080:	4299      	cmp	r1, r3
 800f082:	dd48      	ble.n	800f116 <_printf_float+0x1da>
 800f084:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f086:	3b02      	subs	r3, #2
 800f088:	b2db      	uxtb	r3, r3
 800f08a:	930a      	str	r3, [sp, #40]	; 0x28
 800f08c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f08e:	2b65      	cmp	r3, #101	; 0x65
 800f090:	d824      	bhi.n	800f0dc <_printf_float+0x1a0>
 800f092:	0020      	movs	r0, r4
 800f094:	001a      	movs	r2, r3
 800f096:	3901      	subs	r1, #1
 800f098:	3050      	adds	r0, #80	; 0x50
 800f09a:	9111      	str	r1, [sp, #68]	; 0x44
 800f09c:	f7ff ff07 	bl	800eeae <__exponent>
 800f0a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f0a2:	900b      	str	r0, [sp, #44]	; 0x2c
 800f0a4:	1813      	adds	r3, r2, r0
 800f0a6:	6123      	str	r3, [r4, #16]
 800f0a8:	2a01      	cmp	r2, #1
 800f0aa:	dc02      	bgt.n	800f0b2 <_printf_float+0x176>
 800f0ac:	6822      	ldr	r2, [r4, #0]
 800f0ae:	07d2      	lsls	r2, r2, #31
 800f0b0:	d501      	bpl.n	800f0b6 <_printf_float+0x17a>
 800f0b2:	3301      	adds	r3, #1
 800f0b4:	6123      	str	r3, [r4, #16]
 800f0b6:	2323      	movs	r3, #35	; 0x23
 800f0b8:	aa08      	add	r2, sp, #32
 800f0ba:	189b      	adds	r3, r3, r2
 800f0bc:	781b      	ldrb	r3, [r3, #0]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d100      	bne.n	800f0c4 <_printf_float+0x188>
 800f0c2:	e78f      	b.n	800efe4 <_printf_float+0xa8>
 800f0c4:	0023      	movs	r3, r4
 800f0c6:	222d      	movs	r2, #45	; 0x2d
 800f0c8:	3343      	adds	r3, #67	; 0x43
 800f0ca:	701a      	strb	r2, [r3, #0]
 800f0cc:	e78a      	b.n	800efe4 <_printf_float+0xa8>
 800f0ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f0d0:	2a47      	cmp	r2, #71	; 0x47
 800f0d2:	d1b4      	bne.n	800f03e <_printf_float+0x102>
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d1b2      	bne.n	800f03e <_printf_float+0x102>
 800f0d8:	3301      	adds	r3, #1
 800f0da:	e7af      	b.n	800f03c <_printf_float+0x100>
 800f0dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f0de:	2b66      	cmp	r3, #102	; 0x66
 800f0e0:	d11b      	bne.n	800f11a <_printf_float+0x1de>
 800f0e2:	6863      	ldr	r3, [r4, #4]
 800f0e4:	2900      	cmp	r1, #0
 800f0e6:	dd0d      	ble.n	800f104 <_printf_float+0x1c8>
 800f0e8:	6121      	str	r1, [r4, #16]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d102      	bne.n	800f0f4 <_printf_float+0x1b8>
 800f0ee:	6822      	ldr	r2, [r4, #0]
 800f0f0:	07d2      	lsls	r2, r2, #31
 800f0f2:	d502      	bpl.n	800f0fa <_printf_float+0x1be>
 800f0f4:	3301      	adds	r3, #1
 800f0f6:	1859      	adds	r1, r3, r1
 800f0f8:	6121      	str	r1, [r4, #16]
 800f0fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f0fc:	65a3      	str	r3, [r4, #88]	; 0x58
 800f0fe:	2300      	movs	r3, #0
 800f100:	930b      	str	r3, [sp, #44]	; 0x2c
 800f102:	e7d8      	b.n	800f0b6 <_printf_float+0x17a>
 800f104:	2b00      	cmp	r3, #0
 800f106:	d103      	bne.n	800f110 <_printf_float+0x1d4>
 800f108:	2201      	movs	r2, #1
 800f10a:	6821      	ldr	r1, [r4, #0]
 800f10c:	4211      	tst	r1, r2
 800f10e:	d000      	beq.n	800f112 <_printf_float+0x1d6>
 800f110:	1c9a      	adds	r2, r3, #2
 800f112:	6122      	str	r2, [r4, #16]
 800f114:	e7f1      	b.n	800f0fa <_printf_float+0x1be>
 800f116:	2367      	movs	r3, #103	; 0x67
 800f118:	930a      	str	r3, [sp, #40]	; 0x28
 800f11a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f11c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f11e:	4293      	cmp	r3, r2
 800f120:	db06      	blt.n	800f130 <_printf_float+0x1f4>
 800f122:	6822      	ldr	r2, [r4, #0]
 800f124:	6123      	str	r3, [r4, #16]
 800f126:	07d2      	lsls	r2, r2, #31
 800f128:	d5e7      	bpl.n	800f0fa <_printf_float+0x1be>
 800f12a:	3301      	adds	r3, #1
 800f12c:	6123      	str	r3, [r4, #16]
 800f12e:	e7e4      	b.n	800f0fa <_printf_float+0x1be>
 800f130:	2101      	movs	r1, #1
 800f132:	2b00      	cmp	r3, #0
 800f134:	dc01      	bgt.n	800f13a <_printf_float+0x1fe>
 800f136:	1849      	adds	r1, r1, r1
 800f138:	1ac9      	subs	r1, r1, r3
 800f13a:	1852      	adds	r2, r2, r1
 800f13c:	e7e9      	b.n	800f112 <_printf_float+0x1d6>
 800f13e:	6822      	ldr	r2, [r4, #0]
 800f140:	0553      	lsls	r3, r2, #21
 800f142:	d407      	bmi.n	800f154 <_printf_float+0x218>
 800f144:	6923      	ldr	r3, [r4, #16]
 800f146:	002a      	movs	r2, r5
 800f148:	0038      	movs	r0, r7
 800f14a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f14c:	47b0      	blx	r6
 800f14e:	1c43      	adds	r3, r0, #1
 800f150:	d128      	bne.n	800f1a4 <_printf_float+0x268>
 800f152:	e751      	b.n	800eff8 <_printf_float+0xbc>
 800f154:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f156:	2b65      	cmp	r3, #101	; 0x65
 800f158:	d800      	bhi.n	800f15c <_printf_float+0x220>
 800f15a:	e0e1      	b.n	800f320 <_printf_float+0x3e4>
 800f15c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800f15e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800f160:	2200      	movs	r2, #0
 800f162:	2300      	movs	r3, #0
 800f164:	f7f1 f972 	bl	800044c <__aeabi_dcmpeq>
 800f168:	2800      	cmp	r0, #0
 800f16a:	d031      	beq.n	800f1d0 <_printf_float+0x294>
 800f16c:	2301      	movs	r3, #1
 800f16e:	0038      	movs	r0, r7
 800f170:	4a34      	ldr	r2, [pc, #208]	; (800f244 <_printf_float+0x308>)
 800f172:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f174:	47b0      	blx	r6
 800f176:	1c43      	adds	r3, r0, #1
 800f178:	d100      	bne.n	800f17c <_printf_float+0x240>
 800f17a:	e73d      	b.n	800eff8 <_printf_float+0xbc>
 800f17c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f17e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f180:	4293      	cmp	r3, r2
 800f182:	db02      	blt.n	800f18a <_printf_float+0x24e>
 800f184:	6823      	ldr	r3, [r4, #0]
 800f186:	07db      	lsls	r3, r3, #31
 800f188:	d50c      	bpl.n	800f1a4 <_printf_float+0x268>
 800f18a:	0038      	movs	r0, r7
 800f18c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f18e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f190:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f192:	47b0      	blx	r6
 800f194:	2500      	movs	r5, #0
 800f196:	1c43      	adds	r3, r0, #1
 800f198:	d100      	bne.n	800f19c <_printf_float+0x260>
 800f19a:	e72d      	b.n	800eff8 <_printf_float+0xbc>
 800f19c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f19e:	3b01      	subs	r3, #1
 800f1a0:	42ab      	cmp	r3, r5
 800f1a2:	dc0a      	bgt.n	800f1ba <_printf_float+0x27e>
 800f1a4:	6823      	ldr	r3, [r4, #0]
 800f1a6:	079b      	lsls	r3, r3, #30
 800f1a8:	d500      	bpl.n	800f1ac <_printf_float+0x270>
 800f1aa:	e106      	b.n	800f3ba <_printf_float+0x47e>
 800f1ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f1ae:	68e0      	ldr	r0, [r4, #12]
 800f1b0:	4298      	cmp	r0, r3
 800f1b2:	db00      	blt.n	800f1b6 <_printf_float+0x27a>
 800f1b4:	e722      	b.n	800effc <_printf_float+0xc0>
 800f1b6:	0018      	movs	r0, r3
 800f1b8:	e720      	b.n	800effc <_printf_float+0xc0>
 800f1ba:	0022      	movs	r2, r4
 800f1bc:	2301      	movs	r3, #1
 800f1be:	0038      	movs	r0, r7
 800f1c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f1c2:	321a      	adds	r2, #26
 800f1c4:	47b0      	blx	r6
 800f1c6:	1c43      	adds	r3, r0, #1
 800f1c8:	d100      	bne.n	800f1cc <_printf_float+0x290>
 800f1ca:	e715      	b.n	800eff8 <_printf_float+0xbc>
 800f1cc:	3501      	adds	r5, #1
 800f1ce:	e7e5      	b.n	800f19c <_printf_float+0x260>
 800f1d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	dc38      	bgt.n	800f248 <_printf_float+0x30c>
 800f1d6:	2301      	movs	r3, #1
 800f1d8:	0038      	movs	r0, r7
 800f1da:	4a1a      	ldr	r2, [pc, #104]	; (800f244 <_printf_float+0x308>)
 800f1dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f1de:	47b0      	blx	r6
 800f1e0:	1c43      	adds	r3, r0, #1
 800f1e2:	d100      	bne.n	800f1e6 <_printf_float+0x2aa>
 800f1e4:	e708      	b.n	800eff8 <_printf_float+0xbc>
 800f1e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f1e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f1ea:	4313      	orrs	r3, r2
 800f1ec:	d102      	bne.n	800f1f4 <_printf_float+0x2b8>
 800f1ee:	6823      	ldr	r3, [r4, #0]
 800f1f0:	07db      	lsls	r3, r3, #31
 800f1f2:	d5d7      	bpl.n	800f1a4 <_printf_float+0x268>
 800f1f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f1f6:	0038      	movs	r0, r7
 800f1f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f1fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f1fc:	47b0      	blx	r6
 800f1fe:	1c43      	adds	r3, r0, #1
 800f200:	d100      	bne.n	800f204 <_printf_float+0x2c8>
 800f202:	e6f9      	b.n	800eff8 <_printf_float+0xbc>
 800f204:	2300      	movs	r3, #0
 800f206:	930a      	str	r3, [sp, #40]	; 0x28
 800f208:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f20a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f20c:	425b      	negs	r3, r3
 800f20e:	4293      	cmp	r3, r2
 800f210:	dc01      	bgt.n	800f216 <_printf_float+0x2da>
 800f212:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f214:	e797      	b.n	800f146 <_printf_float+0x20a>
 800f216:	0022      	movs	r2, r4
 800f218:	2301      	movs	r3, #1
 800f21a:	0038      	movs	r0, r7
 800f21c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f21e:	321a      	adds	r2, #26
 800f220:	47b0      	blx	r6
 800f222:	1c43      	adds	r3, r0, #1
 800f224:	d100      	bne.n	800f228 <_printf_float+0x2ec>
 800f226:	e6e7      	b.n	800eff8 <_printf_float+0xbc>
 800f228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f22a:	3301      	adds	r3, #1
 800f22c:	e7eb      	b.n	800f206 <_printf_float+0x2ca>
 800f22e:	46c0      	nop			; (mov r8, r8)
 800f230:	7fefffff 	.word	0x7fefffff
 800f234:	08013a80 	.word	0x08013a80
 800f238:	08013a84 	.word	0x08013a84
 800f23c:	08013a88 	.word	0x08013a88
 800f240:	08013a8c 	.word	0x08013a8c
 800f244:	08013a90 	.word	0x08013a90
 800f248:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f24a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f24c:	920a      	str	r2, [sp, #40]	; 0x28
 800f24e:	429a      	cmp	r2, r3
 800f250:	dd00      	ble.n	800f254 <_printf_float+0x318>
 800f252:	930a      	str	r3, [sp, #40]	; 0x28
 800f254:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f256:	2b00      	cmp	r3, #0
 800f258:	dc3c      	bgt.n	800f2d4 <_printf_float+0x398>
 800f25a:	2300      	movs	r3, #0
 800f25c:	930d      	str	r3, [sp, #52]	; 0x34
 800f25e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f260:	43db      	mvns	r3, r3
 800f262:	17db      	asrs	r3, r3, #31
 800f264:	930f      	str	r3, [sp, #60]	; 0x3c
 800f266:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f268:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f26a:	930b      	str	r3, [sp, #44]	; 0x2c
 800f26c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f26e:	4013      	ands	r3, r2
 800f270:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f272:	1ad3      	subs	r3, r2, r3
 800f274:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f276:	4293      	cmp	r3, r2
 800f278:	dc34      	bgt.n	800f2e4 <_printf_float+0x3a8>
 800f27a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f27c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f27e:	4293      	cmp	r3, r2
 800f280:	db3d      	blt.n	800f2fe <_printf_float+0x3c2>
 800f282:	6823      	ldr	r3, [r4, #0]
 800f284:	07db      	lsls	r3, r3, #31
 800f286:	d43a      	bmi.n	800f2fe <_printf_float+0x3c2>
 800f288:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f28a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f28c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f28e:	1ad3      	subs	r3, r2, r3
 800f290:	1a52      	subs	r2, r2, r1
 800f292:	920a      	str	r2, [sp, #40]	; 0x28
 800f294:	429a      	cmp	r2, r3
 800f296:	dd00      	ble.n	800f29a <_printf_float+0x35e>
 800f298:	930a      	str	r3, [sp, #40]	; 0x28
 800f29a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	dc36      	bgt.n	800f30e <_printf_float+0x3d2>
 800f2a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2a2:	2500      	movs	r5, #0
 800f2a4:	43db      	mvns	r3, r3
 800f2a6:	17db      	asrs	r3, r3, #31
 800f2a8:	930b      	str	r3, [sp, #44]	; 0x2c
 800f2aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f2ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f2ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f2b0:	1a9b      	subs	r3, r3, r2
 800f2b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f2b4:	400a      	ands	r2, r1
 800f2b6:	1a9b      	subs	r3, r3, r2
 800f2b8:	42ab      	cmp	r3, r5
 800f2ba:	dc00      	bgt.n	800f2be <_printf_float+0x382>
 800f2bc:	e772      	b.n	800f1a4 <_printf_float+0x268>
 800f2be:	0022      	movs	r2, r4
 800f2c0:	2301      	movs	r3, #1
 800f2c2:	0038      	movs	r0, r7
 800f2c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f2c6:	321a      	adds	r2, #26
 800f2c8:	47b0      	blx	r6
 800f2ca:	1c43      	adds	r3, r0, #1
 800f2cc:	d100      	bne.n	800f2d0 <_printf_float+0x394>
 800f2ce:	e693      	b.n	800eff8 <_printf_float+0xbc>
 800f2d0:	3501      	adds	r5, #1
 800f2d2:	e7ea      	b.n	800f2aa <_printf_float+0x36e>
 800f2d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2d6:	002a      	movs	r2, r5
 800f2d8:	0038      	movs	r0, r7
 800f2da:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f2dc:	47b0      	blx	r6
 800f2de:	1c43      	adds	r3, r0, #1
 800f2e0:	d1bb      	bne.n	800f25a <_printf_float+0x31e>
 800f2e2:	e689      	b.n	800eff8 <_printf_float+0xbc>
 800f2e4:	0022      	movs	r2, r4
 800f2e6:	2301      	movs	r3, #1
 800f2e8:	0038      	movs	r0, r7
 800f2ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f2ec:	321a      	adds	r2, #26
 800f2ee:	47b0      	blx	r6
 800f2f0:	1c43      	adds	r3, r0, #1
 800f2f2:	d100      	bne.n	800f2f6 <_printf_float+0x3ba>
 800f2f4:	e680      	b.n	800eff8 <_printf_float+0xbc>
 800f2f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f2f8:	3301      	adds	r3, #1
 800f2fa:	930d      	str	r3, [sp, #52]	; 0x34
 800f2fc:	e7b3      	b.n	800f266 <_printf_float+0x32a>
 800f2fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f300:	0038      	movs	r0, r7
 800f302:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f304:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f306:	47b0      	blx	r6
 800f308:	1c43      	adds	r3, r0, #1
 800f30a:	d1bd      	bne.n	800f288 <_printf_float+0x34c>
 800f30c:	e674      	b.n	800eff8 <_printf_float+0xbc>
 800f30e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f310:	0038      	movs	r0, r7
 800f312:	18ea      	adds	r2, r5, r3
 800f314:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f316:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f318:	47b0      	blx	r6
 800f31a:	1c43      	adds	r3, r0, #1
 800f31c:	d1c0      	bne.n	800f2a0 <_printf_float+0x364>
 800f31e:	e66b      	b.n	800eff8 <_printf_float+0xbc>
 800f320:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f322:	2b01      	cmp	r3, #1
 800f324:	dc02      	bgt.n	800f32c <_printf_float+0x3f0>
 800f326:	2301      	movs	r3, #1
 800f328:	421a      	tst	r2, r3
 800f32a:	d034      	beq.n	800f396 <_printf_float+0x45a>
 800f32c:	2301      	movs	r3, #1
 800f32e:	002a      	movs	r2, r5
 800f330:	0038      	movs	r0, r7
 800f332:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f334:	47b0      	blx	r6
 800f336:	1c43      	adds	r3, r0, #1
 800f338:	d100      	bne.n	800f33c <_printf_float+0x400>
 800f33a:	e65d      	b.n	800eff8 <_printf_float+0xbc>
 800f33c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f33e:	0038      	movs	r0, r7
 800f340:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f342:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f344:	47b0      	blx	r6
 800f346:	1c43      	adds	r3, r0, #1
 800f348:	d100      	bne.n	800f34c <_printf_float+0x410>
 800f34a:	e655      	b.n	800eff8 <_printf_float+0xbc>
 800f34c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800f34e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800f350:	2200      	movs	r2, #0
 800f352:	2300      	movs	r3, #0
 800f354:	f7f1 f87a 	bl	800044c <__aeabi_dcmpeq>
 800f358:	2800      	cmp	r0, #0
 800f35a:	d11a      	bne.n	800f392 <_printf_float+0x456>
 800f35c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f35e:	1c6a      	adds	r2, r5, #1
 800f360:	3b01      	subs	r3, #1
 800f362:	0038      	movs	r0, r7
 800f364:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f366:	47b0      	blx	r6
 800f368:	1c43      	adds	r3, r0, #1
 800f36a:	d10e      	bne.n	800f38a <_printf_float+0x44e>
 800f36c:	e644      	b.n	800eff8 <_printf_float+0xbc>
 800f36e:	0022      	movs	r2, r4
 800f370:	2301      	movs	r3, #1
 800f372:	0038      	movs	r0, r7
 800f374:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f376:	321a      	adds	r2, #26
 800f378:	47b0      	blx	r6
 800f37a:	1c43      	adds	r3, r0, #1
 800f37c:	d100      	bne.n	800f380 <_printf_float+0x444>
 800f37e:	e63b      	b.n	800eff8 <_printf_float+0xbc>
 800f380:	3501      	adds	r5, #1
 800f382:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f384:	3b01      	subs	r3, #1
 800f386:	42ab      	cmp	r3, r5
 800f388:	dcf1      	bgt.n	800f36e <_printf_float+0x432>
 800f38a:	0022      	movs	r2, r4
 800f38c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f38e:	3250      	adds	r2, #80	; 0x50
 800f390:	e6da      	b.n	800f148 <_printf_float+0x20c>
 800f392:	2500      	movs	r5, #0
 800f394:	e7f5      	b.n	800f382 <_printf_float+0x446>
 800f396:	002a      	movs	r2, r5
 800f398:	e7e3      	b.n	800f362 <_printf_float+0x426>
 800f39a:	0022      	movs	r2, r4
 800f39c:	2301      	movs	r3, #1
 800f39e:	0038      	movs	r0, r7
 800f3a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f3a2:	3219      	adds	r2, #25
 800f3a4:	47b0      	blx	r6
 800f3a6:	1c43      	adds	r3, r0, #1
 800f3a8:	d100      	bne.n	800f3ac <_printf_float+0x470>
 800f3aa:	e625      	b.n	800eff8 <_printf_float+0xbc>
 800f3ac:	3501      	adds	r5, #1
 800f3ae:	68e3      	ldr	r3, [r4, #12]
 800f3b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f3b2:	1a9b      	subs	r3, r3, r2
 800f3b4:	42ab      	cmp	r3, r5
 800f3b6:	dcf0      	bgt.n	800f39a <_printf_float+0x45e>
 800f3b8:	e6f8      	b.n	800f1ac <_printf_float+0x270>
 800f3ba:	2500      	movs	r5, #0
 800f3bc:	e7f7      	b.n	800f3ae <_printf_float+0x472>
 800f3be:	46c0      	nop			; (mov r8, r8)

0800f3c0 <_printf_common>:
 800f3c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f3c2:	0015      	movs	r5, r2
 800f3c4:	9301      	str	r3, [sp, #4]
 800f3c6:	688a      	ldr	r2, [r1, #8]
 800f3c8:	690b      	ldr	r3, [r1, #16]
 800f3ca:	000c      	movs	r4, r1
 800f3cc:	9000      	str	r0, [sp, #0]
 800f3ce:	4293      	cmp	r3, r2
 800f3d0:	da00      	bge.n	800f3d4 <_printf_common+0x14>
 800f3d2:	0013      	movs	r3, r2
 800f3d4:	0022      	movs	r2, r4
 800f3d6:	602b      	str	r3, [r5, #0]
 800f3d8:	3243      	adds	r2, #67	; 0x43
 800f3da:	7812      	ldrb	r2, [r2, #0]
 800f3dc:	2a00      	cmp	r2, #0
 800f3de:	d001      	beq.n	800f3e4 <_printf_common+0x24>
 800f3e0:	3301      	adds	r3, #1
 800f3e2:	602b      	str	r3, [r5, #0]
 800f3e4:	6823      	ldr	r3, [r4, #0]
 800f3e6:	069b      	lsls	r3, r3, #26
 800f3e8:	d502      	bpl.n	800f3f0 <_printf_common+0x30>
 800f3ea:	682b      	ldr	r3, [r5, #0]
 800f3ec:	3302      	adds	r3, #2
 800f3ee:	602b      	str	r3, [r5, #0]
 800f3f0:	6822      	ldr	r2, [r4, #0]
 800f3f2:	2306      	movs	r3, #6
 800f3f4:	0017      	movs	r7, r2
 800f3f6:	401f      	ands	r7, r3
 800f3f8:	421a      	tst	r2, r3
 800f3fa:	d027      	beq.n	800f44c <_printf_common+0x8c>
 800f3fc:	0023      	movs	r3, r4
 800f3fe:	3343      	adds	r3, #67	; 0x43
 800f400:	781b      	ldrb	r3, [r3, #0]
 800f402:	1e5a      	subs	r2, r3, #1
 800f404:	4193      	sbcs	r3, r2
 800f406:	6822      	ldr	r2, [r4, #0]
 800f408:	0692      	lsls	r2, r2, #26
 800f40a:	d430      	bmi.n	800f46e <_printf_common+0xae>
 800f40c:	0022      	movs	r2, r4
 800f40e:	9901      	ldr	r1, [sp, #4]
 800f410:	9800      	ldr	r0, [sp, #0]
 800f412:	9e08      	ldr	r6, [sp, #32]
 800f414:	3243      	adds	r2, #67	; 0x43
 800f416:	47b0      	blx	r6
 800f418:	1c43      	adds	r3, r0, #1
 800f41a:	d025      	beq.n	800f468 <_printf_common+0xa8>
 800f41c:	2306      	movs	r3, #6
 800f41e:	6820      	ldr	r0, [r4, #0]
 800f420:	682a      	ldr	r2, [r5, #0]
 800f422:	68e1      	ldr	r1, [r4, #12]
 800f424:	2500      	movs	r5, #0
 800f426:	4003      	ands	r3, r0
 800f428:	2b04      	cmp	r3, #4
 800f42a:	d103      	bne.n	800f434 <_printf_common+0x74>
 800f42c:	1a8d      	subs	r5, r1, r2
 800f42e:	43eb      	mvns	r3, r5
 800f430:	17db      	asrs	r3, r3, #31
 800f432:	401d      	ands	r5, r3
 800f434:	68a3      	ldr	r3, [r4, #8]
 800f436:	6922      	ldr	r2, [r4, #16]
 800f438:	4293      	cmp	r3, r2
 800f43a:	dd01      	ble.n	800f440 <_printf_common+0x80>
 800f43c:	1a9b      	subs	r3, r3, r2
 800f43e:	18ed      	adds	r5, r5, r3
 800f440:	2700      	movs	r7, #0
 800f442:	42bd      	cmp	r5, r7
 800f444:	d120      	bne.n	800f488 <_printf_common+0xc8>
 800f446:	2000      	movs	r0, #0
 800f448:	e010      	b.n	800f46c <_printf_common+0xac>
 800f44a:	3701      	adds	r7, #1
 800f44c:	68e3      	ldr	r3, [r4, #12]
 800f44e:	682a      	ldr	r2, [r5, #0]
 800f450:	1a9b      	subs	r3, r3, r2
 800f452:	42bb      	cmp	r3, r7
 800f454:	ddd2      	ble.n	800f3fc <_printf_common+0x3c>
 800f456:	0022      	movs	r2, r4
 800f458:	2301      	movs	r3, #1
 800f45a:	9901      	ldr	r1, [sp, #4]
 800f45c:	9800      	ldr	r0, [sp, #0]
 800f45e:	9e08      	ldr	r6, [sp, #32]
 800f460:	3219      	adds	r2, #25
 800f462:	47b0      	blx	r6
 800f464:	1c43      	adds	r3, r0, #1
 800f466:	d1f0      	bne.n	800f44a <_printf_common+0x8a>
 800f468:	2001      	movs	r0, #1
 800f46a:	4240      	negs	r0, r0
 800f46c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f46e:	2030      	movs	r0, #48	; 0x30
 800f470:	18e1      	adds	r1, r4, r3
 800f472:	3143      	adds	r1, #67	; 0x43
 800f474:	7008      	strb	r0, [r1, #0]
 800f476:	0021      	movs	r1, r4
 800f478:	1c5a      	adds	r2, r3, #1
 800f47a:	3145      	adds	r1, #69	; 0x45
 800f47c:	7809      	ldrb	r1, [r1, #0]
 800f47e:	18a2      	adds	r2, r4, r2
 800f480:	3243      	adds	r2, #67	; 0x43
 800f482:	3302      	adds	r3, #2
 800f484:	7011      	strb	r1, [r2, #0]
 800f486:	e7c1      	b.n	800f40c <_printf_common+0x4c>
 800f488:	0022      	movs	r2, r4
 800f48a:	2301      	movs	r3, #1
 800f48c:	9901      	ldr	r1, [sp, #4]
 800f48e:	9800      	ldr	r0, [sp, #0]
 800f490:	9e08      	ldr	r6, [sp, #32]
 800f492:	321a      	adds	r2, #26
 800f494:	47b0      	blx	r6
 800f496:	1c43      	adds	r3, r0, #1
 800f498:	d0e6      	beq.n	800f468 <_printf_common+0xa8>
 800f49a:	3701      	adds	r7, #1
 800f49c:	e7d1      	b.n	800f442 <_printf_common+0x82>
	...

0800f4a0 <_printf_i>:
 800f4a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f4a2:	b08b      	sub	sp, #44	; 0x2c
 800f4a4:	9206      	str	r2, [sp, #24]
 800f4a6:	000a      	movs	r2, r1
 800f4a8:	3243      	adds	r2, #67	; 0x43
 800f4aa:	9307      	str	r3, [sp, #28]
 800f4ac:	9005      	str	r0, [sp, #20]
 800f4ae:	9204      	str	r2, [sp, #16]
 800f4b0:	7e0a      	ldrb	r2, [r1, #24]
 800f4b2:	000c      	movs	r4, r1
 800f4b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f4b6:	2a78      	cmp	r2, #120	; 0x78
 800f4b8:	d807      	bhi.n	800f4ca <_printf_i+0x2a>
 800f4ba:	2a62      	cmp	r2, #98	; 0x62
 800f4bc:	d809      	bhi.n	800f4d2 <_printf_i+0x32>
 800f4be:	2a00      	cmp	r2, #0
 800f4c0:	d100      	bne.n	800f4c4 <_printf_i+0x24>
 800f4c2:	e0c1      	b.n	800f648 <_printf_i+0x1a8>
 800f4c4:	2a58      	cmp	r2, #88	; 0x58
 800f4c6:	d100      	bne.n	800f4ca <_printf_i+0x2a>
 800f4c8:	e08c      	b.n	800f5e4 <_printf_i+0x144>
 800f4ca:	0026      	movs	r6, r4
 800f4cc:	3642      	adds	r6, #66	; 0x42
 800f4ce:	7032      	strb	r2, [r6, #0]
 800f4d0:	e022      	b.n	800f518 <_printf_i+0x78>
 800f4d2:	0010      	movs	r0, r2
 800f4d4:	3863      	subs	r0, #99	; 0x63
 800f4d6:	2815      	cmp	r0, #21
 800f4d8:	d8f7      	bhi.n	800f4ca <_printf_i+0x2a>
 800f4da:	f7f0 fe27 	bl	800012c <__gnu_thumb1_case_shi>
 800f4de:	0016      	.short	0x0016
 800f4e0:	fff6001f 	.word	0xfff6001f
 800f4e4:	fff6fff6 	.word	0xfff6fff6
 800f4e8:	001ffff6 	.word	0x001ffff6
 800f4ec:	fff6fff6 	.word	0xfff6fff6
 800f4f0:	fff6fff6 	.word	0xfff6fff6
 800f4f4:	003600a8 	.word	0x003600a8
 800f4f8:	fff6009a 	.word	0xfff6009a
 800f4fc:	00b9fff6 	.word	0x00b9fff6
 800f500:	0036fff6 	.word	0x0036fff6
 800f504:	fff6fff6 	.word	0xfff6fff6
 800f508:	009e      	.short	0x009e
 800f50a:	0026      	movs	r6, r4
 800f50c:	681a      	ldr	r2, [r3, #0]
 800f50e:	3642      	adds	r6, #66	; 0x42
 800f510:	1d11      	adds	r1, r2, #4
 800f512:	6019      	str	r1, [r3, #0]
 800f514:	6813      	ldr	r3, [r2, #0]
 800f516:	7033      	strb	r3, [r6, #0]
 800f518:	2301      	movs	r3, #1
 800f51a:	e0a7      	b.n	800f66c <_printf_i+0x1cc>
 800f51c:	6808      	ldr	r0, [r1, #0]
 800f51e:	6819      	ldr	r1, [r3, #0]
 800f520:	1d0a      	adds	r2, r1, #4
 800f522:	0605      	lsls	r5, r0, #24
 800f524:	d50b      	bpl.n	800f53e <_printf_i+0x9e>
 800f526:	680d      	ldr	r5, [r1, #0]
 800f528:	601a      	str	r2, [r3, #0]
 800f52a:	2d00      	cmp	r5, #0
 800f52c:	da03      	bge.n	800f536 <_printf_i+0x96>
 800f52e:	232d      	movs	r3, #45	; 0x2d
 800f530:	9a04      	ldr	r2, [sp, #16]
 800f532:	426d      	negs	r5, r5
 800f534:	7013      	strb	r3, [r2, #0]
 800f536:	4b61      	ldr	r3, [pc, #388]	; (800f6bc <_printf_i+0x21c>)
 800f538:	270a      	movs	r7, #10
 800f53a:	9303      	str	r3, [sp, #12]
 800f53c:	e01b      	b.n	800f576 <_printf_i+0xd6>
 800f53e:	680d      	ldr	r5, [r1, #0]
 800f540:	601a      	str	r2, [r3, #0]
 800f542:	0641      	lsls	r1, r0, #25
 800f544:	d5f1      	bpl.n	800f52a <_printf_i+0x8a>
 800f546:	b22d      	sxth	r5, r5
 800f548:	e7ef      	b.n	800f52a <_printf_i+0x8a>
 800f54a:	680d      	ldr	r5, [r1, #0]
 800f54c:	6819      	ldr	r1, [r3, #0]
 800f54e:	1d08      	adds	r0, r1, #4
 800f550:	6018      	str	r0, [r3, #0]
 800f552:	062e      	lsls	r6, r5, #24
 800f554:	d501      	bpl.n	800f55a <_printf_i+0xba>
 800f556:	680d      	ldr	r5, [r1, #0]
 800f558:	e003      	b.n	800f562 <_printf_i+0xc2>
 800f55a:	066d      	lsls	r5, r5, #25
 800f55c:	d5fb      	bpl.n	800f556 <_printf_i+0xb6>
 800f55e:	680d      	ldr	r5, [r1, #0]
 800f560:	b2ad      	uxth	r5, r5
 800f562:	4b56      	ldr	r3, [pc, #344]	; (800f6bc <_printf_i+0x21c>)
 800f564:	2708      	movs	r7, #8
 800f566:	9303      	str	r3, [sp, #12]
 800f568:	2a6f      	cmp	r2, #111	; 0x6f
 800f56a:	d000      	beq.n	800f56e <_printf_i+0xce>
 800f56c:	3702      	adds	r7, #2
 800f56e:	0023      	movs	r3, r4
 800f570:	2200      	movs	r2, #0
 800f572:	3343      	adds	r3, #67	; 0x43
 800f574:	701a      	strb	r2, [r3, #0]
 800f576:	6863      	ldr	r3, [r4, #4]
 800f578:	60a3      	str	r3, [r4, #8]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	db03      	blt.n	800f586 <_printf_i+0xe6>
 800f57e:	2204      	movs	r2, #4
 800f580:	6821      	ldr	r1, [r4, #0]
 800f582:	4391      	bics	r1, r2
 800f584:	6021      	str	r1, [r4, #0]
 800f586:	2d00      	cmp	r5, #0
 800f588:	d102      	bne.n	800f590 <_printf_i+0xf0>
 800f58a:	9e04      	ldr	r6, [sp, #16]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d00c      	beq.n	800f5aa <_printf_i+0x10a>
 800f590:	9e04      	ldr	r6, [sp, #16]
 800f592:	0028      	movs	r0, r5
 800f594:	0039      	movs	r1, r7
 800f596:	f7f0 fe59 	bl	800024c <__aeabi_uidivmod>
 800f59a:	9b03      	ldr	r3, [sp, #12]
 800f59c:	3e01      	subs	r6, #1
 800f59e:	5c5b      	ldrb	r3, [r3, r1]
 800f5a0:	7033      	strb	r3, [r6, #0]
 800f5a2:	002b      	movs	r3, r5
 800f5a4:	0005      	movs	r5, r0
 800f5a6:	429f      	cmp	r7, r3
 800f5a8:	d9f3      	bls.n	800f592 <_printf_i+0xf2>
 800f5aa:	2f08      	cmp	r7, #8
 800f5ac:	d109      	bne.n	800f5c2 <_printf_i+0x122>
 800f5ae:	6823      	ldr	r3, [r4, #0]
 800f5b0:	07db      	lsls	r3, r3, #31
 800f5b2:	d506      	bpl.n	800f5c2 <_printf_i+0x122>
 800f5b4:	6863      	ldr	r3, [r4, #4]
 800f5b6:	6922      	ldr	r2, [r4, #16]
 800f5b8:	4293      	cmp	r3, r2
 800f5ba:	dc02      	bgt.n	800f5c2 <_printf_i+0x122>
 800f5bc:	2330      	movs	r3, #48	; 0x30
 800f5be:	3e01      	subs	r6, #1
 800f5c0:	7033      	strb	r3, [r6, #0]
 800f5c2:	9b04      	ldr	r3, [sp, #16]
 800f5c4:	1b9b      	subs	r3, r3, r6
 800f5c6:	6123      	str	r3, [r4, #16]
 800f5c8:	9b07      	ldr	r3, [sp, #28]
 800f5ca:	0021      	movs	r1, r4
 800f5cc:	9300      	str	r3, [sp, #0]
 800f5ce:	9805      	ldr	r0, [sp, #20]
 800f5d0:	9b06      	ldr	r3, [sp, #24]
 800f5d2:	aa09      	add	r2, sp, #36	; 0x24
 800f5d4:	f7ff fef4 	bl	800f3c0 <_printf_common>
 800f5d8:	1c43      	adds	r3, r0, #1
 800f5da:	d14c      	bne.n	800f676 <_printf_i+0x1d6>
 800f5dc:	2001      	movs	r0, #1
 800f5de:	4240      	negs	r0, r0
 800f5e0:	b00b      	add	sp, #44	; 0x2c
 800f5e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f5e4:	3145      	adds	r1, #69	; 0x45
 800f5e6:	700a      	strb	r2, [r1, #0]
 800f5e8:	4a34      	ldr	r2, [pc, #208]	; (800f6bc <_printf_i+0x21c>)
 800f5ea:	9203      	str	r2, [sp, #12]
 800f5ec:	681a      	ldr	r2, [r3, #0]
 800f5ee:	6821      	ldr	r1, [r4, #0]
 800f5f0:	ca20      	ldmia	r2!, {r5}
 800f5f2:	601a      	str	r2, [r3, #0]
 800f5f4:	0608      	lsls	r0, r1, #24
 800f5f6:	d516      	bpl.n	800f626 <_printf_i+0x186>
 800f5f8:	07cb      	lsls	r3, r1, #31
 800f5fa:	d502      	bpl.n	800f602 <_printf_i+0x162>
 800f5fc:	2320      	movs	r3, #32
 800f5fe:	4319      	orrs	r1, r3
 800f600:	6021      	str	r1, [r4, #0]
 800f602:	2710      	movs	r7, #16
 800f604:	2d00      	cmp	r5, #0
 800f606:	d1b2      	bne.n	800f56e <_printf_i+0xce>
 800f608:	2320      	movs	r3, #32
 800f60a:	6822      	ldr	r2, [r4, #0]
 800f60c:	439a      	bics	r2, r3
 800f60e:	6022      	str	r2, [r4, #0]
 800f610:	e7ad      	b.n	800f56e <_printf_i+0xce>
 800f612:	2220      	movs	r2, #32
 800f614:	6809      	ldr	r1, [r1, #0]
 800f616:	430a      	orrs	r2, r1
 800f618:	6022      	str	r2, [r4, #0]
 800f61a:	0022      	movs	r2, r4
 800f61c:	2178      	movs	r1, #120	; 0x78
 800f61e:	3245      	adds	r2, #69	; 0x45
 800f620:	7011      	strb	r1, [r2, #0]
 800f622:	4a27      	ldr	r2, [pc, #156]	; (800f6c0 <_printf_i+0x220>)
 800f624:	e7e1      	b.n	800f5ea <_printf_i+0x14a>
 800f626:	0648      	lsls	r0, r1, #25
 800f628:	d5e6      	bpl.n	800f5f8 <_printf_i+0x158>
 800f62a:	b2ad      	uxth	r5, r5
 800f62c:	e7e4      	b.n	800f5f8 <_printf_i+0x158>
 800f62e:	681a      	ldr	r2, [r3, #0]
 800f630:	680d      	ldr	r5, [r1, #0]
 800f632:	1d10      	adds	r0, r2, #4
 800f634:	6949      	ldr	r1, [r1, #20]
 800f636:	6018      	str	r0, [r3, #0]
 800f638:	6813      	ldr	r3, [r2, #0]
 800f63a:	062e      	lsls	r6, r5, #24
 800f63c:	d501      	bpl.n	800f642 <_printf_i+0x1a2>
 800f63e:	6019      	str	r1, [r3, #0]
 800f640:	e002      	b.n	800f648 <_printf_i+0x1a8>
 800f642:	066d      	lsls	r5, r5, #25
 800f644:	d5fb      	bpl.n	800f63e <_printf_i+0x19e>
 800f646:	8019      	strh	r1, [r3, #0]
 800f648:	2300      	movs	r3, #0
 800f64a:	9e04      	ldr	r6, [sp, #16]
 800f64c:	6123      	str	r3, [r4, #16]
 800f64e:	e7bb      	b.n	800f5c8 <_printf_i+0x128>
 800f650:	681a      	ldr	r2, [r3, #0]
 800f652:	1d11      	adds	r1, r2, #4
 800f654:	6019      	str	r1, [r3, #0]
 800f656:	6816      	ldr	r6, [r2, #0]
 800f658:	2100      	movs	r1, #0
 800f65a:	0030      	movs	r0, r6
 800f65c:	6862      	ldr	r2, [r4, #4]
 800f65e:	f001 f977 	bl	8010950 <memchr>
 800f662:	2800      	cmp	r0, #0
 800f664:	d001      	beq.n	800f66a <_printf_i+0x1ca>
 800f666:	1b80      	subs	r0, r0, r6
 800f668:	6060      	str	r0, [r4, #4]
 800f66a:	6863      	ldr	r3, [r4, #4]
 800f66c:	6123      	str	r3, [r4, #16]
 800f66e:	2300      	movs	r3, #0
 800f670:	9a04      	ldr	r2, [sp, #16]
 800f672:	7013      	strb	r3, [r2, #0]
 800f674:	e7a8      	b.n	800f5c8 <_printf_i+0x128>
 800f676:	6923      	ldr	r3, [r4, #16]
 800f678:	0032      	movs	r2, r6
 800f67a:	9906      	ldr	r1, [sp, #24]
 800f67c:	9805      	ldr	r0, [sp, #20]
 800f67e:	9d07      	ldr	r5, [sp, #28]
 800f680:	47a8      	blx	r5
 800f682:	1c43      	adds	r3, r0, #1
 800f684:	d0aa      	beq.n	800f5dc <_printf_i+0x13c>
 800f686:	6823      	ldr	r3, [r4, #0]
 800f688:	079b      	lsls	r3, r3, #30
 800f68a:	d415      	bmi.n	800f6b8 <_printf_i+0x218>
 800f68c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f68e:	68e0      	ldr	r0, [r4, #12]
 800f690:	4298      	cmp	r0, r3
 800f692:	daa5      	bge.n	800f5e0 <_printf_i+0x140>
 800f694:	0018      	movs	r0, r3
 800f696:	e7a3      	b.n	800f5e0 <_printf_i+0x140>
 800f698:	0022      	movs	r2, r4
 800f69a:	2301      	movs	r3, #1
 800f69c:	9906      	ldr	r1, [sp, #24]
 800f69e:	9805      	ldr	r0, [sp, #20]
 800f6a0:	9e07      	ldr	r6, [sp, #28]
 800f6a2:	3219      	adds	r2, #25
 800f6a4:	47b0      	blx	r6
 800f6a6:	1c43      	adds	r3, r0, #1
 800f6a8:	d098      	beq.n	800f5dc <_printf_i+0x13c>
 800f6aa:	3501      	adds	r5, #1
 800f6ac:	68e3      	ldr	r3, [r4, #12]
 800f6ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f6b0:	1a9b      	subs	r3, r3, r2
 800f6b2:	42ab      	cmp	r3, r5
 800f6b4:	dcf0      	bgt.n	800f698 <_printf_i+0x1f8>
 800f6b6:	e7e9      	b.n	800f68c <_printf_i+0x1ec>
 800f6b8:	2500      	movs	r5, #0
 800f6ba:	e7f7      	b.n	800f6ac <_printf_i+0x20c>
 800f6bc:	08013a92 	.word	0x08013a92
 800f6c0:	08013aa3 	.word	0x08013aa3

0800f6c4 <cleanup_glue>:
 800f6c4:	b570      	push	{r4, r5, r6, lr}
 800f6c6:	000d      	movs	r5, r1
 800f6c8:	6809      	ldr	r1, [r1, #0]
 800f6ca:	0004      	movs	r4, r0
 800f6cc:	2900      	cmp	r1, #0
 800f6ce:	d001      	beq.n	800f6d4 <cleanup_glue+0x10>
 800f6d0:	f7ff fff8 	bl	800f6c4 <cleanup_glue>
 800f6d4:	0029      	movs	r1, r5
 800f6d6:	0020      	movs	r0, r4
 800f6d8:	f001 fd1e 	bl	8011118 <_free_r>
 800f6dc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f6e0 <_reclaim_reent>:
 800f6e0:	4b31      	ldr	r3, [pc, #196]	; (800f7a8 <_reclaim_reent+0xc8>)
 800f6e2:	b570      	push	{r4, r5, r6, lr}
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	0004      	movs	r4, r0
 800f6e8:	4283      	cmp	r3, r0
 800f6ea:	d049      	beq.n	800f780 <_reclaim_reent+0xa0>
 800f6ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d00a      	beq.n	800f708 <_reclaim_reent+0x28>
 800f6f2:	2500      	movs	r5, #0
 800f6f4:	68db      	ldr	r3, [r3, #12]
 800f6f6:	42ab      	cmp	r3, r5
 800f6f8:	d147      	bne.n	800f78a <_reclaim_reent+0xaa>
 800f6fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f6fc:	6819      	ldr	r1, [r3, #0]
 800f6fe:	2900      	cmp	r1, #0
 800f700:	d002      	beq.n	800f708 <_reclaim_reent+0x28>
 800f702:	0020      	movs	r0, r4
 800f704:	f001 fd08 	bl	8011118 <_free_r>
 800f708:	6961      	ldr	r1, [r4, #20]
 800f70a:	2900      	cmp	r1, #0
 800f70c:	d002      	beq.n	800f714 <_reclaim_reent+0x34>
 800f70e:	0020      	movs	r0, r4
 800f710:	f001 fd02 	bl	8011118 <_free_r>
 800f714:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f716:	2900      	cmp	r1, #0
 800f718:	d002      	beq.n	800f720 <_reclaim_reent+0x40>
 800f71a:	0020      	movs	r0, r4
 800f71c:	f001 fcfc 	bl	8011118 <_free_r>
 800f720:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f722:	2900      	cmp	r1, #0
 800f724:	d002      	beq.n	800f72c <_reclaim_reent+0x4c>
 800f726:	0020      	movs	r0, r4
 800f728:	f001 fcf6 	bl	8011118 <_free_r>
 800f72c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f72e:	2900      	cmp	r1, #0
 800f730:	d002      	beq.n	800f738 <_reclaim_reent+0x58>
 800f732:	0020      	movs	r0, r4
 800f734:	f001 fcf0 	bl	8011118 <_free_r>
 800f738:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f73a:	2900      	cmp	r1, #0
 800f73c:	d002      	beq.n	800f744 <_reclaim_reent+0x64>
 800f73e:	0020      	movs	r0, r4
 800f740:	f001 fcea 	bl	8011118 <_free_r>
 800f744:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f746:	2900      	cmp	r1, #0
 800f748:	d002      	beq.n	800f750 <_reclaim_reent+0x70>
 800f74a:	0020      	movs	r0, r4
 800f74c:	f001 fce4 	bl	8011118 <_free_r>
 800f750:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f752:	2900      	cmp	r1, #0
 800f754:	d002      	beq.n	800f75c <_reclaim_reent+0x7c>
 800f756:	0020      	movs	r0, r4
 800f758:	f001 fcde 	bl	8011118 <_free_r>
 800f75c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f75e:	2900      	cmp	r1, #0
 800f760:	d002      	beq.n	800f768 <_reclaim_reent+0x88>
 800f762:	0020      	movs	r0, r4
 800f764:	f001 fcd8 	bl	8011118 <_free_r>
 800f768:	69a3      	ldr	r3, [r4, #24]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d008      	beq.n	800f780 <_reclaim_reent+0xa0>
 800f76e:	0020      	movs	r0, r4
 800f770:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f772:	4798      	blx	r3
 800f774:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f776:	2900      	cmp	r1, #0
 800f778:	d002      	beq.n	800f780 <_reclaim_reent+0xa0>
 800f77a:	0020      	movs	r0, r4
 800f77c:	f7ff ffa2 	bl	800f6c4 <cleanup_glue>
 800f780:	bd70      	pop	{r4, r5, r6, pc}
 800f782:	5949      	ldr	r1, [r1, r5]
 800f784:	2900      	cmp	r1, #0
 800f786:	d108      	bne.n	800f79a <_reclaim_reent+0xba>
 800f788:	3504      	adds	r5, #4
 800f78a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f78c:	68d9      	ldr	r1, [r3, #12]
 800f78e:	2d80      	cmp	r5, #128	; 0x80
 800f790:	d1f7      	bne.n	800f782 <_reclaim_reent+0xa2>
 800f792:	0020      	movs	r0, r4
 800f794:	f001 fcc0 	bl	8011118 <_free_r>
 800f798:	e7af      	b.n	800f6fa <_reclaim_reent+0x1a>
 800f79a:	680e      	ldr	r6, [r1, #0]
 800f79c:	0020      	movs	r0, r4
 800f79e:	f001 fcbb 	bl	8011118 <_free_r>
 800f7a2:	0031      	movs	r1, r6
 800f7a4:	e7ee      	b.n	800f784 <_reclaim_reent+0xa4>
 800f7a6:	46c0      	nop			; (mov r8, r8)
 800f7a8:	2000009c 	.word	0x2000009c

0800f7ac <_sbrk_r>:
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	b570      	push	{r4, r5, r6, lr}
 800f7b0:	4d06      	ldr	r5, [pc, #24]	; (800f7cc <_sbrk_r+0x20>)
 800f7b2:	0004      	movs	r4, r0
 800f7b4:	0008      	movs	r0, r1
 800f7b6:	602b      	str	r3, [r5, #0]
 800f7b8:	f7f4 ffac 	bl	8004714 <_sbrk>
 800f7bc:	1c43      	adds	r3, r0, #1
 800f7be:	d103      	bne.n	800f7c8 <_sbrk_r+0x1c>
 800f7c0:	682b      	ldr	r3, [r5, #0]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d000      	beq.n	800f7c8 <_sbrk_r+0x1c>
 800f7c6:	6023      	str	r3, [r4, #0]
 800f7c8:	bd70      	pop	{r4, r5, r6, pc}
 800f7ca:	46c0      	nop			; (mov r8, r8)
 800f7cc:	200021bc 	.word	0x200021bc

0800f7d0 <siprintf>:
 800f7d0:	b40e      	push	{r1, r2, r3}
 800f7d2:	b500      	push	{lr}
 800f7d4:	490b      	ldr	r1, [pc, #44]	; (800f804 <siprintf+0x34>)
 800f7d6:	b09c      	sub	sp, #112	; 0x70
 800f7d8:	ab1d      	add	r3, sp, #116	; 0x74
 800f7da:	9002      	str	r0, [sp, #8]
 800f7dc:	9006      	str	r0, [sp, #24]
 800f7de:	9107      	str	r1, [sp, #28]
 800f7e0:	9104      	str	r1, [sp, #16]
 800f7e2:	4809      	ldr	r0, [pc, #36]	; (800f808 <siprintf+0x38>)
 800f7e4:	4909      	ldr	r1, [pc, #36]	; (800f80c <siprintf+0x3c>)
 800f7e6:	cb04      	ldmia	r3!, {r2}
 800f7e8:	9105      	str	r1, [sp, #20]
 800f7ea:	6800      	ldr	r0, [r0, #0]
 800f7ec:	a902      	add	r1, sp, #8
 800f7ee:	9301      	str	r3, [sp, #4]
 800f7f0:	f001 fd3e 	bl	8011270 <_svfiprintf_r>
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	9a02      	ldr	r2, [sp, #8]
 800f7f8:	7013      	strb	r3, [r2, #0]
 800f7fa:	b01c      	add	sp, #112	; 0x70
 800f7fc:	bc08      	pop	{r3}
 800f7fe:	b003      	add	sp, #12
 800f800:	4718      	bx	r3
 800f802:	46c0      	nop			; (mov r8, r8)
 800f804:	7fffffff 	.word	0x7fffffff
 800f808:	2000009c 	.word	0x2000009c
 800f80c:	ffff0208 	.word	0xffff0208

0800f810 <__sread>:
 800f810:	b570      	push	{r4, r5, r6, lr}
 800f812:	000c      	movs	r4, r1
 800f814:	250e      	movs	r5, #14
 800f816:	5f49      	ldrsh	r1, [r1, r5]
 800f818:	f001 fe2a 	bl	8011470 <_read_r>
 800f81c:	2800      	cmp	r0, #0
 800f81e:	db03      	blt.n	800f828 <__sread+0x18>
 800f820:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800f822:	181b      	adds	r3, r3, r0
 800f824:	6563      	str	r3, [r4, #84]	; 0x54
 800f826:	bd70      	pop	{r4, r5, r6, pc}
 800f828:	89a3      	ldrh	r3, [r4, #12]
 800f82a:	4a02      	ldr	r2, [pc, #8]	; (800f834 <__sread+0x24>)
 800f82c:	4013      	ands	r3, r2
 800f82e:	81a3      	strh	r3, [r4, #12]
 800f830:	e7f9      	b.n	800f826 <__sread+0x16>
 800f832:	46c0      	nop			; (mov r8, r8)
 800f834:	ffffefff 	.word	0xffffefff

0800f838 <__swrite>:
 800f838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f83a:	001f      	movs	r7, r3
 800f83c:	898b      	ldrh	r3, [r1, #12]
 800f83e:	0005      	movs	r5, r0
 800f840:	000c      	movs	r4, r1
 800f842:	0016      	movs	r6, r2
 800f844:	05db      	lsls	r3, r3, #23
 800f846:	d505      	bpl.n	800f854 <__swrite+0x1c>
 800f848:	230e      	movs	r3, #14
 800f84a:	5ec9      	ldrsh	r1, [r1, r3]
 800f84c:	2200      	movs	r2, #0
 800f84e:	2302      	movs	r3, #2
 800f850:	f001 f860 	bl	8010914 <_lseek_r>
 800f854:	89a3      	ldrh	r3, [r4, #12]
 800f856:	4a05      	ldr	r2, [pc, #20]	; (800f86c <__swrite+0x34>)
 800f858:	0028      	movs	r0, r5
 800f85a:	4013      	ands	r3, r2
 800f85c:	81a3      	strh	r3, [r4, #12]
 800f85e:	0032      	movs	r2, r6
 800f860:	230e      	movs	r3, #14
 800f862:	5ee1      	ldrsh	r1, [r4, r3]
 800f864:	003b      	movs	r3, r7
 800f866:	f000 f8b9 	bl	800f9dc <_write_r>
 800f86a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f86c:	ffffefff 	.word	0xffffefff

0800f870 <__sseek>:
 800f870:	b570      	push	{r4, r5, r6, lr}
 800f872:	000c      	movs	r4, r1
 800f874:	250e      	movs	r5, #14
 800f876:	5f49      	ldrsh	r1, [r1, r5]
 800f878:	f001 f84c 	bl	8010914 <_lseek_r>
 800f87c:	89a3      	ldrh	r3, [r4, #12]
 800f87e:	1c42      	adds	r2, r0, #1
 800f880:	d103      	bne.n	800f88a <__sseek+0x1a>
 800f882:	4a05      	ldr	r2, [pc, #20]	; (800f898 <__sseek+0x28>)
 800f884:	4013      	ands	r3, r2
 800f886:	81a3      	strh	r3, [r4, #12]
 800f888:	bd70      	pop	{r4, r5, r6, pc}
 800f88a:	2280      	movs	r2, #128	; 0x80
 800f88c:	0152      	lsls	r2, r2, #5
 800f88e:	4313      	orrs	r3, r2
 800f890:	81a3      	strh	r3, [r4, #12]
 800f892:	6560      	str	r0, [r4, #84]	; 0x54
 800f894:	e7f8      	b.n	800f888 <__sseek+0x18>
 800f896:	46c0      	nop			; (mov r8, r8)
 800f898:	ffffefff 	.word	0xffffefff

0800f89c <__sclose>:
 800f89c:	b510      	push	{r4, lr}
 800f89e:	230e      	movs	r3, #14
 800f8a0:	5ec9      	ldrsh	r1, [r1, r3]
 800f8a2:	f000 f8af 	bl	800fa04 <_close_r>
 800f8a6:	bd10      	pop	{r4, pc}

0800f8a8 <_strtol_l.constprop.0>:
 800f8a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f8aa:	b087      	sub	sp, #28
 800f8ac:	001e      	movs	r6, r3
 800f8ae:	9005      	str	r0, [sp, #20]
 800f8b0:	9101      	str	r1, [sp, #4]
 800f8b2:	9202      	str	r2, [sp, #8]
 800f8b4:	2b01      	cmp	r3, #1
 800f8b6:	d045      	beq.n	800f944 <_strtol_l.constprop.0+0x9c>
 800f8b8:	000b      	movs	r3, r1
 800f8ba:	2e24      	cmp	r6, #36	; 0x24
 800f8bc:	d842      	bhi.n	800f944 <_strtol_l.constprop.0+0x9c>
 800f8be:	4a3f      	ldr	r2, [pc, #252]	; (800f9bc <_strtol_l.constprop.0+0x114>)
 800f8c0:	2108      	movs	r1, #8
 800f8c2:	4694      	mov	ip, r2
 800f8c4:	001a      	movs	r2, r3
 800f8c6:	4660      	mov	r0, ip
 800f8c8:	7814      	ldrb	r4, [r2, #0]
 800f8ca:	3301      	adds	r3, #1
 800f8cc:	5d00      	ldrb	r0, [r0, r4]
 800f8ce:	001d      	movs	r5, r3
 800f8d0:	0007      	movs	r7, r0
 800f8d2:	400f      	ands	r7, r1
 800f8d4:	4208      	tst	r0, r1
 800f8d6:	d1f5      	bne.n	800f8c4 <_strtol_l.constprop.0+0x1c>
 800f8d8:	2c2d      	cmp	r4, #45	; 0x2d
 800f8da:	d13a      	bne.n	800f952 <_strtol_l.constprop.0+0xaa>
 800f8dc:	2701      	movs	r7, #1
 800f8de:	781c      	ldrb	r4, [r3, #0]
 800f8e0:	1c95      	adds	r5, r2, #2
 800f8e2:	2e00      	cmp	r6, #0
 800f8e4:	d065      	beq.n	800f9b2 <_strtol_l.constprop.0+0x10a>
 800f8e6:	2e10      	cmp	r6, #16
 800f8e8:	d109      	bne.n	800f8fe <_strtol_l.constprop.0+0x56>
 800f8ea:	2c30      	cmp	r4, #48	; 0x30
 800f8ec:	d107      	bne.n	800f8fe <_strtol_l.constprop.0+0x56>
 800f8ee:	2220      	movs	r2, #32
 800f8f0:	782b      	ldrb	r3, [r5, #0]
 800f8f2:	4393      	bics	r3, r2
 800f8f4:	2b58      	cmp	r3, #88	; 0x58
 800f8f6:	d157      	bne.n	800f9a8 <_strtol_l.constprop.0+0x100>
 800f8f8:	2610      	movs	r6, #16
 800f8fa:	786c      	ldrb	r4, [r5, #1]
 800f8fc:	3502      	adds	r5, #2
 800f8fe:	4b30      	ldr	r3, [pc, #192]	; (800f9c0 <_strtol_l.constprop.0+0x118>)
 800f900:	0031      	movs	r1, r6
 800f902:	18fb      	adds	r3, r7, r3
 800f904:	0018      	movs	r0, r3
 800f906:	9303      	str	r3, [sp, #12]
 800f908:	f7f0 fca0 	bl	800024c <__aeabi_uidivmod>
 800f90c:	2300      	movs	r3, #0
 800f90e:	2201      	movs	r2, #1
 800f910:	4684      	mov	ip, r0
 800f912:	0018      	movs	r0, r3
 800f914:	9104      	str	r1, [sp, #16]
 800f916:	4252      	negs	r2, r2
 800f918:	0021      	movs	r1, r4
 800f91a:	3930      	subs	r1, #48	; 0x30
 800f91c:	2909      	cmp	r1, #9
 800f91e:	d81d      	bhi.n	800f95c <_strtol_l.constprop.0+0xb4>
 800f920:	000c      	movs	r4, r1
 800f922:	42a6      	cmp	r6, r4
 800f924:	dd28      	ble.n	800f978 <_strtol_l.constprop.0+0xd0>
 800f926:	2b00      	cmp	r3, #0
 800f928:	db24      	blt.n	800f974 <_strtol_l.constprop.0+0xcc>
 800f92a:	0013      	movs	r3, r2
 800f92c:	4584      	cmp	ip, r0
 800f92e:	d306      	bcc.n	800f93e <_strtol_l.constprop.0+0x96>
 800f930:	d102      	bne.n	800f938 <_strtol_l.constprop.0+0x90>
 800f932:	9904      	ldr	r1, [sp, #16]
 800f934:	42a1      	cmp	r1, r4
 800f936:	db02      	blt.n	800f93e <_strtol_l.constprop.0+0x96>
 800f938:	2301      	movs	r3, #1
 800f93a:	4370      	muls	r0, r6
 800f93c:	1820      	adds	r0, r4, r0
 800f93e:	782c      	ldrb	r4, [r5, #0]
 800f940:	3501      	adds	r5, #1
 800f942:	e7e9      	b.n	800f918 <_strtol_l.constprop.0+0x70>
 800f944:	f7ff f878 	bl	800ea38 <__errno>
 800f948:	2316      	movs	r3, #22
 800f94a:	6003      	str	r3, [r0, #0]
 800f94c:	2000      	movs	r0, #0
 800f94e:	b007      	add	sp, #28
 800f950:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f952:	2c2b      	cmp	r4, #43	; 0x2b
 800f954:	d1c5      	bne.n	800f8e2 <_strtol_l.constprop.0+0x3a>
 800f956:	781c      	ldrb	r4, [r3, #0]
 800f958:	1c95      	adds	r5, r2, #2
 800f95a:	e7c2      	b.n	800f8e2 <_strtol_l.constprop.0+0x3a>
 800f95c:	0021      	movs	r1, r4
 800f95e:	3941      	subs	r1, #65	; 0x41
 800f960:	2919      	cmp	r1, #25
 800f962:	d801      	bhi.n	800f968 <_strtol_l.constprop.0+0xc0>
 800f964:	3c37      	subs	r4, #55	; 0x37
 800f966:	e7dc      	b.n	800f922 <_strtol_l.constprop.0+0x7a>
 800f968:	0021      	movs	r1, r4
 800f96a:	3961      	subs	r1, #97	; 0x61
 800f96c:	2919      	cmp	r1, #25
 800f96e:	d803      	bhi.n	800f978 <_strtol_l.constprop.0+0xd0>
 800f970:	3c57      	subs	r4, #87	; 0x57
 800f972:	e7d6      	b.n	800f922 <_strtol_l.constprop.0+0x7a>
 800f974:	0013      	movs	r3, r2
 800f976:	e7e2      	b.n	800f93e <_strtol_l.constprop.0+0x96>
 800f978:	2b00      	cmp	r3, #0
 800f97a:	da09      	bge.n	800f990 <_strtol_l.constprop.0+0xe8>
 800f97c:	2322      	movs	r3, #34	; 0x22
 800f97e:	9a05      	ldr	r2, [sp, #20]
 800f980:	9803      	ldr	r0, [sp, #12]
 800f982:	6013      	str	r3, [r2, #0]
 800f984:	9b02      	ldr	r3, [sp, #8]
 800f986:	2b00      	cmp	r3, #0
 800f988:	d0e1      	beq.n	800f94e <_strtol_l.constprop.0+0xa6>
 800f98a:	1e6b      	subs	r3, r5, #1
 800f98c:	9301      	str	r3, [sp, #4]
 800f98e:	e007      	b.n	800f9a0 <_strtol_l.constprop.0+0xf8>
 800f990:	2f00      	cmp	r7, #0
 800f992:	d000      	beq.n	800f996 <_strtol_l.constprop.0+0xee>
 800f994:	4240      	negs	r0, r0
 800f996:	9a02      	ldr	r2, [sp, #8]
 800f998:	2a00      	cmp	r2, #0
 800f99a:	d0d8      	beq.n	800f94e <_strtol_l.constprop.0+0xa6>
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d1f4      	bne.n	800f98a <_strtol_l.constprop.0+0xe2>
 800f9a0:	9b02      	ldr	r3, [sp, #8]
 800f9a2:	9a01      	ldr	r2, [sp, #4]
 800f9a4:	601a      	str	r2, [r3, #0]
 800f9a6:	e7d2      	b.n	800f94e <_strtol_l.constprop.0+0xa6>
 800f9a8:	2430      	movs	r4, #48	; 0x30
 800f9aa:	2e00      	cmp	r6, #0
 800f9ac:	d1a7      	bne.n	800f8fe <_strtol_l.constprop.0+0x56>
 800f9ae:	3608      	adds	r6, #8
 800f9b0:	e7a5      	b.n	800f8fe <_strtol_l.constprop.0+0x56>
 800f9b2:	2c30      	cmp	r4, #48	; 0x30
 800f9b4:	d09b      	beq.n	800f8ee <_strtol_l.constprop.0+0x46>
 800f9b6:	260a      	movs	r6, #10
 800f9b8:	e7a1      	b.n	800f8fe <_strtol_l.constprop.0+0x56>
 800f9ba:	46c0      	nop			; (mov r8, r8)
 800f9bc:	08013ab5 	.word	0x08013ab5
 800f9c0:	7fffffff 	.word	0x7fffffff

0800f9c4 <strtol>:
 800f9c4:	b510      	push	{r4, lr}
 800f9c6:	0013      	movs	r3, r2
 800f9c8:	000a      	movs	r2, r1
 800f9ca:	0001      	movs	r1, r0
 800f9cc:	4802      	ldr	r0, [pc, #8]	; (800f9d8 <strtol+0x14>)
 800f9ce:	6800      	ldr	r0, [r0, #0]
 800f9d0:	f7ff ff6a 	bl	800f8a8 <_strtol_l.constprop.0>
 800f9d4:	bd10      	pop	{r4, pc}
 800f9d6:	46c0      	nop			; (mov r8, r8)
 800f9d8:	2000009c 	.word	0x2000009c

0800f9dc <_write_r>:
 800f9dc:	b570      	push	{r4, r5, r6, lr}
 800f9de:	0004      	movs	r4, r0
 800f9e0:	0008      	movs	r0, r1
 800f9e2:	0011      	movs	r1, r2
 800f9e4:	001a      	movs	r2, r3
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	4d05      	ldr	r5, [pc, #20]	; (800fa00 <_write_r+0x24>)
 800f9ea:	602b      	str	r3, [r5, #0]
 800f9ec:	f7f4 fe49 	bl	8004682 <_write>
 800f9f0:	1c43      	adds	r3, r0, #1
 800f9f2:	d103      	bne.n	800f9fc <_write_r+0x20>
 800f9f4:	682b      	ldr	r3, [r5, #0]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d000      	beq.n	800f9fc <_write_r+0x20>
 800f9fa:	6023      	str	r3, [r4, #0]
 800f9fc:	bd70      	pop	{r4, r5, r6, pc}
 800f9fe:	46c0      	nop			; (mov r8, r8)
 800fa00:	200021bc 	.word	0x200021bc

0800fa04 <_close_r>:
 800fa04:	2300      	movs	r3, #0
 800fa06:	b570      	push	{r4, r5, r6, lr}
 800fa08:	4d06      	ldr	r5, [pc, #24]	; (800fa24 <_close_r+0x20>)
 800fa0a:	0004      	movs	r4, r0
 800fa0c:	0008      	movs	r0, r1
 800fa0e:	602b      	str	r3, [r5, #0]
 800fa10:	f7f4 fe53 	bl	80046ba <_close>
 800fa14:	1c43      	adds	r3, r0, #1
 800fa16:	d103      	bne.n	800fa20 <_close_r+0x1c>
 800fa18:	682b      	ldr	r3, [r5, #0]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d000      	beq.n	800fa20 <_close_r+0x1c>
 800fa1e:	6023      	str	r3, [r4, #0]
 800fa20:	bd70      	pop	{r4, r5, r6, pc}
 800fa22:	46c0      	nop			; (mov r8, r8)
 800fa24:	200021bc 	.word	0x200021bc

0800fa28 <quorem>:
 800fa28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa2a:	0006      	movs	r6, r0
 800fa2c:	690b      	ldr	r3, [r1, #16]
 800fa2e:	6932      	ldr	r2, [r6, #16]
 800fa30:	b087      	sub	sp, #28
 800fa32:	2000      	movs	r0, #0
 800fa34:	9103      	str	r1, [sp, #12]
 800fa36:	429a      	cmp	r2, r3
 800fa38:	db65      	blt.n	800fb06 <quorem+0xde>
 800fa3a:	3b01      	subs	r3, #1
 800fa3c:	009c      	lsls	r4, r3, #2
 800fa3e:	9300      	str	r3, [sp, #0]
 800fa40:	000b      	movs	r3, r1
 800fa42:	3314      	adds	r3, #20
 800fa44:	9305      	str	r3, [sp, #20]
 800fa46:	191b      	adds	r3, r3, r4
 800fa48:	9304      	str	r3, [sp, #16]
 800fa4a:	0033      	movs	r3, r6
 800fa4c:	3314      	adds	r3, #20
 800fa4e:	9302      	str	r3, [sp, #8]
 800fa50:	191c      	adds	r4, r3, r4
 800fa52:	9b04      	ldr	r3, [sp, #16]
 800fa54:	6827      	ldr	r7, [r4, #0]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	0038      	movs	r0, r7
 800fa5a:	1c5d      	adds	r5, r3, #1
 800fa5c:	0029      	movs	r1, r5
 800fa5e:	9301      	str	r3, [sp, #4]
 800fa60:	f7f0 fb6e 	bl	8000140 <__udivsi3>
 800fa64:	9001      	str	r0, [sp, #4]
 800fa66:	42af      	cmp	r7, r5
 800fa68:	d324      	bcc.n	800fab4 <quorem+0x8c>
 800fa6a:	2500      	movs	r5, #0
 800fa6c:	46ac      	mov	ip, r5
 800fa6e:	9802      	ldr	r0, [sp, #8]
 800fa70:	9f05      	ldr	r7, [sp, #20]
 800fa72:	cf08      	ldmia	r7!, {r3}
 800fa74:	9a01      	ldr	r2, [sp, #4]
 800fa76:	b299      	uxth	r1, r3
 800fa78:	4351      	muls	r1, r2
 800fa7a:	0c1b      	lsrs	r3, r3, #16
 800fa7c:	4353      	muls	r3, r2
 800fa7e:	1949      	adds	r1, r1, r5
 800fa80:	0c0a      	lsrs	r2, r1, #16
 800fa82:	189b      	adds	r3, r3, r2
 800fa84:	6802      	ldr	r2, [r0, #0]
 800fa86:	b289      	uxth	r1, r1
 800fa88:	b292      	uxth	r2, r2
 800fa8a:	4462      	add	r2, ip
 800fa8c:	1a52      	subs	r2, r2, r1
 800fa8e:	6801      	ldr	r1, [r0, #0]
 800fa90:	0c1d      	lsrs	r5, r3, #16
 800fa92:	0c09      	lsrs	r1, r1, #16
 800fa94:	b29b      	uxth	r3, r3
 800fa96:	1acb      	subs	r3, r1, r3
 800fa98:	1411      	asrs	r1, r2, #16
 800fa9a:	185b      	adds	r3, r3, r1
 800fa9c:	1419      	asrs	r1, r3, #16
 800fa9e:	b292      	uxth	r2, r2
 800faa0:	041b      	lsls	r3, r3, #16
 800faa2:	431a      	orrs	r2, r3
 800faa4:	9b04      	ldr	r3, [sp, #16]
 800faa6:	468c      	mov	ip, r1
 800faa8:	c004      	stmia	r0!, {r2}
 800faaa:	42bb      	cmp	r3, r7
 800faac:	d2e1      	bcs.n	800fa72 <quorem+0x4a>
 800faae:	6823      	ldr	r3, [r4, #0]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d030      	beq.n	800fb16 <quorem+0xee>
 800fab4:	0030      	movs	r0, r6
 800fab6:	9903      	ldr	r1, [sp, #12]
 800fab8:	f001 f9ea 	bl	8010e90 <__mcmp>
 800fabc:	2800      	cmp	r0, #0
 800fabe:	db21      	blt.n	800fb04 <quorem+0xdc>
 800fac0:	0030      	movs	r0, r6
 800fac2:	2400      	movs	r4, #0
 800fac4:	9b01      	ldr	r3, [sp, #4]
 800fac6:	9903      	ldr	r1, [sp, #12]
 800fac8:	3301      	adds	r3, #1
 800faca:	9301      	str	r3, [sp, #4]
 800facc:	3014      	adds	r0, #20
 800face:	3114      	adds	r1, #20
 800fad0:	6803      	ldr	r3, [r0, #0]
 800fad2:	c920      	ldmia	r1!, {r5}
 800fad4:	b29a      	uxth	r2, r3
 800fad6:	1914      	adds	r4, r2, r4
 800fad8:	b2aa      	uxth	r2, r5
 800fada:	1aa2      	subs	r2, r4, r2
 800fadc:	0c1b      	lsrs	r3, r3, #16
 800fade:	0c2d      	lsrs	r5, r5, #16
 800fae0:	1414      	asrs	r4, r2, #16
 800fae2:	1b5b      	subs	r3, r3, r5
 800fae4:	191b      	adds	r3, r3, r4
 800fae6:	141c      	asrs	r4, r3, #16
 800fae8:	b292      	uxth	r2, r2
 800faea:	041b      	lsls	r3, r3, #16
 800faec:	4313      	orrs	r3, r2
 800faee:	c008      	stmia	r0!, {r3}
 800faf0:	9b04      	ldr	r3, [sp, #16]
 800faf2:	428b      	cmp	r3, r1
 800faf4:	d2ec      	bcs.n	800fad0 <quorem+0xa8>
 800faf6:	9b00      	ldr	r3, [sp, #0]
 800faf8:	9a02      	ldr	r2, [sp, #8]
 800fafa:	009b      	lsls	r3, r3, #2
 800fafc:	18d3      	adds	r3, r2, r3
 800fafe:	681a      	ldr	r2, [r3, #0]
 800fb00:	2a00      	cmp	r2, #0
 800fb02:	d015      	beq.n	800fb30 <quorem+0x108>
 800fb04:	9801      	ldr	r0, [sp, #4]
 800fb06:	b007      	add	sp, #28
 800fb08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb0a:	6823      	ldr	r3, [r4, #0]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d106      	bne.n	800fb1e <quorem+0xf6>
 800fb10:	9b00      	ldr	r3, [sp, #0]
 800fb12:	3b01      	subs	r3, #1
 800fb14:	9300      	str	r3, [sp, #0]
 800fb16:	9b02      	ldr	r3, [sp, #8]
 800fb18:	3c04      	subs	r4, #4
 800fb1a:	42a3      	cmp	r3, r4
 800fb1c:	d3f5      	bcc.n	800fb0a <quorem+0xe2>
 800fb1e:	9b00      	ldr	r3, [sp, #0]
 800fb20:	6133      	str	r3, [r6, #16]
 800fb22:	e7c7      	b.n	800fab4 <quorem+0x8c>
 800fb24:	681a      	ldr	r2, [r3, #0]
 800fb26:	2a00      	cmp	r2, #0
 800fb28:	d106      	bne.n	800fb38 <quorem+0x110>
 800fb2a:	9a00      	ldr	r2, [sp, #0]
 800fb2c:	3a01      	subs	r2, #1
 800fb2e:	9200      	str	r2, [sp, #0]
 800fb30:	9a02      	ldr	r2, [sp, #8]
 800fb32:	3b04      	subs	r3, #4
 800fb34:	429a      	cmp	r2, r3
 800fb36:	d3f5      	bcc.n	800fb24 <quorem+0xfc>
 800fb38:	9b00      	ldr	r3, [sp, #0]
 800fb3a:	6133      	str	r3, [r6, #16]
 800fb3c:	e7e2      	b.n	800fb04 <quorem+0xdc>
	...

0800fb40 <_dtoa_r>:
 800fb40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb42:	b09d      	sub	sp, #116	; 0x74
 800fb44:	9202      	str	r2, [sp, #8]
 800fb46:	9303      	str	r3, [sp, #12]
 800fb48:	9b02      	ldr	r3, [sp, #8]
 800fb4a:	9c03      	ldr	r4, [sp, #12]
 800fb4c:	9308      	str	r3, [sp, #32]
 800fb4e:	9409      	str	r4, [sp, #36]	; 0x24
 800fb50:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800fb52:	0007      	movs	r7, r0
 800fb54:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800fb56:	2c00      	cmp	r4, #0
 800fb58:	d10e      	bne.n	800fb78 <_dtoa_r+0x38>
 800fb5a:	2010      	movs	r0, #16
 800fb5c:	f000 feee 	bl	801093c <malloc>
 800fb60:	1e02      	subs	r2, r0, #0
 800fb62:	6278      	str	r0, [r7, #36]	; 0x24
 800fb64:	d104      	bne.n	800fb70 <_dtoa_r+0x30>
 800fb66:	21ea      	movs	r1, #234	; 0xea
 800fb68:	4bc7      	ldr	r3, [pc, #796]	; (800fe88 <_dtoa_r+0x348>)
 800fb6a:	48c8      	ldr	r0, [pc, #800]	; (800fe8c <_dtoa_r+0x34c>)
 800fb6c:	f001 fd62 	bl	8011634 <__assert_func>
 800fb70:	6044      	str	r4, [r0, #4]
 800fb72:	6084      	str	r4, [r0, #8]
 800fb74:	6004      	str	r4, [r0, #0]
 800fb76:	60c4      	str	r4, [r0, #12]
 800fb78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb7a:	6819      	ldr	r1, [r3, #0]
 800fb7c:	2900      	cmp	r1, #0
 800fb7e:	d00a      	beq.n	800fb96 <_dtoa_r+0x56>
 800fb80:	685a      	ldr	r2, [r3, #4]
 800fb82:	2301      	movs	r3, #1
 800fb84:	4093      	lsls	r3, r2
 800fb86:	604a      	str	r2, [r1, #4]
 800fb88:	608b      	str	r3, [r1, #8]
 800fb8a:	0038      	movs	r0, r7
 800fb8c:	f000 ff40 	bl	8010a10 <_Bfree>
 800fb90:	2200      	movs	r2, #0
 800fb92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb94:	601a      	str	r2, [r3, #0]
 800fb96:	9b03      	ldr	r3, [sp, #12]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	da20      	bge.n	800fbde <_dtoa_r+0x9e>
 800fb9c:	2301      	movs	r3, #1
 800fb9e:	602b      	str	r3, [r5, #0]
 800fba0:	9b03      	ldr	r3, [sp, #12]
 800fba2:	005b      	lsls	r3, r3, #1
 800fba4:	085b      	lsrs	r3, r3, #1
 800fba6:	9309      	str	r3, [sp, #36]	; 0x24
 800fba8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800fbaa:	4bb9      	ldr	r3, [pc, #740]	; (800fe90 <_dtoa_r+0x350>)
 800fbac:	4ab8      	ldr	r2, [pc, #736]	; (800fe90 <_dtoa_r+0x350>)
 800fbae:	402b      	ands	r3, r5
 800fbb0:	4293      	cmp	r3, r2
 800fbb2:	d117      	bne.n	800fbe4 <_dtoa_r+0xa4>
 800fbb4:	4bb7      	ldr	r3, [pc, #732]	; (800fe94 <_dtoa_r+0x354>)
 800fbb6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800fbb8:	0328      	lsls	r0, r5, #12
 800fbba:	6013      	str	r3, [r2, #0]
 800fbbc:	9b02      	ldr	r3, [sp, #8]
 800fbbe:	0b00      	lsrs	r0, r0, #12
 800fbc0:	4318      	orrs	r0, r3
 800fbc2:	d101      	bne.n	800fbc8 <_dtoa_r+0x88>
 800fbc4:	f000 fdbf 	bl	8010746 <_dtoa_r+0xc06>
 800fbc8:	48b3      	ldr	r0, [pc, #716]	; (800fe98 <_dtoa_r+0x358>)
 800fbca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800fbcc:	9006      	str	r0, [sp, #24]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d002      	beq.n	800fbd8 <_dtoa_r+0x98>
 800fbd2:	4bb2      	ldr	r3, [pc, #712]	; (800fe9c <_dtoa_r+0x35c>)
 800fbd4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800fbd6:	6013      	str	r3, [r2, #0]
 800fbd8:	9806      	ldr	r0, [sp, #24]
 800fbda:	b01d      	add	sp, #116	; 0x74
 800fbdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbde:	2300      	movs	r3, #0
 800fbe0:	602b      	str	r3, [r5, #0]
 800fbe2:	e7e1      	b.n	800fba8 <_dtoa_r+0x68>
 800fbe4:	9b08      	ldr	r3, [sp, #32]
 800fbe6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800fbe8:	9312      	str	r3, [sp, #72]	; 0x48
 800fbea:	9413      	str	r4, [sp, #76]	; 0x4c
 800fbec:	9812      	ldr	r0, [sp, #72]	; 0x48
 800fbee:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800fbf0:	2200      	movs	r2, #0
 800fbf2:	2300      	movs	r3, #0
 800fbf4:	f7f0 fc2a 	bl	800044c <__aeabi_dcmpeq>
 800fbf8:	1e04      	subs	r4, r0, #0
 800fbfa:	d009      	beq.n	800fc10 <_dtoa_r+0xd0>
 800fbfc:	2301      	movs	r3, #1
 800fbfe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800fc00:	6013      	str	r3, [r2, #0]
 800fc02:	4ba7      	ldr	r3, [pc, #668]	; (800fea0 <_dtoa_r+0x360>)
 800fc04:	9306      	str	r3, [sp, #24]
 800fc06:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d0e5      	beq.n	800fbd8 <_dtoa_r+0x98>
 800fc0c:	4ba5      	ldr	r3, [pc, #660]	; (800fea4 <_dtoa_r+0x364>)
 800fc0e:	e7e1      	b.n	800fbd4 <_dtoa_r+0x94>
 800fc10:	ab1a      	add	r3, sp, #104	; 0x68
 800fc12:	9301      	str	r3, [sp, #4]
 800fc14:	ab1b      	add	r3, sp, #108	; 0x6c
 800fc16:	9300      	str	r3, [sp, #0]
 800fc18:	0038      	movs	r0, r7
 800fc1a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fc1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fc1e:	f001 f9eb 	bl	8010ff8 <__d2b>
 800fc22:	006e      	lsls	r6, r5, #1
 800fc24:	9005      	str	r0, [sp, #20]
 800fc26:	0d76      	lsrs	r6, r6, #21
 800fc28:	d100      	bne.n	800fc2c <_dtoa_r+0xec>
 800fc2a:	e07c      	b.n	800fd26 <_dtoa_r+0x1e6>
 800fc2c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800fc2e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800fc30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fc32:	4a9d      	ldr	r2, [pc, #628]	; (800fea8 <_dtoa_r+0x368>)
 800fc34:	031b      	lsls	r3, r3, #12
 800fc36:	0b1b      	lsrs	r3, r3, #12
 800fc38:	431a      	orrs	r2, r3
 800fc3a:	0011      	movs	r1, r2
 800fc3c:	4b9b      	ldr	r3, [pc, #620]	; (800feac <_dtoa_r+0x36c>)
 800fc3e:	9418      	str	r4, [sp, #96]	; 0x60
 800fc40:	18f6      	adds	r6, r6, r3
 800fc42:	2200      	movs	r2, #0
 800fc44:	4b9a      	ldr	r3, [pc, #616]	; (800feb0 <_dtoa_r+0x370>)
 800fc46:	f7f2 fa4b 	bl	80020e0 <__aeabi_dsub>
 800fc4a:	4a9a      	ldr	r2, [pc, #616]	; (800feb4 <_dtoa_r+0x374>)
 800fc4c:	4b9a      	ldr	r3, [pc, #616]	; (800feb8 <_dtoa_r+0x378>)
 800fc4e:	f7f1 ffdb 	bl	8001c08 <__aeabi_dmul>
 800fc52:	4a9a      	ldr	r2, [pc, #616]	; (800febc <_dtoa_r+0x37c>)
 800fc54:	4b9a      	ldr	r3, [pc, #616]	; (800fec0 <_dtoa_r+0x380>)
 800fc56:	f7f1 f899 	bl	8000d8c <__aeabi_dadd>
 800fc5a:	0004      	movs	r4, r0
 800fc5c:	0030      	movs	r0, r6
 800fc5e:	000d      	movs	r5, r1
 800fc60:	f7f2 fe24 	bl	80028ac <__aeabi_i2d>
 800fc64:	4a97      	ldr	r2, [pc, #604]	; (800fec4 <_dtoa_r+0x384>)
 800fc66:	4b98      	ldr	r3, [pc, #608]	; (800fec8 <_dtoa_r+0x388>)
 800fc68:	f7f1 ffce 	bl	8001c08 <__aeabi_dmul>
 800fc6c:	0002      	movs	r2, r0
 800fc6e:	000b      	movs	r3, r1
 800fc70:	0020      	movs	r0, r4
 800fc72:	0029      	movs	r1, r5
 800fc74:	f7f1 f88a 	bl	8000d8c <__aeabi_dadd>
 800fc78:	0004      	movs	r4, r0
 800fc7a:	000d      	movs	r5, r1
 800fc7c:	f7f2 fde0 	bl	8002840 <__aeabi_d2iz>
 800fc80:	2200      	movs	r2, #0
 800fc82:	9002      	str	r0, [sp, #8]
 800fc84:	2300      	movs	r3, #0
 800fc86:	0020      	movs	r0, r4
 800fc88:	0029      	movs	r1, r5
 800fc8a:	f7f0 fbe5 	bl	8000458 <__aeabi_dcmplt>
 800fc8e:	2800      	cmp	r0, #0
 800fc90:	d00b      	beq.n	800fcaa <_dtoa_r+0x16a>
 800fc92:	9802      	ldr	r0, [sp, #8]
 800fc94:	f7f2 fe0a 	bl	80028ac <__aeabi_i2d>
 800fc98:	002b      	movs	r3, r5
 800fc9a:	0022      	movs	r2, r4
 800fc9c:	f7f0 fbd6 	bl	800044c <__aeabi_dcmpeq>
 800fca0:	4243      	negs	r3, r0
 800fca2:	4158      	adcs	r0, r3
 800fca4:	9b02      	ldr	r3, [sp, #8]
 800fca6:	1a1b      	subs	r3, r3, r0
 800fca8:	9302      	str	r3, [sp, #8]
 800fcaa:	2301      	movs	r3, #1
 800fcac:	9316      	str	r3, [sp, #88]	; 0x58
 800fcae:	9b02      	ldr	r3, [sp, #8]
 800fcb0:	2b16      	cmp	r3, #22
 800fcb2:	d80f      	bhi.n	800fcd4 <_dtoa_r+0x194>
 800fcb4:	9812      	ldr	r0, [sp, #72]	; 0x48
 800fcb6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800fcb8:	00da      	lsls	r2, r3, #3
 800fcba:	4b84      	ldr	r3, [pc, #528]	; (800fecc <_dtoa_r+0x38c>)
 800fcbc:	189b      	adds	r3, r3, r2
 800fcbe:	681a      	ldr	r2, [r3, #0]
 800fcc0:	685b      	ldr	r3, [r3, #4]
 800fcc2:	f7f0 fbc9 	bl	8000458 <__aeabi_dcmplt>
 800fcc6:	2800      	cmp	r0, #0
 800fcc8:	d049      	beq.n	800fd5e <_dtoa_r+0x21e>
 800fcca:	9b02      	ldr	r3, [sp, #8]
 800fccc:	3b01      	subs	r3, #1
 800fcce:	9302      	str	r3, [sp, #8]
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	9316      	str	r3, [sp, #88]	; 0x58
 800fcd4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800fcd6:	1b9e      	subs	r6, r3, r6
 800fcd8:	2300      	movs	r3, #0
 800fcda:	930a      	str	r3, [sp, #40]	; 0x28
 800fcdc:	0033      	movs	r3, r6
 800fcde:	3b01      	subs	r3, #1
 800fce0:	930d      	str	r3, [sp, #52]	; 0x34
 800fce2:	d504      	bpl.n	800fcee <_dtoa_r+0x1ae>
 800fce4:	2301      	movs	r3, #1
 800fce6:	1b9b      	subs	r3, r3, r6
 800fce8:	930a      	str	r3, [sp, #40]	; 0x28
 800fcea:	2300      	movs	r3, #0
 800fcec:	930d      	str	r3, [sp, #52]	; 0x34
 800fcee:	9b02      	ldr	r3, [sp, #8]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	db36      	blt.n	800fd62 <_dtoa_r+0x222>
 800fcf4:	9a02      	ldr	r2, [sp, #8]
 800fcf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fcf8:	4694      	mov	ip, r2
 800fcfa:	4463      	add	r3, ip
 800fcfc:	930d      	str	r3, [sp, #52]	; 0x34
 800fcfe:	2300      	movs	r3, #0
 800fd00:	9215      	str	r2, [sp, #84]	; 0x54
 800fd02:	930e      	str	r3, [sp, #56]	; 0x38
 800fd04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fd06:	2401      	movs	r4, #1
 800fd08:	2b09      	cmp	r3, #9
 800fd0a:	d864      	bhi.n	800fdd6 <_dtoa_r+0x296>
 800fd0c:	2b05      	cmp	r3, #5
 800fd0e:	dd02      	ble.n	800fd16 <_dtoa_r+0x1d6>
 800fd10:	2400      	movs	r4, #0
 800fd12:	3b04      	subs	r3, #4
 800fd14:	9322      	str	r3, [sp, #136]	; 0x88
 800fd16:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fd18:	1e98      	subs	r0, r3, #2
 800fd1a:	2803      	cmp	r0, #3
 800fd1c:	d864      	bhi.n	800fde8 <_dtoa_r+0x2a8>
 800fd1e:	f7f0 f9fb 	bl	8000118 <__gnu_thumb1_case_uqi>
 800fd22:	3829      	.short	0x3829
 800fd24:	5836      	.short	0x5836
 800fd26:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800fd28:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800fd2a:	189e      	adds	r6, r3, r2
 800fd2c:	4b68      	ldr	r3, [pc, #416]	; (800fed0 <_dtoa_r+0x390>)
 800fd2e:	18f2      	adds	r2, r6, r3
 800fd30:	2a20      	cmp	r2, #32
 800fd32:	dd0f      	ble.n	800fd54 <_dtoa_r+0x214>
 800fd34:	2340      	movs	r3, #64	; 0x40
 800fd36:	1a9b      	subs	r3, r3, r2
 800fd38:	409d      	lsls	r5, r3
 800fd3a:	4b66      	ldr	r3, [pc, #408]	; (800fed4 <_dtoa_r+0x394>)
 800fd3c:	9802      	ldr	r0, [sp, #8]
 800fd3e:	18f3      	adds	r3, r6, r3
 800fd40:	40d8      	lsrs	r0, r3
 800fd42:	4328      	orrs	r0, r5
 800fd44:	f7f2 fde2 	bl	800290c <__aeabi_ui2d>
 800fd48:	2301      	movs	r3, #1
 800fd4a:	4c63      	ldr	r4, [pc, #396]	; (800fed8 <_dtoa_r+0x398>)
 800fd4c:	3e01      	subs	r6, #1
 800fd4e:	1909      	adds	r1, r1, r4
 800fd50:	9318      	str	r3, [sp, #96]	; 0x60
 800fd52:	e776      	b.n	800fc42 <_dtoa_r+0x102>
 800fd54:	2320      	movs	r3, #32
 800fd56:	9802      	ldr	r0, [sp, #8]
 800fd58:	1a9b      	subs	r3, r3, r2
 800fd5a:	4098      	lsls	r0, r3
 800fd5c:	e7f2      	b.n	800fd44 <_dtoa_r+0x204>
 800fd5e:	9016      	str	r0, [sp, #88]	; 0x58
 800fd60:	e7b8      	b.n	800fcd4 <_dtoa_r+0x194>
 800fd62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd64:	9a02      	ldr	r2, [sp, #8]
 800fd66:	1a9b      	subs	r3, r3, r2
 800fd68:	930a      	str	r3, [sp, #40]	; 0x28
 800fd6a:	4253      	negs	r3, r2
 800fd6c:	930e      	str	r3, [sp, #56]	; 0x38
 800fd6e:	2300      	movs	r3, #0
 800fd70:	9315      	str	r3, [sp, #84]	; 0x54
 800fd72:	e7c7      	b.n	800fd04 <_dtoa_r+0x1c4>
 800fd74:	2300      	movs	r3, #0
 800fd76:	930f      	str	r3, [sp, #60]	; 0x3c
 800fd78:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800fd7a:	930c      	str	r3, [sp, #48]	; 0x30
 800fd7c:	9307      	str	r3, [sp, #28]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	dc13      	bgt.n	800fdaa <_dtoa_r+0x26a>
 800fd82:	2301      	movs	r3, #1
 800fd84:	001a      	movs	r2, r3
 800fd86:	930c      	str	r3, [sp, #48]	; 0x30
 800fd88:	9307      	str	r3, [sp, #28]
 800fd8a:	9223      	str	r2, [sp, #140]	; 0x8c
 800fd8c:	e00d      	b.n	800fdaa <_dtoa_r+0x26a>
 800fd8e:	2301      	movs	r3, #1
 800fd90:	e7f1      	b.n	800fd76 <_dtoa_r+0x236>
 800fd92:	2300      	movs	r3, #0
 800fd94:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800fd96:	930f      	str	r3, [sp, #60]	; 0x3c
 800fd98:	4694      	mov	ip, r2
 800fd9a:	9b02      	ldr	r3, [sp, #8]
 800fd9c:	4463      	add	r3, ip
 800fd9e:	930c      	str	r3, [sp, #48]	; 0x30
 800fda0:	3301      	adds	r3, #1
 800fda2:	9307      	str	r3, [sp, #28]
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	dc00      	bgt.n	800fdaa <_dtoa_r+0x26a>
 800fda8:	2301      	movs	r3, #1
 800fdaa:	2200      	movs	r2, #0
 800fdac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fdae:	6042      	str	r2, [r0, #4]
 800fdb0:	3204      	adds	r2, #4
 800fdb2:	0015      	movs	r5, r2
 800fdb4:	3514      	adds	r5, #20
 800fdb6:	6841      	ldr	r1, [r0, #4]
 800fdb8:	429d      	cmp	r5, r3
 800fdba:	d919      	bls.n	800fdf0 <_dtoa_r+0x2b0>
 800fdbc:	0038      	movs	r0, r7
 800fdbe:	f000 fde3 	bl	8010988 <_Balloc>
 800fdc2:	9006      	str	r0, [sp, #24]
 800fdc4:	2800      	cmp	r0, #0
 800fdc6:	d117      	bne.n	800fdf8 <_dtoa_r+0x2b8>
 800fdc8:	21d5      	movs	r1, #213	; 0xd5
 800fdca:	0002      	movs	r2, r0
 800fdcc:	4b43      	ldr	r3, [pc, #268]	; (800fedc <_dtoa_r+0x39c>)
 800fdce:	0049      	lsls	r1, r1, #1
 800fdd0:	e6cb      	b.n	800fb6a <_dtoa_r+0x2a>
 800fdd2:	2301      	movs	r3, #1
 800fdd4:	e7de      	b.n	800fd94 <_dtoa_r+0x254>
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	940f      	str	r4, [sp, #60]	; 0x3c
 800fdda:	9322      	str	r3, [sp, #136]	; 0x88
 800fddc:	3b01      	subs	r3, #1
 800fdde:	930c      	str	r3, [sp, #48]	; 0x30
 800fde0:	9307      	str	r3, [sp, #28]
 800fde2:	2200      	movs	r2, #0
 800fde4:	3313      	adds	r3, #19
 800fde6:	e7d0      	b.n	800fd8a <_dtoa_r+0x24a>
 800fde8:	2301      	movs	r3, #1
 800fdea:	930f      	str	r3, [sp, #60]	; 0x3c
 800fdec:	3b02      	subs	r3, #2
 800fdee:	e7f6      	b.n	800fdde <_dtoa_r+0x29e>
 800fdf0:	3101      	adds	r1, #1
 800fdf2:	6041      	str	r1, [r0, #4]
 800fdf4:	0052      	lsls	r2, r2, #1
 800fdf6:	e7dc      	b.n	800fdb2 <_dtoa_r+0x272>
 800fdf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdfa:	9a06      	ldr	r2, [sp, #24]
 800fdfc:	601a      	str	r2, [r3, #0]
 800fdfe:	9b07      	ldr	r3, [sp, #28]
 800fe00:	2b0e      	cmp	r3, #14
 800fe02:	d900      	bls.n	800fe06 <_dtoa_r+0x2c6>
 800fe04:	e0eb      	b.n	800ffde <_dtoa_r+0x49e>
 800fe06:	2c00      	cmp	r4, #0
 800fe08:	d100      	bne.n	800fe0c <_dtoa_r+0x2cc>
 800fe0a:	e0e8      	b.n	800ffde <_dtoa_r+0x49e>
 800fe0c:	9b02      	ldr	r3, [sp, #8]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	dd68      	ble.n	800fee4 <_dtoa_r+0x3a4>
 800fe12:	001a      	movs	r2, r3
 800fe14:	210f      	movs	r1, #15
 800fe16:	4b2d      	ldr	r3, [pc, #180]	; (800fecc <_dtoa_r+0x38c>)
 800fe18:	400a      	ands	r2, r1
 800fe1a:	00d2      	lsls	r2, r2, #3
 800fe1c:	189b      	adds	r3, r3, r2
 800fe1e:	681d      	ldr	r5, [r3, #0]
 800fe20:	685e      	ldr	r6, [r3, #4]
 800fe22:	9b02      	ldr	r3, [sp, #8]
 800fe24:	111c      	asrs	r4, r3, #4
 800fe26:	2302      	movs	r3, #2
 800fe28:	9310      	str	r3, [sp, #64]	; 0x40
 800fe2a:	9b02      	ldr	r3, [sp, #8]
 800fe2c:	05db      	lsls	r3, r3, #23
 800fe2e:	d50b      	bpl.n	800fe48 <_dtoa_r+0x308>
 800fe30:	4b2b      	ldr	r3, [pc, #172]	; (800fee0 <_dtoa_r+0x3a0>)
 800fe32:	400c      	ands	r4, r1
 800fe34:	6a1a      	ldr	r2, [r3, #32]
 800fe36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe38:	9812      	ldr	r0, [sp, #72]	; 0x48
 800fe3a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800fe3c:	f7f1 fae2 	bl	8001404 <__aeabi_ddiv>
 800fe40:	2303      	movs	r3, #3
 800fe42:	9008      	str	r0, [sp, #32]
 800fe44:	9109      	str	r1, [sp, #36]	; 0x24
 800fe46:	9310      	str	r3, [sp, #64]	; 0x40
 800fe48:	4b25      	ldr	r3, [pc, #148]	; (800fee0 <_dtoa_r+0x3a0>)
 800fe4a:	9314      	str	r3, [sp, #80]	; 0x50
 800fe4c:	2c00      	cmp	r4, #0
 800fe4e:	d108      	bne.n	800fe62 <_dtoa_r+0x322>
 800fe50:	9808      	ldr	r0, [sp, #32]
 800fe52:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fe54:	002a      	movs	r2, r5
 800fe56:	0033      	movs	r3, r6
 800fe58:	f7f1 fad4 	bl	8001404 <__aeabi_ddiv>
 800fe5c:	9008      	str	r0, [sp, #32]
 800fe5e:	9109      	str	r1, [sp, #36]	; 0x24
 800fe60:	e05c      	b.n	800ff1c <_dtoa_r+0x3dc>
 800fe62:	2301      	movs	r3, #1
 800fe64:	421c      	tst	r4, r3
 800fe66:	d00b      	beq.n	800fe80 <_dtoa_r+0x340>
 800fe68:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fe6a:	0028      	movs	r0, r5
 800fe6c:	3301      	adds	r3, #1
 800fe6e:	9310      	str	r3, [sp, #64]	; 0x40
 800fe70:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fe72:	0031      	movs	r1, r6
 800fe74:	681a      	ldr	r2, [r3, #0]
 800fe76:	685b      	ldr	r3, [r3, #4]
 800fe78:	f7f1 fec6 	bl	8001c08 <__aeabi_dmul>
 800fe7c:	0005      	movs	r5, r0
 800fe7e:	000e      	movs	r6, r1
 800fe80:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fe82:	1064      	asrs	r4, r4, #1
 800fe84:	3308      	adds	r3, #8
 800fe86:	e7e0      	b.n	800fe4a <_dtoa_r+0x30a>
 800fe88:	08013bc2 	.word	0x08013bc2
 800fe8c:	08013bd9 	.word	0x08013bd9
 800fe90:	7ff00000 	.word	0x7ff00000
 800fe94:	0000270f 	.word	0x0000270f
 800fe98:	08013bbe 	.word	0x08013bbe
 800fe9c:	08013bc1 	.word	0x08013bc1
 800fea0:	08013a90 	.word	0x08013a90
 800fea4:	08013a91 	.word	0x08013a91
 800fea8:	3ff00000 	.word	0x3ff00000
 800feac:	fffffc01 	.word	0xfffffc01
 800feb0:	3ff80000 	.word	0x3ff80000
 800feb4:	636f4361 	.word	0x636f4361
 800feb8:	3fd287a7 	.word	0x3fd287a7
 800febc:	8b60c8b3 	.word	0x8b60c8b3
 800fec0:	3fc68a28 	.word	0x3fc68a28
 800fec4:	509f79fb 	.word	0x509f79fb
 800fec8:	3fd34413 	.word	0x3fd34413
 800fecc:	08013cd0 	.word	0x08013cd0
 800fed0:	00000432 	.word	0x00000432
 800fed4:	00000412 	.word	0x00000412
 800fed8:	fe100000 	.word	0xfe100000
 800fedc:	08013c34 	.word	0x08013c34
 800fee0:	08013ca8 	.word	0x08013ca8
 800fee4:	2302      	movs	r3, #2
 800fee6:	9310      	str	r3, [sp, #64]	; 0x40
 800fee8:	9b02      	ldr	r3, [sp, #8]
 800feea:	2b00      	cmp	r3, #0
 800feec:	d016      	beq.n	800ff1c <_dtoa_r+0x3dc>
 800feee:	9812      	ldr	r0, [sp, #72]	; 0x48
 800fef0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800fef2:	425c      	negs	r4, r3
 800fef4:	230f      	movs	r3, #15
 800fef6:	4ab6      	ldr	r2, [pc, #728]	; (80101d0 <_dtoa_r+0x690>)
 800fef8:	4023      	ands	r3, r4
 800fefa:	00db      	lsls	r3, r3, #3
 800fefc:	18d3      	adds	r3, r2, r3
 800fefe:	681a      	ldr	r2, [r3, #0]
 800ff00:	685b      	ldr	r3, [r3, #4]
 800ff02:	f7f1 fe81 	bl	8001c08 <__aeabi_dmul>
 800ff06:	2601      	movs	r6, #1
 800ff08:	2300      	movs	r3, #0
 800ff0a:	9008      	str	r0, [sp, #32]
 800ff0c:	9109      	str	r1, [sp, #36]	; 0x24
 800ff0e:	4db1      	ldr	r5, [pc, #708]	; (80101d4 <_dtoa_r+0x694>)
 800ff10:	1124      	asrs	r4, r4, #4
 800ff12:	2c00      	cmp	r4, #0
 800ff14:	d000      	beq.n	800ff18 <_dtoa_r+0x3d8>
 800ff16:	e094      	b.n	8010042 <_dtoa_r+0x502>
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d19f      	bne.n	800fe5c <_dtoa_r+0x31c>
 800ff1c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d100      	bne.n	800ff24 <_dtoa_r+0x3e4>
 800ff22:	e09b      	b.n	801005c <_dtoa_r+0x51c>
 800ff24:	9c08      	ldr	r4, [sp, #32]
 800ff26:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ff28:	2200      	movs	r2, #0
 800ff2a:	0020      	movs	r0, r4
 800ff2c:	0029      	movs	r1, r5
 800ff2e:	4baa      	ldr	r3, [pc, #680]	; (80101d8 <_dtoa_r+0x698>)
 800ff30:	f7f0 fa92 	bl	8000458 <__aeabi_dcmplt>
 800ff34:	2800      	cmp	r0, #0
 800ff36:	d100      	bne.n	800ff3a <_dtoa_r+0x3fa>
 800ff38:	e090      	b.n	801005c <_dtoa_r+0x51c>
 800ff3a:	9b07      	ldr	r3, [sp, #28]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d100      	bne.n	800ff42 <_dtoa_r+0x402>
 800ff40:	e08c      	b.n	801005c <_dtoa_r+0x51c>
 800ff42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	dd46      	ble.n	800ffd6 <_dtoa_r+0x496>
 800ff48:	9b02      	ldr	r3, [sp, #8]
 800ff4a:	2200      	movs	r2, #0
 800ff4c:	0020      	movs	r0, r4
 800ff4e:	0029      	movs	r1, r5
 800ff50:	1e5e      	subs	r6, r3, #1
 800ff52:	4ba2      	ldr	r3, [pc, #648]	; (80101dc <_dtoa_r+0x69c>)
 800ff54:	f7f1 fe58 	bl	8001c08 <__aeabi_dmul>
 800ff58:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ff5a:	9008      	str	r0, [sp, #32]
 800ff5c:	9109      	str	r1, [sp, #36]	; 0x24
 800ff5e:	3301      	adds	r3, #1
 800ff60:	9310      	str	r3, [sp, #64]	; 0x40
 800ff62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ff64:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ff66:	9c08      	ldr	r4, [sp, #32]
 800ff68:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ff6a:	9314      	str	r3, [sp, #80]	; 0x50
 800ff6c:	f7f2 fc9e 	bl	80028ac <__aeabi_i2d>
 800ff70:	0022      	movs	r2, r4
 800ff72:	002b      	movs	r3, r5
 800ff74:	f7f1 fe48 	bl	8001c08 <__aeabi_dmul>
 800ff78:	2200      	movs	r2, #0
 800ff7a:	4b99      	ldr	r3, [pc, #612]	; (80101e0 <_dtoa_r+0x6a0>)
 800ff7c:	f7f0 ff06 	bl	8000d8c <__aeabi_dadd>
 800ff80:	9010      	str	r0, [sp, #64]	; 0x40
 800ff82:	9111      	str	r1, [sp, #68]	; 0x44
 800ff84:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ff86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ff88:	9208      	str	r2, [sp, #32]
 800ff8a:	9309      	str	r3, [sp, #36]	; 0x24
 800ff8c:	4a95      	ldr	r2, [pc, #596]	; (80101e4 <_dtoa_r+0x6a4>)
 800ff8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ff90:	4694      	mov	ip, r2
 800ff92:	4463      	add	r3, ip
 800ff94:	9317      	str	r3, [sp, #92]	; 0x5c
 800ff96:	9309      	str	r3, [sp, #36]	; 0x24
 800ff98:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d161      	bne.n	8010062 <_dtoa_r+0x522>
 800ff9e:	2200      	movs	r2, #0
 800ffa0:	0020      	movs	r0, r4
 800ffa2:	0029      	movs	r1, r5
 800ffa4:	4b90      	ldr	r3, [pc, #576]	; (80101e8 <_dtoa_r+0x6a8>)
 800ffa6:	f7f2 f89b 	bl	80020e0 <__aeabi_dsub>
 800ffaa:	9a08      	ldr	r2, [sp, #32]
 800ffac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ffae:	0004      	movs	r4, r0
 800ffb0:	000d      	movs	r5, r1
 800ffb2:	f7f0 fa65 	bl	8000480 <__aeabi_dcmpgt>
 800ffb6:	2800      	cmp	r0, #0
 800ffb8:	d000      	beq.n	800ffbc <_dtoa_r+0x47c>
 800ffba:	e2af      	b.n	801051c <_dtoa_r+0x9dc>
 800ffbc:	488b      	ldr	r0, [pc, #556]	; (80101ec <_dtoa_r+0x6ac>)
 800ffbe:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ffc0:	4684      	mov	ip, r0
 800ffc2:	4461      	add	r1, ip
 800ffc4:	000b      	movs	r3, r1
 800ffc6:	0020      	movs	r0, r4
 800ffc8:	0029      	movs	r1, r5
 800ffca:	9a08      	ldr	r2, [sp, #32]
 800ffcc:	f7f0 fa44 	bl	8000458 <__aeabi_dcmplt>
 800ffd0:	2800      	cmp	r0, #0
 800ffd2:	d000      	beq.n	800ffd6 <_dtoa_r+0x496>
 800ffd4:	e29f      	b.n	8010516 <_dtoa_r+0x9d6>
 800ffd6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ffd8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800ffda:	9308      	str	r3, [sp, #32]
 800ffdc:	9409      	str	r4, [sp, #36]	; 0x24
 800ffde:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	da00      	bge.n	800ffe6 <_dtoa_r+0x4a6>
 800ffe4:	e172      	b.n	80102cc <_dtoa_r+0x78c>
 800ffe6:	9a02      	ldr	r2, [sp, #8]
 800ffe8:	2a0e      	cmp	r2, #14
 800ffea:	dd00      	ble.n	800ffee <_dtoa_r+0x4ae>
 800ffec:	e16e      	b.n	80102cc <_dtoa_r+0x78c>
 800ffee:	4b78      	ldr	r3, [pc, #480]	; (80101d0 <_dtoa_r+0x690>)
 800fff0:	00d2      	lsls	r2, r2, #3
 800fff2:	189b      	adds	r3, r3, r2
 800fff4:	685c      	ldr	r4, [r3, #4]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	930a      	str	r3, [sp, #40]	; 0x28
 800fffa:	940b      	str	r4, [sp, #44]	; 0x2c
 800fffc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800fffe:	2b00      	cmp	r3, #0
 8010000:	db00      	blt.n	8010004 <_dtoa_r+0x4c4>
 8010002:	e0f7      	b.n	80101f4 <_dtoa_r+0x6b4>
 8010004:	9b07      	ldr	r3, [sp, #28]
 8010006:	2b00      	cmp	r3, #0
 8010008:	dd00      	ble.n	801000c <_dtoa_r+0x4cc>
 801000a:	e0f3      	b.n	80101f4 <_dtoa_r+0x6b4>
 801000c:	d000      	beq.n	8010010 <_dtoa_r+0x4d0>
 801000e:	e282      	b.n	8010516 <_dtoa_r+0x9d6>
 8010010:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010012:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010014:	2200      	movs	r2, #0
 8010016:	4b74      	ldr	r3, [pc, #464]	; (80101e8 <_dtoa_r+0x6a8>)
 8010018:	f7f1 fdf6 	bl	8001c08 <__aeabi_dmul>
 801001c:	9a08      	ldr	r2, [sp, #32]
 801001e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010020:	f7f0 fa38 	bl	8000494 <__aeabi_dcmpge>
 8010024:	9e07      	ldr	r6, [sp, #28]
 8010026:	0035      	movs	r5, r6
 8010028:	2800      	cmp	r0, #0
 801002a:	d000      	beq.n	801002e <_dtoa_r+0x4ee>
 801002c:	e259      	b.n	80104e2 <_dtoa_r+0x9a2>
 801002e:	9b06      	ldr	r3, [sp, #24]
 8010030:	9a06      	ldr	r2, [sp, #24]
 8010032:	3301      	adds	r3, #1
 8010034:	9308      	str	r3, [sp, #32]
 8010036:	2331      	movs	r3, #49	; 0x31
 8010038:	7013      	strb	r3, [r2, #0]
 801003a:	9b02      	ldr	r3, [sp, #8]
 801003c:	3301      	adds	r3, #1
 801003e:	9302      	str	r3, [sp, #8]
 8010040:	e254      	b.n	80104ec <_dtoa_r+0x9ac>
 8010042:	4234      	tst	r4, r6
 8010044:	d007      	beq.n	8010056 <_dtoa_r+0x516>
 8010046:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010048:	3301      	adds	r3, #1
 801004a:	9310      	str	r3, [sp, #64]	; 0x40
 801004c:	682a      	ldr	r2, [r5, #0]
 801004e:	686b      	ldr	r3, [r5, #4]
 8010050:	f7f1 fdda 	bl	8001c08 <__aeabi_dmul>
 8010054:	0033      	movs	r3, r6
 8010056:	1064      	asrs	r4, r4, #1
 8010058:	3508      	adds	r5, #8
 801005a:	e75a      	b.n	800ff12 <_dtoa_r+0x3d2>
 801005c:	9e02      	ldr	r6, [sp, #8]
 801005e:	9b07      	ldr	r3, [sp, #28]
 8010060:	e780      	b.n	800ff64 <_dtoa_r+0x424>
 8010062:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010064:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010066:	1e5a      	subs	r2, r3, #1
 8010068:	4b59      	ldr	r3, [pc, #356]	; (80101d0 <_dtoa_r+0x690>)
 801006a:	00d2      	lsls	r2, r2, #3
 801006c:	189b      	adds	r3, r3, r2
 801006e:	681a      	ldr	r2, [r3, #0]
 8010070:	685b      	ldr	r3, [r3, #4]
 8010072:	2900      	cmp	r1, #0
 8010074:	d051      	beq.n	801011a <_dtoa_r+0x5da>
 8010076:	2000      	movs	r0, #0
 8010078:	495d      	ldr	r1, [pc, #372]	; (80101f0 <_dtoa_r+0x6b0>)
 801007a:	f7f1 f9c3 	bl	8001404 <__aeabi_ddiv>
 801007e:	9a08      	ldr	r2, [sp, #32]
 8010080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010082:	f7f2 f82d 	bl	80020e0 <__aeabi_dsub>
 8010086:	9a06      	ldr	r2, [sp, #24]
 8010088:	9b06      	ldr	r3, [sp, #24]
 801008a:	4694      	mov	ip, r2
 801008c:	9317      	str	r3, [sp, #92]	; 0x5c
 801008e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010090:	9010      	str	r0, [sp, #64]	; 0x40
 8010092:	9111      	str	r1, [sp, #68]	; 0x44
 8010094:	4463      	add	r3, ip
 8010096:	9319      	str	r3, [sp, #100]	; 0x64
 8010098:	0029      	movs	r1, r5
 801009a:	0020      	movs	r0, r4
 801009c:	f7f2 fbd0 	bl	8002840 <__aeabi_d2iz>
 80100a0:	9014      	str	r0, [sp, #80]	; 0x50
 80100a2:	f7f2 fc03 	bl	80028ac <__aeabi_i2d>
 80100a6:	0002      	movs	r2, r0
 80100a8:	000b      	movs	r3, r1
 80100aa:	0020      	movs	r0, r4
 80100ac:	0029      	movs	r1, r5
 80100ae:	f7f2 f817 	bl	80020e0 <__aeabi_dsub>
 80100b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80100b4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80100b6:	3301      	adds	r3, #1
 80100b8:	9308      	str	r3, [sp, #32]
 80100ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80100bc:	0004      	movs	r4, r0
 80100be:	3330      	adds	r3, #48	; 0x30
 80100c0:	7013      	strb	r3, [r2, #0]
 80100c2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80100c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80100c6:	000d      	movs	r5, r1
 80100c8:	f7f0 f9c6 	bl	8000458 <__aeabi_dcmplt>
 80100cc:	2800      	cmp	r0, #0
 80100ce:	d175      	bne.n	80101bc <_dtoa_r+0x67c>
 80100d0:	0022      	movs	r2, r4
 80100d2:	002b      	movs	r3, r5
 80100d4:	2000      	movs	r0, #0
 80100d6:	4940      	ldr	r1, [pc, #256]	; (80101d8 <_dtoa_r+0x698>)
 80100d8:	f7f2 f802 	bl	80020e0 <__aeabi_dsub>
 80100dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80100de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80100e0:	f7f0 f9ba 	bl	8000458 <__aeabi_dcmplt>
 80100e4:	2800      	cmp	r0, #0
 80100e6:	d000      	beq.n	80100ea <_dtoa_r+0x5aa>
 80100e8:	e0d2      	b.n	8010290 <_dtoa_r+0x750>
 80100ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80100ec:	9a08      	ldr	r2, [sp, #32]
 80100ee:	4293      	cmp	r3, r2
 80100f0:	d100      	bne.n	80100f4 <_dtoa_r+0x5b4>
 80100f2:	e770      	b.n	800ffd6 <_dtoa_r+0x496>
 80100f4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80100f6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80100f8:	2200      	movs	r2, #0
 80100fa:	4b38      	ldr	r3, [pc, #224]	; (80101dc <_dtoa_r+0x69c>)
 80100fc:	f7f1 fd84 	bl	8001c08 <__aeabi_dmul>
 8010100:	4b36      	ldr	r3, [pc, #216]	; (80101dc <_dtoa_r+0x69c>)
 8010102:	9010      	str	r0, [sp, #64]	; 0x40
 8010104:	9111      	str	r1, [sp, #68]	; 0x44
 8010106:	2200      	movs	r2, #0
 8010108:	0020      	movs	r0, r4
 801010a:	0029      	movs	r1, r5
 801010c:	f7f1 fd7c 	bl	8001c08 <__aeabi_dmul>
 8010110:	9b08      	ldr	r3, [sp, #32]
 8010112:	0004      	movs	r4, r0
 8010114:	000d      	movs	r5, r1
 8010116:	9317      	str	r3, [sp, #92]	; 0x5c
 8010118:	e7be      	b.n	8010098 <_dtoa_r+0x558>
 801011a:	9808      	ldr	r0, [sp, #32]
 801011c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801011e:	f7f1 fd73 	bl	8001c08 <__aeabi_dmul>
 8010122:	9a06      	ldr	r2, [sp, #24]
 8010124:	9b06      	ldr	r3, [sp, #24]
 8010126:	4694      	mov	ip, r2
 8010128:	9308      	str	r3, [sp, #32]
 801012a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801012c:	9010      	str	r0, [sp, #64]	; 0x40
 801012e:	9111      	str	r1, [sp, #68]	; 0x44
 8010130:	4463      	add	r3, ip
 8010132:	9319      	str	r3, [sp, #100]	; 0x64
 8010134:	0029      	movs	r1, r5
 8010136:	0020      	movs	r0, r4
 8010138:	f7f2 fb82 	bl	8002840 <__aeabi_d2iz>
 801013c:	9017      	str	r0, [sp, #92]	; 0x5c
 801013e:	f7f2 fbb5 	bl	80028ac <__aeabi_i2d>
 8010142:	0002      	movs	r2, r0
 8010144:	000b      	movs	r3, r1
 8010146:	0020      	movs	r0, r4
 8010148:	0029      	movs	r1, r5
 801014a:	f7f1 ffc9 	bl	80020e0 <__aeabi_dsub>
 801014e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010150:	9a08      	ldr	r2, [sp, #32]
 8010152:	3330      	adds	r3, #48	; 0x30
 8010154:	7013      	strb	r3, [r2, #0]
 8010156:	0013      	movs	r3, r2
 8010158:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801015a:	3301      	adds	r3, #1
 801015c:	0004      	movs	r4, r0
 801015e:	000d      	movs	r5, r1
 8010160:	9308      	str	r3, [sp, #32]
 8010162:	4293      	cmp	r3, r2
 8010164:	d12c      	bne.n	80101c0 <_dtoa_r+0x680>
 8010166:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010168:	9911      	ldr	r1, [sp, #68]	; 0x44
 801016a:	9a06      	ldr	r2, [sp, #24]
 801016c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801016e:	4694      	mov	ip, r2
 8010170:	4463      	add	r3, ip
 8010172:	2200      	movs	r2, #0
 8010174:	9308      	str	r3, [sp, #32]
 8010176:	4b1e      	ldr	r3, [pc, #120]	; (80101f0 <_dtoa_r+0x6b0>)
 8010178:	f7f0 fe08 	bl	8000d8c <__aeabi_dadd>
 801017c:	0002      	movs	r2, r0
 801017e:	000b      	movs	r3, r1
 8010180:	0020      	movs	r0, r4
 8010182:	0029      	movs	r1, r5
 8010184:	f7f0 f97c 	bl	8000480 <__aeabi_dcmpgt>
 8010188:	2800      	cmp	r0, #0
 801018a:	d000      	beq.n	801018e <_dtoa_r+0x64e>
 801018c:	e080      	b.n	8010290 <_dtoa_r+0x750>
 801018e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010190:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010192:	2000      	movs	r0, #0
 8010194:	4916      	ldr	r1, [pc, #88]	; (80101f0 <_dtoa_r+0x6b0>)
 8010196:	f7f1 ffa3 	bl	80020e0 <__aeabi_dsub>
 801019a:	0002      	movs	r2, r0
 801019c:	000b      	movs	r3, r1
 801019e:	0020      	movs	r0, r4
 80101a0:	0029      	movs	r1, r5
 80101a2:	f7f0 f959 	bl	8000458 <__aeabi_dcmplt>
 80101a6:	2800      	cmp	r0, #0
 80101a8:	d100      	bne.n	80101ac <_dtoa_r+0x66c>
 80101aa:	e714      	b.n	800ffd6 <_dtoa_r+0x496>
 80101ac:	9b08      	ldr	r3, [sp, #32]
 80101ae:	001a      	movs	r2, r3
 80101b0:	3a01      	subs	r2, #1
 80101b2:	9208      	str	r2, [sp, #32]
 80101b4:	7812      	ldrb	r2, [r2, #0]
 80101b6:	2a30      	cmp	r2, #48	; 0x30
 80101b8:	d0f8      	beq.n	80101ac <_dtoa_r+0x66c>
 80101ba:	9308      	str	r3, [sp, #32]
 80101bc:	9602      	str	r6, [sp, #8]
 80101be:	e055      	b.n	801026c <_dtoa_r+0x72c>
 80101c0:	2200      	movs	r2, #0
 80101c2:	4b06      	ldr	r3, [pc, #24]	; (80101dc <_dtoa_r+0x69c>)
 80101c4:	f7f1 fd20 	bl	8001c08 <__aeabi_dmul>
 80101c8:	0004      	movs	r4, r0
 80101ca:	000d      	movs	r5, r1
 80101cc:	e7b2      	b.n	8010134 <_dtoa_r+0x5f4>
 80101ce:	46c0      	nop			; (mov r8, r8)
 80101d0:	08013cd0 	.word	0x08013cd0
 80101d4:	08013ca8 	.word	0x08013ca8
 80101d8:	3ff00000 	.word	0x3ff00000
 80101dc:	40240000 	.word	0x40240000
 80101e0:	401c0000 	.word	0x401c0000
 80101e4:	fcc00000 	.word	0xfcc00000
 80101e8:	40140000 	.word	0x40140000
 80101ec:	7cc00000 	.word	0x7cc00000
 80101f0:	3fe00000 	.word	0x3fe00000
 80101f4:	9b07      	ldr	r3, [sp, #28]
 80101f6:	9e06      	ldr	r6, [sp, #24]
 80101f8:	3b01      	subs	r3, #1
 80101fa:	199b      	adds	r3, r3, r6
 80101fc:	930c      	str	r3, [sp, #48]	; 0x30
 80101fe:	9c08      	ldr	r4, [sp, #32]
 8010200:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8010202:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010204:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010206:	0020      	movs	r0, r4
 8010208:	0029      	movs	r1, r5
 801020a:	f7f1 f8fb 	bl	8001404 <__aeabi_ddiv>
 801020e:	f7f2 fb17 	bl	8002840 <__aeabi_d2iz>
 8010212:	9007      	str	r0, [sp, #28]
 8010214:	f7f2 fb4a 	bl	80028ac <__aeabi_i2d>
 8010218:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801021a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801021c:	f7f1 fcf4 	bl	8001c08 <__aeabi_dmul>
 8010220:	0002      	movs	r2, r0
 8010222:	000b      	movs	r3, r1
 8010224:	0020      	movs	r0, r4
 8010226:	0029      	movs	r1, r5
 8010228:	f7f1 ff5a 	bl	80020e0 <__aeabi_dsub>
 801022c:	0033      	movs	r3, r6
 801022e:	9a07      	ldr	r2, [sp, #28]
 8010230:	3601      	adds	r6, #1
 8010232:	3230      	adds	r2, #48	; 0x30
 8010234:	701a      	strb	r2, [r3, #0]
 8010236:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010238:	9608      	str	r6, [sp, #32]
 801023a:	429a      	cmp	r2, r3
 801023c:	d139      	bne.n	80102b2 <_dtoa_r+0x772>
 801023e:	0002      	movs	r2, r0
 8010240:	000b      	movs	r3, r1
 8010242:	f7f0 fda3 	bl	8000d8c <__aeabi_dadd>
 8010246:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010248:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801024a:	0004      	movs	r4, r0
 801024c:	000d      	movs	r5, r1
 801024e:	f7f0 f917 	bl	8000480 <__aeabi_dcmpgt>
 8010252:	2800      	cmp	r0, #0
 8010254:	d11b      	bne.n	801028e <_dtoa_r+0x74e>
 8010256:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010258:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801025a:	0020      	movs	r0, r4
 801025c:	0029      	movs	r1, r5
 801025e:	f7f0 f8f5 	bl	800044c <__aeabi_dcmpeq>
 8010262:	2800      	cmp	r0, #0
 8010264:	d002      	beq.n	801026c <_dtoa_r+0x72c>
 8010266:	9b07      	ldr	r3, [sp, #28]
 8010268:	07db      	lsls	r3, r3, #31
 801026a:	d410      	bmi.n	801028e <_dtoa_r+0x74e>
 801026c:	0038      	movs	r0, r7
 801026e:	9905      	ldr	r1, [sp, #20]
 8010270:	f000 fbce 	bl	8010a10 <_Bfree>
 8010274:	2300      	movs	r3, #0
 8010276:	9a08      	ldr	r2, [sp, #32]
 8010278:	9802      	ldr	r0, [sp, #8]
 801027a:	7013      	strb	r3, [r2, #0]
 801027c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801027e:	3001      	adds	r0, #1
 8010280:	6018      	str	r0, [r3, #0]
 8010282:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010284:	2b00      	cmp	r3, #0
 8010286:	d100      	bne.n	801028a <_dtoa_r+0x74a>
 8010288:	e4a6      	b.n	800fbd8 <_dtoa_r+0x98>
 801028a:	601a      	str	r2, [r3, #0]
 801028c:	e4a4      	b.n	800fbd8 <_dtoa_r+0x98>
 801028e:	9e02      	ldr	r6, [sp, #8]
 8010290:	9b08      	ldr	r3, [sp, #32]
 8010292:	9308      	str	r3, [sp, #32]
 8010294:	3b01      	subs	r3, #1
 8010296:	781a      	ldrb	r2, [r3, #0]
 8010298:	2a39      	cmp	r2, #57	; 0x39
 801029a:	d106      	bne.n	80102aa <_dtoa_r+0x76a>
 801029c:	9a06      	ldr	r2, [sp, #24]
 801029e:	429a      	cmp	r2, r3
 80102a0:	d1f7      	bne.n	8010292 <_dtoa_r+0x752>
 80102a2:	2230      	movs	r2, #48	; 0x30
 80102a4:	9906      	ldr	r1, [sp, #24]
 80102a6:	3601      	adds	r6, #1
 80102a8:	700a      	strb	r2, [r1, #0]
 80102aa:	781a      	ldrb	r2, [r3, #0]
 80102ac:	3201      	adds	r2, #1
 80102ae:	701a      	strb	r2, [r3, #0]
 80102b0:	e784      	b.n	80101bc <_dtoa_r+0x67c>
 80102b2:	2200      	movs	r2, #0
 80102b4:	4baa      	ldr	r3, [pc, #680]	; (8010560 <_dtoa_r+0xa20>)
 80102b6:	f7f1 fca7 	bl	8001c08 <__aeabi_dmul>
 80102ba:	2200      	movs	r2, #0
 80102bc:	2300      	movs	r3, #0
 80102be:	0004      	movs	r4, r0
 80102c0:	000d      	movs	r5, r1
 80102c2:	f7f0 f8c3 	bl	800044c <__aeabi_dcmpeq>
 80102c6:	2800      	cmp	r0, #0
 80102c8:	d09b      	beq.n	8010202 <_dtoa_r+0x6c2>
 80102ca:	e7cf      	b.n	801026c <_dtoa_r+0x72c>
 80102cc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80102ce:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80102d0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80102d2:	2d00      	cmp	r5, #0
 80102d4:	d012      	beq.n	80102fc <_dtoa_r+0x7bc>
 80102d6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80102d8:	2a01      	cmp	r2, #1
 80102da:	dc66      	bgt.n	80103aa <_dtoa_r+0x86a>
 80102dc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80102de:	2a00      	cmp	r2, #0
 80102e0:	d05d      	beq.n	801039e <_dtoa_r+0x85e>
 80102e2:	4aa0      	ldr	r2, [pc, #640]	; (8010564 <_dtoa_r+0xa24>)
 80102e4:	189b      	adds	r3, r3, r2
 80102e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80102e8:	2101      	movs	r1, #1
 80102ea:	18d2      	adds	r2, r2, r3
 80102ec:	920a      	str	r2, [sp, #40]	; 0x28
 80102ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80102f0:	0038      	movs	r0, r7
 80102f2:	18d3      	adds	r3, r2, r3
 80102f4:	930d      	str	r3, [sp, #52]	; 0x34
 80102f6:	f000 fc3b 	bl	8010b70 <__i2b>
 80102fa:	0005      	movs	r5, r0
 80102fc:	2c00      	cmp	r4, #0
 80102fe:	dd0e      	ble.n	801031e <_dtoa_r+0x7de>
 8010300:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010302:	2b00      	cmp	r3, #0
 8010304:	dd0b      	ble.n	801031e <_dtoa_r+0x7de>
 8010306:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010308:	0023      	movs	r3, r4
 801030a:	4294      	cmp	r4, r2
 801030c:	dd00      	ble.n	8010310 <_dtoa_r+0x7d0>
 801030e:	0013      	movs	r3, r2
 8010310:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010312:	1ae4      	subs	r4, r4, r3
 8010314:	1ad2      	subs	r2, r2, r3
 8010316:	920a      	str	r2, [sp, #40]	; 0x28
 8010318:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801031a:	1ad3      	subs	r3, r2, r3
 801031c:	930d      	str	r3, [sp, #52]	; 0x34
 801031e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010320:	2b00      	cmp	r3, #0
 8010322:	d01f      	beq.n	8010364 <_dtoa_r+0x824>
 8010324:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010326:	2b00      	cmp	r3, #0
 8010328:	d054      	beq.n	80103d4 <_dtoa_r+0x894>
 801032a:	2e00      	cmp	r6, #0
 801032c:	dd11      	ble.n	8010352 <_dtoa_r+0x812>
 801032e:	0029      	movs	r1, r5
 8010330:	0032      	movs	r2, r6
 8010332:	0038      	movs	r0, r7
 8010334:	f000 fce2 	bl	8010cfc <__pow5mult>
 8010338:	9a05      	ldr	r2, [sp, #20]
 801033a:	0001      	movs	r1, r0
 801033c:	0005      	movs	r5, r0
 801033e:	0038      	movs	r0, r7
 8010340:	f000 fc2c 	bl	8010b9c <__multiply>
 8010344:	9905      	ldr	r1, [sp, #20]
 8010346:	9014      	str	r0, [sp, #80]	; 0x50
 8010348:	0038      	movs	r0, r7
 801034a:	f000 fb61 	bl	8010a10 <_Bfree>
 801034e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010350:	9305      	str	r3, [sp, #20]
 8010352:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010354:	1b9a      	subs	r2, r3, r6
 8010356:	42b3      	cmp	r3, r6
 8010358:	d004      	beq.n	8010364 <_dtoa_r+0x824>
 801035a:	0038      	movs	r0, r7
 801035c:	9905      	ldr	r1, [sp, #20]
 801035e:	f000 fccd 	bl	8010cfc <__pow5mult>
 8010362:	9005      	str	r0, [sp, #20]
 8010364:	2101      	movs	r1, #1
 8010366:	0038      	movs	r0, r7
 8010368:	f000 fc02 	bl	8010b70 <__i2b>
 801036c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801036e:	0006      	movs	r6, r0
 8010370:	2b00      	cmp	r3, #0
 8010372:	dd31      	ble.n	80103d8 <_dtoa_r+0x898>
 8010374:	001a      	movs	r2, r3
 8010376:	0001      	movs	r1, r0
 8010378:	0038      	movs	r0, r7
 801037a:	f000 fcbf 	bl	8010cfc <__pow5mult>
 801037e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010380:	0006      	movs	r6, r0
 8010382:	2b01      	cmp	r3, #1
 8010384:	dd2d      	ble.n	80103e2 <_dtoa_r+0x8a2>
 8010386:	2300      	movs	r3, #0
 8010388:	930e      	str	r3, [sp, #56]	; 0x38
 801038a:	6933      	ldr	r3, [r6, #16]
 801038c:	3303      	adds	r3, #3
 801038e:	009b      	lsls	r3, r3, #2
 8010390:	18f3      	adds	r3, r6, r3
 8010392:	6858      	ldr	r0, [r3, #4]
 8010394:	f000 fba4 	bl	8010ae0 <__hi0bits>
 8010398:	2320      	movs	r3, #32
 801039a:	1a18      	subs	r0, r3, r0
 801039c:	e039      	b.n	8010412 <_dtoa_r+0x8d2>
 801039e:	2336      	movs	r3, #54	; 0x36
 80103a0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80103a2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80103a4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80103a6:	1a9b      	subs	r3, r3, r2
 80103a8:	e79d      	b.n	80102e6 <_dtoa_r+0x7a6>
 80103aa:	9b07      	ldr	r3, [sp, #28]
 80103ac:	1e5e      	subs	r6, r3, #1
 80103ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80103b0:	42b3      	cmp	r3, r6
 80103b2:	db07      	blt.n	80103c4 <_dtoa_r+0x884>
 80103b4:	1b9e      	subs	r6, r3, r6
 80103b6:	9b07      	ldr	r3, [sp, #28]
 80103b8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	da93      	bge.n	80102e6 <_dtoa_r+0x7a6>
 80103be:	1ae4      	subs	r4, r4, r3
 80103c0:	2300      	movs	r3, #0
 80103c2:	e790      	b.n	80102e6 <_dtoa_r+0x7a6>
 80103c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80103c6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80103c8:	1af3      	subs	r3, r6, r3
 80103ca:	18d3      	adds	r3, r2, r3
 80103cc:	960e      	str	r6, [sp, #56]	; 0x38
 80103ce:	9315      	str	r3, [sp, #84]	; 0x54
 80103d0:	2600      	movs	r6, #0
 80103d2:	e7f0      	b.n	80103b6 <_dtoa_r+0x876>
 80103d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80103d6:	e7c0      	b.n	801035a <_dtoa_r+0x81a>
 80103d8:	2300      	movs	r3, #0
 80103da:	930e      	str	r3, [sp, #56]	; 0x38
 80103dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80103de:	2b01      	cmp	r3, #1
 80103e0:	dc13      	bgt.n	801040a <_dtoa_r+0x8ca>
 80103e2:	2300      	movs	r3, #0
 80103e4:	930e      	str	r3, [sp, #56]	; 0x38
 80103e6:	9b08      	ldr	r3, [sp, #32]
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d10e      	bne.n	801040a <_dtoa_r+0x8ca>
 80103ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103ee:	031b      	lsls	r3, r3, #12
 80103f0:	d10b      	bne.n	801040a <_dtoa_r+0x8ca>
 80103f2:	4b5d      	ldr	r3, [pc, #372]	; (8010568 <_dtoa_r+0xa28>)
 80103f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80103f6:	4213      	tst	r3, r2
 80103f8:	d007      	beq.n	801040a <_dtoa_r+0x8ca>
 80103fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80103fc:	3301      	adds	r3, #1
 80103fe:	930a      	str	r3, [sp, #40]	; 0x28
 8010400:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010402:	3301      	adds	r3, #1
 8010404:	930d      	str	r3, [sp, #52]	; 0x34
 8010406:	2301      	movs	r3, #1
 8010408:	930e      	str	r3, [sp, #56]	; 0x38
 801040a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801040c:	2001      	movs	r0, #1
 801040e:	2b00      	cmp	r3, #0
 8010410:	d1bb      	bne.n	801038a <_dtoa_r+0x84a>
 8010412:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010414:	221f      	movs	r2, #31
 8010416:	1818      	adds	r0, r3, r0
 8010418:	0003      	movs	r3, r0
 801041a:	4013      	ands	r3, r2
 801041c:	4210      	tst	r0, r2
 801041e:	d046      	beq.n	80104ae <_dtoa_r+0x96e>
 8010420:	3201      	adds	r2, #1
 8010422:	1ad2      	subs	r2, r2, r3
 8010424:	2a04      	cmp	r2, #4
 8010426:	dd3f      	ble.n	80104a8 <_dtoa_r+0x968>
 8010428:	221c      	movs	r2, #28
 801042a:	1ad3      	subs	r3, r2, r3
 801042c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801042e:	18e4      	adds	r4, r4, r3
 8010430:	18d2      	adds	r2, r2, r3
 8010432:	920a      	str	r2, [sp, #40]	; 0x28
 8010434:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010436:	18d3      	adds	r3, r2, r3
 8010438:	930d      	str	r3, [sp, #52]	; 0x34
 801043a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801043c:	2b00      	cmp	r3, #0
 801043e:	dd05      	ble.n	801044c <_dtoa_r+0x90c>
 8010440:	001a      	movs	r2, r3
 8010442:	0038      	movs	r0, r7
 8010444:	9905      	ldr	r1, [sp, #20]
 8010446:	f000 fcb5 	bl	8010db4 <__lshift>
 801044a:	9005      	str	r0, [sp, #20]
 801044c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801044e:	2b00      	cmp	r3, #0
 8010450:	dd05      	ble.n	801045e <_dtoa_r+0x91e>
 8010452:	0031      	movs	r1, r6
 8010454:	001a      	movs	r2, r3
 8010456:	0038      	movs	r0, r7
 8010458:	f000 fcac 	bl	8010db4 <__lshift>
 801045c:	0006      	movs	r6, r0
 801045e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010460:	2b00      	cmp	r3, #0
 8010462:	d026      	beq.n	80104b2 <_dtoa_r+0x972>
 8010464:	0031      	movs	r1, r6
 8010466:	9805      	ldr	r0, [sp, #20]
 8010468:	f000 fd12 	bl	8010e90 <__mcmp>
 801046c:	2800      	cmp	r0, #0
 801046e:	da20      	bge.n	80104b2 <_dtoa_r+0x972>
 8010470:	9b02      	ldr	r3, [sp, #8]
 8010472:	220a      	movs	r2, #10
 8010474:	3b01      	subs	r3, #1
 8010476:	9302      	str	r3, [sp, #8]
 8010478:	0038      	movs	r0, r7
 801047a:	2300      	movs	r3, #0
 801047c:	9905      	ldr	r1, [sp, #20]
 801047e:	f000 faeb 	bl	8010a58 <__multadd>
 8010482:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010484:	9005      	str	r0, [sp, #20]
 8010486:	2b00      	cmp	r3, #0
 8010488:	d100      	bne.n	801048c <_dtoa_r+0x94c>
 801048a:	e166      	b.n	801075a <_dtoa_r+0xc1a>
 801048c:	2300      	movs	r3, #0
 801048e:	0029      	movs	r1, r5
 8010490:	220a      	movs	r2, #10
 8010492:	0038      	movs	r0, r7
 8010494:	f000 fae0 	bl	8010a58 <__multadd>
 8010498:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801049a:	0005      	movs	r5, r0
 801049c:	2b00      	cmp	r3, #0
 801049e:	dc47      	bgt.n	8010530 <_dtoa_r+0x9f0>
 80104a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80104a2:	2b02      	cmp	r3, #2
 80104a4:	dc0d      	bgt.n	80104c2 <_dtoa_r+0x982>
 80104a6:	e043      	b.n	8010530 <_dtoa_r+0x9f0>
 80104a8:	2a04      	cmp	r2, #4
 80104aa:	d0c6      	beq.n	801043a <_dtoa_r+0x8fa>
 80104ac:	0013      	movs	r3, r2
 80104ae:	331c      	adds	r3, #28
 80104b0:	e7bc      	b.n	801042c <_dtoa_r+0x8ec>
 80104b2:	9b07      	ldr	r3, [sp, #28]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	dc35      	bgt.n	8010524 <_dtoa_r+0x9e4>
 80104b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80104ba:	2b02      	cmp	r3, #2
 80104bc:	dd32      	ble.n	8010524 <_dtoa_r+0x9e4>
 80104be:	9b07      	ldr	r3, [sp, #28]
 80104c0:	930c      	str	r3, [sp, #48]	; 0x30
 80104c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d10c      	bne.n	80104e2 <_dtoa_r+0x9a2>
 80104c8:	0031      	movs	r1, r6
 80104ca:	2205      	movs	r2, #5
 80104cc:	0038      	movs	r0, r7
 80104ce:	f000 fac3 	bl	8010a58 <__multadd>
 80104d2:	0006      	movs	r6, r0
 80104d4:	0001      	movs	r1, r0
 80104d6:	9805      	ldr	r0, [sp, #20]
 80104d8:	f000 fcda 	bl	8010e90 <__mcmp>
 80104dc:	2800      	cmp	r0, #0
 80104de:	dd00      	ble.n	80104e2 <_dtoa_r+0x9a2>
 80104e0:	e5a5      	b.n	801002e <_dtoa_r+0x4ee>
 80104e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80104e4:	43db      	mvns	r3, r3
 80104e6:	9302      	str	r3, [sp, #8]
 80104e8:	9b06      	ldr	r3, [sp, #24]
 80104ea:	9308      	str	r3, [sp, #32]
 80104ec:	2400      	movs	r4, #0
 80104ee:	0031      	movs	r1, r6
 80104f0:	0038      	movs	r0, r7
 80104f2:	f000 fa8d 	bl	8010a10 <_Bfree>
 80104f6:	2d00      	cmp	r5, #0
 80104f8:	d100      	bne.n	80104fc <_dtoa_r+0x9bc>
 80104fa:	e6b7      	b.n	801026c <_dtoa_r+0x72c>
 80104fc:	2c00      	cmp	r4, #0
 80104fe:	d005      	beq.n	801050c <_dtoa_r+0x9cc>
 8010500:	42ac      	cmp	r4, r5
 8010502:	d003      	beq.n	801050c <_dtoa_r+0x9cc>
 8010504:	0021      	movs	r1, r4
 8010506:	0038      	movs	r0, r7
 8010508:	f000 fa82 	bl	8010a10 <_Bfree>
 801050c:	0029      	movs	r1, r5
 801050e:	0038      	movs	r0, r7
 8010510:	f000 fa7e 	bl	8010a10 <_Bfree>
 8010514:	e6aa      	b.n	801026c <_dtoa_r+0x72c>
 8010516:	2600      	movs	r6, #0
 8010518:	0035      	movs	r5, r6
 801051a:	e7e2      	b.n	80104e2 <_dtoa_r+0x9a2>
 801051c:	9602      	str	r6, [sp, #8]
 801051e:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8010520:	0035      	movs	r5, r6
 8010522:	e584      	b.n	801002e <_dtoa_r+0x4ee>
 8010524:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010526:	2b00      	cmp	r3, #0
 8010528:	d100      	bne.n	801052c <_dtoa_r+0x9ec>
 801052a:	e0ce      	b.n	80106ca <_dtoa_r+0xb8a>
 801052c:	9b07      	ldr	r3, [sp, #28]
 801052e:	930c      	str	r3, [sp, #48]	; 0x30
 8010530:	2c00      	cmp	r4, #0
 8010532:	dd05      	ble.n	8010540 <_dtoa_r+0xa00>
 8010534:	0029      	movs	r1, r5
 8010536:	0022      	movs	r2, r4
 8010538:	0038      	movs	r0, r7
 801053a:	f000 fc3b 	bl	8010db4 <__lshift>
 801053e:	0005      	movs	r5, r0
 8010540:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010542:	0028      	movs	r0, r5
 8010544:	2b00      	cmp	r3, #0
 8010546:	d022      	beq.n	801058e <_dtoa_r+0xa4e>
 8010548:	0038      	movs	r0, r7
 801054a:	6869      	ldr	r1, [r5, #4]
 801054c:	f000 fa1c 	bl	8010988 <_Balloc>
 8010550:	1e04      	subs	r4, r0, #0
 8010552:	d10f      	bne.n	8010574 <_dtoa_r+0xa34>
 8010554:	0002      	movs	r2, r0
 8010556:	4b05      	ldr	r3, [pc, #20]	; (801056c <_dtoa_r+0xa2c>)
 8010558:	4905      	ldr	r1, [pc, #20]	; (8010570 <_dtoa_r+0xa30>)
 801055a:	f7ff fb06 	bl	800fb6a <_dtoa_r+0x2a>
 801055e:	46c0      	nop			; (mov r8, r8)
 8010560:	40240000 	.word	0x40240000
 8010564:	00000433 	.word	0x00000433
 8010568:	7ff00000 	.word	0x7ff00000
 801056c:	08013c34 	.word	0x08013c34
 8010570:	000002ea 	.word	0x000002ea
 8010574:	0029      	movs	r1, r5
 8010576:	692b      	ldr	r3, [r5, #16]
 8010578:	310c      	adds	r1, #12
 801057a:	1c9a      	adds	r2, r3, #2
 801057c:	0092      	lsls	r2, r2, #2
 801057e:	300c      	adds	r0, #12
 8010580:	f7fe fb89 	bl	800ec96 <memcpy>
 8010584:	2201      	movs	r2, #1
 8010586:	0021      	movs	r1, r4
 8010588:	0038      	movs	r0, r7
 801058a:	f000 fc13 	bl	8010db4 <__lshift>
 801058e:	9b06      	ldr	r3, [sp, #24]
 8010590:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010592:	930a      	str	r3, [sp, #40]	; 0x28
 8010594:	3b01      	subs	r3, #1
 8010596:	189b      	adds	r3, r3, r2
 8010598:	2201      	movs	r2, #1
 801059a:	002c      	movs	r4, r5
 801059c:	0005      	movs	r5, r0
 801059e:	9314      	str	r3, [sp, #80]	; 0x50
 80105a0:	9b08      	ldr	r3, [sp, #32]
 80105a2:	4013      	ands	r3, r2
 80105a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80105a6:	0031      	movs	r1, r6
 80105a8:	9805      	ldr	r0, [sp, #20]
 80105aa:	f7ff fa3d 	bl	800fa28 <quorem>
 80105ae:	0003      	movs	r3, r0
 80105b0:	0021      	movs	r1, r4
 80105b2:	3330      	adds	r3, #48	; 0x30
 80105b4:	900d      	str	r0, [sp, #52]	; 0x34
 80105b6:	9805      	ldr	r0, [sp, #20]
 80105b8:	9307      	str	r3, [sp, #28]
 80105ba:	f000 fc69 	bl	8010e90 <__mcmp>
 80105be:	002a      	movs	r2, r5
 80105c0:	900e      	str	r0, [sp, #56]	; 0x38
 80105c2:	0031      	movs	r1, r6
 80105c4:	0038      	movs	r0, r7
 80105c6:	f000 fc7f 	bl	8010ec8 <__mdiff>
 80105ca:	68c3      	ldr	r3, [r0, #12]
 80105cc:	9008      	str	r0, [sp, #32]
 80105ce:	9310      	str	r3, [sp, #64]	; 0x40
 80105d0:	2301      	movs	r3, #1
 80105d2:	930c      	str	r3, [sp, #48]	; 0x30
 80105d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d104      	bne.n	80105e4 <_dtoa_r+0xaa4>
 80105da:	0001      	movs	r1, r0
 80105dc:	9805      	ldr	r0, [sp, #20]
 80105de:	f000 fc57 	bl	8010e90 <__mcmp>
 80105e2:	900c      	str	r0, [sp, #48]	; 0x30
 80105e4:	0038      	movs	r0, r7
 80105e6:	9908      	ldr	r1, [sp, #32]
 80105e8:	f000 fa12 	bl	8010a10 <_Bfree>
 80105ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80105f0:	3301      	adds	r3, #1
 80105f2:	9308      	str	r3, [sp, #32]
 80105f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80105f6:	4313      	orrs	r3, r2
 80105f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80105fa:	4313      	orrs	r3, r2
 80105fc:	d10c      	bne.n	8010618 <_dtoa_r+0xad8>
 80105fe:	9b07      	ldr	r3, [sp, #28]
 8010600:	2b39      	cmp	r3, #57	; 0x39
 8010602:	d026      	beq.n	8010652 <_dtoa_r+0xb12>
 8010604:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010606:	2b00      	cmp	r3, #0
 8010608:	dd02      	ble.n	8010610 <_dtoa_r+0xad0>
 801060a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801060c:	3331      	adds	r3, #49	; 0x31
 801060e:	9307      	str	r3, [sp, #28]
 8010610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010612:	9a07      	ldr	r2, [sp, #28]
 8010614:	701a      	strb	r2, [r3, #0]
 8010616:	e76a      	b.n	80104ee <_dtoa_r+0x9ae>
 8010618:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801061a:	2b00      	cmp	r3, #0
 801061c:	db04      	blt.n	8010628 <_dtoa_r+0xae8>
 801061e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8010620:	4313      	orrs	r3, r2
 8010622:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010624:	4313      	orrs	r3, r2
 8010626:	d11f      	bne.n	8010668 <_dtoa_r+0xb28>
 8010628:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801062a:	2b00      	cmp	r3, #0
 801062c:	ddf0      	ble.n	8010610 <_dtoa_r+0xad0>
 801062e:	9905      	ldr	r1, [sp, #20]
 8010630:	2201      	movs	r2, #1
 8010632:	0038      	movs	r0, r7
 8010634:	f000 fbbe 	bl	8010db4 <__lshift>
 8010638:	0031      	movs	r1, r6
 801063a:	9005      	str	r0, [sp, #20]
 801063c:	f000 fc28 	bl	8010e90 <__mcmp>
 8010640:	2800      	cmp	r0, #0
 8010642:	dc03      	bgt.n	801064c <_dtoa_r+0xb0c>
 8010644:	d1e4      	bne.n	8010610 <_dtoa_r+0xad0>
 8010646:	9b07      	ldr	r3, [sp, #28]
 8010648:	07db      	lsls	r3, r3, #31
 801064a:	d5e1      	bpl.n	8010610 <_dtoa_r+0xad0>
 801064c:	9b07      	ldr	r3, [sp, #28]
 801064e:	2b39      	cmp	r3, #57	; 0x39
 8010650:	d1db      	bne.n	801060a <_dtoa_r+0xaca>
 8010652:	2339      	movs	r3, #57	; 0x39
 8010654:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010656:	7013      	strb	r3, [r2, #0]
 8010658:	9b08      	ldr	r3, [sp, #32]
 801065a:	9308      	str	r3, [sp, #32]
 801065c:	3b01      	subs	r3, #1
 801065e:	781a      	ldrb	r2, [r3, #0]
 8010660:	2a39      	cmp	r2, #57	; 0x39
 8010662:	d068      	beq.n	8010736 <_dtoa_r+0xbf6>
 8010664:	3201      	adds	r2, #1
 8010666:	e7d5      	b.n	8010614 <_dtoa_r+0xad4>
 8010668:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801066a:	2b00      	cmp	r3, #0
 801066c:	dd07      	ble.n	801067e <_dtoa_r+0xb3e>
 801066e:	9b07      	ldr	r3, [sp, #28]
 8010670:	2b39      	cmp	r3, #57	; 0x39
 8010672:	d0ee      	beq.n	8010652 <_dtoa_r+0xb12>
 8010674:	9b07      	ldr	r3, [sp, #28]
 8010676:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010678:	3301      	adds	r3, #1
 801067a:	7013      	strb	r3, [r2, #0]
 801067c:	e737      	b.n	80104ee <_dtoa_r+0x9ae>
 801067e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010680:	9a07      	ldr	r2, [sp, #28]
 8010682:	701a      	strb	r2, [r3, #0]
 8010684:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010686:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010688:	4293      	cmp	r3, r2
 801068a:	d03e      	beq.n	801070a <_dtoa_r+0xbca>
 801068c:	2300      	movs	r3, #0
 801068e:	220a      	movs	r2, #10
 8010690:	9905      	ldr	r1, [sp, #20]
 8010692:	0038      	movs	r0, r7
 8010694:	f000 f9e0 	bl	8010a58 <__multadd>
 8010698:	2300      	movs	r3, #0
 801069a:	9005      	str	r0, [sp, #20]
 801069c:	220a      	movs	r2, #10
 801069e:	0021      	movs	r1, r4
 80106a0:	0038      	movs	r0, r7
 80106a2:	42ac      	cmp	r4, r5
 80106a4:	d106      	bne.n	80106b4 <_dtoa_r+0xb74>
 80106a6:	f000 f9d7 	bl	8010a58 <__multadd>
 80106aa:	0004      	movs	r4, r0
 80106ac:	0005      	movs	r5, r0
 80106ae:	9b08      	ldr	r3, [sp, #32]
 80106b0:	930a      	str	r3, [sp, #40]	; 0x28
 80106b2:	e778      	b.n	80105a6 <_dtoa_r+0xa66>
 80106b4:	f000 f9d0 	bl	8010a58 <__multadd>
 80106b8:	0029      	movs	r1, r5
 80106ba:	0004      	movs	r4, r0
 80106bc:	2300      	movs	r3, #0
 80106be:	220a      	movs	r2, #10
 80106c0:	0038      	movs	r0, r7
 80106c2:	f000 f9c9 	bl	8010a58 <__multadd>
 80106c6:	0005      	movs	r5, r0
 80106c8:	e7f1      	b.n	80106ae <_dtoa_r+0xb6e>
 80106ca:	9b07      	ldr	r3, [sp, #28]
 80106cc:	930c      	str	r3, [sp, #48]	; 0x30
 80106ce:	2400      	movs	r4, #0
 80106d0:	0031      	movs	r1, r6
 80106d2:	9805      	ldr	r0, [sp, #20]
 80106d4:	f7ff f9a8 	bl	800fa28 <quorem>
 80106d8:	9b06      	ldr	r3, [sp, #24]
 80106da:	3030      	adds	r0, #48	; 0x30
 80106dc:	5518      	strb	r0, [r3, r4]
 80106de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80106e0:	3401      	adds	r4, #1
 80106e2:	9007      	str	r0, [sp, #28]
 80106e4:	42a3      	cmp	r3, r4
 80106e6:	dd07      	ble.n	80106f8 <_dtoa_r+0xbb8>
 80106e8:	2300      	movs	r3, #0
 80106ea:	220a      	movs	r2, #10
 80106ec:	0038      	movs	r0, r7
 80106ee:	9905      	ldr	r1, [sp, #20]
 80106f0:	f000 f9b2 	bl	8010a58 <__multadd>
 80106f4:	9005      	str	r0, [sp, #20]
 80106f6:	e7eb      	b.n	80106d0 <_dtoa_r+0xb90>
 80106f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80106fa:	2001      	movs	r0, #1
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	dd00      	ble.n	8010702 <_dtoa_r+0xbc2>
 8010700:	0018      	movs	r0, r3
 8010702:	2400      	movs	r4, #0
 8010704:	9b06      	ldr	r3, [sp, #24]
 8010706:	181b      	adds	r3, r3, r0
 8010708:	9308      	str	r3, [sp, #32]
 801070a:	9905      	ldr	r1, [sp, #20]
 801070c:	2201      	movs	r2, #1
 801070e:	0038      	movs	r0, r7
 8010710:	f000 fb50 	bl	8010db4 <__lshift>
 8010714:	0031      	movs	r1, r6
 8010716:	9005      	str	r0, [sp, #20]
 8010718:	f000 fbba 	bl	8010e90 <__mcmp>
 801071c:	2800      	cmp	r0, #0
 801071e:	dc9b      	bgt.n	8010658 <_dtoa_r+0xb18>
 8010720:	d102      	bne.n	8010728 <_dtoa_r+0xbe8>
 8010722:	9b07      	ldr	r3, [sp, #28]
 8010724:	07db      	lsls	r3, r3, #31
 8010726:	d497      	bmi.n	8010658 <_dtoa_r+0xb18>
 8010728:	9b08      	ldr	r3, [sp, #32]
 801072a:	9308      	str	r3, [sp, #32]
 801072c:	3b01      	subs	r3, #1
 801072e:	781a      	ldrb	r2, [r3, #0]
 8010730:	2a30      	cmp	r2, #48	; 0x30
 8010732:	d0fa      	beq.n	801072a <_dtoa_r+0xbea>
 8010734:	e6db      	b.n	80104ee <_dtoa_r+0x9ae>
 8010736:	9a06      	ldr	r2, [sp, #24]
 8010738:	429a      	cmp	r2, r3
 801073a:	d18e      	bne.n	801065a <_dtoa_r+0xb1a>
 801073c:	9b02      	ldr	r3, [sp, #8]
 801073e:	3301      	adds	r3, #1
 8010740:	9302      	str	r3, [sp, #8]
 8010742:	2331      	movs	r3, #49	; 0x31
 8010744:	e799      	b.n	801067a <_dtoa_r+0xb3a>
 8010746:	4b09      	ldr	r3, [pc, #36]	; (801076c <_dtoa_r+0xc2c>)
 8010748:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801074a:	9306      	str	r3, [sp, #24]
 801074c:	4b08      	ldr	r3, [pc, #32]	; (8010770 <_dtoa_r+0xc30>)
 801074e:	2a00      	cmp	r2, #0
 8010750:	d001      	beq.n	8010756 <_dtoa_r+0xc16>
 8010752:	f7ff fa3f 	bl	800fbd4 <_dtoa_r+0x94>
 8010756:	f7ff fa3f 	bl	800fbd8 <_dtoa_r+0x98>
 801075a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801075c:	2b00      	cmp	r3, #0
 801075e:	dcb6      	bgt.n	80106ce <_dtoa_r+0xb8e>
 8010760:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010762:	2b02      	cmp	r3, #2
 8010764:	dd00      	ble.n	8010768 <_dtoa_r+0xc28>
 8010766:	e6ac      	b.n	80104c2 <_dtoa_r+0x982>
 8010768:	e7b1      	b.n	80106ce <_dtoa_r+0xb8e>
 801076a:	46c0      	nop			; (mov r8, r8)
 801076c:	08013bb5 	.word	0x08013bb5
 8010770:	08013bbd 	.word	0x08013bbd

08010774 <__sflush_r>:
 8010774:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010776:	898b      	ldrh	r3, [r1, #12]
 8010778:	0005      	movs	r5, r0
 801077a:	000c      	movs	r4, r1
 801077c:	071a      	lsls	r2, r3, #28
 801077e:	d45f      	bmi.n	8010840 <__sflush_r+0xcc>
 8010780:	684a      	ldr	r2, [r1, #4]
 8010782:	2a00      	cmp	r2, #0
 8010784:	dc04      	bgt.n	8010790 <__sflush_r+0x1c>
 8010786:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8010788:	2a00      	cmp	r2, #0
 801078a:	dc01      	bgt.n	8010790 <__sflush_r+0x1c>
 801078c:	2000      	movs	r0, #0
 801078e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010790:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8010792:	2f00      	cmp	r7, #0
 8010794:	d0fa      	beq.n	801078c <__sflush_r+0x18>
 8010796:	2200      	movs	r2, #0
 8010798:	2180      	movs	r1, #128	; 0x80
 801079a:	682e      	ldr	r6, [r5, #0]
 801079c:	602a      	str	r2, [r5, #0]
 801079e:	001a      	movs	r2, r3
 80107a0:	0149      	lsls	r1, r1, #5
 80107a2:	400a      	ands	r2, r1
 80107a4:	420b      	tst	r3, r1
 80107a6:	d034      	beq.n	8010812 <__sflush_r+0x9e>
 80107a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80107aa:	89a3      	ldrh	r3, [r4, #12]
 80107ac:	075b      	lsls	r3, r3, #29
 80107ae:	d506      	bpl.n	80107be <__sflush_r+0x4a>
 80107b0:	6863      	ldr	r3, [r4, #4]
 80107b2:	1ac0      	subs	r0, r0, r3
 80107b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d001      	beq.n	80107be <__sflush_r+0x4a>
 80107ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80107bc:	1ac0      	subs	r0, r0, r3
 80107be:	0002      	movs	r2, r0
 80107c0:	6a21      	ldr	r1, [r4, #32]
 80107c2:	2300      	movs	r3, #0
 80107c4:	0028      	movs	r0, r5
 80107c6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80107c8:	47b8      	blx	r7
 80107ca:	89a1      	ldrh	r1, [r4, #12]
 80107cc:	1c43      	adds	r3, r0, #1
 80107ce:	d106      	bne.n	80107de <__sflush_r+0x6a>
 80107d0:	682b      	ldr	r3, [r5, #0]
 80107d2:	2b1d      	cmp	r3, #29
 80107d4:	d831      	bhi.n	801083a <__sflush_r+0xc6>
 80107d6:	4a2c      	ldr	r2, [pc, #176]	; (8010888 <__sflush_r+0x114>)
 80107d8:	40da      	lsrs	r2, r3
 80107da:	07d3      	lsls	r3, r2, #31
 80107dc:	d52d      	bpl.n	801083a <__sflush_r+0xc6>
 80107de:	2300      	movs	r3, #0
 80107e0:	6063      	str	r3, [r4, #4]
 80107e2:	6923      	ldr	r3, [r4, #16]
 80107e4:	6023      	str	r3, [r4, #0]
 80107e6:	04cb      	lsls	r3, r1, #19
 80107e8:	d505      	bpl.n	80107f6 <__sflush_r+0x82>
 80107ea:	1c43      	adds	r3, r0, #1
 80107ec:	d102      	bne.n	80107f4 <__sflush_r+0x80>
 80107ee:	682b      	ldr	r3, [r5, #0]
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d100      	bne.n	80107f6 <__sflush_r+0x82>
 80107f4:	6560      	str	r0, [r4, #84]	; 0x54
 80107f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80107f8:	602e      	str	r6, [r5, #0]
 80107fa:	2900      	cmp	r1, #0
 80107fc:	d0c6      	beq.n	801078c <__sflush_r+0x18>
 80107fe:	0023      	movs	r3, r4
 8010800:	3344      	adds	r3, #68	; 0x44
 8010802:	4299      	cmp	r1, r3
 8010804:	d002      	beq.n	801080c <__sflush_r+0x98>
 8010806:	0028      	movs	r0, r5
 8010808:	f000 fc86 	bl	8011118 <_free_r>
 801080c:	2000      	movs	r0, #0
 801080e:	6360      	str	r0, [r4, #52]	; 0x34
 8010810:	e7bd      	b.n	801078e <__sflush_r+0x1a>
 8010812:	2301      	movs	r3, #1
 8010814:	0028      	movs	r0, r5
 8010816:	6a21      	ldr	r1, [r4, #32]
 8010818:	47b8      	blx	r7
 801081a:	1c43      	adds	r3, r0, #1
 801081c:	d1c5      	bne.n	80107aa <__sflush_r+0x36>
 801081e:	682b      	ldr	r3, [r5, #0]
 8010820:	2b00      	cmp	r3, #0
 8010822:	d0c2      	beq.n	80107aa <__sflush_r+0x36>
 8010824:	2b1d      	cmp	r3, #29
 8010826:	d001      	beq.n	801082c <__sflush_r+0xb8>
 8010828:	2b16      	cmp	r3, #22
 801082a:	d101      	bne.n	8010830 <__sflush_r+0xbc>
 801082c:	602e      	str	r6, [r5, #0]
 801082e:	e7ad      	b.n	801078c <__sflush_r+0x18>
 8010830:	2340      	movs	r3, #64	; 0x40
 8010832:	89a2      	ldrh	r2, [r4, #12]
 8010834:	4313      	orrs	r3, r2
 8010836:	81a3      	strh	r3, [r4, #12]
 8010838:	e7a9      	b.n	801078e <__sflush_r+0x1a>
 801083a:	2340      	movs	r3, #64	; 0x40
 801083c:	430b      	orrs	r3, r1
 801083e:	e7fa      	b.n	8010836 <__sflush_r+0xc2>
 8010840:	690f      	ldr	r7, [r1, #16]
 8010842:	2f00      	cmp	r7, #0
 8010844:	d0a2      	beq.n	801078c <__sflush_r+0x18>
 8010846:	680a      	ldr	r2, [r1, #0]
 8010848:	600f      	str	r7, [r1, #0]
 801084a:	1bd2      	subs	r2, r2, r7
 801084c:	9201      	str	r2, [sp, #4]
 801084e:	2200      	movs	r2, #0
 8010850:	079b      	lsls	r3, r3, #30
 8010852:	d100      	bne.n	8010856 <__sflush_r+0xe2>
 8010854:	694a      	ldr	r2, [r1, #20]
 8010856:	60a2      	str	r2, [r4, #8]
 8010858:	9b01      	ldr	r3, [sp, #4]
 801085a:	2b00      	cmp	r3, #0
 801085c:	dc00      	bgt.n	8010860 <__sflush_r+0xec>
 801085e:	e795      	b.n	801078c <__sflush_r+0x18>
 8010860:	003a      	movs	r2, r7
 8010862:	0028      	movs	r0, r5
 8010864:	9b01      	ldr	r3, [sp, #4]
 8010866:	6a21      	ldr	r1, [r4, #32]
 8010868:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801086a:	47b0      	blx	r6
 801086c:	2800      	cmp	r0, #0
 801086e:	dc06      	bgt.n	801087e <__sflush_r+0x10a>
 8010870:	2340      	movs	r3, #64	; 0x40
 8010872:	2001      	movs	r0, #1
 8010874:	89a2      	ldrh	r2, [r4, #12]
 8010876:	4240      	negs	r0, r0
 8010878:	4313      	orrs	r3, r2
 801087a:	81a3      	strh	r3, [r4, #12]
 801087c:	e787      	b.n	801078e <__sflush_r+0x1a>
 801087e:	9b01      	ldr	r3, [sp, #4]
 8010880:	183f      	adds	r7, r7, r0
 8010882:	1a1b      	subs	r3, r3, r0
 8010884:	9301      	str	r3, [sp, #4]
 8010886:	e7e7      	b.n	8010858 <__sflush_r+0xe4>
 8010888:	20400001 	.word	0x20400001

0801088c <_fflush_r>:
 801088c:	690b      	ldr	r3, [r1, #16]
 801088e:	b570      	push	{r4, r5, r6, lr}
 8010890:	0005      	movs	r5, r0
 8010892:	000c      	movs	r4, r1
 8010894:	2b00      	cmp	r3, #0
 8010896:	d102      	bne.n	801089e <_fflush_r+0x12>
 8010898:	2500      	movs	r5, #0
 801089a:	0028      	movs	r0, r5
 801089c:	bd70      	pop	{r4, r5, r6, pc}
 801089e:	2800      	cmp	r0, #0
 80108a0:	d004      	beq.n	80108ac <_fflush_r+0x20>
 80108a2:	6983      	ldr	r3, [r0, #24]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d101      	bne.n	80108ac <_fflush_r+0x20>
 80108a8:	f7fe f92e 	bl	800eb08 <__sinit>
 80108ac:	4b14      	ldr	r3, [pc, #80]	; (8010900 <_fflush_r+0x74>)
 80108ae:	429c      	cmp	r4, r3
 80108b0:	d11b      	bne.n	80108ea <_fflush_r+0x5e>
 80108b2:	686c      	ldr	r4, [r5, #4]
 80108b4:	220c      	movs	r2, #12
 80108b6:	5ea3      	ldrsh	r3, [r4, r2]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d0ed      	beq.n	8010898 <_fflush_r+0xc>
 80108bc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80108be:	07d2      	lsls	r2, r2, #31
 80108c0:	d404      	bmi.n	80108cc <_fflush_r+0x40>
 80108c2:	059b      	lsls	r3, r3, #22
 80108c4:	d402      	bmi.n	80108cc <_fflush_r+0x40>
 80108c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80108c8:	f7fe f9e3 	bl	800ec92 <__retarget_lock_acquire_recursive>
 80108cc:	0028      	movs	r0, r5
 80108ce:	0021      	movs	r1, r4
 80108d0:	f7ff ff50 	bl	8010774 <__sflush_r>
 80108d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80108d6:	0005      	movs	r5, r0
 80108d8:	07db      	lsls	r3, r3, #31
 80108da:	d4de      	bmi.n	801089a <_fflush_r+0xe>
 80108dc:	89a3      	ldrh	r3, [r4, #12]
 80108de:	059b      	lsls	r3, r3, #22
 80108e0:	d4db      	bmi.n	801089a <_fflush_r+0xe>
 80108e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80108e4:	f7fe f9d6 	bl	800ec94 <__retarget_lock_release_recursive>
 80108e8:	e7d7      	b.n	801089a <_fflush_r+0xe>
 80108ea:	4b06      	ldr	r3, [pc, #24]	; (8010904 <_fflush_r+0x78>)
 80108ec:	429c      	cmp	r4, r3
 80108ee:	d101      	bne.n	80108f4 <_fflush_r+0x68>
 80108f0:	68ac      	ldr	r4, [r5, #8]
 80108f2:	e7df      	b.n	80108b4 <_fflush_r+0x28>
 80108f4:	4b04      	ldr	r3, [pc, #16]	; (8010908 <_fflush_r+0x7c>)
 80108f6:	429c      	cmp	r4, r3
 80108f8:	d1dc      	bne.n	80108b4 <_fflush_r+0x28>
 80108fa:	68ec      	ldr	r4, [r5, #12]
 80108fc:	e7da      	b.n	80108b4 <_fflush_r+0x28>
 80108fe:	46c0      	nop			; (mov r8, r8)
 8010900:	08013a3c 	.word	0x08013a3c
 8010904:	08013a5c 	.word	0x08013a5c
 8010908:	08013a1c 	.word	0x08013a1c

0801090c <_localeconv_r>:
 801090c:	4800      	ldr	r0, [pc, #0]	; (8010910 <_localeconv_r+0x4>)
 801090e:	4770      	bx	lr
 8010910:	200001f0 	.word	0x200001f0

08010914 <_lseek_r>:
 8010914:	b570      	push	{r4, r5, r6, lr}
 8010916:	0004      	movs	r4, r0
 8010918:	0008      	movs	r0, r1
 801091a:	0011      	movs	r1, r2
 801091c:	001a      	movs	r2, r3
 801091e:	2300      	movs	r3, #0
 8010920:	4d05      	ldr	r5, [pc, #20]	; (8010938 <_lseek_r+0x24>)
 8010922:	602b      	str	r3, [r5, #0]
 8010924:	f7f3 feea 	bl	80046fc <_lseek>
 8010928:	1c43      	adds	r3, r0, #1
 801092a:	d103      	bne.n	8010934 <_lseek_r+0x20>
 801092c:	682b      	ldr	r3, [r5, #0]
 801092e:	2b00      	cmp	r3, #0
 8010930:	d000      	beq.n	8010934 <_lseek_r+0x20>
 8010932:	6023      	str	r3, [r4, #0]
 8010934:	bd70      	pop	{r4, r5, r6, pc}
 8010936:	46c0      	nop			; (mov r8, r8)
 8010938:	200021bc 	.word	0x200021bc

0801093c <malloc>:
 801093c:	b510      	push	{r4, lr}
 801093e:	4b03      	ldr	r3, [pc, #12]	; (801094c <malloc+0x10>)
 8010940:	0001      	movs	r1, r0
 8010942:	6818      	ldr	r0, [r3, #0]
 8010944:	f7fe f9da 	bl	800ecfc <_malloc_r>
 8010948:	bd10      	pop	{r4, pc}
 801094a:	46c0      	nop			; (mov r8, r8)
 801094c:	2000009c 	.word	0x2000009c

08010950 <memchr>:
 8010950:	b2c9      	uxtb	r1, r1
 8010952:	1882      	adds	r2, r0, r2
 8010954:	4290      	cmp	r0, r2
 8010956:	d101      	bne.n	801095c <memchr+0xc>
 8010958:	2000      	movs	r0, #0
 801095a:	4770      	bx	lr
 801095c:	7803      	ldrb	r3, [r0, #0]
 801095e:	428b      	cmp	r3, r1
 8010960:	d0fb      	beq.n	801095a <memchr+0xa>
 8010962:	3001      	adds	r0, #1
 8010964:	e7f6      	b.n	8010954 <memchr+0x4>
	...

08010968 <__malloc_lock>:
 8010968:	b510      	push	{r4, lr}
 801096a:	4802      	ldr	r0, [pc, #8]	; (8010974 <__malloc_lock+0xc>)
 801096c:	f7fe f991 	bl	800ec92 <__retarget_lock_acquire_recursive>
 8010970:	bd10      	pop	{r4, pc}
 8010972:	46c0      	nop			; (mov r8, r8)
 8010974:	200021b0 	.word	0x200021b0

08010978 <__malloc_unlock>:
 8010978:	b510      	push	{r4, lr}
 801097a:	4802      	ldr	r0, [pc, #8]	; (8010984 <__malloc_unlock+0xc>)
 801097c:	f7fe f98a 	bl	800ec94 <__retarget_lock_release_recursive>
 8010980:	bd10      	pop	{r4, pc}
 8010982:	46c0      	nop			; (mov r8, r8)
 8010984:	200021b0 	.word	0x200021b0

08010988 <_Balloc>:
 8010988:	b570      	push	{r4, r5, r6, lr}
 801098a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801098c:	0006      	movs	r6, r0
 801098e:	000c      	movs	r4, r1
 8010990:	2d00      	cmp	r5, #0
 8010992:	d10e      	bne.n	80109b2 <_Balloc+0x2a>
 8010994:	2010      	movs	r0, #16
 8010996:	f7ff ffd1 	bl	801093c <malloc>
 801099a:	1e02      	subs	r2, r0, #0
 801099c:	6270      	str	r0, [r6, #36]	; 0x24
 801099e:	d104      	bne.n	80109aa <_Balloc+0x22>
 80109a0:	2166      	movs	r1, #102	; 0x66
 80109a2:	4b19      	ldr	r3, [pc, #100]	; (8010a08 <_Balloc+0x80>)
 80109a4:	4819      	ldr	r0, [pc, #100]	; (8010a0c <_Balloc+0x84>)
 80109a6:	f000 fe45 	bl	8011634 <__assert_func>
 80109aa:	6045      	str	r5, [r0, #4]
 80109ac:	6085      	str	r5, [r0, #8]
 80109ae:	6005      	str	r5, [r0, #0]
 80109b0:	60c5      	str	r5, [r0, #12]
 80109b2:	6a75      	ldr	r5, [r6, #36]	; 0x24
 80109b4:	68eb      	ldr	r3, [r5, #12]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d013      	beq.n	80109e2 <_Balloc+0x5a>
 80109ba:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80109bc:	00a2      	lsls	r2, r4, #2
 80109be:	68db      	ldr	r3, [r3, #12]
 80109c0:	189b      	adds	r3, r3, r2
 80109c2:	6818      	ldr	r0, [r3, #0]
 80109c4:	2800      	cmp	r0, #0
 80109c6:	d118      	bne.n	80109fa <_Balloc+0x72>
 80109c8:	2101      	movs	r1, #1
 80109ca:	000d      	movs	r5, r1
 80109cc:	40a5      	lsls	r5, r4
 80109ce:	1d6a      	adds	r2, r5, #5
 80109d0:	0030      	movs	r0, r6
 80109d2:	0092      	lsls	r2, r2, #2
 80109d4:	f000 fb74 	bl	80110c0 <_calloc_r>
 80109d8:	2800      	cmp	r0, #0
 80109da:	d00c      	beq.n	80109f6 <_Balloc+0x6e>
 80109dc:	6044      	str	r4, [r0, #4]
 80109de:	6085      	str	r5, [r0, #8]
 80109e0:	e00d      	b.n	80109fe <_Balloc+0x76>
 80109e2:	2221      	movs	r2, #33	; 0x21
 80109e4:	2104      	movs	r1, #4
 80109e6:	0030      	movs	r0, r6
 80109e8:	f000 fb6a 	bl	80110c0 <_calloc_r>
 80109ec:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80109ee:	60e8      	str	r0, [r5, #12]
 80109f0:	68db      	ldr	r3, [r3, #12]
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d1e1      	bne.n	80109ba <_Balloc+0x32>
 80109f6:	2000      	movs	r0, #0
 80109f8:	bd70      	pop	{r4, r5, r6, pc}
 80109fa:	6802      	ldr	r2, [r0, #0]
 80109fc:	601a      	str	r2, [r3, #0]
 80109fe:	2300      	movs	r3, #0
 8010a00:	6103      	str	r3, [r0, #16]
 8010a02:	60c3      	str	r3, [r0, #12]
 8010a04:	e7f8      	b.n	80109f8 <_Balloc+0x70>
 8010a06:	46c0      	nop			; (mov r8, r8)
 8010a08:	08013bc2 	.word	0x08013bc2
 8010a0c:	08013c45 	.word	0x08013c45

08010a10 <_Bfree>:
 8010a10:	b570      	push	{r4, r5, r6, lr}
 8010a12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010a14:	0005      	movs	r5, r0
 8010a16:	000c      	movs	r4, r1
 8010a18:	2e00      	cmp	r6, #0
 8010a1a:	d10e      	bne.n	8010a3a <_Bfree+0x2a>
 8010a1c:	2010      	movs	r0, #16
 8010a1e:	f7ff ff8d 	bl	801093c <malloc>
 8010a22:	1e02      	subs	r2, r0, #0
 8010a24:	6268      	str	r0, [r5, #36]	; 0x24
 8010a26:	d104      	bne.n	8010a32 <_Bfree+0x22>
 8010a28:	218a      	movs	r1, #138	; 0x8a
 8010a2a:	4b09      	ldr	r3, [pc, #36]	; (8010a50 <_Bfree+0x40>)
 8010a2c:	4809      	ldr	r0, [pc, #36]	; (8010a54 <_Bfree+0x44>)
 8010a2e:	f000 fe01 	bl	8011634 <__assert_func>
 8010a32:	6046      	str	r6, [r0, #4]
 8010a34:	6086      	str	r6, [r0, #8]
 8010a36:	6006      	str	r6, [r0, #0]
 8010a38:	60c6      	str	r6, [r0, #12]
 8010a3a:	2c00      	cmp	r4, #0
 8010a3c:	d007      	beq.n	8010a4e <_Bfree+0x3e>
 8010a3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010a40:	6862      	ldr	r2, [r4, #4]
 8010a42:	68db      	ldr	r3, [r3, #12]
 8010a44:	0092      	lsls	r2, r2, #2
 8010a46:	189b      	adds	r3, r3, r2
 8010a48:	681a      	ldr	r2, [r3, #0]
 8010a4a:	6022      	str	r2, [r4, #0]
 8010a4c:	601c      	str	r4, [r3, #0]
 8010a4e:	bd70      	pop	{r4, r5, r6, pc}
 8010a50:	08013bc2 	.word	0x08013bc2
 8010a54:	08013c45 	.word	0x08013c45

08010a58 <__multadd>:
 8010a58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010a5a:	000e      	movs	r6, r1
 8010a5c:	9001      	str	r0, [sp, #4]
 8010a5e:	000c      	movs	r4, r1
 8010a60:	001d      	movs	r5, r3
 8010a62:	2000      	movs	r0, #0
 8010a64:	690f      	ldr	r7, [r1, #16]
 8010a66:	3614      	adds	r6, #20
 8010a68:	6833      	ldr	r3, [r6, #0]
 8010a6a:	3001      	adds	r0, #1
 8010a6c:	b299      	uxth	r1, r3
 8010a6e:	4351      	muls	r1, r2
 8010a70:	0c1b      	lsrs	r3, r3, #16
 8010a72:	4353      	muls	r3, r2
 8010a74:	1949      	adds	r1, r1, r5
 8010a76:	0c0d      	lsrs	r5, r1, #16
 8010a78:	195b      	adds	r3, r3, r5
 8010a7a:	0c1d      	lsrs	r5, r3, #16
 8010a7c:	b289      	uxth	r1, r1
 8010a7e:	041b      	lsls	r3, r3, #16
 8010a80:	185b      	adds	r3, r3, r1
 8010a82:	c608      	stmia	r6!, {r3}
 8010a84:	4287      	cmp	r7, r0
 8010a86:	dcef      	bgt.n	8010a68 <__multadd+0x10>
 8010a88:	2d00      	cmp	r5, #0
 8010a8a:	d022      	beq.n	8010ad2 <__multadd+0x7a>
 8010a8c:	68a3      	ldr	r3, [r4, #8]
 8010a8e:	42bb      	cmp	r3, r7
 8010a90:	dc19      	bgt.n	8010ac6 <__multadd+0x6e>
 8010a92:	6863      	ldr	r3, [r4, #4]
 8010a94:	9801      	ldr	r0, [sp, #4]
 8010a96:	1c59      	adds	r1, r3, #1
 8010a98:	f7ff ff76 	bl	8010988 <_Balloc>
 8010a9c:	1e06      	subs	r6, r0, #0
 8010a9e:	d105      	bne.n	8010aac <__multadd+0x54>
 8010aa0:	0002      	movs	r2, r0
 8010aa2:	21b5      	movs	r1, #181	; 0xb5
 8010aa4:	4b0c      	ldr	r3, [pc, #48]	; (8010ad8 <__multadd+0x80>)
 8010aa6:	480d      	ldr	r0, [pc, #52]	; (8010adc <__multadd+0x84>)
 8010aa8:	f000 fdc4 	bl	8011634 <__assert_func>
 8010aac:	0021      	movs	r1, r4
 8010aae:	6923      	ldr	r3, [r4, #16]
 8010ab0:	310c      	adds	r1, #12
 8010ab2:	1c9a      	adds	r2, r3, #2
 8010ab4:	0092      	lsls	r2, r2, #2
 8010ab6:	300c      	adds	r0, #12
 8010ab8:	f7fe f8ed 	bl	800ec96 <memcpy>
 8010abc:	0021      	movs	r1, r4
 8010abe:	9801      	ldr	r0, [sp, #4]
 8010ac0:	f7ff ffa6 	bl	8010a10 <_Bfree>
 8010ac4:	0034      	movs	r4, r6
 8010ac6:	1d3b      	adds	r3, r7, #4
 8010ac8:	009b      	lsls	r3, r3, #2
 8010aca:	18e3      	adds	r3, r4, r3
 8010acc:	605d      	str	r5, [r3, #4]
 8010ace:	1c7b      	adds	r3, r7, #1
 8010ad0:	6123      	str	r3, [r4, #16]
 8010ad2:	0020      	movs	r0, r4
 8010ad4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010ad6:	46c0      	nop			; (mov r8, r8)
 8010ad8:	08013c34 	.word	0x08013c34
 8010adc:	08013c45 	.word	0x08013c45

08010ae0 <__hi0bits>:
 8010ae0:	0003      	movs	r3, r0
 8010ae2:	0c02      	lsrs	r2, r0, #16
 8010ae4:	2000      	movs	r0, #0
 8010ae6:	4282      	cmp	r2, r0
 8010ae8:	d101      	bne.n	8010aee <__hi0bits+0xe>
 8010aea:	041b      	lsls	r3, r3, #16
 8010aec:	3010      	adds	r0, #16
 8010aee:	0e1a      	lsrs	r2, r3, #24
 8010af0:	d101      	bne.n	8010af6 <__hi0bits+0x16>
 8010af2:	3008      	adds	r0, #8
 8010af4:	021b      	lsls	r3, r3, #8
 8010af6:	0f1a      	lsrs	r2, r3, #28
 8010af8:	d101      	bne.n	8010afe <__hi0bits+0x1e>
 8010afa:	3004      	adds	r0, #4
 8010afc:	011b      	lsls	r3, r3, #4
 8010afe:	0f9a      	lsrs	r2, r3, #30
 8010b00:	d101      	bne.n	8010b06 <__hi0bits+0x26>
 8010b02:	3002      	adds	r0, #2
 8010b04:	009b      	lsls	r3, r3, #2
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	db03      	blt.n	8010b12 <__hi0bits+0x32>
 8010b0a:	3001      	adds	r0, #1
 8010b0c:	005b      	lsls	r3, r3, #1
 8010b0e:	d400      	bmi.n	8010b12 <__hi0bits+0x32>
 8010b10:	2020      	movs	r0, #32
 8010b12:	4770      	bx	lr

08010b14 <__lo0bits>:
 8010b14:	6803      	ldr	r3, [r0, #0]
 8010b16:	0002      	movs	r2, r0
 8010b18:	2107      	movs	r1, #7
 8010b1a:	0018      	movs	r0, r3
 8010b1c:	4008      	ands	r0, r1
 8010b1e:	420b      	tst	r3, r1
 8010b20:	d00d      	beq.n	8010b3e <__lo0bits+0x2a>
 8010b22:	3906      	subs	r1, #6
 8010b24:	2000      	movs	r0, #0
 8010b26:	420b      	tst	r3, r1
 8010b28:	d105      	bne.n	8010b36 <__lo0bits+0x22>
 8010b2a:	3002      	adds	r0, #2
 8010b2c:	4203      	tst	r3, r0
 8010b2e:	d003      	beq.n	8010b38 <__lo0bits+0x24>
 8010b30:	40cb      	lsrs	r3, r1
 8010b32:	0008      	movs	r0, r1
 8010b34:	6013      	str	r3, [r2, #0]
 8010b36:	4770      	bx	lr
 8010b38:	089b      	lsrs	r3, r3, #2
 8010b3a:	6013      	str	r3, [r2, #0]
 8010b3c:	e7fb      	b.n	8010b36 <__lo0bits+0x22>
 8010b3e:	b299      	uxth	r1, r3
 8010b40:	2900      	cmp	r1, #0
 8010b42:	d101      	bne.n	8010b48 <__lo0bits+0x34>
 8010b44:	2010      	movs	r0, #16
 8010b46:	0c1b      	lsrs	r3, r3, #16
 8010b48:	b2d9      	uxtb	r1, r3
 8010b4a:	2900      	cmp	r1, #0
 8010b4c:	d101      	bne.n	8010b52 <__lo0bits+0x3e>
 8010b4e:	3008      	adds	r0, #8
 8010b50:	0a1b      	lsrs	r3, r3, #8
 8010b52:	0719      	lsls	r1, r3, #28
 8010b54:	d101      	bne.n	8010b5a <__lo0bits+0x46>
 8010b56:	3004      	adds	r0, #4
 8010b58:	091b      	lsrs	r3, r3, #4
 8010b5a:	0799      	lsls	r1, r3, #30
 8010b5c:	d101      	bne.n	8010b62 <__lo0bits+0x4e>
 8010b5e:	3002      	adds	r0, #2
 8010b60:	089b      	lsrs	r3, r3, #2
 8010b62:	07d9      	lsls	r1, r3, #31
 8010b64:	d4e9      	bmi.n	8010b3a <__lo0bits+0x26>
 8010b66:	3001      	adds	r0, #1
 8010b68:	085b      	lsrs	r3, r3, #1
 8010b6a:	d1e6      	bne.n	8010b3a <__lo0bits+0x26>
 8010b6c:	2020      	movs	r0, #32
 8010b6e:	e7e2      	b.n	8010b36 <__lo0bits+0x22>

08010b70 <__i2b>:
 8010b70:	b510      	push	{r4, lr}
 8010b72:	000c      	movs	r4, r1
 8010b74:	2101      	movs	r1, #1
 8010b76:	f7ff ff07 	bl	8010988 <_Balloc>
 8010b7a:	2800      	cmp	r0, #0
 8010b7c:	d106      	bne.n	8010b8c <__i2b+0x1c>
 8010b7e:	21a0      	movs	r1, #160	; 0xa0
 8010b80:	0002      	movs	r2, r0
 8010b82:	4b04      	ldr	r3, [pc, #16]	; (8010b94 <__i2b+0x24>)
 8010b84:	4804      	ldr	r0, [pc, #16]	; (8010b98 <__i2b+0x28>)
 8010b86:	0049      	lsls	r1, r1, #1
 8010b88:	f000 fd54 	bl	8011634 <__assert_func>
 8010b8c:	2301      	movs	r3, #1
 8010b8e:	6144      	str	r4, [r0, #20]
 8010b90:	6103      	str	r3, [r0, #16]
 8010b92:	bd10      	pop	{r4, pc}
 8010b94:	08013c34 	.word	0x08013c34
 8010b98:	08013c45 	.word	0x08013c45

08010b9c <__multiply>:
 8010b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b9e:	690b      	ldr	r3, [r1, #16]
 8010ba0:	0014      	movs	r4, r2
 8010ba2:	6912      	ldr	r2, [r2, #16]
 8010ba4:	000d      	movs	r5, r1
 8010ba6:	b089      	sub	sp, #36	; 0x24
 8010ba8:	4293      	cmp	r3, r2
 8010baa:	da01      	bge.n	8010bb0 <__multiply+0x14>
 8010bac:	0025      	movs	r5, r4
 8010bae:	000c      	movs	r4, r1
 8010bb0:	692f      	ldr	r7, [r5, #16]
 8010bb2:	6926      	ldr	r6, [r4, #16]
 8010bb4:	6869      	ldr	r1, [r5, #4]
 8010bb6:	19bb      	adds	r3, r7, r6
 8010bb8:	9302      	str	r3, [sp, #8]
 8010bba:	68ab      	ldr	r3, [r5, #8]
 8010bbc:	19ba      	adds	r2, r7, r6
 8010bbe:	4293      	cmp	r3, r2
 8010bc0:	da00      	bge.n	8010bc4 <__multiply+0x28>
 8010bc2:	3101      	adds	r1, #1
 8010bc4:	f7ff fee0 	bl	8010988 <_Balloc>
 8010bc8:	9001      	str	r0, [sp, #4]
 8010bca:	2800      	cmp	r0, #0
 8010bcc:	d106      	bne.n	8010bdc <__multiply+0x40>
 8010bce:	215e      	movs	r1, #94	; 0x5e
 8010bd0:	0002      	movs	r2, r0
 8010bd2:	4b48      	ldr	r3, [pc, #288]	; (8010cf4 <__multiply+0x158>)
 8010bd4:	4848      	ldr	r0, [pc, #288]	; (8010cf8 <__multiply+0x15c>)
 8010bd6:	31ff      	adds	r1, #255	; 0xff
 8010bd8:	f000 fd2c 	bl	8011634 <__assert_func>
 8010bdc:	9b01      	ldr	r3, [sp, #4]
 8010bde:	2200      	movs	r2, #0
 8010be0:	3314      	adds	r3, #20
 8010be2:	469c      	mov	ip, r3
 8010be4:	19bb      	adds	r3, r7, r6
 8010be6:	009b      	lsls	r3, r3, #2
 8010be8:	4463      	add	r3, ip
 8010bea:	9303      	str	r3, [sp, #12]
 8010bec:	4663      	mov	r3, ip
 8010bee:	9903      	ldr	r1, [sp, #12]
 8010bf0:	428b      	cmp	r3, r1
 8010bf2:	d32c      	bcc.n	8010c4e <__multiply+0xb2>
 8010bf4:	002b      	movs	r3, r5
 8010bf6:	0022      	movs	r2, r4
 8010bf8:	3314      	adds	r3, #20
 8010bfa:	00bf      	lsls	r7, r7, #2
 8010bfc:	3214      	adds	r2, #20
 8010bfe:	9306      	str	r3, [sp, #24]
 8010c00:	00b6      	lsls	r6, r6, #2
 8010c02:	19db      	adds	r3, r3, r7
 8010c04:	9304      	str	r3, [sp, #16]
 8010c06:	1993      	adds	r3, r2, r6
 8010c08:	9307      	str	r3, [sp, #28]
 8010c0a:	2304      	movs	r3, #4
 8010c0c:	9305      	str	r3, [sp, #20]
 8010c0e:	002b      	movs	r3, r5
 8010c10:	9904      	ldr	r1, [sp, #16]
 8010c12:	3315      	adds	r3, #21
 8010c14:	9200      	str	r2, [sp, #0]
 8010c16:	4299      	cmp	r1, r3
 8010c18:	d305      	bcc.n	8010c26 <__multiply+0x8a>
 8010c1a:	1b4b      	subs	r3, r1, r5
 8010c1c:	3b15      	subs	r3, #21
 8010c1e:	089b      	lsrs	r3, r3, #2
 8010c20:	3301      	adds	r3, #1
 8010c22:	009b      	lsls	r3, r3, #2
 8010c24:	9305      	str	r3, [sp, #20]
 8010c26:	9b07      	ldr	r3, [sp, #28]
 8010c28:	9a00      	ldr	r2, [sp, #0]
 8010c2a:	429a      	cmp	r2, r3
 8010c2c:	d311      	bcc.n	8010c52 <__multiply+0xb6>
 8010c2e:	9b02      	ldr	r3, [sp, #8]
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	dd06      	ble.n	8010c42 <__multiply+0xa6>
 8010c34:	9b03      	ldr	r3, [sp, #12]
 8010c36:	3b04      	subs	r3, #4
 8010c38:	9303      	str	r3, [sp, #12]
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	9300      	str	r3, [sp, #0]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d053      	beq.n	8010cea <__multiply+0x14e>
 8010c42:	9b01      	ldr	r3, [sp, #4]
 8010c44:	9a02      	ldr	r2, [sp, #8]
 8010c46:	0018      	movs	r0, r3
 8010c48:	611a      	str	r2, [r3, #16]
 8010c4a:	b009      	add	sp, #36	; 0x24
 8010c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c4e:	c304      	stmia	r3!, {r2}
 8010c50:	e7cd      	b.n	8010bee <__multiply+0x52>
 8010c52:	9b00      	ldr	r3, [sp, #0]
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	b298      	uxth	r0, r3
 8010c58:	2800      	cmp	r0, #0
 8010c5a:	d01b      	beq.n	8010c94 <__multiply+0xf8>
 8010c5c:	4667      	mov	r7, ip
 8010c5e:	2400      	movs	r4, #0
 8010c60:	9e06      	ldr	r6, [sp, #24]
 8010c62:	ce02      	ldmia	r6!, {r1}
 8010c64:	683a      	ldr	r2, [r7, #0]
 8010c66:	b28b      	uxth	r3, r1
 8010c68:	4343      	muls	r3, r0
 8010c6a:	b292      	uxth	r2, r2
 8010c6c:	189b      	adds	r3, r3, r2
 8010c6e:	191b      	adds	r3, r3, r4
 8010c70:	0c0c      	lsrs	r4, r1, #16
 8010c72:	4344      	muls	r4, r0
 8010c74:	683a      	ldr	r2, [r7, #0]
 8010c76:	0c11      	lsrs	r1, r2, #16
 8010c78:	1861      	adds	r1, r4, r1
 8010c7a:	0c1c      	lsrs	r4, r3, #16
 8010c7c:	1909      	adds	r1, r1, r4
 8010c7e:	0c0c      	lsrs	r4, r1, #16
 8010c80:	b29b      	uxth	r3, r3
 8010c82:	0409      	lsls	r1, r1, #16
 8010c84:	430b      	orrs	r3, r1
 8010c86:	c708      	stmia	r7!, {r3}
 8010c88:	9b04      	ldr	r3, [sp, #16]
 8010c8a:	42b3      	cmp	r3, r6
 8010c8c:	d8e9      	bhi.n	8010c62 <__multiply+0xc6>
 8010c8e:	4663      	mov	r3, ip
 8010c90:	9a05      	ldr	r2, [sp, #20]
 8010c92:	509c      	str	r4, [r3, r2]
 8010c94:	9b00      	ldr	r3, [sp, #0]
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	0c1e      	lsrs	r6, r3, #16
 8010c9a:	d020      	beq.n	8010cde <__multiply+0x142>
 8010c9c:	4663      	mov	r3, ip
 8010c9e:	002c      	movs	r4, r5
 8010ca0:	4660      	mov	r0, ip
 8010ca2:	2700      	movs	r7, #0
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	3414      	adds	r4, #20
 8010ca8:	6822      	ldr	r2, [r4, #0]
 8010caa:	b29b      	uxth	r3, r3
 8010cac:	b291      	uxth	r1, r2
 8010cae:	4371      	muls	r1, r6
 8010cb0:	6802      	ldr	r2, [r0, #0]
 8010cb2:	0c12      	lsrs	r2, r2, #16
 8010cb4:	1889      	adds	r1, r1, r2
 8010cb6:	19cf      	adds	r7, r1, r7
 8010cb8:	0439      	lsls	r1, r7, #16
 8010cba:	430b      	orrs	r3, r1
 8010cbc:	6003      	str	r3, [r0, #0]
 8010cbe:	cc02      	ldmia	r4!, {r1}
 8010cc0:	6843      	ldr	r3, [r0, #4]
 8010cc2:	0c09      	lsrs	r1, r1, #16
 8010cc4:	4371      	muls	r1, r6
 8010cc6:	b29b      	uxth	r3, r3
 8010cc8:	0c3f      	lsrs	r7, r7, #16
 8010cca:	18cb      	adds	r3, r1, r3
 8010ccc:	9a04      	ldr	r2, [sp, #16]
 8010cce:	19db      	adds	r3, r3, r7
 8010cd0:	0c1f      	lsrs	r7, r3, #16
 8010cd2:	3004      	adds	r0, #4
 8010cd4:	42a2      	cmp	r2, r4
 8010cd6:	d8e7      	bhi.n	8010ca8 <__multiply+0x10c>
 8010cd8:	4662      	mov	r2, ip
 8010cda:	9905      	ldr	r1, [sp, #20]
 8010cdc:	5053      	str	r3, [r2, r1]
 8010cde:	9b00      	ldr	r3, [sp, #0]
 8010ce0:	3304      	adds	r3, #4
 8010ce2:	9300      	str	r3, [sp, #0]
 8010ce4:	2304      	movs	r3, #4
 8010ce6:	449c      	add	ip, r3
 8010ce8:	e79d      	b.n	8010c26 <__multiply+0x8a>
 8010cea:	9b02      	ldr	r3, [sp, #8]
 8010cec:	3b01      	subs	r3, #1
 8010cee:	9302      	str	r3, [sp, #8]
 8010cf0:	e79d      	b.n	8010c2e <__multiply+0x92>
 8010cf2:	46c0      	nop			; (mov r8, r8)
 8010cf4:	08013c34 	.word	0x08013c34
 8010cf8:	08013c45 	.word	0x08013c45

08010cfc <__pow5mult>:
 8010cfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010cfe:	2303      	movs	r3, #3
 8010d00:	0015      	movs	r5, r2
 8010d02:	0007      	movs	r7, r0
 8010d04:	000e      	movs	r6, r1
 8010d06:	401a      	ands	r2, r3
 8010d08:	421d      	tst	r5, r3
 8010d0a:	d008      	beq.n	8010d1e <__pow5mult+0x22>
 8010d0c:	4925      	ldr	r1, [pc, #148]	; (8010da4 <__pow5mult+0xa8>)
 8010d0e:	3a01      	subs	r2, #1
 8010d10:	0092      	lsls	r2, r2, #2
 8010d12:	5852      	ldr	r2, [r2, r1]
 8010d14:	2300      	movs	r3, #0
 8010d16:	0031      	movs	r1, r6
 8010d18:	f7ff fe9e 	bl	8010a58 <__multadd>
 8010d1c:	0006      	movs	r6, r0
 8010d1e:	10ad      	asrs	r5, r5, #2
 8010d20:	d03d      	beq.n	8010d9e <__pow5mult+0xa2>
 8010d22:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8010d24:	2c00      	cmp	r4, #0
 8010d26:	d10f      	bne.n	8010d48 <__pow5mult+0x4c>
 8010d28:	2010      	movs	r0, #16
 8010d2a:	f7ff fe07 	bl	801093c <malloc>
 8010d2e:	1e02      	subs	r2, r0, #0
 8010d30:	6278      	str	r0, [r7, #36]	; 0x24
 8010d32:	d105      	bne.n	8010d40 <__pow5mult+0x44>
 8010d34:	21d7      	movs	r1, #215	; 0xd7
 8010d36:	4b1c      	ldr	r3, [pc, #112]	; (8010da8 <__pow5mult+0xac>)
 8010d38:	481c      	ldr	r0, [pc, #112]	; (8010dac <__pow5mult+0xb0>)
 8010d3a:	0049      	lsls	r1, r1, #1
 8010d3c:	f000 fc7a 	bl	8011634 <__assert_func>
 8010d40:	6044      	str	r4, [r0, #4]
 8010d42:	6084      	str	r4, [r0, #8]
 8010d44:	6004      	str	r4, [r0, #0]
 8010d46:	60c4      	str	r4, [r0, #12]
 8010d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d4a:	689c      	ldr	r4, [r3, #8]
 8010d4c:	9301      	str	r3, [sp, #4]
 8010d4e:	2c00      	cmp	r4, #0
 8010d50:	d108      	bne.n	8010d64 <__pow5mult+0x68>
 8010d52:	0038      	movs	r0, r7
 8010d54:	4916      	ldr	r1, [pc, #88]	; (8010db0 <__pow5mult+0xb4>)
 8010d56:	f7ff ff0b 	bl	8010b70 <__i2b>
 8010d5a:	9b01      	ldr	r3, [sp, #4]
 8010d5c:	0004      	movs	r4, r0
 8010d5e:	6098      	str	r0, [r3, #8]
 8010d60:	2300      	movs	r3, #0
 8010d62:	6003      	str	r3, [r0, #0]
 8010d64:	2301      	movs	r3, #1
 8010d66:	421d      	tst	r5, r3
 8010d68:	d00a      	beq.n	8010d80 <__pow5mult+0x84>
 8010d6a:	0031      	movs	r1, r6
 8010d6c:	0022      	movs	r2, r4
 8010d6e:	0038      	movs	r0, r7
 8010d70:	f7ff ff14 	bl	8010b9c <__multiply>
 8010d74:	0031      	movs	r1, r6
 8010d76:	9001      	str	r0, [sp, #4]
 8010d78:	0038      	movs	r0, r7
 8010d7a:	f7ff fe49 	bl	8010a10 <_Bfree>
 8010d7e:	9e01      	ldr	r6, [sp, #4]
 8010d80:	106d      	asrs	r5, r5, #1
 8010d82:	d00c      	beq.n	8010d9e <__pow5mult+0xa2>
 8010d84:	6820      	ldr	r0, [r4, #0]
 8010d86:	2800      	cmp	r0, #0
 8010d88:	d107      	bne.n	8010d9a <__pow5mult+0x9e>
 8010d8a:	0022      	movs	r2, r4
 8010d8c:	0021      	movs	r1, r4
 8010d8e:	0038      	movs	r0, r7
 8010d90:	f7ff ff04 	bl	8010b9c <__multiply>
 8010d94:	2300      	movs	r3, #0
 8010d96:	6020      	str	r0, [r4, #0]
 8010d98:	6003      	str	r3, [r0, #0]
 8010d9a:	0004      	movs	r4, r0
 8010d9c:	e7e2      	b.n	8010d64 <__pow5mult+0x68>
 8010d9e:	0030      	movs	r0, r6
 8010da0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010da2:	46c0      	nop			; (mov r8, r8)
 8010da4:	08013d98 	.word	0x08013d98
 8010da8:	08013bc2 	.word	0x08013bc2
 8010dac:	08013c45 	.word	0x08013c45
 8010db0:	00000271 	.word	0x00000271

08010db4 <__lshift>:
 8010db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010db6:	000c      	movs	r4, r1
 8010db8:	0017      	movs	r7, r2
 8010dba:	6923      	ldr	r3, [r4, #16]
 8010dbc:	1155      	asrs	r5, r2, #5
 8010dbe:	b087      	sub	sp, #28
 8010dc0:	18eb      	adds	r3, r5, r3
 8010dc2:	9302      	str	r3, [sp, #8]
 8010dc4:	3301      	adds	r3, #1
 8010dc6:	9301      	str	r3, [sp, #4]
 8010dc8:	6849      	ldr	r1, [r1, #4]
 8010dca:	68a3      	ldr	r3, [r4, #8]
 8010dcc:	9004      	str	r0, [sp, #16]
 8010dce:	9a01      	ldr	r2, [sp, #4]
 8010dd0:	4293      	cmp	r3, r2
 8010dd2:	db10      	blt.n	8010df6 <__lshift+0x42>
 8010dd4:	9804      	ldr	r0, [sp, #16]
 8010dd6:	f7ff fdd7 	bl	8010988 <_Balloc>
 8010dda:	2300      	movs	r3, #0
 8010ddc:	0002      	movs	r2, r0
 8010dde:	0006      	movs	r6, r0
 8010de0:	0019      	movs	r1, r3
 8010de2:	3214      	adds	r2, #20
 8010de4:	4298      	cmp	r0, r3
 8010de6:	d10c      	bne.n	8010e02 <__lshift+0x4e>
 8010de8:	21da      	movs	r1, #218	; 0xda
 8010dea:	0002      	movs	r2, r0
 8010dec:	4b26      	ldr	r3, [pc, #152]	; (8010e88 <__lshift+0xd4>)
 8010dee:	4827      	ldr	r0, [pc, #156]	; (8010e8c <__lshift+0xd8>)
 8010df0:	31ff      	adds	r1, #255	; 0xff
 8010df2:	f000 fc1f 	bl	8011634 <__assert_func>
 8010df6:	3101      	adds	r1, #1
 8010df8:	005b      	lsls	r3, r3, #1
 8010dfa:	e7e8      	b.n	8010dce <__lshift+0x1a>
 8010dfc:	0098      	lsls	r0, r3, #2
 8010dfe:	5011      	str	r1, [r2, r0]
 8010e00:	3301      	adds	r3, #1
 8010e02:	42ab      	cmp	r3, r5
 8010e04:	dbfa      	blt.n	8010dfc <__lshift+0x48>
 8010e06:	43eb      	mvns	r3, r5
 8010e08:	17db      	asrs	r3, r3, #31
 8010e0a:	401d      	ands	r5, r3
 8010e0c:	211f      	movs	r1, #31
 8010e0e:	0023      	movs	r3, r4
 8010e10:	0038      	movs	r0, r7
 8010e12:	00ad      	lsls	r5, r5, #2
 8010e14:	1955      	adds	r5, r2, r5
 8010e16:	6922      	ldr	r2, [r4, #16]
 8010e18:	3314      	adds	r3, #20
 8010e1a:	0092      	lsls	r2, r2, #2
 8010e1c:	4008      	ands	r0, r1
 8010e1e:	4684      	mov	ip, r0
 8010e20:	189a      	adds	r2, r3, r2
 8010e22:	420f      	tst	r7, r1
 8010e24:	d02a      	beq.n	8010e7c <__lshift+0xc8>
 8010e26:	3101      	adds	r1, #1
 8010e28:	1a09      	subs	r1, r1, r0
 8010e2a:	9105      	str	r1, [sp, #20]
 8010e2c:	2100      	movs	r1, #0
 8010e2e:	9503      	str	r5, [sp, #12]
 8010e30:	4667      	mov	r7, ip
 8010e32:	6818      	ldr	r0, [r3, #0]
 8010e34:	40b8      	lsls	r0, r7
 8010e36:	4301      	orrs	r1, r0
 8010e38:	9803      	ldr	r0, [sp, #12]
 8010e3a:	c002      	stmia	r0!, {r1}
 8010e3c:	cb02      	ldmia	r3!, {r1}
 8010e3e:	9003      	str	r0, [sp, #12]
 8010e40:	9805      	ldr	r0, [sp, #20]
 8010e42:	40c1      	lsrs	r1, r0
 8010e44:	429a      	cmp	r2, r3
 8010e46:	d8f3      	bhi.n	8010e30 <__lshift+0x7c>
 8010e48:	0020      	movs	r0, r4
 8010e4a:	3015      	adds	r0, #21
 8010e4c:	2304      	movs	r3, #4
 8010e4e:	4282      	cmp	r2, r0
 8010e50:	d304      	bcc.n	8010e5c <__lshift+0xa8>
 8010e52:	1b13      	subs	r3, r2, r4
 8010e54:	3b15      	subs	r3, #21
 8010e56:	089b      	lsrs	r3, r3, #2
 8010e58:	3301      	adds	r3, #1
 8010e5a:	009b      	lsls	r3, r3, #2
 8010e5c:	50e9      	str	r1, [r5, r3]
 8010e5e:	2900      	cmp	r1, #0
 8010e60:	d002      	beq.n	8010e68 <__lshift+0xb4>
 8010e62:	9b02      	ldr	r3, [sp, #8]
 8010e64:	3302      	adds	r3, #2
 8010e66:	9301      	str	r3, [sp, #4]
 8010e68:	9b01      	ldr	r3, [sp, #4]
 8010e6a:	9804      	ldr	r0, [sp, #16]
 8010e6c:	3b01      	subs	r3, #1
 8010e6e:	0021      	movs	r1, r4
 8010e70:	6133      	str	r3, [r6, #16]
 8010e72:	f7ff fdcd 	bl	8010a10 <_Bfree>
 8010e76:	0030      	movs	r0, r6
 8010e78:	b007      	add	sp, #28
 8010e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e7c:	cb02      	ldmia	r3!, {r1}
 8010e7e:	c502      	stmia	r5!, {r1}
 8010e80:	429a      	cmp	r2, r3
 8010e82:	d8fb      	bhi.n	8010e7c <__lshift+0xc8>
 8010e84:	e7f0      	b.n	8010e68 <__lshift+0xb4>
 8010e86:	46c0      	nop			; (mov r8, r8)
 8010e88:	08013c34 	.word	0x08013c34
 8010e8c:	08013c45 	.word	0x08013c45

08010e90 <__mcmp>:
 8010e90:	6902      	ldr	r2, [r0, #16]
 8010e92:	690b      	ldr	r3, [r1, #16]
 8010e94:	b530      	push	{r4, r5, lr}
 8010e96:	0004      	movs	r4, r0
 8010e98:	1ad0      	subs	r0, r2, r3
 8010e9a:	429a      	cmp	r2, r3
 8010e9c:	d10d      	bne.n	8010eba <__mcmp+0x2a>
 8010e9e:	009b      	lsls	r3, r3, #2
 8010ea0:	3414      	adds	r4, #20
 8010ea2:	3114      	adds	r1, #20
 8010ea4:	18e2      	adds	r2, r4, r3
 8010ea6:	18c9      	adds	r1, r1, r3
 8010ea8:	3a04      	subs	r2, #4
 8010eaa:	3904      	subs	r1, #4
 8010eac:	6815      	ldr	r5, [r2, #0]
 8010eae:	680b      	ldr	r3, [r1, #0]
 8010eb0:	429d      	cmp	r5, r3
 8010eb2:	d003      	beq.n	8010ebc <__mcmp+0x2c>
 8010eb4:	2001      	movs	r0, #1
 8010eb6:	429d      	cmp	r5, r3
 8010eb8:	d303      	bcc.n	8010ec2 <__mcmp+0x32>
 8010eba:	bd30      	pop	{r4, r5, pc}
 8010ebc:	4294      	cmp	r4, r2
 8010ebe:	d3f3      	bcc.n	8010ea8 <__mcmp+0x18>
 8010ec0:	e7fb      	b.n	8010eba <__mcmp+0x2a>
 8010ec2:	4240      	negs	r0, r0
 8010ec4:	e7f9      	b.n	8010eba <__mcmp+0x2a>
	...

08010ec8 <__mdiff>:
 8010ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010eca:	000e      	movs	r6, r1
 8010ecc:	0007      	movs	r7, r0
 8010ece:	0011      	movs	r1, r2
 8010ed0:	0030      	movs	r0, r6
 8010ed2:	b087      	sub	sp, #28
 8010ed4:	0014      	movs	r4, r2
 8010ed6:	f7ff ffdb 	bl	8010e90 <__mcmp>
 8010eda:	1e05      	subs	r5, r0, #0
 8010edc:	d110      	bne.n	8010f00 <__mdiff+0x38>
 8010ede:	0001      	movs	r1, r0
 8010ee0:	0038      	movs	r0, r7
 8010ee2:	f7ff fd51 	bl	8010988 <_Balloc>
 8010ee6:	1e02      	subs	r2, r0, #0
 8010ee8:	d104      	bne.n	8010ef4 <__mdiff+0x2c>
 8010eea:	4b40      	ldr	r3, [pc, #256]	; (8010fec <__mdiff+0x124>)
 8010eec:	4940      	ldr	r1, [pc, #256]	; (8010ff0 <__mdiff+0x128>)
 8010eee:	4841      	ldr	r0, [pc, #260]	; (8010ff4 <__mdiff+0x12c>)
 8010ef0:	f000 fba0 	bl	8011634 <__assert_func>
 8010ef4:	2301      	movs	r3, #1
 8010ef6:	6145      	str	r5, [r0, #20]
 8010ef8:	6103      	str	r3, [r0, #16]
 8010efa:	0010      	movs	r0, r2
 8010efc:	b007      	add	sp, #28
 8010efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f00:	2301      	movs	r3, #1
 8010f02:	9301      	str	r3, [sp, #4]
 8010f04:	2800      	cmp	r0, #0
 8010f06:	db04      	blt.n	8010f12 <__mdiff+0x4a>
 8010f08:	0023      	movs	r3, r4
 8010f0a:	0034      	movs	r4, r6
 8010f0c:	001e      	movs	r6, r3
 8010f0e:	2300      	movs	r3, #0
 8010f10:	9301      	str	r3, [sp, #4]
 8010f12:	0038      	movs	r0, r7
 8010f14:	6861      	ldr	r1, [r4, #4]
 8010f16:	f7ff fd37 	bl	8010988 <_Balloc>
 8010f1a:	1e02      	subs	r2, r0, #0
 8010f1c:	d103      	bne.n	8010f26 <__mdiff+0x5e>
 8010f1e:	2190      	movs	r1, #144	; 0x90
 8010f20:	4b32      	ldr	r3, [pc, #200]	; (8010fec <__mdiff+0x124>)
 8010f22:	0089      	lsls	r1, r1, #2
 8010f24:	e7e3      	b.n	8010eee <__mdiff+0x26>
 8010f26:	9b01      	ldr	r3, [sp, #4]
 8010f28:	2700      	movs	r7, #0
 8010f2a:	60c3      	str	r3, [r0, #12]
 8010f2c:	6920      	ldr	r0, [r4, #16]
 8010f2e:	3414      	adds	r4, #20
 8010f30:	9401      	str	r4, [sp, #4]
 8010f32:	9b01      	ldr	r3, [sp, #4]
 8010f34:	0084      	lsls	r4, r0, #2
 8010f36:	191b      	adds	r3, r3, r4
 8010f38:	0034      	movs	r4, r6
 8010f3a:	9302      	str	r3, [sp, #8]
 8010f3c:	6933      	ldr	r3, [r6, #16]
 8010f3e:	3414      	adds	r4, #20
 8010f40:	0099      	lsls	r1, r3, #2
 8010f42:	1863      	adds	r3, r4, r1
 8010f44:	9303      	str	r3, [sp, #12]
 8010f46:	0013      	movs	r3, r2
 8010f48:	3314      	adds	r3, #20
 8010f4a:	469c      	mov	ip, r3
 8010f4c:	9305      	str	r3, [sp, #20]
 8010f4e:	9b01      	ldr	r3, [sp, #4]
 8010f50:	9304      	str	r3, [sp, #16]
 8010f52:	9b04      	ldr	r3, [sp, #16]
 8010f54:	cc02      	ldmia	r4!, {r1}
 8010f56:	cb20      	ldmia	r3!, {r5}
 8010f58:	9304      	str	r3, [sp, #16]
 8010f5a:	b2ab      	uxth	r3, r5
 8010f5c:	19df      	adds	r7, r3, r7
 8010f5e:	b28b      	uxth	r3, r1
 8010f60:	1afb      	subs	r3, r7, r3
 8010f62:	0c09      	lsrs	r1, r1, #16
 8010f64:	0c2d      	lsrs	r5, r5, #16
 8010f66:	1a6d      	subs	r5, r5, r1
 8010f68:	1419      	asrs	r1, r3, #16
 8010f6a:	186d      	adds	r5, r5, r1
 8010f6c:	4661      	mov	r1, ip
 8010f6e:	142f      	asrs	r7, r5, #16
 8010f70:	b29b      	uxth	r3, r3
 8010f72:	042d      	lsls	r5, r5, #16
 8010f74:	432b      	orrs	r3, r5
 8010f76:	c108      	stmia	r1!, {r3}
 8010f78:	9b03      	ldr	r3, [sp, #12]
 8010f7a:	468c      	mov	ip, r1
 8010f7c:	42a3      	cmp	r3, r4
 8010f7e:	d8e8      	bhi.n	8010f52 <__mdiff+0x8a>
 8010f80:	0031      	movs	r1, r6
 8010f82:	9c03      	ldr	r4, [sp, #12]
 8010f84:	3115      	adds	r1, #21
 8010f86:	2304      	movs	r3, #4
 8010f88:	428c      	cmp	r4, r1
 8010f8a:	d304      	bcc.n	8010f96 <__mdiff+0xce>
 8010f8c:	1ba3      	subs	r3, r4, r6
 8010f8e:	3b15      	subs	r3, #21
 8010f90:	089b      	lsrs	r3, r3, #2
 8010f92:	3301      	adds	r3, #1
 8010f94:	009b      	lsls	r3, r3, #2
 8010f96:	9901      	ldr	r1, [sp, #4]
 8010f98:	18cc      	adds	r4, r1, r3
 8010f9a:	9905      	ldr	r1, [sp, #20]
 8010f9c:	0026      	movs	r6, r4
 8010f9e:	18cb      	adds	r3, r1, r3
 8010fa0:	469c      	mov	ip, r3
 8010fa2:	9902      	ldr	r1, [sp, #8]
 8010fa4:	428e      	cmp	r6, r1
 8010fa6:	d310      	bcc.n	8010fca <__mdiff+0x102>
 8010fa8:	9e02      	ldr	r6, [sp, #8]
 8010faa:	1ee1      	subs	r1, r4, #3
 8010fac:	2500      	movs	r5, #0
 8010fae:	428e      	cmp	r6, r1
 8010fb0:	d304      	bcc.n	8010fbc <__mdiff+0xf4>
 8010fb2:	0031      	movs	r1, r6
 8010fb4:	3103      	adds	r1, #3
 8010fb6:	1b0c      	subs	r4, r1, r4
 8010fb8:	08a4      	lsrs	r4, r4, #2
 8010fba:	00a5      	lsls	r5, r4, #2
 8010fbc:	195b      	adds	r3, r3, r5
 8010fbe:	3b04      	subs	r3, #4
 8010fc0:	6819      	ldr	r1, [r3, #0]
 8010fc2:	2900      	cmp	r1, #0
 8010fc4:	d00f      	beq.n	8010fe6 <__mdiff+0x11e>
 8010fc6:	6110      	str	r0, [r2, #16]
 8010fc8:	e797      	b.n	8010efa <__mdiff+0x32>
 8010fca:	ce02      	ldmia	r6!, {r1}
 8010fcc:	b28d      	uxth	r5, r1
 8010fce:	19ed      	adds	r5, r5, r7
 8010fd0:	0c0f      	lsrs	r7, r1, #16
 8010fd2:	1429      	asrs	r1, r5, #16
 8010fd4:	1879      	adds	r1, r7, r1
 8010fd6:	140f      	asrs	r7, r1, #16
 8010fd8:	b2ad      	uxth	r5, r5
 8010fda:	0409      	lsls	r1, r1, #16
 8010fdc:	430d      	orrs	r5, r1
 8010fde:	4661      	mov	r1, ip
 8010fe0:	c120      	stmia	r1!, {r5}
 8010fe2:	468c      	mov	ip, r1
 8010fe4:	e7dd      	b.n	8010fa2 <__mdiff+0xda>
 8010fe6:	3801      	subs	r0, #1
 8010fe8:	e7e9      	b.n	8010fbe <__mdiff+0xf6>
 8010fea:	46c0      	nop			; (mov r8, r8)
 8010fec:	08013c34 	.word	0x08013c34
 8010ff0:	00000232 	.word	0x00000232
 8010ff4:	08013c45 	.word	0x08013c45

08010ff8 <__d2b>:
 8010ff8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010ffa:	2101      	movs	r1, #1
 8010ffc:	0014      	movs	r4, r2
 8010ffe:	001e      	movs	r6, r3
 8011000:	9f08      	ldr	r7, [sp, #32]
 8011002:	f7ff fcc1 	bl	8010988 <_Balloc>
 8011006:	1e05      	subs	r5, r0, #0
 8011008:	d105      	bne.n	8011016 <__d2b+0x1e>
 801100a:	0002      	movs	r2, r0
 801100c:	4b26      	ldr	r3, [pc, #152]	; (80110a8 <__d2b+0xb0>)
 801100e:	4927      	ldr	r1, [pc, #156]	; (80110ac <__d2b+0xb4>)
 8011010:	4827      	ldr	r0, [pc, #156]	; (80110b0 <__d2b+0xb8>)
 8011012:	f000 fb0f 	bl	8011634 <__assert_func>
 8011016:	0333      	lsls	r3, r6, #12
 8011018:	0076      	lsls	r6, r6, #1
 801101a:	0b1b      	lsrs	r3, r3, #12
 801101c:	0d76      	lsrs	r6, r6, #21
 801101e:	d124      	bne.n	801106a <__d2b+0x72>
 8011020:	9301      	str	r3, [sp, #4]
 8011022:	2c00      	cmp	r4, #0
 8011024:	d027      	beq.n	8011076 <__d2b+0x7e>
 8011026:	4668      	mov	r0, sp
 8011028:	9400      	str	r4, [sp, #0]
 801102a:	f7ff fd73 	bl	8010b14 <__lo0bits>
 801102e:	9c00      	ldr	r4, [sp, #0]
 8011030:	2800      	cmp	r0, #0
 8011032:	d01e      	beq.n	8011072 <__d2b+0x7a>
 8011034:	9b01      	ldr	r3, [sp, #4]
 8011036:	2120      	movs	r1, #32
 8011038:	001a      	movs	r2, r3
 801103a:	1a09      	subs	r1, r1, r0
 801103c:	408a      	lsls	r2, r1
 801103e:	40c3      	lsrs	r3, r0
 8011040:	4322      	orrs	r2, r4
 8011042:	616a      	str	r2, [r5, #20]
 8011044:	9301      	str	r3, [sp, #4]
 8011046:	9c01      	ldr	r4, [sp, #4]
 8011048:	61ac      	str	r4, [r5, #24]
 801104a:	1e63      	subs	r3, r4, #1
 801104c:	419c      	sbcs	r4, r3
 801104e:	3401      	adds	r4, #1
 8011050:	612c      	str	r4, [r5, #16]
 8011052:	2e00      	cmp	r6, #0
 8011054:	d018      	beq.n	8011088 <__d2b+0x90>
 8011056:	4b17      	ldr	r3, [pc, #92]	; (80110b4 <__d2b+0xbc>)
 8011058:	18f6      	adds	r6, r6, r3
 801105a:	2335      	movs	r3, #53	; 0x35
 801105c:	1836      	adds	r6, r6, r0
 801105e:	1a18      	subs	r0, r3, r0
 8011060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011062:	603e      	str	r6, [r7, #0]
 8011064:	6018      	str	r0, [r3, #0]
 8011066:	0028      	movs	r0, r5
 8011068:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801106a:	2280      	movs	r2, #128	; 0x80
 801106c:	0352      	lsls	r2, r2, #13
 801106e:	4313      	orrs	r3, r2
 8011070:	e7d6      	b.n	8011020 <__d2b+0x28>
 8011072:	616c      	str	r4, [r5, #20]
 8011074:	e7e7      	b.n	8011046 <__d2b+0x4e>
 8011076:	a801      	add	r0, sp, #4
 8011078:	f7ff fd4c 	bl	8010b14 <__lo0bits>
 801107c:	2401      	movs	r4, #1
 801107e:	9b01      	ldr	r3, [sp, #4]
 8011080:	612c      	str	r4, [r5, #16]
 8011082:	616b      	str	r3, [r5, #20]
 8011084:	3020      	adds	r0, #32
 8011086:	e7e4      	b.n	8011052 <__d2b+0x5a>
 8011088:	4b0b      	ldr	r3, [pc, #44]	; (80110b8 <__d2b+0xc0>)
 801108a:	18c0      	adds	r0, r0, r3
 801108c:	4b0b      	ldr	r3, [pc, #44]	; (80110bc <__d2b+0xc4>)
 801108e:	6038      	str	r0, [r7, #0]
 8011090:	18e3      	adds	r3, r4, r3
 8011092:	009b      	lsls	r3, r3, #2
 8011094:	18eb      	adds	r3, r5, r3
 8011096:	6958      	ldr	r0, [r3, #20]
 8011098:	f7ff fd22 	bl	8010ae0 <__hi0bits>
 801109c:	0164      	lsls	r4, r4, #5
 801109e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110a0:	1a24      	subs	r4, r4, r0
 80110a2:	601c      	str	r4, [r3, #0]
 80110a4:	e7df      	b.n	8011066 <__d2b+0x6e>
 80110a6:	46c0      	nop			; (mov r8, r8)
 80110a8:	08013c34 	.word	0x08013c34
 80110ac:	0000030a 	.word	0x0000030a
 80110b0:	08013c45 	.word	0x08013c45
 80110b4:	fffffbcd 	.word	0xfffffbcd
 80110b8:	fffffbce 	.word	0xfffffbce
 80110bc:	3fffffff 	.word	0x3fffffff

080110c0 <_calloc_r>:
 80110c0:	b570      	push	{r4, r5, r6, lr}
 80110c2:	0c13      	lsrs	r3, r2, #16
 80110c4:	0c0d      	lsrs	r5, r1, #16
 80110c6:	d11e      	bne.n	8011106 <_calloc_r+0x46>
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d10c      	bne.n	80110e6 <_calloc_r+0x26>
 80110cc:	b289      	uxth	r1, r1
 80110ce:	b294      	uxth	r4, r2
 80110d0:	434c      	muls	r4, r1
 80110d2:	0021      	movs	r1, r4
 80110d4:	f7fd fe12 	bl	800ecfc <_malloc_r>
 80110d8:	1e05      	subs	r5, r0, #0
 80110da:	d01b      	beq.n	8011114 <_calloc_r+0x54>
 80110dc:	0022      	movs	r2, r4
 80110de:	2100      	movs	r1, #0
 80110e0:	f7fd fde2 	bl	800eca8 <memset>
 80110e4:	e016      	b.n	8011114 <_calloc_r+0x54>
 80110e6:	1c1d      	adds	r5, r3, #0
 80110e8:	1c0b      	adds	r3, r1, #0
 80110ea:	b292      	uxth	r2, r2
 80110ec:	b289      	uxth	r1, r1
 80110ee:	b29c      	uxth	r4, r3
 80110f0:	4351      	muls	r1, r2
 80110f2:	b2ab      	uxth	r3, r5
 80110f4:	4363      	muls	r3, r4
 80110f6:	0c0c      	lsrs	r4, r1, #16
 80110f8:	191c      	adds	r4, r3, r4
 80110fa:	0c22      	lsrs	r2, r4, #16
 80110fc:	d107      	bne.n	801110e <_calloc_r+0x4e>
 80110fe:	0424      	lsls	r4, r4, #16
 8011100:	b289      	uxth	r1, r1
 8011102:	430c      	orrs	r4, r1
 8011104:	e7e5      	b.n	80110d2 <_calloc_r+0x12>
 8011106:	2b00      	cmp	r3, #0
 8011108:	d101      	bne.n	801110e <_calloc_r+0x4e>
 801110a:	1c13      	adds	r3, r2, #0
 801110c:	e7ed      	b.n	80110ea <_calloc_r+0x2a>
 801110e:	230c      	movs	r3, #12
 8011110:	2500      	movs	r5, #0
 8011112:	6003      	str	r3, [r0, #0]
 8011114:	0028      	movs	r0, r5
 8011116:	bd70      	pop	{r4, r5, r6, pc}

08011118 <_free_r>:
 8011118:	b570      	push	{r4, r5, r6, lr}
 801111a:	0005      	movs	r5, r0
 801111c:	2900      	cmp	r1, #0
 801111e:	d010      	beq.n	8011142 <_free_r+0x2a>
 8011120:	1f0c      	subs	r4, r1, #4
 8011122:	6823      	ldr	r3, [r4, #0]
 8011124:	2b00      	cmp	r3, #0
 8011126:	da00      	bge.n	801112a <_free_r+0x12>
 8011128:	18e4      	adds	r4, r4, r3
 801112a:	0028      	movs	r0, r5
 801112c:	f7ff fc1c 	bl	8010968 <__malloc_lock>
 8011130:	4a1d      	ldr	r2, [pc, #116]	; (80111a8 <_free_r+0x90>)
 8011132:	6813      	ldr	r3, [r2, #0]
 8011134:	2b00      	cmp	r3, #0
 8011136:	d105      	bne.n	8011144 <_free_r+0x2c>
 8011138:	6063      	str	r3, [r4, #4]
 801113a:	6014      	str	r4, [r2, #0]
 801113c:	0028      	movs	r0, r5
 801113e:	f7ff fc1b 	bl	8010978 <__malloc_unlock>
 8011142:	bd70      	pop	{r4, r5, r6, pc}
 8011144:	42a3      	cmp	r3, r4
 8011146:	d908      	bls.n	801115a <_free_r+0x42>
 8011148:	6821      	ldr	r1, [r4, #0]
 801114a:	1860      	adds	r0, r4, r1
 801114c:	4283      	cmp	r3, r0
 801114e:	d1f3      	bne.n	8011138 <_free_r+0x20>
 8011150:	6818      	ldr	r0, [r3, #0]
 8011152:	685b      	ldr	r3, [r3, #4]
 8011154:	1841      	adds	r1, r0, r1
 8011156:	6021      	str	r1, [r4, #0]
 8011158:	e7ee      	b.n	8011138 <_free_r+0x20>
 801115a:	001a      	movs	r2, r3
 801115c:	685b      	ldr	r3, [r3, #4]
 801115e:	2b00      	cmp	r3, #0
 8011160:	d001      	beq.n	8011166 <_free_r+0x4e>
 8011162:	42a3      	cmp	r3, r4
 8011164:	d9f9      	bls.n	801115a <_free_r+0x42>
 8011166:	6811      	ldr	r1, [r2, #0]
 8011168:	1850      	adds	r0, r2, r1
 801116a:	42a0      	cmp	r0, r4
 801116c:	d10b      	bne.n	8011186 <_free_r+0x6e>
 801116e:	6820      	ldr	r0, [r4, #0]
 8011170:	1809      	adds	r1, r1, r0
 8011172:	1850      	adds	r0, r2, r1
 8011174:	6011      	str	r1, [r2, #0]
 8011176:	4283      	cmp	r3, r0
 8011178:	d1e0      	bne.n	801113c <_free_r+0x24>
 801117a:	6818      	ldr	r0, [r3, #0]
 801117c:	685b      	ldr	r3, [r3, #4]
 801117e:	1841      	adds	r1, r0, r1
 8011180:	6011      	str	r1, [r2, #0]
 8011182:	6053      	str	r3, [r2, #4]
 8011184:	e7da      	b.n	801113c <_free_r+0x24>
 8011186:	42a0      	cmp	r0, r4
 8011188:	d902      	bls.n	8011190 <_free_r+0x78>
 801118a:	230c      	movs	r3, #12
 801118c:	602b      	str	r3, [r5, #0]
 801118e:	e7d5      	b.n	801113c <_free_r+0x24>
 8011190:	6821      	ldr	r1, [r4, #0]
 8011192:	1860      	adds	r0, r4, r1
 8011194:	4283      	cmp	r3, r0
 8011196:	d103      	bne.n	80111a0 <_free_r+0x88>
 8011198:	6818      	ldr	r0, [r3, #0]
 801119a:	685b      	ldr	r3, [r3, #4]
 801119c:	1841      	adds	r1, r0, r1
 801119e:	6021      	str	r1, [r4, #0]
 80111a0:	6063      	str	r3, [r4, #4]
 80111a2:	6054      	str	r4, [r2, #4]
 80111a4:	e7ca      	b.n	801113c <_free_r+0x24>
 80111a6:	46c0      	nop			; (mov r8, r8)
 80111a8:	200021b4 	.word	0x200021b4

080111ac <__ssputs_r>:
 80111ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80111ae:	688e      	ldr	r6, [r1, #8]
 80111b0:	b085      	sub	sp, #20
 80111b2:	0007      	movs	r7, r0
 80111b4:	000c      	movs	r4, r1
 80111b6:	9203      	str	r2, [sp, #12]
 80111b8:	9301      	str	r3, [sp, #4]
 80111ba:	429e      	cmp	r6, r3
 80111bc:	d83c      	bhi.n	8011238 <__ssputs_r+0x8c>
 80111be:	2390      	movs	r3, #144	; 0x90
 80111c0:	898a      	ldrh	r2, [r1, #12]
 80111c2:	00db      	lsls	r3, r3, #3
 80111c4:	421a      	tst	r2, r3
 80111c6:	d034      	beq.n	8011232 <__ssputs_r+0x86>
 80111c8:	6909      	ldr	r1, [r1, #16]
 80111ca:	6823      	ldr	r3, [r4, #0]
 80111cc:	6960      	ldr	r0, [r4, #20]
 80111ce:	1a5b      	subs	r3, r3, r1
 80111d0:	9302      	str	r3, [sp, #8]
 80111d2:	2303      	movs	r3, #3
 80111d4:	4343      	muls	r3, r0
 80111d6:	0fdd      	lsrs	r5, r3, #31
 80111d8:	18ed      	adds	r5, r5, r3
 80111da:	9b01      	ldr	r3, [sp, #4]
 80111dc:	9802      	ldr	r0, [sp, #8]
 80111de:	3301      	adds	r3, #1
 80111e0:	181b      	adds	r3, r3, r0
 80111e2:	106d      	asrs	r5, r5, #1
 80111e4:	42ab      	cmp	r3, r5
 80111e6:	d900      	bls.n	80111ea <__ssputs_r+0x3e>
 80111e8:	001d      	movs	r5, r3
 80111ea:	0553      	lsls	r3, r2, #21
 80111ec:	d532      	bpl.n	8011254 <__ssputs_r+0xa8>
 80111ee:	0029      	movs	r1, r5
 80111f0:	0038      	movs	r0, r7
 80111f2:	f7fd fd83 	bl	800ecfc <_malloc_r>
 80111f6:	1e06      	subs	r6, r0, #0
 80111f8:	d109      	bne.n	801120e <__ssputs_r+0x62>
 80111fa:	230c      	movs	r3, #12
 80111fc:	603b      	str	r3, [r7, #0]
 80111fe:	2340      	movs	r3, #64	; 0x40
 8011200:	2001      	movs	r0, #1
 8011202:	89a2      	ldrh	r2, [r4, #12]
 8011204:	4240      	negs	r0, r0
 8011206:	4313      	orrs	r3, r2
 8011208:	81a3      	strh	r3, [r4, #12]
 801120a:	b005      	add	sp, #20
 801120c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801120e:	9a02      	ldr	r2, [sp, #8]
 8011210:	6921      	ldr	r1, [r4, #16]
 8011212:	f7fd fd40 	bl	800ec96 <memcpy>
 8011216:	89a3      	ldrh	r3, [r4, #12]
 8011218:	4a14      	ldr	r2, [pc, #80]	; (801126c <__ssputs_r+0xc0>)
 801121a:	401a      	ands	r2, r3
 801121c:	2380      	movs	r3, #128	; 0x80
 801121e:	4313      	orrs	r3, r2
 8011220:	81a3      	strh	r3, [r4, #12]
 8011222:	9b02      	ldr	r3, [sp, #8]
 8011224:	6126      	str	r6, [r4, #16]
 8011226:	18f6      	adds	r6, r6, r3
 8011228:	6026      	str	r6, [r4, #0]
 801122a:	6165      	str	r5, [r4, #20]
 801122c:	9e01      	ldr	r6, [sp, #4]
 801122e:	1aed      	subs	r5, r5, r3
 8011230:	60a5      	str	r5, [r4, #8]
 8011232:	9b01      	ldr	r3, [sp, #4]
 8011234:	429e      	cmp	r6, r3
 8011236:	d900      	bls.n	801123a <__ssputs_r+0x8e>
 8011238:	9e01      	ldr	r6, [sp, #4]
 801123a:	0032      	movs	r2, r6
 801123c:	9903      	ldr	r1, [sp, #12]
 801123e:	6820      	ldr	r0, [r4, #0]
 8011240:	f000 faa4 	bl	801178c <memmove>
 8011244:	68a3      	ldr	r3, [r4, #8]
 8011246:	2000      	movs	r0, #0
 8011248:	1b9b      	subs	r3, r3, r6
 801124a:	60a3      	str	r3, [r4, #8]
 801124c:	6823      	ldr	r3, [r4, #0]
 801124e:	199e      	adds	r6, r3, r6
 8011250:	6026      	str	r6, [r4, #0]
 8011252:	e7da      	b.n	801120a <__ssputs_r+0x5e>
 8011254:	002a      	movs	r2, r5
 8011256:	0038      	movs	r0, r7
 8011258:	f000 faab 	bl	80117b2 <_realloc_r>
 801125c:	1e06      	subs	r6, r0, #0
 801125e:	d1e0      	bne.n	8011222 <__ssputs_r+0x76>
 8011260:	0038      	movs	r0, r7
 8011262:	6921      	ldr	r1, [r4, #16]
 8011264:	f7ff ff58 	bl	8011118 <_free_r>
 8011268:	e7c7      	b.n	80111fa <__ssputs_r+0x4e>
 801126a:	46c0      	nop			; (mov r8, r8)
 801126c:	fffffb7f 	.word	0xfffffb7f

08011270 <_svfiprintf_r>:
 8011270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011272:	b0a1      	sub	sp, #132	; 0x84
 8011274:	9003      	str	r0, [sp, #12]
 8011276:	001d      	movs	r5, r3
 8011278:	898b      	ldrh	r3, [r1, #12]
 801127a:	000f      	movs	r7, r1
 801127c:	0016      	movs	r6, r2
 801127e:	061b      	lsls	r3, r3, #24
 8011280:	d511      	bpl.n	80112a6 <_svfiprintf_r+0x36>
 8011282:	690b      	ldr	r3, [r1, #16]
 8011284:	2b00      	cmp	r3, #0
 8011286:	d10e      	bne.n	80112a6 <_svfiprintf_r+0x36>
 8011288:	2140      	movs	r1, #64	; 0x40
 801128a:	f7fd fd37 	bl	800ecfc <_malloc_r>
 801128e:	6038      	str	r0, [r7, #0]
 8011290:	6138      	str	r0, [r7, #16]
 8011292:	2800      	cmp	r0, #0
 8011294:	d105      	bne.n	80112a2 <_svfiprintf_r+0x32>
 8011296:	230c      	movs	r3, #12
 8011298:	9a03      	ldr	r2, [sp, #12]
 801129a:	3801      	subs	r0, #1
 801129c:	6013      	str	r3, [r2, #0]
 801129e:	b021      	add	sp, #132	; 0x84
 80112a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80112a2:	2340      	movs	r3, #64	; 0x40
 80112a4:	617b      	str	r3, [r7, #20]
 80112a6:	2300      	movs	r3, #0
 80112a8:	ac08      	add	r4, sp, #32
 80112aa:	6163      	str	r3, [r4, #20]
 80112ac:	3320      	adds	r3, #32
 80112ae:	7663      	strb	r3, [r4, #25]
 80112b0:	3310      	adds	r3, #16
 80112b2:	76a3      	strb	r3, [r4, #26]
 80112b4:	9507      	str	r5, [sp, #28]
 80112b6:	0035      	movs	r5, r6
 80112b8:	782b      	ldrb	r3, [r5, #0]
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d001      	beq.n	80112c2 <_svfiprintf_r+0x52>
 80112be:	2b25      	cmp	r3, #37	; 0x25
 80112c0:	d147      	bne.n	8011352 <_svfiprintf_r+0xe2>
 80112c2:	1bab      	subs	r3, r5, r6
 80112c4:	9305      	str	r3, [sp, #20]
 80112c6:	42b5      	cmp	r5, r6
 80112c8:	d00c      	beq.n	80112e4 <_svfiprintf_r+0x74>
 80112ca:	0032      	movs	r2, r6
 80112cc:	0039      	movs	r1, r7
 80112ce:	9803      	ldr	r0, [sp, #12]
 80112d0:	f7ff ff6c 	bl	80111ac <__ssputs_r>
 80112d4:	1c43      	adds	r3, r0, #1
 80112d6:	d100      	bne.n	80112da <_svfiprintf_r+0x6a>
 80112d8:	e0ae      	b.n	8011438 <_svfiprintf_r+0x1c8>
 80112da:	6962      	ldr	r2, [r4, #20]
 80112dc:	9b05      	ldr	r3, [sp, #20]
 80112de:	4694      	mov	ip, r2
 80112e0:	4463      	add	r3, ip
 80112e2:	6163      	str	r3, [r4, #20]
 80112e4:	782b      	ldrb	r3, [r5, #0]
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d100      	bne.n	80112ec <_svfiprintf_r+0x7c>
 80112ea:	e0a5      	b.n	8011438 <_svfiprintf_r+0x1c8>
 80112ec:	2201      	movs	r2, #1
 80112ee:	2300      	movs	r3, #0
 80112f0:	4252      	negs	r2, r2
 80112f2:	6062      	str	r2, [r4, #4]
 80112f4:	a904      	add	r1, sp, #16
 80112f6:	3254      	adds	r2, #84	; 0x54
 80112f8:	1852      	adds	r2, r2, r1
 80112fa:	1c6e      	adds	r6, r5, #1
 80112fc:	6023      	str	r3, [r4, #0]
 80112fe:	60e3      	str	r3, [r4, #12]
 8011300:	60a3      	str	r3, [r4, #8]
 8011302:	7013      	strb	r3, [r2, #0]
 8011304:	65a3      	str	r3, [r4, #88]	; 0x58
 8011306:	2205      	movs	r2, #5
 8011308:	7831      	ldrb	r1, [r6, #0]
 801130a:	4854      	ldr	r0, [pc, #336]	; (801145c <_svfiprintf_r+0x1ec>)
 801130c:	f7ff fb20 	bl	8010950 <memchr>
 8011310:	1c75      	adds	r5, r6, #1
 8011312:	2800      	cmp	r0, #0
 8011314:	d11f      	bne.n	8011356 <_svfiprintf_r+0xe6>
 8011316:	6822      	ldr	r2, [r4, #0]
 8011318:	06d3      	lsls	r3, r2, #27
 801131a:	d504      	bpl.n	8011326 <_svfiprintf_r+0xb6>
 801131c:	2353      	movs	r3, #83	; 0x53
 801131e:	a904      	add	r1, sp, #16
 8011320:	185b      	adds	r3, r3, r1
 8011322:	2120      	movs	r1, #32
 8011324:	7019      	strb	r1, [r3, #0]
 8011326:	0713      	lsls	r3, r2, #28
 8011328:	d504      	bpl.n	8011334 <_svfiprintf_r+0xc4>
 801132a:	2353      	movs	r3, #83	; 0x53
 801132c:	a904      	add	r1, sp, #16
 801132e:	185b      	adds	r3, r3, r1
 8011330:	212b      	movs	r1, #43	; 0x2b
 8011332:	7019      	strb	r1, [r3, #0]
 8011334:	7833      	ldrb	r3, [r6, #0]
 8011336:	2b2a      	cmp	r3, #42	; 0x2a
 8011338:	d016      	beq.n	8011368 <_svfiprintf_r+0xf8>
 801133a:	0035      	movs	r5, r6
 801133c:	2100      	movs	r1, #0
 801133e:	200a      	movs	r0, #10
 8011340:	68e3      	ldr	r3, [r4, #12]
 8011342:	782a      	ldrb	r2, [r5, #0]
 8011344:	1c6e      	adds	r6, r5, #1
 8011346:	3a30      	subs	r2, #48	; 0x30
 8011348:	2a09      	cmp	r2, #9
 801134a:	d94e      	bls.n	80113ea <_svfiprintf_r+0x17a>
 801134c:	2900      	cmp	r1, #0
 801134e:	d111      	bne.n	8011374 <_svfiprintf_r+0x104>
 8011350:	e017      	b.n	8011382 <_svfiprintf_r+0x112>
 8011352:	3501      	adds	r5, #1
 8011354:	e7b0      	b.n	80112b8 <_svfiprintf_r+0x48>
 8011356:	4b41      	ldr	r3, [pc, #260]	; (801145c <_svfiprintf_r+0x1ec>)
 8011358:	6822      	ldr	r2, [r4, #0]
 801135a:	1ac0      	subs	r0, r0, r3
 801135c:	2301      	movs	r3, #1
 801135e:	4083      	lsls	r3, r0
 8011360:	4313      	orrs	r3, r2
 8011362:	002e      	movs	r6, r5
 8011364:	6023      	str	r3, [r4, #0]
 8011366:	e7ce      	b.n	8011306 <_svfiprintf_r+0x96>
 8011368:	9b07      	ldr	r3, [sp, #28]
 801136a:	1d19      	adds	r1, r3, #4
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	9107      	str	r1, [sp, #28]
 8011370:	2b00      	cmp	r3, #0
 8011372:	db01      	blt.n	8011378 <_svfiprintf_r+0x108>
 8011374:	930b      	str	r3, [sp, #44]	; 0x2c
 8011376:	e004      	b.n	8011382 <_svfiprintf_r+0x112>
 8011378:	425b      	negs	r3, r3
 801137a:	60e3      	str	r3, [r4, #12]
 801137c:	2302      	movs	r3, #2
 801137e:	4313      	orrs	r3, r2
 8011380:	6023      	str	r3, [r4, #0]
 8011382:	782b      	ldrb	r3, [r5, #0]
 8011384:	2b2e      	cmp	r3, #46	; 0x2e
 8011386:	d10a      	bne.n	801139e <_svfiprintf_r+0x12e>
 8011388:	786b      	ldrb	r3, [r5, #1]
 801138a:	2b2a      	cmp	r3, #42	; 0x2a
 801138c:	d135      	bne.n	80113fa <_svfiprintf_r+0x18a>
 801138e:	9b07      	ldr	r3, [sp, #28]
 8011390:	3502      	adds	r5, #2
 8011392:	1d1a      	adds	r2, r3, #4
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	9207      	str	r2, [sp, #28]
 8011398:	2b00      	cmp	r3, #0
 801139a:	db2b      	blt.n	80113f4 <_svfiprintf_r+0x184>
 801139c:	9309      	str	r3, [sp, #36]	; 0x24
 801139e:	4e30      	ldr	r6, [pc, #192]	; (8011460 <_svfiprintf_r+0x1f0>)
 80113a0:	2203      	movs	r2, #3
 80113a2:	0030      	movs	r0, r6
 80113a4:	7829      	ldrb	r1, [r5, #0]
 80113a6:	f7ff fad3 	bl	8010950 <memchr>
 80113aa:	2800      	cmp	r0, #0
 80113ac:	d006      	beq.n	80113bc <_svfiprintf_r+0x14c>
 80113ae:	2340      	movs	r3, #64	; 0x40
 80113b0:	1b80      	subs	r0, r0, r6
 80113b2:	4083      	lsls	r3, r0
 80113b4:	6822      	ldr	r2, [r4, #0]
 80113b6:	3501      	adds	r5, #1
 80113b8:	4313      	orrs	r3, r2
 80113ba:	6023      	str	r3, [r4, #0]
 80113bc:	7829      	ldrb	r1, [r5, #0]
 80113be:	2206      	movs	r2, #6
 80113c0:	4828      	ldr	r0, [pc, #160]	; (8011464 <_svfiprintf_r+0x1f4>)
 80113c2:	1c6e      	adds	r6, r5, #1
 80113c4:	7621      	strb	r1, [r4, #24]
 80113c6:	f7ff fac3 	bl	8010950 <memchr>
 80113ca:	2800      	cmp	r0, #0
 80113cc:	d03c      	beq.n	8011448 <_svfiprintf_r+0x1d8>
 80113ce:	4b26      	ldr	r3, [pc, #152]	; (8011468 <_svfiprintf_r+0x1f8>)
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d125      	bne.n	8011420 <_svfiprintf_r+0x1b0>
 80113d4:	2207      	movs	r2, #7
 80113d6:	9b07      	ldr	r3, [sp, #28]
 80113d8:	3307      	adds	r3, #7
 80113da:	4393      	bics	r3, r2
 80113dc:	3308      	adds	r3, #8
 80113de:	9307      	str	r3, [sp, #28]
 80113e0:	6963      	ldr	r3, [r4, #20]
 80113e2:	9a04      	ldr	r2, [sp, #16]
 80113e4:	189b      	adds	r3, r3, r2
 80113e6:	6163      	str	r3, [r4, #20]
 80113e8:	e765      	b.n	80112b6 <_svfiprintf_r+0x46>
 80113ea:	4343      	muls	r3, r0
 80113ec:	0035      	movs	r5, r6
 80113ee:	2101      	movs	r1, #1
 80113f0:	189b      	adds	r3, r3, r2
 80113f2:	e7a6      	b.n	8011342 <_svfiprintf_r+0xd2>
 80113f4:	2301      	movs	r3, #1
 80113f6:	425b      	negs	r3, r3
 80113f8:	e7d0      	b.n	801139c <_svfiprintf_r+0x12c>
 80113fa:	2300      	movs	r3, #0
 80113fc:	200a      	movs	r0, #10
 80113fe:	001a      	movs	r2, r3
 8011400:	3501      	adds	r5, #1
 8011402:	6063      	str	r3, [r4, #4]
 8011404:	7829      	ldrb	r1, [r5, #0]
 8011406:	1c6e      	adds	r6, r5, #1
 8011408:	3930      	subs	r1, #48	; 0x30
 801140a:	2909      	cmp	r1, #9
 801140c:	d903      	bls.n	8011416 <_svfiprintf_r+0x1a6>
 801140e:	2b00      	cmp	r3, #0
 8011410:	d0c5      	beq.n	801139e <_svfiprintf_r+0x12e>
 8011412:	9209      	str	r2, [sp, #36]	; 0x24
 8011414:	e7c3      	b.n	801139e <_svfiprintf_r+0x12e>
 8011416:	4342      	muls	r2, r0
 8011418:	0035      	movs	r5, r6
 801141a:	2301      	movs	r3, #1
 801141c:	1852      	adds	r2, r2, r1
 801141e:	e7f1      	b.n	8011404 <_svfiprintf_r+0x194>
 8011420:	ab07      	add	r3, sp, #28
 8011422:	9300      	str	r3, [sp, #0]
 8011424:	003a      	movs	r2, r7
 8011426:	0021      	movs	r1, r4
 8011428:	4b10      	ldr	r3, [pc, #64]	; (801146c <_svfiprintf_r+0x1fc>)
 801142a:	9803      	ldr	r0, [sp, #12]
 801142c:	f7fd fd86 	bl	800ef3c <_printf_float>
 8011430:	9004      	str	r0, [sp, #16]
 8011432:	9b04      	ldr	r3, [sp, #16]
 8011434:	3301      	adds	r3, #1
 8011436:	d1d3      	bne.n	80113e0 <_svfiprintf_r+0x170>
 8011438:	89bb      	ldrh	r3, [r7, #12]
 801143a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801143c:	065b      	lsls	r3, r3, #25
 801143e:	d400      	bmi.n	8011442 <_svfiprintf_r+0x1d2>
 8011440:	e72d      	b.n	801129e <_svfiprintf_r+0x2e>
 8011442:	2001      	movs	r0, #1
 8011444:	4240      	negs	r0, r0
 8011446:	e72a      	b.n	801129e <_svfiprintf_r+0x2e>
 8011448:	ab07      	add	r3, sp, #28
 801144a:	9300      	str	r3, [sp, #0]
 801144c:	003a      	movs	r2, r7
 801144e:	0021      	movs	r1, r4
 8011450:	4b06      	ldr	r3, [pc, #24]	; (801146c <_svfiprintf_r+0x1fc>)
 8011452:	9803      	ldr	r0, [sp, #12]
 8011454:	f7fe f824 	bl	800f4a0 <_printf_i>
 8011458:	e7ea      	b.n	8011430 <_svfiprintf_r+0x1c0>
 801145a:	46c0      	nop			; (mov r8, r8)
 801145c:	08013da4 	.word	0x08013da4
 8011460:	08013daa 	.word	0x08013daa
 8011464:	08013dae 	.word	0x08013dae
 8011468:	0800ef3d 	.word	0x0800ef3d
 801146c:	080111ad 	.word	0x080111ad

08011470 <_read_r>:
 8011470:	b570      	push	{r4, r5, r6, lr}
 8011472:	0004      	movs	r4, r0
 8011474:	0008      	movs	r0, r1
 8011476:	0011      	movs	r1, r2
 8011478:	001a      	movs	r2, r3
 801147a:	2300      	movs	r3, #0
 801147c:	4d05      	ldr	r5, [pc, #20]	; (8011494 <_read_r+0x24>)
 801147e:	602b      	str	r3, [r5, #0]
 8011480:	f7f3 f8e2 	bl	8004648 <_read>
 8011484:	1c43      	adds	r3, r0, #1
 8011486:	d103      	bne.n	8011490 <_read_r+0x20>
 8011488:	682b      	ldr	r3, [r5, #0]
 801148a:	2b00      	cmp	r3, #0
 801148c:	d000      	beq.n	8011490 <_read_r+0x20>
 801148e:	6023      	str	r3, [r4, #0]
 8011490:	bd70      	pop	{r4, r5, r6, pc}
 8011492:	46c0      	nop			; (mov r8, r8)
 8011494:	200021bc 	.word	0x200021bc

08011498 <__swbuf_r>:
 8011498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801149a:	0005      	movs	r5, r0
 801149c:	000e      	movs	r6, r1
 801149e:	0014      	movs	r4, r2
 80114a0:	2800      	cmp	r0, #0
 80114a2:	d004      	beq.n	80114ae <__swbuf_r+0x16>
 80114a4:	6983      	ldr	r3, [r0, #24]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d101      	bne.n	80114ae <__swbuf_r+0x16>
 80114aa:	f7fd fb2d 	bl	800eb08 <__sinit>
 80114ae:	4b22      	ldr	r3, [pc, #136]	; (8011538 <__swbuf_r+0xa0>)
 80114b0:	429c      	cmp	r4, r3
 80114b2:	d12e      	bne.n	8011512 <__swbuf_r+0x7a>
 80114b4:	686c      	ldr	r4, [r5, #4]
 80114b6:	69a3      	ldr	r3, [r4, #24]
 80114b8:	60a3      	str	r3, [r4, #8]
 80114ba:	89a3      	ldrh	r3, [r4, #12]
 80114bc:	071b      	lsls	r3, r3, #28
 80114be:	d532      	bpl.n	8011526 <__swbuf_r+0x8e>
 80114c0:	6923      	ldr	r3, [r4, #16]
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d02f      	beq.n	8011526 <__swbuf_r+0x8e>
 80114c6:	6823      	ldr	r3, [r4, #0]
 80114c8:	6922      	ldr	r2, [r4, #16]
 80114ca:	b2f7      	uxtb	r7, r6
 80114cc:	1a98      	subs	r0, r3, r2
 80114ce:	6963      	ldr	r3, [r4, #20]
 80114d0:	b2f6      	uxtb	r6, r6
 80114d2:	4283      	cmp	r3, r0
 80114d4:	dc05      	bgt.n	80114e2 <__swbuf_r+0x4a>
 80114d6:	0021      	movs	r1, r4
 80114d8:	0028      	movs	r0, r5
 80114da:	f7ff f9d7 	bl	801088c <_fflush_r>
 80114de:	2800      	cmp	r0, #0
 80114e0:	d127      	bne.n	8011532 <__swbuf_r+0x9a>
 80114e2:	68a3      	ldr	r3, [r4, #8]
 80114e4:	3001      	adds	r0, #1
 80114e6:	3b01      	subs	r3, #1
 80114e8:	60a3      	str	r3, [r4, #8]
 80114ea:	6823      	ldr	r3, [r4, #0]
 80114ec:	1c5a      	adds	r2, r3, #1
 80114ee:	6022      	str	r2, [r4, #0]
 80114f0:	701f      	strb	r7, [r3, #0]
 80114f2:	6963      	ldr	r3, [r4, #20]
 80114f4:	4283      	cmp	r3, r0
 80114f6:	d004      	beq.n	8011502 <__swbuf_r+0x6a>
 80114f8:	89a3      	ldrh	r3, [r4, #12]
 80114fa:	07db      	lsls	r3, r3, #31
 80114fc:	d507      	bpl.n	801150e <__swbuf_r+0x76>
 80114fe:	2e0a      	cmp	r6, #10
 8011500:	d105      	bne.n	801150e <__swbuf_r+0x76>
 8011502:	0021      	movs	r1, r4
 8011504:	0028      	movs	r0, r5
 8011506:	f7ff f9c1 	bl	801088c <_fflush_r>
 801150a:	2800      	cmp	r0, #0
 801150c:	d111      	bne.n	8011532 <__swbuf_r+0x9a>
 801150e:	0030      	movs	r0, r6
 8011510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011512:	4b0a      	ldr	r3, [pc, #40]	; (801153c <__swbuf_r+0xa4>)
 8011514:	429c      	cmp	r4, r3
 8011516:	d101      	bne.n	801151c <__swbuf_r+0x84>
 8011518:	68ac      	ldr	r4, [r5, #8]
 801151a:	e7cc      	b.n	80114b6 <__swbuf_r+0x1e>
 801151c:	4b08      	ldr	r3, [pc, #32]	; (8011540 <__swbuf_r+0xa8>)
 801151e:	429c      	cmp	r4, r3
 8011520:	d1c9      	bne.n	80114b6 <__swbuf_r+0x1e>
 8011522:	68ec      	ldr	r4, [r5, #12]
 8011524:	e7c7      	b.n	80114b6 <__swbuf_r+0x1e>
 8011526:	0021      	movs	r1, r4
 8011528:	0028      	movs	r0, r5
 801152a:	f000 f80b 	bl	8011544 <__swsetup_r>
 801152e:	2800      	cmp	r0, #0
 8011530:	d0c9      	beq.n	80114c6 <__swbuf_r+0x2e>
 8011532:	2601      	movs	r6, #1
 8011534:	4276      	negs	r6, r6
 8011536:	e7ea      	b.n	801150e <__swbuf_r+0x76>
 8011538:	08013a3c 	.word	0x08013a3c
 801153c:	08013a5c 	.word	0x08013a5c
 8011540:	08013a1c 	.word	0x08013a1c

08011544 <__swsetup_r>:
 8011544:	4b37      	ldr	r3, [pc, #220]	; (8011624 <__swsetup_r+0xe0>)
 8011546:	b570      	push	{r4, r5, r6, lr}
 8011548:	681d      	ldr	r5, [r3, #0]
 801154a:	0006      	movs	r6, r0
 801154c:	000c      	movs	r4, r1
 801154e:	2d00      	cmp	r5, #0
 8011550:	d005      	beq.n	801155e <__swsetup_r+0x1a>
 8011552:	69ab      	ldr	r3, [r5, #24]
 8011554:	2b00      	cmp	r3, #0
 8011556:	d102      	bne.n	801155e <__swsetup_r+0x1a>
 8011558:	0028      	movs	r0, r5
 801155a:	f7fd fad5 	bl	800eb08 <__sinit>
 801155e:	4b32      	ldr	r3, [pc, #200]	; (8011628 <__swsetup_r+0xe4>)
 8011560:	429c      	cmp	r4, r3
 8011562:	d10f      	bne.n	8011584 <__swsetup_r+0x40>
 8011564:	686c      	ldr	r4, [r5, #4]
 8011566:	230c      	movs	r3, #12
 8011568:	5ee2      	ldrsh	r2, [r4, r3]
 801156a:	b293      	uxth	r3, r2
 801156c:	0711      	lsls	r1, r2, #28
 801156e:	d42d      	bmi.n	80115cc <__swsetup_r+0x88>
 8011570:	06d9      	lsls	r1, r3, #27
 8011572:	d411      	bmi.n	8011598 <__swsetup_r+0x54>
 8011574:	2309      	movs	r3, #9
 8011576:	2001      	movs	r0, #1
 8011578:	6033      	str	r3, [r6, #0]
 801157a:	3337      	adds	r3, #55	; 0x37
 801157c:	4313      	orrs	r3, r2
 801157e:	81a3      	strh	r3, [r4, #12]
 8011580:	4240      	negs	r0, r0
 8011582:	bd70      	pop	{r4, r5, r6, pc}
 8011584:	4b29      	ldr	r3, [pc, #164]	; (801162c <__swsetup_r+0xe8>)
 8011586:	429c      	cmp	r4, r3
 8011588:	d101      	bne.n	801158e <__swsetup_r+0x4a>
 801158a:	68ac      	ldr	r4, [r5, #8]
 801158c:	e7eb      	b.n	8011566 <__swsetup_r+0x22>
 801158e:	4b28      	ldr	r3, [pc, #160]	; (8011630 <__swsetup_r+0xec>)
 8011590:	429c      	cmp	r4, r3
 8011592:	d1e8      	bne.n	8011566 <__swsetup_r+0x22>
 8011594:	68ec      	ldr	r4, [r5, #12]
 8011596:	e7e6      	b.n	8011566 <__swsetup_r+0x22>
 8011598:	075b      	lsls	r3, r3, #29
 801159a:	d513      	bpl.n	80115c4 <__swsetup_r+0x80>
 801159c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801159e:	2900      	cmp	r1, #0
 80115a0:	d008      	beq.n	80115b4 <__swsetup_r+0x70>
 80115a2:	0023      	movs	r3, r4
 80115a4:	3344      	adds	r3, #68	; 0x44
 80115a6:	4299      	cmp	r1, r3
 80115a8:	d002      	beq.n	80115b0 <__swsetup_r+0x6c>
 80115aa:	0030      	movs	r0, r6
 80115ac:	f7ff fdb4 	bl	8011118 <_free_r>
 80115b0:	2300      	movs	r3, #0
 80115b2:	6363      	str	r3, [r4, #52]	; 0x34
 80115b4:	2224      	movs	r2, #36	; 0x24
 80115b6:	89a3      	ldrh	r3, [r4, #12]
 80115b8:	4393      	bics	r3, r2
 80115ba:	81a3      	strh	r3, [r4, #12]
 80115bc:	2300      	movs	r3, #0
 80115be:	6063      	str	r3, [r4, #4]
 80115c0:	6923      	ldr	r3, [r4, #16]
 80115c2:	6023      	str	r3, [r4, #0]
 80115c4:	2308      	movs	r3, #8
 80115c6:	89a2      	ldrh	r2, [r4, #12]
 80115c8:	4313      	orrs	r3, r2
 80115ca:	81a3      	strh	r3, [r4, #12]
 80115cc:	6923      	ldr	r3, [r4, #16]
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d10b      	bne.n	80115ea <__swsetup_r+0xa6>
 80115d2:	21a0      	movs	r1, #160	; 0xa0
 80115d4:	2280      	movs	r2, #128	; 0x80
 80115d6:	89a3      	ldrh	r3, [r4, #12]
 80115d8:	0089      	lsls	r1, r1, #2
 80115da:	0092      	lsls	r2, r2, #2
 80115dc:	400b      	ands	r3, r1
 80115de:	4293      	cmp	r3, r2
 80115e0:	d003      	beq.n	80115ea <__swsetup_r+0xa6>
 80115e2:	0021      	movs	r1, r4
 80115e4:	0030      	movs	r0, r6
 80115e6:	f000 f87b 	bl	80116e0 <__smakebuf_r>
 80115ea:	220c      	movs	r2, #12
 80115ec:	5ea3      	ldrsh	r3, [r4, r2]
 80115ee:	2001      	movs	r0, #1
 80115f0:	001a      	movs	r2, r3
 80115f2:	b299      	uxth	r1, r3
 80115f4:	4002      	ands	r2, r0
 80115f6:	4203      	tst	r3, r0
 80115f8:	d00f      	beq.n	801161a <__swsetup_r+0xd6>
 80115fa:	2200      	movs	r2, #0
 80115fc:	60a2      	str	r2, [r4, #8]
 80115fe:	6962      	ldr	r2, [r4, #20]
 8011600:	4252      	negs	r2, r2
 8011602:	61a2      	str	r2, [r4, #24]
 8011604:	2000      	movs	r0, #0
 8011606:	6922      	ldr	r2, [r4, #16]
 8011608:	4282      	cmp	r2, r0
 801160a:	d1ba      	bne.n	8011582 <__swsetup_r+0x3e>
 801160c:	060a      	lsls	r2, r1, #24
 801160e:	d5b8      	bpl.n	8011582 <__swsetup_r+0x3e>
 8011610:	2240      	movs	r2, #64	; 0x40
 8011612:	4313      	orrs	r3, r2
 8011614:	81a3      	strh	r3, [r4, #12]
 8011616:	3801      	subs	r0, #1
 8011618:	e7b3      	b.n	8011582 <__swsetup_r+0x3e>
 801161a:	0788      	lsls	r0, r1, #30
 801161c:	d400      	bmi.n	8011620 <__swsetup_r+0xdc>
 801161e:	6962      	ldr	r2, [r4, #20]
 8011620:	60a2      	str	r2, [r4, #8]
 8011622:	e7ef      	b.n	8011604 <__swsetup_r+0xc0>
 8011624:	2000009c 	.word	0x2000009c
 8011628:	08013a3c 	.word	0x08013a3c
 801162c:	08013a5c 	.word	0x08013a5c
 8011630:	08013a1c 	.word	0x08013a1c

08011634 <__assert_func>:
 8011634:	b530      	push	{r4, r5, lr}
 8011636:	0014      	movs	r4, r2
 8011638:	001a      	movs	r2, r3
 801163a:	4b09      	ldr	r3, [pc, #36]	; (8011660 <__assert_func+0x2c>)
 801163c:	0005      	movs	r5, r0
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	b085      	sub	sp, #20
 8011642:	68d8      	ldr	r0, [r3, #12]
 8011644:	4b07      	ldr	r3, [pc, #28]	; (8011664 <__assert_func+0x30>)
 8011646:	2c00      	cmp	r4, #0
 8011648:	d101      	bne.n	801164e <__assert_func+0x1a>
 801164a:	4b07      	ldr	r3, [pc, #28]	; (8011668 <__assert_func+0x34>)
 801164c:	001c      	movs	r4, r3
 801164e:	9301      	str	r3, [sp, #4]
 8011650:	9100      	str	r1, [sp, #0]
 8011652:	002b      	movs	r3, r5
 8011654:	4905      	ldr	r1, [pc, #20]	; (801166c <__assert_func+0x38>)
 8011656:	9402      	str	r4, [sp, #8]
 8011658:	f000 f80a 	bl	8011670 <fiprintf>
 801165c:	f000 fa47 	bl	8011aee <abort>
 8011660:	2000009c 	.word	0x2000009c
 8011664:	08013db5 	.word	0x08013db5
 8011668:	08013df0 	.word	0x08013df0
 801166c:	08013dc2 	.word	0x08013dc2

08011670 <fiprintf>:
 8011670:	b40e      	push	{r1, r2, r3}
 8011672:	b503      	push	{r0, r1, lr}
 8011674:	0001      	movs	r1, r0
 8011676:	ab03      	add	r3, sp, #12
 8011678:	4804      	ldr	r0, [pc, #16]	; (801168c <fiprintf+0x1c>)
 801167a:	cb04      	ldmia	r3!, {r2}
 801167c:	6800      	ldr	r0, [r0, #0]
 801167e:	9301      	str	r3, [sp, #4]
 8011680:	f000 f8ee 	bl	8011860 <_vfiprintf_r>
 8011684:	b002      	add	sp, #8
 8011686:	bc08      	pop	{r3}
 8011688:	b003      	add	sp, #12
 801168a:	4718      	bx	r3
 801168c:	2000009c 	.word	0x2000009c

08011690 <__swhatbuf_r>:
 8011690:	b570      	push	{r4, r5, r6, lr}
 8011692:	000e      	movs	r6, r1
 8011694:	001d      	movs	r5, r3
 8011696:	230e      	movs	r3, #14
 8011698:	5ec9      	ldrsh	r1, [r1, r3]
 801169a:	0014      	movs	r4, r2
 801169c:	b096      	sub	sp, #88	; 0x58
 801169e:	2900      	cmp	r1, #0
 80116a0:	da08      	bge.n	80116b4 <__swhatbuf_r+0x24>
 80116a2:	220c      	movs	r2, #12
 80116a4:	5eb3      	ldrsh	r3, [r6, r2]
 80116a6:	2200      	movs	r2, #0
 80116a8:	602a      	str	r2, [r5, #0]
 80116aa:	061b      	lsls	r3, r3, #24
 80116ac:	d411      	bmi.n	80116d2 <__swhatbuf_r+0x42>
 80116ae:	2380      	movs	r3, #128	; 0x80
 80116b0:	00db      	lsls	r3, r3, #3
 80116b2:	e00f      	b.n	80116d4 <__swhatbuf_r+0x44>
 80116b4:	466a      	mov	r2, sp
 80116b6:	f000 fa21 	bl	8011afc <_fstat_r>
 80116ba:	2800      	cmp	r0, #0
 80116bc:	dbf1      	blt.n	80116a2 <__swhatbuf_r+0x12>
 80116be:	23f0      	movs	r3, #240	; 0xf0
 80116c0:	9901      	ldr	r1, [sp, #4]
 80116c2:	021b      	lsls	r3, r3, #8
 80116c4:	4019      	ands	r1, r3
 80116c6:	4b05      	ldr	r3, [pc, #20]	; (80116dc <__swhatbuf_r+0x4c>)
 80116c8:	18c9      	adds	r1, r1, r3
 80116ca:	424b      	negs	r3, r1
 80116cc:	4159      	adcs	r1, r3
 80116ce:	6029      	str	r1, [r5, #0]
 80116d0:	e7ed      	b.n	80116ae <__swhatbuf_r+0x1e>
 80116d2:	2340      	movs	r3, #64	; 0x40
 80116d4:	2000      	movs	r0, #0
 80116d6:	6023      	str	r3, [r4, #0]
 80116d8:	b016      	add	sp, #88	; 0x58
 80116da:	bd70      	pop	{r4, r5, r6, pc}
 80116dc:	ffffe000 	.word	0xffffe000

080116e0 <__smakebuf_r>:
 80116e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80116e2:	2602      	movs	r6, #2
 80116e4:	898b      	ldrh	r3, [r1, #12]
 80116e6:	0005      	movs	r5, r0
 80116e8:	000c      	movs	r4, r1
 80116ea:	4233      	tst	r3, r6
 80116ec:	d006      	beq.n	80116fc <__smakebuf_r+0x1c>
 80116ee:	0023      	movs	r3, r4
 80116f0:	3347      	adds	r3, #71	; 0x47
 80116f2:	6023      	str	r3, [r4, #0]
 80116f4:	6123      	str	r3, [r4, #16]
 80116f6:	2301      	movs	r3, #1
 80116f8:	6163      	str	r3, [r4, #20]
 80116fa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80116fc:	466a      	mov	r2, sp
 80116fe:	ab01      	add	r3, sp, #4
 8011700:	f7ff ffc6 	bl	8011690 <__swhatbuf_r>
 8011704:	9900      	ldr	r1, [sp, #0]
 8011706:	0007      	movs	r7, r0
 8011708:	0028      	movs	r0, r5
 801170a:	f7fd faf7 	bl	800ecfc <_malloc_r>
 801170e:	2800      	cmp	r0, #0
 8011710:	d108      	bne.n	8011724 <__smakebuf_r+0x44>
 8011712:	220c      	movs	r2, #12
 8011714:	5ea3      	ldrsh	r3, [r4, r2]
 8011716:	059a      	lsls	r2, r3, #22
 8011718:	d4ef      	bmi.n	80116fa <__smakebuf_r+0x1a>
 801171a:	2203      	movs	r2, #3
 801171c:	4393      	bics	r3, r2
 801171e:	431e      	orrs	r6, r3
 8011720:	81a6      	strh	r6, [r4, #12]
 8011722:	e7e4      	b.n	80116ee <__smakebuf_r+0xe>
 8011724:	4b0f      	ldr	r3, [pc, #60]	; (8011764 <__smakebuf_r+0x84>)
 8011726:	62ab      	str	r3, [r5, #40]	; 0x28
 8011728:	2380      	movs	r3, #128	; 0x80
 801172a:	89a2      	ldrh	r2, [r4, #12]
 801172c:	6020      	str	r0, [r4, #0]
 801172e:	4313      	orrs	r3, r2
 8011730:	81a3      	strh	r3, [r4, #12]
 8011732:	9b00      	ldr	r3, [sp, #0]
 8011734:	6120      	str	r0, [r4, #16]
 8011736:	6163      	str	r3, [r4, #20]
 8011738:	9b01      	ldr	r3, [sp, #4]
 801173a:	2b00      	cmp	r3, #0
 801173c:	d00d      	beq.n	801175a <__smakebuf_r+0x7a>
 801173e:	0028      	movs	r0, r5
 8011740:	230e      	movs	r3, #14
 8011742:	5ee1      	ldrsh	r1, [r4, r3]
 8011744:	f000 f9ec 	bl	8011b20 <_isatty_r>
 8011748:	2800      	cmp	r0, #0
 801174a:	d006      	beq.n	801175a <__smakebuf_r+0x7a>
 801174c:	2203      	movs	r2, #3
 801174e:	89a3      	ldrh	r3, [r4, #12]
 8011750:	4393      	bics	r3, r2
 8011752:	001a      	movs	r2, r3
 8011754:	2301      	movs	r3, #1
 8011756:	4313      	orrs	r3, r2
 8011758:	81a3      	strh	r3, [r4, #12]
 801175a:	89a0      	ldrh	r0, [r4, #12]
 801175c:	4307      	orrs	r7, r0
 801175e:	81a7      	strh	r7, [r4, #12]
 8011760:	e7cb      	b.n	80116fa <__smakebuf_r+0x1a>
 8011762:	46c0      	nop			; (mov r8, r8)
 8011764:	0800ea8d 	.word	0x0800ea8d

08011768 <__ascii_mbtowc>:
 8011768:	b082      	sub	sp, #8
 801176a:	2900      	cmp	r1, #0
 801176c:	d100      	bne.n	8011770 <__ascii_mbtowc+0x8>
 801176e:	a901      	add	r1, sp, #4
 8011770:	1e10      	subs	r0, r2, #0
 8011772:	d006      	beq.n	8011782 <__ascii_mbtowc+0x1a>
 8011774:	2b00      	cmp	r3, #0
 8011776:	d006      	beq.n	8011786 <__ascii_mbtowc+0x1e>
 8011778:	7813      	ldrb	r3, [r2, #0]
 801177a:	600b      	str	r3, [r1, #0]
 801177c:	7810      	ldrb	r0, [r2, #0]
 801177e:	1e43      	subs	r3, r0, #1
 8011780:	4198      	sbcs	r0, r3
 8011782:	b002      	add	sp, #8
 8011784:	4770      	bx	lr
 8011786:	2002      	movs	r0, #2
 8011788:	4240      	negs	r0, r0
 801178a:	e7fa      	b.n	8011782 <__ascii_mbtowc+0x1a>

0801178c <memmove>:
 801178c:	b510      	push	{r4, lr}
 801178e:	4288      	cmp	r0, r1
 8011790:	d902      	bls.n	8011798 <memmove+0xc>
 8011792:	188b      	adds	r3, r1, r2
 8011794:	4298      	cmp	r0, r3
 8011796:	d303      	bcc.n	80117a0 <memmove+0x14>
 8011798:	2300      	movs	r3, #0
 801179a:	e007      	b.n	80117ac <memmove+0x20>
 801179c:	5c8b      	ldrb	r3, [r1, r2]
 801179e:	5483      	strb	r3, [r0, r2]
 80117a0:	3a01      	subs	r2, #1
 80117a2:	d2fb      	bcs.n	801179c <memmove+0x10>
 80117a4:	bd10      	pop	{r4, pc}
 80117a6:	5ccc      	ldrb	r4, [r1, r3]
 80117a8:	54c4      	strb	r4, [r0, r3]
 80117aa:	3301      	adds	r3, #1
 80117ac:	429a      	cmp	r2, r3
 80117ae:	d1fa      	bne.n	80117a6 <memmove+0x1a>
 80117b0:	e7f8      	b.n	80117a4 <memmove+0x18>

080117b2 <_realloc_r>:
 80117b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80117b4:	0007      	movs	r7, r0
 80117b6:	000e      	movs	r6, r1
 80117b8:	0014      	movs	r4, r2
 80117ba:	2900      	cmp	r1, #0
 80117bc:	d105      	bne.n	80117ca <_realloc_r+0x18>
 80117be:	0011      	movs	r1, r2
 80117c0:	f7fd fa9c 	bl	800ecfc <_malloc_r>
 80117c4:	0005      	movs	r5, r0
 80117c6:	0028      	movs	r0, r5
 80117c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80117ca:	2a00      	cmp	r2, #0
 80117cc:	d103      	bne.n	80117d6 <_realloc_r+0x24>
 80117ce:	f7ff fca3 	bl	8011118 <_free_r>
 80117d2:	0025      	movs	r5, r4
 80117d4:	e7f7      	b.n	80117c6 <_realloc_r+0x14>
 80117d6:	f000 f9b5 	bl	8011b44 <_malloc_usable_size_r>
 80117da:	9001      	str	r0, [sp, #4]
 80117dc:	4284      	cmp	r4, r0
 80117de:	d803      	bhi.n	80117e8 <_realloc_r+0x36>
 80117e0:	0035      	movs	r5, r6
 80117e2:	0843      	lsrs	r3, r0, #1
 80117e4:	42a3      	cmp	r3, r4
 80117e6:	d3ee      	bcc.n	80117c6 <_realloc_r+0x14>
 80117e8:	0021      	movs	r1, r4
 80117ea:	0038      	movs	r0, r7
 80117ec:	f7fd fa86 	bl	800ecfc <_malloc_r>
 80117f0:	1e05      	subs	r5, r0, #0
 80117f2:	d0e8      	beq.n	80117c6 <_realloc_r+0x14>
 80117f4:	9b01      	ldr	r3, [sp, #4]
 80117f6:	0022      	movs	r2, r4
 80117f8:	429c      	cmp	r4, r3
 80117fa:	d900      	bls.n	80117fe <_realloc_r+0x4c>
 80117fc:	001a      	movs	r2, r3
 80117fe:	0031      	movs	r1, r6
 8011800:	0028      	movs	r0, r5
 8011802:	f7fd fa48 	bl	800ec96 <memcpy>
 8011806:	0031      	movs	r1, r6
 8011808:	0038      	movs	r0, r7
 801180a:	f7ff fc85 	bl	8011118 <_free_r>
 801180e:	e7da      	b.n	80117c6 <_realloc_r+0x14>

08011810 <__sfputc_r>:
 8011810:	6893      	ldr	r3, [r2, #8]
 8011812:	b510      	push	{r4, lr}
 8011814:	3b01      	subs	r3, #1
 8011816:	6093      	str	r3, [r2, #8]
 8011818:	2b00      	cmp	r3, #0
 801181a:	da04      	bge.n	8011826 <__sfputc_r+0x16>
 801181c:	6994      	ldr	r4, [r2, #24]
 801181e:	42a3      	cmp	r3, r4
 8011820:	db07      	blt.n	8011832 <__sfputc_r+0x22>
 8011822:	290a      	cmp	r1, #10
 8011824:	d005      	beq.n	8011832 <__sfputc_r+0x22>
 8011826:	6813      	ldr	r3, [r2, #0]
 8011828:	1c58      	adds	r0, r3, #1
 801182a:	6010      	str	r0, [r2, #0]
 801182c:	7019      	strb	r1, [r3, #0]
 801182e:	0008      	movs	r0, r1
 8011830:	bd10      	pop	{r4, pc}
 8011832:	f7ff fe31 	bl	8011498 <__swbuf_r>
 8011836:	0001      	movs	r1, r0
 8011838:	e7f9      	b.n	801182e <__sfputc_r+0x1e>

0801183a <__sfputs_r>:
 801183a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801183c:	0006      	movs	r6, r0
 801183e:	000f      	movs	r7, r1
 8011840:	0014      	movs	r4, r2
 8011842:	18d5      	adds	r5, r2, r3
 8011844:	42ac      	cmp	r4, r5
 8011846:	d101      	bne.n	801184c <__sfputs_r+0x12>
 8011848:	2000      	movs	r0, #0
 801184a:	e007      	b.n	801185c <__sfputs_r+0x22>
 801184c:	7821      	ldrb	r1, [r4, #0]
 801184e:	003a      	movs	r2, r7
 8011850:	0030      	movs	r0, r6
 8011852:	f7ff ffdd 	bl	8011810 <__sfputc_r>
 8011856:	3401      	adds	r4, #1
 8011858:	1c43      	adds	r3, r0, #1
 801185a:	d1f3      	bne.n	8011844 <__sfputs_r+0xa>
 801185c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011860 <_vfiprintf_r>:
 8011860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011862:	b0a1      	sub	sp, #132	; 0x84
 8011864:	0006      	movs	r6, r0
 8011866:	000c      	movs	r4, r1
 8011868:	001f      	movs	r7, r3
 801186a:	9203      	str	r2, [sp, #12]
 801186c:	2800      	cmp	r0, #0
 801186e:	d004      	beq.n	801187a <_vfiprintf_r+0x1a>
 8011870:	6983      	ldr	r3, [r0, #24]
 8011872:	2b00      	cmp	r3, #0
 8011874:	d101      	bne.n	801187a <_vfiprintf_r+0x1a>
 8011876:	f7fd f947 	bl	800eb08 <__sinit>
 801187a:	4b8e      	ldr	r3, [pc, #568]	; (8011ab4 <_vfiprintf_r+0x254>)
 801187c:	429c      	cmp	r4, r3
 801187e:	d11c      	bne.n	80118ba <_vfiprintf_r+0x5a>
 8011880:	6874      	ldr	r4, [r6, #4]
 8011882:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011884:	07db      	lsls	r3, r3, #31
 8011886:	d405      	bmi.n	8011894 <_vfiprintf_r+0x34>
 8011888:	89a3      	ldrh	r3, [r4, #12]
 801188a:	059b      	lsls	r3, r3, #22
 801188c:	d402      	bmi.n	8011894 <_vfiprintf_r+0x34>
 801188e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011890:	f7fd f9ff 	bl	800ec92 <__retarget_lock_acquire_recursive>
 8011894:	89a3      	ldrh	r3, [r4, #12]
 8011896:	071b      	lsls	r3, r3, #28
 8011898:	d502      	bpl.n	80118a0 <_vfiprintf_r+0x40>
 801189a:	6923      	ldr	r3, [r4, #16]
 801189c:	2b00      	cmp	r3, #0
 801189e:	d11d      	bne.n	80118dc <_vfiprintf_r+0x7c>
 80118a0:	0021      	movs	r1, r4
 80118a2:	0030      	movs	r0, r6
 80118a4:	f7ff fe4e 	bl	8011544 <__swsetup_r>
 80118a8:	2800      	cmp	r0, #0
 80118aa:	d017      	beq.n	80118dc <_vfiprintf_r+0x7c>
 80118ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80118ae:	07db      	lsls	r3, r3, #31
 80118b0:	d50d      	bpl.n	80118ce <_vfiprintf_r+0x6e>
 80118b2:	2001      	movs	r0, #1
 80118b4:	4240      	negs	r0, r0
 80118b6:	b021      	add	sp, #132	; 0x84
 80118b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80118ba:	4b7f      	ldr	r3, [pc, #508]	; (8011ab8 <_vfiprintf_r+0x258>)
 80118bc:	429c      	cmp	r4, r3
 80118be:	d101      	bne.n	80118c4 <_vfiprintf_r+0x64>
 80118c0:	68b4      	ldr	r4, [r6, #8]
 80118c2:	e7de      	b.n	8011882 <_vfiprintf_r+0x22>
 80118c4:	4b7d      	ldr	r3, [pc, #500]	; (8011abc <_vfiprintf_r+0x25c>)
 80118c6:	429c      	cmp	r4, r3
 80118c8:	d1db      	bne.n	8011882 <_vfiprintf_r+0x22>
 80118ca:	68f4      	ldr	r4, [r6, #12]
 80118cc:	e7d9      	b.n	8011882 <_vfiprintf_r+0x22>
 80118ce:	89a3      	ldrh	r3, [r4, #12]
 80118d0:	059b      	lsls	r3, r3, #22
 80118d2:	d4ee      	bmi.n	80118b2 <_vfiprintf_r+0x52>
 80118d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80118d6:	f7fd f9dd 	bl	800ec94 <__retarget_lock_release_recursive>
 80118da:	e7ea      	b.n	80118b2 <_vfiprintf_r+0x52>
 80118dc:	2300      	movs	r3, #0
 80118de:	ad08      	add	r5, sp, #32
 80118e0:	616b      	str	r3, [r5, #20]
 80118e2:	3320      	adds	r3, #32
 80118e4:	766b      	strb	r3, [r5, #25]
 80118e6:	3310      	adds	r3, #16
 80118e8:	76ab      	strb	r3, [r5, #26]
 80118ea:	9707      	str	r7, [sp, #28]
 80118ec:	9f03      	ldr	r7, [sp, #12]
 80118ee:	783b      	ldrb	r3, [r7, #0]
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d001      	beq.n	80118f8 <_vfiprintf_r+0x98>
 80118f4:	2b25      	cmp	r3, #37	; 0x25
 80118f6:	d14e      	bne.n	8011996 <_vfiprintf_r+0x136>
 80118f8:	9b03      	ldr	r3, [sp, #12]
 80118fa:	1afb      	subs	r3, r7, r3
 80118fc:	9305      	str	r3, [sp, #20]
 80118fe:	9b03      	ldr	r3, [sp, #12]
 8011900:	429f      	cmp	r7, r3
 8011902:	d00d      	beq.n	8011920 <_vfiprintf_r+0xc0>
 8011904:	9b05      	ldr	r3, [sp, #20]
 8011906:	0021      	movs	r1, r4
 8011908:	0030      	movs	r0, r6
 801190a:	9a03      	ldr	r2, [sp, #12]
 801190c:	f7ff ff95 	bl	801183a <__sfputs_r>
 8011910:	1c43      	adds	r3, r0, #1
 8011912:	d100      	bne.n	8011916 <_vfiprintf_r+0xb6>
 8011914:	e0b5      	b.n	8011a82 <_vfiprintf_r+0x222>
 8011916:	696a      	ldr	r2, [r5, #20]
 8011918:	9b05      	ldr	r3, [sp, #20]
 801191a:	4694      	mov	ip, r2
 801191c:	4463      	add	r3, ip
 801191e:	616b      	str	r3, [r5, #20]
 8011920:	783b      	ldrb	r3, [r7, #0]
 8011922:	2b00      	cmp	r3, #0
 8011924:	d100      	bne.n	8011928 <_vfiprintf_r+0xc8>
 8011926:	e0ac      	b.n	8011a82 <_vfiprintf_r+0x222>
 8011928:	2201      	movs	r2, #1
 801192a:	1c7b      	adds	r3, r7, #1
 801192c:	9303      	str	r3, [sp, #12]
 801192e:	2300      	movs	r3, #0
 8011930:	4252      	negs	r2, r2
 8011932:	606a      	str	r2, [r5, #4]
 8011934:	a904      	add	r1, sp, #16
 8011936:	3254      	adds	r2, #84	; 0x54
 8011938:	1852      	adds	r2, r2, r1
 801193a:	602b      	str	r3, [r5, #0]
 801193c:	60eb      	str	r3, [r5, #12]
 801193e:	60ab      	str	r3, [r5, #8]
 8011940:	7013      	strb	r3, [r2, #0]
 8011942:	65ab      	str	r3, [r5, #88]	; 0x58
 8011944:	9b03      	ldr	r3, [sp, #12]
 8011946:	2205      	movs	r2, #5
 8011948:	7819      	ldrb	r1, [r3, #0]
 801194a:	485d      	ldr	r0, [pc, #372]	; (8011ac0 <_vfiprintf_r+0x260>)
 801194c:	f7ff f800 	bl	8010950 <memchr>
 8011950:	9b03      	ldr	r3, [sp, #12]
 8011952:	1c5f      	adds	r7, r3, #1
 8011954:	2800      	cmp	r0, #0
 8011956:	d120      	bne.n	801199a <_vfiprintf_r+0x13a>
 8011958:	682a      	ldr	r2, [r5, #0]
 801195a:	06d3      	lsls	r3, r2, #27
 801195c:	d504      	bpl.n	8011968 <_vfiprintf_r+0x108>
 801195e:	2353      	movs	r3, #83	; 0x53
 8011960:	a904      	add	r1, sp, #16
 8011962:	185b      	adds	r3, r3, r1
 8011964:	2120      	movs	r1, #32
 8011966:	7019      	strb	r1, [r3, #0]
 8011968:	0713      	lsls	r3, r2, #28
 801196a:	d504      	bpl.n	8011976 <_vfiprintf_r+0x116>
 801196c:	2353      	movs	r3, #83	; 0x53
 801196e:	a904      	add	r1, sp, #16
 8011970:	185b      	adds	r3, r3, r1
 8011972:	212b      	movs	r1, #43	; 0x2b
 8011974:	7019      	strb	r1, [r3, #0]
 8011976:	9b03      	ldr	r3, [sp, #12]
 8011978:	781b      	ldrb	r3, [r3, #0]
 801197a:	2b2a      	cmp	r3, #42	; 0x2a
 801197c:	d016      	beq.n	80119ac <_vfiprintf_r+0x14c>
 801197e:	2100      	movs	r1, #0
 8011980:	68eb      	ldr	r3, [r5, #12]
 8011982:	9f03      	ldr	r7, [sp, #12]
 8011984:	783a      	ldrb	r2, [r7, #0]
 8011986:	1c78      	adds	r0, r7, #1
 8011988:	3a30      	subs	r2, #48	; 0x30
 801198a:	4684      	mov	ip, r0
 801198c:	2a09      	cmp	r2, #9
 801198e:	d94f      	bls.n	8011a30 <_vfiprintf_r+0x1d0>
 8011990:	2900      	cmp	r1, #0
 8011992:	d111      	bne.n	80119b8 <_vfiprintf_r+0x158>
 8011994:	e017      	b.n	80119c6 <_vfiprintf_r+0x166>
 8011996:	3701      	adds	r7, #1
 8011998:	e7a9      	b.n	80118ee <_vfiprintf_r+0x8e>
 801199a:	4b49      	ldr	r3, [pc, #292]	; (8011ac0 <_vfiprintf_r+0x260>)
 801199c:	682a      	ldr	r2, [r5, #0]
 801199e:	1ac0      	subs	r0, r0, r3
 80119a0:	2301      	movs	r3, #1
 80119a2:	4083      	lsls	r3, r0
 80119a4:	4313      	orrs	r3, r2
 80119a6:	602b      	str	r3, [r5, #0]
 80119a8:	9703      	str	r7, [sp, #12]
 80119aa:	e7cb      	b.n	8011944 <_vfiprintf_r+0xe4>
 80119ac:	9b07      	ldr	r3, [sp, #28]
 80119ae:	1d19      	adds	r1, r3, #4
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	9107      	str	r1, [sp, #28]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	db01      	blt.n	80119bc <_vfiprintf_r+0x15c>
 80119b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80119ba:	e004      	b.n	80119c6 <_vfiprintf_r+0x166>
 80119bc:	425b      	negs	r3, r3
 80119be:	60eb      	str	r3, [r5, #12]
 80119c0:	2302      	movs	r3, #2
 80119c2:	4313      	orrs	r3, r2
 80119c4:	602b      	str	r3, [r5, #0]
 80119c6:	783b      	ldrb	r3, [r7, #0]
 80119c8:	2b2e      	cmp	r3, #46	; 0x2e
 80119ca:	d10a      	bne.n	80119e2 <_vfiprintf_r+0x182>
 80119cc:	787b      	ldrb	r3, [r7, #1]
 80119ce:	2b2a      	cmp	r3, #42	; 0x2a
 80119d0:	d137      	bne.n	8011a42 <_vfiprintf_r+0x1e2>
 80119d2:	9b07      	ldr	r3, [sp, #28]
 80119d4:	3702      	adds	r7, #2
 80119d6:	1d1a      	adds	r2, r3, #4
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	9207      	str	r2, [sp, #28]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	db2d      	blt.n	8011a3c <_vfiprintf_r+0x1dc>
 80119e0:	9309      	str	r3, [sp, #36]	; 0x24
 80119e2:	2203      	movs	r2, #3
 80119e4:	7839      	ldrb	r1, [r7, #0]
 80119e6:	4837      	ldr	r0, [pc, #220]	; (8011ac4 <_vfiprintf_r+0x264>)
 80119e8:	f7fe ffb2 	bl	8010950 <memchr>
 80119ec:	2800      	cmp	r0, #0
 80119ee:	d007      	beq.n	8011a00 <_vfiprintf_r+0x1a0>
 80119f0:	4b34      	ldr	r3, [pc, #208]	; (8011ac4 <_vfiprintf_r+0x264>)
 80119f2:	682a      	ldr	r2, [r5, #0]
 80119f4:	1ac0      	subs	r0, r0, r3
 80119f6:	2340      	movs	r3, #64	; 0x40
 80119f8:	4083      	lsls	r3, r0
 80119fa:	4313      	orrs	r3, r2
 80119fc:	3701      	adds	r7, #1
 80119fe:	602b      	str	r3, [r5, #0]
 8011a00:	7839      	ldrb	r1, [r7, #0]
 8011a02:	1c7b      	adds	r3, r7, #1
 8011a04:	2206      	movs	r2, #6
 8011a06:	4830      	ldr	r0, [pc, #192]	; (8011ac8 <_vfiprintf_r+0x268>)
 8011a08:	9303      	str	r3, [sp, #12]
 8011a0a:	7629      	strb	r1, [r5, #24]
 8011a0c:	f7fe ffa0 	bl	8010950 <memchr>
 8011a10:	2800      	cmp	r0, #0
 8011a12:	d045      	beq.n	8011aa0 <_vfiprintf_r+0x240>
 8011a14:	4b2d      	ldr	r3, [pc, #180]	; (8011acc <_vfiprintf_r+0x26c>)
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d127      	bne.n	8011a6a <_vfiprintf_r+0x20a>
 8011a1a:	2207      	movs	r2, #7
 8011a1c:	9b07      	ldr	r3, [sp, #28]
 8011a1e:	3307      	adds	r3, #7
 8011a20:	4393      	bics	r3, r2
 8011a22:	3308      	adds	r3, #8
 8011a24:	9307      	str	r3, [sp, #28]
 8011a26:	696b      	ldr	r3, [r5, #20]
 8011a28:	9a04      	ldr	r2, [sp, #16]
 8011a2a:	189b      	adds	r3, r3, r2
 8011a2c:	616b      	str	r3, [r5, #20]
 8011a2e:	e75d      	b.n	80118ec <_vfiprintf_r+0x8c>
 8011a30:	210a      	movs	r1, #10
 8011a32:	434b      	muls	r3, r1
 8011a34:	4667      	mov	r7, ip
 8011a36:	189b      	adds	r3, r3, r2
 8011a38:	3909      	subs	r1, #9
 8011a3a:	e7a3      	b.n	8011984 <_vfiprintf_r+0x124>
 8011a3c:	2301      	movs	r3, #1
 8011a3e:	425b      	negs	r3, r3
 8011a40:	e7ce      	b.n	80119e0 <_vfiprintf_r+0x180>
 8011a42:	2300      	movs	r3, #0
 8011a44:	001a      	movs	r2, r3
 8011a46:	3701      	adds	r7, #1
 8011a48:	606b      	str	r3, [r5, #4]
 8011a4a:	7839      	ldrb	r1, [r7, #0]
 8011a4c:	1c78      	adds	r0, r7, #1
 8011a4e:	3930      	subs	r1, #48	; 0x30
 8011a50:	4684      	mov	ip, r0
 8011a52:	2909      	cmp	r1, #9
 8011a54:	d903      	bls.n	8011a5e <_vfiprintf_r+0x1fe>
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d0c3      	beq.n	80119e2 <_vfiprintf_r+0x182>
 8011a5a:	9209      	str	r2, [sp, #36]	; 0x24
 8011a5c:	e7c1      	b.n	80119e2 <_vfiprintf_r+0x182>
 8011a5e:	230a      	movs	r3, #10
 8011a60:	435a      	muls	r2, r3
 8011a62:	4667      	mov	r7, ip
 8011a64:	1852      	adds	r2, r2, r1
 8011a66:	3b09      	subs	r3, #9
 8011a68:	e7ef      	b.n	8011a4a <_vfiprintf_r+0x1ea>
 8011a6a:	ab07      	add	r3, sp, #28
 8011a6c:	9300      	str	r3, [sp, #0]
 8011a6e:	0022      	movs	r2, r4
 8011a70:	0029      	movs	r1, r5
 8011a72:	0030      	movs	r0, r6
 8011a74:	4b16      	ldr	r3, [pc, #88]	; (8011ad0 <_vfiprintf_r+0x270>)
 8011a76:	f7fd fa61 	bl	800ef3c <_printf_float>
 8011a7a:	9004      	str	r0, [sp, #16]
 8011a7c:	9b04      	ldr	r3, [sp, #16]
 8011a7e:	3301      	adds	r3, #1
 8011a80:	d1d1      	bne.n	8011a26 <_vfiprintf_r+0x1c6>
 8011a82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011a84:	07db      	lsls	r3, r3, #31
 8011a86:	d405      	bmi.n	8011a94 <_vfiprintf_r+0x234>
 8011a88:	89a3      	ldrh	r3, [r4, #12]
 8011a8a:	059b      	lsls	r3, r3, #22
 8011a8c:	d402      	bmi.n	8011a94 <_vfiprintf_r+0x234>
 8011a8e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011a90:	f7fd f900 	bl	800ec94 <__retarget_lock_release_recursive>
 8011a94:	89a3      	ldrh	r3, [r4, #12]
 8011a96:	065b      	lsls	r3, r3, #25
 8011a98:	d500      	bpl.n	8011a9c <_vfiprintf_r+0x23c>
 8011a9a:	e70a      	b.n	80118b2 <_vfiprintf_r+0x52>
 8011a9c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8011a9e:	e70a      	b.n	80118b6 <_vfiprintf_r+0x56>
 8011aa0:	ab07      	add	r3, sp, #28
 8011aa2:	9300      	str	r3, [sp, #0]
 8011aa4:	0022      	movs	r2, r4
 8011aa6:	0029      	movs	r1, r5
 8011aa8:	0030      	movs	r0, r6
 8011aaa:	4b09      	ldr	r3, [pc, #36]	; (8011ad0 <_vfiprintf_r+0x270>)
 8011aac:	f7fd fcf8 	bl	800f4a0 <_printf_i>
 8011ab0:	e7e3      	b.n	8011a7a <_vfiprintf_r+0x21a>
 8011ab2:	46c0      	nop			; (mov r8, r8)
 8011ab4:	08013a3c 	.word	0x08013a3c
 8011ab8:	08013a5c 	.word	0x08013a5c
 8011abc:	08013a1c 	.word	0x08013a1c
 8011ac0:	08013da4 	.word	0x08013da4
 8011ac4:	08013daa 	.word	0x08013daa
 8011ac8:	08013dae 	.word	0x08013dae
 8011acc:	0800ef3d 	.word	0x0800ef3d
 8011ad0:	0801183b 	.word	0x0801183b

08011ad4 <__ascii_wctomb>:
 8011ad4:	0003      	movs	r3, r0
 8011ad6:	1e08      	subs	r0, r1, #0
 8011ad8:	d005      	beq.n	8011ae6 <__ascii_wctomb+0x12>
 8011ada:	2aff      	cmp	r2, #255	; 0xff
 8011adc:	d904      	bls.n	8011ae8 <__ascii_wctomb+0x14>
 8011ade:	228a      	movs	r2, #138	; 0x8a
 8011ae0:	2001      	movs	r0, #1
 8011ae2:	601a      	str	r2, [r3, #0]
 8011ae4:	4240      	negs	r0, r0
 8011ae6:	4770      	bx	lr
 8011ae8:	2001      	movs	r0, #1
 8011aea:	700a      	strb	r2, [r1, #0]
 8011aec:	e7fb      	b.n	8011ae6 <__ascii_wctomb+0x12>

08011aee <abort>:
 8011aee:	2006      	movs	r0, #6
 8011af0:	b510      	push	{r4, lr}
 8011af2:	f000 f859 	bl	8011ba8 <raise>
 8011af6:	2001      	movs	r0, #1
 8011af8:	f7f2 fd9a 	bl	8004630 <_exit>

08011afc <_fstat_r>:
 8011afc:	2300      	movs	r3, #0
 8011afe:	b570      	push	{r4, r5, r6, lr}
 8011b00:	4d06      	ldr	r5, [pc, #24]	; (8011b1c <_fstat_r+0x20>)
 8011b02:	0004      	movs	r4, r0
 8011b04:	0008      	movs	r0, r1
 8011b06:	0011      	movs	r1, r2
 8011b08:	602b      	str	r3, [r5, #0]
 8011b0a:	f7f2 fde0 	bl	80046ce <_fstat>
 8011b0e:	1c43      	adds	r3, r0, #1
 8011b10:	d103      	bne.n	8011b1a <_fstat_r+0x1e>
 8011b12:	682b      	ldr	r3, [r5, #0]
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d000      	beq.n	8011b1a <_fstat_r+0x1e>
 8011b18:	6023      	str	r3, [r4, #0]
 8011b1a:	bd70      	pop	{r4, r5, r6, pc}
 8011b1c:	200021bc 	.word	0x200021bc

08011b20 <_isatty_r>:
 8011b20:	2300      	movs	r3, #0
 8011b22:	b570      	push	{r4, r5, r6, lr}
 8011b24:	4d06      	ldr	r5, [pc, #24]	; (8011b40 <_isatty_r+0x20>)
 8011b26:	0004      	movs	r4, r0
 8011b28:	0008      	movs	r0, r1
 8011b2a:	602b      	str	r3, [r5, #0]
 8011b2c:	f7f2 fddd 	bl	80046ea <_isatty>
 8011b30:	1c43      	adds	r3, r0, #1
 8011b32:	d103      	bne.n	8011b3c <_isatty_r+0x1c>
 8011b34:	682b      	ldr	r3, [r5, #0]
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d000      	beq.n	8011b3c <_isatty_r+0x1c>
 8011b3a:	6023      	str	r3, [r4, #0]
 8011b3c:	bd70      	pop	{r4, r5, r6, pc}
 8011b3e:	46c0      	nop			; (mov r8, r8)
 8011b40:	200021bc 	.word	0x200021bc

08011b44 <_malloc_usable_size_r>:
 8011b44:	1f0b      	subs	r3, r1, #4
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	1f18      	subs	r0, r3, #4
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	da01      	bge.n	8011b52 <_malloc_usable_size_r+0xe>
 8011b4e:	580b      	ldr	r3, [r1, r0]
 8011b50:	18c0      	adds	r0, r0, r3
 8011b52:	4770      	bx	lr

08011b54 <_raise_r>:
 8011b54:	b570      	push	{r4, r5, r6, lr}
 8011b56:	0004      	movs	r4, r0
 8011b58:	000d      	movs	r5, r1
 8011b5a:	291f      	cmp	r1, #31
 8011b5c:	d904      	bls.n	8011b68 <_raise_r+0x14>
 8011b5e:	2316      	movs	r3, #22
 8011b60:	6003      	str	r3, [r0, #0]
 8011b62:	2001      	movs	r0, #1
 8011b64:	4240      	negs	r0, r0
 8011b66:	bd70      	pop	{r4, r5, r6, pc}
 8011b68:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d004      	beq.n	8011b78 <_raise_r+0x24>
 8011b6e:	008a      	lsls	r2, r1, #2
 8011b70:	189b      	adds	r3, r3, r2
 8011b72:	681a      	ldr	r2, [r3, #0]
 8011b74:	2a00      	cmp	r2, #0
 8011b76:	d108      	bne.n	8011b8a <_raise_r+0x36>
 8011b78:	0020      	movs	r0, r4
 8011b7a:	f000 f831 	bl	8011be0 <_getpid_r>
 8011b7e:	002a      	movs	r2, r5
 8011b80:	0001      	movs	r1, r0
 8011b82:	0020      	movs	r0, r4
 8011b84:	f000 f81a 	bl	8011bbc <_kill_r>
 8011b88:	e7ed      	b.n	8011b66 <_raise_r+0x12>
 8011b8a:	2000      	movs	r0, #0
 8011b8c:	2a01      	cmp	r2, #1
 8011b8e:	d0ea      	beq.n	8011b66 <_raise_r+0x12>
 8011b90:	1c51      	adds	r1, r2, #1
 8011b92:	d103      	bne.n	8011b9c <_raise_r+0x48>
 8011b94:	2316      	movs	r3, #22
 8011b96:	3001      	adds	r0, #1
 8011b98:	6023      	str	r3, [r4, #0]
 8011b9a:	e7e4      	b.n	8011b66 <_raise_r+0x12>
 8011b9c:	2400      	movs	r4, #0
 8011b9e:	0028      	movs	r0, r5
 8011ba0:	601c      	str	r4, [r3, #0]
 8011ba2:	4790      	blx	r2
 8011ba4:	0020      	movs	r0, r4
 8011ba6:	e7de      	b.n	8011b66 <_raise_r+0x12>

08011ba8 <raise>:
 8011ba8:	b510      	push	{r4, lr}
 8011baa:	4b03      	ldr	r3, [pc, #12]	; (8011bb8 <raise+0x10>)
 8011bac:	0001      	movs	r1, r0
 8011bae:	6818      	ldr	r0, [r3, #0]
 8011bb0:	f7ff ffd0 	bl	8011b54 <_raise_r>
 8011bb4:	bd10      	pop	{r4, pc}
 8011bb6:	46c0      	nop			; (mov r8, r8)
 8011bb8:	2000009c 	.word	0x2000009c

08011bbc <_kill_r>:
 8011bbc:	2300      	movs	r3, #0
 8011bbe:	b570      	push	{r4, r5, r6, lr}
 8011bc0:	4d06      	ldr	r5, [pc, #24]	; (8011bdc <_kill_r+0x20>)
 8011bc2:	0004      	movs	r4, r0
 8011bc4:	0008      	movs	r0, r1
 8011bc6:	0011      	movs	r1, r2
 8011bc8:	602b      	str	r3, [r5, #0]
 8011bca:	f7f2 fd21 	bl	8004610 <_kill>
 8011bce:	1c43      	adds	r3, r0, #1
 8011bd0:	d103      	bne.n	8011bda <_kill_r+0x1e>
 8011bd2:	682b      	ldr	r3, [r5, #0]
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d000      	beq.n	8011bda <_kill_r+0x1e>
 8011bd8:	6023      	str	r3, [r4, #0]
 8011bda:	bd70      	pop	{r4, r5, r6, pc}
 8011bdc:	200021bc 	.word	0x200021bc

08011be0 <_getpid_r>:
 8011be0:	b510      	push	{r4, lr}
 8011be2:	f7f2 fd0f 	bl	8004604 <_getpid>
 8011be6:	bd10      	pop	{r4, pc}

08011be8 <cos>:
 8011be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011bea:	4a1e      	ldr	r2, [pc, #120]	; (8011c64 <cos+0x7c>)
 8011bec:	004b      	lsls	r3, r1, #1
 8011bee:	b087      	sub	sp, #28
 8011bf0:	085b      	lsrs	r3, r3, #1
 8011bf2:	4293      	cmp	r3, r2
 8011bf4:	dc04      	bgt.n	8011c00 <cos+0x18>
 8011bf6:	2200      	movs	r2, #0
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	f000 fa6d 	bl	80120d8 <__kernel_cos>
 8011bfe:	e006      	b.n	8011c0e <cos+0x26>
 8011c00:	4a19      	ldr	r2, [pc, #100]	; (8011c68 <cos+0x80>)
 8011c02:	4293      	cmp	r3, r2
 8011c04:	dd05      	ble.n	8011c12 <cos+0x2a>
 8011c06:	0002      	movs	r2, r0
 8011c08:	000b      	movs	r3, r1
 8011c0a:	f7f0 fa69 	bl	80020e0 <__aeabi_dsub>
 8011c0e:	b007      	add	sp, #28
 8011c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c12:	aa02      	add	r2, sp, #8
 8011c14:	f000 f870 	bl	8011cf8 <__ieee754_rem_pio2>
 8011c18:	9c04      	ldr	r4, [sp, #16]
 8011c1a:	9d05      	ldr	r5, [sp, #20]
 8011c1c:	2303      	movs	r3, #3
 8011c1e:	4003      	ands	r3, r0
 8011c20:	2b01      	cmp	r3, #1
 8011c22:	d008      	beq.n	8011c36 <cos+0x4e>
 8011c24:	9802      	ldr	r0, [sp, #8]
 8011c26:	9903      	ldr	r1, [sp, #12]
 8011c28:	2b02      	cmp	r3, #2
 8011c2a:	d00f      	beq.n	8011c4c <cos+0x64>
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d112      	bne.n	8011c56 <cos+0x6e>
 8011c30:	0022      	movs	r2, r4
 8011c32:	002b      	movs	r3, r5
 8011c34:	e7e1      	b.n	8011bfa <cos+0x12>
 8011c36:	9300      	str	r3, [sp, #0]
 8011c38:	0022      	movs	r2, r4
 8011c3a:	9802      	ldr	r0, [sp, #8]
 8011c3c:	9903      	ldr	r1, [sp, #12]
 8011c3e:	002b      	movs	r3, r5
 8011c40:	f000 fe74 	bl	801292c <__kernel_sin>
 8011c44:	2380      	movs	r3, #128	; 0x80
 8011c46:	061b      	lsls	r3, r3, #24
 8011c48:	18c9      	adds	r1, r1, r3
 8011c4a:	e7e0      	b.n	8011c0e <cos+0x26>
 8011c4c:	0022      	movs	r2, r4
 8011c4e:	002b      	movs	r3, r5
 8011c50:	f000 fa42 	bl	80120d8 <__kernel_cos>
 8011c54:	e7f6      	b.n	8011c44 <cos+0x5c>
 8011c56:	2301      	movs	r3, #1
 8011c58:	0022      	movs	r2, r4
 8011c5a:	9300      	str	r3, [sp, #0]
 8011c5c:	002b      	movs	r3, r5
 8011c5e:	f000 fe65 	bl	801292c <__kernel_sin>
 8011c62:	e7d4      	b.n	8011c0e <cos+0x26>
 8011c64:	3fe921fb 	.word	0x3fe921fb
 8011c68:	7fefffff 	.word	0x7fefffff

08011c6c <sin>:
 8011c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c6e:	4a20      	ldr	r2, [pc, #128]	; (8011cf0 <sin+0x84>)
 8011c70:	004b      	lsls	r3, r1, #1
 8011c72:	b087      	sub	sp, #28
 8011c74:	085b      	lsrs	r3, r3, #1
 8011c76:	4293      	cmp	r3, r2
 8011c78:	dc06      	bgt.n	8011c88 <sin+0x1c>
 8011c7a:	2300      	movs	r3, #0
 8011c7c:	2200      	movs	r2, #0
 8011c7e:	9300      	str	r3, [sp, #0]
 8011c80:	2300      	movs	r3, #0
 8011c82:	f000 fe53 	bl	801292c <__kernel_sin>
 8011c86:	e006      	b.n	8011c96 <sin+0x2a>
 8011c88:	4a1a      	ldr	r2, [pc, #104]	; (8011cf4 <sin+0x88>)
 8011c8a:	4293      	cmp	r3, r2
 8011c8c:	dd05      	ble.n	8011c9a <sin+0x2e>
 8011c8e:	0002      	movs	r2, r0
 8011c90:	000b      	movs	r3, r1
 8011c92:	f7f0 fa25 	bl	80020e0 <__aeabi_dsub>
 8011c96:	b007      	add	sp, #28
 8011c98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c9a:	aa02      	add	r2, sp, #8
 8011c9c:	f000 f82c 	bl	8011cf8 <__ieee754_rem_pio2>
 8011ca0:	9c04      	ldr	r4, [sp, #16]
 8011ca2:	9d05      	ldr	r5, [sp, #20]
 8011ca4:	2303      	movs	r3, #3
 8011ca6:	4003      	ands	r3, r0
 8011ca8:	2b01      	cmp	r3, #1
 8011caa:	d00a      	beq.n	8011cc2 <sin+0x56>
 8011cac:	9802      	ldr	r0, [sp, #8]
 8011cae:	9903      	ldr	r1, [sp, #12]
 8011cb0:	2b02      	cmp	r3, #2
 8011cb2:	d00d      	beq.n	8011cd0 <sin+0x64>
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d115      	bne.n	8011ce4 <sin+0x78>
 8011cb8:	3301      	adds	r3, #1
 8011cba:	9300      	str	r3, [sp, #0]
 8011cbc:	0022      	movs	r2, r4
 8011cbe:	002b      	movs	r3, r5
 8011cc0:	e7df      	b.n	8011c82 <sin+0x16>
 8011cc2:	0022      	movs	r2, r4
 8011cc4:	9802      	ldr	r0, [sp, #8]
 8011cc6:	9903      	ldr	r1, [sp, #12]
 8011cc8:	002b      	movs	r3, r5
 8011cca:	f000 fa05 	bl	80120d8 <__kernel_cos>
 8011cce:	e7e2      	b.n	8011c96 <sin+0x2a>
 8011cd0:	2301      	movs	r3, #1
 8011cd2:	0022      	movs	r2, r4
 8011cd4:	9300      	str	r3, [sp, #0]
 8011cd6:	002b      	movs	r3, r5
 8011cd8:	f000 fe28 	bl	801292c <__kernel_sin>
 8011cdc:	2380      	movs	r3, #128	; 0x80
 8011cde:	061b      	lsls	r3, r3, #24
 8011ce0:	18c9      	adds	r1, r1, r3
 8011ce2:	e7d8      	b.n	8011c96 <sin+0x2a>
 8011ce4:	0022      	movs	r2, r4
 8011ce6:	002b      	movs	r3, r5
 8011ce8:	f000 f9f6 	bl	80120d8 <__kernel_cos>
 8011cec:	e7f6      	b.n	8011cdc <sin+0x70>
 8011cee:	46c0      	nop			; (mov r8, r8)
 8011cf0:	3fe921fb 	.word	0x3fe921fb
 8011cf4:	7fefffff 	.word	0x7fefffff

08011cf8 <__ieee754_rem_pio2>:
 8011cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011cfa:	004b      	lsls	r3, r1, #1
 8011cfc:	b091      	sub	sp, #68	; 0x44
 8011cfe:	085b      	lsrs	r3, r3, #1
 8011d00:	9302      	str	r3, [sp, #8]
 8011d02:	0017      	movs	r7, r2
 8011d04:	4bb6      	ldr	r3, [pc, #728]	; (8011fe0 <__ieee754_rem_pio2+0x2e8>)
 8011d06:	9a02      	ldr	r2, [sp, #8]
 8011d08:	0004      	movs	r4, r0
 8011d0a:	000d      	movs	r5, r1
 8011d0c:	9109      	str	r1, [sp, #36]	; 0x24
 8011d0e:	429a      	cmp	r2, r3
 8011d10:	dc09      	bgt.n	8011d26 <__ieee754_rem_pio2+0x2e>
 8011d12:	0002      	movs	r2, r0
 8011d14:	000b      	movs	r3, r1
 8011d16:	603a      	str	r2, [r7, #0]
 8011d18:	607b      	str	r3, [r7, #4]
 8011d1a:	2200      	movs	r2, #0
 8011d1c:	2300      	movs	r3, #0
 8011d1e:	60ba      	str	r2, [r7, #8]
 8011d20:	60fb      	str	r3, [r7, #12]
 8011d22:	2600      	movs	r6, #0
 8011d24:	e025      	b.n	8011d72 <__ieee754_rem_pio2+0x7a>
 8011d26:	4baf      	ldr	r3, [pc, #700]	; (8011fe4 <__ieee754_rem_pio2+0x2ec>)
 8011d28:	9a02      	ldr	r2, [sp, #8]
 8011d2a:	429a      	cmp	r2, r3
 8011d2c:	dd00      	ble.n	8011d30 <__ieee754_rem_pio2+0x38>
 8011d2e:	e06e      	b.n	8011e0e <__ieee754_rem_pio2+0x116>
 8011d30:	4ead      	ldr	r6, [pc, #692]	; (8011fe8 <__ieee754_rem_pio2+0x2f0>)
 8011d32:	4aae      	ldr	r2, [pc, #696]	; (8011fec <__ieee754_rem_pio2+0x2f4>)
 8011d34:	2d00      	cmp	r5, #0
 8011d36:	dd35      	ble.n	8011da4 <__ieee754_rem_pio2+0xac>
 8011d38:	0020      	movs	r0, r4
 8011d3a:	0029      	movs	r1, r5
 8011d3c:	4baa      	ldr	r3, [pc, #680]	; (8011fe8 <__ieee754_rem_pio2+0x2f0>)
 8011d3e:	f7f0 f9cf 	bl	80020e0 <__aeabi_dsub>
 8011d42:	9b02      	ldr	r3, [sp, #8]
 8011d44:	0004      	movs	r4, r0
 8011d46:	000d      	movs	r5, r1
 8011d48:	42b3      	cmp	r3, r6
 8011d4a:	d015      	beq.n	8011d78 <__ieee754_rem_pio2+0x80>
 8011d4c:	4aa8      	ldr	r2, [pc, #672]	; (8011ff0 <__ieee754_rem_pio2+0x2f8>)
 8011d4e:	4ba9      	ldr	r3, [pc, #676]	; (8011ff4 <__ieee754_rem_pio2+0x2fc>)
 8011d50:	f7f0 f9c6 	bl	80020e0 <__aeabi_dsub>
 8011d54:	0002      	movs	r2, r0
 8011d56:	000b      	movs	r3, r1
 8011d58:	0020      	movs	r0, r4
 8011d5a:	603a      	str	r2, [r7, #0]
 8011d5c:	607b      	str	r3, [r7, #4]
 8011d5e:	0029      	movs	r1, r5
 8011d60:	f7f0 f9be 	bl	80020e0 <__aeabi_dsub>
 8011d64:	4aa2      	ldr	r2, [pc, #648]	; (8011ff0 <__ieee754_rem_pio2+0x2f8>)
 8011d66:	4ba3      	ldr	r3, [pc, #652]	; (8011ff4 <__ieee754_rem_pio2+0x2fc>)
 8011d68:	f7f0 f9ba 	bl	80020e0 <__aeabi_dsub>
 8011d6c:	2601      	movs	r6, #1
 8011d6e:	60b8      	str	r0, [r7, #8]
 8011d70:	60f9      	str	r1, [r7, #12]
 8011d72:	0030      	movs	r0, r6
 8011d74:	b011      	add	sp, #68	; 0x44
 8011d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d78:	22d3      	movs	r2, #211	; 0xd3
 8011d7a:	4b9e      	ldr	r3, [pc, #632]	; (8011ff4 <__ieee754_rem_pio2+0x2fc>)
 8011d7c:	0552      	lsls	r2, r2, #21
 8011d7e:	f7f0 f9af 	bl	80020e0 <__aeabi_dsub>
 8011d82:	4a9d      	ldr	r2, [pc, #628]	; (8011ff8 <__ieee754_rem_pio2+0x300>)
 8011d84:	4b9d      	ldr	r3, [pc, #628]	; (8011ffc <__ieee754_rem_pio2+0x304>)
 8011d86:	0004      	movs	r4, r0
 8011d88:	000d      	movs	r5, r1
 8011d8a:	f7f0 f9a9 	bl	80020e0 <__aeabi_dsub>
 8011d8e:	0002      	movs	r2, r0
 8011d90:	000b      	movs	r3, r1
 8011d92:	0020      	movs	r0, r4
 8011d94:	603a      	str	r2, [r7, #0]
 8011d96:	607b      	str	r3, [r7, #4]
 8011d98:	0029      	movs	r1, r5
 8011d9a:	f7f0 f9a1 	bl	80020e0 <__aeabi_dsub>
 8011d9e:	4a96      	ldr	r2, [pc, #600]	; (8011ff8 <__ieee754_rem_pio2+0x300>)
 8011da0:	4b96      	ldr	r3, [pc, #600]	; (8011ffc <__ieee754_rem_pio2+0x304>)
 8011da2:	e7e1      	b.n	8011d68 <__ieee754_rem_pio2+0x70>
 8011da4:	0020      	movs	r0, r4
 8011da6:	0029      	movs	r1, r5
 8011da8:	4b8f      	ldr	r3, [pc, #572]	; (8011fe8 <__ieee754_rem_pio2+0x2f0>)
 8011daa:	f7ee ffef 	bl	8000d8c <__aeabi_dadd>
 8011dae:	9b02      	ldr	r3, [sp, #8]
 8011db0:	0004      	movs	r4, r0
 8011db2:	000d      	movs	r5, r1
 8011db4:	42b3      	cmp	r3, r6
 8011db6:	d014      	beq.n	8011de2 <__ieee754_rem_pio2+0xea>
 8011db8:	4a8d      	ldr	r2, [pc, #564]	; (8011ff0 <__ieee754_rem_pio2+0x2f8>)
 8011dba:	4b8e      	ldr	r3, [pc, #568]	; (8011ff4 <__ieee754_rem_pio2+0x2fc>)
 8011dbc:	f7ee ffe6 	bl	8000d8c <__aeabi_dadd>
 8011dc0:	0002      	movs	r2, r0
 8011dc2:	000b      	movs	r3, r1
 8011dc4:	0020      	movs	r0, r4
 8011dc6:	603a      	str	r2, [r7, #0]
 8011dc8:	607b      	str	r3, [r7, #4]
 8011dca:	0029      	movs	r1, r5
 8011dcc:	f7f0 f988 	bl	80020e0 <__aeabi_dsub>
 8011dd0:	4a87      	ldr	r2, [pc, #540]	; (8011ff0 <__ieee754_rem_pio2+0x2f8>)
 8011dd2:	4b88      	ldr	r3, [pc, #544]	; (8011ff4 <__ieee754_rem_pio2+0x2fc>)
 8011dd4:	f7ee ffda 	bl	8000d8c <__aeabi_dadd>
 8011dd8:	2601      	movs	r6, #1
 8011dda:	60b8      	str	r0, [r7, #8]
 8011ddc:	60f9      	str	r1, [r7, #12]
 8011dde:	4276      	negs	r6, r6
 8011de0:	e7c7      	b.n	8011d72 <__ieee754_rem_pio2+0x7a>
 8011de2:	22d3      	movs	r2, #211	; 0xd3
 8011de4:	4b83      	ldr	r3, [pc, #524]	; (8011ff4 <__ieee754_rem_pio2+0x2fc>)
 8011de6:	0552      	lsls	r2, r2, #21
 8011de8:	f7ee ffd0 	bl	8000d8c <__aeabi_dadd>
 8011dec:	4a82      	ldr	r2, [pc, #520]	; (8011ff8 <__ieee754_rem_pio2+0x300>)
 8011dee:	4b83      	ldr	r3, [pc, #524]	; (8011ffc <__ieee754_rem_pio2+0x304>)
 8011df0:	0004      	movs	r4, r0
 8011df2:	000d      	movs	r5, r1
 8011df4:	f7ee ffca 	bl	8000d8c <__aeabi_dadd>
 8011df8:	0002      	movs	r2, r0
 8011dfa:	000b      	movs	r3, r1
 8011dfc:	0020      	movs	r0, r4
 8011dfe:	603a      	str	r2, [r7, #0]
 8011e00:	607b      	str	r3, [r7, #4]
 8011e02:	0029      	movs	r1, r5
 8011e04:	f7f0 f96c 	bl	80020e0 <__aeabi_dsub>
 8011e08:	4a7b      	ldr	r2, [pc, #492]	; (8011ff8 <__ieee754_rem_pio2+0x300>)
 8011e0a:	4b7c      	ldr	r3, [pc, #496]	; (8011ffc <__ieee754_rem_pio2+0x304>)
 8011e0c:	e7e2      	b.n	8011dd4 <__ieee754_rem_pio2+0xdc>
 8011e0e:	4b7c      	ldr	r3, [pc, #496]	; (8012000 <__ieee754_rem_pio2+0x308>)
 8011e10:	9a02      	ldr	r2, [sp, #8]
 8011e12:	429a      	cmp	r2, r3
 8011e14:	dd00      	ble.n	8011e18 <__ieee754_rem_pio2+0x120>
 8011e16:	e0d3      	b.n	8011fc0 <__ieee754_rem_pio2+0x2c8>
 8011e18:	0020      	movs	r0, r4
 8011e1a:	0029      	movs	r1, r5
 8011e1c:	f000 fe32 	bl	8012a84 <fabs>
 8011e20:	4a78      	ldr	r2, [pc, #480]	; (8012004 <__ieee754_rem_pio2+0x30c>)
 8011e22:	4b79      	ldr	r3, [pc, #484]	; (8012008 <__ieee754_rem_pio2+0x310>)
 8011e24:	0004      	movs	r4, r0
 8011e26:	000d      	movs	r5, r1
 8011e28:	f7ef feee 	bl	8001c08 <__aeabi_dmul>
 8011e2c:	2200      	movs	r2, #0
 8011e2e:	4b77      	ldr	r3, [pc, #476]	; (801200c <__ieee754_rem_pio2+0x314>)
 8011e30:	f7ee ffac 	bl	8000d8c <__aeabi_dadd>
 8011e34:	f7f0 fd04 	bl	8002840 <__aeabi_d2iz>
 8011e38:	0006      	movs	r6, r0
 8011e3a:	f7f0 fd37 	bl	80028ac <__aeabi_i2d>
 8011e3e:	4a6b      	ldr	r2, [pc, #428]	; (8011fec <__ieee754_rem_pio2+0x2f4>)
 8011e40:	4b69      	ldr	r3, [pc, #420]	; (8011fe8 <__ieee754_rem_pio2+0x2f0>)
 8011e42:	9006      	str	r0, [sp, #24]
 8011e44:	9107      	str	r1, [sp, #28]
 8011e46:	f7ef fedf 	bl	8001c08 <__aeabi_dmul>
 8011e4a:	0002      	movs	r2, r0
 8011e4c:	000b      	movs	r3, r1
 8011e4e:	0020      	movs	r0, r4
 8011e50:	0029      	movs	r1, r5
 8011e52:	f7f0 f945 	bl	80020e0 <__aeabi_dsub>
 8011e56:	4a66      	ldr	r2, [pc, #408]	; (8011ff0 <__ieee754_rem_pio2+0x2f8>)
 8011e58:	9004      	str	r0, [sp, #16]
 8011e5a:	9105      	str	r1, [sp, #20]
 8011e5c:	9806      	ldr	r0, [sp, #24]
 8011e5e:	9907      	ldr	r1, [sp, #28]
 8011e60:	4b64      	ldr	r3, [pc, #400]	; (8011ff4 <__ieee754_rem_pio2+0x2fc>)
 8011e62:	f7ef fed1 	bl	8001c08 <__aeabi_dmul>
 8011e66:	0004      	movs	r4, r0
 8011e68:	000d      	movs	r5, r1
 8011e6a:	2e1f      	cmp	r6, #31
 8011e6c:	dc0f      	bgt.n	8011e8e <__ieee754_rem_pio2+0x196>
 8011e6e:	4a68      	ldr	r2, [pc, #416]	; (8012010 <__ieee754_rem_pio2+0x318>)
 8011e70:	1e73      	subs	r3, r6, #1
 8011e72:	009b      	lsls	r3, r3, #2
 8011e74:	589b      	ldr	r3, [r3, r2]
 8011e76:	9a02      	ldr	r2, [sp, #8]
 8011e78:	4293      	cmp	r3, r2
 8011e7a:	d008      	beq.n	8011e8e <__ieee754_rem_pio2+0x196>
 8011e7c:	9804      	ldr	r0, [sp, #16]
 8011e7e:	9905      	ldr	r1, [sp, #20]
 8011e80:	0022      	movs	r2, r4
 8011e82:	002b      	movs	r3, r5
 8011e84:	f7f0 f92c 	bl	80020e0 <__aeabi_dsub>
 8011e88:	6038      	str	r0, [r7, #0]
 8011e8a:	6079      	str	r1, [r7, #4]
 8011e8c:	e012      	b.n	8011eb4 <__ieee754_rem_pio2+0x1bc>
 8011e8e:	0022      	movs	r2, r4
 8011e90:	9804      	ldr	r0, [sp, #16]
 8011e92:	9905      	ldr	r1, [sp, #20]
 8011e94:	002b      	movs	r3, r5
 8011e96:	f7f0 f923 	bl	80020e0 <__aeabi_dsub>
 8011e9a:	9b02      	ldr	r3, [sp, #8]
 8011e9c:	151b      	asrs	r3, r3, #20
 8011e9e:	9308      	str	r3, [sp, #32]
 8011ea0:	9a08      	ldr	r2, [sp, #32]
 8011ea2:	004b      	lsls	r3, r1, #1
 8011ea4:	0d5b      	lsrs	r3, r3, #21
 8011ea6:	1ad3      	subs	r3, r2, r3
 8011ea8:	2b10      	cmp	r3, #16
 8011eaa:	dc21      	bgt.n	8011ef0 <__ieee754_rem_pio2+0x1f8>
 8011eac:	0002      	movs	r2, r0
 8011eae:	000b      	movs	r3, r1
 8011eb0:	603a      	str	r2, [r7, #0]
 8011eb2:	607b      	str	r3, [r7, #4]
 8011eb4:	9804      	ldr	r0, [sp, #16]
 8011eb6:	9905      	ldr	r1, [sp, #20]
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	683a      	ldr	r2, [r7, #0]
 8011ebc:	9302      	str	r3, [sp, #8]
 8011ebe:	9b02      	ldr	r3, [sp, #8]
 8011ec0:	f7f0 f90e 	bl	80020e0 <__aeabi_dsub>
 8011ec4:	0022      	movs	r2, r4
 8011ec6:	002b      	movs	r3, r5
 8011ec8:	f7f0 f90a 	bl	80020e0 <__aeabi_dsub>
 8011ecc:	000b      	movs	r3, r1
 8011ece:	0002      	movs	r2, r0
 8011ed0:	60ba      	str	r2, [r7, #8]
 8011ed2:	60fb      	str	r3, [r7, #12]
 8011ed4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	db00      	blt.n	8011edc <__ieee754_rem_pio2+0x1e4>
 8011eda:	e74a      	b.n	8011d72 <__ieee754_rem_pio2+0x7a>
 8011edc:	2380      	movs	r3, #128	; 0x80
 8011ede:	061b      	lsls	r3, r3, #24
 8011ee0:	469c      	mov	ip, r3
 8011ee2:	9c02      	ldr	r4, [sp, #8]
 8011ee4:	18c9      	adds	r1, r1, r3
 8011ee6:	4464      	add	r4, ip
 8011ee8:	607c      	str	r4, [r7, #4]
 8011eea:	60b8      	str	r0, [r7, #8]
 8011eec:	60f9      	str	r1, [r7, #12]
 8011eee:	e776      	b.n	8011dde <__ieee754_rem_pio2+0xe6>
 8011ef0:	22d3      	movs	r2, #211	; 0xd3
 8011ef2:	9806      	ldr	r0, [sp, #24]
 8011ef4:	9907      	ldr	r1, [sp, #28]
 8011ef6:	4b3f      	ldr	r3, [pc, #252]	; (8011ff4 <__ieee754_rem_pio2+0x2fc>)
 8011ef8:	0552      	lsls	r2, r2, #21
 8011efa:	f7ef fe85 	bl	8001c08 <__aeabi_dmul>
 8011efe:	0004      	movs	r4, r0
 8011f00:	000d      	movs	r5, r1
 8011f02:	0002      	movs	r2, r0
 8011f04:	000b      	movs	r3, r1
 8011f06:	9804      	ldr	r0, [sp, #16]
 8011f08:	9905      	ldr	r1, [sp, #20]
 8011f0a:	f7f0 f8e9 	bl	80020e0 <__aeabi_dsub>
 8011f0e:	0002      	movs	r2, r0
 8011f10:	000b      	movs	r3, r1
 8011f12:	9002      	str	r0, [sp, #8]
 8011f14:	9103      	str	r1, [sp, #12]
 8011f16:	9804      	ldr	r0, [sp, #16]
 8011f18:	9905      	ldr	r1, [sp, #20]
 8011f1a:	f7f0 f8e1 	bl	80020e0 <__aeabi_dsub>
 8011f1e:	0022      	movs	r2, r4
 8011f20:	002b      	movs	r3, r5
 8011f22:	f7f0 f8dd 	bl	80020e0 <__aeabi_dsub>
 8011f26:	0004      	movs	r4, r0
 8011f28:	000d      	movs	r5, r1
 8011f2a:	9806      	ldr	r0, [sp, #24]
 8011f2c:	9907      	ldr	r1, [sp, #28]
 8011f2e:	4a32      	ldr	r2, [pc, #200]	; (8011ff8 <__ieee754_rem_pio2+0x300>)
 8011f30:	4b32      	ldr	r3, [pc, #200]	; (8011ffc <__ieee754_rem_pio2+0x304>)
 8011f32:	f7ef fe69 	bl	8001c08 <__aeabi_dmul>
 8011f36:	0022      	movs	r2, r4
 8011f38:	002b      	movs	r3, r5
 8011f3a:	f7f0 f8d1 	bl	80020e0 <__aeabi_dsub>
 8011f3e:	0002      	movs	r2, r0
 8011f40:	000b      	movs	r3, r1
 8011f42:	0004      	movs	r4, r0
 8011f44:	000d      	movs	r5, r1
 8011f46:	9802      	ldr	r0, [sp, #8]
 8011f48:	9903      	ldr	r1, [sp, #12]
 8011f4a:	f7f0 f8c9 	bl	80020e0 <__aeabi_dsub>
 8011f4e:	9a08      	ldr	r2, [sp, #32]
 8011f50:	004b      	lsls	r3, r1, #1
 8011f52:	0d5b      	lsrs	r3, r3, #21
 8011f54:	1ad3      	subs	r3, r2, r3
 8011f56:	2b31      	cmp	r3, #49	; 0x31
 8011f58:	dc08      	bgt.n	8011f6c <__ieee754_rem_pio2+0x274>
 8011f5a:	0002      	movs	r2, r0
 8011f5c:	000b      	movs	r3, r1
 8011f5e:	603a      	str	r2, [r7, #0]
 8011f60:	607b      	str	r3, [r7, #4]
 8011f62:	9a02      	ldr	r2, [sp, #8]
 8011f64:	9b03      	ldr	r3, [sp, #12]
 8011f66:	9204      	str	r2, [sp, #16]
 8011f68:	9305      	str	r3, [sp, #20]
 8011f6a:	e7a3      	b.n	8011eb4 <__ieee754_rem_pio2+0x1bc>
 8011f6c:	22b8      	movs	r2, #184	; 0xb8
 8011f6e:	9806      	ldr	r0, [sp, #24]
 8011f70:	9907      	ldr	r1, [sp, #28]
 8011f72:	4b22      	ldr	r3, [pc, #136]	; (8011ffc <__ieee754_rem_pio2+0x304>)
 8011f74:	0592      	lsls	r2, r2, #22
 8011f76:	f7ef fe47 	bl	8001c08 <__aeabi_dmul>
 8011f7a:	0004      	movs	r4, r0
 8011f7c:	000d      	movs	r5, r1
 8011f7e:	0002      	movs	r2, r0
 8011f80:	000b      	movs	r3, r1
 8011f82:	9802      	ldr	r0, [sp, #8]
 8011f84:	9903      	ldr	r1, [sp, #12]
 8011f86:	f7f0 f8ab 	bl	80020e0 <__aeabi_dsub>
 8011f8a:	0002      	movs	r2, r0
 8011f8c:	000b      	movs	r3, r1
 8011f8e:	9004      	str	r0, [sp, #16]
 8011f90:	9105      	str	r1, [sp, #20]
 8011f92:	9802      	ldr	r0, [sp, #8]
 8011f94:	9903      	ldr	r1, [sp, #12]
 8011f96:	f7f0 f8a3 	bl	80020e0 <__aeabi_dsub>
 8011f9a:	0022      	movs	r2, r4
 8011f9c:	002b      	movs	r3, r5
 8011f9e:	f7f0 f89f 	bl	80020e0 <__aeabi_dsub>
 8011fa2:	0004      	movs	r4, r0
 8011fa4:	000d      	movs	r5, r1
 8011fa6:	9806      	ldr	r0, [sp, #24]
 8011fa8:	9907      	ldr	r1, [sp, #28]
 8011faa:	4a1a      	ldr	r2, [pc, #104]	; (8012014 <__ieee754_rem_pio2+0x31c>)
 8011fac:	4b1a      	ldr	r3, [pc, #104]	; (8012018 <__ieee754_rem_pio2+0x320>)
 8011fae:	f7ef fe2b 	bl	8001c08 <__aeabi_dmul>
 8011fb2:	0022      	movs	r2, r4
 8011fb4:	002b      	movs	r3, r5
 8011fb6:	f7f0 f893 	bl	80020e0 <__aeabi_dsub>
 8011fba:	0004      	movs	r4, r0
 8011fbc:	000d      	movs	r5, r1
 8011fbe:	e75d      	b.n	8011e7c <__ieee754_rem_pio2+0x184>
 8011fc0:	4b16      	ldr	r3, [pc, #88]	; (801201c <__ieee754_rem_pio2+0x324>)
 8011fc2:	9a02      	ldr	r2, [sp, #8]
 8011fc4:	429a      	cmp	r2, r3
 8011fc6:	dd2b      	ble.n	8012020 <__ieee754_rem_pio2+0x328>
 8011fc8:	0022      	movs	r2, r4
 8011fca:	002b      	movs	r3, r5
 8011fcc:	0020      	movs	r0, r4
 8011fce:	0029      	movs	r1, r5
 8011fd0:	f7f0 f886 	bl	80020e0 <__aeabi_dsub>
 8011fd4:	60b8      	str	r0, [r7, #8]
 8011fd6:	60f9      	str	r1, [r7, #12]
 8011fd8:	6038      	str	r0, [r7, #0]
 8011fda:	6079      	str	r1, [r7, #4]
 8011fdc:	e6a1      	b.n	8011d22 <__ieee754_rem_pio2+0x2a>
 8011fde:	46c0      	nop			; (mov r8, r8)
 8011fe0:	3fe921fb 	.word	0x3fe921fb
 8011fe4:	4002d97b 	.word	0x4002d97b
 8011fe8:	3ff921fb 	.word	0x3ff921fb
 8011fec:	54400000 	.word	0x54400000
 8011ff0:	1a626331 	.word	0x1a626331
 8011ff4:	3dd0b461 	.word	0x3dd0b461
 8011ff8:	2e037073 	.word	0x2e037073
 8011ffc:	3ba3198a 	.word	0x3ba3198a
 8012000:	413921fb 	.word	0x413921fb
 8012004:	6dc9c883 	.word	0x6dc9c883
 8012008:	3fe45f30 	.word	0x3fe45f30
 801200c:	3fe00000 	.word	0x3fe00000
 8012010:	08013dfc 	.word	0x08013dfc
 8012014:	252049c1 	.word	0x252049c1
 8012018:	397b839a 	.word	0x397b839a
 801201c:	7fefffff 	.word	0x7fefffff
 8012020:	9a02      	ldr	r2, [sp, #8]
 8012022:	0020      	movs	r0, r4
 8012024:	1516      	asrs	r6, r2, #20
 8012026:	4a29      	ldr	r2, [pc, #164]	; (80120cc <__ieee754_rem_pio2+0x3d4>)
 8012028:	18b6      	adds	r6, r6, r2
 801202a:	9a02      	ldr	r2, [sp, #8]
 801202c:	0533      	lsls	r3, r6, #20
 801202e:	1ad5      	subs	r5, r2, r3
 8012030:	0029      	movs	r1, r5
 8012032:	f7f0 fc05 	bl	8002840 <__aeabi_d2iz>
 8012036:	f7f0 fc39 	bl	80028ac <__aeabi_i2d>
 801203a:	0002      	movs	r2, r0
 801203c:	000b      	movs	r3, r1
 801203e:	0020      	movs	r0, r4
 8012040:	0029      	movs	r1, r5
 8012042:	920a      	str	r2, [sp, #40]	; 0x28
 8012044:	930b      	str	r3, [sp, #44]	; 0x2c
 8012046:	f7f0 f84b 	bl	80020e0 <__aeabi_dsub>
 801204a:	2200      	movs	r2, #0
 801204c:	4b20      	ldr	r3, [pc, #128]	; (80120d0 <__ieee754_rem_pio2+0x3d8>)
 801204e:	f7ef fddb 	bl	8001c08 <__aeabi_dmul>
 8012052:	000d      	movs	r5, r1
 8012054:	0004      	movs	r4, r0
 8012056:	f7f0 fbf3 	bl	8002840 <__aeabi_d2iz>
 801205a:	f7f0 fc27 	bl	80028ac <__aeabi_i2d>
 801205e:	0002      	movs	r2, r0
 8012060:	000b      	movs	r3, r1
 8012062:	0020      	movs	r0, r4
 8012064:	0029      	movs	r1, r5
 8012066:	920c      	str	r2, [sp, #48]	; 0x30
 8012068:	930d      	str	r3, [sp, #52]	; 0x34
 801206a:	f7f0 f839 	bl	80020e0 <__aeabi_dsub>
 801206e:	2200      	movs	r2, #0
 8012070:	4b17      	ldr	r3, [pc, #92]	; (80120d0 <__ieee754_rem_pio2+0x3d8>)
 8012072:	f7ef fdc9 	bl	8001c08 <__aeabi_dmul>
 8012076:	2503      	movs	r5, #3
 8012078:	900e      	str	r0, [sp, #56]	; 0x38
 801207a:	910f      	str	r1, [sp, #60]	; 0x3c
 801207c:	ac0a      	add	r4, sp, #40	; 0x28
 801207e:	2200      	movs	r2, #0
 8012080:	6920      	ldr	r0, [r4, #16]
 8012082:	6961      	ldr	r1, [r4, #20]
 8012084:	2300      	movs	r3, #0
 8012086:	9502      	str	r5, [sp, #8]
 8012088:	3c08      	subs	r4, #8
 801208a:	3d01      	subs	r5, #1
 801208c:	f7ee f9de 	bl	800044c <__aeabi_dcmpeq>
 8012090:	2800      	cmp	r0, #0
 8012092:	d1f4      	bne.n	801207e <__ieee754_rem_pio2+0x386>
 8012094:	4b0f      	ldr	r3, [pc, #60]	; (80120d4 <__ieee754_rem_pio2+0x3dc>)
 8012096:	0032      	movs	r2, r6
 8012098:	9301      	str	r3, [sp, #4]
 801209a:	2302      	movs	r3, #2
 801209c:	0039      	movs	r1, r7
 801209e:	9300      	str	r3, [sp, #0]
 80120a0:	a80a      	add	r0, sp, #40	; 0x28
 80120a2:	9b02      	ldr	r3, [sp, #8]
 80120a4:	f000 f8d8 	bl	8012258 <__kernel_rem_pio2>
 80120a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120aa:	0006      	movs	r6, r0
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	db00      	blt.n	80120b2 <__ieee754_rem_pio2+0x3ba>
 80120b0:	e65f      	b.n	8011d72 <__ieee754_rem_pio2+0x7a>
 80120b2:	2180      	movs	r1, #128	; 0x80
 80120b4:	6878      	ldr	r0, [r7, #4]
 80120b6:	683a      	ldr	r2, [r7, #0]
 80120b8:	0609      	lsls	r1, r1, #24
 80120ba:	1843      	adds	r3, r0, r1
 80120bc:	68f8      	ldr	r0, [r7, #12]
 80120be:	603a      	str	r2, [r7, #0]
 80120c0:	607b      	str	r3, [r7, #4]
 80120c2:	68ba      	ldr	r2, [r7, #8]
 80120c4:	1843      	adds	r3, r0, r1
 80120c6:	60ba      	str	r2, [r7, #8]
 80120c8:	60fb      	str	r3, [r7, #12]
 80120ca:	e688      	b.n	8011dde <__ieee754_rem_pio2+0xe6>
 80120cc:	fffffbea 	.word	0xfffffbea
 80120d0:	41700000 	.word	0x41700000
 80120d4:	08013e7c 	.word	0x08013e7c

080120d8 <__kernel_cos>:
 80120d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80120da:	b087      	sub	sp, #28
 80120dc:	9204      	str	r2, [sp, #16]
 80120de:	9305      	str	r3, [sp, #20]
 80120e0:	004b      	lsls	r3, r1, #1
 80120e2:	085b      	lsrs	r3, r3, #1
 80120e4:	9300      	str	r3, [sp, #0]
 80120e6:	23f9      	movs	r3, #249	; 0xf9
 80120e8:	9a00      	ldr	r2, [sp, #0]
 80120ea:	0007      	movs	r7, r0
 80120ec:	000e      	movs	r6, r1
 80120ee:	059b      	lsls	r3, r3, #22
 80120f0:	429a      	cmp	r2, r3
 80120f2:	da04      	bge.n	80120fe <__kernel_cos+0x26>
 80120f4:	f7f0 fba4 	bl	8002840 <__aeabi_d2iz>
 80120f8:	2800      	cmp	r0, #0
 80120fa:	d100      	bne.n	80120fe <__kernel_cos+0x26>
 80120fc:	e084      	b.n	8012208 <__kernel_cos+0x130>
 80120fe:	003a      	movs	r2, r7
 8012100:	0033      	movs	r3, r6
 8012102:	0038      	movs	r0, r7
 8012104:	0031      	movs	r1, r6
 8012106:	f7ef fd7f 	bl	8001c08 <__aeabi_dmul>
 801210a:	2200      	movs	r2, #0
 801210c:	4b40      	ldr	r3, [pc, #256]	; (8012210 <__kernel_cos+0x138>)
 801210e:	0004      	movs	r4, r0
 8012110:	000d      	movs	r5, r1
 8012112:	f7ef fd79 	bl	8001c08 <__aeabi_dmul>
 8012116:	4a3f      	ldr	r2, [pc, #252]	; (8012214 <__kernel_cos+0x13c>)
 8012118:	9002      	str	r0, [sp, #8]
 801211a:	9103      	str	r1, [sp, #12]
 801211c:	4b3e      	ldr	r3, [pc, #248]	; (8012218 <__kernel_cos+0x140>)
 801211e:	0020      	movs	r0, r4
 8012120:	0029      	movs	r1, r5
 8012122:	f7ef fd71 	bl	8001c08 <__aeabi_dmul>
 8012126:	4a3d      	ldr	r2, [pc, #244]	; (801221c <__kernel_cos+0x144>)
 8012128:	4b3d      	ldr	r3, [pc, #244]	; (8012220 <__kernel_cos+0x148>)
 801212a:	f7ee fe2f 	bl	8000d8c <__aeabi_dadd>
 801212e:	0022      	movs	r2, r4
 8012130:	002b      	movs	r3, r5
 8012132:	f7ef fd69 	bl	8001c08 <__aeabi_dmul>
 8012136:	4a3b      	ldr	r2, [pc, #236]	; (8012224 <__kernel_cos+0x14c>)
 8012138:	4b3b      	ldr	r3, [pc, #236]	; (8012228 <__kernel_cos+0x150>)
 801213a:	f7ef ffd1 	bl	80020e0 <__aeabi_dsub>
 801213e:	0022      	movs	r2, r4
 8012140:	002b      	movs	r3, r5
 8012142:	f7ef fd61 	bl	8001c08 <__aeabi_dmul>
 8012146:	4a39      	ldr	r2, [pc, #228]	; (801222c <__kernel_cos+0x154>)
 8012148:	4b39      	ldr	r3, [pc, #228]	; (8012230 <__kernel_cos+0x158>)
 801214a:	f7ee fe1f 	bl	8000d8c <__aeabi_dadd>
 801214e:	0022      	movs	r2, r4
 8012150:	002b      	movs	r3, r5
 8012152:	f7ef fd59 	bl	8001c08 <__aeabi_dmul>
 8012156:	4a37      	ldr	r2, [pc, #220]	; (8012234 <__kernel_cos+0x15c>)
 8012158:	4b37      	ldr	r3, [pc, #220]	; (8012238 <__kernel_cos+0x160>)
 801215a:	f7ef ffc1 	bl	80020e0 <__aeabi_dsub>
 801215e:	0022      	movs	r2, r4
 8012160:	002b      	movs	r3, r5
 8012162:	f7ef fd51 	bl	8001c08 <__aeabi_dmul>
 8012166:	4a35      	ldr	r2, [pc, #212]	; (801223c <__kernel_cos+0x164>)
 8012168:	4b35      	ldr	r3, [pc, #212]	; (8012240 <__kernel_cos+0x168>)
 801216a:	f7ee fe0f 	bl	8000d8c <__aeabi_dadd>
 801216e:	0022      	movs	r2, r4
 8012170:	002b      	movs	r3, r5
 8012172:	f7ef fd49 	bl	8001c08 <__aeabi_dmul>
 8012176:	0022      	movs	r2, r4
 8012178:	002b      	movs	r3, r5
 801217a:	f7ef fd45 	bl	8001c08 <__aeabi_dmul>
 801217e:	9a04      	ldr	r2, [sp, #16]
 8012180:	9b05      	ldr	r3, [sp, #20]
 8012182:	0004      	movs	r4, r0
 8012184:	000d      	movs	r5, r1
 8012186:	0038      	movs	r0, r7
 8012188:	0031      	movs	r1, r6
 801218a:	f7ef fd3d 	bl	8001c08 <__aeabi_dmul>
 801218e:	0002      	movs	r2, r0
 8012190:	000b      	movs	r3, r1
 8012192:	0020      	movs	r0, r4
 8012194:	0029      	movs	r1, r5
 8012196:	f7ef ffa3 	bl	80020e0 <__aeabi_dsub>
 801219a:	4b2a      	ldr	r3, [pc, #168]	; (8012244 <__kernel_cos+0x16c>)
 801219c:	9a00      	ldr	r2, [sp, #0]
 801219e:	0004      	movs	r4, r0
 80121a0:	000d      	movs	r5, r1
 80121a2:	429a      	cmp	r2, r3
 80121a4:	dc0d      	bgt.n	80121c2 <__kernel_cos+0xea>
 80121a6:	0002      	movs	r2, r0
 80121a8:	000b      	movs	r3, r1
 80121aa:	9802      	ldr	r0, [sp, #8]
 80121ac:	9903      	ldr	r1, [sp, #12]
 80121ae:	f7ef ff97 	bl	80020e0 <__aeabi_dsub>
 80121b2:	0002      	movs	r2, r0
 80121b4:	2000      	movs	r0, #0
 80121b6:	000b      	movs	r3, r1
 80121b8:	4923      	ldr	r1, [pc, #140]	; (8012248 <__kernel_cos+0x170>)
 80121ba:	f7ef ff91 	bl	80020e0 <__aeabi_dsub>
 80121be:	b007      	add	sp, #28
 80121c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80121c2:	4b22      	ldr	r3, [pc, #136]	; (801224c <__kernel_cos+0x174>)
 80121c4:	9a00      	ldr	r2, [sp, #0]
 80121c6:	2600      	movs	r6, #0
 80121c8:	429a      	cmp	r2, r3
 80121ca:	dc1b      	bgt.n	8012204 <__kernel_cos+0x12c>
 80121cc:	0013      	movs	r3, r2
 80121ce:	4a20      	ldr	r2, [pc, #128]	; (8012250 <__kernel_cos+0x178>)
 80121d0:	4694      	mov	ip, r2
 80121d2:	4463      	add	r3, ip
 80121d4:	001f      	movs	r7, r3
 80121d6:	0032      	movs	r2, r6
 80121d8:	003b      	movs	r3, r7
 80121da:	2000      	movs	r0, #0
 80121dc:	491a      	ldr	r1, [pc, #104]	; (8012248 <__kernel_cos+0x170>)
 80121de:	f7ef ff7f 	bl	80020e0 <__aeabi_dsub>
 80121e2:	0032      	movs	r2, r6
 80121e4:	003b      	movs	r3, r7
 80121e6:	9000      	str	r0, [sp, #0]
 80121e8:	9101      	str	r1, [sp, #4]
 80121ea:	9802      	ldr	r0, [sp, #8]
 80121ec:	9903      	ldr	r1, [sp, #12]
 80121ee:	f7ef ff77 	bl	80020e0 <__aeabi_dsub>
 80121f2:	0022      	movs	r2, r4
 80121f4:	002b      	movs	r3, r5
 80121f6:	f7ef ff73 	bl	80020e0 <__aeabi_dsub>
 80121fa:	0002      	movs	r2, r0
 80121fc:	000b      	movs	r3, r1
 80121fe:	9800      	ldr	r0, [sp, #0]
 8012200:	9901      	ldr	r1, [sp, #4]
 8012202:	e7da      	b.n	80121ba <__kernel_cos+0xe2>
 8012204:	4f13      	ldr	r7, [pc, #76]	; (8012254 <__kernel_cos+0x17c>)
 8012206:	e7e6      	b.n	80121d6 <__kernel_cos+0xfe>
 8012208:	2000      	movs	r0, #0
 801220a:	490f      	ldr	r1, [pc, #60]	; (8012248 <__kernel_cos+0x170>)
 801220c:	e7d7      	b.n	80121be <__kernel_cos+0xe6>
 801220e:	46c0      	nop			; (mov r8, r8)
 8012210:	3fe00000 	.word	0x3fe00000
 8012214:	be8838d4 	.word	0xbe8838d4
 8012218:	bda8fae9 	.word	0xbda8fae9
 801221c:	bdb4b1c4 	.word	0xbdb4b1c4
 8012220:	3e21ee9e 	.word	0x3e21ee9e
 8012224:	809c52ad 	.word	0x809c52ad
 8012228:	3e927e4f 	.word	0x3e927e4f
 801222c:	19cb1590 	.word	0x19cb1590
 8012230:	3efa01a0 	.word	0x3efa01a0
 8012234:	16c15177 	.word	0x16c15177
 8012238:	3f56c16c 	.word	0x3f56c16c
 801223c:	5555554c 	.word	0x5555554c
 8012240:	3fa55555 	.word	0x3fa55555
 8012244:	3fd33332 	.word	0x3fd33332
 8012248:	3ff00000 	.word	0x3ff00000
 801224c:	3fe90000 	.word	0x3fe90000
 8012250:	ffe00000 	.word	0xffe00000
 8012254:	3fd20000 	.word	0x3fd20000

08012258 <__kernel_rem_pio2>:
 8012258:	b5f0      	push	{r4, r5, r6, r7, lr}
 801225a:	4ccb      	ldr	r4, [pc, #812]	; (8012588 <__kernel_rem_pio2+0x330>)
 801225c:	44a5      	add	sp, r4
 801225e:	930d      	str	r3, [sp, #52]	; 0x34
 8012260:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8012262:	0014      	movs	r4, r2
 8012264:	009a      	lsls	r2, r3, #2
 8012266:	4bc9      	ldr	r3, [pc, #804]	; (801258c <__kernel_rem_pio2+0x334>)
 8012268:	900e      	str	r0, [sp, #56]	; 0x38
 801226a:	58d3      	ldr	r3, [r2, r3]
 801226c:	9107      	str	r1, [sp, #28]
 801226e:	930a      	str	r3, [sp, #40]	; 0x28
 8012270:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012272:	3b01      	subs	r3, #1
 8012274:	930c      	str	r3, [sp, #48]	; 0x30
 8012276:	2300      	movs	r3, #0
 8012278:	9300      	str	r3, [sp, #0]
 801227a:	0023      	movs	r3, r4
 801227c:	3314      	adds	r3, #20
 801227e:	db04      	blt.n	801228a <__kernel_rem_pio2+0x32>
 8012280:	2118      	movs	r1, #24
 8012282:	1ee0      	subs	r0, r4, #3
 8012284:	f7ed ffe6 	bl	8000254 <__divsi3>
 8012288:	9000      	str	r0, [sp, #0]
 801228a:	2218      	movs	r2, #24
 801228c:	9b00      	ldr	r3, [sp, #0]
 801228e:	4252      	negs	r2, r2
 8012290:	3301      	adds	r3, #1
 8012292:	435a      	muls	r2, r3
 8012294:	1913      	adds	r3, r2, r4
 8012296:	9302      	str	r3, [sp, #8]
 8012298:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801229a:	9b00      	ldr	r3, [sp, #0]
 801229c:	ae26      	add	r6, sp, #152	; 0x98
 801229e:	1a9d      	subs	r5, r3, r2
 80122a0:	002c      	movs	r4, r5
 80122a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80122a4:	189f      	adds	r7, r3, r2
 80122a6:	1b63      	subs	r3, r4, r5
 80122a8:	429f      	cmp	r7, r3
 80122aa:	da0f      	bge.n	80122cc <__kernel_rem_pio2+0x74>
 80122ac:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80122ae:	af76      	add	r7, sp, #472	; 0x1d8
 80122b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80122b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80122b4:	1af3      	subs	r3, r6, r3
 80122b6:	429a      	cmp	r2, r3
 80122b8:	db30      	blt.n	801231c <__kernel_rem_pio2+0xc4>
 80122ba:	ab26      	add	r3, sp, #152	; 0x98
 80122bc:	00f4      	lsls	r4, r6, #3
 80122be:	2200      	movs	r2, #0
 80122c0:	18e4      	adds	r4, r4, r3
 80122c2:	2300      	movs	r3, #0
 80122c4:	2500      	movs	r5, #0
 80122c6:	9204      	str	r2, [sp, #16]
 80122c8:	9305      	str	r3, [sp, #20]
 80122ca:	e01e      	b.n	801230a <__kernel_rem_pio2+0xb2>
 80122cc:	2c00      	cmp	r4, #0
 80122ce:	db07      	blt.n	80122e0 <__kernel_rem_pio2+0x88>
 80122d0:	9aa5      	ldr	r2, [sp, #660]	; 0x294
 80122d2:	00a3      	lsls	r3, r4, #2
 80122d4:	58d0      	ldr	r0, [r2, r3]
 80122d6:	f7f0 fae9 	bl	80028ac <__aeabi_i2d>
 80122da:	c603      	stmia	r6!, {r0, r1}
 80122dc:	3401      	adds	r4, #1
 80122de:	e7e2      	b.n	80122a6 <__kernel_rem_pio2+0x4e>
 80122e0:	2000      	movs	r0, #0
 80122e2:	2100      	movs	r1, #0
 80122e4:	e7f9      	b.n	80122da <__kernel_rem_pio2+0x82>
 80122e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80122e8:	00e9      	lsls	r1, r5, #3
 80122ea:	1859      	adds	r1, r3, r1
 80122ec:	6808      	ldr	r0, [r1, #0]
 80122ee:	6849      	ldr	r1, [r1, #4]
 80122f0:	6822      	ldr	r2, [r4, #0]
 80122f2:	6863      	ldr	r3, [r4, #4]
 80122f4:	f7ef fc88 	bl	8001c08 <__aeabi_dmul>
 80122f8:	0002      	movs	r2, r0
 80122fa:	000b      	movs	r3, r1
 80122fc:	9804      	ldr	r0, [sp, #16]
 80122fe:	9905      	ldr	r1, [sp, #20]
 8012300:	f7ee fd44 	bl	8000d8c <__aeabi_dadd>
 8012304:	9004      	str	r0, [sp, #16]
 8012306:	9105      	str	r1, [sp, #20]
 8012308:	3501      	adds	r5, #1
 801230a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801230c:	3c08      	subs	r4, #8
 801230e:	429d      	cmp	r5, r3
 8012310:	dde9      	ble.n	80122e6 <__kernel_rem_pio2+0x8e>
 8012312:	9b04      	ldr	r3, [sp, #16]
 8012314:	9c05      	ldr	r4, [sp, #20]
 8012316:	3601      	adds	r6, #1
 8012318:	c718      	stmia	r7!, {r3, r4}
 801231a:	e7c9      	b.n	80122b0 <__kernel_rem_pio2+0x58>
 801231c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801231e:	aa12      	add	r2, sp, #72	; 0x48
 8012320:	009b      	lsls	r3, r3, #2
 8012322:	189b      	adds	r3, r3, r2
 8012324:	9310      	str	r3, [sp, #64]	; 0x40
 8012326:	9b00      	ldr	r3, [sp, #0]
 8012328:	0098      	lsls	r0, r3, #2
 801232a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801232c:	181b      	adds	r3, r3, r0
 801232e:	930f      	str	r3, [sp, #60]	; 0x3c
 8012330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012332:	9304      	str	r3, [sp, #16]
 8012334:	9b04      	ldr	r3, [sp, #16]
 8012336:	aa76      	add	r2, sp, #472	; 0x1d8
 8012338:	00db      	lsls	r3, r3, #3
 801233a:	18d3      	adds	r3, r2, r3
 801233c:	681c      	ldr	r4, [r3, #0]
 801233e:	685d      	ldr	r5, [r3, #4]
 8012340:	ab12      	add	r3, sp, #72	; 0x48
 8012342:	9300      	str	r3, [sp, #0]
 8012344:	9309      	str	r3, [sp, #36]	; 0x24
 8012346:	9b04      	ldr	r3, [sp, #16]
 8012348:	9211      	str	r2, [sp, #68]	; 0x44
 801234a:	9308      	str	r3, [sp, #32]
 801234c:	9b08      	ldr	r3, [sp, #32]
 801234e:	2b00      	cmp	r3, #0
 8012350:	dc74      	bgt.n	801243c <__kernel_rem_pio2+0x1e4>
 8012352:	0020      	movs	r0, r4
 8012354:	0029      	movs	r1, r5
 8012356:	9a02      	ldr	r2, [sp, #8]
 8012358:	f000 fc22 	bl	8012ba0 <scalbn>
 801235c:	23ff      	movs	r3, #255	; 0xff
 801235e:	2200      	movs	r2, #0
 8012360:	059b      	lsls	r3, r3, #22
 8012362:	0004      	movs	r4, r0
 8012364:	000d      	movs	r5, r1
 8012366:	f7ef fc4f 	bl	8001c08 <__aeabi_dmul>
 801236a:	f000 fb8f 	bl	8012a8c <floor>
 801236e:	2200      	movs	r2, #0
 8012370:	4b87      	ldr	r3, [pc, #540]	; (8012590 <__kernel_rem_pio2+0x338>)
 8012372:	f7ef fc49 	bl	8001c08 <__aeabi_dmul>
 8012376:	0002      	movs	r2, r0
 8012378:	000b      	movs	r3, r1
 801237a:	0020      	movs	r0, r4
 801237c:	0029      	movs	r1, r5
 801237e:	f7ef feaf 	bl	80020e0 <__aeabi_dsub>
 8012382:	000d      	movs	r5, r1
 8012384:	0004      	movs	r4, r0
 8012386:	f7f0 fa5b 	bl	8002840 <__aeabi_d2iz>
 801238a:	9009      	str	r0, [sp, #36]	; 0x24
 801238c:	f7f0 fa8e 	bl	80028ac <__aeabi_i2d>
 8012390:	000b      	movs	r3, r1
 8012392:	0002      	movs	r2, r0
 8012394:	0029      	movs	r1, r5
 8012396:	0020      	movs	r0, r4
 8012398:	f7ef fea2 	bl	80020e0 <__aeabi_dsub>
 801239c:	9b02      	ldr	r3, [sp, #8]
 801239e:	0006      	movs	r6, r0
 80123a0:	000f      	movs	r7, r1
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	dd74      	ble.n	8012490 <__kernel_rem_pio2+0x238>
 80123a6:	2118      	movs	r1, #24
 80123a8:	9b04      	ldr	r3, [sp, #16]
 80123aa:	aa12      	add	r2, sp, #72	; 0x48
 80123ac:	3b01      	subs	r3, #1
 80123ae:	009b      	lsls	r3, r3, #2
 80123b0:	589a      	ldr	r2, [r3, r2]
 80123b2:	9802      	ldr	r0, [sp, #8]
 80123b4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80123b6:	1a09      	subs	r1, r1, r0
 80123b8:	0010      	movs	r0, r2
 80123ba:	4108      	asrs	r0, r1
 80123bc:	1824      	adds	r4, r4, r0
 80123be:	4088      	lsls	r0, r1
 80123c0:	a912      	add	r1, sp, #72	; 0x48
 80123c2:	1a12      	subs	r2, r2, r0
 80123c4:	505a      	str	r2, [r3, r1]
 80123c6:	2317      	movs	r3, #23
 80123c8:	9902      	ldr	r1, [sp, #8]
 80123ca:	9409      	str	r4, [sp, #36]	; 0x24
 80123cc:	1a5b      	subs	r3, r3, r1
 80123ce:	411a      	asrs	r2, r3
 80123d0:	9208      	str	r2, [sp, #32]
 80123d2:	9b08      	ldr	r3, [sp, #32]
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	dd6d      	ble.n	80124b4 <__kernel_rem_pio2+0x25c>
 80123d8:	2200      	movs	r2, #0
 80123da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80123dc:	2080      	movs	r0, #128	; 0x80
 80123de:	3301      	adds	r3, #1
 80123e0:	9309      	str	r3, [sp, #36]	; 0x24
 80123e2:	4b6c      	ldr	r3, [pc, #432]	; (8012594 <__kernel_rem_pio2+0x33c>)
 80123e4:	0014      	movs	r4, r2
 80123e6:	469c      	mov	ip, r3
 80123e8:	2501      	movs	r5, #1
 80123ea:	0440      	lsls	r0, r0, #17
 80123ec:	9b04      	ldr	r3, [sp, #16]
 80123ee:	4293      	cmp	r3, r2
 80123f0:	dd00      	ble.n	80123f4 <__kernel_rem_pio2+0x19c>
 80123f2:	e099      	b.n	8012528 <__kernel_rem_pio2+0x2d0>
 80123f4:	9b02      	ldr	r3, [sp, #8]
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	dd05      	ble.n	8012406 <__kernel_rem_pio2+0x1ae>
 80123fa:	2b01      	cmp	r3, #1
 80123fc:	d100      	bne.n	8012400 <__kernel_rem_pio2+0x1a8>
 80123fe:	e0a9      	b.n	8012554 <__kernel_rem_pio2+0x2fc>
 8012400:	2b02      	cmp	r3, #2
 8012402:	d100      	bne.n	8012406 <__kernel_rem_pio2+0x1ae>
 8012404:	e0b1      	b.n	801256a <__kernel_rem_pio2+0x312>
 8012406:	9b08      	ldr	r3, [sp, #32]
 8012408:	2b02      	cmp	r3, #2
 801240a:	d153      	bne.n	80124b4 <__kernel_rem_pio2+0x25c>
 801240c:	0032      	movs	r2, r6
 801240e:	003b      	movs	r3, r7
 8012410:	2000      	movs	r0, #0
 8012412:	4961      	ldr	r1, [pc, #388]	; (8012598 <__kernel_rem_pio2+0x340>)
 8012414:	f7ef fe64 	bl	80020e0 <__aeabi_dsub>
 8012418:	0006      	movs	r6, r0
 801241a:	000f      	movs	r7, r1
 801241c:	2c00      	cmp	r4, #0
 801241e:	d049      	beq.n	80124b4 <__kernel_rem_pio2+0x25c>
 8012420:	9a02      	ldr	r2, [sp, #8]
 8012422:	2000      	movs	r0, #0
 8012424:	495c      	ldr	r1, [pc, #368]	; (8012598 <__kernel_rem_pio2+0x340>)
 8012426:	f000 fbbb 	bl	8012ba0 <scalbn>
 801242a:	0002      	movs	r2, r0
 801242c:	000b      	movs	r3, r1
 801242e:	0030      	movs	r0, r6
 8012430:	0039      	movs	r1, r7
 8012432:	f7ef fe55 	bl	80020e0 <__aeabi_dsub>
 8012436:	0006      	movs	r6, r0
 8012438:	000f      	movs	r7, r1
 801243a:	e03b      	b.n	80124b4 <__kernel_rem_pio2+0x25c>
 801243c:	2200      	movs	r2, #0
 801243e:	4b57      	ldr	r3, [pc, #348]	; (801259c <__kernel_rem_pio2+0x344>)
 8012440:	0020      	movs	r0, r4
 8012442:	0029      	movs	r1, r5
 8012444:	f7ef fbe0 	bl	8001c08 <__aeabi_dmul>
 8012448:	f7f0 f9fa 	bl	8002840 <__aeabi_d2iz>
 801244c:	f7f0 fa2e 	bl	80028ac <__aeabi_i2d>
 8012450:	2200      	movs	r2, #0
 8012452:	4b53      	ldr	r3, [pc, #332]	; (80125a0 <__kernel_rem_pio2+0x348>)
 8012454:	0006      	movs	r6, r0
 8012456:	000f      	movs	r7, r1
 8012458:	f7ef fbd6 	bl	8001c08 <__aeabi_dmul>
 801245c:	0002      	movs	r2, r0
 801245e:	000b      	movs	r3, r1
 8012460:	0020      	movs	r0, r4
 8012462:	0029      	movs	r1, r5
 8012464:	f7ef fe3c 	bl	80020e0 <__aeabi_dsub>
 8012468:	f7f0 f9ea 	bl	8002840 <__aeabi_d2iz>
 801246c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801246e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012470:	c301      	stmia	r3!, {r0}
 8012472:	9309      	str	r3, [sp, #36]	; 0x24
 8012474:	9b08      	ldr	r3, [sp, #32]
 8012476:	0030      	movs	r0, r6
 8012478:	3b01      	subs	r3, #1
 801247a:	9308      	str	r3, [sp, #32]
 801247c:	00db      	lsls	r3, r3, #3
 801247e:	18d3      	adds	r3, r2, r3
 8012480:	0039      	movs	r1, r7
 8012482:	681a      	ldr	r2, [r3, #0]
 8012484:	685b      	ldr	r3, [r3, #4]
 8012486:	f7ee fc81 	bl	8000d8c <__aeabi_dadd>
 801248a:	0004      	movs	r4, r0
 801248c:	000d      	movs	r5, r1
 801248e:	e75d      	b.n	801234c <__kernel_rem_pio2+0xf4>
 8012490:	9b02      	ldr	r3, [sp, #8]
 8012492:	2b00      	cmp	r3, #0
 8012494:	d107      	bne.n	80124a6 <__kernel_rem_pio2+0x24e>
 8012496:	9b04      	ldr	r3, [sp, #16]
 8012498:	aa12      	add	r2, sp, #72	; 0x48
 801249a:	3b01      	subs	r3, #1
 801249c:	009b      	lsls	r3, r3, #2
 801249e:	5898      	ldr	r0, [r3, r2]
 80124a0:	15c3      	asrs	r3, r0, #23
 80124a2:	9308      	str	r3, [sp, #32]
 80124a4:	e795      	b.n	80123d2 <__kernel_rem_pio2+0x17a>
 80124a6:	2200      	movs	r2, #0
 80124a8:	4b3e      	ldr	r3, [pc, #248]	; (80125a4 <__kernel_rem_pio2+0x34c>)
 80124aa:	f7ed fff3 	bl	8000494 <__aeabi_dcmpge>
 80124ae:	2800      	cmp	r0, #0
 80124b0:	d137      	bne.n	8012522 <__kernel_rem_pio2+0x2ca>
 80124b2:	9008      	str	r0, [sp, #32]
 80124b4:	2200      	movs	r2, #0
 80124b6:	2300      	movs	r3, #0
 80124b8:	0030      	movs	r0, r6
 80124ba:	0039      	movs	r1, r7
 80124bc:	f7ed ffc6 	bl	800044c <__aeabi_dcmpeq>
 80124c0:	2800      	cmp	r0, #0
 80124c2:	d100      	bne.n	80124c6 <__kernel_rem_pio2+0x26e>
 80124c4:	e0b9      	b.n	801263a <__kernel_rem_pio2+0x3e2>
 80124c6:	2200      	movs	r2, #0
 80124c8:	9b04      	ldr	r3, [sp, #16]
 80124ca:	3b01      	subs	r3, #1
 80124cc:	9300      	str	r3, [sp, #0]
 80124ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 80124d0:	428b      	cmp	r3, r1
 80124d2:	da53      	bge.n	801257c <__kernel_rem_pio2+0x324>
 80124d4:	2a00      	cmp	r2, #0
 80124d6:	d100      	bne.n	80124da <__kernel_rem_pio2+0x282>
 80124d8:	e095      	b.n	8012606 <__kernel_rem_pio2+0x3ae>
 80124da:	9b02      	ldr	r3, [sp, #8]
 80124dc:	aa12      	add	r2, sp, #72	; 0x48
 80124de:	3b18      	subs	r3, #24
 80124e0:	9302      	str	r3, [sp, #8]
 80124e2:	9b00      	ldr	r3, [sp, #0]
 80124e4:	009b      	lsls	r3, r3, #2
 80124e6:	589b      	ldr	r3, [r3, r2]
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d100      	bne.n	80124ee <__kernel_rem_pio2+0x296>
 80124ec:	e0a1      	b.n	8012632 <__kernel_rem_pio2+0x3da>
 80124ee:	2000      	movs	r0, #0
 80124f0:	9a02      	ldr	r2, [sp, #8]
 80124f2:	4929      	ldr	r1, [pc, #164]	; (8012598 <__kernel_rem_pio2+0x340>)
 80124f4:	f000 fb54 	bl	8012ba0 <scalbn>
 80124f8:	0006      	movs	r6, r0
 80124fa:	000f      	movs	r7, r1
 80124fc:	9c00      	ldr	r4, [sp, #0]
 80124fe:	2c00      	cmp	r4, #0
 8012500:	db00      	blt.n	8012504 <__kernel_rem_pio2+0x2ac>
 8012502:	e0d9      	b.n	80126b8 <__kernel_rem_pio2+0x460>
 8012504:	9c00      	ldr	r4, [sp, #0]
 8012506:	2c00      	cmp	r4, #0
 8012508:	da00      	bge.n	801250c <__kernel_rem_pio2+0x2b4>
 801250a:	e10c      	b.n	8012726 <__kernel_rem_pio2+0x4ce>
 801250c:	ab76      	add	r3, sp, #472	; 0x1d8
 801250e:	00e6      	lsls	r6, r4, #3
 8012510:	2200      	movs	r2, #0
 8012512:	18f6      	adds	r6, r6, r3
 8012514:	2300      	movs	r3, #0
 8012516:	9202      	str	r2, [sp, #8]
 8012518:	9303      	str	r3, [sp, #12]
 801251a:	9b00      	ldr	r3, [sp, #0]
 801251c:	2500      	movs	r5, #0
 801251e:	1b1f      	subs	r7, r3, r4
 8012520:	e0f3      	b.n	801270a <__kernel_rem_pio2+0x4b2>
 8012522:	2302      	movs	r3, #2
 8012524:	9308      	str	r3, [sp, #32]
 8012526:	e757      	b.n	80123d8 <__kernel_rem_pio2+0x180>
 8012528:	9b00      	ldr	r3, [sp, #0]
 801252a:	681b      	ldr	r3, [r3, #0]
 801252c:	2c00      	cmp	r4, #0
 801252e:	d10b      	bne.n	8012548 <__kernel_rem_pio2+0x2f0>
 8012530:	2b00      	cmp	r3, #0
 8012532:	d003      	beq.n	801253c <__kernel_rem_pio2+0x2e4>
 8012534:	9c00      	ldr	r4, [sp, #0]
 8012536:	1ac3      	subs	r3, r0, r3
 8012538:	6023      	str	r3, [r4, #0]
 801253a:	002b      	movs	r3, r5
 801253c:	9c00      	ldr	r4, [sp, #0]
 801253e:	3201      	adds	r2, #1
 8012540:	3404      	adds	r4, #4
 8012542:	9400      	str	r4, [sp, #0]
 8012544:	001c      	movs	r4, r3
 8012546:	e751      	b.n	80123ec <__kernel_rem_pio2+0x194>
 8012548:	4661      	mov	r1, ip
 801254a:	1acb      	subs	r3, r1, r3
 801254c:	9900      	ldr	r1, [sp, #0]
 801254e:	600b      	str	r3, [r1, #0]
 8012550:	0023      	movs	r3, r4
 8012552:	e7f3      	b.n	801253c <__kernel_rem_pio2+0x2e4>
 8012554:	9b04      	ldr	r3, [sp, #16]
 8012556:	aa12      	add	r2, sp, #72	; 0x48
 8012558:	3b01      	subs	r3, #1
 801255a:	009b      	lsls	r3, r3, #2
 801255c:	589a      	ldr	r2, [r3, r2]
 801255e:	9200      	str	r2, [sp, #0]
 8012560:	0252      	lsls	r2, r2, #9
 8012562:	0a52      	lsrs	r2, r2, #9
 8012564:	a912      	add	r1, sp, #72	; 0x48
 8012566:	505a      	str	r2, [r3, r1]
 8012568:	e74d      	b.n	8012406 <__kernel_rem_pio2+0x1ae>
 801256a:	9b04      	ldr	r3, [sp, #16]
 801256c:	aa12      	add	r2, sp, #72	; 0x48
 801256e:	3b01      	subs	r3, #1
 8012570:	009b      	lsls	r3, r3, #2
 8012572:	589a      	ldr	r2, [r3, r2]
 8012574:	9200      	str	r2, [sp, #0]
 8012576:	0292      	lsls	r2, r2, #10
 8012578:	0a92      	lsrs	r2, r2, #10
 801257a:	e7f3      	b.n	8012564 <__kernel_rem_pio2+0x30c>
 801257c:	0099      	lsls	r1, r3, #2
 801257e:	a812      	add	r0, sp, #72	; 0x48
 8012580:	5809      	ldr	r1, [r1, r0]
 8012582:	3b01      	subs	r3, #1
 8012584:	430a      	orrs	r2, r1
 8012586:	e7a2      	b.n	80124ce <__kernel_rem_pio2+0x276>
 8012588:	fffffd84 	.word	0xfffffd84
 801258c:	08013fc8 	.word	0x08013fc8
 8012590:	40200000 	.word	0x40200000
 8012594:	00ffffff 	.word	0x00ffffff
 8012598:	3ff00000 	.word	0x3ff00000
 801259c:	3e700000 	.word	0x3e700000
 80125a0:	41700000 	.word	0x41700000
 80125a4:	3fe00000 	.word	0x3fe00000
 80125a8:	3301      	adds	r3, #1
 80125aa:	9910      	ldr	r1, [sp, #64]	; 0x40
 80125ac:	009a      	lsls	r2, r3, #2
 80125ae:	4252      	negs	r2, r2
 80125b0:	588a      	ldr	r2, [r1, r2]
 80125b2:	2a00      	cmp	r2, #0
 80125b4:	d0f8      	beq.n	80125a8 <__kernel_rem_pio2+0x350>
 80125b6:	9a04      	ldr	r2, [sp, #16]
 80125b8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80125ba:	1c57      	adds	r7, r2, #1
 80125bc:	1854      	adds	r4, r2, r1
 80125be:	00e4      	lsls	r4, r4, #3
 80125c0:	aa26      	add	r2, sp, #152	; 0x98
 80125c2:	1914      	adds	r4, r2, r4
 80125c4:	9a04      	ldr	r2, [sp, #16]
 80125c6:	18d3      	adds	r3, r2, r3
 80125c8:	9304      	str	r3, [sp, #16]
 80125ca:	9b04      	ldr	r3, [sp, #16]
 80125cc:	42bb      	cmp	r3, r7
 80125ce:	da00      	bge.n	80125d2 <__kernel_rem_pio2+0x37a>
 80125d0:	e6b0      	b.n	8012334 <__kernel_rem_pio2+0xdc>
 80125d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80125d4:	00bb      	lsls	r3, r7, #2
 80125d6:	58d0      	ldr	r0, [r2, r3]
 80125d8:	f7f0 f968 	bl	80028ac <__aeabi_i2d>
 80125dc:	2200      	movs	r2, #0
 80125de:	2300      	movs	r3, #0
 80125e0:	0026      	movs	r6, r4
 80125e2:	2500      	movs	r5, #0
 80125e4:	6020      	str	r0, [r4, #0]
 80125e6:	6061      	str	r1, [r4, #4]
 80125e8:	9200      	str	r2, [sp, #0]
 80125ea:	9301      	str	r3, [sp, #4]
 80125ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80125ee:	429d      	cmp	r5, r3
 80125f0:	dd0b      	ble.n	801260a <__kernel_rem_pio2+0x3b2>
 80125f2:	00fb      	lsls	r3, r7, #3
 80125f4:	aa76      	add	r2, sp, #472	; 0x1d8
 80125f6:	18d3      	adds	r3, r2, r3
 80125f8:	3701      	adds	r7, #1
 80125fa:	9900      	ldr	r1, [sp, #0]
 80125fc:	9a01      	ldr	r2, [sp, #4]
 80125fe:	3408      	adds	r4, #8
 8012600:	6019      	str	r1, [r3, #0]
 8012602:	605a      	str	r2, [r3, #4]
 8012604:	e7e1      	b.n	80125ca <__kernel_rem_pio2+0x372>
 8012606:	2301      	movs	r3, #1
 8012608:	e7cf      	b.n	80125aa <__kernel_rem_pio2+0x352>
 801260a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801260c:	00e9      	lsls	r1, r5, #3
 801260e:	1859      	adds	r1, r3, r1
 8012610:	6808      	ldr	r0, [r1, #0]
 8012612:	6849      	ldr	r1, [r1, #4]
 8012614:	6832      	ldr	r2, [r6, #0]
 8012616:	6873      	ldr	r3, [r6, #4]
 8012618:	f7ef faf6 	bl	8001c08 <__aeabi_dmul>
 801261c:	0002      	movs	r2, r0
 801261e:	000b      	movs	r3, r1
 8012620:	9800      	ldr	r0, [sp, #0]
 8012622:	9901      	ldr	r1, [sp, #4]
 8012624:	f7ee fbb2 	bl	8000d8c <__aeabi_dadd>
 8012628:	3501      	adds	r5, #1
 801262a:	9000      	str	r0, [sp, #0]
 801262c:	9101      	str	r1, [sp, #4]
 801262e:	3e08      	subs	r6, #8
 8012630:	e7dc      	b.n	80125ec <__kernel_rem_pio2+0x394>
 8012632:	9b00      	ldr	r3, [sp, #0]
 8012634:	3b01      	subs	r3, #1
 8012636:	9300      	str	r3, [sp, #0]
 8012638:	e74f      	b.n	80124da <__kernel_rem_pio2+0x282>
 801263a:	9b02      	ldr	r3, [sp, #8]
 801263c:	0030      	movs	r0, r6
 801263e:	425a      	negs	r2, r3
 8012640:	0039      	movs	r1, r7
 8012642:	f000 faad 	bl	8012ba0 <scalbn>
 8012646:	2200      	movs	r2, #0
 8012648:	4bb5      	ldr	r3, [pc, #724]	; (8012920 <__kernel_rem_pio2+0x6c8>)
 801264a:	0004      	movs	r4, r0
 801264c:	000d      	movs	r5, r1
 801264e:	f7ed ff21 	bl	8000494 <__aeabi_dcmpge>
 8012652:	2800      	cmp	r0, #0
 8012654:	d025      	beq.n	80126a2 <__kernel_rem_pio2+0x44a>
 8012656:	2200      	movs	r2, #0
 8012658:	4bb2      	ldr	r3, [pc, #712]	; (8012924 <__kernel_rem_pio2+0x6cc>)
 801265a:	0020      	movs	r0, r4
 801265c:	0029      	movs	r1, r5
 801265e:	f7ef fad3 	bl	8001c08 <__aeabi_dmul>
 8012662:	f7f0 f8ed 	bl	8002840 <__aeabi_d2iz>
 8012666:	9b04      	ldr	r3, [sp, #16]
 8012668:	0006      	movs	r6, r0
 801266a:	009f      	lsls	r7, r3, #2
 801266c:	f7f0 f91e 	bl	80028ac <__aeabi_i2d>
 8012670:	2200      	movs	r2, #0
 8012672:	4bab      	ldr	r3, [pc, #684]	; (8012920 <__kernel_rem_pio2+0x6c8>)
 8012674:	f7ef fac8 	bl	8001c08 <__aeabi_dmul>
 8012678:	0002      	movs	r2, r0
 801267a:	000b      	movs	r3, r1
 801267c:	0020      	movs	r0, r4
 801267e:	0029      	movs	r1, r5
 8012680:	f7ef fd2e 	bl	80020e0 <__aeabi_dsub>
 8012684:	f7f0 f8dc 	bl	8002840 <__aeabi_d2iz>
 8012688:	ab12      	add	r3, sp, #72	; 0x48
 801268a:	51d8      	str	r0, [r3, r7]
 801268c:	9b04      	ldr	r3, [sp, #16]
 801268e:	aa12      	add	r2, sp, #72	; 0x48
 8012690:	3301      	adds	r3, #1
 8012692:	9300      	str	r3, [sp, #0]
 8012694:	9b02      	ldr	r3, [sp, #8]
 8012696:	3318      	adds	r3, #24
 8012698:	9302      	str	r3, [sp, #8]
 801269a:	9b00      	ldr	r3, [sp, #0]
 801269c:	009b      	lsls	r3, r3, #2
 801269e:	509e      	str	r6, [r3, r2]
 80126a0:	e725      	b.n	80124ee <__kernel_rem_pio2+0x296>
 80126a2:	9b04      	ldr	r3, [sp, #16]
 80126a4:	0020      	movs	r0, r4
 80126a6:	0029      	movs	r1, r5
 80126a8:	009e      	lsls	r6, r3, #2
 80126aa:	f7f0 f8c9 	bl	8002840 <__aeabi_d2iz>
 80126ae:	ab12      	add	r3, sp, #72	; 0x48
 80126b0:	5198      	str	r0, [r3, r6]
 80126b2:	9b04      	ldr	r3, [sp, #16]
 80126b4:	9300      	str	r3, [sp, #0]
 80126b6:	e71a      	b.n	80124ee <__kernel_rem_pio2+0x296>
 80126b8:	00e5      	lsls	r5, r4, #3
 80126ba:	ab76      	add	r3, sp, #472	; 0x1d8
 80126bc:	aa12      	add	r2, sp, #72	; 0x48
 80126be:	195d      	adds	r5, r3, r5
 80126c0:	00a3      	lsls	r3, r4, #2
 80126c2:	5898      	ldr	r0, [r3, r2]
 80126c4:	f7f0 f8f2 	bl	80028ac <__aeabi_i2d>
 80126c8:	0032      	movs	r2, r6
 80126ca:	003b      	movs	r3, r7
 80126cc:	f7ef fa9c 	bl	8001c08 <__aeabi_dmul>
 80126d0:	2200      	movs	r2, #0
 80126d2:	6028      	str	r0, [r5, #0]
 80126d4:	6069      	str	r1, [r5, #4]
 80126d6:	4b93      	ldr	r3, [pc, #588]	; (8012924 <__kernel_rem_pio2+0x6cc>)
 80126d8:	0030      	movs	r0, r6
 80126da:	0039      	movs	r1, r7
 80126dc:	f7ef fa94 	bl	8001c08 <__aeabi_dmul>
 80126e0:	3c01      	subs	r4, #1
 80126e2:	0006      	movs	r6, r0
 80126e4:	000f      	movs	r7, r1
 80126e6:	e70a      	b.n	80124fe <__kernel_rem_pio2+0x2a6>
 80126e8:	4b8f      	ldr	r3, [pc, #572]	; (8012928 <__kernel_rem_pio2+0x6d0>)
 80126ea:	00e9      	lsls	r1, r5, #3
 80126ec:	1859      	adds	r1, r3, r1
 80126ee:	6808      	ldr	r0, [r1, #0]
 80126f0:	6849      	ldr	r1, [r1, #4]
 80126f2:	ce0c      	ldmia	r6!, {r2, r3}
 80126f4:	f7ef fa88 	bl	8001c08 <__aeabi_dmul>
 80126f8:	0002      	movs	r2, r0
 80126fa:	000b      	movs	r3, r1
 80126fc:	9802      	ldr	r0, [sp, #8]
 80126fe:	9903      	ldr	r1, [sp, #12]
 8012700:	f7ee fb44 	bl	8000d8c <__aeabi_dadd>
 8012704:	9002      	str	r0, [sp, #8]
 8012706:	9103      	str	r1, [sp, #12]
 8012708:	3501      	adds	r5, #1
 801270a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801270c:	429d      	cmp	r5, r3
 801270e:	dc01      	bgt.n	8012714 <__kernel_rem_pio2+0x4bc>
 8012710:	42bd      	cmp	r5, r7
 8012712:	dde9      	ble.n	80126e8 <__kernel_rem_pio2+0x490>
 8012714:	ab4e      	add	r3, sp, #312	; 0x138
 8012716:	00ff      	lsls	r7, r7, #3
 8012718:	19df      	adds	r7, r3, r7
 801271a:	3c01      	subs	r4, #1
 801271c:	9a02      	ldr	r2, [sp, #8]
 801271e:	9b03      	ldr	r3, [sp, #12]
 8012720:	603a      	str	r2, [r7, #0]
 8012722:	607b      	str	r3, [r7, #4]
 8012724:	e6ef      	b.n	8012506 <__kernel_rem_pio2+0x2ae>
 8012726:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8012728:	2b02      	cmp	r3, #2
 801272a:	dc0e      	bgt.n	801274a <__kernel_rem_pio2+0x4f2>
 801272c:	2b00      	cmp	r3, #0
 801272e:	dd00      	ble.n	8012732 <__kernel_rem_pio2+0x4da>
 8012730:	e08c      	b.n	801284c <__kernel_rem_pio2+0x5f4>
 8012732:	2500      	movs	r5, #0
 8012734:	002c      	movs	r4, r5
 8012736:	42ab      	cmp	r3, r5
 8012738:	d046      	beq.n	80127c8 <__kernel_rem_pio2+0x570>
 801273a:	2007      	movs	r0, #7
 801273c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801273e:	4003      	ands	r3, r0
 8012740:	0018      	movs	r0, r3
 8012742:	239f      	movs	r3, #159	; 0x9f
 8012744:	009b      	lsls	r3, r3, #2
 8012746:	449d      	add	sp, r3
 8012748:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801274a:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801274c:	2b03      	cmp	r3, #3
 801274e:	d1f4      	bne.n	801273a <__kernel_rem_pio2+0x4e2>
 8012750:	9b00      	ldr	r3, [sp, #0]
 8012752:	00dc      	lsls	r4, r3, #3
 8012754:	ab4e      	add	r3, sp, #312	; 0x138
 8012756:	191c      	adds	r4, r3, r4
 8012758:	0025      	movs	r5, r4
 801275a:	9b00      	ldr	r3, [sp, #0]
 801275c:	9302      	str	r3, [sp, #8]
 801275e:	9b02      	ldr	r3, [sp, #8]
 8012760:	3d08      	subs	r5, #8
 8012762:	2b00      	cmp	r3, #0
 8012764:	dd00      	ble.n	8012768 <__kernel_rem_pio2+0x510>
 8012766:	e07f      	b.n	8012868 <__kernel_rem_pio2+0x610>
 8012768:	9d00      	ldr	r5, [sp, #0]
 801276a:	3c08      	subs	r4, #8
 801276c:	2d01      	cmp	r5, #1
 801276e:	dd00      	ble.n	8012772 <__kernel_rem_pio2+0x51a>
 8012770:	e09c      	b.n	80128ac <__kernel_rem_pio2+0x654>
 8012772:	2400      	movs	r4, #0
 8012774:	0021      	movs	r1, r4
 8012776:	9b00      	ldr	r3, [sp, #0]
 8012778:	2b01      	cmp	r3, #1
 801277a:	dd00      	ble.n	801277e <__kernel_rem_pio2+0x526>
 801277c:	e0b4      	b.n	80128e8 <__kernel_rem_pio2+0x690>
 801277e:	9b08      	ldr	r3, [sp, #32]
 8012780:	9f4e      	ldr	r7, [sp, #312]	; 0x138
 8012782:	9e4f      	ldr	r6, [sp, #316]	; 0x13c
 8012784:	9d50      	ldr	r5, [sp, #320]	; 0x140
 8012786:	9851      	ldr	r0, [sp, #324]	; 0x144
 8012788:	2b00      	cmp	r3, #0
 801278a:	d000      	beq.n	801278e <__kernel_rem_pio2+0x536>
 801278c:	e0ba      	b.n	8012904 <__kernel_rem_pio2+0x6ac>
 801278e:	0033      	movs	r3, r6
 8012790:	003a      	movs	r2, r7
 8012792:	9e07      	ldr	r6, [sp, #28]
 8012794:	6032      	str	r2, [r6, #0]
 8012796:	6073      	str	r3, [r6, #4]
 8012798:	002a      	movs	r2, r5
 801279a:	0003      	movs	r3, r0
 801279c:	60b2      	str	r2, [r6, #8]
 801279e:	60f3      	str	r3, [r6, #12]
 80127a0:	0022      	movs	r2, r4
 80127a2:	000b      	movs	r3, r1
 80127a4:	6132      	str	r2, [r6, #16]
 80127a6:	6173      	str	r3, [r6, #20]
 80127a8:	e7c7      	b.n	801273a <__kernel_rem_pio2+0x4e2>
 80127aa:	9b00      	ldr	r3, [sp, #0]
 80127ac:	aa4e      	add	r2, sp, #312	; 0x138
 80127ae:	00db      	lsls	r3, r3, #3
 80127b0:	18d3      	adds	r3, r2, r3
 80127b2:	0028      	movs	r0, r5
 80127b4:	681a      	ldr	r2, [r3, #0]
 80127b6:	685b      	ldr	r3, [r3, #4]
 80127b8:	0021      	movs	r1, r4
 80127ba:	f7ee fae7 	bl	8000d8c <__aeabi_dadd>
 80127be:	0005      	movs	r5, r0
 80127c0:	000c      	movs	r4, r1
 80127c2:	9b00      	ldr	r3, [sp, #0]
 80127c4:	3b01      	subs	r3, #1
 80127c6:	9300      	str	r3, [sp, #0]
 80127c8:	9b00      	ldr	r3, [sp, #0]
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	daed      	bge.n	80127aa <__kernel_rem_pio2+0x552>
 80127ce:	9b08      	ldr	r3, [sp, #32]
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d002      	beq.n	80127da <__kernel_rem_pio2+0x582>
 80127d4:	2380      	movs	r3, #128	; 0x80
 80127d6:	061b      	lsls	r3, r3, #24
 80127d8:	18e4      	adds	r4, r4, r3
 80127da:	002a      	movs	r2, r5
 80127dc:	0023      	movs	r3, r4
 80127de:	9907      	ldr	r1, [sp, #28]
 80127e0:	600a      	str	r2, [r1, #0]
 80127e2:	604b      	str	r3, [r1, #4]
 80127e4:	e7a9      	b.n	801273a <__kernel_rem_pio2+0x4e2>
 80127e6:	00e3      	lsls	r3, r4, #3
 80127e8:	aa4e      	add	r2, sp, #312	; 0x138
 80127ea:	18d3      	adds	r3, r2, r3
 80127ec:	0030      	movs	r0, r6
 80127ee:	681a      	ldr	r2, [r3, #0]
 80127f0:	685b      	ldr	r3, [r3, #4]
 80127f2:	0029      	movs	r1, r5
 80127f4:	f7ee faca 	bl	8000d8c <__aeabi_dadd>
 80127f8:	0006      	movs	r6, r0
 80127fa:	000d      	movs	r5, r1
 80127fc:	3c01      	subs	r4, #1
 80127fe:	2c00      	cmp	r4, #0
 8012800:	daf1      	bge.n	80127e6 <__kernel_rem_pio2+0x58e>
 8012802:	9b08      	ldr	r3, [sp, #32]
 8012804:	0029      	movs	r1, r5
 8012806:	2b00      	cmp	r3, #0
 8012808:	d002      	beq.n	8012810 <__kernel_rem_pio2+0x5b8>
 801280a:	2380      	movs	r3, #128	; 0x80
 801280c:	061b      	lsls	r3, r3, #24
 801280e:	18e9      	adds	r1, r5, r3
 8012810:	0032      	movs	r2, r6
 8012812:	000b      	movs	r3, r1
 8012814:	9907      	ldr	r1, [sp, #28]
 8012816:	2401      	movs	r4, #1
 8012818:	600a      	str	r2, [r1, #0]
 801281a:	604b      	str	r3, [r1, #4]
 801281c:	984e      	ldr	r0, [sp, #312]	; 0x138
 801281e:	994f      	ldr	r1, [sp, #316]	; 0x13c
 8012820:	002b      	movs	r3, r5
 8012822:	f7ef fc5d 	bl	80020e0 <__aeabi_dsub>
 8012826:	0007      	movs	r7, r0
 8012828:	000e      	movs	r6, r1
 801282a:	ad4e      	add	r5, sp, #312	; 0x138
 801282c:	9b00      	ldr	r3, [sp, #0]
 801282e:	3508      	adds	r5, #8
 8012830:	42a3      	cmp	r3, r4
 8012832:	da0f      	bge.n	8012854 <__kernel_rem_pio2+0x5fc>
 8012834:	9b08      	ldr	r3, [sp, #32]
 8012836:	2b00      	cmp	r3, #0
 8012838:	d002      	beq.n	8012840 <__kernel_rem_pio2+0x5e8>
 801283a:	2380      	movs	r3, #128	; 0x80
 801283c:	061b      	lsls	r3, r3, #24
 801283e:	18f6      	adds	r6, r6, r3
 8012840:	003a      	movs	r2, r7
 8012842:	0033      	movs	r3, r6
 8012844:	9907      	ldr	r1, [sp, #28]
 8012846:	608a      	str	r2, [r1, #8]
 8012848:	60cb      	str	r3, [r1, #12]
 801284a:	e776      	b.n	801273a <__kernel_rem_pio2+0x4e2>
 801284c:	2600      	movs	r6, #0
 801284e:	9c00      	ldr	r4, [sp, #0]
 8012850:	0035      	movs	r5, r6
 8012852:	e7d4      	b.n	80127fe <__kernel_rem_pio2+0x5a6>
 8012854:	0038      	movs	r0, r7
 8012856:	682a      	ldr	r2, [r5, #0]
 8012858:	686b      	ldr	r3, [r5, #4]
 801285a:	0031      	movs	r1, r6
 801285c:	f7ee fa96 	bl	8000d8c <__aeabi_dadd>
 8012860:	3401      	adds	r4, #1
 8012862:	0007      	movs	r7, r0
 8012864:	000e      	movs	r6, r1
 8012866:	e7e1      	b.n	801282c <__kernel_rem_pio2+0x5d4>
 8012868:	9b02      	ldr	r3, [sp, #8]
 801286a:	68ae      	ldr	r6, [r5, #8]
 801286c:	68ef      	ldr	r7, [r5, #12]
 801286e:	3b01      	subs	r3, #1
 8012870:	9302      	str	r3, [sp, #8]
 8012872:	682a      	ldr	r2, [r5, #0]
 8012874:	686b      	ldr	r3, [r5, #4]
 8012876:	9204      	str	r2, [sp, #16]
 8012878:	9305      	str	r3, [sp, #20]
 801287a:	9804      	ldr	r0, [sp, #16]
 801287c:	9905      	ldr	r1, [sp, #20]
 801287e:	0032      	movs	r2, r6
 8012880:	003b      	movs	r3, r7
 8012882:	f7ee fa83 	bl	8000d8c <__aeabi_dadd>
 8012886:	0002      	movs	r2, r0
 8012888:	000b      	movs	r3, r1
 801288a:	900a      	str	r0, [sp, #40]	; 0x28
 801288c:	910b      	str	r1, [sp, #44]	; 0x2c
 801288e:	9804      	ldr	r0, [sp, #16]
 8012890:	9905      	ldr	r1, [sp, #20]
 8012892:	f7ef fc25 	bl	80020e0 <__aeabi_dsub>
 8012896:	0032      	movs	r2, r6
 8012898:	003b      	movs	r3, r7
 801289a:	f7ee fa77 	bl	8000d8c <__aeabi_dadd>
 801289e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80128a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80128a2:	60a8      	str	r0, [r5, #8]
 80128a4:	60e9      	str	r1, [r5, #12]
 80128a6:	602a      	str	r2, [r5, #0]
 80128a8:	606b      	str	r3, [r5, #4]
 80128aa:	e758      	b.n	801275e <__kernel_rem_pio2+0x506>
 80128ac:	6826      	ldr	r6, [r4, #0]
 80128ae:	6867      	ldr	r7, [r4, #4]
 80128b0:	68a2      	ldr	r2, [r4, #8]
 80128b2:	68e3      	ldr	r3, [r4, #12]
 80128b4:	0030      	movs	r0, r6
 80128b6:	0039      	movs	r1, r7
 80128b8:	9202      	str	r2, [sp, #8]
 80128ba:	9303      	str	r3, [sp, #12]
 80128bc:	f7ee fa66 	bl	8000d8c <__aeabi_dadd>
 80128c0:	0002      	movs	r2, r0
 80128c2:	000b      	movs	r3, r1
 80128c4:	9004      	str	r0, [sp, #16]
 80128c6:	9105      	str	r1, [sp, #20]
 80128c8:	0030      	movs	r0, r6
 80128ca:	0039      	movs	r1, r7
 80128cc:	f7ef fc08 	bl	80020e0 <__aeabi_dsub>
 80128d0:	9a02      	ldr	r2, [sp, #8]
 80128d2:	9b03      	ldr	r3, [sp, #12]
 80128d4:	f7ee fa5a 	bl	8000d8c <__aeabi_dadd>
 80128d8:	9a04      	ldr	r2, [sp, #16]
 80128da:	9b05      	ldr	r3, [sp, #20]
 80128dc:	60a0      	str	r0, [r4, #8]
 80128de:	60e1      	str	r1, [r4, #12]
 80128e0:	6022      	str	r2, [r4, #0]
 80128e2:	6063      	str	r3, [r4, #4]
 80128e4:	3d01      	subs	r5, #1
 80128e6:	e740      	b.n	801276a <__kernel_rem_pio2+0x512>
 80128e8:	9b00      	ldr	r3, [sp, #0]
 80128ea:	aa4e      	add	r2, sp, #312	; 0x138
 80128ec:	00db      	lsls	r3, r3, #3
 80128ee:	18d3      	adds	r3, r2, r3
 80128f0:	0020      	movs	r0, r4
 80128f2:	681a      	ldr	r2, [r3, #0]
 80128f4:	685b      	ldr	r3, [r3, #4]
 80128f6:	f7ee fa49 	bl	8000d8c <__aeabi_dadd>
 80128fa:	9b00      	ldr	r3, [sp, #0]
 80128fc:	0004      	movs	r4, r0
 80128fe:	3b01      	subs	r3, #1
 8012900:	9300      	str	r3, [sp, #0]
 8012902:	e738      	b.n	8012776 <__kernel_rem_pio2+0x51e>
 8012904:	9b07      	ldr	r3, [sp, #28]
 8012906:	9a07      	ldr	r2, [sp, #28]
 8012908:	601f      	str	r7, [r3, #0]
 801290a:	2380      	movs	r3, #128	; 0x80
 801290c:	061b      	lsls	r3, r3, #24
 801290e:	18f6      	adds	r6, r6, r3
 8012910:	18c0      	adds	r0, r0, r3
 8012912:	18c9      	adds	r1, r1, r3
 8012914:	6056      	str	r6, [r2, #4]
 8012916:	6095      	str	r5, [r2, #8]
 8012918:	60d0      	str	r0, [r2, #12]
 801291a:	6114      	str	r4, [r2, #16]
 801291c:	6151      	str	r1, [r2, #20]
 801291e:	e70c      	b.n	801273a <__kernel_rem_pio2+0x4e2>
 8012920:	41700000 	.word	0x41700000
 8012924:	3e700000 	.word	0x3e700000
 8012928:	08013f88 	.word	0x08013f88

0801292c <__kernel_sin>:
 801292c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801292e:	b089      	sub	sp, #36	; 0x24
 8012930:	9202      	str	r2, [sp, #8]
 8012932:	9303      	str	r3, [sp, #12]
 8012934:	22f9      	movs	r2, #249	; 0xf9
 8012936:	004b      	lsls	r3, r1, #1
 8012938:	0007      	movs	r7, r0
 801293a:	000e      	movs	r6, r1
 801293c:	085b      	lsrs	r3, r3, #1
 801293e:	0592      	lsls	r2, r2, #22
 8012940:	4293      	cmp	r3, r2
 8012942:	da03      	bge.n	801294c <__kernel_sin+0x20>
 8012944:	f7ef ff7c 	bl	8002840 <__aeabi_d2iz>
 8012948:	2800      	cmp	r0, #0
 801294a:	d04c      	beq.n	80129e6 <__kernel_sin+0xba>
 801294c:	003a      	movs	r2, r7
 801294e:	0033      	movs	r3, r6
 8012950:	0038      	movs	r0, r7
 8012952:	0031      	movs	r1, r6
 8012954:	f7ef f958 	bl	8001c08 <__aeabi_dmul>
 8012958:	0004      	movs	r4, r0
 801295a:	000d      	movs	r5, r1
 801295c:	0002      	movs	r2, r0
 801295e:	000b      	movs	r3, r1
 8012960:	0038      	movs	r0, r7
 8012962:	0031      	movs	r1, r6
 8012964:	f7ef f950 	bl	8001c08 <__aeabi_dmul>
 8012968:	4a39      	ldr	r2, [pc, #228]	; (8012a50 <__kernel_sin+0x124>)
 801296a:	9000      	str	r0, [sp, #0]
 801296c:	9101      	str	r1, [sp, #4]
 801296e:	4b39      	ldr	r3, [pc, #228]	; (8012a54 <__kernel_sin+0x128>)
 8012970:	0020      	movs	r0, r4
 8012972:	0029      	movs	r1, r5
 8012974:	f7ef f948 	bl	8001c08 <__aeabi_dmul>
 8012978:	4a37      	ldr	r2, [pc, #220]	; (8012a58 <__kernel_sin+0x12c>)
 801297a:	4b38      	ldr	r3, [pc, #224]	; (8012a5c <__kernel_sin+0x130>)
 801297c:	f7ef fbb0 	bl	80020e0 <__aeabi_dsub>
 8012980:	0022      	movs	r2, r4
 8012982:	002b      	movs	r3, r5
 8012984:	f7ef f940 	bl	8001c08 <__aeabi_dmul>
 8012988:	4a35      	ldr	r2, [pc, #212]	; (8012a60 <__kernel_sin+0x134>)
 801298a:	4b36      	ldr	r3, [pc, #216]	; (8012a64 <__kernel_sin+0x138>)
 801298c:	f7ee f9fe 	bl	8000d8c <__aeabi_dadd>
 8012990:	0022      	movs	r2, r4
 8012992:	002b      	movs	r3, r5
 8012994:	f7ef f938 	bl	8001c08 <__aeabi_dmul>
 8012998:	4a33      	ldr	r2, [pc, #204]	; (8012a68 <__kernel_sin+0x13c>)
 801299a:	4b34      	ldr	r3, [pc, #208]	; (8012a6c <__kernel_sin+0x140>)
 801299c:	f7ef fba0 	bl	80020e0 <__aeabi_dsub>
 80129a0:	0022      	movs	r2, r4
 80129a2:	002b      	movs	r3, r5
 80129a4:	f7ef f930 	bl	8001c08 <__aeabi_dmul>
 80129a8:	4b31      	ldr	r3, [pc, #196]	; (8012a70 <__kernel_sin+0x144>)
 80129aa:	4a32      	ldr	r2, [pc, #200]	; (8012a74 <__kernel_sin+0x148>)
 80129ac:	f7ee f9ee 	bl	8000d8c <__aeabi_dadd>
 80129b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80129b2:	9004      	str	r0, [sp, #16]
 80129b4:	9105      	str	r1, [sp, #20]
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d119      	bne.n	80129ee <__kernel_sin+0xc2>
 80129ba:	0002      	movs	r2, r0
 80129bc:	000b      	movs	r3, r1
 80129be:	0020      	movs	r0, r4
 80129c0:	0029      	movs	r1, r5
 80129c2:	f7ef f921 	bl	8001c08 <__aeabi_dmul>
 80129c6:	4a2c      	ldr	r2, [pc, #176]	; (8012a78 <__kernel_sin+0x14c>)
 80129c8:	4b2c      	ldr	r3, [pc, #176]	; (8012a7c <__kernel_sin+0x150>)
 80129ca:	f7ef fb89 	bl	80020e0 <__aeabi_dsub>
 80129ce:	9a00      	ldr	r2, [sp, #0]
 80129d0:	9b01      	ldr	r3, [sp, #4]
 80129d2:	f7ef f919 	bl	8001c08 <__aeabi_dmul>
 80129d6:	0002      	movs	r2, r0
 80129d8:	000b      	movs	r3, r1
 80129da:	0038      	movs	r0, r7
 80129dc:	0031      	movs	r1, r6
 80129de:	f7ee f9d5 	bl	8000d8c <__aeabi_dadd>
 80129e2:	0007      	movs	r7, r0
 80129e4:	000e      	movs	r6, r1
 80129e6:	0038      	movs	r0, r7
 80129e8:	0031      	movs	r1, r6
 80129ea:	b009      	add	sp, #36	; 0x24
 80129ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80129ee:	2200      	movs	r2, #0
 80129f0:	9802      	ldr	r0, [sp, #8]
 80129f2:	9903      	ldr	r1, [sp, #12]
 80129f4:	4b22      	ldr	r3, [pc, #136]	; (8012a80 <__kernel_sin+0x154>)
 80129f6:	f7ef f907 	bl	8001c08 <__aeabi_dmul>
 80129fa:	9a04      	ldr	r2, [sp, #16]
 80129fc:	9b05      	ldr	r3, [sp, #20]
 80129fe:	9006      	str	r0, [sp, #24]
 8012a00:	9107      	str	r1, [sp, #28]
 8012a02:	9800      	ldr	r0, [sp, #0]
 8012a04:	9901      	ldr	r1, [sp, #4]
 8012a06:	f7ef f8ff 	bl	8001c08 <__aeabi_dmul>
 8012a0a:	0002      	movs	r2, r0
 8012a0c:	000b      	movs	r3, r1
 8012a0e:	9806      	ldr	r0, [sp, #24]
 8012a10:	9907      	ldr	r1, [sp, #28]
 8012a12:	f7ef fb65 	bl	80020e0 <__aeabi_dsub>
 8012a16:	0022      	movs	r2, r4
 8012a18:	002b      	movs	r3, r5
 8012a1a:	f7ef f8f5 	bl	8001c08 <__aeabi_dmul>
 8012a1e:	9a02      	ldr	r2, [sp, #8]
 8012a20:	9b03      	ldr	r3, [sp, #12]
 8012a22:	f7ef fb5d 	bl	80020e0 <__aeabi_dsub>
 8012a26:	4a14      	ldr	r2, [pc, #80]	; (8012a78 <__kernel_sin+0x14c>)
 8012a28:	0004      	movs	r4, r0
 8012a2a:	000d      	movs	r5, r1
 8012a2c:	9800      	ldr	r0, [sp, #0]
 8012a2e:	9901      	ldr	r1, [sp, #4]
 8012a30:	4b12      	ldr	r3, [pc, #72]	; (8012a7c <__kernel_sin+0x150>)
 8012a32:	f7ef f8e9 	bl	8001c08 <__aeabi_dmul>
 8012a36:	0002      	movs	r2, r0
 8012a38:	000b      	movs	r3, r1
 8012a3a:	0020      	movs	r0, r4
 8012a3c:	0029      	movs	r1, r5
 8012a3e:	f7ee f9a5 	bl	8000d8c <__aeabi_dadd>
 8012a42:	0002      	movs	r2, r0
 8012a44:	000b      	movs	r3, r1
 8012a46:	0038      	movs	r0, r7
 8012a48:	0031      	movs	r1, r6
 8012a4a:	f7ef fb49 	bl	80020e0 <__aeabi_dsub>
 8012a4e:	e7c8      	b.n	80129e2 <__kernel_sin+0xb6>
 8012a50:	5acfd57c 	.word	0x5acfd57c
 8012a54:	3de5d93a 	.word	0x3de5d93a
 8012a58:	8a2b9ceb 	.word	0x8a2b9ceb
 8012a5c:	3e5ae5e6 	.word	0x3e5ae5e6
 8012a60:	57b1fe7d 	.word	0x57b1fe7d
 8012a64:	3ec71de3 	.word	0x3ec71de3
 8012a68:	19c161d5 	.word	0x19c161d5
 8012a6c:	3f2a01a0 	.word	0x3f2a01a0
 8012a70:	3f811111 	.word	0x3f811111
 8012a74:	1110f8a6 	.word	0x1110f8a6
 8012a78:	55555549 	.word	0x55555549
 8012a7c:	3fc55555 	.word	0x3fc55555
 8012a80:	3fe00000 	.word	0x3fe00000

08012a84 <fabs>:
 8012a84:	004b      	lsls	r3, r1, #1
 8012a86:	0859      	lsrs	r1, r3, #1
 8012a88:	4770      	bx	lr
	...

08012a8c <floor>:
 8012a8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012a8e:	004b      	lsls	r3, r1, #1
 8012a90:	4a3d      	ldr	r2, [pc, #244]	; (8012b88 <floor+0xfc>)
 8012a92:	0d5b      	lsrs	r3, r3, #21
 8012a94:	189f      	adds	r7, r3, r2
 8012a96:	4684      	mov	ip, r0
 8012a98:	000e      	movs	r6, r1
 8012a9a:	000d      	movs	r5, r1
 8012a9c:	0004      	movs	r4, r0
 8012a9e:	9001      	str	r0, [sp, #4]
 8012aa0:	2f13      	cmp	r7, #19
 8012aa2:	dc34      	bgt.n	8012b0e <floor+0x82>
 8012aa4:	2f00      	cmp	r7, #0
 8012aa6:	da16      	bge.n	8012ad6 <floor+0x4a>
 8012aa8:	4a38      	ldr	r2, [pc, #224]	; (8012b8c <floor+0x100>)
 8012aaa:	4b39      	ldr	r3, [pc, #228]	; (8012b90 <floor+0x104>)
 8012aac:	4660      	mov	r0, ip
 8012aae:	0031      	movs	r1, r6
 8012ab0:	f7ee f96c 	bl	8000d8c <__aeabi_dadd>
 8012ab4:	2200      	movs	r2, #0
 8012ab6:	2300      	movs	r3, #0
 8012ab8:	f7ed fce2 	bl	8000480 <__aeabi_dcmpgt>
 8012abc:	2800      	cmp	r0, #0
 8012abe:	d007      	beq.n	8012ad0 <floor+0x44>
 8012ac0:	2e00      	cmp	r6, #0
 8012ac2:	da5d      	bge.n	8012b80 <floor+0xf4>
 8012ac4:	0073      	lsls	r3, r6, #1
 8012ac6:	085b      	lsrs	r3, r3, #1
 8012ac8:	431c      	orrs	r4, r3
 8012aca:	d001      	beq.n	8012ad0 <floor+0x44>
 8012acc:	2400      	movs	r4, #0
 8012ace:	4d31      	ldr	r5, [pc, #196]	; (8012b94 <floor+0x108>)
 8012ad0:	46a4      	mov	ip, r4
 8012ad2:	002e      	movs	r6, r5
 8012ad4:	e029      	b.n	8012b2a <floor+0x9e>
 8012ad6:	4b30      	ldr	r3, [pc, #192]	; (8012b98 <floor+0x10c>)
 8012ad8:	413b      	asrs	r3, r7
 8012ada:	9300      	str	r3, [sp, #0]
 8012adc:	400b      	ands	r3, r1
 8012ade:	4303      	orrs	r3, r0
 8012ae0:	d023      	beq.n	8012b2a <floor+0x9e>
 8012ae2:	4a2a      	ldr	r2, [pc, #168]	; (8012b8c <floor+0x100>)
 8012ae4:	4b2a      	ldr	r3, [pc, #168]	; (8012b90 <floor+0x104>)
 8012ae6:	4660      	mov	r0, ip
 8012ae8:	0031      	movs	r1, r6
 8012aea:	f7ee f94f 	bl	8000d8c <__aeabi_dadd>
 8012aee:	2200      	movs	r2, #0
 8012af0:	2300      	movs	r3, #0
 8012af2:	f7ed fcc5 	bl	8000480 <__aeabi_dcmpgt>
 8012af6:	2800      	cmp	r0, #0
 8012af8:	d0ea      	beq.n	8012ad0 <floor+0x44>
 8012afa:	2e00      	cmp	r6, #0
 8012afc:	da03      	bge.n	8012b06 <floor+0x7a>
 8012afe:	2380      	movs	r3, #128	; 0x80
 8012b00:	035b      	lsls	r3, r3, #13
 8012b02:	413b      	asrs	r3, r7
 8012b04:	18f5      	adds	r5, r6, r3
 8012b06:	9b00      	ldr	r3, [sp, #0]
 8012b08:	2400      	movs	r4, #0
 8012b0a:	439d      	bics	r5, r3
 8012b0c:	e7e0      	b.n	8012ad0 <floor+0x44>
 8012b0e:	2f33      	cmp	r7, #51	; 0x33
 8012b10:	dd0f      	ble.n	8012b32 <floor+0xa6>
 8012b12:	2380      	movs	r3, #128	; 0x80
 8012b14:	00db      	lsls	r3, r3, #3
 8012b16:	429f      	cmp	r7, r3
 8012b18:	d107      	bne.n	8012b2a <floor+0x9e>
 8012b1a:	0002      	movs	r2, r0
 8012b1c:	000b      	movs	r3, r1
 8012b1e:	4660      	mov	r0, ip
 8012b20:	0031      	movs	r1, r6
 8012b22:	f7ee f933 	bl	8000d8c <__aeabi_dadd>
 8012b26:	4684      	mov	ip, r0
 8012b28:	000e      	movs	r6, r1
 8012b2a:	4660      	mov	r0, ip
 8012b2c:	0031      	movs	r1, r6
 8012b2e:	b003      	add	sp, #12
 8012b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b32:	4a1a      	ldr	r2, [pc, #104]	; (8012b9c <floor+0x110>)
 8012b34:	189b      	adds	r3, r3, r2
 8012b36:	2201      	movs	r2, #1
 8012b38:	4252      	negs	r2, r2
 8012b3a:	40da      	lsrs	r2, r3
 8012b3c:	9200      	str	r2, [sp, #0]
 8012b3e:	4210      	tst	r0, r2
 8012b40:	d0f3      	beq.n	8012b2a <floor+0x9e>
 8012b42:	4a12      	ldr	r2, [pc, #72]	; (8012b8c <floor+0x100>)
 8012b44:	4b12      	ldr	r3, [pc, #72]	; (8012b90 <floor+0x104>)
 8012b46:	4660      	mov	r0, ip
 8012b48:	0031      	movs	r1, r6
 8012b4a:	f7ee f91f 	bl	8000d8c <__aeabi_dadd>
 8012b4e:	2200      	movs	r2, #0
 8012b50:	2300      	movs	r3, #0
 8012b52:	f7ed fc95 	bl	8000480 <__aeabi_dcmpgt>
 8012b56:	2800      	cmp	r0, #0
 8012b58:	d0ba      	beq.n	8012ad0 <floor+0x44>
 8012b5a:	2e00      	cmp	r6, #0
 8012b5c:	da02      	bge.n	8012b64 <floor+0xd8>
 8012b5e:	2f14      	cmp	r7, #20
 8012b60:	d103      	bne.n	8012b6a <floor+0xde>
 8012b62:	3501      	adds	r5, #1
 8012b64:	9b00      	ldr	r3, [sp, #0]
 8012b66:	439c      	bics	r4, r3
 8012b68:	e7b2      	b.n	8012ad0 <floor+0x44>
 8012b6a:	2334      	movs	r3, #52	; 0x34
 8012b6c:	1bdf      	subs	r7, r3, r7
 8012b6e:	3b33      	subs	r3, #51	; 0x33
 8012b70:	40bb      	lsls	r3, r7
 8012b72:	18e4      	adds	r4, r4, r3
 8012b74:	9b01      	ldr	r3, [sp, #4]
 8012b76:	429c      	cmp	r4, r3
 8012b78:	419b      	sbcs	r3, r3
 8012b7a:	425b      	negs	r3, r3
 8012b7c:	18f5      	adds	r5, r6, r3
 8012b7e:	e7f1      	b.n	8012b64 <floor+0xd8>
 8012b80:	2400      	movs	r4, #0
 8012b82:	0025      	movs	r5, r4
 8012b84:	e7a4      	b.n	8012ad0 <floor+0x44>
 8012b86:	46c0      	nop			; (mov r8, r8)
 8012b88:	fffffc01 	.word	0xfffffc01
 8012b8c:	8800759c 	.word	0x8800759c
 8012b90:	7e37e43c 	.word	0x7e37e43c
 8012b94:	bff00000 	.word	0xbff00000
 8012b98:	000fffff 	.word	0x000fffff
 8012b9c:	fffffbed 	.word	0xfffffbed

08012ba0 <scalbn>:
 8012ba0:	004b      	lsls	r3, r1, #1
 8012ba2:	b570      	push	{r4, r5, r6, lr}
 8012ba4:	0d5b      	lsrs	r3, r3, #21
 8012ba6:	0014      	movs	r4, r2
 8012ba8:	000a      	movs	r2, r1
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d10d      	bne.n	8012bca <scalbn+0x2a>
 8012bae:	004b      	lsls	r3, r1, #1
 8012bb0:	085b      	lsrs	r3, r3, #1
 8012bb2:	4303      	orrs	r3, r0
 8012bb4:	d010      	beq.n	8012bd8 <scalbn+0x38>
 8012bb6:	4b27      	ldr	r3, [pc, #156]	; (8012c54 <scalbn+0xb4>)
 8012bb8:	2200      	movs	r2, #0
 8012bba:	f7ef f825 	bl	8001c08 <__aeabi_dmul>
 8012bbe:	4b26      	ldr	r3, [pc, #152]	; (8012c58 <scalbn+0xb8>)
 8012bc0:	429c      	cmp	r4, r3
 8012bc2:	da0a      	bge.n	8012bda <scalbn+0x3a>
 8012bc4:	4a25      	ldr	r2, [pc, #148]	; (8012c5c <scalbn+0xbc>)
 8012bc6:	4b26      	ldr	r3, [pc, #152]	; (8012c60 <scalbn+0xc0>)
 8012bc8:	e019      	b.n	8012bfe <scalbn+0x5e>
 8012bca:	4d26      	ldr	r5, [pc, #152]	; (8012c64 <scalbn+0xc4>)
 8012bcc:	42ab      	cmp	r3, r5
 8012bce:	d108      	bne.n	8012be2 <scalbn+0x42>
 8012bd0:	0002      	movs	r2, r0
 8012bd2:	000b      	movs	r3, r1
 8012bd4:	f7ee f8da 	bl	8000d8c <__aeabi_dadd>
 8012bd8:	bd70      	pop	{r4, r5, r6, pc}
 8012bda:	000a      	movs	r2, r1
 8012bdc:	004b      	lsls	r3, r1, #1
 8012bde:	0d5b      	lsrs	r3, r3, #21
 8012be0:	3b36      	subs	r3, #54	; 0x36
 8012be2:	4d21      	ldr	r5, [pc, #132]	; (8012c68 <scalbn+0xc8>)
 8012be4:	18e3      	adds	r3, r4, r3
 8012be6:	42ab      	cmp	r3, r5
 8012be8:	dd0c      	ble.n	8012c04 <scalbn+0x64>
 8012bea:	4c20      	ldr	r4, [pc, #128]	; (8012c6c <scalbn+0xcc>)
 8012bec:	4d20      	ldr	r5, [pc, #128]	; (8012c70 <scalbn+0xd0>)
 8012bee:	2900      	cmp	r1, #0
 8012bf0:	da01      	bge.n	8012bf6 <scalbn+0x56>
 8012bf2:	4c1e      	ldr	r4, [pc, #120]	; (8012c6c <scalbn+0xcc>)
 8012bf4:	4d1f      	ldr	r5, [pc, #124]	; (8012c74 <scalbn+0xd4>)
 8012bf6:	0020      	movs	r0, r4
 8012bf8:	0029      	movs	r1, r5
 8012bfa:	4a1c      	ldr	r2, [pc, #112]	; (8012c6c <scalbn+0xcc>)
 8012bfc:	4b1c      	ldr	r3, [pc, #112]	; (8012c70 <scalbn+0xd0>)
 8012bfe:	f7ef f803 	bl	8001c08 <__aeabi_dmul>
 8012c02:	e7e9      	b.n	8012bd8 <scalbn+0x38>
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	dd05      	ble.n	8012c14 <scalbn+0x74>
 8012c08:	4c1b      	ldr	r4, [pc, #108]	; (8012c78 <scalbn+0xd8>)
 8012c0a:	051b      	lsls	r3, r3, #20
 8012c0c:	4022      	ands	r2, r4
 8012c0e:	431a      	orrs	r2, r3
 8012c10:	0011      	movs	r1, r2
 8012c12:	e7e1      	b.n	8012bd8 <scalbn+0x38>
 8012c14:	001d      	movs	r5, r3
 8012c16:	3535      	adds	r5, #53	; 0x35
 8012c18:	da13      	bge.n	8012c42 <scalbn+0xa2>
 8012c1a:	4a18      	ldr	r2, [pc, #96]	; (8012c7c <scalbn+0xdc>)
 8012c1c:	0fcb      	lsrs	r3, r1, #31
 8012c1e:	4294      	cmp	r4, r2
 8012c20:	dd08      	ble.n	8012c34 <scalbn+0x94>
 8012c22:	4812      	ldr	r0, [pc, #72]	; (8012c6c <scalbn+0xcc>)
 8012c24:	4912      	ldr	r1, [pc, #72]	; (8012c70 <scalbn+0xd0>)
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d001      	beq.n	8012c2e <scalbn+0x8e>
 8012c2a:	4810      	ldr	r0, [pc, #64]	; (8012c6c <scalbn+0xcc>)
 8012c2c:	4911      	ldr	r1, [pc, #68]	; (8012c74 <scalbn+0xd4>)
 8012c2e:	4a0f      	ldr	r2, [pc, #60]	; (8012c6c <scalbn+0xcc>)
 8012c30:	4b0f      	ldr	r3, [pc, #60]	; (8012c70 <scalbn+0xd0>)
 8012c32:	e7e4      	b.n	8012bfe <scalbn+0x5e>
 8012c34:	4809      	ldr	r0, [pc, #36]	; (8012c5c <scalbn+0xbc>)
 8012c36:	490a      	ldr	r1, [pc, #40]	; (8012c60 <scalbn+0xc0>)
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d0c3      	beq.n	8012bc4 <scalbn+0x24>
 8012c3c:	4807      	ldr	r0, [pc, #28]	; (8012c5c <scalbn+0xbc>)
 8012c3e:	4910      	ldr	r1, [pc, #64]	; (8012c80 <scalbn+0xe0>)
 8012c40:	e7c0      	b.n	8012bc4 <scalbn+0x24>
 8012c42:	4c0d      	ldr	r4, [pc, #52]	; (8012c78 <scalbn+0xd8>)
 8012c44:	3336      	adds	r3, #54	; 0x36
 8012c46:	4022      	ands	r2, r4
 8012c48:	051b      	lsls	r3, r3, #20
 8012c4a:	4313      	orrs	r3, r2
 8012c4c:	0019      	movs	r1, r3
 8012c4e:	2200      	movs	r2, #0
 8012c50:	4b0c      	ldr	r3, [pc, #48]	; (8012c84 <scalbn+0xe4>)
 8012c52:	e7d4      	b.n	8012bfe <scalbn+0x5e>
 8012c54:	43500000 	.word	0x43500000
 8012c58:	ffff3cb0 	.word	0xffff3cb0
 8012c5c:	c2f8f359 	.word	0xc2f8f359
 8012c60:	01a56e1f 	.word	0x01a56e1f
 8012c64:	000007ff 	.word	0x000007ff
 8012c68:	000007fe 	.word	0x000007fe
 8012c6c:	8800759c 	.word	0x8800759c
 8012c70:	7e37e43c 	.word	0x7e37e43c
 8012c74:	fe37e43c 	.word	0xfe37e43c
 8012c78:	800fffff 	.word	0x800fffff
 8012c7c:	0000c350 	.word	0x0000c350
 8012c80:	81a56e1f 	.word	0x81a56e1f
 8012c84:	3c900000 	.word	0x3c900000

08012c88 <_init>:
 8012c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c8a:	46c0      	nop			; (mov r8, r8)
 8012c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012c8e:	bc08      	pop	{r3}
 8012c90:	469e      	mov	lr, r3
 8012c92:	4770      	bx	lr

08012c94 <_fini>:
 8012c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c96:	46c0      	nop			; (mov r8, r8)
 8012c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012c9a:	bc08      	pop	{r3}
 8012c9c:	469e      	mov	lr, r3
 8012c9e:	4770      	bx	lr
