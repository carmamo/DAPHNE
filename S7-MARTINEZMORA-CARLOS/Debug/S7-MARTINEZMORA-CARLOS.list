
S7-MARTINEZMORA-CARLOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000779c  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005fc  0800785c  0800785c  0001785c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e58  08007e58  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08007e58  08007e58  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007e58  08007e58  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e58  08007e58  00017e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e5c  08007e5c  00017e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007e60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cb0  20000074  08007ed4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d24  08007ed4  00021d24  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00040e39  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e9d  00000000  00000000  00060ed5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003ac0  00000000  00000000  00065d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003890  00000000  00000000  00069838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000537f  00000000  00000000  0006d0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028161  00000000  00000000  00072447  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082b86  00000000  00000000  0009a5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011d12e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000e21c  00000000  00000000  0011d180  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007844 	.word	0x08007844

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	08007844 	.word	0x08007844

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fcb8 	bl	8000b98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f82c 	bl	8000284 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f95e 	bl	80004ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000230:	f000 f92c 	bl	800048c <MX_USART2_UART_Init>
  MX_ADC_Init();
 8000234:	f000 f88e 	bl	8000354 <MX_ADC_Init>
  MX_I2C1_Init();
 8000238:	f000 f8e8 	bl	800040c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800023c:	f004 ffb2 	bl	80051a4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000240:	4a0a      	ldr	r2, [pc, #40]	; (800026c <main+0x4c>)
 8000242:	4b0b      	ldr	r3, [pc, #44]	; (8000270 <main+0x50>)
 8000244:	2100      	movs	r1, #0
 8000246:	0018      	movs	r0, r3
 8000248:	f005 f806 	bl	8005258 <osThreadNew>
 800024c:	0002      	movs	r2, r0
 800024e:	4b09      	ldr	r3, [pc, #36]	; (8000274 <main+0x54>)
 8000250:	601a      	str	r2, [r3, #0]

  /* creation of OLED */
  OLEDHandle = osThreadNew(oled_update, NULL, &OLED_attributes);
 8000252:	4a09      	ldr	r2, [pc, #36]	; (8000278 <main+0x58>)
 8000254:	4b09      	ldr	r3, [pc, #36]	; (800027c <main+0x5c>)
 8000256:	2100      	movs	r1, #0
 8000258:	0018      	movs	r0, r3
 800025a:	f004 fffd 	bl	8005258 <osThreadNew>
 800025e:	0002      	movs	r2, r0
 8000260:	4b07      	ldr	r3, [pc, #28]	; (8000280 <main+0x60>)
 8000262:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000264:	f004 ffca 	bl	80051fc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000268:	e7fe      	b.n	8000268 <main+0x48>
 800026a:	46c0      	nop			; (mov r8, r8)
 800026c:	080078a8 	.word	0x080078a8
 8000270:	080006ed 	.word	0x080006ed
 8000274:	200001a0 	.word	0x200001a0
 8000278:	080078cc 	.word	0x080078cc
 800027c:	080006fd 	.word	0x080006fd
 8000280:	200001a4 	.word	0x200001a4

08000284 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000284:	b590      	push	{r4, r7, lr}
 8000286:	b097      	sub	sp, #92	; 0x5c
 8000288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028a:	2428      	movs	r4, #40	; 0x28
 800028c:	193b      	adds	r3, r7, r4
 800028e:	0018      	movs	r0, r3
 8000290:	2330      	movs	r3, #48	; 0x30
 8000292:	001a      	movs	r2, r3
 8000294:	2100      	movs	r1, #0
 8000296:	f007 fa00 	bl	800769a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800029a:	2318      	movs	r3, #24
 800029c:	18fb      	adds	r3, r7, r3
 800029e:	0018      	movs	r0, r3
 80002a0:	2310      	movs	r3, #16
 80002a2:	001a      	movs	r2, r3
 80002a4:	2100      	movs	r1, #0
 80002a6:	f007 f9f8 	bl	800769a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	0018      	movs	r0, r3
 80002ae:	2314      	movs	r3, #20
 80002b0:	001a      	movs	r2, r3
 80002b2:	2100      	movs	r1, #0
 80002b4:	f007 f9f1 	bl	800769a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80002b8:	0021      	movs	r1, r4
 80002ba:	187b      	adds	r3, r7, r1
 80002bc:	2212      	movs	r2, #18
 80002be:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c0:	187b      	adds	r3, r7, r1
 80002c2:	2201      	movs	r2, #1
 80002c4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80002c6:	187b      	adds	r3, r7, r1
 80002c8:	2201      	movs	r2, #1
 80002ca:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002cc:	187b      	adds	r3, r7, r1
 80002ce:	2210      	movs	r2, #16
 80002d0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80002d2:	187b      	adds	r3, r7, r1
 80002d4:	2210      	movs	r2, #16
 80002d6:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	2202      	movs	r2, #2
 80002dc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002de:	187b      	adds	r3, r7, r1
 80002e0:	2280      	movs	r2, #128	; 0x80
 80002e2:	0212      	lsls	r2, r2, #8
 80002e4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002e6:	187b      	adds	r3, r7, r1
 80002e8:	2280      	movs	r2, #128	; 0x80
 80002ea:	0352      	lsls	r2, r2, #13
 80002ec:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002ee:	187b      	adds	r3, r7, r1
 80002f0:	2200      	movs	r2, #0
 80002f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f4:	187b      	adds	r3, r7, r1
 80002f6:	0018      	movs	r0, r3
 80002f8:	f001 fdfe 	bl	8001ef8 <HAL_RCC_OscConfig>
 80002fc:	1e03      	subs	r3, r0, #0
 80002fe:	d001      	beq.n	8000304 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000300:	f000 fa4a 	bl	8000798 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000304:	2118      	movs	r1, #24
 8000306:	187b      	adds	r3, r7, r1
 8000308:	2207      	movs	r2, #7
 800030a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800030c:	187b      	adds	r3, r7, r1
 800030e:	2202      	movs	r2, #2
 8000310:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000312:	187b      	adds	r3, r7, r1
 8000314:	2200      	movs	r2, #0
 8000316:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000318:	187b      	adds	r3, r7, r1
 800031a:	2200      	movs	r2, #0
 800031c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800031e:	187b      	adds	r3, r7, r1
 8000320:	2101      	movs	r1, #1
 8000322:	0018      	movs	r0, r3
 8000324:	f002 f906 	bl	8002534 <HAL_RCC_ClockConfig>
 8000328:	1e03      	subs	r3, r0, #0
 800032a:	d001      	beq.n	8000330 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800032c:	f000 fa34 	bl	8000798 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000330:	1d3b      	adds	r3, r7, #4
 8000332:	2220      	movs	r2, #32
 8000334:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000336:	1d3b      	adds	r3, r7, #4
 8000338:	2200      	movs	r2, #0
 800033a:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800033c:	1d3b      	adds	r3, r7, #4
 800033e:	0018      	movs	r0, r3
 8000340:	f002 fa76 	bl	8002830 <HAL_RCCEx_PeriphCLKConfig>
 8000344:	1e03      	subs	r3, r0, #0
 8000346:	d001      	beq.n	800034c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000348:	f000 fa26 	bl	8000798 <Error_Handler>
  }
}
 800034c:	46c0      	nop			; (mov r8, r8)
 800034e:	46bd      	mov	sp, r7
 8000350:	b017      	add	sp, #92	; 0x5c
 8000352:	bd90      	pop	{r4, r7, pc}

08000354 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b084      	sub	sp, #16
 8000358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	0018      	movs	r0, r3
 800035e:	230c      	movs	r3, #12
 8000360:	001a      	movs	r2, r3
 8000362:	2100      	movs	r1, #0
 8000364:	f007 f999 	bl	800769a <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000368:	4b26      	ldr	r3, [pc, #152]	; (8000404 <MX_ADC_Init+0xb0>)
 800036a:	4a27      	ldr	r2, [pc, #156]	; (8000408 <MX_ADC_Init+0xb4>)
 800036c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800036e:	4b25      	ldr	r3, [pc, #148]	; (8000404 <MX_ADC_Init+0xb0>)
 8000370:	2200      	movs	r2, #0
 8000372:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000374:	4b23      	ldr	r3, [pc, #140]	; (8000404 <MX_ADC_Init+0xb0>)
 8000376:	2200      	movs	r2, #0
 8000378:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800037a:	4b22      	ldr	r3, [pc, #136]	; (8000404 <MX_ADC_Init+0xb0>)
 800037c:	2200      	movs	r2, #0
 800037e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000380:	4b20      	ldr	r3, [pc, #128]	; (8000404 <MX_ADC_Init+0xb0>)
 8000382:	2201      	movs	r2, #1
 8000384:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000386:	4b1f      	ldr	r3, [pc, #124]	; (8000404 <MX_ADC_Init+0xb0>)
 8000388:	2204      	movs	r2, #4
 800038a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800038c:	4b1d      	ldr	r3, [pc, #116]	; (8000404 <MX_ADC_Init+0xb0>)
 800038e:	2200      	movs	r2, #0
 8000390:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000392:	4b1c      	ldr	r3, [pc, #112]	; (8000404 <MX_ADC_Init+0xb0>)
 8000394:	2200      	movs	r2, #0
 8000396:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000398:	4b1a      	ldr	r3, [pc, #104]	; (8000404 <MX_ADC_Init+0xb0>)
 800039a:	2200      	movs	r2, #0
 800039c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800039e:	4b19      	ldr	r3, [pc, #100]	; (8000404 <MX_ADC_Init+0xb0>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003a4:	4b17      	ldr	r3, [pc, #92]	; (8000404 <MX_ADC_Init+0xb0>)
 80003a6:	22c2      	movs	r2, #194	; 0xc2
 80003a8:	32ff      	adds	r2, #255	; 0xff
 80003aa:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003ac:	4b15      	ldr	r3, [pc, #84]	; (8000404 <MX_ADC_Init+0xb0>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80003b2:	4b14      	ldr	r3, [pc, #80]	; (8000404 <MX_ADC_Init+0xb0>)
 80003b4:	2224      	movs	r2, #36	; 0x24
 80003b6:	2100      	movs	r1, #0
 80003b8:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003ba:	4b12      	ldr	r3, [pc, #72]	; (8000404 <MX_ADC_Init+0xb0>)
 80003bc:	2201      	movs	r2, #1
 80003be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80003c0:	4b10      	ldr	r3, [pc, #64]	; (8000404 <MX_ADC_Init+0xb0>)
 80003c2:	0018      	movs	r0, r3
 80003c4:	f000 fc18 	bl	8000bf8 <HAL_ADC_Init>
 80003c8:	1e03      	subs	r3, r0, #0
 80003ca:	d001      	beq.n	80003d0 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80003cc:	f000 f9e4 	bl	8000798 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003d0:	1d3b      	adds	r3, r7, #4
 80003d2:	2201      	movs	r2, #1
 80003d4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80003d6:	1d3b      	adds	r3, r7, #4
 80003d8:	2280      	movs	r2, #128	; 0x80
 80003da:	0152      	lsls	r2, r2, #5
 80003dc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	2280      	movs	r2, #128	; 0x80
 80003e2:	0552      	lsls	r2, r2, #21
 80003e4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003e6:	1d3a      	adds	r2, r7, #4
 80003e8:	4b06      	ldr	r3, [pc, #24]	; (8000404 <MX_ADC_Init+0xb0>)
 80003ea:	0011      	movs	r1, r2
 80003ec:	0018      	movs	r0, r3
 80003ee:	f000 fe13 	bl	8001018 <HAL_ADC_ConfigChannel>
 80003f2:	1e03      	subs	r3, r0, #0
 80003f4:	d001      	beq.n	80003fa <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80003f6:	f000 f9cf 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80003fa:	46c0      	nop			; (mov r8, r8)
 80003fc:	46bd      	mov	sp, r7
 80003fe:	b004      	add	sp, #16
 8000400:	bd80      	pop	{r7, pc}
 8000402:	46c0      	nop			; (mov r8, r8)
 8000404:	20000090 	.word	0x20000090
 8000408:	40012400 	.word	0x40012400

0800040c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000410:	4b1b      	ldr	r3, [pc, #108]	; (8000480 <MX_I2C1_Init+0x74>)
 8000412:	4a1c      	ldr	r2, [pc, #112]	; (8000484 <MX_I2C1_Init+0x78>)
 8000414:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8000416:	4b1a      	ldr	r3, [pc, #104]	; (8000480 <MX_I2C1_Init+0x74>)
 8000418:	4a1b      	ldr	r2, [pc, #108]	; (8000488 <MX_I2C1_Init+0x7c>)
 800041a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800041c:	4b18      	ldr	r3, [pc, #96]	; (8000480 <MX_I2C1_Init+0x74>)
 800041e:	2200      	movs	r2, #0
 8000420:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000422:	4b17      	ldr	r3, [pc, #92]	; (8000480 <MX_I2C1_Init+0x74>)
 8000424:	2201      	movs	r2, #1
 8000426:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000428:	4b15      	ldr	r3, [pc, #84]	; (8000480 <MX_I2C1_Init+0x74>)
 800042a:	2200      	movs	r2, #0
 800042c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800042e:	4b14      	ldr	r3, [pc, #80]	; (8000480 <MX_I2C1_Init+0x74>)
 8000430:	2200      	movs	r2, #0
 8000432:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000434:	4b12      	ldr	r3, [pc, #72]	; (8000480 <MX_I2C1_Init+0x74>)
 8000436:	2200      	movs	r2, #0
 8000438:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800043a:	4b11      	ldr	r3, [pc, #68]	; (8000480 <MX_I2C1_Init+0x74>)
 800043c:	2200      	movs	r2, #0
 800043e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000440:	4b0f      	ldr	r3, [pc, #60]	; (8000480 <MX_I2C1_Init+0x74>)
 8000442:	2200      	movs	r2, #0
 8000444:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000446:	4b0e      	ldr	r3, [pc, #56]	; (8000480 <MX_I2C1_Init+0x74>)
 8000448:	0018      	movs	r0, r3
 800044a:	f001 f993 	bl	8001774 <HAL_I2C_Init>
 800044e:	1e03      	subs	r3, r0, #0
 8000450:	d001      	beq.n	8000456 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000452:	f000 f9a1 	bl	8000798 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000456:	4b0a      	ldr	r3, [pc, #40]	; (8000480 <MX_I2C1_Init+0x74>)
 8000458:	2100      	movs	r1, #0
 800045a:	0018      	movs	r0, r3
 800045c:	f001 fcb4 	bl	8001dc8 <HAL_I2CEx_ConfigAnalogFilter>
 8000460:	1e03      	subs	r3, r0, #0
 8000462:	d001      	beq.n	8000468 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000464:	f000 f998 	bl	8000798 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000468:	4b05      	ldr	r3, [pc, #20]	; (8000480 <MX_I2C1_Init+0x74>)
 800046a:	2100      	movs	r1, #0
 800046c:	0018      	movs	r0, r3
 800046e:	f001 fcf7 	bl	8001e60 <HAL_I2CEx_ConfigDigitalFilter>
 8000472:	1e03      	subs	r3, r0, #0
 8000474:	d001      	beq.n	800047a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000476:	f000 f98f 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	200000d0 	.word	0x200000d0
 8000484:	40005400 	.word	0x40005400
 8000488:	0000020b 	.word	0x0000020b

0800048c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000490:	4b14      	ldr	r3, [pc, #80]	; (80004e4 <MX_USART2_UART_Init+0x58>)
 8000492:	4a15      	ldr	r2, [pc, #84]	; (80004e8 <MX_USART2_UART_Init+0x5c>)
 8000494:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000496:	4b13      	ldr	r3, [pc, #76]	; (80004e4 <MX_USART2_UART_Init+0x58>)
 8000498:	2296      	movs	r2, #150	; 0x96
 800049a:	0212      	lsls	r2, r2, #8
 800049c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800049e:	4b11      	ldr	r3, [pc, #68]	; (80004e4 <MX_USART2_UART_Init+0x58>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004a4:	4b0f      	ldr	r3, [pc, #60]	; (80004e4 <MX_USART2_UART_Init+0x58>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004aa:	4b0e      	ldr	r3, [pc, #56]	; (80004e4 <MX_USART2_UART_Init+0x58>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004b0:	4b0c      	ldr	r3, [pc, #48]	; (80004e4 <MX_USART2_UART_Init+0x58>)
 80004b2:	220c      	movs	r2, #12
 80004b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004b6:	4b0b      	ldr	r3, [pc, #44]	; (80004e4 <MX_USART2_UART_Init+0x58>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004bc:	4b09      	ldr	r3, [pc, #36]	; (80004e4 <MX_USART2_UART_Init+0x58>)
 80004be:	2200      	movs	r2, #0
 80004c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004c2:	4b08      	ldr	r3, [pc, #32]	; (80004e4 <MX_USART2_UART_Init+0x58>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004c8:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <MX_USART2_UART_Init+0x58>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004ce:	4b05      	ldr	r3, [pc, #20]	; (80004e4 <MX_USART2_UART_Init+0x58>)
 80004d0:	0018      	movs	r0, r3
 80004d2:	f002 fceb 	bl	8002eac <HAL_UART_Init>
 80004d6:	1e03      	subs	r3, r0, #0
 80004d8:	d001      	beq.n	80004de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004da:	f000 f95d 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	2000011c 	.word	0x2000011c
 80004e8:	40004400 	.word	0x40004400

080004ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004ec:	b590      	push	{r4, r7, lr}
 80004ee:	b08b      	sub	sp, #44	; 0x2c
 80004f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f2:	2414      	movs	r4, #20
 80004f4:	193b      	adds	r3, r7, r4
 80004f6:	0018      	movs	r0, r3
 80004f8:	2314      	movs	r3, #20
 80004fa:	001a      	movs	r2, r3
 80004fc:	2100      	movs	r1, #0
 80004fe:	f007 f8cc 	bl	800769a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000502:	4b34      	ldr	r3, [pc, #208]	; (80005d4 <MX_GPIO_Init+0xe8>)
 8000504:	695a      	ldr	r2, [r3, #20]
 8000506:	4b33      	ldr	r3, [pc, #204]	; (80005d4 <MX_GPIO_Init+0xe8>)
 8000508:	2180      	movs	r1, #128	; 0x80
 800050a:	0309      	lsls	r1, r1, #12
 800050c:	430a      	orrs	r2, r1
 800050e:	615a      	str	r2, [r3, #20]
 8000510:	4b30      	ldr	r3, [pc, #192]	; (80005d4 <MX_GPIO_Init+0xe8>)
 8000512:	695a      	ldr	r2, [r3, #20]
 8000514:	2380      	movs	r3, #128	; 0x80
 8000516:	031b      	lsls	r3, r3, #12
 8000518:	4013      	ands	r3, r2
 800051a:	613b      	str	r3, [r7, #16]
 800051c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800051e:	4b2d      	ldr	r3, [pc, #180]	; (80005d4 <MX_GPIO_Init+0xe8>)
 8000520:	695a      	ldr	r2, [r3, #20]
 8000522:	4b2c      	ldr	r3, [pc, #176]	; (80005d4 <MX_GPIO_Init+0xe8>)
 8000524:	2180      	movs	r1, #128	; 0x80
 8000526:	03c9      	lsls	r1, r1, #15
 8000528:	430a      	orrs	r2, r1
 800052a:	615a      	str	r2, [r3, #20]
 800052c:	4b29      	ldr	r3, [pc, #164]	; (80005d4 <MX_GPIO_Init+0xe8>)
 800052e:	695a      	ldr	r2, [r3, #20]
 8000530:	2380      	movs	r3, #128	; 0x80
 8000532:	03db      	lsls	r3, r3, #15
 8000534:	4013      	ands	r3, r2
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800053a:	4b26      	ldr	r3, [pc, #152]	; (80005d4 <MX_GPIO_Init+0xe8>)
 800053c:	695a      	ldr	r2, [r3, #20]
 800053e:	4b25      	ldr	r3, [pc, #148]	; (80005d4 <MX_GPIO_Init+0xe8>)
 8000540:	2180      	movs	r1, #128	; 0x80
 8000542:	0289      	lsls	r1, r1, #10
 8000544:	430a      	orrs	r2, r1
 8000546:	615a      	str	r2, [r3, #20]
 8000548:	4b22      	ldr	r3, [pc, #136]	; (80005d4 <MX_GPIO_Init+0xe8>)
 800054a:	695a      	ldr	r2, [r3, #20]
 800054c:	2380      	movs	r3, #128	; 0x80
 800054e:	029b      	lsls	r3, r3, #10
 8000550:	4013      	ands	r3, r2
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000556:	4b1f      	ldr	r3, [pc, #124]	; (80005d4 <MX_GPIO_Init+0xe8>)
 8000558:	695a      	ldr	r2, [r3, #20]
 800055a:	4b1e      	ldr	r3, [pc, #120]	; (80005d4 <MX_GPIO_Init+0xe8>)
 800055c:	2180      	movs	r1, #128	; 0x80
 800055e:	02c9      	lsls	r1, r1, #11
 8000560:	430a      	orrs	r2, r1
 8000562:	615a      	str	r2, [r3, #20]
 8000564:	4b1b      	ldr	r3, [pc, #108]	; (80005d4 <MX_GPIO_Init+0xe8>)
 8000566:	695a      	ldr	r2, [r3, #20]
 8000568:	2380      	movs	r3, #128	; 0x80
 800056a:	02db      	lsls	r3, r3, #11
 800056c:	4013      	ands	r3, r2
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000572:	2390      	movs	r3, #144	; 0x90
 8000574:	05db      	lsls	r3, r3, #23
 8000576:	2200      	movs	r2, #0
 8000578:	2120      	movs	r1, #32
 800057a:	0018      	movs	r0, r3
 800057c:	f001 f8dc 	bl	8001738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000580:	193b      	adds	r3, r7, r4
 8000582:	2280      	movs	r2, #128	; 0x80
 8000584:	0192      	lsls	r2, r2, #6
 8000586:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000588:	193b      	adds	r3, r7, r4
 800058a:	2284      	movs	r2, #132	; 0x84
 800058c:	0392      	lsls	r2, r2, #14
 800058e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000590:	193b      	adds	r3, r7, r4
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000596:	193b      	adds	r3, r7, r4
 8000598:	4a0f      	ldr	r2, [pc, #60]	; (80005d8 <MX_GPIO_Init+0xec>)
 800059a:	0019      	movs	r1, r3
 800059c:	0010      	movs	r0, r2
 800059e:	f000 ff5b 	bl	8001458 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005a2:	0021      	movs	r1, r4
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	2220      	movs	r2, #32
 80005a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005aa:	187b      	adds	r3, r7, r1
 80005ac:	2201      	movs	r2, #1
 80005ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b0:	187b      	adds	r3, r7, r1
 80005b2:	2200      	movs	r2, #0
 80005b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	2200      	movs	r2, #0
 80005ba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005bc:	187a      	adds	r2, r7, r1
 80005be:	2390      	movs	r3, #144	; 0x90
 80005c0:	05db      	lsls	r3, r3, #23
 80005c2:	0011      	movs	r1, r2
 80005c4:	0018      	movs	r0, r3
 80005c6:	f000 ff47 	bl	8001458 <HAL_GPIO_Init>

}
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	46bd      	mov	sp, r7
 80005ce:	b00b      	add	sp, #44	; 0x2c
 80005d0:	bd90      	pop	{r4, r7, pc}
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	40021000 	.word	0x40021000
 80005d8:	48000800 	.word	0x48000800

080005dc <u8x8_stm32_gpio_and_delay>:

/* USER CODE BEGIN 4 */
// Byte GPIO and Delay Callback
uint8_t u8x8_stm32_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
 80005dc:	b590      	push	{r4, r7, lr}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	0008      	movs	r0, r1
 80005e6:	0011      	movs	r1, r2
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	240b      	movs	r4, #11
 80005ec:	193b      	adds	r3, r7, r4
 80005ee:	1c02      	adds	r2, r0, #0
 80005f0:	701a      	strb	r2, [r3, #0]
 80005f2:	230a      	movs	r3, #10
 80005f4:	18fb      	adds	r3, r7, r3
 80005f6:	1c0a      	adds	r2, r1, #0
 80005f8:	701a      	strb	r2, [r3, #0]
	switch (msg) {
 80005fa:	193b      	adds	r3, r7, r4
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	2b28      	cmp	r3, #40	; 0x28
 8000600:	d002      	beq.n	8000608 <u8x8_stm32_gpio_and_delay+0x2c>
 8000602:	2b29      	cmp	r3, #41	; 0x29
 8000604:	d004      	beq.n	8000610 <u8x8_stm32_gpio_and_delay+0x34>
 8000606:	e00a      	b.n	800061e <u8x8_stm32_gpio_and_delay+0x42>
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		osDelay(1);
 8000608:	2001      	movs	r0, #1
 800060a:	f004 fecd 	bl	80053a8 <osDelay>
		break;
 800060e:	e00b      	b.n	8000628 <u8x8_stm32_gpio_and_delay+0x4c>
	case U8X8_MSG_DELAY_MILLI:
		osDelay(arg_int);
 8000610:	230a      	movs	r3, #10
 8000612:	18fb      	adds	r3, r7, r3
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	0018      	movs	r0, r3
 8000618:	f004 fec6 	bl	80053a8 <osDelay>
		break;
 800061c:	e004      	b.n	8000628 <u8x8_stm32_gpio_and_delay+0x4c>
	default:
		u8x8_SetGPIOResult(u8x8, 1);			// default return value
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	2227      	movs	r2, #39	; 0x27
 8000622:	2101      	movs	r1, #1
 8000624:	5499      	strb	r1, [r3, r2]
		break;
 8000626:	46c0      	nop			; (mov r8, r8)
	}
	return 1;
 8000628:	2301      	movs	r3, #1
}
 800062a:	0018      	movs	r0, r3
 800062c:	46bd      	mov	sp, r7
 800062e:	b005      	add	sp, #20
 8000630:	bd90      	pop	{r4, r7, pc}
	...

08000634 <u8x8_byte_i2c>:

// Communication Callback
uint8_t u8x8_byte_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8000634:	b590      	push	{r4, r7, lr}
 8000636:	b089      	sub	sp, #36	; 0x24
 8000638:	af02      	add	r7, sp, #8
 800063a:	60f8      	str	r0, [r7, #12]
 800063c:	0008      	movs	r0, r1
 800063e:	0011      	movs	r1, r2
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	240b      	movs	r4, #11
 8000644:	193b      	adds	r3, r7, r4
 8000646:	1c02      	adds	r2, r0, #0
 8000648:	701a      	strb	r2, [r3, #0]
 800064a:	230a      	movs	r3, #10
 800064c:	18fb      	adds	r3, r7, r3
 800064e:	1c0a      	adds	r2, r1, #0
 8000650:	701a      	strb	r2, [r3, #0]
	static uint8_t buffer[32];		/* u8g2/u8x8 will never send more than 32 bytes between START_TRANSFER and END_TRANSFER */
	static uint8_t buf_idx;
	uint8_t *data;

	switch(msg)
 8000652:	193b      	adds	r3, r7, r4
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	3b14      	subs	r3, #20
 8000658:	2b0c      	cmp	r3, #12
 800065a:	d837      	bhi.n	80006cc <u8x8_byte_i2c+0x98>
 800065c:	009a      	lsls	r2, r3, #2
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <u8x8_byte_i2c+0xa8>)
 8000660:	18d3      	adds	r3, r2, r3
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	469f      	mov	pc, r3
	{
	case U8X8_MSG_BYTE_SEND:
		data = (uint8_t *)arg_ptr;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	617b      	str	r3, [r7, #20]
		while( arg_int > 0 )
 800066a:	e013      	b.n	8000694 <u8x8_byte_i2c+0x60>
		{
			buffer[buf_idx++] = *data;
 800066c:	4b1c      	ldr	r3, [pc, #112]	; (80006e0 <u8x8_byte_i2c+0xac>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	1c5a      	adds	r2, r3, #1
 8000672:	b2d1      	uxtb	r1, r2
 8000674:	4a1a      	ldr	r2, [pc, #104]	; (80006e0 <u8x8_byte_i2c+0xac>)
 8000676:	7011      	strb	r1, [r2, #0]
 8000678:	001a      	movs	r2, r3
 800067a:	697b      	ldr	r3, [r7, #20]
 800067c:	7819      	ldrb	r1, [r3, #0]
 800067e:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <u8x8_byte_i2c+0xb0>)
 8000680:	5499      	strb	r1, [r3, r2]
			data++;
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	3301      	adds	r3, #1
 8000686:	617b      	str	r3, [r7, #20]
			arg_int--;
 8000688:	210a      	movs	r1, #10
 800068a:	187b      	adds	r3, r7, r1
 800068c:	781a      	ldrb	r2, [r3, #0]
 800068e:	187b      	adds	r3, r7, r1
 8000690:	3a01      	subs	r2, #1
 8000692:	701a      	strb	r2, [r3, #0]
		while( arg_int > 0 )
 8000694:	230a      	movs	r3, #10
 8000696:	18fb      	adds	r3, r7, r3
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d1e6      	bne.n	800066c <u8x8_byte_i2c+0x38>
		}
		break;
 800069e:	e018      	b.n	80006d2 <u8x8_byte_i2c+0x9e>
		break;
	case U8X8_MSG_BYTE_SET_DC:
		/* ignored for i2c */
		break;
	case U8X8_MSG_BYTE_START_TRANSFER:
		buf_idx = 0;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <u8x8_byte_i2c+0xac>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
		break;
 80006a6:	e014      	b.n	80006d2 <u8x8_byte_i2c+0x9e>
	case U8X8_MSG_BYTE_END_TRANSFER:
		HAL_I2C_Master_Transmit(&hi2c1, u8x8_GetI2CAddress(u8x8) << 1, buffer, buf_idx, 1000);
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	2224      	movs	r2, #36	; 0x24
 80006ac:	5c9b      	ldrb	r3, [r3, r2]
 80006ae:	b29b      	uxth	r3, r3
 80006b0:	18db      	adds	r3, r3, r3
 80006b2:	b299      	uxth	r1, r3
 80006b4:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <u8x8_byte_i2c+0xac>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	b29c      	uxth	r4, r3
 80006ba:	4a0a      	ldr	r2, [pc, #40]	; (80006e4 <u8x8_byte_i2c+0xb0>)
 80006bc:	480a      	ldr	r0, [pc, #40]	; (80006e8 <u8x8_byte_i2c+0xb4>)
 80006be:	23fa      	movs	r3, #250	; 0xfa
 80006c0:	009b      	lsls	r3, r3, #2
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	0023      	movs	r3, r4
 80006c6:	f001 f8eb 	bl	80018a0 <HAL_I2C_Master_Transmit>
		break;
 80006ca:	e002      	b.n	80006d2 <u8x8_byte_i2c+0x9e>
	default:
		return 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	e001      	b.n	80006d4 <u8x8_byte_i2c+0xa0>
		break;
 80006d0:	46c0      	nop			; (mov r8, r8)
	}
	return 1;
 80006d2:	2301      	movs	r3, #1
}
 80006d4:	0018      	movs	r0, r3
 80006d6:	46bd      	mov	sp, r7
 80006d8:	b007      	add	sp, #28
 80006da:	bd90      	pop	{r4, r7, pc}
 80006dc:	08007cf0 	.word	0x08007cf0
 80006e0:	200001a8 	.word	0x200001a8
 80006e4:	200001ac 	.word	0x200001ac
 80006e8:	200000d0 	.word	0x200000d0

080006ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006f4:	2001      	movs	r0, #1
 80006f6:	f004 fe57 	bl	80053a8 <osDelay>
 80006fa:	e7fb      	b.n	80006f4 <StartDefaultTask+0x8>

080006fc <oled_update>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_oled_update */
void oled_update(void *argument)
{
 80006fc:	b590      	push	{r4, r7, lr}
 80006fe:	b0ab      	sub	sp, #172	; 0xac
 8000700:	af02      	add	r7, sp, #8
 8000702:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN oled_update */
	u8g2_t u8g2;

	u8g2_Setup_ssd1306_i2c_128x64_noname_2(&u8g2, U8G2_R0, u8x8_byte_i2c, u8x8_stm32_gpio_and_delay);
 8000704:	4b17      	ldr	r3, [pc, #92]	; (8000764 <oled_update+0x68>)
 8000706:	4a18      	ldr	r2, [pc, #96]	; (8000768 <oled_update+0x6c>)
 8000708:	4918      	ldr	r1, [pc, #96]	; (800076c <oled_update+0x70>)
 800070a:	240c      	movs	r4, #12
 800070c:	1938      	adds	r0, r7, r4
 800070e:	f003 fcc7 	bl	80040a0 <u8g2_Setup_ssd1306_i2c_128x64_noname_2>
	u8g2_SetI2CAddress(&u8g2,0x3C);	// 0x78 = 0x3C << 1
 8000712:	0020      	movs	r0, r4
 8000714:	183b      	adds	r3, r7, r0
 8000716:	2224      	movs	r2, #36	; 0x24
 8000718:	213c      	movs	r1, #60	; 0x3c
 800071a:	5499      	strb	r1, [r3, r2]
	u8g2_InitDisplay(&u8g2); // send init sequence to the display, display is in sleep mode after this,
 800071c:	0004      	movs	r4, r0
 800071e:	183b      	adds	r3, r7, r0
 8000720:	0018      	movs	r0, r3
 8000722:	f004 fc94 	bl	800504e <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0); // wake up display
 8000726:	193b      	adds	r3, r7, r4
 8000728:	2100      	movs	r1, #0
 800072a:	0018      	movs	r0, r3
 800072c:	f004 fc9e 	bl	800506c <u8x8_SetPowerSave>
  /* Infinite loop */
	for(;;)
	{
		u8g2_FirstPage(&u8g2);
 8000730:	230c      	movs	r3, #12
 8000732:	18fb      	adds	r3, r7, r3
 8000734:	0018      	movs	r0, r3
 8000736:	f003 fc55 	bl	8003fe4 <u8g2_FirstPage>
		do {

			// dibujar background y barra medidora
			u8g2_DrawBitmap(&u8g2, 0, 0, 128/8, 64, background);
 800073a:	240c      	movs	r4, #12
 800073c:	1938      	adds	r0, r7, r4
 800073e:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <oled_update+0x74>)
 8000740:	9301      	str	r3, [sp, #4]
 8000742:	2340      	movs	r3, #64	; 0x40
 8000744:	9300      	str	r3, [sp, #0]
 8000746:	2310      	movs	r3, #16
 8000748:	2200      	movs	r2, #0
 800074a:	2100      	movs	r1, #0
 800074c:	f003 fb33 	bl	8003db6 <u8g2_DrawBitmap>

		} while (u8g2_NextPage(&u8g2));
 8000750:	193b      	adds	r3, r7, r4
 8000752:	0018      	movs	r0, r3
 8000754:	f003 fc5c 	bl	8004010 <u8g2_NextPage>
 8000758:	1e03      	subs	r3, r0, #0
 800075a:	d1ee      	bne.n	800073a <oled_update+0x3e>
		osDelay(1);
 800075c:	2001      	movs	r0, #1
 800075e:	f004 fe23 	bl	80053a8 <osDelay>
		u8g2_FirstPage(&u8g2);
 8000762:	e7e5      	b.n	8000730 <oled_update+0x34>
 8000764:	080005dd 	.word	0x080005dd
 8000768:	08000635 	.word	0x08000635
 800076c:	08007d3c 	.word	0x08007d3c
 8000770:	080078f0 	.word	0x080078f0

08000774 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a04      	ldr	r2, [pc, #16]	; (8000794 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d101      	bne.n	800078a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000786:	f000 fa1b 	bl	8000bc0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	46bd      	mov	sp, r7
 800078e:	b002      	add	sp, #8
 8000790:	bd80      	pop	{r7, pc}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	40012c00 	.word	0x40012c00

08000798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800079c:	b672      	cpsid	i
}
 800079e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <Error_Handler+0x8>
	...

080007a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007aa:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <HAL_MspInit+0x50>)
 80007ac:	699a      	ldr	r2, [r3, #24]
 80007ae:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <HAL_MspInit+0x50>)
 80007b0:	2101      	movs	r1, #1
 80007b2:	430a      	orrs	r2, r1
 80007b4:	619a      	str	r2, [r3, #24]
 80007b6:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <HAL_MspInit+0x50>)
 80007b8:	699b      	ldr	r3, [r3, #24]
 80007ba:	2201      	movs	r2, #1
 80007bc:	4013      	ands	r3, r2
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c2:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <HAL_MspInit+0x50>)
 80007c4:	69da      	ldr	r2, [r3, #28]
 80007c6:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <HAL_MspInit+0x50>)
 80007c8:	2180      	movs	r1, #128	; 0x80
 80007ca:	0549      	lsls	r1, r1, #21
 80007cc:	430a      	orrs	r2, r1
 80007ce:	61da      	str	r2, [r3, #28]
 80007d0:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <HAL_MspInit+0x50>)
 80007d2:	69da      	ldr	r2, [r3, #28]
 80007d4:	2380      	movs	r3, #128	; 0x80
 80007d6:	055b      	lsls	r3, r3, #21
 80007d8:	4013      	ands	r3, r2
 80007da:	603b      	str	r3, [r7, #0]
 80007dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80007de:	2302      	movs	r3, #2
 80007e0:	425b      	negs	r3, r3
 80007e2:	2200      	movs	r2, #0
 80007e4:	2103      	movs	r1, #3
 80007e6:	0018      	movs	r0, r3
 80007e8:	f000 fd94 	bl	8001314 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ec:	46c0      	nop			; (mov r8, r8)
 80007ee:	46bd      	mov	sp, r7
 80007f0:	b002      	add	sp, #8
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40021000 	.word	0x40021000

080007f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007f8:	b590      	push	{r4, r7, lr}
 80007fa:	b08b      	sub	sp, #44	; 0x2c
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000800:	2414      	movs	r4, #20
 8000802:	193b      	adds	r3, r7, r4
 8000804:	0018      	movs	r0, r3
 8000806:	2314      	movs	r3, #20
 8000808:	001a      	movs	r2, r3
 800080a:	2100      	movs	r1, #0
 800080c:	f006 ff45 	bl	800769a <memset>
  if(hadc->Instance==ADC1)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a1d      	ldr	r2, [pc, #116]	; (800088c <HAL_ADC_MspInit+0x94>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d133      	bne.n	8000882 <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800081a:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <HAL_ADC_MspInit+0x98>)
 800081c:	699a      	ldr	r2, [r3, #24]
 800081e:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <HAL_ADC_MspInit+0x98>)
 8000820:	2180      	movs	r1, #128	; 0x80
 8000822:	0089      	lsls	r1, r1, #2
 8000824:	430a      	orrs	r2, r1
 8000826:	619a      	str	r2, [r3, #24]
 8000828:	4b19      	ldr	r3, [pc, #100]	; (8000890 <HAL_ADC_MspInit+0x98>)
 800082a:	699a      	ldr	r2, [r3, #24]
 800082c:	2380      	movs	r3, #128	; 0x80
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	4013      	ands	r3, r2
 8000832:	613b      	str	r3, [r7, #16]
 8000834:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	4b16      	ldr	r3, [pc, #88]	; (8000890 <HAL_ADC_MspInit+0x98>)
 8000838:	695a      	ldr	r2, [r3, #20]
 800083a:	4b15      	ldr	r3, [pc, #84]	; (8000890 <HAL_ADC_MspInit+0x98>)
 800083c:	2180      	movs	r1, #128	; 0x80
 800083e:	0289      	lsls	r1, r1, #10
 8000840:	430a      	orrs	r2, r1
 8000842:	615a      	str	r2, [r3, #20]
 8000844:	4b12      	ldr	r3, [pc, #72]	; (8000890 <HAL_ADC_MspInit+0x98>)
 8000846:	695a      	ldr	r2, [r3, #20]
 8000848:	2380      	movs	r3, #128	; 0x80
 800084a:	029b      	lsls	r3, r3, #10
 800084c:	4013      	ands	r3, r2
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000852:	193b      	adds	r3, r7, r4
 8000854:	2202      	movs	r2, #2
 8000856:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000858:	193b      	adds	r3, r7, r4
 800085a:	2203      	movs	r2, #3
 800085c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	193b      	adds	r3, r7, r4
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000864:	193a      	adds	r2, r7, r4
 8000866:	2390      	movs	r3, #144	; 0x90
 8000868:	05db      	lsls	r3, r3, #23
 800086a:	0011      	movs	r1, r2
 800086c:	0018      	movs	r0, r3
 800086e:	f000 fdf3 	bl	8001458 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 3, 0);
 8000872:	2200      	movs	r2, #0
 8000874:	2103      	movs	r1, #3
 8000876:	200c      	movs	r0, #12
 8000878:	f000 fd4c 	bl	8001314 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800087c:	200c      	movs	r0, #12
 800087e:	f000 fd5e 	bl	800133e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	46bd      	mov	sp, r7
 8000886:	b00b      	add	sp, #44	; 0x2c
 8000888:	bd90      	pop	{r4, r7, pc}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	40012400 	.word	0x40012400
 8000890:	40021000 	.word	0x40021000

08000894 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000894:	b590      	push	{r4, r7, lr}
 8000896:	b08b      	sub	sp, #44	; 0x2c
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089c:	2414      	movs	r4, #20
 800089e:	193b      	adds	r3, r7, r4
 80008a0:	0018      	movs	r0, r3
 80008a2:	2314      	movs	r3, #20
 80008a4:	001a      	movs	r2, r3
 80008a6:	2100      	movs	r1, #0
 80008a8:	f006 fef7 	bl	800769a <memset>
  if(hi2c->Instance==I2C1)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a1c      	ldr	r2, [pc, #112]	; (8000924 <HAL_I2C_MspInit+0x90>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d132      	bne.n	800091c <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b6:	4b1c      	ldr	r3, [pc, #112]	; (8000928 <HAL_I2C_MspInit+0x94>)
 80008b8:	695a      	ldr	r2, [r3, #20]
 80008ba:	4b1b      	ldr	r3, [pc, #108]	; (8000928 <HAL_I2C_MspInit+0x94>)
 80008bc:	2180      	movs	r1, #128	; 0x80
 80008be:	02c9      	lsls	r1, r1, #11
 80008c0:	430a      	orrs	r2, r1
 80008c2:	615a      	str	r2, [r3, #20]
 80008c4:	4b18      	ldr	r3, [pc, #96]	; (8000928 <HAL_I2C_MspInit+0x94>)
 80008c6:	695a      	ldr	r2, [r3, #20]
 80008c8:	2380      	movs	r3, #128	; 0x80
 80008ca:	02db      	lsls	r3, r3, #11
 80008cc:	4013      	ands	r3, r2
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008d2:	193b      	adds	r3, r7, r4
 80008d4:	22c0      	movs	r2, #192	; 0xc0
 80008d6:	0092      	lsls	r2, r2, #2
 80008d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008da:	0021      	movs	r1, r4
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	2212      	movs	r2, #18
 80008e0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	187b      	adds	r3, r7, r1
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008e8:	187b      	adds	r3, r7, r1
 80008ea:	2203      	movs	r2, #3
 80008ec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80008ee:	187b      	adds	r3, r7, r1
 80008f0:	2201      	movs	r2, #1
 80008f2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f4:	187b      	adds	r3, r7, r1
 80008f6:	4a0d      	ldr	r2, [pc, #52]	; (800092c <HAL_I2C_MspInit+0x98>)
 80008f8:	0019      	movs	r1, r3
 80008fa:	0010      	movs	r0, r2
 80008fc:	f000 fdac 	bl	8001458 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000900:	4b09      	ldr	r3, [pc, #36]	; (8000928 <HAL_I2C_MspInit+0x94>)
 8000902:	69da      	ldr	r2, [r3, #28]
 8000904:	4b08      	ldr	r3, [pc, #32]	; (8000928 <HAL_I2C_MspInit+0x94>)
 8000906:	2180      	movs	r1, #128	; 0x80
 8000908:	0389      	lsls	r1, r1, #14
 800090a:	430a      	orrs	r2, r1
 800090c:	61da      	str	r2, [r3, #28]
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <HAL_I2C_MspInit+0x94>)
 8000910:	69da      	ldr	r2, [r3, #28]
 8000912:	2380      	movs	r3, #128	; 0x80
 8000914:	039b      	lsls	r3, r3, #14
 8000916:	4013      	ands	r3, r2
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800091c:	46c0      	nop			; (mov r8, r8)
 800091e:	46bd      	mov	sp, r7
 8000920:	b00b      	add	sp, #44	; 0x2c
 8000922:	bd90      	pop	{r4, r7, pc}
 8000924:	40005400 	.word	0x40005400
 8000928:	40021000 	.word	0x40021000
 800092c:	48000400 	.word	0x48000400

08000930 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000930:	b590      	push	{r4, r7, lr}
 8000932:	b08b      	sub	sp, #44	; 0x2c
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000938:	2414      	movs	r4, #20
 800093a:	193b      	adds	r3, r7, r4
 800093c:	0018      	movs	r0, r3
 800093e:	2314      	movs	r3, #20
 8000940:	001a      	movs	r2, r3
 8000942:	2100      	movs	r1, #0
 8000944:	f006 fea9 	bl	800769a <memset>
  if(huart->Instance==USART2)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a20      	ldr	r2, [pc, #128]	; (80009d0 <HAL_UART_MspInit+0xa0>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d13a      	bne.n	80009c8 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000952:	4b20      	ldr	r3, [pc, #128]	; (80009d4 <HAL_UART_MspInit+0xa4>)
 8000954:	69da      	ldr	r2, [r3, #28]
 8000956:	4b1f      	ldr	r3, [pc, #124]	; (80009d4 <HAL_UART_MspInit+0xa4>)
 8000958:	2180      	movs	r1, #128	; 0x80
 800095a:	0289      	lsls	r1, r1, #10
 800095c:	430a      	orrs	r2, r1
 800095e:	61da      	str	r2, [r3, #28]
 8000960:	4b1c      	ldr	r3, [pc, #112]	; (80009d4 <HAL_UART_MspInit+0xa4>)
 8000962:	69da      	ldr	r2, [r3, #28]
 8000964:	2380      	movs	r3, #128	; 0x80
 8000966:	029b      	lsls	r3, r3, #10
 8000968:	4013      	ands	r3, r2
 800096a:	613b      	str	r3, [r7, #16]
 800096c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096e:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <HAL_UART_MspInit+0xa4>)
 8000970:	695a      	ldr	r2, [r3, #20]
 8000972:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <HAL_UART_MspInit+0xa4>)
 8000974:	2180      	movs	r1, #128	; 0x80
 8000976:	0289      	lsls	r1, r1, #10
 8000978:	430a      	orrs	r2, r1
 800097a:	615a      	str	r2, [r3, #20]
 800097c:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <HAL_UART_MspInit+0xa4>)
 800097e:	695a      	ldr	r2, [r3, #20]
 8000980:	2380      	movs	r3, #128	; 0x80
 8000982:	029b      	lsls	r3, r3, #10
 8000984:	4013      	ands	r3, r2
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800098a:	0021      	movs	r1, r4
 800098c:	187b      	adds	r3, r7, r1
 800098e:	220c      	movs	r2, #12
 8000990:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000992:	187b      	adds	r3, r7, r1
 8000994:	2202      	movs	r2, #2
 8000996:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	187b      	adds	r3, r7, r1
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800099e:	187b      	adds	r3, r7, r1
 80009a0:	2203      	movs	r2, #3
 80009a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80009a4:	187b      	adds	r3, r7, r1
 80009a6:	2201      	movs	r2, #1
 80009a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009aa:	187a      	adds	r2, r7, r1
 80009ac:	2390      	movs	r3, #144	; 0x90
 80009ae:	05db      	lsls	r3, r3, #23
 80009b0:	0011      	movs	r1, r2
 80009b2:	0018      	movs	r0, r3
 80009b4:	f000 fd50 	bl	8001458 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 80009b8:	2200      	movs	r2, #0
 80009ba:	2103      	movs	r1, #3
 80009bc:	201c      	movs	r0, #28
 80009be:	f000 fca9 	bl	8001314 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009c2:	201c      	movs	r0, #28
 80009c4:	f000 fcbb 	bl	800133e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009c8:	46c0      	nop			; (mov r8, r8)
 80009ca:	46bd      	mov	sp, r7
 80009cc:	b00b      	add	sp, #44	; 0x2c
 80009ce:	bd90      	pop	{r4, r7, pc}
 80009d0:	40004400 	.word	0x40004400
 80009d4:	40021000 	.word	0x40021000

080009d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d8:	b5b0      	push	{r4, r5, r7, lr}
 80009da:	b08c      	sub	sp, #48	; 0x30
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24

  uint32_t              uwPrescalerValue = 0U;
 80009e4:	2300      	movs	r3, #0
 80009e6:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80009e8:	4b38      	ldr	r3, [pc, #224]	; (8000acc <HAL_InitTick+0xf4>)
 80009ea:	699a      	ldr	r2, [r3, #24]
 80009ec:	4b37      	ldr	r3, [pc, #220]	; (8000acc <HAL_InitTick+0xf4>)
 80009ee:	2180      	movs	r1, #128	; 0x80
 80009f0:	0109      	lsls	r1, r1, #4
 80009f2:	430a      	orrs	r2, r1
 80009f4:	619a      	str	r2, [r3, #24]
 80009f6:	4b35      	ldr	r3, [pc, #212]	; (8000acc <HAL_InitTick+0xf4>)
 80009f8:	699a      	ldr	r2, [r3, #24]
 80009fa:	2380      	movs	r3, #128	; 0x80
 80009fc:	011b      	lsls	r3, r3, #4
 80009fe:	4013      	ands	r3, r2
 8000a00:	60bb      	str	r3, [r7, #8]
 8000a02:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a04:	230c      	movs	r3, #12
 8000a06:	18fa      	adds	r2, r7, r3
 8000a08:	2410      	movs	r4, #16
 8000a0a:	193b      	adds	r3, r7, r4
 8000a0c:	0011      	movs	r1, r2
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f001 fee4 	bl	80027dc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a14:	193b      	adds	r3, r7, r4
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM1 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d104      	bne.n	8000a2a <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a20:	f001 fec6 	bl	80027b0 <HAL_RCC_GetPCLK1Freq>
 8000a24:	0003      	movs	r3, r0
 8000a26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a28:	e004      	b.n	8000a34 <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a2a:	f001 fec1 	bl	80027b0 <HAL_RCC_GetPCLK1Freq>
 8000a2e:	0003      	movs	r3, r0
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a36:	4926      	ldr	r1, [pc, #152]	; (8000ad0 <HAL_InitTick+0xf8>)
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f7ff fb65 	bl	8000108 <__udivsi3>
 8000a3e:	0003      	movs	r3, r0
 8000a40:	3b01      	subs	r3, #1
 8000a42:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a44:	4b23      	ldr	r3, [pc, #140]	; (8000ad4 <HAL_InitTick+0xfc>)
 8000a46:	4a24      	ldr	r2, [pc, #144]	; (8000ad8 <HAL_InitTick+0x100>)
 8000a48:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a4a:	4b22      	ldr	r3, [pc, #136]	; (8000ad4 <HAL_InitTick+0xfc>)
 8000a4c:	4a23      	ldr	r2, [pc, #140]	; (8000adc <HAL_InitTick+0x104>)
 8000a4e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a50:	4b20      	ldr	r3, [pc, #128]	; (8000ad4 <HAL_InitTick+0xfc>)
 8000a52:	6a3a      	ldr	r2, [r7, #32]
 8000a54:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 8000a56:	4b1f      	ldr	r3, [pc, #124]	; (8000ad4 <HAL_InitTick+0xfc>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a5c:	4b1d      	ldr	r3, [pc, #116]	; (8000ad4 <HAL_InitTick+0xfc>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a62:	4b1c      	ldr	r3, [pc, #112]	; (8000ad4 <HAL_InitTick+0xfc>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a68:	252b      	movs	r5, #43	; 0x2b
 8000a6a:	197c      	adds	r4, r7, r5
 8000a6c:	4b19      	ldr	r3, [pc, #100]	; (8000ad4 <HAL_InitTick+0xfc>)
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f001 ffbc 	bl	80029ec <HAL_TIM_Base_Init>
 8000a74:	0003      	movs	r3, r0
 8000a76:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8000a78:	197b      	adds	r3, r7, r5
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d11e      	bne.n	8000abe <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a80:	197c      	adds	r4, r7, r5
 8000a82:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <HAL_InitTick+0xfc>)
 8000a84:	0018      	movs	r0, r3
 8000a86:	f002 f809 	bl	8002a9c <HAL_TIM_Base_Start_IT>
 8000a8a:	0003      	movs	r3, r0
 8000a8c:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8000a8e:	197b      	adds	r3, r7, r5
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d113      	bne.n	8000abe <HAL_InitTick+0xe6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000a96:	200d      	movs	r0, #13
 8000a98:	f000 fc51 	bl	800133e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2b03      	cmp	r3, #3
 8000aa0:	d809      	bhi.n	8000ab6 <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority, 0U);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	0019      	movs	r1, r3
 8000aa8:	200d      	movs	r0, #13
 8000aaa:	f000 fc33 	bl	8001314 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aae:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <HAL_InitTick+0x108>)
 8000ab0:	687a      	ldr	r2, [r7, #4]
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	e003      	b.n	8000abe <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 8000ab6:	232b      	movs	r3, #43	; 0x2b
 8000ab8:	18fb      	adds	r3, r7, r3
 8000aba:	2201      	movs	r2, #1
 8000abc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8000abe:	232b      	movs	r3, #43	; 0x2b
 8000ac0:	18fb      	adds	r3, r7, r3
 8000ac2:	781b      	ldrb	r3, [r3, #0]
}
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	b00c      	add	sp, #48	; 0x30
 8000aca:	bdb0      	pop	{r4, r5, r7, pc}
 8000acc:	40021000 	.word	0x40021000
 8000ad0:	000f4240 	.word	0x000f4240
 8000ad4:	200001cc 	.word	0x200001cc
 8000ad8:	40012c00 	.word	0x40012c00
 8000adc:	000003e7 	.word	0x000003e7
 8000ae0:	20000004 	.word	0x20000004

08000ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <NMI_Handler+0x4>

08000aea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aee:	e7fe      	b.n	8000aee <HardFault_Handler+0x4>

08000af0 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8000af4:	4b03      	ldr	r3, [pc, #12]	; (8000b04 <ADC1_IRQHandler+0x14>)
 8000af6:	0018      	movs	r0, r3
 8000af8:	f000 f9be 	bl	8000e78 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8000afc:	46c0      	nop			; (mov r8, r8)
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	20000090 	.word	0x20000090

08000b08 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b0c:	4b03      	ldr	r3, [pc, #12]	; (8000b1c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f002 f810 	bl	8002b34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000b14:	46c0      	nop			; (mov r8, r8)
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	200001cc 	.word	0x200001cc

08000b20 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b24:	4b03      	ldr	r3, [pc, #12]	; (8000b34 <USART2_IRQHandler+0x14>)
 8000b26:	0018      	movs	r0, r3
 8000b28:	f002 fa14 	bl	8002f54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b2c:	46c0      	nop			; (mov r8, r8)
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	2000011c 	.word	0x2000011c

08000b38 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000b3c:	46c0      	nop			; (mov r8, r8)
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
	...

08000b44 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b44:	480d      	ldr	r0, [pc, #52]	; (8000b7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b46:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b48:	480d      	ldr	r0, [pc, #52]	; (8000b80 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b4a:	490e      	ldr	r1, [pc, #56]	; (8000b84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b4c:	4a0e      	ldr	r2, [pc, #56]	; (8000b88 <LoopForever+0xe>)
  movs r3, #0
 8000b4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b50:	e002      	b.n	8000b58 <LoopCopyDataInit>

08000b52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b56:	3304      	adds	r3, #4

08000b58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b5c:	d3f9      	bcc.n	8000b52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b5e:	4a0b      	ldr	r2, [pc, #44]	; (8000b8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b60:	4c0b      	ldr	r4, [pc, #44]	; (8000b90 <LoopForever+0x16>)
  movs r3, #0
 8000b62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b64:	e001      	b.n	8000b6a <LoopFillZerobss>

08000b66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b68:	3204      	adds	r2, #4

08000b6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b6c:	d3fb      	bcc.n	8000b66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b6e:	f7ff ffe3 	bl	8000b38 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000b72:	f006 fd63 	bl	800763c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b76:	f7ff fb53 	bl	8000220 <main>

08000b7a <LoopForever>:

LoopForever:
    b LoopForever
 8000b7a:	e7fe      	b.n	8000b7a <LoopForever>
  ldr   r0, =_estack
 8000b7c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000b80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b84:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000b88:	08007e60 	.word	0x08007e60
  ldr r2, =_sbss
 8000b8c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000b90:	20001d24 	.word	0x20001d24

08000b94 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b94:	e7fe      	b.n	8000b94 <DMA1_Channel1_IRQHandler>
	...

08000b98 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b9c:	4b07      	ldr	r3, [pc, #28]	; (8000bbc <HAL_Init+0x24>)
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <HAL_Init+0x24>)
 8000ba2:	2110      	movs	r1, #16
 8000ba4:	430a      	orrs	r2, r1
 8000ba6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000ba8:	2003      	movs	r0, #3
 8000baa:	f7ff ff15 	bl	80009d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bae:	f7ff fdf9 	bl	80007a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bb2:	2300      	movs	r3, #0
}
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	40022000 	.word	0x40022000

08000bc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bc4:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <HAL_IncTick+0x1c>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	001a      	movs	r2, r3
 8000bca:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <HAL_IncTick+0x20>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	18d2      	adds	r2, r2, r3
 8000bd0:	4b03      	ldr	r3, [pc, #12]	; (8000be0 <HAL_IncTick+0x20>)
 8000bd2:	601a      	str	r2, [r3, #0]
}
 8000bd4:	46c0      	nop			; (mov r8, r8)
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	20000008 	.word	0x20000008
 8000be0:	20000214 	.word	0x20000214

08000be4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  return uwTick;
 8000be8:	4b02      	ldr	r3, [pc, #8]	; (8000bf4 <HAL_GetTick+0x10>)
 8000bea:	681b      	ldr	r3, [r3, #0]
}
 8000bec:	0018      	movs	r0, r3
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	46c0      	nop			; (mov r8, r8)
 8000bf4:	20000214 	.word	0x20000214

08000bf8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c00:	230f      	movs	r3, #15
 8000c02:	18fb      	adds	r3, r7, r3
 8000c04:	2200      	movs	r2, #0
 8000c06:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d101      	bne.n	8000c16 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	e125      	b.n	8000e62 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d10a      	bne.n	8000c34 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2200      	movs	r2, #0
 8000c22:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2234      	movs	r2, #52	; 0x34
 8000c28:	2100      	movs	r1, #0
 8000c2a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f7ff fde2 	bl	80007f8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c38:	2210      	movs	r2, #16
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	d000      	beq.n	8000c40 <HAL_ADC_Init+0x48>
 8000c3e:	e103      	b.n	8000e48 <HAL_ADC_Init+0x250>
 8000c40:	230f      	movs	r3, #15
 8000c42:	18fb      	adds	r3, r7, r3
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d000      	beq.n	8000c4c <HAL_ADC_Init+0x54>
 8000c4a:	e0fd      	b.n	8000e48 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	2204      	movs	r2, #4
 8000c54:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000c56:	d000      	beq.n	8000c5a <HAL_ADC_Init+0x62>
 8000c58:	e0f6      	b.n	8000e48 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c5e:	4a83      	ldr	r2, [pc, #524]	; (8000e6c <HAL_ADC_Init+0x274>)
 8000c60:	4013      	ands	r3, r2
 8000c62:	2202      	movs	r2, #2
 8000c64:	431a      	orrs	r2, r3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	2203      	movs	r2, #3
 8000c72:	4013      	ands	r3, r2
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d112      	bne.n	8000c9e <HAL_ADC_Init+0xa6>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2201      	movs	r2, #1
 8000c80:	4013      	ands	r3, r2
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d009      	beq.n	8000c9a <HAL_ADC_Init+0xa2>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	68da      	ldr	r2, [r3, #12]
 8000c8c:	2380      	movs	r3, #128	; 0x80
 8000c8e:	021b      	lsls	r3, r3, #8
 8000c90:	401a      	ands	r2, r3
 8000c92:	2380      	movs	r3, #128	; 0x80
 8000c94:	021b      	lsls	r3, r3, #8
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d101      	bne.n	8000c9e <HAL_ADC_Init+0xa6>
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e000      	b.n	8000ca0 <HAL_ADC_Init+0xa8>
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d116      	bne.n	8000cd2 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	68db      	ldr	r3, [r3, #12]
 8000caa:	2218      	movs	r2, #24
 8000cac:	4393      	bics	r3, r2
 8000cae:	0019      	movs	r1, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	689a      	ldr	r2, [r3, #8]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	430a      	orrs	r2, r1
 8000cba:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	691b      	ldr	r3, [r3, #16]
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	0899      	lsrs	r1, r3, #2
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	685a      	ldr	r2, [r3, #4]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	430a      	orrs	r2, r1
 8000cd0:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	68da      	ldr	r2, [r3, #12]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4964      	ldr	r1, [pc, #400]	; (8000e70 <HAL_ADC_Init+0x278>)
 8000cde:	400a      	ands	r2, r1
 8000ce0:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	7e1b      	ldrb	r3, [r3, #24]
 8000ce6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	7e5b      	ldrb	r3, [r3, #25]
 8000cec:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000cee:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	7e9b      	ldrb	r3, [r3, #26]
 8000cf4:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000cf6:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d002      	beq.n	8000d06 <HAL_ADC_Init+0x10e>
 8000d00:	2380      	movs	r3, #128	; 0x80
 8000d02:	015b      	lsls	r3, r3, #5
 8000d04:	e000      	b.n	8000d08 <HAL_ADC_Init+0x110>
 8000d06:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000d08:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000d0e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	691b      	ldr	r3, [r3, #16]
 8000d14:	2b02      	cmp	r3, #2
 8000d16:	d101      	bne.n	8000d1c <HAL_ADC_Init+0x124>
 8000d18:	2304      	movs	r3, #4
 8000d1a:	e000      	b.n	8000d1e <HAL_ADC_Init+0x126>
 8000d1c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000d1e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2124      	movs	r1, #36	; 0x24
 8000d24:	5c5b      	ldrb	r3, [r3, r1]
 8000d26:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000d28:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000d2a:	68ba      	ldr	r2, [r7, #8]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	7edb      	ldrb	r3, [r3, #27]
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d115      	bne.n	8000d64 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	7e9b      	ldrb	r3, [r3, #26]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d105      	bne.n	8000d4c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	2280      	movs	r2, #128	; 0x80
 8000d44:	0252      	lsls	r2, r2, #9
 8000d46:	4313      	orrs	r3, r2
 8000d48:	60bb      	str	r3, [r7, #8]
 8000d4a:	e00b      	b.n	8000d64 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d50:	2220      	movs	r2, #32
 8000d52:	431a      	orrs	r2, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	431a      	orrs	r2, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	69da      	ldr	r2, [r3, #28]
 8000d68:	23c2      	movs	r3, #194	; 0xc2
 8000d6a:	33ff      	adds	r3, #255	; 0xff
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d007      	beq.n	8000d80 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	68ba      	ldr	r2, [r7, #8]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	68d9      	ldr	r1, [r3, #12]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	68ba      	ldr	r2, [r7, #8]
 8000d8c:	430a      	orrs	r2, r1
 8000d8e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d94:	2380      	movs	r3, #128	; 0x80
 8000d96:	055b      	lsls	r3, r3, #21
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d01b      	beq.n	8000dd4 <HAL_ADC_Init+0x1dc>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d017      	beq.n	8000dd4 <HAL_ADC_Init+0x1dc>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	d013      	beq.n	8000dd4 <HAL_ADC_Init+0x1dc>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db0:	2b03      	cmp	r3, #3
 8000db2:	d00f      	beq.n	8000dd4 <HAL_ADC_Init+0x1dc>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db8:	2b04      	cmp	r3, #4
 8000dba:	d00b      	beq.n	8000dd4 <HAL_ADC_Init+0x1dc>
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc0:	2b05      	cmp	r3, #5
 8000dc2:	d007      	beq.n	8000dd4 <HAL_ADC_Init+0x1dc>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc8:	2b06      	cmp	r3, #6
 8000dca:	d003      	beq.n	8000dd4 <HAL_ADC_Init+0x1dc>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd0:	2b07      	cmp	r3, #7
 8000dd2:	d112      	bne.n	8000dfa <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	695a      	ldr	r2, [r3, #20]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2107      	movs	r1, #7
 8000de0:	438a      	bics	r2, r1
 8000de2:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	6959      	ldr	r1, [r3, #20]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dee:	2207      	movs	r2, #7
 8000df0:	401a      	ands	r2, r3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	430a      	orrs	r2, r1
 8000df8:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	4a1c      	ldr	r2, [pc, #112]	; (8000e74 <HAL_ADC_Init+0x27c>)
 8000e02:	4013      	ands	r3, r2
 8000e04:	68ba      	ldr	r2, [r7, #8]
 8000e06:	429a      	cmp	r2, r3
 8000e08:	d10b      	bne.n	8000e22 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e14:	2203      	movs	r2, #3
 8000e16:	4393      	bics	r3, r2
 8000e18:	2201      	movs	r2, #1
 8000e1a:	431a      	orrs	r2, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000e20:	e01c      	b.n	8000e5c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e26:	2212      	movs	r2, #18
 8000e28:	4393      	bics	r3, r2
 8000e2a:	2210      	movs	r2, #16
 8000e2c:	431a      	orrs	r2, r3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e36:	2201      	movs	r2, #1
 8000e38:	431a      	orrs	r2, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000e3e:	230f      	movs	r3, #15
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	2201      	movs	r2, #1
 8000e44:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000e46:	e009      	b.n	8000e5c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e4c:	2210      	movs	r2, #16
 8000e4e:	431a      	orrs	r2, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000e54:	230f      	movs	r3, #15
 8000e56:	18fb      	adds	r3, r7, r3
 8000e58:	2201      	movs	r2, #1
 8000e5a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e5c:	230f      	movs	r3, #15
 8000e5e:	18fb      	adds	r3, r7, r3
 8000e60:	781b      	ldrb	r3, [r3, #0]
}
 8000e62:	0018      	movs	r0, r3
 8000e64:	46bd      	mov	sp, r7
 8000e66:	b004      	add	sp, #16
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	46c0      	nop			; (mov r8, r8)
 8000e6c:	fffffefd 	.word	0xfffffefd
 8000e70:	fffe0219 	.word	0xfffe0219
 8000e74:	833fffe7 	.word	0x833fffe7

08000e78 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2204      	movs	r2, #4
 8000e88:	4013      	ands	r3, r2
 8000e8a:	2b04      	cmp	r3, #4
 8000e8c:	d106      	bne.n	8000e9c <HAL_ADC_IRQHandler+0x24>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	2204      	movs	r2, #4
 8000e96:	4013      	ands	r3, r2
 8000e98:	2b04      	cmp	r3, #4
 8000e9a:	d00d      	beq.n	8000eb8 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2208      	movs	r2, #8
 8000ea4:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000ea6:	2b08      	cmp	r3, #8
 8000ea8:	d14f      	bne.n	8000f4a <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	2208      	movs	r2, #8
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	2b08      	cmp	r3, #8
 8000eb6:	d148      	bne.n	8000f4a <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ebc:	2210      	movs	r2, #16
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	d106      	bne.n	8000ed0 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ec6:	2280      	movs	r2, #128	; 0x80
 8000ec8:	0092      	lsls	r2, r2, #2
 8000eca:	431a      	orrs	r2, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	68da      	ldr	r2, [r3, #12]
 8000ed6:	23c0      	movs	r3, #192	; 0xc0
 8000ed8:	011b      	lsls	r3, r3, #4
 8000eda:	4013      	ands	r3, r2
 8000edc:	d12d      	bne.n	8000f3a <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d129      	bne.n	8000f3a <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2208      	movs	r2, #8
 8000eee:	4013      	ands	r3, r2
 8000ef0:	2b08      	cmp	r3, #8
 8000ef2:	d122      	bne.n	8000f3a <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	2204      	movs	r2, #4
 8000efc:	4013      	ands	r3, r2
 8000efe:	d110      	bne.n	8000f22 <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	685a      	ldr	r2, [r3, #4]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	210c      	movs	r1, #12
 8000f0c:	438a      	bics	r2, r1
 8000f0e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f14:	4a33      	ldr	r2, [pc, #204]	; (8000fe4 <HAL_ADC_IRQHandler+0x16c>)
 8000f16:	4013      	ands	r3, r2
 8000f18:	2201      	movs	r2, #1
 8000f1a:	431a      	orrs	r2, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	639a      	str	r2, [r3, #56]	; 0x38
 8000f20:	e00b      	b.n	8000f3a <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f26:	2220      	movs	r2, #32
 8000f28:	431a      	orrs	r2, r3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f32:	2201      	movs	r2, #1
 8000f34:	431a      	orrs	r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	f000 f853 	bl	8000fe8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	220c      	movs	r2, #12
 8000f48:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2280      	movs	r2, #128	; 0x80
 8000f52:	4013      	ands	r3, r2
 8000f54:	2b80      	cmp	r3, #128	; 0x80
 8000f56:	d115      	bne.n	8000f84 <HAL_ADC_IRQHandler+0x10c>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	2280      	movs	r2, #128	; 0x80
 8000f60:	4013      	ands	r3, r2
 8000f62:	2b80      	cmp	r3, #128	; 0x80
 8000f64:	d10e      	bne.n	8000f84 <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f6a:	2280      	movs	r2, #128	; 0x80
 8000f6c:	0252      	lsls	r2, r2, #9
 8000f6e:	431a      	orrs	r2, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	0018      	movs	r0, r3
 8000f78:	f000 f83e 	bl	8000ff8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2280      	movs	r2, #128	; 0x80
 8000f82:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2210      	movs	r2, #16
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	2b10      	cmp	r3, #16
 8000f90:	d123      	bne.n	8000fda <HAL_ADC_IRQHandler+0x162>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	2210      	movs	r2, #16
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	2b10      	cmp	r3, #16
 8000f9e:	d11c      	bne.n	8000fda <HAL_ADC_IRQHandler+0x162>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d006      	beq.n	8000fb6 <HAL_ADC_IRQHandler+0x13e>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	68db      	ldr	r3, [r3, #12]
 8000fae:	2201      	movs	r2, #1
 8000fb0:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d10d      	bne.n	8000fd2 <HAL_ADC_IRQHandler+0x15a>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fba:	2202      	movs	r2, #2
 8000fbc:	431a      	orrs	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2210      	movs	r2, #16
 8000fc8:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	0018      	movs	r0, r3
 8000fce:	f000 f81b 	bl	8001008 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2210      	movs	r2, #16
 8000fd8:	601a      	str	r2, [r3, #0]
  }

}
 8000fda:	46c0      	nop			; (mov r8, r8)
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	b002      	add	sp, #8
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	46c0      	nop			; (mov r8, r8)
 8000fe4:	fffffefe 	.word	0xfffffefe

08000fe8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000ff0:	46c0      	nop			; (mov r8, r8)
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	b002      	add	sp, #8
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001000:	46c0      	nop			; (mov r8, r8)
 8001002:	46bd      	mov	sp, r7
 8001004:	b002      	add	sp, #8
 8001006:	bd80      	pop	{r7, pc}

08001008 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001010:	46c0      	nop			; (mov r8, r8)
 8001012:	46bd      	mov	sp, r7
 8001014:	b002      	add	sp, #8
 8001016:	bd80      	pop	{r7, pc}

08001018 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001022:	230f      	movs	r3, #15
 8001024:	18fb      	adds	r3, r7, r3
 8001026:	2200      	movs	r2, #0
 8001028:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800102a:	2300      	movs	r3, #0
 800102c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001032:	2380      	movs	r3, #128	; 0x80
 8001034:	055b      	lsls	r3, r3, #21
 8001036:	429a      	cmp	r2, r3
 8001038:	d011      	beq.n	800105e <HAL_ADC_ConfigChannel+0x46>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800103e:	2b01      	cmp	r3, #1
 8001040:	d00d      	beq.n	800105e <HAL_ADC_ConfigChannel+0x46>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001046:	2b02      	cmp	r3, #2
 8001048:	d009      	beq.n	800105e <HAL_ADC_ConfigChannel+0x46>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800104e:	2b03      	cmp	r3, #3
 8001050:	d005      	beq.n	800105e <HAL_ADC_ConfigChannel+0x46>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001056:	2b04      	cmp	r3, #4
 8001058:	d001      	beq.n	800105e <HAL_ADC_ConfigChannel+0x46>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2234      	movs	r2, #52	; 0x34
 8001062:	5c9b      	ldrb	r3, [r3, r2]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d101      	bne.n	800106c <HAL_ADC_ConfigChannel+0x54>
 8001068:	2302      	movs	r3, #2
 800106a:	e0bb      	b.n	80011e4 <HAL_ADC_ConfigChannel+0x1cc>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2234      	movs	r2, #52	; 0x34
 8001070:	2101      	movs	r1, #1
 8001072:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	2204      	movs	r2, #4
 800107c:	4013      	ands	r3, r2
 800107e:	d000      	beq.n	8001082 <HAL_ADC_ConfigChannel+0x6a>
 8001080:	e09f      	b.n	80011c2 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	4a59      	ldr	r2, [pc, #356]	; (80011ec <HAL_ADC_ConfigChannel+0x1d4>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d100      	bne.n	800108e <HAL_ADC_ConfigChannel+0x76>
 800108c:	e077      	b.n	800117e <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2201      	movs	r2, #1
 800109a:	409a      	lsls	r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	430a      	orrs	r2, r1
 80010a2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010a8:	2380      	movs	r3, #128	; 0x80
 80010aa:	055b      	lsls	r3, r3, #21
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d037      	beq.n	8001120 <HAL_ADC_ConfigChannel+0x108>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d033      	beq.n	8001120 <HAL_ADC_ConfigChannel+0x108>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d02f      	beq.n	8001120 <HAL_ADC_ConfigChannel+0x108>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c4:	2b03      	cmp	r3, #3
 80010c6:	d02b      	beq.n	8001120 <HAL_ADC_ConfigChannel+0x108>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010cc:	2b04      	cmp	r3, #4
 80010ce:	d027      	beq.n	8001120 <HAL_ADC_ConfigChannel+0x108>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d4:	2b05      	cmp	r3, #5
 80010d6:	d023      	beq.n	8001120 <HAL_ADC_ConfigChannel+0x108>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010dc:	2b06      	cmp	r3, #6
 80010de:	d01f      	beq.n	8001120 <HAL_ADC_ConfigChannel+0x108>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e4:	2b07      	cmp	r3, #7
 80010e6:	d01b      	beq.n	8001120 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	689a      	ldr	r2, [r3, #8]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	2107      	movs	r1, #7
 80010f4:	400b      	ands	r3, r1
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d012      	beq.n	8001120 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	695a      	ldr	r2, [r3, #20]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2107      	movs	r1, #7
 8001106:	438a      	bics	r2, r1
 8001108:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	6959      	ldr	r1, [r3, #20]
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	2207      	movs	r2, #7
 8001116:	401a      	ands	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	430a      	orrs	r2, r1
 800111e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2b10      	cmp	r3, #16
 8001126:	d003      	beq.n	8001130 <HAL_ADC_ConfigChannel+0x118>
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b11      	cmp	r3, #17
 800112e:	d152      	bne.n	80011d6 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001130:	4b2f      	ldr	r3, [pc, #188]	; (80011f0 <HAL_ADC_ConfigChannel+0x1d8>)
 8001132:	6819      	ldr	r1, [r3, #0]
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b10      	cmp	r3, #16
 800113a:	d102      	bne.n	8001142 <HAL_ADC_ConfigChannel+0x12a>
 800113c:	2380      	movs	r3, #128	; 0x80
 800113e:	041b      	lsls	r3, r3, #16
 8001140:	e001      	b.n	8001146 <HAL_ADC_ConfigChannel+0x12e>
 8001142:	2380      	movs	r3, #128	; 0x80
 8001144:	03db      	lsls	r3, r3, #15
 8001146:	4a2a      	ldr	r2, [pc, #168]	; (80011f0 <HAL_ADC_ConfigChannel+0x1d8>)
 8001148:	430b      	orrs	r3, r1
 800114a:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2b10      	cmp	r3, #16
 8001152:	d140      	bne.n	80011d6 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001154:	4b27      	ldr	r3, [pc, #156]	; (80011f4 <HAL_ADC_ConfigChannel+0x1dc>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4927      	ldr	r1, [pc, #156]	; (80011f8 <HAL_ADC_ConfigChannel+0x1e0>)
 800115a:	0018      	movs	r0, r3
 800115c:	f7fe ffd4 	bl	8000108 <__udivsi3>
 8001160:	0003      	movs	r3, r0
 8001162:	001a      	movs	r2, r3
 8001164:	0013      	movs	r3, r2
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	189b      	adds	r3, r3, r2
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800116e:	e002      	b.n	8001176 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	3b01      	subs	r3, #1
 8001174:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d1f9      	bne.n	8001170 <HAL_ADC_ConfigChannel+0x158>
 800117c:	e02b      	b.n	80011d6 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2101      	movs	r1, #1
 800118a:	4099      	lsls	r1, r3
 800118c:	000b      	movs	r3, r1
 800118e:	43d9      	mvns	r1, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	400a      	ands	r2, r1
 8001196:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b10      	cmp	r3, #16
 800119e:	d003      	beq.n	80011a8 <HAL_ADC_ConfigChannel+0x190>
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b11      	cmp	r3, #17
 80011a6:	d116      	bne.n	80011d6 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80011a8:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <HAL_ADC_ConfigChannel+0x1d8>)
 80011aa:	6819      	ldr	r1, [r3, #0]
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2b10      	cmp	r3, #16
 80011b2:	d101      	bne.n	80011b8 <HAL_ADC_ConfigChannel+0x1a0>
 80011b4:	4a11      	ldr	r2, [pc, #68]	; (80011fc <HAL_ADC_ConfigChannel+0x1e4>)
 80011b6:	e000      	b.n	80011ba <HAL_ADC_ConfigChannel+0x1a2>
 80011b8:	4a11      	ldr	r2, [pc, #68]	; (8001200 <HAL_ADC_ConfigChannel+0x1e8>)
 80011ba:	4b0d      	ldr	r3, [pc, #52]	; (80011f0 <HAL_ADC_ConfigChannel+0x1d8>)
 80011bc:	400a      	ands	r2, r1
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	e009      	b.n	80011d6 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011c6:	2220      	movs	r2, #32
 80011c8:	431a      	orrs	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80011ce:	230f      	movs	r3, #15
 80011d0:	18fb      	adds	r3, r7, r3
 80011d2:	2201      	movs	r2, #1
 80011d4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2234      	movs	r2, #52	; 0x34
 80011da:	2100      	movs	r1, #0
 80011dc:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80011de:	230f      	movs	r3, #15
 80011e0:	18fb      	adds	r3, r7, r3
 80011e2:	781b      	ldrb	r3, [r3, #0]
}
 80011e4:	0018      	movs	r0, r3
 80011e6:	46bd      	mov	sp, r7
 80011e8:	b004      	add	sp, #16
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	00001001 	.word	0x00001001
 80011f0:	40012708 	.word	0x40012708
 80011f4:	20000000 	.word	0x20000000
 80011f8:	000f4240 	.word	0x000f4240
 80011fc:	ff7fffff 	.word	0xff7fffff
 8001200:	ffbfffff 	.word	0xffbfffff

08001204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	0002      	movs	r2, r0
 800120c:	1dfb      	adds	r3, r7, #7
 800120e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001210:	1dfb      	adds	r3, r7, #7
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b7f      	cmp	r3, #127	; 0x7f
 8001216:	d809      	bhi.n	800122c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001218:	1dfb      	adds	r3, r7, #7
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	001a      	movs	r2, r3
 800121e:	231f      	movs	r3, #31
 8001220:	401a      	ands	r2, r3
 8001222:	4b04      	ldr	r3, [pc, #16]	; (8001234 <__NVIC_EnableIRQ+0x30>)
 8001224:	2101      	movs	r1, #1
 8001226:	4091      	lsls	r1, r2
 8001228:	000a      	movs	r2, r1
 800122a:	601a      	str	r2, [r3, #0]
  }
}
 800122c:	46c0      	nop			; (mov r8, r8)
 800122e:	46bd      	mov	sp, r7
 8001230:	b002      	add	sp, #8
 8001232:	bd80      	pop	{r7, pc}
 8001234:	e000e100 	.word	0xe000e100

08001238 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001238:	b590      	push	{r4, r7, lr}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	0002      	movs	r2, r0
 8001240:	6039      	str	r1, [r7, #0]
 8001242:	1dfb      	adds	r3, r7, #7
 8001244:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001246:	1dfb      	adds	r3, r7, #7
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	2b7f      	cmp	r3, #127	; 0x7f
 800124c:	d828      	bhi.n	80012a0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800124e:	4a2f      	ldr	r2, [pc, #188]	; (800130c <__NVIC_SetPriority+0xd4>)
 8001250:	1dfb      	adds	r3, r7, #7
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	b25b      	sxtb	r3, r3
 8001256:	089b      	lsrs	r3, r3, #2
 8001258:	33c0      	adds	r3, #192	; 0xc0
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	589b      	ldr	r3, [r3, r2]
 800125e:	1dfa      	adds	r2, r7, #7
 8001260:	7812      	ldrb	r2, [r2, #0]
 8001262:	0011      	movs	r1, r2
 8001264:	2203      	movs	r2, #3
 8001266:	400a      	ands	r2, r1
 8001268:	00d2      	lsls	r2, r2, #3
 800126a:	21ff      	movs	r1, #255	; 0xff
 800126c:	4091      	lsls	r1, r2
 800126e:	000a      	movs	r2, r1
 8001270:	43d2      	mvns	r2, r2
 8001272:	401a      	ands	r2, r3
 8001274:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	019b      	lsls	r3, r3, #6
 800127a:	22ff      	movs	r2, #255	; 0xff
 800127c:	401a      	ands	r2, r3
 800127e:	1dfb      	adds	r3, r7, #7
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	0018      	movs	r0, r3
 8001284:	2303      	movs	r3, #3
 8001286:	4003      	ands	r3, r0
 8001288:	00db      	lsls	r3, r3, #3
 800128a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800128c:	481f      	ldr	r0, [pc, #124]	; (800130c <__NVIC_SetPriority+0xd4>)
 800128e:	1dfb      	adds	r3, r7, #7
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	b25b      	sxtb	r3, r3
 8001294:	089b      	lsrs	r3, r3, #2
 8001296:	430a      	orrs	r2, r1
 8001298:	33c0      	adds	r3, #192	; 0xc0
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800129e:	e031      	b.n	8001304 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012a0:	4a1b      	ldr	r2, [pc, #108]	; (8001310 <__NVIC_SetPriority+0xd8>)
 80012a2:	1dfb      	adds	r3, r7, #7
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	0019      	movs	r1, r3
 80012a8:	230f      	movs	r3, #15
 80012aa:	400b      	ands	r3, r1
 80012ac:	3b08      	subs	r3, #8
 80012ae:	089b      	lsrs	r3, r3, #2
 80012b0:	3306      	adds	r3, #6
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	18d3      	adds	r3, r2, r3
 80012b6:	3304      	adds	r3, #4
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	1dfa      	adds	r2, r7, #7
 80012bc:	7812      	ldrb	r2, [r2, #0]
 80012be:	0011      	movs	r1, r2
 80012c0:	2203      	movs	r2, #3
 80012c2:	400a      	ands	r2, r1
 80012c4:	00d2      	lsls	r2, r2, #3
 80012c6:	21ff      	movs	r1, #255	; 0xff
 80012c8:	4091      	lsls	r1, r2
 80012ca:	000a      	movs	r2, r1
 80012cc:	43d2      	mvns	r2, r2
 80012ce:	401a      	ands	r2, r3
 80012d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	019b      	lsls	r3, r3, #6
 80012d6:	22ff      	movs	r2, #255	; 0xff
 80012d8:	401a      	ands	r2, r3
 80012da:	1dfb      	adds	r3, r7, #7
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	0018      	movs	r0, r3
 80012e0:	2303      	movs	r3, #3
 80012e2:	4003      	ands	r3, r0
 80012e4:	00db      	lsls	r3, r3, #3
 80012e6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012e8:	4809      	ldr	r0, [pc, #36]	; (8001310 <__NVIC_SetPriority+0xd8>)
 80012ea:	1dfb      	adds	r3, r7, #7
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	001c      	movs	r4, r3
 80012f0:	230f      	movs	r3, #15
 80012f2:	4023      	ands	r3, r4
 80012f4:	3b08      	subs	r3, #8
 80012f6:	089b      	lsrs	r3, r3, #2
 80012f8:	430a      	orrs	r2, r1
 80012fa:	3306      	adds	r3, #6
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	18c3      	adds	r3, r0, r3
 8001300:	3304      	adds	r3, #4
 8001302:	601a      	str	r2, [r3, #0]
}
 8001304:	46c0      	nop			; (mov r8, r8)
 8001306:	46bd      	mov	sp, r7
 8001308:	b003      	add	sp, #12
 800130a:	bd90      	pop	{r4, r7, pc}
 800130c:	e000e100 	.word	0xe000e100
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	60b9      	str	r1, [r7, #8]
 800131c:	607a      	str	r2, [r7, #4]
 800131e:	210f      	movs	r1, #15
 8001320:	187b      	adds	r3, r7, r1
 8001322:	1c02      	adds	r2, r0, #0
 8001324:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001326:	68ba      	ldr	r2, [r7, #8]
 8001328:	187b      	adds	r3, r7, r1
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	b25b      	sxtb	r3, r3
 800132e:	0011      	movs	r1, r2
 8001330:	0018      	movs	r0, r3
 8001332:	f7ff ff81 	bl	8001238 <__NVIC_SetPriority>
}
 8001336:	46c0      	nop			; (mov r8, r8)
 8001338:	46bd      	mov	sp, r7
 800133a:	b004      	add	sp, #16
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	0002      	movs	r2, r0
 8001346:	1dfb      	adds	r3, r7, #7
 8001348:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800134a:	1dfb      	adds	r3, r7, #7
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	b25b      	sxtb	r3, r3
 8001350:	0018      	movs	r0, r3
 8001352:	f7ff ff57 	bl	8001204 <__NVIC_EnableIRQ>
}
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	46bd      	mov	sp, r7
 800135a:	b002      	add	sp, #8
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2221      	movs	r2, #33	; 0x21
 800136a:	5c9b      	ldrb	r3, [r3, r2]
 800136c:	b2db      	uxtb	r3, r3
 800136e:	2b02      	cmp	r3, #2
 8001370:	d008      	beq.n	8001384 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2204      	movs	r2, #4
 8001376:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2220      	movs	r2, #32
 800137c:	2100      	movs	r1, #0
 800137e:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e020      	b.n	80013c6 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	210e      	movs	r1, #14
 8001390:	438a      	bics	r2, r1
 8001392:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2101      	movs	r1, #1
 80013a0:	438a      	bics	r2, r1
 80013a2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013ac:	2101      	movs	r1, #1
 80013ae:	4091      	lsls	r1, r2
 80013b0:	000a      	movs	r2, r1
 80013b2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2221      	movs	r2, #33	; 0x21
 80013b8:	2101      	movs	r1, #1
 80013ba:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2220      	movs	r2, #32
 80013c0:	2100      	movs	r1, #0
 80013c2:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	0018      	movs	r0, r3
 80013c8:	46bd      	mov	sp, r7
 80013ca:	b002      	add	sp, #8
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b084      	sub	sp, #16
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013d6:	210f      	movs	r1, #15
 80013d8:	187b      	adds	r3, r7, r1
 80013da:	2200      	movs	r2, #0
 80013dc:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2221      	movs	r2, #33	; 0x21
 80013e2:	5c9b      	ldrb	r3, [r3, r2]
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d006      	beq.n	80013f8 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2204      	movs	r2, #4
 80013ee:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80013f0:	187b      	adds	r3, r7, r1
 80013f2:	2201      	movs	r2, #1
 80013f4:	701a      	strb	r2, [r3, #0]
 80013f6:	e028      	b.n	800144a <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	210e      	movs	r1, #14
 8001404:	438a      	bics	r2, r1
 8001406:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2101      	movs	r1, #1
 8001414:	438a      	bics	r2, r1
 8001416:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001420:	2101      	movs	r1, #1
 8001422:	4091      	lsls	r1, r2
 8001424:	000a      	movs	r2, r1
 8001426:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2221      	movs	r2, #33	; 0x21
 800142c:	2101      	movs	r1, #1
 800142e:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2220      	movs	r2, #32
 8001434:	2100      	movs	r1, #0
 8001436:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800143c:	2b00      	cmp	r3, #0
 800143e:	d004      	beq.n	800144a <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	0010      	movs	r0, r2
 8001448:	4798      	blx	r3
    } 
  }
  return status;
 800144a:	230f      	movs	r3, #15
 800144c:	18fb      	adds	r3, r7, r3
 800144e:	781b      	ldrb	r3, [r3, #0]
}
 8001450:	0018      	movs	r0, r3
 8001452:	46bd      	mov	sp, r7
 8001454:	b004      	add	sp, #16
 8001456:	bd80      	pop	{r7, pc}

08001458 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001466:	e14f      	b.n	8001708 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2101      	movs	r1, #1
 800146e:	697a      	ldr	r2, [r7, #20]
 8001470:	4091      	lsls	r1, r2
 8001472:	000a      	movs	r2, r1
 8001474:	4013      	ands	r3, r2
 8001476:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d100      	bne.n	8001480 <HAL_GPIO_Init+0x28>
 800147e:	e140      	b.n	8001702 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	2203      	movs	r2, #3
 8001486:	4013      	ands	r3, r2
 8001488:	2b01      	cmp	r3, #1
 800148a:	d005      	beq.n	8001498 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	2203      	movs	r2, #3
 8001492:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001494:	2b02      	cmp	r3, #2
 8001496:	d130      	bne.n	80014fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	2203      	movs	r2, #3
 80014a4:	409a      	lsls	r2, r3
 80014a6:	0013      	movs	r3, r2
 80014a8:	43da      	mvns	r2, r3
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	4013      	ands	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	68da      	ldr	r2, [r3, #12]
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	409a      	lsls	r2, r3
 80014ba:	0013      	movs	r3, r2
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	4313      	orrs	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014ce:	2201      	movs	r2, #1
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	409a      	lsls	r2, r3
 80014d4:	0013      	movs	r3, r2
 80014d6:	43da      	mvns	r2, r3
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	4013      	ands	r3, r2
 80014dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	091b      	lsrs	r3, r3, #4
 80014e4:	2201      	movs	r2, #1
 80014e6:	401a      	ands	r2, r3
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	409a      	lsls	r2, r3
 80014ec:	0013      	movs	r3, r2
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	2203      	movs	r2, #3
 8001500:	4013      	ands	r3, r2
 8001502:	2b03      	cmp	r3, #3
 8001504:	d017      	beq.n	8001536 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	2203      	movs	r2, #3
 8001512:	409a      	lsls	r2, r3
 8001514:	0013      	movs	r3, r2
 8001516:	43da      	mvns	r2, r3
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	4013      	ands	r3, r2
 800151c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	689a      	ldr	r2, [r3, #8]
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	409a      	lsls	r2, r3
 8001528:	0013      	movs	r3, r2
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	4313      	orrs	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	2203      	movs	r2, #3
 800153c:	4013      	ands	r3, r2
 800153e:	2b02      	cmp	r3, #2
 8001540:	d123      	bne.n	800158a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	08da      	lsrs	r2, r3, #3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	3208      	adds	r2, #8
 800154a:	0092      	lsls	r2, r2, #2
 800154c:	58d3      	ldr	r3, [r2, r3]
 800154e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	2207      	movs	r2, #7
 8001554:	4013      	ands	r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	220f      	movs	r2, #15
 800155a:	409a      	lsls	r2, r3
 800155c:	0013      	movs	r3, r2
 800155e:	43da      	mvns	r2, r3
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	4013      	ands	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	691a      	ldr	r2, [r3, #16]
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	2107      	movs	r1, #7
 800156e:	400b      	ands	r3, r1
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	409a      	lsls	r2, r3
 8001574:	0013      	movs	r3, r2
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	4313      	orrs	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	08da      	lsrs	r2, r3, #3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3208      	adds	r2, #8
 8001584:	0092      	lsls	r2, r2, #2
 8001586:	6939      	ldr	r1, [r7, #16]
 8001588:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	2203      	movs	r2, #3
 8001596:	409a      	lsls	r2, r3
 8001598:	0013      	movs	r3, r2
 800159a:	43da      	mvns	r2, r3
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	4013      	ands	r3, r2
 80015a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	2203      	movs	r2, #3
 80015a8:	401a      	ands	r2, r3
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	409a      	lsls	r2, r3
 80015b0:	0013      	movs	r3, r2
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	23c0      	movs	r3, #192	; 0xc0
 80015c4:	029b      	lsls	r3, r3, #10
 80015c6:	4013      	ands	r3, r2
 80015c8:	d100      	bne.n	80015cc <HAL_GPIO_Init+0x174>
 80015ca:	e09a      	b.n	8001702 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015cc:	4b54      	ldr	r3, [pc, #336]	; (8001720 <HAL_GPIO_Init+0x2c8>)
 80015ce:	699a      	ldr	r2, [r3, #24]
 80015d0:	4b53      	ldr	r3, [pc, #332]	; (8001720 <HAL_GPIO_Init+0x2c8>)
 80015d2:	2101      	movs	r1, #1
 80015d4:	430a      	orrs	r2, r1
 80015d6:	619a      	str	r2, [r3, #24]
 80015d8:	4b51      	ldr	r3, [pc, #324]	; (8001720 <HAL_GPIO_Init+0x2c8>)
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	2201      	movs	r2, #1
 80015de:	4013      	ands	r3, r2
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015e4:	4a4f      	ldr	r2, [pc, #316]	; (8001724 <HAL_GPIO_Init+0x2cc>)
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	089b      	lsrs	r3, r3, #2
 80015ea:	3302      	adds	r3, #2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	589b      	ldr	r3, [r3, r2]
 80015f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	2203      	movs	r2, #3
 80015f6:	4013      	ands	r3, r2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	220f      	movs	r2, #15
 80015fc:	409a      	lsls	r2, r3
 80015fe:	0013      	movs	r3, r2
 8001600:	43da      	mvns	r2, r3
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	4013      	ands	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	2390      	movs	r3, #144	; 0x90
 800160c:	05db      	lsls	r3, r3, #23
 800160e:	429a      	cmp	r2, r3
 8001610:	d013      	beq.n	800163a <HAL_GPIO_Init+0x1e2>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a44      	ldr	r2, [pc, #272]	; (8001728 <HAL_GPIO_Init+0x2d0>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d00d      	beq.n	8001636 <HAL_GPIO_Init+0x1de>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a43      	ldr	r2, [pc, #268]	; (800172c <HAL_GPIO_Init+0x2d4>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d007      	beq.n	8001632 <HAL_GPIO_Init+0x1da>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a42      	ldr	r2, [pc, #264]	; (8001730 <HAL_GPIO_Init+0x2d8>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d101      	bne.n	800162e <HAL_GPIO_Init+0x1d6>
 800162a:	2303      	movs	r3, #3
 800162c:	e006      	b.n	800163c <HAL_GPIO_Init+0x1e4>
 800162e:	2305      	movs	r3, #5
 8001630:	e004      	b.n	800163c <HAL_GPIO_Init+0x1e4>
 8001632:	2302      	movs	r3, #2
 8001634:	e002      	b.n	800163c <HAL_GPIO_Init+0x1e4>
 8001636:	2301      	movs	r3, #1
 8001638:	e000      	b.n	800163c <HAL_GPIO_Init+0x1e4>
 800163a:	2300      	movs	r3, #0
 800163c:	697a      	ldr	r2, [r7, #20]
 800163e:	2103      	movs	r1, #3
 8001640:	400a      	ands	r2, r1
 8001642:	0092      	lsls	r2, r2, #2
 8001644:	4093      	lsls	r3, r2
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	4313      	orrs	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800164c:	4935      	ldr	r1, [pc, #212]	; (8001724 <HAL_GPIO_Init+0x2cc>)
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	089b      	lsrs	r3, r3, #2
 8001652:	3302      	adds	r3, #2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800165a:	4b36      	ldr	r3, [pc, #216]	; (8001734 <HAL_GPIO_Init+0x2dc>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	43da      	mvns	r2, r3
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	4013      	ands	r3, r2
 8001668:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685a      	ldr	r2, [r3, #4]
 800166e:	2380      	movs	r3, #128	; 0x80
 8001670:	025b      	lsls	r3, r3, #9
 8001672:	4013      	ands	r3, r2
 8001674:	d003      	beq.n	800167e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	4313      	orrs	r3, r2
 800167c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800167e:	4b2d      	ldr	r3, [pc, #180]	; (8001734 <HAL_GPIO_Init+0x2dc>)
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001684:	4b2b      	ldr	r3, [pc, #172]	; (8001734 <HAL_GPIO_Init+0x2dc>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	43da      	mvns	r2, r3
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	4013      	ands	r3, r2
 8001692:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	2380      	movs	r3, #128	; 0x80
 800169a:	029b      	lsls	r3, r3, #10
 800169c:	4013      	ands	r3, r2
 800169e:	d003      	beq.n	80016a8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80016a8:	4b22      	ldr	r3, [pc, #136]	; (8001734 <HAL_GPIO_Init+0x2dc>)
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016ae:	4b21      	ldr	r3, [pc, #132]	; (8001734 <HAL_GPIO_Init+0x2dc>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	43da      	mvns	r2, r3
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	4013      	ands	r3, r2
 80016bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685a      	ldr	r2, [r3, #4]
 80016c2:	2380      	movs	r3, #128	; 0x80
 80016c4:	035b      	lsls	r3, r3, #13
 80016c6:	4013      	ands	r3, r2
 80016c8:	d003      	beq.n	80016d2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80016d2:	4b18      	ldr	r3, [pc, #96]	; (8001734 <HAL_GPIO_Init+0x2dc>)
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80016d8:	4b16      	ldr	r3, [pc, #88]	; (8001734 <HAL_GPIO_Init+0x2dc>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	43da      	mvns	r2, r3
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	4013      	ands	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685a      	ldr	r2, [r3, #4]
 80016ec:	2380      	movs	r3, #128	; 0x80
 80016ee:	039b      	lsls	r3, r3, #14
 80016f0:	4013      	ands	r3, r2
 80016f2:	d003      	beq.n	80016fc <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80016fc:	4b0d      	ldr	r3, [pc, #52]	; (8001734 <HAL_GPIO_Init+0x2dc>)
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	3301      	adds	r3, #1
 8001706:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	40da      	lsrs	r2, r3
 8001710:	1e13      	subs	r3, r2, #0
 8001712:	d000      	beq.n	8001716 <HAL_GPIO_Init+0x2be>
 8001714:	e6a8      	b.n	8001468 <HAL_GPIO_Init+0x10>
  } 
}
 8001716:	46c0      	nop			; (mov r8, r8)
 8001718:	46c0      	nop			; (mov r8, r8)
 800171a:	46bd      	mov	sp, r7
 800171c:	b006      	add	sp, #24
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40021000 	.word	0x40021000
 8001724:	40010000 	.word	0x40010000
 8001728:	48000400 	.word	0x48000400
 800172c:	48000800 	.word	0x48000800
 8001730:	48000c00 	.word	0x48000c00
 8001734:	40010400 	.word	0x40010400

08001738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	0008      	movs	r0, r1
 8001742:	0011      	movs	r1, r2
 8001744:	1cbb      	adds	r3, r7, #2
 8001746:	1c02      	adds	r2, r0, #0
 8001748:	801a      	strh	r2, [r3, #0]
 800174a:	1c7b      	adds	r3, r7, #1
 800174c:	1c0a      	adds	r2, r1, #0
 800174e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001750:	1c7b      	adds	r3, r7, #1
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d004      	beq.n	8001762 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001758:	1cbb      	adds	r3, r7, #2
 800175a:	881a      	ldrh	r2, [r3, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001760:	e003      	b.n	800176a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001762:	1cbb      	adds	r3, r7, #2
 8001764:	881a      	ldrh	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	629a      	str	r2, [r3, #40]	; 0x28
}
 800176a:	46c0      	nop			; (mov r8, r8)
 800176c:	46bd      	mov	sp, r7
 800176e:	b002      	add	sp, #8
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e082      	b.n	800188c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2241      	movs	r2, #65	; 0x41
 800178a:	5c9b      	ldrb	r3, [r3, r2]
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b00      	cmp	r3, #0
 8001790:	d107      	bne.n	80017a2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2240      	movs	r2, #64	; 0x40
 8001796:	2100      	movs	r1, #0
 8001798:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	0018      	movs	r0, r3
 800179e:	f7ff f879 	bl	8000894 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2241      	movs	r2, #65	; 0x41
 80017a6:	2124      	movs	r1, #36	; 0x24
 80017a8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2101      	movs	r1, #1
 80017b6:	438a      	bics	r2, r1
 80017b8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4934      	ldr	r1, [pc, #208]	; (8001894 <HAL_I2C_Init+0x120>)
 80017c4:	400a      	ands	r2, r1
 80017c6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	689a      	ldr	r2, [r3, #8]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4931      	ldr	r1, [pc, #196]	; (8001898 <HAL_I2C_Init+0x124>)
 80017d4:	400a      	ands	r2, r1
 80017d6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d108      	bne.n	80017f2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689a      	ldr	r2, [r3, #8]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2180      	movs	r1, #128	; 0x80
 80017ea:	0209      	lsls	r1, r1, #8
 80017ec:	430a      	orrs	r2, r1
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	e007      	b.n	8001802 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	689a      	ldr	r2, [r3, #8]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2184      	movs	r1, #132	; 0x84
 80017fc:	0209      	lsls	r1, r1, #8
 80017fe:	430a      	orrs	r2, r1
 8001800:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	2b02      	cmp	r3, #2
 8001808:	d104      	bne.n	8001814 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2280      	movs	r2, #128	; 0x80
 8001810:	0112      	lsls	r2, r2, #4
 8001812:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	685a      	ldr	r2, [r3, #4]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	491f      	ldr	r1, [pc, #124]	; (800189c <HAL_I2C_Init+0x128>)
 8001820:	430a      	orrs	r2, r1
 8001822:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	68da      	ldr	r2, [r3, #12]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	491a      	ldr	r1, [pc, #104]	; (8001898 <HAL_I2C_Init+0x124>)
 8001830:	400a      	ands	r2, r1
 8001832:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	691a      	ldr	r2, [r3, #16]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	695b      	ldr	r3, [r3, #20]
 800183c:	431a      	orrs	r2, r3
 800183e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	430a      	orrs	r2, r1
 800184c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69d9      	ldr	r1, [r3, #28]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a1a      	ldr	r2, [r3, #32]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	430a      	orrs	r2, r1
 800185c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2101      	movs	r1, #1
 800186a:	430a      	orrs	r2, r1
 800186c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2241      	movs	r2, #65	; 0x41
 8001878:	2120      	movs	r1, #32
 800187a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2242      	movs	r2, #66	; 0x42
 8001886:	2100      	movs	r1, #0
 8001888:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800188a:	2300      	movs	r3, #0
}
 800188c:	0018      	movs	r0, r3
 800188e:	46bd      	mov	sp, r7
 8001890:	b002      	add	sp, #8
 8001892:	bd80      	pop	{r7, pc}
 8001894:	f0ffffff 	.word	0xf0ffffff
 8001898:	ffff7fff 	.word	0xffff7fff
 800189c:	02008000 	.word	0x02008000

080018a0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80018a0:	b590      	push	{r4, r7, lr}
 80018a2:	b089      	sub	sp, #36	; 0x24
 80018a4:	af02      	add	r7, sp, #8
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	0008      	movs	r0, r1
 80018aa:	607a      	str	r2, [r7, #4]
 80018ac:	0019      	movs	r1, r3
 80018ae:	230a      	movs	r3, #10
 80018b0:	18fb      	adds	r3, r7, r3
 80018b2:	1c02      	adds	r2, r0, #0
 80018b4:	801a      	strh	r2, [r3, #0]
 80018b6:	2308      	movs	r3, #8
 80018b8:	18fb      	adds	r3, r7, r3
 80018ba:	1c0a      	adds	r2, r1, #0
 80018bc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2241      	movs	r2, #65	; 0x41
 80018c2:	5c9b      	ldrb	r3, [r3, r2]
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	2b20      	cmp	r3, #32
 80018c8:	d000      	beq.n	80018cc <HAL_I2C_Master_Transmit+0x2c>
 80018ca:	e0e7      	b.n	8001a9c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2240      	movs	r2, #64	; 0x40
 80018d0:	5c9b      	ldrb	r3, [r3, r2]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d101      	bne.n	80018da <HAL_I2C_Master_Transmit+0x3a>
 80018d6:	2302      	movs	r3, #2
 80018d8:	e0e1      	b.n	8001a9e <HAL_I2C_Master_Transmit+0x1fe>
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2240      	movs	r2, #64	; 0x40
 80018de:	2101      	movs	r1, #1
 80018e0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80018e2:	f7ff f97f 	bl	8000be4 <HAL_GetTick>
 80018e6:	0003      	movs	r3, r0
 80018e8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80018ea:	2380      	movs	r3, #128	; 0x80
 80018ec:	0219      	lsls	r1, r3, #8
 80018ee:	68f8      	ldr	r0, [r7, #12]
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	9300      	str	r3, [sp, #0]
 80018f4:	2319      	movs	r3, #25
 80018f6:	2201      	movs	r2, #1
 80018f8:	f000 f8fc 	bl	8001af4 <I2C_WaitOnFlagUntilTimeout>
 80018fc:	1e03      	subs	r3, r0, #0
 80018fe:	d001      	beq.n	8001904 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e0cc      	b.n	8001a9e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2241      	movs	r2, #65	; 0x41
 8001908:	2121      	movs	r1, #33	; 0x21
 800190a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2242      	movs	r2, #66	; 0x42
 8001910:	2110      	movs	r1, #16
 8001912:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2200      	movs	r2, #0
 8001918:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2208      	movs	r2, #8
 8001924:	18ba      	adds	r2, r7, r2
 8001926:	8812      	ldrh	r2, [r2, #0]
 8001928:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2200      	movs	r2, #0
 800192e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001934:	b29b      	uxth	r3, r3
 8001936:	2bff      	cmp	r3, #255	; 0xff
 8001938:	d911      	bls.n	800195e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	22ff      	movs	r2, #255	; 0xff
 800193e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001944:	b2da      	uxtb	r2, r3
 8001946:	2380      	movs	r3, #128	; 0x80
 8001948:	045c      	lsls	r4, r3, #17
 800194a:	230a      	movs	r3, #10
 800194c:	18fb      	adds	r3, r7, r3
 800194e:	8819      	ldrh	r1, [r3, #0]
 8001950:	68f8      	ldr	r0, [r7, #12]
 8001952:	4b55      	ldr	r3, [pc, #340]	; (8001aa8 <HAL_I2C_Master_Transmit+0x208>)
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	0023      	movs	r3, r4
 8001958:	f000 fa00 	bl	8001d5c <I2C_TransferConfig>
 800195c:	e075      	b.n	8001a4a <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001962:	b29a      	uxth	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800196c:	b2da      	uxtb	r2, r3
 800196e:	2380      	movs	r3, #128	; 0x80
 8001970:	049c      	lsls	r4, r3, #18
 8001972:	230a      	movs	r3, #10
 8001974:	18fb      	adds	r3, r7, r3
 8001976:	8819      	ldrh	r1, [r3, #0]
 8001978:	68f8      	ldr	r0, [r7, #12]
 800197a:	4b4b      	ldr	r3, [pc, #300]	; (8001aa8 <HAL_I2C_Master_Transmit+0x208>)
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	0023      	movs	r3, r4
 8001980:	f000 f9ec 	bl	8001d5c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001984:	e061      	b.n	8001a4a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001986:	697a      	ldr	r2, [r7, #20]
 8001988:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	0018      	movs	r0, r3
 800198e:	f000 f8f0 	bl	8001b72 <I2C_WaitOnTXISFlagUntilTimeout>
 8001992:	1e03      	subs	r3, r0, #0
 8001994:	d001      	beq.n	800199a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e081      	b.n	8001a9e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199e:	781a      	ldrb	r2, [r3, #0]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019aa:	1c5a      	adds	r2, r3, #1
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	3b01      	subs	r3, #1
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019c2:	3b01      	subs	r3, #1
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d03a      	beq.n	8001a4a <HAL_I2C_Master_Transmit+0x1aa>
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d136      	bne.n	8001a4a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80019dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019de:	68f8      	ldr	r0, [r7, #12]
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	0013      	movs	r3, r2
 80019e6:	2200      	movs	r2, #0
 80019e8:	2180      	movs	r1, #128	; 0x80
 80019ea:	f000 f883 	bl	8001af4 <I2C_WaitOnFlagUntilTimeout>
 80019ee:	1e03      	subs	r3, r0, #0
 80019f0:	d001      	beq.n	80019f6 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e053      	b.n	8001a9e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	2bff      	cmp	r3, #255	; 0xff
 80019fe:	d911      	bls.n	8001a24 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	22ff      	movs	r2, #255	; 0xff
 8001a04:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	2380      	movs	r3, #128	; 0x80
 8001a0e:	045c      	lsls	r4, r3, #17
 8001a10:	230a      	movs	r3, #10
 8001a12:	18fb      	adds	r3, r7, r3
 8001a14:	8819      	ldrh	r1, [r3, #0]
 8001a16:	68f8      	ldr	r0, [r7, #12]
 8001a18:	2300      	movs	r3, #0
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	0023      	movs	r3, r4
 8001a1e:	f000 f99d 	bl	8001d5c <I2C_TransferConfig>
 8001a22:	e012      	b.n	8001a4a <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	2380      	movs	r3, #128	; 0x80
 8001a36:	049c      	lsls	r4, r3, #18
 8001a38:	230a      	movs	r3, #10
 8001a3a:	18fb      	adds	r3, r7, r3
 8001a3c:	8819      	ldrh	r1, [r3, #0]
 8001a3e:	68f8      	ldr	r0, [r7, #12]
 8001a40:	2300      	movs	r3, #0
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	0023      	movs	r3, r4
 8001a46:	f000 f989 	bl	8001d5c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d198      	bne.n	8001986 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	f000 f8c8 	bl	8001bf0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a60:	1e03      	subs	r3, r0, #0
 8001a62:	d001      	beq.n	8001a68 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e01a      	b.n	8001a9e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2220      	movs	r2, #32
 8001a6e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	490c      	ldr	r1, [pc, #48]	; (8001aac <HAL_I2C_Master_Transmit+0x20c>)
 8001a7c:	400a      	ands	r2, r1
 8001a7e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2241      	movs	r2, #65	; 0x41
 8001a84:	2120      	movs	r1, #32
 8001a86:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2242      	movs	r2, #66	; 0x42
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2240      	movs	r2, #64	; 0x40
 8001a94:	2100      	movs	r1, #0
 8001a96:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	e000      	b.n	8001a9e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001a9c:	2302      	movs	r3, #2
  }
}
 8001a9e:	0018      	movs	r0, r3
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	b007      	add	sp, #28
 8001aa4:	bd90      	pop	{r4, r7, pc}
 8001aa6:	46c0      	nop			; (mov r8, r8)
 8001aa8:	80002000 	.word	0x80002000
 8001aac:	fe00e800 	.word	0xfe00e800

08001ab0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	2202      	movs	r2, #2
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d103      	bne.n	8001ace <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2200      	movs	r2, #0
 8001acc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d007      	beq.n	8001aec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	699a      	ldr	r2, [r3, #24]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	619a      	str	r2, [r3, #24]
  }
}
 8001aec:	46c0      	nop			; (mov r8, r8)
 8001aee:	46bd      	mov	sp, r7
 8001af0:	b002      	add	sp, #8
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	603b      	str	r3, [r7, #0]
 8001b00:	1dfb      	adds	r3, r7, #7
 8001b02:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b04:	e021      	b.n	8001b4a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	d01e      	beq.n	8001b4a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b0c:	f7ff f86a 	bl	8000be4 <HAL_GetTick>
 8001b10:	0002      	movs	r2, r0
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d302      	bcc.n	8001b22 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d113      	bne.n	8001b4a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b26:	2220      	movs	r2, #32
 8001b28:	431a      	orrs	r2, r3
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2241      	movs	r2, #65	; 0x41
 8001b32:	2120      	movs	r1, #32
 8001b34:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2242      	movs	r2, #66	; 0x42
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2240      	movs	r2, #64	; 0x40
 8001b42:	2100      	movs	r1, #0
 8001b44:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e00f      	b.n	8001b6a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	68ba      	ldr	r2, [r7, #8]
 8001b52:	4013      	ands	r3, r2
 8001b54:	68ba      	ldr	r2, [r7, #8]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	425a      	negs	r2, r3
 8001b5a:	4153      	adcs	r3, r2
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	001a      	movs	r2, r3
 8001b60:	1dfb      	adds	r3, r7, #7
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d0ce      	beq.n	8001b06 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	0018      	movs	r0, r3
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	b004      	add	sp, #16
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b084      	sub	sp, #16
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	60f8      	str	r0, [r7, #12]
 8001b7a:	60b9      	str	r1, [r7, #8]
 8001b7c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b7e:	e02b      	b.n	8001bd8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	68b9      	ldr	r1, [r7, #8]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	0018      	movs	r0, r3
 8001b88:	f000 f86e 	bl	8001c68 <I2C_IsAcknowledgeFailed>
 8001b8c:	1e03      	subs	r3, r0, #0
 8001b8e:	d001      	beq.n	8001b94 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e029      	b.n	8001be8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	3301      	adds	r3, #1
 8001b98:	d01e      	beq.n	8001bd8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b9a:	f7ff f823 	bl	8000be4 <HAL_GetTick>
 8001b9e:	0002      	movs	r2, r0
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	68ba      	ldr	r2, [r7, #8]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d302      	bcc.n	8001bb0 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d113      	bne.n	8001bd8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb4:	2220      	movs	r2, #32
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2241      	movs	r2, #65	; 0x41
 8001bc0:	2120      	movs	r1, #32
 8001bc2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2242      	movs	r2, #66	; 0x42
 8001bc8:	2100      	movs	r1, #0
 8001bca:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2240      	movs	r2, #64	; 0x40
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e007      	b.n	8001be8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	2202      	movs	r2, #2
 8001be0:	4013      	ands	r3, r2
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d1cc      	bne.n	8001b80 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	0018      	movs	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	b004      	add	sp, #16
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bfc:	e028      	b.n	8001c50 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	68b9      	ldr	r1, [r7, #8]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	0018      	movs	r0, r3
 8001c06:	f000 f82f 	bl	8001c68 <I2C_IsAcknowledgeFailed>
 8001c0a:	1e03      	subs	r3, r0, #0
 8001c0c:	d001      	beq.n	8001c12 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e026      	b.n	8001c60 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c12:	f7fe ffe7 	bl	8000be4 <HAL_GetTick>
 8001c16:	0002      	movs	r2, r0
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	68ba      	ldr	r2, [r7, #8]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d302      	bcc.n	8001c28 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d113      	bne.n	8001c50 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2c:	2220      	movs	r2, #32
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2241      	movs	r2, #65	; 0x41
 8001c38:	2120      	movs	r1, #32
 8001c3a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2242      	movs	r2, #66	; 0x42
 8001c40:	2100      	movs	r1, #0
 8001c42:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2240      	movs	r2, #64	; 0x40
 8001c48:	2100      	movs	r1, #0
 8001c4a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e007      	b.n	8001c60 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	2220      	movs	r2, #32
 8001c58:	4013      	ands	r3, r2
 8001c5a:	2b20      	cmp	r3, #32
 8001c5c:	d1cf      	bne.n	8001bfe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	0018      	movs	r0, r3
 8001c62:	46bd      	mov	sp, r7
 8001c64:	b004      	add	sp, #16
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	2210      	movs	r2, #16
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	2b10      	cmp	r3, #16
 8001c80:	d164      	bne.n	8001d4c <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	2380      	movs	r3, #128	; 0x80
 8001c8a:	049b      	lsls	r3, r3, #18
 8001c8c:	401a      	ands	r2, r3
 8001c8e:	2380      	movs	r3, #128	; 0x80
 8001c90:	049b      	lsls	r3, r3, #18
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d02b      	beq.n	8001cee <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2180      	movs	r1, #128	; 0x80
 8001ca2:	01c9      	lsls	r1, r1, #7
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ca8:	e021      	b.n	8001cee <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	3301      	adds	r3, #1
 8001cae:	d01e      	beq.n	8001cee <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cb0:	f7fe ff98 	bl	8000be4 <HAL_GetTick>
 8001cb4:	0002      	movs	r2, r0
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	68ba      	ldr	r2, [r7, #8]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d302      	bcc.n	8001cc6 <I2C_IsAcknowledgeFailed+0x5e>
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d113      	bne.n	8001cee <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cca:	2220      	movs	r2, #32
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2241      	movs	r2, #65	; 0x41
 8001cd6:	2120      	movs	r1, #32
 8001cd8:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2242      	movs	r2, #66	; 0x42
 8001cde:	2100      	movs	r1, #0
 8001ce0:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2240      	movs	r2, #64	; 0x40
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e02f      	b.n	8001d4e <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	2220      	movs	r2, #32
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	2b20      	cmp	r3, #32
 8001cfa:	d1d6      	bne.n	8001caa <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2210      	movs	r2, #16
 8001d02:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2220      	movs	r2, #32
 8001d0a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	0018      	movs	r0, r3
 8001d10:	f7ff fece 	bl	8001ab0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	685a      	ldr	r2, [r3, #4]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	490e      	ldr	r1, [pc, #56]	; (8001d58 <I2C_IsAcknowledgeFailed+0xf0>)
 8001d20:	400a      	ands	r2, r1
 8001d22:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d28:	2204      	movs	r2, #4
 8001d2a:	431a      	orrs	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2241      	movs	r2, #65	; 0x41
 8001d34:	2120      	movs	r1, #32
 8001d36:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2242      	movs	r2, #66	; 0x42
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2240      	movs	r2, #64	; 0x40
 8001d44:	2100      	movs	r1, #0
 8001d46:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e000      	b.n	8001d4e <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	0018      	movs	r0, r3
 8001d50:	46bd      	mov	sp, r7
 8001d52:	b004      	add	sp, #16
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	46c0      	nop			; (mov r8, r8)
 8001d58:	fe00e800 	.word	0xfe00e800

08001d5c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001d5c:	b590      	push	{r4, r7, lr}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	0008      	movs	r0, r1
 8001d66:	0011      	movs	r1, r2
 8001d68:	607b      	str	r3, [r7, #4]
 8001d6a:	240a      	movs	r4, #10
 8001d6c:	193b      	adds	r3, r7, r4
 8001d6e:	1c02      	adds	r2, r0, #0
 8001d70:	801a      	strh	r2, [r3, #0]
 8001d72:	2009      	movs	r0, #9
 8001d74:	183b      	adds	r3, r7, r0
 8001d76:	1c0a      	adds	r2, r1, #0
 8001d78:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	6a3a      	ldr	r2, [r7, #32]
 8001d82:	0d51      	lsrs	r1, r2, #21
 8001d84:	2280      	movs	r2, #128	; 0x80
 8001d86:	00d2      	lsls	r2, r2, #3
 8001d88:	400a      	ands	r2, r1
 8001d8a:	490e      	ldr	r1, [pc, #56]	; (8001dc4 <I2C_TransferConfig+0x68>)
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	43d2      	mvns	r2, r2
 8001d90:	401a      	ands	r2, r3
 8001d92:	0011      	movs	r1, r2
 8001d94:	193b      	adds	r3, r7, r4
 8001d96:	881b      	ldrh	r3, [r3, #0]
 8001d98:	059b      	lsls	r3, r3, #22
 8001d9a:	0d9a      	lsrs	r2, r3, #22
 8001d9c:	183b      	adds	r3, r7, r0
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	0418      	lsls	r0, r3, #16
 8001da2:	23ff      	movs	r3, #255	; 0xff
 8001da4:	041b      	lsls	r3, r3, #16
 8001da6:	4003      	ands	r3, r0
 8001da8:	431a      	orrs	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	431a      	orrs	r2, r3
 8001dae:	6a3b      	ldr	r3, [r7, #32]
 8001db0:	431a      	orrs	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	430a      	orrs	r2, r1
 8001db8:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8001dba:	46c0      	nop			; (mov r8, r8)
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	b005      	add	sp, #20
 8001dc0:	bd90      	pop	{r4, r7, pc}
 8001dc2:	46c0      	nop			; (mov r8, r8)
 8001dc4:	03ff63ff 	.word	0x03ff63ff

08001dc8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2241      	movs	r2, #65	; 0x41
 8001dd6:	5c9b      	ldrb	r3, [r3, r2]
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b20      	cmp	r3, #32
 8001ddc:	d138      	bne.n	8001e50 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2240      	movs	r2, #64	; 0x40
 8001de2:	5c9b      	ldrb	r3, [r3, r2]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d101      	bne.n	8001dec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001de8:	2302      	movs	r3, #2
 8001dea:	e032      	b.n	8001e52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2240      	movs	r2, #64	; 0x40
 8001df0:	2101      	movs	r1, #1
 8001df2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2241      	movs	r2, #65	; 0x41
 8001df8:	2124      	movs	r1, #36	; 0x24
 8001dfa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2101      	movs	r1, #1
 8001e08:	438a      	bics	r2, r1
 8001e0a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4911      	ldr	r1, [pc, #68]	; (8001e5c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001e18:	400a      	ands	r2, r1
 8001e1a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6819      	ldr	r1, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2101      	movs	r1, #1
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2241      	movs	r2, #65	; 0x41
 8001e40:	2120      	movs	r1, #32
 8001e42:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2240      	movs	r2, #64	; 0x40
 8001e48:	2100      	movs	r1, #0
 8001e4a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	e000      	b.n	8001e52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e50:	2302      	movs	r3, #2
  }
}
 8001e52:	0018      	movs	r0, r3
 8001e54:	46bd      	mov	sp, r7
 8001e56:	b002      	add	sp, #8
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	46c0      	nop			; (mov r8, r8)
 8001e5c:	ffffefff 	.word	0xffffefff

08001e60 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2241      	movs	r2, #65	; 0x41
 8001e6e:	5c9b      	ldrb	r3, [r3, r2]
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b20      	cmp	r3, #32
 8001e74:	d139      	bne.n	8001eea <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2240      	movs	r2, #64	; 0x40
 8001e7a:	5c9b      	ldrb	r3, [r3, r2]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d101      	bne.n	8001e84 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e80:	2302      	movs	r3, #2
 8001e82:	e033      	b.n	8001eec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2240      	movs	r2, #64	; 0x40
 8001e88:	2101      	movs	r1, #1
 8001e8a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2241      	movs	r2, #65	; 0x41
 8001e90:	2124      	movs	r1, #36	; 0x24
 8001e92:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	438a      	bics	r2, r1
 8001ea2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	4a11      	ldr	r2, [pc, #68]	; (8001ef4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	021b      	lsls	r3, r3, #8
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2241      	movs	r2, #65	; 0x41
 8001eda:	2120      	movs	r1, #32
 8001edc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2240      	movs	r2, #64	; 0x40
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	e000      	b.n	8001eec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001eea:	2302      	movs	r3, #2
  }
}
 8001eec:	0018      	movs	r0, r3
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	b004      	add	sp, #16
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	fffff0ff 	.word	0xfffff0ff

08001ef8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b088      	sub	sp, #32
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e305      	b.n	8002516 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	4013      	ands	r3, r2
 8001f12:	d100      	bne.n	8001f16 <HAL_RCC_OscConfig+0x1e>
 8001f14:	e08d      	b.n	8002032 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001f16:	4bc5      	ldr	r3, [pc, #788]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	220c      	movs	r2, #12
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	2b04      	cmp	r3, #4
 8001f20:	d00e      	beq.n	8001f40 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f22:	4bc2      	ldr	r3, [pc, #776]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	220c      	movs	r2, #12
 8001f28:	4013      	ands	r3, r2
 8001f2a:	2b08      	cmp	r3, #8
 8001f2c:	d116      	bne.n	8001f5c <HAL_RCC_OscConfig+0x64>
 8001f2e:	4bbf      	ldr	r3, [pc, #764]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8001f30:	685a      	ldr	r2, [r3, #4]
 8001f32:	23c0      	movs	r3, #192	; 0xc0
 8001f34:	025b      	lsls	r3, r3, #9
 8001f36:	401a      	ands	r2, r3
 8001f38:	2380      	movs	r3, #128	; 0x80
 8001f3a:	025b      	lsls	r3, r3, #9
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d10d      	bne.n	8001f5c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f40:	4bba      	ldr	r3, [pc, #744]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	2380      	movs	r3, #128	; 0x80
 8001f46:	029b      	lsls	r3, r3, #10
 8001f48:	4013      	ands	r3, r2
 8001f4a:	d100      	bne.n	8001f4e <HAL_RCC_OscConfig+0x56>
 8001f4c:	e070      	b.n	8002030 <HAL_RCC_OscConfig+0x138>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d000      	beq.n	8001f58 <HAL_RCC_OscConfig+0x60>
 8001f56:	e06b      	b.n	8002030 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e2dc      	b.n	8002516 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d107      	bne.n	8001f74 <HAL_RCC_OscConfig+0x7c>
 8001f64:	4bb1      	ldr	r3, [pc, #708]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	4bb0      	ldr	r3, [pc, #704]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8001f6a:	2180      	movs	r1, #128	; 0x80
 8001f6c:	0249      	lsls	r1, r1, #9
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	e02f      	b.n	8001fd4 <HAL_RCC_OscConfig+0xdc>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d10c      	bne.n	8001f96 <HAL_RCC_OscConfig+0x9e>
 8001f7c:	4bab      	ldr	r3, [pc, #684]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	4baa      	ldr	r3, [pc, #680]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8001f82:	49ab      	ldr	r1, [pc, #684]	; (8002230 <HAL_RCC_OscConfig+0x338>)
 8001f84:	400a      	ands	r2, r1
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	4ba8      	ldr	r3, [pc, #672]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	4ba7      	ldr	r3, [pc, #668]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8001f8e:	49a9      	ldr	r1, [pc, #676]	; (8002234 <HAL_RCC_OscConfig+0x33c>)
 8001f90:	400a      	ands	r2, r1
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	e01e      	b.n	8001fd4 <HAL_RCC_OscConfig+0xdc>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b05      	cmp	r3, #5
 8001f9c:	d10e      	bne.n	8001fbc <HAL_RCC_OscConfig+0xc4>
 8001f9e:	4ba3      	ldr	r3, [pc, #652]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	4ba2      	ldr	r3, [pc, #648]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8001fa4:	2180      	movs	r1, #128	; 0x80
 8001fa6:	02c9      	lsls	r1, r1, #11
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	4b9f      	ldr	r3, [pc, #636]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	4b9e      	ldr	r3, [pc, #632]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8001fb2:	2180      	movs	r1, #128	; 0x80
 8001fb4:	0249      	lsls	r1, r1, #9
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	e00b      	b.n	8001fd4 <HAL_RCC_OscConfig+0xdc>
 8001fbc:	4b9b      	ldr	r3, [pc, #620]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	4b9a      	ldr	r3, [pc, #616]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8001fc2:	499b      	ldr	r1, [pc, #620]	; (8002230 <HAL_RCC_OscConfig+0x338>)
 8001fc4:	400a      	ands	r2, r1
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	4b98      	ldr	r3, [pc, #608]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	4b97      	ldr	r3, [pc, #604]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8001fce:	4999      	ldr	r1, [pc, #612]	; (8002234 <HAL_RCC_OscConfig+0x33c>)
 8001fd0:	400a      	ands	r2, r1
 8001fd2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d014      	beq.n	8002006 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fdc:	f7fe fe02 	bl	8000be4 <HAL_GetTick>
 8001fe0:	0003      	movs	r3, r0
 8001fe2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fe6:	f7fe fdfd 	bl	8000be4 <HAL_GetTick>
 8001fea:	0002      	movs	r2, r0
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b64      	cmp	r3, #100	; 0x64
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e28e      	b.n	8002516 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ff8:	4b8c      	ldr	r3, [pc, #560]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	2380      	movs	r3, #128	; 0x80
 8001ffe:	029b      	lsls	r3, r3, #10
 8002000:	4013      	ands	r3, r2
 8002002:	d0f0      	beq.n	8001fe6 <HAL_RCC_OscConfig+0xee>
 8002004:	e015      	b.n	8002032 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002006:	f7fe fded 	bl	8000be4 <HAL_GetTick>
 800200a:	0003      	movs	r3, r0
 800200c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002010:	f7fe fde8 	bl	8000be4 <HAL_GetTick>
 8002014:	0002      	movs	r2, r0
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b64      	cmp	r3, #100	; 0x64
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e279      	b.n	8002516 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002022:	4b82      	ldr	r3, [pc, #520]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	2380      	movs	r3, #128	; 0x80
 8002028:	029b      	lsls	r3, r3, #10
 800202a:	4013      	ands	r3, r2
 800202c:	d1f0      	bne.n	8002010 <HAL_RCC_OscConfig+0x118>
 800202e:	e000      	b.n	8002032 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002030:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2202      	movs	r2, #2
 8002038:	4013      	ands	r3, r2
 800203a:	d100      	bne.n	800203e <HAL_RCC_OscConfig+0x146>
 800203c:	e06c      	b.n	8002118 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800203e:	4b7b      	ldr	r3, [pc, #492]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	220c      	movs	r2, #12
 8002044:	4013      	ands	r3, r2
 8002046:	d00e      	beq.n	8002066 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002048:	4b78      	ldr	r3, [pc, #480]	; (800222c <HAL_RCC_OscConfig+0x334>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	220c      	movs	r2, #12
 800204e:	4013      	ands	r3, r2
 8002050:	2b08      	cmp	r3, #8
 8002052:	d11f      	bne.n	8002094 <HAL_RCC_OscConfig+0x19c>
 8002054:	4b75      	ldr	r3, [pc, #468]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	23c0      	movs	r3, #192	; 0xc0
 800205a:	025b      	lsls	r3, r3, #9
 800205c:	401a      	ands	r2, r3
 800205e:	2380      	movs	r3, #128	; 0x80
 8002060:	021b      	lsls	r3, r3, #8
 8002062:	429a      	cmp	r2, r3
 8002064:	d116      	bne.n	8002094 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002066:	4b71      	ldr	r3, [pc, #452]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2202      	movs	r2, #2
 800206c:	4013      	ands	r3, r2
 800206e:	d005      	beq.n	800207c <HAL_RCC_OscConfig+0x184>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d001      	beq.n	800207c <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e24c      	b.n	8002516 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800207c:	4b6b      	ldr	r3, [pc, #428]	; (800222c <HAL_RCC_OscConfig+0x334>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	22f8      	movs	r2, #248	; 0xf8
 8002082:	4393      	bics	r3, r2
 8002084:	0019      	movs	r1, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	00da      	lsls	r2, r3, #3
 800208c:	4b67      	ldr	r3, [pc, #412]	; (800222c <HAL_RCC_OscConfig+0x334>)
 800208e:	430a      	orrs	r2, r1
 8002090:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002092:	e041      	b.n	8002118 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d024      	beq.n	80020e6 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800209c:	4b63      	ldr	r3, [pc, #396]	; (800222c <HAL_RCC_OscConfig+0x334>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	4b62      	ldr	r3, [pc, #392]	; (800222c <HAL_RCC_OscConfig+0x334>)
 80020a2:	2101      	movs	r1, #1
 80020a4:	430a      	orrs	r2, r1
 80020a6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a8:	f7fe fd9c 	bl	8000be4 <HAL_GetTick>
 80020ac:	0003      	movs	r3, r0
 80020ae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020b2:	f7fe fd97 	bl	8000be4 <HAL_GetTick>
 80020b6:	0002      	movs	r2, r0
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e228      	b.n	8002516 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c4:	4b59      	ldr	r3, [pc, #356]	; (800222c <HAL_RCC_OscConfig+0x334>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2202      	movs	r2, #2
 80020ca:	4013      	ands	r3, r2
 80020cc:	d0f1      	beq.n	80020b2 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ce:	4b57      	ldr	r3, [pc, #348]	; (800222c <HAL_RCC_OscConfig+0x334>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	22f8      	movs	r2, #248	; 0xf8
 80020d4:	4393      	bics	r3, r2
 80020d6:	0019      	movs	r1, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	00da      	lsls	r2, r3, #3
 80020de:	4b53      	ldr	r3, [pc, #332]	; (800222c <HAL_RCC_OscConfig+0x334>)
 80020e0:	430a      	orrs	r2, r1
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	e018      	b.n	8002118 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020e6:	4b51      	ldr	r3, [pc, #324]	; (800222c <HAL_RCC_OscConfig+0x334>)
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	4b50      	ldr	r3, [pc, #320]	; (800222c <HAL_RCC_OscConfig+0x334>)
 80020ec:	2101      	movs	r1, #1
 80020ee:	438a      	bics	r2, r1
 80020f0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f2:	f7fe fd77 	bl	8000be4 <HAL_GetTick>
 80020f6:	0003      	movs	r3, r0
 80020f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020fc:	f7fe fd72 	bl	8000be4 <HAL_GetTick>
 8002100:	0002      	movs	r2, r0
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e203      	b.n	8002516 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800210e:	4b47      	ldr	r3, [pc, #284]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2202      	movs	r2, #2
 8002114:	4013      	ands	r3, r2
 8002116:	d1f1      	bne.n	80020fc <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2208      	movs	r2, #8
 800211e:	4013      	ands	r3, r2
 8002120:	d036      	beq.n	8002190 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d019      	beq.n	800215e <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800212a:	4b40      	ldr	r3, [pc, #256]	; (800222c <HAL_RCC_OscConfig+0x334>)
 800212c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800212e:	4b3f      	ldr	r3, [pc, #252]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8002130:	2101      	movs	r1, #1
 8002132:	430a      	orrs	r2, r1
 8002134:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002136:	f7fe fd55 	bl	8000be4 <HAL_GetTick>
 800213a:	0003      	movs	r3, r0
 800213c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002140:	f7fe fd50 	bl	8000be4 <HAL_GetTick>
 8002144:	0002      	movs	r2, r0
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e1e1      	b.n	8002516 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002152:	4b36      	ldr	r3, [pc, #216]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8002154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002156:	2202      	movs	r2, #2
 8002158:	4013      	ands	r3, r2
 800215a:	d0f1      	beq.n	8002140 <HAL_RCC_OscConfig+0x248>
 800215c:	e018      	b.n	8002190 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800215e:	4b33      	ldr	r3, [pc, #204]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8002160:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002162:	4b32      	ldr	r3, [pc, #200]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8002164:	2101      	movs	r1, #1
 8002166:	438a      	bics	r2, r1
 8002168:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800216a:	f7fe fd3b 	bl	8000be4 <HAL_GetTick>
 800216e:	0003      	movs	r3, r0
 8002170:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002174:	f7fe fd36 	bl	8000be4 <HAL_GetTick>
 8002178:	0002      	movs	r2, r0
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e1c7      	b.n	8002516 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002186:	4b29      	ldr	r3, [pc, #164]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8002188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218a:	2202      	movs	r2, #2
 800218c:	4013      	ands	r3, r2
 800218e:	d1f1      	bne.n	8002174 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2204      	movs	r2, #4
 8002196:	4013      	ands	r3, r2
 8002198:	d100      	bne.n	800219c <HAL_RCC_OscConfig+0x2a4>
 800219a:	e0b5      	b.n	8002308 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 800219c:	201f      	movs	r0, #31
 800219e:	183b      	adds	r3, r7, r0
 80021a0:	2200      	movs	r2, #0
 80021a2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021a4:	4b21      	ldr	r3, [pc, #132]	; (800222c <HAL_RCC_OscConfig+0x334>)
 80021a6:	69da      	ldr	r2, [r3, #28]
 80021a8:	2380      	movs	r3, #128	; 0x80
 80021aa:	055b      	lsls	r3, r3, #21
 80021ac:	4013      	ands	r3, r2
 80021ae:	d110      	bne.n	80021d2 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021b0:	4b1e      	ldr	r3, [pc, #120]	; (800222c <HAL_RCC_OscConfig+0x334>)
 80021b2:	69da      	ldr	r2, [r3, #28]
 80021b4:	4b1d      	ldr	r3, [pc, #116]	; (800222c <HAL_RCC_OscConfig+0x334>)
 80021b6:	2180      	movs	r1, #128	; 0x80
 80021b8:	0549      	lsls	r1, r1, #21
 80021ba:	430a      	orrs	r2, r1
 80021bc:	61da      	str	r2, [r3, #28]
 80021be:	4b1b      	ldr	r3, [pc, #108]	; (800222c <HAL_RCC_OscConfig+0x334>)
 80021c0:	69da      	ldr	r2, [r3, #28]
 80021c2:	2380      	movs	r3, #128	; 0x80
 80021c4:	055b      	lsls	r3, r3, #21
 80021c6:	4013      	ands	r3, r2
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80021cc:	183b      	adds	r3, r7, r0
 80021ce:	2201      	movs	r2, #1
 80021d0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d2:	4b19      	ldr	r3, [pc, #100]	; (8002238 <HAL_RCC_OscConfig+0x340>)
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	2380      	movs	r3, #128	; 0x80
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	4013      	ands	r3, r2
 80021dc:	d11a      	bne.n	8002214 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021de:	4b16      	ldr	r3, [pc, #88]	; (8002238 <HAL_RCC_OscConfig+0x340>)
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	4b15      	ldr	r3, [pc, #84]	; (8002238 <HAL_RCC_OscConfig+0x340>)
 80021e4:	2180      	movs	r1, #128	; 0x80
 80021e6:	0049      	lsls	r1, r1, #1
 80021e8:	430a      	orrs	r2, r1
 80021ea:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ec:	f7fe fcfa 	bl	8000be4 <HAL_GetTick>
 80021f0:	0003      	movs	r3, r0
 80021f2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f4:	e008      	b.n	8002208 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021f6:	f7fe fcf5 	bl	8000be4 <HAL_GetTick>
 80021fa:	0002      	movs	r2, r0
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b64      	cmp	r3, #100	; 0x64
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e186      	b.n	8002516 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002208:	4b0b      	ldr	r3, [pc, #44]	; (8002238 <HAL_RCC_OscConfig+0x340>)
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	2380      	movs	r3, #128	; 0x80
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	4013      	ands	r3, r2
 8002212:	d0f0      	beq.n	80021f6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d10f      	bne.n	800223c <HAL_RCC_OscConfig+0x344>
 800221c:	4b03      	ldr	r3, [pc, #12]	; (800222c <HAL_RCC_OscConfig+0x334>)
 800221e:	6a1a      	ldr	r2, [r3, #32]
 8002220:	4b02      	ldr	r3, [pc, #8]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8002222:	2101      	movs	r1, #1
 8002224:	430a      	orrs	r2, r1
 8002226:	621a      	str	r2, [r3, #32]
 8002228:	e036      	b.n	8002298 <HAL_RCC_OscConfig+0x3a0>
 800222a:	46c0      	nop			; (mov r8, r8)
 800222c:	40021000 	.word	0x40021000
 8002230:	fffeffff 	.word	0xfffeffff
 8002234:	fffbffff 	.word	0xfffbffff
 8002238:	40007000 	.word	0x40007000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d10c      	bne.n	800225e <HAL_RCC_OscConfig+0x366>
 8002244:	4bb6      	ldr	r3, [pc, #728]	; (8002520 <HAL_RCC_OscConfig+0x628>)
 8002246:	6a1a      	ldr	r2, [r3, #32]
 8002248:	4bb5      	ldr	r3, [pc, #724]	; (8002520 <HAL_RCC_OscConfig+0x628>)
 800224a:	2101      	movs	r1, #1
 800224c:	438a      	bics	r2, r1
 800224e:	621a      	str	r2, [r3, #32]
 8002250:	4bb3      	ldr	r3, [pc, #716]	; (8002520 <HAL_RCC_OscConfig+0x628>)
 8002252:	6a1a      	ldr	r2, [r3, #32]
 8002254:	4bb2      	ldr	r3, [pc, #712]	; (8002520 <HAL_RCC_OscConfig+0x628>)
 8002256:	2104      	movs	r1, #4
 8002258:	438a      	bics	r2, r1
 800225a:	621a      	str	r2, [r3, #32]
 800225c:	e01c      	b.n	8002298 <HAL_RCC_OscConfig+0x3a0>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	2b05      	cmp	r3, #5
 8002264:	d10c      	bne.n	8002280 <HAL_RCC_OscConfig+0x388>
 8002266:	4bae      	ldr	r3, [pc, #696]	; (8002520 <HAL_RCC_OscConfig+0x628>)
 8002268:	6a1a      	ldr	r2, [r3, #32]
 800226a:	4bad      	ldr	r3, [pc, #692]	; (8002520 <HAL_RCC_OscConfig+0x628>)
 800226c:	2104      	movs	r1, #4
 800226e:	430a      	orrs	r2, r1
 8002270:	621a      	str	r2, [r3, #32]
 8002272:	4bab      	ldr	r3, [pc, #684]	; (8002520 <HAL_RCC_OscConfig+0x628>)
 8002274:	6a1a      	ldr	r2, [r3, #32]
 8002276:	4baa      	ldr	r3, [pc, #680]	; (8002520 <HAL_RCC_OscConfig+0x628>)
 8002278:	2101      	movs	r1, #1
 800227a:	430a      	orrs	r2, r1
 800227c:	621a      	str	r2, [r3, #32]
 800227e:	e00b      	b.n	8002298 <HAL_RCC_OscConfig+0x3a0>
 8002280:	4ba7      	ldr	r3, [pc, #668]	; (8002520 <HAL_RCC_OscConfig+0x628>)
 8002282:	6a1a      	ldr	r2, [r3, #32]
 8002284:	4ba6      	ldr	r3, [pc, #664]	; (8002520 <HAL_RCC_OscConfig+0x628>)
 8002286:	2101      	movs	r1, #1
 8002288:	438a      	bics	r2, r1
 800228a:	621a      	str	r2, [r3, #32]
 800228c:	4ba4      	ldr	r3, [pc, #656]	; (8002520 <HAL_RCC_OscConfig+0x628>)
 800228e:	6a1a      	ldr	r2, [r3, #32]
 8002290:	4ba3      	ldr	r3, [pc, #652]	; (8002520 <HAL_RCC_OscConfig+0x628>)
 8002292:	2104      	movs	r1, #4
 8002294:	438a      	bics	r2, r1
 8002296:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d014      	beq.n	80022ca <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a0:	f7fe fca0 	bl	8000be4 <HAL_GetTick>
 80022a4:	0003      	movs	r3, r0
 80022a6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022a8:	e009      	b.n	80022be <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022aa:	f7fe fc9b 	bl	8000be4 <HAL_GetTick>
 80022ae:	0002      	movs	r2, r0
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	4a9b      	ldr	r2, [pc, #620]	; (8002524 <HAL_RCC_OscConfig+0x62c>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e12b      	b.n	8002516 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022be:	4b98      	ldr	r3, [pc, #608]	; (8002520 <HAL_RCC_OscConfig+0x628>)
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	2202      	movs	r2, #2
 80022c4:	4013      	ands	r3, r2
 80022c6:	d0f0      	beq.n	80022aa <HAL_RCC_OscConfig+0x3b2>
 80022c8:	e013      	b.n	80022f2 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ca:	f7fe fc8b 	bl	8000be4 <HAL_GetTick>
 80022ce:	0003      	movs	r3, r0
 80022d0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022d2:	e009      	b.n	80022e8 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022d4:	f7fe fc86 	bl	8000be4 <HAL_GetTick>
 80022d8:	0002      	movs	r2, r0
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	4a91      	ldr	r2, [pc, #580]	; (8002524 <HAL_RCC_OscConfig+0x62c>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e116      	b.n	8002516 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022e8:	4b8d      	ldr	r3, [pc, #564]	; (8002520 <HAL_RCC_OscConfig+0x628>)
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	2202      	movs	r2, #2
 80022ee:	4013      	ands	r3, r2
 80022f0:	d1f0      	bne.n	80022d4 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022f2:	231f      	movs	r3, #31
 80022f4:	18fb      	adds	r3, r7, r3
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d105      	bne.n	8002308 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022fc:	4b88      	ldr	r3, [pc, #544]	; (8002520 <HAL_RCC_OscConfig+0x628>)
 80022fe:	69da      	ldr	r2, [r3, #28]
 8002300:	4b87      	ldr	r3, [pc, #540]	; (8002520 <HAL_RCC_OscConfig+0x628>)
 8002302:	4989      	ldr	r1, [pc, #548]	; (8002528 <HAL_RCC_OscConfig+0x630>)
 8002304:	400a      	ands	r2, r1
 8002306:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2210      	movs	r2, #16
 800230e:	4013      	ands	r3, r2
 8002310:	d063      	beq.n	80023da <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d12a      	bne.n	8002370 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800231a:	4b81      	ldr	r3, [pc, #516]	; (8002520 <HAL_RCC_OscConfig+0x628>)
 800231c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800231e:	4b80      	ldr	r3, [pc, #512]	; (8002520 <HAL_RCC_OscConfig+0x628>)
 8002320:	2104      	movs	r1, #4
 8002322:	430a      	orrs	r2, r1
 8002324:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002326:	4b7e      	ldr	r3, [pc, #504]	; (8002520 <HAL_RCC_OscConfig+0x628>)
 8002328:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800232a:	4b7d      	ldr	r3, [pc, #500]	; (8002520 <HAL_RCC_OscConfig+0x628>)
 800232c:	2101      	movs	r1, #1
 800232e:	430a      	orrs	r2, r1
 8002330:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002332:	f7fe fc57 	bl	8000be4 <HAL_GetTick>
 8002336:	0003      	movs	r3, r0
 8002338:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800233c:	f7fe fc52 	bl	8000be4 <HAL_GetTick>
 8002340:	0002      	movs	r2, r0
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e0e3      	b.n	8002516 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800234e:	4b74      	ldr	r3, [pc, #464]	; (8002520 <HAL_RCC_OscConfig+0x628>)
 8002350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002352:	2202      	movs	r2, #2
 8002354:	4013      	ands	r3, r2
 8002356:	d0f1      	beq.n	800233c <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002358:	4b71      	ldr	r3, [pc, #452]	; (8002520 <HAL_RCC_OscConfig+0x628>)
 800235a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800235c:	22f8      	movs	r2, #248	; 0xf8
 800235e:	4393      	bics	r3, r2
 8002360:	0019      	movs	r1, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	00da      	lsls	r2, r3, #3
 8002368:	4b6d      	ldr	r3, [pc, #436]	; (8002520 <HAL_RCC_OscConfig+0x628>)
 800236a:	430a      	orrs	r2, r1
 800236c:	635a      	str	r2, [r3, #52]	; 0x34
 800236e:	e034      	b.n	80023da <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	695b      	ldr	r3, [r3, #20]
 8002374:	3305      	adds	r3, #5
 8002376:	d111      	bne.n	800239c <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002378:	4b69      	ldr	r3, [pc, #420]	; (8002520 <HAL_RCC_OscConfig+0x628>)
 800237a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800237c:	4b68      	ldr	r3, [pc, #416]	; (8002520 <HAL_RCC_OscConfig+0x628>)
 800237e:	2104      	movs	r1, #4
 8002380:	438a      	bics	r2, r1
 8002382:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002384:	4b66      	ldr	r3, [pc, #408]	; (8002520 <HAL_RCC_OscConfig+0x628>)
 8002386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002388:	22f8      	movs	r2, #248	; 0xf8
 800238a:	4393      	bics	r3, r2
 800238c:	0019      	movs	r1, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	00da      	lsls	r2, r3, #3
 8002394:	4b62      	ldr	r3, [pc, #392]	; (8002520 <HAL_RCC_OscConfig+0x628>)
 8002396:	430a      	orrs	r2, r1
 8002398:	635a      	str	r2, [r3, #52]	; 0x34
 800239a:	e01e      	b.n	80023da <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800239c:	4b60      	ldr	r3, [pc, #384]	; (8002520 <HAL_RCC_OscConfig+0x628>)
 800239e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023a0:	4b5f      	ldr	r3, [pc, #380]	; (8002520 <HAL_RCC_OscConfig+0x628>)
 80023a2:	2104      	movs	r1, #4
 80023a4:	430a      	orrs	r2, r1
 80023a6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80023a8:	4b5d      	ldr	r3, [pc, #372]	; (8002520 <HAL_RCC_OscConfig+0x628>)
 80023aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023ac:	4b5c      	ldr	r3, [pc, #368]	; (8002520 <HAL_RCC_OscConfig+0x628>)
 80023ae:	2101      	movs	r1, #1
 80023b0:	438a      	bics	r2, r1
 80023b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b4:	f7fe fc16 	bl	8000be4 <HAL_GetTick>
 80023b8:	0003      	movs	r3, r0
 80023ba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80023bc:	e008      	b.n	80023d0 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80023be:	f7fe fc11 	bl	8000be4 <HAL_GetTick>
 80023c2:	0002      	movs	r2, r0
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e0a2      	b.n	8002516 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80023d0:	4b53      	ldr	r3, [pc, #332]	; (8002520 <HAL_RCC_OscConfig+0x628>)
 80023d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023d4:	2202      	movs	r2, #2
 80023d6:	4013      	ands	r3, r2
 80023d8:	d1f1      	bne.n	80023be <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d100      	bne.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
 80023e2:	e097      	b.n	8002514 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023e4:	4b4e      	ldr	r3, [pc, #312]	; (8002520 <HAL_RCC_OscConfig+0x628>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	220c      	movs	r2, #12
 80023ea:	4013      	ands	r3, r2
 80023ec:	2b08      	cmp	r3, #8
 80023ee:	d100      	bne.n	80023f2 <HAL_RCC_OscConfig+0x4fa>
 80023f0:	e06b      	b.n	80024ca <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a1b      	ldr	r3, [r3, #32]
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d14c      	bne.n	8002494 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023fa:	4b49      	ldr	r3, [pc, #292]	; (8002520 <HAL_RCC_OscConfig+0x628>)
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	4b48      	ldr	r3, [pc, #288]	; (8002520 <HAL_RCC_OscConfig+0x628>)
 8002400:	494a      	ldr	r1, [pc, #296]	; (800252c <HAL_RCC_OscConfig+0x634>)
 8002402:	400a      	ands	r2, r1
 8002404:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002406:	f7fe fbed 	bl	8000be4 <HAL_GetTick>
 800240a:	0003      	movs	r3, r0
 800240c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002410:	f7fe fbe8 	bl	8000be4 <HAL_GetTick>
 8002414:	0002      	movs	r2, r0
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e079      	b.n	8002516 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002422:	4b3f      	ldr	r3, [pc, #252]	; (8002520 <HAL_RCC_OscConfig+0x628>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	2380      	movs	r3, #128	; 0x80
 8002428:	049b      	lsls	r3, r3, #18
 800242a:	4013      	ands	r3, r2
 800242c:	d1f0      	bne.n	8002410 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800242e:	4b3c      	ldr	r3, [pc, #240]	; (8002520 <HAL_RCC_OscConfig+0x628>)
 8002430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002432:	220f      	movs	r2, #15
 8002434:	4393      	bics	r3, r2
 8002436:	0019      	movs	r1, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800243c:	4b38      	ldr	r3, [pc, #224]	; (8002520 <HAL_RCC_OscConfig+0x628>)
 800243e:	430a      	orrs	r2, r1
 8002440:	62da      	str	r2, [r3, #44]	; 0x2c
 8002442:	4b37      	ldr	r3, [pc, #220]	; (8002520 <HAL_RCC_OscConfig+0x628>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	4a3a      	ldr	r2, [pc, #232]	; (8002530 <HAL_RCC_OscConfig+0x638>)
 8002448:	4013      	ands	r3, r2
 800244a:	0019      	movs	r1, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002454:	431a      	orrs	r2, r3
 8002456:	4b32      	ldr	r3, [pc, #200]	; (8002520 <HAL_RCC_OscConfig+0x628>)
 8002458:	430a      	orrs	r2, r1
 800245a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800245c:	4b30      	ldr	r3, [pc, #192]	; (8002520 <HAL_RCC_OscConfig+0x628>)
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	4b2f      	ldr	r3, [pc, #188]	; (8002520 <HAL_RCC_OscConfig+0x628>)
 8002462:	2180      	movs	r1, #128	; 0x80
 8002464:	0449      	lsls	r1, r1, #17
 8002466:	430a      	orrs	r2, r1
 8002468:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246a:	f7fe fbbb 	bl	8000be4 <HAL_GetTick>
 800246e:	0003      	movs	r3, r0
 8002470:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002474:	f7fe fbb6 	bl	8000be4 <HAL_GetTick>
 8002478:	0002      	movs	r2, r0
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e047      	b.n	8002516 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002486:	4b26      	ldr	r3, [pc, #152]	; (8002520 <HAL_RCC_OscConfig+0x628>)
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	2380      	movs	r3, #128	; 0x80
 800248c:	049b      	lsls	r3, r3, #18
 800248e:	4013      	ands	r3, r2
 8002490:	d0f0      	beq.n	8002474 <HAL_RCC_OscConfig+0x57c>
 8002492:	e03f      	b.n	8002514 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002494:	4b22      	ldr	r3, [pc, #136]	; (8002520 <HAL_RCC_OscConfig+0x628>)
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	4b21      	ldr	r3, [pc, #132]	; (8002520 <HAL_RCC_OscConfig+0x628>)
 800249a:	4924      	ldr	r1, [pc, #144]	; (800252c <HAL_RCC_OscConfig+0x634>)
 800249c:	400a      	ands	r2, r1
 800249e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a0:	f7fe fba0 	bl	8000be4 <HAL_GetTick>
 80024a4:	0003      	movs	r3, r0
 80024a6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024a8:	e008      	b.n	80024bc <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024aa:	f7fe fb9b 	bl	8000be4 <HAL_GetTick>
 80024ae:	0002      	movs	r2, r0
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e02c      	b.n	8002516 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024bc:	4b18      	ldr	r3, [pc, #96]	; (8002520 <HAL_RCC_OscConfig+0x628>)
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	2380      	movs	r3, #128	; 0x80
 80024c2:	049b      	lsls	r3, r3, #18
 80024c4:	4013      	ands	r3, r2
 80024c6:	d1f0      	bne.n	80024aa <HAL_RCC_OscConfig+0x5b2>
 80024c8:	e024      	b.n	8002514 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d101      	bne.n	80024d6 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e01f      	b.n	8002516 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80024d6:	4b12      	ldr	r3, [pc, #72]	; (8002520 <HAL_RCC_OscConfig+0x628>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80024dc:	4b10      	ldr	r3, [pc, #64]	; (8002520 <HAL_RCC_OscConfig+0x628>)
 80024de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	23c0      	movs	r3, #192	; 0xc0
 80024e6:	025b      	lsls	r3, r3, #9
 80024e8:	401a      	ands	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d10e      	bne.n	8002510 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	220f      	movs	r2, #15
 80024f6:	401a      	ands	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d107      	bne.n	8002510 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002500:	697a      	ldr	r2, [r7, #20]
 8002502:	23f0      	movs	r3, #240	; 0xf0
 8002504:	039b      	lsls	r3, r3, #14
 8002506:	401a      	ands	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800250c:	429a      	cmp	r2, r3
 800250e:	d001      	beq.n	8002514 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e000      	b.n	8002516 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	0018      	movs	r0, r3
 8002518:	46bd      	mov	sp, r7
 800251a:	b008      	add	sp, #32
 800251c:	bd80      	pop	{r7, pc}
 800251e:	46c0      	nop			; (mov r8, r8)
 8002520:	40021000 	.word	0x40021000
 8002524:	00001388 	.word	0x00001388
 8002528:	efffffff 	.word	0xefffffff
 800252c:	feffffff 	.word	0xfeffffff
 8002530:	ffc27fff 	.word	0xffc27fff

08002534 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d101      	bne.n	8002548 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e0b3      	b.n	80026b0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002548:	4b5b      	ldr	r3, [pc, #364]	; (80026b8 <HAL_RCC_ClockConfig+0x184>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2201      	movs	r2, #1
 800254e:	4013      	ands	r3, r2
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	429a      	cmp	r2, r3
 8002554:	d911      	bls.n	800257a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002556:	4b58      	ldr	r3, [pc, #352]	; (80026b8 <HAL_RCC_ClockConfig+0x184>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2201      	movs	r2, #1
 800255c:	4393      	bics	r3, r2
 800255e:	0019      	movs	r1, r3
 8002560:	4b55      	ldr	r3, [pc, #340]	; (80026b8 <HAL_RCC_ClockConfig+0x184>)
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	430a      	orrs	r2, r1
 8002566:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002568:	4b53      	ldr	r3, [pc, #332]	; (80026b8 <HAL_RCC_ClockConfig+0x184>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2201      	movs	r2, #1
 800256e:	4013      	ands	r3, r2
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	429a      	cmp	r2, r3
 8002574:	d001      	beq.n	800257a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e09a      	b.n	80026b0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2202      	movs	r2, #2
 8002580:	4013      	ands	r3, r2
 8002582:	d015      	beq.n	80025b0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2204      	movs	r2, #4
 800258a:	4013      	ands	r3, r2
 800258c:	d006      	beq.n	800259c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800258e:	4b4b      	ldr	r3, [pc, #300]	; (80026bc <HAL_RCC_ClockConfig+0x188>)
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	4b4a      	ldr	r3, [pc, #296]	; (80026bc <HAL_RCC_ClockConfig+0x188>)
 8002594:	21e0      	movs	r1, #224	; 0xe0
 8002596:	00c9      	lsls	r1, r1, #3
 8002598:	430a      	orrs	r2, r1
 800259a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800259c:	4b47      	ldr	r3, [pc, #284]	; (80026bc <HAL_RCC_ClockConfig+0x188>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	22f0      	movs	r2, #240	; 0xf0
 80025a2:	4393      	bics	r3, r2
 80025a4:	0019      	movs	r1, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689a      	ldr	r2, [r3, #8]
 80025aa:	4b44      	ldr	r3, [pc, #272]	; (80026bc <HAL_RCC_ClockConfig+0x188>)
 80025ac:	430a      	orrs	r2, r1
 80025ae:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2201      	movs	r2, #1
 80025b6:	4013      	ands	r3, r2
 80025b8:	d040      	beq.n	800263c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d107      	bne.n	80025d2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c2:	4b3e      	ldr	r3, [pc, #248]	; (80026bc <HAL_RCC_ClockConfig+0x188>)
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	2380      	movs	r3, #128	; 0x80
 80025c8:	029b      	lsls	r3, r3, #10
 80025ca:	4013      	ands	r3, r2
 80025cc:	d114      	bne.n	80025f8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e06e      	b.n	80026b0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d107      	bne.n	80025ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025da:	4b38      	ldr	r3, [pc, #224]	; (80026bc <HAL_RCC_ClockConfig+0x188>)
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	2380      	movs	r3, #128	; 0x80
 80025e0:	049b      	lsls	r3, r3, #18
 80025e2:	4013      	ands	r3, r2
 80025e4:	d108      	bne.n	80025f8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e062      	b.n	80026b0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ea:	4b34      	ldr	r3, [pc, #208]	; (80026bc <HAL_RCC_ClockConfig+0x188>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2202      	movs	r2, #2
 80025f0:	4013      	ands	r3, r2
 80025f2:	d101      	bne.n	80025f8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e05b      	b.n	80026b0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025f8:	4b30      	ldr	r3, [pc, #192]	; (80026bc <HAL_RCC_ClockConfig+0x188>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	2203      	movs	r2, #3
 80025fe:	4393      	bics	r3, r2
 8002600:	0019      	movs	r1, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685a      	ldr	r2, [r3, #4]
 8002606:	4b2d      	ldr	r3, [pc, #180]	; (80026bc <HAL_RCC_ClockConfig+0x188>)
 8002608:	430a      	orrs	r2, r1
 800260a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800260c:	f7fe faea 	bl	8000be4 <HAL_GetTick>
 8002610:	0003      	movs	r3, r0
 8002612:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002614:	e009      	b.n	800262a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002616:	f7fe fae5 	bl	8000be4 <HAL_GetTick>
 800261a:	0002      	movs	r2, r0
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	4a27      	ldr	r2, [pc, #156]	; (80026c0 <HAL_RCC_ClockConfig+0x18c>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d901      	bls.n	800262a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e042      	b.n	80026b0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800262a:	4b24      	ldr	r3, [pc, #144]	; (80026bc <HAL_RCC_ClockConfig+0x188>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	220c      	movs	r2, #12
 8002630:	401a      	ands	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	429a      	cmp	r2, r3
 800263a:	d1ec      	bne.n	8002616 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800263c:	4b1e      	ldr	r3, [pc, #120]	; (80026b8 <HAL_RCC_ClockConfig+0x184>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2201      	movs	r2, #1
 8002642:	4013      	ands	r3, r2
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	429a      	cmp	r2, r3
 8002648:	d211      	bcs.n	800266e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264a:	4b1b      	ldr	r3, [pc, #108]	; (80026b8 <HAL_RCC_ClockConfig+0x184>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2201      	movs	r2, #1
 8002650:	4393      	bics	r3, r2
 8002652:	0019      	movs	r1, r3
 8002654:	4b18      	ldr	r3, [pc, #96]	; (80026b8 <HAL_RCC_ClockConfig+0x184>)
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	430a      	orrs	r2, r1
 800265a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800265c:	4b16      	ldr	r3, [pc, #88]	; (80026b8 <HAL_RCC_ClockConfig+0x184>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2201      	movs	r2, #1
 8002662:	4013      	ands	r3, r2
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	429a      	cmp	r2, r3
 8002668:	d001      	beq.n	800266e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e020      	b.n	80026b0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2204      	movs	r2, #4
 8002674:	4013      	ands	r3, r2
 8002676:	d009      	beq.n	800268c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002678:	4b10      	ldr	r3, [pc, #64]	; (80026bc <HAL_RCC_ClockConfig+0x188>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	4a11      	ldr	r2, [pc, #68]	; (80026c4 <HAL_RCC_ClockConfig+0x190>)
 800267e:	4013      	ands	r3, r2
 8002680:	0019      	movs	r1, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	68da      	ldr	r2, [r3, #12]
 8002686:	4b0d      	ldr	r3, [pc, #52]	; (80026bc <HAL_RCC_ClockConfig+0x188>)
 8002688:	430a      	orrs	r2, r1
 800268a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800268c:	f000 f820 	bl	80026d0 <HAL_RCC_GetSysClockFreq>
 8002690:	0001      	movs	r1, r0
 8002692:	4b0a      	ldr	r3, [pc, #40]	; (80026bc <HAL_RCC_ClockConfig+0x188>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	091b      	lsrs	r3, r3, #4
 8002698:	220f      	movs	r2, #15
 800269a:	4013      	ands	r3, r2
 800269c:	4a0a      	ldr	r2, [pc, #40]	; (80026c8 <HAL_RCC_ClockConfig+0x194>)
 800269e:	5cd3      	ldrb	r3, [r2, r3]
 80026a0:	000a      	movs	r2, r1
 80026a2:	40da      	lsrs	r2, r3
 80026a4:	4b09      	ldr	r3, [pc, #36]	; (80026cc <HAL_RCC_ClockConfig+0x198>)
 80026a6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80026a8:	2003      	movs	r0, #3
 80026aa:	f7fe f995 	bl	80009d8 <HAL_InitTick>
  
  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	0018      	movs	r0, r3
 80026b2:	46bd      	mov	sp, r7
 80026b4:	b004      	add	sp, #16
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40022000 	.word	0x40022000
 80026bc:	40021000 	.word	0x40021000
 80026c0:	00001388 	.word	0x00001388
 80026c4:	fffff8ff 	.word	0xfffff8ff
 80026c8:	08007d24 	.word	0x08007d24
 80026cc:	20000000 	.word	0x20000000

080026d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026d0:	b590      	push	{r4, r7, lr}
 80026d2:	b08f      	sub	sp, #60	; 0x3c
 80026d4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80026d6:	2314      	movs	r3, #20
 80026d8:	18fb      	adds	r3, r7, r3
 80026da:	4a2c      	ldr	r2, [pc, #176]	; (800278c <HAL_RCC_GetSysClockFreq+0xbc>)
 80026dc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80026de:	c313      	stmia	r3!, {r0, r1, r4}
 80026e0:	6812      	ldr	r2, [r2, #0]
 80026e2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80026e4:	1d3b      	adds	r3, r7, #4
 80026e6:	4a2a      	ldr	r2, [pc, #168]	; (8002790 <HAL_RCC_GetSysClockFreq+0xc0>)
 80026e8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80026ea:	c313      	stmia	r3!, {r0, r1, r4}
 80026ec:	6812      	ldr	r2, [r2, #0]
 80026ee:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026f0:	2300      	movs	r3, #0
 80026f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026f4:	2300      	movs	r3, #0
 80026f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80026f8:	2300      	movs	r3, #0
 80026fa:	637b      	str	r3, [r7, #52]	; 0x34
 80026fc:	2300      	movs	r3, #0
 80026fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002700:	2300      	movs	r3, #0
 8002702:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002704:	4b23      	ldr	r3, [pc, #140]	; (8002794 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800270a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800270c:	220c      	movs	r2, #12
 800270e:	4013      	ands	r3, r2
 8002710:	2b04      	cmp	r3, #4
 8002712:	d002      	beq.n	800271a <HAL_RCC_GetSysClockFreq+0x4a>
 8002714:	2b08      	cmp	r3, #8
 8002716:	d003      	beq.n	8002720 <HAL_RCC_GetSysClockFreq+0x50>
 8002718:	e02f      	b.n	800277a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800271a:	4b1f      	ldr	r3, [pc, #124]	; (8002798 <HAL_RCC_GetSysClockFreq+0xc8>)
 800271c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800271e:	e02f      	b.n	8002780 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002722:	0c9b      	lsrs	r3, r3, #18
 8002724:	220f      	movs	r2, #15
 8002726:	4013      	ands	r3, r2
 8002728:	2214      	movs	r2, #20
 800272a:	18ba      	adds	r2, r7, r2
 800272c:	5cd3      	ldrb	r3, [r2, r3]
 800272e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002730:	4b18      	ldr	r3, [pc, #96]	; (8002794 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002734:	220f      	movs	r2, #15
 8002736:	4013      	ands	r3, r2
 8002738:	1d3a      	adds	r2, r7, #4
 800273a:	5cd3      	ldrb	r3, [r2, r3]
 800273c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800273e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002740:	23c0      	movs	r3, #192	; 0xc0
 8002742:	025b      	lsls	r3, r3, #9
 8002744:	401a      	ands	r2, r3
 8002746:	2380      	movs	r3, #128	; 0x80
 8002748:	025b      	lsls	r3, r3, #9
 800274a:	429a      	cmp	r2, r3
 800274c:	d109      	bne.n	8002762 <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800274e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002750:	4811      	ldr	r0, [pc, #68]	; (8002798 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002752:	f7fd fcd9 	bl	8000108 <__udivsi3>
 8002756:	0003      	movs	r3, r0
 8002758:	001a      	movs	r2, r3
 800275a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275c:	4353      	muls	r3, r2
 800275e:	637b      	str	r3, [r7, #52]	; 0x34
 8002760:	e008      	b.n	8002774 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002762:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002764:	480c      	ldr	r0, [pc, #48]	; (8002798 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002766:	f7fd fccf 	bl	8000108 <__udivsi3>
 800276a:	0003      	movs	r3, r0
 800276c:	001a      	movs	r2, r3
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	4353      	muls	r3, r2
 8002772:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002776:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002778:	e002      	b.n	8002780 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800277a:	4b07      	ldr	r3, [pc, #28]	; (8002798 <HAL_RCC_GetSysClockFreq+0xc8>)
 800277c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800277e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002782:	0018      	movs	r0, r3
 8002784:	46bd      	mov	sp, r7
 8002786:	b00f      	add	sp, #60	; 0x3c
 8002788:	bd90      	pop	{r4, r7, pc}
 800278a:	46c0      	nop			; (mov r8, r8)
 800278c:	08007870 	.word	0x08007870
 8002790:	08007880 	.word	0x08007880
 8002794:	40021000 	.word	0x40021000
 8002798:	007a1200 	.word	0x007a1200

0800279c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027a0:	4b02      	ldr	r3, [pc, #8]	; (80027ac <HAL_RCC_GetHCLKFreq+0x10>)
 80027a2:	681b      	ldr	r3, [r3, #0]
}
 80027a4:	0018      	movs	r0, r3
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	46c0      	nop			; (mov r8, r8)
 80027ac:	20000000 	.word	0x20000000

080027b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80027b4:	f7ff fff2 	bl	800279c <HAL_RCC_GetHCLKFreq>
 80027b8:	0001      	movs	r1, r0
 80027ba:	4b06      	ldr	r3, [pc, #24]	; (80027d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	0a1b      	lsrs	r3, r3, #8
 80027c0:	2207      	movs	r2, #7
 80027c2:	4013      	ands	r3, r2
 80027c4:	4a04      	ldr	r2, [pc, #16]	; (80027d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80027c6:	5cd3      	ldrb	r3, [r2, r3]
 80027c8:	40d9      	lsrs	r1, r3
 80027ca:	000b      	movs	r3, r1
}    
 80027cc:	0018      	movs	r0, r3
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	46c0      	nop			; (mov r8, r8)
 80027d4:	40021000 	.word	0x40021000
 80027d8:	08007d34 	.word	0x08007d34

080027dc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2207      	movs	r2, #7
 80027ea:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80027ec:	4b0e      	ldr	r3, [pc, #56]	; (8002828 <HAL_RCC_GetClockConfig+0x4c>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	2203      	movs	r2, #3
 80027f2:	401a      	ands	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80027f8:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <HAL_RCC_GetClockConfig+0x4c>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	22f0      	movs	r2, #240	; 0xf0
 80027fe:	401a      	ands	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8002804:	4b08      	ldr	r3, [pc, #32]	; (8002828 <HAL_RCC_GetClockConfig+0x4c>)
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	23e0      	movs	r3, #224	; 0xe0
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	401a      	ands	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8002812:	4b06      	ldr	r3, [pc, #24]	; (800282c <HAL_RCC_GetClockConfig+0x50>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2201      	movs	r2, #1
 8002818:	401a      	ands	r2, r3
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	601a      	str	r2, [r3, #0]
}
 800281e:	46c0      	nop			; (mov r8, r8)
 8002820:	46bd      	mov	sp, r7
 8002822:	b002      	add	sp, #8
 8002824:	bd80      	pop	{r7, pc}
 8002826:	46c0      	nop			; (mov r8, r8)
 8002828:	40021000 	.word	0x40021000
 800282c:	40022000 	.word	0x40022000

08002830 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002838:	2300      	movs	r3, #0
 800283a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800283c:	2300      	movs	r3, #0
 800283e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	2380      	movs	r3, #128	; 0x80
 8002846:	025b      	lsls	r3, r3, #9
 8002848:	4013      	ands	r3, r2
 800284a:	d100      	bne.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800284c:	e08e      	b.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800284e:	2017      	movs	r0, #23
 8002850:	183b      	adds	r3, r7, r0
 8002852:	2200      	movs	r2, #0
 8002854:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002856:	4b5f      	ldr	r3, [pc, #380]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002858:	69da      	ldr	r2, [r3, #28]
 800285a:	2380      	movs	r3, #128	; 0x80
 800285c:	055b      	lsls	r3, r3, #21
 800285e:	4013      	ands	r3, r2
 8002860:	d110      	bne.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002862:	4b5c      	ldr	r3, [pc, #368]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002864:	69da      	ldr	r2, [r3, #28]
 8002866:	4b5b      	ldr	r3, [pc, #364]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002868:	2180      	movs	r1, #128	; 0x80
 800286a:	0549      	lsls	r1, r1, #21
 800286c:	430a      	orrs	r2, r1
 800286e:	61da      	str	r2, [r3, #28]
 8002870:	4b58      	ldr	r3, [pc, #352]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002872:	69da      	ldr	r2, [r3, #28]
 8002874:	2380      	movs	r3, #128	; 0x80
 8002876:	055b      	lsls	r3, r3, #21
 8002878:	4013      	ands	r3, r2
 800287a:	60bb      	str	r3, [r7, #8]
 800287c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800287e:	183b      	adds	r3, r7, r0
 8002880:	2201      	movs	r2, #1
 8002882:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002884:	4b54      	ldr	r3, [pc, #336]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	2380      	movs	r3, #128	; 0x80
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	4013      	ands	r3, r2
 800288e:	d11a      	bne.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002890:	4b51      	ldr	r3, [pc, #324]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	4b50      	ldr	r3, [pc, #320]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002896:	2180      	movs	r1, #128	; 0x80
 8002898:	0049      	lsls	r1, r1, #1
 800289a:	430a      	orrs	r2, r1
 800289c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800289e:	f7fe f9a1 	bl	8000be4 <HAL_GetTick>
 80028a2:	0003      	movs	r3, r0
 80028a4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a6:	e008      	b.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028a8:	f7fe f99c 	bl	8000be4 <HAL_GetTick>
 80028ac:	0002      	movs	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b64      	cmp	r3, #100	; 0x64
 80028b4:	d901      	bls.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e087      	b.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ba:	4b47      	ldr	r3, [pc, #284]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	2380      	movs	r3, #128	; 0x80
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	4013      	ands	r3, r2
 80028c4:	d0f0      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028c6:	4b43      	ldr	r3, [pc, #268]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80028c8:	6a1a      	ldr	r2, [r3, #32]
 80028ca:	23c0      	movs	r3, #192	; 0xc0
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4013      	ands	r3, r2
 80028d0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d034      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	23c0      	movs	r3, #192	; 0xc0
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4013      	ands	r3, r2
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d02c      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028e8:	4b3a      	ldr	r3, [pc, #232]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	4a3b      	ldr	r2, [pc, #236]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028ee:	4013      	ands	r3, r2
 80028f0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028f2:	4b38      	ldr	r3, [pc, #224]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80028f4:	6a1a      	ldr	r2, [r3, #32]
 80028f6:	4b37      	ldr	r3, [pc, #220]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80028f8:	2180      	movs	r1, #128	; 0x80
 80028fa:	0249      	lsls	r1, r1, #9
 80028fc:	430a      	orrs	r2, r1
 80028fe:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002900:	4b34      	ldr	r3, [pc, #208]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002902:	6a1a      	ldr	r2, [r3, #32]
 8002904:	4b33      	ldr	r3, [pc, #204]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002906:	4936      	ldr	r1, [pc, #216]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002908:	400a      	ands	r2, r1
 800290a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800290c:	4b31      	ldr	r3, [pc, #196]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2201      	movs	r2, #1
 8002916:	4013      	ands	r3, r2
 8002918:	d013      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291a:	f7fe f963 	bl	8000be4 <HAL_GetTick>
 800291e:	0003      	movs	r3, r0
 8002920:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002922:	e009      	b.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002924:	f7fe f95e 	bl	8000be4 <HAL_GetTick>
 8002928:	0002      	movs	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	4a2d      	ldr	r2, [pc, #180]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d901      	bls.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e048      	b.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002938:	4b26      	ldr	r3, [pc, #152]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800293a:	6a1b      	ldr	r3, [r3, #32]
 800293c:	2202      	movs	r2, #2
 800293e:	4013      	ands	r3, r2
 8002940:	d0f0      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002942:	4b24      	ldr	r3, [pc, #144]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	4a25      	ldr	r2, [pc, #148]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002948:	4013      	ands	r3, r2
 800294a:	0019      	movs	r1, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	4b20      	ldr	r3, [pc, #128]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002952:	430a      	orrs	r2, r1
 8002954:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002956:	2317      	movs	r3, #23
 8002958:	18fb      	adds	r3, r7, r3
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d105      	bne.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002960:	4b1c      	ldr	r3, [pc, #112]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002962:	69da      	ldr	r2, [r3, #28]
 8002964:	4b1b      	ldr	r3, [pc, #108]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002966:	4920      	ldr	r1, [pc, #128]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002968:	400a      	ands	r2, r1
 800296a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2201      	movs	r2, #1
 8002972:	4013      	ands	r3, r2
 8002974:	d009      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002976:	4b17      	ldr	r3, [pc, #92]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	2203      	movs	r2, #3
 800297c:	4393      	bics	r3, r2
 800297e:	0019      	movs	r1, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	4b13      	ldr	r3, [pc, #76]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002986:	430a      	orrs	r2, r1
 8002988:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2220      	movs	r2, #32
 8002990:	4013      	ands	r3, r2
 8002992:	d009      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002994:	4b0f      	ldr	r3, [pc, #60]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002998:	2210      	movs	r2, #16
 800299a:	4393      	bics	r3, r2
 800299c:	0019      	movs	r1, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	68da      	ldr	r2, [r3, #12]
 80029a2:	4b0c      	ldr	r3, [pc, #48]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80029a4:	430a      	orrs	r2, r1
 80029a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	2380      	movs	r3, #128	; 0x80
 80029ae:	029b      	lsls	r3, r3, #10
 80029b0:	4013      	ands	r3, r2
 80029b2:	d009      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029b4:	4b07      	ldr	r3, [pc, #28]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80029b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b8:	2280      	movs	r2, #128	; 0x80
 80029ba:	4393      	bics	r3, r2
 80029bc:	0019      	movs	r1, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	691a      	ldr	r2, [r3, #16]
 80029c2:	4b04      	ldr	r3, [pc, #16]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80029c4:	430a      	orrs	r2, r1
 80029c6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	0018      	movs	r0, r3
 80029cc:	46bd      	mov	sp, r7
 80029ce:	b006      	add	sp, #24
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	46c0      	nop			; (mov r8, r8)
 80029d4:	40021000 	.word	0x40021000
 80029d8:	40007000 	.word	0x40007000
 80029dc:	fffffcff 	.word	0xfffffcff
 80029e0:	fffeffff 	.word	0xfffeffff
 80029e4:	00001388 	.word	0x00001388
 80029e8:	efffffff 	.word	0xefffffff

080029ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e042      	b.n	8002a84 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	223d      	movs	r2, #61	; 0x3d
 8002a02:	5c9b      	ldrb	r3, [r3, r2]
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d107      	bne.n	8002a1a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	223c      	movs	r2, #60	; 0x3c
 8002a0e:	2100      	movs	r1, #0
 8002a10:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	0018      	movs	r0, r3
 8002a16:	f000 f839 	bl	8002a8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	223d      	movs	r2, #61	; 0x3d
 8002a1e:	2102      	movs	r1, #2
 8002a20:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	3304      	adds	r3, #4
 8002a2a:	0019      	movs	r1, r3
 8002a2c:	0010      	movs	r0, r2
 8002a2e:	f000 f9b7 	bl	8002da0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2246      	movs	r2, #70	; 0x46
 8002a36:	2101      	movs	r1, #1
 8002a38:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	223e      	movs	r2, #62	; 0x3e
 8002a3e:	2101      	movs	r1, #1
 8002a40:	5499      	strb	r1, [r3, r2]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	223f      	movs	r2, #63	; 0x3f
 8002a46:	2101      	movs	r1, #1
 8002a48:	5499      	strb	r1, [r3, r2]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2240      	movs	r2, #64	; 0x40
 8002a4e:	2101      	movs	r1, #1
 8002a50:	5499      	strb	r1, [r3, r2]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2241      	movs	r2, #65	; 0x41
 8002a56:	2101      	movs	r1, #1
 8002a58:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2242      	movs	r2, #66	; 0x42
 8002a5e:	2101      	movs	r1, #1
 8002a60:	5499      	strb	r1, [r3, r2]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2243      	movs	r2, #67	; 0x43
 8002a66:	2101      	movs	r1, #1
 8002a68:	5499      	strb	r1, [r3, r2]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2244      	movs	r2, #68	; 0x44
 8002a6e:	2101      	movs	r1, #1
 8002a70:	5499      	strb	r1, [r3, r2]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2245      	movs	r2, #69	; 0x45
 8002a76:	2101      	movs	r1, #1
 8002a78:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	223d      	movs	r2, #61	; 0x3d
 8002a7e:	2101      	movs	r1, #1
 8002a80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	0018      	movs	r0, r3
 8002a86:	46bd      	mov	sp, r7
 8002a88:	b002      	add	sp, #8
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002a94:	46c0      	nop			; (mov r8, r8)
 8002a96:	46bd      	mov	sp, r7
 8002a98:	b002      	add	sp, #8
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	223d      	movs	r2, #61	; 0x3d
 8002aa8:	5c9b      	ldrb	r3, [r3, r2]
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d001      	beq.n	8002ab4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e035      	b.n	8002b20 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	223d      	movs	r2, #61	; 0x3d
 8002ab8:	2102      	movs	r1, #2
 8002aba:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68da      	ldr	r2, [r3, #12]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2101      	movs	r1, #1
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a15      	ldr	r2, [pc, #84]	; (8002b28 <HAL_TIM_Base_Start_IT+0x8c>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d009      	beq.n	8002aea <HAL_TIM_Base_Start_IT+0x4e>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a14      	ldr	r2, [pc, #80]	; (8002b2c <HAL_TIM_Base_Start_IT+0x90>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d004      	beq.n	8002aea <HAL_TIM_Base_Start_IT+0x4e>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a12      	ldr	r2, [pc, #72]	; (8002b30 <HAL_TIM_Base_Start_IT+0x94>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d111      	bne.n	8002b0e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	2207      	movs	r2, #7
 8002af2:	4013      	ands	r3, r2
 8002af4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2b06      	cmp	r3, #6
 8002afa:	d010      	beq.n	8002b1e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2101      	movs	r1, #1
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b0c:	e007      	b.n	8002b1e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2101      	movs	r1, #1
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	0018      	movs	r0, r3
 8002b22:	46bd      	mov	sp, r7
 8002b24:	b004      	add	sp, #16
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40012c00 	.word	0x40012c00
 8002b2c:	40000400 	.word	0x40000400
 8002b30:	40014000 	.word	0x40014000

08002b34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	2202      	movs	r2, #2
 8002b44:	4013      	ands	r3, r2
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d124      	bne.n	8002b94 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	2202      	movs	r2, #2
 8002b52:	4013      	ands	r3, r2
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d11d      	bne.n	8002b94 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2203      	movs	r2, #3
 8002b5e:	4252      	negs	r2, r2
 8002b60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2201      	movs	r2, #1
 8002b66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	2203      	movs	r2, #3
 8002b70:	4013      	ands	r3, r2
 8002b72:	d004      	beq.n	8002b7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	0018      	movs	r0, r3
 8002b78:	f000 f8fa 	bl	8002d70 <HAL_TIM_IC_CaptureCallback>
 8002b7c:	e007      	b.n	8002b8e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	0018      	movs	r0, r3
 8002b82:	f000 f8ed 	bl	8002d60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	0018      	movs	r0, r3
 8002b8a:	f000 f8f9 	bl	8002d80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	2204      	movs	r2, #4
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	2b04      	cmp	r3, #4
 8002ba0:	d125      	bne.n	8002bee <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	2204      	movs	r2, #4
 8002baa:	4013      	ands	r3, r2
 8002bac:	2b04      	cmp	r3, #4
 8002bae:	d11e      	bne.n	8002bee <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2205      	movs	r2, #5
 8002bb6:	4252      	negs	r2, r2
 8002bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2202      	movs	r2, #2
 8002bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	699a      	ldr	r2, [r3, #24]
 8002bc6:	23c0      	movs	r3, #192	; 0xc0
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4013      	ands	r3, r2
 8002bcc:	d004      	beq.n	8002bd8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	f000 f8cd 	bl	8002d70 <HAL_TIM_IC_CaptureCallback>
 8002bd6:	e007      	b.n	8002be8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	0018      	movs	r0, r3
 8002bdc:	f000 f8c0 	bl	8002d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	0018      	movs	r0, r3
 8002be4:	f000 f8cc 	bl	8002d80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	2208      	movs	r2, #8
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	2b08      	cmp	r3, #8
 8002bfa:	d124      	bne.n	8002c46 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	2208      	movs	r2, #8
 8002c04:	4013      	ands	r3, r2
 8002c06:	2b08      	cmp	r3, #8
 8002c08:	d11d      	bne.n	8002c46 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2209      	movs	r2, #9
 8002c10:	4252      	negs	r2, r2
 8002c12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2204      	movs	r2, #4
 8002c18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	69db      	ldr	r3, [r3, #28]
 8002c20:	2203      	movs	r2, #3
 8002c22:	4013      	ands	r3, r2
 8002c24:	d004      	beq.n	8002c30 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	0018      	movs	r0, r3
 8002c2a:	f000 f8a1 	bl	8002d70 <HAL_TIM_IC_CaptureCallback>
 8002c2e:	e007      	b.n	8002c40 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	0018      	movs	r0, r3
 8002c34:	f000 f894 	bl	8002d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	0018      	movs	r0, r3
 8002c3c:	f000 f8a0 	bl	8002d80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	2210      	movs	r2, #16
 8002c4e:	4013      	ands	r3, r2
 8002c50:	2b10      	cmp	r3, #16
 8002c52:	d125      	bne.n	8002ca0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	2210      	movs	r2, #16
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	2b10      	cmp	r3, #16
 8002c60:	d11e      	bne.n	8002ca0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2211      	movs	r2, #17
 8002c68:	4252      	negs	r2, r2
 8002c6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2208      	movs	r2, #8
 8002c70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	69da      	ldr	r2, [r3, #28]
 8002c78:	23c0      	movs	r3, #192	; 0xc0
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	d004      	beq.n	8002c8a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	0018      	movs	r0, r3
 8002c84:	f000 f874 	bl	8002d70 <HAL_TIM_IC_CaptureCallback>
 8002c88:	e007      	b.n	8002c9a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	f000 f867 	bl	8002d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	0018      	movs	r0, r3
 8002c96:	f000 f873 	bl	8002d80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	4013      	ands	r3, r2
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d10f      	bne.n	8002cce <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d108      	bne.n	8002cce <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	4252      	negs	r2, r2
 8002cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	0018      	movs	r0, r3
 8002cca:	f7fd fd53 	bl	8000774 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	2280      	movs	r2, #128	; 0x80
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	2b80      	cmp	r3, #128	; 0x80
 8002cda:	d10f      	bne.n	8002cfc <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	2280      	movs	r2, #128	; 0x80
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	2b80      	cmp	r3, #128	; 0x80
 8002ce8:	d108      	bne.n	8002cfc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2281      	movs	r2, #129	; 0x81
 8002cf0:	4252      	negs	r2, r2
 8002cf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	0018      	movs	r0, r3
 8002cf8:	f000 f8d0 	bl	8002e9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	2240      	movs	r2, #64	; 0x40
 8002d04:	4013      	ands	r3, r2
 8002d06:	2b40      	cmp	r3, #64	; 0x40
 8002d08:	d10f      	bne.n	8002d2a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	2240      	movs	r2, #64	; 0x40
 8002d12:	4013      	ands	r3, r2
 8002d14:	2b40      	cmp	r3, #64	; 0x40
 8002d16:	d108      	bne.n	8002d2a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2241      	movs	r2, #65	; 0x41
 8002d1e:	4252      	negs	r2, r2
 8002d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	0018      	movs	r0, r3
 8002d26:	f000 f833 	bl	8002d90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	2220      	movs	r2, #32
 8002d32:	4013      	ands	r3, r2
 8002d34:	2b20      	cmp	r3, #32
 8002d36:	d10f      	bne.n	8002d58 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	2220      	movs	r2, #32
 8002d40:	4013      	ands	r3, r2
 8002d42:	2b20      	cmp	r3, #32
 8002d44:	d108      	bne.n	8002d58 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2221      	movs	r2, #33	; 0x21
 8002d4c:	4252      	negs	r2, r2
 8002d4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	0018      	movs	r0, r3
 8002d54:	f000 f89a 	bl	8002e8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d58:	46c0      	nop			; (mov r8, r8)
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	b002      	add	sp, #8
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d68:	46c0      	nop			; (mov r8, r8)
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	b002      	add	sp, #8
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d78:	46c0      	nop			; (mov r8, r8)
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	b002      	add	sp, #8
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d88:	46c0      	nop			; (mov r8, r8)
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	b002      	add	sp, #8
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d98:	46c0      	nop			; (mov r8, r8)
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	b002      	add	sp, #8
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a2f      	ldr	r2, [pc, #188]	; (8002e70 <TIM_Base_SetConfig+0xd0>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d003      	beq.n	8002dc0 <TIM_Base_SetConfig+0x20>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a2e      	ldr	r2, [pc, #184]	; (8002e74 <TIM_Base_SetConfig+0xd4>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d108      	bne.n	8002dd2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2270      	movs	r2, #112	; 0x70
 8002dc4:	4393      	bics	r3, r2
 8002dc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a26      	ldr	r2, [pc, #152]	; (8002e70 <TIM_Base_SetConfig+0xd0>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d013      	beq.n	8002e02 <TIM_Base_SetConfig+0x62>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a25      	ldr	r2, [pc, #148]	; (8002e74 <TIM_Base_SetConfig+0xd4>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d00f      	beq.n	8002e02 <TIM_Base_SetConfig+0x62>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a24      	ldr	r2, [pc, #144]	; (8002e78 <TIM_Base_SetConfig+0xd8>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d00b      	beq.n	8002e02 <TIM_Base_SetConfig+0x62>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a23      	ldr	r2, [pc, #140]	; (8002e7c <TIM_Base_SetConfig+0xdc>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d007      	beq.n	8002e02 <TIM_Base_SetConfig+0x62>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a22      	ldr	r2, [pc, #136]	; (8002e80 <TIM_Base_SetConfig+0xe0>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d003      	beq.n	8002e02 <TIM_Base_SetConfig+0x62>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a21      	ldr	r2, [pc, #132]	; (8002e84 <TIM_Base_SetConfig+0xe4>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d108      	bne.n	8002e14 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	4a20      	ldr	r2, [pc, #128]	; (8002e88 <TIM_Base_SetConfig+0xe8>)
 8002e06:	4013      	ands	r3, r2
 8002e08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2280      	movs	r2, #128	; 0x80
 8002e18:	4393      	bics	r3, r2
 8002e1a:	001a      	movs	r2, r3
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	695b      	ldr	r3, [r3, #20]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a0c      	ldr	r2, [pc, #48]	; (8002e70 <TIM_Base_SetConfig+0xd0>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d00b      	beq.n	8002e5a <TIM_Base_SetConfig+0xba>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a0d      	ldr	r2, [pc, #52]	; (8002e7c <TIM_Base_SetConfig+0xdc>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d007      	beq.n	8002e5a <TIM_Base_SetConfig+0xba>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a0c      	ldr	r2, [pc, #48]	; (8002e80 <TIM_Base_SetConfig+0xe0>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d003      	beq.n	8002e5a <TIM_Base_SetConfig+0xba>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a0b      	ldr	r2, [pc, #44]	; (8002e84 <TIM_Base_SetConfig+0xe4>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d103      	bne.n	8002e62 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	691a      	ldr	r2, [r3, #16]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2201      	movs	r2, #1
 8002e66:	615a      	str	r2, [r3, #20]
}
 8002e68:	46c0      	nop			; (mov r8, r8)
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	b004      	add	sp, #16
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	40012c00 	.word	0x40012c00
 8002e74:	40000400 	.word	0x40000400
 8002e78:	40002000 	.word	0x40002000
 8002e7c:	40014000 	.word	0x40014000
 8002e80:	40014400 	.word	0x40014400
 8002e84:	40014800 	.word	0x40014800
 8002e88:	fffffcff 	.word	0xfffffcff

08002e8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e94:	46c0      	nop			; (mov r8, r8)
 8002e96:	46bd      	mov	sp, r7
 8002e98:	b002      	add	sp, #8
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ea4:	46c0      	nop			; (mov r8, r8)
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	b002      	add	sp, #8
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e044      	b.n	8002f48 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d107      	bne.n	8002ed6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2274      	movs	r2, #116	; 0x74
 8002eca:	2100      	movs	r1, #0
 8002ecc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	0018      	movs	r0, r3
 8002ed2:	f7fd fd2d 	bl	8000930 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2224      	movs	r2, #36	; 0x24
 8002eda:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	438a      	bics	r2, r1
 8002eea:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	0018      	movs	r0, r3
 8002ef0:	f000 fb0c 	bl	800350c <UART_SetConfig>
 8002ef4:	0003      	movs	r3, r0
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d101      	bne.n	8002efe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e024      	b.n	8002f48 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d003      	beq.n	8002f0e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	0018      	movs	r0, r3
 8002f0a:	f000 fc57 	bl	80037bc <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	490d      	ldr	r1, [pc, #52]	; (8002f50 <HAL_UART_Init+0xa4>)
 8002f1a:	400a      	ands	r2, r1
 8002f1c:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	689a      	ldr	r2, [r3, #8]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2108      	movs	r1, #8
 8002f2a:	438a      	bics	r2, r1
 8002f2c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2101      	movs	r1, #1
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	0018      	movs	r0, r3
 8002f42:	f000 fcef 	bl	8003924 <UART_CheckIdleState>
 8002f46:	0003      	movs	r3, r0
}
 8002f48:	0018      	movs	r0, r3
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	b002      	add	sp, #8
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	fffff7ff 	.word	0xfffff7ff

08002f54 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f54:	b590      	push	{r4, r7, lr}
 8002f56:	b0ab      	sub	sp, #172	; 0xac
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	22a4      	movs	r2, #164	; 0xa4
 8002f64:	18b9      	adds	r1, r7, r2
 8002f66:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	20a0      	movs	r0, #160	; 0xa0
 8002f70:	1839      	adds	r1, r7, r0
 8002f72:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	219c      	movs	r1, #156	; 0x9c
 8002f7c:	1879      	adds	r1, r7, r1
 8002f7e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002f80:	0011      	movs	r1, r2
 8002f82:	18bb      	adds	r3, r7, r2
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a99      	ldr	r2, [pc, #612]	; (80031ec <HAL_UART_IRQHandler+0x298>)
 8002f88:	4013      	ands	r3, r2
 8002f8a:	2298      	movs	r2, #152	; 0x98
 8002f8c:	18bc      	adds	r4, r7, r2
 8002f8e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002f90:	18bb      	adds	r3, r7, r2
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d114      	bne.n	8002fc2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f98:	187b      	adds	r3, r7, r1
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2220      	movs	r2, #32
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	d00f      	beq.n	8002fc2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002fa2:	183b      	adds	r3, r7, r0
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	4013      	ands	r3, r2
 8002faa:	d00a      	beq.n	8002fc2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d100      	bne.n	8002fb6 <HAL_UART_IRQHandler+0x62>
 8002fb4:	e27e      	b.n	80034b4 <HAL_UART_IRQHandler+0x560>
      {
        huart->RxISR(huart);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	0010      	movs	r0, r2
 8002fbe:	4798      	blx	r3
      }
      return;
 8002fc0:	e278      	b.n	80034b4 <HAL_UART_IRQHandler+0x560>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002fc2:	2398      	movs	r3, #152	; 0x98
 8002fc4:	18fb      	adds	r3, r7, r3
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d100      	bne.n	8002fce <HAL_UART_IRQHandler+0x7a>
 8002fcc:	e114      	b.n	80031f8 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002fce:	239c      	movs	r3, #156	; 0x9c
 8002fd0:	18fb      	adds	r3, r7, r3
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	d106      	bne.n	8002fe8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002fda:	23a0      	movs	r3, #160	; 0xa0
 8002fdc:	18fb      	adds	r3, r7, r3
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a83      	ldr	r2, [pc, #524]	; (80031f0 <HAL_UART_IRQHandler+0x29c>)
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	d100      	bne.n	8002fe8 <HAL_UART_IRQHandler+0x94>
 8002fe6:	e107      	b.n	80031f8 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002fe8:	23a4      	movs	r3, #164	; 0xa4
 8002fea:	18fb      	adds	r3, r7, r3
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	d012      	beq.n	800301a <HAL_UART_IRQHandler+0xc6>
 8002ff4:	23a0      	movs	r3, #160	; 0xa0
 8002ff6:	18fb      	adds	r3, r7, r3
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	2380      	movs	r3, #128	; 0x80
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	4013      	ands	r3, r2
 8003000:	d00b      	beq.n	800301a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2201      	movs	r2, #1
 8003008:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2280      	movs	r2, #128	; 0x80
 800300e:	589b      	ldr	r3, [r3, r2]
 8003010:	2201      	movs	r2, #1
 8003012:	431a      	orrs	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2180      	movs	r1, #128	; 0x80
 8003018:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800301a:	23a4      	movs	r3, #164	; 0xa4
 800301c:	18fb      	adds	r3, r7, r3
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2202      	movs	r2, #2
 8003022:	4013      	ands	r3, r2
 8003024:	d011      	beq.n	800304a <HAL_UART_IRQHandler+0xf6>
 8003026:	239c      	movs	r3, #156	; 0x9c
 8003028:	18fb      	adds	r3, r7, r3
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2201      	movs	r2, #1
 800302e:	4013      	ands	r3, r2
 8003030:	d00b      	beq.n	800304a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2202      	movs	r2, #2
 8003038:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2280      	movs	r2, #128	; 0x80
 800303e:	589b      	ldr	r3, [r3, r2]
 8003040:	2204      	movs	r2, #4
 8003042:	431a      	orrs	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2180      	movs	r1, #128	; 0x80
 8003048:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800304a:	23a4      	movs	r3, #164	; 0xa4
 800304c:	18fb      	adds	r3, r7, r3
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2204      	movs	r2, #4
 8003052:	4013      	ands	r3, r2
 8003054:	d011      	beq.n	800307a <HAL_UART_IRQHandler+0x126>
 8003056:	239c      	movs	r3, #156	; 0x9c
 8003058:	18fb      	adds	r3, r7, r3
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2201      	movs	r2, #1
 800305e:	4013      	ands	r3, r2
 8003060:	d00b      	beq.n	800307a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2204      	movs	r2, #4
 8003068:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2280      	movs	r2, #128	; 0x80
 800306e:	589b      	ldr	r3, [r3, r2]
 8003070:	2202      	movs	r2, #2
 8003072:	431a      	orrs	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2180      	movs	r1, #128	; 0x80
 8003078:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800307a:	23a4      	movs	r3, #164	; 0xa4
 800307c:	18fb      	adds	r3, r7, r3
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2208      	movs	r2, #8
 8003082:	4013      	ands	r3, r2
 8003084:	d017      	beq.n	80030b6 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003086:	23a0      	movs	r3, #160	; 0xa0
 8003088:	18fb      	adds	r3, r7, r3
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2220      	movs	r2, #32
 800308e:	4013      	ands	r3, r2
 8003090:	d105      	bne.n	800309e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003092:	239c      	movs	r3, #156	; 0x9c
 8003094:	18fb      	adds	r3, r7, r3
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2201      	movs	r2, #1
 800309a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800309c:	d00b      	beq.n	80030b6 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2208      	movs	r2, #8
 80030a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2280      	movs	r2, #128	; 0x80
 80030aa:	589b      	ldr	r3, [r3, r2]
 80030ac:	2208      	movs	r2, #8
 80030ae:	431a      	orrs	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2180      	movs	r1, #128	; 0x80
 80030b4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80030b6:	23a4      	movs	r3, #164	; 0xa4
 80030b8:	18fb      	adds	r3, r7, r3
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	2380      	movs	r3, #128	; 0x80
 80030be:	011b      	lsls	r3, r3, #4
 80030c0:	4013      	ands	r3, r2
 80030c2:	d013      	beq.n	80030ec <HAL_UART_IRQHandler+0x198>
 80030c4:	23a0      	movs	r3, #160	; 0xa0
 80030c6:	18fb      	adds	r3, r7, r3
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	2380      	movs	r3, #128	; 0x80
 80030cc:	04db      	lsls	r3, r3, #19
 80030ce:	4013      	ands	r3, r2
 80030d0:	d00c      	beq.n	80030ec <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2280      	movs	r2, #128	; 0x80
 80030d8:	0112      	lsls	r2, r2, #4
 80030da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2280      	movs	r2, #128	; 0x80
 80030e0:	589b      	ldr	r3, [r3, r2]
 80030e2:	2220      	movs	r2, #32
 80030e4:	431a      	orrs	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2180      	movs	r1, #128	; 0x80
 80030ea:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2280      	movs	r2, #128	; 0x80
 80030f0:	589b      	ldr	r3, [r3, r2]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d100      	bne.n	80030f8 <HAL_UART_IRQHandler+0x1a4>
 80030f6:	e1df      	b.n	80034b8 <HAL_UART_IRQHandler+0x564>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80030f8:	23a4      	movs	r3, #164	; 0xa4
 80030fa:	18fb      	adds	r3, r7, r3
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2220      	movs	r2, #32
 8003100:	4013      	ands	r3, r2
 8003102:	d00e      	beq.n	8003122 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003104:	23a0      	movs	r3, #160	; 0xa0
 8003106:	18fb      	adds	r3, r7, r3
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2220      	movs	r2, #32
 800310c:	4013      	ands	r3, r2
 800310e:	d008      	beq.n	8003122 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003114:	2b00      	cmp	r3, #0
 8003116:	d004      	beq.n	8003122 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	0010      	movs	r0, r2
 8003120:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2280      	movs	r2, #128	; 0x80
 8003126:	589b      	ldr	r3, [r3, r2]
 8003128:	2194      	movs	r1, #148	; 0x94
 800312a:	187a      	adds	r2, r7, r1
 800312c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	2240      	movs	r2, #64	; 0x40
 8003136:	4013      	ands	r3, r2
 8003138:	2b40      	cmp	r3, #64	; 0x40
 800313a:	d004      	beq.n	8003146 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800313c:	187b      	adds	r3, r7, r1
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2228      	movs	r2, #40	; 0x28
 8003142:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003144:	d047      	beq.n	80031d6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	0018      	movs	r0, r3
 800314a:	f000 fcf7 	bl	8003b3c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	2240      	movs	r2, #64	; 0x40
 8003156:	4013      	ands	r3, r2
 8003158:	2b40      	cmp	r3, #64	; 0x40
 800315a:	d137      	bne.n	80031cc <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800315c:	f3ef 8310 	mrs	r3, PRIMASK
 8003160:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003162:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003164:	2090      	movs	r0, #144	; 0x90
 8003166:	183a      	adds	r2, r7, r0
 8003168:	6013      	str	r3, [r2, #0]
 800316a:	2301      	movs	r3, #1
 800316c:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800316e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003170:	f383 8810 	msr	PRIMASK, r3
}
 8003174:	46c0      	nop			; (mov r8, r8)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2140      	movs	r1, #64	; 0x40
 8003182:	438a      	bics	r2, r1
 8003184:	609a      	str	r2, [r3, #8]
 8003186:	183b      	adds	r3, r7, r0
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800318c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800318e:	f383 8810 	msr	PRIMASK, r3
}
 8003192:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003198:	2b00      	cmp	r3, #0
 800319a:	d012      	beq.n	80031c2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a0:	4a14      	ldr	r2, [pc, #80]	; (80031f4 <HAL_UART_IRQHandler+0x2a0>)
 80031a2:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a8:	0018      	movs	r0, r3
 80031aa:	f7fe f910 	bl	80013ce <HAL_DMA_Abort_IT>
 80031ae:	1e03      	subs	r3, r0, #0
 80031b0:	d01a      	beq.n	80031e8 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031bc:	0018      	movs	r0, r3
 80031be:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031c0:	e012      	b.n	80031e8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	0018      	movs	r0, r3
 80031c6:	f000 f98d 	bl	80034e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031ca:	e00d      	b.n	80031e8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	0018      	movs	r0, r3
 80031d0:	f000 f988 	bl	80034e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031d4:	e008      	b.n	80031e8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	0018      	movs	r0, r3
 80031da:	f000 f983 	bl	80034e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2280      	movs	r2, #128	; 0x80
 80031e2:	2100      	movs	r1, #0
 80031e4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80031e6:	e167      	b.n	80034b8 <HAL_UART_IRQHandler+0x564>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031e8:	46c0      	nop			; (mov r8, r8)
    return;
 80031ea:	e165      	b.n	80034b8 <HAL_UART_IRQHandler+0x564>
 80031ec:	0000080f 	.word	0x0000080f
 80031f0:	04000120 	.word	0x04000120
 80031f4:	08003c01 	.word	0x08003c01

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d000      	beq.n	8003202 <HAL_UART_IRQHandler+0x2ae>
 8003200:	e131      	b.n	8003466 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003202:	23a4      	movs	r3, #164	; 0xa4
 8003204:	18fb      	adds	r3, r7, r3
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2210      	movs	r2, #16
 800320a:	4013      	ands	r3, r2
 800320c:	d100      	bne.n	8003210 <HAL_UART_IRQHandler+0x2bc>
 800320e:	e12a      	b.n	8003466 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003210:	23a0      	movs	r3, #160	; 0xa0
 8003212:	18fb      	adds	r3, r7, r3
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2210      	movs	r2, #16
 8003218:	4013      	ands	r3, r2
 800321a:	d100      	bne.n	800321e <HAL_UART_IRQHandler+0x2ca>
 800321c:	e123      	b.n	8003466 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2210      	movs	r2, #16
 8003224:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	2240      	movs	r2, #64	; 0x40
 800322e:	4013      	ands	r3, r2
 8003230:	2b40      	cmp	r3, #64	; 0x40
 8003232:	d000      	beq.n	8003236 <HAL_UART_IRQHandler+0x2e2>
 8003234:	e09b      	b.n	800336e <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	685a      	ldr	r2, [r3, #4]
 800323e:	217e      	movs	r1, #126	; 0x7e
 8003240:	187b      	adds	r3, r7, r1
 8003242:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003244:	187b      	adds	r3, r7, r1
 8003246:	881b      	ldrh	r3, [r3, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d100      	bne.n	800324e <HAL_UART_IRQHandler+0x2fa>
 800324c:	e136      	b.n	80034bc <HAL_UART_IRQHandler+0x568>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2258      	movs	r2, #88	; 0x58
 8003252:	5a9b      	ldrh	r3, [r3, r2]
 8003254:	187a      	adds	r2, r7, r1
 8003256:	8812      	ldrh	r2, [r2, #0]
 8003258:	429a      	cmp	r2, r3
 800325a:	d300      	bcc.n	800325e <HAL_UART_IRQHandler+0x30a>
 800325c:	e12e      	b.n	80034bc <HAL_UART_IRQHandler+0x568>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	187a      	adds	r2, r7, r1
 8003262:	215a      	movs	r1, #90	; 0x5a
 8003264:	8812      	ldrh	r2, [r2, #0]
 8003266:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	2b20      	cmp	r3, #32
 8003270:	d06e      	beq.n	8003350 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003272:	f3ef 8310 	mrs	r3, PRIMASK
 8003276:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800327a:	67bb      	str	r3, [r7, #120]	; 0x78
 800327c:	2301      	movs	r3, #1
 800327e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003282:	f383 8810 	msr	PRIMASK, r3
}
 8003286:	46c0      	nop			; (mov r8, r8)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	498e      	ldr	r1, [pc, #568]	; (80034cc <HAL_UART_IRQHandler+0x578>)
 8003294:	400a      	ands	r2, r1
 8003296:	601a      	str	r2, [r3, #0]
 8003298:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800329a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800329c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800329e:	f383 8810 	msr	PRIMASK, r3
}
 80032a2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032a4:	f3ef 8310 	mrs	r3, PRIMASK
 80032a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80032aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ac:	677b      	str	r3, [r7, #116]	; 0x74
 80032ae:	2301      	movs	r3, #1
 80032b0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032b4:	f383 8810 	msr	PRIMASK, r3
}
 80032b8:	46c0      	nop			; (mov r8, r8)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2101      	movs	r1, #1
 80032c6:	438a      	bics	r2, r1
 80032c8:	609a      	str	r2, [r3, #8]
 80032ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032cc:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032d0:	f383 8810 	msr	PRIMASK, r3
}
 80032d4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032d6:	f3ef 8310 	mrs	r3, PRIMASK
 80032da:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80032dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032de:	673b      	str	r3, [r7, #112]	; 0x70
 80032e0:	2301      	movs	r3, #1
 80032e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032e6:	f383 8810 	msr	PRIMASK, r3
}
 80032ea:	46c0      	nop			; (mov r8, r8)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2140      	movs	r1, #64	; 0x40
 80032f8:	438a      	bics	r2, r1
 80032fa:	609a      	str	r2, [r3, #8]
 80032fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032fe:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003300:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003302:	f383 8810 	msr	PRIMASK, r3
}
 8003306:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2220      	movs	r2, #32
 800330c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003314:	f3ef 8310 	mrs	r3, PRIMASK
 8003318:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800331a:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800331c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800331e:	2301      	movs	r3, #1
 8003320:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003322:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003324:	f383 8810 	msr	PRIMASK, r3
}
 8003328:	46c0      	nop			; (mov r8, r8)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2110      	movs	r1, #16
 8003336:	438a      	bics	r2, r1
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800333c:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800333e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003340:	f383 8810 	msr	PRIMASK, r3
}
 8003344:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334a:	0018      	movs	r0, r3
 800334c:	f7fe f807 	bl	800135e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2258      	movs	r2, #88	; 0x58
 8003354:	5a9a      	ldrh	r2, [r3, r2]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	215a      	movs	r1, #90	; 0x5a
 800335a:	5a5b      	ldrh	r3, [r3, r1]
 800335c:	b29b      	uxth	r3, r3
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	b29a      	uxth	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	0011      	movs	r1, r2
 8003366:	0018      	movs	r0, r3
 8003368:	f000 f8c4 	bl	80034f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800336c:	e0a6      	b.n	80034bc <HAL_UART_IRQHandler+0x568>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2258      	movs	r2, #88	; 0x58
 8003372:	5a99      	ldrh	r1, [r3, r2]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	225a      	movs	r2, #90	; 0x5a
 8003378:	5a9b      	ldrh	r3, [r3, r2]
 800337a:	b29a      	uxth	r2, r3
 800337c:	208e      	movs	r0, #142	; 0x8e
 800337e:	183b      	adds	r3, r7, r0
 8003380:	1a8a      	subs	r2, r1, r2
 8003382:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	225a      	movs	r2, #90	; 0x5a
 8003388:	5a9b      	ldrh	r3, [r3, r2]
 800338a:	b29b      	uxth	r3, r3
 800338c:	2b00      	cmp	r3, #0
 800338e:	d100      	bne.n	8003392 <HAL_UART_IRQHandler+0x43e>
 8003390:	e096      	b.n	80034c0 <HAL_UART_IRQHandler+0x56c>
          && (nb_rx_data > 0U))
 8003392:	183b      	adds	r3, r7, r0
 8003394:	881b      	ldrh	r3, [r3, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d100      	bne.n	800339c <HAL_UART_IRQHandler+0x448>
 800339a:	e091      	b.n	80034c0 <HAL_UART_IRQHandler+0x56c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800339c:	f3ef 8310 	mrs	r3, PRIMASK
 80033a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80033a2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033a4:	2488      	movs	r4, #136	; 0x88
 80033a6:	193a      	adds	r2, r7, r4
 80033a8:	6013      	str	r3, [r2, #0]
 80033aa:	2301      	movs	r3, #1
 80033ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	f383 8810 	msr	PRIMASK, r3
}
 80033b4:	46c0      	nop			; (mov r8, r8)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4943      	ldr	r1, [pc, #268]	; (80034d0 <HAL_UART_IRQHandler+0x57c>)
 80033c2:	400a      	ands	r2, r1
 80033c4:	601a      	str	r2, [r3, #0]
 80033c6:	193b      	adds	r3, r7, r4
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	f383 8810 	msr	PRIMASK, r3
}
 80033d2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033d4:	f3ef 8310 	mrs	r3, PRIMASK
 80033d8:	61bb      	str	r3, [r7, #24]
  return(result);
 80033da:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033dc:	2484      	movs	r4, #132	; 0x84
 80033de:	193a      	adds	r2, r7, r4
 80033e0:	6013      	str	r3, [r2, #0]
 80033e2:	2301      	movs	r3, #1
 80033e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	f383 8810 	msr	PRIMASK, r3
}
 80033ec:	46c0      	nop			; (mov r8, r8)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2101      	movs	r1, #1
 80033fa:	438a      	bics	r2, r1
 80033fc:	609a      	str	r2, [r3, #8]
 80033fe:	193b      	adds	r3, r7, r4
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003404:	6a3b      	ldr	r3, [r7, #32]
 8003406:	f383 8810 	msr	PRIMASK, r3
}
 800340a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2220      	movs	r2, #32
 8003410:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800341e:	f3ef 8310 	mrs	r3, PRIMASK
 8003422:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003424:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003426:	2480      	movs	r4, #128	; 0x80
 8003428:	193a      	adds	r2, r7, r4
 800342a:	6013      	str	r3, [r2, #0]
 800342c:	2301      	movs	r3, #1
 800342e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003432:	f383 8810 	msr	PRIMASK, r3
}
 8003436:	46c0      	nop			; (mov r8, r8)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2110      	movs	r1, #16
 8003444:	438a      	bics	r2, r1
 8003446:	601a      	str	r2, [r3, #0]
 8003448:	193b      	adds	r3, r7, r4
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800344e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003450:	f383 8810 	msr	PRIMASK, r3
}
 8003454:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003456:	183b      	adds	r3, r7, r0
 8003458:	881a      	ldrh	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	0011      	movs	r1, r2
 800345e:	0018      	movs	r0, r3
 8003460:	f000 f848 	bl	80034f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003464:	e02c      	b.n	80034c0 <HAL_UART_IRQHandler+0x56c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003466:	23a4      	movs	r3, #164	; 0xa4
 8003468:	18fb      	adds	r3, r7, r3
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2280      	movs	r2, #128	; 0x80
 800346e:	4013      	ands	r3, r2
 8003470:	d00f      	beq.n	8003492 <HAL_UART_IRQHandler+0x53e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003472:	23a0      	movs	r3, #160	; 0xa0
 8003474:	18fb      	adds	r3, r7, r3
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2280      	movs	r2, #128	; 0x80
 800347a:	4013      	ands	r3, r2
 800347c:	d009      	beq.n	8003492 <HAL_UART_IRQHandler+0x53e>
  {
    if (huart->TxISR != NULL)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003482:	2b00      	cmp	r3, #0
 8003484:	d01e      	beq.n	80034c4 <HAL_UART_IRQHandler+0x570>
    {
      huart->TxISR(huart);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	0010      	movs	r0, r2
 800348e:	4798      	blx	r3
    }
    return;
 8003490:	e018      	b.n	80034c4 <HAL_UART_IRQHandler+0x570>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003492:	23a4      	movs	r3, #164	; 0xa4
 8003494:	18fb      	adds	r3, r7, r3
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2240      	movs	r2, #64	; 0x40
 800349a:	4013      	ands	r3, r2
 800349c:	d013      	beq.n	80034c6 <HAL_UART_IRQHandler+0x572>
 800349e:	23a0      	movs	r3, #160	; 0xa0
 80034a0:	18fb      	adds	r3, r7, r3
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2240      	movs	r2, #64	; 0x40
 80034a6:	4013      	ands	r3, r2
 80034a8:	d00d      	beq.n	80034c6 <HAL_UART_IRQHandler+0x572>
  {
    UART_EndTransmit_IT(huart);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	0018      	movs	r0, r3
 80034ae:	f000 fbbe 	bl	8003c2e <UART_EndTransmit_IT>
    return;
 80034b2:	e008      	b.n	80034c6 <HAL_UART_IRQHandler+0x572>
      return;
 80034b4:	46c0      	nop			; (mov r8, r8)
 80034b6:	e006      	b.n	80034c6 <HAL_UART_IRQHandler+0x572>
    return;
 80034b8:	46c0      	nop			; (mov r8, r8)
 80034ba:	e004      	b.n	80034c6 <HAL_UART_IRQHandler+0x572>
      return;
 80034bc:	46c0      	nop			; (mov r8, r8)
 80034be:	e002      	b.n	80034c6 <HAL_UART_IRQHandler+0x572>
      return;
 80034c0:	46c0      	nop			; (mov r8, r8)
 80034c2:	e000      	b.n	80034c6 <HAL_UART_IRQHandler+0x572>
    return;
 80034c4:	46c0      	nop			; (mov r8, r8)
  }

}
 80034c6:	46bd      	mov	sp, r7
 80034c8:	b02b      	add	sp, #172	; 0xac
 80034ca:	bd90      	pop	{r4, r7, pc}
 80034cc:	fffffeff 	.word	0xfffffeff
 80034d0:	fffffedf 	.word	0xfffffedf

080034d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80034dc:	46c0      	nop			; (mov r8, r8)
 80034de:	46bd      	mov	sp, r7
 80034e0:	b002      	add	sp, #8
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80034ec:	46c0      	nop			; (mov r8, r8)
 80034ee:	46bd      	mov	sp, r7
 80034f0:	b002      	add	sp, #8
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	000a      	movs	r2, r1
 80034fe:	1cbb      	adds	r3, r7, #2
 8003500:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003502:	46c0      	nop			; (mov r8, r8)
 8003504:	46bd      	mov	sp, r7
 8003506:	b002      	add	sp, #8
 8003508:	bd80      	pop	{r7, pc}
	...

0800350c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b088      	sub	sp, #32
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003514:	231e      	movs	r3, #30
 8003516:	18fb      	adds	r3, r7, r3
 8003518:	2200      	movs	r2, #0
 800351a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	431a      	orrs	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	69db      	ldr	r3, [r3, #28]
 8003530:	4313      	orrs	r3, r2
 8003532:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a97      	ldr	r2, [pc, #604]	; (8003798 <UART_SetConfig+0x28c>)
 800353c:	4013      	ands	r3, r2
 800353e:	0019      	movs	r1, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	430a      	orrs	r2, r1
 8003548:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	4a92      	ldr	r2, [pc, #584]	; (800379c <UART_SetConfig+0x290>)
 8003552:	4013      	ands	r3, r2
 8003554:	0019      	movs	r1, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68da      	ldr	r2, [r3, #12]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	430a      	orrs	r2, r1
 8003560:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	4313      	orrs	r3, r2
 8003570:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	4a89      	ldr	r2, [pc, #548]	; (80037a0 <UART_SetConfig+0x294>)
 800357a:	4013      	ands	r3, r2
 800357c:	0019      	movs	r1, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	430a      	orrs	r2, r1
 8003586:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a85      	ldr	r2, [pc, #532]	; (80037a4 <UART_SetConfig+0x298>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d127      	bne.n	80035e2 <UART_SetConfig+0xd6>
 8003592:	4b85      	ldr	r3, [pc, #532]	; (80037a8 <UART_SetConfig+0x29c>)
 8003594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003596:	2203      	movs	r2, #3
 8003598:	4013      	ands	r3, r2
 800359a:	2b03      	cmp	r3, #3
 800359c:	d00d      	beq.n	80035ba <UART_SetConfig+0xae>
 800359e:	d81b      	bhi.n	80035d8 <UART_SetConfig+0xcc>
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d014      	beq.n	80035ce <UART_SetConfig+0xc2>
 80035a4:	d818      	bhi.n	80035d8 <UART_SetConfig+0xcc>
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d002      	beq.n	80035b0 <UART_SetConfig+0xa4>
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d00a      	beq.n	80035c4 <UART_SetConfig+0xb8>
 80035ae:	e013      	b.n	80035d8 <UART_SetConfig+0xcc>
 80035b0:	231f      	movs	r3, #31
 80035b2:	18fb      	adds	r3, r7, r3
 80035b4:	2200      	movs	r2, #0
 80035b6:	701a      	strb	r2, [r3, #0]
 80035b8:	e035      	b.n	8003626 <UART_SetConfig+0x11a>
 80035ba:	231f      	movs	r3, #31
 80035bc:	18fb      	adds	r3, r7, r3
 80035be:	2202      	movs	r2, #2
 80035c0:	701a      	strb	r2, [r3, #0]
 80035c2:	e030      	b.n	8003626 <UART_SetConfig+0x11a>
 80035c4:	231f      	movs	r3, #31
 80035c6:	18fb      	adds	r3, r7, r3
 80035c8:	2204      	movs	r2, #4
 80035ca:	701a      	strb	r2, [r3, #0]
 80035cc:	e02b      	b.n	8003626 <UART_SetConfig+0x11a>
 80035ce:	231f      	movs	r3, #31
 80035d0:	18fb      	adds	r3, r7, r3
 80035d2:	2208      	movs	r2, #8
 80035d4:	701a      	strb	r2, [r3, #0]
 80035d6:	e026      	b.n	8003626 <UART_SetConfig+0x11a>
 80035d8:	231f      	movs	r3, #31
 80035da:	18fb      	adds	r3, r7, r3
 80035dc:	2210      	movs	r2, #16
 80035de:	701a      	strb	r2, [r3, #0]
 80035e0:	e021      	b.n	8003626 <UART_SetConfig+0x11a>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a71      	ldr	r2, [pc, #452]	; (80037ac <UART_SetConfig+0x2a0>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d104      	bne.n	80035f6 <UART_SetConfig+0xea>
 80035ec:	231f      	movs	r3, #31
 80035ee:	18fb      	adds	r3, r7, r3
 80035f0:	2200      	movs	r2, #0
 80035f2:	701a      	strb	r2, [r3, #0]
 80035f4:	e017      	b.n	8003626 <UART_SetConfig+0x11a>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a6d      	ldr	r2, [pc, #436]	; (80037b0 <UART_SetConfig+0x2a4>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d104      	bne.n	800360a <UART_SetConfig+0xfe>
 8003600:	231f      	movs	r3, #31
 8003602:	18fb      	adds	r3, r7, r3
 8003604:	2200      	movs	r2, #0
 8003606:	701a      	strb	r2, [r3, #0]
 8003608:	e00d      	b.n	8003626 <UART_SetConfig+0x11a>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a69      	ldr	r2, [pc, #420]	; (80037b4 <UART_SetConfig+0x2a8>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d104      	bne.n	800361e <UART_SetConfig+0x112>
 8003614:	231f      	movs	r3, #31
 8003616:	18fb      	adds	r3, r7, r3
 8003618:	2200      	movs	r2, #0
 800361a:	701a      	strb	r2, [r3, #0]
 800361c:	e003      	b.n	8003626 <UART_SetConfig+0x11a>
 800361e:	231f      	movs	r3, #31
 8003620:	18fb      	adds	r3, r7, r3
 8003622:	2210      	movs	r2, #16
 8003624:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	69da      	ldr	r2, [r3, #28]
 800362a:	2380      	movs	r3, #128	; 0x80
 800362c:	021b      	lsls	r3, r3, #8
 800362e:	429a      	cmp	r2, r3
 8003630:	d15d      	bne.n	80036ee <UART_SetConfig+0x1e2>
  {
    switch (clocksource)
 8003632:	231f      	movs	r3, #31
 8003634:	18fb      	adds	r3, r7, r3
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	2b08      	cmp	r3, #8
 800363a:	d015      	beq.n	8003668 <UART_SetConfig+0x15c>
 800363c:	dc18      	bgt.n	8003670 <UART_SetConfig+0x164>
 800363e:	2b04      	cmp	r3, #4
 8003640:	d00d      	beq.n	800365e <UART_SetConfig+0x152>
 8003642:	dc15      	bgt.n	8003670 <UART_SetConfig+0x164>
 8003644:	2b00      	cmp	r3, #0
 8003646:	d002      	beq.n	800364e <UART_SetConfig+0x142>
 8003648:	2b02      	cmp	r3, #2
 800364a:	d005      	beq.n	8003658 <UART_SetConfig+0x14c>
 800364c:	e010      	b.n	8003670 <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800364e:	f7ff f8af 	bl	80027b0 <HAL_RCC_GetPCLK1Freq>
 8003652:	0003      	movs	r3, r0
 8003654:	61bb      	str	r3, [r7, #24]
        break;
 8003656:	e012      	b.n	800367e <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003658:	4b57      	ldr	r3, [pc, #348]	; (80037b8 <UART_SetConfig+0x2ac>)
 800365a:	61bb      	str	r3, [r7, #24]
        break;
 800365c:	e00f      	b.n	800367e <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800365e:	f7ff f837 	bl	80026d0 <HAL_RCC_GetSysClockFreq>
 8003662:	0003      	movs	r3, r0
 8003664:	61bb      	str	r3, [r7, #24]
        break;
 8003666:	e00a      	b.n	800367e <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003668:	2380      	movs	r3, #128	; 0x80
 800366a:	021b      	lsls	r3, r3, #8
 800366c:	61bb      	str	r3, [r7, #24]
        break;
 800366e:	e006      	b.n	800367e <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 8003670:	2300      	movs	r3, #0
 8003672:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003674:	231e      	movs	r3, #30
 8003676:	18fb      	adds	r3, r7, r3
 8003678:	2201      	movs	r2, #1
 800367a:	701a      	strb	r2, [r3, #0]
        break;
 800367c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d100      	bne.n	8003686 <UART_SetConfig+0x17a>
 8003684:	e07b      	b.n	800377e <UART_SetConfig+0x272>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	005a      	lsls	r2, r3, #1
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	085b      	lsrs	r3, r3, #1
 8003690:	18d2      	adds	r2, r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	0019      	movs	r1, r3
 8003698:	0010      	movs	r0, r2
 800369a:	f7fc fd35 	bl	8000108 <__udivsi3>
 800369e:	0003      	movs	r3, r0
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	2b0f      	cmp	r3, #15
 80036a8:	d91c      	bls.n	80036e4 <UART_SetConfig+0x1d8>
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	2380      	movs	r3, #128	; 0x80
 80036ae:	025b      	lsls	r3, r3, #9
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d217      	bcs.n	80036e4 <UART_SetConfig+0x1d8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	200e      	movs	r0, #14
 80036ba:	183b      	adds	r3, r7, r0
 80036bc:	210f      	movs	r1, #15
 80036be:	438a      	bics	r2, r1
 80036c0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	085b      	lsrs	r3, r3, #1
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	2207      	movs	r2, #7
 80036ca:	4013      	ands	r3, r2
 80036cc:	b299      	uxth	r1, r3
 80036ce:	183b      	adds	r3, r7, r0
 80036d0:	183a      	adds	r2, r7, r0
 80036d2:	8812      	ldrh	r2, [r2, #0]
 80036d4:	430a      	orrs	r2, r1
 80036d6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	183a      	adds	r2, r7, r0
 80036de:	8812      	ldrh	r2, [r2, #0]
 80036e0:	60da      	str	r2, [r3, #12]
 80036e2:	e04c      	b.n	800377e <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 80036e4:	231e      	movs	r3, #30
 80036e6:	18fb      	adds	r3, r7, r3
 80036e8:	2201      	movs	r2, #1
 80036ea:	701a      	strb	r2, [r3, #0]
 80036ec:	e047      	b.n	800377e <UART_SetConfig+0x272>
      }
    }
  }
  else
  {
    switch (clocksource)
 80036ee:	231f      	movs	r3, #31
 80036f0:	18fb      	adds	r3, r7, r3
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	2b08      	cmp	r3, #8
 80036f6:	d015      	beq.n	8003724 <UART_SetConfig+0x218>
 80036f8:	dc18      	bgt.n	800372c <UART_SetConfig+0x220>
 80036fa:	2b04      	cmp	r3, #4
 80036fc:	d00d      	beq.n	800371a <UART_SetConfig+0x20e>
 80036fe:	dc15      	bgt.n	800372c <UART_SetConfig+0x220>
 8003700:	2b00      	cmp	r3, #0
 8003702:	d002      	beq.n	800370a <UART_SetConfig+0x1fe>
 8003704:	2b02      	cmp	r3, #2
 8003706:	d005      	beq.n	8003714 <UART_SetConfig+0x208>
 8003708:	e010      	b.n	800372c <UART_SetConfig+0x220>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800370a:	f7ff f851 	bl	80027b0 <HAL_RCC_GetPCLK1Freq>
 800370e:	0003      	movs	r3, r0
 8003710:	61bb      	str	r3, [r7, #24]
        break;
 8003712:	e012      	b.n	800373a <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003714:	4b28      	ldr	r3, [pc, #160]	; (80037b8 <UART_SetConfig+0x2ac>)
 8003716:	61bb      	str	r3, [r7, #24]
        break;
 8003718:	e00f      	b.n	800373a <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800371a:	f7fe ffd9 	bl	80026d0 <HAL_RCC_GetSysClockFreq>
 800371e:	0003      	movs	r3, r0
 8003720:	61bb      	str	r3, [r7, #24]
        break;
 8003722:	e00a      	b.n	800373a <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003724:	2380      	movs	r3, #128	; 0x80
 8003726:	021b      	lsls	r3, r3, #8
 8003728:	61bb      	str	r3, [r7, #24]
        break;
 800372a:	e006      	b.n	800373a <UART_SetConfig+0x22e>
      default:
        pclk = 0U;
 800372c:	2300      	movs	r3, #0
 800372e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003730:	231e      	movs	r3, #30
 8003732:	18fb      	adds	r3, r7, r3
 8003734:	2201      	movs	r2, #1
 8003736:	701a      	strb	r2, [r3, #0]
        break;
 8003738:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d01e      	beq.n	800377e <UART_SetConfig+0x272>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	085a      	lsrs	r2, r3, #1
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	18d2      	adds	r2, r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	0019      	movs	r1, r3
 8003750:	0010      	movs	r0, r2
 8003752:	f7fc fcd9 	bl	8000108 <__udivsi3>
 8003756:	0003      	movs	r3, r0
 8003758:	b29b      	uxth	r3, r3
 800375a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	2b0f      	cmp	r3, #15
 8003760:	d909      	bls.n	8003776 <UART_SetConfig+0x26a>
 8003762:	693a      	ldr	r2, [r7, #16]
 8003764:	2380      	movs	r3, #128	; 0x80
 8003766:	025b      	lsls	r3, r3, #9
 8003768:	429a      	cmp	r2, r3
 800376a:	d204      	bcs.n	8003776 <UART_SetConfig+0x26a>
      {
        huart->Instance->BRR = usartdiv;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	60da      	str	r2, [r3, #12]
 8003774:	e003      	b.n	800377e <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 8003776:	231e      	movs	r3, #30
 8003778:	18fb      	adds	r3, r7, r3
 800377a:	2201      	movs	r2, #1
 800377c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800378a:	231e      	movs	r3, #30
 800378c:	18fb      	adds	r3, r7, r3
 800378e:	781b      	ldrb	r3, [r3, #0]
}
 8003790:	0018      	movs	r0, r3
 8003792:	46bd      	mov	sp, r7
 8003794:	b008      	add	sp, #32
 8003796:	bd80      	pop	{r7, pc}
 8003798:	efff69f3 	.word	0xefff69f3
 800379c:	ffffcfff 	.word	0xffffcfff
 80037a0:	fffff4ff 	.word	0xfffff4ff
 80037a4:	40013800 	.word	0x40013800
 80037a8:	40021000 	.word	0x40021000
 80037ac:	40004400 	.word	0x40004400
 80037b0:	40004800 	.word	0x40004800
 80037b4:	40004c00 	.word	0x40004c00
 80037b8:	007a1200 	.word	0x007a1200

080037bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c8:	2201      	movs	r2, #1
 80037ca:	4013      	ands	r3, r2
 80037cc:	d00b      	beq.n	80037e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	4a4a      	ldr	r2, [pc, #296]	; (8003900 <UART_AdvFeatureConfig+0x144>)
 80037d6:	4013      	ands	r3, r2
 80037d8:	0019      	movs	r1, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ea:	2202      	movs	r2, #2
 80037ec:	4013      	ands	r3, r2
 80037ee:	d00b      	beq.n	8003808 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	4a43      	ldr	r2, [pc, #268]	; (8003904 <UART_AdvFeatureConfig+0x148>)
 80037f8:	4013      	ands	r3, r2
 80037fa:	0019      	movs	r1, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	430a      	orrs	r2, r1
 8003806:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380c:	2204      	movs	r2, #4
 800380e:	4013      	ands	r3, r2
 8003810:	d00b      	beq.n	800382a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	4a3b      	ldr	r2, [pc, #236]	; (8003908 <UART_AdvFeatureConfig+0x14c>)
 800381a:	4013      	ands	r3, r2
 800381c:	0019      	movs	r1, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	430a      	orrs	r2, r1
 8003828:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382e:	2208      	movs	r2, #8
 8003830:	4013      	ands	r3, r2
 8003832:	d00b      	beq.n	800384c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	4a34      	ldr	r2, [pc, #208]	; (800390c <UART_AdvFeatureConfig+0x150>)
 800383c:	4013      	ands	r3, r2
 800383e:	0019      	movs	r1, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	430a      	orrs	r2, r1
 800384a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003850:	2210      	movs	r2, #16
 8003852:	4013      	ands	r3, r2
 8003854:	d00b      	beq.n	800386e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	4a2c      	ldr	r2, [pc, #176]	; (8003910 <UART_AdvFeatureConfig+0x154>)
 800385e:	4013      	ands	r3, r2
 8003860:	0019      	movs	r1, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	430a      	orrs	r2, r1
 800386c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003872:	2220      	movs	r2, #32
 8003874:	4013      	ands	r3, r2
 8003876:	d00b      	beq.n	8003890 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	4a25      	ldr	r2, [pc, #148]	; (8003914 <UART_AdvFeatureConfig+0x158>)
 8003880:	4013      	ands	r3, r2
 8003882:	0019      	movs	r1, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	430a      	orrs	r2, r1
 800388e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003894:	2240      	movs	r2, #64	; 0x40
 8003896:	4013      	ands	r3, r2
 8003898:	d01d      	beq.n	80038d6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	4a1d      	ldr	r2, [pc, #116]	; (8003918 <UART_AdvFeatureConfig+0x15c>)
 80038a2:	4013      	ands	r3, r2
 80038a4:	0019      	movs	r1, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038b6:	2380      	movs	r3, #128	; 0x80
 80038b8:	035b      	lsls	r3, r3, #13
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d10b      	bne.n	80038d6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	4a15      	ldr	r2, [pc, #84]	; (800391c <UART_AdvFeatureConfig+0x160>)
 80038c6:	4013      	ands	r3, r2
 80038c8:	0019      	movs	r1, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	430a      	orrs	r2, r1
 80038d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038da:	2280      	movs	r2, #128	; 0x80
 80038dc:	4013      	ands	r3, r2
 80038de:	d00b      	beq.n	80038f8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	4a0e      	ldr	r2, [pc, #56]	; (8003920 <UART_AdvFeatureConfig+0x164>)
 80038e8:	4013      	ands	r3, r2
 80038ea:	0019      	movs	r1, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	430a      	orrs	r2, r1
 80038f6:	605a      	str	r2, [r3, #4]
  }
}
 80038f8:	46c0      	nop			; (mov r8, r8)
 80038fa:	46bd      	mov	sp, r7
 80038fc:	b002      	add	sp, #8
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	fffdffff 	.word	0xfffdffff
 8003904:	fffeffff 	.word	0xfffeffff
 8003908:	fffbffff 	.word	0xfffbffff
 800390c:	ffff7fff 	.word	0xffff7fff
 8003910:	ffffefff 	.word	0xffffefff
 8003914:	ffffdfff 	.word	0xffffdfff
 8003918:	ffefffff 	.word	0xffefffff
 800391c:	ff9fffff 	.word	0xff9fffff
 8003920:	fff7ffff 	.word	0xfff7ffff

08003924 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b086      	sub	sp, #24
 8003928:	af02      	add	r7, sp, #8
 800392a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2280      	movs	r2, #128	; 0x80
 8003930:	2100      	movs	r1, #0
 8003932:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003934:	f7fd f956 	bl	8000be4 <HAL_GetTick>
 8003938:	0003      	movs	r3, r0
 800393a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2208      	movs	r2, #8
 8003944:	4013      	ands	r3, r2
 8003946:	2b08      	cmp	r3, #8
 8003948:	d10c      	bne.n	8003964 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2280      	movs	r2, #128	; 0x80
 800394e:	0391      	lsls	r1, r2, #14
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	4a17      	ldr	r2, [pc, #92]	; (80039b0 <UART_CheckIdleState+0x8c>)
 8003954:	9200      	str	r2, [sp, #0]
 8003956:	2200      	movs	r2, #0
 8003958:	f000 f82c 	bl	80039b4 <UART_WaitOnFlagUntilTimeout>
 800395c:	1e03      	subs	r3, r0, #0
 800395e:	d001      	beq.n	8003964 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e021      	b.n	80039a8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2204      	movs	r2, #4
 800396c:	4013      	ands	r3, r2
 800396e:	2b04      	cmp	r3, #4
 8003970:	d10c      	bne.n	800398c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2280      	movs	r2, #128	; 0x80
 8003976:	03d1      	lsls	r1, r2, #15
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	4a0d      	ldr	r2, [pc, #52]	; (80039b0 <UART_CheckIdleState+0x8c>)
 800397c:	9200      	str	r2, [sp, #0]
 800397e:	2200      	movs	r2, #0
 8003980:	f000 f818 	bl	80039b4 <UART_WaitOnFlagUntilTimeout>
 8003984:	1e03      	subs	r3, r0, #0
 8003986:	d001      	beq.n	800398c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e00d      	b.n	80039a8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2220      	movs	r2, #32
 8003990:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2220      	movs	r2, #32
 8003996:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2274      	movs	r2, #116	; 0x74
 80039a2:	2100      	movs	r1, #0
 80039a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	0018      	movs	r0, r3
 80039aa:	46bd      	mov	sp, r7
 80039ac:	b004      	add	sp, #16
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	01ffffff 	.word	0x01ffffff

080039b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b094      	sub	sp, #80	; 0x50
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	603b      	str	r3, [r7, #0]
 80039c0:	1dfb      	adds	r3, r7, #7
 80039c2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039c4:	e0a3      	b.n	8003b0e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039c8:	3301      	adds	r3, #1
 80039ca:	d100      	bne.n	80039ce <UART_WaitOnFlagUntilTimeout+0x1a>
 80039cc:	e09f      	b.n	8003b0e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ce:	f7fd f909 	bl	8000be4 <HAL_GetTick>
 80039d2:	0002      	movs	r2, r0
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039da:	429a      	cmp	r2, r3
 80039dc:	d302      	bcc.n	80039e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80039de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d13d      	bne.n	8003a60 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039e4:	f3ef 8310 	mrs	r3, PRIMASK
 80039e8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80039ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039ec:	647b      	str	r3, [r7, #68]	; 0x44
 80039ee:	2301      	movs	r3, #1
 80039f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f4:	f383 8810 	msr	PRIMASK, r3
}
 80039f8:	46c0      	nop			; (mov r8, r8)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	494c      	ldr	r1, [pc, #304]	; (8003b38 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003a06:	400a      	ands	r2, r1
 8003a08:	601a      	str	r2, [r3, #0]
 8003a0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a0c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a10:	f383 8810 	msr	PRIMASK, r3
}
 8003a14:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a16:	f3ef 8310 	mrs	r3, PRIMASK
 8003a1a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a1e:	643b      	str	r3, [r7, #64]	; 0x40
 8003a20:	2301      	movs	r3, #1
 8003a22:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a26:	f383 8810 	msr	PRIMASK, r3
}
 8003a2a:	46c0      	nop			; (mov r8, r8)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689a      	ldr	r2, [r3, #8]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2101      	movs	r1, #1
 8003a38:	438a      	bics	r2, r1
 8003a3a:	609a      	str	r2, [r3, #8]
 8003a3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a42:	f383 8810 	msr	PRIMASK, r3
}
 8003a46:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2220      	movs	r2, #32
 8003a52:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2274      	movs	r2, #116	; 0x74
 8003a58:	2100      	movs	r1, #0
 8003a5a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e067      	b.n	8003b30 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2204      	movs	r2, #4
 8003a68:	4013      	ands	r3, r2
 8003a6a:	d050      	beq.n	8003b0e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	69da      	ldr	r2, [r3, #28]
 8003a72:	2380      	movs	r3, #128	; 0x80
 8003a74:	011b      	lsls	r3, r3, #4
 8003a76:	401a      	ands	r2, r3
 8003a78:	2380      	movs	r3, #128	; 0x80
 8003a7a:	011b      	lsls	r3, r3, #4
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d146      	bne.n	8003b0e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2280      	movs	r2, #128	; 0x80
 8003a86:	0112      	lsls	r2, r2, #4
 8003a88:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a8a:	f3ef 8310 	mrs	r3, PRIMASK
 8003a8e:	613b      	str	r3, [r7, #16]
  return(result);
 8003a90:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a94:	2301      	movs	r3, #1
 8003a96:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	f383 8810 	msr	PRIMASK, r3
}
 8003a9e:	46c0      	nop			; (mov r8, r8)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4923      	ldr	r1, [pc, #140]	; (8003b38 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003aac:	400a      	ands	r2, r1
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ab2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	f383 8810 	msr	PRIMASK, r3
}
 8003aba:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003abc:	f3ef 8310 	mrs	r3, PRIMASK
 8003ac0:	61fb      	str	r3, [r7, #28]
  return(result);
 8003ac2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ac4:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aca:	6a3b      	ldr	r3, [r7, #32]
 8003acc:	f383 8810 	msr	PRIMASK, r3
}
 8003ad0:	46c0      	nop			; (mov r8, r8)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	689a      	ldr	r2, [r3, #8]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2101      	movs	r1, #1
 8003ade:	438a      	bics	r2, r1
 8003ae0:	609a      	str	r2, [r3, #8]
 8003ae2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ae4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae8:	f383 8810 	msr	PRIMASK, r3
}
 8003aec:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2220      	movs	r2, #32
 8003af2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2220      	movs	r2, #32
 8003af8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2280      	movs	r2, #128	; 0x80
 8003afe:	2120      	movs	r1, #32
 8003b00:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2274      	movs	r2, #116	; 0x74
 8003b06:	2100      	movs	r1, #0
 8003b08:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e010      	b.n	8003b30 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	69db      	ldr	r3, [r3, #28]
 8003b14:	68ba      	ldr	r2, [r7, #8]
 8003b16:	4013      	ands	r3, r2
 8003b18:	68ba      	ldr	r2, [r7, #8]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	425a      	negs	r2, r3
 8003b1e:	4153      	adcs	r3, r2
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	001a      	movs	r2, r3
 8003b24:	1dfb      	adds	r3, r7, #7
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d100      	bne.n	8003b2e <UART_WaitOnFlagUntilTimeout+0x17a>
 8003b2c:	e74b      	b.n	80039c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	0018      	movs	r0, r3
 8003b32:	46bd      	mov	sp, r7
 8003b34:	b014      	add	sp, #80	; 0x50
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	fffffe5f 	.word	0xfffffe5f

08003b3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b08e      	sub	sp, #56	; 0x38
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b44:	f3ef 8310 	mrs	r3, PRIMASK
 8003b48:	617b      	str	r3, [r7, #20]
  return(result);
 8003b4a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b4c:	637b      	str	r3, [r7, #52]	; 0x34
 8003b4e:	2301      	movs	r3, #1
 8003b50:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	f383 8810 	msr	PRIMASK, r3
}
 8003b58:	46c0      	nop			; (mov r8, r8)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4925      	ldr	r1, [pc, #148]	; (8003bfc <UART_EndRxTransfer+0xc0>)
 8003b66:	400a      	ands	r2, r1
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b6c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	f383 8810 	msr	PRIMASK, r3
}
 8003b74:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b76:	f3ef 8310 	mrs	r3, PRIMASK
 8003b7a:	623b      	str	r3, [r7, #32]
  return(result);
 8003b7c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b7e:	633b      	str	r3, [r7, #48]	; 0x30
 8003b80:	2301      	movs	r3, #1
 8003b82:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b86:	f383 8810 	msr	PRIMASK, r3
}
 8003b8a:	46c0      	nop			; (mov r8, r8)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689a      	ldr	r2, [r3, #8]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2101      	movs	r1, #1
 8003b98:	438a      	bics	r2, r1
 8003b9a:	609a      	str	r2, [r3, #8]
 8003b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba2:	f383 8810 	msr	PRIMASK, r3
}
 8003ba6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d118      	bne.n	8003be2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bb0:	f3ef 8310 	mrs	r3, PRIMASK
 8003bb4:	60bb      	str	r3, [r7, #8]
  return(result);
 8003bb6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bba:	2301      	movs	r3, #1
 8003bbc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f383 8810 	msr	PRIMASK, r3
}
 8003bc4:	46c0      	nop			; (mov r8, r8)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2110      	movs	r1, #16
 8003bd2:	438a      	bics	r2, r1
 8003bd4:	601a      	str	r2, [r3, #0]
 8003bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	f383 8810 	msr	PRIMASK, r3
}
 8003be0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2220      	movs	r2, #32
 8003be6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003bf4:	46c0      	nop			; (mov r8, r8)
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	b00e      	add	sp, #56	; 0x38
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	fffffedf 	.word	0xfffffedf

08003c00 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	225a      	movs	r2, #90	; 0x5a
 8003c12:	2100      	movs	r1, #0
 8003c14:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2252      	movs	r2, #82	; 0x52
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	0018      	movs	r0, r3
 8003c22:	f7ff fc5f 	bl	80034e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c26:	46c0      	nop			; (mov r8, r8)
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	b004      	add	sp, #16
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b086      	sub	sp, #24
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c36:	f3ef 8310 	mrs	r3, PRIMASK
 8003c3a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c3c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c3e:	617b      	str	r3, [r7, #20]
 8003c40:	2301      	movs	r3, #1
 8003c42:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f383 8810 	msr	PRIMASK, r3
}
 8003c4a:	46c0      	nop			; (mov r8, r8)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2140      	movs	r1, #64	; 0x40
 8003c58:	438a      	bics	r2, r1
 8003c5a:	601a      	str	r2, [r3, #0]
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	f383 8810 	msr	PRIMASK, r3
}
 8003c66:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	0018      	movs	r0, r3
 8003c78:	f7ff fc2c 	bl	80034d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c7c:	46c0      	nop			; (mov r8, r8)
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	b006      	add	sp, #24
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <u8g2_DrawHorizontalBitmap>:
  b		Pointer to the bitmap line.
  Only draw pixels which are set.
*/

void u8g2_DrawHorizontalBitmap(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 8003c84:	b5b0      	push	{r4, r5, r7, lr}
 8003c86:	b088      	sub	sp, #32
 8003c88:	af02      	add	r7, sp, #8
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	000c      	movs	r4, r1
 8003c8e:	0010      	movs	r0, r2
 8003c90:	0019      	movs	r1, r3
 8003c92:	250a      	movs	r5, #10
 8003c94:	197b      	adds	r3, r7, r5
 8003c96:	1c22      	adds	r2, r4, #0
 8003c98:	801a      	strh	r2, [r3, #0]
 8003c9a:	2408      	movs	r4, #8
 8003c9c:	193b      	adds	r3, r7, r4
 8003c9e:	1c02      	adds	r2, r0, #0
 8003ca0:	801a      	strh	r2, [r3, #0]
 8003ca2:	1dbb      	adds	r3, r7, #6
 8003ca4:	1c0a      	adds	r2, r1, #0
 8003ca6:	801a      	strh	r2, [r3, #0]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 8003ca8:	2016      	movs	r0, #22
 8003caa:	183b      	adds	r3, r7, r0
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	2192      	movs	r1, #146	; 0x92
 8003cb0:	5c52      	ldrb	r2, [r2, r1]
 8003cb2:	701a      	strb	r2, [r3, #0]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 8003cb4:	183b      	adds	r3, r7, r0
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	425a      	negs	r2, r3
 8003cba:	4153      	adcs	r3, r2
 8003cbc:	b2da      	uxtb	r2, r3
 8003cbe:	2315      	movs	r3, #21
 8003cc0:	18fb      	adds	r3, r7, r3
 8003cc2:	701a      	strb	r2, [r3, #0]

#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8003cc4:	0029      	movs	r1, r5
 8003cc6:	187a      	adds	r2, r7, r1
 8003cc8:	1dbb      	adds	r3, r7, #6
 8003cca:	8812      	ldrh	r2, [r2, #0]
 8003ccc:	881b      	ldrh	r3, [r3, #0]
 8003cce:	18d3      	adds	r3, r2, r3
 8003cd0:	b29d      	uxth	r5, r3
 8003cd2:	193b      	adds	r3, r7, r4
 8003cd4:	881b      	ldrh	r3, [r3, #0]
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	193a      	adds	r2, r7, r4
 8003cdc:	8814      	ldrh	r4, [r2, #0]
 8003cde:	187a      	adds	r2, r7, r1
 8003ce0:	8811      	ldrh	r1, [r2, #0]
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	002b      	movs	r3, r5
 8003ce8:	0022      	movs	r2, r4
 8003cea:	f000 fbae 	bl	800444a <u8g2_IsIntersection>
 8003cee:	1e03      	subs	r3, r0, #0
 8003cf0:	d05d      	beq.n	8003dae <u8g2_DrawHorizontalBitmap+0x12a>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 128;
 8003cf2:	2317      	movs	r3, #23
 8003cf4:	18fb      	adds	r3, r7, r3
 8003cf6:	2280      	movs	r2, #128	; 0x80
 8003cf8:	701a      	strb	r2, [r3, #0]
  while(len > 0)
 8003cfa:	e04d      	b.n	8003d98 <u8g2_DrawHorizontalBitmap+0x114>
  {
    if ( *b & mask ) {
 8003cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	2217      	movs	r2, #23
 8003d02:	18ba      	adds	r2, r7, r2
 8003d04:	7812      	ldrb	r2, [r2, #0]
 8003d06:	4013      	ands	r3, r2
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d012      	beq.n	8003d34 <u8g2_DrawHorizontalBitmap+0xb0>
      u8g2->draw_color = color;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2216      	movs	r2, #22
 8003d12:	18ba      	adds	r2, r7, r2
 8003d14:	2192      	movs	r1, #146	; 0x92
 8003d16:	7812      	ldrb	r2, [r2, #0]
 8003d18:	545a      	strb	r2, [r3, r1]
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8003d1a:	2308      	movs	r3, #8
 8003d1c:	18fb      	adds	r3, r7, r3
 8003d1e:	881a      	ldrh	r2, [r3, #0]
 8003d20:	230a      	movs	r3, #10
 8003d22:	18fb      	adds	r3, r7, r3
 8003d24:	8819      	ldrh	r1, [r3, #0]
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	2300      	movs	r3, #0
 8003d2a:	9300      	str	r3, [sp, #0]
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	f000 faa0 	bl	8004272 <u8g2_DrawHVLine>
 8003d32:	e016      	b.n	8003d62 <u8g2_DrawHorizontalBitmap+0xde>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2291      	movs	r2, #145	; 0x91
 8003d38:	5c9b      	ldrb	r3, [r3, r2]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d111      	bne.n	8003d62 <u8g2_DrawHorizontalBitmap+0xde>
      u8g2->draw_color = ncolor;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2215      	movs	r2, #21
 8003d42:	18ba      	adds	r2, r7, r2
 8003d44:	2192      	movs	r1, #146	; 0x92
 8003d46:	7812      	ldrb	r2, [r2, #0]
 8003d48:	545a      	strb	r2, [r3, r1]
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8003d4a:	2308      	movs	r3, #8
 8003d4c:	18fb      	adds	r3, r7, r3
 8003d4e:	881a      	ldrh	r2, [r3, #0]
 8003d50:	230a      	movs	r3, #10
 8003d52:	18fb      	adds	r3, r7, r3
 8003d54:	8819      	ldrh	r1, [r3, #0]
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	2300      	movs	r3, #0
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	f000 fa88 	bl	8004272 <u8g2_DrawHVLine>
    }

    x++;
 8003d62:	210a      	movs	r1, #10
 8003d64:	187b      	adds	r3, r7, r1
 8003d66:	881a      	ldrh	r2, [r3, #0]
 8003d68:	187b      	adds	r3, r7, r1
 8003d6a:	3201      	adds	r2, #1
 8003d6c:	801a      	strh	r2, [r3, #0]
    mask >>= 1;
 8003d6e:	2117      	movs	r1, #23
 8003d70:	187b      	adds	r3, r7, r1
 8003d72:	187a      	adds	r2, r7, r1
 8003d74:	7812      	ldrb	r2, [r2, #0]
 8003d76:	0852      	lsrs	r2, r2, #1
 8003d78:	701a      	strb	r2, [r3, #0]
    if ( mask == 0 )
 8003d7a:	187b      	adds	r3, r7, r1
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d105      	bne.n	8003d8e <u8g2_DrawHorizontalBitmap+0x10a>
    {
      mask = 128;
 8003d82:	187b      	adds	r3, r7, r1
 8003d84:	2280      	movs	r2, #128	; 0x80
 8003d86:	701a      	strb	r2, [r3, #0]
      b++;
 8003d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    len--;
 8003d8e:	1dbb      	adds	r3, r7, #6
 8003d90:	881a      	ldrh	r2, [r3, #0]
 8003d92:	1dbb      	adds	r3, r7, #6
 8003d94:	3a01      	subs	r2, #1
 8003d96:	801a      	strh	r2, [r3, #0]
  while(len > 0)
 8003d98:	1dbb      	adds	r3, r7, #6
 8003d9a:	881b      	ldrh	r3, [r3, #0]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1ad      	bne.n	8003cfc <u8g2_DrawHorizontalBitmap+0x78>
  }
  u8g2->draw_color = color;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2216      	movs	r2, #22
 8003da4:	18ba      	adds	r2, r7, r2
 8003da6:	2192      	movs	r1, #146	; 0x92
 8003da8:	7812      	ldrb	r2, [r2, #0]
 8003daa:	545a      	strb	r2, [r3, r1]
 8003dac:	e000      	b.n	8003db0 <u8g2_DrawHorizontalBitmap+0x12c>
    return;
 8003dae:	46c0      	nop			; (mov r8, r8)
}
 8003db0:	46bd      	mov	sp, r7
 8003db2:	b006      	add	sp, #24
 8003db4:	bdb0      	pop	{r4, r5, r7, pc}

08003db6 <u8g2_DrawBitmap>:


/* u8glib compatible bitmap draw function */
void u8g2_DrawBitmap(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t cnt, u8g2_uint_t h, const uint8_t *bitmap)
{
 8003db6:	b5b0      	push	{r4, r5, r7, lr}
 8003db8:	b088      	sub	sp, #32
 8003dba:	af02      	add	r7, sp, #8
 8003dbc:	60f8      	str	r0, [r7, #12]
 8003dbe:	000c      	movs	r4, r1
 8003dc0:	0010      	movs	r0, r2
 8003dc2:	0019      	movs	r1, r3
 8003dc4:	250a      	movs	r5, #10
 8003dc6:	197b      	adds	r3, r7, r5
 8003dc8:	1c22      	adds	r2, r4, #0
 8003dca:	801a      	strh	r2, [r3, #0]
 8003dcc:	2408      	movs	r4, #8
 8003dce:	193b      	adds	r3, r7, r4
 8003dd0:	1c02      	adds	r2, r0, #0
 8003dd2:	801a      	strh	r2, [r3, #0]
 8003dd4:	1dbb      	adds	r3, r7, #6
 8003dd6:	1c0a      	adds	r2, r1, #0
 8003dd8:	801a      	strh	r2, [r3, #0]
  u8g2_uint_t w;
  w = cnt;
 8003dda:	2116      	movs	r1, #22
 8003ddc:	187b      	adds	r3, r7, r1
 8003dde:	1dba      	adds	r2, r7, #6
 8003de0:	8812      	ldrh	r2, [r2, #0]
 8003de2:	801a      	strh	r2, [r3, #0]
  w *= 8;
 8003de4:	187b      	adds	r3, r7, r1
 8003de6:	187a      	adds	r2, r7, r1
 8003de8:	8812      	ldrh	r2, [r2, #0]
 8003dea:	00d2      	lsls	r2, r2, #3
 8003dec:	801a      	strh	r2, [r3, #0]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8003dee:	0028      	movs	r0, r5
 8003df0:	183a      	adds	r2, r7, r0
 8003df2:	187b      	adds	r3, r7, r1
 8003df4:	8812      	ldrh	r2, [r2, #0]
 8003df6:	881b      	ldrh	r3, [r3, #0]
 8003df8:	18d3      	adds	r3, r2, r3
 8003dfa:	b29d      	uxth	r5, r3
 8003dfc:	193a      	adds	r2, r7, r4
 8003dfe:	2328      	movs	r3, #40	; 0x28
 8003e00:	18fb      	adds	r3, r7, r3
 8003e02:	8812      	ldrh	r2, [r2, #0]
 8003e04:	881b      	ldrh	r3, [r3, #0]
 8003e06:	18d3      	adds	r3, r2, r3
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	193a      	adds	r2, r7, r4
 8003e0c:	8814      	ldrh	r4, [r2, #0]
 8003e0e:	183a      	adds	r2, r7, r0
 8003e10:	8811      	ldrh	r1, [r2, #0]
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	9300      	str	r3, [sp, #0]
 8003e16:	002b      	movs	r3, r5
 8003e18:	0022      	movs	r2, r4
 8003e1a:	f000 fb16 	bl	800444a <u8g2_IsIntersection>
 8003e1e:	1e03      	subs	r3, r0, #0
 8003e20:	d025      	beq.n	8003e6e <u8g2_DrawBitmap+0xb8>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 8003e22:	e01e      	b.n	8003e62 <u8g2_DrawBitmap+0xac>
  {
    u8g2_DrawHorizontalBitmap(u8g2, x, y, w, bitmap);
 8003e24:	2316      	movs	r3, #22
 8003e26:	18fb      	adds	r3, r7, r3
 8003e28:	881c      	ldrh	r4, [r3, #0]
 8003e2a:	2508      	movs	r5, #8
 8003e2c:	197b      	adds	r3, r7, r5
 8003e2e:	881a      	ldrh	r2, [r3, #0]
 8003e30:	230a      	movs	r3, #10
 8003e32:	18fb      	adds	r3, r7, r3
 8003e34:	8819      	ldrh	r1, [r3, #0]
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e3a:	9300      	str	r3, [sp, #0]
 8003e3c:	0023      	movs	r3, r4
 8003e3e:	f7ff ff21 	bl	8003c84 <u8g2_DrawHorizontalBitmap>
    bitmap += cnt;
 8003e42:	1dbb      	adds	r3, r7, #6
 8003e44:	881b      	ldrh	r3, [r3, #0]
 8003e46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e48:	18d3      	adds	r3, r2, r3
 8003e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    y++;
 8003e4c:	197b      	adds	r3, r7, r5
 8003e4e:	881a      	ldrh	r2, [r3, #0]
 8003e50:	197b      	adds	r3, r7, r5
 8003e52:	3201      	adds	r2, #1
 8003e54:	801a      	strh	r2, [r3, #0]
    h--;
 8003e56:	2128      	movs	r1, #40	; 0x28
 8003e58:	187b      	adds	r3, r7, r1
 8003e5a:	881a      	ldrh	r2, [r3, #0]
 8003e5c:	187b      	adds	r3, r7, r1
 8003e5e:	3a01      	subs	r2, #1
 8003e60:	801a      	strh	r2, [r3, #0]
  while( h > 0 )
 8003e62:	2328      	movs	r3, #40	; 0x28
 8003e64:	18fb      	adds	r3, r7, r3
 8003e66:	881b      	ldrh	r3, [r3, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1db      	bne.n	8003e24 <u8g2_DrawBitmap+0x6e>
 8003e6c:	e000      	b.n	8003e70 <u8g2_DrawBitmap+0xba>
    return;
 8003e6e:	46c0      	nop			; (mov r8, r8)
  }
}
 8003e70:	46bd      	mov	sp, r7
 8003e72:	b006      	add	sp, #24
 8003e74:	bdb0      	pop	{r4, r5, r7, pc}

08003e76 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b084      	sub	sp, #16
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	7c1b      	ldrb	r3, [r3, #16]
 8003e84:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2238      	movs	r2, #56	; 0x38
 8003e8a:	5c9b      	ldrb	r3, [r3, r2]
 8003e8c:	001a      	movs	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	4353      	muls	r3, r2
 8003e92:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	2100      	movs	r1, #0
 8003ea2:	0018      	movs	r0, r3
 8003ea4:	f003 fbf9 	bl	800769a <memset>
}
 8003ea8:	46c0      	nop			; (mov r8, r8)
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	b004      	add	sp, #16
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8003eb0:	b590      	push	{r4, r7, lr}
 8003eb2:	b087      	sub	sp, #28
 8003eb4:	af02      	add	r7, sp, #8
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	0008      	movs	r0, r1
 8003eba:	0011      	movs	r1, r2
 8003ebc:	1cfb      	adds	r3, r7, #3
 8003ebe:	1c02      	adds	r2, r0, #0
 8003ec0:	701a      	strb	r2, [r3, #0]
 8003ec2:	1cbb      	adds	r3, r7, #2
 8003ec4:	1c0a      	adds	r2, r1, #0
 8003ec6:	701a      	strb	r2, [r3, #0]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	240f      	movs	r4, #15
 8003ece:	193b      	adds	r3, r7, r4
 8003ed0:	7c12      	ldrb	r2, [r2, #16]
 8003ed2:	701a      	strb	r2, [r3, #0]
  offset = src_tile_row;
 8003ed4:	210c      	movs	r1, #12
 8003ed6:	187b      	adds	r3, r7, r1
 8003ed8:	1cfa      	adds	r2, r7, #3
 8003eda:	7812      	ldrb	r2, [r2, #0]
 8003edc:	801a      	strh	r2, [r3, #0]
  ptr = u8g2->tile_buf_ptr;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee2:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8003ee4:	193b      	adds	r3, r7, r4
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	187b      	adds	r3, r7, r1
 8003eec:	0008      	movs	r0, r1
 8003eee:	1879      	adds	r1, r7, r1
 8003ef0:	8809      	ldrh	r1, [r1, #0]
 8003ef2:	434a      	muls	r2, r1
 8003ef4:	801a      	strh	r2, [r3, #0]
  offset *= 8;
 8003ef6:	0001      	movs	r1, r0
 8003ef8:	187b      	adds	r3, r7, r1
 8003efa:	187a      	adds	r2, r7, r1
 8003efc:	8812      	ldrh	r2, [r2, #0]
 8003efe:	00d2      	lsls	r2, r2, #3
 8003f00:	801a      	strh	r2, [r3, #0]
  ptr += offset;
 8003f02:	187b      	adds	r3, r7, r1
 8003f04:	881b      	ldrh	r3, [r3, #0]
 8003f06:	68ba      	ldr	r2, [r7, #8]
 8003f08:	18d3      	adds	r3, r2, r3
 8003f0a:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8003f0c:	193b      	adds	r3, r7, r4
 8003f0e:	7819      	ldrb	r1, [r3, #0]
 8003f10:	1cbb      	adds	r3, r7, #2
 8003f12:	781a      	ldrb	r2, [r3, #0]
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	9300      	str	r3, [sp, #0]
 8003f1a:	000b      	movs	r3, r1
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	f001 f85b 	bl	8004fd8 <u8x8_DrawTile>
}
 8003f22:	46c0      	nop			; (mov r8, r8)
 8003f24:	46bd      	mov	sp, r7
 8003f26:	b005      	add	sp, #20
 8003f28:	bd90      	pop	{r4, r7, pc}

08003f2a <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8003f2a:	b5b0      	push	{r4, r5, r7, lr}
 8003f2c:	b084      	sub	sp, #16
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8003f32:	230f      	movs	r3, #15
 8003f34:	18fb      	adds	r3, r7, r3
 8003f36:	2200      	movs	r2, #0
 8003f38:	701a      	strb	r2, [r3, #0]
  src_max = u8g2->tile_buf_height;
 8003f3a:	230d      	movs	r3, #13
 8003f3c:	18fb      	adds	r3, r7, r3
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	2138      	movs	r1, #56	; 0x38
 8003f42:	5c52      	ldrb	r2, [r2, r1]
 8003f44:	701a      	strb	r2, [r3, #0]
  dest_row = u8g2->tile_curr_row;
 8003f46:	230e      	movs	r3, #14
 8003f48:	18fb      	adds	r3, r7, r3
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	2139      	movs	r1, #57	; 0x39
 8003f4e:	5c52      	ldrb	r2, [r2, r1]
 8003f50:	701a      	strb	r2, [r3, #0]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	230c      	movs	r3, #12
 8003f58:	18fb      	adds	r3, r7, r3
 8003f5a:	7c52      	ldrb	r2, [r2, #17]
 8003f5c:	701a      	strb	r2, [r3, #0]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8003f5e:	250e      	movs	r5, #14
 8003f60:	197b      	adds	r3, r7, r5
 8003f62:	781a      	ldrb	r2, [r3, #0]
 8003f64:	240f      	movs	r4, #15
 8003f66:	193b      	adds	r3, r7, r4
 8003f68:	7819      	ldrb	r1, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	0018      	movs	r0, r3
 8003f6e:	f7ff ff9f 	bl	8003eb0 <u8g2_send_tile_row>
    src_row++;
 8003f72:	0021      	movs	r1, r4
 8003f74:	187b      	adds	r3, r7, r1
 8003f76:	781a      	ldrb	r2, [r3, #0]
 8003f78:	187b      	adds	r3, r7, r1
 8003f7a:	3201      	adds	r2, #1
 8003f7c:	701a      	strb	r2, [r3, #0]
    dest_row++;
 8003f7e:	197b      	adds	r3, r7, r5
 8003f80:	781a      	ldrb	r2, [r3, #0]
 8003f82:	197b      	adds	r3, r7, r5
 8003f84:	3201      	adds	r2, #1
 8003f86:	701a      	strb	r2, [r3, #0]
  } while( src_row < src_max && dest_row < dest_max );
 8003f88:	187a      	adds	r2, r7, r1
 8003f8a:	230d      	movs	r3, #13
 8003f8c:	18fb      	adds	r3, r7, r3
 8003f8e:	7812      	ldrb	r2, [r2, #0]
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d206      	bcs.n	8003fa4 <u8g2_send_buffer+0x7a>
 8003f96:	197a      	adds	r2, r7, r5
 8003f98:	230c      	movs	r3, #12
 8003f9a:	18fb      	adds	r3, r7, r3
 8003f9c:	7812      	ldrb	r2, [r2, #0]
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d3dc      	bcc.n	8003f5e <u8g2_send_buffer+0x34>
}
 8003fa4:	46c0      	nop			; (mov r8, r8)
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	b004      	add	sp, #16
 8003faa:	bdb0      	pop	{r4, r5, r7, pc}

08003fac <u8g2_SetBufferCurrTileRow>:
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	000a      	movs	r2, r1
 8003fb6:	1cfb      	adds	r3, r7, #3
 8003fb8:	701a      	strb	r2, [r3, #0]
  u8g2->tile_curr_row = row;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	1cfa      	adds	r2, r7, #3
 8003fbe:	2139      	movs	r1, #57	; 0x39
 8003fc0:	7812      	ldrb	r2, [r2, #0]
 8003fc2:	545a      	strb	r2, [r3, r1]
  u8g2->cb->update_dimension(u8g2);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	0010      	movs	r0, r2
 8003fce:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	0010      	movs	r0, r2
 8003fda:	4798      	blx	r3
}
 8003fdc:	46c0      	nop			; (mov r8, r8)
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	b002      	add	sp, #8
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2293      	movs	r2, #147	; 0x93
 8003ff0:	5c9b      	ldrb	r3, [r3, r2]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <u8g2_FirstPage+0x1a>
  {
    u8g2_ClearBuffer(u8g2);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	0018      	movs	r0, r3
 8003ffa:	f7ff ff3c 	bl	8003e76 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2100      	movs	r1, #0
 8004002:	0018      	movs	r0, r3
 8004004:	f7ff ffd2 	bl	8003fac <u8g2_SetBufferCurrTileRow>
}
 8004008:	46c0      	nop			; (mov r8, r8)
 800400a:	46bd      	mov	sp, r7
 800400c:	b002      	add	sp, #8
 800400e:	bd80      	pop	{r7, pc}

08004010 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	0018      	movs	r0, r3
 800401c:	f7ff ff85 	bl	8003f2a <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8004020:	200f      	movs	r0, #15
 8004022:	183b      	adds	r3, r7, r0
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	2139      	movs	r1, #57	; 0x39
 8004028:	5c52      	ldrb	r2, [r2, r1]
 800402a:	701a      	strb	r2, [r3, #0]
  row += u8g2->tile_buf_height;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2238      	movs	r2, #56	; 0x38
 8004030:	5c99      	ldrb	r1, [r3, r2]
 8004032:	183b      	adds	r3, r7, r0
 8004034:	183a      	adds	r2, r7, r0
 8004036:	7812      	ldrb	r2, [r2, #0]
 8004038:	188a      	adds	r2, r1, r2
 800403a:	701a      	strb	r2, [r3, #0]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	7c5b      	ldrb	r3, [r3, #17]
 8004042:	183a      	adds	r2, r7, r0
 8004044:	7812      	ldrb	r2, [r2, #0]
 8004046:	429a      	cmp	r2, r3
 8004048:	d305      	bcc.n	8004056 <u8g2_NextPage+0x46>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	0018      	movs	r0, r3
 800404e:	f001 f820 	bl	8005092 <u8x8_RefreshDisplay>
    return 0;
 8004052:	2300      	movs	r3, #0
 8004054:	e011      	b.n	800407a <u8g2_NextPage+0x6a>
  }
  if ( u8g2->is_auto_page_clear )
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2293      	movs	r2, #147	; 0x93
 800405a:	5c9b      	ldrb	r3, [r3, r2]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d003      	beq.n	8004068 <u8g2_NextPage+0x58>
  {
    u8g2_ClearBuffer(u8g2);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	0018      	movs	r0, r3
 8004064:	f7ff ff07 	bl	8003e76 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8004068:	230f      	movs	r3, #15
 800406a:	18fb      	adds	r3, r7, r3
 800406c:	781a      	ldrb	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	0011      	movs	r1, r2
 8004072:	0018      	movs	r0, r3
 8004074:	f7ff ff9a 	bl	8003fac <u8g2_SetBufferCurrTileRow>
  return 1;
 8004078:	2301      	movs	r3, #1
}
 800407a:	0018      	movs	r0, r3
 800407c:	46bd      	mov	sp, r7
 800407e:	b004      	add	sp, #16
 8004080:	bd80      	pop	{r7, pc}
	...

08004084 <u8g2_m_16_8_2>:
  *page_cnt = 1;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_2(uint8_t *page_cnt)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 2;
  return 0;
  #else
  static uint8_t buf[256];
  *page_cnt = 2;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2202      	movs	r2, #2
 8004090:	701a      	strb	r2, [r3, #0]
  return buf;
 8004092:	4b02      	ldr	r3, [pc, #8]	; (800409c <u8g2_m_16_8_2+0x18>)
  #endif
}
 8004094:	0018      	movs	r0, r3
 8004096:	46bd      	mov	sp, r7
 8004098:	b002      	add	sp, #8
 800409a:	bd80      	pop	{r7, pc}
 800409c:	20000218 	.word	0x20000218

080040a0 <u8g2_Setup_ssd1306_i2c_128x64_noname_2>:
  buf = u8g2_m_16_8_1(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 2 */
void u8g2_Setup_ssd1306_i2c_128x64_noname_2(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80040a0:	b590      	push	{r4, r7, lr}
 80040a2:	b089      	sub	sp, #36	; 0x24
 80040a4:	af02      	add	r7, sp, #8
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
 80040ac:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 80040ae:	687c      	ldr	r4, [r7, #4]
 80040b0:	4a0e      	ldr	r2, [pc, #56]	; (80040ec <u8g2_Setup_ssd1306_i2c_128x64_noname_2+0x4c>)
 80040b2:	490f      	ldr	r1, [pc, #60]	; (80040f0 <u8g2_Setup_ssd1306_i2c_128x64_noname_2+0x50>)
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	0023      	movs	r3, r4
 80040bc:	f001 f852 	bl	8005164 <u8x8_Setup>
  buf = u8g2_m_16_8_2(&tile_buf_height);
 80040c0:	2413      	movs	r4, #19
 80040c2:	193b      	adds	r3, r7, r4
 80040c4:	0018      	movs	r0, r3
 80040c6:	f7ff ffdd 	bl	8004084 <u8g2_m_16_8_2>
 80040ca:	0003      	movs	r3, r0
 80040cc:	617b      	str	r3, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 80040ce:	193b      	adds	r3, r7, r4
 80040d0:	781a      	ldrb	r2, [r3, #0]
 80040d2:	4c08      	ldr	r4, [pc, #32]	; (80040f4 <u8g2_Setup_ssd1306_i2c_128x64_noname_2+0x54>)
 80040d4:	6979      	ldr	r1, [r7, #20]
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	9300      	str	r3, [sp, #0]
 80040dc:	0023      	movs	r3, r4
 80040de:	f000 fae9 	bl	80046b4 <u8g2_SetupBuffer>
}
 80040e2:	46c0      	nop			; (mov r8, r8)
 80040e4:	46bd      	mov	sp, r7
 80040e6:	b007      	add	sp, #28
 80040e8:	bd90      	pop	{r4, r7, pc}
 80040ea:	46c0      	nop			; (mov r8, r8)
 80040ec:	08004bd9 	.word	0x08004bd9
 80040f0:	08004eb5 	.word	0x08004eb5
 80040f4:	080044b9 	.word	0x080044b9

080040f8 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  return 0;
 8004100:	2300      	movs	r3, #0
}
 8004102:	0018      	movs	r0, r3
 8004104:	46bd      	mov	sp, r7
 8004106:	b002      	add	sp, #8
 8004108:	bd80      	pop	{r7, pc}
	...

0800410c <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a03      	ldr	r2, [pc, #12]	; (8004124 <u8g2_SetFontPosBaseline+0x18>)
 8004118:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800411a:	46c0      	nop			; (mov r8, r8)
 800411c:	46bd      	mov	sp, r7
 800411e:	b002      	add	sp, #8
 8004120:	bd80      	pop	{r7, pc}
 8004122:	46c0      	nop			; (mov r8, r8)
 8004124:	080040f9 	.word	0x080040f9

08004128 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8004128:	b590      	push	{r4, r7, lr}
 800412a:	b087      	sub	sp, #28
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	0019      	movs	r1, r3
 8004134:	1dbb      	adds	r3, r7, #6
 8004136:	801a      	strh	r2, [r3, #0]
 8004138:	1d3b      	adds	r3, r7, #4
 800413a:	1c0a      	adds	r2, r1, #0
 800413c:	801a      	strh	r2, [r3, #0]
  u8g2_uint_t a = *ap;
 800413e:	2416      	movs	r4, #22
 8004140:	193b      	adds	r3, r7, r4
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	8812      	ldrh	r2, [r2, #0]
 8004146:	801a      	strh	r2, [r3, #0]
  u8g2_uint_t b;
  b  = a;
 8004148:	2014      	movs	r0, #20
 800414a:	183b      	adds	r3, r7, r0
 800414c:	193a      	adds	r2, r7, r4
 800414e:	8812      	ldrh	r2, [r2, #0]
 8004150:	801a      	strh	r2, [r3, #0]
  b += *len;
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	8819      	ldrh	r1, [r3, #0]
 8004156:	183b      	adds	r3, r7, r0
 8004158:	183a      	adds	r2, r7, r0
 800415a:	8812      	ldrh	r2, [r2, #0]
 800415c:	188a      	adds	r2, r1, r2
 800415e:	801a      	strh	r2, [r3, #0]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8004160:	193a      	adds	r2, r7, r4
 8004162:	0001      	movs	r1, r0
 8004164:	187b      	adds	r3, r7, r1
 8004166:	8812      	ldrh	r2, [r2, #0]
 8004168:	881b      	ldrh	r3, [r3, #0]
 800416a:	429a      	cmp	r2, r3
 800416c:	d914      	bls.n	8004198 <u8g2_clip_intersection2+0x70>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 800416e:	193a      	adds	r2, r7, r4
 8004170:	1d3b      	adds	r3, r7, #4
 8004172:	8812      	ldrh	r2, [r2, #0]
 8004174:	881b      	ldrh	r3, [r3, #0]
 8004176:	429a      	cmp	r2, r3
 8004178:	d209      	bcs.n	800418e <u8g2_clip_intersection2+0x66>
    {
      b = d;
 800417a:	187b      	adds	r3, r7, r1
 800417c:	1d3a      	adds	r2, r7, #4
 800417e:	8812      	ldrh	r2, [r2, #0]
 8004180:	801a      	strh	r2, [r3, #0]
      b--;
 8004182:	187b      	adds	r3, r7, r1
 8004184:	881a      	ldrh	r2, [r3, #0]
 8004186:	187b      	adds	r3, r7, r1
 8004188:	3a01      	subs	r2, #1
 800418a:	801a      	strh	r2, [r3, #0]
 800418c:	e004      	b.n	8004198 <u8g2_clip_intersection2+0x70>
    }
    else
    {
      a = c;
 800418e:	2316      	movs	r3, #22
 8004190:	18fb      	adds	r3, r7, r3
 8004192:	1dba      	adds	r2, r7, #6
 8004194:	8812      	ldrh	r2, [r2, #0]
 8004196:	801a      	strh	r2, [r3, #0]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8004198:	2316      	movs	r3, #22
 800419a:	18fa      	adds	r2, r7, r3
 800419c:	1d3b      	adds	r3, r7, #4
 800419e:	8812      	ldrh	r2, [r2, #0]
 80041a0:	881b      	ldrh	r3, [r3, #0]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d301      	bcc.n	80041aa <u8g2_clip_intersection2+0x82>
    return 0;
 80041a6:	2300      	movs	r3, #0
 80041a8:	e030      	b.n	800420c <u8g2_clip_intersection2+0xe4>
  if ( b <= c )
 80041aa:	2314      	movs	r3, #20
 80041ac:	18fa      	adds	r2, r7, r3
 80041ae:	1dbb      	adds	r3, r7, #6
 80041b0:	8812      	ldrh	r2, [r2, #0]
 80041b2:	881b      	ldrh	r3, [r3, #0]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d801      	bhi.n	80041bc <u8g2_clip_intersection2+0x94>
    return 0;
 80041b8:	2300      	movs	r3, #0
 80041ba:	e027      	b.n	800420c <u8g2_clip_intersection2+0xe4>
  if ( a < c )		
 80041bc:	2116      	movs	r1, #22
 80041be:	187a      	adds	r2, r7, r1
 80041c0:	1dbb      	adds	r3, r7, #6
 80041c2:	8812      	ldrh	r2, [r2, #0]
 80041c4:	881b      	ldrh	r3, [r3, #0]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d203      	bcs.n	80041d2 <u8g2_clip_intersection2+0xaa>
    a = c;
 80041ca:	187b      	adds	r3, r7, r1
 80041cc:	1dba      	adds	r2, r7, #6
 80041ce:	8812      	ldrh	r2, [r2, #0]
 80041d0:	801a      	strh	r2, [r3, #0]
  if ( b > d )
 80041d2:	2114      	movs	r1, #20
 80041d4:	187a      	adds	r2, r7, r1
 80041d6:	1d3b      	adds	r3, r7, #4
 80041d8:	8812      	ldrh	r2, [r2, #0]
 80041da:	881b      	ldrh	r3, [r3, #0]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d903      	bls.n	80041e8 <u8g2_clip_intersection2+0xc0>
    b = d;
 80041e0:	187b      	adds	r3, r7, r1
 80041e2:	1d3a      	adds	r2, r7, #4
 80041e4:	8812      	ldrh	r2, [r2, #0]
 80041e6:	801a      	strh	r2, [r3, #0]
  
  *ap = a;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2416      	movs	r4, #22
 80041ec:	193a      	adds	r2, r7, r4
 80041ee:	8812      	ldrh	r2, [r2, #0]
 80041f0:	801a      	strh	r2, [r3, #0]
  b -= a;
 80041f2:	2014      	movs	r0, #20
 80041f4:	183b      	adds	r3, r7, r0
 80041f6:	1839      	adds	r1, r7, r0
 80041f8:	193a      	adds	r2, r7, r4
 80041fa:	8809      	ldrh	r1, [r1, #0]
 80041fc:	8812      	ldrh	r2, [r2, #0]
 80041fe:	1a8a      	subs	r2, r1, r2
 8004200:	801a      	strh	r2, [r3, #0]
  *len = b;
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	183a      	adds	r2, r7, r0
 8004206:	8812      	ldrh	r2, [r2, #0]
 8004208:	801a      	strh	r2, [r3, #0]
  return 1;
 800420a:	2301      	movs	r3, #1
}
 800420c:	0018      	movs	r0, r3
 800420e:	46bd      	mov	sp, r7
 8004210:	b007      	add	sp, #28
 8004212:	bd90      	pop	{r4, r7, pc}

08004214 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8004214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004216:	b087      	sub	sp, #28
 8004218:	af02      	add	r7, sp, #8
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	000c      	movs	r4, r1
 800421e:	0010      	movs	r0, r2
 8004220:	0019      	movs	r1, r3
 8004222:	260a      	movs	r6, #10
 8004224:	19bb      	adds	r3, r7, r6
 8004226:	1c22      	adds	r2, r4, #0
 8004228:	801a      	strh	r2, [r3, #0]
 800422a:	2408      	movs	r4, #8
 800422c:	193b      	adds	r3, r7, r4
 800422e:	1c02      	adds	r2, r0, #0
 8004230:	801a      	strh	r2, [r3, #0]
 8004232:	1dbb      	adds	r3, r7, #6
 8004234:	1c0a      	adds	r2, r1, #0
 8004236:	801a      	strh	r2, [r3, #0]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 800423c:	0020      	movs	r0, r4
 800423e:	183b      	adds	r3, r7, r0
 8004240:	1839      	adds	r1, r7, r0
 8004242:	8809      	ldrh	r1, [r1, #0]
 8004244:	1a8a      	subs	r2, r1, r2
 8004246:	801a      	strh	r2, [r3, #0]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800424c:	1dbb      	adds	r3, r7, #6
 800424e:	881d      	ldrh	r5, [r3, #0]
 8004250:	183b      	adds	r3, r7, r0
 8004252:	881a      	ldrh	r2, [r3, #0]
 8004254:	19bb      	adds	r3, r7, r6
 8004256:	8819      	ldrh	r1, [r3, #0]
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	2320      	movs	r3, #32
 800425c:	2608      	movs	r6, #8
 800425e:	199b      	adds	r3, r3, r6
 8004260:	19db      	adds	r3, r3, r7
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	9300      	str	r3, [sp, #0]
 8004266:	002b      	movs	r3, r5
 8004268:	47a0      	blx	r4
}
 800426a:	46c0      	nop			; (mov r8, r8)
 800426c:	46bd      	mov	sp, r7
 800426e:	b005      	add	sp, #20
 8004270:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004272 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8004272:	b5b0      	push	{r4, r5, r7, lr}
 8004274:	b086      	sub	sp, #24
 8004276:	af02      	add	r7, sp, #8
 8004278:	60f8      	str	r0, [r7, #12]
 800427a:	000c      	movs	r4, r1
 800427c:	0010      	movs	r0, r2
 800427e:	0019      	movs	r1, r3
 8004280:	250a      	movs	r5, #10
 8004282:	197b      	adds	r3, r7, r5
 8004284:	1c22      	adds	r2, r4, #0
 8004286:	801a      	strh	r2, [r3, #0]
 8004288:	2308      	movs	r3, #8
 800428a:	18fb      	adds	r3, r7, r3
 800428c:	1c02      	adds	r2, r0, #0
 800428e:	801a      	strh	r2, [r3, #0]
 8004290:	1dbb      	adds	r3, r7, #6
 8004292:	1c0a      	adds	r2, r1, #0
 8004294:	801a      	strh	r2, [r3, #0]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	228c      	movs	r2, #140	; 0x8c
 800429a:	5c9b      	ldrb	r3, [r3, r2]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d100      	bne.n	80042a2 <u8g2_DrawHVLine+0x30>
 80042a0:	e090      	b.n	80043c4 <u8g2_DrawHVLine+0x152>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 80042a2:	1dbb      	adds	r3, r7, #6
 80042a4:	881b      	ldrh	r3, [r3, #0]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d100      	bne.n	80042ac <u8g2_DrawHVLine+0x3a>
 80042aa:	e08b      	b.n	80043c4 <u8g2_DrawHVLine+0x152>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 80042ac:	1dbb      	adds	r3, r7, #6
 80042ae:	881b      	ldrh	r3, [r3, #0]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d927      	bls.n	8004304 <u8g2_DrawHVLine+0x92>
      {
	if ( dir == 2 )
 80042b4:	2320      	movs	r3, #32
 80042b6:	18fb      	adds	r3, r7, r3
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d10e      	bne.n	80042dc <u8g2_DrawHVLine+0x6a>
	{
	  x -= len;
 80042be:	197b      	adds	r3, r7, r5
 80042c0:	881a      	ldrh	r2, [r3, #0]
 80042c2:	1dbb      	adds	r3, r7, #6
 80042c4:	881b      	ldrh	r3, [r3, #0]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	197b      	adds	r3, r7, r5
 80042cc:	801a      	strh	r2, [r3, #0]
	  x++;
 80042ce:	197b      	adds	r3, r7, r5
 80042d0:	881b      	ldrh	r3, [r3, #0]
 80042d2:	3301      	adds	r3, #1
 80042d4:	b29a      	uxth	r2, r3
 80042d6:	197b      	adds	r3, r7, r5
 80042d8:	801a      	strh	r2, [r3, #0]
 80042da:	e013      	b.n	8004304 <u8g2_DrawHVLine+0x92>
	}
	else if ( dir == 3 )
 80042dc:	2320      	movs	r3, #32
 80042de:	18fb      	adds	r3, r7, r3
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	2b03      	cmp	r3, #3
 80042e4:	d10e      	bne.n	8004304 <u8g2_DrawHVLine+0x92>
	{
	  y -= len;
 80042e6:	2108      	movs	r1, #8
 80042e8:	187b      	adds	r3, r7, r1
 80042ea:	881a      	ldrh	r2, [r3, #0]
 80042ec:	1dbb      	adds	r3, r7, #6
 80042ee:	881b      	ldrh	r3, [r3, #0]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	187b      	adds	r3, r7, r1
 80042f6:	801a      	strh	r2, [r3, #0]
	  y++;
 80042f8:	187b      	adds	r3, r7, r1
 80042fa:	881b      	ldrh	r3, [r3, #0]
 80042fc:	3301      	adds	r3, #1
 80042fe:	b29a      	uxth	r2, r3
 8004300:	187b      	adds	r3, r7, r1
 8004302:	801a      	strh	r2, [r3, #0]
	}
      }
      dir &= 1;  
 8004304:	2020      	movs	r0, #32
 8004306:	183b      	adds	r3, r7, r0
 8004308:	183a      	adds	r2, r7, r0
 800430a:	7812      	ldrb	r2, [r2, #0]
 800430c:	2101      	movs	r1, #1
 800430e:	400a      	ands	r2, r1
 8004310:	701a      	strb	r2, [r3, #0]
      
      /* clip against the user window */
      if ( dir == 0 )
 8004312:	183b      	adds	r3, r7, r0
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d11c      	bne.n	8004354 <u8g2_DrawHVLine+0xe2>
      {
	if ( y < u8g2->user_y0 )
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	224c      	movs	r2, #76	; 0x4c
 800431e:	5a9a      	ldrh	r2, [r3, r2]
 8004320:	2108      	movs	r1, #8
 8004322:	187b      	adds	r3, r7, r1
 8004324:	881b      	ldrh	r3, [r3, #0]
 8004326:	429a      	cmp	r2, r3
 8004328:	d843      	bhi.n	80043b2 <u8g2_DrawHVLine+0x140>
	  return;
	if ( y >= u8g2->user_y1 )
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	224e      	movs	r2, #78	; 0x4e
 800432e:	5a9a      	ldrh	r2, [r3, r2]
 8004330:	187b      	adds	r3, r7, r1
 8004332:	881b      	ldrh	r3, [r3, #0]
 8004334:	429a      	cmp	r2, r3
 8004336:	d93e      	bls.n	80043b6 <u8g2_DrawHVLine+0x144>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2248      	movs	r2, #72	; 0x48
 800433c:	5a9a      	ldrh	r2, [r3, r2]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	214a      	movs	r1, #74	; 0x4a
 8004342:	5a5b      	ldrh	r3, [r3, r1]
 8004344:	1db9      	adds	r1, r7, #6
 8004346:	200a      	movs	r0, #10
 8004348:	1838      	adds	r0, r7, r0
 800434a:	f7ff feed 	bl	8004128 <u8g2_clip_intersection2>
 800434e:	1e03      	subs	r3, r0, #0
 8004350:	d11c      	bne.n	800438c <u8g2_DrawHVLine+0x11a>
	  return;
 8004352:	e037      	b.n	80043c4 <u8g2_DrawHVLine+0x152>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2248      	movs	r2, #72	; 0x48
 8004358:	5a9a      	ldrh	r2, [r3, r2]
 800435a:	210a      	movs	r1, #10
 800435c:	187b      	adds	r3, r7, r1
 800435e:	881b      	ldrh	r3, [r3, #0]
 8004360:	429a      	cmp	r2, r3
 8004362:	d82a      	bhi.n	80043ba <u8g2_DrawHVLine+0x148>
	  return;
	if ( x >= u8g2->user_x1 )
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	224a      	movs	r2, #74	; 0x4a
 8004368:	5a9a      	ldrh	r2, [r3, r2]
 800436a:	187b      	adds	r3, r7, r1
 800436c:	881b      	ldrh	r3, [r3, #0]
 800436e:	429a      	cmp	r2, r3
 8004370:	d925      	bls.n	80043be <u8g2_DrawHVLine+0x14c>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	224c      	movs	r2, #76	; 0x4c
 8004376:	5a9a      	ldrh	r2, [r3, r2]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	214e      	movs	r1, #78	; 0x4e
 800437c:	5a5b      	ldrh	r3, [r3, r1]
 800437e:	1db9      	adds	r1, r7, #6
 8004380:	2008      	movs	r0, #8
 8004382:	1838      	adds	r0, r7, r0
 8004384:	f7ff fed0 	bl	8004128 <u8g2_clip_intersection2>
 8004388:	1e03      	subs	r3, r0, #0
 800438a:	d01a      	beq.n	80043c2 <u8g2_DrawHVLine+0x150>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004390:	689c      	ldr	r4, [r3, #8]
 8004392:	230a      	movs	r3, #10
 8004394:	18fb      	adds	r3, r7, r3
 8004396:	8819      	ldrh	r1, [r3, #0]
 8004398:	2308      	movs	r3, #8
 800439a:	18fb      	adds	r3, r7, r3
 800439c:	881a      	ldrh	r2, [r3, #0]
 800439e:	1dbb      	adds	r3, r7, #6
 80043a0:	881d      	ldrh	r5, [r3, #0]
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	2320      	movs	r3, #32
 80043a6:	18fb      	adds	r3, r7, r3
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	9300      	str	r3, [sp, #0]
 80043ac:	002b      	movs	r3, r5
 80043ae:	47a0      	blx	r4
 80043b0:	e008      	b.n	80043c4 <u8g2_DrawHVLine+0x152>
	  return;
 80043b2:	46c0      	nop			; (mov r8, r8)
 80043b4:	e006      	b.n	80043c4 <u8g2_DrawHVLine+0x152>
	  return;
 80043b6:	46c0      	nop			; (mov r8, r8)
 80043b8:	e004      	b.n	80043c4 <u8g2_DrawHVLine+0x152>
	  return;
 80043ba:	46c0      	nop			; (mov r8, r8)
 80043bc:	e002      	b.n	80043c4 <u8g2_DrawHVLine+0x152>
	  return;
 80043be:	46c0      	nop			; (mov r8, r8)
 80043c0:	e000      	b.n	80043c4 <u8g2_DrawHVLine+0x152>
	  return;
 80043c2:	46c0      	nop			; (mov r8, r8)
    }
}
 80043c4:	46bd      	mov	sp, r7
 80043c6:	b004      	add	sp, #16
 80043c8:	bdb0      	pop	{r4, r5, r7, pc}

080043ca <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 80043ca:	b5b0      	push	{r4, r5, r7, lr}
 80043cc:	b082      	sub	sp, #8
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	0005      	movs	r5, r0
 80043d2:	000c      	movs	r4, r1
 80043d4:	0010      	movs	r0, r2
 80043d6:	0019      	movs	r1, r3
 80043d8:	1dbb      	adds	r3, r7, #6
 80043da:	1c2a      	adds	r2, r5, #0
 80043dc:	801a      	strh	r2, [r3, #0]
 80043de:	1d3b      	adds	r3, r7, #4
 80043e0:	1c22      	adds	r2, r4, #0
 80043e2:	801a      	strh	r2, [r3, #0]
 80043e4:	1cbb      	adds	r3, r7, #2
 80043e6:	1c02      	adds	r2, r0, #0
 80043e8:	801a      	strh	r2, [r3, #0]
 80043ea:	003b      	movs	r3, r7
 80043ec:	1c0a      	adds	r2, r1, #0
 80043ee:	801a      	strh	r2, [r3, #0]
  if ( v0 < a1 )		// v0 <= a1
 80043f0:	1cba      	adds	r2, r7, #2
 80043f2:	1d3b      	adds	r3, r7, #4
 80043f4:	8812      	ldrh	r2, [r2, #0]
 80043f6:	881b      	ldrh	r3, [r3, #0]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d211      	bcs.n	8004420 <u8g2_is_intersection_decision_tree+0x56>
  {
    if ( v1 > a0 )	// v1 >= a0
 80043fc:	003a      	movs	r2, r7
 80043fe:	1dbb      	adds	r3, r7, #6
 8004400:	8812      	ldrh	r2, [r2, #0]
 8004402:	881b      	ldrh	r3, [r3, #0]
 8004404:	429a      	cmp	r2, r3
 8004406:	d901      	bls.n	800440c <u8g2_is_intersection_decision_tree+0x42>
    {
      return 1;
 8004408:	2301      	movs	r3, #1
 800440a:	e01a      	b.n	8004442 <u8g2_is_intersection_decision_tree+0x78>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 800440c:	1cba      	adds	r2, r7, #2
 800440e:	003b      	movs	r3, r7
 8004410:	8812      	ldrh	r2, [r2, #0]
 8004412:	881b      	ldrh	r3, [r3, #0]
 8004414:	429a      	cmp	r2, r3
 8004416:	d901      	bls.n	800441c <u8g2_is_intersection_decision_tree+0x52>
      {
	return 1;
 8004418:	2301      	movs	r3, #1
 800441a:	e012      	b.n	8004442 <u8g2_is_intersection_decision_tree+0x78>
      }
      else
      {
	return 0;
 800441c:	2300      	movs	r3, #0
 800441e:	e010      	b.n	8004442 <u8g2_is_intersection_decision_tree+0x78>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8004420:	003a      	movs	r2, r7
 8004422:	1dbb      	adds	r3, r7, #6
 8004424:	8812      	ldrh	r2, [r2, #0]
 8004426:	881b      	ldrh	r3, [r3, #0]
 8004428:	429a      	cmp	r2, r3
 800442a:	d909      	bls.n	8004440 <u8g2_is_intersection_decision_tree+0x76>
    {
      if ( v0 > v1 )	// v0 > v1
 800442c:	1cba      	adds	r2, r7, #2
 800442e:	003b      	movs	r3, r7
 8004430:	8812      	ldrh	r2, [r2, #0]
 8004432:	881b      	ldrh	r3, [r3, #0]
 8004434:	429a      	cmp	r2, r3
 8004436:	d901      	bls.n	800443c <u8g2_is_intersection_decision_tree+0x72>
      {
	return 1;
 8004438:	2301      	movs	r3, #1
 800443a:	e002      	b.n	8004442 <u8g2_is_intersection_decision_tree+0x78>
      }
      else
      {
	return 0;
 800443c:	2300      	movs	r3, #0
 800443e:	e000      	b.n	8004442 <u8g2_is_intersection_decision_tree+0x78>
      }
    }
    else
    {
      return 0;
 8004440:	2300      	movs	r3, #0
    }
  }
}
 8004442:	0018      	movs	r0, r3
 8004444:	46bd      	mov	sp, r7
 8004446:	b002      	add	sp, #8
 8004448:	bdb0      	pop	{r4, r5, r7, pc}

0800444a <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 800444a:	b5b0      	push	{r4, r5, r7, lr}
 800444c:	b084      	sub	sp, #16
 800444e:	af00      	add	r7, sp, #0
 8004450:	60f8      	str	r0, [r7, #12]
 8004452:	000c      	movs	r4, r1
 8004454:	0010      	movs	r0, r2
 8004456:	0019      	movs	r1, r3
 8004458:	230a      	movs	r3, #10
 800445a:	18fb      	adds	r3, r7, r3
 800445c:	1c22      	adds	r2, r4, #0
 800445e:	801a      	strh	r2, [r3, #0]
 8004460:	2508      	movs	r5, #8
 8004462:	197b      	adds	r3, r7, r5
 8004464:	1c02      	adds	r2, r0, #0
 8004466:	801a      	strh	r2, [r3, #0]
 8004468:	1dbb      	adds	r3, r7, #6
 800446a:	1c0a      	adds	r2, r1, #0
 800446c:	801a      	strh	r2, [r3, #0]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	224c      	movs	r2, #76	; 0x4c
 8004472:	5a98      	ldrh	r0, [r3, r2]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	224e      	movs	r2, #78	; 0x4e
 8004478:	5a99      	ldrh	r1, [r3, r2]
 800447a:	2320      	movs	r3, #32
 800447c:	18fb      	adds	r3, r7, r3
 800447e:	881c      	ldrh	r4, [r3, #0]
 8004480:	197b      	adds	r3, r7, r5
 8004482:	881a      	ldrh	r2, [r3, #0]
 8004484:	0023      	movs	r3, r4
 8004486:	f7ff ffa0 	bl	80043ca <u8g2_is_intersection_decision_tree>
 800448a:	1e03      	subs	r3, r0, #0
 800448c:	d101      	bne.n	8004492 <u8g2_IsIntersection+0x48>
    return 0; 
 800448e:	2300      	movs	r3, #0
 8004490:	e00e      	b.n	80044b0 <u8g2_IsIntersection+0x66>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2248      	movs	r2, #72	; 0x48
 8004496:	5a98      	ldrh	r0, [r3, r2]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	224a      	movs	r2, #74	; 0x4a
 800449c:	5a99      	ldrh	r1, [r3, r2]
 800449e:	1dbb      	adds	r3, r7, #6
 80044a0:	881c      	ldrh	r4, [r3, #0]
 80044a2:	230a      	movs	r3, #10
 80044a4:	18fb      	adds	r3, r7, r3
 80044a6:	881a      	ldrh	r2, [r3, #0]
 80044a8:	0023      	movs	r3, r4
 80044aa:	f7ff ff8e 	bl	80043ca <u8g2_is_intersection_decision_tree>
 80044ae:	0003      	movs	r3, r0
}
 80044b0:	0018      	movs	r0, r3
 80044b2:	46bd      	mov	sp, r7
 80044b4:	b004      	add	sp, #16
 80044b6:	bdb0      	pop	{r4, r5, r7, pc}

080044b8 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80044b8:	b590      	push	{r4, r7, lr}
 80044ba:	b089      	sub	sp, #36	; 0x24
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	000c      	movs	r4, r1
 80044c2:	0010      	movs	r0, r2
 80044c4:	0019      	movs	r1, r3
 80044c6:	230a      	movs	r3, #10
 80044c8:	18fb      	adds	r3, r7, r3
 80044ca:	1c22      	adds	r2, r4, #0
 80044cc:	801a      	strh	r2, [r3, #0]
 80044ce:	2408      	movs	r4, #8
 80044d0:	193b      	adds	r3, r7, r4
 80044d2:	1c02      	adds	r2, r0, #0
 80044d4:	801a      	strh	r2, [r3, #0]
 80044d6:	1dbb      	adds	r3, r7, #6
 80044d8:	1c0a      	adds	r2, r1, #0
 80044da:	801a      	strh	r2, [r3, #0]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 80044dc:	201b      	movs	r0, #27
 80044de:	183b      	adds	r3, r7, r0
 80044e0:	193a      	adds	r2, r7, r4
 80044e2:	8812      	ldrh	r2, [r2, #0]
 80044e4:	701a      	strb	r2, [r3, #0]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 80044e6:	183b      	adds	r3, r7, r0
 80044e8:	183a      	adds	r2, r7, r0
 80044ea:	7812      	ldrb	r2, [r2, #0]
 80044ec:	2107      	movs	r1, #7
 80044ee:	400a      	ands	r2, r1
 80044f0:	701a      	strb	r2, [r3, #0]
  mask = 1;
 80044f2:	2118      	movs	r1, #24
 80044f4:	187b      	adds	r3, r7, r1
 80044f6:	2201      	movs	r2, #1
 80044f8:	701a      	strb	r2, [r3, #0]
  mask <<= bit_pos;
 80044fa:	187b      	adds	r3, r7, r1
 80044fc:	781a      	ldrb	r2, [r3, #0]
 80044fe:	183b      	adds	r3, r7, r0
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	409a      	lsls	r2, r3
 8004504:	187b      	adds	r3, r7, r1
 8004506:	701a      	strb	r2, [r3, #0]

  or_mask = 0;
 8004508:	201a      	movs	r0, #26
 800450a:	183b      	adds	r3, r7, r0
 800450c:	2200      	movs	r2, #0
 800450e:	701a      	strb	r2, [r3, #0]
  xor_mask = 0;
 8004510:	2319      	movs	r3, #25
 8004512:	18fb      	adds	r3, r7, r3
 8004514:	2200      	movs	r2, #0
 8004516:	701a      	strb	r2, [r3, #0]
  if ( u8g2->draw_color <= 1 )
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2292      	movs	r2, #146	; 0x92
 800451c:	5c9b      	ldrb	r3, [r3, r2]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d803      	bhi.n	800452a <u8g2_ll_hvline_vertical_top_lsb+0x72>
    or_mask  = mask;
 8004522:	183b      	adds	r3, r7, r0
 8004524:	187a      	adds	r2, r7, r1
 8004526:	7812      	ldrb	r2, [r2, #0]
 8004528:	701a      	strb	r2, [r3, #0]
  if ( u8g2->draw_color != 1 )
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2292      	movs	r2, #146	; 0x92
 800452e:	5c9b      	ldrb	r3, [r3, r2]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d005      	beq.n	8004540 <u8g2_ll_hvline_vertical_top_lsb+0x88>
    xor_mask = mask;
 8004534:	2319      	movs	r3, #25
 8004536:	18fb      	adds	r3, r7, r3
 8004538:	2218      	movs	r2, #24
 800453a:	18ba      	adds	r2, r7, r2
 800453c:	7812      	ldrb	r2, [r2, #0]
 800453e:	701a      	strb	r2, [r3, #0]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8004540:	2016      	movs	r0, #22
 8004542:	183b      	adds	r3, r7, r0
 8004544:	2208      	movs	r2, #8
 8004546:	18ba      	adds	r2, r7, r2
 8004548:	8812      	ldrh	r2, [r2, #0]
 800454a:	801a      	strh	r2, [r3, #0]
  offset &= ~7;
 800454c:	183b      	adds	r3, r7, r0
 800454e:	183a      	adds	r2, r7, r0
 8004550:	8812      	ldrh	r2, [r2, #0]
 8004552:	2107      	movs	r1, #7
 8004554:	438a      	bics	r2, r1
 8004556:	801a      	strh	r2, [r3, #0]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	7c1b      	ldrb	r3, [r3, #16]
 800455e:	b29a      	uxth	r2, r3
 8004560:	183b      	adds	r3, r7, r0
 8004562:	1839      	adds	r1, r7, r0
 8004564:	8809      	ldrh	r1, [r1, #0]
 8004566:	434a      	muls	r2, r1
 8004568:	801a      	strh	r2, [r3, #0]
  ptr = u8g2->tile_buf_ptr;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800456e:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8004570:	183b      	adds	r3, r7, r0
 8004572:	881b      	ldrh	r3, [r3, #0]
 8004574:	69fa      	ldr	r2, [r7, #28]
 8004576:	18d3      	adds	r3, r2, r3
 8004578:	61fb      	str	r3, [r7, #28]
  ptr += x;
 800457a:	230a      	movs	r3, #10
 800457c:	18fb      	adds	r3, r7, r3
 800457e:	881b      	ldrh	r3, [r3, #0]
 8004580:	69fa      	ldr	r2, [r7, #28]
 8004582:	18d3      	adds	r3, r2, r3
 8004584:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8004586:	2330      	movs	r3, #48	; 0x30
 8004588:	18fb      	adds	r3, r7, r3
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d11e      	bne.n	80045ce <u8g2_ll_hvline_vertical_top_lsb+0x116>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	781a      	ldrb	r2, [r3, #0]
 8004594:	231a      	movs	r3, #26
 8004596:	18fb      	adds	r3, r7, r3
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	4313      	orrs	r3, r2
 800459c:	b2da      	uxtb	r2, r3
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	781a      	ldrb	r2, [r3, #0]
 80045a6:	2319      	movs	r3, #25
 80045a8:	18fb      	adds	r3, r7, r3
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	4053      	eors	r3, r2
 80045ae:	b2da      	uxtb	r2, r3
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	701a      	strb	r2, [r3, #0]
	ptr++;
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	3301      	adds	r3, #1
 80045b8:	61fb      	str	r3, [r7, #28]
	len--;
 80045ba:	1dbb      	adds	r3, r7, #6
 80045bc:	881a      	ldrh	r2, [r3, #0]
 80045be:	1dbb      	adds	r3, r7, #6
 80045c0:	3a01      	subs	r2, #1
 80045c2:	801a      	strh	r2, [r3, #0]
      } while( len != 0 );
 80045c4:	1dbb      	adds	r3, r7, #6
 80045c6:	881b      	ldrh	r3, [r3, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1e1      	bne.n	8004590 <u8g2_ll_hvline_vertical_top_lsb+0xd8>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 80045cc:	e04e      	b.n	800466c <u8g2_ll_hvline_vertical_top_lsb+0x1b4>
      *ptr |= or_mask;
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	781a      	ldrb	r2, [r3, #0]
 80045d2:	241a      	movs	r4, #26
 80045d4:	193b      	adds	r3, r7, r4
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	4313      	orrs	r3, r2
 80045da:	b2da      	uxtb	r2, r3
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	781a      	ldrb	r2, [r3, #0]
 80045e4:	2319      	movs	r3, #25
 80045e6:	18fb      	adds	r3, r7, r3
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	4053      	eors	r3, r2
 80045ec:	b2da      	uxtb	r2, r3
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 80045f2:	201b      	movs	r0, #27
 80045f4:	183b      	adds	r3, r7, r0
 80045f6:	781a      	ldrb	r2, [r3, #0]
 80045f8:	183b      	adds	r3, r7, r0
 80045fa:	3201      	adds	r2, #1
 80045fc:	701a      	strb	r2, [r3, #0]
      bit_pos &= 7;
 80045fe:	183b      	adds	r3, r7, r0
 8004600:	183a      	adds	r2, r7, r0
 8004602:	7812      	ldrb	r2, [r2, #0]
 8004604:	2107      	movs	r1, #7
 8004606:	400a      	ands	r2, r1
 8004608:	701a      	strb	r2, [r3, #0]
      len--;
 800460a:	1dbb      	adds	r3, r7, #6
 800460c:	881a      	ldrh	r2, [r3, #0]
 800460e:	1dbb      	adds	r3, r7, #6
 8004610:	3a01      	subs	r2, #1
 8004612:	801a      	strh	r2, [r3, #0]
      if ( bit_pos == 0 )
 8004614:	183b      	adds	r3, r7, r0
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d117      	bne.n	800464c <u8g2_ll_hvline_vertical_top_lsb+0x194>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004620:	001a      	movs	r2, r3
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	189b      	adds	r3, r3, r2
 8004626:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2292      	movs	r2, #146	; 0x92
 800462c:	5c9b      	ldrb	r3, [r3, r2]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d802      	bhi.n	8004638 <u8g2_ll_hvline_vertical_top_lsb+0x180>
	  or_mask  = 1;
 8004632:	193b      	adds	r3, r7, r4
 8004634:	2201      	movs	r2, #1
 8004636:	701a      	strb	r2, [r3, #0]
	if ( u8g2->draw_color != 1 )
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2292      	movs	r2, #146	; 0x92
 800463c:	5c9b      	ldrb	r3, [r3, r2]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d010      	beq.n	8004664 <u8g2_ll_hvline_vertical_top_lsb+0x1ac>
	  xor_mask = 1;
 8004642:	2319      	movs	r3, #25
 8004644:	18fb      	adds	r3, r7, r3
 8004646:	2201      	movs	r2, #1
 8004648:	701a      	strb	r2, [r3, #0]
 800464a:	e00b      	b.n	8004664 <u8g2_ll_hvline_vertical_top_lsb+0x1ac>
	or_mask <<= 1;
 800464c:	231a      	movs	r3, #26
 800464e:	18fa      	adds	r2, r7, r3
 8004650:	18fb      	adds	r3, r7, r3
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	18db      	adds	r3, r3, r3
 8004656:	7013      	strb	r3, [r2, #0]
	xor_mask <<= 1;
 8004658:	2319      	movs	r3, #25
 800465a:	18fa      	adds	r2, r7, r3
 800465c:	18fb      	adds	r3, r7, r3
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	18db      	adds	r3, r3, r3
 8004662:	7013      	strb	r3, [r2, #0]
    } while( len != 0 );
 8004664:	1dbb      	adds	r3, r7, #6
 8004666:	881b      	ldrh	r3, [r3, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1b0      	bne.n	80045ce <u8g2_ll_hvline_vertical_top_lsb+0x116>
}
 800466c:	46c0      	nop			; (mov r8, r8)
 800466e:	46bd      	mov	sp, r7
 8004670:	b009      	add	sp, #36	; 0x24
 8004672:	bd90      	pop	{r4, r7, pc}

08004674 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2250      	movs	r2, #80	; 0x50
 8004680:	2100      	movs	r1, #0
 8004682:	5299      	strh	r1, [r3, r2]
  u8g2->clip_y0 = 0;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2254      	movs	r2, #84	; 0x54
 8004688:	2100      	movs	r1, #0
 800468a:	5299      	strh	r1, [r3, r2]
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2252      	movs	r2, #82	; 0x52
 8004690:	2101      	movs	r1, #1
 8004692:	4249      	negs	r1, r1
 8004694:	5299      	strh	r1, [r3, r2]
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2256      	movs	r2, #86	; 0x56
 800469a:	2101      	movs	r1, #1
 800469c:	4249      	negs	r1, r1
 800469e:	5299      	strh	r1, [r3, r2]
  
  u8g2->cb->update_page_win(u8g2);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	0010      	movs	r0, r2
 80046aa:	4798      	blx	r3
}
 80046ac:	46c0      	nop			; (mov r8, r8)
 80046ae:	46bd      	mov	sp, r7
 80046b0:	b002      	add	sp, #8
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	603b      	str	r3, [r7, #0]
 80046c0:	1dfb      	adds	r3, r7, #7
 80046c2:	701a      	strb	r2, [r3, #0]
  u8g2->font = NULL;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	683a      	ldr	r2, [r7, #0]
 80046ce:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	68ba      	ldr	r2, [r7, #8]
 80046d4:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	1dfa      	adds	r2, r7, #7
 80046da:	2138      	movs	r1, #56	; 0x38
 80046dc:	7812      	ldrb	r2, [r2, #0]
 80046de:	545a      	strb	r2, [r3, r1]
  
  u8g2->tile_curr_row = 0;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2239      	movs	r2, #57	; 0x39
 80046e4:	2100      	movs	r1, #0
 80046e6:	5499      	strb	r1, [r3, r2]
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	226d      	movs	r2, #109	; 0x6d
 80046ec:	2100      	movs	r1, #0
 80046ee:	5499      	strb	r1, [r3, r2]
  u8g2->bitmap_transparency = 0;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2291      	movs	r2, #145	; 0x91
 80046f4:	2100      	movs	r1, #0
 80046f6:	5499      	strb	r1, [r3, r2]
  
  u8g2->draw_color = 1;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2292      	movs	r2, #146	; 0x92
 80046fc:	2101      	movs	r1, #1
 80046fe:	5499      	strb	r1, [r3, r2]
  u8g2->is_auto_page_clear = 1;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2293      	movs	r2, #147	; 0x93
 8004704:	2101      	movs	r1, #1
 8004706:	5499      	strb	r1, [r3, r2]
  
  u8g2->cb = u8g2_cb;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	69ba      	ldr	r2, [r7, #24]
 800470c:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	0010      	movs	r0, r2
 8004718:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	0018      	movs	r0, r3
 800471e:	f7ff ffa9 	bl	8004674 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	0018      	movs	r0, r3
 8004726:	f7ff fcf1 	bl	800410c <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2270      	movs	r2, #112	; 0x70
 800472e:	2100      	movs	r1, #0
 8004730:	5499      	strb	r1, [r3, r2]
#endif
}
 8004732:	46c0      	nop			; (mov r8, r8)
 8004734:	46bd      	mov	sp, r7
 8004736:	b004      	add	sp, #16
 8004738:	bd80      	pop	{r7, pc}

0800473a <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 800473a:	b580      	push	{r7, lr}
 800473c:	b084      	sub	sp, #16
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2238      	movs	r2, #56	; 0x38
 800474c:	5c9a      	ldrb	r2, [r3, r2]
 800474e:	210e      	movs	r1, #14
 8004750:	187b      	adds	r3, r7, r1
 8004752:	801a      	strh	r2, [r3, #0]
  t *= 8;
 8004754:	187b      	adds	r3, r7, r1
 8004756:	187a      	adds	r2, r7, r1
 8004758:	8812      	ldrh	r2, [r2, #0]
 800475a:	00d2      	lsls	r2, r2, #3
 800475c:	801a      	strh	r2, [r3, #0]
  u8g2->pixel_buf_height = t;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	187a      	adds	r2, r7, r1
 8004762:	8812      	ldrh	r2, [r2, #0]
 8004764:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	7c1a      	ldrb	r2, [r3, #16]
 800476a:	187b      	adds	r3, r7, r1
 800476c:	801a      	strh	r2, [r3, #0]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 800476e:	187b      	adds	r3, r7, r1
 8004770:	187a      	adds	r2, r7, r1
 8004772:	8812      	ldrh	r2, [r2, #0]
 8004774:	00d2      	lsls	r2, r2, #3
 8004776:	801a      	strh	r2, [r3, #0]
  u8g2->pixel_buf_width = t;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	187a      	adds	r2, r7, r1
 800477c:	8812      	ldrh	r2, [r2, #0]
 800477e:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2239      	movs	r2, #57	; 0x39
 8004784:	5c9a      	ldrb	r2, [r3, r2]
 8004786:	187b      	adds	r3, r7, r1
 8004788:	801a      	strh	r2, [r3, #0]
  t *= 8;
 800478a:	187b      	adds	r3, r7, r1
 800478c:	0008      	movs	r0, r1
 800478e:	187a      	adds	r2, r7, r1
 8004790:	8812      	ldrh	r2, [r2, #0]
 8004792:	00d2      	lsls	r2, r2, #3
 8004794:	801a      	strh	r2, [r3, #0]
  u8g2->pixel_curr_row = t;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	183a      	adds	r2, r7, r0
 800479a:	8812      	ldrh	r2, [r2, #0]
 800479c:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2238      	movs	r2, #56	; 0x38
 80047a2:	5c9a      	ldrb	r2, [r3, r2]
 80047a4:	183b      	adds	r3, r7, r0
 80047a6:	801a      	strh	r2, [r3, #0]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 80047a8:	183b      	adds	r3, r7, r0
 80047aa:	881b      	ldrh	r3, [r3, #0]
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	2139      	movs	r1, #57	; 0x39
 80047b0:	5c52      	ldrb	r2, [r2, r1]
 80047b2:	189b      	adds	r3, r3, r2
 80047b4:	68ba      	ldr	r2, [r7, #8]
 80047b6:	7c52      	ldrb	r2, [r2, #17]
 80047b8:	4293      	cmp	r3, r2
 80047ba:	dd09      	ble.n	80047d0 <u8g2_update_dimension_common+0x96>
    t = display_info->tile_height - u8g2->tile_curr_row;
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	7c5b      	ldrb	r3, [r3, #17]
 80047c0:	b299      	uxth	r1, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2239      	movs	r2, #57	; 0x39
 80047c6:	5c9b      	ldrb	r3, [r3, r2]
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	183b      	adds	r3, r7, r0
 80047cc:	1a8a      	subs	r2, r1, r2
 80047ce:	801a      	strh	r2, [r3, #0]
  t *= 8;
 80047d0:	200e      	movs	r0, #14
 80047d2:	183b      	adds	r3, r7, r0
 80047d4:	183a      	adds	r2, r7, r0
 80047d6:	8812      	ldrh	r2, [r2, #0]
 80047d8:	00d2      	lsls	r2, r2, #3
 80047da:	801a      	strh	r2, [r3, #0]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2240      	movs	r2, #64	; 0x40
 80047e4:	5299      	strh	r1, [r3, r2]
  u8g2->buf_y1 = u8g2->buf_y0;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2240      	movs	r2, #64	; 0x40
 80047ea:	5a99      	ldrh	r1, [r3, r2]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2242      	movs	r2, #66	; 0x42
 80047f0:	5299      	strh	r1, [r3, r2]
  u8g2->buf_y1 += t;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2242      	movs	r2, #66	; 0x42
 80047f6:	5a9a      	ldrh	r2, [r3, r2]
 80047f8:	183b      	adds	r3, r7, r0
 80047fa:	881b      	ldrh	r3, [r3, #0]
 80047fc:	18d3      	adds	r3, r2, r3
 80047fe:	b299      	uxth	r1, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2242      	movs	r2, #66	; 0x42
 8004804:	5299      	strh	r1, [r3, r2]

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	8a99      	ldrh	r1, [r3, #20]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2244      	movs	r2, #68	; 0x44
 800480e:	5299      	strh	r1, [r3, r2]
  u8g2->height = display_info->pixel_height;
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	8ad9      	ldrh	r1, [r3, #22]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2246      	movs	r2, #70	; 0x46
 8004818:	5299      	strh	r1, [r3, r2]
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 800481a:	46c0      	nop			; (mov r8, r8)
 800481c:	46bd      	mov	sp, r7
 800481e:	b004      	add	sp, #16
 8004820:	bd80      	pop	{r7, pc}

08004822 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8004822:	b590      	push	{r4, r7, lr}
 8004824:	b085      	sub	sp, #20
 8004826:	af02      	add	r7, sp, #8
 8004828:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2250      	movs	r2, #80	; 0x50
 800482e:	5a99      	ldrh	r1, [r3, r2]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2254      	movs	r2, #84	; 0x54
 8004834:	5a9a      	ldrh	r2, [r3, r2]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2052      	movs	r0, #82	; 0x52
 800483a:	5a1c      	ldrh	r4, [r3, r0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2056      	movs	r0, #86	; 0x56
 8004840:	5a1b      	ldrh	r3, [r3, r0]
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	9300      	str	r3, [sp, #0]
 8004846:	0023      	movs	r3, r4
 8004848:	f7ff fdff 	bl	800444a <u8g2_IsIntersection>
 800484c:	1e03      	subs	r3, r0, #0
 800484e:	d104      	bne.n	800485a <u8g2_apply_clip_window+0x38>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	228c      	movs	r2, #140	; 0x8c
 8004854:	2100      	movs	r1, #0
 8004856:	5499      	strb	r1, [r3, r2]
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8004858:	e03b      	b.n	80048d2 <u8g2_apply_clip_window+0xb0>
    u8g2->is_page_clip_window_intersection = 1;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	228c      	movs	r2, #140	; 0x8c
 800485e:	2101      	movs	r1, #1
 8004860:	5499      	strb	r1, [r3, r2]
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2248      	movs	r2, #72	; 0x48
 8004866:	5a9a      	ldrh	r2, [r3, r2]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2150      	movs	r1, #80	; 0x50
 800486c:	5a5b      	ldrh	r3, [r3, r1]
 800486e:	429a      	cmp	r2, r3
 8004870:	d205      	bcs.n	800487e <u8g2_apply_clip_window+0x5c>
      u8g2->user_x0 = u8g2->clip_x0;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2250      	movs	r2, #80	; 0x50
 8004876:	5a99      	ldrh	r1, [r3, r2]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2248      	movs	r2, #72	; 0x48
 800487c:	5299      	strh	r1, [r3, r2]
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	224a      	movs	r2, #74	; 0x4a
 8004882:	5a9a      	ldrh	r2, [r3, r2]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2152      	movs	r1, #82	; 0x52
 8004888:	5a5b      	ldrh	r3, [r3, r1]
 800488a:	429a      	cmp	r2, r3
 800488c:	d905      	bls.n	800489a <u8g2_apply_clip_window+0x78>
      u8g2->user_x1 = u8g2->clip_x1;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2252      	movs	r2, #82	; 0x52
 8004892:	5a99      	ldrh	r1, [r3, r2]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	224a      	movs	r2, #74	; 0x4a
 8004898:	5299      	strh	r1, [r3, r2]
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	224c      	movs	r2, #76	; 0x4c
 800489e:	5a9a      	ldrh	r2, [r3, r2]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2154      	movs	r1, #84	; 0x54
 80048a4:	5a5b      	ldrh	r3, [r3, r1]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d205      	bcs.n	80048b6 <u8g2_apply_clip_window+0x94>
      u8g2->user_y0 = u8g2->clip_y0;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2254      	movs	r2, #84	; 0x54
 80048ae:	5a99      	ldrh	r1, [r3, r2]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	224c      	movs	r2, #76	; 0x4c
 80048b4:	5299      	strh	r1, [r3, r2]
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	224e      	movs	r2, #78	; 0x4e
 80048ba:	5a9a      	ldrh	r2, [r3, r2]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2156      	movs	r1, #86	; 0x56
 80048c0:	5a5b      	ldrh	r3, [r3, r1]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d905      	bls.n	80048d2 <u8g2_apply_clip_window+0xb0>
      u8g2->user_y1 = u8g2->clip_y1;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2256      	movs	r2, #86	; 0x56
 80048ca:	5a99      	ldrh	r1, [r3, r2]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	224e      	movs	r2, #78	; 0x4e
 80048d0:	5299      	strh	r1, [r3, r2]
}
 80048d2:	46c0      	nop			; (mov r8, r8)
 80048d4:	46bd      	mov	sp, r7
 80048d6:	b003      	add	sp, #12
 80048d8:	bd90      	pop	{r4, r7, pc}

080048da <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 80048da:	b580      	push	{r7, lr}
 80048dc:	b082      	sub	sp, #8
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	0018      	movs	r0, r3
 80048e6:	f7ff ff28 	bl	800473a <u8g2_update_dimension_common>
}
 80048ea:	46c0      	nop			; (mov r8, r8)
 80048ec:	46bd      	mov	sp, r7
 80048ee:	b002      	add	sp, #8
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b082      	sub	sp, #8
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2248      	movs	r2, #72	; 0x48
 80048fe:	2100      	movs	r1, #0
 8004900:	5299      	strh	r1, [r3, r2]
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2244      	movs	r2, #68	; 0x44
 8004906:	5a99      	ldrh	r1, [r3, r2]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	224a      	movs	r2, #74	; 0x4a
 800490c:	5299      	strh	r1, [r3, r2]
  
  u8g2->user_y0 = u8g2->buf_y0;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2240      	movs	r2, #64	; 0x40
 8004912:	5a99      	ldrh	r1, [r3, r2]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	224c      	movs	r2, #76	; 0x4c
 8004918:	5299      	strh	r1, [r3, r2]
  u8g2->user_y1 = u8g2->buf_y1;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2242      	movs	r2, #66	; 0x42
 800491e:	5a99      	ldrh	r1, [r3, r2]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	224e      	movs	r2, #78	; 0x4e
 8004924:	5299      	strh	r1, [r3, r2]
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	0018      	movs	r0, r3
 800492a:	f7ff ff7a 	bl	8004822 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 800492e:	46c0      	nop			; (mov r8, r8)
 8004930:	46bd      	mov	sp, r7
 8004932:	b002      	add	sp, #8
 8004934:	bd80      	pop	{r7, pc}

08004936 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8004936:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004938:	b087      	sub	sp, #28
 800493a:	af02      	add	r7, sp, #8
 800493c:	60f8      	str	r0, [r7, #12]
 800493e:	000c      	movs	r4, r1
 8004940:	0010      	movs	r0, r2
 8004942:	0019      	movs	r1, r3
 8004944:	250a      	movs	r5, #10
 8004946:	197b      	adds	r3, r7, r5
 8004948:	1c22      	adds	r2, r4, #0
 800494a:	801a      	strh	r2, [r3, #0]
 800494c:	2608      	movs	r6, #8
 800494e:	19bb      	adds	r3, r7, r6
 8004950:	1c02      	adds	r2, r0, #0
 8004952:	801a      	strh	r2, [r3, #0]
 8004954:	1dbb      	adds	r3, r7, #6
 8004956:	1c0a      	adds	r2, r1, #0
 8004958:	801a      	strh	r2, [r3, #0]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 800495a:	1dbb      	adds	r3, r7, #6
 800495c:	881c      	ldrh	r4, [r3, #0]
 800495e:	19bb      	adds	r3, r7, r6
 8004960:	881a      	ldrh	r2, [r3, #0]
 8004962:	197b      	adds	r3, r7, r5
 8004964:	8819      	ldrh	r1, [r3, #0]
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	2320      	movs	r3, #32
 800496a:	2508      	movs	r5, #8
 800496c:	195b      	adds	r3, r3, r5
 800496e:	19db      	adds	r3, r3, r7
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	9300      	str	r3, [sp, #0]
 8004974:	0023      	movs	r3, r4
 8004976:	f7ff fc4d 	bl	8004214 <u8g2_draw_hv_line_2dir>
}
 800497a:	46c0      	nop			; (mov r8, r8)
 800497c:	46bd      	mov	sp, r7
 800497e:	b005      	add	sp, #20
 8004980:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004982 <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8004982:	b590      	push	{r4, r7, lr}
 8004984:	b085      	sub	sp, #20
 8004986:	af00      	add	r7, sp, #0
 8004988:	60f8      	str	r0, [r7, #12]
 800498a:	607a      	str	r2, [r7, #4]
 800498c:	200b      	movs	r0, #11
 800498e:	183b      	adds	r3, r7, r0
 8004990:	1c0a      	adds	r2, r1, #0
 8004992:	701a      	strb	r2, [r3, #0]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	691c      	ldr	r4, [r3, #16]
 8004998:	6879      	ldr	r1, [r7, #4]
 800499a:	183b      	adds	r3, r7, r0
 800499c:	781a      	ldrb	r2, [r3, #0]
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	000b      	movs	r3, r1
 80049a2:	2117      	movs	r1, #23
 80049a4:	47a0      	blx	r4
 80049a6:	0003      	movs	r3, r0
}
 80049a8:	0018      	movs	r0, r3
 80049aa:	46bd      	mov	sp, r7
 80049ac:	b005      	add	sp, #20
 80049ae:	bd90      	pop	{r4, r7, pc}

080049b0 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	000a      	movs	r2, r1
 80049ba:	1cfb      	adds	r3, r7, #3
 80049bc:	701a      	strb	r2, [r3, #0]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 80049be:	1cfa      	adds	r2, r7, #3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2101      	movs	r1, #1
 80049c4:	0018      	movs	r0, r3
 80049c6:	f7ff ffdc 	bl	8004982 <u8x8_byte_SendBytes>
 80049ca:	0003      	movs	r3, r0
}
 80049cc:	0018      	movs	r0, r3
 80049ce:	46bd      	mov	sp, r7
 80049d0:	b002      	add	sp, #8
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 80049d4:	b590      	push	{r4, r7, lr}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	691c      	ldr	r4, [r3, #16]
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	2300      	movs	r3, #0
 80049e4:	2200      	movs	r2, #0
 80049e6:	2118      	movs	r1, #24
 80049e8:	47a0      	blx	r4
 80049ea:	0003      	movs	r3, r0
}
 80049ec:	0018      	movs	r0, r3
 80049ee:	46bd      	mov	sp, r7
 80049f0:	b003      	add	sp, #12
 80049f2:	bd90      	pop	{r4, r7, pc}

080049f4 <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 80049f4:	b590      	push	{r4, r7, lr}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	691c      	ldr	r4, [r3, #16]
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	2300      	movs	r3, #0
 8004a04:	2200      	movs	r2, #0
 8004a06:	2119      	movs	r1, #25
 8004a08:	47a0      	blx	r4
 8004a0a:	0003      	movs	r3, r0
}
 8004a0c:	0018      	movs	r0, r3
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	b003      	add	sp, #12
 8004a12:	bd90      	pop	{r4, r7, pc}

08004a14 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8004a14:	b590      	push	{r4, r7, lr}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	000a      	movs	r2, r1
 8004a1e:	1cfb      	adds	r3, r7, #3
 8004a20:	701a      	strb	r2, [r3, #0]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	68dc      	ldr	r4, [r3, #12]
 8004a26:	1cfb      	adds	r3, r7, #3
 8004a28:	781a      	ldrb	r2, [r3, #0]
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	2115      	movs	r1, #21
 8004a30:	47a0      	blx	r4
 8004a32:	0003      	movs	r3, r0
}
 8004a34:	0018      	movs	r0, r3
 8004a36:	46bd      	mov	sp, r7
 8004a38:	b003      	add	sp, #12
 8004a3a:	bd90      	pop	{r4, r7, pc}

08004a3c <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8004a3c:	b590      	push	{r4, r7, lr}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	000a      	movs	r2, r1
 8004a46:	1cfb      	adds	r3, r7, #3
 8004a48:	701a      	strb	r2, [r3, #0]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	68dc      	ldr	r4, [r3, #12]
 8004a4e:	1cfb      	adds	r3, r7, #3
 8004a50:	781a      	ldrb	r2, [r3, #0]
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	2300      	movs	r3, #0
 8004a56:	2116      	movs	r1, #22
 8004a58:	47a0      	blx	r4
 8004a5a:	0003      	movs	r3, r0
}
 8004a5c:	0018      	movs	r0, r3
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	b003      	add	sp, #12
 8004a62:	bd90      	pop	{r4, r7, pc}

08004a64 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8004a64:	b590      	push	{r4, r7, lr}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	607a      	str	r2, [r7, #4]
 8004a6e:	200b      	movs	r0, #11
 8004a70:	183b      	adds	r3, r7, r0
 8004a72:	1c0a      	adds	r2, r1, #0
 8004a74:	701a      	strb	r2, [r3, #0]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	68dc      	ldr	r4, [r3, #12]
 8004a7a:	6879      	ldr	r1, [r7, #4]
 8004a7c:	183b      	adds	r3, r7, r0
 8004a7e:	781a      	ldrb	r2, [r3, #0]
 8004a80:	68f8      	ldr	r0, [r7, #12]
 8004a82:	000b      	movs	r3, r1
 8004a84:	2117      	movs	r1, #23
 8004a86:	47a0      	blx	r4
 8004a88:	0003      	movs	r3, r0
}
 8004a8a:	0018      	movs	r0, r3
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	b005      	add	sp, #20
 8004a90:	bd90      	pop	{r4, r7, pc}

08004a92 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8004a92:	b590      	push	{r4, r7, lr}
 8004a94:	b083      	sub	sp, #12
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	68dc      	ldr	r4, [r3, #12]
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	2118      	movs	r1, #24
 8004aa6:	47a0      	blx	r4
 8004aa8:	0003      	movs	r3, r0
}
 8004aaa:	0018      	movs	r0, r3
 8004aac:	46bd      	mov	sp, r7
 8004aae:	b003      	add	sp, #12
 8004ab0:	bd90      	pop	{r4, r7, pc}

08004ab2 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8004ab2:	b590      	push	{r4, r7, lr}
 8004ab4:	b083      	sub	sp, #12
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68dc      	ldr	r4, [r3, #12]
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	2119      	movs	r1, #25
 8004ac6:	47a0      	blx	r4
 8004ac8:	0003      	movs	r3, r0
}
 8004aca:	0018      	movs	r0, r3
 8004acc:	46bd      	mov	sp, r7
 8004ace:	b003      	add	sp, #12
 8004ad0:	bd90      	pop	{r4, r7, pc}

08004ad2 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8004ad2:	b590      	push	{r4, r7, lr}
 8004ad4:	b085      	sub	sp, #20
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
 8004ada:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8004adc:	210f      	movs	r1, #15
 8004ade:	187b      	adds	r3, r7, r1
 8004ae0:	683a      	ldr	r2, [r7, #0]
 8004ae2:	7812      	ldrb	r2, [r2, #0]
 8004ae4:	701a      	strb	r2, [r3, #0]
    data++;
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	3301      	adds	r3, #1
 8004aea:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8004aec:	187b      	adds	r3, r7, r1
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	2bfe      	cmp	r3, #254	; 0xfe
 8004af2:	d038      	beq.n	8004b66 <u8x8_cad_SendSequence+0x94>
 8004af4:	dc48      	bgt.n	8004b88 <u8x8_cad_SendSequence+0xb6>
 8004af6:	2b19      	cmp	r3, #25
 8004af8:	dc46      	bgt.n	8004b88 <u8x8_cad_SendSequence+0xb6>
 8004afa:	2b18      	cmp	r3, #24
 8004afc:	da29      	bge.n	8004b52 <u8x8_cad_SendSequence+0x80>
 8004afe:	2b16      	cmp	r3, #22
 8004b00:	dc02      	bgt.n	8004b08 <u8x8_cad_SendSequence+0x36>
 8004b02:	2b15      	cmp	r3, #21
 8004b04:	da03      	bge.n	8004b0e <u8x8_cad_SendSequence+0x3c>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8004b06:	e03f      	b.n	8004b88 <u8x8_cad_SendSequence+0xb6>
    switch( cmd )
 8004b08:	2b17      	cmp	r3, #23
 8004b0a:	d013      	beq.n	8004b34 <u8x8_cad_SendSequence+0x62>
	return;
 8004b0c:	e03c      	b.n	8004b88 <u8x8_cad_SendSequence+0xb6>
	  v = *data;
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	781a      	ldrb	r2, [r3, #0]
 8004b12:	210e      	movs	r1, #14
 8004b14:	187b      	adds	r3, r7, r1
 8004b16:	701a      	strb	r2, [r3, #0]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	68dc      	ldr	r4, [r3, #12]
 8004b1c:	187b      	adds	r3, r7, r1
 8004b1e:	781a      	ldrb	r2, [r3, #0]
 8004b20:	230f      	movs	r3, #15
 8004b22:	18fb      	adds	r3, r7, r3
 8004b24:	7819      	ldrb	r1, [r3, #0]
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	2300      	movs	r3, #0
 8004b2a:	47a0      	blx	r4
	  data++;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	3301      	adds	r3, #1
 8004b30:	603b      	str	r3, [r7, #0]
	  break;
 8004b32:	e028      	b.n	8004b86 <u8x8_cad_SendSequence+0xb4>
	  v = *data;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	781a      	ldrb	r2, [r3, #0]
 8004b38:	210e      	movs	r1, #14
 8004b3a:	187b      	adds	r3, r7, r1
 8004b3c:	701a      	strb	r2, [r3, #0]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8004b3e:	187a      	adds	r2, r7, r1
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2101      	movs	r1, #1
 8004b44:	0018      	movs	r0, r3
 8004b46:	f7ff ff8d 	bl	8004a64 <u8x8_cad_SendData>
	  data++;
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	603b      	str	r3, [r7, #0]
	  break;
 8004b50:	e019      	b.n	8004b86 <u8x8_cad_SendSequence+0xb4>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	68dc      	ldr	r4, [r3, #12]
 8004b56:	230f      	movs	r3, #15
 8004b58:	18fb      	adds	r3, r7, r3
 8004b5a:	7819      	ldrb	r1, [r3, #0]
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	2300      	movs	r3, #0
 8004b60:	2200      	movs	r2, #0
 8004b62:	47a0      	blx	r4
	  break;
 8004b64:	e00f      	b.n	8004b86 <u8x8_cad_SendSequence+0xb4>
	  v = *data;
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	781a      	ldrb	r2, [r3, #0]
 8004b6a:	210e      	movs	r1, #14
 8004b6c:	187b      	adds	r3, r7, r1
 8004b6e:	701a      	strb	r2, [r3, #0]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8004b70:	187b      	adds	r3, r7, r1
 8004b72:	781a      	ldrb	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2129      	movs	r1, #41	; 0x29
 8004b78:	0018      	movs	r0, r3
 8004b7a:	f000 fa99 	bl	80050b0 <u8x8_gpio_call>
	  data++;
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	3301      	adds	r3, #1
 8004b82:	603b      	str	r3, [r7, #0]
	  break;
 8004b84:	46c0      	nop			; (mov r8, r8)
    cmd = *data;
 8004b86:	e7a9      	b.n	8004adc <u8x8_cad_SendSequence+0xa>
	return;
 8004b88:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	b005      	add	sp, #20
 8004b8e:	bd90      	pop	{r4, r7, pc}

08004b90 <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 8004b90:	b5b0      	push	{r4, r5, r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	607a      	str	r2, [r7, #4]
 8004b9a:	250b      	movs	r5, #11
 8004b9c:	197b      	adds	r3, r7, r5
 8004b9e:	1c0a      	adds	r2, r1, #0
 8004ba0:	701a      	strb	r2, [r3, #0]
    u8x8_byte_StartTransfer(u8x8);    
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	0018      	movs	r0, r3
 8004ba6:	f7ff ff15 	bl	80049d4 <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2140      	movs	r1, #64	; 0x40
 8004bae:	0018      	movs	r0, r3
 8004bb0:	f7ff fefe 	bl	80049b0 <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	691c      	ldr	r4, [r3, #16]
 8004bb8:	6879      	ldr	r1, [r7, #4]
 8004bba:	197b      	adds	r3, r7, r5
 8004bbc:	781a      	ldrb	r2, [r3, #0]
 8004bbe:	68f8      	ldr	r0, [r7, #12]
 8004bc0:	000b      	movs	r3, r1
 8004bc2:	2117      	movs	r1, #23
 8004bc4:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	0018      	movs	r0, r3
 8004bca:	f7ff ff13 	bl	80049f4 <u8x8_byte_EndTransfer>
}
 8004bce:	46c0      	nop			; (mov r8, r8)
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	b004      	add	sp, #16
 8004bd4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004bd8 <u8x8_cad_ssd13xx_fast_i2c>:
}


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8004bd8:	b5b0      	push	{r4, r5, r7, lr}
 8004bda:	b086      	sub	sp, #24
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	0008      	movs	r0, r1
 8004be2:	0011      	movs	r1, r2
 8004be4:	607b      	str	r3, [r7, #4]
 8004be6:	240b      	movs	r4, #11
 8004be8:	193b      	adds	r3, r7, r4
 8004bea:	1c02      	adds	r2, r0, #0
 8004bec:	701a      	strb	r2, [r3, #0]
 8004bee:	230a      	movs	r3, #10
 8004bf0:	18fb      	adds	r3, r7, r3
 8004bf2:	1c0a      	adds	r2, r1, #0
 8004bf4:	701a      	strb	r2, [r3, #0]
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
 8004bf6:	193b      	adds	r3, r7, r4
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	3b14      	subs	r3, #20
 8004bfc:	2b05      	cmp	r3, #5
 8004bfe:	d900      	bls.n	8004c02 <u8x8_cad_ssd13xx_fast_i2c+0x2a>
 8004c00:	e07b      	b.n	8004cfa <u8x8_cad_ssd13xx_fast_i2c+0x122>
 8004c02:	009a      	lsls	r2, r3, #2
 8004c04:	4b40      	ldr	r3, [pc, #256]	; (8004d08 <u8x8_cad_ssd13xx_fast_i2c+0x130>)
 8004c06:	18d3      	adds	r3, r2, r3
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	469f      	mov	pc, r3
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
 8004c0c:	4b3f      	ldr	r3, [pc, #252]	; (8004d0c <u8x8_cad_ssd13xx_fast_i2c+0x134>)
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d003      	beq.n	8004c1c <u8x8_cad_ssd13xx_fast_i2c+0x44>
	 u8x8_byte_EndTransfer(u8x8); 
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	0018      	movs	r0, r3
 8004c18:	f7ff feec 	bl	80049f4 <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	0018      	movs	r0, r3
 8004c20:	f7ff fed8 	bl	80049d4 <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2100      	movs	r1, #0
 8004c28:	0018      	movs	r0, r3
 8004c2a:	f7ff fec1 	bl	80049b0 <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 8004c2e:	230a      	movs	r3, #10
 8004c30:	18fb      	adds	r3, r7, r3
 8004c32:	781a      	ldrb	r2, [r3, #0]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	0011      	movs	r1, r2
 8004c38:	0018      	movs	r0, r3
 8004c3a:	f7ff feb9 	bl	80049b0 <u8x8_byte_SendByte>
      in_transfer = 1;
 8004c3e:	4b33      	ldr	r3, [pc, #204]	; (8004d0c <u8x8_cad_ssd13xx_fast_i2c+0x134>)
 8004c40:	2201      	movs	r2, #1
 8004c42:	701a      	strb	r2, [r3, #0]
	//   u8x8_byte_StartTransfer(u8x8);
	//   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
 8004c44:	e05b      	b.n	8004cfe <u8x8_cad_ssd13xx_fast_i2c+0x126>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
 8004c46:	230a      	movs	r3, #10
 8004c48:	18fb      	adds	r3, r7, r3
 8004c4a:	781a      	ldrb	r2, [r3, #0]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	0011      	movs	r1, r2
 8004c50:	0018      	movs	r0, r3
 8004c52:	f7ff fead 	bl	80049b0 <u8x8_byte_SendByte>
      break;      
 8004c56:	e052      	b.n	8004cfe <u8x8_cad_ssd13xx_fast_i2c+0x126>
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
 8004c58:	4b2c      	ldr	r3, [pc, #176]	; (8004d0c <u8x8_cad_ssd13xx_fast_i2c+0x134>)
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d003      	beq.n	8004c68 <u8x8_cad_ssd13xx_fast_i2c+0x90>
	u8x8_byte_EndTransfer(u8x8); 
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	0018      	movs	r0, r3
 8004c64:	f7ff fec6 	bl	80049f4 <u8x8_byte_EndTransfer>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8004c6c:	e00e      	b.n	8004c8c <u8x8_cad_ssd13xx_fast_i2c+0xb4>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2118      	movs	r1, #24
 8004c74:	0018      	movs	r0, r3
 8004c76:	f7ff ff8b 	bl	8004b90 <u8x8_i2c_data_transfer>
	arg_int-=24;
 8004c7a:	220a      	movs	r2, #10
 8004c7c:	18bb      	adds	r3, r7, r2
 8004c7e:	18ba      	adds	r2, r7, r2
 8004c80:	7812      	ldrb	r2, [r2, #0]
 8004c82:	3a18      	subs	r2, #24
 8004c84:	701a      	strb	r2, [r3, #0]
	p+=24;
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	3318      	adds	r3, #24
 8004c8a:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8004c8c:	210a      	movs	r1, #10
 8004c8e:	187b      	adds	r3, r7, r1
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	2b18      	cmp	r3, #24
 8004c94:	d8eb      	bhi.n	8004c6e <u8x8_cad_ssd13xx_fast_i2c+0x96>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 8004c96:	697a      	ldr	r2, [r7, #20]
 8004c98:	187b      	adds	r3, r7, r1
 8004c9a:	7819      	ldrb	r1, [r3, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	0018      	movs	r0, r3
 8004ca0:	f7ff ff76 	bl	8004b90 <u8x8_i2c_data_transfer>
      in_transfer = 0;
 8004ca4:	4b19      	ldr	r3, [pc, #100]	; (8004d0c <u8x8_cad_ssd13xx_fast_i2c+0x134>)
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	701a      	strb	r2, [r3, #0]
      break;
 8004caa:	e028      	b.n	8004cfe <u8x8_cad_ssd13xx_fast_i2c+0x126>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2224      	movs	r2, #36	; 0x24
 8004cb0:	5c9b      	ldrb	r3, [r3, r2]
 8004cb2:	2bff      	cmp	r3, #255	; 0xff
 8004cb4:	d103      	bne.n	8004cbe <u8x8_cad_ssd13xx_fast_i2c+0xe6>
	u8x8->i2c_address = 0x078;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2224      	movs	r2, #36	; 0x24
 8004cba:	2178      	movs	r1, #120	; 0x78
 8004cbc:	5499      	strb	r1, [r3, r2]
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	691c      	ldr	r4, [r3, #16]
 8004cc2:	687d      	ldr	r5, [r7, #4]
 8004cc4:	230a      	movs	r3, #10
 8004cc6:	18fb      	adds	r3, r7, r3
 8004cc8:	781a      	ldrb	r2, [r3, #0]
 8004cca:	230b      	movs	r3, #11
 8004ccc:	18fb      	adds	r3, r7, r3
 8004cce:	7819      	ldrb	r1, [r3, #0]
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	002b      	movs	r3, r5
 8004cd4:	47a0      	blx	r4
 8004cd6:	0003      	movs	r3, r0
 8004cd8:	e012      	b.n	8004d00 <u8x8_cad_ssd13xx_fast_i2c+0x128>
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
 8004cda:	4b0c      	ldr	r3, [pc, #48]	; (8004d0c <u8x8_cad_ssd13xx_fast_i2c+0x134>)
 8004cdc:	2200      	movs	r2, #0
 8004cde:	701a      	strb	r2, [r3, #0]
      break;
 8004ce0:	e00d      	b.n	8004cfe <u8x8_cad_ssd13xx_fast_i2c+0x126>
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
 8004ce2:	4b0a      	ldr	r3, [pc, #40]	; (8004d0c <u8x8_cad_ssd13xx_fast_i2c+0x134>)
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d003      	beq.n	8004cf2 <u8x8_cad_ssd13xx_fast_i2c+0x11a>
	u8x8_byte_EndTransfer(u8x8); 
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	0018      	movs	r0, r3
 8004cee:	f7ff fe81 	bl	80049f4 <u8x8_byte_EndTransfer>
      in_transfer = 0;
 8004cf2:	4b06      	ldr	r3, [pc, #24]	; (8004d0c <u8x8_cad_ssd13xx_fast_i2c+0x134>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	701a      	strb	r2, [r3, #0]
      break;
 8004cf8:	e001      	b.n	8004cfe <u8x8_cad_ssd13xx_fast_i2c+0x126>
    default:
      return 0;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	e000      	b.n	8004d00 <u8x8_cad_ssd13xx_fast_i2c+0x128>
  }
  return 1;
 8004cfe:	2301      	movs	r3, #1
}
 8004d00:	0018      	movs	r0, r3
 8004d02:	46bd      	mov	sp, r7
 8004d04:	b006      	add	sp, #24
 8004d06:	bdb0      	pop	{r4, r5, r7, pc}
 8004d08:	08007d48 	.word	0x08007d48
 8004d0c:	20000318 	.word	0x20000318

08004d10 <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8004d10:	b590      	push	{r4, r7, lr}
 8004d12:	b087      	sub	sp, #28
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	0008      	movs	r0, r1
 8004d1a:	0011      	movs	r1, r2
 8004d1c:	607b      	str	r3, [r7, #4]
 8004d1e:	240b      	movs	r4, #11
 8004d20:	193b      	adds	r3, r7, r4
 8004d22:	1c02      	adds	r2, r0, #0
 8004d24:	701a      	strb	r2, [r3, #0]
 8004d26:	230a      	movs	r3, #10
 8004d28:	18fb      	adds	r3, r7, r3
 8004d2a:	1c0a      	adds	r2, r1, #0
 8004d2c:	701a      	strb	r2, [r3, #0]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8004d2e:	193b      	adds	r3, r7, r4
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	2b0f      	cmp	r3, #15
 8004d34:	d052      	beq.n	8004ddc <u8x8_d_ssd1306_sh1106_generic+0xcc>
 8004d36:	dd00      	ble.n	8004d3a <u8x8_d_ssd1306_sh1106_generic+0x2a>
 8004d38:	e0ac      	b.n	8004e94 <u8x8_d_ssd1306_sh1106_generic+0x184>
 8004d3a:	2b0e      	cmp	r3, #14
 8004d3c:	d038      	beq.n	8004db0 <u8x8_d_ssd1306_sh1106_generic+0xa0>
 8004d3e:	dd00      	ble.n	8004d42 <u8x8_d_ssd1306_sh1106_generic+0x32>
 8004d40:	e0a8      	b.n	8004e94 <u8x8_d_ssd1306_sh1106_generic+0x184>
 8004d42:	2b0b      	cmp	r3, #11
 8004d44:	d002      	beq.n	8004d4c <u8x8_d_ssd1306_sh1106_generic+0x3c>
 8004d46:	2b0d      	cmp	r3, #13
 8004d48:	d013      	beq.n	8004d72 <u8x8_d_ssd1306_sh1106_generic+0x62>
 8004d4a:	e0a3      	b.n	8004e94 <u8x8_d_ssd1306_sh1106_generic+0x184>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8004d4c:	230a      	movs	r3, #10
 8004d4e:	18fb      	adds	r3, r7, r3
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d106      	bne.n	8004d64 <u8x8_d_ssd1306_sh1106_generic+0x54>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 8004d56:	4a53      	ldr	r2, [pc, #332]	; (8004ea4 <u8x8_d_ssd1306_sh1106_generic+0x194>)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	0011      	movs	r1, r2
 8004d5c:	0018      	movs	r0, r3
 8004d5e:	f7ff feb8 	bl	8004ad2 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 8004d62:	e099      	b.n	8004e98 <u8x8_d_ssd1306_sh1106_generic+0x188>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 8004d64:	4a50      	ldr	r2, [pc, #320]	; (8004ea8 <u8x8_d_ssd1306_sh1106_generic+0x198>)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	0011      	movs	r1, r2
 8004d6a:	0018      	movs	r0, r3
 8004d6c:	f7ff feb1 	bl	8004ad2 <u8x8_cad_SendSequence>
      break;
 8004d70:	e092      	b.n	8004e98 <u8x8_d_ssd1306_sh1106_generic+0x188>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8004d72:	230a      	movs	r3, #10
 8004d74:	18fb      	adds	r3, r7, r3
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d10c      	bne.n	8004d96 <u8x8_d_ssd1306_sh1106_generic+0x86>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 8004d7c:	4a4b      	ldr	r2, [pc, #300]	; (8004eac <u8x8_d_ssd1306_sh1106_generic+0x19c>)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	0011      	movs	r1, r2
 8004d82:	0018      	movs	r0, r3
 8004d84:	f7ff fea5 	bl	8004ad2 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	7c99      	ldrb	r1, [r3, #18]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2222      	movs	r2, #34	; 0x22
 8004d92:	5499      	strb	r1, [r3, r2]
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8004d94:	e080      	b.n	8004e98 <u8x8_d_ssd1306_sh1106_generic+0x188>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 8004d96:	4a46      	ldr	r2, [pc, #280]	; (8004eb0 <u8x8_d_ssd1306_sh1106_generic+0x1a0>)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	0011      	movs	r1, r2
 8004d9c:	0018      	movs	r0, r3
 8004d9e:	f7ff fe98 	bl	8004ad2 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	7cd9      	ldrb	r1, [r3, #19]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2222      	movs	r2, #34	; 0x22
 8004dac:	5499      	strb	r1, [r3, r2]
      break;
 8004dae:	e073      	b.n	8004e98 <u8x8_d_ssd1306_sh1106_generic+0x188>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	0018      	movs	r0, r3
 8004db4:	f7ff fe6d 	bl	8004a92 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2181      	movs	r1, #129	; 0x81
 8004dbc:	0018      	movs	r0, r3
 8004dbe:	f7ff fe29 	bl	8004a14 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 8004dc2:	230a      	movs	r3, #10
 8004dc4:	18fb      	adds	r3, r7, r3
 8004dc6:	781a      	ldrb	r2, [r3, #0]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	0011      	movs	r1, r2
 8004dcc:	0018      	movs	r0, r3
 8004dce:	f7ff fe35 	bl	8004a3c <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	0018      	movs	r0, r3
 8004dd6:	f7ff fe6c 	bl	8004ab2 <u8x8_cad_EndTransfer>
      break;
 8004dda:	e05d      	b.n	8004e98 <u8x8_d_ssd1306_sh1106_generic+0x188>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	0018      	movs	r0, r3
 8004de0:	f7ff fe57 	bl	8004a92 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8004de4:	2417      	movs	r4, #23
 8004de6:	193b      	adds	r3, r7, r4
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	7952      	ldrb	r2, [r2, #5]
 8004dec:	701a      	strb	r2, [r3, #0]
      x *= 8;
 8004dee:	193b      	adds	r3, r7, r4
 8004df0:	193a      	adds	r2, r7, r4
 8004df2:	7812      	ldrb	r2, [r2, #0]
 8004df4:	00d2      	lsls	r2, r2, #3
 8004df6:	701a      	strb	r2, [r3, #0]
      x += u8x8->x_offset;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2222      	movs	r2, #34	; 0x22
 8004dfc:	5c99      	ldrb	r1, [r3, r2]
 8004dfe:	193b      	adds	r3, r7, r4
 8004e00:	193a      	adds	r2, r7, r4
 8004e02:	7812      	ldrb	r2, [r2, #0]
 8004e04:	188a      	adds	r2, r1, r2
 8004e06:	701a      	strb	r2, [r3, #0]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2140      	movs	r1, #64	; 0x40
 8004e0c:	0018      	movs	r0, r3
 8004e0e:	f7ff fe01 	bl	8004a14 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8004e12:	193b      	adds	r3, r7, r4
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	091b      	lsrs	r3, r3, #4
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	2210      	movs	r2, #16
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	b2da      	uxtb	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	0011      	movs	r1, r2
 8004e24:	0018      	movs	r0, r3
 8004e26:	f7ff fdf5 	bl	8004a14 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 8004e2a:	193b      	adds	r3, r7, r4
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	220f      	movs	r2, #15
 8004e30:	4013      	ands	r3, r2
 8004e32:	b2da      	uxtb	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	0011      	movs	r1, r2
 8004e38:	0018      	movs	r0, r3
 8004e3a:	f7ff fdff 	bl	8004a3c <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	799b      	ldrb	r3, [r3, #6]
 8004e42:	2250      	movs	r2, #80	; 0x50
 8004e44:	4252      	negs	r2, r2
 8004e46:	4313      	orrs	r3, r2
 8004e48:	b2da      	uxtb	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	0011      	movs	r1, r2
 8004e4e:	0018      	movs	r0, r3
 8004e50:	f7ff fdf4 	bl	8004a3c <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8004e54:	2116      	movs	r1, #22
 8004e56:	187b      	adds	r3, r7, r1
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	7912      	ldrb	r2, [r2, #4]
 8004e5c:	701a      	strb	r2, [r3, #0]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8004e64:	187b      	adds	r3, r7, r1
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	00db      	lsls	r3, r3, #3
 8004e6a:	b2d9      	uxtb	r1, r3
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	0018      	movs	r0, r3
 8004e72:	f7ff fdf7 	bl	8004a64 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 8004e76:	210a      	movs	r1, #10
 8004e78:	187b      	adds	r3, r7, r1
 8004e7a:	781a      	ldrb	r2, [r3, #0]
 8004e7c:	187b      	adds	r3, r7, r1
 8004e7e:	3a01      	subs	r2, #1
 8004e80:	701a      	strb	r2, [r3, #0]
      } while( arg_int > 0 );
 8004e82:	187b      	adds	r3, r7, r1
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1e4      	bne.n	8004e54 <u8x8_d_ssd1306_sh1106_generic+0x144>
      
      u8x8_cad_EndTransfer(u8x8);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	0018      	movs	r0, r3
 8004e8e:	f7ff fe10 	bl	8004ab2 <u8x8_cad_EndTransfer>
      break;
 8004e92:	e001      	b.n	8004e98 <u8x8_d_ssd1306_sh1106_generic+0x188>
    default:
      return 0;
 8004e94:	2300      	movs	r3, #0
 8004e96:	e000      	b.n	8004e9a <u8x8_d_ssd1306_sh1106_generic+0x18a>
  }
  return 1;
 8004e98:	2301      	movs	r3, #1
}
 8004e9a:	0018      	movs	r0, r3
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	b007      	add	sp, #28
 8004ea0:	bd90      	pop	{r4, r7, pc}
 8004ea2:	46c0      	nop			; (mov r8, r8)
 8004ea4:	08007d98 	.word	0x08007d98
 8004ea8:	08007da0 	.word	0x08007da0
 8004eac:	08007da8 	.word	0x08007da8
 8004eb0:	08007db0 	.word	0x08007db0

08004eb4 <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8004eb4:	b5b0      	push	{r4, r5, r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	0008      	movs	r0, r1
 8004ebe:	0011      	movs	r1, r2
 8004ec0:	607b      	str	r3, [r7, #4]
 8004ec2:	250b      	movs	r5, #11
 8004ec4:	197b      	adds	r3, r7, r5
 8004ec6:	1c02      	adds	r2, r0, #0
 8004ec8:	701a      	strb	r2, [r3, #0]
 8004eca:	200a      	movs	r0, #10
 8004ecc:	183b      	adds	r3, r7, r0
 8004ece:	1c0a      	adds	r2, r1, #0
 8004ed0:	701a      	strb	r2, [r3, #0]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 8004ed2:	687c      	ldr	r4, [r7, #4]
 8004ed4:	183b      	adds	r3, r7, r0
 8004ed6:	781a      	ldrb	r2, [r3, #0]
 8004ed8:	197b      	adds	r3, r7, r5
 8004eda:	7819      	ldrb	r1, [r3, #0]
 8004edc:	68f8      	ldr	r0, [r7, #12]
 8004ede:	0023      	movs	r3, r4
 8004ee0:	f7ff ff16 	bl	8004d10 <u8x8_d_ssd1306_sh1106_generic>
 8004ee4:	1e03      	subs	r3, r0, #0
 8004ee6:	d001      	beq.n	8004eec <u8x8_d_ssd1306_128x64_noname+0x38>
    return 1;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e01b      	b.n	8004f24 <u8x8_d_ssd1306_128x64_noname+0x70>
  
  switch(msg)
 8004eec:	230b      	movs	r3, #11
 8004eee:	18fb      	adds	r3, r7, r3
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	2b09      	cmp	r3, #9
 8004ef4:	d00c      	beq.n	8004f10 <u8x8_d_ssd1306_128x64_noname+0x5c>
 8004ef6:	2b0a      	cmp	r3, #10
 8004ef8:	d111      	bne.n	8004f1e <u8x8_d_ssd1306_128x64_noname+0x6a>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	0018      	movs	r0, r3
 8004efe:	f000 f82b 	bl	8004f58 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 8004f02:	4a0a      	ldr	r2, [pc, #40]	; (8004f2c <u8x8_d_ssd1306_128x64_noname+0x78>)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	0011      	movs	r1, r2
 8004f08:	0018      	movs	r0, r3
 8004f0a:	f7ff fde2 	bl	8004ad2 <u8x8_cad_SendSequence>
      break;
 8004f0e:	e008      	b.n	8004f22 <u8x8_d_ssd1306_128x64_noname+0x6e>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 8004f10:	4a07      	ldr	r2, [pc, #28]	; (8004f30 <u8x8_d_ssd1306_128x64_noname+0x7c>)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	0011      	movs	r1, r2
 8004f16:	0018      	movs	r0, r3
 8004f18:	f000 f80c 	bl	8004f34 <u8x8_d_helper_display_setup_memory>
      break;
 8004f1c:	e001      	b.n	8004f22 <u8x8_d_ssd1306_128x64_noname+0x6e>
    default:
      return 0;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	e000      	b.n	8004f24 <u8x8_d_ssd1306_128x64_noname+0x70>
  }
  return 1;
 8004f22:	2301      	movs	r3, #1
}
 8004f24:	0018      	movs	r0, r3
 8004f26:	46bd      	mov	sp, r7
 8004f28:	b004      	add	sp, #16
 8004f2a:	bdb0      	pop	{r4, r5, r7, pc}
 8004f2c:	08007d60 	.word	0x08007d60
 8004f30:	08007db8 	.word	0x08007db8

08004f34 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	683a      	ldr	r2, [r7, #0]
 8004f42:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	7c99      	ldrb	r1, [r3, #18]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2222      	movs	r2, #34	; 0x22
 8004f4e:	5499      	strb	r1, [r3, r2]
}
 8004f50:	46c0      	nop			; (mov r8, r8)
 8004f52:	46bd      	mov	sp, r7
 8004f54:	b002      	add	sp, #8
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8004f58:	b590      	push	{r4, r7, lr}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	695c      	ldr	r4, [r3, #20]
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	2300      	movs	r3, #0
 8004f68:	2200      	movs	r2, #0
 8004f6a:	2128      	movs	r1, #40	; 0x28
 8004f6c:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	68dc      	ldr	r4, [r3, #12]
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	2300      	movs	r3, #0
 8004f76:	2200      	movs	r2, #0
 8004f78:	2114      	movs	r1, #20
 8004f7a:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	214b      	movs	r1, #75	; 0x4b
 8004f82:	0018      	movs	r0, r3
 8004f84:	f000 f894 	bl	80050b0 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	791a      	ldrb	r2, [r3, #4]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2129      	movs	r1, #41	; 0x29
 8004f92:	0018      	movs	r0, r3
 8004f94:	f000 f88c 	bl	80050b0 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	214b      	movs	r1, #75	; 0x4b
 8004f9e:	0018      	movs	r0, r3
 8004fa0:	f000 f886 	bl	80050b0 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	791a      	ldrb	r2, [r3, #4]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2129      	movs	r1, #41	; 0x29
 8004fae:	0018      	movs	r0, r3
 8004fb0:	f000 f87e 	bl	80050b0 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	214b      	movs	r1, #75	; 0x4b
 8004fba:	0018      	movs	r0, r3
 8004fbc:	f000 f878 	bl	80050b0 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	795a      	ldrb	r2, [r3, #5]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2129      	movs	r1, #41	; 0x29
 8004fca:	0018      	movs	r0, r3
 8004fcc:	f000 f870 	bl	80050b0 <u8x8_gpio_call>
}    
 8004fd0:	46c0      	nop			; (mov r8, r8)
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	b003      	add	sp, #12
 8004fd6:	bd90      	pop	{r4, r7, pc}

08004fd8 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8004fd8:	b590      	push	{r4, r7, lr}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	000c      	movs	r4, r1
 8004fe2:	0010      	movs	r0, r2
 8004fe4:	0019      	movs	r1, r3
 8004fe6:	1cfb      	adds	r3, r7, #3
 8004fe8:	1c22      	adds	r2, r4, #0
 8004fea:	701a      	strb	r2, [r3, #0]
 8004fec:	1cbb      	adds	r3, r7, #2
 8004fee:	1c02      	adds	r2, r0, #0
 8004ff0:	701a      	strb	r2, [r3, #0]
 8004ff2:	1c7b      	adds	r3, r7, #1
 8004ff4:	1c0a      	adds	r2, r1, #0
 8004ff6:	701a      	strb	r2, [r3, #0]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8004ff8:	2108      	movs	r1, #8
 8004ffa:	187b      	adds	r3, r7, r1
 8004ffc:	1cfa      	adds	r2, r7, #3
 8004ffe:	7812      	ldrb	r2, [r2, #0]
 8005000:	715a      	strb	r2, [r3, #5]
  tile.y_pos = y;
 8005002:	187b      	adds	r3, r7, r1
 8005004:	1cba      	adds	r2, r7, #2
 8005006:	7812      	ldrb	r2, [r2, #0]
 8005008:	719a      	strb	r2, [r3, #6]
  tile.cnt = cnt;
 800500a:	187b      	adds	r3, r7, r1
 800500c:	1c7a      	adds	r2, r7, #1
 800500e:	7812      	ldrb	r2, [r2, #0]
 8005010:	711a      	strb	r2, [r3, #4]
  tile.tile_ptr = tile_ptr;
 8005012:	187b      	adds	r3, r7, r1
 8005014:	6a3a      	ldr	r2, [r7, #32]
 8005016:	601a      	str	r2, [r3, #0]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	689c      	ldr	r4, [r3, #8]
 800501c:	187b      	adds	r3, r7, r1
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	2201      	movs	r2, #1
 8005022:	210f      	movs	r1, #15
 8005024:	47a0      	blx	r4
 8005026:	0003      	movs	r3, r0
}
 8005028:	0018      	movs	r0, r3
 800502a:	46bd      	mov	sp, r7
 800502c:	b005      	add	sp, #20
 800502e:	bd90      	pop	{r4, r7, pc}

08005030 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8005030:	b590      	push	{r4, r7, lr}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	689c      	ldr	r4, [r3, #8]
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	2300      	movs	r3, #0
 8005040:	2200      	movs	r2, #0
 8005042:	2109      	movs	r1, #9
 8005044:	47a0      	blx	r4
}
 8005046:	46c0      	nop			; (mov r8, r8)
 8005048:	46bd      	mov	sp, r7
 800504a:	b003      	add	sp, #12
 800504c:	bd90      	pop	{r4, r7, pc}

0800504e <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 800504e:	b590      	push	{r4, r7, lr}
 8005050:	b083      	sub	sp, #12
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	689c      	ldr	r4, [r3, #8]
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	2300      	movs	r3, #0
 800505e:	2200      	movs	r2, #0
 8005060:	210a      	movs	r1, #10
 8005062:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 8005064:	46c0      	nop			; (mov r8, r8)
 8005066:	46bd      	mov	sp, r7
 8005068:	b003      	add	sp, #12
 800506a:	bd90      	pop	{r4, r7, pc}

0800506c <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 800506c:	b590      	push	{r4, r7, lr}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	000a      	movs	r2, r1
 8005076:	1cfb      	adds	r3, r7, #3
 8005078:	701a      	strb	r2, [r3, #0]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	689c      	ldr	r4, [r3, #8]
 800507e:	1cfb      	adds	r3, r7, #3
 8005080:	781a      	ldrb	r2, [r3, #0]
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	2300      	movs	r3, #0
 8005086:	210b      	movs	r1, #11
 8005088:	47a0      	blx	r4
}
 800508a:	46c0      	nop			; (mov r8, r8)
 800508c:	46bd      	mov	sp, r7
 800508e:	b003      	add	sp, #12
 8005090:	bd90      	pop	{r4, r7, pc}

08005092 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8005092:	b590      	push	{r4, r7, lr}
 8005094:	b083      	sub	sp, #12
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	689c      	ldr	r4, [r3, #8]
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	2300      	movs	r3, #0
 80050a2:	2200      	movs	r2, #0
 80050a4:	2110      	movs	r1, #16
 80050a6:	47a0      	blx	r4
}
 80050a8:	46c0      	nop			; (mov r8, r8)
 80050aa:	46bd      	mov	sp, r7
 80050ac:	b003      	add	sp, #12
 80050ae:	bd90      	pop	{r4, r7, pc}

080050b0 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 80050b0:	b590      	push	{r4, r7, lr}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	0008      	movs	r0, r1
 80050ba:	0011      	movs	r1, r2
 80050bc:	1cfb      	adds	r3, r7, #3
 80050be:	1c02      	adds	r2, r0, #0
 80050c0:	701a      	strb	r2, [r3, #0]
 80050c2:	1cbb      	adds	r3, r7, #2
 80050c4:	1c0a      	adds	r2, r1, #0
 80050c6:	701a      	strb	r2, [r3, #0]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	695c      	ldr	r4, [r3, #20]
 80050cc:	1cbb      	adds	r3, r7, #2
 80050ce:	781a      	ldrb	r2, [r3, #0]
 80050d0:	1cfb      	adds	r3, r7, #3
 80050d2:	7819      	ldrb	r1, [r3, #0]
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	2300      	movs	r3, #0
 80050d8:	47a0      	blx	r4
}
 80050da:	46c0      	nop			; (mov r8, r8)
 80050dc:	46bd      	mov	sp, r7
 80050de:	b003      	add	sp, #12
 80050e0:	bd90      	pop	{r4, r7, pc}

080050e2 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b084      	sub	sp, #16
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	60f8      	str	r0, [r7, #12]
 80050ea:	0008      	movs	r0, r1
 80050ec:	0011      	movs	r1, r2
 80050ee:	607b      	str	r3, [r7, #4]
 80050f0:	230b      	movs	r3, #11
 80050f2:	18fb      	adds	r3, r7, r3
 80050f4:	1c02      	adds	r2, r0, #0
 80050f6:	701a      	strb	r2, [r3, #0]
 80050f8:	230a      	movs	r3, #10
 80050fa:	18fb      	adds	r3, r7, r3
 80050fc:	1c0a      	adds	r2, r1, #0
 80050fe:	701a      	strb	r2, [r3, #0]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8005100:	2300      	movs	r3, #0
}
 8005102:	0018      	movs	r0, r3
 8005104:	46bd      	mov	sp, r7
 8005106:	b004      	add	sp, #16
 8005108:	bd80      	pop	{r7, pc}
	...

0800510c <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a10      	ldr	r2, [pc, #64]	; (8005160 <u8x8_SetupDefaults+0x54>)
 800511e:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a0f      	ldr	r2, [pc, #60]	; (8005160 <u8x8_SetupDefaults+0x54>)
 8005124:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a0d      	ldr	r2, [pc, #52]	; (8005160 <u8x8_SetupDefaults+0x54>)
 800512a:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a0c      	ldr	r2, [pc, #48]	; (8005160 <u8x8_SetupDefaults+0x54>)
 8005130:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2223      	movs	r2, #35	; 0x23
 8005136:	2100      	movs	r1, #0
 8005138:	5499      	strb	r1, [r3, r2]
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2226      	movs	r2, #38	; 0x26
 800513e:	2100      	movs	r1, #0
 8005140:	5499      	strb	r1, [r3, r2]
    u8x8->bus_clock = 0;		/* issue 769 */
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2224      	movs	r2, #36	; 0x24
 800514c:	21ff      	movs	r1, #255	; 0xff
 800514e:	5499      	strb	r1, [r3, r2]
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2228      	movs	r2, #40	; 0x28
 8005154:	21ff      	movs	r1, #255	; 0xff
 8005156:	5499      	strb	r1, [r3, r2]
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8005158:	46c0      	nop			; (mov r8, r8)
 800515a:	46bd      	mov	sp, r7
 800515c:	b002      	add	sp, #8
 800515e:	bd80      	pop	{r7, pc}
 8005160:	080050e3 	.word	0x080050e3

08005164 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
 8005170:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	0018      	movs	r0, r3
 8005176:	f7ff ffc9 	bl	800510c <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	683a      	ldr	r2, [r7, #0]
 800518a:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	69ba      	ldr	r2, [r7, #24]
 8005190:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	0018      	movs	r0, r3
 8005196:	f7ff ff4b 	bl	8005030 <u8x8_SetupMemory>
}
 800519a:	46c0      	nop			; (mov r8, r8)
 800519c:	46bd      	mov	sp, r7
 800519e:	b004      	add	sp, #16
 80051a0:	bd80      	pop	{r7, pc}
	...

080051a4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051aa:	f3ef 8305 	mrs	r3, IPSR
 80051ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80051b0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d109      	bne.n	80051ca <osKernelInitialize+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051b6:	f3ef 8310 	mrs	r3, PRIMASK
 80051ba:	607b      	str	r3, [r7, #4]
  return(result);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d007      	beq.n	80051d2 <osKernelInitialize+0x2e>
 80051c2:	4b0d      	ldr	r3, [pc, #52]	; (80051f8 <osKernelInitialize+0x54>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d103      	bne.n	80051d2 <osKernelInitialize+0x2e>
    stat = osErrorISR;
 80051ca:	2306      	movs	r3, #6
 80051cc:	425b      	negs	r3, r3
 80051ce:	60fb      	str	r3, [r7, #12]
 80051d0:	e00c      	b.n	80051ec <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 80051d2:	4b09      	ldr	r3, [pc, #36]	; (80051f8 <osKernelInitialize+0x54>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d105      	bne.n	80051e6 <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80051da:	4b07      	ldr	r3, [pc, #28]	; (80051f8 <osKernelInitialize+0x54>)
 80051dc:	2201      	movs	r2, #1
 80051de:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80051e0:	2300      	movs	r3, #0
 80051e2:	60fb      	str	r3, [r7, #12]
 80051e4:	e002      	b.n	80051ec <osKernelInitialize+0x48>
    } else {
      stat = osError;
 80051e6:	2301      	movs	r3, #1
 80051e8:	425b      	negs	r3, r3
 80051ea:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80051ec:	68fb      	ldr	r3, [r7, #12]
}
 80051ee:	0018      	movs	r0, r3
 80051f0:	46bd      	mov	sp, r7
 80051f2:	b004      	add	sp, #16
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	46c0      	nop			; (mov r8, r8)
 80051f8:	2000031c 	.word	0x2000031c

080051fc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005202:	f3ef 8305 	mrs	r3, IPSR
 8005206:	60bb      	str	r3, [r7, #8]
  return(result);
 8005208:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800520a:	2b00      	cmp	r3, #0
 800520c:	d109      	bne.n	8005222 <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800520e:	f3ef 8310 	mrs	r3, PRIMASK
 8005212:	607b      	str	r3, [r7, #4]
  return(result);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d007      	beq.n	800522a <osKernelStart+0x2e>
 800521a:	4b0e      	ldr	r3, [pc, #56]	; (8005254 <osKernelStart+0x58>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2b02      	cmp	r3, #2
 8005220:	d103      	bne.n	800522a <osKernelStart+0x2e>
    stat = osErrorISR;
 8005222:	2306      	movs	r3, #6
 8005224:	425b      	negs	r3, r3
 8005226:	60fb      	str	r3, [r7, #12]
 8005228:	e00e      	b.n	8005248 <osKernelStart+0x4c>
  }
  else {
    if (KernelState == osKernelReady) {
 800522a:	4b0a      	ldr	r3, [pc, #40]	; (8005254 <osKernelStart+0x58>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2b01      	cmp	r3, #1
 8005230:	d107      	bne.n	8005242 <osKernelStart+0x46>
      KernelState = osKernelRunning;
 8005232:	4b08      	ldr	r3, [pc, #32]	; (8005254 <osKernelStart+0x58>)
 8005234:	2202      	movs	r2, #2
 8005236:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005238:	f000 ff94 	bl	8006164 <vTaskStartScheduler>
      stat = osOK;
 800523c:	2300      	movs	r3, #0
 800523e:	60fb      	str	r3, [r7, #12]
 8005240:	e002      	b.n	8005248 <osKernelStart+0x4c>
    } else {
      stat = osError;
 8005242:	2301      	movs	r3, #1
 8005244:	425b      	negs	r3, r3
 8005246:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005248:	68fb      	ldr	r3, [r7, #12]
}
 800524a:	0018      	movs	r0, r3
 800524c:	46bd      	mov	sp, r7
 800524e:	b004      	add	sp, #16
 8005250:	bd80      	pop	{r7, pc}
 8005252:	46c0      	nop			; (mov r8, r8)
 8005254:	2000031c 	.word	0x2000031c

08005258 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005258:	b5b0      	push	{r4, r5, r7, lr}
 800525a:	b090      	sub	sp, #64	; 0x40
 800525c:	af04      	add	r7, sp, #16
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005264:	2300      	movs	r3, #0
 8005266:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005268:	f3ef 8305 	mrs	r3, IPSR
 800526c:	61fb      	str	r3, [r7, #28]
  return(result);
 800526e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005270:	2b00      	cmp	r3, #0
 8005272:	d000      	beq.n	8005276 <osThreadNew+0x1e>
 8005274:	e090      	b.n	8005398 <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005276:	f3ef 8310 	mrs	r3, PRIMASK
 800527a:	61bb      	str	r3, [r7, #24]
  return(result);
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d004      	beq.n	800528c <osThreadNew+0x34>
 8005282:	4b48      	ldr	r3, [pc, #288]	; (80053a4 <osThreadNew+0x14c>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2b02      	cmp	r3, #2
 8005288:	d100      	bne.n	800528c <osThreadNew+0x34>
 800528a:	e085      	b.n	8005398 <osThreadNew+0x140>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d100      	bne.n	8005294 <osThreadNew+0x3c>
 8005292:	e081      	b.n	8005398 <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 8005294:	2380      	movs	r3, #128	; 0x80
 8005296:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005298:	2318      	movs	r3, #24
 800529a:	627b      	str	r3, [r7, #36]	; 0x24

    empty = '\0';
 800529c:	2117      	movs	r1, #23
 800529e:	187b      	adds	r3, r7, r1
 80052a0:	2200      	movs	r2, #0
 80052a2:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 80052a4:	187b      	adds	r3, r7, r1
 80052a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem   = -1;
 80052a8:	2301      	movs	r3, #1
 80052aa:	425b      	negs	r3, r3
 80052ac:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d044      	beq.n	800533e <osThreadNew+0xe6>
      if (attr->name != NULL) {
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d002      	beq.n	80052c2 <osThreadNew+0x6a>
        name = attr->name;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d002      	beq.n	80052d0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80052d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d007      	beq.n	80052e6 <osThreadNew+0x8e>
 80052d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d8:	2b38      	cmp	r3, #56	; 0x38
 80052da:	d804      	bhi.n	80052e6 <osThreadNew+0x8e>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	2201      	movs	r2, #1
 80052e2:	4013      	ands	r3, r2
 80052e4:	d001      	beq.n	80052ea <osThreadNew+0x92>
        return (NULL);
 80052e6:	2300      	movs	r3, #0
 80052e8:	e057      	b.n	800539a <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d003      	beq.n	80052fa <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	089b      	lsrs	r3, r3, #2
 80052f8:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00e      	beq.n	8005320 <osThreadNew+0xc8>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	2bbb      	cmp	r3, #187	; 0xbb
 8005308:	d90a      	bls.n	8005320 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800530e:	2b00      	cmp	r3, #0
 8005310:	d006      	beq.n	8005320 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d002      	beq.n	8005320 <osThreadNew+0xc8>
        mem = 1;
 800531a:	2301      	movs	r3, #1
 800531c:	623b      	str	r3, [r7, #32]
 800531e:	e010      	b.n	8005342 <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d10c      	bne.n	8005342 <osThreadNew+0xea>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d108      	bne.n	8005342 <osThreadNew+0xea>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	691b      	ldr	r3, [r3, #16]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d104      	bne.n	8005342 <osThreadNew+0xea>
          mem = 0;
 8005338:	2300      	movs	r3, #0
 800533a:	623b      	str	r3, [r7, #32]
 800533c:	e001      	b.n	8005342 <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 800533e:	2300      	movs	r3, #0
 8005340:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005342:	6a3b      	ldr	r3, [r7, #32]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d112      	bne.n	800536e <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005350:	68bd      	ldr	r5, [r7, #8]
 8005352:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8005354:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	9302      	str	r3, [sp, #8]
 800535a:	9201      	str	r2, [sp, #4]
 800535c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535e:	9300      	str	r3, [sp, #0]
 8005360:	002b      	movs	r3, r5
 8005362:	0022      	movs	r2, r4
 8005364:	f000 fd49 	bl	8005dfa <xTaskCreateStatic>
 8005368:	0003      	movs	r3, r0
 800536a:	613b      	str	r3, [r7, #16]
 800536c:	e014      	b.n	8005398 <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 800536e:	6a3b      	ldr	r3, [r7, #32]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d111      	bne.n	8005398 <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005376:	b29a      	uxth	r2, r3
 8005378:	68bc      	ldr	r4, [r7, #8]
 800537a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	2310      	movs	r3, #16
 8005380:	18fb      	adds	r3, r7, r3
 8005382:	9301      	str	r3, [sp, #4]
 8005384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005386:	9300      	str	r3, [sp, #0]
 8005388:	0023      	movs	r3, r4
 800538a:	f000 fd79 	bl	8005e80 <xTaskCreate>
 800538e:	0003      	movs	r3, r0
 8005390:	2b01      	cmp	r3, #1
 8005392:	d001      	beq.n	8005398 <osThreadNew+0x140>
          hTask = NULL;
 8005394:	2300      	movs	r3, #0
 8005396:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005398:	693b      	ldr	r3, [r7, #16]
}
 800539a:	0018      	movs	r0, r3
 800539c:	46bd      	mov	sp, r7
 800539e:	b00c      	add	sp, #48	; 0x30
 80053a0:	bdb0      	pop	{r4, r5, r7, pc}
 80053a2:	46c0      	nop			; (mov r8, r8)
 80053a4:	2000031c 	.word	0x2000031c

080053a8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b086      	sub	sp, #24
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053b0:	f3ef 8305 	mrs	r3, IPSR
 80053b4:	613b      	str	r3, [r7, #16]
  return(result);
 80053b6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d109      	bne.n	80053d0 <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053bc:	f3ef 8310 	mrs	r3, PRIMASK
 80053c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d007      	beq.n	80053d8 <osDelay+0x30>
 80053c8:	4b0a      	ldr	r3, [pc, #40]	; (80053f4 <osDelay+0x4c>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d103      	bne.n	80053d8 <osDelay+0x30>
    stat = osErrorISR;
 80053d0:	2306      	movs	r3, #6
 80053d2:	425b      	negs	r3, r3
 80053d4:	617b      	str	r3, [r7, #20]
 80053d6:	e008      	b.n	80053ea <osDelay+0x42>
  }
  else {
    stat = osOK;
 80053d8:	2300      	movs	r3, #0
 80053da:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d003      	beq.n	80053ea <osDelay+0x42>
      vTaskDelay(ticks);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	0018      	movs	r0, r3
 80053e6:	f000 fe97 	bl	8006118 <vTaskDelay>
    }
  }

  return (stat);
 80053ea:	697b      	ldr	r3, [r7, #20]
}
 80053ec:	0018      	movs	r0, r3
 80053ee:	46bd      	mov	sp, r7
 80053f0:	b006      	add	sp, #24
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	2000031c 	.word	0x2000031c

080053f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	4a06      	ldr	r2, [pc, #24]	; (8005420 <vApplicationGetIdleTaskMemory+0x28>)
 8005408:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	4a05      	ldr	r2, [pc, #20]	; (8005424 <vApplicationGetIdleTaskMemory+0x2c>)
 800540e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2280      	movs	r2, #128	; 0x80
 8005414:	601a      	str	r2, [r3, #0]
}
 8005416:	46c0      	nop			; (mov r8, r8)
 8005418:	46bd      	mov	sp, r7
 800541a:	b004      	add	sp, #16
 800541c:	bd80      	pop	{r7, pc}
 800541e:	46c0      	nop			; (mov r8, r8)
 8005420:	20000320 	.word	0x20000320
 8005424:	200003dc 	.word	0x200003dc

08005428 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	4a06      	ldr	r2, [pc, #24]	; (8005450 <vApplicationGetTimerTaskMemory+0x28>)
 8005438:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	4a05      	ldr	r2, [pc, #20]	; (8005454 <vApplicationGetTimerTaskMemory+0x2c>)
 800543e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2280      	movs	r2, #128	; 0x80
 8005444:	0052      	lsls	r2, r2, #1
 8005446:	601a      	str	r2, [r3, #0]
}
 8005448:	46c0      	nop			; (mov r8, r8)
 800544a:	46bd      	mov	sp, r7
 800544c:	b004      	add	sp, #16
 800544e:	bd80      	pop	{r7, pc}
 8005450:	200005dc 	.word	0x200005dc
 8005454:	20000698 	.word	0x20000698

08005458 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b082      	sub	sp, #8
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	3308      	adds	r3, #8
 8005464:	001a      	movs	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2201      	movs	r2, #1
 800546e:	4252      	negs	r2, r2
 8005470:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	3308      	adds	r3, #8
 8005476:	001a      	movs	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	3308      	adds	r3, #8
 8005480:	001a      	movs	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800548c:	46c0      	nop			; (mov r8, r8)
 800548e:	46bd      	mov	sp, r7
 8005490:	b002      	add	sp, #8
 8005492:	bd80      	pop	{r7, pc}

08005494 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80054a2:	46c0      	nop			; (mov r8, r8)
 80054a4:	46bd      	mov	sp, r7
 80054a6:	b002      	add	sp, #8
 80054a8:	bd80      	pop	{r7, pc}

080054aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80054aa:	b580      	push	{r7, lr}
 80054ac:	b084      	sub	sp, #16
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
 80054b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	689a      	ldr	r2, [r3, #8]
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	683a      	ldr	r2, [r7, #0]
 80054ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	683a      	ldr	r2, [r7, #0]
 80054d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	1c5a      	adds	r2, r3, #1
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	601a      	str	r2, [r3, #0]
}
 80054e6:	46c0      	nop			; (mov r8, r8)
 80054e8:	46bd      	mov	sp, r7
 80054ea:	b004      	add	sp, #16
 80054ec:	bd80      	pop	{r7, pc}

080054ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b084      	sub	sp, #16
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
 80054f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	3301      	adds	r3, #1
 8005502:	d103      	bne.n	800550c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	60fb      	str	r3, [r7, #12]
 800550a:	e00c      	b.n	8005526 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	3308      	adds	r3, #8
 8005510:	60fb      	str	r3, [r7, #12]
 8005512:	e002      	b.n	800551a <vListInsert+0x2c>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	60fb      	str	r3, [r7, #12]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68ba      	ldr	r2, [r7, #8]
 8005522:	429a      	cmp	r2, r3
 8005524:	d2f6      	bcs.n	8005514 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	685a      	ldr	r2, [r3, #4]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	683a      	ldr	r2, [r7, #0]
 8005534:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	1c5a      	adds	r2, r3, #1
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	601a      	str	r2, [r3, #0]
}
 8005552:	46c0      	nop			; (mov r8, r8)
 8005554:	46bd      	mov	sp, r7
 8005556:	b004      	add	sp, #16
 8005558:	bd80      	pop	{r7, pc}

0800555a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800555a:	b580      	push	{r7, lr}
 800555c:	b084      	sub	sp, #16
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	6892      	ldr	r2, [r2, #8]
 8005570:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	6852      	ldr	r2, [r2, #4]
 800557a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	429a      	cmp	r2, r3
 8005584:	d103      	bne.n	800558e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	689a      	ldr	r2, [r3, #8]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	1e5a      	subs	r2, r3, #1
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
}
 80055a2:	0018      	movs	r0, r3
 80055a4:	46bd      	mov	sp, r7
 80055a6:	b004      	add	sp, #16
 80055a8:	bd80      	pop	{r7, pc}

080055aa <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b084      	sub	sp, #16
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
 80055b2:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d101      	bne.n	80055c2 <xQueueGenericReset+0x18>
 80055be:	b672      	cpsid	i
 80055c0:	e7fe      	b.n	80055c0 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 80055c2:	f001 fdfd 	bl	80071c0 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d2:	434b      	muls	r3, r1
 80055d4:	18d2      	adds	r2, r2, r3
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055f0:	1e59      	subs	r1, r3, #1
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f6:	434b      	muls	r3, r1
 80055f8:	18d2      	adds	r2, r2, r3
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2244      	movs	r2, #68	; 0x44
 8005602:	21ff      	movs	r1, #255	; 0xff
 8005604:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2245      	movs	r2, #69	; 0x45
 800560a:	21ff      	movs	r1, #255	; 0xff
 800560c:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d10d      	bne.n	8005630 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d013      	beq.n	8005644 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	3310      	adds	r3, #16
 8005620:	0018      	movs	r0, r3
 8005622:	f000 fff5 	bl	8006610 <xTaskRemoveFromEventList>
 8005626:	1e03      	subs	r3, r0, #0
 8005628:	d00c      	beq.n	8005644 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800562a:	f001 fdb9 	bl	80071a0 <vPortYield>
 800562e:	e009      	b.n	8005644 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	3310      	adds	r3, #16
 8005634:	0018      	movs	r0, r3
 8005636:	f7ff ff0f 	bl	8005458 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	3324      	adds	r3, #36	; 0x24
 800563e:	0018      	movs	r0, r3
 8005640:	f7ff ff0a 	bl	8005458 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005644:	f001 fdce 	bl	80071e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005648:	2301      	movs	r3, #1
}
 800564a:	0018      	movs	r0, r3
 800564c:	46bd      	mov	sp, r7
 800564e:	b004      	add	sp, #16
 8005650:	bd80      	pop	{r7, pc}

08005652 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005652:	b590      	push	{r4, r7, lr}
 8005654:	b089      	sub	sp, #36	; 0x24
 8005656:	af02      	add	r7, sp, #8
 8005658:	60f8      	str	r0, [r7, #12]
 800565a:	60b9      	str	r1, [r7, #8]
 800565c:	607a      	str	r2, [r7, #4]
 800565e:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d101      	bne.n	800566a <xQueueGenericCreateStatic+0x18>
 8005666:	b672      	cpsid	i
 8005668:	e7fe      	b.n	8005668 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d101      	bne.n	8005674 <xQueueGenericCreateStatic+0x22>
 8005670:	b672      	cpsid	i
 8005672:	e7fe      	b.n	8005672 <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d002      	beq.n	8005680 <xQueueGenericCreateStatic+0x2e>
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d001      	beq.n	8005684 <xQueueGenericCreateStatic+0x32>
 8005680:	2301      	movs	r3, #1
 8005682:	e000      	b.n	8005686 <xQueueGenericCreateStatic+0x34>
 8005684:	2300      	movs	r3, #0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d101      	bne.n	800568e <xQueueGenericCreateStatic+0x3c>
 800568a:	b672      	cpsid	i
 800568c:	e7fe      	b.n	800568c <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d102      	bne.n	800569a <xQueueGenericCreateStatic+0x48>
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d101      	bne.n	800569e <xQueueGenericCreateStatic+0x4c>
 800569a:	2301      	movs	r3, #1
 800569c:	e000      	b.n	80056a0 <xQueueGenericCreateStatic+0x4e>
 800569e:	2300      	movs	r3, #0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d101      	bne.n	80056a8 <xQueueGenericCreateStatic+0x56>
 80056a4:	b672      	cpsid	i
 80056a6:	e7fe      	b.n	80056a6 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80056a8:	2350      	movs	r3, #80	; 0x50
 80056aa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	2b50      	cmp	r3, #80	; 0x50
 80056b0:	d001      	beq.n	80056b6 <xQueueGenericCreateStatic+0x64>
 80056b2:	b672      	cpsid	i
 80056b4:	e7fe      	b.n	80056b4 <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d00e      	beq.n	80056de <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	2246      	movs	r2, #70	; 0x46
 80056c4:	2101      	movs	r1, #1
 80056c6:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80056c8:	2328      	movs	r3, #40	; 0x28
 80056ca:	18fb      	adds	r3, r7, r3
 80056cc:	781c      	ldrb	r4, [r3, #0]
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	68b9      	ldr	r1, [r7, #8]
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	9300      	str	r3, [sp, #0]
 80056d8:	0023      	movs	r3, r4
 80056da:	f000 f805 	bl	80056e8 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80056de:	697b      	ldr	r3, [r7, #20]
	}
 80056e0:	0018      	movs	r0, r3
 80056e2:	46bd      	mov	sp, r7
 80056e4:	b007      	add	sp, #28
 80056e6:	bd90      	pop	{r4, r7, pc}

080056e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
 80056f4:	001a      	movs	r2, r3
 80056f6:	1cfb      	adds	r3, r7, #3
 80056f8:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d103      	bne.n	8005708 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	69ba      	ldr	r2, [r7, #24]
 8005704:	601a      	str	r2, [r3, #0]
 8005706:	e002      	b.n	800570e <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	68ba      	ldr	r2, [r7, #8]
 8005718:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	2101      	movs	r1, #1
 800571e:	0018      	movs	r0, r3
 8005720:	f7ff ff43 	bl	80055aa <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	1cfa      	adds	r2, r7, #3
 8005728:	214c      	movs	r1, #76	; 0x4c
 800572a:	7812      	ldrb	r2, [r2, #0]
 800572c:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800572e:	46c0      	nop			; (mov r8, r8)
 8005730:	46bd      	mov	sp, r7
 8005732:	b004      	add	sp, #16
 8005734:	bd80      	pop	{r7, pc}

08005736 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005736:	b580      	push	{r7, lr}
 8005738:	b08a      	sub	sp, #40	; 0x28
 800573a:	af00      	add	r7, sp, #0
 800573c:	60f8      	str	r0, [r7, #12]
 800573e:	60b9      	str	r1, [r7, #8]
 8005740:	607a      	str	r2, [r7, #4]
 8005742:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005744:	2300      	movs	r3, #0
 8005746:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800574c:	6a3b      	ldr	r3, [r7, #32]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d101      	bne.n	8005756 <xQueueGenericSend+0x20>
 8005752:	b672      	cpsid	i
 8005754:	e7fe      	b.n	8005754 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d103      	bne.n	8005764 <xQueueGenericSend+0x2e>
 800575c:	6a3b      	ldr	r3, [r7, #32]
 800575e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005760:	2b00      	cmp	r3, #0
 8005762:	d101      	bne.n	8005768 <xQueueGenericSend+0x32>
 8005764:	2301      	movs	r3, #1
 8005766:	e000      	b.n	800576a <xQueueGenericSend+0x34>
 8005768:	2300      	movs	r3, #0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d101      	bne.n	8005772 <xQueueGenericSend+0x3c>
 800576e:	b672      	cpsid	i
 8005770:	e7fe      	b.n	8005770 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	2b02      	cmp	r3, #2
 8005776:	d103      	bne.n	8005780 <xQueueGenericSend+0x4a>
 8005778:	6a3b      	ldr	r3, [r7, #32]
 800577a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800577c:	2b01      	cmp	r3, #1
 800577e:	d101      	bne.n	8005784 <xQueueGenericSend+0x4e>
 8005780:	2301      	movs	r3, #1
 8005782:	e000      	b.n	8005786 <xQueueGenericSend+0x50>
 8005784:	2300      	movs	r3, #0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d101      	bne.n	800578e <xQueueGenericSend+0x58>
 800578a:	b672      	cpsid	i
 800578c:	e7fe      	b.n	800578c <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800578e:	f001 f8dd 	bl	800694c <xTaskGetSchedulerState>
 8005792:	1e03      	subs	r3, r0, #0
 8005794:	d102      	bne.n	800579c <xQueueGenericSend+0x66>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d101      	bne.n	80057a0 <xQueueGenericSend+0x6a>
 800579c:	2301      	movs	r3, #1
 800579e:	e000      	b.n	80057a2 <xQueueGenericSend+0x6c>
 80057a0:	2300      	movs	r3, #0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d101      	bne.n	80057aa <xQueueGenericSend+0x74>
 80057a6:	b672      	cpsid	i
 80057a8:	e7fe      	b.n	80057a8 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80057aa:	f001 fd09 	bl	80071c0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057ae:	6a3b      	ldr	r3, [r7, #32]
 80057b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057b2:	6a3b      	ldr	r3, [r7, #32]
 80057b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d302      	bcc.n	80057c0 <xQueueGenericSend+0x8a>
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d11e      	bne.n	80057fe <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80057c0:	683a      	ldr	r2, [r7, #0]
 80057c2:	68b9      	ldr	r1, [r7, #8]
 80057c4:	6a3b      	ldr	r3, [r7, #32]
 80057c6:	0018      	movs	r0, r3
 80057c8:	f000 f99f 	bl	8005b0a <prvCopyDataToQueue>
 80057cc:	0003      	movs	r3, r0
 80057ce:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057d0:	6a3b      	ldr	r3, [r7, #32]
 80057d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d009      	beq.n	80057ec <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057d8:	6a3b      	ldr	r3, [r7, #32]
 80057da:	3324      	adds	r3, #36	; 0x24
 80057dc:	0018      	movs	r0, r3
 80057de:	f000 ff17 	bl	8006610 <xTaskRemoveFromEventList>
 80057e2:	1e03      	subs	r3, r0, #0
 80057e4:	d007      	beq.n	80057f6 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80057e6:	f001 fcdb 	bl	80071a0 <vPortYield>
 80057ea:	e004      	b.n	80057f6 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d001      	beq.n	80057f6 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80057f2:	f001 fcd5 	bl	80071a0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80057f6:	f001 fcf5 	bl	80071e4 <vPortExitCritical>
				return pdPASS;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e05b      	b.n	80058b6 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d103      	bne.n	800580c <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005804:	f001 fcee 	bl	80071e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005808:	2300      	movs	r3, #0
 800580a:	e054      	b.n	80058b6 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 800580c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580e:	2b00      	cmp	r3, #0
 8005810:	d106      	bne.n	8005820 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005812:	2314      	movs	r3, #20
 8005814:	18fb      	adds	r3, r7, r3
 8005816:	0018      	movs	r0, r3
 8005818:	f000 ff56 	bl	80066c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800581c:	2301      	movs	r3, #1
 800581e:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005820:	f001 fce0 	bl	80071e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005824:	f000 fcfc 	bl	8006220 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005828:	f001 fcca 	bl	80071c0 <vPortEnterCritical>
 800582c:	6a3b      	ldr	r3, [r7, #32]
 800582e:	2244      	movs	r2, #68	; 0x44
 8005830:	5c9b      	ldrb	r3, [r3, r2]
 8005832:	b25b      	sxtb	r3, r3
 8005834:	3301      	adds	r3, #1
 8005836:	d103      	bne.n	8005840 <xQueueGenericSend+0x10a>
 8005838:	6a3b      	ldr	r3, [r7, #32]
 800583a:	2244      	movs	r2, #68	; 0x44
 800583c:	2100      	movs	r1, #0
 800583e:	5499      	strb	r1, [r3, r2]
 8005840:	6a3b      	ldr	r3, [r7, #32]
 8005842:	2245      	movs	r2, #69	; 0x45
 8005844:	5c9b      	ldrb	r3, [r3, r2]
 8005846:	b25b      	sxtb	r3, r3
 8005848:	3301      	adds	r3, #1
 800584a:	d103      	bne.n	8005854 <xQueueGenericSend+0x11e>
 800584c:	6a3b      	ldr	r3, [r7, #32]
 800584e:	2245      	movs	r2, #69	; 0x45
 8005850:	2100      	movs	r1, #0
 8005852:	5499      	strb	r1, [r3, r2]
 8005854:	f001 fcc6 	bl	80071e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005858:	1d3a      	adds	r2, r7, #4
 800585a:	2314      	movs	r3, #20
 800585c:	18fb      	adds	r3, r7, r3
 800585e:	0011      	movs	r1, r2
 8005860:	0018      	movs	r0, r3
 8005862:	f000 ff45 	bl	80066f0 <xTaskCheckForTimeOut>
 8005866:	1e03      	subs	r3, r0, #0
 8005868:	d11e      	bne.n	80058a8 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800586a:	6a3b      	ldr	r3, [r7, #32]
 800586c:	0018      	movs	r0, r3
 800586e:	f000 fa51 	bl	8005d14 <prvIsQueueFull>
 8005872:	1e03      	subs	r3, r0, #0
 8005874:	d011      	beq.n	800589a <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005876:	6a3b      	ldr	r3, [r7, #32]
 8005878:	3310      	adds	r3, #16
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	0011      	movs	r1, r2
 800587e:	0018      	movs	r0, r3
 8005880:	f000 fe82 	bl	8006588 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005884:	6a3b      	ldr	r3, [r7, #32]
 8005886:	0018      	movs	r0, r3
 8005888:	f000 f9d0 	bl	8005c2c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800588c:	f000 fcd4 	bl	8006238 <xTaskResumeAll>
 8005890:	1e03      	subs	r3, r0, #0
 8005892:	d18a      	bne.n	80057aa <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8005894:	f001 fc84 	bl	80071a0 <vPortYield>
 8005898:	e787      	b.n	80057aa <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800589a:	6a3b      	ldr	r3, [r7, #32]
 800589c:	0018      	movs	r0, r3
 800589e:	f000 f9c5 	bl	8005c2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058a2:	f000 fcc9 	bl	8006238 <xTaskResumeAll>
 80058a6:	e780      	b.n	80057aa <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80058a8:	6a3b      	ldr	r3, [r7, #32]
 80058aa:	0018      	movs	r0, r3
 80058ac:	f000 f9be 	bl	8005c2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058b0:	f000 fcc2 	bl	8006238 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80058b4:	2300      	movs	r3, #0
		}
	}
}
 80058b6:	0018      	movs	r0, r3
 80058b8:	46bd      	mov	sp, r7
 80058ba:	b00a      	add	sp, #40	; 0x28
 80058bc:	bd80      	pop	{r7, pc}

080058be <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80058be:	b590      	push	{r4, r7, lr}
 80058c0:	b089      	sub	sp, #36	; 0x24
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	60f8      	str	r0, [r7, #12]
 80058c6:	60b9      	str	r1, [r7, #8]
 80058c8:	607a      	str	r2, [r7, #4]
 80058ca:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d101      	bne.n	80058da <xQueueGenericSendFromISR+0x1c>
 80058d6:	b672      	cpsid	i
 80058d8:	e7fe      	b.n	80058d8 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d103      	bne.n	80058e8 <xQueueGenericSendFromISR+0x2a>
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d101      	bne.n	80058ec <xQueueGenericSendFromISR+0x2e>
 80058e8:	2301      	movs	r3, #1
 80058ea:	e000      	b.n	80058ee <xQueueGenericSendFromISR+0x30>
 80058ec:	2300      	movs	r3, #0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d101      	bne.n	80058f6 <xQueueGenericSendFromISR+0x38>
 80058f2:	b672      	cpsid	i
 80058f4:	e7fe      	b.n	80058f4 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	d103      	bne.n	8005904 <xQueueGenericSendFromISR+0x46>
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005900:	2b01      	cmp	r3, #1
 8005902:	d101      	bne.n	8005908 <xQueueGenericSendFromISR+0x4a>
 8005904:	2301      	movs	r3, #1
 8005906:	e000      	b.n	800590a <xQueueGenericSendFromISR+0x4c>
 8005908:	2300      	movs	r3, #0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d101      	bne.n	8005912 <xQueueGenericSendFromISR+0x54>
 800590e:	b672      	cpsid	i
 8005910:	e7fe      	b.n	8005910 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005912:	f001 fc7f 	bl	8007214 <ulSetInterruptMaskFromISR>
 8005916:	0003      	movs	r3, r0
 8005918:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005922:	429a      	cmp	r2, r3
 8005924:	d302      	bcc.n	800592c <xQueueGenericSendFromISR+0x6e>
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b02      	cmp	r3, #2
 800592a:	d12e      	bne.n	800598a <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800592c:	2413      	movs	r4, #19
 800592e:	193b      	adds	r3, r7, r4
 8005930:	69ba      	ldr	r2, [r7, #24]
 8005932:	2145      	movs	r1, #69	; 0x45
 8005934:	5c52      	ldrb	r2, [r2, r1]
 8005936:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005938:	683a      	ldr	r2, [r7, #0]
 800593a:	68b9      	ldr	r1, [r7, #8]
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	0018      	movs	r0, r3
 8005940:	f000 f8e3 	bl	8005b0a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005944:	193b      	adds	r3, r7, r4
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	b25b      	sxtb	r3, r3
 800594a:	3301      	adds	r3, #1
 800594c:	d111      	bne.n	8005972 <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005952:	2b00      	cmp	r3, #0
 8005954:	d016      	beq.n	8005984 <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	3324      	adds	r3, #36	; 0x24
 800595a:	0018      	movs	r0, r3
 800595c:	f000 fe58 	bl	8006610 <xTaskRemoveFromEventList>
 8005960:	1e03      	subs	r3, r0, #0
 8005962:	d00f      	beq.n	8005984 <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00c      	beq.n	8005984 <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2201      	movs	r2, #1
 800596e:	601a      	str	r2, [r3, #0]
 8005970:	e008      	b.n	8005984 <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005972:	2313      	movs	r3, #19
 8005974:	18fb      	adds	r3, r7, r3
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	3301      	adds	r3, #1
 800597a:	b2db      	uxtb	r3, r3
 800597c:	b259      	sxtb	r1, r3
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	2245      	movs	r2, #69	; 0x45
 8005982:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8005984:	2301      	movs	r3, #1
 8005986:	61fb      	str	r3, [r7, #28]
		{
 8005988:	e001      	b.n	800598e <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800598a:	2300      	movs	r3, #0
 800598c:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	0018      	movs	r0, r3
 8005992:	f001 fc45 	bl	8007220 <vClearInterruptMaskFromISR>

	return xReturn;
 8005996:	69fb      	ldr	r3, [r7, #28]
}
 8005998:	0018      	movs	r0, r3
 800599a:	46bd      	mov	sp, r7
 800599c:	b009      	add	sp, #36	; 0x24
 800599e:	bd90      	pop	{r4, r7, pc}

080059a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b08a      	sub	sp, #40	; 0x28
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80059ac:	2300      	movs	r3, #0
 80059ae:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80059b4:	6a3b      	ldr	r3, [r7, #32]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d101      	bne.n	80059be <xQueueReceive+0x1e>
 80059ba:	b672      	cpsid	i
 80059bc:	e7fe      	b.n	80059bc <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d103      	bne.n	80059cc <xQueueReceive+0x2c>
 80059c4:	6a3b      	ldr	r3, [r7, #32]
 80059c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d101      	bne.n	80059d0 <xQueueReceive+0x30>
 80059cc:	2301      	movs	r3, #1
 80059ce:	e000      	b.n	80059d2 <xQueueReceive+0x32>
 80059d0:	2300      	movs	r3, #0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d101      	bne.n	80059da <xQueueReceive+0x3a>
 80059d6:	b672      	cpsid	i
 80059d8:	e7fe      	b.n	80059d8 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059da:	f000 ffb7 	bl	800694c <xTaskGetSchedulerState>
 80059de:	1e03      	subs	r3, r0, #0
 80059e0:	d102      	bne.n	80059e8 <xQueueReceive+0x48>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d101      	bne.n	80059ec <xQueueReceive+0x4c>
 80059e8:	2301      	movs	r3, #1
 80059ea:	e000      	b.n	80059ee <xQueueReceive+0x4e>
 80059ec:	2300      	movs	r3, #0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d101      	bne.n	80059f6 <xQueueReceive+0x56>
 80059f2:	b672      	cpsid	i
 80059f4:	e7fe      	b.n	80059f4 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80059f6:	f001 fbe3 	bl	80071c0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059fa:	6a3b      	ldr	r3, [r7, #32]
 80059fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fe:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d01a      	beq.n	8005a3c <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a06:	68ba      	ldr	r2, [r7, #8]
 8005a08:	6a3b      	ldr	r3, [r7, #32]
 8005a0a:	0011      	movs	r1, r2
 8005a0c:	0018      	movs	r0, r3
 8005a0e:	f000 f8e7 	bl	8005be0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	1e5a      	subs	r2, r3, #1
 8005a16:	6a3b      	ldr	r3, [r7, #32]
 8005a18:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a1a:	6a3b      	ldr	r3, [r7, #32]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d008      	beq.n	8005a34 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a22:	6a3b      	ldr	r3, [r7, #32]
 8005a24:	3310      	adds	r3, #16
 8005a26:	0018      	movs	r0, r3
 8005a28:	f000 fdf2 	bl	8006610 <xTaskRemoveFromEventList>
 8005a2c:	1e03      	subs	r3, r0, #0
 8005a2e:	d001      	beq.n	8005a34 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a30:	f001 fbb6 	bl	80071a0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a34:	f001 fbd6 	bl	80071e4 <vPortExitCritical>
				return pdPASS;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e062      	b.n	8005b02 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d103      	bne.n	8005a4a <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a42:	f001 fbcf 	bl	80071e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a46:	2300      	movs	r3, #0
 8005a48:	e05b      	b.n	8005b02 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d106      	bne.n	8005a5e <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a50:	2314      	movs	r3, #20
 8005a52:	18fb      	adds	r3, r7, r3
 8005a54:	0018      	movs	r0, r3
 8005a56:	f000 fe37 	bl	80066c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a5e:	f001 fbc1 	bl	80071e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a62:	f000 fbdd 	bl	8006220 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a66:	f001 fbab 	bl	80071c0 <vPortEnterCritical>
 8005a6a:	6a3b      	ldr	r3, [r7, #32]
 8005a6c:	2244      	movs	r2, #68	; 0x44
 8005a6e:	5c9b      	ldrb	r3, [r3, r2]
 8005a70:	b25b      	sxtb	r3, r3
 8005a72:	3301      	adds	r3, #1
 8005a74:	d103      	bne.n	8005a7e <xQueueReceive+0xde>
 8005a76:	6a3b      	ldr	r3, [r7, #32]
 8005a78:	2244      	movs	r2, #68	; 0x44
 8005a7a:	2100      	movs	r1, #0
 8005a7c:	5499      	strb	r1, [r3, r2]
 8005a7e:	6a3b      	ldr	r3, [r7, #32]
 8005a80:	2245      	movs	r2, #69	; 0x45
 8005a82:	5c9b      	ldrb	r3, [r3, r2]
 8005a84:	b25b      	sxtb	r3, r3
 8005a86:	3301      	adds	r3, #1
 8005a88:	d103      	bne.n	8005a92 <xQueueReceive+0xf2>
 8005a8a:	6a3b      	ldr	r3, [r7, #32]
 8005a8c:	2245      	movs	r2, #69	; 0x45
 8005a8e:	2100      	movs	r1, #0
 8005a90:	5499      	strb	r1, [r3, r2]
 8005a92:	f001 fba7 	bl	80071e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a96:	1d3a      	adds	r2, r7, #4
 8005a98:	2314      	movs	r3, #20
 8005a9a:	18fb      	adds	r3, r7, r3
 8005a9c:	0011      	movs	r1, r2
 8005a9e:	0018      	movs	r0, r3
 8005aa0:	f000 fe26 	bl	80066f0 <xTaskCheckForTimeOut>
 8005aa4:	1e03      	subs	r3, r0, #0
 8005aa6:	d11e      	bne.n	8005ae6 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005aa8:	6a3b      	ldr	r3, [r7, #32]
 8005aaa:	0018      	movs	r0, r3
 8005aac:	f000 f91c 	bl	8005ce8 <prvIsQueueEmpty>
 8005ab0:	1e03      	subs	r3, r0, #0
 8005ab2:	d011      	beq.n	8005ad8 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ab4:	6a3b      	ldr	r3, [r7, #32]
 8005ab6:	3324      	adds	r3, #36	; 0x24
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	0011      	movs	r1, r2
 8005abc:	0018      	movs	r0, r3
 8005abe:	f000 fd63 	bl	8006588 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005ac2:	6a3b      	ldr	r3, [r7, #32]
 8005ac4:	0018      	movs	r0, r3
 8005ac6:	f000 f8b1 	bl	8005c2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005aca:	f000 fbb5 	bl	8006238 <xTaskResumeAll>
 8005ace:	1e03      	subs	r3, r0, #0
 8005ad0:	d191      	bne.n	80059f6 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8005ad2:	f001 fb65 	bl	80071a0 <vPortYield>
 8005ad6:	e78e      	b.n	80059f6 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005ad8:	6a3b      	ldr	r3, [r7, #32]
 8005ada:	0018      	movs	r0, r3
 8005adc:	f000 f8a6 	bl	8005c2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ae0:	f000 fbaa 	bl	8006238 <xTaskResumeAll>
 8005ae4:	e787      	b.n	80059f6 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005ae6:	6a3b      	ldr	r3, [r7, #32]
 8005ae8:	0018      	movs	r0, r3
 8005aea:	f000 f89f 	bl	8005c2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005aee:	f000 fba3 	bl	8006238 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005af2:	6a3b      	ldr	r3, [r7, #32]
 8005af4:	0018      	movs	r0, r3
 8005af6:	f000 f8f7 	bl	8005ce8 <prvIsQueueEmpty>
 8005afa:	1e03      	subs	r3, r0, #0
 8005afc:	d100      	bne.n	8005b00 <xQueueReceive+0x160>
 8005afe:	e77a      	b.n	80059f6 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b00:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005b02:	0018      	movs	r0, r3
 8005b04:	46bd      	mov	sp, r7
 8005b06:	b00a      	add	sp, #40	; 0x28
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b086      	sub	sp, #24
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	60f8      	str	r0, [r7, #12]
 8005b12:	60b9      	str	r1, [r7, #8]
 8005b14:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005b16:	2300      	movs	r3, #0
 8005b18:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d10e      	bne.n	8005b46 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d14e      	bne.n	8005bce <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	0018      	movs	r0, r3
 8005b36:	f000 ff25 	bl	8006984 <xTaskPriorityDisinherit>
 8005b3a:	0003      	movs	r3, r0
 8005b3c:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2200      	movs	r2, #0
 8005b42:	605a      	str	r2, [r3, #4]
 8005b44:	e043      	b.n	8005bce <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d119      	bne.n	8005b80 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6898      	ldr	r0, [r3, #8]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	0019      	movs	r1, r3
 8005b58:	f001 fd96 	bl	8007688 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	689a      	ldr	r2, [r3, #8]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b64:	18d2      	adds	r2, r2, r3
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	689a      	ldr	r2, [r3, #8]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d32b      	bcc.n	8005bce <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	609a      	str	r2, [r3, #8]
 8005b7e:	e026      	b.n	8005bce <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	68d8      	ldr	r0, [r3, #12]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	0019      	movs	r1, r3
 8005b8c:	f001 fd7c 	bl	8007688 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	68da      	ldr	r2, [r3, #12]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b98:	425b      	negs	r3, r3
 8005b9a:	18d2      	adds	r2, r2, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	68da      	ldr	r2, [r3, #12]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d207      	bcs.n	8005bbc <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	685a      	ldr	r2, [r3, #4]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb4:	425b      	negs	r3, r3
 8005bb6:	18d2      	adds	r2, r2, r3
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d105      	bne.n	8005bce <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d002      	beq.n	8005bce <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	1c5a      	adds	r2, r3, #1
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005bd6:	697b      	ldr	r3, [r7, #20]
}
 8005bd8:	0018      	movs	r0, r3
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	b006      	add	sp, #24
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d018      	beq.n	8005c24 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	68da      	ldr	r2, [r3, #12]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfa:	18d2      	adds	r2, r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	68da      	ldr	r2, [r3, #12]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d303      	bcc.n	8005c14 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	68d9      	ldr	r1, [r3, #12]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	0018      	movs	r0, r3
 8005c20:	f001 fd32 	bl	8007688 <memcpy>
	}
}
 8005c24:	46c0      	nop			; (mov r8, r8)
 8005c26:	46bd      	mov	sp, r7
 8005c28:	b002      	add	sp, #8
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005c34:	f001 fac4 	bl	80071c0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005c38:	230f      	movs	r3, #15
 8005c3a:	18fb      	adds	r3, r7, r3
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	2145      	movs	r1, #69	; 0x45
 8005c40:	5c52      	ldrb	r2, [r2, r1]
 8005c42:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c44:	e013      	b.n	8005c6e <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d016      	beq.n	8005c7c <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	3324      	adds	r3, #36	; 0x24
 8005c52:	0018      	movs	r0, r3
 8005c54:	f000 fcdc 	bl	8006610 <xTaskRemoveFromEventList>
 8005c58:	1e03      	subs	r3, r0, #0
 8005c5a:	d001      	beq.n	8005c60 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005c5c:	f000 fd98 	bl	8006790 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005c60:	210f      	movs	r1, #15
 8005c62:	187b      	adds	r3, r7, r1
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	3b01      	subs	r3, #1
 8005c68:	b2da      	uxtb	r2, r3
 8005c6a:	187b      	adds	r3, r7, r1
 8005c6c:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c6e:	230f      	movs	r3, #15
 8005c70:	18fb      	adds	r3, r7, r3
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	b25b      	sxtb	r3, r3
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	dce5      	bgt.n	8005c46 <prvUnlockQueue+0x1a>
 8005c7a:	e000      	b.n	8005c7e <prvUnlockQueue+0x52>
					break;
 8005c7c:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2245      	movs	r2, #69	; 0x45
 8005c82:	21ff      	movs	r1, #255	; 0xff
 8005c84:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8005c86:	f001 faad 	bl	80071e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005c8a:	f001 fa99 	bl	80071c0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005c8e:	230e      	movs	r3, #14
 8005c90:	18fb      	adds	r3, r7, r3
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	2144      	movs	r1, #68	; 0x44
 8005c96:	5c52      	ldrb	r2, [r2, r1]
 8005c98:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c9a:	e013      	b.n	8005cc4 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d016      	beq.n	8005cd2 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	3310      	adds	r3, #16
 8005ca8:	0018      	movs	r0, r3
 8005caa:	f000 fcb1 	bl	8006610 <xTaskRemoveFromEventList>
 8005cae:	1e03      	subs	r3, r0, #0
 8005cb0:	d001      	beq.n	8005cb6 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8005cb2:	f000 fd6d 	bl	8006790 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005cb6:	210e      	movs	r1, #14
 8005cb8:	187b      	adds	r3, r7, r1
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	b2da      	uxtb	r2, r3
 8005cc0:	187b      	adds	r3, r7, r1
 8005cc2:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005cc4:	230e      	movs	r3, #14
 8005cc6:	18fb      	adds	r3, r7, r3
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	b25b      	sxtb	r3, r3
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	dce5      	bgt.n	8005c9c <prvUnlockQueue+0x70>
 8005cd0:	e000      	b.n	8005cd4 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8005cd2:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2244      	movs	r2, #68	; 0x44
 8005cd8:	21ff      	movs	r1, #255	; 0xff
 8005cda:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8005cdc:	f001 fa82 	bl	80071e4 <vPortExitCritical>
}
 8005ce0:	46c0      	nop			; (mov r8, r8)
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	b004      	add	sp, #16
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005cf0:	f001 fa66 	bl	80071c0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d102      	bne.n	8005d02 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	60fb      	str	r3, [r7, #12]
 8005d00:	e001      	b.n	8005d06 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005d02:	2300      	movs	r3, #0
 8005d04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d06:	f001 fa6d 	bl	80071e4 <vPortExitCritical>

	return xReturn;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
}
 8005d0c:	0018      	movs	r0, r3
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	b004      	add	sp, #16
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d1c:	f001 fa50 	bl	80071c0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d102      	bne.n	8005d32 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	60fb      	str	r3, [r7, #12]
 8005d30:	e001      	b.n	8005d36 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005d32:	2300      	movs	r3, #0
 8005d34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d36:	f001 fa55 	bl	80071e4 <vPortExitCritical>

	return xReturn;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
}
 8005d3c:	0018      	movs	r0, r3
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	b004      	add	sp, #16
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d4e:	2300      	movs	r3, #0
 8005d50:	60fb      	str	r3, [r7, #12]
 8005d52:	e015      	b.n	8005d80 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005d54:	4b0e      	ldr	r3, [pc, #56]	; (8005d90 <vQueueAddToRegistry+0x4c>)
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	00d2      	lsls	r2, r2, #3
 8005d5a:	58d3      	ldr	r3, [r2, r3]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d10c      	bne.n	8005d7a <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005d60:	4b0b      	ldr	r3, [pc, #44]	; (8005d90 <vQueueAddToRegistry+0x4c>)
 8005d62:	68fa      	ldr	r2, [r7, #12]
 8005d64:	00d2      	lsls	r2, r2, #3
 8005d66:	6839      	ldr	r1, [r7, #0]
 8005d68:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005d6a:	4a09      	ldr	r2, [pc, #36]	; (8005d90 <vQueueAddToRegistry+0x4c>)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	00db      	lsls	r3, r3, #3
 8005d70:	18d3      	adds	r3, r2, r3
 8005d72:	3304      	adds	r3, #4
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005d78:	e006      	b.n	8005d88 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	60fb      	str	r3, [r7, #12]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2b07      	cmp	r3, #7
 8005d84:	d9e6      	bls.n	8005d54 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005d86:	46c0      	nop			; (mov r8, r8)
 8005d88:	46c0      	nop			; (mov r8, r8)
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	b004      	add	sp, #16
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	20000a98 	.word	0x20000a98

08005d94 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b086      	sub	sp, #24
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005da4:	f001 fa0c 	bl	80071c0 <vPortEnterCritical>
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	2244      	movs	r2, #68	; 0x44
 8005dac:	5c9b      	ldrb	r3, [r3, r2]
 8005dae:	b25b      	sxtb	r3, r3
 8005db0:	3301      	adds	r3, #1
 8005db2:	d103      	bne.n	8005dbc <vQueueWaitForMessageRestricted+0x28>
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	2244      	movs	r2, #68	; 0x44
 8005db8:	2100      	movs	r1, #0
 8005dba:	5499      	strb	r1, [r3, r2]
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	2245      	movs	r2, #69	; 0x45
 8005dc0:	5c9b      	ldrb	r3, [r3, r2]
 8005dc2:	b25b      	sxtb	r3, r3
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	d103      	bne.n	8005dd0 <vQueueWaitForMessageRestricted+0x3c>
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	2245      	movs	r2, #69	; 0x45
 8005dcc:	2100      	movs	r1, #0
 8005dce:	5499      	strb	r1, [r3, r2]
 8005dd0:	f001 fa08 	bl	80071e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d106      	bne.n	8005dea <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	3324      	adds	r3, #36	; 0x24
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	68b9      	ldr	r1, [r7, #8]
 8005de4:	0018      	movs	r0, r3
 8005de6:	f000 fbed 	bl	80065c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	0018      	movs	r0, r3
 8005dee:	f7ff ff1d 	bl	8005c2c <prvUnlockQueue>
	}
 8005df2:	46c0      	nop			; (mov r8, r8)
 8005df4:	46bd      	mov	sp, r7
 8005df6:	b006      	add	sp, #24
 8005df8:	bd80      	pop	{r7, pc}

08005dfa <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005dfa:	b590      	push	{r4, r7, lr}
 8005dfc:	b08d      	sub	sp, #52	; 0x34
 8005dfe:	af04      	add	r7, sp, #16
 8005e00:	60f8      	str	r0, [r7, #12]
 8005e02:	60b9      	str	r1, [r7, #8]
 8005e04:	607a      	str	r2, [r7, #4]
 8005e06:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d101      	bne.n	8005e12 <xTaskCreateStatic+0x18>
 8005e0e:	b672      	cpsid	i
 8005e10:	e7fe      	b.n	8005e10 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8005e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d101      	bne.n	8005e1c <xTaskCreateStatic+0x22>
 8005e18:	b672      	cpsid	i
 8005e1a:	e7fe      	b.n	8005e1a <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005e1c:	23bc      	movs	r3, #188	; 0xbc
 8005e1e:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	2bbc      	cmp	r3, #188	; 0xbc
 8005e24:	d001      	beq.n	8005e2a <xTaskCreateStatic+0x30>
 8005e26:	b672      	cpsid	i
 8005e28:	e7fe      	b.n	8005e28 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d020      	beq.n	8005e72 <xTaskCreateStatic+0x78>
 8005e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d01d      	beq.n	8005e72 <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e38:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e3e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	22b9      	movs	r2, #185	; 0xb9
 8005e44:	2102      	movs	r1, #2
 8005e46:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005e48:	683c      	ldr	r4, [r7, #0]
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	68b9      	ldr	r1, [r7, #8]
 8005e4e:	68f8      	ldr	r0, [r7, #12]
 8005e50:	2300      	movs	r3, #0
 8005e52:	9303      	str	r3, [sp, #12]
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	9302      	str	r3, [sp, #8]
 8005e58:	2318      	movs	r3, #24
 8005e5a:	18fb      	adds	r3, r7, r3
 8005e5c:	9301      	str	r3, [sp, #4]
 8005e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e60:	9300      	str	r3, [sp, #0]
 8005e62:	0023      	movs	r3, r4
 8005e64:	f000 f858 	bl	8005f18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	0018      	movs	r0, r3
 8005e6c:	f000 f8ec 	bl	8006048 <prvAddNewTaskToReadyList>
 8005e70:	e001      	b.n	8005e76 <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 8005e72:	2300      	movs	r3, #0
 8005e74:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005e76:	69bb      	ldr	r3, [r7, #24]
	}
 8005e78:	0018      	movs	r0, r3
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	b009      	add	sp, #36	; 0x24
 8005e7e:	bd90      	pop	{r4, r7, pc}

08005e80 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005e80:	b590      	push	{r4, r7, lr}
 8005e82:	b08d      	sub	sp, #52	; 0x34
 8005e84:	af04      	add	r7, sp, #16
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	603b      	str	r3, [r7, #0]
 8005e8c:	1dbb      	adds	r3, r7, #6
 8005e8e:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e90:	1dbb      	adds	r3, r7, #6
 8005e92:	881b      	ldrh	r3, [r3, #0]
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	0018      	movs	r0, r3
 8005e98:	f001 fa2a 	bl	80072f0 <pvPortMalloc>
 8005e9c:	0003      	movs	r3, r0
 8005e9e:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d010      	beq.n	8005ec8 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005ea6:	20bc      	movs	r0, #188	; 0xbc
 8005ea8:	f001 fa22 	bl	80072f0 <pvPortMalloc>
 8005eac:	0003      	movs	r3, r0
 8005eae:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d003      	beq.n	8005ebe <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	697a      	ldr	r2, [r7, #20]
 8005eba:	631a      	str	r2, [r3, #48]	; 0x30
 8005ebc:	e006      	b.n	8005ecc <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	0018      	movs	r0, r3
 8005ec2:	f001 fabb 	bl	800743c <vPortFree>
 8005ec6:	e001      	b.n	8005ecc <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d01a      	beq.n	8005f08 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	22b9      	movs	r2, #185	; 0xb9
 8005ed6:	2100      	movs	r1, #0
 8005ed8:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005eda:	1dbb      	adds	r3, r7, #6
 8005edc:	881a      	ldrh	r2, [r3, #0]
 8005ede:	683c      	ldr	r4, [r7, #0]
 8005ee0:	68b9      	ldr	r1, [r7, #8]
 8005ee2:	68f8      	ldr	r0, [r7, #12]
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	9303      	str	r3, [sp, #12]
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	9302      	str	r3, [sp, #8]
 8005eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eee:	9301      	str	r3, [sp, #4]
 8005ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef2:	9300      	str	r3, [sp, #0]
 8005ef4:	0023      	movs	r3, r4
 8005ef6:	f000 f80f 	bl	8005f18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	0018      	movs	r0, r3
 8005efe:	f000 f8a3 	bl	8006048 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005f02:	2301      	movs	r3, #1
 8005f04:	61bb      	str	r3, [r7, #24]
 8005f06:	e002      	b.n	8005f0e <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	425b      	negs	r3, r3
 8005f0c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005f0e:	69bb      	ldr	r3, [r7, #24]
	}
 8005f10:	0018      	movs	r0, r3
 8005f12:	46bd      	mov	sp, r7
 8005f14:	b009      	add	sp, #36	; 0x24
 8005f16:	bd90      	pop	{r4, r7, pc}

08005f18 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b086      	sub	sp, #24
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	607a      	str	r2, [r7, #4]
 8005f24:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f28:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	001a      	movs	r2, r3
 8005f30:	21a5      	movs	r1, #165	; 0xa5
 8005f32:	f001 fbb2 	bl	800769a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	493e      	ldr	r1, [pc, #248]	; (8006038 <prvInitialiseNewTask+0x120>)
 8005f3e:	468c      	mov	ip, r1
 8005f40:	4463      	add	r3, ip
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	18d3      	adds	r3, r2, r3
 8005f46:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	2207      	movs	r2, #7
 8005f4c:	4393      	bics	r3, r2
 8005f4e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	2207      	movs	r2, #7
 8005f54:	4013      	ands	r3, r2
 8005f56:	d001      	beq.n	8005f5c <prvInitialiseNewTask+0x44>
 8005f58:	b672      	cpsid	i
 8005f5a:	e7fe      	b.n	8005f5a <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	617b      	str	r3, [r7, #20]
 8005f60:	e013      	b.n	8005f8a <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005f62:	68ba      	ldr	r2, [r7, #8]
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	18d3      	adds	r3, r2, r3
 8005f68:	7818      	ldrb	r0, [r3, #0]
 8005f6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f6c:	2134      	movs	r1, #52	; 0x34
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	18d3      	adds	r3, r2, r3
 8005f72:	185b      	adds	r3, r3, r1
 8005f74:	1c02      	adds	r2, r0, #0
 8005f76:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005f78:	68ba      	ldr	r2, [r7, #8]
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	18d3      	adds	r3, r2, r3
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d006      	beq.n	8005f92 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	3301      	adds	r3, #1
 8005f88:	617b      	str	r3, [r7, #20]
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	2b0f      	cmp	r3, #15
 8005f8e:	d9e8      	bls.n	8005f62 <prvInitialiseNewTask+0x4a>
 8005f90:	e000      	b.n	8005f94 <prvInitialiseNewTask+0x7c>
		{
			break;
 8005f92:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f96:	2243      	movs	r2, #67	; 0x43
 8005f98:	2100      	movs	r1, #0
 8005f9a:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005f9c:	6a3b      	ldr	r3, [r7, #32]
 8005f9e:	2b37      	cmp	r3, #55	; 0x37
 8005fa0:	d901      	bls.n	8005fa6 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005fa2:	2337      	movs	r3, #55	; 0x37
 8005fa4:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa8:	6a3a      	ldr	r2, [r7, #32]
 8005faa:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fae:	6a3a      	ldr	r2, [r7, #32]
 8005fb0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fba:	3304      	adds	r3, #4
 8005fbc:	0018      	movs	r0, r3
 8005fbe:	f7ff fa69 	bl	8005494 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc4:	3318      	adds	r3, #24
 8005fc6:	0018      	movs	r0, r3
 8005fc8:	f7ff fa64 	bl	8005494 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fd0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fd2:	6a3b      	ldr	r3, [r7, #32]
 8005fd4:	2238      	movs	r2, #56	; 0x38
 8005fd6:	1ad2      	subs	r2, r2, r3
 8005fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fda:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fe0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe4:	22b4      	movs	r2, #180	; 0xb4
 8005fe6:	2100      	movs	r1, #0
 8005fe8:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fec:	22b8      	movs	r2, #184	; 0xb8
 8005fee:	2100      	movs	r1, #0
 8005ff0:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff4:	3354      	adds	r3, #84	; 0x54
 8005ff6:	2260      	movs	r2, #96	; 0x60
 8005ff8:	2100      	movs	r1, #0
 8005ffa:	0018      	movs	r0, r3
 8005ffc:	f001 fb4d 	bl	800769a <memset>
 8006000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006002:	4a0e      	ldr	r2, [pc, #56]	; (800603c <prvInitialiseNewTask+0x124>)
 8006004:	659a      	str	r2, [r3, #88]	; 0x58
 8006006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006008:	4a0d      	ldr	r2, [pc, #52]	; (8006040 <prvInitialiseNewTask+0x128>)
 800600a:	65da      	str	r2, [r3, #92]	; 0x5c
 800600c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600e:	4a0d      	ldr	r2, [pc, #52]	; (8006044 <prvInitialiseNewTask+0x12c>)
 8006010:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006012:	683a      	ldr	r2, [r7, #0]
 8006014:	68f9      	ldr	r1, [r7, #12]
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	0018      	movs	r0, r3
 800601a:	f001 f833 	bl	8007084 <pxPortInitialiseStack>
 800601e:	0002      	movs	r2, r0
 8006020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006022:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006026:	2b00      	cmp	r3, #0
 8006028:	d002      	beq.n	8006030 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800602a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800602e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006030:	46c0      	nop			; (mov r8, r8)
 8006032:	46bd      	mov	sp, r7
 8006034:	b006      	add	sp, #24
 8006036:	bd80      	pop	{r7, pc}
 8006038:	3fffffff 	.word	0x3fffffff
 800603c:	08007e18 	.word	0x08007e18
 8006040:	08007e38 	.word	0x08007e38
 8006044:	08007df8 	.word	0x08007df8

08006048 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006050:	f001 f8b6 	bl	80071c0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006054:	4b2a      	ldr	r3, [pc, #168]	; (8006100 <prvAddNewTaskToReadyList+0xb8>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	1c5a      	adds	r2, r3, #1
 800605a:	4b29      	ldr	r3, [pc, #164]	; (8006100 <prvAddNewTaskToReadyList+0xb8>)
 800605c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800605e:	4b29      	ldr	r3, [pc, #164]	; (8006104 <prvAddNewTaskToReadyList+0xbc>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d109      	bne.n	800607a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006066:	4b27      	ldr	r3, [pc, #156]	; (8006104 <prvAddNewTaskToReadyList+0xbc>)
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800606c:	4b24      	ldr	r3, [pc, #144]	; (8006100 <prvAddNewTaskToReadyList+0xb8>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2b01      	cmp	r3, #1
 8006072:	d110      	bne.n	8006096 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006074:	f000 fba6 	bl	80067c4 <prvInitialiseTaskLists>
 8006078:	e00d      	b.n	8006096 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800607a:	4b23      	ldr	r3, [pc, #140]	; (8006108 <prvAddNewTaskToReadyList+0xc0>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d109      	bne.n	8006096 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006082:	4b20      	ldr	r3, [pc, #128]	; (8006104 <prvAddNewTaskToReadyList+0xbc>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608c:	429a      	cmp	r2, r3
 800608e:	d802      	bhi.n	8006096 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006090:	4b1c      	ldr	r3, [pc, #112]	; (8006104 <prvAddNewTaskToReadyList+0xbc>)
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006096:	4b1d      	ldr	r3, [pc, #116]	; (800610c <prvAddNewTaskToReadyList+0xc4>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	1c5a      	adds	r2, r3, #1
 800609c:	4b1b      	ldr	r3, [pc, #108]	; (800610c <prvAddNewTaskToReadyList+0xc4>)
 800609e:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80060a0:	4b1a      	ldr	r3, [pc, #104]	; (800610c <prvAddNewTaskToReadyList+0xc4>)
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ac:	4b18      	ldr	r3, [pc, #96]	; (8006110 <prvAddNewTaskToReadyList+0xc8>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d903      	bls.n	80060bc <prvAddNewTaskToReadyList+0x74>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060b8:	4b15      	ldr	r3, [pc, #84]	; (8006110 <prvAddNewTaskToReadyList+0xc8>)
 80060ba:	601a      	str	r2, [r3, #0]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060c0:	0013      	movs	r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	189b      	adds	r3, r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4a12      	ldr	r2, [pc, #72]	; (8006114 <prvAddNewTaskToReadyList+0xcc>)
 80060ca:	189a      	adds	r2, r3, r2
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	3304      	adds	r3, #4
 80060d0:	0019      	movs	r1, r3
 80060d2:	0010      	movs	r0, r2
 80060d4:	f7ff f9e9 	bl	80054aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80060d8:	f001 f884 	bl	80071e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80060dc:	4b0a      	ldr	r3, [pc, #40]	; (8006108 <prvAddNewTaskToReadyList+0xc0>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d008      	beq.n	80060f6 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80060e4:	4b07      	ldr	r3, [pc, #28]	; (8006104 <prvAddNewTaskToReadyList+0xbc>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d201      	bcs.n	80060f6 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80060f2:	f001 f855 	bl	80071a0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060f6:	46c0      	nop			; (mov r8, r8)
 80060f8:	46bd      	mov	sp, r7
 80060fa:	b002      	add	sp, #8
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	46c0      	nop			; (mov r8, r8)
 8006100:	20000fac 	.word	0x20000fac
 8006104:	20000ad8 	.word	0x20000ad8
 8006108:	20000fb8 	.word	0x20000fb8
 800610c:	20000fc8 	.word	0x20000fc8
 8006110:	20000fb4 	.word	0x20000fb4
 8006114:	20000adc 	.word	0x20000adc

08006118 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006120:	2300      	movs	r3, #0
 8006122:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d010      	beq.n	800614c <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800612a:	4b0d      	ldr	r3, [pc, #52]	; (8006160 <vTaskDelay+0x48>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d001      	beq.n	8006136 <vTaskDelay+0x1e>
 8006132:	b672      	cpsid	i
 8006134:	e7fe      	b.n	8006134 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8006136:	f000 f873 	bl	8006220 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2100      	movs	r1, #0
 800613e:	0018      	movs	r0, r3
 8006140:	f000 fc7c 	bl	8006a3c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006144:	f000 f878 	bl	8006238 <xTaskResumeAll>
 8006148:	0003      	movs	r3, r0
 800614a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d101      	bne.n	8006156 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8006152:	f001 f825 	bl	80071a0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006156:	46c0      	nop			; (mov r8, r8)
 8006158:	46bd      	mov	sp, r7
 800615a:	b004      	add	sp, #16
 800615c:	bd80      	pop	{r7, pc}
 800615e:	46c0      	nop			; (mov r8, r8)
 8006160:	20000fd4 	.word	0x20000fd4

08006164 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006164:	b590      	push	{r4, r7, lr}
 8006166:	b089      	sub	sp, #36	; 0x24
 8006168:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800616a:	2300      	movs	r3, #0
 800616c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800616e:	2300      	movs	r3, #0
 8006170:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006172:	003a      	movs	r2, r7
 8006174:	1d39      	adds	r1, r7, #4
 8006176:	2308      	movs	r3, #8
 8006178:	18fb      	adds	r3, r7, r3
 800617a:	0018      	movs	r0, r3
 800617c:	f7ff f93c 	bl	80053f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006180:	683c      	ldr	r4, [r7, #0]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	68ba      	ldr	r2, [r7, #8]
 8006186:	491e      	ldr	r1, [pc, #120]	; (8006200 <vTaskStartScheduler+0x9c>)
 8006188:	481e      	ldr	r0, [pc, #120]	; (8006204 <vTaskStartScheduler+0xa0>)
 800618a:	9202      	str	r2, [sp, #8]
 800618c:	9301      	str	r3, [sp, #4]
 800618e:	2300      	movs	r3, #0
 8006190:	9300      	str	r3, [sp, #0]
 8006192:	2300      	movs	r3, #0
 8006194:	0022      	movs	r2, r4
 8006196:	f7ff fe30 	bl	8005dfa <xTaskCreateStatic>
 800619a:	0002      	movs	r2, r0
 800619c:	4b1a      	ldr	r3, [pc, #104]	; (8006208 <vTaskStartScheduler+0xa4>)
 800619e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80061a0:	4b19      	ldr	r3, [pc, #100]	; (8006208 <vTaskStartScheduler+0xa4>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d002      	beq.n	80061ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80061a8:	2301      	movs	r3, #1
 80061aa:	60fb      	str	r3, [r7, #12]
 80061ac:	e001      	b.n	80061b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80061ae:	2300      	movs	r3, #0
 80061b0:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d103      	bne.n	80061c0 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 80061b8:	f000 fc94 	bl	8006ae4 <xTimerCreateTimerTask>
 80061bc:	0003      	movs	r3, r0
 80061be:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d113      	bne.n	80061ee <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80061c6:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80061c8:	4b10      	ldr	r3, [pc, #64]	; (800620c <vTaskStartScheduler+0xa8>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	3354      	adds	r3, #84	; 0x54
 80061ce:	001a      	movs	r2, r3
 80061d0:	4b0f      	ldr	r3, [pc, #60]	; (8006210 <vTaskStartScheduler+0xac>)
 80061d2:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80061d4:	4b0f      	ldr	r3, [pc, #60]	; (8006214 <vTaskStartScheduler+0xb0>)
 80061d6:	2201      	movs	r2, #1
 80061d8:	4252      	negs	r2, r2
 80061da:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80061dc:	4b0e      	ldr	r3, [pc, #56]	; (8006218 <vTaskStartScheduler+0xb4>)
 80061de:	2201      	movs	r2, #1
 80061e0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80061e2:	4b0e      	ldr	r3, [pc, #56]	; (800621c <vTaskStartScheduler+0xb8>)
 80061e4:	2200      	movs	r2, #0
 80061e6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80061e8:	f000 ffb6 	bl	8007158 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80061ec:	e004      	b.n	80061f8 <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	3301      	adds	r3, #1
 80061f2:	d101      	bne.n	80061f8 <vTaskStartScheduler+0x94>
 80061f4:	b672      	cpsid	i
 80061f6:	e7fe      	b.n	80061f6 <vTaskStartScheduler+0x92>
}
 80061f8:	46c0      	nop			; (mov r8, r8)
 80061fa:	46bd      	mov	sp, r7
 80061fc:	b005      	add	sp, #20
 80061fe:	bd90      	pop	{r4, r7, pc}
 8006200:	08007890 	.word	0x08007890
 8006204:	080067a5 	.word	0x080067a5
 8006208:	20000fd0 	.word	0x20000fd0
 800620c:	20000ad8 	.word	0x20000ad8
 8006210:	20000010 	.word	0x20000010
 8006214:	20000fcc 	.word	0x20000fcc
 8006218:	20000fb8 	.word	0x20000fb8
 800621c:	20000fb0 	.word	0x20000fb0

08006220 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006220:	b580      	push	{r7, lr}
 8006222:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006224:	4b03      	ldr	r3, [pc, #12]	; (8006234 <vTaskSuspendAll+0x14>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	1c5a      	adds	r2, r3, #1
 800622a:	4b02      	ldr	r3, [pc, #8]	; (8006234 <vTaskSuspendAll+0x14>)
 800622c:	601a      	str	r2, [r3, #0]
}
 800622e:	46c0      	nop			; (mov r8, r8)
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}
 8006234:	20000fd4 	.word	0x20000fd4

08006238 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800623e:	2300      	movs	r3, #0
 8006240:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006242:	2300      	movs	r3, #0
 8006244:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006246:	4b3a      	ldr	r3, [pc, #232]	; (8006330 <xTaskResumeAll+0xf8>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d101      	bne.n	8006252 <xTaskResumeAll+0x1a>
 800624e:	b672      	cpsid	i
 8006250:	e7fe      	b.n	8006250 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006252:	f000 ffb5 	bl	80071c0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006256:	4b36      	ldr	r3, [pc, #216]	; (8006330 <xTaskResumeAll+0xf8>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	1e5a      	subs	r2, r3, #1
 800625c:	4b34      	ldr	r3, [pc, #208]	; (8006330 <xTaskResumeAll+0xf8>)
 800625e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006260:	4b33      	ldr	r3, [pc, #204]	; (8006330 <xTaskResumeAll+0xf8>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d15b      	bne.n	8006320 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006268:	4b32      	ldr	r3, [pc, #200]	; (8006334 <xTaskResumeAll+0xfc>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d057      	beq.n	8006320 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006270:	e02f      	b.n	80062d2 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006272:	4b31      	ldr	r3, [pc, #196]	; (8006338 <xTaskResumeAll+0x100>)
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	3318      	adds	r3, #24
 800627e:	0018      	movs	r0, r3
 8006280:	f7ff f96b 	bl	800555a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	3304      	adds	r3, #4
 8006288:	0018      	movs	r0, r3
 800628a:	f7ff f966 	bl	800555a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006292:	4b2a      	ldr	r3, [pc, #168]	; (800633c <xTaskResumeAll+0x104>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	429a      	cmp	r2, r3
 8006298:	d903      	bls.n	80062a2 <xTaskResumeAll+0x6a>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800629e:	4b27      	ldr	r3, [pc, #156]	; (800633c <xTaskResumeAll+0x104>)
 80062a0:	601a      	str	r2, [r3, #0]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062a6:	0013      	movs	r3, r2
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	189b      	adds	r3, r3, r2
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	4a24      	ldr	r2, [pc, #144]	; (8006340 <xTaskResumeAll+0x108>)
 80062b0:	189a      	adds	r2, r3, r2
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	3304      	adds	r3, #4
 80062b6:	0019      	movs	r1, r3
 80062b8:	0010      	movs	r0, r2
 80062ba:	f7ff f8f6 	bl	80054aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062c2:	4b20      	ldr	r3, [pc, #128]	; (8006344 <xTaskResumeAll+0x10c>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d302      	bcc.n	80062d2 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 80062cc:	4b1e      	ldr	r3, [pc, #120]	; (8006348 <xTaskResumeAll+0x110>)
 80062ce:	2201      	movs	r2, #1
 80062d0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062d2:	4b19      	ldr	r3, [pc, #100]	; (8006338 <xTaskResumeAll+0x100>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d1cb      	bne.n	8006272 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d001      	beq.n	80062e4 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80062e0:	f000 fb10 	bl	8006904 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80062e4:	4b19      	ldr	r3, [pc, #100]	; (800634c <xTaskResumeAll+0x114>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00f      	beq.n	8006310 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80062f0:	f000 f83c 	bl	800636c <xTaskIncrementTick>
 80062f4:	1e03      	subs	r3, r0, #0
 80062f6:	d002      	beq.n	80062fe <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80062f8:	4b13      	ldr	r3, [pc, #76]	; (8006348 <xTaskResumeAll+0x110>)
 80062fa:	2201      	movs	r2, #1
 80062fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	3b01      	subs	r3, #1
 8006302:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d1f2      	bne.n	80062f0 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 800630a:	4b10      	ldr	r3, [pc, #64]	; (800634c <xTaskResumeAll+0x114>)
 800630c:	2200      	movs	r2, #0
 800630e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006310:	4b0d      	ldr	r3, [pc, #52]	; (8006348 <xTaskResumeAll+0x110>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d003      	beq.n	8006320 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006318:	2301      	movs	r3, #1
 800631a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800631c:	f000 ff40 	bl	80071a0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006320:	f000 ff60 	bl	80071e4 <vPortExitCritical>

	return xAlreadyYielded;
 8006324:	68bb      	ldr	r3, [r7, #8]
}
 8006326:	0018      	movs	r0, r3
 8006328:	46bd      	mov	sp, r7
 800632a:	b004      	add	sp, #16
 800632c:	bd80      	pop	{r7, pc}
 800632e:	46c0      	nop			; (mov r8, r8)
 8006330:	20000fd4 	.word	0x20000fd4
 8006334:	20000fac 	.word	0x20000fac
 8006338:	20000f6c 	.word	0x20000f6c
 800633c:	20000fb4 	.word	0x20000fb4
 8006340:	20000adc 	.word	0x20000adc
 8006344:	20000ad8 	.word	0x20000ad8
 8006348:	20000fc0 	.word	0x20000fc0
 800634c:	20000fbc 	.word	0x20000fbc

08006350 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b082      	sub	sp, #8
 8006354:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006356:	4b04      	ldr	r3, [pc, #16]	; (8006368 <xTaskGetTickCount+0x18>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800635c:	687b      	ldr	r3, [r7, #4]
}
 800635e:	0018      	movs	r0, r3
 8006360:	46bd      	mov	sp, r7
 8006362:	b002      	add	sp, #8
 8006364:	bd80      	pop	{r7, pc}
 8006366:	46c0      	nop			; (mov r8, r8)
 8006368:	20000fb0 	.word	0x20000fb0

0800636c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b086      	sub	sp, #24
 8006370:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006372:	2300      	movs	r3, #0
 8006374:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006376:	4b4c      	ldr	r3, [pc, #304]	; (80064a8 <xTaskIncrementTick+0x13c>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d000      	beq.n	8006380 <xTaskIncrementTick+0x14>
 800637e:	e083      	b.n	8006488 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006380:	4b4a      	ldr	r3, [pc, #296]	; (80064ac <xTaskIncrementTick+0x140>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	3301      	adds	r3, #1
 8006386:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006388:	4b48      	ldr	r3, [pc, #288]	; (80064ac <xTaskIncrementTick+0x140>)
 800638a:	693a      	ldr	r2, [r7, #16]
 800638c:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d117      	bne.n	80063c4 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8006394:	4b46      	ldr	r3, [pc, #280]	; (80064b0 <xTaskIncrementTick+0x144>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d001      	beq.n	80063a2 <xTaskIncrementTick+0x36>
 800639e:	b672      	cpsid	i
 80063a0:	e7fe      	b.n	80063a0 <xTaskIncrementTick+0x34>
 80063a2:	4b43      	ldr	r3, [pc, #268]	; (80064b0 <xTaskIncrementTick+0x144>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	60fb      	str	r3, [r7, #12]
 80063a8:	4b42      	ldr	r3, [pc, #264]	; (80064b4 <xTaskIncrementTick+0x148>)
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	4b40      	ldr	r3, [pc, #256]	; (80064b0 <xTaskIncrementTick+0x144>)
 80063ae:	601a      	str	r2, [r3, #0]
 80063b0:	4b40      	ldr	r3, [pc, #256]	; (80064b4 <xTaskIncrementTick+0x148>)
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	601a      	str	r2, [r3, #0]
 80063b6:	4b40      	ldr	r3, [pc, #256]	; (80064b8 <xTaskIncrementTick+0x14c>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	1c5a      	adds	r2, r3, #1
 80063bc:	4b3e      	ldr	r3, [pc, #248]	; (80064b8 <xTaskIncrementTick+0x14c>)
 80063be:	601a      	str	r2, [r3, #0]
 80063c0:	f000 faa0 	bl	8006904 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80063c4:	4b3d      	ldr	r3, [pc, #244]	; (80064bc <xTaskIncrementTick+0x150>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	693a      	ldr	r2, [r7, #16]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d34e      	bcc.n	800646c <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063ce:	4b38      	ldr	r3, [pc, #224]	; (80064b0 <xTaskIncrementTick+0x144>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d101      	bne.n	80063dc <xTaskIncrementTick+0x70>
 80063d8:	2301      	movs	r3, #1
 80063da:	e000      	b.n	80063de <xTaskIncrementTick+0x72>
 80063dc:	2300      	movs	r3, #0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d004      	beq.n	80063ec <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063e2:	4b36      	ldr	r3, [pc, #216]	; (80064bc <xTaskIncrementTick+0x150>)
 80063e4:	2201      	movs	r2, #1
 80063e6:	4252      	negs	r2, r2
 80063e8:	601a      	str	r2, [r3, #0]
					break;
 80063ea:	e03f      	b.n	800646c <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80063ec:	4b30      	ldr	r3, [pc, #192]	; (80064b0 <xTaskIncrementTick+0x144>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80063fc:	693a      	ldr	r2, [r7, #16]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	429a      	cmp	r2, r3
 8006402:	d203      	bcs.n	800640c <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006404:	4b2d      	ldr	r3, [pc, #180]	; (80064bc <xTaskIncrementTick+0x150>)
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	601a      	str	r2, [r3, #0]
						break;
 800640a:	e02f      	b.n	800646c <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	3304      	adds	r3, #4
 8006410:	0018      	movs	r0, r3
 8006412:	f7ff f8a2 	bl	800555a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800641a:	2b00      	cmp	r3, #0
 800641c:	d004      	beq.n	8006428 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	3318      	adds	r3, #24
 8006422:	0018      	movs	r0, r3
 8006424:	f7ff f899 	bl	800555a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800642c:	4b24      	ldr	r3, [pc, #144]	; (80064c0 <xTaskIncrementTick+0x154>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	429a      	cmp	r2, r3
 8006432:	d903      	bls.n	800643c <xTaskIncrementTick+0xd0>
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006438:	4b21      	ldr	r3, [pc, #132]	; (80064c0 <xTaskIncrementTick+0x154>)
 800643a:	601a      	str	r2, [r3, #0]
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006440:	0013      	movs	r3, r2
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	189b      	adds	r3, r3, r2
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	4a1e      	ldr	r2, [pc, #120]	; (80064c4 <xTaskIncrementTick+0x158>)
 800644a:	189a      	adds	r2, r3, r2
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	3304      	adds	r3, #4
 8006450:	0019      	movs	r1, r3
 8006452:	0010      	movs	r0, r2
 8006454:	f7ff f829 	bl	80054aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800645c:	4b1a      	ldr	r3, [pc, #104]	; (80064c8 <xTaskIncrementTick+0x15c>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006462:	429a      	cmp	r2, r3
 8006464:	d3b3      	bcc.n	80063ce <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8006466:	2301      	movs	r3, #1
 8006468:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800646a:	e7b0      	b.n	80063ce <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800646c:	4b16      	ldr	r3, [pc, #88]	; (80064c8 <xTaskIncrementTick+0x15c>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006472:	4914      	ldr	r1, [pc, #80]	; (80064c4 <xTaskIncrementTick+0x158>)
 8006474:	0013      	movs	r3, r2
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	189b      	adds	r3, r3, r2
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	585b      	ldr	r3, [r3, r1]
 800647e:	2b01      	cmp	r3, #1
 8006480:	d907      	bls.n	8006492 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006482:	2301      	movs	r3, #1
 8006484:	617b      	str	r3, [r7, #20]
 8006486:	e004      	b.n	8006492 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006488:	4b10      	ldr	r3, [pc, #64]	; (80064cc <xTaskIncrementTick+0x160>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	1c5a      	adds	r2, r3, #1
 800648e:	4b0f      	ldr	r3, [pc, #60]	; (80064cc <xTaskIncrementTick+0x160>)
 8006490:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006492:	4b0f      	ldr	r3, [pc, #60]	; (80064d0 <xTaskIncrementTick+0x164>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d001      	beq.n	800649e <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 800649a:	2301      	movs	r3, #1
 800649c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800649e:	697b      	ldr	r3, [r7, #20]
}
 80064a0:	0018      	movs	r0, r3
 80064a2:	46bd      	mov	sp, r7
 80064a4:	b006      	add	sp, #24
 80064a6:	bd80      	pop	{r7, pc}
 80064a8:	20000fd4 	.word	0x20000fd4
 80064ac:	20000fb0 	.word	0x20000fb0
 80064b0:	20000f64 	.word	0x20000f64
 80064b4:	20000f68 	.word	0x20000f68
 80064b8:	20000fc4 	.word	0x20000fc4
 80064bc:	20000fcc 	.word	0x20000fcc
 80064c0:	20000fb4 	.word	0x20000fb4
 80064c4:	20000adc 	.word	0x20000adc
 80064c8:	20000ad8 	.word	0x20000ad8
 80064cc:	20000fbc 	.word	0x20000fbc
 80064d0:	20000fc0 	.word	0x20000fc0

080064d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b082      	sub	sp, #8
 80064d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80064da:	4b25      	ldr	r3, [pc, #148]	; (8006570 <vTaskSwitchContext+0x9c>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d003      	beq.n	80064ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80064e2:	4b24      	ldr	r3, [pc, #144]	; (8006574 <vTaskSwitchContext+0xa0>)
 80064e4:	2201      	movs	r2, #1
 80064e6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80064e8:	e03d      	b.n	8006566 <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 80064ea:	4b22      	ldr	r3, [pc, #136]	; (8006574 <vTaskSwitchContext+0xa0>)
 80064ec:	2200      	movs	r2, #0
 80064ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80064f0:	4b21      	ldr	r3, [pc, #132]	; (8006578 <vTaskSwitchContext+0xa4>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	607b      	str	r3, [r7, #4]
 80064f6:	e007      	b.n	8006508 <vTaskSwitchContext+0x34>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d101      	bne.n	8006502 <vTaskSwitchContext+0x2e>
 80064fe:	b672      	cpsid	i
 8006500:	e7fe      	b.n	8006500 <vTaskSwitchContext+0x2c>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	3b01      	subs	r3, #1
 8006506:	607b      	str	r3, [r7, #4]
 8006508:	491c      	ldr	r1, [pc, #112]	; (800657c <vTaskSwitchContext+0xa8>)
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	0013      	movs	r3, r2
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	189b      	adds	r3, r3, r2
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	585b      	ldr	r3, [r3, r1]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d0ee      	beq.n	80064f8 <vTaskSwitchContext+0x24>
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	0013      	movs	r3, r2
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	189b      	adds	r3, r3, r2
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	4a15      	ldr	r2, [pc, #84]	; (800657c <vTaskSwitchContext+0xa8>)
 8006526:	189b      	adds	r3, r3, r2
 8006528:	603b      	str	r3, [r7, #0]
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	685a      	ldr	r2, [r3, #4]
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	605a      	str	r2, [r3, #4]
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	685a      	ldr	r2, [r3, #4]
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	3308      	adds	r3, #8
 800653c:	429a      	cmp	r2, r3
 800653e:	d104      	bne.n	800654a <vTaskSwitchContext+0x76>
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	685a      	ldr	r2, [r3, #4]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	605a      	str	r2, [r3, #4]
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	68da      	ldr	r2, [r3, #12]
 8006550:	4b0b      	ldr	r3, [pc, #44]	; (8006580 <vTaskSwitchContext+0xac>)
 8006552:	601a      	str	r2, [r3, #0]
 8006554:	4b08      	ldr	r3, [pc, #32]	; (8006578 <vTaskSwitchContext+0xa4>)
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800655a:	4b09      	ldr	r3, [pc, #36]	; (8006580 <vTaskSwitchContext+0xac>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	3354      	adds	r3, #84	; 0x54
 8006560:	001a      	movs	r2, r3
 8006562:	4b08      	ldr	r3, [pc, #32]	; (8006584 <vTaskSwitchContext+0xb0>)
 8006564:	601a      	str	r2, [r3, #0]
}
 8006566:	46c0      	nop			; (mov r8, r8)
 8006568:	46bd      	mov	sp, r7
 800656a:	b002      	add	sp, #8
 800656c:	bd80      	pop	{r7, pc}
 800656e:	46c0      	nop			; (mov r8, r8)
 8006570:	20000fd4 	.word	0x20000fd4
 8006574:	20000fc0 	.word	0x20000fc0
 8006578:	20000fb4 	.word	0x20000fb4
 800657c:	20000adc 	.word	0x20000adc
 8006580:	20000ad8 	.word	0x20000ad8
 8006584:	20000010 	.word	0x20000010

08006588 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d101      	bne.n	800659c <vTaskPlaceOnEventList+0x14>
 8006598:	b672      	cpsid	i
 800659a:	e7fe      	b.n	800659a <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800659c:	4b08      	ldr	r3, [pc, #32]	; (80065c0 <vTaskPlaceOnEventList+0x38>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	3318      	adds	r3, #24
 80065a2:	001a      	movs	r2, r3
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	0011      	movs	r1, r2
 80065a8:	0018      	movs	r0, r3
 80065aa:	f7fe ffa0 	bl	80054ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	2101      	movs	r1, #1
 80065b2:	0018      	movs	r0, r3
 80065b4:	f000 fa42 	bl	8006a3c <prvAddCurrentTaskToDelayedList>
}
 80065b8:	46c0      	nop			; (mov r8, r8)
 80065ba:	46bd      	mov	sp, r7
 80065bc:	b002      	add	sp, #8
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	20000ad8 	.word	0x20000ad8

080065c4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d101      	bne.n	80065da <vTaskPlaceOnEventListRestricted+0x16>
 80065d6:	b672      	cpsid	i
 80065d8:	e7fe      	b.n	80065d8 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80065da:	4b0c      	ldr	r3, [pc, #48]	; (800660c <vTaskPlaceOnEventListRestricted+0x48>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	3318      	adds	r3, #24
 80065e0:	001a      	movs	r2, r3
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	0011      	movs	r1, r2
 80065e6:	0018      	movs	r0, r3
 80065e8:	f7fe ff5f 	bl	80054aa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d002      	beq.n	80065f8 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 80065f2:	2301      	movs	r3, #1
 80065f4:	425b      	negs	r3, r3
 80065f6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	0011      	movs	r1, r2
 80065fe:	0018      	movs	r0, r3
 8006600:	f000 fa1c 	bl	8006a3c <prvAddCurrentTaskToDelayedList>
	}
 8006604:	46c0      	nop			; (mov r8, r8)
 8006606:	46bd      	mov	sp, r7
 8006608:	b004      	add	sp, #16
 800660a:	bd80      	pop	{r7, pc}
 800660c:	20000ad8 	.word	0x20000ad8

08006610 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d101      	bne.n	800662a <xTaskRemoveFromEventList+0x1a>
 8006626:	b672      	cpsid	i
 8006628:	e7fe      	b.n	8006628 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	3318      	adds	r3, #24
 800662e:	0018      	movs	r0, r3
 8006630:	f7fe ff93 	bl	800555a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006634:	4b1e      	ldr	r3, [pc, #120]	; (80066b0 <xTaskRemoveFromEventList+0xa0>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d11d      	bne.n	8006678 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	3304      	adds	r3, #4
 8006640:	0018      	movs	r0, r3
 8006642:	f7fe ff8a 	bl	800555a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800664a:	4b1a      	ldr	r3, [pc, #104]	; (80066b4 <xTaskRemoveFromEventList+0xa4>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	429a      	cmp	r2, r3
 8006650:	d903      	bls.n	800665a <xTaskRemoveFromEventList+0x4a>
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006656:	4b17      	ldr	r3, [pc, #92]	; (80066b4 <xTaskRemoveFromEventList+0xa4>)
 8006658:	601a      	str	r2, [r3, #0]
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800665e:	0013      	movs	r3, r2
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	189b      	adds	r3, r3, r2
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	4a14      	ldr	r2, [pc, #80]	; (80066b8 <xTaskRemoveFromEventList+0xa8>)
 8006668:	189a      	adds	r2, r3, r2
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	3304      	adds	r3, #4
 800666e:	0019      	movs	r1, r3
 8006670:	0010      	movs	r0, r2
 8006672:	f7fe ff1a 	bl	80054aa <vListInsertEnd>
 8006676:	e007      	b.n	8006688 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	3318      	adds	r3, #24
 800667c:	001a      	movs	r2, r3
 800667e:	4b0f      	ldr	r3, [pc, #60]	; (80066bc <xTaskRemoveFromEventList+0xac>)
 8006680:	0011      	movs	r1, r2
 8006682:	0018      	movs	r0, r3
 8006684:	f7fe ff11 	bl	80054aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800668c:	4b0c      	ldr	r3, [pc, #48]	; (80066c0 <xTaskRemoveFromEventList+0xb0>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006692:	429a      	cmp	r2, r3
 8006694:	d905      	bls.n	80066a2 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006696:	2301      	movs	r3, #1
 8006698:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800669a:	4b0a      	ldr	r3, [pc, #40]	; (80066c4 <xTaskRemoveFromEventList+0xb4>)
 800669c:	2201      	movs	r2, #1
 800669e:	601a      	str	r2, [r3, #0]
 80066a0:	e001      	b.n	80066a6 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 80066a2:	2300      	movs	r3, #0
 80066a4:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80066a6:	68fb      	ldr	r3, [r7, #12]
}
 80066a8:	0018      	movs	r0, r3
 80066aa:	46bd      	mov	sp, r7
 80066ac:	b004      	add	sp, #16
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	20000fd4 	.word	0x20000fd4
 80066b4:	20000fb4 	.word	0x20000fb4
 80066b8:	20000adc 	.word	0x20000adc
 80066bc:	20000f6c 	.word	0x20000f6c
 80066c0:	20000ad8 	.word	0x20000ad8
 80066c4:	20000fc0 	.word	0x20000fc0

080066c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80066d0:	4b05      	ldr	r3, [pc, #20]	; (80066e8 <vTaskInternalSetTimeOutState+0x20>)
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80066d8:	4b04      	ldr	r3, [pc, #16]	; (80066ec <vTaskInternalSetTimeOutState+0x24>)
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	605a      	str	r2, [r3, #4]
}
 80066e0:	46c0      	nop			; (mov r8, r8)
 80066e2:	46bd      	mov	sp, r7
 80066e4:	b002      	add	sp, #8
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	20000fc4 	.word	0x20000fc4
 80066ec:	20000fb0 	.word	0x20000fb0

080066f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b086      	sub	sp, #24
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d101      	bne.n	8006704 <xTaskCheckForTimeOut+0x14>
 8006700:	b672      	cpsid	i
 8006702:	e7fe      	b.n	8006702 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d101      	bne.n	800670e <xTaskCheckForTimeOut+0x1e>
 800670a:	b672      	cpsid	i
 800670c:	e7fe      	b.n	800670c <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 800670e:	f000 fd57 	bl	80071c0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006712:	4b1d      	ldr	r3, [pc, #116]	; (8006788 <xTaskCheckForTimeOut+0x98>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	693a      	ldr	r2, [r7, #16]
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	3301      	adds	r3, #1
 8006728:	d102      	bne.n	8006730 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800672a:	2300      	movs	r3, #0
 800672c:	617b      	str	r3, [r7, #20]
 800672e:	e024      	b.n	800677a <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	4b15      	ldr	r3, [pc, #84]	; (800678c <xTaskCheckForTimeOut+0x9c>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	429a      	cmp	r2, r3
 800673a:	d007      	beq.n	800674c <xTaskCheckForTimeOut+0x5c>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	429a      	cmp	r2, r3
 8006744:	d302      	bcc.n	800674c <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006746:	2301      	movs	r3, #1
 8006748:	617b      	str	r3, [r7, #20]
 800674a:	e016      	b.n	800677a <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	429a      	cmp	r2, r3
 8006754:	d20c      	bcs.n	8006770 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	1ad2      	subs	r2, r2, r3
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	0018      	movs	r0, r3
 8006766:	f7ff ffaf 	bl	80066c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800676a:	2300      	movs	r3, #0
 800676c:	617b      	str	r3, [r7, #20]
 800676e:	e004      	b.n	800677a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	2200      	movs	r2, #0
 8006774:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006776:	2301      	movs	r3, #1
 8006778:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800677a:	f000 fd33 	bl	80071e4 <vPortExitCritical>

	return xReturn;
 800677e:	697b      	ldr	r3, [r7, #20]
}
 8006780:	0018      	movs	r0, r3
 8006782:	46bd      	mov	sp, r7
 8006784:	b006      	add	sp, #24
 8006786:	bd80      	pop	{r7, pc}
 8006788:	20000fb0 	.word	0x20000fb0
 800678c:	20000fc4 	.word	0x20000fc4

08006790 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006790:	b580      	push	{r7, lr}
 8006792:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006794:	4b02      	ldr	r3, [pc, #8]	; (80067a0 <vTaskMissedYield+0x10>)
 8006796:	2201      	movs	r2, #1
 8006798:	601a      	str	r2, [r3, #0]
}
 800679a:	46c0      	nop			; (mov r8, r8)
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	20000fc0 	.word	0x20000fc0

080067a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80067ac:	f000 f84e 	bl	800684c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80067b0:	4b03      	ldr	r3, [pc, #12]	; (80067c0 <prvIdleTask+0x1c>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d9f9      	bls.n	80067ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80067b8:	f000 fcf2 	bl	80071a0 <vPortYield>
		prvCheckTasksWaitingTermination();
 80067bc:	e7f6      	b.n	80067ac <prvIdleTask+0x8>
 80067be:	46c0      	nop			; (mov r8, r8)
 80067c0:	20000adc 	.word	0x20000adc

080067c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b082      	sub	sp, #8
 80067c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80067ca:	2300      	movs	r3, #0
 80067cc:	607b      	str	r3, [r7, #4]
 80067ce:	e00c      	b.n	80067ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	0013      	movs	r3, r2
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	189b      	adds	r3, r3, r2
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	4a14      	ldr	r2, [pc, #80]	; (800682c <prvInitialiseTaskLists+0x68>)
 80067dc:	189b      	adds	r3, r3, r2
 80067de:	0018      	movs	r0, r3
 80067e0:	f7fe fe3a 	bl	8005458 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	3301      	adds	r3, #1
 80067e8:	607b      	str	r3, [r7, #4]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2b37      	cmp	r3, #55	; 0x37
 80067ee:	d9ef      	bls.n	80067d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80067f0:	4b0f      	ldr	r3, [pc, #60]	; (8006830 <prvInitialiseTaskLists+0x6c>)
 80067f2:	0018      	movs	r0, r3
 80067f4:	f7fe fe30 	bl	8005458 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80067f8:	4b0e      	ldr	r3, [pc, #56]	; (8006834 <prvInitialiseTaskLists+0x70>)
 80067fa:	0018      	movs	r0, r3
 80067fc:	f7fe fe2c 	bl	8005458 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006800:	4b0d      	ldr	r3, [pc, #52]	; (8006838 <prvInitialiseTaskLists+0x74>)
 8006802:	0018      	movs	r0, r3
 8006804:	f7fe fe28 	bl	8005458 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006808:	4b0c      	ldr	r3, [pc, #48]	; (800683c <prvInitialiseTaskLists+0x78>)
 800680a:	0018      	movs	r0, r3
 800680c:	f7fe fe24 	bl	8005458 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006810:	4b0b      	ldr	r3, [pc, #44]	; (8006840 <prvInitialiseTaskLists+0x7c>)
 8006812:	0018      	movs	r0, r3
 8006814:	f7fe fe20 	bl	8005458 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006818:	4b0a      	ldr	r3, [pc, #40]	; (8006844 <prvInitialiseTaskLists+0x80>)
 800681a:	4a05      	ldr	r2, [pc, #20]	; (8006830 <prvInitialiseTaskLists+0x6c>)
 800681c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800681e:	4b0a      	ldr	r3, [pc, #40]	; (8006848 <prvInitialiseTaskLists+0x84>)
 8006820:	4a04      	ldr	r2, [pc, #16]	; (8006834 <prvInitialiseTaskLists+0x70>)
 8006822:	601a      	str	r2, [r3, #0]
}
 8006824:	46c0      	nop			; (mov r8, r8)
 8006826:	46bd      	mov	sp, r7
 8006828:	b002      	add	sp, #8
 800682a:	bd80      	pop	{r7, pc}
 800682c:	20000adc 	.word	0x20000adc
 8006830:	20000f3c 	.word	0x20000f3c
 8006834:	20000f50 	.word	0x20000f50
 8006838:	20000f6c 	.word	0x20000f6c
 800683c:	20000f80 	.word	0x20000f80
 8006840:	20000f98 	.word	0x20000f98
 8006844:	20000f64 	.word	0x20000f64
 8006848:	20000f68 	.word	0x20000f68

0800684c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b082      	sub	sp, #8
 8006850:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006852:	e01a      	b.n	800688a <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8006854:	f000 fcb4 	bl	80071c0 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006858:	4b10      	ldr	r3, [pc, #64]	; (800689c <prvCheckTasksWaitingTermination+0x50>)
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	3304      	adds	r3, #4
 8006864:	0018      	movs	r0, r3
 8006866:	f7fe fe78 	bl	800555a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800686a:	4b0d      	ldr	r3, [pc, #52]	; (80068a0 <prvCheckTasksWaitingTermination+0x54>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	1e5a      	subs	r2, r3, #1
 8006870:	4b0b      	ldr	r3, [pc, #44]	; (80068a0 <prvCheckTasksWaitingTermination+0x54>)
 8006872:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006874:	4b0b      	ldr	r3, [pc, #44]	; (80068a4 <prvCheckTasksWaitingTermination+0x58>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	1e5a      	subs	r2, r3, #1
 800687a:	4b0a      	ldr	r3, [pc, #40]	; (80068a4 <prvCheckTasksWaitingTermination+0x58>)
 800687c:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 800687e:	f000 fcb1 	bl	80071e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	0018      	movs	r0, r3
 8006886:	f000 f80f 	bl	80068a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800688a:	4b06      	ldr	r3, [pc, #24]	; (80068a4 <prvCheckTasksWaitingTermination+0x58>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d1e0      	bne.n	8006854 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006892:	46c0      	nop			; (mov r8, r8)
 8006894:	46c0      	nop			; (mov r8, r8)
 8006896:	46bd      	mov	sp, r7
 8006898:	b002      	add	sp, #8
 800689a:	bd80      	pop	{r7, pc}
 800689c:	20000f80 	.word	0x20000f80
 80068a0:	20000fac 	.word	0x20000fac
 80068a4:	20000f94 	.word	0x20000f94

080068a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	3354      	adds	r3, #84	; 0x54
 80068b4:	0018      	movs	r0, r3
 80068b6:	f000 ff05 	bl	80076c4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	22b9      	movs	r2, #185	; 0xb9
 80068be:	5c9b      	ldrb	r3, [r3, r2]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d109      	bne.n	80068d8 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c8:	0018      	movs	r0, r3
 80068ca:	f000 fdb7 	bl	800743c <vPortFree>
				vPortFree( pxTCB );
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	0018      	movs	r0, r3
 80068d2:	f000 fdb3 	bl	800743c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80068d6:	e010      	b.n	80068fa <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	22b9      	movs	r2, #185	; 0xb9
 80068dc:	5c9b      	ldrb	r3, [r3, r2]
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d104      	bne.n	80068ec <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	0018      	movs	r0, r3
 80068e6:	f000 fda9 	bl	800743c <vPortFree>
	}
 80068ea:	e006      	b.n	80068fa <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	22b9      	movs	r2, #185	; 0xb9
 80068f0:	5c9b      	ldrb	r3, [r3, r2]
 80068f2:	2b02      	cmp	r3, #2
 80068f4:	d001      	beq.n	80068fa <prvDeleteTCB+0x52>
 80068f6:	b672      	cpsid	i
 80068f8:	e7fe      	b.n	80068f8 <prvDeleteTCB+0x50>
	}
 80068fa:	46c0      	nop			; (mov r8, r8)
 80068fc:	46bd      	mov	sp, r7
 80068fe:	b002      	add	sp, #8
 8006900:	bd80      	pop	{r7, pc}
	...

08006904 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800690a:	4b0e      	ldr	r3, [pc, #56]	; (8006944 <prvResetNextTaskUnblockTime+0x40>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d101      	bne.n	8006918 <prvResetNextTaskUnblockTime+0x14>
 8006914:	2301      	movs	r3, #1
 8006916:	e000      	b.n	800691a <prvResetNextTaskUnblockTime+0x16>
 8006918:	2300      	movs	r3, #0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d004      	beq.n	8006928 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800691e:	4b0a      	ldr	r3, [pc, #40]	; (8006948 <prvResetNextTaskUnblockTime+0x44>)
 8006920:	2201      	movs	r2, #1
 8006922:	4252      	negs	r2, r2
 8006924:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006926:	e008      	b.n	800693a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006928:	4b06      	ldr	r3, [pc, #24]	; (8006944 <prvResetNextTaskUnblockTime+0x40>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	685a      	ldr	r2, [r3, #4]
 8006936:	4b04      	ldr	r3, [pc, #16]	; (8006948 <prvResetNextTaskUnblockTime+0x44>)
 8006938:	601a      	str	r2, [r3, #0]
}
 800693a:	46c0      	nop			; (mov r8, r8)
 800693c:	46bd      	mov	sp, r7
 800693e:	b002      	add	sp, #8
 8006940:	bd80      	pop	{r7, pc}
 8006942:	46c0      	nop			; (mov r8, r8)
 8006944:	20000f64 	.word	0x20000f64
 8006948:	20000fcc 	.word	0x20000fcc

0800694c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006952:	4b0a      	ldr	r3, [pc, #40]	; (800697c <xTaskGetSchedulerState+0x30>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d102      	bne.n	8006960 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800695a:	2301      	movs	r3, #1
 800695c:	607b      	str	r3, [r7, #4]
 800695e:	e008      	b.n	8006972 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006960:	4b07      	ldr	r3, [pc, #28]	; (8006980 <xTaskGetSchedulerState+0x34>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d102      	bne.n	800696e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006968:	2302      	movs	r3, #2
 800696a:	607b      	str	r3, [r7, #4]
 800696c:	e001      	b.n	8006972 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800696e:	2300      	movs	r3, #0
 8006970:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006972:	687b      	ldr	r3, [r7, #4]
	}
 8006974:	0018      	movs	r0, r3
 8006976:	46bd      	mov	sp, r7
 8006978:	b002      	add	sp, #8
 800697a:	bd80      	pop	{r7, pc}
 800697c:	20000fb8 	.word	0x20000fb8
 8006980:	20000fd4 	.word	0x20000fd4

08006984 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006990:	2300      	movs	r3, #0
 8006992:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d044      	beq.n	8006a24 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800699a:	4b25      	ldr	r3, [pc, #148]	; (8006a30 <xTaskPriorityDisinherit+0xac>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	68ba      	ldr	r2, [r7, #8]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d001      	beq.n	80069a8 <xTaskPriorityDisinherit+0x24>
 80069a4:	b672      	cpsid	i
 80069a6:	e7fe      	b.n	80069a6 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d101      	bne.n	80069b4 <xTaskPriorityDisinherit+0x30>
 80069b0:	b672      	cpsid	i
 80069b2:	e7fe      	b.n	80069b2 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069b8:	1e5a      	subs	r2, r3, #1
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d02c      	beq.n	8006a24 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d128      	bne.n	8006a24 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	3304      	adds	r3, #4
 80069d6:	0018      	movs	r0, r3
 80069d8:	f7fe fdbf 	bl	800555a <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e8:	2238      	movs	r2, #56	; 0x38
 80069ea:	1ad2      	subs	r2, r2, r3
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069f4:	4b0f      	ldr	r3, [pc, #60]	; (8006a34 <xTaskPriorityDisinherit+0xb0>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d903      	bls.n	8006a04 <xTaskPriorityDisinherit+0x80>
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a00:	4b0c      	ldr	r3, [pc, #48]	; (8006a34 <xTaskPriorityDisinherit+0xb0>)
 8006a02:	601a      	str	r2, [r3, #0]
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a08:	0013      	movs	r3, r2
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	189b      	adds	r3, r3, r2
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	4a09      	ldr	r2, [pc, #36]	; (8006a38 <xTaskPriorityDisinherit+0xb4>)
 8006a12:	189a      	adds	r2, r3, r2
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	3304      	adds	r3, #4
 8006a18:	0019      	movs	r1, r3
 8006a1a:	0010      	movs	r0, r2
 8006a1c:	f7fe fd45 	bl	80054aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006a20:	2301      	movs	r3, #1
 8006a22:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006a24:	68fb      	ldr	r3, [r7, #12]
	}
 8006a26:	0018      	movs	r0, r3
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	b004      	add	sp, #16
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	46c0      	nop			; (mov r8, r8)
 8006a30:	20000ad8 	.word	0x20000ad8
 8006a34:	20000fb4 	.word	0x20000fb4
 8006a38:	20000adc 	.word	0x20000adc

08006a3c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006a46:	4b21      	ldr	r3, [pc, #132]	; (8006acc <prvAddCurrentTaskToDelayedList+0x90>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a4c:	4b20      	ldr	r3, [pc, #128]	; (8006ad0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	3304      	adds	r3, #4
 8006a52:	0018      	movs	r0, r3
 8006a54:	f7fe fd81 	bl	800555a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	d10b      	bne.n	8006a76 <prvAddCurrentTaskToDelayedList+0x3a>
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d008      	beq.n	8006a76 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a64:	4b1a      	ldr	r3, [pc, #104]	; (8006ad0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	1d1a      	adds	r2, r3, #4
 8006a6a:	4b1a      	ldr	r3, [pc, #104]	; (8006ad4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006a6c:	0011      	movs	r1, r2
 8006a6e:	0018      	movs	r0, r3
 8006a70:	f7fe fd1b 	bl	80054aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006a74:	e026      	b.n	8006ac4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	18d3      	adds	r3, r2, r3
 8006a7c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006a7e:	4b14      	ldr	r3, [pc, #80]	; (8006ad0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	68ba      	ldr	r2, [r7, #8]
 8006a84:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006a86:	68ba      	ldr	r2, [r7, #8]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d209      	bcs.n	8006aa2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a8e:	4b12      	ldr	r3, [pc, #72]	; (8006ad8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	4b0f      	ldr	r3, [pc, #60]	; (8006ad0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	3304      	adds	r3, #4
 8006a98:	0019      	movs	r1, r3
 8006a9a:	0010      	movs	r0, r2
 8006a9c:	f7fe fd27 	bl	80054ee <vListInsert>
}
 8006aa0:	e010      	b.n	8006ac4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006aa2:	4b0e      	ldr	r3, [pc, #56]	; (8006adc <prvAddCurrentTaskToDelayedList+0xa0>)
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	4b0a      	ldr	r3, [pc, #40]	; (8006ad0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	3304      	adds	r3, #4
 8006aac:	0019      	movs	r1, r3
 8006aae:	0010      	movs	r0, r2
 8006ab0:	f7fe fd1d 	bl	80054ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006ab4:	4b0a      	ldr	r3, [pc, #40]	; (8006ae0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68ba      	ldr	r2, [r7, #8]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d202      	bcs.n	8006ac4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006abe:	4b08      	ldr	r3, [pc, #32]	; (8006ae0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006ac0:	68ba      	ldr	r2, [r7, #8]
 8006ac2:	601a      	str	r2, [r3, #0]
}
 8006ac4:	46c0      	nop			; (mov r8, r8)
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	b004      	add	sp, #16
 8006aca:	bd80      	pop	{r7, pc}
 8006acc:	20000fb0 	.word	0x20000fb0
 8006ad0:	20000ad8 	.word	0x20000ad8
 8006ad4:	20000f98 	.word	0x20000f98
 8006ad8:	20000f68 	.word	0x20000f68
 8006adc:	20000f64 	.word	0x20000f64
 8006ae0:	20000fcc 	.word	0x20000fcc

08006ae4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006ae4:	b590      	push	{r4, r7, lr}
 8006ae6:	b089      	sub	sp, #36	; 0x24
 8006ae8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006aea:	2300      	movs	r3, #0
 8006aec:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006aee:	f000 fa87 	bl	8007000 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006af2:	4b17      	ldr	r3, [pc, #92]	; (8006b50 <xTimerCreateTimerTask+0x6c>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d020      	beq.n	8006b3c <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006afa:	2300      	movs	r3, #0
 8006afc:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006afe:	2300      	movs	r3, #0
 8006b00:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006b02:	003a      	movs	r2, r7
 8006b04:	1d39      	adds	r1, r7, #4
 8006b06:	2308      	movs	r3, #8
 8006b08:	18fb      	adds	r3, r7, r3
 8006b0a:	0018      	movs	r0, r3
 8006b0c:	f7fe fc8c 	bl	8005428 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006b10:	683c      	ldr	r4, [r7, #0]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	68ba      	ldr	r2, [r7, #8]
 8006b16:	490f      	ldr	r1, [pc, #60]	; (8006b54 <xTimerCreateTimerTask+0x70>)
 8006b18:	480f      	ldr	r0, [pc, #60]	; (8006b58 <xTimerCreateTimerTask+0x74>)
 8006b1a:	9202      	str	r2, [sp, #8]
 8006b1c:	9301      	str	r3, [sp, #4]
 8006b1e:	2302      	movs	r3, #2
 8006b20:	9300      	str	r3, [sp, #0]
 8006b22:	2300      	movs	r3, #0
 8006b24:	0022      	movs	r2, r4
 8006b26:	f7ff f968 	bl	8005dfa <xTaskCreateStatic>
 8006b2a:	0002      	movs	r2, r0
 8006b2c:	4b0b      	ldr	r3, [pc, #44]	; (8006b5c <xTimerCreateTimerTask+0x78>)
 8006b2e:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006b30:	4b0a      	ldr	r3, [pc, #40]	; (8006b5c <xTimerCreateTimerTask+0x78>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d001      	beq.n	8006b3c <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d101      	bne.n	8006b46 <xTimerCreateTimerTask+0x62>
 8006b42:	b672      	cpsid	i
 8006b44:	e7fe      	b.n	8006b44 <xTimerCreateTimerTask+0x60>
	return xReturn;
 8006b46:	68fb      	ldr	r3, [r7, #12]
}
 8006b48:	0018      	movs	r0, r3
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	b005      	add	sp, #20
 8006b4e:	bd90      	pop	{r4, r7, pc}
 8006b50:	20001008 	.word	0x20001008
 8006b54:	08007898 	.word	0x08007898
 8006b58:	08006c65 	.word	0x08006c65
 8006b5c:	2000100c 	.word	0x2000100c

08006b60 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006b60:	b590      	push	{r4, r7, lr}
 8006b62:	b08b      	sub	sp, #44	; 0x2c
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	607a      	str	r2, [r7, #4]
 8006b6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d101      	bne.n	8006b7c <xTimerGenericCommand+0x1c>
 8006b78:	b672      	cpsid	i
 8006b7a:	e7fe      	b.n	8006b7a <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006b7c:	4b1c      	ldr	r3, [pc, #112]	; (8006bf0 <xTimerGenericCommand+0x90>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d030      	beq.n	8006be6 <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006b84:	2414      	movs	r4, #20
 8006b86:	193b      	adds	r3, r7, r4
 8006b88:	68ba      	ldr	r2, [r7, #8]
 8006b8a:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006b8c:	193b      	adds	r3, r7, r4
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006b92:	193b      	adds	r3, r7, r4
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	2b05      	cmp	r3, #5
 8006b9c:	dc19      	bgt.n	8006bd2 <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006b9e:	f7ff fed5 	bl	800694c <xTaskGetSchedulerState>
 8006ba2:	0003      	movs	r3, r0
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	d109      	bne.n	8006bbc <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006ba8:	4b11      	ldr	r3, [pc, #68]	; (8006bf0 <xTimerGenericCommand+0x90>)
 8006baa:	6818      	ldr	r0, [r3, #0]
 8006bac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bae:	1939      	adds	r1, r7, r4
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	f7fe fdc0 	bl	8005736 <xQueueGenericSend>
 8006bb6:	0003      	movs	r3, r0
 8006bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8006bba:	e014      	b.n	8006be6 <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006bbc:	4b0c      	ldr	r3, [pc, #48]	; (8006bf0 <xTimerGenericCommand+0x90>)
 8006bbe:	6818      	ldr	r0, [r3, #0]
 8006bc0:	2314      	movs	r3, #20
 8006bc2:	18f9      	adds	r1, r7, r3
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f7fe fdb5 	bl	8005736 <xQueueGenericSend>
 8006bcc:	0003      	movs	r3, r0
 8006bce:	627b      	str	r3, [r7, #36]	; 0x24
 8006bd0:	e009      	b.n	8006be6 <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006bd2:	4b07      	ldr	r3, [pc, #28]	; (8006bf0 <xTimerGenericCommand+0x90>)
 8006bd4:	6818      	ldr	r0, [r3, #0]
 8006bd6:	683a      	ldr	r2, [r7, #0]
 8006bd8:	2314      	movs	r3, #20
 8006bda:	18f9      	adds	r1, r7, r3
 8006bdc:	2300      	movs	r3, #0
 8006bde:	f7fe fe6e 	bl	80058be <xQueueGenericSendFromISR>
 8006be2:	0003      	movs	r3, r0
 8006be4:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006be8:	0018      	movs	r0, r3
 8006bea:	46bd      	mov	sp, r7
 8006bec:	b00b      	add	sp, #44	; 0x2c
 8006bee:	bd90      	pop	{r4, r7, pc}
 8006bf0:	20001008 	.word	0x20001008

08006bf4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b086      	sub	sp, #24
 8006bf8:	af02      	add	r7, sp, #8
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006bfe:	4b18      	ldr	r3, [pc, #96]	; (8006c60 <prvProcessExpiredTimer+0x6c>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	3304      	adds	r3, #4
 8006c0c:	0018      	movs	r0, r3
 8006c0e:	f7fe fca4 	bl	800555a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	69db      	ldr	r3, [r3, #28]
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d119      	bne.n	8006c4e <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	699a      	ldr	r2, [r3, #24]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	18d1      	adds	r1, r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	683a      	ldr	r2, [r7, #0]
 8006c26:	68f8      	ldr	r0, [r7, #12]
 8006c28:	f000 f8b6 	bl	8006d98 <prvInsertTimerInActiveList>
 8006c2c:	1e03      	subs	r3, r0, #0
 8006c2e:	d00e      	beq.n	8006c4e <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	68f8      	ldr	r0, [r7, #12]
 8006c34:	2300      	movs	r3, #0
 8006c36:	9300      	str	r3, [sp, #0]
 8006c38:	2300      	movs	r3, #0
 8006c3a:	2100      	movs	r1, #0
 8006c3c:	f7ff ff90 	bl	8006b60 <xTimerGenericCommand>
 8006c40:	0003      	movs	r3, r0
 8006c42:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d101      	bne.n	8006c4e <prvProcessExpiredTimer+0x5a>
 8006c4a:	b672      	cpsid	i
 8006c4c:	e7fe      	b.n	8006c4c <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c52:	68fa      	ldr	r2, [r7, #12]
 8006c54:	0010      	movs	r0, r2
 8006c56:	4798      	blx	r3
}
 8006c58:	46c0      	nop			; (mov r8, r8)
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	b004      	add	sp, #16
 8006c5e:	bd80      	pop	{r7, pc}
 8006c60:	20001000 	.word	0x20001000

08006c64 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006c6c:	2308      	movs	r3, #8
 8006c6e:	18fb      	adds	r3, r7, r3
 8006c70:	0018      	movs	r0, r3
 8006c72:	f000 f851 	bl	8006d18 <prvGetNextExpireTime>
 8006c76:	0003      	movs	r3, r0
 8006c78:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006c7a:	68ba      	ldr	r2, [r7, #8]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	0011      	movs	r1, r2
 8006c80:	0018      	movs	r0, r3
 8006c82:	f000 f803 	bl	8006c8c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006c86:	f000 f8c9 	bl	8006e1c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006c8a:	e7ef      	b.n	8006c6c <prvTimerTask+0x8>

08006c8c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006c96:	f7ff fac3 	bl	8006220 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c9a:	2308      	movs	r3, #8
 8006c9c:	18fb      	adds	r3, r7, r3
 8006c9e:	0018      	movs	r0, r3
 8006ca0:	f000 f85a 	bl	8006d58 <prvSampleTimeNow>
 8006ca4:	0003      	movs	r3, r0
 8006ca6:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d129      	bne.n	8006d02 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d10c      	bne.n	8006cce <prvProcessTimerOrBlockTask+0x42>
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d808      	bhi.n	8006cce <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8006cbc:	f7ff fabc 	bl	8006238 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	0011      	movs	r1, r2
 8006cc6:	0018      	movs	r0, r3
 8006cc8:	f7ff ff94 	bl	8006bf4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006ccc:	e01b      	b.n	8006d06 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d006      	beq.n	8006ce2 <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006cd4:	4b0e      	ldr	r3, [pc, #56]	; (8006d10 <prvProcessTimerOrBlockTask+0x84>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	425a      	negs	r2, r3
 8006cdc:	4153      	adcs	r3, r2
 8006cde:	b2db      	uxtb	r3, r3
 8006ce0:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006ce2:	4b0c      	ldr	r3, [pc, #48]	; (8006d14 <prvProcessTimerOrBlockTask+0x88>)
 8006ce4:	6818      	ldr	r0, [r3, #0]
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	1ad3      	subs	r3, r2, r3
 8006cec:	683a      	ldr	r2, [r7, #0]
 8006cee:	0019      	movs	r1, r3
 8006cf0:	f7ff f850 	bl	8005d94 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006cf4:	f7ff faa0 	bl	8006238 <xTaskResumeAll>
 8006cf8:	1e03      	subs	r3, r0, #0
 8006cfa:	d104      	bne.n	8006d06 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 8006cfc:	f000 fa50 	bl	80071a0 <vPortYield>
}
 8006d00:	e001      	b.n	8006d06 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 8006d02:	f7ff fa99 	bl	8006238 <xTaskResumeAll>
}
 8006d06:	46c0      	nop			; (mov r8, r8)
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	b004      	add	sp, #16
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	46c0      	nop			; (mov r8, r8)
 8006d10:	20001004 	.word	0x20001004
 8006d14:	20001008 	.word	0x20001008

08006d18 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006d20:	4b0c      	ldr	r3, [pc, #48]	; (8006d54 <prvGetNextExpireTime+0x3c>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	425a      	negs	r2, r3
 8006d28:	4153      	adcs	r3, r2
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	001a      	movs	r2, r3
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d105      	bne.n	8006d46 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d3a:	4b06      	ldr	r3, [pc, #24]	; (8006d54 <prvGetNextExpireTime+0x3c>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	60fb      	str	r3, [r7, #12]
 8006d44:	e001      	b.n	8006d4a <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006d46:	2300      	movs	r3, #0
 8006d48:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
}
 8006d4c:	0018      	movs	r0, r3
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	b004      	add	sp, #16
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	20001000 	.word	0x20001000

08006d58 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006d60:	f7ff faf6 	bl	8006350 <xTaskGetTickCount>
 8006d64:	0003      	movs	r3, r0
 8006d66:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8006d68:	4b0a      	ldr	r3, [pc, #40]	; (8006d94 <prvSampleTimeNow+0x3c>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d205      	bcs.n	8006d7e <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8006d72:	f000 f8eb 	bl	8006f4c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	601a      	str	r2, [r3, #0]
 8006d7c:	e002      	b.n	8006d84 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006d84:	4b03      	ldr	r3, [pc, #12]	; (8006d94 <prvSampleTimeNow+0x3c>)
 8006d86:	68fa      	ldr	r2, [r7, #12]
 8006d88:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
}
 8006d8c:	0018      	movs	r0, r3
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	b004      	add	sp, #16
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	20001010 	.word	0x20001010

08006d98 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b086      	sub	sp, #24
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	60b9      	str	r1, [r7, #8]
 8006da2:	607a      	str	r2, [r7, #4]
 8006da4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006da6:	2300      	movs	r3, #0
 8006da8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	68ba      	ldr	r2, [r7, #8]
 8006dae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	68fa      	ldr	r2, [r7, #12]
 8006db4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006db6:	68ba      	ldr	r2, [r7, #8]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d812      	bhi.n	8006de4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	1ad2      	subs	r2, r2, r3
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	699b      	ldr	r3, [r3, #24]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d302      	bcc.n	8006dd2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	617b      	str	r3, [r7, #20]
 8006dd0:	e01b      	b.n	8006e0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006dd2:	4b10      	ldr	r3, [pc, #64]	; (8006e14 <prvInsertTimerInActiveList+0x7c>)
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	3304      	adds	r3, #4
 8006dda:	0019      	movs	r1, r3
 8006ddc:	0010      	movs	r0, r2
 8006dde:	f7fe fb86 	bl	80054ee <vListInsert>
 8006de2:	e012      	b.n	8006e0a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d206      	bcs.n	8006dfa <prvInsertTimerInActiveList+0x62>
 8006dec:	68ba      	ldr	r2, [r7, #8]
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d302      	bcc.n	8006dfa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006df4:	2301      	movs	r3, #1
 8006df6:	617b      	str	r3, [r7, #20]
 8006df8:	e007      	b.n	8006e0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006dfa:	4b07      	ldr	r3, [pc, #28]	; (8006e18 <prvInsertTimerInActiveList+0x80>)
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	3304      	adds	r3, #4
 8006e02:	0019      	movs	r1, r3
 8006e04:	0010      	movs	r0, r2
 8006e06:	f7fe fb72 	bl	80054ee <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006e0a:	697b      	ldr	r3, [r7, #20]
}
 8006e0c:	0018      	movs	r0, r3
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	b006      	add	sp, #24
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	20001004 	.word	0x20001004
 8006e18:	20001000 	.word	0x20001000

08006e1c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006e1c:	b590      	push	{r4, r7, lr}
 8006e1e:	b08d      	sub	sp, #52	; 0x34
 8006e20:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006e22:	e07f      	b.n	8006f24 <prvProcessReceivedCommands+0x108>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006e24:	2208      	movs	r2, #8
 8006e26:	18bb      	adds	r3, r7, r2
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	da0f      	bge.n	8006e4e <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006e2e:	18bb      	adds	r3, r7, r2
 8006e30:	3304      	adds	r3, #4
 8006e32:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d101      	bne.n	8006e3e <prvProcessReceivedCommands+0x22>
 8006e3a:	b672      	cpsid	i
 8006e3c:	e7fe      	b.n	8006e3c <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e44:	6858      	ldr	r0, [r3, #4]
 8006e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	0019      	movs	r1, r3
 8006e4c:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006e4e:	2208      	movs	r2, #8
 8006e50:	18bb      	adds	r3, r7, r2
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	db64      	blt.n	8006f22 <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006e58:	18bb      	adds	r3, r7, r2
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006e5e:	6a3b      	ldr	r3, [r7, #32]
 8006e60:	695b      	ldr	r3, [r3, #20]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d004      	beq.n	8006e70 <prvProcessReceivedCommands+0x54>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e66:	6a3b      	ldr	r3, [r7, #32]
 8006e68:	3304      	adds	r3, #4
 8006e6a:	0018      	movs	r0, r3
 8006e6c:	f7fe fb75 	bl	800555a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e70:	1d3b      	adds	r3, r7, #4
 8006e72:	0018      	movs	r0, r3
 8006e74:	f7ff ff70 	bl	8006d58 <prvSampleTimeNow>
 8006e78:	0003      	movs	r3, r0
 8006e7a:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 8006e7c:	2308      	movs	r3, #8
 8006e7e:	18fb      	adds	r3, r7, r3
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2b09      	cmp	r3, #9
 8006e84:	d84e      	bhi.n	8006f24 <prvProcessReceivedCommands+0x108>
 8006e86:	009a      	lsls	r2, r3, #2
 8006e88:	4b2e      	ldr	r3, [pc, #184]	; (8006f44 <prvProcessReceivedCommands+0x128>)
 8006e8a:	18d3      	adds	r3, r2, r3
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006e90:	2408      	movs	r4, #8
 8006e92:	193b      	adds	r3, r7, r4
 8006e94:	685a      	ldr	r2, [r3, #4]
 8006e96:	6a3b      	ldr	r3, [r7, #32]
 8006e98:	699b      	ldr	r3, [r3, #24]
 8006e9a:	18d1      	adds	r1, r2, r3
 8006e9c:	193b      	adds	r3, r7, r4
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	69fa      	ldr	r2, [r7, #28]
 8006ea2:	6a38      	ldr	r0, [r7, #32]
 8006ea4:	f7ff ff78 	bl	8006d98 <prvInsertTimerInActiveList>
 8006ea8:	1e03      	subs	r3, r0, #0
 8006eaa:	d03b      	beq.n	8006f24 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006eac:	6a3b      	ldr	r3, [r7, #32]
 8006eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb0:	6a3a      	ldr	r2, [r7, #32]
 8006eb2:	0010      	movs	r0, r2
 8006eb4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006eb6:	6a3b      	ldr	r3, [r7, #32]
 8006eb8:	69db      	ldr	r3, [r3, #28]
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d132      	bne.n	8006f24 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006ebe:	193b      	adds	r3, r7, r4
 8006ec0:	685a      	ldr	r2, [r3, #4]
 8006ec2:	6a3b      	ldr	r3, [r7, #32]
 8006ec4:	699b      	ldr	r3, [r3, #24]
 8006ec6:	18d2      	adds	r2, r2, r3
 8006ec8:	6a38      	ldr	r0, [r7, #32]
 8006eca:	2300      	movs	r3, #0
 8006ecc:	9300      	str	r3, [sp, #0]
 8006ece:	2300      	movs	r3, #0
 8006ed0:	2100      	movs	r1, #0
 8006ed2:	f7ff fe45 	bl	8006b60 <xTimerGenericCommand>
 8006ed6:	0003      	movs	r3, r0
 8006ed8:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d121      	bne.n	8006f24 <prvProcessReceivedCommands+0x108>
 8006ee0:	b672      	cpsid	i
 8006ee2:	e7fe      	b.n	8006ee2 <prvProcessReceivedCommands+0xc6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006ee4:	2308      	movs	r3, #8
 8006ee6:	18fb      	adds	r3, r7, r3
 8006ee8:	685a      	ldr	r2, [r3, #4]
 8006eea:	6a3b      	ldr	r3, [r7, #32]
 8006eec:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006eee:	6a3b      	ldr	r3, [r7, #32]
 8006ef0:	699b      	ldr	r3, [r3, #24]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d101      	bne.n	8006efa <prvProcessReceivedCommands+0xde>
 8006ef6:	b672      	cpsid	i
 8006ef8:	e7fe      	b.n	8006ef8 <prvProcessReceivedCommands+0xdc>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006efa:	6a3b      	ldr	r3, [r7, #32]
 8006efc:	699a      	ldr	r2, [r3, #24]
 8006efe:	69fb      	ldr	r3, [r7, #28]
 8006f00:	18d1      	adds	r1, r2, r3
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	69fa      	ldr	r2, [r7, #28]
 8006f06:	6a38      	ldr	r0, [r7, #32]
 8006f08:	f7ff ff46 	bl	8006d98 <prvInsertTimerInActiveList>
					break;
 8006f0c:	e00a      	b.n	8006f24 <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006f0e:	6a3b      	ldr	r3, [r7, #32]
 8006f10:	222c      	movs	r2, #44	; 0x2c
 8006f12:	5c9b      	ldrb	r3, [r3, r2]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d105      	bne.n	8006f24 <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 8006f18:	6a3b      	ldr	r3, [r7, #32]
 8006f1a:	0018      	movs	r0, r3
 8006f1c:	f000 fa8e 	bl	800743c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006f20:	e000      	b.n	8006f24 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006f22:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006f24:	4b08      	ldr	r3, [pc, #32]	; (8006f48 <prvProcessReceivedCommands+0x12c>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2208      	movs	r2, #8
 8006f2a:	18b9      	adds	r1, r7, r2
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	0018      	movs	r0, r3
 8006f30:	f7fe fd36 	bl	80059a0 <xQueueReceive>
 8006f34:	1e03      	subs	r3, r0, #0
 8006f36:	d000      	beq.n	8006f3a <prvProcessReceivedCommands+0x11e>
 8006f38:	e774      	b.n	8006e24 <prvProcessReceivedCommands+0x8>
	}
}
 8006f3a:	46c0      	nop			; (mov r8, r8)
 8006f3c:	46c0      	nop			; (mov r8, r8)
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	b00b      	add	sp, #44	; 0x2c
 8006f42:	bd90      	pop	{r4, r7, pc}
 8006f44:	08007dd0 	.word	0x08007dd0
 8006f48:	20001008 	.word	0x20001008

08006f4c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b088      	sub	sp, #32
 8006f50:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006f52:	e03e      	b.n	8006fd2 <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f54:	4b28      	ldr	r3, [pc, #160]	; (8006ff8 <prvSwitchTimerLists+0xac>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f5e:	4b26      	ldr	r3, [pc, #152]	; (8006ff8 <prvSwitchTimerLists+0xac>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	3304      	adds	r3, #4
 8006f6c:	0018      	movs	r0, r3
 8006f6e:	f7fe faf4 	bl	800555a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f76:	68fa      	ldr	r2, [r7, #12]
 8006f78:	0010      	movs	r0, r2
 8006f7a:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	69db      	ldr	r3, [r3, #28]
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d126      	bne.n	8006fd2 <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	699b      	ldr	r3, [r3, #24]
 8006f88:	693a      	ldr	r2, [r7, #16]
 8006f8a:	18d3      	adds	r3, r2, r3
 8006f8c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006f8e:	68ba      	ldr	r2, [r7, #8]
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d90e      	bls.n	8006fb4 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	68ba      	ldr	r2, [r7, #8]
 8006f9a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	68fa      	ldr	r2, [r7, #12]
 8006fa0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006fa2:	4b15      	ldr	r3, [pc, #84]	; (8006ff8 <prvSwitchTimerLists+0xac>)
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	3304      	adds	r3, #4
 8006faa:	0019      	movs	r1, r3
 8006fac:	0010      	movs	r0, r2
 8006fae:	f7fe fa9e 	bl	80054ee <vListInsert>
 8006fb2:	e00e      	b.n	8006fd2 <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006fb4:	693a      	ldr	r2, [r7, #16]
 8006fb6:	68f8      	ldr	r0, [r7, #12]
 8006fb8:	2300      	movs	r3, #0
 8006fba:	9300      	str	r3, [sp, #0]
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	2100      	movs	r1, #0
 8006fc0:	f7ff fdce 	bl	8006b60 <xTimerGenericCommand>
 8006fc4:	0003      	movs	r3, r0
 8006fc6:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d101      	bne.n	8006fd2 <prvSwitchTimerLists+0x86>
 8006fce:	b672      	cpsid	i
 8006fd0:	e7fe      	b.n	8006fd0 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006fd2:	4b09      	ldr	r3, [pc, #36]	; (8006ff8 <prvSwitchTimerLists+0xac>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d1bb      	bne.n	8006f54 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006fdc:	4b06      	ldr	r3, [pc, #24]	; (8006ff8 <prvSwitchTimerLists+0xac>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006fe2:	4b06      	ldr	r3, [pc, #24]	; (8006ffc <prvSwitchTimerLists+0xb0>)
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	4b04      	ldr	r3, [pc, #16]	; (8006ff8 <prvSwitchTimerLists+0xac>)
 8006fe8:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8006fea:	4b04      	ldr	r3, [pc, #16]	; (8006ffc <prvSwitchTimerLists+0xb0>)
 8006fec:	697a      	ldr	r2, [r7, #20]
 8006fee:	601a      	str	r2, [r3, #0]
}
 8006ff0:	46c0      	nop			; (mov r8, r8)
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	b006      	add	sp, #24
 8006ff6:	bd80      	pop	{r7, pc}
 8006ff8:	20001000 	.word	0x20001000
 8006ffc:	20001004 	.word	0x20001004

08007000 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007006:	f000 f8db 	bl	80071c0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800700a:	4b16      	ldr	r3, [pc, #88]	; (8007064 <prvCheckForValidListAndQueue+0x64>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d123      	bne.n	800705a <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 8007012:	4b15      	ldr	r3, [pc, #84]	; (8007068 <prvCheckForValidListAndQueue+0x68>)
 8007014:	0018      	movs	r0, r3
 8007016:	f7fe fa1f 	bl	8005458 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800701a:	4b14      	ldr	r3, [pc, #80]	; (800706c <prvCheckForValidListAndQueue+0x6c>)
 800701c:	0018      	movs	r0, r3
 800701e:	f7fe fa1b 	bl	8005458 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007022:	4b13      	ldr	r3, [pc, #76]	; (8007070 <prvCheckForValidListAndQueue+0x70>)
 8007024:	4a10      	ldr	r2, [pc, #64]	; (8007068 <prvCheckForValidListAndQueue+0x68>)
 8007026:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007028:	4b12      	ldr	r3, [pc, #72]	; (8007074 <prvCheckForValidListAndQueue+0x74>)
 800702a:	4a10      	ldr	r2, [pc, #64]	; (800706c <prvCheckForValidListAndQueue+0x6c>)
 800702c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800702e:	4b12      	ldr	r3, [pc, #72]	; (8007078 <prvCheckForValidListAndQueue+0x78>)
 8007030:	4a12      	ldr	r2, [pc, #72]	; (800707c <prvCheckForValidListAndQueue+0x7c>)
 8007032:	2100      	movs	r1, #0
 8007034:	9100      	str	r1, [sp, #0]
 8007036:	2110      	movs	r1, #16
 8007038:	200a      	movs	r0, #10
 800703a:	f7fe fb0a 	bl	8005652 <xQueueGenericCreateStatic>
 800703e:	0002      	movs	r2, r0
 8007040:	4b08      	ldr	r3, [pc, #32]	; (8007064 <prvCheckForValidListAndQueue+0x64>)
 8007042:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007044:	4b07      	ldr	r3, [pc, #28]	; (8007064 <prvCheckForValidListAndQueue+0x64>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d006      	beq.n	800705a <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800704c:	4b05      	ldr	r3, [pc, #20]	; (8007064 <prvCheckForValidListAndQueue+0x64>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a0b      	ldr	r2, [pc, #44]	; (8007080 <prvCheckForValidListAndQueue+0x80>)
 8007052:	0011      	movs	r1, r2
 8007054:	0018      	movs	r0, r3
 8007056:	f7fe fe75 	bl	8005d44 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800705a:	f000 f8c3 	bl	80071e4 <vPortExitCritical>
}
 800705e:	46c0      	nop			; (mov r8, r8)
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}
 8007064:	20001008 	.word	0x20001008
 8007068:	20000fd8 	.word	0x20000fd8
 800706c:	20000fec 	.word	0x20000fec
 8007070:	20001000 	.word	0x20001000
 8007074:	20001004 	.word	0x20001004
 8007078:	200010b4 	.word	0x200010b4
 800707c:	20001014 	.word	0x20001014
 8007080:	080078a0 	.word	0x080078a0

08007084 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	3b04      	subs	r3, #4
 8007094:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2280      	movs	r2, #128	; 0x80
 800709a:	0452      	lsls	r2, r2, #17
 800709c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	3b04      	subs	r3, #4
 80070a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80070a4:	68ba      	ldr	r2, [r7, #8]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	3b04      	subs	r3, #4
 80070ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80070b0:	4a08      	ldr	r2, [pc, #32]	; (80070d4 <pxPortInitialiseStack+0x50>)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	3b14      	subs	r3, #20
 80070ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	3b20      	subs	r3, #32
 80070c6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80070c8:	68fb      	ldr	r3, [r7, #12]
}
 80070ca:	0018      	movs	r0, r3
 80070cc:	46bd      	mov	sp, r7
 80070ce:	b004      	add	sp, #16
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	46c0      	nop			; (mov r8, r8)
 80070d4:	080070d9 	.word	0x080070d9

080070d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80070de:	2300      	movs	r3, #0
 80070e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80070e2:	4b08      	ldr	r3, [pc, #32]	; (8007104 <prvTaskExitError+0x2c>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	3301      	adds	r3, #1
 80070e8:	d001      	beq.n	80070ee <prvTaskExitError+0x16>
 80070ea:	b672      	cpsid	i
 80070ec:	e7fe      	b.n	80070ec <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80070ee:	b672      	cpsid	i
	while( ulDummy == 0 )
 80070f0:	46c0      	nop			; (mov r8, r8)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d0fc      	beq.n	80070f2 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80070f8:	46c0      	nop			; (mov r8, r8)
 80070fa:	46c0      	nop			; (mov r8, r8)
 80070fc:	46bd      	mov	sp, r7
 80070fe:	b002      	add	sp, #8
 8007100:	bd80      	pop	{r7, pc}
 8007102:	46c0      	nop			; (mov r8, r8)
 8007104:	2000000c 	.word	0x2000000c

08007108 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8007108:	b580      	push	{r7, lr}
 800710a:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 800710c:	46c0      	nop			; (mov r8, r8)
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}
	...

08007120 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8007120:	4a0b      	ldr	r2, [pc, #44]	; (8007150 <pxCurrentTCBConst2>)
 8007122:	6813      	ldr	r3, [r2, #0]
 8007124:	6818      	ldr	r0, [r3, #0]
 8007126:	3020      	adds	r0, #32
 8007128:	f380 8809 	msr	PSP, r0
 800712c:	2002      	movs	r0, #2
 800712e:	f380 8814 	msr	CONTROL, r0
 8007132:	f3bf 8f6f 	isb	sy
 8007136:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8007138:	46ae      	mov	lr, r5
 800713a:	bc08      	pop	{r3}
 800713c:	bc04      	pop	{r2}
 800713e:	b662      	cpsie	i
 8007140:	4718      	bx	r3
 8007142:	46c0      	nop			; (mov r8, r8)
 8007144:	46c0      	nop			; (mov r8, r8)
 8007146:	46c0      	nop			; (mov r8, r8)
 8007148:	46c0      	nop			; (mov r8, r8)
 800714a:	46c0      	nop			; (mov r8, r8)
 800714c:	46c0      	nop			; (mov r8, r8)
 800714e:	46c0      	nop			; (mov r8, r8)

08007150 <pxCurrentTCBConst2>:
 8007150:	20000ad8 	.word	0x20000ad8
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8007154:	46c0      	nop			; (mov r8, r8)
 8007156:	46c0      	nop			; (mov r8, r8)

08007158 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007158:	b580      	push	{r7, lr}
 800715a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800715c:	4b0e      	ldr	r3, [pc, #56]	; (8007198 <xPortStartScheduler+0x40>)
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	4b0d      	ldr	r3, [pc, #52]	; (8007198 <xPortStartScheduler+0x40>)
 8007162:	21ff      	movs	r1, #255	; 0xff
 8007164:	0409      	lsls	r1, r1, #16
 8007166:	430a      	orrs	r2, r1
 8007168:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800716a:	4b0b      	ldr	r3, [pc, #44]	; (8007198 <xPortStartScheduler+0x40>)
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	4b0a      	ldr	r3, [pc, #40]	; (8007198 <xPortStartScheduler+0x40>)
 8007170:	21ff      	movs	r1, #255	; 0xff
 8007172:	0609      	lsls	r1, r1, #24
 8007174:	430a      	orrs	r2, r1
 8007176:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8007178:	f000 f898 	bl	80072ac <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800717c:	4b07      	ldr	r3, [pc, #28]	; (800719c <xPortStartScheduler+0x44>)
 800717e:	2200      	movs	r2, #0
 8007180:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8007182:	f7ff ffcd 	bl	8007120 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007186:	f7ff f9a5 	bl	80064d4 <vTaskSwitchContext>
	prvTaskExitError();
 800718a:	f7ff ffa5 	bl	80070d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800718e:	2300      	movs	r3, #0
}
 8007190:	0018      	movs	r0, r3
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	46c0      	nop			; (mov r8, r8)
 8007198:	e000ed20 	.word	0xe000ed20
 800719c:	2000000c 	.word	0x2000000c

080071a0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 80071a4:	4b05      	ldr	r3, [pc, #20]	; (80071bc <vPortYield+0x1c>)
 80071a6:	2280      	movs	r2, #128	; 0x80
 80071a8:	0552      	lsls	r2, r2, #21
 80071aa:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80071ac:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80071b0:	f3bf 8f6f 	isb	sy
}
 80071b4:	46c0      	nop			; (mov r8, r8)
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	46c0      	nop			; (mov r8, r8)
 80071bc:	e000ed04 	.word	0xe000ed04

080071c0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 80071c4:	b672      	cpsid	i
    uxCriticalNesting++;
 80071c6:	4b06      	ldr	r3, [pc, #24]	; (80071e0 <vPortEnterCritical+0x20>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	1c5a      	adds	r2, r3, #1
 80071cc:	4b04      	ldr	r3, [pc, #16]	; (80071e0 <vPortEnterCritical+0x20>)
 80071ce:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 80071d0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80071d4:	f3bf 8f6f 	isb	sy
}
 80071d8:	46c0      	nop			; (mov r8, r8)
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	46c0      	nop			; (mov r8, r8)
 80071e0:	2000000c 	.word	0x2000000c

080071e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80071e8:	4b09      	ldr	r3, [pc, #36]	; (8007210 <vPortExitCritical+0x2c>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d101      	bne.n	80071f4 <vPortExitCritical+0x10>
 80071f0:	b672      	cpsid	i
 80071f2:	e7fe      	b.n	80071f2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 80071f4:	4b06      	ldr	r3, [pc, #24]	; (8007210 <vPortExitCritical+0x2c>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	1e5a      	subs	r2, r3, #1
 80071fa:	4b05      	ldr	r3, [pc, #20]	; (8007210 <vPortExitCritical+0x2c>)
 80071fc:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 80071fe:	4b04      	ldr	r3, [pc, #16]	; (8007210 <vPortExitCritical+0x2c>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d100      	bne.n	8007208 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8007206:	b662      	cpsie	i
    }
}
 8007208:	46c0      	nop			; (mov r8, r8)
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	46c0      	nop			; (mov r8, r8)
 8007210:	2000000c 	.word	0x2000000c

08007214 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8007214:	f3ef 8010 	mrs	r0, PRIMASK
 8007218:	b672      	cpsid	i
 800721a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800721c:	46c0      	nop			; (mov r8, r8)
 800721e:	0018      	movs	r0, r3

08007220 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8007220:	f380 8810 	msr	PRIMASK, r0
 8007224:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8007226:	46c0      	nop			; (mov r8, r8)
	...

08007230 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007230:	f3ef 8009 	mrs	r0, PSP
 8007234:	4b0e      	ldr	r3, [pc, #56]	; (8007270 <pxCurrentTCBConst>)
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	3820      	subs	r0, #32
 800723a:	6010      	str	r0, [r2, #0]
 800723c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800723e:	4644      	mov	r4, r8
 8007240:	464d      	mov	r5, r9
 8007242:	4656      	mov	r6, sl
 8007244:	465f      	mov	r7, fp
 8007246:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8007248:	b508      	push	{r3, lr}
 800724a:	b672      	cpsid	i
 800724c:	f7ff f942 	bl	80064d4 <vTaskSwitchContext>
 8007250:	b662      	cpsie	i
 8007252:	bc0c      	pop	{r2, r3}
 8007254:	6811      	ldr	r1, [r2, #0]
 8007256:	6808      	ldr	r0, [r1, #0]
 8007258:	3010      	adds	r0, #16
 800725a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800725c:	46a0      	mov	r8, r4
 800725e:	46a9      	mov	r9, r5
 8007260:	46b2      	mov	sl, r6
 8007262:	46bb      	mov	fp, r7
 8007264:	f380 8809 	msr	PSP, r0
 8007268:	3820      	subs	r0, #32
 800726a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800726c:	4718      	bx	r3
 800726e:	46c0      	nop			; (mov r8, r8)

08007270 <pxCurrentTCBConst>:
 8007270:	20000ad8 	.word	0x20000ad8
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8007274:	46c0      	nop			; (mov r8, r8)
 8007276:	46c0      	nop			; (mov r8, r8)

08007278 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b082      	sub	sp, #8
 800727c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800727e:	f7ff ffc9 	bl	8007214 <ulSetInterruptMaskFromISR>
 8007282:	0003      	movs	r3, r0
 8007284:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007286:	f7ff f871 	bl	800636c <xTaskIncrementTick>
 800728a:	1e03      	subs	r3, r0, #0
 800728c:	d003      	beq.n	8007296 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800728e:	4b06      	ldr	r3, [pc, #24]	; (80072a8 <SysTick_Handler+0x30>)
 8007290:	2280      	movs	r2, #128	; 0x80
 8007292:	0552      	lsls	r2, r2, #21
 8007294:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	0018      	movs	r0, r3
 800729a:	f7ff ffc1 	bl	8007220 <vClearInterruptMaskFromISR>
}
 800729e:	46c0      	nop			; (mov r8, r8)
 80072a0:	46bd      	mov	sp, r7
 80072a2:	b002      	add	sp, #8
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	46c0      	nop			; (mov r8, r8)
 80072a8:	e000ed04 	.word	0xe000ed04

080072ac <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 80072b0:	4b0b      	ldr	r3, [pc, #44]	; (80072e0 <prvSetupTimerInterrupt+0x34>)
 80072b2:	2200      	movs	r2, #0
 80072b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 80072b6:	4b0b      	ldr	r3, [pc, #44]	; (80072e4 <prvSetupTimerInterrupt+0x38>)
 80072b8:	2200      	movs	r2, #0
 80072ba:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80072bc:	4b0a      	ldr	r3, [pc, #40]	; (80072e8 <prvSetupTimerInterrupt+0x3c>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	22fa      	movs	r2, #250	; 0xfa
 80072c2:	0091      	lsls	r1, r2, #2
 80072c4:	0018      	movs	r0, r3
 80072c6:	f7f8 ff1f 	bl	8000108 <__udivsi3>
 80072ca:	0003      	movs	r3, r0
 80072cc:	001a      	movs	r2, r3
 80072ce:	4b07      	ldr	r3, [pc, #28]	; (80072ec <prvSetupTimerInterrupt+0x40>)
 80072d0:	3a01      	subs	r2, #1
 80072d2:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 80072d4:	4b02      	ldr	r3, [pc, #8]	; (80072e0 <prvSetupTimerInterrupt+0x34>)
 80072d6:	2207      	movs	r2, #7
 80072d8:	601a      	str	r2, [r3, #0]
}
 80072da:	46c0      	nop			; (mov r8, r8)
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	e000e010 	.word	0xe000e010
 80072e4:	e000e018 	.word	0xe000e018
 80072e8:	20000000 	.word	0x20000000
 80072ec:	e000e014 	.word	0xe000e014

080072f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b086      	sub	sp, #24
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80072f8:	2300      	movs	r3, #0
 80072fa:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80072fc:	f7fe ff90 	bl	8006220 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007300:	4b49      	ldr	r3, [pc, #292]	; (8007428 <pvPortMalloc+0x138>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d101      	bne.n	800730c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007308:	f000 f8e0 	bl	80074cc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800730c:	4b47      	ldr	r3, [pc, #284]	; (800742c <pvPortMalloc+0x13c>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	4013      	ands	r3, r2
 8007314:	d000      	beq.n	8007318 <pvPortMalloc+0x28>
 8007316:	e079      	b.n	800740c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d012      	beq.n	8007344 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800731e:	2208      	movs	r2, #8
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	189b      	adds	r3, r3, r2
 8007324:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2207      	movs	r2, #7
 800732a:	4013      	ands	r3, r2
 800732c:	d00a      	beq.n	8007344 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2207      	movs	r2, #7
 8007332:	4393      	bics	r3, r2
 8007334:	3308      	adds	r3, #8
 8007336:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2207      	movs	r2, #7
 800733c:	4013      	ands	r3, r2
 800733e:	d001      	beq.n	8007344 <pvPortMalloc+0x54>
 8007340:	b672      	cpsid	i
 8007342:	e7fe      	b.n	8007342 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d060      	beq.n	800740c <pvPortMalloc+0x11c>
 800734a:	4b39      	ldr	r3, [pc, #228]	; (8007430 <pvPortMalloc+0x140>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	429a      	cmp	r2, r3
 8007352:	d85b      	bhi.n	800740c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007354:	4b37      	ldr	r3, [pc, #220]	; (8007434 <pvPortMalloc+0x144>)
 8007356:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8007358:	4b36      	ldr	r3, [pc, #216]	; (8007434 <pvPortMalloc+0x144>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800735e:	e004      	b.n	800736a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	429a      	cmp	r2, r3
 8007372:	d903      	bls.n	800737c <pvPortMalloc+0x8c>
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d1f1      	bne.n	8007360 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800737c:	4b2a      	ldr	r3, [pc, #168]	; (8007428 <pvPortMalloc+0x138>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	697a      	ldr	r2, [r7, #20]
 8007382:	429a      	cmp	r2, r3
 8007384:	d042      	beq.n	800740c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	2208      	movs	r2, #8
 800738c:	189b      	adds	r3, r3, r2
 800738e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	685a      	ldr	r2, [r3, #4]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	1ad2      	subs	r2, r2, r3
 80073a0:	2308      	movs	r3, #8
 80073a2:	005b      	lsls	r3, r3, #1
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d916      	bls.n	80073d6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80073a8:	697a      	ldr	r2, [r7, #20]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	18d3      	adds	r3, r2, r3
 80073ae:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	2207      	movs	r2, #7
 80073b4:	4013      	ands	r3, r2
 80073b6:	d001      	beq.n	80073bc <pvPortMalloc+0xcc>
 80073b8:	b672      	cpsid	i
 80073ba:	e7fe      	b.n	80073ba <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	685a      	ldr	r2, [r3, #4]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	1ad2      	subs	r2, r2, r3
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	0018      	movs	r0, r3
 80073d2:	f000 f8db 	bl	800758c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80073d6:	4b16      	ldr	r3, [pc, #88]	; (8007430 <pvPortMalloc+0x140>)
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	1ad2      	subs	r2, r2, r3
 80073e0:	4b13      	ldr	r3, [pc, #76]	; (8007430 <pvPortMalloc+0x140>)
 80073e2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80073e4:	4b12      	ldr	r3, [pc, #72]	; (8007430 <pvPortMalloc+0x140>)
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	4b13      	ldr	r3, [pc, #76]	; (8007438 <pvPortMalloc+0x148>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d203      	bcs.n	80073f8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80073f0:	4b0f      	ldr	r3, [pc, #60]	; (8007430 <pvPortMalloc+0x140>)
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	4b10      	ldr	r3, [pc, #64]	; (8007438 <pvPortMalloc+0x148>)
 80073f6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	685a      	ldr	r2, [r3, #4]
 80073fc:	4b0b      	ldr	r3, [pc, #44]	; (800742c <pvPortMalloc+0x13c>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	431a      	orrs	r2, r3
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	2200      	movs	r2, #0
 800740a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800740c:	f7fe ff14 	bl	8006238 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2207      	movs	r2, #7
 8007414:	4013      	ands	r3, r2
 8007416:	d001      	beq.n	800741c <pvPortMalloc+0x12c>
 8007418:	b672      	cpsid	i
 800741a:	e7fe      	b.n	800741a <pvPortMalloc+0x12a>
	return pvReturn;
 800741c:	68fb      	ldr	r3, [r7, #12]
}
 800741e:	0018      	movs	r0, r3
 8007420:	46bd      	mov	sp, r7
 8007422:	b006      	add	sp, #24
 8007424:	bd80      	pop	{r7, pc}
 8007426:	46c0      	nop			; (mov r8, r8)
 8007428:	20001d0c 	.word	0x20001d0c
 800742c:	20001d18 	.word	0x20001d18
 8007430:	20001d10 	.word	0x20001d10
 8007434:	20001d04 	.word	0x20001d04
 8007438:	20001d14 	.word	0x20001d14

0800743c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d035      	beq.n	80074ba <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800744e:	2308      	movs	r3, #8
 8007450:	425b      	negs	r3, r3
 8007452:	68fa      	ldr	r2, [r7, #12]
 8007454:	18d3      	adds	r3, r2, r3
 8007456:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	685a      	ldr	r2, [r3, #4]
 8007460:	4b18      	ldr	r3, [pc, #96]	; (80074c4 <vPortFree+0x88>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4013      	ands	r3, r2
 8007466:	d101      	bne.n	800746c <vPortFree+0x30>
 8007468:	b672      	cpsid	i
 800746a:	e7fe      	b.n	800746a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d001      	beq.n	8007478 <vPortFree+0x3c>
 8007474:	b672      	cpsid	i
 8007476:	e7fe      	b.n	8007476 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	685a      	ldr	r2, [r3, #4]
 800747c:	4b11      	ldr	r3, [pc, #68]	; (80074c4 <vPortFree+0x88>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4013      	ands	r3, r2
 8007482:	d01a      	beq.n	80074ba <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d116      	bne.n	80074ba <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	685a      	ldr	r2, [r3, #4]
 8007490:	4b0c      	ldr	r3, [pc, #48]	; (80074c4 <vPortFree+0x88>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	43db      	mvns	r3, r3
 8007496:	401a      	ands	r2, r3
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800749c:	f7fe fec0 	bl	8006220 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	685a      	ldr	r2, [r3, #4]
 80074a4:	4b08      	ldr	r3, [pc, #32]	; (80074c8 <vPortFree+0x8c>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	18d2      	adds	r2, r2, r3
 80074aa:	4b07      	ldr	r3, [pc, #28]	; (80074c8 <vPortFree+0x8c>)
 80074ac:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	0018      	movs	r0, r3
 80074b2:	f000 f86b 	bl	800758c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80074b6:	f7fe febf 	bl	8006238 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80074ba:	46c0      	nop			; (mov r8, r8)
 80074bc:	46bd      	mov	sp, r7
 80074be:	b004      	add	sp, #16
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	46c0      	nop			; (mov r8, r8)
 80074c4:	20001d18 	.word	0x20001d18
 80074c8:	20001d10 	.word	0x20001d10

080074cc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b084      	sub	sp, #16
 80074d0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80074d2:	23c0      	movs	r3, #192	; 0xc0
 80074d4:	011b      	lsls	r3, r3, #4
 80074d6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80074d8:	4b26      	ldr	r3, [pc, #152]	; (8007574 <prvHeapInit+0xa8>)
 80074da:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2207      	movs	r2, #7
 80074e0:	4013      	ands	r3, r2
 80074e2:	d00c      	beq.n	80074fe <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	3307      	adds	r3, #7
 80074e8:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2207      	movs	r2, #7
 80074ee:	4393      	bics	r3, r2
 80074f0:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80074f2:	68ba      	ldr	r2, [r7, #8]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	1ad2      	subs	r2, r2, r3
 80074f8:	4b1e      	ldr	r3, [pc, #120]	; (8007574 <prvHeapInit+0xa8>)
 80074fa:	18d3      	adds	r3, r2, r3
 80074fc:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007502:	4b1d      	ldr	r3, [pc, #116]	; (8007578 <prvHeapInit+0xac>)
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007508:	4b1b      	ldr	r3, [pc, #108]	; (8007578 <prvHeapInit+0xac>)
 800750a:	2200      	movs	r2, #0
 800750c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	68ba      	ldr	r2, [r7, #8]
 8007512:	18d3      	adds	r3, r2, r3
 8007514:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007516:	2208      	movs	r2, #8
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	1a9b      	subs	r3, r3, r2
 800751c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2207      	movs	r2, #7
 8007522:	4393      	bics	r3, r2
 8007524:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007526:	68fa      	ldr	r2, [r7, #12]
 8007528:	4b14      	ldr	r3, [pc, #80]	; (800757c <prvHeapInit+0xb0>)
 800752a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800752c:	4b13      	ldr	r3, [pc, #76]	; (800757c <prvHeapInit+0xb0>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2200      	movs	r2, #0
 8007532:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007534:	4b11      	ldr	r3, [pc, #68]	; (800757c <prvHeapInit+0xb0>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	2200      	movs	r2, #0
 800753a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	1ad2      	subs	r2, r2, r3
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800754a:	4b0c      	ldr	r3, [pc, #48]	; (800757c <prvHeapInit+0xb0>)
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	685a      	ldr	r2, [r3, #4]
 8007556:	4b0a      	ldr	r3, [pc, #40]	; (8007580 <prvHeapInit+0xb4>)
 8007558:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	685a      	ldr	r2, [r3, #4]
 800755e:	4b09      	ldr	r3, [pc, #36]	; (8007584 <prvHeapInit+0xb8>)
 8007560:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007562:	4b09      	ldr	r3, [pc, #36]	; (8007588 <prvHeapInit+0xbc>)
 8007564:	2280      	movs	r2, #128	; 0x80
 8007566:	0612      	lsls	r2, r2, #24
 8007568:	601a      	str	r2, [r3, #0]
}
 800756a:	46c0      	nop			; (mov r8, r8)
 800756c:	46bd      	mov	sp, r7
 800756e:	b004      	add	sp, #16
 8007570:	bd80      	pop	{r7, pc}
 8007572:	46c0      	nop			; (mov r8, r8)
 8007574:	20001104 	.word	0x20001104
 8007578:	20001d04 	.word	0x20001d04
 800757c:	20001d0c 	.word	0x20001d0c
 8007580:	20001d14 	.word	0x20001d14
 8007584:	20001d10 	.word	0x20001d10
 8007588:	20001d18 	.word	0x20001d18

0800758c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b084      	sub	sp, #16
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007594:	4b27      	ldr	r3, [pc, #156]	; (8007634 <prvInsertBlockIntoFreeList+0xa8>)
 8007596:	60fb      	str	r3, [r7, #12]
 8007598:	e002      	b.n	80075a0 <prvInsertBlockIntoFreeList+0x14>
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	60fb      	str	r3, [r7, #12]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d8f7      	bhi.n	800759a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	68ba      	ldr	r2, [r7, #8]
 80075b4:	18d3      	adds	r3, r2, r3
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d108      	bne.n	80075ce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	685a      	ldr	r2, [r3, #4]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	18d2      	adds	r2, r2, r3
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	68ba      	ldr	r2, [r7, #8]
 80075d8:	18d2      	adds	r2, r2, r3
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	429a      	cmp	r2, r3
 80075e0:	d118      	bne.n	8007614 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	4b14      	ldr	r3, [pc, #80]	; (8007638 <prvInsertBlockIntoFreeList+0xac>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d00d      	beq.n	800760a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	685a      	ldr	r2, [r3, #4]
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	18d2      	adds	r2, r2, r3
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	601a      	str	r2, [r3, #0]
 8007608:	e008      	b.n	800761c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800760a:	4b0b      	ldr	r3, [pc, #44]	; (8007638 <prvInsertBlockIntoFreeList+0xac>)
 800760c:	681a      	ldr	r2, [r3, #0]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	601a      	str	r2, [r3, #0]
 8007612:	e003      	b.n	800761c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	429a      	cmp	r2, r3
 8007622:	d002      	beq.n	800762a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800762a:	46c0      	nop			; (mov r8, r8)
 800762c:	46bd      	mov	sp, r7
 800762e:	b004      	add	sp, #16
 8007630:	bd80      	pop	{r7, pc}
 8007632:	46c0      	nop			; (mov r8, r8)
 8007634:	20001d04 	.word	0x20001d04
 8007638:	20001d0c 	.word	0x20001d0c

0800763c <__libc_init_array>:
 800763c:	b570      	push	{r4, r5, r6, lr}
 800763e:	2600      	movs	r6, #0
 8007640:	4d0c      	ldr	r5, [pc, #48]	; (8007674 <__libc_init_array+0x38>)
 8007642:	4c0d      	ldr	r4, [pc, #52]	; (8007678 <__libc_init_array+0x3c>)
 8007644:	1b64      	subs	r4, r4, r5
 8007646:	10a4      	asrs	r4, r4, #2
 8007648:	42a6      	cmp	r6, r4
 800764a:	d109      	bne.n	8007660 <__libc_init_array+0x24>
 800764c:	2600      	movs	r6, #0
 800764e:	f000 f8f9 	bl	8007844 <_init>
 8007652:	4d0a      	ldr	r5, [pc, #40]	; (800767c <__libc_init_array+0x40>)
 8007654:	4c0a      	ldr	r4, [pc, #40]	; (8007680 <__libc_init_array+0x44>)
 8007656:	1b64      	subs	r4, r4, r5
 8007658:	10a4      	asrs	r4, r4, #2
 800765a:	42a6      	cmp	r6, r4
 800765c:	d105      	bne.n	800766a <__libc_init_array+0x2e>
 800765e:	bd70      	pop	{r4, r5, r6, pc}
 8007660:	00b3      	lsls	r3, r6, #2
 8007662:	58eb      	ldr	r3, [r5, r3]
 8007664:	4798      	blx	r3
 8007666:	3601      	adds	r6, #1
 8007668:	e7ee      	b.n	8007648 <__libc_init_array+0xc>
 800766a:	00b3      	lsls	r3, r6, #2
 800766c:	58eb      	ldr	r3, [r5, r3]
 800766e:	4798      	blx	r3
 8007670:	3601      	adds	r6, #1
 8007672:	e7f2      	b.n	800765a <__libc_init_array+0x1e>
 8007674:	08007e58 	.word	0x08007e58
 8007678:	08007e58 	.word	0x08007e58
 800767c:	08007e58 	.word	0x08007e58
 8007680:	08007e5c 	.word	0x08007e5c

08007684 <__retarget_lock_acquire_recursive>:
 8007684:	4770      	bx	lr

08007686 <__retarget_lock_release_recursive>:
 8007686:	4770      	bx	lr

08007688 <memcpy>:
 8007688:	2300      	movs	r3, #0
 800768a:	b510      	push	{r4, lr}
 800768c:	429a      	cmp	r2, r3
 800768e:	d100      	bne.n	8007692 <memcpy+0xa>
 8007690:	bd10      	pop	{r4, pc}
 8007692:	5ccc      	ldrb	r4, [r1, r3]
 8007694:	54c4      	strb	r4, [r0, r3]
 8007696:	3301      	adds	r3, #1
 8007698:	e7f8      	b.n	800768c <memcpy+0x4>

0800769a <memset>:
 800769a:	0003      	movs	r3, r0
 800769c:	1882      	adds	r2, r0, r2
 800769e:	4293      	cmp	r3, r2
 80076a0:	d100      	bne.n	80076a4 <memset+0xa>
 80076a2:	4770      	bx	lr
 80076a4:	7019      	strb	r1, [r3, #0]
 80076a6:	3301      	adds	r3, #1
 80076a8:	e7f9      	b.n	800769e <memset+0x4>

080076aa <cleanup_glue>:
 80076aa:	b570      	push	{r4, r5, r6, lr}
 80076ac:	000d      	movs	r5, r1
 80076ae:	6809      	ldr	r1, [r1, #0]
 80076b0:	0004      	movs	r4, r0
 80076b2:	2900      	cmp	r1, #0
 80076b4:	d001      	beq.n	80076ba <cleanup_glue+0x10>
 80076b6:	f7ff fff8 	bl	80076aa <cleanup_glue>
 80076ba:	0029      	movs	r1, r5
 80076bc:	0020      	movs	r0, r4
 80076be:	f000 f877 	bl	80077b0 <_free_r>
 80076c2:	bd70      	pop	{r4, r5, r6, pc}

080076c4 <_reclaim_reent>:
 80076c4:	4b31      	ldr	r3, [pc, #196]	; (800778c <_reclaim_reent+0xc8>)
 80076c6:	b570      	push	{r4, r5, r6, lr}
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	0004      	movs	r4, r0
 80076cc:	4283      	cmp	r3, r0
 80076ce:	d049      	beq.n	8007764 <_reclaim_reent+0xa0>
 80076d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d00a      	beq.n	80076ec <_reclaim_reent+0x28>
 80076d6:	2500      	movs	r5, #0
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	42ab      	cmp	r3, r5
 80076dc:	d147      	bne.n	800776e <_reclaim_reent+0xaa>
 80076de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076e0:	6819      	ldr	r1, [r3, #0]
 80076e2:	2900      	cmp	r1, #0
 80076e4:	d002      	beq.n	80076ec <_reclaim_reent+0x28>
 80076e6:	0020      	movs	r0, r4
 80076e8:	f000 f862 	bl	80077b0 <_free_r>
 80076ec:	6961      	ldr	r1, [r4, #20]
 80076ee:	2900      	cmp	r1, #0
 80076f0:	d002      	beq.n	80076f8 <_reclaim_reent+0x34>
 80076f2:	0020      	movs	r0, r4
 80076f4:	f000 f85c 	bl	80077b0 <_free_r>
 80076f8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80076fa:	2900      	cmp	r1, #0
 80076fc:	d002      	beq.n	8007704 <_reclaim_reent+0x40>
 80076fe:	0020      	movs	r0, r4
 8007700:	f000 f856 	bl	80077b0 <_free_r>
 8007704:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007706:	2900      	cmp	r1, #0
 8007708:	d002      	beq.n	8007710 <_reclaim_reent+0x4c>
 800770a:	0020      	movs	r0, r4
 800770c:	f000 f850 	bl	80077b0 <_free_r>
 8007710:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007712:	2900      	cmp	r1, #0
 8007714:	d002      	beq.n	800771c <_reclaim_reent+0x58>
 8007716:	0020      	movs	r0, r4
 8007718:	f000 f84a 	bl	80077b0 <_free_r>
 800771c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800771e:	2900      	cmp	r1, #0
 8007720:	d002      	beq.n	8007728 <_reclaim_reent+0x64>
 8007722:	0020      	movs	r0, r4
 8007724:	f000 f844 	bl	80077b0 <_free_r>
 8007728:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800772a:	2900      	cmp	r1, #0
 800772c:	d002      	beq.n	8007734 <_reclaim_reent+0x70>
 800772e:	0020      	movs	r0, r4
 8007730:	f000 f83e 	bl	80077b0 <_free_r>
 8007734:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007736:	2900      	cmp	r1, #0
 8007738:	d002      	beq.n	8007740 <_reclaim_reent+0x7c>
 800773a:	0020      	movs	r0, r4
 800773c:	f000 f838 	bl	80077b0 <_free_r>
 8007740:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007742:	2900      	cmp	r1, #0
 8007744:	d002      	beq.n	800774c <_reclaim_reent+0x88>
 8007746:	0020      	movs	r0, r4
 8007748:	f000 f832 	bl	80077b0 <_free_r>
 800774c:	69a3      	ldr	r3, [r4, #24]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d008      	beq.n	8007764 <_reclaim_reent+0xa0>
 8007752:	0020      	movs	r0, r4
 8007754:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007756:	4798      	blx	r3
 8007758:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800775a:	2900      	cmp	r1, #0
 800775c:	d002      	beq.n	8007764 <_reclaim_reent+0xa0>
 800775e:	0020      	movs	r0, r4
 8007760:	f7ff ffa3 	bl	80076aa <cleanup_glue>
 8007764:	bd70      	pop	{r4, r5, r6, pc}
 8007766:	5949      	ldr	r1, [r1, r5]
 8007768:	2900      	cmp	r1, #0
 800776a:	d108      	bne.n	800777e <_reclaim_reent+0xba>
 800776c:	3504      	adds	r5, #4
 800776e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007770:	68d9      	ldr	r1, [r3, #12]
 8007772:	2d80      	cmp	r5, #128	; 0x80
 8007774:	d1f7      	bne.n	8007766 <_reclaim_reent+0xa2>
 8007776:	0020      	movs	r0, r4
 8007778:	f000 f81a 	bl	80077b0 <_free_r>
 800777c:	e7af      	b.n	80076de <_reclaim_reent+0x1a>
 800777e:	680e      	ldr	r6, [r1, #0]
 8007780:	0020      	movs	r0, r4
 8007782:	f000 f815 	bl	80077b0 <_free_r>
 8007786:	0031      	movs	r1, r6
 8007788:	e7ee      	b.n	8007768 <_reclaim_reent+0xa4>
 800778a:	46c0      	nop			; (mov r8, r8)
 800778c:	20000010 	.word	0x20000010

08007790 <__malloc_lock>:
 8007790:	b510      	push	{r4, lr}
 8007792:	4802      	ldr	r0, [pc, #8]	; (800779c <__malloc_lock+0xc>)
 8007794:	f7ff ff76 	bl	8007684 <__retarget_lock_acquire_recursive>
 8007798:	bd10      	pop	{r4, pc}
 800779a:	46c0      	nop			; (mov r8, r8)
 800779c:	20001d1c 	.word	0x20001d1c

080077a0 <__malloc_unlock>:
 80077a0:	b510      	push	{r4, lr}
 80077a2:	4802      	ldr	r0, [pc, #8]	; (80077ac <__malloc_unlock+0xc>)
 80077a4:	f7ff ff6f 	bl	8007686 <__retarget_lock_release_recursive>
 80077a8:	bd10      	pop	{r4, pc}
 80077aa:	46c0      	nop			; (mov r8, r8)
 80077ac:	20001d1c 	.word	0x20001d1c

080077b0 <_free_r>:
 80077b0:	b570      	push	{r4, r5, r6, lr}
 80077b2:	0005      	movs	r5, r0
 80077b4:	2900      	cmp	r1, #0
 80077b6:	d010      	beq.n	80077da <_free_r+0x2a>
 80077b8:	1f0c      	subs	r4, r1, #4
 80077ba:	6823      	ldr	r3, [r4, #0]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	da00      	bge.n	80077c2 <_free_r+0x12>
 80077c0:	18e4      	adds	r4, r4, r3
 80077c2:	0028      	movs	r0, r5
 80077c4:	f7ff ffe4 	bl	8007790 <__malloc_lock>
 80077c8:	4a1d      	ldr	r2, [pc, #116]	; (8007840 <_free_r+0x90>)
 80077ca:	6813      	ldr	r3, [r2, #0]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d105      	bne.n	80077dc <_free_r+0x2c>
 80077d0:	6063      	str	r3, [r4, #4]
 80077d2:	6014      	str	r4, [r2, #0]
 80077d4:	0028      	movs	r0, r5
 80077d6:	f7ff ffe3 	bl	80077a0 <__malloc_unlock>
 80077da:	bd70      	pop	{r4, r5, r6, pc}
 80077dc:	42a3      	cmp	r3, r4
 80077de:	d908      	bls.n	80077f2 <_free_r+0x42>
 80077e0:	6821      	ldr	r1, [r4, #0]
 80077e2:	1860      	adds	r0, r4, r1
 80077e4:	4283      	cmp	r3, r0
 80077e6:	d1f3      	bne.n	80077d0 <_free_r+0x20>
 80077e8:	6818      	ldr	r0, [r3, #0]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	1841      	adds	r1, r0, r1
 80077ee:	6021      	str	r1, [r4, #0]
 80077f0:	e7ee      	b.n	80077d0 <_free_r+0x20>
 80077f2:	001a      	movs	r2, r3
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d001      	beq.n	80077fe <_free_r+0x4e>
 80077fa:	42a3      	cmp	r3, r4
 80077fc:	d9f9      	bls.n	80077f2 <_free_r+0x42>
 80077fe:	6811      	ldr	r1, [r2, #0]
 8007800:	1850      	adds	r0, r2, r1
 8007802:	42a0      	cmp	r0, r4
 8007804:	d10b      	bne.n	800781e <_free_r+0x6e>
 8007806:	6820      	ldr	r0, [r4, #0]
 8007808:	1809      	adds	r1, r1, r0
 800780a:	1850      	adds	r0, r2, r1
 800780c:	6011      	str	r1, [r2, #0]
 800780e:	4283      	cmp	r3, r0
 8007810:	d1e0      	bne.n	80077d4 <_free_r+0x24>
 8007812:	6818      	ldr	r0, [r3, #0]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	1841      	adds	r1, r0, r1
 8007818:	6011      	str	r1, [r2, #0]
 800781a:	6053      	str	r3, [r2, #4]
 800781c:	e7da      	b.n	80077d4 <_free_r+0x24>
 800781e:	42a0      	cmp	r0, r4
 8007820:	d902      	bls.n	8007828 <_free_r+0x78>
 8007822:	230c      	movs	r3, #12
 8007824:	602b      	str	r3, [r5, #0]
 8007826:	e7d5      	b.n	80077d4 <_free_r+0x24>
 8007828:	6821      	ldr	r1, [r4, #0]
 800782a:	1860      	adds	r0, r4, r1
 800782c:	4283      	cmp	r3, r0
 800782e:	d103      	bne.n	8007838 <_free_r+0x88>
 8007830:	6818      	ldr	r0, [r3, #0]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	1841      	adds	r1, r0, r1
 8007836:	6021      	str	r1, [r4, #0]
 8007838:	6063      	str	r3, [r4, #4]
 800783a:	6054      	str	r4, [r2, #4]
 800783c:	e7ca      	b.n	80077d4 <_free_r+0x24>
 800783e:	46c0      	nop			; (mov r8, r8)
 8007840:	20001d20 	.word	0x20001d20

08007844 <_init>:
 8007844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007846:	46c0      	nop			; (mov r8, r8)
 8007848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800784a:	bc08      	pop	{r3}
 800784c:	469e      	mov	lr, r3
 800784e:	4770      	bx	lr

08007850 <_fini>:
 8007850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007852:	46c0      	nop			; (mov r8, r8)
 8007854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007856:	bc08      	pop	{r3}
 8007858:	469e      	mov	lr, r3
 800785a:	4770      	bx	lr
