
S7-MARTINEZMORA-CARLOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012c20  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012b0  08012ce0  08012ce0  00022ce0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013f90  08013f90  00030244  2**0
                  CONTENTS
  4 .ARM          00000000  08013f90  08013f90  00030244  2**0
                  CONTENTS
  5 .preinit_array 00000000  08013f90  08013f90  00030244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013f90  08013f90  00023f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013f94  08013f94  00023f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000244  20000000  08013f98  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f64  20000244  080141dc  00030244  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200021a8  080141dc  000321a8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030244  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005dead  00000000  00000000  0003026c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005c85  00000000  00000000  0008e119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003d88  00000000  00000000  00093da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003ad0  00000000  00000000  00097b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016beb  00000000  00000000  0009b5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c791  00000000  00000000  000b21e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090185  00000000  00000000  000de974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016eaf9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000fda0  00000000  00000000  0016eb4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000244 	.word	0x20000244
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08012cc8 	.word	0x08012cc8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000248 	.word	0x20000248
 8000104:	08012cc8 	.word	0x08012cc8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fb7f 	bl	8001b40 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 facf 	bl	80019f0 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fb71 	bl	8001b40 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fb67 	bl	8001b40 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 faf7 	bl	8001a74 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 faed 	bl	8001a74 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_f2uiz>:
 80004a8:	219e      	movs	r1, #158	; 0x9e
 80004aa:	b510      	push	{r4, lr}
 80004ac:	05c9      	lsls	r1, r1, #23
 80004ae:	1c04      	adds	r4, r0, #0
 80004b0:	f002 fb52 	bl	8002b58 <__aeabi_fcmpge>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d103      	bne.n	80004c0 <__aeabi_f2uiz+0x18>
 80004b8:	1c20      	adds	r0, r4, #0
 80004ba:	f000 fbf9 	bl	8000cb0 <__aeabi_f2iz>
 80004be:	bd10      	pop	{r4, pc}
 80004c0:	219e      	movs	r1, #158	; 0x9e
 80004c2:	1c20      	adds	r0, r4, #0
 80004c4:	05c9      	lsls	r1, r1, #23
 80004c6:	f000 fa45 	bl	8000954 <__aeabi_fsub>
 80004ca:	f000 fbf1 	bl	8000cb0 <__aeabi_f2iz>
 80004ce:	2380      	movs	r3, #128	; 0x80
 80004d0:	061b      	lsls	r3, r3, #24
 80004d2:	469c      	mov	ip, r3
 80004d4:	4460      	add	r0, ip
 80004d6:	e7f2      	b.n	80004be <__aeabi_f2uiz+0x16>

080004d8 <__aeabi_fdiv>:
 80004d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004da:	464f      	mov	r7, r9
 80004dc:	4646      	mov	r6, r8
 80004de:	46d6      	mov	lr, sl
 80004e0:	0245      	lsls	r5, r0, #9
 80004e2:	b5c0      	push	{r6, r7, lr}
 80004e4:	0047      	lsls	r7, r0, #1
 80004e6:	1c0c      	adds	r4, r1, #0
 80004e8:	0a6d      	lsrs	r5, r5, #9
 80004ea:	0e3f      	lsrs	r7, r7, #24
 80004ec:	0fc6      	lsrs	r6, r0, #31
 80004ee:	2f00      	cmp	r7, #0
 80004f0:	d100      	bne.n	80004f4 <__aeabi_fdiv+0x1c>
 80004f2:	e070      	b.n	80005d6 <__aeabi_fdiv+0xfe>
 80004f4:	2fff      	cmp	r7, #255	; 0xff
 80004f6:	d100      	bne.n	80004fa <__aeabi_fdiv+0x22>
 80004f8:	e075      	b.n	80005e6 <__aeabi_fdiv+0x10e>
 80004fa:	00eb      	lsls	r3, r5, #3
 80004fc:	2580      	movs	r5, #128	; 0x80
 80004fe:	04ed      	lsls	r5, r5, #19
 8000500:	431d      	orrs	r5, r3
 8000502:	2300      	movs	r3, #0
 8000504:	4699      	mov	r9, r3
 8000506:	469a      	mov	sl, r3
 8000508:	3f7f      	subs	r7, #127	; 0x7f
 800050a:	0260      	lsls	r0, r4, #9
 800050c:	0a43      	lsrs	r3, r0, #9
 800050e:	4698      	mov	r8, r3
 8000510:	0063      	lsls	r3, r4, #1
 8000512:	0e1b      	lsrs	r3, r3, #24
 8000514:	0fe4      	lsrs	r4, r4, #31
 8000516:	2b00      	cmp	r3, #0
 8000518:	d04e      	beq.n	80005b8 <__aeabi_fdiv+0xe0>
 800051a:	2bff      	cmp	r3, #255	; 0xff
 800051c:	d046      	beq.n	80005ac <__aeabi_fdiv+0xd4>
 800051e:	4642      	mov	r2, r8
 8000520:	00d0      	lsls	r0, r2, #3
 8000522:	2280      	movs	r2, #128	; 0x80
 8000524:	04d2      	lsls	r2, r2, #19
 8000526:	4302      	orrs	r2, r0
 8000528:	4690      	mov	r8, r2
 800052a:	2200      	movs	r2, #0
 800052c:	3b7f      	subs	r3, #127	; 0x7f
 800052e:	0031      	movs	r1, r6
 8000530:	1aff      	subs	r7, r7, r3
 8000532:	464b      	mov	r3, r9
 8000534:	4061      	eors	r1, r4
 8000536:	b2c9      	uxtb	r1, r1
 8000538:	4313      	orrs	r3, r2
 800053a:	2b0f      	cmp	r3, #15
 800053c:	d900      	bls.n	8000540 <__aeabi_fdiv+0x68>
 800053e:	e0b5      	b.n	80006ac <__aeabi_fdiv+0x1d4>
 8000540:	486e      	ldr	r0, [pc, #440]	; (80006fc <__aeabi_fdiv+0x224>)
 8000542:	009b      	lsls	r3, r3, #2
 8000544:	58c3      	ldr	r3, [r0, r3]
 8000546:	469f      	mov	pc, r3
 8000548:	2300      	movs	r3, #0
 800054a:	4698      	mov	r8, r3
 800054c:	0026      	movs	r6, r4
 800054e:	4645      	mov	r5, r8
 8000550:	4692      	mov	sl, r2
 8000552:	4653      	mov	r3, sl
 8000554:	2b02      	cmp	r3, #2
 8000556:	d100      	bne.n	800055a <__aeabi_fdiv+0x82>
 8000558:	e089      	b.n	800066e <__aeabi_fdiv+0x196>
 800055a:	2b03      	cmp	r3, #3
 800055c:	d100      	bne.n	8000560 <__aeabi_fdiv+0x88>
 800055e:	e09e      	b.n	800069e <__aeabi_fdiv+0x1c6>
 8000560:	2b01      	cmp	r3, #1
 8000562:	d018      	beq.n	8000596 <__aeabi_fdiv+0xbe>
 8000564:	003b      	movs	r3, r7
 8000566:	337f      	adds	r3, #127	; 0x7f
 8000568:	2b00      	cmp	r3, #0
 800056a:	dd69      	ble.n	8000640 <__aeabi_fdiv+0x168>
 800056c:	076a      	lsls	r2, r5, #29
 800056e:	d004      	beq.n	800057a <__aeabi_fdiv+0xa2>
 8000570:	220f      	movs	r2, #15
 8000572:	402a      	ands	r2, r5
 8000574:	2a04      	cmp	r2, #4
 8000576:	d000      	beq.n	800057a <__aeabi_fdiv+0xa2>
 8000578:	3504      	adds	r5, #4
 800057a:	012a      	lsls	r2, r5, #4
 800057c:	d503      	bpl.n	8000586 <__aeabi_fdiv+0xae>
 800057e:	4b60      	ldr	r3, [pc, #384]	; (8000700 <__aeabi_fdiv+0x228>)
 8000580:	401d      	ands	r5, r3
 8000582:	003b      	movs	r3, r7
 8000584:	3380      	adds	r3, #128	; 0x80
 8000586:	2bfe      	cmp	r3, #254	; 0xfe
 8000588:	dd00      	ble.n	800058c <__aeabi_fdiv+0xb4>
 800058a:	e070      	b.n	800066e <__aeabi_fdiv+0x196>
 800058c:	01ad      	lsls	r5, r5, #6
 800058e:	0a6d      	lsrs	r5, r5, #9
 8000590:	b2d8      	uxtb	r0, r3
 8000592:	e002      	b.n	800059a <__aeabi_fdiv+0xc2>
 8000594:	000e      	movs	r6, r1
 8000596:	2000      	movs	r0, #0
 8000598:	2500      	movs	r5, #0
 800059a:	05c0      	lsls	r0, r0, #23
 800059c:	4328      	orrs	r0, r5
 800059e:	07f6      	lsls	r6, r6, #31
 80005a0:	4330      	orrs	r0, r6
 80005a2:	bce0      	pop	{r5, r6, r7}
 80005a4:	46ba      	mov	sl, r7
 80005a6:	46b1      	mov	r9, r6
 80005a8:	46a8      	mov	r8, r5
 80005aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005ac:	4643      	mov	r3, r8
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d13f      	bne.n	8000632 <__aeabi_fdiv+0x15a>
 80005b2:	2202      	movs	r2, #2
 80005b4:	3fff      	subs	r7, #255	; 0xff
 80005b6:	e003      	b.n	80005c0 <__aeabi_fdiv+0xe8>
 80005b8:	4643      	mov	r3, r8
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d12d      	bne.n	800061a <__aeabi_fdiv+0x142>
 80005be:	2201      	movs	r2, #1
 80005c0:	0031      	movs	r1, r6
 80005c2:	464b      	mov	r3, r9
 80005c4:	4061      	eors	r1, r4
 80005c6:	b2c9      	uxtb	r1, r1
 80005c8:	4313      	orrs	r3, r2
 80005ca:	2b0f      	cmp	r3, #15
 80005cc:	d834      	bhi.n	8000638 <__aeabi_fdiv+0x160>
 80005ce:	484d      	ldr	r0, [pc, #308]	; (8000704 <__aeabi_fdiv+0x22c>)
 80005d0:	009b      	lsls	r3, r3, #2
 80005d2:	58c3      	ldr	r3, [r0, r3]
 80005d4:	469f      	mov	pc, r3
 80005d6:	2d00      	cmp	r5, #0
 80005d8:	d113      	bne.n	8000602 <__aeabi_fdiv+0x12a>
 80005da:	2304      	movs	r3, #4
 80005dc:	4699      	mov	r9, r3
 80005de:	3b03      	subs	r3, #3
 80005e0:	2700      	movs	r7, #0
 80005e2:	469a      	mov	sl, r3
 80005e4:	e791      	b.n	800050a <__aeabi_fdiv+0x32>
 80005e6:	2d00      	cmp	r5, #0
 80005e8:	d105      	bne.n	80005f6 <__aeabi_fdiv+0x11e>
 80005ea:	2308      	movs	r3, #8
 80005ec:	4699      	mov	r9, r3
 80005ee:	3b06      	subs	r3, #6
 80005f0:	27ff      	movs	r7, #255	; 0xff
 80005f2:	469a      	mov	sl, r3
 80005f4:	e789      	b.n	800050a <__aeabi_fdiv+0x32>
 80005f6:	230c      	movs	r3, #12
 80005f8:	4699      	mov	r9, r3
 80005fa:	3b09      	subs	r3, #9
 80005fc:	27ff      	movs	r7, #255	; 0xff
 80005fe:	469a      	mov	sl, r3
 8000600:	e783      	b.n	800050a <__aeabi_fdiv+0x32>
 8000602:	0028      	movs	r0, r5
 8000604:	f002 fab2 	bl	8002b6c <__clzsi2>
 8000608:	2776      	movs	r7, #118	; 0x76
 800060a:	1f43      	subs	r3, r0, #5
 800060c:	409d      	lsls	r5, r3
 800060e:	2300      	movs	r3, #0
 8000610:	427f      	negs	r7, r7
 8000612:	4699      	mov	r9, r3
 8000614:	469a      	mov	sl, r3
 8000616:	1a3f      	subs	r7, r7, r0
 8000618:	e777      	b.n	800050a <__aeabi_fdiv+0x32>
 800061a:	4640      	mov	r0, r8
 800061c:	f002 faa6 	bl	8002b6c <__clzsi2>
 8000620:	4642      	mov	r2, r8
 8000622:	1f43      	subs	r3, r0, #5
 8000624:	409a      	lsls	r2, r3
 8000626:	2376      	movs	r3, #118	; 0x76
 8000628:	425b      	negs	r3, r3
 800062a:	4690      	mov	r8, r2
 800062c:	1a1b      	subs	r3, r3, r0
 800062e:	2200      	movs	r2, #0
 8000630:	e77d      	b.n	800052e <__aeabi_fdiv+0x56>
 8000632:	23ff      	movs	r3, #255	; 0xff
 8000634:	2203      	movs	r2, #3
 8000636:	e77a      	b.n	800052e <__aeabi_fdiv+0x56>
 8000638:	000e      	movs	r6, r1
 800063a:	20ff      	movs	r0, #255	; 0xff
 800063c:	2500      	movs	r5, #0
 800063e:	e7ac      	b.n	800059a <__aeabi_fdiv+0xc2>
 8000640:	2001      	movs	r0, #1
 8000642:	1ac0      	subs	r0, r0, r3
 8000644:	281b      	cmp	r0, #27
 8000646:	dca6      	bgt.n	8000596 <__aeabi_fdiv+0xbe>
 8000648:	379e      	adds	r7, #158	; 0x9e
 800064a:	002a      	movs	r2, r5
 800064c:	40bd      	lsls	r5, r7
 800064e:	40c2      	lsrs	r2, r0
 8000650:	1e6b      	subs	r3, r5, #1
 8000652:	419d      	sbcs	r5, r3
 8000654:	4315      	orrs	r5, r2
 8000656:	076b      	lsls	r3, r5, #29
 8000658:	d004      	beq.n	8000664 <__aeabi_fdiv+0x18c>
 800065a:	230f      	movs	r3, #15
 800065c:	402b      	ands	r3, r5
 800065e:	2b04      	cmp	r3, #4
 8000660:	d000      	beq.n	8000664 <__aeabi_fdiv+0x18c>
 8000662:	3504      	adds	r5, #4
 8000664:	016b      	lsls	r3, r5, #5
 8000666:	d544      	bpl.n	80006f2 <__aeabi_fdiv+0x21a>
 8000668:	2001      	movs	r0, #1
 800066a:	2500      	movs	r5, #0
 800066c:	e795      	b.n	800059a <__aeabi_fdiv+0xc2>
 800066e:	20ff      	movs	r0, #255	; 0xff
 8000670:	2500      	movs	r5, #0
 8000672:	e792      	b.n	800059a <__aeabi_fdiv+0xc2>
 8000674:	2580      	movs	r5, #128	; 0x80
 8000676:	2600      	movs	r6, #0
 8000678:	20ff      	movs	r0, #255	; 0xff
 800067a:	03ed      	lsls	r5, r5, #15
 800067c:	e78d      	b.n	800059a <__aeabi_fdiv+0xc2>
 800067e:	2300      	movs	r3, #0
 8000680:	4698      	mov	r8, r3
 8000682:	2080      	movs	r0, #128	; 0x80
 8000684:	03c0      	lsls	r0, r0, #15
 8000686:	4205      	tst	r5, r0
 8000688:	d009      	beq.n	800069e <__aeabi_fdiv+0x1c6>
 800068a:	4643      	mov	r3, r8
 800068c:	4203      	tst	r3, r0
 800068e:	d106      	bne.n	800069e <__aeabi_fdiv+0x1c6>
 8000690:	4645      	mov	r5, r8
 8000692:	4305      	orrs	r5, r0
 8000694:	026d      	lsls	r5, r5, #9
 8000696:	0026      	movs	r6, r4
 8000698:	20ff      	movs	r0, #255	; 0xff
 800069a:	0a6d      	lsrs	r5, r5, #9
 800069c:	e77d      	b.n	800059a <__aeabi_fdiv+0xc2>
 800069e:	2080      	movs	r0, #128	; 0x80
 80006a0:	03c0      	lsls	r0, r0, #15
 80006a2:	4305      	orrs	r5, r0
 80006a4:	026d      	lsls	r5, r5, #9
 80006a6:	20ff      	movs	r0, #255	; 0xff
 80006a8:	0a6d      	lsrs	r5, r5, #9
 80006aa:	e776      	b.n	800059a <__aeabi_fdiv+0xc2>
 80006ac:	4642      	mov	r2, r8
 80006ae:	016b      	lsls	r3, r5, #5
 80006b0:	0150      	lsls	r0, r2, #5
 80006b2:	4283      	cmp	r3, r0
 80006b4:	d219      	bcs.n	80006ea <__aeabi_fdiv+0x212>
 80006b6:	221b      	movs	r2, #27
 80006b8:	2500      	movs	r5, #0
 80006ba:	3f01      	subs	r7, #1
 80006bc:	2601      	movs	r6, #1
 80006be:	001c      	movs	r4, r3
 80006c0:	006d      	lsls	r5, r5, #1
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	2c00      	cmp	r4, #0
 80006c6:	db01      	blt.n	80006cc <__aeabi_fdiv+0x1f4>
 80006c8:	4298      	cmp	r0, r3
 80006ca:	d801      	bhi.n	80006d0 <__aeabi_fdiv+0x1f8>
 80006cc:	1a1b      	subs	r3, r3, r0
 80006ce:	4335      	orrs	r5, r6
 80006d0:	3a01      	subs	r2, #1
 80006d2:	2a00      	cmp	r2, #0
 80006d4:	d1f3      	bne.n	80006be <__aeabi_fdiv+0x1e6>
 80006d6:	1e5a      	subs	r2, r3, #1
 80006d8:	4193      	sbcs	r3, r2
 80006da:	431d      	orrs	r5, r3
 80006dc:	003b      	movs	r3, r7
 80006de:	337f      	adds	r3, #127	; 0x7f
 80006e0:	000e      	movs	r6, r1
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	dd00      	ble.n	80006e8 <__aeabi_fdiv+0x210>
 80006e6:	e741      	b.n	800056c <__aeabi_fdiv+0x94>
 80006e8:	e7aa      	b.n	8000640 <__aeabi_fdiv+0x168>
 80006ea:	221a      	movs	r2, #26
 80006ec:	2501      	movs	r5, #1
 80006ee:	1a1b      	subs	r3, r3, r0
 80006f0:	e7e4      	b.n	80006bc <__aeabi_fdiv+0x1e4>
 80006f2:	01ad      	lsls	r5, r5, #6
 80006f4:	2000      	movs	r0, #0
 80006f6:	0a6d      	lsrs	r5, r5, #9
 80006f8:	e74f      	b.n	800059a <__aeabi_fdiv+0xc2>
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	08012ec4 	.word	0x08012ec4
 8000700:	f7ffffff 	.word	0xf7ffffff
 8000704:	08012f04 	.word	0x08012f04

08000708 <__aeabi_fmul>:
 8000708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800070a:	464f      	mov	r7, r9
 800070c:	4646      	mov	r6, r8
 800070e:	46d6      	mov	lr, sl
 8000710:	0244      	lsls	r4, r0, #9
 8000712:	0045      	lsls	r5, r0, #1
 8000714:	b5c0      	push	{r6, r7, lr}
 8000716:	0a64      	lsrs	r4, r4, #9
 8000718:	1c0f      	adds	r7, r1, #0
 800071a:	0e2d      	lsrs	r5, r5, #24
 800071c:	0fc6      	lsrs	r6, r0, #31
 800071e:	2d00      	cmp	r5, #0
 8000720:	d100      	bne.n	8000724 <__aeabi_fmul+0x1c>
 8000722:	e08d      	b.n	8000840 <__aeabi_fmul+0x138>
 8000724:	2dff      	cmp	r5, #255	; 0xff
 8000726:	d100      	bne.n	800072a <__aeabi_fmul+0x22>
 8000728:	e092      	b.n	8000850 <__aeabi_fmul+0x148>
 800072a:	2300      	movs	r3, #0
 800072c:	2080      	movs	r0, #128	; 0x80
 800072e:	4699      	mov	r9, r3
 8000730:	469a      	mov	sl, r3
 8000732:	00e4      	lsls	r4, r4, #3
 8000734:	04c0      	lsls	r0, r0, #19
 8000736:	4304      	orrs	r4, r0
 8000738:	3d7f      	subs	r5, #127	; 0x7f
 800073a:	0278      	lsls	r0, r7, #9
 800073c:	0a43      	lsrs	r3, r0, #9
 800073e:	4698      	mov	r8, r3
 8000740:	007b      	lsls	r3, r7, #1
 8000742:	0e1b      	lsrs	r3, r3, #24
 8000744:	0fff      	lsrs	r7, r7, #31
 8000746:	2b00      	cmp	r3, #0
 8000748:	d100      	bne.n	800074c <__aeabi_fmul+0x44>
 800074a:	e070      	b.n	800082e <__aeabi_fmul+0x126>
 800074c:	2bff      	cmp	r3, #255	; 0xff
 800074e:	d100      	bne.n	8000752 <__aeabi_fmul+0x4a>
 8000750:	e086      	b.n	8000860 <__aeabi_fmul+0x158>
 8000752:	4642      	mov	r2, r8
 8000754:	00d0      	lsls	r0, r2, #3
 8000756:	2280      	movs	r2, #128	; 0x80
 8000758:	3b7f      	subs	r3, #127	; 0x7f
 800075a:	18ed      	adds	r5, r5, r3
 800075c:	2300      	movs	r3, #0
 800075e:	04d2      	lsls	r2, r2, #19
 8000760:	4302      	orrs	r2, r0
 8000762:	4690      	mov	r8, r2
 8000764:	469c      	mov	ip, r3
 8000766:	0031      	movs	r1, r6
 8000768:	464b      	mov	r3, r9
 800076a:	4079      	eors	r1, r7
 800076c:	1c68      	adds	r0, r5, #1
 800076e:	2b0f      	cmp	r3, #15
 8000770:	d81c      	bhi.n	80007ac <__aeabi_fmul+0xa4>
 8000772:	4a76      	ldr	r2, [pc, #472]	; (800094c <__aeabi_fmul+0x244>)
 8000774:	009b      	lsls	r3, r3, #2
 8000776:	58d3      	ldr	r3, [r2, r3]
 8000778:	469f      	mov	pc, r3
 800077a:	0039      	movs	r1, r7
 800077c:	4644      	mov	r4, r8
 800077e:	46e2      	mov	sl, ip
 8000780:	4653      	mov	r3, sl
 8000782:	2b02      	cmp	r3, #2
 8000784:	d00f      	beq.n	80007a6 <__aeabi_fmul+0x9e>
 8000786:	2b03      	cmp	r3, #3
 8000788:	d100      	bne.n	800078c <__aeabi_fmul+0x84>
 800078a:	e0d7      	b.n	800093c <__aeabi_fmul+0x234>
 800078c:	2b01      	cmp	r3, #1
 800078e:	d137      	bne.n	8000800 <__aeabi_fmul+0xf8>
 8000790:	2000      	movs	r0, #0
 8000792:	2400      	movs	r4, #0
 8000794:	05c0      	lsls	r0, r0, #23
 8000796:	4320      	orrs	r0, r4
 8000798:	07c9      	lsls	r1, r1, #31
 800079a:	4308      	orrs	r0, r1
 800079c:	bce0      	pop	{r5, r6, r7}
 800079e:	46ba      	mov	sl, r7
 80007a0:	46b1      	mov	r9, r6
 80007a2:	46a8      	mov	r8, r5
 80007a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007a6:	20ff      	movs	r0, #255	; 0xff
 80007a8:	2400      	movs	r4, #0
 80007aa:	e7f3      	b.n	8000794 <__aeabi_fmul+0x8c>
 80007ac:	0c26      	lsrs	r6, r4, #16
 80007ae:	0424      	lsls	r4, r4, #16
 80007b0:	0c22      	lsrs	r2, r4, #16
 80007b2:	4644      	mov	r4, r8
 80007b4:	0424      	lsls	r4, r4, #16
 80007b6:	0c24      	lsrs	r4, r4, #16
 80007b8:	4643      	mov	r3, r8
 80007ba:	0027      	movs	r7, r4
 80007bc:	0c1b      	lsrs	r3, r3, #16
 80007be:	4357      	muls	r7, r2
 80007c0:	4374      	muls	r4, r6
 80007c2:	435a      	muls	r2, r3
 80007c4:	435e      	muls	r6, r3
 80007c6:	1912      	adds	r2, r2, r4
 80007c8:	0c3b      	lsrs	r3, r7, #16
 80007ca:	189b      	adds	r3, r3, r2
 80007cc:	429c      	cmp	r4, r3
 80007ce:	d903      	bls.n	80007d8 <__aeabi_fmul+0xd0>
 80007d0:	2280      	movs	r2, #128	; 0x80
 80007d2:	0252      	lsls	r2, r2, #9
 80007d4:	4694      	mov	ip, r2
 80007d6:	4466      	add	r6, ip
 80007d8:	043f      	lsls	r7, r7, #16
 80007da:	041a      	lsls	r2, r3, #16
 80007dc:	0c3f      	lsrs	r7, r7, #16
 80007de:	19d2      	adds	r2, r2, r7
 80007e0:	0194      	lsls	r4, r2, #6
 80007e2:	1e67      	subs	r7, r4, #1
 80007e4:	41bc      	sbcs	r4, r7
 80007e6:	0c1b      	lsrs	r3, r3, #16
 80007e8:	0e92      	lsrs	r2, r2, #26
 80007ea:	199b      	adds	r3, r3, r6
 80007ec:	4314      	orrs	r4, r2
 80007ee:	019b      	lsls	r3, r3, #6
 80007f0:	431c      	orrs	r4, r3
 80007f2:	011b      	lsls	r3, r3, #4
 80007f4:	d400      	bmi.n	80007f8 <__aeabi_fmul+0xf0>
 80007f6:	e09b      	b.n	8000930 <__aeabi_fmul+0x228>
 80007f8:	2301      	movs	r3, #1
 80007fa:	0862      	lsrs	r2, r4, #1
 80007fc:	401c      	ands	r4, r3
 80007fe:	4314      	orrs	r4, r2
 8000800:	0002      	movs	r2, r0
 8000802:	327f      	adds	r2, #127	; 0x7f
 8000804:	2a00      	cmp	r2, #0
 8000806:	dd64      	ble.n	80008d2 <__aeabi_fmul+0x1ca>
 8000808:	0763      	lsls	r3, r4, #29
 800080a:	d004      	beq.n	8000816 <__aeabi_fmul+0x10e>
 800080c:	230f      	movs	r3, #15
 800080e:	4023      	ands	r3, r4
 8000810:	2b04      	cmp	r3, #4
 8000812:	d000      	beq.n	8000816 <__aeabi_fmul+0x10e>
 8000814:	3404      	adds	r4, #4
 8000816:	0123      	lsls	r3, r4, #4
 8000818:	d503      	bpl.n	8000822 <__aeabi_fmul+0x11a>
 800081a:	0002      	movs	r2, r0
 800081c:	4b4c      	ldr	r3, [pc, #304]	; (8000950 <__aeabi_fmul+0x248>)
 800081e:	3280      	adds	r2, #128	; 0x80
 8000820:	401c      	ands	r4, r3
 8000822:	2afe      	cmp	r2, #254	; 0xfe
 8000824:	dcbf      	bgt.n	80007a6 <__aeabi_fmul+0x9e>
 8000826:	01a4      	lsls	r4, r4, #6
 8000828:	0a64      	lsrs	r4, r4, #9
 800082a:	b2d0      	uxtb	r0, r2
 800082c:	e7b2      	b.n	8000794 <__aeabi_fmul+0x8c>
 800082e:	4643      	mov	r3, r8
 8000830:	2b00      	cmp	r3, #0
 8000832:	d13d      	bne.n	80008b0 <__aeabi_fmul+0x1a8>
 8000834:	464a      	mov	r2, r9
 8000836:	3301      	adds	r3, #1
 8000838:	431a      	orrs	r2, r3
 800083a:	4691      	mov	r9, r2
 800083c:	469c      	mov	ip, r3
 800083e:	e792      	b.n	8000766 <__aeabi_fmul+0x5e>
 8000840:	2c00      	cmp	r4, #0
 8000842:	d129      	bne.n	8000898 <__aeabi_fmul+0x190>
 8000844:	2304      	movs	r3, #4
 8000846:	4699      	mov	r9, r3
 8000848:	3b03      	subs	r3, #3
 800084a:	2500      	movs	r5, #0
 800084c:	469a      	mov	sl, r3
 800084e:	e774      	b.n	800073a <__aeabi_fmul+0x32>
 8000850:	2c00      	cmp	r4, #0
 8000852:	d11b      	bne.n	800088c <__aeabi_fmul+0x184>
 8000854:	2308      	movs	r3, #8
 8000856:	4699      	mov	r9, r3
 8000858:	3b06      	subs	r3, #6
 800085a:	25ff      	movs	r5, #255	; 0xff
 800085c:	469a      	mov	sl, r3
 800085e:	e76c      	b.n	800073a <__aeabi_fmul+0x32>
 8000860:	4643      	mov	r3, r8
 8000862:	35ff      	adds	r5, #255	; 0xff
 8000864:	2b00      	cmp	r3, #0
 8000866:	d10b      	bne.n	8000880 <__aeabi_fmul+0x178>
 8000868:	2302      	movs	r3, #2
 800086a:	464a      	mov	r2, r9
 800086c:	431a      	orrs	r2, r3
 800086e:	4691      	mov	r9, r2
 8000870:	469c      	mov	ip, r3
 8000872:	e778      	b.n	8000766 <__aeabi_fmul+0x5e>
 8000874:	4653      	mov	r3, sl
 8000876:	0031      	movs	r1, r6
 8000878:	2b02      	cmp	r3, #2
 800087a:	d000      	beq.n	800087e <__aeabi_fmul+0x176>
 800087c:	e783      	b.n	8000786 <__aeabi_fmul+0x7e>
 800087e:	e792      	b.n	80007a6 <__aeabi_fmul+0x9e>
 8000880:	2303      	movs	r3, #3
 8000882:	464a      	mov	r2, r9
 8000884:	431a      	orrs	r2, r3
 8000886:	4691      	mov	r9, r2
 8000888:	469c      	mov	ip, r3
 800088a:	e76c      	b.n	8000766 <__aeabi_fmul+0x5e>
 800088c:	230c      	movs	r3, #12
 800088e:	4699      	mov	r9, r3
 8000890:	3b09      	subs	r3, #9
 8000892:	25ff      	movs	r5, #255	; 0xff
 8000894:	469a      	mov	sl, r3
 8000896:	e750      	b.n	800073a <__aeabi_fmul+0x32>
 8000898:	0020      	movs	r0, r4
 800089a:	f002 f967 	bl	8002b6c <__clzsi2>
 800089e:	2576      	movs	r5, #118	; 0x76
 80008a0:	1f43      	subs	r3, r0, #5
 80008a2:	409c      	lsls	r4, r3
 80008a4:	2300      	movs	r3, #0
 80008a6:	426d      	negs	r5, r5
 80008a8:	4699      	mov	r9, r3
 80008aa:	469a      	mov	sl, r3
 80008ac:	1a2d      	subs	r5, r5, r0
 80008ae:	e744      	b.n	800073a <__aeabi_fmul+0x32>
 80008b0:	4640      	mov	r0, r8
 80008b2:	f002 f95b 	bl	8002b6c <__clzsi2>
 80008b6:	4642      	mov	r2, r8
 80008b8:	1f43      	subs	r3, r0, #5
 80008ba:	409a      	lsls	r2, r3
 80008bc:	2300      	movs	r3, #0
 80008be:	1a2d      	subs	r5, r5, r0
 80008c0:	4690      	mov	r8, r2
 80008c2:	469c      	mov	ip, r3
 80008c4:	3d76      	subs	r5, #118	; 0x76
 80008c6:	e74e      	b.n	8000766 <__aeabi_fmul+0x5e>
 80008c8:	2480      	movs	r4, #128	; 0x80
 80008ca:	2100      	movs	r1, #0
 80008cc:	20ff      	movs	r0, #255	; 0xff
 80008ce:	03e4      	lsls	r4, r4, #15
 80008d0:	e760      	b.n	8000794 <__aeabi_fmul+0x8c>
 80008d2:	2301      	movs	r3, #1
 80008d4:	1a9b      	subs	r3, r3, r2
 80008d6:	2b1b      	cmp	r3, #27
 80008d8:	dd00      	ble.n	80008dc <__aeabi_fmul+0x1d4>
 80008da:	e759      	b.n	8000790 <__aeabi_fmul+0x88>
 80008dc:	0022      	movs	r2, r4
 80008de:	309e      	adds	r0, #158	; 0x9e
 80008e0:	40da      	lsrs	r2, r3
 80008e2:	4084      	lsls	r4, r0
 80008e4:	0013      	movs	r3, r2
 80008e6:	1e62      	subs	r2, r4, #1
 80008e8:	4194      	sbcs	r4, r2
 80008ea:	431c      	orrs	r4, r3
 80008ec:	0763      	lsls	r3, r4, #29
 80008ee:	d004      	beq.n	80008fa <__aeabi_fmul+0x1f2>
 80008f0:	230f      	movs	r3, #15
 80008f2:	4023      	ands	r3, r4
 80008f4:	2b04      	cmp	r3, #4
 80008f6:	d000      	beq.n	80008fa <__aeabi_fmul+0x1f2>
 80008f8:	3404      	adds	r4, #4
 80008fa:	0163      	lsls	r3, r4, #5
 80008fc:	d51a      	bpl.n	8000934 <__aeabi_fmul+0x22c>
 80008fe:	2001      	movs	r0, #1
 8000900:	2400      	movs	r4, #0
 8000902:	e747      	b.n	8000794 <__aeabi_fmul+0x8c>
 8000904:	2080      	movs	r0, #128	; 0x80
 8000906:	03c0      	lsls	r0, r0, #15
 8000908:	4204      	tst	r4, r0
 800090a:	d009      	beq.n	8000920 <__aeabi_fmul+0x218>
 800090c:	4643      	mov	r3, r8
 800090e:	4203      	tst	r3, r0
 8000910:	d106      	bne.n	8000920 <__aeabi_fmul+0x218>
 8000912:	4644      	mov	r4, r8
 8000914:	4304      	orrs	r4, r0
 8000916:	0264      	lsls	r4, r4, #9
 8000918:	0039      	movs	r1, r7
 800091a:	20ff      	movs	r0, #255	; 0xff
 800091c:	0a64      	lsrs	r4, r4, #9
 800091e:	e739      	b.n	8000794 <__aeabi_fmul+0x8c>
 8000920:	2080      	movs	r0, #128	; 0x80
 8000922:	03c0      	lsls	r0, r0, #15
 8000924:	4304      	orrs	r4, r0
 8000926:	0264      	lsls	r4, r4, #9
 8000928:	0031      	movs	r1, r6
 800092a:	20ff      	movs	r0, #255	; 0xff
 800092c:	0a64      	lsrs	r4, r4, #9
 800092e:	e731      	b.n	8000794 <__aeabi_fmul+0x8c>
 8000930:	0028      	movs	r0, r5
 8000932:	e765      	b.n	8000800 <__aeabi_fmul+0xf8>
 8000934:	01a4      	lsls	r4, r4, #6
 8000936:	2000      	movs	r0, #0
 8000938:	0a64      	lsrs	r4, r4, #9
 800093a:	e72b      	b.n	8000794 <__aeabi_fmul+0x8c>
 800093c:	2080      	movs	r0, #128	; 0x80
 800093e:	03c0      	lsls	r0, r0, #15
 8000940:	4304      	orrs	r4, r0
 8000942:	0264      	lsls	r4, r4, #9
 8000944:	20ff      	movs	r0, #255	; 0xff
 8000946:	0a64      	lsrs	r4, r4, #9
 8000948:	e724      	b.n	8000794 <__aeabi_fmul+0x8c>
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	08012f44 	.word	0x08012f44
 8000950:	f7ffffff 	.word	0xf7ffffff

08000954 <__aeabi_fsub>:
 8000954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000956:	46ce      	mov	lr, r9
 8000958:	4647      	mov	r7, r8
 800095a:	0243      	lsls	r3, r0, #9
 800095c:	0a5b      	lsrs	r3, r3, #9
 800095e:	024e      	lsls	r6, r1, #9
 8000960:	00da      	lsls	r2, r3, #3
 8000962:	4694      	mov	ip, r2
 8000964:	0a72      	lsrs	r2, r6, #9
 8000966:	4691      	mov	r9, r2
 8000968:	0045      	lsls	r5, r0, #1
 800096a:	004a      	lsls	r2, r1, #1
 800096c:	b580      	push	{r7, lr}
 800096e:	0e2d      	lsrs	r5, r5, #24
 8000970:	001f      	movs	r7, r3
 8000972:	0fc4      	lsrs	r4, r0, #31
 8000974:	0e12      	lsrs	r2, r2, #24
 8000976:	0fc9      	lsrs	r1, r1, #31
 8000978:	09b6      	lsrs	r6, r6, #6
 800097a:	2aff      	cmp	r2, #255	; 0xff
 800097c:	d05b      	beq.n	8000a36 <__aeabi_fsub+0xe2>
 800097e:	2001      	movs	r0, #1
 8000980:	4041      	eors	r1, r0
 8000982:	428c      	cmp	r4, r1
 8000984:	d039      	beq.n	80009fa <__aeabi_fsub+0xa6>
 8000986:	1aa8      	subs	r0, r5, r2
 8000988:	2800      	cmp	r0, #0
 800098a:	dd5a      	ble.n	8000a42 <__aeabi_fsub+0xee>
 800098c:	2a00      	cmp	r2, #0
 800098e:	d06a      	beq.n	8000a66 <__aeabi_fsub+0x112>
 8000990:	2dff      	cmp	r5, #255	; 0xff
 8000992:	d100      	bne.n	8000996 <__aeabi_fsub+0x42>
 8000994:	e0d9      	b.n	8000b4a <__aeabi_fsub+0x1f6>
 8000996:	2280      	movs	r2, #128	; 0x80
 8000998:	04d2      	lsls	r2, r2, #19
 800099a:	4316      	orrs	r6, r2
 800099c:	281b      	cmp	r0, #27
 800099e:	dc00      	bgt.n	80009a2 <__aeabi_fsub+0x4e>
 80009a0:	e0e9      	b.n	8000b76 <__aeabi_fsub+0x222>
 80009a2:	2001      	movs	r0, #1
 80009a4:	4663      	mov	r3, ip
 80009a6:	1a18      	subs	r0, r3, r0
 80009a8:	0143      	lsls	r3, r0, #5
 80009aa:	d400      	bmi.n	80009ae <__aeabi_fsub+0x5a>
 80009ac:	e0b4      	b.n	8000b18 <__aeabi_fsub+0x1c4>
 80009ae:	0180      	lsls	r0, r0, #6
 80009b0:	0987      	lsrs	r7, r0, #6
 80009b2:	0038      	movs	r0, r7
 80009b4:	f002 f8da 	bl	8002b6c <__clzsi2>
 80009b8:	3805      	subs	r0, #5
 80009ba:	4087      	lsls	r7, r0
 80009bc:	4285      	cmp	r5, r0
 80009be:	dc00      	bgt.n	80009c2 <__aeabi_fsub+0x6e>
 80009c0:	e0cc      	b.n	8000b5c <__aeabi_fsub+0x208>
 80009c2:	1a2d      	subs	r5, r5, r0
 80009c4:	48b5      	ldr	r0, [pc, #724]	; (8000c9c <__aeabi_fsub+0x348>)
 80009c6:	4038      	ands	r0, r7
 80009c8:	0743      	lsls	r3, r0, #29
 80009ca:	d004      	beq.n	80009d6 <__aeabi_fsub+0x82>
 80009cc:	230f      	movs	r3, #15
 80009ce:	4003      	ands	r3, r0
 80009d0:	2b04      	cmp	r3, #4
 80009d2:	d000      	beq.n	80009d6 <__aeabi_fsub+0x82>
 80009d4:	3004      	adds	r0, #4
 80009d6:	0143      	lsls	r3, r0, #5
 80009d8:	d400      	bmi.n	80009dc <__aeabi_fsub+0x88>
 80009da:	e0a0      	b.n	8000b1e <__aeabi_fsub+0x1ca>
 80009dc:	1c6a      	adds	r2, r5, #1
 80009de:	2dfe      	cmp	r5, #254	; 0xfe
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fsub+0x90>
 80009e2:	e08d      	b.n	8000b00 <__aeabi_fsub+0x1ac>
 80009e4:	0180      	lsls	r0, r0, #6
 80009e6:	0a47      	lsrs	r7, r0, #9
 80009e8:	b2d2      	uxtb	r2, r2
 80009ea:	05d0      	lsls	r0, r2, #23
 80009ec:	4338      	orrs	r0, r7
 80009ee:	07e4      	lsls	r4, r4, #31
 80009f0:	4320      	orrs	r0, r4
 80009f2:	bcc0      	pop	{r6, r7}
 80009f4:	46b9      	mov	r9, r7
 80009f6:	46b0      	mov	r8, r6
 80009f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009fa:	1aa8      	subs	r0, r5, r2
 80009fc:	4680      	mov	r8, r0
 80009fe:	2800      	cmp	r0, #0
 8000a00:	dd45      	ble.n	8000a8e <__aeabi_fsub+0x13a>
 8000a02:	2a00      	cmp	r2, #0
 8000a04:	d070      	beq.n	8000ae8 <__aeabi_fsub+0x194>
 8000a06:	2dff      	cmp	r5, #255	; 0xff
 8000a08:	d100      	bne.n	8000a0c <__aeabi_fsub+0xb8>
 8000a0a:	e09e      	b.n	8000b4a <__aeabi_fsub+0x1f6>
 8000a0c:	2380      	movs	r3, #128	; 0x80
 8000a0e:	04db      	lsls	r3, r3, #19
 8000a10:	431e      	orrs	r6, r3
 8000a12:	4643      	mov	r3, r8
 8000a14:	2b1b      	cmp	r3, #27
 8000a16:	dc00      	bgt.n	8000a1a <__aeabi_fsub+0xc6>
 8000a18:	e0d2      	b.n	8000bc0 <__aeabi_fsub+0x26c>
 8000a1a:	2001      	movs	r0, #1
 8000a1c:	4460      	add	r0, ip
 8000a1e:	0143      	lsls	r3, r0, #5
 8000a20:	d57a      	bpl.n	8000b18 <__aeabi_fsub+0x1c4>
 8000a22:	3501      	adds	r5, #1
 8000a24:	2dff      	cmp	r5, #255	; 0xff
 8000a26:	d06b      	beq.n	8000b00 <__aeabi_fsub+0x1ac>
 8000a28:	2301      	movs	r3, #1
 8000a2a:	4a9d      	ldr	r2, [pc, #628]	; (8000ca0 <__aeabi_fsub+0x34c>)
 8000a2c:	4003      	ands	r3, r0
 8000a2e:	0840      	lsrs	r0, r0, #1
 8000a30:	4010      	ands	r0, r2
 8000a32:	4318      	orrs	r0, r3
 8000a34:	e7c8      	b.n	80009c8 <__aeabi_fsub+0x74>
 8000a36:	2e00      	cmp	r6, #0
 8000a38:	d020      	beq.n	8000a7c <__aeabi_fsub+0x128>
 8000a3a:	428c      	cmp	r4, r1
 8000a3c:	d023      	beq.n	8000a86 <__aeabi_fsub+0x132>
 8000a3e:	0028      	movs	r0, r5
 8000a40:	38ff      	subs	r0, #255	; 0xff
 8000a42:	2800      	cmp	r0, #0
 8000a44:	d039      	beq.n	8000aba <__aeabi_fsub+0x166>
 8000a46:	1b57      	subs	r7, r2, r5
 8000a48:	2d00      	cmp	r5, #0
 8000a4a:	d000      	beq.n	8000a4e <__aeabi_fsub+0xfa>
 8000a4c:	e09d      	b.n	8000b8a <__aeabi_fsub+0x236>
 8000a4e:	4663      	mov	r3, ip
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d100      	bne.n	8000a56 <__aeabi_fsub+0x102>
 8000a54:	e0db      	b.n	8000c0e <__aeabi_fsub+0x2ba>
 8000a56:	1e7b      	subs	r3, r7, #1
 8000a58:	2f01      	cmp	r7, #1
 8000a5a:	d100      	bne.n	8000a5e <__aeabi_fsub+0x10a>
 8000a5c:	e10d      	b.n	8000c7a <__aeabi_fsub+0x326>
 8000a5e:	2fff      	cmp	r7, #255	; 0xff
 8000a60:	d071      	beq.n	8000b46 <__aeabi_fsub+0x1f2>
 8000a62:	001f      	movs	r7, r3
 8000a64:	e098      	b.n	8000b98 <__aeabi_fsub+0x244>
 8000a66:	2e00      	cmp	r6, #0
 8000a68:	d100      	bne.n	8000a6c <__aeabi_fsub+0x118>
 8000a6a:	e0a7      	b.n	8000bbc <__aeabi_fsub+0x268>
 8000a6c:	1e42      	subs	r2, r0, #1
 8000a6e:	2801      	cmp	r0, #1
 8000a70:	d100      	bne.n	8000a74 <__aeabi_fsub+0x120>
 8000a72:	e0e6      	b.n	8000c42 <__aeabi_fsub+0x2ee>
 8000a74:	28ff      	cmp	r0, #255	; 0xff
 8000a76:	d068      	beq.n	8000b4a <__aeabi_fsub+0x1f6>
 8000a78:	0010      	movs	r0, r2
 8000a7a:	e78f      	b.n	800099c <__aeabi_fsub+0x48>
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	4041      	eors	r1, r0
 8000a80:	42a1      	cmp	r1, r4
 8000a82:	d000      	beq.n	8000a86 <__aeabi_fsub+0x132>
 8000a84:	e77f      	b.n	8000986 <__aeabi_fsub+0x32>
 8000a86:	20ff      	movs	r0, #255	; 0xff
 8000a88:	4240      	negs	r0, r0
 8000a8a:	4680      	mov	r8, r0
 8000a8c:	44a8      	add	r8, r5
 8000a8e:	4640      	mov	r0, r8
 8000a90:	2800      	cmp	r0, #0
 8000a92:	d038      	beq.n	8000b06 <__aeabi_fsub+0x1b2>
 8000a94:	1b51      	subs	r1, r2, r5
 8000a96:	2d00      	cmp	r5, #0
 8000a98:	d100      	bne.n	8000a9c <__aeabi_fsub+0x148>
 8000a9a:	e0ae      	b.n	8000bfa <__aeabi_fsub+0x2a6>
 8000a9c:	2aff      	cmp	r2, #255	; 0xff
 8000a9e:	d100      	bne.n	8000aa2 <__aeabi_fsub+0x14e>
 8000aa0:	e0df      	b.n	8000c62 <__aeabi_fsub+0x30e>
 8000aa2:	2380      	movs	r3, #128	; 0x80
 8000aa4:	4660      	mov	r0, ip
 8000aa6:	04db      	lsls	r3, r3, #19
 8000aa8:	4318      	orrs	r0, r3
 8000aaa:	4684      	mov	ip, r0
 8000aac:	291b      	cmp	r1, #27
 8000aae:	dc00      	bgt.n	8000ab2 <__aeabi_fsub+0x15e>
 8000ab0:	e0d9      	b.n	8000c66 <__aeabi_fsub+0x312>
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	0015      	movs	r5, r2
 8000ab6:	1980      	adds	r0, r0, r6
 8000ab8:	e7b1      	b.n	8000a1e <__aeabi_fsub+0xca>
 8000aba:	20fe      	movs	r0, #254	; 0xfe
 8000abc:	1c6a      	adds	r2, r5, #1
 8000abe:	4210      	tst	r0, r2
 8000ac0:	d171      	bne.n	8000ba6 <__aeabi_fsub+0x252>
 8000ac2:	2d00      	cmp	r5, #0
 8000ac4:	d000      	beq.n	8000ac8 <__aeabi_fsub+0x174>
 8000ac6:	e0a6      	b.n	8000c16 <__aeabi_fsub+0x2c2>
 8000ac8:	4663      	mov	r3, ip
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d100      	bne.n	8000ad0 <__aeabi_fsub+0x17c>
 8000ace:	e0d9      	b.n	8000c84 <__aeabi_fsub+0x330>
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2e00      	cmp	r6, #0
 8000ad4:	d100      	bne.n	8000ad8 <__aeabi_fsub+0x184>
 8000ad6:	e788      	b.n	80009ea <__aeabi_fsub+0x96>
 8000ad8:	1b98      	subs	r0, r3, r6
 8000ada:	0143      	lsls	r3, r0, #5
 8000adc:	d400      	bmi.n	8000ae0 <__aeabi_fsub+0x18c>
 8000ade:	e0e1      	b.n	8000ca4 <__aeabi_fsub+0x350>
 8000ae0:	4663      	mov	r3, ip
 8000ae2:	000c      	movs	r4, r1
 8000ae4:	1af0      	subs	r0, r6, r3
 8000ae6:	e76f      	b.n	80009c8 <__aeabi_fsub+0x74>
 8000ae8:	2e00      	cmp	r6, #0
 8000aea:	d100      	bne.n	8000aee <__aeabi_fsub+0x19a>
 8000aec:	e0b7      	b.n	8000c5e <__aeabi_fsub+0x30a>
 8000aee:	0002      	movs	r2, r0
 8000af0:	3a01      	subs	r2, #1
 8000af2:	2801      	cmp	r0, #1
 8000af4:	d100      	bne.n	8000af8 <__aeabi_fsub+0x1a4>
 8000af6:	e09c      	b.n	8000c32 <__aeabi_fsub+0x2de>
 8000af8:	28ff      	cmp	r0, #255	; 0xff
 8000afa:	d026      	beq.n	8000b4a <__aeabi_fsub+0x1f6>
 8000afc:	4690      	mov	r8, r2
 8000afe:	e788      	b.n	8000a12 <__aeabi_fsub+0xbe>
 8000b00:	22ff      	movs	r2, #255	; 0xff
 8000b02:	2700      	movs	r7, #0
 8000b04:	e771      	b.n	80009ea <__aeabi_fsub+0x96>
 8000b06:	20fe      	movs	r0, #254	; 0xfe
 8000b08:	1c6a      	adds	r2, r5, #1
 8000b0a:	4210      	tst	r0, r2
 8000b0c:	d064      	beq.n	8000bd8 <__aeabi_fsub+0x284>
 8000b0e:	2aff      	cmp	r2, #255	; 0xff
 8000b10:	d0f6      	beq.n	8000b00 <__aeabi_fsub+0x1ac>
 8000b12:	0015      	movs	r5, r2
 8000b14:	4466      	add	r6, ip
 8000b16:	0870      	lsrs	r0, r6, #1
 8000b18:	0743      	lsls	r3, r0, #29
 8000b1a:	d000      	beq.n	8000b1e <__aeabi_fsub+0x1ca>
 8000b1c:	e756      	b.n	80009cc <__aeabi_fsub+0x78>
 8000b1e:	08c3      	lsrs	r3, r0, #3
 8000b20:	2dff      	cmp	r5, #255	; 0xff
 8000b22:	d012      	beq.n	8000b4a <__aeabi_fsub+0x1f6>
 8000b24:	025b      	lsls	r3, r3, #9
 8000b26:	0a5f      	lsrs	r7, r3, #9
 8000b28:	b2ea      	uxtb	r2, r5
 8000b2a:	e75e      	b.n	80009ea <__aeabi_fsub+0x96>
 8000b2c:	4662      	mov	r2, ip
 8000b2e:	2a00      	cmp	r2, #0
 8000b30:	d100      	bne.n	8000b34 <__aeabi_fsub+0x1e0>
 8000b32:	e096      	b.n	8000c62 <__aeabi_fsub+0x30e>
 8000b34:	2e00      	cmp	r6, #0
 8000b36:	d008      	beq.n	8000b4a <__aeabi_fsub+0x1f6>
 8000b38:	2280      	movs	r2, #128	; 0x80
 8000b3a:	03d2      	lsls	r2, r2, #15
 8000b3c:	4213      	tst	r3, r2
 8000b3e:	d004      	beq.n	8000b4a <__aeabi_fsub+0x1f6>
 8000b40:	4648      	mov	r0, r9
 8000b42:	4210      	tst	r0, r2
 8000b44:	d101      	bne.n	8000b4a <__aeabi_fsub+0x1f6>
 8000b46:	000c      	movs	r4, r1
 8000b48:	464b      	mov	r3, r9
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d0d8      	beq.n	8000b00 <__aeabi_fsub+0x1ac>
 8000b4e:	2780      	movs	r7, #128	; 0x80
 8000b50:	03ff      	lsls	r7, r7, #15
 8000b52:	431f      	orrs	r7, r3
 8000b54:	027f      	lsls	r7, r7, #9
 8000b56:	22ff      	movs	r2, #255	; 0xff
 8000b58:	0a7f      	lsrs	r7, r7, #9
 8000b5a:	e746      	b.n	80009ea <__aeabi_fsub+0x96>
 8000b5c:	2320      	movs	r3, #32
 8000b5e:	003a      	movs	r2, r7
 8000b60:	1b45      	subs	r5, r0, r5
 8000b62:	0038      	movs	r0, r7
 8000b64:	3501      	adds	r5, #1
 8000b66:	40ea      	lsrs	r2, r5
 8000b68:	1b5d      	subs	r5, r3, r5
 8000b6a:	40a8      	lsls	r0, r5
 8000b6c:	1e43      	subs	r3, r0, #1
 8000b6e:	4198      	sbcs	r0, r3
 8000b70:	2500      	movs	r5, #0
 8000b72:	4310      	orrs	r0, r2
 8000b74:	e728      	b.n	80009c8 <__aeabi_fsub+0x74>
 8000b76:	2320      	movs	r3, #32
 8000b78:	1a1b      	subs	r3, r3, r0
 8000b7a:	0032      	movs	r2, r6
 8000b7c:	409e      	lsls	r6, r3
 8000b7e:	40c2      	lsrs	r2, r0
 8000b80:	0030      	movs	r0, r6
 8000b82:	1e43      	subs	r3, r0, #1
 8000b84:	4198      	sbcs	r0, r3
 8000b86:	4310      	orrs	r0, r2
 8000b88:	e70c      	b.n	80009a4 <__aeabi_fsub+0x50>
 8000b8a:	2aff      	cmp	r2, #255	; 0xff
 8000b8c:	d0db      	beq.n	8000b46 <__aeabi_fsub+0x1f2>
 8000b8e:	2380      	movs	r3, #128	; 0x80
 8000b90:	4660      	mov	r0, ip
 8000b92:	04db      	lsls	r3, r3, #19
 8000b94:	4318      	orrs	r0, r3
 8000b96:	4684      	mov	ip, r0
 8000b98:	2f1b      	cmp	r7, #27
 8000b9a:	dd56      	ble.n	8000c4a <__aeabi_fsub+0x2f6>
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	000c      	movs	r4, r1
 8000ba0:	0015      	movs	r5, r2
 8000ba2:	1a30      	subs	r0, r6, r0
 8000ba4:	e700      	b.n	80009a8 <__aeabi_fsub+0x54>
 8000ba6:	4663      	mov	r3, ip
 8000ba8:	1b9f      	subs	r7, r3, r6
 8000baa:	017b      	lsls	r3, r7, #5
 8000bac:	d43d      	bmi.n	8000c2a <__aeabi_fsub+0x2d6>
 8000bae:	2f00      	cmp	r7, #0
 8000bb0:	d000      	beq.n	8000bb4 <__aeabi_fsub+0x260>
 8000bb2:	e6fe      	b.n	80009b2 <__aeabi_fsub+0x5e>
 8000bb4:	2400      	movs	r4, #0
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2700      	movs	r7, #0
 8000bba:	e716      	b.n	80009ea <__aeabi_fsub+0x96>
 8000bbc:	0005      	movs	r5, r0
 8000bbe:	e7af      	b.n	8000b20 <__aeabi_fsub+0x1cc>
 8000bc0:	0032      	movs	r2, r6
 8000bc2:	4643      	mov	r3, r8
 8000bc4:	4641      	mov	r1, r8
 8000bc6:	40da      	lsrs	r2, r3
 8000bc8:	2320      	movs	r3, #32
 8000bca:	1a5b      	subs	r3, r3, r1
 8000bcc:	409e      	lsls	r6, r3
 8000bce:	0030      	movs	r0, r6
 8000bd0:	1e43      	subs	r3, r0, #1
 8000bd2:	4198      	sbcs	r0, r3
 8000bd4:	4310      	orrs	r0, r2
 8000bd6:	e721      	b.n	8000a1c <__aeabi_fsub+0xc8>
 8000bd8:	2d00      	cmp	r5, #0
 8000bda:	d1a7      	bne.n	8000b2c <__aeabi_fsub+0x1d8>
 8000bdc:	4663      	mov	r3, ip
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d059      	beq.n	8000c96 <__aeabi_fsub+0x342>
 8000be2:	2200      	movs	r2, #0
 8000be4:	2e00      	cmp	r6, #0
 8000be6:	d100      	bne.n	8000bea <__aeabi_fsub+0x296>
 8000be8:	e6ff      	b.n	80009ea <__aeabi_fsub+0x96>
 8000bea:	0030      	movs	r0, r6
 8000bec:	4460      	add	r0, ip
 8000bee:	0143      	lsls	r3, r0, #5
 8000bf0:	d592      	bpl.n	8000b18 <__aeabi_fsub+0x1c4>
 8000bf2:	4b2a      	ldr	r3, [pc, #168]	; (8000c9c <__aeabi_fsub+0x348>)
 8000bf4:	3501      	adds	r5, #1
 8000bf6:	4018      	ands	r0, r3
 8000bf8:	e78e      	b.n	8000b18 <__aeabi_fsub+0x1c4>
 8000bfa:	4663      	mov	r3, ip
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d047      	beq.n	8000c90 <__aeabi_fsub+0x33c>
 8000c00:	1e4b      	subs	r3, r1, #1
 8000c02:	2901      	cmp	r1, #1
 8000c04:	d015      	beq.n	8000c32 <__aeabi_fsub+0x2de>
 8000c06:	29ff      	cmp	r1, #255	; 0xff
 8000c08:	d02b      	beq.n	8000c62 <__aeabi_fsub+0x30e>
 8000c0a:	0019      	movs	r1, r3
 8000c0c:	e74e      	b.n	8000aac <__aeabi_fsub+0x158>
 8000c0e:	000c      	movs	r4, r1
 8000c10:	464b      	mov	r3, r9
 8000c12:	003d      	movs	r5, r7
 8000c14:	e784      	b.n	8000b20 <__aeabi_fsub+0x1cc>
 8000c16:	4662      	mov	r2, ip
 8000c18:	2a00      	cmp	r2, #0
 8000c1a:	d18b      	bne.n	8000b34 <__aeabi_fsub+0x1e0>
 8000c1c:	2e00      	cmp	r6, #0
 8000c1e:	d192      	bne.n	8000b46 <__aeabi_fsub+0x1f2>
 8000c20:	2780      	movs	r7, #128	; 0x80
 8000c22:	2400      	movs	r4, #0
 8000c24:	22ff      	movs	r2, #255	; 0xff
 8000c26:	03ff      	lsls	r7, r7, #15
 8000c28:	e6df      	b.n	80009ea <__aeabi_fsub+0x96>
 8000c2a:	4663      	mov	r3, ip
 8000c2c:	000c      	movs	r4, r1
 8000c2e:	1af7      	subs	r7, r6, r3
 8000c30:	e6bf      	b.n	80009b2 <__aeabi_fsub+0x5e>
 8000c32:	0030      	movs	r0, r6
 8000c34:	4460      	add	r0, ip
 8000c36:	2501      	movs	r5, #1
 8000c38:	0143      	lsls	r3, r0, #5
 8000c3a:	d400      	bmi.n	8000c3e <__aeabi_fsub+0x2ea>
 8000c3c:	e76c      	b.n	8000b18 <__aeabi_fsub+0x1c4>
 8000c3e:	2502      	movs	r5, #2
 8000c40:	e6f2      	b.n	8000a28 <__aeabi_fsub+0xd4>
 8000c42:	4663      	mov	r3, ip
 8000c44:	2501      	movs	r5, #1
 8000c46:	1b98      	subs	r0, r3, r6
 8000c48:	e6ae      	b.n	80009a8 <__aeabi_fsub+0x54>
 8000c4a:	2320      	movs	r3, #32
 8000c4c:	4664      	mov	r4, ip
 8000c4e:	4660      	mov	r0, ip
 8000c50:	40fc      	lsrs	r4, r7
 8000c52:	1bdf      	subs	r7, r3, r7
 8000c54:	40b8      	lsls	r0, r7
 8000c56:	1e43      	subs	r3, r0, #1
 8000c58:	4198      	sbcs	r0, r3
 8000c5a:	4320      	orrs	r0, r4
 8000c5c:	e79f      	b.n	8000b9e <__aeabi_fsub+0x24a>
 8000c5e:	0005      	movs	r5, r0
 8000c60:	e75e      	b.n	8000b20 <__aeabi_fsub+0x1cc>
 8000c62:	464b      	mov	r3, r9
 8000c64:	e771      	b.n	8000b4a <__aeabi_fsub+0x1f6>
 8000c66:	2320      	movs	r3, #32
 8000c68:	4665      	mov	r5, ip
 8000c6a:	4660      	mov	r0, ip
 8000c6c:	40cd      	lsrs	r5, r1
 8000c6e:	1a59      	subs	r1, r3, r1
 8000c70:	4088      	lsls	r0, r1
 8000c72:	1e43      	subs	r3, r0, #1
 8000c74:	4198      	sbcs	r0, r3
 8000c76:	4328      	orrs	r0, r5
 8000c78:	e71c      	b.n	8000ab4 <__aeabi_fsub+0x160>
 8000c7a:	4663      	mov	r3, ip
 8000c7c:	000c      	movs	r4, r1
 8000c7e:	2501      	movs	r5, #1
 8000c80:	1af0      	subs	r0, r6, r3
 8000c82:	e691      	b.n	80009a8 <__aeabi_fsub+0x54>
 8000c84:	2e00      	cmp	r6, #0
 8000c86:	d095      	beq.n	8000bb4 <__aeabi_fsub+0x260>
 8000c88:	000c      	movs	r4, r1
 8000c8a:	464f      	mov	r7, r9
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	e6ac      	b.n	80009ea <__aeabi_fsub+0x96>
 8000c90:	464b      	mov	r3, r9
 8000c92:	000d      	movs	r5, r1
 8000c94:	e744      	b.n	8000b20 <__aeabi_fsub+0x1cc>
 8000c96:	464f      	mov	r7, r9
 8000c98:	2200      	movs	r2, #0
 8000c9a:	e6a6      	b.n	80009ea <__aeabi_fsub+0x96>
 8000c9c:	fbffffff 	.word	0xfbffffff
 8000ca0:	7dffffff 	.word	0x7dffffff
 8000ca4:	2800      	cmp	r0, #0
 8000ca6:	d000      	beq.n	8000caa <__aeabi_fsub+0x356>
 8000ca8:	e736      	b.n	8000b18 <__aeabi_fsub+0x1c4>
 8000caa:	2400      	movs	r4, #0
 8000cac:	2700      	movs	r7, #0
 8000cae:	e69c      	b.n	80009ea <__aeabi_fsub+0x96>

08000cb0 <__aeabi_f2iz>:
 8000cb0:	0241      	lsls	r1, r0, #9
 8000cb2:	0042      	lsls	r2, r0, #1
 8000cb4:	0fc3      	lsrs	r3, r0, #31
 8000cb6:	0a49      	lsrs	r1, r1, #9
 8000cb8:	2000      	movs	r0, #0
 8000cba:	0e12      	lsrs	r2, r2, #24
 8000cbc:	2a7e      	cmp	r2, #126	; 0x7e
 8000cbe:	dd03      	ble.n	8000cc8 <__aeabi_f2iz+0x18>
 8000cc0:	2a9d      	cmp	r2, #157	; 0x9d
 8000cc2:	dd02      	ble.n	8000cca <__aeabi_f2iz+0x1a>
 8000cc4:	4a09      	ldr	r2, [pc, #36]	; (8000cec <__aeabi_f2iz+0x3c>)
 8000cc6:	1898      	adds	r0, r3, r2
 8000cc8:	4770      	bx	lr
 8000cca:	2080      	movs	r0, #128	; 0x80
 8000ccc:	0400      	lsls	r0, r0, #16
 8000cce:	4301      	orrs	r1, r0
 8000cd0:	2a95      	cmp	r2, #149	; 0x95
 8000cd2:	dc07      	bgt.n	8000ce4 <__aeabi_f2iz+0x34>
 8000cd4:	2096      	movs	r0, #150	; 0x96
 8000cd6:	1a82      	subs	r2, r0, r2
 8000cd8:	40d1      	lsrs	r1, r2
 8000cda:	4248      	negs	r0, r1
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d1f3      	bne.n	8000cc8 <__aeabi_f2iz+0x18>
 8000ce0:	0008      	movs	r0, r1
 8000ce2:	e7f1      	b.n	8000cc8 <__aeabi_f2iz+0x18>
 8000ce4:	3a96      	subs	r2, #150	; 0x96
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	e7f7      	b.n	8000cda <__aeabi_f2iz+0x2a>
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	7fffffff 	.word	0x7fffffff

08000cf0 <__aeabi_i2f>:
 8000cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cf2:	2800      	cmp	r0, #0
 8000cf4:	d013      	beq.n	8000d1e <__aeabi_i2f+0x2e>
 8000cf6:	17c3      	asrs	r3, r0, #31
 8000cf8:	18c6      	adds	r6, r0, r3
 8000cfa:	405e      	eors	r6, r3
 8000cfc:	0fc4      	lsrs	r4, r0, #31
 8000cfe:	0030      	movs	r0, r6
 8000d00:	f001 ff34 	bl	8002b6c <__clzsi2>
 8000d04:	239e      	movs	r3, #158	; 0x9e
 8000d06:	0005      	movs	r5, r0
 8000d08:	1a1b      	subs	r3, r3, r0
 8000d0a:	2b96      	cmp	r3, #150	; 0x96
 8000d0c:	dc0f      	bgt.n	8000d2e <__aeabi_i2f+0x3e>
 8000d0e:	2808      	cmp	r0, #8
 8000d10:	dd01      	ble.n	8000d16 <__aeabi_i2f+0x26>
 8000d12:	3d08      	subs	r5, #8
 8000d14:	40ae      	lsls	r6, r5
 8000d16:	0276      	lsls	r6, r6, #9
 8000d18:	0a76      	lsrs	r6, r6, #9
 8000d1a:	b2d8      	uxtb	r0, r3
 8000d1c:	e002      	b.n	8000d24 <__aeabi_i2f+0x34>
 8000d1e:	2400      	movs	r4, #0
 8000d20:	2000      	movs	r0, #0
 8000d22:	2600      	movs	r6, #0
 8000d24:	05c0      	lsls	r0, r0, #23
 8000d26:	4330      	orrs	r0, r6
 8000d28:	07e4      	lsls	r4, r4, #31
 8000d2a:	4320      	orrs	r0, r4
 8000d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d2e:	2b99      	cmp	r3, #153	; 0x99
 8000d30:	dd0c      	ble.n	8000d4c <__aeabi_i2f+0x5c>
 8000d32:	2205      	movs	r2, #5
 8000d34:	0031      	movs	r1, r6
 8000d36:	1a12      	subs	r2, r2, r0
 8000d38:	40d1      	lsrs	r1, r2
 8000d3a:	000a      	movs	r2, r1
 8000d3c:	0001      	movs	r1, r0
 8000d3e:	0030      	movs	r0, r6
 8000d40:	311b      	adds	r1, #27
 8000d42:	4088      	lsls	r0, r1
 8000d44:	1e41      	subs	r1, r0, #1
 8000d46:	4188      	sbcs	r0, r1
 8000d48:	4302      	orrs	r2, r0
 8000d4a:	0016      	movs	r6, r2
 8000d4c:	2d05      	cmp	r5, #5
 8000d4e:	dc12      	bgt.n	8000d76 <__aeabi_i2f+0x86>
 8000d50:	0031      	movs	r1, r6
 8000d52:	4f0d      	ldr	r7, [pc, #52]	; (8000d88 <__aeabi_i2f+0x98>)
 8000d54:	4039      	ands	r1, r7
 8000d56:	0772      	lsls	r2, r6, #29
 8000d58:	d009      	beq.n	8000d6e <__aeabi_i2f+0x7e>
 8000d5a:	200f      	movs	r0, #15
 8000d5c:	4030      	ands	r0, r6
 8000d5e:	2804      	cmp	r0, #4
 8000d60:	d005      	beq.n	8000d6e <__aeabi_i2f+0x7e>
 8000d62:	3104      	adds	r1, #4
 8000d64:	014a      	lsls	r2, r1, #5
 8000d66:	d502      	bpl.n	8000d6e <__aeabi_i2f+0x7e>
 8000d68:	239f      	movs	r3, #159	; 0x9f
 8000d6a:	4039      	ands	r1, r7
 8000d6c:	1b5b      	subs	r3, r3, r5
 8000d6e:	0189      	lsls	r1, r1, #6
 8000d70:	0a4e      	lsrs	r6, r1, #9
 8000d72:	b2d8      	uxtb	r0, r3
 8000d74:	e7d6      	b.n	8000d24 <__aeabi_i2f+0x34>
 8000d76:	1f6a      	subs	r2, r5, #5
 8000d78:	4096      	lsls	r6, r2
 8000d7a:	0031      	movs	r1, r6
 8000d7c:	4f02      	ldr	r7, [pc, #8]	; (8000d88 <__aeabi_i2f+0x98>)
 8000d7e:	4039      	ands	r1, r7
 8000d80:	0772      	lsls	r2, r6, #29
 8000d82:	d0f4      	beq.n	8000d6e <__aeabi_i2f+0x7e>
 8000d84:	e7e9      	b.n	8000d5a <__aeabi_i2f+0x6a>
 8000d86:	46c0      	nop			; (mov r8, r8)
 8000d88:	fbffffff 	.word	0xfbffffff

08000d8c <__aeabi_dadd>:
 8000d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d8e:	464f      	mov	r7, r9
 8000d90:	4646      	mov	r6, r8
 8000d92:	46d6      	mov	lr, sl
 8000d94:	000d      	movs	r5, r1
 8000d96:	0004      	movs	r4, r0
 8000d98:	b5c0      	push	{r6, r7, lr}
 8000d9a:	001f      	movs	r7, r3
 8000d9c:	0011      	movs	r1, r2
 8000d9e:	0328      	lsls	r0, r5, #12
 8000da0:	0f62      	lsrs	r2, r4, #29
 8000da2:	0a40      	lsrs	r0, r0, #9
 8000da4:	4310      	orrs	r0, r2
 8000da6:	007a      	lsls	r2, r7, #1
 8000da8:	0d52      	lsrs	r2, r2, #21
 8000daa:	00e3      	lsls	r3, r4, #3
 8000dac:	033c      	lsls	r4, r7, #12
 8000dae:	4691      	mov	r9, r2
 8000db0:	0a64      	lsrs	r4, r4, #9
 8000db2:	0ffa      	lsrs	r2, r7, #31
 8000db4:	0f4f      	lsrs	r7, r1, #29
 8000db6:	006e      	lsls	r6, r5, #1
 8000db8:	4327      	orrs	r7, r4
 8000dba:	4692      	mov	sl, r2
 8000dbc:	46b8      	mov	r8, r7
 8000dbe:	0d76      	lsrs	r6, r6, #21
 8000dc0:	0fed      	lsrs	r5, r5, #31
 8000dc2:	00c9      	lsls	r1, r1, #3
 8000dc4:	4295      	cmp	r5, r2
 8000dc6:	d100      	bne.n	8000dca <__aeabi_dadd+0x3e>
 8000dc8:	e099      	b.n	8000efe <__aeabi_dadd+0x172>
 8000dca:	464c      	mov	r4, r9
 8000dcc:	1b34      	subs	r4, r6, r4
 8000dce:	46a4      	mov	ip, r4
 8000dd0:	2c00      	cmp	r4, #0
 8000dd2:	dc00      	bgt.n	8000dd6 <__aeabi_dadd+0x4a>
 8000dd4:	e07c      	b.n	8000ed0 <__aeabi_dadd+0x144>
 8000dd6:	464a      	mov	r2, r9
 8000dd8:	2a00      	cmp	r2, #0
 8000dda:	d100      	bne.n	8000dde <__aeabi_dadd+0x52>
 8000ddc:	e0b8      	b.n	8000f50 <__aeabi_dadd+0x1c4>
 8000dde:	4ac5      	ldr	r2, [pc, #788]	; (80010f4 <__aeabi_dadd+0x368>)
 8000de0:	4296      	cmp	r6, r2
 8000de2:	d100      	bne.n	8000de6 <__aeabi_dadd+0x5a>
 8000de4:	e11c      	b.n	8001020 <__aeabi_dadd+0x294>
 8000de6:	2280      	movs	r2, #128	; 0x80
 8000de8:	003c      	movs	r4, r7
 8000dea:	0412      	lsls	r2, r2, #16
 8000dec:	4314      	orrs	r4, r2
 8000dee:	46a0      	mov	r8, r4
 8000df0:	4662      	mov	r2, ip
 8000df2:	2a38      	cmp	r2, #56	; 0x38
 8000df4:	dd00      	ble.n	8000df8 <__aeabi_dadd+0x6c>
 8000df6:	e161      	b.n	80010bc <__aeabi_dadd+0x330>
 8000df8:	2a1f      	cmp	r2, #31
 8000dfa:	dd00      	ble.n	8000dfe <__aeabi_dadd+0x72>
 8000dfc:	e1cc      	b.n	8001198 <__aeabi_dadd+0x40c>
 8000dfe:	4664      	mov	r4, ip
 8000e00:	2220      	movs	r2, #32
 8000e02:	1b12      	subs	r2, r2, r4
 8000e04:	4644      	mov	r4, r8
 8000e06:	4094      	lsls	r4, r2
 8000e08:	000f      	movs	r7, r1
 8000e0a:	46a1      	mov	r9, r4
 8000e0c:	4664      	mov	r4, ip
 8000e0e:	4091      	lsls	r1, r2
 8000e10:	40e7      	lsrs	r7, r4
 8000e12:	464c      	mov	r4, r9
 8000e14:	1e4a      	subs	r2, r1, #1
 8000e16:	4191      	sbcs	r1, r2
 8000e18:	433c      	orrs	r4, r7
 8000e1a:	4642      	mov	r2, r8
 8000e1c:	4321      	orrs	r1, r4
 8000e1e:	4664      	mov	r4, ip
 8000e20:	40e2      	lsrs	r2, r4
 8000e22:	1a80      	subs	r0, r0, r2
 8000e24:	1a5c      	subs	r4, r3, r1
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	419b      	sbcs	r3, r3
 8000e2a:	425f      	negs	r7, r3
 8000e2c:	1bc7      	subs	r7, r0, r7
 8000e2e:	023b      	lsls	r3, r7, #8
 8000e30:	d400      	bmi.n	8000e34 <__aeabi_dadd+0xa8>
 8000e32:	e0d0      	b.n	8000fd6 <__aeabi_dadd+0x24a>
 8000e34:	027f      	lsls	r7, r7, #9
 8000e36:	0a7f      	lsrs	r7, r7, #9
 8000e38:	2f00      	cmp	r7, #0
 8000e3a:	d100      	bne.n	8000e3e <__aeabi_dadd+0xb2>
 8000e3c:	e0ff      	b.n	800103e <__aeabi_dadd+0x2b2>
 8000e3e:	0038      	movs	r0, r7
 8000e40:	f001 fe94 	bl	8002b6c <__clzsi2>
 8000e44:	0001      	movs	r1, r0
 8000e46:	3908      	subs	r1, #8
 8000e48:	2320      	movs	r3, #32
 8000e4a:	0022      	movs	r2, r4
 8000e4c:	1a5b      	subs	r3, r3, r1
 8000e4e:	408f      	lsls	r7, r1
 8000e50:	40da      	lsrs	r2, r3
 8000e52:	408c      	lsls	r4, r1
 8000e54:	4317      	orrs	r7, r2
 8000e56:	42b1      	cmp	r1, r6
 8000e58:	da00      	bge.n	8000e5c <__aeabi_dadd+0xd0>
 8000e5a:	e0ff      	b.n	800105c <__aeabi_dadd+0x2d0>
 8000e5c:	1b89      	subs	r1, r1, r6
 8000e5e:	1c4b      	adds	r3, r1, #1
 8000e60:	2b1f      	cmp	r3, #31
 8000e62:	dd00      	ble.n	8000e66 <__aeabi_dadd+0xda>
 8000e64:	e0a8      	b.n	8000fb8 <__aeabi_dadd+0x22c>
 8000e66:	2220      	movs	r2, #32
 8000e68:	0039      	movs	r1, r7
 8000e6a:	1ad2      	subs	r2, r2, r3
 8000e6c:	0020      	movs	r0, r4
 8000e6e:	4094      	lsls	r4, r2
 8000e70:	4091      	lsls	r1, r2
 8000e72:	40d8      	lsrs	r0, r3
 8000e74:	1e62      	subs	r2, r4, #1
 8000e76:	4194      	sbcs	r4, r2
 8000e78:	40df      	lsrs	r7, r3
 8000e7a:	2600      	movs	r6, #0
 8000e7c:	4301      	orrs	r1, r0
 8000e7e:	430c      	orrs	r4, r1
 8000e80:	0763      	lsls	r3, r4, #29
 8000e82:	d009      	beq.n	8000e98 <__aeabi_dadd+0x10c>
 8000e84:	230f      	movs	r3, #15
 8000e86:	4023      	ands	r3, r4
 8000e88:	2b04      	cmp	r3, #4
 8000e8a:	d005      	beq.n	8000e98 <__aeabi_dadd+0x10c>
 8000e8c:	1d23      	adds	r3, r4, #4
 8000e8e:	42a3      	cmp	r3, r4
 8000e90:	41a4      	sbcs	r4, r4
 8000e92:	4264      	negs	r4, r4
 8000e94:	193f      	adds	r7, r7, r4
 8000e96:	001c      	movs	r4, r3
 8000e98:	023b      	lsls	r3, r7, #8
 8000e9a:	d400      	bmi.n	8000e9e <__aeabi_dadd+0x112>
 8000e9c:	e09e      	b.n	8000fdc <__aeabi_dadd+0x250>
 8000e9e:	4b95      	ldr	r3, [pc, #596]	; (80010f4 <__aeabi_dadd+0x368>)
 8000ea0:	3601      	adds	r6, #1
 8000ea2:	429e      	cmp	r6, r3
 8000ea4:	d100      	bne.n	8000ea8 <__aeabi_dadd+0x11c>
 8000ea6:	e0b7      	b.n	8001018 <__aeabi_dadd+0x28c>
 8000ea8:	4a93      	ldr	r2, [pc, #588]	; (80010f8 <__aeabi_dadd+0x36c>)
 8000eaa:	08e4      	lsrs	r4, r4, #3
 8000eac:	4017      	ands	r7, r2
 8000eae:	077b      	lsls	r3, r7, #29
 8000eb0:	0571      	lsls	r1, r6, #21
 8000eb2:	027f      	lsls	r7, r7, #9
 8000eb4:	4323      	orrs	r3, r4
 8000eb6:	0b3f      	lsrs	r7, r7, #12
 8000eb8:	0d4a      	lsrs	r2, r1, #21
 8000eba:	0512      	lsls	r2, r2, #20
 8000ebc:	433a      	orrs	r2, r7
 8000ebe:	07ed      	lsls	r5, r5, #31
 8000ec0:	432a      	orrs	r2, r5
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	0011      	movs	r1, r2
 8000ec6:	bce0      	pop	{r5, r6, r7}
 8000ec8:	46ba      	mov	sl, r7
 8000eca:	46b1      	mov	r9, r6
 8000ecc:	46a8      	mov	r8, r5
 8000ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ed0:	2c00      	cmp	r4, #0
 8000ed2:	d04b      	beq.n	8000f6c <__aeabi_dadd+0x1e0>
 8000ed4:	464c      	mov	r4, r9
 8000ed6:	1ba4      	subs	r4, r4, r6
 8000ed8:	46a4      	mov	ip, r4
 8000eda:	2e00      	cmp	r6, #0
 8000edc:	d000      	beq.n	8000ee0 <__aeabi_dadd+0x154>
 8000ede:	e123      	b.n	8001128 <__aeabi_dadd+0x39c>
 8000ee0:	0004      	movs	r4, r0
 8000ee2:	431c      	orrs	r4, r3
 8000ee4:	d100      	bne.n	8000ee8 <__aeabi_dadd+0x15c>
 8000ee6:	e1af      	b.n	8001248 <__aeabi_dadd+0x4bc>
 8000ee8:	4662      	mov	r2, ip
 8000eea:	1e54      	subs	r4, r2, #1
 8000eec:	2a01      	cmp	r2, #1
 8000eee:	d100      	bne.n	8000ef2 <__aeabi_dadd+0x166>
 8000ef0:	e215      	b.n	800131e <__aeabi_dadd+0x592>
 8000ef2:	4d80      	ldr	r5, [pc, #512]	; (80010f4 <__aeabi_dadd+0x368>)
 8000ef4:	45ac      	cmp	ip, r5
 8000ef6:	d100      	bne.n	8000efa <__aeabi_dadd+0x16e>
 8000ef8:	e1c8      	b.n	800128c <__aeabi_dadd+0x500>
 8000efa:	46a4      	mov	ip, r4
 8000efc:	e11b      	b.n	8001136 <__aeabi_dadd+0x3aa>
 8000efe:	464a      	mov	r2, r9
 8000f00:	1ab2      	subs	r2, r6, r2
 8000f02:	4694      	mov	ip, r2
 8000f04:	2a00      	cmp	r2, #0
 8000f06:	dc00      	bgt.n	8000f0a <__aeabi_dadd+0x17e>
 8000f08:	e0ac      	b.n	8001064 <__aeabi_dadd+0x2d8>
 8000f0a:	464a      	mov	r2, r9
 8000f0c:	2a00      	cmp	r2, #0
 8000f0e:	d043      	beq.n	8000f98 <__aeabi_dadd+0x20c>
 8000f10:	4a78      	ldr	r2, [pc, #480]	; (80010f4 <__aeabi_dadd+0x368>)
 8000f12:	4296      	cmp	r6, r2
 8000f14:	d100      	bne.n	8000f18 <__aeabi_dadd+0x18c>
 8000f16:	e1af      	b.n	8001278 <__aeabi_dadd+0x4ec>
 8000f18:	2280      	movs	r2, #128	; 0x80
 8000f1a:	003c      	movs	r4, r7
 8000f1c:	0412      	lsls	r2, r2, #16
 8000f1e:	4314      	orrs	r4, r2
 8000f20:	46a0      	mov	r8, r4
 8000f22:	4662      	mov	r2, ip
 8000f24:	2a38      	cmp	r2, #56	; 0x38
 8000f26:	dc67      	bgt.n	8000ff8 <__aeabi_dadd+0x26c>
 8000f28:	2a1f      	cmp	r2, #31
 8000f2a:	dc00      	bgt.n	8000f2e <__aeabi_dadd+0x1a2>
 8000f2c:	e15f      	b.n	80011ee <__aeabi_dadd+0x462>
 8000f2e:	4647      	mov	r7, r8
 8000f30:	3a20      	subs	r2, #32
 8000f32:	40d7      	lsrs	r7, r2
 8000f34:	4662      	mov	r2, ip
 8000f36:	2a20      	cmp	r2, #32
 8000f38:	d005      	beq.n	8000f46 <__aeabi_dadd+0x1ba>
 8000f3a:	4664      	mov	r4, ip
 8000f3c:	2240      	movs	r2, #64	; 0x40
 8000f3e:	1b12      	subs	r2, r2, r4
 8000f40:	4644      	mov	r4, r8
 8000f42:	4094      	lsls	r4, r2
 8000f44:	4321      	orrs	r1, r4
 8000f46:	1e4a      	subs	r2, r1, #1
 8000f48:	4191      	sbcs	r1, r2
 8000f4a:	000c      	movs	r4, r1
 8000f4c:	433c      	orrs	r4, r7
 8000f4e:	e057      	b.n	8001000 <__aeabi_dadd+0x274>
 8000f50:	003a      	movs	r2, r7
 8000f52:	430a      	orrs	r2, r1
 8000f54:	d100      	bne.n	8000f58 <__aeabi_dadd+0x1cc>
 8000f56:	e105      	b.n	8001164 <__aeabi_dadd+0x3d8>
 8000f58:	0022      	movs	r2, r4
 8000f5a:	3a01      	subs	r2, #1
 8000f5c:	2c01      	cmp	r4, #1
 8000f5e:	d100      	bne.n	8000f62 <__aeabi_dadd+0x1d6>
 8000f60:	e182      	b.n	8001268 <__aeabi_dadd+0x4dc>
 8000f62:	4c64      	ldr	r4, [pc, #400]	; (80010f4 <__aeabi_dadd+0x368>)
 8000f64:	45a4      	cmp	ip, r4
 8000f66:	d05b      	beq.n	8001020 <__aeabi_dadd+0x294>
 8000f68:	4694      	mov	ip, r2
 8000f6a:	e741      	b.n	8000df0 <__aeabi_dadd+0x64>
 8000f6c:	4c63      	ldr	r4, [pc, #396]	; (80010fc <__aeabi_dadd+0x370>)
 8000f6e:	1c77      	adds	r7, r6, #1
 8000f70:	4227      	tst	r7, r4
 8000f72:	d000      	beq.n	8000f76 <__aeabi_dadd+0x1ea>
 8000f74:	e0c4      	b.n	8001100 <__aeabi_dadd+0x374>
 8000f76:	0004      	movs	r4, r0
 8000f78:	431c      	orrs	r4, r3
 8000f7a:	2e00      	cmp	r6, #0
 8000f7c:	d000      	beq.n	8000f80 <__aeabi_dadd+0x1f4>
 8000f7e:	e169      	b.n	8001254 <__aeabi_dadd+0x4c8>
 8000f80:	2c00      	cmp	r4, #0
 8000f82:	d100      	bne.n	8000f86 <__aeabi_dadd+0x1fa>
 8000f84:	e1bf      	b.n	8001306 <__aeabi_dadd+0x57a>
 8000f86:	4644      	mov	r4, r8
 8000f88:	430c      	orrs	r4, r1
 8000f8a:	d000      	beq.n	8000f8e <__aeabi_dadd+0x202>
 8000f8c:	e1d0      	b.n	8001330 <__aeabi_dadd+0x5a4>
 8000f8e:	0742      	lsls	r2, r0, #29
 8000f90:	08db      	lsrs	r3, r3, #3
 8000f92:	4313      	orrs	r3, r2
 8000f94:	08c0      	lsrs	r0, r0, #3
 8000f96:	e029      	b.n	8000fec <__aeabi_dadd+0x260>
 8000f98:	003a      	movs	r2, r7
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	d100      	bne.n	8000fa0 <__aeabi_dadd+0x214>
 8000f9e:	e170      	b.n	8001282 <__aeabi_dadd+0x4f6>
 8000fa0:	4662      	mov	r2, ip
 8000fa2:	4664      	mov	r4, ip
 8000fa4:	3a01      	subs	r2, #1
 8000fa6:	2c01      	cmp	r4, #1
 8000fa8:	d100      	bne.n	8000fac <__aeabi_dadd+0x220>
 8000faa:	e0e0      	b.n	800116e <__aeabi_dadd+0x3e2>
 8000fac:	4c51      	ldr	r4, [pc, #324]	; (80010f4 <__aeabi_dadd+0x368>)
 8000fae:	45a4      	cmp	ip, r4
 8000fb0:	d100      	bne.n	8000fb4 <__aeabi_dadd+0x228>
 8000fb2:	e161      	b.n	8001278 <__aeabi_dadd+0x4ec>
 8000fb4:	4694      	mov	ip, r2
 8000fb6:	e7b4      	b.n	8000f22 <__aeabi_dadd+0x196>
 8000fb8:	003a      	movs	r2, r7
 8000fba:	391f      	subs	r1, #31
 8000fbc:	40ca      	lsrs	r2, r1
 8000fbe:	0011      	movs	r1, r2
 8000fc0:	2b20      	cmp	r3, #32
 8000fc2:	d003      	beq.n	8000fcc <__aeabi_dadd+0x240>
 8000fc4:	2240      	movs	r2, #64	; 0x40
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	409f      	lsls	r7, r3
 8000fca:	433c      	orrs	r4, r7
 8000fcc:	1e63      	subs	r3, r4, #1
 8000fce:	419c      	sbcs	r4, r3
 8000fd0:	2700      	movs	r7, #0
 8000fd2:	2600      	movs	r6, #0
 8000fd4:	430c      	orrs	r4, r1
 8000fd6:	0763      	lsls	r3, r4, #29
 8000fd8:	d000      	beq.n	8000fdc <__aeabi_dadd+0x250>
 8000fda:	e753      	b.n	8000e84 <__aeabi_dadd+0xf8>
 8000fdc:	46b4      	mov	ip, r6
 8000fde:	08e4      	lsrs	r4, r4, #3
 8000fe0:	077b      	lsls	r3, r7, #29
 8000fe2:	4323      	orrs	r3, r4
 8000fe4:	08f8      	lsrs	r0, r7, #3
 8000fe6:	4a43      	ldr	r2, [pc, #268]	; (80010f4 <__aeabi_dadd+0x368>)
 8000fe8:	4594      	cmp	ip, r2
 8000fea:	d01d      	beq.n	8001028 <__aeabi_dadd+0x29c>
 8000fec:	4662      	mov	r2, ip
 8000fee:	0307      	lsls	r7, r0, #12
 8000ff0:	0552      	lsls	r2, r2, #21
 8000ff2:	0b3f      	lsrs	r7, r7, #12
 8000ff4:	0d52      	lsrs	r2, r2, #21
 8000ff6:	e760      	b.n	8000eba <__aeabi_dadd+0x12e>
 8000ff8:	4644      	mov	r4, r8
 8000ffa:	430c      	orrs	r4, r1
 8000ffc:	1e62      	subs	r2, r4, #1
 8000ffe:	4194      	sbcs	r4, r2
 8001000:	18e4      	adds	r4, r4, r3
 8001002:	429c      	cmp	r4, r3
 8001004:	419b      	sbcs	r3, r3
 8001006:	425f      	negs	r7, r3
 8001008:	183f      	adds	r7, r7, r0
 800100a:	023b      	lsls	r3, r7, #8
 800100c:	d5e3      	bpl.n	8000fd6 <__aeabi_dadd+0x24a>
 800100e:	4b39      	ldr	r3, [pc, #228]	; (80010f4 <__aeabi_dadd+0x368>)
 8001010:	3601      	adds	r6, #1
 8001012:	429e      	cmp	r6, r3
 8001014:	d000      	beq.n	8001018 <__aeabi_dadd+0x28c>
 8001016:	e0b5      	b.n	8001184 <__aeabi_dadd+0x3f8>
 8001018:	0032      	movs	r2, r6
 800101a:	2700      	movs	r7, #0
 800101c:	2300      	movs	r3, #0
 800101e:	e74c      	b.n	8000eba <__aeabi_dadd+0x12e>
 8001020:	0742      	lsls	r2, r0, #29
 8001022:	08db      	lsrs	r3, r3, #3
 8001024:	4313      	orrs	r3, r2
 8001026:	08c0      	lsrs	r0, r0, #3
 8001028:	001a      	movs	r2, r3
 800102a:	4302      	orrs	r2, r0
 800102c:	d100      	bne.n	8001030 <__aeabi_dadd+0x2a4>
 800102e:	e1e1      	b.n	80013f4 <__aeabi_dadd+0x668>
 8001030:	2780      	movs	r7, #128	; 0x80
 8001032:	033f      	lsls	r7, r7, #12
 8001034:	4307      	orrs	r7, r0
 8001036:	033f      	lsls	r7, r7, #12
 8001038:	4a2e      	ldr	r2, [pc, #184]	; (80010f4 <__aeabi_dadd+0x368>)
 800103a:	0b3f      	lsrs	r7, r7, #12
 800103c:	e73d      	b.n	8000eba <__aeabi_dadd+0x12e>
 800103e:	0020      	movs	r0, r4
 8001040:	f001 fd94 	bl	8002b6c <__clzsi2>
 8001044:	0001      	movs	r1, r0
 8001046:	3118      	adds	r1, #24
 8001048:	291f      	cmp	r1, #31
 800104a:	dc00      	bgt.n	800104e <__aeabi_dadd+0x2c2>
 800104c:	e6fc      	b.n	8000e48 <__aeabi_dadd+0xbc>
 800104e:	3808      	subs	r0, #8
 8001050:	4084      	lsls	r4, r0
 8001052:	0027      	movs	r7, r4
 8001054:	2400      	movs	r4, #0
 8001056:	42b1      	cmp	r1, r6
 8001058:	db00      	blt.n	800105c <__aeabi_dadd+0x2d0>
 800105a:	e6ff      	b.n	8000e5c <__aeabi_dadd+0xd0>
 800105c:	4a26      	ldr	r2, [pc, #152]	; (80010f8 <__aeabi_dadd+0x36c>)
 800105e:	1a76      	subs	r6, r6, r1
 8001060:	4017      	ands	r7, r2
 8001062:	e70d      	b.n	8000e80 <__aeabi_dadd+0xf4>
 8001064:	2a00      	cmp	r2, #0
 8001066:	d02f      	beq.n	80010c8 <__aeabi_dadd+0x33c>
 8001068:	464a      	mov	r2, r9
 800106a:	1b92      	subs	r2, r2, r6
 800106c:	4694      	mov	ip, r2
 800106e:	2e00      	cmp	r6, #0
 8001070:	d100      	bne.n	8001074 <__aeabi_dadd+0x2e8>
 8001072:	e0ad      	b.n	80011d0 <__aeabi_dadd+0x444>
 8001074:	4a1f      	ldr	r2, [pc, #124]	; (80010f4 <__aeabi_dadd+0x368>)
 8001076:	4591      	cmp	r9, r2
 8001078:	d100      	bne.n	800107c <__aeabi_dadd+0x2f0>
 800107a:	e10f      	b.n	800129c <__aeabi_dadd+0x510>
 800107c:	2280      	movs	r2, #128	; 0x80
 800107e:	0412      	lsls	r2, r2, #16
 8001080:	4310      	orrs	r0, r2
 8001082:	4662      	mov	r2, ip
 8001084:	2a38      	cmp	r2, #56	; 0x38
 8001086:	dd00      	ble.n	800108a <__aeabi_dadd+0x2fe>
 8001088:	e10f      	b.n	80012aa <__aeabi_dadd+0x51e>
 800108a:	2a1f      	cmp	r2, #31
 800108c:	dd00      	ble.n	8001090 <__aeabi_dadd+0x304>
 800108e:	e180      	b.n	8001392 <__aeabi_dadd+0x606>
 8001090:	4664      	mov	r4, ip
 8001092:	2220      	movs	r2, #32
 8001094:	001e      	movs	r6, r3
 8001096:	1b12      	subs	r2, r2, r4
 8001098:	4667      	mov	r7, ip
 800109a:	0004      	movs	r4, r0
 800109c:	4093      	lsls	r3, r2
 800109e:	4094      	lsls	r4, r2
 80010a0:	40fe      	lsrs	r6, r7
 80010a2:	1e5a      	subs	r2, r3, #1
 80010a4:	4193      	sbcs	r3, r2
 80010a6:	40f8      	lsrs	r0, r7
 80010a8:	4334      	orrs	r4, r6
 80010aa:	431c      	orrs	r4, r3
 80010ac:	4480      	add	r8, r0
 80010ae:	1864      	adds	r4, r4, r1
 80010b0:	428c      	cmp	r4, r1
 80010b2:	41bf      	sbcs	r7, r7
 80010b4:	427f      	negs	r7, r7
 80010b6:	464e      	mov	r6, r9
 80010b8:	4447      	add	r7, r8
 80010ba:	e7a6      	b.n	800100a <__aeabi_dadd+0x27e>
 80010bc:	4642      	mov	r2, r8
 80010be:	430a      	orrs	r2, r1
 80010c0:	0011      	movs	r1, r2
 80010c2:	1e4a      	subs	r2, r1, #1
 80010c4:	4191      	sbcs	r1, r2
 80010c6:	e6ad      	b.n	8000e24 <__aeabi_dadd+0x98>
 80010c8:	4c0c      	ldr	r4, [pc, #48]	; (80010fc <__aeabi_dadd+0x370>)
 80010ca:	1c72      	adds	r2, r6, #1
 80010cc:	4222      	tst	r2, r4
 80010ce:	d000      	beq.n	80010d2 <__aeabi_dadd+0x346>
 80010d0:	e0a1      	b.n	8001216 <__aeabi_dadd+0x48a>
 80010d2:	0002      	movs	r2, r0
 80010d4:	431a      	orrs	r2, r3
 80010d6:	2e00      	cmp	r6, #0
 80010d8:	d000      	beq.n	80010dc <__aeabi_dadd+0x350>
 80010da:	e0fa      	b.n	80012d2 <__aeabi_dadd+0x546>
 80010dc:	2a00      	cmp	r2, #0
 80010de:	d100      	bne.n	80010e2 <__aeabi_dadd+0x356>
 80010e0:	e145      	b.n	800136e <__aeabi_dadd+0x5e2>
 80010e2:	003a      	movs	r2, r7
 80010e4:	430a      	orrs	r2, r1
 80010e6:	d000      	beq.n	80010ea <__aeabi_dadd+0x35e>
 80010e8:	e146      	b.n	8001378 <__aeabi_dadd+0x5ec>
 80010ea:	0742      	lsls	r2, r0, #29
 80010ec:	08db      	lsrs	r3, r3, #3
 80010ee:	4313      	orrs	r3, r2
 80010f0:	08c0      	lsrs	r0, r0, #3
 80010f2:	e77b      	b.n	8000fec <__aeabi_dadd+0x260>
 80010f4:	000007ff 	.word	0x000007ff
 80010f8:	ff7fffff 	.word	0xff7fffff
 80010fc:	000007fe 	.word	0x000007fe
 8001100:	4647      	mov	r7, r8
 8001102:	1a5c      	subs	r4, r3, r1
 8001104:	1bc2      	subs	r2, r0, r7
 8001106:	42a3      	cmp	r3, r4
 8001108:	41bf      	sbcs	r7, r7
 800110a:	427f      	negs	r7, r7
 800110c:	46b9      	mov	r9, r7
 800110e:	0017      	movs	r7, r2
 8001110:	464a      	mov	r2, r9
 8001112:	1abf      	subs	r7, r7, r2
 8001114:	023a      	lsls	r2, r7, #8
 8001116:	d500      	bpl.n	800111a <__aeabi_dadd+0x38e>
 8001118:	e08d      	b.n	8001236 <__aeabi_dadd+0x4aa>
 800111a:	0023      	movs	r3, r4
 800111c:	433b      	orrs	r3, r7
 800111e:	d000      	beq.n	8001122 <__aeabi_dadd+0x396>
 8001120:	e68a      	b.n	8000e38 <__aeabi_dadd+0xac>
 8001122:	2000      	movs	r0, #0
 8001124:	2500      	movs	r5, #0
 8001126:	e761      	b.n	8000fec <__aeabi_dadd+0x260>
 8001128:	4cb4      	ldr	r4, [pc, #720]	; (80013fc <__aeabi_dadd+0x670>)
 800112a:	45a1      	cmp	r9, r4
 800112c:	d100      	bne.n	8001130 <__aeabi_dadd+0x3a4>
 800112e:	e0ad      	b.n	800128c <__aeabi_dadd+0x500>
 8001130:	2480      	movs	r4, #128	; 0x80
 8001132:	0424      	lsls	r4, r4, #16
 8001134:	4320      	orrs	r0, r4
 8001136:	4664      	mov	r4, ip
 8001138:	2c38      	cmp	r4, #56	; 0x38
 800113a:	dc3d      	bgt.n	80011b8 <__aeabi_dadd+0x42c>
 800113c:	4662      	mov	r2, ip
 800113e:	2c1f      	cmp	r4, #31
 8001140:	dd00      	ble.n	8001144 <__aeabi_dadd+0x3b8>
 8001142:	e0b7      	b.n	80012b4 <__aeabi_dadd+0x528>
 8001144:	2520      	movs	r5, #32
 8001146:	001e      	movs	r6, r3
 8001148:	1b2d      	subs	r5, r5, r4
 800114a:	0004      	movs	r4, r0
 800114c:	40ab      	lsls	r3, r5
 800114e:	40ac      	lsls	r4, r5
 8001150:	40d6      	lsrs	r6, r2
 8001152:	40d0      	lsrs	r0, r2
 8001154:	4642      	mov	r2, r8
 8001156:	1e5d      	subs	r5, r3, #1
 8001158:	41ab      	sbcs	r3, r5
 800115a:	4334      	orrs	r4, r6
 800115c:	1a12      	subs	r2, r2, r0
 800115e:	4690      	mov	r8, r2
 8001160:	4323      	orrs	r3, r4
 8001162:	e02c      	b.n	80011be <__aeabi_dadd+0x432>
 8001164:	0742      	lsls	r2, r0, #29
 8001166:	08db      	lsrs	r3, r3, #3
 8001168:	4313      	orrs	r3, r2
 800116a:	08c0      	lsrs	r0, r0, #3
 800116c:	e73b      	b.n	8000fe6 <__aeabi_dadd+0x25a>
 800116e:	185c      	adds	r4, r3, r1
 8001170:	429c      	cmp	r4, r3
 8001172:	419b      	sbcs	r3, r3
 8001174:	4440      	add	r0, r8
 8001176:	425b      	negs	r3, r3
 8001178:	18c7      	adds	r7, r0, r3
 800117a:	2601      	movs	r6, #1
 800117c:	023b      	lsls	r3, r7, #8
 800117e:	d400      	bmi.n	8001182 <__aeabi_dadd+0x3f6>
 8001180:	e729      	b.n	8000fd6 <__aeabi_dadd+0x24a>
 8001182:	2602      	movs	r6, #2
 8001184:	4a9e      	ldr	r2, [pc, #632]	; (8001400 <__aeabi_dadd+0x674>)
 8001186:	0863      	lsrs	r3, r4, #1
 8001188:	4017      	ands	r7, r2
 800118a:	2201      	movs	r2, #1
 800118c:	4014      	ands	r4, r2
 800118e:	431c      	orrs	r4, r3
 8001190:	07fb      	lsls	r3, r7, #31
 8001192:	431c      	orrs	r4, r3
 8001194:	087f      	lsrs	r7, r7, #1
 8001196:	e673      	b.n	8000e80 <__aeabi_dadd+0xf4>
 8001198:	4644      	mov	r4, r8
 800119a:	3a20      	subs	r2, #32
 800119c:	40d4      	lsrs	r4, r2
 800119e:	4662      	mov	r2, ip
 80011a0:	2a20      	cmp	r2, #32
 80011a2:	d005      	beq.n	80011b0 <__aeabi_dadd+0x424>
 80011a4:	4667      	mov	r7, ip
 80011a6:	2240      	movs	r2, #64	; 0x40
 80011a8:	1bd2      	subs	r2, r2, r7
 80011aa:	4647      	mov	r7, r8
 80011ac:	4097      	lsls	r7, r2
 80011ae:	4339      	orrs	r1, r7
 80011b0:	1e4a      	subs	r2, r1, #1
 80011b2:	4191      	sbcs	r1, r2
 80011b4:	4321      	orrs	r1, r4
 80011b6:	e635      	b.n	8000e24 <__aeabi_dadd+0x98>
 80011b8:	4303      	orrs	r3, r0
 80011ba:	1e58      	subs	r0, r3, #1
 80011bc:	4183      	sbcs	r3, r0
 80011be:	1acc      	subs	r4, r1, r3
 80011c0:	42a1      	cmp	r1, r4
 80011c2:	41bf      	sbcs	r7, r7
 80011c4:	4643      	mov	r3, r8
 80011c6:	427f      	negs	r7, r7
 80011c8:	4655      	mov	r5, sl
 80011ca:	464e      	mov	r6, r9
 80011cc:	1bdf      	subs	r7, r3, r7
 80011ce:	e62e      	b.n	8000e2e <__aeabi_dadd+0xa2>
 80011d0:	0002      	movs	r2, r0
 80011d2:	431a      	orrs	r2, r3
 80011d4:	d100      	bne.n	80011d8 <__aeabi_dadd+0x44c>
 80011d6:	e0bd      	b.n	8001354 <__aeabi_dadd+0x5c8>
 80011d8:	4662      	mov	r2, ip
 80011da:	4664      	mov	r4, ip
 80011dc:	3a01      	subs	r2, #1
 80011de:	2c01      	cmp	r4, #1
 80011e0:	d100      	bne.n	80011e4 <__aeabi_dadd+0x458>
 80011e2:	e0e5      	b.n	80013b0 <__aeabi_dadd+0x624>
 80011e4:	4c85      	ldr	r4, [pc, #532]	; (80013fc <__aeabi_dadd+0x670>)
 80011e6:	45a4      	cmp	ip, r4
 80011e8:	d058      	beq.n	800129c <__aeabi_dadd+0x510>
 80011ea:	4694      	mov	ip, r2
 80011ec:	e749      	b.n	8001082 <__aeabi_dadd+0x2f6>
 80011ee:	4664      	mov	r4, ip
 80011f0:	2220      	movs	r2, #32
 80011f2:	1b12      	subs	r2, r2, r4
 80011f4:	4644      	mov	r4, r8
 80011f6:	4094      	lsls	r4, r2
 80011f8:	000f      	movs	r7, r1
 80011fa:	46a1      	mov	r9, r4
 80011fc:	4664      	mov	r4, ip
 80011fe:	4091      	lsls	r1, r2
 8001200:	40e7      	lsrs	r7, r4
 8001202:	464c      	mov	r4, r9
 8001204:	1e4a      	subs	r2, r1, #1
 8001206:	4191      	sbcs	r1, r2
 8001208:	433c      	orrs	r4, r7
 800120a:	4642      	mov	r2, r8
 800120c:	430c      	orrs	r4, r1
 800120e:	4661      	mov	r1, ip
 8001210:	40ca      	lsrs	r2, r1
 8001212:	1880      	adds	r0, r0, r2
 8001214:	e6f4      	b.n	8001000 <__aeabi_dadd+0x274>
 8001216:	4c79      	ldr	r4, [pc, #484]	; (80013fc <__aeabi_dadd+0x670>)
 8001218:	42a2      	cmp	r2, r4
 800121a:	d100      	bne.n	800121e <__aeabi_dadd+0x492>
 800121c:	e6fd      	b.n	800101a <__aeabi_dadd+0x28e>
 800121e:	1859      	adds	r1, r3, r1
 8001220:	4299      	cmp	r1, r3
 8001222:	419b      	sbcs	r3, r3
 8001224:	4440      	add	r0, r8
 8001226:	425f      	negs	r7, r3
 8001228:	19c7      	adds	r7, r0, r7
 800122a:	07fc      	lsls	r4, r7, #31
 800122c:	0849      	lsrs	r1, r1, #1
 800122e:	0016      	movs	r6, r2
 8001230:	430c      	orrs	r4, r1
 8001232:	087f      	lsrs	r7, r7, #1
 8001234:	e6cf      	b.n	8000fd6 <__aeabi_dadd+0x24a>
 8001236:	1acc      	subs	r4, r1, r3
 8001238:	42a1      	cmp	r1, r4
 800123a:	41bf      	sbcs	r7, r7
 800123c:	4643      	mov	r3, r8
 800123e:	427f      	negs	r7, r7
 8001240:	1a18      	subs	r0, r3, r0
 8001242:	4655      	mov	r5, sl
 8001244:	1bc7      	subs	r7, r0, r7
 8001246:	e5f7      	b.n	8000e38 <__aeabi_dadd+0xac>
 8001248:	08c9      	lsrs	r1, r1, #3
 800124a:	077b      	lsls	r3, r7, #29
 800124c:	4655      	mov	r5, sl
 800124e:	430b      	orrs	r3, r1
 8001250:	08f8      	lsrs	r0, r7, #3
 8001252:	e6c8      	b.n	8000fe6 <__aeabi_dadd+0x25a>
 8001254:	2c00      	cmp	r4, #0
 8001256:	d000      	beq.n	800125a <__aeabi_dadd+0x4ce>
 8001258:	e081      	b.n	800135e <__aeabi_dadd+0x5d2>
 800125a:	4643      	mov	r3, r8
 800125c:	430b      	orrs	r3, r1
 800125e:	d115      	bne.n	800128c <__aeabi_dadd+0x500>
 8001260:	2080      	movs	r0, #128	; 0x80
 8001262:	2500      	movs	r5, #0
 8001264:	0300      	lsls	r0, r0, #12
 8001266:	e6e3      	b.n	8001030 <__aeabi_dadd+0x2a4>
 8001268:	1a5c      	subs	r4, r3, r1
 800126a:	42a3      	cmp	r3, r4
 800126c:	419b      	sbcs	r3, r3
 800126e:	1bc7      	subs	r7, r0, r7
 8001270:	425b      	negs	r3, r3
 8001272:	2601      	movs	r6, #1
 8001274:	1aff      	subs	r7, r7, r3
 8001276:	e5da      	b.n	8000e2e <__aeabi_dadd+0xa2>
 8001278:	0742      	lsls	r2, r0, #29
 800127a:	08db      	lsrs	r3, r3, #3
 800127c:	4313      	orrs	r3, r2
 800127e:	08c0      	lsrs	r0, r0, #3
 8001280:	e6d2      	b.n	8001028 <__aeabi_dadd+0x29c>
 8001282:	0742      	lsls	r2, r0, #29
 8001284:	08db      	lsrs	r3, r3, #3
 8001286:	4313      	orrs	r3, r2
 8001288:	08c0      	lsrs	r0, r0, #3
 800128a:	e6ac      	b.n	8000fe6 <__aeabi_dadd+0x25a>
 800128c:	4643      	mov	r3, r8
 800128e:	4642      	mov	r2, r8
 8001290:	08c9      	lsrs	r1, r1, #3
 8001292:	075b      	lsls	r3, r3, #29
 8001294:	4655      	mov	r5, sl
 8001296:	430b      	orrs	r3, r1
 8001298:	08d0      	lsrs	r0, r2, #3
 800129a:	e6c5      	b.n	8001028 <__aeabi_dadd+0x29c>
 800129c:	4643      	mov	r3, r8
 800129e:	4642      	mov	r2, r8
 80012a0:	075b      	lsls	r3, r3, #29
 80012a2:	08c9      	lsrs	r1, r1, #3
 80012a4:	430b      	orrs	r3, r1
 80012a6:	08d0      	lsrs	r0, r2, #3
 80012a8:	e6be      	b.n	8001028 <__aeabi_dadd+0x29c>
 80012aa:	4303      	orrs	r3, r0
 80012ac:	001c      	movs	r4, r3
 80012ae:	1e63      	subs	r3, r4, #1
 80012b0:	419c      	sbcs	r4, r3
 80012b2:	e6fc      	b.n	80010ae <__aeabi_dadd+0x322>
 80012b4:	0002      	movs	r2, r0
 80012b6:	3c20      	subs	r4, #32
 80012b8:	40e2      	lsrs	r2, r4
 80012ba:	0014      	movs	r4, r2
 80012bc:	4662      	mov	r2, ip
 80012be:	2a20      	cmp	r2, #32
 80012c0:	d003      	beq.n	80012ca <__aeabi_dadd+0x53e>
 80012c2:	2540      	movs	r5, #64	; 0x40
 80012c4:	1aad      	subs	r5, r5, r2
 80012c6:	40a8      	lsls	r0, r5
 80012c8:	4303      	orrs	r3, r0
 80012ca:	1e58      	subs	r0, r3, #1
 80012cc:	4183      	sbcs	r3, r0
 80012ce:	4323      	orrs	r3, r4
 80012d0:	e775      	b.n	80011be <__aeabi_dadd+0x432>
 80012d2:	2a00      	cmp	r2, #0
 80012d4:	d0e2      	beq.n	800129c <__aeabi_dadd+0x510>
 80012d6:	003a      	movs	r2, r7
 80012d8:	430a      	orrs	r2, r1
 80012da:	d0cd      	beq.n	8001278 <__aeabi_dadd+0x4ec>
 80012dc:	0742      	lsls	r2, r0, #29
 80012de:	08db      	lsrs	r3, r3, #3
 80012e0:	4313      	orrs	r3, r2
 80012e2:	2280      	movs	r2, #128	; 0x80
 80012e4:	08c0      	lsrs	r0, r0, #3
 80012e6:	0312      	lsls	r2, r2, #12
 80012e8:	4210      	tst	r0, r2
 80012ea:	d006      	beq.n	80012fa <__aeabi_dadd+0x56e>
 80012ec:	08fc      	lsrs	r4, r7, #3
 80012ee:	4214      	tst	r4, r2
 80012f0:	d103      	bne.n	80012fa <__aeabi_dadd+0x56e>
 80012f2:	0020      	movs	r0, r4
 80012f4:	08cb      	lsrs	r3, r1, #3
 80012f6:	077a      	lsls	r2, r7, #29
 80012f8:	4313      	orrs	r3, r2
 80012fa:	0f5a      	lsrs	r2, r3, #29
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	0752      	lsls	r2, r2, #29
 8001300:	08db      	lsrs	r3, r3, #3
 8001302:	4313      	orrs	r3, r2
 8001304:	e690      	b.n	8001028 <__aeabi_dadd+0x29c>
 8001306:	4643      	mov	r3, r8
 8001308:	430b      	orrs	r3, r1
 800130a:	d100      	bne.n	800130e <__aeabi_dadd+0x582>
 800130c:	e709      	b.n	8001122 <__aeabi_dadd+0x396>
 800130e:	4643      	mov	r3, r8
 8001310:	4642      	mov	r2, r8
 8001312:	08c9      	lsrs	r1, r1, #3
 8001314:	075b      	lsls	r3, r3, #29
 8001316:	4655      	mov	r5, sl
 8001318:	430b      	orrs	r3, r1
 800131a:	08d0      	lsrs	r0, r2, #3
 800131c:	e666      	b.n	8000fec <__aeabi_dadd+0x260>
 800131e:	1acc      	subs	r4, r1, r3
 8001320:	42a1      	cmp	r1, r4
 8001322:	4189      	sbcs	r1, r1
 8001324:	1a3f      	subs	r7, r7, r0
 8001326:	4249      	negs	r1, r1
 8001328:	4655      	mov	r5, sl
 800132a:	2601      	movs	r6, #1
 800132c:	1a7f      	subs	r7, r7, r1
 800132e:	e57e      	b.n	8000e2e <__aeabi_dadd+0xa2>
 8001330:	4642      	mov	r2, r8
 8001332:	1a5c      	subs	r4, r3, r1
 8001334:	1a87      	subs	r7, r0, r2
 8001336:	42a3      	cmp	r3, r4
 8001338:	4192      	sbcs	r2, r2
 800133a:	4252      	negs	r2, r2
 800133c:	1abf      	subs	r7, r7, r2
 800133e:	023a      	lsls	r2, r7, #8
 8001340:	d53d      	bpl.n	80013be <__aeabi_dadd+0x632>
 8001342:	1acc      	subs	r4, r1, r3
 8001344:	42a1      	cmp	r1, r4
 8001346:	4189      	sbcs	r1, r1
 8001348:	4643      	mov	r3, r8
 800134a:	4249      	negs	r1, r1
 800134c:	1a1f      	subs	r7, r3, r0
 800134e:	4655      	mov	r5, sl
 8001350:	1a7f      	subs	r7, r7, r1
 8001352:	e595      	b.n	8000e80 <__aeabi_dadd+0xf4>
 8001354:	077b      	lsls	r3, r7, #29
 8001356:	08c9      	lsrs	r1, r1, #3
 8001358:	430b      	orrs	r3, r1
 800135a:	08f8      	lsrs	r0, r7, #3
 800135c:	e643      	b.n	8000fe6 <__aeabi_dadd+0x25a>
 800135e:	4644      	mov	r4, r8
 8001360:	08db      	lsrs	r3, r3, #3
 8001362:	430c      	orrs	r4, r1
 8001364:	d130      	bne.n	80013c8 <__aeabi_dadd+0x63c>
 8001366:	0742      	lsls	r2, r0, #29
 8001368:	4313      	orrs	r3, r2
 800136a:	08c0      	lsrs	r0, r0, #3
 800136c:	e65c      	b.n	8001028 <__aeabi_dadd+0x29c>
 800136e:	077b      	lsls	r3, r7, #29
 8001370:	08c9      	lsrs	r1, r1, #3
 8001372:	430b      	orrs	r3, r1
 8001374:	08f8      	lsrs	r0, r7, #3
 8001376:	e639      	b.n	8000fec <__aeabi_dadd+0x260>
 8001378:	185c      	adds	r4, r3, r1
 800137a:	429c      	cmp	r4, r3
 800137c:	419b      	sbcs	r3, r3
 800137e:	4440      	add	r0, r8
 8001380:	425b      	negs	r3, r3
 8001382:	18c7      	adds	r7, r0, r3
 8001384:	023b      	lsls	r3, r7, #8
 8001386:	d400      	bmi.n	800138a <__aeabi_dadd+0x5fe>
 8001388:	e625      	b.n	8000fd6 <__aeabi_dadd+0x24a>
 800138a:	4b1d      	ldr	r3, [pc, #116]	; (8001400 <__aeabi_dadd+0x674>)
 800138c:	2601      	movs	r6, #1
 800138e:	401f      	ands	r7, r3
 8001390:	e621      	b.n	8000fd6 <__aeabi_dadd+0x24a>
 8001392:	0004      	movs	r4, r0
 8001394:	3a20      	subs	r2, #32
 8001396:	40d4      	lsrs	r4, r2
 8001398:	4662      	mov	r2, ip
 800139a:	2a20      	cmp	r2, #32
 800139c:	d004      	beq.n	80013a8 <__aeabi_dadd+0x61c>
 800139e:	2240      	movs	r2, #64	; 0x40
 80013a0:	4666      	mov	r6, ip
 80013a2:	1b92      	subs	r2, r2, r6
 80013a4:	4090      	lsls	r0, r2
 80013a6:	4303      	orrs	r3, r0
 80013a8:	1e5a      	subs	r2, r3, #1
 80013aa:	4193      	sbcs	r3, r2
 80013ac:	431c      	orrs	r4, r3
 80013ae:	e67e      	b.n	80010ae <__aeabi_dadd+0x322>
 80013b0:	185c      	adds	r4, r3, r1
 80013b2:	428c      	cmp	r4, r1
 80013b4:	4189      	sbcs	r1, r1
 80013b6:	4440      	add	r0, r8
 80013b8:	4249      	negs	r1, r1
 80013ba:	1847      	adds	r7, r0, r1
 80013bc:	e6dd      	b.n	800117a <__aeabi_dadd+0x3ee>
 80013be:	0023      	movs	r3, r4
 80013c0:	433b      	orrs	r3, r7
 80013c2:	d100      	bne.n	80013c6 <__aeabi_dadd+0x63a>
 80013c4:	e6ad      	b.n	8001122 <__aeabi_dadd+0x396>
 80013c6:	e606      	b.n	8000fd6 <__aeabi_dadd+0x24a>
 80013c8:	0744      	lsls	r4, r0, #29
 80013ca:	4323      	orrs	r3, r4
 80013cc:	2480      	movs	r4, #128	; 0x80
 80013ce:	08c0      	lsrs	r0, r0, #3
 80013d0:	0324      	lsls	r4, r4, #12
 80013d2:	4220      	tst	r0, r4
 80013d4:	d008      	beq.n	80013e8 <__aeabi_dadd+0x65c>
 80013d6:	4642      	mov	r2, r8
 80013d8:	08d6      	lsrs	r6, r2, #3
 80013da:	4226      	tst	r6, r4
 80013dc:	d104      	bne.n	80013e8 <__aeabi_dadd+0x65c>
 80013de:	4655      	mov	r5, sl
 80013e0:	0030      	movs	r0, r6
 80013e2:	08cb      	lsrs	r3, r1, #3
 80013e4:	0751      	lsls	r1, r2, #29
 80013e6:	430b      	orrs	r3, r1
 80013e8:	0f5a      	lsrs	r2, r3, #29
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	08db      	lsrs	r3, r3, #3
 80013ee:	0752      	lsls	r2, r2, #29
 80013f0:	4313      	orrs	r3, r2
 80013f2:	e619      	b.n	8001028 <__aeabi_dadd+0x29c>
 80013f4:	2300      	movs	r3, #0
 80013f6:	4a01      	ldr	r2, [pc, #4]	; (80013fc <__aeabi_dadd+0x670>)
 80013f8:	001f      	movs	r7, r3
 80013fa:	e55e      	b.n	8000eba <__aeabi_dadd+0x12e>
 80013fc:	000007ff 	.word	0x000007ff
 8001400:	ff7fffff 	.word	0xff7fffff

08001404 <__aeabi_ddiv>:
 8001404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001406:	4657      	mov	r7, sl
 8001408:	464e      	mov	r6, r9
 800140a:	4645      	mov	r5, r8
 800140c:	46de      	mov	lr, fp
 800140e:	b5e0      	push	{r5, r6, r7, lr}
 8001410:	4681      	mov	r9, r0
 8001412:	0005      	movs	r5, r0
 8001414:	030c      	lsls	r4, r1, #12
 8001416:	0048      	lsls	r0, r1, #1
 8001418:	4692      	mov	sl, r2
 800141a:	001f      	movs	r7, r3
 800141c:	b085      	sub	sp, #20
 800141e:	0b24      	lsrs	r4, r4, #12
 8001420:	0d40      	lsrs	r0, r0, #21
 8001422:	0fce      	lsrs	r6, r1, #31
 8001424:	2800      	cmp	r0, #0
 8001426:	d100      	bne.n	800142a <__aeabi_ddiv+0x26>
 8001428:	e156      	b.n	80016d8 <__aeabi_ddiv+0x2d4>
 800142a:	4bd4      	ldr	r3, [pc, #848]	; (800177c <__aeabi_ddiv+0x378>)
 800142c:	4298      	cmp	r0, r3
 800142e:	d100      	bne.n	8001432 <__aeabi_ddiv+0x2e>
 8001430:	e172      	b.n	8001718 <__aeabi_ddiv+0x314>
 8001432:	0f6b      	lsrs	r3, r5, #29
 8001434:	00e4      	lsls	r4, r4, #3
 8001436:	431c      	orrs	r4, r3
 8001438:	2380      	movs	r3, #128	; 0x80
 800143a:	041b      	lsls	r3, r3, #16
 800143c:	4323      	orrs	r3, r4
 800143e:	4698      	mov	r8, r3
 8001440:	4bcf      	ldr	r3, [pc, #828]	; (8001780 <__aeabi_ddiv+0x37c>)
 8001442:	00ed      	lsls	r5, r5, #3
 8001444:	469b      	mov	fp, r3
 8001446:	2300      	movs	r3, #0
 8001448:	4699      	mov	r9, r3
 800144a:	4483      	add	fp, r0
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	033c      	lsls	r4, r7, #12
 8001450:	007b      	lsls	r3, r7, #1
 8001452:	4650      	mov	r0, sl
 8001454:	0b24      	lsrs	r4, r4, #12
 8001456:	0d5b      	lsrs	r3, r3, #21
 8001458:	0fff      	lsrs	r7, r7, #31
 800145a:	2b00      	cmp	r3, #0
 800145c:	d100      	bne.n	8001460 <__aeabi_ddiv+0x5c>
 800145e:	e11f      	b.n	80016a0 <__aeabi_ddiv+0x29c>
 8001460:	4ac6      	ldr	r2, [pc, #792]	; (800177c <__aeabi_ddiv+0x378>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d100      	bne.n	8001468 <__aeabi_ddiv+0x64>
 8001466:	e162      	b.n	800172e <__aeabi_ddiv+0x32a>
 8001468:	49c5      	ldr	r1, [pc, #788]	; (8001780 <__aeabi_ddiv+0x37c>)
 800146a:	0f42      	lsrs	r2, r0, #29
 800146c:	468c      	mov	ip, r1
 800146e:	00e4      	lsls	r4, r4, #3
 8001470:	4659      	mov	r1, fp
 8001472:	4314      	orrs	r4, r2
 8001474:	2280      	movs	r2, #128	; 0x80
 8001476:	4463      	add	r3, ip
 8001478:	0412      	lsls	r2, r2, #16
 800147a:	1acb      	subs	r3, r1, r3
 800147c:	4314      	orrs	r4, r2
 800147e:	469b      	mov	fp, r3
 8001480:	00c2      	lsls	r2, r0, #3
 8001482:	2000      	movs	r0, #0
 8001484:	0033      	movs	r3, r6
 8001486:	407b      	eors	r3, r7
 8001488:	469a      	mov	sl, r3
 800148a:	464b      	mov	r3, r9
 800148c:	2b0f      	cmp	r3, #15
 800148e:	d827      	bhi.n	80014e0 <__aeabi_ddiv+0xdc>
 8001490:	49bc      	ldr	r1, [pc, #752]	; (8001784 <__aeabi_ddiv+0x380>)
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	58cb      	ldr	r3, [r1, r3]
 8001496:	469f      	mov	pc, r3
 8001498:	46b2      	mov	sl, r6
 800149a:	9b00      	ldr	r3, [sp, #0]
 800149c:	2b02      	cmp	r3, #2
 800149e:	d016      	beq.n	80014ce <__aeabi_ddiv+0xca>
 80014a0:	2b03      	cmp	r3, #3
 80014a2:	d100      	bne.n	80014a6 <__aeabi_ddiv+0xa2>
 80014a4:	e28e      	b.n	80019c4 <__aeabi_ddiv+0x5c0>
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d000      	beq.n	80014ac <__aeabi_ddiv+0xa8>
 80014aa:	e0d9      	b.n	8001660 <__aeabi_ddiv+0x25c>
 80014ac:	2300      	movs	r3, #0
 80014ae:	2400      	movs	r4, #0
 80014b0:	2500      	movs	r5, #0
 80014b2:	4652      	mov	r2, sl
 80014b4:	051b      	lsls	r3, r3, #20
 80014b6:	4323      	orrs	r3, r4
 80014b8:	07d2      	lsls	r2, r2, #31
 80014ba:	4313      	orrs	r3, r2
 80014bc:	0028      	movs	r0, r5
 80014be:	0019      	movs	r1, r3
 80014c0:	b005      	add	sp, #20
 80014c2:	bcf0      	pop	{r4, r5, r6, r7}
 80014c4:	46bb      	mov	fp, r7
 80014c6:	46b2      	mov	sl, r6
 80014c8:	46a9      	mov	r9, r5
 80014ca:	46a0      	mov	r8, r4
 80014cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ce:	2400      	movs	r4, #0
 80014d0:	2500      	movs	r5, #0
 80014d2:	4baa      	ldr	r3, [pc, #680]	; (800177c <__aeabi_ddiv+0x378>)
 80014d4:	e7ed      	b.n	80014b2 <__aeabi_ddiv+0xae>
 80014d6:	46ba      	mov	sl, r7
 80014d8:	46a0      	mov	r8, r4
 80014da:	0015      	movs	r5, r2
 80014dc:	9000      	str	r0, [sp, #0]
 80014de:	e7dc      	b.n	800149a <__aeabi_ddiv+0x96>
 80014e0:	4544      	cmp	r4, r8
 80014e2:	d200      	bcs.n	80014e6 <__aeabi_ddiv+0xe2>
 80014e4:	e1c7      	b.n	8001876 <__aeabi_ddiv+0x472>
 80014e6:	d100      	bne.n	80014ea <__aeabi_ddiv+0xe6>
 80014e8:	e1c2      	b.n	8001870 <__aeabi_ddiv+0x46c>
 80014ea:	2301      	movs	r3, #1
 80014ec:	425b      	negs	r3, r3
 80014ee:	469c      	mov	ip, r3
 80014f0:	002e      	movs	r6, r5
 80014f2:	4640      	mov	r0, r8
 80014f4:	2500      	movs	r5, #0
 80014f6:	44e3      	add	fp, ip
 80014f8:	0223      	lsls	r3, r4, #8
 80014fa:	0e14      	lsrs	r4, r2, #24
 80014fc:	431c      	orrs	r4, r3
 80014fe:	0c1b      	lsrs	r3, r3, #16
 8001500:	4699      	mov	r9, r3
 8001502:	0423      	lsls	r3, r4, #16
 8001504:	0c1f      	lsrs	r7, r3, #16
 8001506:	0212      	lsls	r2, r2, #8
 8001508:	4649      	mov	r1, r9
 800150a:	9200      	str	r2, [sp, #0]
 800150c:	9701      	str	r7, [sp, #4]
 800150e:	f7fe fe9d 	bl	800024c <__aeabi_uidivmod>
 8001512:	0002      	movs	r2, r0
 8001514:	437a      	muls	r2, r7
 8001516:	040b      	lsls	r3, r1, #16
 8001518:	0c31      	lsrs	r1, r6, #16
 800151a:	4680      	mov	r8, r0
 800151c:	4319      	orrs	r1, r3
 800151e:	428a      	cmp	r2, r1
 8001520:	d907      	bls.n	8001532 <__aeabi_ddiv+0x12e>
 8001522:	2301      	movs	r3, #1
 8001524:	425b      	negs	r3, r3
 8001526:	469c      	mov	ip, r3
 8001528:	1909      	adds	r1, r1, r4
 800152a:	44e0      	add	r8, ip
 800152c:	428c      	cmp	r4, r1
 800152e:	d800      	bhi.n	8001532 <__aeabi_ddiv+0x12e>
 8001530:	e207      	b.n	8001942 <__aeabi_ddiv+0x53e>
 8001532:	1a88      	subs	r0, r1, r2
 8001534:	4649      	mov	r1, r9
 8001536:	f7fe fe89 	bl	800024c <__aeabi_uidivmod>
 800153a:	0409      	lsls	r1, r1, #16
 800153c:	468c      	mov	ip, r1
 800153e:	0431      	lsls	r1, r6, #16
 8001540:	4666      	mov	r6, ip
 8001542:	9a01      	ldr	r2, [sp, #4]
 8001544:	0c09      	lsrs	r1, r1, #16
 8001546:	4342      	muls	r2, r0
 8001548:	0003      	movs	r3, r0
 800154a:	4331      	orrs	r1, r6
 800154c:	428a      	cmp	r2, r1
 800154e:	d904      	bls.n	800155a <__aeabi_ddiv+0x156>
 8001550:	1909      	adds	r1, r1, r4
 8001552:	3b01      	subs	r3, #1
 8001554:	428c      	cmp	r4, r1
 8001556:	d800      	bhi.n	800155a <__aeabi_ddiv+0x156>
 8001558:	e1ed      	b.n	8001936 <__aeabi_ddiv+0x532>
 800155a:	1a88      	subs	r0, r1, r2
 800155c:	4642      	mov	r2, r8
 800155e:	0412      	lsls	r2, r2, #16
 8001560:	431a      	orrs	r2, r3
 8001562:	4690      	mov	r8, r2
 8001564:	4641      	mov	r1, r8
 8001566:	9b00      	ldr	r3, [sp, #0]
 8001568:	040e      	lsls	r6, r1, #16
 800156a:	0c1b      	lsrs	r3, r3, #16
 800156c:	001f      	movs	r7, r3
 800156e:	9302      	str	r3, [sp, #8]
 8001570:	9b00      	ldr	r3, [sp, #0]
 8001572:	0c36      	lsrs	r6, r6, #16
 8001574:	041b      	lsls	r3, r3, #16
 8001576:	0c19      	lsrs	r1, r3, #16
 8001578:	000b      	movs	r3, r1
 800157a:	4373      	muls	r3, r6
 800157c:	0c12      	lsrs	r2, r2, #16
 800157e:	437e      	muls	r6, r7
 8001580:	9103      	str	r1, [sp, #12]
 8001582:	4351      	muls	r1, r2
 8001584:	437a      	muls	r2, r7
 8001586:	0c1f      	lsrs	r7, r3, #16
 8001588:	46bc      	mov	ip, r7
 800158a:	1876      	adds	r6, r6, r1
 800158c:	4466      	add	r6, ip
 800158e:	42b1      	cmp	r1, r6
 8001590:	d903      	bls.n	800159a <__aeabi_ddiv+0x196>
 8001592:	2180      	movs	r1, #128	; 0x80
 8001594:	0249      	lsls	r1, r1, #9
 8001596:	468c      	mov	ip, r1
 8001598:	4462      	add	r2, ip
 800159a:	0c31      	lsrs	r1, r6, #16
 800159c:	188a      	adds	r2, r1, r2
 800159e:	0431      	lsls	r1, r6, #16
 80015a0:	041e      	lsls	r6, r3, #16
 80015a2:	0c36      	lsrs	r6, r6, #16
 80015a4:	198e      	adds	r6, r1, r6
 80015a6:	4290      	cmp	r0, r2
 80015a8:	d302      	bcc.n	80015b0 <__aeabi_ddiv+0x1ac>
 80015aa:	d112      	bne.n	80015d2 <__aeabi_ddiv+0x1ce>
 80015ac:	42b5      	cmp	r5, r6
 80015ae:	d210      	bcs.n	80015d2 <__aeabi_ddiv+0x1ce>
 80015b0:	4643      	mov	r3, r8
 80015b2:	1e59      	subs	r1, r3, #1
 80015b4:	9b00      	ldr	r3, [sp, #0]
 80015b6:	469c      	mov	ip, r3
 80015b8:	4465      	add	r5, ip
 80015ba:	001f      	movs	r7, r3
 80015bc:	429d      	cmp	r5, r3
 80015be:	419b      	sbcs	r3, r3
 80015c0:	425b      	negs	r3, r3
 80015c2:	191b      	adds	r3, r3, r4
 80015c4:	18c0      	adds	r0, r0, r3
 80015c6:	4284      	cmp	r4, r0
 80015c8:	d200      	bcs.n	80015cc <__aeabi_ddiv+0x1c8>
 80015ca:	e1a0      	b.n	800190e <__aeabi_ddiv+0x50a>
 80015cc:	d100      	bne.n	80015d0 <__aeabi_ddiv+0x1cc>
 80015ce:	e19b      	b.n	8001908 <__aeabi_ddiv+0x504>
 80015d0:	4688      	mov	r8, r1
 80015d2:	1bae      	subs	r6, r5, r6
 80015d4:	42b5      	cmp	r5, r6
 80015d6:	41ad      	sbcs	r5, r5
 80015d8:	1a80      	subs	r0, r0, r2
 80015da:	426d      	negs	r5, r5
 80015dc:	1b40      	subs	r0, r0, r5
 80015de:	4284      	cmp	r4, r0
 80015e0:	d100      	bne.n	80015e4 <__aeabi_ddiv+0x1e0>
 80015e2:	e1d5      	b.n	8001990 <__aeabi_ddiv+0x58c>
 80015e4:	4649      	mov	r1, r9
 80015e6:	f7fe fe31 	bl	800024c <__aeabi_uidivmod>
 80015ea:	9a01      	ldr	r2, [sp, #4]
 80015ec:	040b      	lsls	r3, r1, #16
 80015ee:	4342      	muls	r2, r0
 80015f0:	0c31      	lsrs	r1, r6, #16
 80015f2:	0005      	movs	r5, r0
 80015f4:	4319      	orrs	r1, r3
 80015f6:	428a      	cmp	r2, r1
 80015f8:	d900      	bls.n	80015fc <__aeabi_ddiv+0x1f8>
 80015fa:	e16c      	b.n	80018d6 <__aeabi_ddiv+0x4d2>
 80015fc:	1a88      	subs	r0, r1, r2
 80015fe:	4649      	mov	r1, r9
 8001600:	f7fe fe24 	bl	800024c <__aeabi_uidivmod>
 8001604:	9a01      	ldr	r2, [sp, #4]
 8001606:	0436      	lsls	r6, r6, #16
 8001608:	4342      	muls	r2, r0
 800160a:	0409      	lsls	r1, r1, #16
 800160c:	0c36      	lsrs	r6, r6, #16
 800160e:	0003      	movs	r3, r0
 8001610:	430e      	orrs	r6, r1
 8001612:	42b2      	cmp	r2, r6
 8001614:	d900      	bls.n	8001618 <__aeabi_ddiv+0x214>
 8001616:	e153      	b.n	80018c0 <__aeabi_ddiv+0x4bc>
 8001618:	9803      	ldr	r0, [sp, #12]
 800161a:	1ab6      	subs	r6, r6, r2
 800161c:	0002      	movs	r2, r0
 800161e:	042d      	lsls	r5, r5, #16
 8001620:	431d      	orrs	r5, r3
 8001622:	9f02      	ldr	r7, [sp, #8]
 8001624:	042b      	lsls	r3, r5, #16
 8001626:	0c1b      	lsrs	r3, r3, #16
 8001628:	435a      	muls	r2, r3
 800162a:	437b      	muls	r3, r7
 800162c:	469c      	mov	ip, r3
 800162e:	0c29      	lsrs	r1, r5, #16
 8001630:	4348      	muls	r0, r1
 8001632:	0c13      	lsrs	r3, r2, #16
 8001634:	4484      	add	ip, r0
 8001636:	4463      	add	r3, ip
 8001638:	4379      	muls	r1, r7
 800163a:	4298      	cmp	r0, r3
 800163c:	d903      	bls.n	8001646 <__aeabi_ddiv+0x242>
 800163e:	2080      	movs	r0, #128	; 0x80
 8001640:	0240      	lsls	r0, r0, #9
 8001642:	4684      	mov	ip, r0
 8001644:	4461      	add	r1, ip
 8001646:	0c18      	lsrs	r0, r3, #16
 8001648:	0412      	lsls	r2, r2, #16
 800164a:	041b      	lsls	r3, r3, #16
 800164c:	0c12      	lsrs	r2, r2, #16
 800164e:	1841      	adds	r1, r0, r1
 8001650:	189b      	adds	r3, r3, r2
 8001652:	428e      	cmp	r6, r1
 8001654:	d200      	bcs.n	8001658 <__aeabi_ddiv+0x254>
 8001656:	e0ff      	b.n	8001858 <__aeabi_ddiv+0x454>
 8001658:	d100      	bne.n	800165c <__aeabi_ddiv+0x258>
 800165a:	e0fa      	b.n	8001852 <__aeabi_ddiv+0x44e>
 800165c:	2301      	movs	r3, #1
 800165e:	431d      	orrs	r5, r3
 8001660:	4a49      	ldr	r2, [pc, #292]	; (8001788 <__aeabi_ddiv+0x384>)
 8001662:	445a      	add	r2, fp
 8001664:	2a00      	cmp	r2, #0
 8001666:	dc00      	bgt.n	800166a <__aeabi_ddiv+0x266>
 8001668:	e0aa      	b.n	80017c0 <__aeabi_ddiv+0x3bc>
 800166a:	076b      	lsls	r3, r5, #29
 800166c:	d000      	beq.n	8001670 <__aeabi_ddiv+0x26c>
 800166e:	e13d      	b.n	80018ec <__aeabi_ddiv+0x4e8>
 8001670:	08ed      	lsrs	r5, r5, #3
 8001672:	4643      	mov	r3, r8
 8001674:	01db      	lsls	r3, r3, #7
 8001676:	d506      	bpl.n	8001686 <__aeabi_ddiv+0x282>
 8001678:	4642      	mov	r2, r8
 800167a:	4b44      	ldr	r3, [pc, #272]	; (800178c <__aeabi_ddiv+0x388>)
 800167c:	401a      	ands	r2, r3
 800167e:	4690      	mov	r8, r2
 8001680:	2280      	movs	r2, #128	; 0x80
 8001682:	00d2      	lsls	r2, r2, #3
 8001684:	445a      	add	r2, fp
 8001686:	4b42      	ldr	r3, [pc, #264]	; (8001790 <__aeabi_ddiv+0x38c>)
 8001688:	429a      	cmp	r2, r3
 800168a:	dd00      	ble.n	800168e <__aeabi_ddiv+0x28a>
 800168c:	e71f      	b.n	80014ce <__aeabi_ddiv+0xca>
 800168e:	4643      	mov	r3, r8
 8001690:	075b      	lsls	r3, r3, #29
 8001692:	431d      	orrs	r5, r3
 8001694:	4643      	mov	r3, r8
 8001696:	0552      	lsls	r2, r2, #21
 8001698:	025c      	lsls	r4, r3, #9
 800169a:	0b24      	lsrs	r4, r4, #12
 800169c:	0d53      	lsrs	r3, r2, #21
 800169e:	e708      	b.n	80014b2 <__aeabi_ddiv+0xae>
 80016a0:	4652      	mov	r2, sl
 80016a2:	4322      	orrs	r2, r4
 80016a4:	d100      	bne.n	80016a8 <__aeabi_ddiv+0x2a4>
 80016a6:	e07b      	b.n	80017a0 <__aeabi_ddiv+0x39c>
 80016a8:	2c00      	cmp	r4, #0
 80016aa:	d100      	bne.n	80016ae <__aeabi_ddiv+0x2aa>
 80016ac:	e0fa      	b.n	80018a4 <__aeabi_ddiv+0x4a0>
 80016ae:	0020      	movs	r0, r4
 80016b0:	f001 fa5c 	bl	8002b6c <__clzsi2>
 80016b4:	0002      	movs	r2, r0
 80016b6:	3a0b      	subs	r2, #11
 80016b8:	231d      	movs	r3, #29
 80016ba:	0001      	movs	r1, r0
 80016bc:	1a9b      	subs	r3, r3, r2
 80016be:	4652      	mov	r2, sl
 80016c0:	3908      	subs	r1, #8
 80016c2:	40da      	lsrs	r2, r3
 80016c4:	408c      	lsls	r4, r1
 80016c6:	4314      	orrs	r4, r2
 80016c8:	4652      	mov	r2, sl
 80016ca:	408a      	lsls	r2, r1
 80016cc:	4b31      	ldr	r3, [pc, #196]	; (8001794 <__aeabi_ddiv+0x390>)
 80016ce:	4458      	add	r0, fp
 80016d0:	469b      	mov	fp, r3
 80016d2:	4483      	add	fp, r0
 80016d4:	2000      	movs	r0, #0
 80016d6:	e6d5      	b.n	8001484 <__aeabi_ddiv+0x80>
 80016d8:	464b      	mov	r3, r9
 80016da:	4323      	orrs	r3, r4
 80016dc:	4698      	mov	r8, r3
 80016de:	d044      	beq.n	800176a <__aeabi_ddiv+0x366>
 80016e0:	2c00      	cmp	r4, #0
 80016e2:	d100      	bne.n	80016e6 <__aeabi_ddiv+0x2e2>
 80016e4:	e0ce      	b.n	8001884 <__aeabi_ddiv+0x480>
 80016e6:	0020      	movs	r0, r4
 80016e8:	f001 fa40 	bl	8002b6c <__clzsi2>
 80016ec:	0001      	movs	r1, r0
 80016ee:	0002      	movs	r2, r0
 80016f0:	390b      	subs	r1, #11
 80016f2:	231d      	movs	r3, #29
 80016f4:	1a5b      	subs	r3, r3, r1
 80016f6:	4649      	mov	r1, r9
 80016f8:	0010      	movs	r0, r2
 80016fa:	40d9      	lsrs	r1, r3
 80016fc:	3808      	subs	r0, #8
 80016fe:	4084      	lsls	r4, r0
 8001700:	000b      	movs	r3, r1
 8001702:	464d      	mov	r5, r9
 8001704:	4323      	orrs	r3, r4
 8001706:	4698      	mov	r8, r3
 8001708:	4085      	lsls	r5, r0
 800170a:	4823      	ldr	r0, [pc, #140]	; (8001798 <__aeabi_ddiv+0x394>)
 800170c:	1a83      	subs	r3, r0, r2
 800170e:	469b      	mov	fp, r3
 8001710:	2300      	movs	r3, #0
 8001712:	4699      	mov	r9, r3
 8001714:	9300      	str	r3, [sp, #0]
 8001716:	e69a      	b.n	800144e <__aeabi_ddiv+0x4a>
 8001718:	464b      	mov	r3, r9
 800171a:	4323      	orrs	r3, r4
 800171c:	4698      	mov	r8, r3
 800171e:	d11d      	bne.n	800175c <__aeabi_ddiv+0x358>
 8001720:	2308      	movs	r3, #8
 8001722:	4699      	mov	r9, r3
 8001724:	3b06      	subs	r3, #6
 8001726:	2500      	movs	r5, #0
 8001728:	4683      	mov	fp, r0
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	e68f      	b.n	800144e <__aeabi_ddiv+0x4a>
 800172e:	4652      	mov	r2, sl
 8001730:	4322      	orrs	r2, r4
 8001732:	d109      	bne.n	8001748 <__aeabi_ddiv+0x344>
 8001734:	2302      	movs	r3, #2
 8001736:	4649      	mov	r1, r9
 8001738:	4319      	orrs	r1, r3
 800173a:	4b18      	ldr	r3, [pc, #96]	; (800179c <__aeabi_ddiv+0x398>)
 800173c:	4689      	mov	r9, r1
 800173e:	469c      	mov	ip, r3
 8001740:	2400      	movs	r4, #0
 8001742:	2002      	movs	r0, #2
 8001744:	44e3      	add	fp, ip
 8001746:	e69d      	b.n	8001484 <__aeabi_ddiv+0x80>
 8001748:	2303      	movs	r3, #3
 800174a:	464a      	mov	r2, r9
 800174c:	431a      	orrs	r2, r3
 800174e:	4b13      	ldr	r3, [pc, #76]	; (800179c <__aeabi_ddiv+0x398>)
 8001750:	4691      	mov	r9, r2
 8001752:	469c      	mov	ip, r3
 8001754:	4652      	mov	r2, sl
 8001756:	2003      	movs	r0, #3
 8001758:	44e3      	add	fp, ip
 800175a:	e693      	b.n	8001484 <__aeabi_ddiv+0x80>
 800175c:	230c      	movs	r3, #12
 800175e:	4699      	mov	r9, r3
 8001760:	3b09      	subs	r3, #9
 8001762:	46a0      	mov	r8, r4
 8001764:	4683      	mov	fp, r0
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	e671      	b.n	800144e <__aeabi_ddiv+0x4a>
 800176a:	2304      	movs	r3, #4
 800176c:	4699      	mov	r9, r3
 800176e:	2300      	movs	r3, #0
 8001770:	469b      	mov	fp, r3
 8001772:	3301      	adds	r3, #1
 8001774:	2500      	movs	r5, #0
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	e669      	b.n	800144e <__aeabi_ddiv+0x4a>
 800177a:	46c0      	nop			; (mov r8, r8)
 800177c:	000007ff 	.word	0x000007ff
 8001780:	fffffc01 	.word	0xfffffc01
 8001784:	08012f84 	.word	0x08012f84
 8001788:	000003ff 	.word	0x000003ff
 800178c:	feffffff 	.word	0xfeffffff
 8001790:	000007fe 	.word	0x000007fe
 8001794:	000003f3 	.word	0x000003f3
 8001798:	fffffc0d 	.word	0xfffffc0d
 800179c:	fffff801 	.word	0xfffff801
 80017a0:	4649      	mov	r1, r9
 80017a2:	2301      	movs	r3, #1
 80017a4:	4319      	orrs	r1, r3
 80017a6:	4689      	mov	r9, r1
 80017a8:	2400      	movs	r4, #0
 80017aa:	2001      	movs	r0, #1
 80017ac:	e66a      	b.n	8001484 <__aeabi_ddiv+0x80>
 80017ae:	2300      	movs	r3, #0
 80017b0:	2480      	movs	r4, #128	; 0x80
 80017b2:	469a      	mov	sl, r3
 80017b4:	2500      	movs	r5, #0
 80017b6:	4b8a      	ldr	r3, [pc, #552]	; (80019e0 <__aeabi_ddiv+0x5dc>)
 80017b8:	0324      	lsls	r4, r4, #12
 80017ba:	e67a      	b.n	80014b2 <__aeabi_ddiv+0xae>
 80017bc:	2501      	movs	r5, #1
 80017be:	426d      	negs	r5, r5
 80017c0:	2301      	movs	r3, #1
 80017c2:	1a9b      	subs	r3, r3, r2
 80017c4:	2b38      	cmp	r3, #56	; 0x38
 80017c6:	dd00      	ble.n	80017ca <__aeabi_ddiv+0x3c6>
 80017c8:	e670      	b.n	80014ac <__aeabi_ddiv+0xa8>
 80017ca:	2b1f      	cmp	r3, #31
 80017cc:	dc00      	bgt.n	80017d0 <__aeabi_ddiv+0x3cc>
 80017ce:	e0bf      	b.n	8001950 <__aeabi_ddiv+0x54c>
 80017d0:	211f      	movs	r1, #31
 80017d2:	4249      	negs	r1, r1
 80017d4:	1a8a      	subs	r2, r1, r2
 80017d6:	4641      	mov	r1, r8
 80017d8:	40d1      	lsrs	r1, r2
 80017da:	000a      	movs	r2, r1
 80017dc:	2b20      	cmp	r3, #32
 80017de:	d004      	beq.n	80017ea <__aeabi_ddiv+0x3e6>
 80017e0:	4641      	mov	r1, r8
 80017e2:	4b80      	ldr	r3, [pc, #512]	; (80019e4 <__aeabi_ddiv+0x5e0>)
 80017e4:	445b      	add	r3, fp
 80017e6:	4099      	lsls	r1, r3
 80017e8:	430d      	orrs	r5, r1
 80017ea:	1e6b      	subs	r3, r5, #1
 80017ec:	419d      	sbcs	r5, r3
 80017ee:	2307      	movs	r3, #7
 80017f0:	432a      	orrs	r2, r5
 80017f2:	001d      	movs	r5, r3
 80017f4:	2400      	movs	r4, #0
 80017f6:	4015      	ands	r5, r2
 80017f8:	4213      	tst	r3, r2
 80017fa:	d100      	bne.n	80017fe <__aeabi_ddiv+0x3fa>
 80017fc:	e0d4      	b.n	80019a8 <__aeabi_ddiv+0x5a4>
 80017fe:	210f      	movs	r1, #15
 8001800:	2300      	movs	r3, #0
 8001802:	4011      	ands	r1, r2
 8001804:	2904      	cmp	r1, #4
 8001806:	d100      	bne.n	800180a <__aeabi_ddiv+0x406>
 8001808:	e0cb      	b.n	80019a2 <__aeabi_ddiv+0x59e>
 800180a:	1d11      	adds	r1, r2, #4
 800180c:	4291      	cmp	r1, r2
 800180e:	4192      	sbcs	r2, r2
 8001810:	4252      	negs	r2, r2
 8001812:	189b      	adds	r3, r3, r2
 8001814:	000a      	movs	r2, r1
 8001816:	0219      	lsls	r1, r3, #8
 8001818:	d400      	bmi.n	800181c <__aeabi_ddiv+0x418>
 800181a:	e0c2      	b.n	80019a2 <__aeabi_ddiv+0x59e>
 800181c:	2301      	movs	r3, #1
 800181e:	2400      	movs	r4, #0
 8001820:	2500      	movs	r5, #0
 8001822:	e646      	b.n	80014b2 <__aeabi_ddiv+0xae>
 8001824:	2380      	movs	r3, #128	; 0x80
 8001826:	4641      	mov	r1, r8
 8001828:	031b      	lsls	r3, r3, #12
 800182a:	4219      	tst	r1, r3
 800182c:	d008      	beq.n	8001840 <__aeabi_ddiv+0x43c>
 800182e:	421c      	tst	r4, r3
 8001830:	d106      	bne.n	8001840 <__aeabi_ddiv+0x43c>
 8001832:	431c      	orrs	r4, r3
 8001834:	0324      	lsls	r4, r4, #12
 8001836:	46ba      	mov	sl, r7
 8001838:	0015      	movs	r5, r2
 800183a:	4b69      	ldr	r3, [pc, #420]	; (80019e0 <__aeabi_ddiv+0x5dc>)
 800183c:	0b24      	lsrs	r4, r4, #12
 800183e:	e638      	b.n	80014b2 <__aeabi_ddiv+0xae>
 8001840:	2480      	movs	r4, #128	; 0x80
 8001842:	4643      	mov	r3, r8
 8001844:	0324      	lsls	r4, r4, #12
 8001846:	431c      	orrs	r4, r3
 8001848:	0324      	lsls	r4, r4, #12
 800184a:	46b2      	mov	sl, r6
 800184c:	4b64      	ldr	r3, [pc, #400]	; (80019e0 <__aeabi_ddiv+0x5dc>)
 800184e:	0b24      	lsrs	r4, r4, #12
 8001850:	e62f      	b.n	80014b2 <__aeabi_ddiv+0xae>
 8001852:	2b00      	cmp	r3, #0
 8001854:	d100      	bne.n	8001858 <__aeabi_ddiv+0x454>
 8001856:	e703      	b.n	8001660 <__aeabi_ddiv+0x25c>
 8001858:	19a6      	adds	r6, r4, r6
 800185a:	1e68      	subs	r0, r5, #1
 800185c:	42a6      	cmp	r6, r4
 800185e:	d200      	bcs.n	8001862 <__aeabi_ddiv+0x45e>
 8001860:	e08d      	b.n	800197e <__aeabi_ddiv+0x57a>
 8001862:	428e      	cmp	r6, r1
 8001864:	d200      	bcs.n	8001868 <__aeabi_ddiv+0x464>
 8001866:	e0a3      	b.n	80019b0 <__aeabi_ddiv+0x5ac>
 8001868:	d100      	bne.n	800186c <__aeabi_ddiv+0x468>
 800186a:	e0b3      	b.n	80019d4 <__aeabi_ddiv+0x5d0>
 800186c:	0005      	movs	r5, r0
 800186e:	e6f5      	b.n	800165c <__aeabi_ddiv+0x258>
 8001870:	42aa      	cmp	r2, r5
 8001872:	d900      	bls.n	8001876 <__aeabi_ddiv+0x472>
 8001874:	e639      	b.n	80014ea <__aeabi_ddiv+0xe6>
 8001876:	4643      	mov	r3, r8
 8001878:	07de      	lsls	r6, r3, #31
 800187a:	0858      	lsrs	r0, r3, #1
 800187c:	086b      	lsrs	r3, r5, #1
 800187e:	431e      	orrs	r6, r3
 8001880:	07ed      	lsls	r5, r5, #31
 8001882:	e639      	b.n	80014f8 <__aeabi_ddiv+0xf4>
 8001884:	4648      	mov	r0, r9
 8001886:	f001 f971 	bl	8002b6c <__clzsi2>
 800188a:	0001      	movs	r1, r0
 800188c:	0002      	movs	r2, r0
 800188e:	3115      	adds	r1, #21
 8001890:	3220      	adds	r2, #32
 8001892:	291c      	cmp	r1, #28
 8001894:	dc00      	bgt.n	8001898 <__aeabi_ddiv+0x494>
 8001896:	e72c      	b.n	80016f2 <__aeabi_ddiv+0x2ee>
 8001898:	464b      	mov	r3, r9
 800189a:	3808      	subs	r0, #8
 800189c:	4083      	lsls	r3, r0
 800189e:	2500      	movs	r5, #0
 80018a0:	4698      	mov	r8, r3
 80018a2:	e732      	b.n	800170a <__aeabi_ddiv+0x306>
 80018a4:	f001 f962 	bl	8002b6c <__clzsi2>
 80018a8:	0003      	movs	r3, r0
 80018aa:	001a      	movs	r2, r3
 80018ac:	3215      	adds	r2, #21
 80018ae:	3020      	adds	r0, #32
 80018b0:	2a1c      	cmp	r2, #28
 80018b2:	dc00      	bgt.n	80018b6 <__aeabi_ddiv+0x4b2>
 80018b4:	e700      	b.n	80016b8 <__aeabi_ddiv+0x2b4>
 80018b6:	4654      	mov	r4, sl
 80018b8:	3b08      	subs	r3, #8
 80018ba:	2200      	movs	r2, #0
 80018bc:	409c      	lsls	r4, r3
 80018be:	e705      	b.n	80016cc <__aeabi_ddiv+0x2c8>
 80018c0:	1936      	adds	r6, r6, r4
 80018c2:	3b01      	subs	r3, #1
 80018c4:	42b4      	cmp	r4, r6
 80018c6:	d900      	bls.n	80018ca <__aeabi_ddiv+0x4c6>
 80018c8:	e6a6      	b.n	8001618 <__aeabi_ddiv+0x214>
 80018ca:	42b2      	cmp	r2, r6
 80018cc:	d800      	bhi.n	80018d0 <__aeabi_ddiv+0x4cc>
 80018ce:	e6a3      	b.n	8001618 <__aeabi_ddiv+0x214>
 80018d0:	1e83      	subs	r3, r0, #2
 80018d2:	1936      	adds	r6, r6, r4
 80018d4:	e6a0      	b.n	8001618 <__aeabi_ddiv+0x214>
 80018d6:	1909      	adds	r1, r1, r4
 80018d8:	3d01      	subs	r5, #1
 80018da:	428c      	cmp	r4, r1
 80018dc:	d900      	bls.n	80018e0 <__aeabi_ddiv+0x4dc>
 80018de:	e68d      	b.n	80015fc <__aeabi_ddiv+0x1f8>
 80018e0:	428a      	cmp	r2, r1
 80018e2:	d800      	bhi.n	80018e6 <__aeabi_ddiv+0x4e2>
 80018e4:	e68a      	b.n	80015fc <__aeabi_ddiv+0x1f8>
 80018e6:	1e85      	subs	r5, r0, #2
 80018e8:	1909      	adds	r1, r1, r4
 80018ea:	e687      	b.n	80015fc <__aeabi_ddiv+0x1f8>
 80018ec:	230f      	movs	r3, #15
 80018ee:	402b      	ands	r3, r5
 80018f0:	2b04      	cmp	r3, #4
 80018f2:	d100      	bne.n	80018f6 <__aeabi_ddiv+0x4f2>
 80018f4:	e6bc      	b.n	8001670 <__aeabi_ddiv+0x26c>
 80018f6:	2305      	movs	r3, #5
 80018f8:	425b      	negs	r3, r3
 80018fa:	42ab      	cmp	r3, r5
 80018fc:	419b      	sbcs	r3, r3
 80018fe:	3504      	adds	r5, #4
 8001900:	425b      	negs	r3, r3
 8001902:	08ed      	lsrs	r5, r5, #3
 8001904:	4498      	add	r8, r3
 8001906:	e6b4      	b.n	8001672 <__aeabi_ddiv+0x26e>
 8001908:	42af      	cmp	r7, r5
 800190a:	d900      	bls.n	800190e <__aeabi_ddiv+0x50a>
 800190c:	e660      	b.n	80015d0 <__aeabi_ddiv+0x1cc>
 800190e:	4282      	cmp	r2, r0
 8001910:	d804      	bhi.n	800191c <__aeabi_ddiv+0x518>
 8001912:	d000      	beq.n	8001916 <__aeabi_ddiv+0x512>
 8001914:	e65c      	b.n	80015d0 <__aeabi_ddiv+0x1cc>
 8001916:	42ae      	cmp	r6, r5
 8001918:	d800      	bhi.n	800191c <__aeabi_ddiv+0x518>
 800191a:	e659      	b.n	80015d0 <__aeabi_ddiv+0x1cc>
 800191c:	2302      	movs	r3, #2
 800191e:	425b      	negs	r3, r3
 8001920:	469c      	mov	ip, r3
 8001922:	9b00      	ldr	r3, [sp, #0]
 8001924:	44e0      	add	r8, ip
 8001926:	469c      	mov	ip, r3
 8001928:	4465      	add	r5, ip
 800192a:	429d      	cmp	r5, r3
 800192c:	419b      	sbcs	r3, r3
 800192e:	425b      	negs	r3, r3
 8001930:	191b      	adds	r3, r3, r4
 8001932:	18c0      	adds	r0, r0, r3
 8001934:	e64d      	b.n	80015d2 <__aeabi_ddiv+0x1ce>
 8001936:	428a      	cmp	r2, r1
 8001938:	d800      	bhi.n	800193c <__aeabi_ddiv+0x538>
 800193a:	e60e      	b.n	800155a <__aeabi_ddiv+0x156>
 800193c:	1e83      	subs	r3, r0, #2
 800193e:	1909      	adds	r1, r1, r4
 8001940:	e60b      	b.n	800155a <__aeabi_ddiv+0x156>
 8001942:	428a      	cmp	r2, r1
 8001944:	d800      	bhi.n	8001948 <__aeabi_ddiv+0x544>
 8001946:	e5f4      	b.n	8001532 <__aeabi_ddiv+0x12e>
 8001948:	1e83      	subs	r3, r0, #2
 800194a:	4698      	mov	r8, r3
 800194c:	1909      	adds	r1, r1, r4
 800194e:	e5f0      	b.n	8001532 <__aeabi_ddiv+0x12e>
 8001950:	4925      	ldr	r1, [pc, #148]	; (80019e8 <__aeabi_ddiv+0x5e4>)
 8001952:	0028      	movs	r0, r5
 8001954:	4459      	add	r1, fp
 8001956:	408d      	lsls	r5, r1
 8001958:	4642      	mov	r2, r8
 800195a:	408a      	lsls	r2, r1
 800195c:	1e69      	subs	r1, r5, #1
 800195e:	418d      	sbcs	r5, r1
 8001960:	4641      	mov	r1, r8
 8001962:	40d8      	lsrs	r0, r3
 8001964:	40d9      	lsrs	r1, r3
 8001966:	4302      	orrs	r2, r0
 8001968:	432a      	orrs	r2, r5
 800196a:	000b      	movs	r3, r1
 800196c:	0751      	lsls	r1, r2, #29
 800196e:	d100      	bne.n	8001972 <__aeabi_ddiv+0x56e>
 8001970:	e751      	b.n	8001816 <__aeabi_ddiv+0x412>
 8001972:	210f      	movs	r1, #15
 8001974:	4011      	ands	r1, r2
 8001976:	2904      	cmp	r1, #4
 8001978:	d000      	beq.n	800197c <__aeabi_ddiv+0x578>
 800197a:	e746      	b.n	800180a <__aeabi_ddiv+0x406>
 800197c:	e74b      	b.n	8001816 <__aeabi_ddiv+0x412>
 800197e:	0005      	movs	r5, r0
 8001980:	428e      	cmp	r6, r1
 8001982:	d000      	beq.n	8001986 <__aeabi_ddiv+0x582>
 8001984:	e66a      	b.n	800165c <__aeabi_ddiv+0x258>
 8001986:	9a00      	ldr	r2, [sp, #0]
 8001988:	4293      	cmp	r3, r2
 800198a:	d000      	beq.n	800198e <__aeabi_ddiv+0x58a>
 800198c:	e666      	b.n	800165c <__aeabi_ddiv+0x258>
 800198e:	e667      	b.n	8001660 <__aeabi_ddiv+0x25c>
 8001990:	4a16      	ldr	r2, [pc, #88]	; (80019ec <__aeabi_ddiv+0x5e8>)
 8001992:	445a      	add	r2, fp
 8001994:	2a00      	cmp	r2, #0
 8001996:	dc00      	bgt.n	800199a <__aeabi_ddiv+0x596>
 8001998:	e710      	b.n	80017bc <__aeabi_ddiv+0x3b8>
 800199a:	2301      	movs	r3, #1
 800199c:	2500      	movs	r5, #0
 800199e:	4498      	add	r8, r3
 80019a0:	e667      	b.n	8001672 <__aeabi_ddiv+0x26e>
 80019a2:	075d      	lsls	r5, r3, #29
 80019a4:	025b      	lsls	r3, r3, #9
 80019a6:	0b1c      	lsrs	r4, r3, #12
 80019a8:	08d2      	lsrs	r2, r2, #3
 80019aa:	2300      	movs	r3, #0
 80019ac:	4315      	orrs	r5, r2
 80019ae:	e580      	b.n	80014b2 <__aeabi_ddiv+0xae>
 80019b0:	9800      	ldr	r0, [sp, #0]
 80019b2:	3d02      	subs	r5, #2
 80019b4:	0042      	lsls	r2, r0, #1
 80019b6:	4282      	cmp	r2, r0
 80019b8:	41bf      	sbcs	r7, r7
 80019ba:	427f      	negs	r7, r7
 80019bc:	193c      	adds	r4, r7, r4
 80019be:	1936      	adds	r6, r6, r4
 80019c0:	9200      	str	r2, [sp, #0]
 80019c2:	e7dd      	b.n	8001980 <__aeabi_ddiv+0x57c>
 80019c4:	2480      	movs	r4, #128	; 0x80
 80019c6:	4643      	mov	r3, r8
 80019c8:	0324      	lsls	r4, r4, #12
 80019ca:	431c      	orrs	r4, r3
 80019cc:	0324      	lsls	r4, r4, #12
 80019ce:	4b04      	ldr	r3, [pc, #16]	; (80019e0 <__aeabi_ddiv+0x5dc>)
 80019d0:	0b24      	lsrs	r4, r4, #12
 80019d2:	e56e      	b.n	80014b2 <__aeabi_ddiv+0xae>
 80019d4:	9a00      	ldr	r2, [sp, #0]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d3ea      	bcc.n	80019b0 <__aeabi_ddiv+0x5ac>
 80019da:	0005      	movs	r5, r0
 80019dc:	e7d3      	b.n	8001986 <__aeabi_ddiv+0x582>
 80019de:	46c0      	nop			; (mov r8, r8)
 80019e0:	000007ff 	.word	0x000007ff
 80019e4:	0000043e 	.word	0x0000043e
 80019e8:	0000041e 	.word	0x0000041e
 80019ec:	000003ff 	.word	0x000003ff

080019f0 <__eqdf2>:
 80019f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019f2:	464e      	mov	r6, r9
 80019f4:	4645      	mov	r5, r8
 80019f6:	46de      	mov	lr, fp
 80019f8:	4657      	mov	r7, sl
 80019fa:	4690      	mov	r8, r2
 80019fc:	b5e0      	push	{r5, r6, r7, lr}
 80019fe:	0017      	movs	r7, r2
 8001a00:	031a      	lsls	r2, r3, #12
 8001a02:	0b12      	lsrs	r2, r2, #12
 8001a04:	0005      	movs	r5, r0
 8001a06:	4684      	mov	ip, r0
 8001a08:	4819      	ldr	r0, [pc, #100]	; (8001a70 <__eqdf2+0x80>)
 8001a0a:	030e      	lsls	r6, r1, #12
 8001a0c:	004c      	lsls	r4, r1, #1
 8001a0e:	4691      	mov	r9, r2
 8001a10:	005a      	lsls	r2, r3, #1
 8001a12:	0fdb      	lsrs	r3, r3, #31
 8001a14:	469b      	mov	fp, r3
 8001a16:	0b36      	lsrs	r6, r6, #12
 8001a18:	0d64      	lsrs	r4, r4, #21
 8001a1a:	0fc9      	lsrs	r1, r1, #31
 8001a1c:	0d52      	lsrs	r2, r2, #21
 8001a1e:	4284      	cmp	r4, r0
 8001a20:	d019      	beq.n	8001a56 <__eqdf2+0x66>
 8001a22:	4282      	cmp	r2, r0
 8001a24:	d010      	beq.n	8001a48 <__eqdf2+0x58>
 8001a26:	2001      	movs	r0, #1
 8001a28:	4294      	cmp	r4, r2
 8001a2a:	d10e      	bne.n	8001a4a <__eqdf2+0x5a>
 8001a2c:	454e      	cmp	r6, r9
 8001a2e:	d10c      	bne.n	8001a4a <__eqdf2+0x5a>
 8001a30:	2001      	movs	r0, #1
 8001a32:	45c4      	cmp	ip, r8
 8001a34:	d109      	bne.n	8001a4a <__eqdf2+0x5a>
 8001a36:	4559      	cmp	r1, fp
 8001a38:	d017      	beq.n	8001a6a <__eqdf2+0x7a>
 8001a3a:	2c00      	cmp	r4, #0
 8001a3c:	d105      	bne.n	8001a4a <__eqdf2+0x5a>
 8001a3e:	0030      	movs	r0, r6
 8001a40:	4328      	orrs	r0, r5
 8001a42:	1e43      	subs	r3, r0, #1
 8001a44:	4198      	sbcs	r0, r3
 8001a46:	e000      	b.n	8001a4a <__eqdf2+0x5a>
 8001a48:	2001      	movs	r0, #1
 8001a4a:	bcf0      	pop	{r4, r5, r6, r7}
 8001a4c:	46bb      	mov	fp, r7
 8001a4e:	46b2      	mov	sl, r6
 8001a50:	46a9      	mov	r9, r5
 8001a52:	46a0      	mov	r8, r4
 8001a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a56:	0033      	movs	r3, r6
 8001a58:	2001      	movs	r0, #1
 8001a5a:	432b      	orrs	r3, r5
 8001a5c:	d1f5      	bne.n	8001a4a <__eqdf2+0x5a>
 8001a5e:	42a2      	cmp	r2, r4
 8001a60:	d1f3      	bne.n	8001a4a <__eqdf2+0x5a>
 8001a62:	464b      	mov	r3, r9
 8001a64:	433b      	orrs	r3, r7
 8001a66:	d1f0      	bne.n	8001a4a <__eqdf2+0x5a>
 8001a68:	e7e2      	b.n	8001a30 <__eqdf2+0x40>
 8001a6a:	2000      	movs	r0, #0
 8001a6c:	e7ed      	b.n	8001a4a <__eqdf2+0x5a>
 8001a6e:	46c0      	nop			; (mov r8, r8)
 8001a70:	000007ff 	.word	0x000007ff

08001a74 <__gedf2>:
 8001a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a76:	4647      	mov	r7, r8
 8001a78:	46ce      	mov	lr, r9
 8001a7a:	0004      	movs	r4, r0
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	0016      	movs	r6, r2
 8001a80:	031b      	lsls	r3, r3, #12
 8001a82:	0b1b      	lsrs	r3, r3, #12
 8001a84:	4d2d      	ldr	r5, [pc, #180]	; (8001b3c <__gedf2+0xc8>)
 8001a86:	004a      	lsls	r2, r1, #1
 8001a88:	4699      	mov	r9, r3
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	0043      	lsls	r3, r0, #1
 8001a8e:	030f      	lsls	r7, r1, #12
 8001a90:	46a4      	mov	ip, r4
 8001a92:	46b0      	mov	r8, r6
 8001a94:	0b3f      	lsrs	r7, r7, #12
 8001a96:	0d52      	lsrs	r2, r2, #21
 8001a98:	0fc9      	lsrs	r1, r1, #31
 8001a9a:	0d5b      	lsrs	r3, r3, #21
 8001a9c:	0fc0      	lsrs	r0, r0, #31
 8001a9e:	42aa      	cmp	r2, r5
 8001aa0:	d021      	beq.n	8001ae6 <__gedf2+0x72>
 8001aa2:	42ab      	cmp	r3, r5
 8001aa4:	d013      	beq.n	8001ace <__gedf2+0x5a>
 8001aa6:	2a00      	cmp	r2, #0
 8001aa8:	d122      	bne.n	8001af0 <__gedf2+0x7c>
 8001aaa:	433c      	orrs	r4, r7
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d102      	bne.n	8001ab6 <__gedf2+0x42>
 8001ab0:	464d      	mov	r5, r9
 8001ab2:	432e      	orrs	r6, r5
 8001ab4:	d022      	beq.n	8001afc <__gedf2+0x88>
 8001ab6:	2c00      	cmp	r4, #0
 8001ab8:	d010      	beq.n	8001adc <__gedf2+0x68>
 8001aba:	4281      	cmp	r1, r0
 8001abc:	d022      	beq.n	8001b04 <__gedf2+0x90>
 8001abe:	2002      	movs	r0, #2
 8001ac0:	3901      	subs	r1, #1
 8001ac2:	4008      	ands	r0, r1
 8001ac4:	3801      	subs	r0, #1
 8001ac6:	bcc0      	pop	{r6, r7}
 8001ac8:	46b9      	mov	r9, r7
 8001aca:	46b0      	mov	r8, r6
 8001acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ace:	464d      	mov	r5, r9
 8001ad0:	432e      	orrs	r6, r5
 8001ad2:	d129      	bne.n	8001b28 <__gedf2+0xb4>
 8001ad4:	2a00      	cmp	r2, #0
 8001ad6:	d1f0      	bne.n	8001aba <__gedf2+0x46>
 8001ad8:	433c      	orrs	r4, r7
 8001ada:	d1ee      	bne.n	8001aba <__gedf2+0x46>
 8001adc:	2800      	cmp	r0, #0
 8001ade:	d1f2      	bne.n	8001ac6 <__gedf2+0x52>
 8001ae0:	2001      	movs	r0, #1
 8001ae2:	4240      	negs	r0, r0
 8001ae4:	e7ef      	b.n	8001ac6 <__gedf2+0x52>
 8001ae6:	003d      	movs	r5, r7
 8001ae8:	4325      	orrs	r5, r4
 8001aea:	d11d      	bne.n	8001b28 <__gedf2+0xb4>
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d0ee      	beq.n	8001ace <__gedf2+0x5a>
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1e2      	bne.n	8001aba <__gedf2+0x46>
 8001af4:	464c      	mov	r4, r9
 8001af6:	4326      	orrs	r6, r4
 8001af8:	d1df      	bne.n	8001aba <__gedf2+0x46>
 8001afa:	e7e0      	b.n	8001abe <__gedf2+0x4a>
 8001afc:	2000      	movs	r0, #0
 8001afe:	2c00      	cmp	r4, #0
 8001b00:	d0e1      	beq.n	8001ac6 <__gedf2+0x52>
 8001b02:	e7dc      	b.n	8001abe <__gedf2+0x4a>
 8001b04:	429a      	cmp	r2, r3
 8001b06:	dc0a      	bgt.n	8001b1e <__gedf2+0xaa>
 8001b08:	dbe8      	blt.n	8001adc <__gedf2+0x68>
 8001b0a:	454f      	cmp	r7, r9
 8001b0c:	d8d7      	bhi.n	8001abe <__gedf2+0x4a>
 8001b0e:	d00e      	beq.n	8001b2e <__gedf2+0xba>
 8001b10:	2000      	movs	r0, #0
 8001b12:	454f      	cmp	r7, r9
 8001b14:	d2d7      	bcs.n	8001ac6 <__gedf2+0x52>
 8001b16:	2900      	cmp	r1, #0
 8001b18:	d0e2      	beq.n	8001ae0 <__gedf2+0x6c>
 8001b1a:	0008      	movs	r0, r1
 8001b1c:	e7d3      	b.n	8001ac6 <__gedf2+0x52>
 8001b1e:	4243      	negs	r3, r0
 8001b20:	4158      	adcs	r0, r3
 8001b22:	0040      	lsls	r0, r0, #1
 8001b24:	3801      	subs	r0, #1
 8001b26:	e7ce      	b.n	8001ac6 <__gedf2+0x52>
 8001b28:	2002      	movs	r0, #2
 8001b2a:	4240      	negs	r0, r0
 8001b2c:	e7cb      	b.n	8001ac6 <__gedf2+0x52>
 8001b2e:	45c4      	cmp	ip, r8
 8001b30:	d8c5      	bhi.n	8001abe <__gedf2+0x4a>
 8001b32:	2000      	movs	r0, #0
 8001b34:	45c4      	cmp	ip, r8
 8001b36:	d2c6      	bcs.n	8001ac6 <__gedf2+0x52>
 8001b38:	e7ed      	b.n	8001b16 <__gedf2+0xa2>
 8001b3a:	46c0      	nop			; (mov r8, r8)
 8001b3c:	000007ff 	.word	0x000007ff

08001b40 <__ledf2>:
 8001b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b42:	4647      	mov	r7, r8
 8001b44:	46ce      	mov	lr, r9
 8001b46:	0004      	movs	r4, r0
 8001b48:	0018      	movs	r0, r3
 8001b4a:	0016      	movs	r6, r2
 8001b4c:	031b      	lsls	r3, r3, #12
 8001b4e:	0b1b      	lsrs	r3, r3, #12
 8001b50:	4d2c      	ldr	r5, [pc, #176]	; (8001c04 <__ledf2+0xc4>)
 8001b52:	004a      	lsls	r2, r1, #1
 8001b54:	4699      	mov	r9, r3
 8001b56:	b580      	push	{r7, lr}
 8001b58:	0043      	lsls	r3, r0, #1
 8001b5a:	030f      	lsls	r7, r1, #12
 8001b5c:	46a4      	mov	ip, r4
 8001b5e:	46b0      	mov	r8, r6
 8001b60:	0b3f      	lsrs	r7, r7, #12
 8001b62:	0d52      	lsrs	r2, r2, #21
 8001b64:	0fc9      	lsrs	r1, r1, #31
 8001b66:	0d5b      	lsrs	r3, r3, #21
 8001b68:	0fc0      	lsrs	r0, r0, #31
 8001b6a:	42aa      	cmp	r2, r5
 8001b6c:	d00d      	beq.n	8001b8a <__ledf2+0x4a>
 8001b6e:	42ab      	cmp	r3, r5
 8001b70:	d010      	beq.n	8001b94 <__ledf2+0x54>
 8001b72:	2a00      	cmp	r2, #0
 8001b74:	d127      	bne.n	8001bc6 <__ledf2+0x86>
 8001b76:	433c      	orrs	r4, r7
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d111      	bne.n	8001ba0 <__ledf2+0x60>
 8001b7c:	464d      	mov	r5, r9
 8001b7e:	432e      	orrs	r6, r5
 8001b80:	d10e      	bne.n	8001ba0 <__ledf2+0x60>
 8001b82:	2000      	movs	r0, #0
 8001b84:	2c00      	cmp	r4, #0
 8001b86:	d015      	beq.n	8001bb4 <__ledf2+0x74>
 8001b88:	e00e      	b.n	8001ba8 <__ledf2+0x68>
 8001b8a:	003d      	movs	r5, r7
 8001b8c:	4325      	orrs	r5, r4
 8001b8e:	d110      	bne.n	8001bb2 <__ledf2+0x72>
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d118      	bne.n	8001bc6 <__ledf2+0x86>
 8001b94:	464d      	mov	r5, r9
 8001b96:	432e      	orrs	r6, r5
 8001b98:	d10b      	bne.n	8001bb2 <__ledf2+0x72>
 8001b9a:	2a00      	cmp	r2, #0
 8001b9c:	d102      	bne.n	8001ba4 <__ledf2+0x64>
 8001b9e:	433c      	orrs	r4, r7
 8001ba0:	2c00      	cmp	r4, #0
 8001ba2:	d00b      	beq.n	8001bbc <__ledf2+0x7c>
 8001ba4:	4281      	cmp	r1, r0
 8001ba6:	d014      	beq.n	8001bd2 <__ledf2+0x92>
 8001ba8:	2002      	movs	r0, #2
 8001baa:	3901      	subs	r1, #1
 8001bac:	4008      	ands	r0, r1
 8001bae:	3801      	subs	r0, #1
 8001bb0:	e000      	b.n	8001bb4 <__ledf2+0x74>
 8001bb2:	2002      	movs	r0, #2
 8001bb4:	bcc0      	pop	{r6, r7}
 8001bb6:	46b9      	mov	r9, r7
 8001bb8:	46b0      	mov	r8, r6
 8001bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bbc:	2800      	cmp	r0, #0
 8001bbe:	d1f9      	bne.n	8001bb4 <__ledf2+0x74>
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	4240      	negs	r0, r0
 8001bc4:	e7f6      	b.n	8001bb4 <__ledf2+0x74>
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1ec      	bne.n	8001ba4 <__ledf2+0x64>
 8001bca:	464c      	mov	r4, r9
 8001bcc:	4326      	orrs	r6, r4
 8001bce:	d1e9      	bne.n	8001ba4 <__ledf2+0x64>
 8001bd0:	e7ea      	b.n	8001ba8 <__ledf2+0x68>
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	dd04      	ble.n	8001be0 <__ledf2+0xa0>
 8001bd6:	4243      	negs	r3, r0
 8001bd8:	4158      	adcs	r0, r3
 8001bda:	0040      	lsls	r0, r0, #1
 8001bdc:	3801      	subs	r0, #1
 8001bde:	e7e9      	b.n	8001bb4 <__ledf2+0x74>
 8001be0:	429a      	cmp	r2, r3
 8001be2:	dbeb      	blt.n	8001bbc <__ledf2+0x7c>
 8001be4:	454f      	cmp	r7, r9
 8001be6:	d8df      	bhi.n	8001ba8 <__ledf2+0x68>
 8001be8:	d006      	beq.n	8001bf8 <__ledf2+0xb8>
 8001bea:	2000      	movs	r0, #0
 8001bec:	454f      	cmp	r7, r9
 8001bee:	d2e1      	bcs.n	8001bb4 <__ledf2+0x74>
 8001bf0:	2900      	cmp	r1, #0
 8001bf2:	d0e5      	beq.n	8001bc0 <__ledf2+0x80>
 8001bf4:	0008      	movs	r0, r1
 8001bf6:	e7dd      	b.n	8001bb4 <__ledf2+0x74>
 8001bf8:	45c4      	cmp	ip, r8
 8001bfa:	d8d5      	bhi.n	8001ba8 <__ledf2+0x68>
 8001bfc:	2000      	movs	r0, #0
 8001bfe:	45c4      	cmp	ip, r8
 8001c00:	d2d8      	bcs.n	8001bb4 <__ledf2+0x74>
 8001c02:	e7f5      	b.n	8001bf0 <__ledf2+0xb0>
 8001c04:	000007ff 	.word	0x000007ff

08001c08 <__aeabi_dmul>:
 8001c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c0a:	4657      	mov	r7, sl
 8001c0c:	464e      	mov	r6, r9
 8001c0e:	4645      	mov	r5, r8
 8001c10:	46de      	mov	lr, fp
 8001c12:	b5e0      	push	{r5, r6, r7, lr}
 8001c14:	4698      	mov	r8, r3
 8001c16:	030c      	lsls	r4, r1, #12
 8001c18:	004b      	lsls	r3, r1, #1
 8001c1a:	0006      	movs	r6, r0
 8001c1c:	4692      	mov	sl, r2
 8001c1e:	b087      	sub	sp, #28
 8001c20:	0b24      	lsrs	r4, r4, #12
 8001c22:	0d5b      	lsrs	r3, r3, #21
 8001c24:	0fcf      	lsrs	r7, r1, #31
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d100      	bne.n	8001c2c <__aeabi_dmul+0x24>
 8001c2a:	e15c      	b.n	8001ee6 <__aeabi_dmul+0x2de>
 8001c2c:	4ad9      	ldr	r2, [pc, #868]	; (8001f94 <__aeabi_dmul+0x38c>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d100      	bne.n	8001c34 <__aeabi_dmul+0x2c>
 8001c32:	e175      	b.n	8001f20 <__aeabi_dmul+0x318>
 8001c34:	0f42      	lsrs	r2, r0, #29
 8001c36:	00e4      	lsls	r4, r4, #3
 8001c38:	4314      	orrs	r4, r2
 8001c3a:	2280      	movs	r2, #128	; 0x80
 8001c3c:	0412      	lsls	r2, r2, #16
 8001c3e:	4314      	orrs	r4, r2
 8001c40:	4ad5      	ldr	r2, [pc, #852]	; (8001f98 <__aeabi_dmul+0x390>)
 8001c42:	00c5      	lsls	r5, r0, #3
 8001c44:	4694      	mov	ip, r2
 8001c46:	4463      	add	r3, ip
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	4699      	mov	r9, r3
 8001c4e:	469b      	mov	fp, r3
 8001c50:	4643      	mov	r3, r8
 8001c52:	4642      	mov	r2, r8
 8001c54:	031e      	lsls	r6, r3, #12
 8001c56:	0fd2      	lsrs	r2, r2, #31
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	4650      	mov	r0, sl
 8001c5c:	4690      	mov	r8, r2
 8001c5e:	0b36      	lsrs	r6, r6, #12
 8001c60:	0d5b      	lsrs	r3, r3, #21
 8001c62:	d100      	bne.n	8001c66 <__aeabi_dmul+0x5e>
 8001c64:	e120      	b.n	8001ea8 <__aeabi_dmul+0x2a0>
 8001c66:	4acb      	ldr	r2, [pc, #812]	; (8001f94 <__aeabi_dmul+0x38c>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d100      	bne.n	8001c6e <__aeabi_dmul+0x66>
 8001c6c:	e162      	b.n	8001f34 <__aeabi_dmul+0x32c>
 8001c6e:	49ca      	ldr	r1, [pc, #808]	; (8001f98 <__aeabi_dmul+0x390>)
 8001c70:	0f42      	lsrs	r2, r0, #29
 8001c72:	468c      	mov	ip, r1
 8001c74:	9900      	ldr	r1, [sp, #0]
 8001c76:	4463      	add	r3, ip
 8001c78:	00f6      	lsls	r6, r6, #3
 8001c7a:	468c      	mov	ip, r1
 8001c7c:	4316      	orrs	r6, r2
 8001c7e:	2280      	movs	r2, #128	; 0x80
 8001c80:	449c      	add	ip, r3
 8001c82:	0412      	lsls	r2, r2, #16
 8001c84:	4663      	mov	r3, ip
 8001c86:	4316      	orrs	r6, r2
 8001c88:	00c2      	lsls	r2, r0, #3
 8001c8a:	2000      	movs	r0, #0
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	9900      	ldr	r1, [sp, #0]
 8001c90:	4643      	mov	r3, r8
 8001c92:	3101      	adds	r1, #1
 8001c94:	468c      	mov	ip, r1
 8001c96:	4649      	mov	r1, r9
 8001c98:	407b      	eors	r3, r7
 8001c9a:	9301      	str	r3, [sp, #4]
 8001c9c:	290f      	cmp	r1, #15
 8001c9e:	d826      	bhi.n	8001cee <__aeabi_dmul+0xe6>
 8001ca0:	4bbe      	ldr	r3, [pc, #760]	; (8001f9c <__aeabi_dmul+0x394>)
 8001ca2:	0089      	lsls	r1, r1, #2
 8001ca4:	5859      	ldr	r1, [r3, r1]
 8001ca6:	468f      	mov	pc, r1
 8001ca8:	4643      	mov	r3, r8
 8001caa:	9301      	str	r3, [sp, #4]
 8001cac:	0034      	movs	r4, r6
 8001cae:	0015      	movs	r5, r2
 8001cb0:	4683      	mov	fp, r0
 8001cb2:	465b      	mov	r3, fp
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d016      	beq.n	8001ce6 <__aeabi_dmul+0xde>
 8001cb8:	2b03      	cmp	r3, #3
 8001cba:	d100      	bne.n	8001cbe <__aeabi_dmul+0xb6>
 8001cbc:	e203      	b.n	80020c6 <__aeabi_dmul+0x4be>
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d000      	beq.n	8001cc4 <__aeabi_dmul+0xbc>
 8001cc2:	e0cd      	b.n	8001e60 <__aeabi_dmul+0x258>
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	2400      	movs	r4, #0
 8001cc8:	2500      	movs	r5, #0
 8001cca:	9b01      	ldr	r3, [sp, #4]
 8001ccc:	0512      	lsls	r2, r2, #20
 8001cce:	4322      	orrs	r2, r4
 8001cd0:	07db      	lsls	r3, r3, #31
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	0028      	movs	r0, r5
 8001cd6:	0011      	movs	r1, r2
 8001cd8:	b007      	add	sp, #28
 8001cda:	bcf0      	pop	{r4, r5, r6, r7}
 8001cdc:	46bb      	mov	fp, r7
 8001cde:	46b2      	mov	sl, r6
 8001ce0:	46a9      	mov	r9, r5
 8001ce2:	46a0      	mov	r8, r4
 8001ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ce6:	2400      	movs	r4, #0
 8001ce8:	2500      	movs	r5, #0
 8001cea:	4aaa      	ldr	r2, [pc, #680]	; (8001f94 <__aeabi_dmul+0x38c>)
 8001cec:	e7ed      	b.n	8001cca <__aeabi_dmul+0xc2>
 8001cee:	0c28      	lsrs	r0, r5, #16
 8001cf0:	042d      	lsls	r5, r5, #16
 8001cf2:	0c2d      	lsrs	r5, r5, #16
 8001cf4:	002b      	movs	r3, r5
 8001cf6:	0c11      	lsrs	r1, r2, #16
 8001cf8:	0412      	lsls	r2, r2, #16
 8001cfa:	0c12      	lsrs	r2, r2, #16
 8001cfc:	4353      	muls	r3, r2
 8001cfe:	4698      	mov	r8, r3
 8001d00:	0013      	movs	r3, r2
 8001d02:	002f      	movs	r7, r5
 8001d04:	4343      	muls	r3, r0
 8001d06:	4699      	mov	r9, r3
 8001d08:	434f      	muls	r7, r1
 8001d0a:	444f      	add	r7, r9
 8001d0c:	46bb      	mov	fp, r7
 8001d0e:	4647      	mov	r7, r8
 8001d10:	000b      	movs	r3, r1
 8001d12:	0c3f      	lsrs	r7, r7, #16
 8001d14:	46ba      	mov	sl, r7
 8001d16:	4343      	muls	r3, r0
 8001d18:	44da      	add	sl, fp
 8001d1a:	9302      	str	r3, [sp, #8]
 8001d1c:	45d1      	cmp	r9, sl
 8001d1e:	d904      	bls.n	8001d2a <__aeabi_dmul+0x122>
 8001d20:	2780      	movs	r7, #128	; 0x80
 8001d22:	027f      	lsls	r7, r7, #9
 8001d24:	46b9      	mov	r9, r7
 8001d26:	444b      	add	r3, r9
 8001d28:	9302      	str	r3, [sp, #8]
 8001d2a:	4653      	mov	r3, sl
 8001d2c:	0c1b      	lsrs	r3, r3, #16
 8001d2e:	469b      	mov	fp, r3
 8001d30:	4653      	mov	r3, sl
 8001d32:	041f      	lsls	r7, r3, #16
 8001d34:	4643      	mov	r3, r8
 8001d36:	041b      	lsls	r3, r3, #16
 8001d38:	0c1b      	lsrs	r3, r3, #16
 8001d3a:	4698      	mov	r8, r3
 8001d3c:	003b      	movs	r3, r7
 8001d3e:	4443      	add	r3, r8
 8001d40:	9304      	str	r3, [sp, #16]
 8001d42:	0c33      	lsrs	r3, r6, #16
 8001d44:	0436      	lsls	r6, r6, #16
 8001d46:	0c36      	lsrs	r6, r6, #16
 8001d48:	4698      	mov	r8, r3
 8001d4a:	0033      	movs	r3, r6
 8001d4c:	4343      	muls	r3, r0
 8001d4e:	4699      	mov	r9, r3
 8001d50:	4643      	mov	r3, r8
 8001d52:	4343      	muls	r3, r0
 8001d54:	002f      	movs	r7, r5
 8001d56:	469a      	mov	sl, r3
 8001d58:	4643      	mov	r3, r8
 8001d5a:	4377      	muls	r7, r6
 8001d5c:	435d      	muls	r5, r3
 8001d5e:	0c38      	lsrs	r0, r7, #16
 8001d60:	444d      	add	r5, r9
 8001d62:	1945      	adds	r5, r0, r5
 8001d64:	45a9      	cmp	r9, r5
 8001d66:	d903      	bls.n	8001d70 <__aeabi_dmul+0x168>
 8001d68:	2380      	movs	r3, #128	; 0x80
 8001d6a:	025b      	lsls	r3, r3, #9
 8001d6c:	4699      	mov	r9, r3
 8001d6e:	44ca      	add	sl, r9
 8001d70:	043f      	lsls	r7, r7, #16
 8001d72:	0c28      	lsrs	r0, r5, #16
 8001d74:	0c3f      	lsrs	r7, r7, #16
 8001d76:	042d      	lsls	r5, r5, #16
 8001d78:	19ed      	adds	r5, r5, r7
 8001d7a:	0c27      	lsrs	r7, r4, #16
 8001d7c:	0424      	lsls	r4, r4, #16
 8001d7e:	0c24      	lsrs	r4, r4, #16
 8001d80:	0003      	movs	r3, r0
 8001d82:	0020      	movs	r0, r4
 8001d84:	4350      	muls	r0, r2
 8001d86:	437a      	muls	r2, r7
 8001d88:	4691      	mov	r9, r2
 8001d8a:	003a      	movs	r2, r7
 8001d8c:	4453      	add	r3, sl
 8001d8e:	9305      	str	r3, [sp, #20]
 8001d90:	0c03      	lsrs	r3, r0, #16
 8001d92:	469a      	mov	sl, r3
 8001d94:	434a      	muls	r2, r1
 8001d96:	4361      	muls	r1, r4
 8001d98:	4449      	add	r1, r9
 8001d9a:	4451      	add	r1, sl
 8001d9c:	44ab      	add	fp, r5
 8001d9e:	4589      	cmp	r9, r1
 8001da0:	d903      	bls.n	8001daa <__aeabi_dmul+0x1a2>
 8001da2:	2380      	movs	r3, #128	; 0x80
 8001da4:	025b      	lsls	r3, r3, #9
 8001da6:	4699      	mov	r9, r3
 8001da8:	444a      	add	r2, r9
 8001daa:	0400      	lsls	r0, r0, #16
 8001dac:	0c0b      	lsrs	r3, r1, #16
 8001dae:	0c00      	lsrs	r0, r0, #16
 8001db0:	0409      	lsls	r1, r1, #16
 8001db2:	1809      	adds	r1, r1, r0
 8001db4:	0020      	movs	r0, r4
 8001db6:	4699      	mov	r9, r3
 8001db8:	4643      	mov	r3, r8
 8001dba:	4370      	muls	r0, r6
 8001dbc:	435c      	muls	r4, r3
 8001dbe:	437e      	muls	r6, r7
 8001dc0:	435f      	muls	r7, r3
 8001dc2:	0c03      	lsrs	r3, r0, #16
 8001dc4:	4698      	mov	r8, r3
 8001dc6:	19a4      	adds	r4, r4, r6
 8001dc8:	4444      	add	r4, r8
 8001dca:	444a      	add	r2, r9
 8001dcc:	9703      	str	r7, [sp, #12]
 8001dce:	42a6      	cmp	r6, r4
 8001dd0:	d904      	bls.n	8001ddc <__aeabi_dmul+0x1d4>
 8001dd2:	2380      	movs	r3, #128	; 0x80
 8001dd4:	025b      	lsls	r3, r3, #9
 8001dd6:	4698      	mov	r8, r3
 8001dd8:	4447      	add	r7, r8
 8001dda:	9703      	str	r7, [sp, #12]
 8001ddc:	0423      	lsls	r3, r4, #16
 8001dde:	9e02      	ldr	r6, [sp, #8]
 8001de0:	469a      	mov	sl, r3
 8001de2:	9b05      	ldr	r3, [sp, #20]
 8001de4:	445e      	add	r6, fp
 8001de6:	4698      	mov	r8, r3
 8001de8:	42ae      	cmp	r6, r5
 8001dea:	41ad      	sbcs	r5, r5
 8001dec:	1876      	adds	r6, r6, r1
 8001dee:	428e      	cmp	r6, r1
 8001df0:	4189      	sbcs	r1, r1
 8001df2:	0400      	lsls	r0, r0, #16
 8001df4:	0c00      	lsrs	r0, r0, #16
 8001df6:	4450      	add	r0, sl
 8001df8:	4440      	add	r0, r8
 8001dfa:	426d      	negs	r5, r5
 8001dfc:	1947      	adds	r7, r0, r5
 8001dfe:	46b8      	mov	r8, r7
 8001e00:	4693      	mov	fp, r2
 8001e02:	4249      	negs	r1, r1
 8001e04:	4689      	mov	r9, r1
 8001e06:	44c3      	add	fp, r8
 8001e08:	44d9      	add	r9, fp
 8001e0a:	4298      	cmp	r0, r3
 8001e0c:	4180      	sbcs	r0, r0
 8001e0e:	45a8      	cmp	r8, r5
 8001e10:	41ad      	sbcs	r5, r5
 8001e12:	4593      	cmp	fp, r2
 8001e14:	4192      	sbcs	r2, r2
 8001e16:	4589      	cmp	r9, r1
 8001e18:	4189      	sbcs	r1, r1
 8001e1a:	426d      	negs	r5, r5
 8001e1c:	4240      	negs	r0, r0
 8001e1e:	4328      	orrs	r0, r5
 8001e20:	0c24      	lsrs	r4, r4, #16
 8001e22:	4252      	negs	r2, r2
 8001e24:	4249      	negs	r1, r1
 8001e26:	430a      	orrs	r2, r1
 8001e28:	9b03      	ldr	r3, [sp, #12]
 8001e2a:	1900      	adds	r0, r0, r4
 8001e2c:	1880      	adds	r0, r0, r2
 8001e2e:	18c7      	adds	r7, r0, r3
 8001e30:	464b      	mov	r3, r9
 8001e32:	0ddc      	lsrs	r4, r3, #23
 8001e34:	9b04      	ldr	r3, [sp, #16]
 8001e36:	0275      	lsls	r5, r6, #9
 8001e38:	431d      	orrs	r5, r3
 8001e3a:	1e6a      	subs	r2, r5, #1
 8001e3c:	4195      	sbcs	r5, r2
 8001e3e:	464b      	mov	r3, r9
 8001e40:	0df6      	lsrs	r6, r6, #23
 8001e42:	027f      	lsls	r7, r7, #9
 8001e44:	4335      	orrs	r5, r6
 8001e46:	025a      	lsls	r2, r3, #9
 8001e48:	433c      	orrs	r4, r7
 8001e4a:	4315      	orrs	r5, r2
 8001e4c:	01fb      	lsls	r3, r7, #7
 8001e4e:	d400      	bmi.n	8001e52 <__aeabi_dmul+0x24a>
 8001e50:	e11c      	b.n	800208c <__aeabi_dmul+0x484>
 8001e52:	2101      	movs	r1, #1
 8001e54:	086a      	lsrs	r2, r5, #1
 8001e56:	400d      	ands	r5, r1
 8001e58:	4315      	orrs	r5, r2
 8001e5a:	07e2      	lsls	r2, r4, #31
 8001e5c:	4315      	orrs	r5, r2
 8001e5e:	0864      	lsrs	r4, r4, #1
 8001e60:	494f      	ldr	r1, [pc, #316]	; (8001fa0 <__aeabi_dmul+0x398>)
 8001e62:	4461      	add	r1, ip
 8001e64:	2900      	cmp	r1, #0
 8001e66:	dc00      	bgt.n	8001e6a <__aeabi_dmul+0x262>
 8001e68:	e0b0      	b.n	8001fcc <__aeabi_dmul+0x3c4>
 8001e6a:	076b      	lsls	r3, r5, #29
 8001e6c:	d009      	beq.n	8001e82 <__aeabi_dmul+0x27a>
 8001e6e:	220f      	movs	r2, #15
 8001e70:	402a      	ands	r2, r5
 8001e72:	2a04      	cmp	r2, #4
 8001e74:	d005      	beq.n	8001e82 <__aeabi_dmul+0x27a>
 8001e76:	1d2a      	adds	r2, r5, #4
 8001e78:	42aa      	cmp	r2, r5
 8001e7a:	41ad      	sbcs	r5, r5
 8001e7c:	426d      	negs	r5, r5
 8001e7e:	1964      	adds	r4, r4, r5
 8001e80:	0015      	movs	r5, r2
 8001e82:	01e3      	lsls	r3, r4, #7
 8001e84:	d504      	bpl.n	8001e90 <__aeabi_dmul+0x288>
 8001e86:	2180      	movs	r1, #128	; 0x80
 8001e88:	4a46      	ldr	r2, [pc, #280]	; (8001fa4 <__aeabi_dmul+0x39c>)
 8001e8a:	00c9      	lsls	r1, r1, #3
 8001e8c:	4014      	ands	r4, r2
 8001e8e:	4461      	add	r1, ip
 8001e90:	4a45      	ldr	r2, [pc, #276]	; (8001fa8 <__aeabi_dmul+0x3a0>)
 8001e92:	4291      	cmp	r1, r2
 8001e94:	dd00      	ble.n	8001e98 <__aeabi_dmul+0x290>
 8001e96:	e726      	b.n	8001ce6 <__aeabi_dmul+0xde>
 8001e98:	0762      	lsls	r2, r4, #29
 8001e9a:	08ed      	lsrs	r5, r5, #3
 8001e9c:	0264      	lsls	r4, r4, #9
 8001e9e:	0549      	lsls	r1, r1, #21
 8001ea0:	4315      	orrs	r5, r2
 8001ea2:	0b24      	lsrs	r4, r4, #12
 8001ea4:	0d4a      	lsrs	r2, r1, #21
 8001ea6:	e710      	b.n	8001cca <__aeabi_dmul+0xc2>
 8001ea8:	4652      	mov	r2, sl
 8001eaa:	4332      	orrs	r2, r6
 8001eac:	d100      	bne.n	8001eb0 <__aeabi_dmul+0x2a8>
 8001eae:	e07f      	b.n	8001fb0 <__aeabi_dmul+0x3a8>
 8001eb0:	2e00      	cmp	r6, #0
 8001eb2:	d100      	bne.n	8001eb6 <__aeabi_dmul+0x2ae>
 8001eb4:	e0dc      	b.n	8002070 <__aeabi_dmul+0x468>
 8001eb6:	0030      	movs	r0, r6
 8001eb8:	f000 fe58 	bl	8002b6c <__clzsi2>
 8001ebc:	0002      	movs	r2, r0
 8001ebe:	3a0b      	subs	r2, #11
 8001ec0:	231d      	movs	r3, #29
 8001ec2:	0001      	movs	r1, r0
 8001ec4:	1a9b      	subs	r3, r3, r2
 8001ec6:	4652      	mov	r2, sl
 8001ec8:	3908      	subs	r1, #8
 8001eca:	40da      	lsrs	r2, r3
 8001ecc:	408e      	lsls	r6, r1
 8001ece:	4316      	orrs	r6, r2
 8001ed0:	4652      	mov	r2, sl
 8001ed2:	408a      	lsls	r2, r1
 8001ed4:	9b00      	ldr	r3, [sp, #0]
 8001ed6:	4935      	ldr	r1, [pc, #212]	; (8001fac <__aeabi_dmul+0x3a4>)
 8001ed8:	1a18      	subs	r0, r3, r0
 8001eda:	0003      	movs	r3, r0
 8001edc:	468c      	mov	ip, r1
 8001ede:	4463      	add	r3, ip
 8001ee0:	2000      	movs	r0, #0
 8001ee2:	9300      	str	r3, [sp, #0]
 8001ee4:	e6d3      	b.n	8001c8e <__aeabi_dmul+0x86>
 8001ee6:	0025      	movs	r5, r4
 8001ee8:	4305      	orrs	r5, r0
 8001eea:	d04a      	beq.n	8001f82 <__aeabi_dmul+0x37a>
 8001eec:	2c00      	cmp	r4, #0
 8001eee:	d100      	bne.n	8001ef2 <__aeabi_dmul+0x2ea>
 8001ef0:	e0b0      	b.n	8002054 <__aeabi_dmul+0x44c>
 8001ef2:	0020      	movs	r0, r4
 8001ef4:	f000 fe3a 	bl	8002b6c <__clzsi2>
 8001ef8:	0001      	movs	r1, r0
 8001efa:	0002      	movs	r2, r0
 8001efc:	390b      	subs	r1, #11
 8001efe:	231d      	movs	r3, #29
 8001f00:	0010      	movs	r0, r2
 8001f02:	1a5b      	subs	r3, r3, r1
 8001f04:	0031      	movs	r1, r6
 8001f06:	0035      	movs	r5, r6
 8001f08:	3808      	subs	r0, #8
 8001f0a:	4084      	lsls	r4, r0
 8001f0c:	40d9      	lsrs	r1, r3
 8001f0e:	4085      	lsls	r5, r0
 8001f10:	430c      	orrs	r4, r1
 8001f12:	4826      	ldr	r0, [pc, #152]	; (8001fac <__aeabi_dmul+0x3a4>)
 8001f14:	1a83      	subs	r3, r0, r2
 8001f16:	9300      	str	r3, [sp, #0]
 8001f18:	2300      	movs	r3, #0
 8001f1a:	4699      	mov	r9, r3
 8001f1c:	469b      	mov	fp, r3
 8001f1e:	e697      	b.n	8001c50 <__aeabi_dmul+0x48>
 8001f20:	0005      	movs	r5, r0
 8001f22:	4325      	orrs	r5, r4
 8001f24:	d126      	bne.n	8001f74 <__aeabi_dmul+0x36c>
 8001f26:	2208      	movs	r2, #8
 8001f28:	9300      	str	r3, [sp, #0]
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	2400      	movs	r4, #0
 8001f2e:	4691      	mov	r9, r2
 8001f30:	469b      	mov	fp, r3
 8001f32:	e68d      	b.n	8001c50 <__aeabi_dmul+0x48>
 8001f34:	4652      	mov	r2, sl
 8001f36:	9b00      	ldr	r3, [sp, #0]
 8001f38:	4332      	orrs	r2, r6
 8001f3a:	d110      	bne.n	8001f5e <__aeabi_dmul+0x356>
 8001f3c:	4915      	ldr	r1, [pc, #84]	; (8001f94 <__aeabi_dmul+0x38c>)
 8001f3e:	2600      	movs	r6, #0
 8001f40:	468c      	mov	ip, r1
 8001f42:	4463      	add	r3, ip
 8001f44:	4649      	mov	r1, r9
 8001f46:	9300      	str	r3, [sp, #0]
 8001f48:	2302      	movs	r3, #2
 8001f4a:	4319      	orrs	r1, r3
 8001f4c:	4689      	mov	r9, r1
 8001f4e:	2002      	movs	r0, #2
 8001f50:	e69d      	b.n	8001c8e <__aeabi_dmul+0x86>
 8001f52:	465b      	mov	r3, fp
 8001f54:	9701      	str	r7, [sp, #4]
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d000      	beq.n	8001f5c <__aeabi_dmul+0x354>
 8001f5a:	e6ad      	b.n	8001cb8 <__aeabi_dmul+0xb0>
 8001f5c:	e6c3      	b.n	8001ce6 <__aeabi_dmul+0xde>
 8001f5e:	4a0d      	ldr	r2, [pc, #52]	; (8001f94 <__aeabi_dmul+0x38c>)
 8001f60:	2003      	movs	r0, #3
 8001f62:	4694      	mov	ip, r2
 8001f64:	4463      	add	r3, ip
 8001f66:	464a      	mov	r2, r9
 8001f68:	9300      	str	r3, [sp, #0]
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	4691      	mov	r9, r2
 8001f70:	4652      	mov	r2, sl
 8001f72:	e68c      	b.n	8001c8e <__aeabi_dmul+0x86>
 8001f74:	220c      	movs	r2, #12
 8001f76:	9300      	str	r3, [sp, #0]
 8001f78:	2303      	movs	r3, #3
 8001f7a:	0005      	movs	r5, r0
 8001f7c:	4691      	mov	r9, r2
 8001f7e:	469b      	mov	fp, r3
 8001f80:	e666      	b.n	8001c50 <__aeabi_dmul+0x48>
 8001f82:	2304      	movs	r3, #4
 8001f84:	4699      	mov	r9, r3
 8001f86:	2300      	movs	r3, #0
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	2400      	movs	r4, #0
 8001f8e:	469b      	mov	fp, r3
 8001f90:	e65e      	b.n	8001c50 <__aeabi_dmul+0x48>
 8001f92:	46c0      	nop			; (mov r8, r8)
 8001f94:	000007ff 	.word	0x000007ff
 8001f98:	fffffc01 	.word	0xfffffc01
 8001f9c:	08012fc4 	.word	0x08012fc4
 8001fa0:	000003ff 	.word	0x000003ff
 8001fa4:	feffffff 	.word	0xfeffffff
 8001fa8:	000007fe 	.word	0x000007fe
 8001fac:	fffffc0d 	.word	0xfffffc0d
 8001fb0:	4649      	mov	r1, r9
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	4319      	orrs	r1, r3
 8001fb6:	4689      	mov	r9, r1
 8001fb8:	2600      	movs	r6, #0
 8001fba:	2001      	movs	r0, #1
 8001fbc:	e667      	b.n	8001c8e <__aeabi_dmul+0x86>
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	2480      	movs	r4, #128	; 0x80
 8001fc2:	2500      	movs	r5, #0
 8001fc4:	4a43      	ldr	r2, [pc, #268]	; (80020d4 <__aeabi_dmul+0x4cc>)
 8001fc6:	9301      	str	r3, [sp, #4]
 8001fc8:	0324      	lsls	r4, r4, #12
 8001fca:	e67e      	b.n	8001cca <__aeabi_dmul+0xc2>
 8001fcc:	2001      	movs	r0, #1
 8001fce:	1a40      	subs	r0, r0, r1
 8001fd0:	2838      	cmp	r0, #56	; 0x38
 8001fd2:	dd00      	ble.n	8001fd6 <__aeabi_dmul+0x3ce>
 8001fd4:	e676      	b.n	8001cc4 <__aeabi_dmul+0xbc>
 8001fd6:	281f      	cmp	r0, #31
 8001fd8:	dd5b      	ble.n	8002092 <__aeabi_dmul+0x48a>
 8001fda:	221f      	movs	r2, #31
 8001fdc:	0023      	movs	r3, r4
 8001fde:	4252      	negs	r2, r2
 8001fe0:	1a51      	subs	r1, r2, r1
 8001fe2:	40cb      	lsrs	r3, r1
 8001fe4:	0019      	movs	r1, r3
 8001fe6:	2820      	cmp	r0, #32
 8001fe8:	d003      	beq.n	8001ff2 <__aeabi_dmul+0x3ea>
 8001fea:	4a3b      	ldr	r2, [pc, #236]	; (80020d8 <__aeabi_dmul+0x4d0>)
 8001fec:	4462      	add	r2, ip
 8001fee:	4094      	lsls	r4, r2
 8001ff0:	4325      	orrs	r5, r4
 8001ff2:	1e6a      	subs	r2, r5, #1
 8001ff4:	4195      	sbcs	r5, r2
 8001ff6:	002a      	movs	r2, r5
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	2107      	movs	r1, #7
 8001ffc:	000d      	movs	r5, r1
 8001ffe:	2400      	movs	r4, #0
 8002000:	4015      	ands	r5, r2
 8002002:	4211      	tst	r1, r2
 8002004:	d05b      	beq.n	80020be <__aeabi_dmul+0x4b6>
 8002006:	210f      	movs	r1, #15
 8002008:	2400      	movs	r4, #0
 800200a:	4011      	ands	r1, r2
 800200c:	2904      	cmp	r1, #4
 800200e:	d053      	beq.n	80020b8 <__aeabi_dmul+0x4b0>
 8002010:	1d11      	adds	r1, r2, #4
 8002012:	4291      	cmp	r1, r2
 8002014:	4192      	sbcs	r2, r2
 8002016:	4252      	negs	r2, r2
 8002018:	18a4      	adds	r4, r4, r2
 800201a:	000a      	movs	r2, r1
 800201c:	0223      	lsls	r3, r4, #8
 800201e:	d54b      	bpl.n	80020b8 <__aeabi_dmul+0x4b0>
 8002020:	2201      	movs	r2, #1
 8002022:	2400      	movs	r4, #0
 8002024:	2500      	movs	r5, #0
 8002026:	e650      	b.n	8001cca <__aeabi_dmul+0xc2>
 8002028:	2380      	movs	r3, #128	; 0x80
 800202a:	031b      	lsls	r3, r3, #12
 800202c:	421c      	tst	r4, r3
 800202e:	d009      	beq.n	8002044 <__aeabi_dmul+0x43c>
 8002030:	421e      	tst	r6, r3
 8002032:	d107      	bne.n	8002044 <__aeabi_dmul+0x43c>
 8002034:	4333      	orrs	r3, r6
 8002036:	031c      	lsls	r4, r3, #12
 8002038:	4643      	mov	r3, r8
 800203a:	0015      	movs	r5, r2
 800203c:	0b24      	lsrs	r4, r4, #12
 800203e:	4a25      	ldr	r2, [pc, #148]	; (80020d4 <__aeabi_dmul+0x4cc>)
 8002040:	9301      	str	r3, [sp, #4]
 8002042:	e642      	b.n	8001cca <__aeabi_dmul+0xc2>
 8002044:	2280      	movs	r2, #128	; 0x80
 8002046:	0312      	lsls	r2, r2, #12
 8002048:	4314      	orrs	r4, r2
 800204a:	0324      	lsls	r4, r4, #12
 800204c:	4a21      	ldr	r2, [pc, #132]	; (80020d4 <__aeabi_dmul+0x4cc>)
 800204e:	0b24      	lsrs	r4, r4, #12
 8002050:	9701      	str	r7, [sp, #4]
 8002052:	e63a      	b.n	8001cca <__aeabi_dmul+0xc2>
 8002054:	f000 fd8a 	bl	8002b6c <__clzsi2>
 8002058:	0001      	movs	r1, r0
 800205a:	0002      	movs	r2, r0
 800205c:	3115      	adds	r1, #21
 800205e:	3220      	adds	r2, #32
 8002060:	291c      	cmp	r1, #28
 8002062:	dc00      	bgt.n	8002066 <__aeabi_dmul+0x45e>
 8002064:	e74b      	b.n	8001efe <__aeabi_dmul+0x2f6>
 8002066:	0034      	movs	r4, r6
 8002068:	3808      	subs	r0, #8
 800206a:	2500      	movs	r5, #0
 800206c:	4084      	lsls	r4, r0
 800206e:	e750      	b.n	8001f12 <__aeabi_dmul+0x30a>
 8002070:	f000 fd7c 	bl	8002b6c <__clzsi2>
 8002074:	0003      	movs	r3, r0
 8002076:	001a      	movs	r2, r3
 8002078:	3215      	adds	r2, #21
 800207a:	3020      	adds	r0, #32
 800207c:	2a1c      	cmp	r2, #28
 800207e:	dc00      	bgt.n	8002082 <__aeabi_dmul+0x47a>
 8002080:	e71e      	b.n	8001ec0 <__aeabi_dmul+0x2b8>
 8002082:	4656      	mov	r6, sl
 8002084:	3b08      	subs	r3, #8
 8002086:	2200      	movs	r2, #0
 8002088:	409e      	lsls	r6, r3
 800208a:	e723      	b.n	8001ed4 <__aeabi_dmul+0x2cc>
 800208c:	9b00      	ldr	r3, [sp, #0]
 800208e:	469c      	mov	ip, r3
 8002090:	e6e6      	b.n	8001e60 <__aeabi_dmul+0x258>
 8002092:	4912      	ldr	r1, [pc, #72]	; (80020dc <__aeabi_dmul+0x4d4>)
 8002094:	0022      	movs	r2, r4
 8002096:	4461      	add	r1, ip
 8002098:	002e      	movs	r6, r5
 800209a:	408d      	lsls	r5, r1
 800209c:	408a      	lsls	r2, r1
 800209e:	40c6      	lsrs	r6, r0
 80020a0:	1e69      	subs	r1, r5, #1
 80020a2:	418d      	sbcs	r5, r1
 80020a4:	4332      	orrs	r2, r6
 80020a6:	432a      	orrs	r2, r5
 80020a8:	40c4      	lsrs	r4, r0
 80020aa:	0753      	lsls	r3, r2, #29
 80020ac:	d0b6      	beq.n	800201c <__aeabi_dmul+0x414>
 80020ae:	210f      	movs	r1, #15
 80020b0:	4011      	ands	r1, r2
 80020b2:	2904      	cmp	r1, #4
 80020b4:	d1ac      	bne.n	8002010 <__aeabi_dmul+0x408>
 80020b6:	e7b1      	b.n	800201c <__aeabi_dmul+0x414>
 80020b8:	0765      	lsls	r5, r4, #29
 80020ba:	0264      	lsls	r4, r4, #9
 80020bc:	0b24      	lsrs	r4, r4, #12
 80020be:	08d2      	lsrs	r2, r2, #3
 80020c0:	4315      	orrs	r5, r2
 80020c2:	2200      	movs	r2, #0
 80020c4:	e601      	b.n	8001cca <__aeabi_dmul+0xc2>
 80020c6:	2280      	movs	r2, #128	; 0x80
 80020c8:	0312      	lsls	r2, r2, #12
 80020ca:	4314      	orrs	r4, r2
 80020cc:	0324      	lsls	r4, r4, #12
 80020ce:	4a01      	ldr	r2, [pc, #4]	; (80020d4 <__aeabi_dmul+0x4cc>)
 80020d0:	0b24      	lsrs	r4, r4, #12
 80020d2:	e5fa      	b.n	8001cca <__aeabi_dmul+0xc2>
 80020d4:	000007ff 	.word	0x000007ff
 80020d8:	0000043e 	.word	0x0000043e
 80020dc:	0000041e 	.word	0x0000041e

080020e0 <__aeabi_dsub>:
 80020e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020e2:	4657      	mov	r7, sl
 80020e4:	464e      	mov	r6, r9
 80020e6:	4645      	mov	r5, r8
 80020e8:	46de      	mov	lr, fp
 80020ea:	b5e0      	push	{r5, r6, r7, lr}
 80020ec:	001e      	movs	r6, r3
 80020ee:	0017      	movs	r7, r2
 80020f0:	004a      	lsls	r2, r1, #1
 80020f2:	030b      	lsls	r3, r1, #12
 80020f4:	0d52      	lsrs	r2, r2, #21
 80020f6:	0a5b      	lsrs	r3, r3, #9
 80020f8:	4690      	mov	r8, r2
 80020fa:	0f42      	lsrs	r2, r0, #29
 80020fc:	431a      	orrs	r2, r3
 80020fe:	0fcd      	lsrs	r5, r1, #31
 8002100:	4ccd      	ldr	r4, [pc, #820]	; (8002438 <__aeabi_dsub+0x358>)
 8002102:	0331      	lsls	r1, r6, #12
 8002104:	00c3      	lsls	r3, r0, #3
 8002106:	4694      	mov	ip, r2
 8002108:	0070      	lsls	r0, r6, #1
 800210a:	0f7a      	lsrs	r2, r7, #29
 800210c:	0a49      	lsrs	r1, r1, #9
 800210e:	00ff      	lsls	r7, r7, #3
 8002110:	469a      	mov	sl, r3
 8002112:	46b9      	mov	r9, r7
 8002114:	0d40      	lsrs	r0, r0, #21
 8002116:	0ff6      	lsrs	r6, r6, #31
 8002118:	4311      	orrs	r1, r2
 800211a:	42a0      	cmp	r0, r4
 800211c:	d100      	bne.n	8002120 <__aeabi_dsub+0x40>
 800211e:	e0b1      	b.n	8002284 <__aeabi_dsub+0x1a4>
 8002120:	2201      	movs	r2, #1
 8002122:	4056      	eors	r6, r2
 8002124:	46b3      	mov	fp, r6
 8002126:	42b5      	cmp	r5, r6
 8002128:	d100      	bne.n	800212c <__aeabi_dsub+0x4c>
 800212a:	e088      	b.n	800223e <__aeabi_dsub+0x15e>
 800212c:	4642      	mov	r2, r8
 800212e:	1a12      	subs	r2, r2, r0
 8002130:	2a00      	cmp	r2, #0
 8002132:	dc00      	bgt.n	8002136 <__aeabi_dsub+0x56>
 8002134:	e0ae      	b.n	8002294 <__aeabi_dsub+0x1b4>
 8002136:	2800      	cmp	r0, #0
 8002138:	d100      	bne.n	800213c <__aeabi_dsub+0x5c>
 800213a:	e0c1      	b.n	80022c0 <__aeabi_dsub+0x1e0>
 800213c:	48be      	ldr	r0, [pc, #760]	; (8002438 <__aeabi_dsub+0x358>)
 800213e:	4580      	cmp	r8, r0
 8002140:	d100      	bne.n	8002144 <__aeabi_dsub+0x64>
 8002142:	e151      	b.n	80023e8 <__aeabi_dsub+0x308>
 8002144:	2080      	movs	r0, #128	; 0x80
 8002146:	0400      	lsls	r0, r0, #16
 8002148:	4301      	orrs	r1, r0
 800214a:	2a38      	cmp	r2, #56	; 0x38
 800214c:	dd00      	ble.n	8002150 <__aeabi_dsub+0x70>
 800214e:	e17b      	b.n	8002448 <__aeabi_dsub+0x368>
 8002150:	2a1f      	cmp	r2, #31
 8002152:	dd00      	ble.n	8002156 <__aeabi_dsub+0x76>
 8002154:	e1ee      	b.n	8002534 <__aeabi_dsub+0x454>
 8002156:	2020      	movs	r0, #32
 8002158:	003e      	movs	r6, r7
 800215a:	1a80      	subs	r0, r0, r2
 800215c:	000c      	movs	r4, r1
 800215e:	40d6      	lsrs	r6, r2
 8002160:	40d1      	lsrs	r1, r2
 8002162:	4087      	lsls	r7, r0
 8002164:	4662      	mov	r2, ip
 8002166:	4084      	lsls	r4, r0
 8002168:	1a52      	subs	r2, r2, r1
 800216a:	1e78      	subs	r0, r7, #1
 800216c:	4187      	sbcs	r7, r0
 800216e:	4694      	mov	ip, r2
 8002170:	4334      	orrs	r4, r6
 8002172:	4327      	orrs	r7, r4
 8002174:	1bdc      	subs	r4, r3, r7
 8002176:	42a3      	cmp	r3, r4
 8002178:	419b      	sbcs	r3, r3
 800217a:	4662      	mov	r2, ip
 800217c:	425b      	negs	r3, r3
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	4699      	mov	r9, r3
 8002182:	464b      	mov	r3, r9
 8002184:	021b      	lsls	r3, r3, #8
 8002186:	d400      	bmi.n	800218a <__aeabi_dsub+0xaa>
 8002188:	e118      	b.n	80023bc <__aeabi_dsub+0x2dc>
 800218a:	464b      	mov	r3, r9
 800218c:	0258      	lsls	r0, r3, #9
 800218e:	0a43      	lsrs	r3, r0, #9
 8002190:	4699      	mov	r9, r3
 8002192:	464b      	mov	r3, r9
 8002194:	2b00      	cmp	r3, #0
 8002196:	d100      	bne.n	800219a <__aeabi_dsub+0xba>
 8002198:	e137      	b.n	800240a <__aeabi_dsub+0x32a>
 800219a:	4648      	mov	r0, r9
 800219c:	f000 fce6 	bl	8002b6c <__clzsi2>
 80021a0:	0001      	movs	r1, r0
 80021a2:	3908      	subs	r1, #8
 80021a4:	2320      	movs	r3, #32
 80021a6:	0022      	movs	r2, r4
 80021a8:	4648      	mov	r0, r9
 80021aa:	1a5b      	subs	r3, r3, r1
 80021ac:	40da      	lsrs	r2, r3
 80021ae:	4088      	lsls	r0, r1
 80021b0:	408c      	lsls	r4, r1
 80021b2:	4643      	mov	r3, r8
 80021b4:	4310      	orrs	r0, r2
 80021b6:	4588      	cmp	r8, r1
 80021b8:	dd00      	ble.n	80021bc <__aeabi_dsub+0xdc>
 80021ba:	e136      	b.n	800242a <__aeabi_dsub+0x34a>
 80021bc:	1ac9      	subs	r1, r1, r3
 80021be:	1c4b      	adds	r3, r1, #1
 80021c0:	2b1f      	cmp	r3, #31
 80021c2:	dd00      	ble.n	80021c6 <__aeabi_dsub+0xe6>
 80021c4:	e0ea      	b.n	800239c <__aeabi_dsub+0x2bc>
 80021c6:	2220      	movs	r2, #32
 80021c8:	0026      	movs	r6, r4
 80021ca:	1ad2      	subs	r2, r2, r3
 80021cc:	0001      	movs	r1, r0
 80021ce:	4094      	lsls	r4, r2
 80021d0:	40de      	lsrs	r6, r3
 80021d2:	40d8      	lsrs	r0, r3
 80021d4:	2300      	movs	r3, #0
 80021d6:	4091      	lsls	r1, r2
 80021d8:	1e62      	subs	r2, r4, #1
 80021da:	4194      	sbcs	r4, r2
 80021dc:	4681      	mov	r9, r0
 80021de:	4698      	mov	r8, r3
 80021e0:	4331      	orrs	r1, r6
 80021e2:	430c      	orrs	r4, r1
 80021e4:	0763      	lsls	r3, r4, #29
 80021e6:	d009      	beq.n	80021fc <__aeabi_dsub+0x11c>
 80021e8:	230f      	movs	r3, #15
 80021ea:	4023      	ands	r3, r4
 80021ec:	2b04      	cmp	r3, #4
 80021ee:	d005      	beq.n	80021fc <__aeabi_dsub+0x11c>
 80021f0:	1d23      	adds	r3, r4, #4
 80021f2:	42a3      	cmp	r3, r4
 80021f4:	41a4      	sbcs	r4, r4
 80021f6:	4264      	negs	r4, r4
 80021f8:	44a1      	add	r9, r4
 80021fa:	001c      	movs	r4, r3
 80021fc:	464b      	mov	r3, r9
 80021fe:	021b      	lsls	r3, r3, #8
 8002200:	d400      	bmi.n	8002204 <__aeabi_dsub+0x124>
 8002202:	e0de      	b.n	80023c2 <__aeabi_dsub+0x2e2>
 8002204:	4641      	mov	r1, r8
 8002206:	4b8c      	ldr	r3, [pc, #560]	; (8002438 <__aeabi_dsub+0x358>)
 8002208:	3101      	adds	r1, #1
 800220a:	4299      	cmp	r1, r3
 800220c:	d100      	bne.n	8002210 <__aeabi_dsub+0x130>
 800220e:	e0e7      	b.n	80023e0 <__aeabi_dsub+0x300>
 8002210:	464b      	mov	r3, r9
 8002212:	488a      	ldr	r0, [pc, #552]	; (800243c <__aeabi_dsub+0x35c>)
 8002214:	08e4      	lsrs	r4, r4, #3
 8002216:	4003      	ands	r3, r0
 8002218:	0018      	movs	r0, r3
 800221a:	0549      	lsls	r1, r1, #21
 800221c:	075b      	lsls	r3, r3, #29
 800221e:	0240      	lsls	r0, r0, #9
 8002220:	4323      	orrs	r3, r4
 8002222:	0d4a      	lsrs	r2, r1, #21
 8002224:	0b04      	lsrs	r4, r0, #12
 8002226:	0512      	lsls	r2, r2, #20
 8002228:	07ed      	lsls	r5, r5, #31
 800222a:	4322      	orrs	r2, r4
 800222c:	432a      	orrs	r2, r5
 800222e:	0018      	movs	r0, r3
 8002230:	0011      	movs	r1, r2
 8002232:	bcf0      	pop	{r4, r5, r6, r7}
 8002234:	46bb      	mov	fp, r7
 8002236:	46b2      	mov	sl, r6
 8002238:	46a9      	mov	r9, r5
 800223a:	46a0      	mov	r8, r4
 800223c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800223e:	4642      	mov	r2, r8
 8002240:	1a12      	subs	r2, r2, r0
 8002242:	2a00      	cmp	r2, #0
 8002244:	dd52      	ble.n	80022ec <__aeabi_dsub+0x20c>
 8002246:	2800      	cmp	r0, #0
 8002248:	d100      	bne.n	800224c <__aeabi_dsub+0x16c>
 800224a:	e09c      	b.n	8002386 <__aeabi_dsub+0x2a6>
 800224c:	45a0      	cmp	r8, r4
 800224e:	d100      	bne.n	8002252 <__aeabi_dsub+0x172>
 8002250:	e0ca      	b.n	80023e8 <__aeabi_dsub+0x308>
 8002252:	2080      	movs	r0, #128	; 0x80
 8002254:	0400      	lsls	r0, r0, #16
 8002256:	4301      	orrs	r1, r0
 8002258:	2a38      	cmp	r2, #56	; 0x38
 800225a:	dd00      	ble.n	800225e <__aeabi_dsub+0x17e>
 800225c:	e149      	b.n	80024f2 <__aeabi_dsub+0x412>
 800225e:	2a1f      	cmp	r2, #31
 8002260:	dc00      	bgt.n	8002264 <__aeabi_dsub+0x184>
 8002262:	e197      	b.n	8002594 <__aeabi_dsub+0x4b4>
 8002264:	0010      	movs	r0, r2
 8002266:	000e      	movs	r6, r1
 8002268:	3820      	subs	r0, #32
 800226a:	40c6      	lsrs	r6, r0
 800226c:	2a20      	cmp	r2, #32
 800226e:	d004      	beq.n	800227a <__aeabi_dsub+0x19a>
 8002270:	2040      	movs	r0, #64	; 0x40
 8002272:	1a82      	subs	r2, r0, r2
 8002274:	4091      	lsls	r1, r2
 8002276:	430f      	orrs	r7, r1
 8002278:	46b9      	mov	r9, r7
 800227a:	464c      	mov	r4, r9
 800227c:	1e62      	subs	r2, r4, #1
 800227e:	4194      	sbcs	r4, r2
 8002280:	4334      	orrs	r4, r6
 8002282:	e13a      	b.n	80024fa <__aeabi_dsub+0x41a>
 8002284:	000a      	movs	r2, r1
 8002286:	433a      	orrs	r2, r7
 8002288:	d028      	beq.n	80022dc <__aeabi_dsub+0x1fc>
 800228a:	46b3      	mov	fp, r6
 800228c:	42b5      	cmp	r5, r6
 800228e:	d02b      	beq.n	80022e8 <__aeabi_dsub+0x208>
 8002290:	4a6b      	ldr	r2, [pc, #428]	; (8002440 <__aeabi_dsub+0x360>)
 8002292:	4442      	add	r2, r8
 8002294:	2a00      	cmp	r2, #0
 8002296:	d05d      	beq.n	8002354 <__aeabi_dsub+0x274>
 8002298:	4642      	mov	r2, r8
 800229a:	4644      	mov	r4, r8
 800229c:	1a82      	subs	r2, r0, r2
 800229e:	2c00      	cmp	r4, #0
 80022a0:	d000      	beq.n	80022a4 <__aeabi_dsub+0x1c4>
 80022a2:	e0f5      	b.n	8002490 <__aeabi_dsub+0x3b0>
 80022a4:	4665      	mov	r5, ip
 80022a6:	431d      	orrs	r5, r3
 80022a8:	d100      	bne.n	80022ac <__aeabi_dsub+0x1cc>
 80022aa:	e19c      	b.n	80025e6 <__aeabi_dsub+0x506>
 80022ac:	1e55      	subs	r5, r2, #1
 80022ae:	2a01      	cmp	r2, #1
 80022b0:	d100      	bne.n	80022b4 <__aeabi_dsub+0x1d4>
 80022b2:	e1fb      	b.n	80026ac <__aeabi_dsub+0x5cc>
 80022b4:	4c60      	ldr	r4, [pc, #384]	; (8002438 <__aeabi_dsub+0x358>)
 80022b6:	42a2      	cmp	r2, r4
 80022b8:	d100      	bne.n	80022bc <__aeabi_dsub+0x1dc>
 80022ba:	e1bd      	b.n	8002638 <__aeabi_dsub+0x558>
 80022bc:	002a      	movs	r2, r5
 80022be:	e0f0      	b.n	80024a2 <__aeabi_dsub+0x3c2>
 80022c0:	0008      	movs	r0, r1
 80022c2:	4338      	orrs	r0, r7
 80022c4:	d100      	bne.n	80022c8 <__aeabi_dsub+0x1e8>
 80022c6:	e0c3      	b.n	8002450 <__aeabi_dsub+0x370>
 80022c8:	1e50      	subs	r0, r2, #1
 80022ca:	2a01      	cmp	r2, #1
 80022cc:	d100      	bne.n	80022d0 <__aeabi_dsub+0x1f0>
 80022ce:	e1a8      	b.n	8002622 <__aeabi_dsub+0x542>
 80022d0:	4c59      	ldr	r4, [pc, #356]	; (8002438 <__aeabi_dsub+0x358>)
 80022d2:	42a2      	cmp	r2, r4
 80022d4:	d100      	bne.n	80022d8 <__aeabi_dsub+0x1f8>
 80022d6:	e087      	b.n	80023e8 <__aeabi_dsub+0x308>
 80022d8:	0002      	movs	r2, r0
 80022da:	e736      	b.n	800214a <__aeabi_dsub+0x6a>
 80022dc:	2201      	movs	r2, #1
 80022de:	4056      	eors	r6, r2
 80022e0:	46b3      	mov	fp, r6
 80022e2:	42b5      	cmp	r5, r6
 80022e4:	d000      	beq.n	80022e8 <__aeabi_dsub+0x208>
 80022e6:	e721      	b.n	800212c <__aeabi_dsub+0x4c>
 80022e8:	4a55      	ldr	r2, [pc, #340]	; (8002440 <__aeabi_dsub+0x360>)
 80022ea:	4442      	add	r2, r8
 80022ec:	2a00      	cmp	r2, #0
 80022ee:	d100      	bne.n	80022f2 <__aeabi_dsub+0x212>
 80022f0:	e0b5      	b.n	800245e <__aeabi_dsub+0x37e>
 80022f2:	4642      	mov	r2, r8
 80022f4:	4644      	mov	r4, r8
 80022f6:	1a82      	subs	r2, r0, r2
 80022f8:	2c00      	cmp	r4, #0
 80022fa:	d100      	bne.n	80022fe <__aeabi_dsub+0x21e>
 80022fc:	e138      	b.n	8002570 <__aeabi_dsub+0x490>
 80022fe:	4e4e      	ldr	r6, [pc, #312]	; (8002438 <__aeabi_dsub+0x358>)
 8002300:	42b0      	cmp	r0, r6
 8002302:	d100      	bne.n	8002306 <__aeabi_dsub+0x226>
 8002304:	e1de      	b.n	80026c4 <__aeabi_dsub+0x5e4>
 8002306:	2680      	movs	r6, #128	; 0x80
 8002308:	4664      	mov	r4, ip
 800230a:	0436      	lsls	r6, r6, #16
 800230c:	4334      	orrs	r4, r6
 800230e:	46a4      	mov	ip, r4
 8002310:	2a38      	cmp	r2, #56	; 0x38
 8002312:	dd00      	ble.n	8002316 <__aeabi_dsub+0x236>
 8002314:	e196      	b.n	8002644 <__aeabi_dsub+0x564>
 8002316:	2a1f      	cmp	r2, #31
 8002318:	dd00      	ble.n	800231c <__aeabi_dsub+0x23c>
 800231a:	e224      	b.n	8002766 <__aeabi_dsub+0x686>
 800231c:	2620      	movs	r6, #32
 800231e:	1ab4      	subs	r4, r6, r2
 8002320:	46a2      	mov	sl, r4
 8002322:	4664      	mov	r4, ip
 8002324:	4656      	mov	r6, sl
 8002326:	40b4      	lsls	r4, r6
 8002328:	46a1      	mov	r9, r4
 800232a:	001c      	movs	r4, r3
 800232c:	464e      	mov	r6, r9
 800232e:	40d4      	lsrs	r4, r2
 8002330:	4326      	orrs	r6, r4
 8002332:	0034      	movs	r4, r6
 8002334:	4656      	mov	r6, sl
 8002336:	40b3      	lsls	r3, r6
 8002338:	1e5e      	subs	r6, r3, #1
 800233a:	41b3      	sbcs	r3, r6
 800233c:	431c      	orrs	r4, r3
 800233e:	4663      	mov	r3, ip
 8002340:	40d3      	lsrs	r3, r2
 8002342:	18c9      	adds	r1, r1, r3
 8002344:	19e4      	adds	r4, r4, r7
 8002346:	42bc      	cmp	r4, r7
 8002348:	41bf      	sbcs	r7, r7
 800234a:	427f      	negs	r7, r7
 800234c:	46b9      	mov	r9, r7
 800234e:	4680      	mov	r8, r0
 8002350:	4489      	add	r9, r1
 8002352:	e0d8      	b.n	8002506 <__aeabi_dsub+0x426>
 8002354:	4640      	mov	r0, r8
 8002356:	4c3b      	ldr	r4, [pc, #236]	; (8002444 <__aeabi_dsub+0x364>)
 8002358:	3001      	adds	r0, #1
 800235a:	4220      	tst	r0, r4
 800235c:	d000      	beq.n	8002360 <__aeabi_dsub+0x280>
 800235e:	e0b4      	b.n	80024ca <__aeabi_dsub+0x3ea>
 8002360:	4640      	mov	r0, r8
 8002362:	2800      	cmp	r0, #0
 8002364:	d000      	beq.n	8002368 <__aeabi_dsub+0x288>
 8002366:	e144      	b.n	80025f2 <__aeabi_dsub+0x512>
 8002368:	4660      	mov	r0, ip
 800236a:	4318      	orrs	r0, r3
 800236c:	d100      	bne.n	8002370 <__aeabi_dsub+0x290>
 800236e:	e190      	b.n	8002692 <__aeabi_dsub+0x5b2>
 8002370:	0008      	movs	r0, r1
 8002372:	4338      	orrs	r0, r7
 8002374:	d000      	beq.n	8002378 <__aeabi_dsub+0x298>
 8002376:	e1aa      	b.n	80026ce <__aeabi_dsub+0x5ee>
 8002378:	4661      	mov	r1, ip
 800237a:	08db      	lsrs	r3, r3, #3
 800237c:	0749      	lsls	r1, r1, #29
 800237e:	430b      	orrs	r3, r1
 8002380:	4661      	mov	r1, ip
 8002382:	08cc      	lsrs	r4, r1, #3
 8002384:	e027      	b.n	80023d6 <__aeabi_dsub+0x2f6>
 8002386:	0008      	movs	r0, r1
 8002388:	4338      	orrs	r0, r7
 800238a:	d061      	beq.n	8002450 <__aeabi_dsub+0x370>
 800238c:	1e50      	subs	r0, r2, #1
 800238e:	2a01      	cmp	r2, #1
 8002390:	d100      	bne.n	8002394 <__aeabi_dsub+0x2b4>
 8002392:	e139      	b.n	8002608 <__aeabi_dsub+0x528>
 8002394:	42a2      	cmp	r2, r4
 8002396:	d027      	beq.n	80023e8 <__aeabi_dsub+0x308>
 8002398:	0002      	movs	r2, r0
 800239a:	e75d      	b.n	8002258 <__aeabi_dsub+0x178>
 800239c:	0002      	movs	r2, r0
 800239e:	391f      	subs	r1, #31
 80023a0:	40ca      	lsrs	r2, r1
 80023a2:	0011      	movs	r1, r2
 80023a4:	2b20      	cmp	r3, #32
 80023a6:	d003      	beq.n	80023b0 <__aeabi_dsub+0x2d0>
 80023a8:	2240      	movs	r2, #64	; 0x40
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	4098      	lsls	r0, r3
 80023ae:	4304      	orrs	r4, r0
 80023b0:	1e63      	subs	r3, r4, #1
 80023b2:	419c      	sbcs	r4, r3
 80023b4:	2300      	movs	r3, #0
 80023b6:	4699      	mov	r9, r3
 80023b8:	4698      	mov	r8, r3
 80023ba:	430c      	orrs	r4, r1
 80023bc:	0763      	lsls	r3, r4, #29
 80023be:	d000      	beq.n	80023c2 <__aeabi_dsub+0x2e2>
 80023c0:	e712      	b.n	80021e8 <__aeabi_dsub+0x108>
 80023c2:	464b      	mov	r3, r9
 80023c4:	464a      	mov	r2, r9
 80023c6:	08e4      	lsrs	r4, r4, #3
 80023c8:	075b      	lsls	r3, r3, #29
 80023ca:	4323      	orrs	r3, r4
 80023cc:	08d4      	lsrs	r4, r2, #3
 80023ce:	4642      	mov	r2, r8
 80023d0:	4919      	ldr	r1, [pc, #100]	; (8002438 <__aeabi_dsub+0x358>)
 80023d2:	428a      	cmp	r2, r1
 80023d4:	d00e      	beq.n	80023f4 <__aeabi_dsub+0x314>
 80023d6:	0324      	lsls	r4, r4, #12
 80023d8:	0552      	lsls	r2, r2, #21
 80023da:	0b24      	lsrs	r4, r4, #12
 80023dc:	0d52      	lsrs	r2, r2, #21
 80023de:	e722      	b.n	8002226 <__aeabi_dsub+0x146>
 80023e0:	000a      	movs	r2, r1
 80023e2:	2400      	movs	r4, #0
 80023e4:	2300      	movs	r3, #0
 80023e6:	e71e      	b.n	8002226 <__aeabi_dsub+0x146>
 80023e8:	08db      	lsrs	r3, r3, #3
 80023ea:	4662      	mov	r2, ip
 80023ec:	0752      	lsls	r2, r2, #29
 80023ee:	4313      	orrs	r3, r2
 80023f0:	4662      	mov	r2, ip
 80023f2:	08d4      	lsrs	r4, r2, #3
 80023f4:	001a      	movs	r2, r3
 80023f6:	4322      	orrs	r2, r4
 80023f8:	d100      	bne.n	80023fc <__aeabi_dsub+0x31c>
 80023fa:	e1fc      	b.n	80027f6 <__aeabi_dsub+0x716>
 80023fc:	2280      	movs	r2, #128	; 0x80
 80023fe:	0312      	lsls	r2, r2, #12
 8002400:	4314      	orrs	r4, r2
 8002402:	0324      	lsls	r4, r4, #12
 8002404:	4a0c      	ldr	r2, [pc, #48]	; (8002438 <__aeabi_dsub+0x358>)
 8002406:	0b24      	lsrs	r4, r4, #12
 8002408:	e70d      	b.n	8002226 <__aeabi_dsub+0x146>
 800240a:	0020      	movs	r0, r4
 800240c:	f000 fbae 	bl	8002b6c <__clzsi2>
 8002410:	0001      	movs	r1, r0
 8002412:	3118      	adds	r1, #24
 8002414:	291f      	cmp	r1, #31
 8002416:	dc00      	bgt.n	800241a <__aeabi_dsub+0x33a>
 8002418:	e6c4      	b.n	80021a4 <__aeabi_dsub+0xc4>
 800241a:	3808      	subs	r0, #8
 800241c:	4084      	lsls	r4, r0
 800241e:	4643      	mov	r3, r8
 8002420:	0020      	movs	r0, r4
 8002422:	2400      	movs	r4, #0
 8002424:	4588      	cmp	r8, r1
 8002426:	dc00      	bgt.n	800242a <__aeabi_dsub+0x34a>
 8002428:	e6c8      	b.n	80021bc <__aeabi_dsub+0xdc>
 800242a:	4a04      	ldr	r2, [pc, #16]	; (800243c <__aeabi_dsub+0x35c>)
 800242c:	1a5b      	subs	r3, r3, r1
 800242e:	4010      	ands	r0, r2
 8002430:	4698      	mov	r8, r3
 8002432:	4681      	mov	r9, r0
 8002434:	e6d6      	b.n	80021e4 <__aeabi_dsub+0x104>
 8002436:	46c0      	nop			; (mov r8, r8)
 8002438:	000007ff 	.word	0x000007ff
 800243c:	ff7fffff 	.word	0xff7fffff
 8002440:	fffff801 	.word	0xfffff801
 8002444:	000007fe 	.word	0x000007fe
 8002448:	430f      	orrs	r7, r1
 800244a:	1e7a      	subs	r2, r7, #1
 800244c:	4197      	sbcs	r7, r2
 800244e:	e691      	b.n	8002174 <__aeabi_dsub+0x94>
 8002450:	4661      	mov	r1, ip
 8002452:	08db      	lsrs	r3, r3, #3
 8002454:	0749      	lsls	r1, r1, #29
 8002456:	430b      	orrs	r3, r1
 8002458:	4661      	mov	r1, ip
 800245a:	08cc      	lsrs	r4, r1, #3
 800245c:	e7b8      	b.n	80023d0 <__aeabi_dsub+0x2f0>
 800245e:	4640      	mov	r0, r8
 8002460:	4cd3      	ldr	r4, [pc, #844]	; (80027b0 <__aeabi_dsub+0x6d0>)
 8002462:	3001      	adds	r0, #1
 8002464:	4220      	tst	r0, r4
 8002466:	d000      	beq.n	800246a <__aeabi_dsub+0x38a>
 8002468:	e0a2      	b.n	80025b0 <__aeabi_dsub+0x4d0>
 800246a:	4640      	mov	r0, r8
 800246c:	2800      	cmp	r0, #0
 800246e:	d000      	beq.n	8002472 <__aeabi_dsub+0x392>
 8002470:	e101      	b.n	8002676 <__aeabi_dsub+0x596>
 8002472:	4660      	mov	r0, ip
 8002474:	4318      	orrs	r0, r3
 8002476:	d100      	bne.n	800247a <__aeabi_dsub+0x39a>
 8002478:	e15e      	b.n	8002738 <__aeabi_dsub+0x658>
 800247a:	0008      	movs	r0, r1
 800247c:	4338      	orrs	r0, r7
 800247e:	d000      	beq.n	8002482 <__aeabi_dsub+0x3a2>
 8002480:	e15f      	b.n	8002742 <__aeabi_dsub+0x662>
 8002482:	4661      	mov	r1, ip
 8002484:	08db      	lsrs	r3, r3, #3
 8002486:	0749      	lsls	r1, r1, #29
 8002488:	430b      	orrs	r3, r1
 800248a:	4661      	mov	r1, ip
 800248c:	08cc      	lsrs	r4, r1, #3
 800248e:	e7a2      	b.n	80023d6 <__aeabi_dsub+0x2f6>
 8002490:	4dc8      	ldr	r5, [pc, #800]	; (80027b4 <__aeabi_dsub+0x6d4>)
 8002492:	42a8      	cmp	r0, r5
 8002494:	d100      	bne.n	8002498 <__aeabi_dsub+0x3b8>
 8002496:	e0cf      	b.n	8002638 <__aeabi_dsub+0x558>
 8002498:	2580      	movs	r5, #128	; 0x80
 800249a:	4664      	mov	r4, ip
 800249c:	042d      	lsls	r5, r5, #16
 800249e:	432c      	orrs	r4, r5
 80024a0:	46a4      	mov	ip, r4
 80024a2:	2a38      	cmp	r2, #56	; 0x38
 80024a4:	dc56      	bgt.n	8002554 <__aeabi_dsub+0x474>
 80024a6:	2a1f      	cmp	r2, #31
 80024a8:	dd00      	ble.n	80024ac <__aeabi_dsub+0x3cc>
 80024aa:	e0d1      	b.n	8002650 <__aeabi_dsub+0x570>
 80024ac:	2520      	movs	r5, #32
 80024ae:	001e      	movs	r6, r3
 80024b0:	1aad      	subs	r5, r5, r2
 80024b2:	4664      	mov	r4, ip
 80024b4:	40ab      	lsls	r3, r5
 80024b6:	40ac      	lsls	r4, r5
 80024b8:	40d6      	lsrs	r6, r2
 80024ba:	1e5d      	subs	r5, r3, #1
 80024bc:	41ab      	sbcs	r3, r5
 80024be:	4334      	orrs	r4, r6
 80024c0:	4323      	orrs	r3, r4
 80024c2:	4664      	mov	r4, ip
 80024c4:	40d4      	lsrs	r4, r2
 80024c6:	1b09      	subs	r1, r1, r4
 80024c8:	e049      	b.n	800255e <__aeabi_dsub+0x47e>
 80024ca:	4660      	mov	r0, ip
 80024cc:	1bdc      	subs	r4, r3, r7
 80024ce:	1a46      	subs	r6, r0, r1
 80024d0:	42a3      	cmp	r3, r4
 80024d2:	4180      	sbcs	r0, r0
 80024d4:	4240      	negs	r0, r0
 80024d6:	4681      	mov	r9, r0
 80024d8:	0030      	movs	r0, r6
 80024da:	464e      	mov	r6, r9
 80024dc:	1b80      	subs	r0, r0, r6
 80024de:	4681      	mov	r9, r0
 80024e0:	0200      	lsls	r0, r0, #8
 80024e2:	d476      	bmi.n	80025d2 <__aeabi_dsub+0x4f2>
 80024e4:	464b      	mov	r3, r9
 80024e6:	4323      	orrs	r3, r4
 80024e8:	d000      	beq.n	80024ec <__aeabi_dsub+0x40c>
 80024ea:	e652      	b.n	8002192 <__aeabi_dsub+0xb2>
 80024ec:	2400      	movs	r4, #0
 80024ee:	2500      	movs	r5, #0
 80024f0:	e771      	b.n	80023d6 <__aeabi_dsub+0x2f6>
 80024f2:	4339      	orrs	r1, r7
 80024f4:	000c      	movs	r4, r1
 80024f6:	1e62      	subs	r2, r4, #1
 80024f8:	4194      	sbcs	r4, r2
 80024fa:	18e4      	adds	r4, r4, r3
 80024fc:	429c      	cmp	r4, r3
 80024fe:	419b      	sbcs	r3, r3
 8002500:	425b      	negs	r3, r3
 8002502:	4463      	add	r3, ip
 8002504:	4699      	mov	r9, r3
 8002506:	464b      	mov	r3, r9
 8002508:	021b      	lsls	r3, r3, #8
 800250a:	d400      	bmi.n	800250e <__aeabi_dsub+0x42e>
 800250c:	e756      	b.n	80023bc <__aeabi_dsub+0x2dc>
 800250e:	2301      	movs	r3, #1
 8002510:	469c      	mov	ip, r3
 8002512:	4ba8      	ldr	r3, [pc, #672]	; (80027b4 <__aeabi_dsub+0x6d4>)
 8002514:	44e0      	add	r8, ip
 8002516:	4598      	cmp	r8, r3
 8002518:	d038      	beq.n	800258c <__aeabi_dsub+0x4ac>
 800251a:	464b      	mov	r3, r9
 800251c:	48a6      	ldr	r0, [pc, #664]	; (80027b8 <__aeabi_dsub+0x6d8>)
 800251e:	2201      	movs	r2, #1
 8002520:	4003      	ands	r3, r0
 8002522:	0018      	movs	r0, r3
 8002524:	0863      	lsrs	r3, r4, #1
 8002526:	4014      	ands	r4, r2
 8002528:	431c      	orrs	r4, r3
 800252a:	07c3      	lsls	r3, r0, #31
 800252c:	431c      	orrs	r4, r3
 800252e:	0843      	lsrs	r3, r0, #1
 8002530:	4699      	mov	r9, r3
 8002532:	e657      	b.n	80021e4 <__aeabi_dsub+0x104>
 8002534:	0010      	movs	r0, r2
 8002536:	000e      	movs	r6, r1
 8002538:	3820      	subs	r0, #32
 800253a:	40c6      	lsrs	r6, r0
 800253c:	2a20      	cmp	r2, #32
 800253e:	d004      	beq.n	800254a <__aeabi_dsub+0x46a>
 8002540:	2040      	movs	r0, #64	; 0x40
 8002542:	1a82      	subs	r2, r0, r2
 8002544:	4091      	lsls	r1, r2
 8002546:	430f      	orrs	r7, r1
 8002548:	46b9      	mov	r9, r7
 800254a:	464f      	mov	r7, r9
 800254c:	1e7a      	subs	r2, r7, #1
 800254e:	4197      	sbcs	r7, r2
 8002550:	4337      	orrs	r7, r6
 8002552:	e60f      	b.n	8002174 <__aeabi_dsub+0x94>
 8002554:	4662      	mov	r2, ip
 8002556:	431a      	orrs	r2, r3
 8002558:	0013      	movs	r3, r2
 800255a:	1e5a      	subs	r2, r3, #1
 800255c:	4193      	sbcs	r3, r2
 800255e:	1afc      	subs	r4, r7, r3
 8002560:	42a7      	cmp	r7, r4
 8002562:	41bf      	sbcs	r7, r7
 8002564:	427f      	negs	r7, r7
 8002566:	1bcb      	subs	r3, r1, r7
 8002568:	4699      	mov	r9, r3
 800256a:	465d      	mov	r5, fp
 800256c:	4680      	mov	r8, r0
 800256e:	e608      	b.n	8002182 <__aeabi_dsub+0xa2>
 8002570:	4666      	mov	r6, ip
 8002572:	431e      	orrs	r6, r3
 8002574:	d100      	bne.n	8002578 <__aeabi_dsub+0x498>
 8002576:	e0be      	b.n	80026f6 <__aeabi_dsub+0x616>
 8002578:	1e56      	subs	r6, r2, #1
 800257a:	2a01      	cmp	r2, #1
 800257c:	d100      	bne.n	8002580 <__aeabi_dsub+0x4a0>
 800257e:	e109      	b.n	8002794 <__aeabi_dsub+0x6b4>
 8002580:	4c8c      	ldr	r4, [pc, #560]	; (80027b4 <__aeabi_dsub+0x6d4>)
 8002582:	42a2      	cmp	r2, r4
 8002584:	d100      	bne.n	8002588 <__aeabi_dsub+0x4a8>
 8002586:	e119      	b.n	80027bc <__aeabi_dsub+0x6dc>
 8002588:	0032      	movs	r2, r6
 800258a:	e6c1      	b.n	8002310 <__aeabi_dsub+0x230>
 800258c:	4642      	mov	r2, r8
 800258e:	2400      	movs	r4, #0
 8002590:	2300      	movs	r3, #0
 8002592:	e648      	b.n	8002226 <__aeabi_dsub+0x146>
 8002594:	2020      	movs	r0, #32
 8002596:	000c      	movs	r4, r1
 8002598:	1a80      	subs	r0, r0, r2
 800259a:	003e      	movs	r6, r7
 800259c:	4087      	lsls	r7, r0
 800259e:	4084      	lsls	r4, r0
 80025a0:	40d6      	lsrs	r6, r2
 80025a2:	1e78      	subs	r0, r7, #1
 80025a4:	4187      	sbcs	r7, r0
 80025a6:	40d1      	lsrs	r1, r2
 80025a8:	4334      	orrs	r4, r6
 80025aa:	433c      	orrs	r4, r7
 80025ac:	448c      	add	ip, r1
 80025ae:	e7a4      	b.n	80024fa <__aeabi_dsub+0x41a>
 80025b0:	4a80      	ldr	r2, [pc, #512]	; (80027b4 <__aeabi_dsub+0x6d4>)
 80025b2:	4290      	cmp	r0, r2
 80025b4:	d100      	bne.n	80025b8 <__aeabi_dsub+0x4d8>
 80025b6:	e0e9      	b.n	800278c <__aeabi_dsub+0x6ac>
 80025b8:	19df      	adds	r7, r3, r7
 80025ba:	429f      	cmp	r7, r3
 80025bc:	419b      	sbcs	r3, r3
 80025be:	4461      	add	r1, ip
 80025c0:	425b      	negs	r3, r3
 80025c2:	18c9      	adds	r1, r1, r3
 80025c4:	07cc      	lsls	r4, r1, #31
 80025c6:	087f      	lsrs	r7, r7, #1
 80025c8:	084b      	lsrs	r3, r1, #1
 80025ca:	4699      	mov	r9, r3
 80025cc:	4680      	mov	r8, r0
 80025ce:	433c      	orrs	r4, r7
 80025d0:	e6f4      	b.n	80023bc <__aeabi_dsub+0x2dc>
 80025d2:	1afc      	subs	r4, r7, r3
 80025d4:	42a7      	cmp	r7, r4
 80025d6:	41bf      	sbcs	r7, r7
 80025d8:	4663      	mov	r3, ip
 80025da:	427f      	negs	r7, r7
 80025dc:	1ac9      	subs	r1, r1, r3
 80025de:	1bcb      	subs	r3, r1, r7
 80025e0:	4699      	mov	r9, r3
 80025e2:	465d      	mov	r5, fp
 80025e4:	e5d5      	b.n	8002192 <__aeabi_dsub+0xb2>
 80025e6:	08ff      	lsrs	r7, r7, #3
 80025e8:	074b      	lsls	r3, r1, #29
 80025ea:	465d      	mov	r5, fp
 80025ec:	433b      	orrs	r3, r7
 80025ee:	08cc      	lsrs	r4, r1, #3
 80025f0:	e6ee      	b.n	80023d0 <__aeabi_dsub+0x2f0>
 80025f2:	4662      	mov	r2, ip
 80025f4:	431a      	orrs	r2, r3
 80025f6:	d000      	beq.n	80025fa <__aeabi_dsub+0x51a>
 80025f8:	e082      	b.n	8002700 <__aeabi_dsub+0x620>
 80025fa:	000b      	movs	r3, r1
 80025fc:	433b      	orrs	r3, r7
 80025fe:	d11b      	bne.n	8002638 <__aeabi_dsub+0x558>
 8002600:	2480      	movs	r4, #128	; 0x80
 8002602:	2500      	movs	r5, #0
 8002604:	0324      	lsls	r4, r4, #12
 8002606:	e6f9      	b.n	80023fc <__aeabi_dsub+0x31c>
 8002608:	19dc      	adds	r4, r3, r7
 800260a:	429c      	cmp	r4, r3
 800260c:	419b      	sbcs	r3, r3
 800260e:	4461      	add	r1, ip
 8002610:	4689      	mov	r9, r1
 8002612:	425b      	negs	r3, r3
 8002614:	4499      	add	r9, r3
 8002616:	464b      	mov	r3, r9
 8002618:	021b      	lsls	r3, r3, #8
 800261a:	d444      	bmi.n	80026a6 <__aeabi_dsub+0x5c6>
 800261c:	2301      	movs	r3, #1
 800261e:	4698      	mov	r8, r3
 8002620:	e6cc      	b.n	80023bc <__aeabi_dsub+0x2dc>
 8002622:	1bdc      	subs	r4, r3, r7
 8002624:	4662      	mov	r2, ip
 8002626:	42a3      	cmp	r3, r4
 8002628:	419b      	sbcs	r3, r3
 800262a:	1a51      	subs	r1, r2, r1
 800262c:	425b      	negs	r3, r3
 800262e:	1acb      	subs	r3, r1, r3
 8002630:	4699      	mov	r9, r3
 8002632:	2301      	movs	r3, #1
 8002634:	4698      	mov	r8, r3
 8002636:	e5a4      	b.n	8002182 <__aeabi_dsub+0xa2>
 8002638:	08ff      	lsrs	r7, r7, #3
 800263a:	074b      	lsls	r3, r1, #29
 800263c:	465d      	mov	r5, fp
 800263e:	433b      	orrs	r3, r7
 8002640:	08cc      	lsrs	r4, r1, #3
 8002642:	e6d7      	b.n	80023f4 <__aeabi_dsub+0x314>
 8002644:	4662      	mov	r2, ip
 8002646:	431a      	orrs	r2, r3
 8002648:	0014      	movs	r4, r2
 800264a:	1e63      	subs	r3, r4, #1
 800264c:	419c      	sbcs	r4, r3
 800264e:	e679      	b.n	8002344 <__aeabi_dsub+0x264>
 8002650:	0015      	movs	r5, r2
 8002652:	4664      	mov	r4, ip
 8002654:	3d20      	subs	r5, #32
 8002656:	40ec      	lsrs	r4, r5
 8002658:	46a0      	mov	r8, r4
 800265a:	2a20      	cmp	r2, #32
 800265c:	d005      	beq.n	800266a <__aeabi_dsub+0x58a>
 800265e:	2540      	movs	r5, #64	; 0x40
 8002660:	4664      	mov	r4, ip
 8002662:	1aaa      	subs	r2, r5, r2
 8002664:	4094      	lsls	r4, r2
 8002666:	4323      	orrs	r3, r4
 8002668:	469a      	mov	sl, r3
 800266a:	4654      	mov	r4, sl
 800266c:	1e63      	subs	r3, r4, #1
 800266e:	419c      	sbcs	r4, r3
 8002670:	4643      	mov	r3, r8
 8002672:	4323      	orrs	r3, r4
 8002674:	e773      	b.n	800255e <__aeabi_dsub+0x47e>
 8002676:	4662      	mov	r2, ip
 8002678:	431a      	orrs	r2, r3
 800267a:	d023      	beq.n	80026c4 <__aeabi_dsub+0x5e4>
 800267c:	000a      	movs	r2, r1
 800267e:	433a      	orrs	r2, r7
 8002680:	d000      	beq.n	8002684 <__aeabi_dsub+0x5a4>
 8002682:	e0a0      	b.n	80027c6 <__aeabi_dsub+0x6e6>
 8002684:	4662      	mov	r2, ip
 8002686:	08db      	lsrs	r3, r3, #3
 8002688:	0752      	lsls	r2, r2, #29
 800268a:	4313      	orrs	r3, r2
 800268c:	4662      	mov	r2, ip
 800268e:	08d4      	lsrs	r4, r2, #3
 8002690:	e6b0      	b.n	80023f4 <__aeabi_dsub+0x314>
 8002692:	000b      	movs	r3, r1
 8002694:	433b      	orrs	r3, r7
 8002696:	d100      	bne.n	800269a <__aeabi_dsub+0x5ba>
 8002698:	e728      	b.n	80024ec <__aeabi_dsub+0x40c>
 800269a:	08ff      	lsrs	r7, r7, #3
 800269c:	074b      	lsls	r3, r1, #29
 800269e:	465d      	mov	r5, fp
 80026a0:	433b      	orrs	r3, r7
 80026a2:	08cc      	lsrs	r4, r1, #3
 80026a4:	e697      	b.n	80023d6 <__aeabi_dsub+0x2f6>
 80026a6:	2302      	movs	r3, #2
 80026a8:	4698      	mov	r8, r3
 80026aa:	e736      	b.n	800251a <__aeabi_dsub+0x43a>
 80026ac:	1afc      	subs	r4, r7, r3
 80026ae:	42a7      	cmp	r7, r4
 80026b0:	41bf      	sbcs	r7, r7
 80026b2:	4663      	mov	r3, ip
 80026b4:	427f      	negs	r7, r7
 80026b6:	1ac9      	subs	r1, r1, r3
 80026b8:	1bcb      	subs	r3, r1, r7
 80026ba:	4699      	mov	r9, r3
 80026bc:	2301      	movs	r3, #1
 80026be:	465d      	mov	r5, fp
 80026c0:	4698      	mov	r8, r3
 80026c2:	e55e      	b.n	8002182 <__aeabi_dsub+0xa2>
 80026c4:	074b      	lsls	r3, r1, #29
 80026c6:	08ff      	lsrs	r7, r7, #3
 80026c8:	433b      	orrs	r3, r7
 80026ca:	08cc      	lsrs	r4, r1, #3
 80026cc:	e692      	b.n	80023f4 <__aeabi_dsub+0x314>
 80026ce:	1bdc      	subs	r4, r3, r7
 80026d0:	4660      	mov	r0, ip
 80026d2:	42a3      	cmp	r3, r4
 80026d4:	41b6      	sbcs	r6, r6
 80026d6:	1a40      	subs	r0, r0, r1
 80026d8:	4276      	negs	r6, r6
 80026da:	1b80      	subs	r0, r0, r6
 80026dc:	4681      	mov	r9, r0
 80026de:	0200      	lsls	r0, r0, #8
 80026e0:	d560      	bpl.n	80027a4 <__aeabi_dsub+0x6c4>
 80026e2:	1afc      	subs	r4, r7, r3
 80026e4:	42a7      	cmp	r7, r4
 80026e6:	41bf      	sbcs	r7, r7
 80026e8:	4663      	mov	r3, ip
 80026ea:	427f      	negs	r7, r7
 80026ec:	1ac9      	subs	r1, r1, r3
 80026ee:	1bcb      	subs	r3, r1, r7
 80026f0:	4699      	mov	r9, r3
 80026f2:	465d      	mov	r5, fp
 80026f4:	e576      	b.n	80021e4 <__aeabi_dsub+0x104>
 80026f6:	08ff      	lsrs	r7, r7, #3
 80026f8:	074b      	lsls	r3, r1, #29
 80026fa:	433b      	orrs	r3, r7
 80026fc:	08cc      	lsrs	r4, r1, #3
 80026fe:	e667      	b.n	80023d0 <__aeabi_dsub+0x2f0>
 8002700:	000a      	movs	r2, r1
 8002702:	08db      	lsrs	r3, r3, #3
 8002704:	433a      	orrs	r2, r7
 8002706:	d100      	bne.n	800270a <__aeabi_dsub+0x62a>
 8002708:	e66f      	b.n	80023ea <__aeabi_dsub+0x30a>
 800270a:	4662      	mov	r2, ip
 800270c:	0752      	lsls	r2, r2, #29
 800270e:	4313      	orrs	r3, r2
 8002710:	4662      	mov	r2, ip
 8002712:	08d4      	lsrs	r4, r2, #3
 8002714:	2280      	movs	r2, #128	; 0x80
 8002716:	0312      	lsls	r2, r2, #12
 8002718:	4214      	tst	r4, r2
 800271a:	d007      	beq.n	800272c <__aeabi_dsub+0x64c>
 800271c:	08c8      	lsrs	r0, r1, #3
 800271e:	4210      	tst	r0, r2
 8002720:	d104      	bne.n	800272c <__aeabi_dsub+0x64c>
 8002722:	465d      	mov	r5, fp
 8002724:	0004      	movs	r4, r0
 8002726:	08fb      	lsrs	r3, r7, #3
 8002728:	0749      	lsls	r1, r1, #29
 800272a:	430b      	orrs	r3, r1
 800272c:	0f5a      	lsrs	r2, r3, #29
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	08db      	lsrs	r3, r3, #3
 8002732:	0752      	lsls	r2, r2, #29
 8002734:	4313      	orrs	r3, r2
 8002736:	e65d      	b.n	80023f4 <__aeabi_dsub+0x314>
 8002738:	074b      	lsls	r3, r1, #29
 800273a:	08ff      	lsrs	r7, r7, #3
 800273c:	433b      	orrs	r3, r7
 800273e:	08cc      	lsrs	r4, r1, #3
 8002740:	e649      	b.n	80023d6 <__aeabi_dsub+0x2f6>
 8002742:	19dc      	adds	r4, r3, r7
 8002744:	429c      	cmp	r4, r3
 8002746:	419b      	sbcs	r3, r3
 8002748:	4461      	add	r1, ip
 800274a:	4689      	mov	r9, r1
 800274c:	425b      	negs	r3, r3
 800274e:	4499      	add	r9, r3
 8002750:	464b      	mov	r3, r9
 8002752:	021b      	lsls	r3, r3, #8
 8002754:	d400      	bmi.n	8002758 <__aeabi_dsub+0x678>
 8002756:	e631      	b.n	80023bc <__aeabi_dsub+0x2dc>
 8002758:	464a      	mov	r2, r9
 800275a:	4b17      	ldr	r3, [pc, #92]	; (80027b8 <__aeabi_dsub+0x6d8>)
 800275c:	401a      	ands	r2, r3
 800275e:	2301      	movs	r3, #1
 8002760:	4691      	mov	r9, r2
 8002762:	4698      	mov	r8, r3
 8002764:	e62a      	b.n	80023bc <__aeabi_dsub+0x2dc>
 8002766:	0016      	movs	r6, r2
 8002768:	4664      	mov	r4, ip
 800276a:	3e20      	subs	r6, #32
 800276c:	40f4      	lsrs	r4, r6
 800276e:	46a0      	mov	r8, r4
 8002770:	2a20      	cmp	r2, #32
 8002772:	d005      	beq.n	8002780 <__aeabi_dsub+0x6a0>
 8002774:	2640      	movs	r6, #64	; 0x40
 8002776:	4664      	mov	r4, ip
 8002778:	1ab2      	subs	r2, r6, r2
 800277a:	4094      	lsls	r4, r2
 800277c:	4323      	orrs	r3, r4
 800277e:	469a      	mov	sl, r3
 8002780:	4654      	mov	r4, sl
 8002782:	1e63      	subs	r3, r4, #1
 8002784:	419c      	sbcs	r4, r3
 8002786:	4643      	mov	r3, r8
 8002788:	431c      	orrs	r4, r3
 800278a:	e5db      	b.n	8002344 <__aeabi_dsub+0x264>
 800278c:	0002      	movs	r2, r0
 800278e:	2400      	movs	r4, #0
 8002790:	2300      	movs	r3, #0
 8002792:	e548      	b.n	8002226 <__aeabi_dsub+0x146>
 8002794:	19dc      	adds	r4, r3, r7
 8002796:	42bc      	cmp	r4, r7
 8002798:	41bf      	sbcs	r7, r7
 800279a:	4461      	add	r1, ip
 800279c:	4689      	mov	r9, r1
 800279e:	427f      	negs	r7, r7
 80027a0:	44b9      	add	r9, r7
 80027a2:	e738      	b.n	8002616 <__aeabi_dsub+0x536>
 80027a4:	464b      	mov	r3, r9
 80027a6:	4323      	orrs	r3, r4
 80027a8:	d100      	bne.n	80027ac <__aeabi_dsub+0x6cc>
 80027aa:	e69f      	b.n	80024ec <__aeabi_dsub+0x40c>
 80027ac:	e606      	b.n	80023bc <__aeabi_dsub+0x2dc>
 80027ae:	46c0      	nop			; (mov r8, r8)
 80027b0:	000007fe 	.word	0x000007fe
 80027b4:	000007ff 	.word	0x000007ff
 80027b8:	ff7fffff 	.word	0xff7fffff
 80027bc:	08ff      	lsrs	r7, r7, #3
 80027be:	074b      	lsls	r3, r1, #29
 80027c0:	433b      	orrs	r3, r7
 80027c2:	08cc      	lsrs	r4, r1, #3
 80027c4:	e616      	b.n	80023f4 <__aeabi_dsub+0x314>
 80027c6:	4662      	mov	r2, ip
 80027c8:	08db      	lsrs	r3, r3, #3
 80027ca:	0752      	lsls	r2, r2, #29
 80027cc:	4313      	orrs	r3, r2
 80027ce:	4662      	mov	r2, ip
 80027d0:	08d4      	lsrs	r4, r2, #3
 80027d2:	2280      	movs	r2, #128	; 0x80
 80027d4:	0312      	lsls	r2, r2, #12
 80027d6:	4214      	tst	r4, r2
 80027d8:	d007      	beq.n	80027ea <__aeabi_dsub+0x70a>
 80027da:	08c8      	lsrs	r0, r1, #3
 80027dc:	4210      	tst	r0, r2
 80027de:	d104      	bne.n	80027ea <__aeabi_dsub+0x70a>
 80027e0:	465d      	mov	r5, fp
 80027e2:	0004      	movs	r4, r0
 80027e4:	08fb      	lsrs	r3, r7, #3
 80027e6:	0749      	lsls	r1, r1, #29
 80027e8:	430b      	orrs	r3, r1
 80027ea:	0f5a      	lsrs	r2, r3, #29
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	0752      	lsls	r2, r2, #29
 80027f0:	08db      	lsrs	r3, r3, #3
 80027f2:	4313      	orrs	r3, r2
 80027f4:	e5fe      	b.n	80023f4 <__aeabi_dsub+0x314>
 80027f6:	2300      	movs	r3, #0
 80027f8:	4a01      	ldr	r2, [pc, #4]	; (8002800 <__aeabi_dsub+0x720>)
 80027fa:	001c      	movs	r4, r3
 80027fc:	e513      	b.n	8002226 <__aeabi_dsub+0x146>
 80027fe:	46c0      	nop			; (mov r8, r8)
 8002800:	000007ff 	.word	0x000007ff

08002804 <__aeabi_dcmpun>:
 8002804:	b570      	push	{r4, r5, r6, lr}
 8002806:	0005      	movs	r5, r0
 8002808:	480c      	ldr	r0, [pc, #48]	; (800283c <__aeabi_dcmpun+0x38>)
 800280a:	031c      	lsls	r4, r3, #12
 800280c:	0016      	movs	r6, r2
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	030a      	lsls	r2, r1, #12
 8002812:	0049      	lsls	r1, r1, #1
 8002814:	0b12      	lsrs	r2, r2, #12
 8002816:	0d49      	lsrs	r1, r1, #21
 8002818:	0b24      	lsrs	r4, r4, #12
 800281a:	0d5b      	lsrs	r3, r3, #21
 800281c:	4281      	cmp	r1, r0
 800281e:	d008      	beq.n	8002832 <__aeabi_dcmpun+0x2e>
 8002820:	4a06      	ldr	r2, [pc, #24]	; (800283c <__aeabi_dcmpun+0x38>)
 8002822:	2000      	movs	r0, #0
 8002824:	4293      	cmp	r3, r2
 8002826:	d103      	bne.n	8002830 <__aeabi_dcmpun+0x2c>
 8002828:	0020      	movs	r0, r4
 800282a:	4330      	orrs	r0, r6
 800282c:	1e43      	subs	r3, r0, #1
 800282e:	4198      	sbcs	r0, r3
 8002830:	bd70      	pop	{r4, r5, r6, pc}
 8002832:	2001      	movs	r0, #1
 8002834:	432a      	orrs	r2, r5
 8002836:	d1fb      	bne.n	8002830 <__aeabi_dcmpun+0x2c>
 8002838:	e7f2      	b.n	8002820 <__aeabi_dcmpun+0x1c>
 800283a:	46c0      	nop			; (mov r8, r8)
 800283c:	000007ff 	.word	0x000007ff

08002840 <__aeabi_d2iz>:
 8002840:	000a      	movs	r2, r1
 8002842:	b530      	push	{r4, r5, lr}
 8002844:	4c13      	ldr	r4, [pc, #76]	; (8002894 <__aeabi_d2iz+0x54>)
 8002846:	0053      	lsls	r3, r2, #1
 8002848:	0309      	lsls	r1, r1, #12
 800284a:	0005      	movs	r5, r0
 800284c:	0b09      	lsrs	r1, r1, #12
 800284e:	2000      	movs	r0, #0
 8002850:	0d5b      	lsrs	r3, r3, #21
 8002852:	0fd2      	lsrs	r2, r2, #31
 8002854:	42a3      	cmp	r3, r4
 8002856:	dd04      	ble.n	8002862 <__aeabi_d2iz+0x22>
 8002858:	480f      	ldr	r0, [pc, #60]	; (8002898 <__aeabi_d2iz+0x58>)
 800285a:	4283      	cmp	r3, r0
 800285c:	dd02      	ble.n	8002864 <__aeabi_d2iz+0x24>
 800285e:	4b0f      	ldr	r3, [pc, #60]	; (800289c <__aeabi_d2iz+0x5c>)
 8002860:	18d0      	adds	r0, r2, r3
 8002862:	bd30      	pop	{r4, r5, pc}
 8002864:	2080      	movs	r0, #128	; 0x80
 8002866:	0340      	lsls	r0, r0, #13
 8002868:	4301      	orrs	r1, r0
 800286a:	480d      	ldr	r0, [pc, #52]	; (80028a0 <__aeabi_d2iz+0x60>)
 800286c:	1ac0      	subs	r0, r0, r3
 800286e:	281f      	cmp	r0, #31
 8002870:	dd08      	ble.n	8002884 <__aeabi_d2iz+0x44>
 8002872:	480c      	ldr	r0, [pc, #48]	; (80028a4 <__aeabi_d2iz+0x64>)
 8002874:	1ac3      	subs	r3, r0, r3
 8002876:	40d9      	lsrs	r1, r3
 8002878:	000b      	movs	r3, r1
 800287a:	4258      	negs	r0, r3
 800287c:	2a00      	cmp	r2, #0
 800287e:	d1f0      	bne.n	8002862 <__aeabi_d2iz+0x22>
 8002880:	0018      	movs	r0, r3
 8002882:	e7ee      	b.n	8002862 <__aeabi_d2iz+0x22>
 8002884:	4c08      	ldr	r4, [pc, #32]	; (80028a8 <__aeabi_d2iz+0x68>)
 8002886:	40c5      	lsrs	r5, r0
 8002888:	46a4      	mov	ip, r4
 800288a:	4463      	add	r3, ip
 800288c:	4099      	lsls	r1, r3
 800288e:	000b      	movs	r3, r1
 8002890:	432b      	orrs	r3, r5
 8002892:	e7f2      	b.n	800287a <__aeabi_d2iz+0x3a>
 8002894:	000003fe 	.word	0x000003fe
 8002898:	0000041d 	.word	0x0000041d
 800289c:	7fffffff 	.word	0x7fffffff
 80028a0:	00000433 	.word	0x00000433
 80028a4:	00000413 	.word	0x00000413
 80028a8:	fffffbed 	.word	0xfffffbed

080028ac <__aeabi_i2d>:
 80028ac:	b570      	push	{r4, r5, r6, lr}
 80028ae:	2800      	cmp	r0, #0
 80028b0:	d016      	beq.n	80028e0 <__aeabi_i2d+0x34>
 80028b2:	17c3      	asrs	r3, r0, #31
 80028b4:	18c5      	adds	r5, r0, r3
 80028b6:	405d      	eors	r5, r3
 80028b8:	0fc4      	lsrs	r4, r0, #31
 80028ba:	0028      	movs	r0, r5
 80028bc:	f000 f956 	bl	8002b6c <__clzsi2>
 80028c0:	4a11      	ldr	r2, [pc, #68]	; (8002908 <__aeabi_i2d+0x5c>)
 80028c2:	1a12      	subs	r2, r2, r0
 80028c4:	280a      	cmp	r0, #10
 80028c6:	dc16      	bgt.n	80028f6 <__aeabi_i2d+0x4a>
 80028c8:	0003      	movs	r3, r0
 80028ca:	002e      	movs	r6, r5
 80028cc:	3315      	adds	r3, #21
 80028ce:	409e      	lsls	r6, r3
 80028d0:	230b      	movs	r3, #11
 80028d2:	1a18      	subs	r0, r3, r0
 80028d4:	40c5      	lsrs	r5, r0
 80028d6:	0552      	lsls	r2, r2, #21
 80028d8:	032d      	lsls	r5, r5, #12
 80028da:	0b2d      	lsrs	r5, r5, #12
 80028dc:	0d53      	lsrs	r3, r2, #21
 80028de:	e003      	b.n	80028e8 <__aeabi_i2d+0x3c>
 80028e0:	2400      	movs	r4, #0
 80028e2:	2300      	movs	r3, #0
 80028e4:	2500      	movs	r5, #0
 80028e6:	2600      	movs	r6, #0
 80028e8:	051b      	lsls	r3, r3, #20
 80028ea:	432b      	orrs	r3, r5
 80028ec:	07e4      	lsls	r4, r4, #31
 80028ee:	4323      	orrs	r3, r4
 80028f0:	0030      	movs	r0, r6
 80028f2:	0019      	movs	r1, r3
 80028f4:	bd70      	pop	{r4, r5, r6, pc}
 80028f6:	380b      	subs	r0, #11
 80028f8:	4085      	lsls	r5, r0
 80028fa:	0552      	lsls	r2, r2, #21
 80028fc:	032d      	lsls	r5, r5, #12
 80028fe:	2600      	movs	r6, #0
 8002900:	0b2d      	lsrs	r5, r5, #12
 8002902:	0d53      	lsrs	r3, r2, #21
 8002904:	e7f0      	b.n	80028e8 <__aeabi_i2d+0x3c>
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	0000041e 	.word	0x0000041e

0800290c <__aeabi_ui2d>:
 800290c:	b510      	push	{r4, lr}
 800290e:	1e04      	subs	r4, r0, #0
 8002910:	d010      	beq.n	8002934 <__aeabi_ui2d+0x28>
 8002912:	f000 f92b 	bl	8002b6c <__clzsi2>
 8002916:	4b0f      	ldr	r3, [pc, #60]	; (8002954 <__aeabi_ui2d+0x48>)
 8002918:	1a1b      	subs	r3, r3, r0
 800291a:	280a      	cmp	r0, #10
 800291c:	dc11      	bgt.n	8002942 <__aeabi_ui2d+0x36>
 800291e:	220b      	movs	r2, #11
 8002920:	0021      	movs	r1, r4
 8002922:	1a12      	subs	r2, r2, r0
 8002924:	40d1      	lsrs	r1, r2
 8002926:	3015      	adds	r0, #21
 8002928:	030a      	lsls	r2, r1, #12
 800292a:	055b      	lsls	r3, r3, #21
 800292c:	4084      	lsls	r4, r0
 800292e:	0b12      	lsrs	r2, r2, #12
 8002930:	0d5b      	lsrs	r3, r3, #21
 8002932:	e001      	b.n	8002938 <__aeabi_ui2d+0x2c>
 8002934:	2300      	movs	r3, #0
 8002936:	2200      	movs	r2, #0
 8002938:	051b      	lsls	r3, r3, #20
 800293a:	4313      	orrs	r3, r2
 800293c:	0020      	movs	r0, r4
 800293e:	0019      	movs	r1, r3
 8002940:	bd10      	pop	{r4, pc}
 8002942:	0022      	movs	r2, r4
 8002944:	380b      	subs	r0, #11
 8002946:	4082      	lsls	r2, r0
 8002948:	055b      	lsls	r3, r3, #21
 800294a:	0312      	lsls	r2, r2, #12
 800294c:	2400      	movs	r4, #0
 800294e:	0b12      	lsrs	r2, r2, #12
 8002950:	0d5b      	lsrs	r3, r3, #21
 8002952:	e7f1      	b.n	8002938 <__aeabi_ui2d+0x2c>
 8002954:	0000041e 	.word	0x0000041e

08002958 <__aeabi_f2d>:
 8002958:	b570      	push	{r4, r5, r6, lr}
 800295a:	0043      	lsls	r3, r0, #1
 800295c:	0246      	lsls	r6, r0, #9
 800295e:	0fc4      	lsrs	r4, r0, #31
 8002960:	20fe      	movs	r0, #254	; 0xfe
 8002962:	0e1b      	lsrs	r3, r3, #24
 8002964:	1c59      	adds	r1, r3, #1
 8002966:	0a75      	lsrs	r5, r6, #9
 8002968:	4208      	tst	r0, r1
 800296a:	d00c      	beq.n	8002986 <__aeabi_f2d+0x2e>
 800296c:	22e0      	movs	r2, #224	; 0xe0
 800296e:	0092      	lsls	r2, r2, #2
 8002970:	4694      	mov	ip, r2
 8002972:	076d      	lsls	r5, r5, #29
 8002974:	0b36      	lsrs	r6, r6, #12
 8002976:	4463      	add	r3, ip
 8002978:	051b      	lsls	r3, r3, #20
 800297a:	4333      	orrs	r3, r6
 800297c:	07e4      	lsls	r4, r4, #31
 800297e:	4323      	orrs	r3, r4
 8002980:	0028      	movs	r0, r5
 8002982:	0019      	movs	r1, r3
 8002984:	bd70      	pop	{r4, r5, r6, pc}
 8002986:	2b00      	cmp	r3, #0
 8002988:	d114      	bne.n	80029b4 <__aeabi_f2d+0x5c>
 800298a:	2d00      	cmp	r5, #0
 800298c:	d01b      	beq.n	80029c6 <__aeabi_f2d+0x6e>
 800298e:	0028      	movs	r0, r5
 8002990:	f000 f8ec 	bl	8002b6c <__clzsi2>
 8002994:	280a      	cmp	r0, #10
 8002996:	dc1c      	bgt.n	80029d2 <__aeabi_f2d+0x7a>
 8002998:	230b      	movs	r3, #11
 800299a:	002e      	movs	r6, r5
 800299c:	1a1b      	subs	r3, r3, r0
 800299e:	40de      	lsrs	r6, r3
 80029a0:	0003      	movs	r3, r0
 80029a2:	3315      	adds	r3, #21
 80029a4:	409d      	lsls	r5, r3
 80029a6:	4a0e      	ldr	r2, [pc, #56]	; (80029e0 <__aeabi_f2d+0x88>)
 80029a8:	0336      	lsls	r6, r6, #12
 80029aa:	1a12      	subs	r2, r2, r0
 80029ac:	0552      	lsls	r2, r2, #21
 80029ae:	0b36      	lsrs	r6, r6, #12
 80029b0:	0d53      	lsrs	r3, r2, #21
 80029b2:	e7e1      	b.n	8002978 <__aeabi_f2d+0x20>
 80029b4:	2d00      	cmp	r5, #0
 80029b6:	d009      	beq.n	80029cc <__aeabi_f2d+0x74>
 80029b8:	2280      	movs	r2, #128	; 0x80
 80029ba:	0b36      	lsrs	r6, r6, #12
 80029bc:	0312      	lsls	r2, r2, #12
 80029be:	4b09      	ldr	r3, [pc, #36]	; (80029e4 <__aeabi_f2d+0x8c>)
 80029c0:	076d      	lsls	r5, r5, #29
 80029c2:	4316      	orrs	r6, r2
 80029c4:	e7d8      	b.n	8002978 <__aeabi_f2d+0x20>
 80029c6:	2300      	movs	r3, #0
 80029c8:	2600      	movs	r6, #0
 80029ca:	e7d5      	b.n	8002978 <__aeabi_f2d+0x20>
 80029cc:	2600      	movs	r6, #0
 80029ce:	4b05      	ldr	r3, [pc, #20]	; (80029e4 <__aeabi_f2d+0x8c>)
 80029d0:	e7d2      	b.n	8002978 <__aeabi_f2d+0x20>
 80029d2:	0003      	movs	r3, r0
 80029d4:	3b0b      	subs	r3, #11
 80029d6:	409d      	lsls	r5, r3
 80029d8:	002e      	movs	r6, r5
 80029da:	2500      	movs	r5, #0
 80029dc:	e7e3      	b.n	80029a6 <__aeabi_f2d+0x4e>
 80029de:	46c0      	nop			; (mov r8, r8)
 80029e0:	00000389 	.word	0x00000389
 80029e4:	000007ff 	.word	0x000007ff

080029e8 <__aeabi_d2f>:
 80029e8:	0002      	movs	r2, r0
 80029ea:	004b      	lsls	r3, r1, #1
 80029ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ee:	0d5b      	lsrs	r3, r3, #21
 80029f0:	030c      	lsls	r4, r1, #12
 80029f2:	4e3d      	ldr	r6, [pc, #244]	; (8002ae8 <__aeabi_d2f+0x100>)
 80029f4:	0a64      	lsrs	r4, r4, #9
 80029f6:	0f40      	lsrs	r0, r0, #29
 80029f8:	1c5f      	adds	r7, r3, #1
 80029fa:	0fc9      	lsrs	r1, r1, #31
 80029fc:	4304      	orrs	r4, r0
 80029fe:	00d5      	lsls	r5, r2, #3
 8002a00:	4237      	tst	r7, r6
 8002a02:	d00a      	beq.n	8002a1a <__aeabi_d2f+0x32>
 8002a04:	4839      	ldr	r0, [pc, #228]	; (8002aec <__aeabi_d2f+0x104>)
 8002a06:	181e      	adds	r6, r3, r0
 8002a08:	2efe      	cmp	r6, #254	; 0xfe
 8002a0a:	dd16      	ble.n	8002a3a <__aeabi_d2f+0x52>
 8002a0c:	20ff      	movs	r0, #255	; 0xff
 8002a0e:	2400      	movs	r4, #0
 8002a10:	05c0      	lsls	r0, r0, #23
 8002a12:	4320      	orrs	r0, r4
 8002a14:	07c9      	lsls	r1, r1, #31
 8002a16:	4308      	orrs	r0, r1
 8002a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d106      	bne.n	8002a2c <__aeabi_d2f+0x44>
 8002a1e:	432c      	orrs	r4, r5
 8002a20:	d026      	beq.n	8002a70 <__aeabi_d2f+0x88>
 8002a22:	2205      	movs	r2, #5
 8002a24:	0192      	lsls	r2, r2, #6
 8002a26:	0a54      	lsrs	r4, r2, #9
 8002a28:	b2d8      	uxtb	r0, r3
 8002a2a:	e7f1      	b.n	8002a10 <__aeabi_d2f+0x28>
 8002a2c:	4325      	orrs	r5, r4
 8002a2e:	d0ed      	beq.n	8002a0c <__aeabi_d2f+0x24>
 8002a30:	2080      	movs	r0, #128	; 0x80
 8002a32:	03c0      	lsls	r0, r0, #15
 8002a34:	4304      	orrs	r4, r0
 8002a36:	20ff      	movs	r0, #255	; 0xff
 8002a38:	e7ea      	b.n	8002a10 <__aeabi_d2f+0x28>
 8002a3a:	2e00      	cmp	r6, #0
 8002a3c:	dd1b      	ble.n	8002a76 <__aeabi_d2f+0x8e>
 8002a3e:	0192      	lsls	r2, r2, #6
 8002a40:	1e53      	subs	r3, r2, #1
 8002a42:	419a      	sbcs	r2, r3
 8002a44:	00e4      	lsls	r4, r4, #3
 8002a46:	0f6d      	lsrs	r5, r5, #29
 8002a48:	4322      	orrs	r2, r4
 8002a4a:	432a      	orrs	r2, r5
 8002a4c:	0753      	lsls	r3, r2, #29
 8002a4e:	d048      	beq.n	8002ae2 <__aeabi_d2f+0xfa>
 8002a50:	230f      	movs	r3, #15
 8002a52:	4013      	ands	r3, r2
 8002a54:	2b04      	cmp	r3, #4
 8002a56:	d000      	beq.n	8002a5a <__aeabi_d2f+0x72>
 8002a58:	3204      	adds	r2, #4
 8002a5a:	2380      	movs	r3, #128	; 0x80
 8002a5c:	04db      	lsls	r3, r3, #19
 8002a5e:	4013      	ands	r3, r2
 8002a60:	d03f      	beq.n	8002ae2 <__aeabi_d2f+0xfa>
 8002a62:	1c70      	adds	r0, r6, #1
 8002a64:	2efe      	cmp	r6, #254	; 0xfe
 8002a66:	d0d1      	beq.n	8002a0c <__aeabi_d2f+0x24>
 8002a68:	0192      	lsls	r2, r2, #6
 8002a6a:	0a54      	lsrs	r4, r2, #9
 8002a6c:	b2c0      	uxtb	r0, r0
 8002a6e:	e7cf      	b.n	8002a10 <__aeabi_d2f+0x28>
 8002a70:	2000      	movs	r0, #0
 8002a72:	2400      	movs	r4, #0
 8002a74:	e7cc      	b.n	8002a10 <__aeabi_d2f+0x28>
 8002a76:	0032      	movs	r2, r6
 8002a78:	3217      	adds	r2, #23
 8002a7a:	db22      	blt.n	8002ac2 <__aeabi_d2f+0xda>
 8002a7c:	2080      	movs	r0, #128	; 0x80
 8002a7e:	0400      	lsls	r0, r0, #16
 8002a80:	4320      	orrs	r0, r4
 8002a82:	241e      	movs	r4, #30
 8002a84:	1ba4      	subs	r4, r4, r6
 8002a86:	2c1f      	cmp	r4, #31
 8002a88:	dd1d      	ble.n	8002ac6 <__aeabi_d2f+0xde>
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	4252      	negs	r2, r2
 8002a8e:	1b96      	subs	r6, r2, r6
 8002a90:	0002      	movs	r2, r0
 8002a92:	40f2      	lsrs	r2, r6
 8002a94:	0016      	movs	r6, r2
 8002a96:	2c20      	cmp	r4, #32
 8002a98:	d004      	beq.n	8002aa4 <__aeabi_d2f+0xbc>
 8002a9a:	4a15      	ldr	r2, [pc, #84]	; (8002af0 <__aeabi_d2f+0x108>)
 8002a9c:	4694      	mov	ip, r2
 8002a9e:	4463      	add	r3, ip
 8002aa0:	4098      	lsls	r0, r3
 8002aa2:	4305      	orrs	r5, r0
 8002aa4:	002a      	movs	r2, r5
 8002aa6:	1e53      	subs	r3, r2, #1
 8002aa8:	419a      	sbcs	r2, r3
 8002aaa:	4332      	orrs	r2, r6
 8002aac:	2600      	movs	r6, #0
 8002aae:	0753      	lsls	r3, r2, #29
 8002ab0:	d1ce      	bne.n	8002a50 <__aeabi_d2f+0x68>
 8002ab2:	2480      	movs	r4, #128	; 0x80
 8002ab4:	0013      	movs	r3, r2
 8002ab6:	04e4      	lsls	r4, r4, #19
 8002ab8:	2001      	movs	r0, #1
 8002aba:	4023      	ands	r3, r4
 8002abc:	4222      	tst	r2, r4
 8002abe:	d1d3      	bne.n	8002a68 <__aeabi_d2f+0x80>
 8002ac0:	e7b0      	b.n	8002a24 <__aeabi_d2f+0x3c>
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	e7ad      	b.n	8002a22 <__aeabi_d2f+0x3a>
 8002ac6:	4a0b      	ldr	r2, [pc, #44]	; (8002af4 <__aeabi_d2f+0x10c>)
 8002ac8:	4694      	mov	ip, r2
 8002aca:	002a      	movs	r2, r5
 8002acc:	40e2      	lsrs	r2, r4
 8002ace:	0014      	movs	r4, r2
 8002ad0:	002a      	movs	r2, r5
 8002ad2:	4463      	add	r3, ip
 8002ad4:	409a      	lsls	r2, r3
 8002ad6:	4098      	lsls	r0, r3
 8002ad8:	1e55      	subs	r5, r2, #1
 8002ada:	41aa      	sbcs	r2, r5
 8002adc:	4302      	orrs	r2, r0
 8002ade:	4322      	orrs	r2, r4
 8002ae0:	e7e4      	b.n	8002aac <__aeabi_d2f+0xc4>
 8002ae2:	0033      	movs	r3, r6
 8002ae4:	e79e      	b.n	8002a24 <__aeabi_d2f+0x3c>
 8002ae6:	46c0      	nop			; (mov r8, r8)
 8002ae8:	000007fe 	.word	0x000007fe
 8002aec:	fffffc80 	.word	0xfffffc80
 8002af0:	fffffca2 	.word	0xfffffca2
 8002af4:	fffffc82 	.word	0xfffffc82

08002af8 <__aeabi_cfrcmple>:
 8002af8:	4684      	mov	ip, r0
 8002afa:	0008      	movs	r0, r1
 8002afc:	4661      	mov	r1, ip
 8002afe:	e7ff      	b.n	8002b00 <__aeabi_cfcmpeq>

08002b00 <__aeabi_cfcmpeq>:
 8002b00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002b02:	f000 f8bd 	bl	8002c80 <__lesf2>
 8002b06:	2800      	cmp	r0, #0
 8002b08:	d401      	bmi.n	8002b0e <__aeabi_cfcmpeq+0xe>
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	42c8      	cmn	r0, r1
 8002b0e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08002b10 <__aeabi_fcmpeq>:
 8002b10:	b510      	push	{r4, lr}
 8002b12:	f000 f849 	bl	8002ba8 <__eqsf2>
 8002b16:	4240      	negs	r0, r0
 8002b18:	3001      	adds	r0, #1
 8002b1a:	bd10      	pop	{r4, pc}

08002b1c <__aeabi_fcmplt>:
 8002b1c:	b510      	push	{r4, lr}
 8002b1e:	f000 f8af 	bl	8002c80 <__lesf2>
 8002b22:	2800      	cmp	r0, #0
 8002b24:	db01      	blt.n	8002b2a <__aeabi_fcmplt+0xe>
 8002b26:	2000      	movs	r0, #0
 8002b28:	bd10      	pop	{r4, pc}
 8002b2a:	2001      	movs	r0, #1
 8002b2c:	bd10      	pop	{r4, pc}
 8002b2e:	46c0      	nop			; (mov r8, r8)

08002b30 <__aeabi_fcmple>:
 8002b30:	b510      	push	{r4, lr}
 8002b32:	f000 f8a5 	bl	8002c80 <__lesf2>
 8002b36:	2800      	cmp	r0, #0
 8002b38:	dd01      	ble.n	8002b3e <__aeabi_fcmple+0xe>
 8002b3a:	2000      	movs	r0, #0
 8002b3c:	bd10      	pop	{r4, pc}
 8002b3e:	2001      	movs	r0, #1
 8002b40:	bd10      	pop	{r4, pc}
 8002b42:	46c0      	nop			; (mov r8, r8)

08002b44 <__aeabi_fcmpgt>:
 8002b44:	b510      	push	{r4, lr}
 8002b46:	f000 f855 	bl	8002bf4 <__gesf2>
 8002b4a:	2800      	cmp	r0, #0
 8002b4c:	dc01      	bgt.n	8002b52 <__aeabi_fcmpgt+0xe>
 8002b4e:	2000      	movs	r0, #0
 8002b50:	bd10      	pop	{r4, pc}
 8002b52:	2001      	movs	r0, #1
 8002b54:	bd10      	pop	{r4, pc}
 8002b56:	46c0      	nop			; (mov r8, r8)

08002b58 <__aeabi_fcmpge>:
 8002b58:	b510      	push	{r4, lr}
 8002b5a:	f000 f84b 	bl	8002bf4 <__gesf2>
 8002b5e:	2800      	cmp	r0, #0
 8002b60:	da01      	bge.n	8002b66 <__aeabi_fcmpge+0xe>
 8002b62:	2000      	movs	r0, #0
 8002b64:	bd10      	pop	{r4, pc}
 8002b66:	2001      	movs	r0, #1
 8002b68:	bd10      	pop	{r4, pc}
 8002b6a:	46c0      	nop			; (mov r8, r8)

08002b6c <__clzsi2>:
 8002b6c:	211c      	movs	r1, #28
 8002b6e:	2301      	movs	r3, #1
 8002b70:	041b      	lsls	r3, r3, #16
 8002b72:	4298      	cmp	r0, r3
 8002b74:	d301      	bcc.n	8002b7a <__clzsi2+0xe>
 8002b76:	0c00      	lsrs	r0, r0, #16
 8002b78:	3910      	subs	r1, #16
 8002b7a:	0a1b      	lsrs	r3, r3, #8
 8002b7c:	4298      	cmp	r0, r3
 8002b7e:	d301      	bcc.n	8002b84 <__clzsi2+0x18>
 8002b80:	0a00      	lsrs	r0, r0, #8
 8002b82:	3908      	subs	r1, #8
 8002b84:	091b      	lsrs	r3, r3, #4
 8002b86:	4298      	cmp	r0, r3
 8002b88:	d301      	bcc.n	8002b8e <__clzsi2+0x22>
 8002b8a:	0900      	lsrs	r0, r0, #4
 8002b8c:	3904      	subs	r1, #4
 8002b8e:	a202      	add	r2, pc, #8	; (adr r2, 8002b98 <__clzsi2+0x2c>)
 8002b90:	5c10      	ldrb	r0, [r2, r0]
 8002b92:	1840      	adds	r0, r0, r1
 8002b94:	4770      	bx	lr
 8002b96:	46c0      	nop			; (mov r8, r8)
 8002b98:	02020304 	.word	0x02020304
 8002b9c:	01010101 	.word	0x01010101
	...

08002ba8 <__eqsf2>:
 8002ba8:	b570      	push	{r4, r5, r6, lr}
 8002baa:	0042      	lsls	r2, r0, #1
 8002bac:	0245      	lsls	r5, r0, #9
 8002bae:	024e      	lsls	r6, r1, #9
 8002bb0:	004c      	lsls	r4, r1, #1
 8002bb2:	0fc3      	lsrs	r3, r0, #31
 8002bb4:	0a6d      	lsrs	r5, r5, #9
 8002bb6:	2001      	movs	r0, #1
 8002bb8:	0e12      	lsrs	r2, r2, #24
 8002bba:	0a76      	lsrs	r6, r6, #9
 8002bbc:	0e24      	lsrs	r4, r4, #24
 8002bbe:	0fc9      	lsrs	r1, r1, #31
 8002bc0:	2aff      	cmp	r2, #255	; 0xff
 8002bc2:	d006      	beq.n	8002bd2 <__eqsf2+0x2a>
 8002bc4:	2cff      	cmp	r4, #255	; 0xff
 8002bc6:	d003      	beq.n	8002bd0 <__eqsf2+0x28>
 8002bc8:	42a2      	cmp	r2, r4
 8002bca:	d101      	bne.n	8002bd0 <__eqsf2+0x28>
 8002bcc:	42b5      	cmp	r5, r6
 8002bce:	d006      	beq.n	8002bde <__eqsf2+0x36>
 8002bd0:	bd70      	pop	{r4, r5, r6, pc}
 8002bd2:	2d00      	cmp	r5, #0
 8002bd4:	d1fc      	bne.n	8002bd0 <__eqsf2+0x28>
 8002bd6:	2cff      	cmp	r4, #255	; 0xff
 8002bd8:	d1fa      	bne.n	8002bd0 <__eqsf2+0x28>
 8002bda:	2e00      	cmp	r6, #0
 8002bdc:	d1f8      	bne.n	8002bd0 <__eqsf2+0x28>
 8002bde:	428b      	cmp	r3, r1
 8002be0:	d006      	beq.n	8002bf0 <__eqsf2+0x48>
 8002be2:	2001      	movs	r0, #1
 8002be4:	2a00      	cmp	r2, #0
 8002be6:	d1f3      	bne.n	8002bd0 <__eqsf2+0x28>
 8002be8:	0028      	movs	r0, r5
 8002bea:	1e43      	subs	r3, r0, #1
 8002bec:	4198      	sbcs	r0, r3
 8002bee:	e7ef      	b.n	8002bd0 <__eqsf2+0x28>
 8002bf0:	2000      	movs	r0, #0
 8002bf2:	e7ed      	b.n	8002bd0 <__eqsf2+0x28>

08002bf4 <__gesf2>:
 8002bf4:	b570      	push	{r4, r5, r6, lr}
 8002bf6:	0042      	lsls	r2, r0, #1
 8002bf8:	0245      	lsls	r5, r0, #9
 8002bfa:	024e      	lsls	r6, r1, #9
 8002bfc:	004c      	lsls	r4, r1, #1
 8002bfe:	0fc3      	lsrs	r3, r0, #31
 8002c00:	0a6d      	lsrs	r5, r5, #9
 8002c02:	0e12      	lsrs	r2, r2, #24
 8002c04:	0a76      	lsrs	r6, r6, #9
 8002c06:	0e24      	lsrs	r4, r4, #24
 8002c08:	0fc8      	lsrs	r0, r1, #31
 8002c0a:	2aff      	cmp	r2, #255	; 0xff
 8002c0c:	d01b      	beq.n	8002c46 <__gesf2+0x52>
 8002c0e:	2cff      	cmp	r4, #255	; 0xff
 8002c10:	d00e      	beq.n	8002c30 <__gesf2+0x3c>
 8002c12:	2a00      	cmp	r2, #0
 8002c14:	d11b      	bne.n	8002c4e <__gesf2+0x5a>
 8002c16:	2c00      	cmp	r4, #0
 8002c18:	d101      	bne.n	8002c1e <__gesf2+0x2a>
 8002c1a:	2e00      	cmp	r6, #0
 8002c1c:	d01c      	beq.n	8002c58 <__gesf2+0x64>
 8002c1e:	2d00      	cmp	r5, #0
 8002c20:	d00c      	beq.n	8002c3c <__gesf2+0x48>
 8002c22:	4283      	cmp	r3, r0
 8002c24:	d01c      	beq.n	8002c60 <__gesf2+0x6c>
 8002c26:	2102      	movs	r1, #2
 8002c28:	1e58      	subs	r0, r3, #1
 8002c2a:	4008      	ands	r0, r1
 8002c2c:	3801      	subs	r0, #1
 8002c2e:	bd70      	pop	{r4, r5, r6, pc}
 8002c30:	2e00      	cmp	r6, #0
 8002c32:	d122      	bne.n	8002c7a <__gesf2+0x86>
 8002c34:	2a00      	cmp	r2, #0
 8002c36:	d1f4      	bne.n	8002c22 <__gesf2+0x2e>
 8002c38:	2d00      	cmp	r5, #0
 8002c3a:	d1f2      	bne.n	8002c22 <__gesf2+0x2e>
 8002c3c:	2800      	cmp	r0, #0
 8002c3e:	d1f6      	bne.n	8002c2e <__gesf2+0x3a>
 8002c40:	2001      	movs	r0, #1
 8002c42:	4240      	negs	r0, r0
 8002c44:	e7f3      	b.n	8002c2e <__gesf2+0x3a>
 8002c46:	2d00      	cmp	r5, #0
 8002c48:	d117      	bne.n	8002c7a <__gesf2+0x86>
 8002c4a:	2cff      	cmp	r4, #255	; 0xff
 8002c4c:	d0f0      	beq.n	8002c30 <__gesf2+0x3c>
 8002c4e:	2c00      	cmp	r4, #0
 8002c50:	d1e7      	bne.n	8002c22 <__gesf2+0x2e>
 8002c52:	2e00      	cmp	r6, #0
 8002c54:	d1e5      	bne.n	8002c22 <__gesf2+0x2e>
 8002c56:	e7e6      	b.n	8002c26 <__gesf2+0x32>
 8002c58:	2000      	movs	r0, #0
 8002c5a:	2d00      	cmp	r5, #0
 8002c5c:	d0e7      	beq.n	8002c2e <__gesf2+0x3a>
 8002c5e:	e7e2      	b.n	8002c26 <__gesf2+0x32>
 8002c60:	42a2      	cmp	r2, r4
 8002c62:	dc05      	bgt.n	8002c70 <__gesf2+0x7c>
 8002c64:	dbea      	blt.n	8002c3c <__gesf2+0x48>
 8002c66:	42b5      	cmp	r5, r6
 8002c68:	d802      	bhi.n	8002c70 <__gesf2+0x7c>
 8002c6a:	d3e7      	bcc.n	8002c3c <__gesf2+0x48>
 8002c6c:	2000      	movs	r0, #0
 8002c6e:	e7de      	b.n	8002c2e <__gesf2+0x3a>
 8002c70:	4243      	negs	r3, r0
 8002c72:	4158      	adcs	r0, r3
 8002c74:	0040      	lsls	r0, r0, #1
 8002c76:	3801      	subs	r0, #1
 8002c78:	e7d9      	b.n	8002c2e <__gesf2+0x3a>
 8002c7a:	2002      	movs	r0, #2
 8002c7c:	4240      	negs	r0, r0
 8002c7e:	e7d6      	b.n	8002c2e <__gesf2+0x3a>

08002c80 <__lesf2>:
 8002c80:	b570      	push	{r4, r5, r6, lr}
 8002c82:	0042      	lsls	r2, r0, #1
 8002c84:	0245      	lsls	r5, r0, #9
 8002c86:	024e      	lsls	r6, r1, #9
 8002c88:	004c      	lsls	r4, r1, #1
 8002c8a:	0fc3      	lsrs	r3, r0, #31
 8002c8c:	0a6d      	lsrs	r5, r5, #9
 8002c8e:	0e12      	lsrs	r2, r2, #24
 8002c90:	0a76      	lsrs	r6, r6, #9
 8002c92:	0e24      	lsrs	r4, r4, #24
 8002c94:	0fc8      	lsrs	r0, r1, #31
 8002c96:	2aff      	cmp	r2, #255	; 0xff
 8002c98:	d00b      	beq.n	8002cb2 <__lesf2+0x32>
 8002c9a:	2cff      	cmp	r4, #255	; 0xff
 8002c9c:	d00d      	beq.n	8002cba <__lesf2+0x3a>
 8002c9e:	2a00      	cmp	r2, #0
 8002ca0:	d11f      	bne.n	8002ce2 <__lesf2+0x62>
 8002ca2:	2c00      	cmp	r4, #0
 8002ca4:	d116      	bne.n	8002cd4 <__lesf2+0x54>
 8002ca6:	2e00      	cmp	r6, #0
 8002ca8:	d114      	bne.n	8002cd4 <__lesf2+0x54>
 8002caa:	2000      	movs	r0, #0
 8002cac:	2d00      	cmp	r5, #0
 8002cae:	d010      	beq.n	8002cd2 <__lesf2+0x52>
 8002cb0:	e009      	b.n	8002cc6 <__lesf2+0x46>
 8002cb2:	2d00      	cmp	r5, #0
 8002cb4:	d10c      	bne.n	8002cd0 <__lesf2+0x50>
 8002cb6:	2cff      	cmp	r4, #255	; 0xff
 8002cb8:	d113      	bne.n	8002ce2 <__lesf2+0x62>
 8002cba:	2e00      	cmp	r6, #0
 8002cbc:	d108      	bne.n	8002cd0 <__lesf2+0x50>
 8002cbe:	2a00      	cmp	r2, #0
 8002cc0:	d008      	beq.n	8002cd4 <__lesf2+0x54>
 8002cc2:	4283      	cmp	r3, r0
 8002cc4:	d012      	beq.n	8002cec <__lesf2+0x6c>
 8002cc6:	2102      	movs	r1, #2
 8002cc8:	1e58      	subs	r0, r3, #1
 8002cca:	4008      	ands	r0, r1
 8002ccc:	3801      	subs	r0, #1
 8002cce:	e000      	b.n	8002cd2 <__lesf2+0x52>
 8002cd0:	2002      	movs	r0, #2
 8002cd2:	bd70      	pop	{r4, r5, r6, pc}
 8002cd4:	2d00      	cmp	r5, #0
 8002cd6:	d1f4      	bne.n	8002cc2 <__lesf2+0x42>
 8002cd8:	2800      	cmp	r0, #0
 8002cda:	d1fa      	bne.n	8002cd2 <__lesf2+0x52>
 8002cdc:	2001      	movs	r0, #1
 8002cde:	4240      	negs	r0, r0
 8002ce0:	e7f7      	b.n	8002cd2 <__lesf2+0x52>
 8002ce2:	2c00      	cmp	r4, #0
 8002ce4:	d1ed      	bne.n	8002cc2 <__lesf2+0x42>
 8002ce6:	2e00      	cmp	r6, #0
 8002ce8:	d1eb      	bne.n	8002cc2 <__lesf2+0x42>
 8002cea:	e7ec      	b.n	8002cc6 <__lesf2+0x46>
 8002cec:	42a2      	cmp	r2, r4
 8002cee:	dc05      	bgt.n	8002cfc <__lesf2+0x7c>
 8002cf0:	dbf2      	blt.n	8002cd8 <__lesf2+0x58>
 8002cf2:	42b5      	cmp	r5, r6
 8002cf4:	d802      	bhi.n	8002cfc <__lesf2+0x7c>
 8002cf6:	d3ef      	bcc.n	8002cd8 <__lesf2+0x58>
 8002cf8:	2000      	movs	r0, #0
 8002cfa:	e7ea      	b.n	8002cd2 <__lesf2+0x52>
 8002cfc:	4243      	negs	r3, r0
 8002cfe:	4158      	adcs	r0, r3
 8002d00:	0040      	lsls	r0, r0, #1
 8002d02:	3801      	subs	r0, #1
 8002d04:	e7e5      	b.n	8002cd2 <__lesf2+0x52>
 8002d06:	46c0      	nop			; (mov r8, r8)

08002d08 <ICI2022_Init>:

/***************************************************************************/
/* INITIALIZE LIBRARY */
/***************************************************************************/

void ICI2022_Init(I2C_HandleTypeDef *i2cHandle, UART_HandleTypeDef *uartHandle) {
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]

	/* Init Struct */
	dev.i2cHandle = i2cHandle;
 8002d12:	4b05      	ldr	r3, [pc, #20]	; (8002d28 <ICI2022_Init+0x20>)
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	601a      	str	r2, [r3, #0]
	dev.uartHandle = uartHandle;
 8002d18:	4b03      	ldr	r3, [pc, #12]	; (8002d28 <ICI2022_Init+0x20>)
 8002d1a:	683a      	ldr	r2, [r7, #0]
 8002d1c:	605a      	str	r2, [r3, #4]

}
 8002d1e:	46c0      	nop			; (mov r8, r8)
 8002d20:	46bd      	mov	sp, r7
 8002d22:	b002      	add	sp, #8
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	46c0      	nop			; (mov r8, r8)
 8002d28:	20000288 	.word	0x20000288

08002d2c <u8x8_stm32_gpio_and_delay>:
/***************************************************************************/
/* OLED FUNCTIONS */
/***************************************************************************/

// Byte GPIO and Delay Callback
uint8_t u8x8_stm32_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
 8002d2c:	b590      	push	{r4, r7, lr}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	0008      	movs	r0, r1
 8002d36:	0011      	movs	r1, r2
 8002d38:	607b      	str	r3, [r7, #4]
 8002d3a:	240b      	movs	r4, #11
 8002d3c:	193b      	adds	r3, r7, r4
 8002d3e:	1c02      	adds	r2, r0, #0
 8002d40:	701a      	strb	r2, [r3, #0]
 8002d42:	230a      	movs	r3, #10
 8002d44:	18fb      	adds	r3, r7, r3
 8002d46:	1c0a      	adds	r2, r1, #0
 8002d48:	701a      	strb	r2, [r3, #0]
	switch (msg) {
 8002d4a:	193b      	adds	r3, r7, r4
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	2b28      	cmp	r3, #40	; 0x28
 8002d50:	d002      	beq.n	8002d58 <u8x8_stm32_gpio_and_delay+0x2c>
 8002d52:	2b29      	cmp	r3, #41	; 0x29
 8002d54:	d004      	beq.n	8002d60 <u8x8_stm32_gpio_and_delay+0x34>
 8002d56:	e00a      	b.n	8002d6e <u8x8_stm32_gpio_and_delay+0x42>
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		osDelay(1);
 8002d58:	2001      	movs	r0, #1
 8002d5a:	f008 fdf1 	bl	800b940 <osDelay>
		break;
 8002d5e:	e00b      	b.n	8002d78 <u8x8_stm32_gpio_and_delay+0x4c>
	case U8X8_MSG_DELAY_MILLI:
		osDelay(arg_int);
 8002d60:	230a      	movs	r3, #10
 8002d62:	18fb      	adds	r3, r7, r3
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	0018      	movs	r0, r3
 8002d68:	f008 fdea 	bl	800b940 <osDelay>
		break;
 8002d6c:	e004      	b.n	8002d78 <u8x8_stm32_gpio_and_delay+0x4c>
	default:
		u8x8_SetGPIOResult(u8x8, 1);			// default return value
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2227      	movs	r2, #39	; 0x27
 8002d72:	2101      	movs	r1, #1
 8002d74:	5499      	strb	r1, [r3, r2]
		break;
 8002d76:	46c0      	nop			; (mov r8, r8)
	}
	return 1;
 8002d78:	2301      	movs	r3, #1
}
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	b005      	add	sp, #20
 8002d80:	bd90      	pop	{r4, r7, pc}
	...

08002d84 <u8x8_byte_i2c>:

// Communication Callback
uint8_t u8x8_byte_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002d84:	b590      	push	{r4, r7, lr}
 8002d86:	b089      	sub	sp, #36	; 0x24
 8002d88:	af02      	add	r7, sp, #8
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	0008      	movs	r0, r1
 8002d8e:	0011      	movs	r1, r2
 8002d90:	607b      	str	r3, [r7, #4]
 8002d92:	240b      	movs	r4, #11
 8002d94:	193b      	adds	r3, r7, r4
 8002d96:	1c02      	adds	r2, r0, #0
 8002d98:	701a      	strb	r2, [r3, #0]
 8002d9a:	230a      	movs	r3, #10
 8002d9c:	18fb      	adds	r3, r7, r3
 8002d9e:	1c0a      	adds	r2, r1, #0
 8002da0:	701a      	strb	r2, [r3, #0]
	static uint8_t buffer[32];		/* u8g2/u8x8 will never send more than 32 bytes between START_TRANSFER and END_TRANSFER */
	static uint8_t buf_idx;
	uint8_t *data;

	switch(msg)
 8002da2:	193b      	adds	r3, r7, r4
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	3b14      	subs	r3, #20
 8002da8:	2b0c      	cmp	r3, #12
 8002daa:	d836      	bhi.n	8002e1a <u8x8_byte_i2c+0x96>
 8002dac:	009a      	lsls	r2, r3, #2
 8002dae:	4b1f      	ldr	r3, [pc, #124]	; (8002e2c <u8x8_byte_i2c+0xa8>)
 8002db0:	18d3      	adds	r3, r2, r3
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	469f      	mov	pc, r3
	{
	case U8X8_MSG_BYTE_SEND:
		data = (uint8_t *)arg_ptr;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	617b      	str	r3, [r7, #20]
		while( arg_int > 0 )
 8002dba:	e013      	b.n	8002de4 <u8x8_byte_i2c+0x60>
		{
			buffer[buf_idx++] = *data;
 8002dbc:	4b1c      	ldr	r3, [pc, #112]	; (8002e30 <u8x8_byte_i2c+0xac>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	1c5a      	adds	r2, r3, #1
 8002dc2:	b2d1      	uxtb	r1, r2
 8002dc4:	4a1a      	ldr	r2, [pc, #104]	; (8002e30 <u8x8_byte_i2c+0xac>)
 8002dc6:	7011      	strb	r1, [r2, #0]
 8002dc8:	001a      	movs	r2, r3
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	7819      	ldrb	r1, [r3, #0]
 8002dce:	4b19      	ldr	r3, [pc, #100]	; (8002e34 <u8x8_byte_i2c+0xb0>)
 8002dd0:	5499      	strb	r1, [r3, r2]
			data++;
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	617b      	str	r3, [r7, #20]
			arg_int--;
 8002dd8:	210a      	movs	r1, #10
 8002dda:	187b      	adds	r3, r7, r1
 8002ddc:	781a      	ldrb	r2, [r3, #0]
 8002dde:	187b      	adds	r3, r7, r1
 8002de0:	3a01      	subs	r2, #1
 8002de2:	701a      	strb	r2, [r3, #0]
		while( arg_int > 0 )
 8002de4:	230a      	movs	r3, #10
 8002de6:	18fb      	adds	r3, r7, r3
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1e6      	bne.n	8002dbc <u8x8_byte_i2c+0x38>
		}
		break;
 8002dee:	e017      	b.n	8002e20 <u8x8_byte_i2c+0x9c>
		break;
	case U8X8_MSG_BYTE_SET_DC:
		/* ignored for i2c */
		break;
	case U8X8_MSG_BYTE_START_TRANSFER:
		buf_idx = 0;
 8002df0:	4b0f      	ldr	r3, [pc, #60]	; (8002e30 <u8x8_byte_i2c+0xac>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	701a      	strb	r2, [r3, #0]
		break;
 8002df6:	e013      	b.n	8002e20 <u8x8_byte_i2c+0x9c>
	case U8X8_MSG_BYTE_END_TRANSFER:
		HAL_I2C_Master_Transmit(dev.i2cHandle, u8x8_GetI2CAddress(u8x8), buffer, buf_idx, 1000);
 8002df8:	4b0f      	ldr	r3, [pc, #60]	; (8002e38 <u8x8_byte_i2c+0xb4>)
 8002dfa:	6818      	ldr	r0, [r3, #0]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2224      	movs	r2, #36	; 0x24
 8002e00:	5c9b      	ldrb	r3, [r3, r2]
 8002e02:	b299      	uxth	r1, r3
 8002e04:	4b0a      	ldr	r3, [pc, #40]	; (8002e30 <u8x8_byte_i2c+0xac>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	b29c      	uxth	r4, r3
 8002e0a:	4a0a      	ldr	r2, [pc, #40]	; (8002e34 <u8x8_byte_i2c+0xb0>)
 8002e0c:	23fa      	movs	r3, #250	; 0xfa
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	9300      	str	r3, [sp, #0]
 8002e12:	0023      	movs	r3, r4
 8002e14:	f002 fe36 	bl	8005a84 <HAL_I2C_Master_Transmit>
		break;
 8002e18:	e002      	b.n	8002e20 <u8x8_byte_i2c+0x9c>
	default:
		return 0;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	e001      	b.n	8002e22 <u8x8_byte_i2c+0x9e>
		break;
 8002e1e:	46c0      	nop			; (mov r8, r8)
	}
	return 1;
 8002e20:	2301      	movs	r3, #1
}
 8002e22:	0018      	movs	r0, r3
 8002e24:	46bd      	mov	sp, r7
 8002e26:	b007      	add	sp, #28
 8002e28:	bd90      	pop	{r4, r7, pc}
 8002e2a:	46c0      	nop			; (mov r8, r8)
 8002e2c:	080133f0 	.word	0x080133f0
 8002e30:	20000298 	.word	0x20000298
 8002e34:	2000029c 	.word	0x2000029c
 8002e38:	20000288 	.word	0x20000288

08002e3c <map>:
/***************************************************************************/
/* MATH FUNCTIONS */
/***************************************************************************/

uint32_t map(uint32_t IN, uint32_t INmin, uint32_t INmax, uint32_t OUTmin, uint32_t OUTmax)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
 8002e48:	603b      	str	r3, [r7, #0]
    return ((((IN - INmin)*(OUTmax - OUTmin))/(INmax - INmin)) + OUTmin);
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	69b9      	ldr	r1, [r7, #24]
 8002e52:	683a      	ldr	r2, [r7, #0]
 8002e54:	1a8a      	subs	r2, r1, r2
 8002e56:	435a      	muls	r2, r3
 8002e58:	0010      	movs	r0, r2
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	0019      	movs	r1, r3
 8002e62:	f7fd f96d 	bl	8000140 <__udivsi3>
 8002e66:	0003      	movs	r3, r0
 8002e68:	001a      	movs	r2, r3
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	18d3      	adds	r3, r2, r3
}
 8002e6e:	0018      	movs	r0, r3
 8002e70:	46bd      	mov	sp, r7
 8002e72:	b004      	add	sp, #16
 8002e74:	bd80      	pop	{r7, pc}
	...

08002e78 <calc_needle>:

void calc_needle(needle *s)
{
 8002e78:	b5b0      	push	{r4, r5, r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6178      	str	r0, [r7, #20]
	s->end_x = (s->big * -sin(radians(s->angle))) + s->center_x;
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	0018      	movs	r0, r3
 8002e86:	f7ff fd11 	bl	80028ac <__aeabi_i2d>
 8002e8a:	0004      	movs	r4, r0
 8002e8c:	000d      	movs	r5, r1
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	0018      	movs	r0, r3
 8002e94:	f7ff fd0a 	bl	80028ac <__aeabi_i2d>
 8002e98:	0002      	movs	r2, r0
 8002e9a:	000b      	movs	r3, r1
 8002e9c:	0010      	movs	r0, r2
 8002e9e:	0019      	movs	r1, r3
 8002ea0:	f000 f91c 	bl	80030dc <radians>
 8002ea4:	0002      	movs	r2, r0
 8002ea6:	000b      	movs	r3, r1
 8002ea8:	0010      	movs	r0, r2
 8002eaa:	0019      	movs	r1, r3
 8002eac:	f00e fefe 	bl	8011cac <sin>
 8002eb0:	0002      	movs	r2, r0
 8002eb2:	000b      	movs	r3, r1
 8002eb4:	0011      	movs	r1, r2
 8002eb6:	60b9      	str	r1, [r7, #8]
 8002eb8:	2180      	movs	r1, #128	; 0x80
 8002eba:	0609      	lsls	r1, r1, #24
 8002ebc:	4059      	eors	r1, r3
 8002ebe:	60f9      	str	r1, [r7, #12]
 8002ec0:	68ba      	ldr	r2, [r7, #8]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	0020      	movs	r0, r4
 8002ec6:	0029      	movs	r1, r5
 8002ec8:	f7fe fe9e 	bl	8001c08 <__aeabi_dmul>
 8002ecc:	0002      	movs	r2, r0
 8002ece:	000b      	movs	r3, r1
 8002ed0:	0014      	movs	r4, r2
 8002ed2:	001d      	movs	r5, r3
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	0018      	movs	r0, r3
 8002eda:	f7ff fce7 	bl	80028ac <__aeabi_i2d>
 8002ede:	0002      	movs	r2, r0
 8002ee0:	000b      	movs	r3, r1
 8002ee2:	0020      	movs	r0, r4
 8002ee4:	0029      	movs	r1, r5
 8002ee6:	f7fd ff51 	bl	8000d8c <__aeabi_dadd>
 8002eea:	0002      	movs	r2, r0
 8002eec:	000b      	movs	r3, r1
 8002eee:	0010      	movs	r0, r2
 8002ef0:	0019      	movs	r1, r3
 8002ef2:	f7ff fca5 	bl	8002840 <__aeabi_d2iz>
 8002ef6:	0002      	movs	r2, r0
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	619a      	str	r2, [r3, #24]
	s->end_y = (s->big * cos(radians(s->angle))) + s->center_y;
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	0018      	movs	r0, r3
 8002f02:	f7ff fcd3 	bl	80028ac <__aeabi_i2d>
 8002f06:	0004      	movs	r4, r0
 8002f08:	000d      	movs	r5, r1
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	0018      	movs	r0, r3
 8002f10:	f7ff fccc 	bl	80028ac <__aeabi_i2d>
 8002f14:	0002      	movs	r2, r0
 8002f16:	000b      	movs	r3, r1
 8002f18:	0010      	movs	r0, r2
 8002f1a:	0019      	movs	r1, r3
 8002f1c:	f000 f8de 	bl	80030dc <radians>
 8002f20:	0002      	movs	r2, r0
 8002f22:	000b      	movs	r3, r1
 8002f24:	0010      	movs	r0, r2
 8002f26:	0019      	movs	r1, r3
 8002f28:	f00e fe7e 	bl	8011c28 <cos>
 8002f2c:	0002      	movs	r2, r0
 8002f2e:	000b      	movs	r3, r1
 8002f30:	0020      	movs	r0, r4
 8002f32:	0029      	movs	r1, r5
 8002f34:	f7fe fe68 	bl	8001c08 <__aeabi_dmul>
 8002f38:	0002      	movs	r2, r0
 8002f3a:	000b      	movs	r3, r1
 8002f3c:	0014      	movs	r4, r2
 8002f3e:	001d      	movs	r5, r3
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	0018      	movs	r0, r3
 8002f46:	f7ff fcb1 	bl	80028ac <__aeabi_i2d>
 8002f4a:	0002      	movs	r2, r0
 8002f4c:	000b      	movs	r3, r1
 8002f4e:	0020      	movs	r0, r4
 8002f50:	0029      	movs	r1, r5
 8002f52:	f7fd ff1b 	bl	8000d8c <__aeabi_dadd>
 8002f56:	0002      	movs	r2, r0
 8002f58:	000b      	movs	r3, r1
 8002f5a:	0010      	movs	r0, r2
 8002f5c:	0019      	movs	r1, r3
 8002f5e:	f7ff fc6f 	bl	8002840 <__aeabi_d2iz>
 8002f62:	0002      	movs	r2, r0
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	61da      	str	r2, [r3, #28]
	s->start_x = (s->small * -sin(radians(s->angle + 180.0))) + s->center_x;
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	f7ff fc9d 	bl	80028ac <__aeabi_i2d>
 8002f72:	0004      	movs	r4, r0
 8002f74:	000d      	movs	r5, r1
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	0018      	movs	r0, r3
 8002f7c:	f7ff fc96 	bl	80028ac <__aeabi_i2d>
 8002f80:	2200      	movs	r2, #0
 8002f82:	4b39      	ldr	r3, [pc, #228]	; (8003068 <calc_needle+0x1f0>)
 8002f84:	f7fd ff02 	bl	8000d8c <__aeabi_dadd>
 8002f88:	0002      	movs	r2, r0
 8002f8a:	000b      	movs	r3, r1
 8002f8c:	0010      	movs	r0, r2
 8002f8e:	0019      	movs	r1, r3
 8002f90:	f000 f8a4 	bl	80030dc <radians>
 8002f94:	0002      	movs	r2, r0
 8002f96:	000b      	movs	r3, r1
 8002f98:	0010      	movs	r0, r2
 8002f9a:	0019      	movs	r1, r3
 8002f9c:	f00e fe86 	bl	8011cac <sin>
 8002fa0:	0002      	movs	r2, r0
 8002fa2:	000b      	movs	r3, r1
 8002fa4:	0011      	movs	r1, r2
 8002fa6:	6039      	str	r1, [r7, #0]
 8002fa8:	2180      	movs	r1, #128	; 0x80
 8002faa:	0609      	lsls	r1, r1, #24
 8002fac:	4059      	eors	r1, r3
 8002fae:	6079      	str	r1, [r7, #4]
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	0020      	movs	r0, r4
 8002fb6:	0029      	movs	r1, r5
 8002fb8:	f7fe fe26 	bl	8001c08 <__aeabi_dmul>
 8002fbc:	0002      	movs	r2, r0
 8002fbe:	000b      	movs	r3, r1
 8002fc0:	0014      	movs	r4, r2
 8002fc2:	001d      	movs	r5, r3
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	0018      	movs	r0, r3
 8002fca:	f7ff fc6f 	bl	80028ac <__aeabi_i2d>
 8002fce:	0002      	movs	r2, r0
 8002fd0:	000b      	movs	r3, r1
 8002fd2:	0020      	movs	r0, r4
 8002fd4:	0029      	movs	r1, r5
 8002fd6:	f7fd fed9 	bl	8000d8c <__aeabi_dadd>
 8002fda:	0002      	movs	r2, r0
 8002fdc:	000b      	movs	r3, r1
 8002fde:	0010      	movs	r0, r2
 8002fe0:	0019      	movs	r1, r3
 8002fe2:	f7ff fc2d 	bl	8002840 <__aeabi_d2iz>
 8002fe6:	0002      	movs	r2, r0
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	611a      	str	r2, [r3, #16]
	s->start_y = (s->small * cos(radians(s->angle + 180.0))) + s->center_y;
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	f7ff fc5b 	bl	80028ac <__aeabi_i2d>
 8002ff6:	0004      	movs	r4, r0
 8002ff8:	000d      	movs	r5, r1
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	0018      	movs	r0, r3
 8003000:	f7ff fc54 	bl	80028ac <__aeabi_i2d>
 8003004:	2200      	movs	r2, #0
 8003006:	4b18      	ldr	r3, [pc, #96]	; (8003068 <calc_needle+0x1f0>)
 8003008:	f7fd fec0 	bl	8000d8c <__aeabi_dadd>
 800300c:	0002      	movs	r2, r0
 800300e:	000b      	movs	r3, r1
 8003010:	0010      	movs	r0, r2
 8003012:	0019      	movs	r1, r3
 8003014:	f000 f862 	bl	80030dc <radians>
 8003018:	0002      	movs	r2, r0
 800301a:	000b      	movs	r3, r1
 800301c:	0010      	movs	r0, r2
 800301e:	0019      	movs	r1, r3
 8003020:	f00e fe02 	bl	8011c28 <cos>
 8003024:	0002      	movs	r2, r0
 8003026:	000b      	movs	r3, r1
 8003028:	0020      	movs	r0, r4
 800302a:	0029      	movs	r1, r5
 800302c:	f7fe fdec 	bl	8001c08 <__aeabi_dmul>
 8003030:	0002      	movs	r2, r0
 8003032:	000b      	movs	r3, r1
 8003034:	0014      	movs	r4, r2
 8003036:	001d      	movs	r5, r3
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	0018      	movs	r0, r3
 800303e:	f7ff fc35 	bl	80028ac <__aeabi_i2d>
 8003042:	0002      	movs	r2, r0
 8003044:	000b      	movs	r3, r1
 8003046:	0020      	movs	r0, r4
 8003048:	0029      	movs	r1, r5
 800304a:	f7fd fe9f 	bl	8000d8c <__aeabi_dadd>
 800304e:	0002      	movs	r2, r0
 8003050:	000b      	movs	r3, r1
 8003052:	0010      	movs	r0, r2
 8003054:	0019      	movs	r1, r3
 8003056:	f7ff fbf3 	bl	8002840 <__aeabi_d2iz>
 800305a:	0002      	movs	r2, r0
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	615a      	str	r2, [r3, #20]
}
 8003060:	46c0      	nop			; (mov r8, r8)
 8003062:	46bd      	mov	sp, r7
 8003064:	b006      	add	sp, #24
 8003066:	bdb0      	pop	{r4, r5, r7, pc}
 8003068:	40668000 	.word	0x40668000

0800306c <calc_rpm>:

void calc_rpm(void)
{
 800306c:	b590      	push	{r4, r7, lr}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
/*
 * CALCULATE RPM TABLE
 */
for(int i = 2; i < 11; i++)
 8003072:	2302      	movs	r3, #2
 8003074:	607b      	str	r3, [r7, #4]
 8003076:	e022      	b.n	80030be <calc_rpm+0x52>
{
	steps_sec = 1000/(i);									// pf = pulse frequency
 8003078:	6879      	ldr	r1, [r7, #4]
 800307a:	23fa      	movs	r3, #250	; 0xfa
 800307c:	0098      	lsls	r0, r3, #2
 800307e:	f7fd f8e9 	bl	8000254 <__divsi3>
 8003082:	0003      	movs	r3, r0
 8003084:	0018      	movs	r0, r3
 8003086:	f7fd fe33 	bl	8000cf0 <__aeabi_i2f>
 800308a:	1c02      	adds	r2, r0, #0
 800308c:	4b10      	ldr	r3, [pc, #64]	; (80030d0 <calc_rpm+0x64>)
 800308e:	601a      	str	r2, [r3, #0]
	rpm[i-2] = 60*(steps_sec/4096);							// 4096 half steps
 8003090:	4b0f      	ldr	r3, [pc, #60]	; (80030d0 <calc_rpm+0x64>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	218b      	movs	r1, #139	; 0x8b
 8003096:	05c9      	lsls	r1, r1, #23
 8003098:	1c18      	adds	r0, r3, #0
 800309a:	f7fd fa1d 	bl	80004d8 <__aeabi_fdiv>
 800309e:	1c03      	adds	r3, r0, #0
 80030a0:	1c1a      	adds	r2, r3, #0
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	1e9c      	subs	r4, r3, #2
 80030a6:	490b      	ldr	r1, [pc, #44]	; (80030d4 <calc_rpm+0x68>)
 80030a8:	1c10      	adds	r0, r2, #0
 80030aa:	f7fd fb2d 	bl	8000708 <__aeabi_fmul>
 80030ae:	1c03      	adds	r3, r0, #0
 80030b0:	1c19      	adds	r1, r3, #0
 80030b2:	4b09      	ldr	r3, [pc, #36]	; (80030d8 <calc_rpm+0x6c>)
 80030b4:	00a2      	lsls	r2, r4, #2
 80030b6:	50d1      	str	r1, [r2, r3]
for(int i = 2; i < 11; i++)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3301      	adds	r3, #1
 80030bc:	607b      	str	r3, [r7, #4]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2b0a      	cmp	r3, #10
 80030c2:	ddd9      	ble.n	8003078 <calc_rpm+0xc>
}
}
 80030c4:	46c0      	nop			; (mov r8, r8)
 80030c6:	46c0      	nop			; (mov r8, r8)
 80030c8:	46bd      	mov	sp, r7
 80030ca:	b003      	add	sp, #12
 80030cc:	bd90      	pop	{r4, r7, pc}
 80030ce:	46c0      	nop			; (mov r8, r8)
 80030d0:	20000260 	.word	0x20000260
 80030d4:	42700000 	.word	0x42700000
 80030d8:	20000264 	.word	0x20000264

080030dc <radians>:

double radians(double degrees)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6038      	str	r0, [r7, #0]
 80030e4:	6079      	str	r1, [r7, #4]
	return degrees * M_PI / 180.0;
 80030e6:	4a0a      	ldr	r2, [pc, #40]	; (8003110 <radians+0x34>)
 80030e8:	4b0a      	ldr	r3, [pc, #40]	; (8003114 <radians+0x38>)
 80030ea:	6838      	ldr	r0, [r7, #0]
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	f7fe fd8b 	bl	8001c08 <__aeabi_dmul>
 80030f2:	0002      	movs	r2, r0
 80030f4:	000b      	movs	r3, r1
 80030f6:	0010      	movs	r0, r2
 80030f8:	0019      	movs	r1, r3
 80030fa:	2200      	movs	r2, #0
 80030fc:	4b06      	ldr	r3, [pc, #24]	; (8003118 <radians+0x3c>)
 80030fe:	f7fe f981 	bl	8001404 <__aeabi_ddiv>
 8003102:	0002      	movs	r2, r0
 8003104:	000b      	movs	r3, r1
}
 8003106:	0010      	movs	r0, r2
 8003108:	0019      	movs	r1, r3
 800310a:	46bd      	mov	sp, r7
 800310c:	b002      	add	sp, #8
 800310e:	bd80      	pop	{r7, pc}
 8003110:	54442d18 	.word	0x54442d18
 8003114:	400921fb 	.word	0x400921fb
 8003118:	40668000 	.word	0x40668000

0800311c <send_uart>:
/***************************************************************************/
/* LOW-LEVEL FUNCTIONS */
/***************************************************************************/

void send_uart(char *string)
{
 800311c:	b590      	push	{r4, r7, lr}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(dev.uartHandle, (uint8_t *)string, strlen(string), HAL_MAX_DELAY);
 8003124:	4b08      	ldr	r3, [pc, #32]	; (8003148 <send_uart+0x2c>)
 8003126:	685c      	ldr	r4, [r3, #4]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	0018      	movs	r0, r3
 800312c:	f7fc ffec 	bl	8000108 <strlen>
 8003130:	0003      	movs	r3, r0
 8003132:	b29a      	uxth	r2, r3
 8003134:	2301      	movs	r3, #1
 8003136:	425b      	negs	r3, r3
 8003138:	6879      	ldr	r1, [r7, #4]
 800313a:	0020      	movs	r0, r4
 800313c:	f004 fdaa 	bl	8007c94 <HAL_UART_Transmit>
}
 8003140:	46c0      	nop			; (mov r8, r8)
 8003142:	46bd      	mov	sp, r7
 8003144:	b003      	add	sp, #12
 8003146:	bd90      	pop	{r4, r7, pc}
 8003148:	20000288 	.word	0x20000288

0800314c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003150:	f001 fb6a 	bl	8004828 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003154:	f000 f8b4 	bl	80032c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003158:	f000 fa74 	bl	8003644 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800315c:	f000 fa42 	bl	80035e4 <MX_USART2_UART_Init>
  MX_ADC_Init();
 8003160:	f000 f916 	bl	8003390 <MX_ADC_Init>
  MX_I2C1_Init();
 8003164:	f000 f97c 	bl	8003460 <MX_I2C1_Init>
  MX_TIM3_Init();
 8003168:	f000 f9ba 	bl	80034e0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  ICI2022_Init(&hi2c1, &huart2);
 800316c:	4a37      	ldr	r2, [pc, #220]	; (800324c <main+0x100>)
 800316e:	4b38      	ldr	r3, [pc, #224]	; (8003250 <main+0x104>)
 8003170:	0011      	movs	r1, r2
 8003172:	0018      	movs	r0, r3
 8003174:	f7ff fdc8 	bl	8002d08 <ICI2022_Init>
  calc_rpm();
 8003178:	f7ff ff78 	bl	800306c <calc_rpm>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800317c:	f008 fa82 	bl	800b684 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of Adc_Sem */
  Adc_SemHandle = osSemaphoreNew(1, 1, &Adc_Sem_attributes);
 8003180:	4b34      	ldr	r3, [pc, #208]	; (8003254 <main+0x108>)
 8003182:	001a      	movs	r2, r3
 8003184:	2101      	movs	r1, #1
 8003186:	2001      	movs	r0, #1
 8003188:	f008 fc02 	bl	800b990 <osSemaphoreNew>
 800318c:	0002      	movs	r2, r0
 800318e:	4b32      	ldr	r3, [pc, #200]	; (8003258 <main+0x10c>)
 8003190:	601a      	str	r2, [r3, #0]

  /* creation of Rx_Sem */
  Rx_SemHandle = osSemaphoreNew(1, 1, &Rx_Sem_attributes);
 8003192:	4b32      	ldr	r3, [pc, #200]	; (800325c <main+0x110>)
 8003194:	001a      	movs	r2, r3
 8003196:	2101      	movs	r1, #1
 8003198:	2001      	movs	r0, #1
 800319a:	f008 fbf9 	bl	800b990 <osSemaphoreNew>
 800319e:	0002      	movs	r2, r0
 80031a0:	4b2f      	ldr	r3, [pc, #188]	; (8003260 <main+0x114>)
 80031a2:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  Rx_SemHandle = osSemaphoreNew(1, 0, &Rx_Sem_attributes);
 80031a4:	4b2d      	ldr	r3, [pc, #180]	; (800325c <main+0x110>)
 80031a6:	001a      	movs	r2, r3
 80031a8:	2100      	movs	r1, #0
 80031aa:	2001      	movs	r0, #1
 80031ac:	f008 fbf0 	bl	800b990 <osSemaphoreNew>
 80031b0:	0002      	movs	r2, r0
 80031b2:	4b2b      	ldr	r3, [pc, #172]	; (8003260 <main+0x114>)
 80031b4:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of lock_queue */
  lock_queueHandle = osMessageQueueNew (5, sizeof(lock_q), &lock_queue_attributes);
 80031b6:	4b2b      	ldr	r3, [pc, #172]	; (8003264 <main+0x118>)
 80031b8:	001a      	movs	r2, r3
 80031ba:	2104      	movs	r1, #4
 80031bc:	2005      	movs	r0, #5
 80031be:	f008 fd35 	bl	800bc2c <osMessageQueueNew>
 80031c2:	0002      	movs	r2, r0
 80031c4:	4b28      	ldr	r3, [pc, #160]	; (8003268 <main+0x11c>)
 80031c6:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80031c8:	4a28      	ldr	r2, [pc, #160]	; (800326c <main+0x120>)
 80031ca:	4b29      	ldr	r3, [pc, #164]	; (8003270 <main+0x124>)
 80031cc:	2100      	movs	r1, #0
 80031ce:	0018      	movs	r0, r3
 80031d0:	f008 fab2 	bl	800b738 <osThreadNew>
 80031d4:	0002      	movs	r2, r0
 80031d6:	4b27      	ldr	r3, [pc, #156]	; (8003274 <main+0x128>)
 80031d8:	601a      	str	r2, [r3, #0]

  /* creation of OLED */
  OLEDHandle = osThreadNew(oled_update, NULL, &OLED_attributes);
 80031da:	4a27      	ldr	r2, [pc, #156]	; (8003278 <main+0x12c>)
 80031dc:	4b27      	ldr	r3, [pc, #156]	; (800327c <main+0x130>)
 80031de:	2100      	movs	r1, #0
 80031e0:	0018      	movs	r0, r3
 80031e2:	f008 faa9 	bl	800b738 <osThreadNew>
 80031e6:	0002      	movs	r2, r0
 80031e8:	4b25      	ldr	r3, [pc, #148]	; (8003280 <main+0x134>)
 80031ea:	601a      	str	r2, [r3, #0]

  /* creation of ADC */
  ADCHandle = osThreadNew(adc_read, NULL, &ADC_attributes);
 80031ec:	4a25      	ldr	r2, [pc, #148]	; (8003284 <main+0x138>)
 80031ee:	4b26      	ldr	r3, [pc, #152]	; (8003288 <main+0x13c>)
 80031f0:	2100      	movs	r1, #0
 80031f2:	0018      	movs	r0, r3
 80031f4:	f008 faa0 	bl	800b738 <osThreadNew>
 80031f8:	0002      	movs	r2, r0
 80031fa:	4b24      	ldr	r3, [pc, #144]	; (800328c <main+0x140>)
 80031fc:	601a      	str	r2, [r3, #0]

  /* creation of SERVO */
  SERVOHandle = osThreadNew(servo_pos, NULL, &SERVO_attributes);
 80031fe:	4a24      	ldr	r2, [pc, #144]	; (8003290 <main+0x144>)
 8003200:	4b24      	ldr	r3, [pc, #144]	; (8003294 <main+0x148>)
 8003202:	2100      	movs	r1, #0
 8003204:	0018      	movs	r0, r3
 8003206:	f008 fa97 	bl	800b738 <osThreadNew>
 800320a:	0002      	movs	r2, r0
 800320c:	4b22      	ldr	r3, [pc, #136]	; (8003298 <main+0x14c>)
 800320e:	601a      	str	r2, [r3, #0]

  /* creation of STEPPER */
  STEPPERHandle = osThreadNew(stepper_fx, NULL, &STEPPER_attributes);
 8003210:	4a22      	ldr	r2, [pc, #136]	; (800329c <main+0x150>)
 8003212:	4b23      	ldr	r3, [pc, #140]	; (80032a0 <main+0x154>)
 8003214:	2100      	movs	r1, #0
 8003216:	0018      	movs	r0, r3
 8003218:	f008 fa8e 	bl	800b738 <osThreadNew>
 800321c:	0002      	movs	r2, r0
 800321e:	4b21      	ldr	r3, [pc, #132]	; (80032a4 <main+0x158>)
 8003220:	601a      	str	r2, [r3, #0]

  /* creation of SERIAL */
  SERIALHandle = osThreadNew(serial_fx, NULL, &SERIAL_attributes);
 8003222:	4a21      	ldr	r2, [pc, #132]	; (80032a8 <main+0x15c>)
 8003224:	4b21      	ldr	r3, [pc, #132]	; (80032ac <main+0x160>)
 8003226:	2100      	movs	r1, #0
 8003228:	0018      	movs	r0, r3
 800322a:	f008 fa85 	bl	800b738 <osThreadNew>
 800322e:	0002      	movs	r2, r0
 8003230:	4b1f      	ldr	r3, [pc, #124]	; (80032b0 <main+0x164>)
 8003232:	601a      	str	r2, [r3, #0]

  /* creation of LOCK */
  LOCKHandle = osThreadNew(servo_lock, NULL, &LOCK_attributes);
 8003234:	4a1f      	ldr	r2, [pc, #124]	; (80032b4 <main+0x168>)
 8003236:	4b20      	ldr	r3, [pc, #128]	; (80032b8 <main+0x16c>)
 8003238:	2100      	movs	r1, #0
 800323a:	0018      	movs	r0, r3
 800323c:	f008 fa7c 	bl	800b738 <osThreadNew>
 8003240:	0002      	movs	r2, r0
 8003242:	4b1e      	ldr	r3, [pc, #120]	; (80032bc <main+0x170>)
 8003244:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8003246:	f008 fa49 	bl	800b6dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800324a:	e7fe      	b.n	800324a <main+0xfe>
 800324c:	20000390 	.word	0x20000390
 8003250:	200002fc 	.word	0x200002fc
 8003254:	08013538 	.word	0x08013538
 8003258:	20000434 	.word	0x20000434
 800325c:	08013548 	.word	0x08013548
 8003260:	20000438 	.word	0x20000438
 8003264:	08013520 	.word	0x08013520
 8003268:	20000430 	.word	0x20000430
 800326c:	08013424 	.word	0x08013424
 8003270:	080038bd 	.word	0x080038bd
 8003274:	20000414 	.word	0x20000414
 8003278:	08013448 	.word	0x08013448
 800327c:	080038d1 	.word	0x080038d1
 8003280:	20000418 	.word	0x20000418
 8003284:	0801346c 	.word	0x0801346c
 8003288:	08003c5d 	.word	0x08003c5d
 800328c:	2000041c 	.word	0x2000041c
 8003290:	08013490 	.word	0x08013490
 8003294:	08003d21 	.word	0x08003d21
 8003298:	20000420 	.word	0x20000420
 800329c:	080134b4 	.word	0x080134b4
 80032a0:	08003d61 	.word	0x08003d61
 80032a4:	20000424 	.word	0x20000424
 80032a8:	080134d8 	.word	0x080134d8
 80032ac:	08003e29 	.word	0x08003e29
 80032b0:	20000428 	.word	0x20000428
 80032b4:	080134fc 	.word	0x080134fc
 80032b8:	080040b5 	.word	0x080040b5
 80032bc:	2000042c 	.word	0x2000042c

080032c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032c0:	b590      	push	{r4, r7, lr}
 80032c2:	b097      	sub	sp, #92	; 0x5c
 80032c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032c6:	2428      	movs	r4, #40	; 0x28
 80032c8:	193b      	adds	r3, r7, r4
 80032ca:	0018      	movs	r0, r3
 80032cc:	2330      	movs	r3, #48	; 0x30
 80032ce:	001a      	movs	r2, r3
 80032d0:	2100      	movs	r1, #0
 80032d2:	f00b fd09 	bl	800ece8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032d6:	2318      	movs	r3, #24
 80032d8:	18fb      	adds	r3, r7, r3
 80032da:	0018      	movs	r0, r3
 80032dc:	2310      	movs	r3, #16
 80032de:	001a      	movs	r2, r3
 80032e0:	2100      	movs	r1, #0
 80032e2:	f00b fd01 	bl	800ece8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032e6:	1d3b      	adds	r3, r7, #4
 80032e8:	0018      	movs	r0, r3
 80032ea:	2314      	movs	r3, #20
 80032ec:	001a      	movs	r2, r3
 80032ee:	2100      	movs	r1, #0
 80032f0:	f00b fcfa 	bl	800ece8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80032f4:	0021      	movs	r1, r4
 80032f6:	187b      	adds	r3, r7, r1
 80032f8:	2212      	movs	r2, #18
 80032fa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80032fc:	187b      	adds	r3, r7, r1
 80032fe:	2201      	movs	r2, #1
 8003300:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8003302:	187b      	adds	r3, r7, r1
 8003304:	2201      	movs	r2, #1
 8003306:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003308:	187b      	adds	r3, r7, r1
 800330a:	2210      	movs	r2, #16
 800330c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800330e:	187b      	adds	r3, r7, r1
 8003310:	2210      	movs	r2, #16
 8003312:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003314:	187b      	adds	r3, r7, r1
 8003316:	2202      	movs	r2, #2
 8003318:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800331a:	187b      	adds	r3, r7, r1
 800331c:	2280      	movs	r2, #128	; 0x80
 800331e:	0212      	lsls	r2, r2, #8
 8003320:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8003322:	187b      	adds	r3, r7, r1
 8003324:	2280      	movs	r2, #128	; 0x80
 8003326:	0352      	lsls	r2, r2, #13
 8003328:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800332a:	187b      	adds	r3, r7, r1
 800332c:	2200      	movs	r2, #0
 800332e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003330:	187b      	adds	r3, r7, r1
 8003332:	0018      	movs	r0, r3
 8003334:	f002 fed2 	bl	80060dc <HAL_RCC_OscConfig>
 8003338:	1e03      	subs	r3, r0, #0
 800333a:	d001      	beq.n	8003340 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800333c:	f000 ff58 	bl	80041f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003340:	2118      	movs	r1, #24
 8003342:	187b      	adds	r3, r7, r1
 8003344:	2207      	movs	r2, #7
 8003346:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003348:	187b      	adds	r3, r7, r1
 800334a:	2202      	movs	r2, #2
 800334c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800334e:	187b      	adds	r3, r7, r1
 8003350:	2200      	movs	r2, #0
 8003352:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003354:	187b      	adds	r3, r7, r1
 8003356:	2200      	movs	r2, #0
 8003358:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800335a:	187b      	adds	r3, r7, r1
 800335c:	2101      	movs	r1, #1
 800335e:	0018      	movs	r0, r3
 8003360:	f003 f9da 	bl	8006718 <HAL_RCC_ClockConfig>
 8003364:	1e03      	subs	r3, r0, #0
 8003366:	d001      	beq.n	800336c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8003368:	f000 ff42 	bl	80041f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800336c:	1d3b      	adds	r3, r7, #4
 800336e:	2220      	movs	r2, #32
 8003370:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8003372:	1d3b      	adds	r3, r7, #4
 8003374:	2200      	movs	r2, #0
 8003376:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003378:	1d3b      	adds	r3, r7, #4
 800337a:	0018      	movs	r0, r3
 800337c:	f003 fb4a 	bl	8006a14 <HAL_RCCEx_PeriphCLKConfig>
 8003380:	1e03      	subs	r3, r0, #0
 8003382:	d001      	beq.n	8003388 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8003384:	f000 ff34 	bl	80041f0 <Error_Handler>
  }
}
 8003388:	46c0      	nop			; (mov r8, r8)
 800338a:	46bd      	mov	sp, r7
 800338c:	b017      	add	sp, #92	; 0x5c
 800338e:	bd90      	pop	{r4, r7, pc}

08003390 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003396:	1d3b      	adds	r3, r7, #4
 8003398:	0018      	movs	r0, r3
 800339a:	230c      	movs	r3, #12
 800339c:	001a      	movs	r2, r3
 800339e:	2100      	movs	r1, #0
 80033a0:	f00b fca2 	bl	800ece8 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80033a4:	4b2c      	ldr	r3, [pc, #176]	; (8003458 <MX_ADC_Init+0xc8>)
 80033a6:	4a2d      	ldr	r2, [pc, #180]	; (800345c <MX_ADC_Init+0xcc>)
 80033a8:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80033aa:	4b2b      	ldr	r3, [pc, #172]	; (8003458 <MX_ADC_Init+0xc8>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80033b0:	4b29      	ldr	r3, [pc, #164]	; (8003458 <MX_ADC_Init+0xc8>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80033b6:	4b28      	ldr	r3, [pc, #160]	; (8003458 <MX_ADC_Init+0xc8>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80033bc:	4b26      	ldr	r3, [pc, #152]	; (8003458 <MX_ADC_Init+0xc8>)
 80033be:	2201      	movs	r2, #1
 80033c0:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80033c2:	4b25      	ldr	r3, [pc, #148]	; (8003458 <MX_ADC_Init+0xc8>)
 80033c4:	2204      	movs	r2, #4
 80033c6:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80033c8:	4b23      	ldr	r3, [pc, #140]	; (8003458 <MX_ADC_Init+0xc8>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80033ce:	4b22      	ldr	r3, [pc, #136]	; (8003458 <MX_ADC_Init+0xc8>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80033d4:	4b20      	ldr	r3, [pc, #128]	; (8003458 <MX_ADC_Init+0xc8>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 80033da:	4b1f      	ldr	r3, [pc, #124]	; (8003458 <MX_ADC_Init+0xc8>)
 80033dc:	2201      	movs	r2, #1
 80033de:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80033e0:	4b1d      	ldr	r3, [pc, #116]	; (8003458 <MX_ADC_Init+0xc8>)
 80033e2:	22c2      	movs	r2, #194	; 0xc2
 80033e4:	32ff      	adds	r2, #255	; 0xff
 80033e6:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80033e8:	4b1b      	ldr	r3, [pc, #108]	; (8003458 <MX_ADC_Init+0xc8>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80033ee:	4b1a      	ldr	r3, [pc, #104]	; (8003458 <MX_ADC_Init+0xc8>)
 80033f0:	2224      	movs	r2, #36	; 0x24
 80033f2:	2100      	movs	r1, #0
 80033f4:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80033f6:	4b18      	ldr	r3, [pc, #96]	; (8003458 <MX_ADC_Init+0xc8>)
 80033f8:	2201      	movs	r2, #1
 80033fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80033fc:	4b16      	ldr	r3, [pc, #88]	; (8003458 <MX_ADC_Init+0xc8>)
 80033fe:	0018      	movs	r0, r3
 8003400:	f001 fa42 	bl	8004888 <HAL_ADC_Init>
 8003404:	1e03      	subs	r3, r0, #0
 8003406:	d001      	beq.n	800340c <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8003408:	f000 fef2 	bl	80041f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800340c:	1d3b      	adds	r3, r7, #4
 800340e:	2200      	movs	r2, #0
 8003410:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003412:	1d3b      	adds	r3, r7, #4
 8003414:	2280      	movs	r2, #128	; 0x80
 8003416:	0152      	lsls	r2, r2, #5
 8003418:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 800341a:	1d3b      	adds	r3, r7, #4
 800341c:	2202      	movs	r2, #2
 800341e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003420:	1d3a      	adds	r2, r7, #4
 8003422:	4b0d      	ldr	r3, [pc, #52]	; (8003458 <MX_ADC_Init+0xc8>)
 8003424:	0011      	movs	r1, r2
 8003426:	0018      	movs	r0, r3
 8003428:	f001 fcfe 	bl	8004e28 <HAL_ADC_ConfigChannel>
 800342c:	1e03      	subs	r3, r0, #0
 800342e:	d001      	beq.n	8003434 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8003430:	f000 fede 	bl	80041f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003434:	1d3b      	adds	r3, r7, #4
 8003436:	2201      	movs	r2, #1
 8003438:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800343a:	1d3a      	adds	r2, r7, #4
 800343c:	4b06      	ldr	r3, [pc, #24]	; (8003458 <MX_ADC_Init+0xc8>)
 800343e:	0011      	movs	r1, r2
 8003440:	0018      	movs	r0, r3
 8003442:	f001 fcf1 	bl	8004e28 <HAL_ADC_ConfigChannel>
 8003446:	1e03      	subs	r3, r0, #0
 8003448:	d001      	beq.n	800344e <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 800344a:	f000 fed1 	bl	80041f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800344e:	46c0      	nop			; (mov r8, r8)
 8003450:	46bd      	mov	sp, r7
 8003452:	b004      	add	sp, #16
 8003454:	bd80      	pop	{r7, pc}
 8003456:	46c0      	nop			; (mov r8, r8)
 8003458:	200002bc 	.word	0x200002bc
 800345c:	40012400 	.word	0x40012400

08003460 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003464:	4b1b      	ldr	r3, [pc, #108]	; (80034d4 <MX_I2C1_Init+0x74>)
 8003466:	4a1c      	ldr	r2, [pc, #112]	; (80034d8 <MX_I2C1_Init+0x78>)
 8003468:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 800346a:	4b1a      	ldr	r3, [pc, #104]	; (80034d4 <MX_I2C1_Init+0x74>)
 800346c:	4a1b      	ldr	r2, [pc, #108]	; (80034dc <MX_I2C1_Init+0x7c>)
 800346e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003470:	4b18      	ldr	r3, [pc, #96]	; (80034d4 <MX_I2C1_Init+0x74>)
 8003472:	2200      	movs	r2, #0
 8003474:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003476:	4b17      	ldr	r3, [pc, #92]	; (80034d4 <MX_I2C1_Init+0x74>)
 8003478:	2201      	movs	r2, #1
 800347a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800347c:	4b15      	ldr	r3, [pc, #84]	; (80034d4 <MX_I2C1_Init+0x74>)
 800347e:	2200      	movs	r2, #0
 8003480:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003482:	4b14      	ldr	r3, [pc, #80]	; (80034d4 <MX_I2C1_Init+0x74>)
 8003484:	2200      	movs	r2, #0
 8003486:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003488:	4b12      	ldr	r3, [pc, #72]	; (80034d4 <MX_I2C1_Init+0x74>)
 800348a:	2200      	movs	r2, #0
 800348c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800348e:	4b11      	ldr	r3, [pc, #68]	; (80034d4 <MX_I2C1_Init+0x74>)
 8003490:	2200      	movs	r2, #0
 8003492:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003494:	4b0f      	ldr	r3, [pc, #60]	; (80034d4 <MX_I2C1_Init+0x74>)
 8003496:	2200      	movs	r2, #0
 8003498:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800349a:	4b0e      	ldr	r3, [pc, #56]	; (80034d4 <MX_I2C1_Init+0x74>)
 800349c:	0018      	movs	r0, r3
 800349e:	f002 fa5b 	bl	8005958 <HAL_I2C_Init>
 80034a2:	1e03      	subs	r3, r0, #0
 80034a4:	d001      	beq.n	80034aa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80034a6:	f000 fea3 	bl	80041f0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80034aa:	4b0a      	ldr	r3, [pc, #40]	; (80034d4 <MX_I2C1_Init+0x74>)
 80034ac:	2100      	movs	r1, #0
 80034ae:	0018      	movs	r0, r3
 80034b0:	f002 fd7c 	bl	8005fac <HAL_I2CEx_ConfigAnalogFilter>
 80034b4:	1e03      	subs	r3, r0, #0
 80034b6:	d001      	beq.n	80034bc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80034b8:	f000 fe9a 	bl	80041f0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80034bc:	4b05      	ldr	r3, [pc, #20]	; (80034d4 <MX_I2C1_Init+0x74>)
 80034be:	2100      	movs	r1, #0
 80034c0:	0018      	movs	r0, r3
 80034c2:	f002 fdbf 	bl	8006044 <HAL_I2CEx_ConfigDigitalFilter>
 80034c6:	1e03      	subs	r3, r0, #0
 80034c8:	d001      	beq.n	80034ce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80034ca:	f000 fe91 	bl	80041f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80034ce:	46c0      	nop			; (mov r8, r8)
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	200002fc 	.word	0x200002fc
 80034d8:	40005400 	.word	0x40005400
 80034dc:	0000020b 	.word	0x0000020b

080034e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b08e      	sub	sp, #56	; 0x38
 80034e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034e6:	2328      	movs	r3, #40	; 0x28
 80034e8:	18fb      	adds	r3, r7, r3
 80034ea:	0018      	movs	r0, r3
 80034ec:	2310      	movs	r3, #16
 80034ee:	001a      	movs	r2, r3
 80034f0:	2100      	movs	r1, #0
 80034f2:	f00b fbf9 	bl	800ece8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034f6:	2320      	movs	r3, #32
 80034f8:	18fb      	adds	r3, r7, r3
 80034fa:	0018      	movs	r0, r3
 80034fc:	2308      	movs	r3, #8
 80034fe:	001a      	movs	r2, r3
 8003500:	2100      	movs	r1, #0
 8003502:	f00b fbf1 	bl	800ece8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003506:	1d3b      	adds	r3, r7, #4
 8003508:	0018      	movs	r0, r3
 800350a:	231c      	movs	r3, #28
 800350c:	001a      	movs	r2, r3
 800350e:	2100      	movs	r1, #0
 8003510:	f00b fbea 	bl	800ece8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003514:	4b30      	ldr	r3, [pc, #192]	; (80035d8 <MX_TIM3_Init+0xf8>)
 8003516:	4a31      	ldr	r2, [pc, #196]	; (80035dc <MX_TIM3_Init+0xfc>)
 8003518:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 480-1;
 800351a:	4b2f      	ldr	r3, [pc, #188]	; (80035d8 <MX_TIM3_Init+0xf8>)
 800351c:	22e0      	movs	r2, #224	; 0xe0
 800351e:	32ff      	adds	r2, #255	; 0xff
 8003520:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003522:	4b2d      	ldr	r3, [pc, #180]	; (80035d8 <MX_TIM3_Init+0xf8>)
 8003524:	2200      	movs	r2, #0
 8003526:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 8003528:	4b2b      	ldr	r3, [pc, #172]	; (80035d8 <MX_TIM3_Init+0xf8>)
 800352a:	4a2d      	ldr	r2, [pc, #180]	; (80035e0 <MX_TIM3_Init+0x100>)
 800352c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800352e:	4b2a      	ldr	r3, [pc, #168]	; (80035d8 <MX_TIM3_Init+0xf8>)
 8003530:	2200      	movs	r2, #0
 8003532:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003534:	4b28      	ldr	r3, [pc, #160]	; (80035d8 <MX_TIM3_Init+0xf8>)
 8003536:	2200      	movs	r2, #0
 8003538:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800353a:	4b27      	ldr	r3, [pc, #156]	; (80035d8 <MX_TIM3_Init+0xf8>)
 800353c:	0018      	movs	r0, r3
 800353e:	f003 fb47 	bl	8006bd0 <HAL_TIM_Base_Init>
 8003542:	1e03      	subs	r3, r0, #0
 8003544:	d001      	beq.n	800354a <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8003546:	f000 fe53 	bl	80041f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800354a:	2128      	movs	r1, #40	; 0x28
 800354c:	187b      	adds	r3, r7, r1
 800354e:	2280      	movs	r2, #128	; 0x80
 8003550:	0152      	lsls	r2, r2, #5
 8003552:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003554:	187a      	adds	r2, r7, r1
 8003556:	4b20      	ldr	r3, [pc, #128]	; (80035d8 <MX_TIM3_Init+0xf8>)
 8003558:	0011      	movs	r1, r2
 800355a:	0018      	movs	r0, r3
 800355c:	f003 feba 	bl	80072d4 <HAL_TIM_ConfigClockSource>
 8003560:	1e03      	subs	r3, r0, #0
 8003562:	d001      	beq.n	8003568 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8003564:	f000 fe44 	bl	80041f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003568:	4b1b      	ldr	r3, [pc, #108]	; (80035d8 <MX_TIM3_Init+0xf8>)
 800356a:	0018      	movs	r0, r3
 800356c:	f003 fbcc 	bl	8006d08 <HAL_TIM_PWM_Init>
 8003570:	1e03      	subs	r3, r0, #0
 8003572:	d001      	beq.n	8003578 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003574:	f000 fe3c 	bl	80041f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003578:	2120      	movs	r1, #32
 800357a:	187b      	adds	r3, r7, r1
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003580:	187b      	adds	r3, r7, r1
 8003582:	2200      	movs	r2, #0
 8003584:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003586:	187a      	adds	r2, r7, r1
 8003588:	4b13      	ldr	r3, [pc, #76]	; (80035d8 <MX_TIM3_Init+0xf8>)
 800358a:	0011      	movs	r1, r2
 800358c:	0018      	movs	r0, r3
 800358e:	f004 fac5 	bl	8007b1c <HAL_TIMEx_MasterConfigSynchronization>
 8003592:	1e03      	subs	r3, r0, #0
 8003594:	d001      	beq.n	800359a <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8003596:	f000 fe2b 	bl	80041f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800359a:	1d3b      	adds	r3, r7, #4
 800359c:	2260      	movs	r2, #96	; 0x60
 800359e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80035a0:	1d3b      	adds	r3, r7, #4
 80035a2:	2200      	movs	r2, #0
 80035a4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035a6:	1d3b      	adds	r3, r7, #4
 80035a8:	2200      	movs	r2, #0
 80035aa:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80035ac:	1d3b      	adds	r3, r7, #4
 80035ae:	2200      	movs	r2, #0
 80035b0:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80035b2:	1d39      	adds	r1, r7, #4
 80035b4:	4b08      	ldr	r3, [pc, #32]	; (80035d8 <MX_TIM3_Init+0xf8>)
 80035b6:	2204      	movs	r2, #4
 80035b8:	0018      	movs	r0, r3
 80035ba:	f003 fdc5 	bl	8007148 <HAL_TIM_PWM_ConfigChannel>
 80035be:	1e03      	subs	r3, r0, #0
 80035c0:	d001      	beq.n	80035c6 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 80035c2:	f000 fe15 	bl	80041f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80035c6:	4b04      	ldr	r3, [pc, #16]	; (80035d8 <MX_TIM3_Init+0xf8>)
 80035c8:	0018      	movs	r0, r3
 80035ca:	f000 fefb 	bl	80043c4 <HAL_TIM_MspPostInit>

}
 80035ce:	46c0      	nop			; (mov r8, r8)
 80035d0:	46bd      	mov	sp, r7
 80035d2:	b00e      	add	sp, #56	; 0x38
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	46c0      	nop			; (mov r8, r8)
 80035d8:	20000348 	.word	0x20000348
 80035dc:	40000400 	.word	0x40000400
 80035e0:	000007cf 	.word	0x000007cf

080035e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80035e8:	4b14      	ldr	r3, [pc, #80]	; (800363c <MX_USART2_UART_Init+0x58>)
 80035ea:	4a15      	ldr	r2, [pc, #84]	; (8003640 <MX_USART2_UART_Init+0x5c>)
 80035ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80035ee:	4b13      	ldr	r3, [pc, #76]	; (800363c <MX_USART2_UART_Init+0x58>)
 80035f0:	2296      	movs	r2, #150	; 0x96
 80035f2:	0212      	lsls	r2, r2, #8
 80035f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80035f6:	4b11      	ldr	r3, [pc, #68]	; (800363c <MX_USART2_UART_Init+0x58>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80035fc:	4b0f      	ldr	r3, [pc, #60]	; (800363c <MX_USART2_UART_Init+0x58>)
 80035fe:	2200      	movs	r2, #0
 8003600:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003602:	4b0e      	ldr	r3, [pc, #56]	; (800363c <MX_USART2_UART_Init+0x58>)
 8003604:	2200      	movs	r2, #0
 8003606:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003608:	4b0c      	ldr	r3, [pc, #48]	; (800363c <MX_USART2_UART_Init+0x58>)
 800360a:	220c      	movs	r2, #12
 800360c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800360e:	4b0b      	ldr	r3, [pc, #44]	; (800363c <MX_USART2_UART_Init+0x58>)
 8003610:	2200      	movs	r2, #0
 8003612:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003614:	4b09      	ldr	r3, [pc, #36]	; (800363c <MX_USART2_UART_Init+0x58>)
 8003616:	2200      	movs	r2, #0
 8003618:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800361a:	4b08      	ldr	r3, [pc, #32]	; (800363c <MX_USART2_UART_Init+0x58>)
 800361c:	2200      	movs	r2, #0
 800361e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003620:	4b06      	ldr	r3, [pc, #24]	; (800363c <MX_USART2_UART_Init+0x58>)
 8003622:	2200      	movs	r2, #0
 8003624:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003626:	4b05      	ldr	r3, [pc, #20]	; (800363c <MX_USART2_UART_Init+0x58>)
 8003628:	0018      	movs	r0, r3
 800362a:	f004 fadf 	bl	8007bec <HAL_UART_Init>
 800362e:	1e03      	subs	r3, r0, #0
 8003630:	d001      	beq.n	8003636 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003632:	f000 fddd 	bl	80041f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003636:	46c0      	nop			; (mov r8, r8)
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	20000390 	.word	0x20000390
 8003640:	40004400 	.word	0x40004400

08003644 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003644:	b590      	push	{r4, r7, lr}
 8003646:	b08b      	sub	sp, #44	; 0x2c
 8003648:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800364a:	2414      	movs	r4, #20
 800364c:	193b      	adds	r3, r7, r4
 800364e:	0018      	movs	r0, r3
 8003650:	2314      	movs	r3, #20
 8003652:	001a      	movs	r2, r3
 8003654:	2100      	movs	r1, #0
 8003656:	f00b fb47 	bl	800ece8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800365a:	4b41      	ldr	r3, [pc, #260]	; (8003760 <MX_GPIO_Init+0x11c>)
 800365c:	695a      	ldr	r2, [r3, #20]
 800365e:	4b40      	ldr	r3, [pc, #256]	; (8003760 <MX_GPIO_Init+0x11c>)
 8003660:	2180      	movs	r1, #128	; 0x80
 8003662:	0309      	lsls	r1, r1, #12
 8003664:	430a      	orrs	r2, r1
 8003666:	615a      	str	r2, [r3, #20]
 8003668:	4b3d      	ldr	r3, [pc, #244]	; (8003760 <MX_GPIO_Init+0x11c>)
 800366a:	695a      	ldr	r2, [r3, #20]
 800366c:	2380      	movs	r3, #128	; 0x80
 800366e:	031b      	lsls	r3, r3, #12
 8003670:	4013      	ands	r3, r2
 8003672:	613b      	str	r3, [r7, #16]
 8003674:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003676:	4b3a      	ldr	r3, [pc, #232]	; (8003760 <MX_GPIO_Init+0x11c>)
 8003678:	695a      	ldr	r2, [r3, #20]
 800367a:	4b39      	ldr	r3, [pc, #228]	; (8003760 <MX_GPIO_Init+0x11c>)
 800367c:	2180      	movs	r1, #128	; 0x80
 800367e:	03c9      	lsls	r1, r1, #15
 8003680:	430a      	orrs	r2, r1
 8003682:	615a      	str	r2, [r3, #20]
 8003684:	4b36      	ldr	r3, [pc, #216]	; (8003760 <MX_GPIO_Init+0x11c>)
 8003686:	695a      	ldr	r2, [r3, #20]
 8003688:	2380      	movs	r3, #128	; 0x80
 800368a:	03db      	lsls	r3, r3, #15
 800368c:	4013      	ands	r3, r2
 800368e:	60fb      	str	r3, [r7, #12]
 8003690:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003692:	4b33      	ldr	r3, [pc, #204]	; (8003760 <MX_GPIO_Init+0x11c>)
 8003694:	695a      	ldr	r2, [r3, #20]
 8003696:	4b32      	ldr	r3, [pc, #200]	; (8003760 <MX_GPIO_Init+0x11c>)
 8003698:	2180      	movs	r1, #128	; 0x80
 800369a:	0289      	lsls	r1, r1, #10
 800369c:	430a      	orrs	r2, r1
 800369e:	615a      	str	r2, [r3, #20]
 80036a0:	4b2f      	ldr	r3, [pc, #188]	; (8003760 <MX_GPIO_Init+0x11c>)
 80036a2:	695a      	ldr	r2, [r3, #20]
 80036a4:	2380      	movs	r3, #128	; 0x80
 80036a6:	029b      	lsls	r3, r3, #10
 80036a8:	4013      	ands	r3, r2
 80036aa:	60bb      	str	r3, [r7, #8]
 80036ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80036ae:	4b2c      	ldr	r3, [pc, #176]	; (8003760 <MX_GPIO_Init+0x11c>)
 80036b0:	695a      	ldr	r2, [r3, #20]
 80036b2:	4b2b      	ldr	r3, [pc, #172]	; (8003760 <MX_GPIO_Init+0x11c>)
 80036b4:	2180      	movs	r1, #128	; 0x80
 80036b6:	02c9      	lsls	r1, r1, #11
 80036b8:	430a      	orrs	r2, r1
 80036ba:	615a      	str	r2, [r3, #20]
 80036bc:	4b28      	ldr	r3, [pc, #160]	; (8003760 <MX_GPIO_Init+0x11c>)
 80036be:	695a      	ldr	r2, [r3, #20]
 80036c0:	2380      	movs	r3, #128	; 0x80
 80036c2:	02db      	lsls	r3, r3, #11
 80036c4:	4013      	ands	r3, r2
 80036c6:	607b      	str	r3, [r7, #4]
 80036c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80036ca:	2390      	movs	r3, #144	; 0x90
 80036cc:	05db      	lsls	r3, r3, #23
 80036ce:	2200      	movs	r2, #0
 80036d0:	2120      	movs	r1, #32
 80036d2:	0018      	movs	r0, r3
 80036d4:	f002 f922 	bl	800591c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80036d8:	2387      	movs	r3, #135	; 0x87
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	4821      	ldr	r0, [pc, #132]	; (8003764 <MX_GPIO_Init+0x120>)
 80036de:	2200      	movs	r2, #0
 80036e0:	0019      	movs	r1, r3
 80036e2:	f002 f91b 	bl	800591c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80036e6:	193b      	adds	r3, r7, r4
 80036e8:	2280      	movs	r2, #128	; 0x80
 80036ea:	0192      	lsls	r2, r2, #6
 80036ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80036ee:	193b      	adds	r3, r7, r4
 80036f0:	2284      	movs	r2, #132	; 0x84
 80036f2:	0392      	lsls	r2, r2, #14
 80036f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f6:	193b      	adds	r3, r7, r4
 80036f8:	2200      	movs	r2, #0
 80036fa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80036fc:	193b      	adds	r3, r7, r4
 80036fe:	4a1a      	ldr	r2, [pc, #104]	; (8003768 <MX_GPIO_Init+0x124>)
 8003700:	0019      	movs	r1, r3
 8003702:	0010      	movs	r0, r2
 8003704:	f001 ff9a 	bl	800563c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003708:	193b      	adds	r3, r7, r4
 800370a:	2220      	movs	r2, #32
 800370c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800370e:	193b      	adds	r3, r7, r4
 8003710:	2201      	movs	r2, #1
 8003712:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003714:	193b      	adds	r3, r7, r4
 8003716:	2200      	movs	r2, #0
 8003718:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800371a:	193b      	adds	r3, r7, r4
 800371c:	2200      	movs	r2, #0
 800371e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003720:	193a      	adds	r2, r7, r4
 8003722:	2390      	movs	r3, #144	; 0x90
 8003724:	05db      	lsls	r3, r3, #23
 8003726:	0011      	movs	r1, r2
 8003728:	0018      	movs	r0, r3
 800372a:	f001 ff87 	bl	800563c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800372e:	0021      	movs	r1, r4
 8003730:	187b      	adds	r3, r7, r1
 8003732:	2287      	movs	r2, #135	; 0x87
 8003734:	00d2      	lsls	r2, r2, #3
 8003736:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003738:	187b      	adds	r3, r7, r1
 800373a:	2201      	movs	r2, #1
 800373c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800373e:	187b      	adds	r3, r7, r1
 8003740:	2200      	movs	r2, #0
 8003742:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003744:	187b      	adds	r3, r7, r1
 8003746:	2200      	movs	r2, #0
 8003748:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800374a:	187b      	adds	r3, r7, r1
 800374c:	4a05      	ldr	r2, [pc, #20]	; (8003764 <MX_GPIO_Init+0x120>)
 800374e:	0019      	movs	r1, r3
 8003750:	0010      	movs	r0, r2
 8003752:	f001 ff73 	bl	800563c <HAL_GPIO_Init>

}
 8003756:	46c0      	nop			; (mov r8, r8)
 8003758:	46bd      	mov	sp, r7
 800375a:	b00b      	add	sp, #44	; 0x2c
 800375c:	bd90      	pop	{r4, r7, pc}
 800375e:	46c0      	nop			; (mov r8, r8)
 8003760:	40021000 	.word	0x40021000
 8003764:	48000400 	.word	0x48000400
 8003768:	48000800 	.word	0x48000800

0800376c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
	if(adc_value.first_conv)
 8003774:	4b3c      	ldr	r3, [pc, #240]	; (8003868 <HAL_ADC_ConvCpltCallback+0xfc>)
 8003776:	7b1b      	ldrb	r3, [r3, #12]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d038      	beq.n	80037ee <HAL_ADC_ConvCpltCallback+0x82>
	{
		adc_value.adc_ch0 = HAL_ADC_GetValue(hadc);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	0018      	movs	r0, r3
 8003780:	f001 fa7e 	bl	8004c80 <HAL_ADC_GetValue>
 8003784:	0003      	movs	r3, r0
 8003786:	b29a      	uxth	r2, r3
 8003788:	4b37      	ldr	r3, [pc, #220]	; (8003868 <HAL_ADC_ConvCpltCallback+0xfc>)
 800378a:	801a      	strh	r2, [r3, #0]
		adc_value.temp = (adc_value.adc_ch0/4096.0) * 3.3;
 800378c:	4b36      	ldr	r3, [pc, #216]	; (8003868 <HAL_ADC_ConvCpltCallback+0xfc>)
 800378e:	881b      	ldrh	r3, [r3, #0]
 8003790:	0018      	movs	r0, r3
 8003792:	f7ff f88b 	bl	80028ac <__aeabi_i2d>
 8003796:	2200      	movs	r2, #0
 8003798:	4b34      	ldr	r3, [pc, #208]	; (800386c <HAL_ADC_ConvCpltCallback+0x100>)
 800379a:	f7fd fe33 	bl	8001404 <__aeabi_ddiv>
 800379e:	0002      	movs	r2, r0
 80037a0:	000b      	movs	r3, r1
 80037a2:	0010      	movs	r0, r2
 80037a4:	0019      	movs	r1, r3
 80037a6:	4a32      	ldr	r2, [pc, #200]	; (8003870 <HAL_ADC_ConvCpltCallback+0x104>)
 80037a8:	4b32      	ldr	r3, [pc, #200]	; (8003874 <HAL_ADC_ConvCpltCallback+0x108>)
 80037aa:	f7fe fa2d 	bl	8001c08 <__aeabi_dmul>
 80037ae:	0002      	movs	r2, r0
 80037b0:	000b      	movs	r3, r1
 80037b2:	0010      	movs	r0, r2
 80037b4:	0019      	movs	r1, r3
 80037b6:	f7ff f917 	bl	80029e8 <__aeabi_d2f>
 80037ba:	1c02      	adds	r2, r0, #0
 80037bc:	4b2a      	ldr	r3, [pc, #168]	; (8003868 <HAL_ADC_ConvCpltCallback+0xfc>)
 80037be:	605a      	str	r2, [r3, #4]
		adc_value.temp = adc_value.temp/0.01;
 80037c0:	4b29      	ldr	r3, [pc, #164]	; (8003868 <HAL_ADC_ConvCpltCallback+0xfc>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	1c18      	adds	r0, r3, #0
 80037c6:	f7ff f8c7 	bl	8002958 <__aeabi_f2d>
 80037ca:	4a2b      	ldr	r2, [pc, #172]	; (8003878 <HAL_ADC_ConvCpltCallback+0x10c>)
 80037cc:	4b2b      	ldr	r3, [pc, #172]	; (800387c <HAL_ADC_ConvCpltCallback+0x110>)
 80037ce:	f7fd fe19 	bl	8001404 <__aeabi_ddiv>
 80037d2:	0002      	movs	r2, r0
 80037d4:	000b      	movs	r3, r1
 80037d6:	0010      	movs	r0, r2
 80037d8:	0019      	movs	r1, r3
 80037da:	f7ff f905 	bl	80029e8 <__aeabi_d2f>
 80037de:	1c02      	adds	r2, r0, #0
 80037e0:	4b21      	ldr	r3, [pc, #132]	; (8003868 <HAL_ADC_ConvCpltCallback+0xfc>)
 80037e2:	605a      	str	r2, [r3, #4]
		HAL_ADC_Start_IT(hadc);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	0018      	movs	r0, r3
 80037e8:	f001 f98e 	bl	8004b08 <HAL_ADC_Start_IT>
 80037ec:	e02a      	b.n	8003844 <HAL_ADC_ConvCpltCallback+0xd8>

	}
	else
	{
		adc_value.adc_ch1 = HAL_ADC_GetValue(hadc);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	0018      	movs	r0, r3
 80037f2:	f001 fa45 	bl	8004c80 <HAL_ADC_GetValue>
 80037f6:	0003      	movs	r3, r0
 80037f8:	b29a      	uxth	r2, r3
 80037fa:	4b1b      	ldr	r3, [pc, #108]	; (8003868 <HAL_ADC_ConvCpltCallback+0xfc>)
 80037fc:	805a      	strh	r2, [r3, #2]
		adc_value.pot = (adc_value.adc_ch1/4096.0) * 3.3;
 80037fe:	4b1a      	ldr	r3, [pc, #104]	; (8003868 <HAL_ADC_ConvCpltCallback+0xfc>)
 8003800:	885b      	ldrh	r3, [r3, #2]
 8003802:	0018      	movs	r0, r3
 8003804:	f7ff f852 	bl	80028ac <__aeabi_i2d>
 8003808:	2200      	movs	r2, #0
 800380a:	4b18      	ldr	r3, [pc, #96]	; (800386c <HAL_ADC_ConvCpltCallback+0x100>)
 800380c:	f7fd fdfa 	bl	8001404 <__aeabi_ddiv>
 8003810:	0002      	movs	r2, r0
 8003812:	000b      	movs	r3, r1
 8003814:	0010      	movs	r0, r2
 8003816:	0019      	movs	r1, r3
 8003818:	4a15      	ldr	r2, [pc, #84]	; (8003870 <HAL_ADC_ConvCpltCallback+0x104>)
 800381a:	4b16      	ldr	r3, [pc, #88]	; (8003874 <HAL_ADC_ConvCpltCallback+0x108>)
 800381c:	f7fe f9f4 	bl	8001c08 <__aeabi_dmul>
 8003820:	0002      	movs	r2, r0
 8003822:	000b      	movs	r3, r1
 8003824:	0010      	movs	r0, r2
 8003826:	0019      	movs	r1, r3
 8003828:	f7ff f8de 	bl	80029e8 <__aeabi_d2f>
 800382c:	1c02      	adds	r2, r0, #0
 800382e:	4b0e      	ldr	r3, [pc, #56]	; (8003868 <HAL_ADC_ConvCpltCallback+0xfc>)
 8003830:	609a      	str	r2, [r3, #8]
		osSemaphoreRelease(Adc_SemHandle);
 8003832:	4b13      	ldr	r3, [pc, #76]	; (8003880 <HAL_ADC_ConvCpltCallback+0x114>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	0018      	movs	r0, r3
 8003838:	f008 f9aa 	bl	800bb90 <osSemaphoreRelease>
		HAL_ADC_Stop_IT(hadc);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	0018      	movs	r0, r3
 8003840:	f001 f9d4 	bl	8004bec <HAL_ADC_Stop_IT>
	}
	adc_value.first_conv = !adc_value.first_conv;
 8003844:	4b08      	ldr	r3, [pc, #32]	; (8003868 <HAL_ADC_ConvCpltCallback+0xfc>)
 8003846:	7b1b      	ldrb	r3, [r3, #12]
 8003848:	1e5a      	subs	r2, r3, #1
 800384a:	4193      	sbcs	r3, r2
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2201      	movs	r2, #1
 8003850:	4053      	eors	r3, r2
 8003852:	b2db      	uxtb	r3, r3
 8003854:	1c1a      	adds	r2, r3, #0
 8003856:	2301      	movs	r3, #1
 8003858:	4013      	ands	r3, r2
 800385a:	b2da      	uxtb	r2, r3
 800385c:	4b02      	ldr	r3, [pc, #8]	; (8003868 <HAL_ADC_ConvCpltCallback+0xfc>)
 800385e:	731a      	strb	r2, [r3, #12]

}
 8003860:	46c0      	nop			; (mov r8, r8)
 8003862:	46bd      	mov	sp, r7
 8003864:	b002      	add	sp, #8
 8003866:	bd80      	pop	{r7, pc}
 8003868:	20000000 	.word	0x20000000
 800386c:	40b00000 	.word	0x40b00000
 8003870:	66666666 	.word	0x66666666
 8003874:	400a6666 	.word	0x400a6666
 8003878:	47ae147b 	.word	0x47ae147b
 800387c:	3f847ae1 	.word	0x3f847ae1
 8003880:	20000434 	.word	0x20000434

08003884 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	000a      	movs	r2, r1
 800388e:	1cbb      	adds	r3, r7, #2
 8003890:	801a      	strh	r2, [r3, #0]
	osSemaphoreRelease(Rx_SemHandle);
 8003892:	4b07      	ldr	r3, [pc, #28]	; (80038b0 <HAL_UARTEx_RxEventCallback+0x2c>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	0018      	movs	r0, r3
 8003898:	f008 f97a 	bl	800bb90 <osSemaphoreRelease>
	HAL_UARTEx_ReceiveToIdle_IT(&huart2, (uint8_t *)buf, 5);
 800389c:	4905      	ldr	r1, [pc, #20]	; (80038b4 <HAL_UARTEx_RxEventCallback+0x30>)
 800389e:	4b06      	ldr	r3, [pc, #24]	; (80038b8 <HAL_UARTEx_RxEventCallback+0x34>)
 80038a0:	2205      	movs	r2, #5
 80038a2:	0018      	movs	r0, r3
 80038a4:	f005 fb4c 	bl	8008f40 <HAL_UARTEx_ReceiveToIdle_IT>
}
 80038a8:	46c0      	nop			; (mov r8, r8)
 80038aa:	46bd      	mov	sp, r7
 80038ac:	b002      	add	sp, #8
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	20000438 	.word	0x20000438
 80038b4:	20000440 	.word	0x20000440
 80038b8:	20000390 	.word	0x20000390

080038bc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(2000);
 80038c4:	23fa      	movs	r3, #250	; 0xfa
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	0018      	movs	r0, r3
 80038ca:	f008 f839 	bl	800b940 <osDelay>
 80038ce:	e7f9      	b.n	80038c4 <StartDefaultTask+0x8>

080038d0 <oled_update>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_oled_update */
void oled_update(void *argument)
{
 80038d0:	b5b0      	push	{r4, r5, r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af02      	add	r7, sp, #8
 80038d6:	6078      	str	r0, [r7, #4]
			.start_y = 0,
			.end_x = 0,
			.end_y = 0,
			.angle = 45 };

	u8g2_Setup_ssd1306_i2c_128x64_noname_2(&u8g2, U8G2_R0, u8x8_byte_i2c, u8x8_stm32_gpio_and_delay);
 80038d8:	4bc6      	ldr	r3, [pc, #792]	; (8003bf4 <oled_update+0x324>)
 80038da:	4ac7      	ldr	r2, [pc, #796]	; (8003bf8 <oled_update+0x328>)
 80038dc:	49c7      	ldr	r1, [pc, #796]	; (8003bfc <oled_update+0x32c>)
 80038de:	48c8      	ldr	r0, [pc, #800]	; (8003c00 <oled_update+0x330>)
 80038e0:	f005 fdaa 	bl	8009438 <u8g2_Setup_ssd1306_i2c_128x64_noname_2>
	u8g2_SetI2CAddress(&u8g2, OLED_ADDR);	// 0x78
 80038e4:	4bc6      	ldr	r3, [pc, #792]	; (8003c00 <oled_update+0x330>)
 80038e6:	2224      	movs	r2, #36	; 0x24
 80038e8:	2178      	movs	r1, #120	; 0x78
 80038ea:	5499      	strb	r1, [r3, r2]
	u8g2_InitDisplay(&u8g2); // send init sequence to the display, display is in sleep mode after this,
 80038ec:	4bc4      	ldr	r3, [pc, #784]	; (8003c00 <oled_update+0x330>)
 80038ee:	0018      	movs	r0, r3
 80038f0:	f007 fe1d 	bl	800b52e <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0); // wake up display
 80038f4:	4bc2      	ldr	r3, [pc, #776]	; (8003c00 <oled_update+0x330>)
 80038f6:	2100      	movs	r1, #0
 80038f8:	0018      	movs	r0, r3
 80038fa:	f007 fe27 	bl	800b54c <u8x8_SetPowerSave>
	u8g2_SetFont(&u8g2, u8g2_font_5x7_tr);
 80038fe:	4ac1      	ldr	r2, [pc, #772]	; (8003c04 <oled_update+0x334>)
 8003900:	4bbf      	ldr	r3, [pc, #764]	; (8003c00 <oled_update+0x330>)
 8003902:	0011      	movs	r1, r2
 8003904:	0018      	movs	r0, r3
 8003906:	f006 fcdd 	bl	800a2c4 <u8g2_SetFont>
  /* Infinite loop */
	for(;;)
	{
		left.angle = map(__HAL_TIM_GET_COMPARE(&htim3, TIM_CHANNEL_2), 99, 199, 45, 270+45);
 800390a:	4bbf      	ldr	r3, [pc, #764]	; (8003c08 <oled_update+0x338>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003910:	233c      	movs	r3, #60	; 0x3c
 8003912:	33ff      	adds	r3, #255	; 0xff
 8003914:	9300      	str	r3, [sp, #0]
 8003916:	232d      	movs	r3, #45	; 0x2d
 8003918:	22c7      	movs	r2, #199	; 0xc7
 800391a:	2163      	movs	r1, #99	; 0x63
 800391c:	f7ff fa8e 	bl	8002e3c <map>
 8003920:	0003      	movs	r3, r0
 8003922:	001a      	movs	r2, r3
 8003924:	4bb9      	ldr	r3, [pc, #740]	; (8003c0c <oled_update+0x33c>)
 8003926:	621a      	str	r2, [r3, #32]
		right.angle = map(rpm[periodo-2], 0, 15, 45, 270+45);
 8003928:	4bb9      	ldr	r3, [pc, #740]	; (8003c10 <oled_update+0x340>)
 800392a:	881b      	ldrh	r3, [r3, #0]
 800392c:	1e9a      	subs	r2, r3, #2
 800392e:	4bb9      	ldr	r3, [pc, #740]	; (8003c14 <oled_update+0x344>)
 8003930:	0092      	lsls	r2, r2, #2
 8003932:	58d3      	ldr	r3, [r2, r3]
 8003934:	1c18      	adds	r0, r3, #0
 8003936:	f7fc fdb7 	bl	80004a8 <__aeabi_f2uiz>
 800393a:	233c      	movs	r3, #60	; 0x3c
 800393c:	33ff      	adds	r3, #255	; 0xff
 800393e:	9300      	str	r3, [sp, #0]
 8003940:	232d      	movs	r3, #45	; 0x2d
 8003942:	220f      	movs	r2, #15
 8003944:	2100      	movs	r1, #0
 8003946:	f7ff fa79 	bl	8002e3c <map>
 800394a:	0003      	movs	r3, r0
 800394c:	001a      	movs	r2, r3
 800394e:	4bb2      	ldr	r3, [pc, #712]	; (8003c18 <oled_update+0x348>)
 8003950:	621a      	str	r2, [r3, #32]


		calc_needle(&left);
 8003952:	4bae      	ldr	r3, [pc, #696]	; (8003c0c <oled_update+0x33c>)
 8003954:	0018      	movs	r0, r3
 8003956:	f7ff fa8f 	bl	8002e78 <calc_needle>
		calc_needle(&right);
 800395a:	4baf      	ldr	r3, [pc, #700]	; (8003c18 <oled_update+0x348>)
 800395c:	0018      	movs	r0, r3
 800395e:	f7ff fa8b 	bl	8002e78 <calc_needle>

		sprintf(temp, "%0.2f", adc_value.temp);
 8003962:	4bae      	ldr	r3, [pc, #696]	; (8003c1c <oled_update+0x34c>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	1c18      	adds	r0, r3, #0
 8003968:	f7fe fff6 	bl	8002958 <__aeabi_f2d>
 800396c:	0002      	movs	r2, r0
 800396e:	000b      	movs	r3, r1
 8003970:	49ab      	ldr	r1, [pc, #684]	; (8003c20 <oled_update+0x350>)
 8003972:	48ac      	ldr	r0, [pc, #688]	; (8003c24 <oled_update+0x354>)
 8003974:	f00b ff4c 	bl	800f810 <siprintf>
		sprintf(pos, "%li", map(__HAL_TIM_GET_COMPARE(&htim3,TIM_CHANNEL_2), 99, 199, 0, 90));
 8003978:	4ba3      	ldr	r3, [pc, #652]	; (8003c08 <oled_update+0x338>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800397e:	235a      	movs	r3, #90	; 0x5a
 8003980:	9300      	str	r3, [sp, #0]
 8003982:	2300      	movs	r3, #0
 8003984:	22c7      	movs	r2, #199	; 0xc7
 8003986:	2163      	movs	r1, #99	; 0x63
 8003988:	f7ff fa58 	bl	8002e3c <map>
 800398c:	0002      	movs	r2, r0
 800398e:	49a6      	ldr	r1, [pc, #664]	; (8003c28 <oled_update+0x358>)
 8003990:	4ba6      	ldr	r3, [pc, #664]	; (8003c2c <oled_update+0x35c>)
 8003992:	0018      	movs	r0, r3
 8003994:	f00b ff3c 	bl	800f810 <siprintf>
		sprintf(speed, "%0.2fRPM", rpm[periodo-2]);
 8003998:	4b9d      	ldr	r3, [pc, #628]	; (8003c10 <oled_update+0x340>)
 800399a:	881b      	ldrh	r3, [r3, #0]
 800399c:	1e9a      	subs	r2, r3, #2
 800399e:	4b9d      	ldr	r3, [pc, #628]	; (8003c14 <oled_update+0x344>)
 80039a0:	0092      	lsls	r2, r2, #2
 80039a2:	58d3      	ldr	r3, [r2, r3]
 80039a4:	1c18      	adds	r0, r3, #0
 80039a6:	f7fe ffd7 	bl	8002958 <__aeabi_f2d>
 80039aa:	0002      	movs	r2, r0
 80039ac:	000b      	movs	r3, r1
 80039ae:	49a0      	ldr	r1, [pc, #640]	; (8003c30 <oled_update+0x360>)
 80039b0:	48a0      	ldr	r0, [pc, #640]	; (8003c34 <oled_update+0x364>)
 80039b2:	f00b ff2d 	bl	800f810 <siprintf>

		if((left.angle > 45 && left.angle < 135) || (left.angle > 225 && left.angle < 315))
 80039b6:	4b95      	ldr	r3, [pc, #596]	; (8003c0c <oled_update+0x33c>)
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	2b2d      	cmp	r3, #45	; 0x2d
 80039bc:	dd03      	ble.n	80039c6 <oled_update+0xf6>
 80039be:	4b93      	ldr	r3, [pc, #588]	; (8003c0c <oled_update+0x33c>)
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	2b86      	cmp	r3, #134	; 0x86
 80039c4:	dd09      	ble.n	80039da <oled_update+0x10a>
 80039c6:	4b91      	ldr	r3, [pc, #580]	; (8003c0c <oled_update+0x33c>)
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	2be1      	cmp	r3, #225	; 0xe1
 80039cc:	dd0c      	ble.n	80039e8 <oled_update+0x118>
 80039ce:	4b8f      	ldr	r3, [pc, #572]	; (8003c0c <oled_update+0x33c>)
 80039d0:	6a1a      	ldr	r2, [r3, #32]
 80039d2:	239d      	movs	r3, #157	; 0x9d
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	429a      	cmp	r2, r3
 80039d8:	dc06      	bgt.n	80039e8 <oled_update+0x118>
		{
			needle_offset_x_left = 0;
 80039da:	4b97      	ldr	r3, [pc, #604]	; (8003c38 <oled_update+0x368>)
 80039dc:	2200      	movs	r2, #0
 80039de:	601a      	str	r2, [r3, #0]
			needle_offset_y_left = 1;
 80039e0:	4b96      	ldr	r3, [pc, #600]	; (8003c3c <oled_update+0x36c>)
 80039e2:	2201      	movs	r2, #1
 80039e4:	601a      	str	r2, [r3, #0]
 80039e6:	e005      	b.n	80039f4 <oled_update+0x124>
		}
		else
		{
			needle_offset_x_left = 1;
 80039e8:	4b93      	ldr	r3, [pc, #588]	; (8003c38 <oled_update+0x368>)
 80039ea:	2201      	movs	r2, #1
 80039ec:	601a      	str	r2, [r3, #0]
			needle_offset_y_left = 0;
 80039ee:	4b93      	ldr	r3, [pc, #588]	; (8003c3c <oled_update+0x36c>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	601a      	str	r2, [r3, #0]
		}
		if((right.angle > 45 && right.angle < 135) || (right.angle > 225 && right.angle < 315))
 80039f4:	4b88      	ldr	r3, [pc, #544]	; (8003c18 <oled_update+0x348>)
 80039f6:	6a1b      	ldr	r3, [r3, #32]
 80039f8:	2b2d      	cmp	r3, #45	; 0x2d
 80039fa:	dd03      	ble.n	8003a04 <oled_update+0x134>
 80039fc:	4b86      	ldr	r3, [pc, #536]	; (8003c18 <oled_update+0x348>)
 80039fe:	6a1b      	ldr	r3, [r3, #32]
 8003a00:	2b86      	cmp	r3, #134	; 0x86
 8003a02:	dd09      	ble.n	8003a18 <oled_update+0x148>
 8003a04:	4b84      	ldr	r3, [pc, #528]	; (8003c18 <oled_update+0x348>)
 8003a06:	6a1b      	ldr	r3, [r3, #32]
 8003a08:	2be1      	cmp	r3, #225	; 0xe1
 8003a0a:	dd0c      	ble.n	8003a26 <oled_update+0x156>
 8003a0c:	4b82      	ldr	r3, [pc, #520]	; (8003c18 <oled_update+0x348>)
 8003a0e:	6a1a      	ldr	r2, [r3, #32]
 8003a10:	239d      	movs	r3, #157	; 0x9d
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	429a      	cmp	r2, r3
 8003a16:	dc06      	bgt.n	8003a26 <oled_update+0x156>
		{
			needle_offset_x_right = 0;
 8003a18:	4b89      	ldr	r3, [pc, #548]	; (8003c40 <oled_update+0x370>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	601a      	str	r2, [r3, #0]
			needle_offset_y_right = 1;
 8003a1e:	4b89      	ldr	r3, [pc, #548]	; (8003c44 <oled_update+0x374>)
 8003a20:	2201      	movs	r2, #1
 8003a22:	601a      	str	r2, [r3, #0]
 8003a24:	e005      	b.n	8003a32 <oled_update+0x162>
		}
		else
		{
			needle_offset_x_right = 1;
 8003a26:	4b86      	ldr	r3, [pc, #536]	; (8003c40 <oled_update+0x370>)
 8003a28:	2201      	movs	r2, #1
 8003a2a:	601a      	str	r2, [r3, #0]
			needle_offset_y_right = 0;
 8003a2c:	4b85      	ldr	r3, [pc, #532]	; (8003c44 <oled_update+0x374>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	601a      	str	r2, [r3, #0]
		}

		u8g2_FirstPage(&u8g2);
 8003a32:	4b73      	ldr	r3, [pc, #460]	; (8003c00 <oled_update+0x330>)
 8003a34:	0018      	movs	r0, r3
 8003a36:	f005 fca2 	bl	800937e <u8g2_FirstPage>
		do {

			// draw gauges & termometer
			u8g2_DrawBitmap(&u8g2, 0, 0, 64/8, 56, Left_Gauge);
 8003a3a:	4871      	ldr	r0, [pc, #452]	; (8003c00 <oled_update+0x330>)
 8003a3c:	4b82      	ldr	r3, [pc, #520]	; (8003c48 <oled_update+0x378>)
 8003a3e:	9301      	str	r3, [sp, #4]
 8003a40:	2338      	movs	r3, #56	; 0x38
 8003a42:	9300      	str	r3, [sp, #0]
 8003a44:	2308      	movs	r3, #8
 8003a46:	2200      	movs	r2, #0
 8003a48:	2100      	movs	r1, #0
 8003a4a:	f005 fb81 	bl	8009150 <u8g2_DrawBitmap>
			u8g2_DrawBitmap(&u8g2, 64, 0, 64/8, 56, Right_Gauge);
 8003a4e:	486c      	ldr	r0, [pc, #432]	; (8003c00 <oled_update+0x330>)
 8003a50:	4b7e      	ldr	r3, [pc, #504]	; (8003c4c <oled_update+0x37c>)
 8003a52:	9301      	str	r3, [sp, #4]
 8003a54:	2338      	movs	r3, #56	; 0x38
 8003a56:	9300      	str	r3, [sp, #0]
 8003a58:	2308      	movs	r3, #8
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	2140      	movs	r1, #64	; 0x40
 8003a5e:	f005 fb77 	bl	8009150 <u8g2_DrawBitmap>
			u8g2_DrawBitmap(&u8g2, 60, 0, 8/8, 56, Termometer);
 8003a62:	4867      	ldr	r0, [pc, #412]	; (8003c00 <oled_update+0x330>)
 8003a64:	4b7a      	ldr	r3, [pc, #488]	; (8003c50 <oled_update+0x380>)
 8003a66:	9301      	str	r3, [sp, #4]
 8003a68:	2338      	movs	r3, #56	; 0x38
 8003a6a:	9300      	str	r3, [sp, #0]
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	2200      	movs	r2, #0
 8003a70:	213c      	movs	r1, #60	; 0x3c
 8003a72:	f005 fb6d 	bl	8009150 <u8g2_DrawBitmap>

			// draw temperature
			u8g2_DrawLine(&u8g2, 64, 49, 64, 39-map(adc_value.adc_ch0, 0, 4096, 0, 49));
 8003a76:	4b69      	ldr	r3, [pc, #420]	; (8003c1c <oled_update+0x34c>)
 8003a78:	881b      	ldrh	r3, [r3, #0]
 8003a7a:	0018      	movs	r0, r3
 8003a7c:	2380      	movs	r3, #128	; 0x80
 8003a7e:	015a      	lsls	r2, r3, #5
 8003a80:	2331      	movs	r3, #49	; 0x31
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	2300      	movs	r3, #0
 8003a86:	2100      	movs	r1, #0
 8003a88:	f7ff f9d8 	bl	8002e3c <map>
 8003a8c:	0003      	movs	r3, r0
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	2227      	movs	r2, #39	; 0x27
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	485a      	ldr	r0, [pc, #360]	; (8003c00 <oled_update+0x330>)
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	2340      	movs	r3, #64	; 0x40
 8003a9c:	2231      	movs	r2, #49	; 0x31
 8003a9e:	2140      	movs	r1, #64	; 0x40
 8003aa0:	f006 fe32 	bl	800a708 <u8g2_DrawLine>
			u8g2_DrawStr(&u8g2, 52, 64, temp);
 8003aa4:	4b5f      	ldr	r3, [pc, #380]	; (8003c24 <oled_update+0x354>)
 8003aa6:	4856      	ldr	r0, [pc, #344]	; (8003c00 <oled_update+0x330>)
 8003aa8:	2240      	movs	r2, #64	; 0x40
 8003aaa:	2134      	movs	r1, #52	; 0x34
 8003aac:	f006 fb66 	bl	800a17c <u8g2_DrawStr>

			// draw needle and center circle Left Gauge
			u8g2_DrawLine(&u8g2, left.start_x, left.start_y, left.end_x, left.end_y);
 8003ab0:	4b56      	ldr	r3, [pc, #344]	; (8003c0c <oled_update+0x33c>)
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	b299      	uxth	r1, r3
 8003ab6:	4b55      	ldr	r3, [pc, #340]	; (8003c0c <oled_update+0x33c>)
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	4b53      	ldr	r3, [pc, #332]	; (8003c0c <oled_update+0x33c>)
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	b29c      	uxth	r4, r3
 8003ac2:	4b52      	ldr	r3, [pc, #328]	; (8003c0c <oled_update+0x33c>)
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	484d      	ldr	r0, [pc, #308]	; (8003c00 <oled_update+0x330>)
 8003aca:	9300      	str	r3, [sp, #0]
 8003acc:	0023      	movs	r3, r4
 8003ace:	f006 fe1b 	bl	800a708 <u8g2_DrawLine>
			u8g2_DrawLine(&u8g2, left.start_x + needle_offset_x_left, left.start_y + needle_offset_y_left,
 8003ad2:	4b4e      	ldr	r3, [pc, #312]	; (8003c0c <oled_update+0x33c>)
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	4b57      	ldr	r3, [pc, #348]	; (8003c38 <oled_update+0x368>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	18d3      	adds	r3, r2, r3
 8003ae0:	b299      	uxth	r1, r3
 8003ae2:	4b4a      	ldr	r3, [pc, #296]	; (8003c0c <oled_update+0x33c>)
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	4b54      	ldr	r3, [pc, #336]	; (8003c3c <oled_update+0x36c>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	18d3      	adds	r3, r2, r3
 8003af0:	b29c      	uxth	r4, r3
								 left.end_x + needle_offset_x_left, left.end_y + needle_offset_y_left);
 8003af2:	4b46      	ldr	r3, [pc, #280]	; (8003c0c <oled_update+0x33c>)
 8003af4:	699b      	ldr	r3, [r3, #24]
			u8g2_DrawLine(&u8g2, left.start_x + needle_offset_x_left, left.start_y + needle_offset_y_left,
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	4b4f      	ldr	r3, [pc, #316]	; (8003c38 <oled_update+0x368>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	18d3      	adds	r3, r2, r3
 8003b00:	b29d      	uxth	r5, r3
								 left.end_x + needle_offset_x_left, left.end_y + needle_offset_y_left);
 8003b02:	4b42      	ldr	r3, [pc, #264]	; (8003c0c <oled_update+0x33c>)
 8003b04:	69db      	ldr	r3, [r3, #28]
			u8g2_DrawLine(&u8g2, left.start_x + needle_offset_x_left, left.start_y + needle_offset_y_left,
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	4b4c      	ldr	r3, [pc, #304]	; (8003c3c <oled_update+0x36c>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	18d3      	adds	r3, r2, r3
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	483b      	ldr	r0, [pc, #236]	; (8003c00 <oled_update+0x330>)
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	002b      	movs	r3, r5
 8003b18:	0022      	movs	r2, r4
 8003b1a:	f006 fdf5 	bl	800a708 <u8g2_DrawLine>
			u8g2_DrawStr(&u8g2, 26, 64, pos);
 8003b1e:	4b43      	ldr	r3, [pc, #268]	; (8003c2c <oled_update+0x35c>)
 8003b20:	4837      	ldr	r0, [pc, #220]	; (8003c00 <oled_update+0x330>)
 8003b22:	2240      	movs	r2, #64	; 0x40
 8003b24:	211a      	movs	r1, #26
 8003b26:	f006 fb29 	bl	800a17c <u8g2_DrawStr>


			u8g2_DrawBitmap(&u8g2, 26, 28, 8/8, 8, Contour_Needle);
 8003b2a:	4835      	ldr	r0, [pc, #212]	; (8003c00 <oled_update+0x330>)
 8003b2c:	4b49      	ldr	r3, [pc, #292]	; (8003c54 <oled_update+0x384>)
 8003b2e:	9301      	str	r3, [sp, #4]
 8003b30:	2308      	movs	r3, #8
 8003b32:	9300      	str	r3, [sp, #0]
 8003b34:	2301      	movs	r3, #1
 8003b36:	221c      	movs	r2, #28
 8003b38:	211a      	movs	r1, #26
 8003b3a:	f005 fb09 	bl	8009150 <u8g2_DrawBitmap>

			// draw needle and center circle Right Gauge
			u8g2_DrawLine(&u8g2, right.start_x, right.start_y, right.end_x, right.end_y);
 8003b3e:	4b36      	ldr	r3, [pc, #216]	; (8003c18 <oled_update+0x348>)
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	b299      	uxth	r1, r3
 8003b44:	4b34      	ldr	r3, [pc, #208]	; (8003c18 <oled_update+0x348>)
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	4b33      	ldr	r3, [pc, #204]	; (8003c18 <oled_update+0x348>)
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	b29c      	uxth	r4, r3
 8003b50:	4b31      	ldr	r3, [pc, #196]	; (8003c18 <oled_update+0x348>)
 8003b52:	69db      	ldr	r3, [r3, #28]
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	482a      	ldr	r0, [pc, #168]	; (8003c00 <oled_update+0x330>)
 8003b58:	9300      	str	r3, [sp, #0]
 8003b5a:	0023      	movs	r3, r4
 8003b5c:	f006 fdd4 	bl	800a708 <u8g2_DrawLine>
			u8g2_DrawLine(&u8g2, right.start_x + needle_offset_x_right, right.start_y + needle_offset_y_right,
 8003b60:	4b2d      	ldr	r3, [pc, #180]	; (8003c18 <oled_update+0x348>)
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	4b36      	ldr	r3, [pc, #216]	; (8003c40 <oled_update+0x370>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	18d3      	adds	r3, r2, r3
 8003b6e:	b299      	uxth	r1, r3
 8003b70:	4b29      	ldr	r3, [pc, #164]	; (8003c18 <oled_update+0x348>)
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	b29a      	uxth	r2, r3
 8003b76:	4b33      	ldr	r3, [pc, #204]	; (8003c44 <oled_update+0x374>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	18d3      	adds	r3, r2, r3
 8003b7e:	b29c      	uxth	r4, r3
								 right.end_x + needle_offset_x_right, right.end_y + needle_offset_y_right);
 8003b80:	4b25      	ldr	r3, [pc, #148]	; (8003c18 <oled_update+0x348>)
 8003b82:	699b      	ldr	r3, [r3, #24]
			u8g2_DrawLine(&u8g2, right.start_x + needle_offset_x_right, right.start_y + needle_offset_y_right,
 8003b84:	b29a      	uxth	r2, r3
 8003b86:	4b2e      	ldr	r3, [pc, #184]	; (8003c40 <oled_update+0x370>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	18d3      	adds	r3, r2, r3
 8003b8e:	b29d      	uxth	r5, r3
								 right.end_x + needle_offset_x_right, right.end_y + needle_offset_y_right);
 8003b90:	4b21      	ldr	r3, [pc, #132]	; (8003c18 <oled_update+0x348>)
 8003b92:	69db      	ldr	r3, [r3, #28]
			u8g2_DrawLine(&u8g2, right.start_x + needle_offset_x_right, right.start_y + needle_offset_y_right,
 8003b94:	b29a      	uxth	r2, r3
 8003b96:	4b2b      	ldr	r3, [pc, #172]	; (8003c44 <oled_update+0x374>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	18d3      	adds	r3, r2, r3
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	4817      	ldr	r0, [pc, #92]	; (8003c00 <oled_update+0x330>)
 8003ba2:	9300      	str	r3, [sp, #0]
 8003ba4:	002b      	movs	r3, r5
 8003ba6:	0022      	movs	r2, r4
 8003ba8:	f006 fdae 	bl	800a708 <u8g2_DrawLine>
			u8g2_DrawStr(&u8g2, 26 + right_offset, 64, speed);
 8003bac:	4b2a      	ldr	r3, [pc, #168]	; (8003c58 <oled_update+0x388>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	331a      	adds	r3, #26
 8003bb4:	b299      	uxth	r1, r3
 8003bb6:	4b1f      	ldr	r3, [pc, #124]	; (8003c34 <oled_update+0x364>)
 8003bb8:	4811      	ldr	r0, [pc, #68]	; (8003c00 <oled_update+0x330>)
 8003bba:	2240      	movs	r2, #64	; 0x40
 8003bbc:	f006 fade 	bl	800a17c <u8g2_DrawStr>


			u8g2_DrawBitmap(&u8g2, 26 + right_offset, 28, 8/8, 8, Contour_Needle);
 8003bc0:	4b25      	ldr	r3, [pc, #148]	; (8003c58 <oled_update+0x388>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	331a      	adds	r3, #26
 8003bc8:	b299      	uxth	r1, r3
 8003bca:	480d      	ldr	r0, [pc, #52]	; (8003c00 <oled_update+0x330>)
 8003bcc:	4b21      	ldr	r3, [pc, #132]	; (8003c54 <oled_update+0x384>)
 8003bce:	9301      	str	r3, [sp, #4]
 8003bd0:	2308      	movs	r3, #8
 8003bd2:	9300      	str	r3, [sp, #0]
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	221c      	movs	r2, #28
 8003bd8:	f005 faba 	bl	8009150 <u8g2_DrawBitmap>

		} while (u8g2_NextPage(&u8g2));
 8003bdc:	4b08      	ldr	r3, [pc, #32]	; (8003c00 <oled_update+0x330>)
 8003bde:	0018      	movs	r0, r3
 8003be0:	f005 fbe3 	bl	80093aa <u8g2_NextPage>
 8003be4:	1e03      	subs	r3, r0, #0
 8003be6:	d000      	beq.n	8003bea <oled_update+0x31a>
 8003be8:	e727      	b.n	8003a3a <oled_update+0x16a>

		osDelay(250);
 8003bea:	20fa      	movs	r0, #250	; 0xfa
 8003bec:	f007 fea8 	bl	800b940 <osDelay>
		left.angle = map(__HAL_TIM_GET_COMPARE(&htim3, TIM_CHANNEL_2), 99, 199, 45, 270+45);
 8003bf0:	e68b      	b.n	800390a <oled_update+0x3a>
 8003bf2:	46c0      	nop			; (mov r8, r8)
 8003bf4:	08002d2d 	.word	0x08002d2d
 8003bf8:	08002d85 	.word	0x08002d85
 8003bfc:	0801391c 	.word	0x0801391c
 8003c00:	20000448 	.word	0x20000448
 8003c04:	080135d0 	.word	0x080135d0
 8003c08:	20000348 	.word	0x20000348
 8003c0c:	20000014 	.word	0x20000014
 8003c10:	20000010 	.word	0x20000010
 8003c14:	20000264 	.word	0x20000264
 8003c18:	20000038 	.word	0x20000038
 8003c1c:	20000000 	.word	0x20000000
 8003c20:	08012d34 	.word	0x08012d34
 8003c24:	200004dc 	.word	0x200004dc
 8003c28:	08012d3c 	.word	0x08012d3c
 8003c2c:	200004e4 	.word	0x200004e4
 8003c30:	08012d40 	.word	0x08012d40
 8003c34:	200004ec 	.word	0x200004ec
 8003c38:	200004f8 	.word	0x200004f8
 8003c3c:	200004fc 	.word	0x200004fc
 8003c40:	20000500 	.word	0x20000500
 8003c44:	20000504 	.word	0x20000504
 8003c48:	08013204 	.word	0x08013204
 8003c4c:	08013044 	.word	0x08013044
 8003c50:	08013004 	.word	0x08013004
 8003c54:	0801303c 	.word	0x0801303c
 8003c58:	2000005c 	.word	0x2000005c

08003c5c <adc_read>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_adc_read */
void adc_read(void *argument)
{
 8003c5c:	b590      	push	{r4, r7, lr}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN adc_read */
	HAL_ADCEx_Calibration_Start(&hadc);
 8003c64:	4b27      	ldr	r3, [pc, #156]	; (8003d04 <adc_read+0xa8>)
 8003c66:	0018      	movs	r0, r3
 8003c68:	f001 fb16 	bl	8005298 <HAL_ADCEx_Calibration_Start>
	static uint8_t trama[4] = {0x30, 0x00, 0x00, 0xE0};
	static uint32_t timestamp;
	timestamp = HAL_GetTick();
 8003c6c:	f000 fe02 	bl	8004874 <HAL_GetTick>
 8003c70:	0002      	movs	r2, r0
 8003c72:	4b25      	ldr	r3, [pc, #148]	; (8003d08 <adc_read+0xac>)
 8003c74:	601a      	str	r2, [r3, #0]
	/* Infinite loop */
	for(;;)
	{
		osSemaphoreAcquire(Adc_SemHandle, osWaitForever);
 8003c76:	4b25      	ldr	r3, [pc, #148]	; (8003d0c <adc_read+0xb0>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	4252      	negs	r2, r2
 8003c7e:	0011      	movs	r1, r2
 8003c80:	0018      	movs	r0, r3
 8003c82:	f007 ff27 	bl	800bad4 <osSemaphoreAcquire>
		HAL_ADC_Start_IT(&hadc);
 8003c86:	4b1f      	ldr	r3, [pc, #124]	; (8003d04 <adc_read+0xa8>)
 8003c88:	0018      	movs	r0, r3
 8003c8a:	f000 ff3d 	bl	8004b08 <HAL_ADC_Start_IT>

		if(HAL_GetTick() - timestamp >= 1000)
 8003c8e:	f000 fdf1 	bl	8004874 <HAL_GetTick>
 8003c92:	0002      	movs	r2, r0
 8003c94:	4b1c      	ldr	r3, [pc, #112]	; (8003d08 <adc_read+0xac>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	1ad2      	subs	r2, r2, r3
 8003c9a:	23fa      	movs	r3, #250	; 0xfa
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d32c      	bcc.n	8003cfc <adc_read+0xa0>
		{
			trama[1] = (uint8_t)adc_value.temp;
 8003ca2:	4b1b      	ldr	r3, [pc, #108]	; (8003d10 <adc_read+0xb4>)
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	1c18      	adds	r0, r3, #0
 8003ca8:	f7fc fbfe 	bl	80004a8 <__aeabi_f2uiz>
 8003cac:	0003      	movs	r3, r0
 8003cae:	b2da      	uxtb	r2, r3
 8003cb0:	4b18      	ldr	r3, [pc, #96]	; (8003d14 <adc_read+0xb8>)
 8003cb2:	705a      	strb	r2, [r3, #1]
			trama[2] = (uint8_t)((adc_value.temp - trama[1])*100);
 8003cb4:	4b16      	ldr	r3, [pc, #88]	; (8003d10 <adc_read+0xb4>)
 8003cb6:	685c      	ldr	r4, [r3, #4]
 8003cb8:	4b16      	ldr	r3, [pc, #88]	; (8003d14 <adc_read+0xb8>)
 8003cba:	785b      	ldrb	r3, [r3, #1]
 8003cbc:	0018      	movs	r0, r3
 8003cbe:	f7fd f817 	bl	8000cf0 <__aeabi_i2f>
 8003cc2:	1c03      	adds	r3, r0, #0
 8003cc4:	1c19      	adds	r1, r3, #0
 8003cc6:	1c20      	adds	r0, r4, #0
 8003cc8:	f7fc fe44 	bl	8000954 <__aeabi_fsub>
 8003ccc:	1c03      	adds	r3, r0, #0
 8003cce:	4912      	ldr	r1, [pc, #72]	; (8003d18 <adc_read+0xbc>)
 8003cd0:	1c18      	adds	r0, r3, #0
 8003cd2:	f7fc fd19 	bl	8000708 <__aeabi_fmul>
 8003cd6:	1c03      	adds	r3, r0, #0
 8003cd8:	1c18      	adds	r0, r3, #0
 8003cda:	f7fc fbe5 	bl	80004a8 <__aeabi_f2uiz>
 8003cde:	0003      	movs	r3, r0
 8003ce0:	b2da      	uxtb	r2, r3
 8003ce2:	4b0c      	ldr	r3, [pc, #48]	; (8003d14 <adc_read+0xb8>)
 8003ce4:	709a      	strb	r2, [r3, #2]
			HAL_UART_Transmit(&huart2, trama, 4, 100);
 8003ce6:	490b      	ldr	r1, [pc, #44]	; (8003d14 <adc_read+0xb8>)
 8003ce8:	480c      	ldr	r0, [pc, #48]	; (8003d1c <adc_read+0xc0>)
 8003cea:	2364      	movs	r3, #100	; 0x64
 8003cec:	2204      	movs	r2, #4
 8003cee:	f003 ffd1 	bl	8007c94 <HAL_UART_Transmit>
			timestamp = HAL_GetTick();
 8003cf2:	f000 fdbf 	bl	8004874 <HAL_GetTick>
 8003cf6:	0002      	movs	r2, r0
 8003cf8:	4b03      	ldr	r3, [pc, #12]	; (8003d08 <adc_read+0xac>)
 8003cfa:	601a      	str	r2, [r3, #0]
		}


		osDelay(10);
 8003cfc:	200a      	movs	r0, #10
 8003cfe:	f007 fe1f 	bl	800b940 <osDelay>
		osSemaphoreAcquire(Adc_SemHandle, osWaitForever);
 8003d02:	e7b8      	b.n	8003c76 <adc_read+0x1a>
 8003d04:	200002bc 	.word	0x200002bc
 8003d08:	20000508 	.word	0x20000508
 8003d0c:	20000434 	.word	0x20000434
 8003d10:	20000000 	.word	0x20000000
 8003d14:	20000060 	.word	0x20000060
 8003d18:	42c80000 	.word	0x42c80000
 8003d1c:	20000390 	.word	0x20000390

08003d20 <servo_pos>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_servo_pos */
void servo_pos(void *argument)
{
 8003d20:	b590      	push	{r4, r7, lr}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af02      	add	r7, sp, #8
 8003d26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN servo_pos */
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8003d28:	4b0b      	ldr	r3, [pc, #44]	; (8003d58 <servo_pos+0x38>)
 8003d2a:	2104      	movs	r1, #4
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	f003 f843 	bl	8006db8 <HAL_TIM_PWM_Start>
	/* Infinite loop */
	for(;;)
	{
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, map(adc_value.adc_ch1, 0, 4096, 99, 199));
 8003d32:	4b0a      	ldr	r3, [pc, #40]	; (8003d5c <servo_pos+0x3c>)
 8003d34:	885b      	ldrh	r3, [r3, #2]
 8003d36:	0018      	movs	r0, r3
 8003d38:	4b07      	ldr	r3, [pc, #28]	; (8003d58 <servo_pos+0x38>)
 8003d3a:	681c      	ldr	r4, [r3, #0]
 8003d3c:	2380      	movs	r3, #128	; 0x80
 8003d3e:	015a      	lsls	r2, r3, #5
 8003d40:	23c7      	movs	r3, #199	; 0xc7
 8003d42:	9300      	str	r3, [sp, #0]
 8003d44:	2363      	movs	r3, #99	; 0x63
 8003d46:	2100      	movs	r1, #0
 8003d48:	f7ff f878 	bl	8002e3c <map>
 8003d4c:	0003      	movs	r3, r0
 8003d4e:	63a3      	str	r3, [r4, #56]	; 0x38
		osDelay(10);
 8003d50:	200a      	movs	r0, #10
 8003d52:	f007 fdf5 	bl	800b940 <osDelay>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, map(adc_value.adc_ch1, 0, 4096, 99, 199));
 8003d56:	e7ec      	b.n	8003d32 <servo_pos+0x12>
 8003d58:	20000348 	.word	0x20000348
 8003d5c:	20000000 	.word	0x20000000

08003d60 <stepper_fx>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_stepper_fx */
void stepper_fx(void *argument)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN stepper_fx */
int ciclo = 0;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	617b      	str	r3, [r7, #20]

/* Infinite loop */
for(;;)
{
	switch(giro_stepper)
 8003d6c:	4b29      	ldr	r3, [pc, #164]	; (8003e14 <stepper_fx+0xb4>)
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d022      	beq.n	8003dba <stepper_fx+0x5a>
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d141      	bne.n	8003dfc <stepper_fx+0x9c>
	{
	case Horario:
	{
		for(int i = 0; i < 4; i++)
 8003d78:	2300      	movs	r3, #0
 8003d7a:	613b      	str	r3, [r7, #16]
 8003d7c:	e011      	b.n	8003da2 <stepper_fx+0x42>
		{
			HAL_GPIO_WritePin(GPIOB, pins[i], matrix_half[ciclo][i]);		// Medios pasos, quitar _half para paso completo
 8003d7e:	4b26      	ldr	r3, [pc, #152]	; (8003e18 <stepper_fx+0xb8>)
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	0052      	lsls	r2, r2, #1
 8003d84:	5ad1      	ldrh	r1, [r2, r3]
 8003d86:	4a25      	ldr	r2, [pc, #148]	; (8003e1c <stepper_fx+0xbc>)
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	18d2      	adds	r2, r2, r3
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	18d3      	adds	r3, r2, r3
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	4822      	ldr	r0, [pc, #136]	; (8003e20 <stepper_fx+0xc0>)
 8003d96:	001a      	movs	r2, r3
 8003d98:	f001 fdc0 	bl	800591c <HAL_GPIO_WritePin>
		for(int i = 0; i < 4; i++)
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	3301      	adds	r3, #1
 8003da0:	613b      	str	r3, [r7, #16]
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	2b03      	cmp	r3, #3
 8003da6:	ddea      	ble.n	8003d7e <stepper_fx+0x1e>
		}
		ciclo++;
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	3301      	adds	r3, #1
 8003dac:	617b      	str	r3, [r7, #20]
		//			if(ciclo > 3) ciclo = 0;											// Pasos completos
		if(ciclo > 7) ciclo = 0;											// Medios pasos
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	2b07      	cmp	r3, #7
 8003db2:	dd25      	ble.n	8003e00 <stepper_fx+0xa0>
 8003db4:	2300      	movs	r3, #0
 8003db6:	617b      	str	r3, [r7, #20]
		break;
 8003db8:	e022      	b.n	8003e00 <stepper_fx+0xa0>
	}
	case Antihorario:
	{
		for(int i = 0; i < 4; i++)
 8003dba:	2300      	movs	r3, #0
 8003dbc:	60fb      	str	r3, [r7, #12]
 8003dbe:	e011      	b.n	8003de4 <stepper_fx+0x84>
		{
			HAL_GPIO_WritePin(GPIOB, pins[i], matrix_half[ciclo][i]);		// Medios pasos, quitar _half para paso completo
 8003dc0:	4b15      	ldr	r3, [pc, #84]	; (8003e18 <stepper_fx+0xb8>)
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	0052      	lsls	r2, r2, #1
 8003dc6:	5ad1      	ldrh	r1, [r2, r3]
 8003dc8:	4a14      	ldr	r2, [pc, #80]	; (8003e1c <stepper_fx+0xbc>)
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	18d2      	adds	r2, r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	18d3      	adds	r3, r2, r3
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	4812      	ldr	r0, [pc, #72]	; (8003e20 <stepper_fx+0xc0>)
 8003dd8:	001a      	movs	r2, r3
 8003dda:	f001 fd9f 	bl	800591c <HAL_GPIO_WritePin>
		for(int i = 0; i < 4; i++)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	3301      	adds	r3, #1
 8003de2:	60fb      	str	r3, [r7, #12]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2b03      	cmp	r3, #3
 8003de8:	ddea      	ble.n	8003dc0 <stepper_fx+0x60>
		}
		ciclo--;
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	3b01      	subs	r3, #1
 8003dee:	617b      	str	r3, [r7, #20]
		//			if(ciclo < 0) ciclo = 3;											// Pasos completos
		if(ciclo < 0) ciclo = 7;											// Medios pasos
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	da06      	bge.n	8003e04 <stepper_fx+0xa4>
 8003df6:	2307      	movs	r3, #7
 8003df8:	617b      	str	r3, [r7, #20]
		break;
 8003dfa:	e003      	b.n	8003e04 <stepper_fx+0xa4>
	}
	default:
	{
		break;
 8003dfc:	46c0      	nop			; (mov r8, r8)
 8003dfe:	e002      	b.n	8003e06 <stepper_fx+0xa6>
		break;
 8003e00:	46c0      	nop			; (mov r8, r8)
 8003e02:	e000      	b.n	8003e06 <stepper_fx+0xa6>
		break;
 8003e04:	46c0      	nop			; (mov r8, r8)
	}
	}
	osDelay(periodo);
 8003e06:	4b07      	ldr	r3, [pc, #28]	; (8003e24 <stepper_fx+0xc4>)
 8003e08:	881b      	ldrh	r3, [r3, #0]
 8003e0a:	0018      	movs	r0, r3
 8003e0c:	f007 fd98 	bl	800b940 <osDelay>
	switch(giro_stepper)
 8003e10:	e7ac      	b.n	8003d6c <stepper_fx+0xc>
 8003e12:	46c0      	nop			; (mov r8, r8)
 8003e14:	20000445 	.word	0x20000445
 8003e18:	080133c4 	.word	0x080133c4
 8003e1c:	080133cc 	.word	0x080133cc
 8003e20:	48000400 	.word	0x48000400
 8003e24:	20000010 	.word	0x20000010

08003e28 <serial_fx>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_serial_fx */
void serial_fx(void *argument)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af02      	add	r7, sp, #8
 8003e2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN serial_fx */
	static uint16_t angulo = 0;
	static char msg[50];

	osThreadSuspend(OLEDHandle);
 8003e30:	4b87      	ldr	r3, [pc, #540]	; (8004050 <serial_fx+0x228>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	0018      	movs	r0, r3
 8003e36:	f007 fd27 	bl	800b888 <osThreadSuspend>
	osThreadSuspend(LOCKHandle);
 8003e3a:	4b86      	ldr	r3, [pc, #536]	; (8004054 <serial_fx+0x22c>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	0018      	movs	r0, r3
 8003e40:	f007 fd22 	bl	800b888 <osThreadSuspend>
	u8g2_SetPowerSave(&u8g2, 1); // sleep display
 8003e44:	4b84      	ldr	r3, [pc, #528]	; (8004058 <serial_fx+0x230>)
 8003e46:	2101      	movs	r1, #1
 8003e48:	0018      	movs	r0, r3
 8003e4a:	f007 fb7f 	bl	800b54c <u8x8_SetPowerSave>
	HAL_UARTEx_ReceiveToIdle_IT(&huart2, (uint8_t *)buf, 5);
 8003e4e:	4983      	ldr	r1, [pc, #524]	; (800405c <serial_fx+0x234>)
 8003e50:	4b83      	ldr	r3, [pc, #524]	; (8004060 <serial_fx+0x238>)
 8003e52:	2205      	movs	r2, #5
 8003e54:	0018      	movs	r0, r3
 8003e56:	f005 f873 	bl	8008f40 <HAL_UARTEx_ReceiveToIdle_IT>
	/* Infinite loop */
	for(;;)
	{
		osSemaphoreAcquire(Rx_SemHandle, osWaitForever);
 8003e5a:	4b82      	ldr	r3, [pc, #520]	; (8004064 <serial_fx+0x23c>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	4252      	negs	r2, r2
 8003e62:	0011      	movs	r1, r2
 8003e64:	0018      	movs	r0, r3
 8003e66:	f007 fe35 	bl	800bad4 <osSemaphoreAcquire>
		switch(buf[0])
 8003e6a:	4b7c      	ldr	r3, [pc, #496]	; (800405c <serial_fx+0x234>)
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	3b41      	subs	r3, #65	; 0x41
 8003e70:	2b17      	cmp	r3, #23
 8003e72:	d900      	bls.n	8003e76 <serial_fx+0x4e>
 8003e74:	e0e1      	b.n	800403a <serial_fx+0x212>
 8003e76:	009a      	lsls	r2, r3, #2
 8003e78:	4b7b      	ldr	r3, [pc, #492]	; (8004068 <serial_fx+0x240>)
 8003e7a:	18d3      	adds	r3, r2, r3
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	469f      	mov	pc, r3
		{
		case 'P':
		{
			send_uart("'P': Servo controlado por potenciometro...\r\n\n");
 8003e80:	4b7a      	ldr	r3, [pc, #488]	; (800406c <serial_fx+0x244>)
 8003e82:	0018      	movs	r0, r3
 8003e84:	f7ff f94a 	bl	800311c <send_uart>
			osThreadResume(SERVOHandle);
 8003e88:	4b79      	ldr	r3, [pc, #484]	; (8004070 <serial_fx+0x248>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	0018      	movs	r0, r3
 8003e8e:	f007 fd29 	bl	800b8e4 <osThreadResume>
			osThreadSuspend(LOCKHandle);
 8003e92:	4b70      	ldr	r3, [pc, #448]	; (8004054 <serial_fx+0x22c>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	0018      	movs	r0, r3
 8003e98:	f007 fcf6 	bl	800b888 <osThreadSuspend>
			break;
 8003e9c:	e0d3      	b.n	8004046 <serial_fx+0x21e>
		}
		case 'S':
		{
			osThreadSuspend(SERVOHandle);
 8003e9e:	4b74      	ldr	r3, [pc, #464]	; (8004070 <serial_fx+0x248>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	0018      	movs	r0, r3
 8003ea4:	f007 fcf0 	bl	800b888 <osThreadSuspend>
			osThreadSuspend(LOCKHandle);
 8003ea8:	4b6a      	ldr	r3, [pc, #424]	; (8004054 <serial_fx+0x22c>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	0018      	movs	r0, r3
 8003eae:	f007 fceb 	bl	800b888 <osThreadSuspend>

			send_uart("'S': Introduce el angulo deseado (0-90):\r\n\n");
 8003eb2:	4b70      	ldr	r3, [pc, #448]	; (8004074 <serial_fx+0x24c>)
 8003eb4:	0018      	movs	r0, r3
 8003eb6:	f7ff f931 	bl	800311c <send_uart>
			osSemaphoreAcquire(Rx_SemHandle, osWaitForever);
 8003eba:	4b6a      	ldr	r3, [pc, #424]	; (8004064 <serial_fx+0x23c>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	4252      	negs	r2, r2
 8003ec2:	0011      	movs	r1, r2
 8003ec4:	0018      	movs	r0, r3
 8003ec6:	f007 fe05 	bl	800bad4 <osSemaphoreAcquire>
			angulo = atol(buf);
 8003eca:	4b64      	ldr	r3, [pc, #400]	; (800405c <serial_fx+0x234>)
 8003ecc:	0018      	movs	r0, r3
 8003ece:	f00a fdcd 	bl	800ea6c <atol>
 8003ed2:	0003      	movs	r3, r0
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	4b68      	ldr	r3, [pc, #416]	; (8004078 <serial_fx+0x250>)
 8003ed8:	801a      	strh	r2, [r3, #0]
			sprintf(msg,"Angulo recibido: %d\r\n\n", angulo);
 8003eda:	4b67      	ldr	r3, [pc, #412]	; (8004078 <serial_fx+0x250>)
 8003edc:	881b      	ldrh	r3, [r3, #0]
 8003ede:	001a      	movs	r2, r3
 8003ee0:	4966      	ldr	r1, [pc, #408]	; (800407c <serial_fx+0x254>)
 8003ee2:	4b67      	ldr	r3, [pc, #412]	; (8004080 <serial_fx+0x258>)
 8003ee4:	0018      	movs	r0, r3
 8003ee6:	f00b fc93 	bl	800f810 <siprintf>
			send_uart(msg);
 8003eea:	4b65      	ldr	r3, [pc, #404]	; (8004080 <serial_fx+0x258>)
 8003eec:	0018      	movs	r0, r3
 8003eee:	f7ff f915 	bl	800311c <send_uart>
			angulo = map(angulo, 0, 90, 99, 199);
 8003ef2:	4b61      	ldr	r3, [pc, #388]	; (8004078 <serial_fx+0x250>)
 8003ef4:	881b      	ldrh	r3, [r3, #0]
 8003ef6:	0018      	movs	r0, r3
 8003ef8:	23c7      	movs	r3, #199	; 0xc7
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	2363      	movs	r3, #99	; 0x63
 8003efe:	225a      	movs	r2, #90	; 0x5a
 8003f00:	2100      	movs	r1, #0
 8003f02:	f7fe ff9b 	bl	8002e3c <map>
 8003f06:	0003      	movs	r3, r0
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	4b5b      	ldr	r3, [pc, #364]	; (8004078 <serial_fx+0x250>)
 8003f0c:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, angulo);
 8003f0e:	4b5a      	ldr	r3, [pc, #360]	; (8004078 <serial_fx+0x250>)
 8003f10:	881a      	ldrh	r2, [r3, #0]
 8003f12:	4b5c      	ldr	r3, [pc, #368]	; (8004084 <serial_fx+0x25c>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8003f18:	e095      	b.n	8004046 <serial_fx+0x21e>
		}
		case 'A':
		{
			osThreadSuspend(SERVOHandle);
 8003f1a:	4b55      	ldr	r3, [pc, #340]	; (8004070 <serial_fx+0x248>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	0018      	movs	r0, r3
 8003f20:	f007 fcb2 	bl	800b888 <osThreadSuspend>
			osThreadResume(LOCKHandle);
 8003f24:	4b4b      	ldr	r3, [pc, #300]	; (8004054 <serial_fx+0x22c>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	0018      	movs	r0, r3
 8003f2a:	f007 fcdb 	bl	800b8e4 <osThreadResume>
//			osSemaphoreAcquire(Rx_SemHandle, osWaitForever);
//			segvel_value.velocidad = atol(buf);
//			if(segvel_value.velocidad == 0) segvel_value.velocidad++;
//			sprintf(msg,"Velocidad recibida: %d grados/segundo\r\n\n", segvel_value.velocidad);
//			send_uart(msg);
			segvel_value.espera = segvel_value.espera * 1000;
 8003f2e:	4b56      	ldr	r3, [pc, #344]	; (8004088 <serial_fx+0x260>)
 8003f30:	881b      	ldrh	r3, [r3, #0]
 8003f32:	22fa      	movs	r2, #250	; 0xfa
 8003f34:	0092      	lsls	r2, r2, #2
 8003f36:	4353      	muls	r3, r2
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	4b53      	ldr	r3, [pc, #332]	; (8004088 <serial_fx+0x260>)
 8003f3c:	801a      	strh	r2, [r3, #0]
			segvel_value.velocidad = 1000/segvel_value.velocidad;
 8003f3e:	4b52      	ldr	r3, [pc, #328]	; (8004088 <serial_fx+0x260>)
 8003f40:	885b      	ldrh	r3, [r3, #2]
 8003f42:	0019      	movs	r1, r3
 8003f44:	23fa      	movs	r3, #250	; 0xfa
 8003f46:	0098      	lsls	r0, r3, #2
 8003f48:	f7fc f984 	bl	8000254 <__divsi3>
 8003f4c:	0003      	movs	r3, r0
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	4b4d      	ldr	r3, [pc, #308]	; (8004088 <serial_fx+0x260>)
 8003f52:	805a      	strh	r2, [r3, #2]
			osMessageQueuePut(lock_queueHandle, &segvel_value, 1, 0);
 8003f54:	4b4d      	ldr	r3, [pc, #308]	; (800408c <serial_fx+0x264>)
 8003f56:	6818      	ldr	r0, [r3, #0]
 8003f58:	494b      	ldr	r1, [pc, #300]	; (8004088 <serial_fx+0x260>)
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f007 feeb 	bl	800bd38 <osMessageQueuePut>
			break;
 8003f62:	e070      	b.n	8004046 <serial_fx+0x21e>
		}
		case 'D':
		{
			send_uart("'D': Sentido Horario...\r\n\n");
 8003f64:	4b4a      	ldr	r3, [pc, #296]	; (8004090 <serial_fx+0x268>)
 8003f66:	0018      	movs	r0, r3
 8003f68:	f7ff f8d8 	bl	800311c <send_uart>
			giro_stepper = Horario;
 8003f6c:	4b49      	ldr	r3, [pc, #292]	; (8004094 <serial_fx+0x26c>)
 8003f6e:	2201      	movs	r2, #1
 8003f70:	701a      	strb	r2, [r3, #0]
			break;
 8003f72:	e068      	b.n	8004046 <serial_fx+0x21e>
		}
		case 'I':
		{
			send_uart("'I': Sentido Antihorario...\r\n\n");
 8003f74:	4b48      	ldr	r3, [pc, #288]	; (8004098 <serial_fx+0x270>)
 8003f76:	0018      	movs	r0, r3
 8003f78:	f7ff f8d0 	bl	800311c <send_uart>
			giro_stepper = Antihorario;
 8003f7c:	4b45      	ldr	r3, [pc, #276]	; (8004094 <serial_fx+0x26c>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	701a      	strb	r2, [r3, #0]
			break;
 8003f82:	e060      	b.n	8004046 <serial_fx+0x21e>
		}
		case 'M':
		{
			send_uart("'M': Introduzca el PERIODO (1-9):\r\n\n");
 8003f84:	4b45      	ldr	r3, [pc, #276]	; (800409c <serial_fx+0x274>)
 8003f86:	0018      	movs	r0, r3
 8003f88:	f7ff f8c8 	bl	800311c <send_uart>
			osSemaphoreAcquire(Rx_SemHandle, osWaitForever);
 8003f8c:	4b35      	ldr	r3, [pc, #212]	; (8004064 <serial_fx+0x23c>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2201      	movs	r2, #1
 8003f92:	4252      	negs	r2, r2
 8003f94:	0011      	movs	r1, r2
 8003f96:	0018      	movs	r0, r3
 8003f98:	f007 fd9c 	bl	800bad4 <osSemaphoreAcquire>
			if(atol(buf) <= 1)
 8003f9c:	4b2f      	ldr	r3, [pc, #188]	; (800405c <serial_fx+0x234>)
 8003f9e:	0018      	movs	r0, r3
 8003fa0:	f00a fd64 	bl	800ea6c <atol>
 8003fa4:	0003      	movs	r3, r0
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	dc07      	bgt.n	8003fba <serial_fx+0x192>
			{
				periodo = 2;
 8003faa:	4b3d      	ldr	r3, [pc, #244]	; (80040a0 <serial_fx+0x278>)
 8003fac:	2202      	movs	r2, #2
 8003fae:	801a      	strh	r2, [r3, #0]
				send_uart("'M': Recibido 1...\r\n\n");
 8003fb0:	4b3c      	ldr	r3, [pc, #240]	; (80040a4 <serial_fx+0x27c>)
 8003fb2:	0018      	movs	r0, r3
 8003fb4:	f7ff f8b2 	bl	800311c <send_uart>
				break;
 8003fb8:	e045      	b.n	8004046 <serial_fx+0x21e>
			}
			if(atol(buf) >= 9)
 8003fba:	4b28      	ldr	r3, [pc, #160]	; (800405c <serial_fx+0x234>)
 8003fbc:	0018      	movs	r0, r3
 8003fbe:	f00a fd55 	bl	800ea6c <atol>
 8003fc2:	0003      	movs	r3, r0
 8003fc4:	2b08      	cmp	r3, #8
 8003fc6:	dd07      	ble.n	8003fd8 <serial_fx+0x1b0>
			{
				periodo = 10;
 8003fc8:	4b35      	ldr	r3, [pc, #212]	; (80040a0 <serial_fx+0x278>)
 8003fca:	220a      	movs	r2, #10
 8003fcc:	801a      	strh	r2, [r3, #0]
				send_uart("'M': Recibido 9...\r\n\n");
 8003fce:	4b36      	ldr	r3, [pc, #216]	; (80040a8 <serial_fx+0x280>)
 8003fd0:	0018      	movs	r0, r3
 8003fd2:	f7ff f8a3 	bl	800311c <send_uart>
				break;
 8003fd6:	e036      	b.n	8004046 <serial_fx+0x21e>
			}
			periodo = atol(buf) + 1;
 8003fd8:	4b20      	ldr	r3, [pc, #128]	; (800405c <serial_fx+0x234>)
 8003fda:	0018      	movs	r0, r3
 8003fdc:	f00a fd46 	bl	800ea6c <atol>
 8003fe0:	0003      	movs	r3, r0
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	4b2d      	ldr	r3, [pc, #180]	; (80040a0 <serial_fx+0x278>)
 8003fea:	801a      	strh	r2, [r3, #0]
			sprintf(msg, "'M': Recibido %hu...\r\n\n", periodo - 1);
 8003fec:	4b2c      	ldr	r3, [pc, #176]	; (80040a0 <serial_fx+0x278>)
 8003fee:	881b      	ldrh	r3, [r3, #0]
 8003ff0:	1e5a      	subs	r2, r3, #1
 8003ff2:	492e      	ldr	r1, [pc, #184]	; (80040ac <serial_fx+0x284>)
 8003ff4:	4b22      	ldr	r3, [pc, #136]	; (8004080 <serial_fx+0x258>)
 8003ff6:	0018      	movs	r0, r3
 8003ff8:	f00b fc0a 	bl	800f810 <siprintf>
			send_uart(msg);
 8003ffc:	4b20      	ldr	r3, [pc, #128]	; (8004080 <serial_fx+0x258>)
 8003ffe:	0018      	movs	r0, r3
 8004000:	f7ff f88c 	bl	800311c <send_uart>
			break;
 8004004:	e01f      	b.n	8004046 <serial_fx+0x21e>
		}
		case 'X':
			osThreadResume(OLEDHandle);
 8004006:	4b12      	ldr	r3, [pc, #72]	; (8004050 <serial_fx+0x228>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	0018      	movs	r0, r3
 800400c:	f007 fc6a 	bl	800b8e4 <osThreadResume>
			u8g2_SetPowerSave(&u8g2, 0); // wake up display
 8004010:	4b11      	ldr	r3, [pc, #68]	; (8004058 <serial_fx+0x230>)
 8004012:	2100      	movs	r1, #0
 8004014:	0018      	movs	r0, r3
 8004016:	f007 fa99 	bl	800b54c <u8x8_SetPowerSave>
			break;
 800401a:	e014      	b.n	8004046 <serial_fx+0x21e>
		case 'C':
			osThreadSuspend(OLEDHandle);
 800401c:	4b0c      	ldr	r3, [pc, #48]	; (8004050 <serial_fx+0x228>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	0018      	movs	r0, r3
 8004022:	f007 fc31 	bl	800b888 <osThreadSuspend>
			u8g2_SetPowerSave(&u8g2, 1); // sleep display
 8004026:	4b0c      	ldr	r3, [pc, #48]	; (8004058 <serial_fx+0x230>)
 8004028:	2101      	movs	r1, #1
 800402a:	0018      	movs	r0, r3
 800402c:	f007 fa8e 	bl	800b54c <u8x8_SetPowerSave>
			break;
 8004030:	e009      	b.n	8004046 <serial_fx+0x21e>
		case 'T':
			if(buf[3] != 0xE0) break;
 8004032:	4b0a      	ldr	r3, [pc, #40]	; (800405c <serial_fx+0x234>)
 8004034:	78db      	ldrb	r3, [r3, #3]
 8004036:	2be0      	cmp	r3, #224	; 0xe0
 8004038:	d104      	bne.n	8004044 <serial_fx+0x21c>

		default:
		{
			send_uart("ERROR!! Comando no valido\r\n\n");
 800403a:	4b1d      	ldr	r3, [pc, #116]	; (80040b0 <serial_fx+0x288>)
 800403c:	0018      	movs	r0, r3
 800403e:	f7ff f86d 	bl	800311c <send_uart>
 8004042:	e000      	b.n	8004046 <serial_fx+0x21e>
			if(buf[3] != 0xE0) break;
 8004044:	46c0      	nop			; (mov r8, r8)
		}
		}
		osDelay(1);
 8004046:	2001      	movs	r0, #1
 8004048:	f007 fc7a 	bl	800b940 <osDelay>
		osSemaphoreAcquire(Rx_SemHandle, osWaitForever);
 800404c:	e705      	b.n	8003e5a <serial_fx+0x32>
 800404e:	46c0      	nop			; (mov r8, r8)
 8004050:	20000418 	.word	0x20000418
 8004054:	2000042c 	.word	0x2000042c
 8004058:	20000448 	.word	0x20000448
 800405c:	20000440 	.word	0x20000440
 8004060:	20000390 	.word	0x20000390
 8004064:	20000438 	.word	0x20000438
 8004068:	08013558 	.word	0x08013558
 800406c:	08012d4c 	.word	0x08012d4c
 8004070:	20000420 	.word	0x20000420
 8004074:	08012d7c 	.word	0x08012d7c
 8004078:	2000050c 	.word	0x2000050c
 800407c:	08012da8 	.word	0x08012da8
 8004080:	20000510 	.word	0x20000510
 8004084:	20000348 	.word	0x20000348
 8004088:	2000043c 	.word	0x2000043c
 800408c:	20000430 	.word	0x20000430
 8004090:	08012dc0 	.word	0x08012dc0
 8004094:	20000445 	.word	0x20000445
 8004098:	08012ddc 	.word	0x08012ddc
 800409c:	08012dfc 	.word	0x08012dfc
 80040a0:	20000010 	.word	0x20000010
 80040a4:	08012e24 	.word	0x08012e24
 80040a8:	08012e3c 	.word	0x08012e3c
 80040ac:	08012e54 	.word	0x08012e54
 80040b0:	08012e6c 	.word	0x08012e6c

080040b4 <servo_lock>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_servo_lock */
void servo_lock(void *argument)
{
 80040b4:	b590      	push	{r4, r7, lr}
 80040b6:	b089      	sub	sp, #36	; 0x24
 80040b8:	af02      	add	r7, sp, #8
 80040ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN servo_lock */
	enum maquina {
		Reposo, Abriendo, Espera, Cerrando
	} estados;
	estados = Reposo;
 80040bc:	2317      	movs	r3, #23
 80040be:	18fb      	adds	r3, r7, r3
 80040c0:	2200      	movs	r2, #0
 80040c2:	701a      	strb	r2, [r3, #0]
	/* Infinite loop */
	for(;;)
	{
		switch(estados)
 80040c4:	2317      	movs	r3, #23
 80040c6:	18fb      	adds	r3, r7, r3
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	2b03      	cmp	r3, #3
 80040cc:	d043      	beq.n	8004156 <servo_lock+0xa2>
 80040ce:	dd00      	ble.n	80040d2 <servo_lock+0x1e>
 80040d0:	e06c      	b.n	80041ac <servo_lock+0xf8>
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d035      	beq.n	8004142 <servo_lock+0x8e>
 80040d6:	dc69      	bgt.n	80041ac <servo_lock+0xf8>
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d002      	beq.n	80040e2 <servo_lock+0x2e>
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d011      	beq.n	8004104 <servo_lock+0x50>
			}
			estados = Reposo;
			if(osMessageQueueGetCount(lock_queueHandle) == 0) osThreadSuspend(LOCKHandle);
			break;
		default:
			break;
 80040e0:	e064      	b.n	80041ac <servo_lock+0xf8>
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 99);
 80040e2:	4b36      	ldr	r3, [pc, #216]	; (80041bc <servo_lock+0x108>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2263      	movs	r2, #99	; 0x63
 80040e8:	639a      	str	r2, [r3, #56]	; 0x38
			osMessageQueueGet(lock_queueHandle, &segvel_value, (uint8_t *)1, osWaitForever);
 80040ea:	4b35      	ldr	r3, [pc, #212]	; (80041c0 <servo_lock+0x10c>)
 80040ec:	6818      	ldr	r0, [r3, #0]
 80040ee:	2301      	movs	r3, #1
 80040f0:	425b      	negs	r3, r3
 80040f2:	4934      	ldr	r1, [pc, #208]	; (80041c4 <servo_lock+0x110>)
 80040f4:	2201      	movs	r2, #1
 80040f6:	f007 fe89 	bl	800be0c <osMessageQueueGet>
			estados = Abriendo;
 80040fa:	2317      	movs	r3, #23
 80040fc:	18fb      	adds	r3, r7, r3
 80040fe:	2201      	movs	r2, #1
 8004100:	701a      	strb	r2, [r3, #0]
			break;
 8004102:	e056      	b.n	80041b2 <servo_lock+0xfe>
			for(int i = 0; i<91; i++)
 8004104:	2300      	movs	r3, #0
 8004106:	613b      	str	r3, [r7, #16]
 8004108:	e013      	b.n	8004132 <servo_lock+0x7e>
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, map(i, 0, 90, 99, 199));
 800410a:	6938      	ldr	r0, [r7, #16]
 800410c:	4b2b      	ldr	r3, [pc, #172]	; (80041bc <servo_lock+0x108>)
 800410e:	681c      	ldr	r4, [r3, #0]
 8004110:	23c7      	movs	r3, #199	; 0xc7
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	2363      	movs	r3, #99	; 0x63
 8004116:	225a      	movs	r2, #90	; 0x5a
 8004118:	2100      	movs	r1, #0
 800411a:	f7fe fe8f 	bl	8002e3c <map>
 800411e:	0003      	movs	r3, r0
 8004120:	63a3      	str	r3, [r4, #56]	; 0x38
				osDelay(segvel_value.velocidad);
 8004122:	4b28      	ldr	r3, [pc, #160]	; (80041c4 <servo_lock+0x110>)
 8004124:	885b      	ldrh	r3, [r3, #2]
 8004126:	0018      	movs	r0, r3
 8004128:	f007 fc0a 	bl	800b940 <osDelay>
			for(int i = 0; i<91; i++)
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	3301      	adds	r3, #1
 8004130:	613b      	str	r3, [r7, #16]
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	2b5a      	cmp	r3, #90	; 0x5a
 8004136:	dde8      	ble.n	800410a <servo_lock+0x56>
			estados = Espera;
 8004138:	2317      	movs	r3, #23
 800413a:	18fb      	adds	r3, r7, r3
 800413c:	2202      	movs	r2, #2
 800413e:	701a      	strb	r2, [r3, #0]
			break;
 8004140:	e037      	b.n	80041b2 <servo_lock+0xfe>
			osDelay(segvel_value.espera);
 8004142:	4b20      	ldr	r3, [pc, #128]	; (80041c4 <servo_lock+0x110>)
 8004144:	881b      	ldrh	r3, [r3, #0]
 8004146:	0018      	movs	r0, r3
 8004148:	f007 fbfa 	bl	800b940 <osDelay>
			estados = Cerrando;
 800414c:	2317      	movs	r3, #23
 800414e:	18fb      	adds	r3, r7, r3
 8004150:	2203      	movs	r2, #3
 8004152:	701a      	strb	r2, [r3, #0]
			break;
 8004154:	e02d      	b.n	80041b2 <servo_lock+0xfe>
			for(int i = 90; i>=0; i--)
 8004156:	235a      	movs	r3, #90	; 0x5a
 8004158:	60fb      	str	r3, [r7, #12]
 800415a:	e013      	b.n	8004184 <servo_lock+0xd0>
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, map(i, 0, 90, 99, 199));
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	4b17      	ldr	r3, [pc, #92]	; (80041bc <servo_lock+0x108>)
 8004160:	681c      	ldr	r4, [r3, #0]
 8004162:	23c7      	movs	r3, #199	; 0xc7
 8004164:	9300      	str	r3, [sp, #0]
 8004166:	2363      	movs	r3, #99	; 0x63
 8004168:	225a      	movs	r2, #90	; 0x5a
 800416a:	2100      	movs	r1, #0
 800416c:	f7fe fe66 	bl	8002e3c <map>
 8004170:	0003      	movs	r3, r0
 8004172:	63a3      	str	r3, [r4, #56]	; 0x38
				osDelay(segvel_value.velocidad);
 8004174:	4b13      	ldr	r3, [pc, #76]	; (80041c4 <servo_lock+0x110>)
 8004176:	885b      	ldrh	r3, [r3, #2]
 8004178:	0018      	movs	r0, r3
 800417a:	f007 fbe1 	bl	800b940 <osDelay>
			for(int i = 90; i>=0; i--)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	3b01      	subs	r3, #1
 8004182:	60fb      	str	r3, [r7, #12]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2b00      	cmp	r3, #0
 8004188:	dae8      	bge.n	800415c <servo_lock+0xa8>
			estados = Reposo;
 800418a:	2317      	movs	r3, #23
 800418c:	18fb      	adds	r3, r7, r3
 800418e:	2200      	movs	r2, #0
 8004190:	701a      	strb	r2, [r3, #0]
			if(osMessageQueueGetCount(lock_queueHandle) == 0) osThreadSuspend(LOCKHandle);
 8004192:	4b0b      	ldr	r3, [pc, #44]	; (80041c0 <servo_lock+0x10c>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	0018      	movs	r0, r3
 8004198:	f007 fea0 	bl	800bedc <osMessageQueueGetCount>
 800419c:	1e03      	subs	r3, r0, #0
 800419e:	d107      	bne.n	80041b0 <servo_lock+0xfc>
 80041a0:	4b09      	ldr	r3, [pc, #36]	; (80041c8 <servo_lock+0x114>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	0018      	movs	r0, r3
 80041a6:	f007 fb6f 	bl	800b888 <osThreadSuspend>
			break;
 80041aa:	e001      	b.n	80041b0 <servo_lock+0xfc>
			break;
 80041ac:	46c0      	nop			; (mov r8, r8)
 80041ae:	e000      	b.n	80041b2 <servo_lock+0xfe>
			break;
 80041b0:	46c0      	nop			; (mov r8, r8)

		}
		osDelay(1);
 80041b2:	2001      	movs	r0, #1
 80041b4:	f007 fbc4 	bl	800b940 <osDelay>
		switch(estados)
 80041b8:	e784      	b.n	80040c4 <servo_lock+0x10>
 80041ba:	46c0      	nop			; (mov r8, r8)
 80041bc:	20000348 	.word	0x20000348
 80041c0:	20000430 	.word	0x20000430
 80041c4:	2000043c 	.word	0x2000043c
 80041c8:	2000042c 	.word	0x2000042c

080041cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a04      	ldr	r2, [pc, #16]	; (80041ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d101      	bne.n	80041e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80041de:	f000 fb37 	bl	8004850 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80041e2:	46c0      	nop			; (mov r8, r8)
 80041e4:	46bd      	mov	sp, r7
 80041e6:	b002      	add	sp, #8
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	46c0      	nop			; (mov r8, r8)
 80041ec:	40012c00 	.word	0x40012c00

080041f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80041f4:	b672      	cpsid	i
}
 80041f6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80041f8:	e7fe      	b.n	80041f8 <Error_Handler+0x8>
	...

080041fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004202:	4b12      	ldr	r3, [pc, #72]	; (800424c <HAL_MspInit+0x50>)
 8004204:	699a      	ldr	r2, [r3, #24]
 8004206:	4b11      	ldr	r3, [pc, #68]	; (800424c <HAL_MspInit+0x50>)
 8004208:	2101      	movs	r1, #1
 800420a:	430a      	orrs	r2, r1
 800420c:	619a      	str	r2, [r3, #24]
 800420e:	4b0f      	ldr	r3, [pc, #60]	; (800424c <HAL_MspInit+0x50>)
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	2201      	movs	r2, #1
 8004214:	4013      	ands	r3, r2
 8004216:	607b      	str	r3, [r7, #4]
 8004218:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800421a:	4b0c      	ldr	r3, [pc, #48]	; (800424c <HAL_MspInit+0x50>)
 800421c:	69da      	ldr	r2, [r3, #28]
 800421e:	4b0b      	ldr	r3, [pc, #44]	; (800424c <HAL_MspInit+0x50>)
 8004220:	2180      	movs	r1, #128	; 0x80
 8004222:	0549      	lsls	r1, r1, #21
 8004224:	430a      	orrs	r2, r1
 8004226:	61da      	str	r2, [r3, #28]
 8004228:	4b08      	ldr	r3, [pc, #32]	; (800424c <HAL_MspInit+0x50>)
 800422a:	69da      	ldr	r2, [r3, #28]
 800422c:	2380      	movs	r3, #128	; 0x80
 800422e:	055b      	lsls	r3, r3, #21
 8004230:	4013      	ands	r3, r2
 8004232:	603b      	str	r3, [r7, #0]
 8004234:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8004236:	2302      	movs	r3, #2
 8004238:	425b      	negs	r3, r3
 800423a:	2200      	movs	r2, #0
 800423c:	2103      	movs	r1, #3
 800423e:	0018      	movs	r0, r3
 8004240:	f001 f95a 	bl	80054f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004244:	46c0      	nop			; (mov r8, r8)
 8004246:	46bd      	mov	sp, r7
 8004248:	b002      	add	sp, #8
 800424a:	bd80      	pop	{r7, pc}
 800424c:	40021000 	.word	0x40021000

08004250 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004250:	b590      	push	{r4, r7, lr}
 8004252:	b08b      	sub	sp, #44	; 0x2c
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004258:	2414      	movs	r4, #20
 800425a:	193b      	adds	r3, r7, r4
 800425c:	0018      	movs	r0, r3
 800425e:	2314      	movs	r3, #20
 8004260:	001a      	movs	r2, r3
 8004262:	2100      	movs	r1, #0
 8004264:	f00a fd40 	bl	800ece8 <memset>
  if(hadc->Instance==ADC1)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a1d      	ldr	r2, [pc, #116]	; (80042e4 <HAL_ADC_MspInit+0x94>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d133      	bne.n	80042da <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004272:	4b1d      	ldr	r3, [pc, #116]	; (80042e8 <HAL_ADC_MspInit+0x98>)
 8004274:	699a      	ldr	r2, [r3, #24]
 8004276:	4b1c      	ldr	r3, [pc, #112]	; (80042e8 <HAL_ADC_MspInit+0x98>)
 8004278:	2180      	movs	r1, #128	; 0x80
 800427a:	0089      	lsls	r1, r1, #2
 800427c:	430a      	orrs	r2, r1
 800427e:	619a      	str	r2, [r3, #24]
 8004280:	4b19      	ldr	r3, [pc, #100]	; (80042e8 <HAL_ADC_MspInit+0x98>)
 8004282:	699a      	ldr	r2, [r3, #24]
 8004284:	2380      	movs	r3, #128	; 0x80
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4013      	ands	r3, r2
 800428a:	613b      	str	r3, [r7, #16]
 800428c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800428e:	4b16      	ldr	r3, [pc, #88]	; (80042e8 <HAL_ADC_MspInit+0x98>)
 8004290:	695a      	ldr	r2, [r3, #20]
 8004292:	4b15      	ldr	r3, [pc, #84]	; (80042e8 <HAL_ADC_MspInit+0x98>)
 8004294:	2180      	movs	r1, #128	; 0x80
 8004296:	0289      	lsls	r1, r1, #10
 8004298:	430a      	orrs	r2, r1
 800429a:	615a      	str	r2, [r3, #20]
 800429c:	4b12      	ldr	r3, [pc, #72]	; (80042e8 <HAL_ADC_MspInit+0x98>)
 800429e:	695a      	ldr	r2, [r3, #20]
 80042a0:	2380      	movs	r3, #128	; 0x80
 80042a2:	029b      	lsls	r3, r3, #10
 80042a4:	4013      	ands	r3, r2
 80042a6:	60fb      	str	r3, [r7, #12]
 80042a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80042aa:	193b      	adds	r3, r7, r4
 80042ac:	2203      	movs	r2, #3
 80042ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80042b0:	193b      	adds	r3, r7, r4
 80042b2:	2203      	movs	r2, #3
 80042b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042b6:	193b      	adds	r3, r7, r4
 80042b8:	2200      	movs	r2, #0
 80042ba:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042bc:	193a      	adds	r2, r7, r4
 80042be:	2390      	movs	r3, #144	; 0x90
 80042c0:	05db      	lsls	r3, r3, #23
 80042c2:	0011      	movs	r1, r2
 80042c4:	0018      	movs	r0, r3
 80042c6:	f001 f9b9 	bl	800563c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 3, 0);
 80042ca:	2200      	movs	r2, #0
 80042cc:	2103      	movs	r1, #3
 80042ce:	200c      	movs	r0, #12
 80042d0:	f001 f912 	bl	80054f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80042d4:	200c      	movs	r0, #12
 80042d6:	f001 f924 	bl	8005522 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80042da:	46c0      	nop			; (mov r8, r8)
 80042dc:	46bd      	mov	sp, r7
 80042de:	b00b      	add	sp, #44	; 0x2c
 80042e0:	bd90      	pop	{r4, r7, pc}
 80042e2:	46c0      	nop			; (mov r8, r8)
 80042e4:	40012400 	.word	0x40012400
 80042e8:	40021000 	.word	0x40021000

080042ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80042ec:	b590      	push	{r4, r7, lr}
 80042ee:	b08b      	sub	sp, #44	; 0x2c
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042f4:	2414      	movs	r4, #20
 80042f6:	193b      	adds	r3, r7, r4
 80042f8:	0018      	movs	r0, r3
 80042fa:	2314      	movs	r3, #20
 80042fc:	001a      	movs	r2, r3
 80042fe:	2100      	movs	r1, #0
 8004300:	f00a fcf2 	bl	800ece8 <memset>
  if(hi2c->Instance==I2C1)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a1c      	ldr	r2, [pc, #112]	; (800437c <HAL_I2C_MspInit+0x90>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d132      	bne.n	8004374 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800430e:	4b1c      	ldr	r3, [pc, #112]	; (8004380 <HAL_I2C_MspInit+0x94>)
 8004310:	695a      	ldr	r2, [r3, #20]
 8004312:	4b1b      	ldr	r3, [pc, #108]	; (8004380 <HAL_I2C_MspInit+0x94>)
 8004314:	2180      	movs	r1, #128	; 0x80
 8004316:	02c9      	lsls	r1, r1, #11
 8004318:	430a      	orrs	r2, r1
 800431a:	615a      	str	r2, [r3, #20]
 800431c:	4b18      	ldr	r3, [pc, #96]	; (8004380 <HAL_I2C_MspInit+0x94>)
 800431e:	695a      	ldr	r2, [r3, #20]
 8004320:	2380      	movs	r3, #128	; 0x80
 8004322:	02db      	lsls	r3, r3, #11
 8004324:	4013      	ands	r3, r2
 8004326:	613b      	str	r3, [r7, #16]
 8004328:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800432a:	193b      	adds	r3, r7, r4
 800432c:	22c0      	movs	r2, #192	; 0xc0
 800432e:	0092      	lsls	r2, r2, #2
 8004330:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004332:	0021      	movs	r1, r4
 8004334:	187b      	adds	r3, r7, r1
 8004336:	2212      	movs	r2, #18
 8004338:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800433a:	187b      	adds	r3, r7, r1
 800433c:	2200      	movs	r2, #0
 800433e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004340:	187b      	adds	r3, r7, r1
 8004342:	2203      	movs	r2, #3
 8004344:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8004346:	187b      	adds	r3, r7, r1
 8004348:	2201      	movs	r2, #1
 800434a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800434c:	187b      	adds	r3, r7, r1
 800434e:	4a0d      	ldr	r2, [pc, #52]	; (8004384 <HAL_I2C_MspInit+0x98>)
 8004350:	0019      	movs	r1, r3
 8004352:	0010      	movs	r0, r2
 8004354:	f001 f972 	bl	800563c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004358:	4b09      	ldr	r3, [pc, #36]	; (8004380 <HAL_I2C_MspInit+0x94>)
 800435a:	69da      	ldr	r2, [r3, #28]
 800435c:	4b08      	ldr	r3, [pc, #32]	; (8004380 <HAL_I2C_MspInit+0x94>)
 800435e:	2180      	movs	r1, #128	; 0x80
 8004360:	0389      	lsls	r1, r1, #14
 8004362:	430a      	orrs	r2, r1
 8004364:	61da      	str	r2, [r3, #28]
 8004366:	4b06      	ldr	r3, [pc, #24]	; (8004380 <HAL_I2C_MspInit+0x94>)
 8004368:	69da      	ldr	r2, [r3, #28]
 800436a:	2380      	movs	r3, #128	; 0x80
 800436c:	039b      	lsls	r3, r3, #14
 800436e:	4013      	ands	r3, r2
 8004370:	60fb      	str	r3, [r7, #12]
 8004372:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004374:	46c0      	nop			; (mov r8, r8)
 8004376:	46bd      	mov	sp, r7
 8004378:	b00b      	add	sp, #44	; 0x2c
 800437a:	bd90      	pop	{r4, r7, pc}
 800437c:	40005400 	.word	0x40005400
 8004380:	40021000 	.word	0x40021000
 8004384:	48000400 	.word	0x48000400

08004388 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a09      	ldr	r2, [pc, #36]	; (80043bc <HAL_TIM_Base_MspInit+0x34>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d10b      	bne.n	80043b2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800439a:	4b09      	ldr	r3, [pc, #36]	; (80043c0 <HAL_TIM_Base_MspInit+0x38>)
 800439c:	69da      	ldr	r2, [r3, #28]
 800439e:	4b08      	ldr	r3, [pc, #32]	; (80043c0 <HAL_TIM_Base_MspInit+0x38>)
 80043a0:	2102      	movs	r1, #2
 80043a2:	430a      	orrs	r2, r1
 80043a4:	61da      	str	r2, [r3, #28]
 80043a6:	4b06      	ldr	r3, [pc, #24]	; (80043c0 <HAL_TIM_Base_MspInit+0x38>)
 80043a8:	69db      	ldr	r3, [r3, #28]
 80043aa:	2202      	movs	r2, #2
 80043ac:	4013      	ands	r3, r2
 80043ae:	60fb      	str	r3, [r7, #12]
 80043b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80043b2:	46c0      	nop			; (mov r8, r8)
 80043b4:	46bd      	mov	sp, r7
 80043b6:	b004      	add	sp, #16
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	46c0      	nop			; (mov r8, r8)
 80043bc:	40000400 	.word	0x40000400
 80043c0:	40021000 	.word	0x40021000

080043c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80043c4:	b590      	push	{r4, r7, lr}
 80043c6:	b089      	sub	sp, #36	; 0x24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043cc:	240c      	movs	r4, #12
 80043ce:	193b      	adds	r3, r7, r4
 80043d0:	0018      	movs	r0, r3
 80043d2:	2314      	movs	r3, #20
 80043d4:	001a      	movs	r2, r3
 80043d6:	2100      	movs	r1, #0
 80043d8:	f00a fc86 	bl	800ece8 <memset>
  if(htim->Instance==TIM3)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a15      	ldr	r2, [pc, #84]	; (8004438 <HAL_TIM_MspPostInit+0x74>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d123      	bne.n	800442e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043e6:	4b15      	ldr	r3, [pc, #84]	; (800443c <HAL_TIM_MspPostInit+0x78>)
 80043e8:	695a      	ldr	r2, [r3, #20]
 80043ea:	4b14      	ldr	r3, [pc, #80]	; (800443c <HAL_TIM_MspPostInit+0x78>)
 80043ec:	2180      	movs	r1, #128	; 0x80
 80043ee:	0309      	lsls	r1, r1, #12
 80043f0:	430a      	orrs	r2, r1
 80043f2:	615a      	str	r2, [r3, #20]
 80043f4:	4b11      	ldr	r3, [pc, #68]	; (800443c <HAL_TIM_MspPostInit+0x78>)
 80043f6:	695a      	ldr	r2, [r3, #20]
 80043f8:	2380      	movs	r3, #128	; 0x80
 80043fa:	031b      	lsls	r3, r3, #12
 80043fc:	4013      	ands	r3, r2
 80043fe:	60bb      	str	r3, [r7, #8]
 8004400:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004402:	0021      	movs	r1, r4
 8004404:	187b      	adds	r3, r7, r1
 8004406:	2280      	movs	r2, #128	; 0x80
 8004408:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800440a:	187b      	adds	r3, r7, r1
 800440c:	2202      	movs	r2, #2
 800440e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004410:	187b      	adds	r3, r7, r1
 8004412:	2200      	movs	r2, #0
 8004414:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004416:	187b      	adds	r3, r7, r1
 8004418:	2200      	movs	r2, #0
 800441a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM3;
 800441c:	187b      	adds	r3, r7, r1
 800441e:	2200      	movs	r2, #0
 8004420:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004422:	187b      	adds	r3, r7, r1
 8004424:	4a06      	ldr	r2, [pc, #24]	; (8004440 <HAL_TIM_MspPostInit+0x7c>)
 8004426:	0019      	movs	r1, r3
 8004428:	0010      	movs	r0, r2
 800442a:	f001 f907 	bl	800563c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800442e:	46c0      	nop			; (mov r8, r8)
 8004430:	46bd      	mov	sp, r7
 8004432:	b009      	add	sp, #36	; 0x24
 8004434:	bd90      	pop	{r4, r7, pc}
 8004436:	46c0      	nop			; (mov r8, r8)
 8004438:	40000400 	.word	0x40000400
 800443c:	40021000 	.word	0x40021000
 8004440:	48000800 	.word	0x48000800

08004444 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004444:	b590      	push	{r4, r7, lr}
 8004446:	b08b      	sub	sp, #44	; 0x2c
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800444c:	2414      	movs	r4, #20
 800444e:	193b      	adds	r3, r7, r4
 8004450:	0018      	movs	r0, r3
 8004452:	2314      	movs	r3, #20
 8004454:	001a      	movs	r2, r3
 8004456:	2100      	movs	r1, #0
 8004458:	f00a fc46 	bl	800ece8 <memset>
  if(huart->Instance==USART2)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a20      	ldr	r2, [pc, #128]	; (80044e4 <HAL_UART_MspInit+0xa0>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d13a      	bne.n	80044dc <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004466:	4b20      	ldr	r3, [pc, #128]	; (80044e8 <HAL_UART_MspInit+0xa4>)
 8004468:	69da      	ldr	r2, [r3, #28]
 800446a:	4b1f      	ldr	r3, [pc, #124]	; (80044e8 <HAL_UART_MspInit+0xa4>)
 800446c:	2180      	movs	r1, #128	; 0x80
 800446e:	0289      	lsls	r1, r1, #10
 8004470:	430a      	orrs	r2, r1
 8004472:	61da      	str	r2, [r3, #28]
 8004474:	4b1c      	ldr	r3, [pc, #112]	; (80044e8 <HAL_UART_MspInit+0xa4>)
 8004476:	69da      	ldr	r2, [r3, #28]
 8004478:	2380      	movs	r3, #128	; 0x80
 800447a:	029b      	lsls	r3, r3, #10
 800447c:	4013      	ands	r3, r2
 800447e:	613b      	str	r3, [r7, #16]
 8004480:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004482:	4b19      	ldr	r3, [pc, #100]	; (80044e8 <HAL_UART_MspInit+0xa4>)
 8004484:	695a      	ldr	r2, [r3, #20]
 8004486:	4b18      	ldr	r3, [pc, #96]	; (80044e8 <HAL_UART_MspInit+0xa4>)
 8004488:	2180      	movs	r1, #128	; 0x80
 800448a:	0289      	lsls	r1, r1, #10
 800448c:	430a      	orrs	r2, r1
 800448e:	615a      	str	r2, [r3, #20]
 8004490:	4b15      	ldr	r3, [pc, #84]	; (80044e8 <HAL_UART_MspInit+0xa4>)
 8004492:	695a      	ldr	r2, [r3, #20]
 8004494:	2380      	movs	r3, #128	; 0x80
 8004496:	029b      	lsls	r3, r3, #10
 8004498:	4013      	ands	r3, r2
 800449a:	60fb      	str	r3, [r7, #12]
 800449c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800449e:	0021      	movs	r1, r4
 80044a0:	187b      	adds	r3, r7, r1
 80044a2:	220c      	movs	r2, #12
 80044a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044a6:	187b      	adds	r3, r7, r1
 80044a8:	2202      	movs	r2, #2
 80044aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ac:	187b      	adds	r3, r7, r1
 80044ae:	2200      	movs	r2, #0
 80044b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80044b2:	187b      	adds	r3, r7, r1
 80044b4:	2203      	movs	r2, #3
 80044b6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80044b8:	187b      	adds	r3, r7, r1
 80044ba:	2201      	movs	r2, #1
 80044bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044be:	187a      	adds	r2, r7, r1
 80044c0:	2390      	movs	r3, #144	; 0x90
 80044c2:	05db      	lsls	r3, r3, #23
 80044c4:	0011      	movs	r1, r2
 80044c6:	0018      	movs	r0, r3
 80044c8:	f001 f8b8 	bl	800563c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 80044cc:	2200      	movs	r2, #0
 80044ce:	2103      	movs	r1, #3
 80044d0:	201c      	movs	r0, #28
 80044d2:	f001 f811 	bl	80054f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80044d6:	201c      	movs	r0, #28
 80044d8:	f001 f823 	bl	8005522 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80044dc:	46c0      	nop			; (mov r8, r8)
 80044de:	46bd      	mov	sp, r7
 80044e0:	b00b      	add	sp, #44	; 0x2c
 80044e2:	bd90      	pop	{r4, r7, pc}
 80044e4:	40004400 	.word	0x40004400
 80044e8:	40021000 	.word	0x40021000

080044ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80044ec:	b5b0      	push	{r4, r5, r7, lr}
 80044ee:	b08c      	sub	sp, #48	; 0x30
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80044f4:	2300      	movs	r3, #0
 80044f6:	627b      	str	r3, [r7, #36]	; 0x24

  uint32_t              uwPrescalerValue = 0U;
 80044f8:	2300      	movs	r3, #0
 80044fa:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80044fc:	4b38      	ldr	r3, [pc, #224]	; (80045e0 <HAL_InitTick+0xf4>)
 80044fe:	699a      	ldr	r2, [r3, #24]
 8004500:	4b37      	ldr	r3, [pc, #220]	; (80045e0 <HAL_InitTick+0xf4>)
 8004502:	2180      	movs	r1, #128	; 0x80
 8004504:	0109      	lsls	r1, r1, #4
 8004506:	430a      	orrs	r2, r1
 8004508:	619a      	str	r2, [r3, #24]
 800450a:	4b35      	ldr	r3, [pc, #212]	; (80045e0 <HAL_InitTick+0xf4>)
 800450c:	699a      	ldr	r2, [r3, #24]
 800450e:	2380      	movs	r3, #128	; 0x80
 8004510:	011b      	lsls	r3, r3, #4
 8004512:	4013      	ands	r3, r2
 8004514:	60bb      	str	r3, [r7, #8]
 8004516:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004518:	230c      	movs	r3, #12
 800451a:	18fa      	adds	r2, r7, r3
 800451c:	2410      	movs	r4, #16
 800451e:	193b      	adds	r3, r7, r4
 8004520:	0011      	movs	r1, r2
 8004522:	0018      	movs	r0, r3
 8004524:	f002 fa4c 	bl	80069c0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004528:	193b      	adds	r3, r7, r4
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM1 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800452e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004530:	2b00      	cmp	r3, #0
 8004532:	d104      	bne.n	800453e <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004534:	f002 fa2e 	bl	8006994 <HAL_RCC_GetPCLK1Freq>
 8004538:	0003      	movs	r3, r0
 800453a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800453c:	e004      	b.n	8004548 <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800453e:	f002 fa29 	bl	8006994 <HAL_RCC_GetPCLK1Freq>
 8004542:	0003      	movs	r3, r0
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800454a:	4926      	ldr	r1, [pc, #152]	; (80045e4 <HAL_InitTick+0xf8>)
 800454c:	0018      	movs	r0, r3
 800454e:	f7fb fdf7 	bl	8000140 <__udivsi3>
 8004552:	0003      	movs	r3, r0
 8004554:	3b01      	subs	r3, #1
 8004556:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004558:	4b23      	ldr	r3, [pc, #140]	; (80045e8 <HAL_InitTick+0xfc>)
 800455a:	4a24      	ldr	r2, [pc, #144]	; (80045ec <HAL_InitTick+0x100>)
 800455c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800455e:	4b22      	ldr	r3, [pc, #136]	; (80045e8 <HAL_InitTick+0xfc>)
 8004560:	4a23      	ldr	r2, [pc, #140]	; (80045f0 <HAL_InitTick+0x104>)
 8004562:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8004564:	4b20      	ldr	r3, [pc, #128]	; (80045e8 <HAL_InitTick+0xfc>)
 8004566:	6a3a      	ldr	r2, [r7, #32]
 8004568:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 800456a:	4b1f      	ldr	r3, [pc, #124]	; (80045e8 <HAL_InitTick+0xfc>)
 800456c:	2200      	movs	r2, #0
 800456e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004570:	4b1d      	ldr	r3, [pc, #116]	; (80045e8 <HAL_InitTick+0xfc>)
 8004572:	2200      	movs	r2, #0
 8004574:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004576:	4b1c      	ldr	r3, [pc, #112]	; (80045e8 <HAL_InitTick+0xfc>)
 8004578:	2200      	movs	r2, #0
 800457a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800457c:	252b      	movs	r5, #43	; 0x2b
 800457e:	197c      	adds	r4, r7, r5
 8004580:	4b19      	ldr	r3, [pc, #100]	; (80045e8 <HAL_InitTick+0xfc>)
 8004582:	0018      	movs	r0, r3
 8004584:	f002 fb24 	bl	8006bd0 <HAL_TIM_Base_Init>
 8004588:	0003      	movs	r3, r0
 800458a:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 800458c:	197b      	adds	r3, r7, r5
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d11e      	bne.n	80045d2 <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8004594:	197c      	adds	r4, r7, r5
 8004596:	4b14      	ldr	r3, [pc, #80]	; (80045e8 <HAL_InitTick+0xfc>)
 8004598:	0018      	movs	r0, r3
 800459a:	f002 fb69 	bl	8006c70 <HAL_TIM_Base_Start_IT>
 800459e:	0003      	movs	r3, r0
 80045a0:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 80045a2:	197b      	adds	r3, r7, r5
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d113      	bne.n	80045d2 <HAL_InitTick+0xe6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80045aa:	200d      	movs	r0, #13
 80045ac:	f000 ffb9 	bl	8005522 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2b03      	cmp	r3, #3
 80045b4:	d809      	bhi.n	80045ca <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority, 0U);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	0019      	movs	r1, r3
 80045bc:	200d      	movs	r0, #13
 80045be:	f000 ff9b 	bl	80054f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80045c2:	4b0c      	ldr	r3, [pc, #48]	; (80045f4 <HAL_InitTick+0x108>)
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	601a      	str	r2, [r3, #0]
 80045c8:	e003      	b.n	80045d2 <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 80045ca:	232b      	movs	r3, #43	; 0x2b
 80045cc:	18fb      	adds	r3, r7, r3
 80045ce:	2201      	movs	r2, #1
 80045d0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 80045d2:	232b      	movs	r3, #43	; 0x2b
 80045d4:	18fb      	adds	r3, r7, r3
 80045d6:	781b      	ldrb	r3, [r3, #0]
}
 80045d8:	0018      	movs	r0, r3
 80045da:	46bd      	mov	sp, r7
 80045dc:	b00c      	add	sp, #48	; 0x30
 80045de:	bdb0      	pop	{r4, r5, r7, pc}
 80045e0:	40021000 	.word	0x40021000
 80045e4:	000f4240 	.word	0x000f4240
 80045e8:	20000544 	.word	0x20000544
 80045ec:	40012c00 	.word	0x40012c00
 80045f0:	000003e7 	.word	0x000003e7
 80045f4:	20000068 	.word	0x20000068

080045f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80045fc:	e7fe      	b.n	80045fc <NMI_Handler+0x4>

080045fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004602:	e7fe      	b.n	8004602 <HardFault_Handler+0x4>

08004604 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC interrupt.
  */
void ADC1_IRQHandler(void)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8004608:	4b03      	ldr	r3, [pc, #12]	; (8004618 <ADC1_IRQHandler+0x14>)
 800460a:	0018      	movs	r0, r3
 800460c:	f000 fb44 	bl	8004c98 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8004610:	46c0      	nop			; (mov r8, r8)
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	46c0      	nop			; (mov r8, r8)
 8004618:	200002bc 	.word	0x200002bc

0800461c <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004620:	4b03      	ldr	r3, [pc, #12]	; (8004630 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8004622:	0018      	movs	r0, r3
 8004624:	f002 fc7a 	bl	8006f1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8004628:	46c0      	nop			; (mov r8, r8)
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	46c0      	nop			; (mov r8, r8)
 8004630:	20000544 	.word	0x20000544

08004634 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004638:	4b03      	ldr	r3, [pc, #12]	; (8004648 <USART2_IRQHandler+0x14>)
 800463a:	0018      	movs	r0, r3
 800463c:	f003 fbd4 	bl	8007de8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004640:	46c0      	nop			; (mov r8, r8)
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	46c0      	nop			; (mov r8, r8)
 8004648:	20000390 	.word	0x20000390

0800464c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	af00      	add	r7, sp, #0
	return 1;
 8004650:	2301      	movs	r3, #1
}
 8004652:	0018      	movs	r0, r3
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <_kill>:

int _kill(int pid, int sig)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004662:	f00a fa09 	bl	800ea78 <__errno>
 8004666:	0003      	movs	r3, r0
 8004668:	2216      	movs	r2, #22
 800466a:	601a      	str	r2, [r3, #0]
	return -1;
 800466c:	2301      	movs	r3, #1
 800466e:	425b      	negs	r3, r3
}
 8004670:	0018      	movs	r0, r3
 8004672:	46bd      	mov	sp, r7
 8004674:	b002      	add	sp, #8
 8004676:	bd80      	pop	{r7, pc}

08004678 <_exit>:

void _exit (int status)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004680:	2301      	movs	r3, #1
 8004682:	425a      	negs	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	0011      	movs	r1, r2
 8004688:	0018      	movs	r0, r3
 800468a:	f7ff ffe5 	bl	8004658 <_kill>
	while (1) {}		/* Make sure we hang here */
 800468e:	e7fe      	b.n	800468e <_exit+0x16>

08004690 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b086      	sub	sp, #24
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800469c:	2300      	movs	r3, #0
 800469e:	617b      	str	r3, [r7, #20]
 80046a0:	e00a      	b.n	80046b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80046a2:	e000      	b.n	80046a6 <_read+0x16>
 80046a4:	bf00      	nop
 80046a6:	0001      	movs	r1, r0
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	1c5a      	adds	r2, r3, #1
 80046ac:	60ba      	str	r2, [r7, #8]
 80046ae:	b2ca      	uxtb	r2, r1
 80046b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	3301      	adds	r3, #1
 80046b6:	617b      	str	r3, [r7, #20]
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	429a      	cmp	r2, r3
 80046be:	dbf0      	blt.n	80046a2 <_read+0x12>
	}

return len;
 80046c0:	687b      	ldr	r3, [r7, #4]
}
 80046c2:	0018      	movs	r0, r3
 80046c4:	46bd      	mov	sp, r7
 80046c6:	b006      	add	sp, #24
 80046c8:	bd80      	pop	{r7, pc}

080046ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b086      	sub	sp, #24
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	60f8      	str	r0, [r7, #12]
 80046d2:	60b9      	str	r1, [r7, #8]
 80046d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046d6:	2300      	movs	r3, #0
 80046d8:	617b      	str	r3, [r7, #20]
 80046da:	e009      	b.n	80046f0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	1c5a      	adds	r2, r3, #1
 80046e0:	60ba      	str	r2, [r7, #8]
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	0018      	movs	r0, r3
 80046e6:	e000      	b.n	80046ea <_write+0x20>
 80046e8:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	3301      	adds	r3, #1
 80046ee:	617b      	str	r3, [r7, #20]
 80046f0:	697a      	ldr	r2, [r7, #20]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	dbf1      	blt.n	80046dc <_write+0x12>
	}
	return len;
 80046f8:	687b      	ldr	r3, [r7, #4]
}
 80046fa:	0018      	movs	r0, r3
 80046fc:	46bd      	mov	sp, r7
 80046fe:	b006      	add	sp, #24
 8004700:	bd80      	pop	{r7, pc}

08004702 <_close>:

int _close(int file)
{
 8004702:	b580      	push	{r7, lr}
 8004704:	b082      	sub	sp, #8
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
	return -1;
 800470a:	2301      	movs	r3, #1
 800470c:	425b      	negs	r3, r3
}
 800470e:	0018      	movs	r0, r3
 8004710:	46bd      	mov	sp, r7
 8004712:	b002      	add	sp, #8
 8004714:	bd80      	pop	{r7, pc}

08004716 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004716:	b580      	push	{r7, lr}
 8004718:	b082      	sub	sp, #8
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
 800471e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	2280      	movs	r2, #128	; 0x80
 8004724:	0192      	lsls	r2, r2, #6
 8004726:	605a      	str	r2, [r3, #4]
	return 0;
 8004728:	2300      	movs	r3, #0
}
 800472a:	0018      	movs	r0, r3
 800472c:	46bd      	mov	sp, r7
 800472e:	b002      	add	sp, #8
 8004730:	bd80      	pop	{r7, pc}

08004732 <_isatty>:

int _isatty(int file)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b082      	sub	sp, #8
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
	return 1;
 800473a:	2301      	movs	r3, #1
}
 800473c:	0018      	movs	r0, r3
 800473e:	46bd      	mov	sp, r7
 8004740:	b002      	add	sp, #8
 8004742:	bd80      	pop	{r7, pc}

08004744 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
	return 0;
 8004750:	2300      	movs	r3, #0
}
 8004752:	0018      	movs	r0, r3
 8004754:	46bd      	mov	sp, r7
 8004756:	b004      	add	sp, #16
 8004758:	bd80      	pop	{r7, pc}
	...

0800475c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b086      	sub	sp, #24
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004764:	4a14      	ldr	r2, [pc, #80]	; (80047b8 <_sbrk+0x5c>)
 8004766:	4b15      	ldr	r3, [pc, #84]	; (80047bc <_sbrk+0x60>)
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004770:	4b13      	ldr	r3, [pc, #76]	; (80047c0 <_sbrk+0x64>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d102      	bne.n	800477e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004778:	4b11      	ldr	r3, [pc, #68]	; (80047c0 <_sbrk+0x64>)
 800477a:	4a12      	ldr	r2, [pc, #72]	; (80047c4 <_sbrk+0x68>)
 800477c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800477e:	4b10      	ldr	r3, [pc, #64]	; (80047c0 <_sbrk+0x64>)
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	18d3      	adds	r3, r2, r3
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	429a      	cmp	r2, r3
 800478a:	d207      	bcs.n	800479c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800478c:	f00a f974 	bl	800ea78 <__errno>
 8004790:	0003      	movs	r3, r0
 8004792:	220c      	movs	r2, #12
 8004794:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004796:	2301      	movs	r3, #1
 8004798:	425b      	negs	r3, r3
 800479a:	e009      	b.n	80047b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800479c:	4b08      	ldr	r3, [pc, #32]	; (80047c0 <_sbrk+0x64>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80047a2:	4b07      	ldr	r3, [pc, #28]	; (80047c0 <_sbrk+0x64>)
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	18d2      	adds	r2, r2, r3
 80047aa:	4b05      	ldr	r3, [pc, #20]	; (80047c0 <_sbrk+0x64>)
 80047ac:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80047ae:	68fb      	ldr	r3, [r7, #12]
}
 80047b0:	0018      	movs	r0, r3
 80047b2:	46bd      	mov	sp, r7
 80047b4:	b006      	add	sp, #24
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	20004000 	.word	0x20004000
 80047bc:	00000400 	.word	0x00000400
 80047c0:	2000058c 	.word	0x2000058c
 80047c4:	200021a8 	.word	0x200021a8

080047c8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80047cc:	46c0      	nop			; (mov r8, r8)
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
	...

080047d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80047d4:	480d      	ldr	r0, [pc, #52]	; (800480c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80047d6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80047d8:	480d      	ldr	r0, [pc, #52]	; (8004810 <LoopForever+0x6>)
  ldr r1, =_edata
 80047da:	490e      	ldr	r1, [pc, #56]	; (8004814 <LoopForever+0xa>)
  ldr r2, =_sidata
 80047dc:	4a0e      	ldr	r2, [pc, #56]	; (8004818 <LoopForever+0xe>)
  movs r3, #0
 80047de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80047e0:	e002      	b.n	80047e8 <LoopCopyDataInit>

080047e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80047e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80047e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80047e6:	3304      	adds	r3, #4

080047e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80047e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80047ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80047ec:	d3f9      	bcc.n	80047e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80047ee:	4a0b      	ldr	r2, [pc, #44]	; (800481c <LoopForever+0x12>)
  ldr r4, =_ebss
 80047f0:	4c0b      	ldr	r4, [pc, #44]	; (8004820 <LoopForever+0x16>)
  movs r3, #0
 80047f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80047f4:	e001      	b.n	80047fa <LoopFillZerobss>

080047f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80047f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80047f8:	3204      	adds	r2, #4

080047fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80047fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80047fc:	d3fb      	bcc.n	80047f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80047fe:	f7ff ffe3 	bl	80047c8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8004802:	f00a fa41 	bl	800ec88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004806:	f7fe fca1 	bl	800314c <main>

0800480a <LoopForever>:

LoopForever:
    b LoopForever
 800480a:	e7fe      	b.n	800480a <LoopForever>
  ldr   r0, =_estack
 800480c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8004810:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004814:	20000244 	.word	0x20000244
  ldr r2, =_sidata
 8004818:	08013f98 	.word	0x08013f98
  ldr r2, =_sbss
 800481c:	20000244 	.word	0x20000244
  ldr r4, =_ebss
 8004820:	200021a8 	.word	0x200021a8

08004824 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004824:	e7fe      	b.n	8004824 <DMA1_Channel1_IRQHandler>
	...

08004828 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800482c:	4b07      	ldr	r3, [pc, #28]	; (800484c <HAL_Init+0x24>)
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	4b06      	ldr	r3, [pc, #24]	; (800484c <HAL_Init+0x24>)
 8004832:	2110      	movs	r1, #16
 8004834:	430a      	orrs	r2, r1
 8004836:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8004838:	2003      	movs	r0, #3
 800483a:	f7ff fe57 	bl	80044ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800483e:	f7ff fcdd 	bl	80041fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	0018      	movs	r0, r3
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	46c0      	nop			; (mov r8, r8)
 800484c:	40022000 	.word	0x40022000

08004850 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004854:	4b05      	ldr	r3, [pc, #20]	; (800486c <HAL_IncTick+0x1c>)
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	001a      	movs	r2, r3
 800485a:	4b05      	ldr	r3, [pc, #20]	; (8004870 <HAL_IncTick+0x20>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	18d2      	adds	r2, r2, r3
 8004860:	4b03      	ldr	r3, [pc, #12]	; (8004870 <HAL_IncTick+0x20>)
 8004862:	601a      	str	r2, [r3, #0]
}
 8004864:	46c0      	nop			; (mov r8, r8)
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	46c0      	nop			; (mov r8, r8)
 800486c:	2000006c 	.word	0x2000006c
 8004870:	20000590 	.word	0x20000590

08004874 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	af00      	add	r7, sp, #0
  return uwTick;
 8004878:	4b02      	ldr	r3, [pc, #8]	; (8004884 <HAL_GetTick+0x10>)
 800487a:	681b      	ldr	r3, [r3, #0]
}
 800487c:	0018      	movs	r0, r3
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	46c0      	nop			; (mov r8, r8)
 8004884:	20000590 	.word	0x20000590

08004888 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004890:	230f      	movs	r3, #15
 8004892:	18fb      	adds	r3, r7, r3
 8004894:	2200      	movs	r2, #0
 8004896:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8004898:	2300      	movs	r3, #0
 800489a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d101      	bne.n	80048a6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e125      	b.n	8004af2 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d10a      	bne.n	80048c4 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2234      	movs	r2, #52	; 0x34
 80048b8:	2100      	movs	r1, #0
 80048ba:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	0018      	movs	r0, r3
 80048c0:	f7ff fcc6 	bl	8004250 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c8:	2210      	movs	r2, #16
 80048ca:	4013      	ands	r3, r2
 80048cc:	d000      	beq.n	80048d0 <HAL_ADC_Init+0x48>
 80048ce:	e103      	b.n	8004ad8 <HAL_ADC_Init+0x250>
 80048d0:	230f      	movs	r3, #15
 80048d2:	18fb      	adds	r3, r7, r3
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d000      	beq.n	80048dc <HAL_ADC_Init+0x54>
 80048da:	e0fd      	b.n	8004ad8 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	2204      	movs	r2, #4
 80048e4:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80048e6:	d000      	beq.n	80048ea <HAL_ADC_Init+0x62>
 80048e8:	e0f6      	b.n	8004ad8 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ee:	4a83      	ldr	r2, [pc, #524]	; (8004afc <HAL_ADC_Init+0x274>)
 80048f0:	4013      	ands	r3, r2
 80048f2:	2202      	movs	r2, #2
 80048f4:	431a      	orrs	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	2203      	movs	r2, #3
 8004902:	4013      	ands	r3, r2
 8004904:	2b01      	cmp	r3, #1
 8004906:	d112      	bne.n	800492e <HAL_ADC_Init+0xa6>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2201      	movs	r2, #1
 8004910:	4013      	ands	r3, r2
 8004912:	2b01      	cmp	r3, #1
 8004914:	d009      	beq.n	800492a <HAL_ADC_Init+0xa2>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68da      	ldr	r2, [r3, #12]
 800491c:	2380      	movs	r3, #128	; 0x80
 800491e:	021b      	lsls	r3, r3, #8
 8004920:	401a      	ands	r2, r3
 8004922:	2380      	movs	r3, #128	; 0x80
 8004924:	021b      	lsls	r3, r3, #8
 8004926:	429a      	cmp	r2, r3
 8004928:	d101      	bne.n	800492e <HAL_ADC_Init+0xa6>
 800492a:	2301      	movs	r3, #1
 800492c:	e000      	b.n	8004930 <HAL_ADC_Init+0xa8>
 800492e:	2300      	movs	r3, #0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d116      	bne.n	8004962 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	2218      	movs	r2, #24
 800493c:	4393      	bics	r3, r2
 800493e:	0019      	movs	r1, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	689a      	ldr	r2, [r3, #8]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	430a      	orrs	r2, r1
 800494a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	0899      	lsrs	r1, r3, #2
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685a      	ldr	r2, [r3, #4]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	430a      	orrs	r2, r1
 8004960:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68da      	ldr	r2, [r3, #12]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4964      	ldr	r1, [pc, #400]	; (8004b00 <HAL_ADC_Init+0x278>)
 800496e:	400a      	ands	r2, r1
 8004970:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	7e1b      	ldrb	r3, [r3, #24]
 8004976:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	7e5b      	ldrb	r3, [r3, #25]
 800497c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800497e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	7e9b      	ldrb	r3, [r3, #26]
 8004984:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8004986:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498c:	2b01      	cmp	r3, #1
 800498e:	d002      	beq.n	8004996 <HAL_ADC_Init+0x10e>
 8004990:	2380      	movs	r3, #128	; 0x80
 8004992:	015b      	lsls	r3, r3, #5
 8004994:	e000      	b.n	8004998 <HAL_ADC_Init+0x110>
 8004996:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004998:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800499e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d101      	bne.n	80049ac <HAL_ADC_Init+0x124>
 80049a8:	2304      	movs	r3, #4
 80049aa:	e000      	b.n	80049ae <HAL_ADC_Init+0x126>
 80049ac:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80049ae:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2124      	movs	r1, #36	; 0x24
 80049b4:	5c5b      	ldrb	r3, [r3, r1]
 80049b6:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80049b8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80049ba:	68ba      	ldr	r2, [r7, #8]
 80049bc:	4313      	orrs	r3, r2
 80049be:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	7edb      	ldrb	r3, [r3, #27]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d115      	bne.n	80049f4 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	7e9b      	ldrb	r3, [r3, #26]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d105      	bne.n	80049dc <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	2280      	movs	r2, #128	; 0x80
 80049d4:	0252      	lsls	r2, r2, #9
 80049d6:	4313      	orrs	r3, r2
 80049d8:	60bb      	str	r3, [r7, #8]
 80049da:	e00b      	b.n	80049f4 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e0:	2220      	movs	r2, #32
 80049e2:	431a      	orrs	r2, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ec:	2201      	movs	r2, #1
 80049ee:	431a      	orrs	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	69da      	ldr	r2, [r3, #28]
 80049f8:	23c2      	movs	r3, #194	; 0xc2
 80049fa:	33ff      	adds	r3, #255	; 0xff
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d007      	beq.n	8004a10 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	68ba      	ldr	r2, [r7, #8]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68d9      	ldr	r1, [r3, #12]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a24:	2380      	movs	r3, #128	; 0x80
 8004a26:	055b      	lsls	r3, r3, #21
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d01b      	beq.n	8004a64 <HAL_ADC_Init+0x1dc>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d017      	beq.n	8004a64 <HAL_ADC_Init+0x1dc>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d013      	beq.n	8004a64 <HAL_ADC_Init+0x1dc>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a40:	2b03      	cmp	r3, #3
 8004a42:	d00f      	beq.n	8004a64 <HAL_ADC_Init+0x1dc>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a48:	2b04      	cmp	r3, #4
 8004a4a:	d00b      	beq.n	8004a64 <HAL_ADC_Init+0x1dc>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a50:	2b05      	cmp	r3, #5
 8004a52:	d007      	beq.n	8004a64 <HAL_ADC_Init+0x1dc>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a58:	2b06      	cmp	r3, #6
 8004a5a:	d003      	beq.n	8004a64 <HAL_ADC_Init+0x1dc>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a60:	2b07      	cmp	r3, #7
 8004a62:	d112      	bne.n	8004a8a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	695a      	ldr	r2, [r3, #20]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2107      	movs	r1, #7
 8004a70:	438a      	bics	r2, r1
 8004a72:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	6959      	ldr	r1, [r3, #20]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7e:	2207      	movs	r2, #7
 8004a80:	401a      	ands	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	430a      	orrs	r2, r1
 8004a88:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	4a1c      	ldr	r2, [pc, #112]	; (8004b04 <HAL_ADC_Init+0x27c>)
 8004a92:	4013      	ands	r3, r2
 8004a94:	68ba      	ldr	r2, [r7, #8]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d10b      	bne.n	8004ab2 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa4:	2203      	movs	r2, #3
 8004aa6:	4393      	bics	r3, r2
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	431a      	orrs	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004ab0:	e01c      	b.n	8004aec <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab6:	2212      	movs	r2, #18
 8004ab8:	4393      	bics	r3, r2
 8004aba:	2210      	movs	r2, #16
 8004abc:	431a      	orrs	r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	431a      	orrs	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8004ace:	230f      	movs	r3, #15
 8004ad0:	18fb      	adds	r3, r7, r3
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004ad6:	e009      	b.n	8004aec <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004adc:	2210      	movs	r2, #16
 8004ade:	431a      	orrs	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8004ae4:	230f      	movs	r3, #15
 8004ae6:	18fb      	adds	r3, r7, r3
 8004ae8:	2201      	movs	r2, #1
 8004aea:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004aec:	230f      	movs	r3, #15
 8004aee:	18fb      	adds	r3, r7, r3
 8004af0:	781b      	ldrb	r3, [r3, #0]
}
 8004af2:	0018      	movs	r0, r3
 8004af4:	46bd      	mov	sp, r7
 8004af6:	b004      	add	sp, #16
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	46c0      	nop			; (mov r8, r8)
 8004afc:	fffffefd 	.word	0xfffffefd
 8004b00:	fffe0219 	.word	0xfffe0219
 8004b04:	833fffe7 	.word	0x833fffe7

08004b08 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8004b08:	b590      	push	{r4, r7, lr}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b10:	230f      	movs	r3, #15
 8004b12:	18fb      	adds	r3, r7, r3
 8004b14:	2200      	movs	r2, #0
 8004b16:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	2204      	movs	r2, #4
 8004b20:	4013      	ands	r3, r2
 8004b22:	d156      	bne.n	8004bd2 <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2234      	movs	r2, #52	; 0x34
 8004b28:	5c9b      	ldrb	r3, [r3, r2]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d101      	bne.n	8004b32 <HAL_ADC_Start_IT+0x2a>
 8004b2e:	2302      	movs	r3, #2
 8004b30:	e056      	b.n	8004be0 <HAL_ADC_Start_IT+0xd8>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2234      	movs	r2, #52	; 0x34
 8004b36:	2101      	movs	r1, #1
 8004b38:	5499      	strb	r1, [r3, r2]
     
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	7e5b      	ldrb	r3, [r3, #25]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d007      	beq.n	8004b52 <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8004b42:	230f      	movs	r3, #15
 8004b44:	18fc      	adds	r4, r7, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	0018      	movs	r0, r3
 8004b4a:	f000 fa63 	bl	8005014 <ADC_Enable>
 8004b4e:	0003      	movs	r3, r0
 8004b50:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004b52:	230f      	movs	r3, #15
 8004b54:	18fb      	adds	r3, r7, r3
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d13e      	bne.n	8004bda <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b60:	4a21      	ldr	r2, [pc, #132]	; (8004be8 <HAL_ADC_Start_IT+0xe0>)
 8004b62:	4013      	ands	r3, r2
 8004b64:	2280      	movs	r2, #128	; 0x80
 8004b66:	0052      	lsls	r2, r2, #1
 8004b68:	431a      	orrs	r2, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2234      	movs	r2, #52	; 0x34
 8004b78:	2100      	movs	r1, #0
 8004b7a:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	221c      	movs	r2, #28
 8004b82:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	695b      	ldr	r3, [r3, #20]
 8004b88:	2b08      	cmp	r3, #8
 8004b8a:	d110      	bne.n	8004bae <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	685a      	ldr	r2, [r3, #4]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2104      	movs	r1, #4
 8004b98:	438a      	bics	r2, r1
 8004b9a:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	685a      	ldr	r2, [r3, #4]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2118      	movs	r1, #24
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	605a      	str	r2, [r3, #4]
          break;
 8004bac:	e008      	b.n	8004bc0 <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	685a      	ldr	r2, [r3, #4]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	211c      	movs	r1, #28
 8004bba:	430a      	orrs	r2, r1
 8004bbc:	605a      	str	r2, [r3, #4]
          break;
 8004bbe:	46c0      	nop			; (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	689a      	ldr	r2, [r3, #8]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2104      	movs	r1, #4
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	609a      	str	r2, [r3, #8]
 8004bd0:	e003      	b.n	8004bda <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004bd2:	230f      	movs	r3, #15
 8004bd4:	18fb      	adds	r3, r7, r3
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	701a      	strb	r2, [r3, #0]
  }    
    
  /* Return function status */
  return tmp_hal_status;
 8004bda:	230f      	movs	r3, #15
 8004bdc:	18fb      	adds	r3, r7, r3
 8004bde:	781b      	ldrb	r3, [r3, #0]
}
 8004be0:	0018      	movs	r0, r3
 8004be2:	46bd      	mov	sp, r7
 8004be4:	b005      	add	sp, #20
 8004be6:	bd90      	pop	{r4, r7, pc}
 8004be8:	fffff0fe 	.word	0xfffff0fe

08004bec <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8004bec:	b5b0      	push	{r4, r5, r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004bf4:	230f      	movs	r3, #15
 8004bf6:	18fb      	adds	r3, r7, r3
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2234      	movs	r2, #52	; 0x34
 8004c00:	5c9b      	ldrb	r3, [r3, r2]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d101      	bne.n	8004c0a <HAL_ADC_Stop_IT+0x1e>
 8004c06:	2302      	movs	r3, #2
 8004c08:	e033      	b.n	8004c72 <HAL_ADC_Stop_IT+0x86>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2234      	movs	r2, #52	; 0x34
 8004c0e:	2101      	movs	r1, #1
 8004c10:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004c12:	250f      	movs	r5, #15
 8004c14:	197c      	adds	r4, r7, r5
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	0018      	movs	r0, r3
 8004c1a:	f000 faf0 	bl	80051fe <ADC_ConversionStop>
 8004c1e:	0003      	movs	r3, r0
 8004c20:	7023      	strb	r3, [r4, #0]
   
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004c22:	0028      	movs	r0, r5
 8004c24:	183b      	adds	r3, r7, r0
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d11b      	bne.n	8004c64 <HAL_ADC_Stop_IT+0x78>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	685a      	ldr	r2, [r3, #4]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	211c      	movs	r1, #28
 8004c38:	438a      	bics	r2, r1
 8004c3a:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004c3c:	0005      	movs	r5, r0
 8004c3e:	183c      	adds	r4, r7, r0
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	0018      	movs	r0, r3
 8004c44:	f000 fa6a 	bl	800511c <ADC_Disable>
 8004c48:	0003      	movs	r3, r0
 8004c4a:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004c4c:	197b      	adds	r3, r7, r5
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d107      	bne.n	8004c64 <HAL_ADC_Stop_IT+0x78>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c58:	4a08      	ldr	r2, [pc, #32]	; (8004c7c <HAL_ADC_Stop_IT+0x90>)
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2234      	movs	r2, #52	; 0x34
 8004c68:	2100      	movs	r1, #0
 8004c6a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8004c6c:	230f      	movs	r3, #15
 8004c6e:	18fb      	adds	r3, r7, r3
 8004c70:	781b      	ldrb	r3, [r3, #0]
}
 8004c72:	0018      	movs	r0, r3
 8004c74:	46bd      	mov	sp, r7
 8004c76:	b004      	add	sp, #16
 8004c78:	bdb0      	pop	{r4, r5, r7, pc}
 8004c7a:	46c0      	nop			; (mov r8, r8)
 8004c7c:	fffffefe 	.word	0xfffffefe

08004c80 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004c8e:	0018      	movs	r0, r3
 8004c90:	46bd      	mov	sp, r7
 8004c92:	b002      	add	sp, #8
 8004c94:	bd80      	pop	{r7, pc}
	...

08004c98 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2204      	movs	r2, #4
 8004ca8:	4013      	ands	r3, r2
 8004caa:	2b04      	cmp	r3, #4
 8004cac:	d106      	bne.n	8004cbc <HAL_ADC_IRQHandler+0x24>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	2204      	movs	r2, #4
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	2b04      	cmp	r3, #4
 8004cba:	d00d      	beq.n	8004cd8 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2208      	movs	r2, #8
 8004cc4:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8004cc6:	2b08      	cmp	r3, #8
 8004cc8:	d14f      	bne.n	8004d6a <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	2208      	movs	r2, #8
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	2b08      	cmp	r3, #8
 8004cd6:	d148      	bne.n	8004d6a <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cdc:	2210      	movs	r2, #16
 8004cde:	4013      	ands	r3, r2
 8004ce0:	d106      	bne.n	8004cf0 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce6:	2280      	movs	r2, #128	; 0x80
 8004ce8:	0092      	lsls	r2, r2, #2
 8004cea:	431a      	orrs	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68da      	ldr	r2, [r3, #12]
 8004cf6:	23c0      	movs	r3, #192	; 0xc0
 8004cf8:	011b      	lsls	r3, r3, #4
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	d12d      	bne.n	8004d5a <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d129      	bne.n	8004d5a <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2208      	movs	r2, #8
 8004d0e:	4013      	ands	r3, r2
 8004d10:	2b08      	cmp	r3, #8
 8004d12:	d122      	bne.n	8004d5a <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	2204      	movs	r2, #4
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	d110      	bne.n	8004d42 <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	685a      	ldr	r2, [r3, #4]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	210c      	movs	r1, #12
 8004d2c:	438a      	bics	r2, r1
 8004d2e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d34:	4a33      	ldr	r2, [pc, #204]	; (8004e04 <HAL_ADC_IRQHandler+0x16c>)
 8004d36:	4013      	ands	r3, r2
 8004d38:	2201      	movs	r2, #1
 8004d3a:	431a      	orrs	r2, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	639a      	str	r2, [r3, #56]	; 0x38
 8004d40:	e00b      	b.n	8004d5a <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d46:	2220      	movs	r2, #32
 8004d48:	431a      	orrs	r2, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d52:	2201      	movs	r2, #1
 8004d54:	431a      	orrs	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	0018      	movs	r0, r3
 8004d5e:	f7fe fd05 	bl	800376c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	220c      	movs	r2, #12
 8004d68:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2280      	movs	r2, #128	; 0x80
 8004d72:	4013      	ands	r3, r2
 8004d74:	2b80      	cmp	r3, #128	; 0x80
 8004d76:	d115      	bne.n	8004da4 <HAL_ADC_IRQHandler+0x10c>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	2280      	movs	r2, #128	; 0x80
 8004d80:	4013      	ands	r3, r2
 8004d82:	2b80      	cmp	r3, #128	; 0x80
 8004d84:	d10e      	bne.n	8004da4 <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8a:	2280      	movs	r2, #128	; 0x80
 8004d8c:	0252      	lsls	r2, r2, #9
 8004d8e:	431a      	orrs	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	0018      	movs	r0, r3
 8004d98:	f000 f836 	bl	8004e08 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2280      	movs	r2, #128	; 0x80
 8004da2:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2210      	movs	r2, #16
 8004dac:	4013      	ands	r3, r2
 8004dae:	2b10      	cmp	r3, #16
 8004db0:	d123      	bne.n	8004dfa <HAL_ADC_IRQHandler+0x162>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	2210      	movs	r2, #16
 8004dba:	4013      	ands	r3, r2
 8004dbc:	2b10      	cmp	r3, #16
 8004dbe:	d11c      	bne.n	8004dfa <HAL_ADC_IRQHandler+0x162>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d006      	beq.n	8004dd6 <HAL_ADC_IRQHandler+0x13e>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d10d      	bne.n	8004df2 <HAL_ADC_IRQHandler+0x15a>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dda:	2202      	movs	r2, #2
 8004ddc:	431a      	orrs	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2210      	movs	r2, #16
 8004de8:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	0018      	movs	r0, r3
 8004dee:	f000 f813 	bl	8004e18 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2210      	movs	r2, #16
 8004df8:	601a      	str	r2, [r3, #0]
  }

}
 8004dfa:	46c0      	nop			; (mov r8, r8)
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	b002      	add	sp, #8
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	46c0      	nop			; (mov r8, r8)
 8004e04:	fffffefe 	.word	0xfffffefe

08004e08 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8004e10:	46c0      	nop			; (mov r8, r8)
 8004e12:	46bd      	mov	sp, r7
 8004e14:	b002      	add	sp, #8
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004e20:	46c0      	nop			; (mov r8, r8)
 8004e22:	46bd      	mov	sp, r7
 8004e24:	b002      	add	sp, #8
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e32:	230f      	movs	r3, #15
 8004e34:	18fb      	adds	r3, r7, r3
 8004e36:	2200      	movs	r2, #0
 8004e38:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e42:	2380      	movs	r3, #128	; 0x80
 8004e44:	055b      	lsls	r3, r3, #21
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d011      	beq.n	8004e6e <HAL_ADC_ConfigChannel+0x46>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d00d      	beq.n	8004e6e <HAL_ADC_ConfigChannel+0x46>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d009      	beq.n	8004e6e <HAL_ADC_ConfigChannel+0x46>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5e:	2b03      	cmp	r3, #3
 8004e60:	d005      	beq.n	8004e6e <HAL_ADC_ConfigChannel+0x46>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e66:	2b04      	cmp	r3, #4
 8004e68:	d001      	beq.n	8004e6e <HAL_ADC_ConfigChannel+0x46>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2234      	movs	r2, #52	; 0x34
 8004e72:	5c9b      	ldrb	r3, [r3, r2]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d101      	bne.n	8004e7c <HAL_ADC_ConfigChannel+0x54>
 8004e78:	2302      	movs	r3, #2
 8004e7a:	e0bb      	b.n	8004ff4 <HAL_ADC_ConfigChannel+0x1cc>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2234      	movs	r2, #52	; 0x34
 8004e80:	2101      	movs	r1, #1
 8004e82:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	2204      	movs	r2, #4
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	d000      	beq.n	8004e92 <HAL_ADC_ConfigChannel+0x6a>
 8004e90:	e09f      	b.n	8004fd2 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	4a59      	ldr	r2, [pc, #356]	; (8004ffc <HAL_ADC_ConfigChannel+0x1d4>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d100      	bne.n	8004e9e <HAL_ADC_ConfigChannel+0x76>
 8004e9c:	e077      	b.n	8004f8e <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	409a      	lsls	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eb8:	2380      	movs	r3, #128	; 0x80
 8004eba:	055b      	lsls	r3, r3, #21
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d037      	beq.n	8004f30 <HAL_ADC_ConfigChannel+0x108>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d033      	beq.n	8004f30 <HAL_ADC_ConfigChannel+0x108>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d02f      	beq.n	8004f30 <HAL_ADC_ConfigChannel+0x108>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed4:	2b03      	cmp	r3, #3
 8004ed6:	d02b      	beq.n	8004f30 <HAL_ADC_ConfigChannel+0x108>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004edc:	2b04      	cmp	r3, #4
 8004ede:	d027      	beq.n	8004f30 <HAL_ADC_ConfigChannel+0x108>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee4:	2b05      	cmp	r3, #5
 8004ee6:	d023      	beq.n	8004f30 <HAL_ADC_ConfigChannel+0x108>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eec:	2b06      	cmp	r3, #6
 8004eee:	d01f      	beq.n	8004f30 <HAL_ADC_ConfigChannel+0x108>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef4:	2b07      	cmp	r3, #7
 8004ef6:	d01b      	beq.n	8004f30 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	689a      	ldr	r2, [r3, #8]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	2107      	movs	r1, #7
 8004f04:	400b      	ands	r3, r1
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d012      	beq.n	8004f30 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	695a      	ldr	r2, [r3, #20]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2107      	movs	r1, #7
 8004f16:	438a      	bics	r2, r1
 8004f18:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	6959      	ldr	r1, [r3, #20]
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	2207      	movs	r2, #7
 8004f26:	401a      	ands	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2b10      	cmp	r3, #16
 8004f36:	d003      	beq.n	8004f40 <HAL_ADC_ConfigChannel+0x118>
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2b11      	cmp	r3, #17
 8004f3e:	d152      	bne.n	8004fe6 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004f40:	4b2f      	ldr	r3, [pc, #188]	; (8005000 <HAL_ADC_ConfigChannel+0x1d8>)
 8004f42:	6819      	ldr	r1, [r3, #0]
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2b10      	cmp	r3, #16
 8004f4a:	d102      	bne.n	8004f52 <HAL_ADC_ConfigChannel+0x12a>
 8004f4c:	2380      	movs	r3, #128	; 0x80
 8004f4e:	041b      	lsls	r3, r3, #16
 8004f50:	e001      	b.n	8004f56 <HAL_ADC_ConfigChannel+0x12e>
 8004f52:	2380      	movs	r3, #128	; 0x80
 8004f54:	03db      	lsls	r3, r3, #15
 8004f56:	4a2a      	ldr	r2, [pc, #168]	; (8005000 <HAL_ADC_ConfigChannel+0x1d8>)
 8004f58:	430b      	orrs	r3, r1
 8004f5a:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2b10      	cmp	r3, #16
 8004f62:	d140      	bne.n	8004fe6 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004f64:	4b27      	ldr	r3, [pc, #156]	; (8005004 <HAL_ADC_ConfigChannel+0x1dc>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4927      	ldr	r1, [pc, #156]	; (8005008 <HAL_ADC_ConfigChannel+0x1e0>)
 8004f6a:	0018      	movs	r0, r3
 8004f6c:	f7fb f8e8 	bl	8000140 <__udivsi3>
 8004f70:	0003      	movs	r3, r0
 8004f72:	001a      	movs	r2, r3
 8004f74:	0013      	movs	r3, r2
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	189b      	adds	r3, r3, r2
 8004f7a:	005b      	lsls	r3, r3, #1
 8004f7c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004f7e:	e002      	b.n	8004f86 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	3b01      	subs	r3, #1
 8004f84:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1f9      	bne.n	8004f80 <HAL_ADC_ConfigChannel+0x158>
 8004f8c:	e02b      	b.n	8004fe6 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2101      	movs	r1, #1
 8004f9a:	4099      	lsls	r1, r3
 8004f9c:	000b      	movs	r3, r1
 8004f9e:	43d9      	mvns	r1, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	400a      	ands	r2, r1
 8004fa6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2b10      	cmp	r3, #16
 8004fae:	d003      	beq.n	8004fb8 <HAL_ADC_ConfigChannel+0x190>
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2b11      	cmp	r3, #17
 8004fb6:	d116      	bne.n	8004fe6 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004fb8:	4b11      	ldr	r3, [pc, #68]	; (8005000 <HAL_ADC_ConfigChannel+0x1d8>)
 8004fba:	6819      	ldr	r1, [r3, #0]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2b10      	cmp	r3, #16
 8004fc2:	d101      	bne.n	8004fc8 <HAL_ADC_ConfigChannel+0x1a0>
 8004fc4:	4a11      	ldr	r2, [pc, #68]	; (800500c <HAL_ADC_ConfigChannel+0x1e4>)
 8004fc6:	e000      	b.n	8004fca <HAL_ADC_ConfigChannel+0x1a2>
 8004fc8:	4a11      	ldr	r2, [pc, #68]	; (8005010 <HAL_ADC_ConfigChannel+0x1e8>)
 8004fca:	4b0d      	ldr	r3, [pc, #52]	; (8005000 <HAL_ADC_ConfigChannel+0x1d8>)
 8004fcc:	400a      	ands	r2, r1
 8004fce:	601a      	str	r2, [r3, #0]
 8004fd0:	e009      	b.n	8004fe6 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd6:	2220      	movs	r2, #32
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8004fde:	230f      	movs	r3, #15
 8004fe0:	18fb      	adds	r3, r7, r3
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2234      	movs	r2, #52	; 0x34
 8004fea:	2100      	movs	r1, #0
 8004fec:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8004fee:	230f      	movs	r3, #15
 8004ff0:	18fb      	adds	r3, r7, r3
 8004ff2:	781b      	ldrb	r3, [r3, #0]
}
 8004ff4:	0018      	movs	r0, r3
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	b004      	add	sp, #16
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	00001001 	.word	0x00001001
 8005000:	40012708 	.word	0x40012708
 8005004:	20000064 	.word	0x20000064
 8005008:	000f4240 	.word	0x000f4240
 800500c:	ff7fffff 	.word	0xff7fffff
 8005010:	ffbfffff 	.word	0xffbfffff

08005014 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800501c:	2300      	movs	r3, #0
 800501e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8005020:	2300      	movs	r3, #0
 8005022:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	2203      	movs	r2, #3
 800502c:	4013      	ands	r3, r2
 800502e:	2b01      	cmp	r3, #1
 8005030:	d112      	bne.n	8005058 <ADC_Enable+0x44>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2201      	movs	r2, #1
 800503a:	4013      	ands	r3, r2
 800503c:	2b01      	cmp	r3, #1
 800503e:	d009      	beq.n	8005054 <ADC_Enable+0x40>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68da      	ldr	r2, [r3, #12]
 8005046:	2380      	movs	r3, #128	; 0x80
 8005048:	021b      	lsls	r3, r3, #8
 800504a:	401a      	ands	r2, r3
 800504c:	2380      	movs	r3, #128	; 0x80
 800504e:	021b      	lsls	r3, r3, #8
 8005050:	429a      	cmp	r2, r3
 8005052:	d101      	bne.n	8005058 <ADC_Enable+0x44>
 8005054:	2301      	movs	r3, #1
 8005056:	e000      	b.n	800505a <ADC_Enable+0x46>
 8005058:	2300      	movs	r3, #0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d152      	bne.n	8005104 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	4a2a      	ldr	r2, [pc, #168]	; (8005110 <ADC_Enable+0xfc>)
 8005066:	4013      	ands	r3, r2
 8005068:	d00d      	beq.n	8005086 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506e:	2210      	movs	r2, #16
 8005070:	431a      	orrs	r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800507a:	2201      	movs	r2, #1
 800507c:	431a      	orrs	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e03f      	b.n	8005106 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	689a      	ldr	r2, [r3, #8]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2101      	movs	r1, #1
 8005092:	430a      	orrs	r2, r1
 8005094:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005096:	4b1f      	ldr	r3, [pc, #124]	; (8005114 <ADC_Enable+0x100>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	491f      	ldr	r1, [pc, #124]	; (8005118 <ADC_Enable+0x104>)
 800509c:	0018      	movs	r0, r3
 800509e:	f7fb f84f 	bl	8000140 <__udivsi3>
 80050a2:	0003      	movs	r3, r0
 80050a4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80050a6:	e002      	b.n	80050ae <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	3b01      	subs	r3, #1
 80050ac:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d1f9      	bne.n	80050a8 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80050b4:	f7ff fbde 	bl	8004874 <HAL_GetTick>
 80050b8:	0003      	movs	r3, r0
 80050ba:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80050bc:	e01b      	b.n	80050f6 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80050be:	f7ff fbd9 	bl	8004874 <HAL_GetTick>
 80050c2:	0002      	movs	r2, r0
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d914      	bls.n	80050f6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2201      	movs	r2, #1
 80050d4:	4013      	ands	r3, r2
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d00d      	beq.n	80050f6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050de:	2210      	movs	r2, #16
 80050e0:	431a      	orrs	r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ea:	2201      	movs	r2, #1
 80050ec:	431a      	orrs	r2, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e007      	b.n	8005106 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2201      	movs	r2, #1
 80050fe:	4013      	ands	r3, r2
 8005100:	2b01      	cmp	r3, #1
 8005102:	d1dc      	bne.n	80050be <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	0018      	movs	r0, r3
 8005108:	46bd      	mov	sp, r7
 800510a:	b004      	add	sp, #16
 800510c:	bd80      	pop	{r7, pc}
 800510e:	46c0      	nop			; (mov r8, r8)
 8005110:	80000017 	.word	0x80000017
 8005114:	20000064 	.word	0x20000064
 8005118:	000f4240 	.word	0x000f4240

0800511c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005124:	2300      	movs	r3, #0
 8005126:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	2203      	movs	r2, #3
 8005130:	4013      	ands	r3, r2
 8005132:	2b01      	cmp	r3, #1
 8005134:	d112      	bne.n	800515c <ADC_Disable+0x40>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2201      	movs	r2, #1
 800513e:	4013      	ands	r3, r2
 8005140:	2b01      	cmp	r3, #1
 8005142:	d009      	beq.n	8005158 <ADC_Disable+0x3c>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68da      	ldr	r2, [r3, #12]
 800514a:	2380      	movs	r3, #128	; 0x80
 800514c:	021b      	lsls	r3, r3, #8
 800514e:	401a      	ands	r2, r3
 8005150:	2380      	movs	r3, #128	; 0x80
 8005152:	021b      	lsls	r3, r3, #8
 8005154:	429a      	cmp	r2, r3
 8005156:	d101      	bne.n	800515c <ADC_Disable+0x40>
 8005158:	2301      	movs	r3, #1
 800515a:	e000      	b.n	800515e <ADC_Disable+0x42>
 800515c:	2300      	movs	r3, #0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d048      	beq.n	80051f4 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	2205      	movs	r2, #5
 800516a:	4013      	ands	r3, r2
 800516c:	2b01      	cmp	r3, #1
 800516e:	d110      	bne.n	8005192 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	689a      	ldr	r2, [r3, #8]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2102      	movs	r1, #2
 800517c:	430a      	orrs	r2, r1
 800517e:	609a      	str	r2, [r3, #8]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2203      	movs	r2, #3
 8005186:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005188:	f7ff fb74 	bl	8004874 <HAL_GetTick>
 800518c:	0003      	movs	r3, r0
 800518e:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005190:	e029      	b.n	80051e6 <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005196:	2210      	movs	r2, #16
 8005198:	431a      	orrs	r2, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051a2:	2201      	movs	r2, #1
 80051a4:	431a      	orrs	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e023      	b.n	80051f6 <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80051ae:	f7ff fb61 	bl	8004874 <HAL_GetTick>
 80051b2:	0002      	movs	r2, r0
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d914      	bls.n	80051e6 <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	2201      	movs	r2, #1
 80051c4:	4013      	ands	r3, r2
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d10d      	bne.n	80051e6 <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ce:	2210      	movs	r2, #16
 80051d0:	431a      	orrs	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051da:	2201      	movs	r2, #1
 80051dc:	431a      	orrs	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e007      	b.n	80051f6 <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	2201      	movs	r2, #1
 80051ee:	4013      	ands	r3, r2
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d0dc      	beq.n	80051ae <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	0018      	movs	r0, r3
 80051f8:	46bd      	mov	sp, r7
 80051fa:	b004      	add	sp, #16
 80051fc:	bd80      	pop	{r7, pc}

080051fe <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 80051fe:	b580      	push	{r7, lr}
 8005200:	b084      	sub	sp, #16
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005206:	2300      	movs	r3, #0
 8005208:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	2204      	movs	r2, #4
 8005212:	4013      	ands	r3, r2
 8005214:	d03a      	beq.n	800528c <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	2204      	movs	r2, #4
 800521e:	4013      	ands	r3, r2
 8005220:	2b04      	cmp	r3, #4
 8005222:	d10d      	bne.n	8005240 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	2202      	movs	r2, #2
 800522c:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800522e:	d107      	bne.n	8005240 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	689a      	ldr	r2, [r3, #8]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2110      	movs	r1, #16
 800523c:	430a      	orrs	r2, r1
 800523e:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005240:	f7ff fb18 	bl	8004874 <HAL_GetTick>
 8005244:	0003      	movs	r3, r0
 8005246:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8005248:	e01a      	b.n	8005280 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800524a:	f7ff fb13 	bl	8004874 <HAL_GetTick>
 800524e:	0002      	movs	r2, r0
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	2b02      	cmp	r3, #2
 8005256:	d913      	bls.n	8005280 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	2204      	movs	r2, #4
 8005260:	4013      	ands	r3, r2
 8005262:	d00d      	beq.n	8005280 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005268:	2210      	movs	r2, #16
 800526a:	431a      	orrs	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005274:	2201      	movs	r2, #1
 8005276:	431a      	orrs	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e006      	b.n	800528e <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	2204      	movs	r2, #4
 8005288:	4013      	ands	r3, r2
 800528a:	d1de      	bne.n	800524a <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	0018      	movs	r0, r3
 8005290:	46bd      	mov	sp, r7
 8005292:	b004      	add	sp, #16
 8005294:	bd80      	pop	{r7, pc}
	...

08005298 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b086      	sub	sp, #24
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80052a0:	2317      	movs	r3, #23
 80052a2:	18fb      	adds	r3, r7, r3
 80052a4:	2200      	movs	r2, #0
 80052a6:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80052a8:	2300      	movs	r3, #0
 80052aa:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 80052ac:	2300      	movs	r3, #0
 80052ae:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2234      	movs	r2, #52	; 0x34
 80052b4:	5c9b      	ldrb	r3, [r3, r2]
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d101      	bne.n	80052be <HAL_ADCEx_Calibration_Start+0x26>
 80052ba:	2302      	movs	r3, #2
 80052bc:	e08d      	b.n	80053da <HAL_ADCEx_Calibration_Start+0x142>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2234      	movs	r2, #52	; 0x34
 80052c2:	2101      	movs	r1, #1
 80052c4:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	2203      	movs	r2, #3
 80052ce:	4013      	ands	r3, r2
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d112      	bne.n	80052fa <HAL_ADCEx_Calibration_Start+0x62>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2201      	movs	r2, #1
 80052dc:	4013      	ands	r3, r2
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d009      	beq.n	80052f6 <HAL_ADCEx_Calibration_Start+0x5e>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68da      	ldr	r2, [r3, #12]
 80052e8:	2380      	movs	r3, #128	; 0x80
 80052ea:	021b      	lsls	r3, r3, #8
 80052ec:	401a      	ands	r2, r3
 80052ee:	2380      	movs	r3, #128	; 0x80
 80052f0:	021b      	lsls	r3, r3, #8
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d101      	bne.n	80052fa <HAL_ADCEx_Calibration_Start+0x62>
 80052f6:	2301      	movs	r3, #1
 80052f8:	e000      	b.n	80052fc <HAL_ADCEx_Calibration_Start+0x64>
 80052fa:	2300      	movs	r3, #0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d15b      	bne.n	80053b8 <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005304:	4a37      	ldr	r2, [pc, #220]	; (80053e4 <HAL_ADCEx_Calibration_Start+0x14c>)
 8005306:	4013      	ands	r3, r2
 8005308:	2202      	movs	r2, #2
 800530a:	431a      	orrs	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	2203      	movs	r2, #3
 8005318:	4013      	ands	r3, r2
 800531a:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68da      	ldr	r2, [r3, #12]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2103      	movs	r1, #3
 8005328:	438a      	bics	r2, r1
 800532a:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689a      	ldr	r2, [r3, #8]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2180      	movs	r1, #128	; 0x80
 8005338:	0609      	lsls	r1, r1, #24
 800533a:	430a      	orrs	r2, r1
 800533c:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 800533e:	f7ff fa99 	bl	8004874 <HAL_GetTick>
 8005342:	0003      	movs	r3, r0
 8005344:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8005346:	e01d      	b.n	8005384 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8005348:	f7ff fa94 	bl	8004874 <HAL_GetTick>
 800534c:	0002      	movs	r2, r0
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	2b02      	cmp	r3, #2
 8005354:	d916      	bls.n	8005384 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	0fdb      	lsrs	r3, r3, #31
 800535e:	07da      	lsls	r2, r3, #31
 8005360:	2380      	movs	r3, #128	; 0x80
 8005362:	061b      	lsls	r3, r3, #24
 8005364:	429a      	cmp	r2, r3
 8005366:	d10d      	bne.n	8005384 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536c:	2212      	movs	r2, #18
 800536e:	4393      	bics	r3, r2
 8005370:	2210      	movs	r2, #16
 8005372:	431a      	orrs	r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	639a      	str	r2, [r3, #56]	; 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2234      	movs	r2, #52	; 0x34
 800537c:	2100      	movs	r1, #0
 800537e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e02a      	b.n	80053da <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	0fdb      	lsrs	r3, r3, #31
 800538c:	07da      	lsls	r2, r3, #31
 800538e:	2380      	movs	r3, #128	; 0x80
 8005390:	061b      	lsls	r3, r3, #24
 8005392:	429a      	cmp	r2, r3
 8005394:	d0d8      	beq.n	8005348 <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68d9      	ldr	r1, [r3, #12]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	430a      	orrs	r2, r1
 80053a4:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053aa:	2203      	movs	r2, #3
 80053ac:	4393      	bics	r3, r2
 80053ae:	2201      	movs	r2, #1
 80053b0:	431a      	orrs	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	639a      	str	r2, [r3, #56]	; 0x38
 80053b6:	e009      	b.n	80053cc <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053bc:	2220      	movs	r2, #32
 80053be:	431a      	orrs	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80053c4:	2317      	movs	r3, #23
 80053c6:	18fb      	adds	r3, r7, r3
 80053c8:	2201      	movs	r2, #1
 80053ca:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2234      	movs	r2, #52	; 0x34
 80053d0:	2100      	movs	r1, #0
 80053d2:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80053d4:	2317      	movs	r3, #23
 80053d6:	18fb      	adds	r3, r7, r3
 80053d8:	781b      	ldrb	r3, [r3, #0]
}
 80053da:	0018      	movs	r0, r3
 80053dc:	46bd      	mov	sp, r7
 80053de:	b006      	add	sp, #24
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	46c0      	nop			; (mov r8, r8)
 80053e4:	fffffefd 	.word	0xfffffefd

080053e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	0002      	movs	r2, r0
 80053f0:	1dfb      	adds	r3, r7, #7
 80053f2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80053f4:	1dfb      	adds	r3, r7, #7
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	2b7f      	cmp	r3, #127	; 0x7f
 80053fa:	d809      	bhi.n	8005410 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053fc:	1dfb      	adds	r3, r7, #7
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	001a      	movs	r2, r3
 8005402:	231f      	movs	r3, #31
 8005404:	401a      	ands	r2, r3
 8005406:	4b04      	ldr	r3, [pc, #16]	; (8005418 <__NVIC_EnableIRQ+0x30>)
 8005408:	2101      	movs	r1, #1
 800540a:	4091      	lsls	r1, r2
 800540c:	000a      	movs	r2, r1
 800540e:	601a      	str	r2, [r3, #0]
  }
}
 8005410:	46c0      	nop			; (mov r8, r8)
 8005412:	46bd      	mov	sp, r7
 8005414:	b002      	add	sp, #8
 8005416:	bd80      	pop	{r7, pc}
 8005418:	e000e100 	.word	0xe000e100

0800541c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800541c:	b590      	push	{r4, r7, lr}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	0002      	movs	r2, r0
 8005424:	6039      	str	r1, [r7, #0]
 8005426:	1dfb      	adds	r3, r7, #7
 8005428:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800542a:	1dfb      	adds	r3, r7, #7
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	2b7f      	cmp	r3, #127	; 0x7f
 8005430:	d828      	bhi.n	8005484 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005432:	4a2f      	ldr	r2, [pc, #188]	; (80054f0 <__NVIC_SetPriority+0xd4>)
 8005434:	1dfb      	adds	r3, r7, #7
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	b25b      	sxtb	r3, r3
 800543a:	089b      	lsrs	r3, r3, #2
 800543c:	33c0      	adds	r3, #192	; 0xc0
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	589b      	ldr	r3, [r3, r2]
 8005442:	1dfa      	adds	r2, r7, #7
 8005444:	7812      	ldrb	r2, [r2, #0]
 8005446:	0011      	movs	r1, r2
 8005448:	2203      	movs	r2, #3
 800544a:	400a      	ands	r2, r1
 800544c:	00d2      	lsls	r2, r2, #3
 800544e:	21ff      	movs	r1, #255	; 0xff
 8005450:	4091      	lsls	r1, r2
 8005452:	000a      	movs	r2, r1
 8005454:	43d2      	mvns	r2, r2
 8005456:	401a      	ands	r2, r3
 8005458:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	019b      	lsls	r3, r3, #6
 800545e:	22ff      	movs	r2, #255	; 0xff
 8005460:	401a      	ands	r2, r3
 8005462:	1dfb      	adds	r3, r7, #7
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	0018      	movs	r0, r3
 8005468:	2303      	movs	r3, #3
 800546a:	4003      	ands	r3, r0
 800546c:	00db      	lsls	r3, r3, #3
 800546e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005470:	481f      	ldr	r0, [pc, #124]	; (80054f0 <__NVIC_SetPriority+0xd4>)
 8005472:	1dfb      	adds	r3, r7, #7
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	b25b      	sxtb	r3, r3
 8005478:	089b      	lsrs	r3, r3, #2
 800547a:	430a      	orrs	r2, r1
 800547c:	33c0      	adds	r3, #192	; 0xc0
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005482:	e031      	b.n	80054e8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005484:	4a1b      	ldr	r2, [pc, #108]	; (80054f4 <__NVIC_SetPriority+0xd8>)
 8005486:	1dfb      	adds	r3, r7, #7
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	0019      	movs	r1, r3
 800548c:	230f      	movs	r3, #15
 800548e:	400b      	ands	r3, r1
 8005490:	3b08      	subs	r3, #8
 8005492:	089b      	lsrs	r3, r3, #2
 8005494:	3306      	adds	r3, #6
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	18d3      	adds	r3, r2, r3
 800549a:	3304      	adds	r3, #4
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	1dfa      	adds	r2, r7, #7
 80054a0:	7812      	ldrb	r2, [r2, #0]
 80054a2:	0011      	movs	r1, r2
 80054a4:	2203      	movs	r2, #3
 80054a6:	400a      	ands	r2, r1
 80054a8:	00d2      	lsls	r2, r2, #3
 80054aa:	21ff      	movs	r1, #255	; 0xff
 80054ac:	4091      	lsls	r1, r2
 80054ae:	000a      	movs	r2, r1
 80054b0:	43d2      	mvns	r2, r2
 80054b2:	401a      	ands	r2, r3
 80054b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	019b      	lsls	r3, r3, #6
 80054ba:	22ff      	movs	r2, #255	; 0xff
 80054bc:	401a      	ands	r2, r3
 80054be:	1dfb      	adds	r3, r7, #7
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	0018      	movs	r0, r3
 80054c4:	2303      	movs	r3, #3
 80054c6:	4003      	ands	r3, r0
 80054c8:	00db      	lsls	r3, r3, #3
 80054ca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80054cc:	4809      	ldr	r0, [pc, #36]	; (80054f4 <__NVIC_SetPriority+0xd8>)
 80054ce:	1dfb      	adds	r3, r7, #7
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	001c      	movs	r4, r3
 80054d4:	230f      	movs	r3, #15
 80054d6:	4023      	ands	r3, r4
 80054d8:	3b08      	subs	r3, #8
 80054da:	089b      	lsrs	r3, r3, #2
 80054dc:	430a      	orrs	r2, r1
 80054de:	3306      	adds	r3, #6
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	18c3      	adds	r3, r0, r3
 80054e4:	3304      	adds	r3, #4
 80054e6:	601a      	str	r2, [r3, #0]
}
 80054e8:	46c0      	nop			; (mov r8, r8)
 80054ea:	46bd      	mov	sp, r7
 80054ec:	b003      	add	sp, #12
 80054ee:	bd90      	pop	{r4, r7, pc}
 80054f0:	e000e100 	.word	0xe000e100
 80054f4:	e000ed00 	.word	0xe000ed00

080054f8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60b9      	str	r1, [r7, #8]
 8005500:	607a      	str	r2, [r7, #4]
 8005502:	210f      	movs	r1, #15
 8005504:	187b      	adds	r3, r7, r1
 8005506:	1c02      	adds	r2, r0, #0
 8005508:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	187b      	adds	r3, r7, r1
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	b25b      	sxtb	r3, r3
 8005512:	0011      	movs	r1, r2
 8005514:	0018      	movs	r0, r3
 8005516:	f7ff ff81 	bl	800541c <__NVIC_SetPriority>
}
 800551a:	46c0      	nop			; (mov r8, r8)
 800551c:	46bd      	mov	sp, r7
 800551e:	b004      	add	sp, #16
 8005520:	bd80      	pop	{r7, pc}

08005522 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005522:	b580      	push	{r7, lr}
 8005524:	b082      	sub	sp, #8
 8005526:	af00      	add	r7, sp, #0
 8005528:	0002      	movs	r2, r0
 800552a:	1dfb      	adds	r3, r7, #7
 800552c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800552e:	1dfb      	adds	r3, r7, #7
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	b25b      	sxtb	r3, r3
 8005534:	0018      	movs	r0, r3
 8005536:	f7ff ff57 	bl	80053e8 <__NVIC_EnableIRQ>
}
 800553a:	46c0      	nop			; (mov r8, r8)
 800553c:	46bd      	mov	sp, r7
 800553e:	b002      	add	sp, #8
 8005540:	bd80      	pop	{r7, pc}

08005542 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005542:	b580      	push	{r7, lr}
 8005544:	b082      	sub	sp, #8
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2221      	movs	r2, #33	; 0x21
 800554e:	5c9b      	ldrb	r3, [r3, r2]
 8005550:	b2db      	uxtb	r3, r3
 8005552:	2b02      	cmp	r3, #2
 8005554:	d008      	beq.n	8005568 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2204      	movs	r2, #4
 800555a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2220      	movs	r2, #32
 8005560:	2100      	movs	r1, #0
 8005562:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e020      	b.n	80055aa <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	210e      	movs	r1, #14
 8005574:	438a      	bics	r2, r1
 8005576:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2101      	movs	r1, #1
 8005584:	438a      	bics	r2, r1
 8005586:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005590:	2101      	movs	r1, #1
 8005592:	4091      	lsls	r1, r2
 8005594:	000a      	movs	r2, r1
 8005596:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2221      	movs	r2, #33	; 0x21
 800559c:	2101      	movs	r1, #1
 800559e:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2220      	movs	r2, #32
 80055a4:	2100      	movs	r1, #0
 80055a6:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	0018      	movs	r0, r3
 80055ac:	46bd      	mov	sp, r7
 80055ae:	b002      	add	sp, #8
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80055b2:	b580      	push	{r7, lr}
 80055b4:	b084      	sub	sp, #16
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055ba:	210f      	movs	r1, #15
 80055bc:	187b      	adds	r3, r7, r1
 80055be:	2200      	movs	r2, #0
 80055c0:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2221      	movs	r2, #33	; 0x21
 80055c6:	5c9b      	ldrb	r3, [r3, r2]
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d006      	beq.n	80055dc <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2204      	movs	r2, #4
 80055d2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80055d4:	187b      	adds	r3, r7, r1
 80055d6:	2201      	movs	r2, #1
 80055d8:	701a      	strb	r2, [r3, #0]
 80055da:	e028      	b.n	800562e <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	210e      	movs	r1, #14
 80055e8:	438a      	bics	r2, r1
 80055ea:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2101      	movs	r1, #1
 80055f8:	438a      	bics	r2, r1
 80055fa:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005604:	2101      	movs	r1, #1
 8005606:	4091      	lsls	r1, r2
 8005608:	000a      	movs	r2, r1
 800560a:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2221      	movs	r2, #33	; 0x21
 8005610:	2101      	movs	r1, #1
 8005612:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2220      	movs	r2, #32
 8005618:	2100      	movs	r1, #0
 800561a:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005620:	2b00      	cmp	r3, #0
 8005622:	d004      	beq.n	800562e <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	0010      	movs	r0, r2
 800562c:	4798      	blx	r3
    } 
  }
  return status;
 800562e:	230f      	movs	r3, #15
 8005630:	18fb      	adds	r3, r7, r3
 8005632:	781b      	ldrb	r3, [r3, #0]
}
 8005634:	0018      	movs	r0, r3
 8005636:	46bd      	mov	sp, r7
 8005638:	b004      	add	sp, #16
 800563a:	bd80      	pop	{r7, pc}

0800563c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b086      	sub	sp, #24
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005646:	2300      	movs	r3, #0
 8005648:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800564a:	e14f      	b.n	80058ec <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2101      	movs	r1, #1
 8005652:	697a      	ldr	r2, [r7, #20]
 8005654:	4091      	lsls	r1, r2
 8005656:	000a      	movs	r2, r1
 8005658:	4013      	ands	r3, r2
 800565a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d100      	bne.n	8005664 <HAL_GPIO_Init+0x28>
 8005662:	e140      	b.n	80058e6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	2203      	movs	r2, #3
 800566a:	4013      	ands	r3, r2
 800566c:	2b01      	cmp	r3, #1
 800566e:	d005      	beq.n	800567c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	2203      	movs	r2, #3
 8005676:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005678:	2b02      	cmp	r3, #2
 800567a:	d130      	bne.n	80056de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	005b      	lsls	r3, r3, #1
 8005686:	2203      	movs	r2, #3
 8005688:	409a      	lsls	r2, r3
 800568a:	0013      	movs	r3, r2
 800568c:	43da      	mvns	r2, r3
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	4013      	ands	r3, r2
 8005692:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	68da      	ldr	r2, [r3, #12]
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	005b      	lsls	r3, r3, #1
 800569c:	409a      	lsls	r2, r3
 800569e:	0013      	movs	r3, r2
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	693a      	ldr	r2, [r7, #16]
 80056aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80056b2:	2201      	movs	r2, #1
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	409a      	lsls	r2, r3
 80056b8:	0013      	movs	r3, r2
 80056ba:	43da      	mvns	r2, r3
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	4013      	ands	r3, r2
 80056c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	091b      	lsrs	r3, r3, #4
 80056c8:	2201      	movs	r2, #1
 80056ca:	401a      	ands	r2, r3
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	409a      	lsls	r2, r3
 80056d0:	0013      	movs	r3, r2
 80056d2:	693a      	ldr	r2, [r7, #16]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	2203      	movs	r2, #3
 80056e4:	4013      	ands	r3, r2
 80056e6:	2b03      	cmp	r3, #3
 80056e8:	d017      	beq.n	800571a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	005b      	lsls	r3, r3, #1
 80056f4:	2203      	movs	r2, #3
 80056f6:	409a      	lsls	r2, r3
 80056f8:	0013      	movs	r3, r2
 80056fa:	43da      	mvns	r2, r3
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	4013      	ands	r3, r2
 8005700:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	689a      	ldr	r2, [r3, #8]
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	005b      	lsls	r3, r3, #1
 800570a:	409a      	lsls	r2, r3
 800570c:	0013      	movs	r3, r2
 800570e:	693a      	ldr	r2, [r7, #16]
 8005710:	4313      	orrs	r3, r2
 8005712:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	2203      	movs	r2, #3
 8005720:	4013      	ands	r3, r2
 8005722:	2b02      	cmp	r3, #2
 8005724:	d123      	bne.n	800576e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	08da      	lsrs	r2, r3, #3
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	3208      	adds	r2, #8
 800572e:	0092      	lsls	r2, r2, #2
 8005730:	58d3      	ldr	r3, [r2, r3]
 8005732:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	2207      	movs	r2, #7
 8005738:	4013      	ands	r3, r2
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	220f      	movs	r2, #15
 800573e:	409a      	lsls	r2, r3
 8005740:	0013      	movs	r3, r2
 8005742:	43da      	mvns	r2, r3
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	4013      	ands	r3, r2
 8005748:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	691a      	ldr	r2, [r3, #16]
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	2107      	movs	r1, #7
 8005752:	400b      	ands	r3, r1
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	409a      	lsls	r2, r3
 8005758:	0013      	movs	r3, r2
 800575a:	693a      	ldr	r2, [r7, #16]
 800575c:	4313      	orrs	r3, r2
 800575e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	08da      	lsrs	r2, r3, #3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	3208      	adds	r2, #8
 8005768:	0092      	lsls	r2, r2, #2
 800576a:	6939      	ldr	r1, [r7, #16]
 800576c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	005b      	lsls	r3, r3, #1
 8005778:	2203      	movs	r2, #3
 800577a:	409a      	lsls	r2, r3
 800577c:	0013      	movs	r3, r2
 800577e:	43da      	mvns	r2, r3
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	4013      	ands	r3, r2
 8005784:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	2203      	movs	r2, #3
 800578c:	401a      	ands	r2, r3
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	005b      	lsls	r3, r3, #1
 8005792:	409a      	lsls	r2, r3
 8005794:	0013      	movs	r3, r2
 8005796:	693a      	ldr	r2, [r7, #16]
 8005798:	4313      	orrs	r3, r2
 800579a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	693a      	ldr	r2, [r7, #16]
 80057a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	685a      	ldr	r2, [r3, #4]
 80057a6:	23c0      	movs	r3, #192	; 0xc0
 80057a8:	029b      	lsls	r3, r3, #10
 80057aa:	4013      	ands	r3, r2
 80057ac:	d100      	bne.n	80057b0 <HAL_GPIO_Init+0x174>
 80057ae:	e09a      	b.n	80058e6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057b0:	4b54      	ldr	r3, [pc, #336]	; (8005904 <HAL_GPIO_Init+0x2c8>)
 80057b2:	699a      	ldr	r2, [r3, #24]
 80057b4:	4b53      	ldr	r3, [pc, #332]	; (8005904 <HAL_GPIO_Init+0x2c8>)
 80057b6:	2101      	movs	r1, #1
 80057b8:	430a      	orrs	r2, r1
 80057ba:	619a      	str	r2, [r3, #24]
 80057bc:	4b51      	ldr	r3, [pc, #324]	; (8005904 <HAL_GPIO_Init+0x2c8>)
 80057be:	699b      	ldr	r3, [r3, #24]
 80057c0:	2201      	movs	r2, #1
 80057c2:	4013      	ands	r3, r2
 80057c4:	60bb      	str	r3, [r7, #8]
 80057c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80057c8:	4a4f      	ldr	r2, [pc, #316]	; (8005908 <HAL_GPIO_Init+0x2cc>)
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	089b      	lsrs	r3, r3, #2
 80057ce:	3302      	adds	r3, #2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	589b      	ldr	r3, [r3, r2]
 80057d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	2203      	movs	r2, #3
 80057da:	4013      	ands	r3, r2
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	220f      	movs	r2, #15
 80057e0:	409a      	lsls	r2, r3
 80057e2:	0013      	movs	r3, r2
 80057e4:	43da      	mvns	r2, r3
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	4013      	ands	r3, r2
 80057ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	2390      	movs	r3, #144	; 0x90
 80057f0:	05db      	lsls	r3, r3, #23
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d013      	beq.n	800581e <HAL_GPIO_Init+0x1e2>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a44      	ldr	r2, [pc, #272]	; (800590c <HAL_GPIO_Init+0x2d0>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d00d      	beq.n	800581a <HAL_GPIO_Init+0x1de>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a43      	ldr	r2, [pc, #268]	; (8005910 <HAL_GPIO_Init+0x2d4>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d007      	beq.n	8005816 <HAL_GPIO_Init+0x1da>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a42      	ldr	r2, [pc, #264]	; (8005914 <HAL_GPIO_Init+0x2d8>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d101      	bne.n	8005812 <HAL_GPIO_Init+0x1d6>
 800580e:	2303      	movs	r3, #3
 8005810:	e006      	b.n	8005820 <HAL_GPIO_Init+0x1e4>
 8005812:	2305      	movs	r3, #5
 8005814:	e004      	b.n	8005820 <HAL_GPIO_Init+0x1e4>
 8005816:	2302      	movs	r3, #2
 8005818:	e002      	b.n	8005820 <HAL_GPIO_Init+0x1e4>
 800581a:	2301      	movs	r3, #1
 800581c:	e000      	b.n	8005820 <HAL_GPIO_Init+0x1e4>
 800581e:	2300      	movs	r3, #0
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	2103      	movs	r1, #3
 8005824:	400a      	ands	r2, r1
 8005826:	0092      	lsls	r2, r2, #2
 8005828:	4093      	lsls	r3, r2
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	4313      	orrs	r3, r2
 800582e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005830:	4935      	ldr	r1, [pc, #212]	; (8005908 <HAL_GPIO_Init+0x2cc>)
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	089b      	lsrs	r3, r3, #2
 8005836:	3302      	adds	r3, #2
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	693a      	ldr	r2, [r7, #16]
 800583c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800583e:	4b36      	ldr	r3, [pc, #216]	; (8005918 <HAL_GPIO_Init+0x2dc>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	43da      	mvns	r2, r3
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	4013      	ands	r3, r2
 800584c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	685a      	ldr	r2, [r3, #4]
 8005852:	2380      	movs	r3, #128	; 0x80
 8005854:	025b      	lsls	r3, r3, #9
 8005856:	4013      	ands	r3, r2
 8005858:	d003      	beq.n	8005862 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800585a:	693a      	ldr	r2, [r7, #16]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	4313      	orrs	r3, r2
 8005860:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005862:	4b2d      	ldr	r3, [pc, #180]	; (8005918 <HAL_GPIO_Init+0x2dc>)
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8005868:	4b2b      	ldr	r3, [pc, #172]	; (8005918 <HAL_GPIO_Init+0x2dc>)
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	43da      	mvns	r2, r3
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	4013      	ands	r3, r2
 8005876:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	685a      	ldr	r2, [r3, #4]
 800587c:	2380      	movs	r3, #128	; 0x80
 800587e:	029b      	lsls	r3, r3, #10
 8005880:	4013      	ands	r3, r2
 8005882:	d003      	beq.n	800588c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8005884:	693a      	ldr	r2, [r7, #16]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	4313      	orrs	r3, r2
 800588a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800588c:	4b22      	ldr	r3, [pc, #136]	; (8005918 <HAL_GPIO_Init+0x2dc>)
 800588e:	693a      	ldr	r2, [r7, #16]
 8005890:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005892:	4b21      	ldr	r3, [pc, #132]	; (8005918 <HAL_GPIO_Init+0x2dc>)
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	43da      	mvns	r2, r3
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	4013      	ands	r3, r2
 80058a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	685a      	ldr	r2, [r3, #4]
 80058a6:	2380      	movs	r3, #128	; 0x80
 80058a8:	035b      	lsls	r3, r3, #13
 80058aa:	4013      	ands	r3, r2
 80058ac:	d003      	beq.n	80058b6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80058ae:	693a      	ldr	r2, [r7, #16]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80058b6:	4b18      	ldr	r3, [pc, #96]	; (8005918 <HAL_GPIO_Init+0x2dc>)
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80058bc:	4b16      	ldr	r3, [pc, #88]	; (8005918 <HAL_GPIO_Init+0x2dc>)
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	43da      	mvns	r2, r3
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	4013      	ands	r3, r2
 80058ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	685a      	ldr	r2, [r3, #4]
 80058d0:	2380      	movs	r3, #128	; 0x80
 80058d2:	039b      	lsls	r3, r3, #14
 80058d4:	4013      	ands	r3, r2
 80058d6:	d003      	beq.n	80058e0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80058d8:	693a      	ldr	r2, [r7, #16]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	4313      	orrs	r3, r2
 80058de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80058e0:	4b0d      	ldr	r3, [pc, #52]	; (8005918 <HAL_GPIO_Init+0x2dc>)
 80058e2:	693a      	ldr	r2, [r7, #16]
 80058e4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	3301      	adds	r3, #1
 80058ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	40da      	lsrs	r2, r3
 80058f4:	1e13      	subs	r3, r2, #0
 80058f6:	d000      	beq.n	80058fa <HAL_GPIO_Init+0x2be>
 80058f8:	e6a8      	b.n	800564c <HAL_GPIO_Init+0x10>
  } 
}
 80058fa:	46c0      	nop			; (mov r8, r8)
 80058fc:	46c0      	nop			; (mov r8, r8)
 80058fe:	46bd      	mov	sp, r7
 8005900:	b006      	add	sp, #24
 8005902:	bd80      	pop	{r7, pc}
 8005904:	40021000 	.word	0x40021000
 8005908:	40010000 	.word	0x40010000
 800590c:	48000400 	.word	0x48000400
 8005910:	48000800 	.word	0x48000800
 8005914:	48000c00 	.word	0x48000c00
 8005918:	40010400 	.word	0x40010400

0800591c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b082      	sub	sp, #8
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	0008      	movs	r0, r1
 8005926:	0011      	movs	r1, r2
 8005928:	1cbb      	adds	r3, r7, #2
 800592a:	1c02      	adds	r2, r0, #0
 800592c:	801a      	strh	r2, [r3, #0]
 800592e:	1c7b      	adds	r3, r7, #1
 8005930:	1c0a      	adds	r2, r1, #0
 8005932:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005934:	1c7b      	adds	r3, r7, #1
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d004      	beq.n	8005946 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800593c:	1cbb      	adds	r3, r7, #2
 800593e:	881a      	ldrh	r2, [r3, #0]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005944:	e003      	b.n	800594e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005946:	1cbb      	adds	r3, r7, #2
 8005948:	881a      	ldrh	r2, [r3, #0]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800594e:	46c0      	nop			; (mov r8, r8)
 8005950:	46bd      	mov	sp, r7
 8005952:	b002      	add	sp, #8
 8005954:	bd80      	pop	{r7, pc}
	...

08005958 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d101      	bne.n	800596a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e082      	b.n	8005a70 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2241      	movs	r2, #65	; 0x41
 800596e:	5c9b      	ldrb	r3, [r3, r2]
 8005970:	b2db      	uxtb	r3, r3
 8005972:	2b00      	cmp	r3, #0
 8005974:	d107      	bne.n	8005986 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2240      	movs	r2, #64	; 0x40
 800597a:	2100      	movs	r1, #0
 800597c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	0018      	movs	r0, r3
 8005982:	f7fe fcb3 	bl	80042ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2241      	movs	r2, #65	; 0x41
 800598a:	2124      	movs	r1, #36	; 0x24
 800598c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2101      	movs	r1, #1
 800599a:	438a      	bics	r2, r1
 800599c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685a      	ldr	r2, [r3, #4]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4934      	ldr	r1, [pc, #208]	; (8005a78 <HAL_I2C_Init+0x120>)
 80059a8:	400a      	ands	r2, r1
 80059aa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	689a      	ldr	r2, [r3, #8]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4931      	ldr	r1, [pc, #196]	; (8005a7c <HAL_I2C_Init+0x124>)
 80059b8:	400a      	ands	r2, r1
 80059ba:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d108      	bne.n	80059d6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	689a      	ldr	r2, [r3, #8]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2180      	movs	r1, #128	; 0x80
 80059ce:	0209      	lsls	r1, r1, #8
 80059d0:	430a      	orrs	r2, r1
 80059d2:	609a      	str	r2, [r3, #8]
 80059d4:	e007      	b.n	80059e6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	689a      	ldr	r2, [r3, #8]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2184      	movs	r1, #132	; 0x84
 80059e0:	0209      	lsls	r1, r1, #8
 80059e2:	430a      	orrs	r2, r1
 80059e4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d104      	bne.n	80059f8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2280      	movs	r2, #128	; 0x80
 80059f4:	0112      	lsls	r2, r2, #4
 80059f6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	685a      	ldr	r2, [r3, #4]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	491f      	ldr	r1, [pc, #124]	; (8005a80 <HAL_I2C_Init+0x128>)
 8005a04:	430a      	orrs	r2, r1
 8005a06:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68da      	ldr	r2, [r3, #12]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	491a      	ldr	r1, [pc, #104]	; (8005a7c <HAL_I2C_Init+0x124>)
 8005a14:	400a      	ands	r2, r1
 8005a16:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	691a      	ldr	r2, [r3, #16]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	695b      	ldr	r3, [r3, #20]
 8005a20:	431a      	orrs	r2, r3
 8005a22:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	699b      	ldr	r3, [r3, #24]
 8005a28:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	430a      	orrs	r2, r1
 8005a30:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	69d9      	ldr	r1, [r3, #28]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a1a      	ldr	r2, [r3, #32]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2101      	movs	r1, #1
 8005a4e:	430a      	orrs	r2, r1
 8005a50:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2241      	movs	r2, #65	; 0x41
 8005a5c:	2120      	movs	r1, #32
 8005a5e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2242      	movs	r2, #66	; 0x42
 8005a6a:	2100      	movs	r1, #0
 8005a6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	0018      	movs	r0, r3
 8005a72:	46bd      	mov	sp, r7
 8005a74:	b002      	add	sp, #8
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	f0ffffff 	.word	0xf0ffffff
 8005a7c:	ffff7fff 	.word	0xffff7fff
 8005a80:	02008000 	.word	0x02008000

08005a84 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005a84:	b590      	push	{r4, r7, lr}
 8005a86:	b089      	sub	sp, #36	; 0x24
 8005a88:	af02      	add	r7, sp, #8
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	0008      	movs	r0, r1
 8005a8e:	607a      	str	r2, [r7, #4]
 8005a90:	0019      	movs	r1, r3
 8005a92:	230a      	movs	r3, #10
 8005a94:	18fb      	adds	r3, r7, r3
 8005a96:	1c02      	adds	r2, r0, #0
 8005a98:	801a      	strh	r2, [r3, #0]
 8005a9a:	2308      	movs	r3, #8
 8005a9c:	18fb      	adds	r3, r7, r3
 8005a9e:	1c0a      	adds	r2, r1, #0
 8005aa0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2241      	movs	r2, #65	; 0x41
 8005aa6:	5c9b      	ldrb	r3, [r3, r2]
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	2b20      	cmp	r3, #32
 8005aac:	d000      	beq.n	8005ab0 <HAL_I2C_Master_Transmit+0x2c>
 8005aae:	e0e7      	b.n	8005c80 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2240      	movs	r2, #64	; 0x40
 8005ab4:	5c9b      	ldrb	r3, [r3, r2]
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d101      	bne.n	8005abe <HAL_I2C_Master_Transmit+0x3a>
 8005aba:	2302      	movs	r3, #2
 8005abc:	e0e1      	b.n	8005c82 <HAL_I2C_Master_Transmit+0x1fe>
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2240      	movs	r2, #64	; 0x40
 8005ac2:	2101      	movs	r1, #1
 8005ac4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005ac6:	f7fe fed5 	bl	8004874 <HAL_GetTick>
 8005aca:	0003      	movs	r3, r0
 8005acc:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005ace:	2380      	movs	r3, #128	; 0x80
 8005ad0:	0219      	lsls	r1, r3, #8
 8005ad2:	68f8      	ldr	r0, [r7, #12]
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	9300      	str	r3, [sp, #0]
 8005ad8:	2319      	movs	r3, #25
 8005ada:	2201      	movs	r2, #1
 8005adc:	f000 f8fc 	bl	8005cd8 <I2C_WaitOnFlagUntilTimeout>
 8005ae0:	1e03      	subs	r3, r0, #0
 8005ae2:	d001      	beq.n	8005ae8 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e0cc      	b.n	8005c82 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2241      	movs	r2, #65	; 0x41
 8005aec:	2121      	movs	r1, #33	; 0x21
 8005aee:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2242      	movs	r2, #66	; 0x42
 8005af4:	2110      	movs	r1, #16
 8005af6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2200      	movs	r2, #0
 8005afc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2208      	movs	r2, #8
 8005b08:	18ba      	adds	r2, r7, r2
 8005b0a:	8812      	ldrh	r2, [r2, #0]
 8005b0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2200      	movs	r2, #0
 8005b12:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	2bff      	cmp	r3, #255	; 0xff
 8005b1c:	d911      	bls.n	8005b42 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	22ff      	movs	r2, #255	; 0xff
 8005b22:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b28:	b2da      	uxtb	r2, r3
 8005b2a:	2380      	movs	r3, #128	; 0x80
 8005b2c:	045c      	lsls	r4, r3, #17
 8005b2e:	230a      	movs	r3, #10
 8005b30:	18fb      	adds	r3, r7, r3
 8005b32:	8819      	ldrh	r1, [r3, #0]
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	4b55      	ldr	r3, [pc, #340]	; (8005c8c <HAL_I2C_Master_Transmit+0x208>)
 8005b38:	9300      	str	r3, [sp, #0]
 8005b3a:	0023      	movs	r3, r4
 8005b3c:	f000 fa00 	bl	8005f40 <I2C_TransferConfig>
 8005b40:	e075      	b.n	8005c2e <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b46:	b29a      	uxth	r2, r3
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b50:	b2da      	uxtb	r2, r3
 8005b52:	2380      	movs	r3, #128	; 0x80
 8005b54:	049c      	lsls	r4, r3, #18
 8005b56:	230a      	movs	r3, #10
 8005b58:	18fb      	adds	r3, r7, r3
 8005b5a:	8819      	ldrh	r1, [r3, #0]
 8005b5c:	68f8      	ldr	r0, [r7, #12]
 8005b5e:	4b4b      	ldr	r3, [pc, #300]	; (8005c8c <HAL_I2C_Master_Transmit+0x208>)
 8005b60:	9300      	str	r3, [sp, #0]
 8005b62:	0023      	movs	r3, r4
 8005b64:	f000 f9ec 	bl	8005f40 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005b68:	e061      	b.n	8005c2e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	0018      	movs	r0, r3
 8005b72:	f000 f8f0 	bl	8005d56 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b76:	1e03      	subs	r3, r0, #0
 8005b78:	d001      	beq.n	8005b7e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e081      	b.n	8005c82 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b82:	781a      	ldrb	r2, [r3, #0]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8e:	1c5a      	adds	r2, r3, #1
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	b29a      	uxth	r2, r3
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d03a      	beq.n	8005c2e <HAL_I2C_Master_Transmit+0x1aa>
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d136      	bne.n	8005c2e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005bc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	9300      	str	r3, [sp, #0]
 8005bc8:	0013      	movs	r3, r2
 8005bca:	2200      	movs	r2, #0
 8005bcc:	2180      	movs	r1, #128	; 0x80
 8005bce:	f000 f883 	bl	8005cd8 <I2C_WaitOnFlagUntilTimeout>
 8005bd2:	1e03      	subs	r3, r0, #0
 8005bd4:	d001      	beq.n	8005bda <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e053      	b.n	8005c82 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	2bff      	cmp	r3, #255	; 0xff
 8005be2:	d911      	bls.n	8005c08 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	22ff      	movs	r2, #255	; 0xff
 8005be8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bee:	b2da      	uxtb	r2, r3
 8005bf0:	2380      	movs	r3, #128	; 0x80
 8005bf2:	045c      	lsls	r4, r3, #17
 8005bf4:	230a      	movs	r3, #10
 8005bf6:	18fb      	adds	r3, r7, r3
 8005bf8:	8819      	ldrh	r1, [r3, #0]
 8005bfa:	68f8      	ldr	r0, [r7, #12]
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	9300      	str	r3, [sp, #0]
 8005c00:	0023      	movs	r3, r4
 8005c02:	f000 f99d 	bl	8005f40 <I2C_TransferConfig>
 8005c06:	e012      	b.n	8005c2e <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c0c:	b29a      	uxth	r2, r3
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c16:	b2da      	uxtb	r2, r3
 8005c18:	2380      	movs	r3, #128	; 0x80
 8005c1a:	049c      	lsls	r4, r3, #18
 8005c1c:	230a      	movs	r3, #10
 8005c1e:	18fb      	adds	r3, r7, r3
 8005c20:	8819      	ldrh	r1, [r3, #0]
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	2300      	movs	r3, #0
 8005c26:	9300      	str	r3, [sp, #0]
 8005c28:	0023      	movs	r3, r4
 8005c2a:	f000 f989 	bl	8005f40 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d198      	bne.n	8005b6a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	0018      	movs	r0, r3
 8005c40:	f000 f8c8 	bl	8005dd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c44:	1e03      	subs	r3, r0, #0
 8005c46:	d001      	beq.n	8005c4c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e01a      	b.n	8005c82 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2220      	movs	r2, #32
 8005c52:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	685a      	ldr	r2, [r3, #4]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	490c      	ldr	r1, [pc, #48]	; (8005c90 <HAL_I2C_Master_Transmit+0x20c>)
 8005c60:	400a      	ands	r2, r1
 8005c62:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2241      	movs	r2, #65	; 0x41
 8005c68:	2120      	movs	r1, #32
 8005c6a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2242      	movs	r2, #66	; 0x42
 8005c70:	2100      	movs	r1, #0
 8005c72:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2240      	movs	r2, #64	; 0x40
 8005c78:	2100      	movs	r1, #0
 8005c7a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	e000      	b.n	8005c82 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8005c80:	2302      	movs	r3, #2
  }
}
 8005c82:	0018      	movs	r0, r3
 8005c84:	46bd      	mov	sp, r7
 8005c86:	b007      	add	sp, #28
 8005c88:	bd90      	pop	{r4, r7, pc}
 8005c8a:	46c0      	nop			; (mov r8, r8)
 8005c8c:	80002000 	.word	0x80002000
 8005c90:	fe00e800 	.word	0xfe00e800

08005c94 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	2202      	movs	r2, #2
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	d103      	bne.n	8005cb2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	699b      	ldr	r3, [r3, #24]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	4013      	ands	r3, r2
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d007      	beq.n	8005cd0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	699a      	ldr	r2, [r3, #24]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2101      	movs	r1, #1
 8005ccc:	430a      	orrs	r2, r1
 8005cce:	619a      	str	r2, [r3, #24]
  }
}
 8005cd0:	46c0      	nop			; (mov r8, r8)
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	b002      	add	sp, #8
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	603b      	str	r3, [r7, #0]
 8005ce4:	1dfb      	adds	r3, r7, #7
 8005ce6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ce8:	e021      	b.n	8005d2e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	3301      	adds	r3, #1
 8005cee:	d01e      	beq.n	8005d2e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cf0:	f7fe fdc0 	bl	8004874 <HAL_GetTick>
 8005cf4:	0002      	movs	r2, r0
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	683a      	ldr	r2, [r7, #0]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d302      	bcc.n	8005d06 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d113      	bne.n	8005d2e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d0a:	2220      	movs	r2, #32
 8005d0c:	431a      	orrs	r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2241      	movs	r2, #65	; 0x41
 8005d16:	2120      	movs	r1, #32
 8005d18:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2242      	movs	r2, #66	; 0x42
 8005d1e:	2100      	movs	r1, #0
 8005d20:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2240      	movs	r2, #64	; 0x40
 8005d26:	2100      	movs	r1, #0
 8005d28:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e00f      	b.n	8005d4e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	699b      	ldr	r3, [r3, #24]
 8005d34:	68ba      	ldr	r2, [r7, #8]
 8005d36:	4013      	ands	r3, r2
 8005d38:	68ba      	ldr	r2, [r7, #8]
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	425a      	negs	r2, r3
 8005d3e:	4153      	adcs	r3, r2
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	001a      	movs	r2, r3
 8005d44:	1dfb      	adds	r3, r7, #7
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d0ce      	beq.n	8005cea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	0018      	movs	r0, r3
 8005d50:	46bd      	mov	sp, r7
 8005d52:	b004      	add	sp, #16
 8005d54:	bd80      	pop	{r7, pc}

08005d56 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005d56:	b580      	push	{r7, lr}
 8005d58:	b084      	sub	sp, #16
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	60f8      	str	r0, [r7, #12]
 8005d5e:	60b9      	str	r1, [r7, #8]
 8005d60:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005d62:	e02b      	b.n	8005dbc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	68b9      	ldr	r1, [r7, #8]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	0018      	movs	r0, r3
 8005d6c:	f000 f86e 	bl	8005e4c <I2C_IsAcknowledgeFailed>
 8005d70:	1e03      	subs	r3, r0, #0
 8005d72:	d001      	beq.n	8005d78 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e029      	b.n	8005dcc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	d01e      	beq.n	8005dbc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d7e:	f7fe fd79 	bl	8004874 <HAL_GetTick>
 8005d82:	0002      	movs	r2, r0
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	68ba      	ldr	r2, [r7, #8]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d302      	bcc.n	8005d94 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d113      	bne.n	8005dbc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d98:	2220      	movs	r2, #32
 8005d9a:	431a      	orrs	r2, r3
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2241      	movs	r2, #65	; 0x41
 8005da4:	2120      	movs	r1, #32
 8005da6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2242      	movs	r2, #66	; 0x42
 8005dac:	2100      	movs	r1, #0
 8005dae:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2240      	movs	r2, #64	; 0x40
 8005db4:	2100      	movs	r1, #0
 8005db6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e007      	b.n	8005dcc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	2202      	movs	r2, #2
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d1cc      	bne.n	8005d64 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	0018      	movs	r0, r3
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	b004      	add	sp, #16
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005de0:	e028      	b.n	8005e34 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	68b9      	ldr	r1, [r7, #8]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	0018      	movs	r0, r3
 8005dea:	f000 f82f 	bl	8005e4c <I2C_IsAcknowledgeFailed>
 8005dee:	1e03      	subs	r3, r0, #0
 8005df0:	d001      	beq.n	8005df6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e026      	b.n	8005e44 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005df6:	f7fe fd3d 	bl	8004874 <HAL_GetTick>
 8005dfa:	0002      	movs	r2, r0
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	68ba      	ldr	r2, [r7, #8]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d302      	bcc.n	8005e0c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d113      	bne.n	8005e34 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e10:	2220      	movs	r2, #32
 8005e12:	431a      	orrs	r2, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2241      	movs	r2, #65	; 0x41
 8005e1c:	2120      	movs	r1, #32
 8005e1e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2242      	movs	r2, #66	; 0x42
 8005e24:	2100      	movs	r1, #0
 8005e26:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2240      	movs	r2, #64	; 0x40
 8005e2c:	2100      	movs	r1, #0
 8005e2e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e007      	b.n	8005e44 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	699b      	ldr	r3, [r3, #24]
 8005e3a:	2220      	movs	r2, #32
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	2b20      	cmp	r3, #32
 8005e40:	d1cf      	bne.n	8005de2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	0018      	movs	r0, r3
 8005e46:	46bd      	mov	sp, r7
 8005e48:	b004      	add	sp, #16
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	699b      	ldr	r3, [r3, #24]
 8005e5e:	2210      	movs	r2, #16
 8005e60:	4013      	ands	r3, r2
 8005e62:	2b10      	cmp	r3, #16
 8005e64:	d164      	bne.n	8005f30 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	685a      	ldr	r2, [r3, #4]
 8005e6c:	2380      	movs	r3, #128	; 0x80
 8005e6e:	049b      	lsls	r3, r3, #18
 8005e70:	401a      	ands	r2, r3
 8005e72:	2380      	movs	r3, #128	; 0x80
 8005e74:	049b      	lsls	r3, r3, #18
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d02b      	beq.n	8005ed2 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	685a      	ldr	r2, [r3, #4]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2180      	movs	r1, #128	; 0x80
 8005e86:	01c9      	lsls	r1, r1, #7
 8005e88:	430a      	orrs	r2, r1
 8005e8a:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e8c:	e021      	b.n	8005ed2 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	3301      	adds	r3, #1
 8005e92:	d01e      	beq.n	8005ed2 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e94:	f7fe fcee 	bl	8004874 <HAL_GetTick>
 8005e98:	0002      	movs	r2, r0
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d302      	bcc.n	8005eaa <I2C_IsAcknowledgeFailed+0x5e>
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d113      	bne.n	8005ed2 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eae:	2220      	movs	r2, #32
 8005eb0:	431a      	orrs	r2, r3
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2241      	movs	r2, #65	; 0x41
 8005eba:	2120      	movs	r1, #32
 8005ebc:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2242      	movs	r2, #66	; 0x42
 8005ec2:	2100      	movs	r1, #0
 8005ec4:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2240      	movs	r2, #64	; 0x40
 8005eca:	2100      	movs	r1, #0
 8005ecc:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e02f      	b.n	8005f32 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	699b      	ldr	r3, [r3, #24]
 8005ed8:	2220      	movs	r2, #32
 8005eda:	4013      	ands	r3, r2
 8005edc:	2b20      	cmp	r3, #32
 8005ede:	d1d6      	bne.n	8005e8e <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2210      	movs	r2, #16
 8005ee6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2220      	movs	r2, #32
 8005eee:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	0018      	movs	r0, r3
 8005ef4:	f7ff fece 	bl	8005c94 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	685a      	ldr	r2, [r3, #4]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	490e      	ldr	r1, [pc, #56]	; (8005f3c <I2C_IsAcknowledgeFailed+0xf0>)
 8005f04:	400a      	ands	r2, r1
 8005f06:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f0c:	2204      	movs	r2, #4
 8005f0e:	431a      	orrs	r2, r3
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2241      	movs	r2, #65	; 0x41
 8005f18:	2120      	movs	r1, #32
 8005f1a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2242      	movs	r2, #66	; 0x42
 8005f20:	2100      	movs	r1, #0
 8005f22:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2240      	movs	r2, #64	; 0x40
 8005f28:	2100      	movs	r1, #0
 8005f2a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e000      	b.n	8005f32 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	0018      	movs	r0, r3
 8005f34:	46bd      	mov	sp, r7
 8005f36:	b004      	add	sp, #16
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	46c0      	nop			; (mov r8, r8)
 8005f3c:	fe00e800 	.word	0xfe00e800

08005f40 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005f40:	b590      	push	{r4, r7, lr}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	0008      	movs	r0, r1
 8005f4a:	0011      	movs	r1, r2
 8005f4c:	607b      	str	r3, [r7, #4]
 8005f4e:	240a      	movs	r4, #10
 8005f50:	193b      	adds	r3, r7, r4
 8005f52:	1c02      	adds	r2, r0, #0
 8005f54:	801a      	strh	r2, [r3, #0]
 8005f56:	2009      	movs	r0, #9
 8005f58:	183b      	adds	r3, r7, r0
 8005f5a:	1c0a      	adds	r2, r1, #0
 8005f5c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	6a3a      	ldr	r2, [r7, #32]
 8005f66:	0d51      	lsrs	r1, r2, #21
 8005f68:	2280      	movs	r2, #128	; 0x80
 8005f6a:	00d2      	lsls	r2, r2, #3
 8005f6c:	400a      	ands	r2, r1
 8005f6e:	490e      	ldr	r1, [pc, #56]	; (8005fa8 <I2C_TransferConfig+0x68>)
 8005f70:	430a      	orrs	r2, r1
 8005f72:	43d2      	mvns	r2, r2
 8005f74:	401a      	ands	r2, r3
 8005f76:	0011      	movs	r1, r2
 8005f78:	193b      	adds	r3, r7, r4
 8005f7a:	881b      	ldrh	r3, [r3, #0]
 8005f7c:	059b      	lsls	r3, r3, #22
 8005f7e:	0d9a      	lsrs	r2, r3, #22
 8005f80:	183b      	adds	r3, r7, r0
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	0418      	lsls	r0, r3, #16
 8005f86:	23ff      	movs	r3, #255	; 0xff
 8005f88:	041b      	lsls	r3, r3, #16
 8005f8a:	4003      	ands	r3, r0
 8005f8c:	431a      	orrs	r2, r3
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	431a      	orrs	r2, r3
 8005f92:	6a3b      	ldr	r3, [r7, #32]
 8005f94:	431a      	orrs	r2, r3
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	430a      	orrs	r2, r1
 8005f9c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8005f9e:	46c0      	nop			; (mov r8, r8)
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	b005      	add	sp, #20
 8005fa4:	bd90      	pop	{r4, r7, pc}
 8005fa6:	46c0      	nop			; (mov r8, r8)
 8005fa8:	03ff63ff 	.word	0x03ff63ff

08005fac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2241      	movs	r2, #65	; 0x41
 8005fba:	5c9b      	ldrb	r3, [r3, r2]
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	2b20      	cmp	r3, #32
 8005fc0:	d138      	bne.n	8006034 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2240      	movs	r2, #64	; 0x40
 8005fc6:	5c9b      	ldrb	r3, [r3, r2]
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d101      	bne.n	8005fd0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005fcc:	2302      	movs	r3, #2
 8005fce:	e032      	b.n	8006036 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2240      	movs	r2, #64	; 0x40
 8005fd4:	2101      	movs	r1, #1
 8005fd6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2241      	movs	r2, #65	; 0x41
 8005fdc:	2124      	movs	r1, #36	; 0x24
 8005fde:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2101      	movs	r1, #1
 8005fec:	438a      	bics	r2, r1
 8005fee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4911      	ldr	r1, [pc, #68]	; (8006040 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005ffc:	400a      	ands	r2, r1
 8005ffe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	6819      	ldr	r1, [r3, #0]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	683a      	ldr	r2, [r7, #0]
 800600c:	430a      	orrs	r2, r1
 800600e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2101      	movs	r1, #1
 800601c:	430a      	orrs	r2, r1
 800601e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2241      	movs	r2, #65	; 0x41
 8006024:	2120      	movs	r1, #32
 8006026:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2240      	movs	r2, #64	; 0x40
 800602c:	2100      	movs	r1, #0
 800602e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006030:	2300      	movs	r3, #0
 8006032:	e000      	b.n	8006036 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006034:	2302      	movs	r3, #2
  }
}
 8006036:	0018      	movs	r0, r3
 8006038:	46bd      	mov	sp, r7
 800603a:	b002      	add	sp, #8
 800603c:	bd80      	pop	{r7, pc}
 800603e:	46c0      	nop			; (mov r8, r8)
 8006040:	ffffefff 	.word	0xffffefff

08006044 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2241      	movs	r2, #65	; 0x41
 8006052:	5c9b      	ldrb	r3, [r3, r2]
 8006054:	b2db      	uxtb	r3, r3
 8006056:	2b20      	cmp	r3, #32
 8006058:	d139      	bne.n	80060ce <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2240      	movs	r2, #64	; 0x40
 800605e:	5c9b      	ldrb	r3, [r3, r2]
 8006060:	2b01      	cmp	r3, #1
 8006062:	d101      	bne.n	8006068 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006064:	2302      	movs	r3, #2
 8006066:	e033      	b.n	80060d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2240      	movs	r2, #64	; 0x40
 800606c:	2101      	movs	r1, #1
 800606e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2241      	movs	r2, #65	; 0x41
 8006074:	2124      	movs	r1, #36	; 0x24
 8006076:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	2101      	movs	r1, #1
 8006084:	438a      	bics	r2, r1
 8006086:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	4a11      	ldr	r2, [pc, #68]	; (80060d8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006094:	4013      	ands	r3, r2
 8006096:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	021b      	lsls	r3, r3, #8
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	4313      	orrs	r3, r2
 80060a0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68fa      	ldr	r2, [r7, #12]
 80060a8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2101      	movs	r1, #1
 80060b6:	430a      	orrs	r2, r1
 80060b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2241      	movs	r2, #65	; 0x41
 80060be:	2120      	movs	r1, #32
 80060c0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2240      	movs	r2, #64	; 0x40
 80060c6:	2100      	movs	r1, #0
 80060c8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80060ca:	2300      	movs	r3, #0
 80060cc:	e000      	b.n	80060d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80060ce:	2302      	movs	r3, #2
  }
}
 80060d0:	0018      	movs	r0, r3
 80060d2:	46bd      	mov	sp, r7
 80060d4:	b004      	add	sp, #16
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	fffff0ff 	.word	0xfffff0ff

080060dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b088      	sub	sp, #32
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d101      	bne.n	80060ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e305      	b.n	80066fa <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2201      	movs	r2, #1
 80060f4:	4013      	ands	r3, r2
 80060f6:	d100      	bne.n	80060fa <HAL_RCC_OscConfig+0x1e>
 80060f8:	e08d      	b.n	8006216 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80060fa:	4bc5      	ldr	r3, [pc, #788]	; (8006410 <HAL_RCC_OscConfig+0x334>)
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	220c      	movs	r2, #12
 8006100:	4013      	ands	r3, r2
 8006102:	2b04      	cmp	r3, #4
 8006104:	d00e      	beq.n	8006124 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006106:	4bc2      	ldr	r3, [pc, #776]	; (8006410 <HAL_RCC_OscConfig+0x334>)
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	220c      	movs	r2, #12
 800610c:	4013      	ands	r3, r2
 800610e:	2b08      	cmp	r3, #8
 8006110:	d116      	bne.n	8006140 <HAL_RCC_OscConfig+0x64>
 8006112:	4bbf      	ldr	r3, [pc, #764]	; (8006410 <HAL_RCC_OscConfig+0x334>)
 8006114:	685a      	ldr	r2, [r3, #4]
 8006116:	23c0      	movs	r3, #192	; 0xc0
 8006118:	025b      	lsls	r3, r3, #9
 800611a:	401a      	ands	r2, r3
 800611c:	2380      	movs	r3, #128	; 0x80
 800611e:	025b      	lsls	r3, r3, #9
 8006120:	429a      	cmp	r2, r3
 8006122:	d10d      	bne.n	8006140 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006124:	4bba      	ldr	r3, [pc, #744]	; (8006410 <HAL_RCC_OscConfig+0x334>)
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	2380      	movs	r3, #128	; 0x80
 800612a:	029b      	lsls	r3, r3, #10
 800612c:	4013      	ands	r3, r2
 800612e:	d100      	bne.n	8006132 <HAL_RCC_OscConfig+0x56>
 8006130:	e070      	b.n	8006214 <HAL_RCC_OscConfig+0x138>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d000      	beq.n	800613c <HAL_RCC_OscConfig+0x60>
 800613a:	e06b      	b.n	8006214 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e2dc      	b.n	80066fa <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	2b01      	cmp	r3, #1
 8006146:	d107      	bne.n	8006158 <HAL_RCC_OscConfig+0x7c>
 8006148:	4bb1      	ldr	r3, [pc, #708]	; (8006410 <HAL_RCC_OscConfig+0x334>)
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	4bb0      	ldr	r3, [pc, #704]	; (8006410 <HAL_RCC_OscConfig+0x334>)
 800614e:	2180      	movs	r1, #128	; 0x80
 8006150:	0249      	lsls	r1, r1, #9
 8006152:	430a      	orrs	r2, r1
 8006154:	601a      	str	r2, [r3, #0]
 8006156:	e02f      	b.n	80061b8 <HAL_RCC_OscConfig+0xdc>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d10c      	bne.n	800617a <HAL_RCC_OscConfig+0x9e>
 8006160:	4bab      	ldr	r3, [pc, #684]	; (8006410 <HAL_RCC_OscConfig+0x334>)
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	4baa      	ldr	r3, [pc, #680]	; (8006410 <HAL_RCC_OscConfig+0x334>)
 8006166:	49ab      	ldr	r1, [pc, #684]	; (8006414 <HAL_RCC_OscConfig+0x338>)
 8006168:	400a      	ands	r2, r1
 800616a:	601a      	str	r2, [r3, #0]
 800616c:	4ba8      	ldr	r3, [pc, #672]	; (8006410 <HAL_RCC_OscConfig+0x334>)
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	4ba7      	ldr	r3, [pc, #668]	; (8006410 <HAL_RCC_OscConfig+0x334>)
 8006172:	49a9      	ldr	r1, [pc, #676]	; (8006418 <HAL_RCC_OscConfig+0x33c>)
 8006174:	400a      	ands	r2, r1
 8006176:	601a      	str	r2, [r3, #0]
 8006178:	e01e      	b.n	80061b8 <HAL_RCC_OscConfig+0xdc>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	2b05      	cmp	r3, #5
 8006180:	d10e      	bne.n	80061a0 <HAL_RCC_OscConfig+0xc4>
 8006182:	4ba3      	ldr	r3, [pc, #652]	; (8006410 <HAL_RCC_OscConfig+0x334>)
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	4ba2      	ldr	r3, [pc, #648]	; (8006410 <HAL_RCC_OscConfig+0x334>)
 8006188:	2180      	movs	r1, #128	; 0x80
 800618a:	02c9      	lsls	r1, r1, #11
 800618c:	430a      	orrs	r2, r1
 800618e:	601a      	str	r2, [r3, #0]
 8006190:	4b9f      	ldr	r3, [pc, #636]	; (8006410 <HAL_RCC_OscConfig+0x334>)
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	4b9e      	ldr	r3, [pc, #632]	; (8006410 <HAL_RCC_OscConfig+0x334>)
 8006196:	2180      	movs	r1, #128	; 0x80
 8006198:	0249      	lsls	r1, r1, #9
 800619a:	430a      	orrs	r2, r1
 800619c:	601a      	str	r2, [r3, #0]
 800619e:	e00b      	b.n	80061b8 <HAL_RCC_OscConfig+0xdc>
 80061a0:	4b9b      	ldr	r3, [pc, #620]	; (8006410 <HAL_RCC_OscConfig+0x334>)
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	4b9a      	ldr	r3, [pc, #616]	; (8006410 <HAL_RCC_OscConfig+0x334>)
 80061a6:	499b      	ldr	r1, [pc, #620]	; (8006414 <HAL_RCC_OscConfig+0x338>)
 80061a8:	400a      	ands	r2, r1
 80061aa:	601a      	str	r2, [r3, #0]
 80061ac:	4b98      	ldr	r3, [pc, #608]	; (8006410 <HAL_RCC_OscConfig+0x334>)
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	4b97      	ldr	r3, [pc, #604]	; (8006410 <HAL_RCC_OscConfig+0x334>)
 80061b2:	4999      	ldr	r1, [pc, #612]	; (8006418 <HAL_RCC_OscConfig+0x33c>)
 80061b4:	400a      	ands	r2, r1
 80061b6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d014      	beq.n	80061ea <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061c0:	f7fe fb58 	bl	8004874 <HAL_GetTick>
 80061c4:	0003      	movs	r3, r0
 80061c6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061c8:	e008      	b.n	80061dc <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80061ca:	f7fe fb53 	bl	8004874 <HAL_GetTick>
 80061ce:	0002      	movs	r2, r0
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	1ad3      	subs	r3, r2, r3
 80061d4:	2b64      	cmp	r3, #100	; 0x64
 80061d6:	d901      	bls.n	80061dc <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80061d8:	2303      	movs	r3, #3
 80061da:	e28e      	b.n	80066fa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061dc:	4b8c      	ldr	r3, [pc, #560]	; (8006410 <HAL_RCC_OscConfig+0x334>)
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	2380      	movs	r3, #128	; 0x80
 80061e2:	029b      	lsls	r3, r3, #10
 80061e4:	4013      	ands	r3, r2
 80061e6:	d0f0      	beq.n	80061ca <HAL_RCC_OscConfig+0xee>
 80061e8:	e015      	b.n	8006216 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061ea:	f7fe fb43 	bl	8004874 <HAL_GetTick>
 80061ee:	0003      	movs	r3, r0
 80061f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061f2:	e008      	b.n	8006206 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80061f4:	f7fe fb3e 	bl	8004874 <HAL_GetTick>
 80061f8:	0002      	movs	r2, r0
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	2b64      	cmp	r3, #100	; 0x64
 8006200:	d901      	bls.n	8006206 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e279      	b.n	80066fa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006206:	4b82      	ldr	r3, [pc, #520]	; (8006410 <HAL_RCC_OscConfig+0x334>)
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	2380      	movs	r3, #128	; 0x80
 800620c:	029b      	lsls	r3, r3, #10
 800620e:	4013      	ands	r3, r2
 8006210:	d1f0      	bne.n	80061f4 <HAL_RCC_OscConfig+0x118>
 8006212:	e000      	b.n	8006216 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006214:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2202      	movs	r2, #2
 800621c:	4013      	ands	r3, r2
 800621e:	d100      	bne.n	8006222 <HAL_RCC_OscConfig+0x146>
 8006220:	e06c      	b.n	80062fc <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006222:	4b7b      	ldr	r3, [pc, #492]	; (8006410 <HAL_RCC_OscConfig+0x334>)
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	220c      	movs	r2, #12
 8006228:	4013      	ands	r3, r2
 800622a:	d00e      	beq.n	800624a <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800622c:	4b78      	ldr	r3, [pc, #480]	; (8006410 <HAL_RCC_OscConfig+0x334>)
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	220c      	movs	r2, #12
 8006232:	4013      	ands	r3, r2
 8006234:	2b08      	cmp	r3, #8
 8006236:	d11f      	bne.n	8006278 <HAL_RCC_OscConfig+0x19c>
 8006238:	4b75      	ldr	r3, [pc, #468]	; (8006410 <HAL_RCC_OscConfig+0x334>)
 800623a:	685a      	ldr	r2, [r3, #4]
 800623c:	23c0      	movs	r3, #192	; 0xc0
 800623e:	025b      	lsls	r3, r3, #9
 8006240:	401a      	ands	r2, r3
 8006242:	2380      	movs	r3, #128	; 0x80
 8006244:	021b      	lsls	r3, r3, #8
 8006246:	429a      	cmp	r2, r3
 8006248:	d116      	bne.n	8006278 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800624a:	4b71      	ldr	r3, [pc, #452]	; (8006410 <HAL_RCC_OscConfig+0x334>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2202      	movs	r2, #2
 8006250:	4013      	ands	r3, r2
 8006252:	d005      	beq.n	8006260 <HAL_RCC_OscConfig+0x184>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	2b01      	cmp	r3, #1
 800625a:	d001      	beq.n	8006260 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e24c      	b.n	80066fa <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006260:	4b6b      	ldr	r3, [pc, #428]	; (8006410 <HAL_RCC_OscConfig+0x334>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	22f8      	movs	r2, #248	; 0xf8
 8006266:	4393      	bics	r3, r2
 8006268:	0019      	movs	r1, r3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	00da      	lsls	r2, r3, #3
 8006270:	4b67      	ldr	r3, [pc, #412]	; (8006410 <HAL_RCC_OscConfig+0x334>)
 8006272:	430a      	orrs	r2, r1
 8006274:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006276:	e041      	b.n	80062fc <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d024      	beq.n	80062ca <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006280:	4b63      	ldr	r3, [pc, #396]	; (8006410 <HAL_RCC_OscConfig+0x334>)
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	4b62      	ldr	r3, [pc, #392]	; (8006410 <HAL_RCC_OscConfig+0x334>)
 8006286:	2101      	movs	r1, #1
 8006288:	430a      	orrs	r2, r1
 800628a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800628c:	f7fe faf2 	bl	8004874 <HAL_GetTick>
 8006290:	0003      	movs	r3, r0
 8006292:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006294:	e008      	b.n	80062a8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006296:	f7fe faed 	bl	8004874 <HAL_GetTick>
 800629a:	0002      	movs	r2, r0
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	1ad3      	subs	r3, r2, r3
 80062a0:	2b02      	cmp	r3, #2
 80062a2:	d901      	bls.n	80062a8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80062a4:	2303      	movs	r3, #3
 80062a6:	e228      	b.n	80066fa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062a8:	4b59      	ldr	r3, [pc, #356]	; (8006410 <HAL_RCC_OscConfig+0x334>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2202      	movs	r2, #2
 80062ae:	4013      	ands	r3, r2
 80062b0:	d0f1      	beq.n	8006296 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062b2:	4b57      	ldr	r3, [pc, #348]	; (8006410 <HAL_RCC_OscConfig+0x334>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	22f8      	movs	r2, #248	; 0xf8
 80062b8:	4393      	bics	r3, r2
 80062ba:	0019      	movs	r1, r3
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	00da      	lsls	r2, r3, #3
 80062c2:	4b53      	ldr	r3, [pc, #332]	; (8006410 <HAL_RCC_OscConfig+0x334>)
 80062c4:	430a      	orrs	r2, r1
 80062c6:	601a      	str	r2, [r3, #0]
 80062c8:	e018      	b.n	80062fc <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80062ca:	4b51      	ldr	r3, [pc, #324]	; (8006410 <HAL_RCC_OscConfig+0x334>)
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	4b50      	ldr	r3, [pc, #320]	; (8006410 <HAL_RCC_OscConfig+0x334>)
 80062d0:	2101      	movs	r1, #1
 80062d2:	438a      	bics	r2, r1
 80062d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062d6:	f7fe facd 	bl	8004874 <HAL_GetTick>
 80062da:	0003      	movs	r3, r0
 80062dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062de:	e008      	b.n	80062f2 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062e0:	f7fe fac8 	bl	8004874 <HAL_GetTick>
 80062e4:	0002      	movs	r2, r0
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	2b02      	cmp	r3, #2
 80062ec:	d901      	bls.n	80062f2 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 80062ee:	2303      	movs	r3, #3
 80062f0:	e203      	b.n	80066fa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062f2:	4b47      	ldr	r3, [pc, #284]	; (8006410 <HAL_RCC_OscConfig+0x334>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2202      	movs	r2, #2
 80062f8:	4013      	ands	r3, r2
 80062fa:	d1f1      	bne.n	80062e0 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2208      	movs	r2, #8
 8006302:	4013      	ands	r3, r2
 8006304:	d036      	beq.n	8006374 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	69db      	ldr	r3, [r3, #28]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d019      	beq.n	8006342 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800630e:	4b40      	ldr	r3, [pc, #256]	; (8006410 <HAL_RCC_OscConfig+0x334>)
 8006310:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006312:	4b3f      	ldr	r3, [pc, #252]	; (8006410 <HAL_RCC_OscConfig+0x334>)
 8006314:	2101      	movs	r1, #1
 8006316:	430a      	orrs	r2, r1
 8006318:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800631a:	f7fe faab 	bl	8004874 <HAL_GetTick>
 800631e:	0003      	movs	r3, r0
 8006320:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006322:	e008      	b.n	8006336 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006324:	f7fe faa6 	bl	8004874 <HAL_GetTick>
 8006328:	0002      	movs	r2, r0
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	2b02      	cmp	r3, #2
 8006330:	d901      	bls.n	8006336 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e1e1      	b.n	80066fa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006336:	4b36      	ldr	r3, [pc, #216]	; (8006410 <HAL_RCC_OscConfig+0x334>)
 8006338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633a:	2202      	movs	r2, #2
 800633c:	4013      	ands	r3, r2
 800633e:	d0f1      	beq.n	8006324 <HAL_RCC_OscConfig+0x248>
 8006340:	e018      	b.n	8006374 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006342:	4b33      	ldr	r3, [pc, #204]	; (8006410 <HAL_RCC_OscConfig+0x334>)
 8006344:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006346:	4b32      	ldr	r3, [pc, #200]	; (8006410 <HAL_RCC_OscConfig+0x334>)
 8006348:	2101      	movs	r1, #1
 800634a:	438a      	bics	r2, r1
 800634c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800634e:	f7fe fa91 	bl	8004874 <HAL_GetTick>
 8006352:	0003      	movs	r3, r0
 8006354:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006356:	e008      	b.n	800636a <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006358:	f7fe fa8c 	bl	8004874 <HAL_GetTick>
 800635c:	0002      	movs	r2, r0
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	2b02      	cmp	r3, #2
 8006364:	d901      	bls.n	800636a <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	e1c7      	b.n	80066fa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800636a:	4b29      	ldr	r3, [pc, #164]	; (8006410 <HAL_RCC_OscConfig+0x334>)
 800636c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636e:	2202      	movs	r2, #2
 8006370:	4013      	ands	r3, r2
 8006372:	d1f1      	bne.n	8006358 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	2204      	movs	r2, #4
 800637a:	4013      	ands	r3, r2
 800637c:	d100      	bne.n	8006380 <HAL_RCC_OscConfig+0x2a4>
 800637e:	e0b5      	b.n	80064ec <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006380:	201f      	movs	r0, #31
 8006382:	183b      	adds	r3, r7, r0
 8006384:	2200      	movs	r2, #0
 8006386:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006388:	4b21      	ldr	r3, [pc, #132]	; (8006410 <HAL_RCC_OscConfig+0x334>)
 800638a:	69da      	ldr	r2, [r3, #28]
 800638c:	2380      	movs	r3, #128	; 0x80
 800638e:	055b      	lsls	r3, r3, #21
 8006390:	4013      	ands	r3, r2
 8006392:	d110      	bne.n	80063b6 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006394:	4b1e      	ldr	r3, [pc, #120]	; (8006410 <HAL_RCC_OscConfig+0x334>)
 8006396:	69da      	ldr	r2, [r3, #28]
 8006398:	4b1d      	ldr	r3, [pc, #116]	; (8006410 <HAL_RCC_OscConfig+0x334>)
 800639a:	2180      	movs	r1, #128	; 0x80
 800639c:	0549      	lsls	r1, r1, #21
 800639e:	430a      	orrs	r2, r1
 80063a0:	61da      	str	r2, [r3, #28]
 80063a2:	4b1b      	ldr	r3, [pc, #108]	; (8006410 <HAL_RCC_OscConfig+0x334>)
 80063a4:	69da      	ldr	r2, [r3, #28]
 80063a6:	2380      	movs	r3, #128	; 0x80
 80063a8:	055b      	lsls	r3, r3, #21
 80063aa:	4013      	ands	r3, r2
 80063ac:	60fb      	str	r3, [r7, #12]
 80063ae:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80063b0:	183b      	adds	r3, r7, r0
 80063b2:	2201      	movs	r2, #1
 80063b4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063b6:	4b19      	ldr	r3, [pc, #100]	; (800641c <HAL_RCC_OscConfig+0x340>)
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	2380      	movs	r3, #128	; 0x80
 80063bc:	005b      	lsls	r3, r3, #1
 80063be:	4013      	ands	r3, r2
 80063c0:	d11a      	bne.n	80063f8 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80063c2:	4b16      	ldr	r3, [pc, #88]	; (800641c <HAL_RCC_OscConfig+0x340>)
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	4b15      	ldr	r3, [pc, #84]	; (800641c <HAL_RCC_OscConfig+0x340>)
 80063c8:	2180      	movs	r1, #128	; 0x80
 80063ca:	0049      	lsls	r1, r1, #1
 80063cc:	430a      	orrs	r2, r1
 80063ce:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80063d0:	f7fe fa50 	bl	8004874 <HAL_GetTick>
 80063d4:	0003      	movs	r3, r0
 80063d6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063d8:	e008      	b.n	80063ec <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063da:	f7fe fa4b 	bl	8004874 <HAL_GetTick>
 80063de:	0002      	movs	r2, r0
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	1ad3      	subs	r3, r2, r3
 80063e4:	2b64      	cmp	r3, #100	; 0x64
 80063e6:	d901      	bls.n	80063ec <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 80063e8:	2303      	movs	r3, #3
 80063ea:	e186      	b.n	80066fa <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063ec:	4b0b      	ldr	r3, [pc, #44]	; (800641c <HAL_RCC_OscConfig+0x340>)
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	2380      	movs	r3, #128	; 0x80
 80063f2:	005b      	lsls	r3, r3, #1
 80063f4:	4013      	ands	r3, r2
 80063f6:	d0f0      	beq.n	80063da <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d10f      	bne.n	8006420 <HAL_RCC_OscConfig+0x344>
 8006400:	4b03      	ldr	r3, [pc, #12]	; (8006410 <HAL_RCC_OscConfig+0x334>)
 8006402:	6a1a      	ldr	r2, [r3, #32]
 8006404:	4b02      	ldr	r3, [pc, #8]	; (8006410 <HAL_RCC_OscConfig+0x334>)
 8006406:	2101      	movs	r1, #1
 8006408:	430a      	orrs	r2, r1
 800640a:	621a      	str	r2, [r3, #32]
 800640c:	e036      	b.n	800647c <HAL_RCC_OscConfig+0x3a0>
 800640e:	46c0      	nop			; (mov r8, r8)
 8006410:	40021000 	.word	0x40021000
 8006414:	fffeffff 	.word	0xfffeffff
 8006418:	fffbffff 	.word	0xfffbffff
 800641c:	40007000 	.word	0x40007000
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d10c      	bne.n	8006442 <HAL_RCC_OscConfig+0x366>
 8006428:	4bb6      	ldr	r3, [pc, #728]	; (8006704 <HAL_RCC_OscConfig+0x628>)
 800642a:	6a1a      	ldr	r2, [r3, #32]
 800642c:	4bb5      	ldr	r3, [pc, #724]	; (8006704 <HAL_RCC_OscConfig+0x628>)
 800642e:	2101      	movs	r1, #1
 8006430:	438a      	bics	r2, r1
 8006432:	621a      	str	r2, [r3, #32]
 8006434:	4bb3      	ldr	r3, [pc, #716]	; (8006704 <HAL_RCC_OscConfig+0x628>)
 8006436:	6a1a      	ldr	r2, [r3, #32]
 8006438:	4bb2      	ldr	r3, [pc, #712]	; (8006704 <HAL_RCC_OscConfig+0x628>)
 800643a:	2104      	movs	r1, #4
 800643c:	438a      	bics	r2, r1
 800643e:	621a      	str	r2, [r3, #32]
 8006440:	e01c      	b.n	800647c <HAL_RCC_OscConfig+0x3a0>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	2b05      	cmp	r3, #5
 8006448:	d10c      	bne.n	8006464 <HAL_RCC_OscConfig+0x388>
 800644a:	4bae      	ldr	r3, [pc, #696]	; (8006704 <HAL_RCC_OscConfig+0x628>)
 800644c:	6a1a      	ldr	r2, [r3, #32]
 800644e:	4bad      	ldr	r3, [pc, #692]	; (8006704 <HAL_RCC_OscConfig+0x628>)
 8006450:	2104      	movs	r1, #4
 8006452:	430a      	orrs	r2, r1
 8006454:	621a      	str	r2, [r3, #32]
 8006456:	4bab      	ldr	r3, [pc, #684]	; (8006704 <HAL_RCC_OscConfig+0x628>)
 8006458:	6a1a      	ldr	r2, [r3, #32]
 800645a:	4baa      	ldr	r3, [pc, #680]	; (8006704 <HAL_RCC_OscConfig+0x628>)
 800645c:	2101      	movs	r1, #1
 800645e:	430a      	orrs	r2, r1
 8006460:	621a      	str	r2, [r3, #32]
 8006462:	e00b      	b.n	800647c <HAL_RCC_OscConfig+0x3a0>
 8006464:	4ba7      	ldr	r3, [pc, #668]	; (8006704 <HAL_RCC_OscConfig+0x628>)
 8006466:	6a1a      	ldr	r2, [r3, #32]
 8006468:	4ba6      	ldr	r3, [pc, #664]	; (8006704 <HAL_RCC_OscConfig+0x628>)
 800646a:	2101      	movs	r1, #1
 800646c:	438a      	bics	r2, r1
 800646e:	621a      	str	r2, [r3, #32]
 8006470:	4ba4      	ldr	r3, [pc, #656]	; (8006704 <HAL_RCC_OscConfig+0x628>)
 8006472:	6a1a      	ldr	r2, [r3, #32]
 8006474:	4ba3      	ldr	r3, [pc, #652]	; (8006704 <HAL_RCC_OscConfig+0x628>)
 8006476:	2104      	movs	r1, #4
 8006478:	438a      	bics	r2, r1
 800647a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d014      	beq.n	80064ae <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006484:	f7fe f9f6 	bl	8004874 <HAL_GetTick>
 8006488:	0003      	movs	r3, r0
 800648a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800648c:	e009      	b.n	80064a2 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800648e:	f7fe f9f1 	bl	8004874 <HAL_GetTick>
 8006492:	0002      	movs	r2, r0
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	1ad3      	subs	r3, r2, r3
 8006498:	4a9b      	ldr	r2, [pc, #620]	; (8006708 <HAL_RCC_OscConfig+0x62c>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d901      	bls.n	80064a2 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 800649e:	2303      	movs	r3, #3
 80064a0:	e12b      	b.n	80066fa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064a2:	4b98      	ldr	r3, [pc, #608]	; (8006704 <HAL_RCC_OscConfig+0x628>)
 80064a4:	6a1b      	ldr	r3, [r3, #32]
 80064a6:	2202      	movs	r2, #2
 80064a8:	4013      	ands	r3, r2
 80064aa:	d0f0      	beq.n	800648e <HAL_RCC_OscConfig+0x3b2>
 80064ac:	e013      	b.n	80064d6 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064ae:	f7fe f9e1 	bl	8004874 <HAL_GetTick>
 80064b2:	0003      	movs	r3, r0
 80064b4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064b6:	e009      	b.n	80064cc <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064b8:	f7fe f9dc 	bl	8004874 <HAL_GetTick>
 80064bc:	0002      	movs	r2, r0
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	4a91      	ldr	r2, [pc, #580]	; (8006708 <HAL_RCC_OscConfig+0x62c>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d901      	bls.n	80064cc <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e116      	b.n	80066fa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064cc:	4b8d      	ldr	r3, [pc, #564]	; (8006704 <HAL_RCC_OscConfig+0x628>)
 80064ce:	6a1b      	ldr	r3, [r3, #32]
 80064d0:	2202      	movs	r2, #2
 80064d2:	4013      	ands	r3, r2
 80064d4:	d1f0      	bne.n	80064b8 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80064d6:	231f      	movs	r3, #31
 80064d8:	18fb      	adds	r3, r7, r3
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d105      	bne.n	80064ec <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064e0:	4b88      	ldr	r3, [pc, #544]	; (8006704 <HAL_RCC_OscConfig+0x628>)
 80064e2:	69da      	ldr	r2, [r3, #28]
 80064e4:	4b87      	ldr	r3, [pc, #540]	; (8006704 <HAL_RCC_OscConfig+0x628>)
 80064e6:	4989      	ldr	r1, [pc, #548]	; (800670c <HAL_RCC_OscConfig+0x630>)
 80064e8:	400a      	ands	r2, r1
 80064ea:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2210      	movs	r2, #16
 80064f2:	4013      	ands	r3, r2
 80064f4:	d063      	beq.n	80065be <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	695b      	ldr	r3, [r3, #20]
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d12a      	bne.n	8006554 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80064fe:	4b81      	ldr	r3, [pc, #516]	; (8006704 <HAL_RCC_OscConfig+0x628>)
 8006500:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006502:	4b80      	ldr	r3, [pc, #512]	; (8006704 <HAL_RCC_OscConfig+0x628>)
 8006504:	2104      	movs	r1, #4
 8006506:	430a      	orrs	r2, r1
 8006508:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800650a:	4b7e      	ldr	r3, [pc, #504]	; (8006704 <HAL_RCC_OscConfig+0x628>)
 800650c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800650e:	4b7d      	ldr	r3, [pc, #500]	; (8006704 <HAL_RCC_OscConfig+0x628>)
 8006510:	2101      	movs	r1, #1
 8006512:	430a      	orrs	r2, r1
 8006514:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006516:	f7fe f9ad 	bl	8004874 <HAL_GetTick>
 800651a:	0003      	movs	r3, r0
 800651c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800651e:	e008      	b.n	8006532 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006520:	f7fe f9a8 	bl	8004874 <HAL_GetTick>
 8006524:	0002      	movs	r2, r0
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	1ad3      	subs	r3, r2, r3
 800652a:	2b02      	cmp	r3, #2
 800652c:	d901      	bls.n	8006532 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 800652e:	2303      	movs	r3, #3
 8006530:	e0e3      	b.n	80066fa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8006532:	4b74      	ldr	r3, [pc, #464]	; (8006704 <HAL_RCC_OscConfig+0x628>)
 8006534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006536:	2202      	movs	r2, #2
 8006538:	4013      	ands	r3, r2
 800653a:	d0f1      	beq.n	8006520 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800653c:	4b71      	ldr	r3, [pc, #452]	; (8006704 <HAL_RCC_OscConfig+0x628>)
 800653e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006540:	22f8      	movs	r2, #248	; 0xf8
 8006542:	4393      	bics	r3, r2
 8006544:	0019      	movs	r1, r3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	699b      	ldr	r3, [r3, #24]
 800654a:	00da      	lsls	r2, r3, #3
 800654c:	4b6d      	ldr	r3, [pc, #436]	; (8006704 <HAL_RCC_OscConfig+0x628>)
 800654e:	430a      	orrs	r2, r1
 8006550:	635a      	str	r2, [r3, #52]	; 0x34
 8006552:	e034      	b.n	80065be <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	695b      	ldr	r3, [r3, #20]
 8006558:	3305      	adds	r3, #5
 800655a:	d111      	bne.n	8006580 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800655c:	4b69      	ldr	r3, [pc, #420]	; (8006704 <HAL_RCC_OscConfig+0x628>)
 800655e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006560:	4b68      	ldr	r3, [pc, #416]	; (8006704 <HAL_RCC_OscConfig+0x628>)
 8006562:	2104      	movs	r1, #4
 8006564:	438a      	bics	r2, r1
 8006566:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006568:	4b66      	ldr	r3, [pc, #408]	; (8006704 <HAL_RCC_OscConfig+0x628>)
 800656a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800656c:	22f8      	movs	r2, #248	; 0xf8
 800656e:	4393      	bics	r3, r2
 8006570:	0019      	movs	r1, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	699b      	ldr	r3, [r3, #24]
 8006576:	00da      	lsls	r2, r3, #3
 8006578:	4b62      	ldr	r3, [pc, #392]	; (8006704 <HAL_RCC_OscConfig+0x628>)
 800657a:	430a      	orrs	r2, r1
 800657c:	635a      	str	r2, [r3, #52]	; 0x34
 800657e:	e01e      	b.n	80065be <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006580:	4b60      	ldr	r3, [pc, #384]	; (8006704 <HAL_RCC_OscConfig+0x628>)
 8006582:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006584:	4b5f      	ldr	r3, [pc, #380]	; (8006704 <HAL_RCC_OscConfig+0x628>)
 8006586:	2104      	movs	r1, #4
 8006588:	430a      	orrs	r2, r1
 800658a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800658c:	4b5d      	ldr	r3, [pc, #372]	; (8006704 <HAL_RCC_OscConfig+0x628>)
 800658e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006590:	4b5c      	ldr	r3, [pc, #368]	; (8006704 <HAL_RCC_OscConfig+0x628>)
 8006592:	2101      	movs	r1, #1
 8006594:	438a      	bics	r2, r1
 8006596:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006598:	f7fe f96c 	bl	8004874 <HAL_GetTick>
 800659c:	0003      	movs	r3, r0
 800659e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80065a0:	e008      	b.n	80065b4 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80065a2:	f7fe f967 	bl	8004874 <HAL_GetTick>
 80065a6:	0002      	movs	r2, r0
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	1ad3      	subs	r3, r2, r3
 80065ac:	2b02      	cmp	r3, #2
 80065ae:	d901      	bls.n	80065b4 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 80065b0:	2303      	movs	r3, #3
 80065b2:	e0a2      	b.n	80066fa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80065b4:	4b53      	ldr	r3, [pc, #332]	; (8006704 <HAL_RCC_OscConfig+0x628>)
 80065b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065b8:	2202      	movs	r2, #2
 80065ba:	4013      	ands	r3, r2
 80065bc:	d1f1      	bne.n	80065a2 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a1b      	ldr	r3, [r3, #32]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d100      	bne.n	80065c8 <HAL_RCC_OscConfig+0x4ec>
 80065c6:	e097      	b.n	80066f8 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80065c8:	4b4e      	ldr	r3, [pc, #312]	; (8006704 <HAL_RCC_OscConfig+0x628>)
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	220c      	movs	r2, #12
 80065ce:	4013      	ands	r3, r2
 80065d0:	2b08      	cmp	r3, #8
 80065d2:	d100      	bne.n	80065d6 <HAL_RCC_OscConfig+0x4fa>
 80065d4:	e06b      	b.n	80066ae <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6a1b      	ldr	r3, [r3, #32]
 80065da:	2b02      	cmp	r3, #2
 80065dc:	d14c      	bne.n	8006678 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065de:	4b49      	ldr	r3, [pc, #292]	; (8006704 <HAL_RCC_OscConfig+0x628>)
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	4b48      	ldr	r3, [pc, #288]	; (8006704 <HAL_RCC_OscConfig+0x628>)
 80065e4:	494a      	ldr	r1, [pc, #296]	; (8006710 <HAL_RCC_OscConfig+0x634>)
 80065e6:	400a      	ands	r2, r1
 80065e8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065ea:	f7fe f943 	bl	8004874 <HAL_GetTick>
 80065ee:	0003      	movs	r3, r0
 80065f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065f2:	e008      	b.n	8006606 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065f4:	f7fe f93e 	bl	8004874 <HAL_GetTick>
 80065f8:	0002      	movs	r2, r0
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	2b02      	cmp	r3, #2
 8006600:	d901      	bls.n	8006606 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	e079      	b.n	80066fa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006606:	4b3f      	ldr	r3, [pc, #252]	; (8006704 <HAL_RCC_OscConfig+0x628>)
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	2380      	movs	r3, #128	; 0x80
 800660c:	049b      	lsls	r3, r3, #18
 800660e:	4013      	ands	r3, r2
 8006610:	d1f0      	bne.n	80065f4 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006612:	4b3c      	ldr	r3, [pc, #240]	; (8006704 <HAL_RCC_OscConfig+0x628>)
 8006614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006616:	220f      	movs	r2, #15
 8006618:	4393      	bics	r3, r2
 800661a:	0019      	movs	r1, r3
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006620:	4b38      	ldr	r3, [pc, #224]	; (8006704 <HAL_RCC_OscConfig+0x628>)
 8006622:	430a      	orrs	r2, r1
 8006624:	62da      	str	r2, [r3, #44]	; 0x2c
 8006626:	4b37      	ldr	r3, [pc, #220]	; (8006704 <HAL_RCC_OscConfig+0x628>)
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	4a3a      	ldr	r2, [pc, #232]	; (8006714 <HAL_RCC_OscConfig+0x638>)
 800662c:	4013      	ands	r3, r2
 800662e:	0019      	movs	r1, r3
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006638:	431a      	orrs	r2, r3
 800663a:	4b32      	ldr	r3, [pc, #200]	; (8006704 <HAL_RCC_OscConfig+0x628>)
 800663c:	430a      	orrs	r2, r1
 800663e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006640:	4b30      	ldr	r3, [pc, #192]	; (8006704 <HAL_RCC_OscConfig+0x628>)
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	4b2f      	ldr	r3, [pc, #188]	; (8006704 <HAL_RCC_OscConfig+0x628>)
 8006646:	2180      	movs	r1, #128	; 0x80
 8006648:	0449      	lsls	r1, r1, #17
 800664a:	430a      	orrs	r2, r1
 800664c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800664e:	f7fe f911 	bl	8004874 <HAL_GetTick>
 8006652:	0003      	movs	r3, r0
 8006654:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006656:	e008      	b.n	800666a <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006658:	f7fe f90c 	bl	8004874 <HAL_GetTick>
 800665c:	0002      	movs	r2, r0
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	2b02      	cmp	r3, #2
 8006664:	d901      	bls.n	800666a <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	e047      	b.n	80066fa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800666a:	4b26      	ldr	r3, [pc, #152]	; (8006704 <HAL_RCC_OscConfig+0x628>)
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	2380      	movs	r3, #128	; 0x80
 8006670:	049b      	lsls	r3, r3, #18
 8006672:	4013      	ands	r3, r2
 8006674:	d0f0      	beq.n	8006658 <HAL_RCC_OscConfig+0x57c>
 8006676:	e03f      	b.n	80066f8 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006678:	4b22      	ldr	r3, [pc, #136]	; (8006704 <HAL_RCC_OscConfig+0x628>)
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	4b21      	ldr	r3, [pc, #132]	; (8006704 <HAL_RCC_OscConfig+0x628>)
 800667e:	4924      	ldr	r1, [pc, #144]	; (8006710 <HAL_RCC_OscConfig+0x634>)
 8006680:	400a      	ands	r2, r1
 8006682:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006684:	f7fe f8f6 	bl	8004874 <HAL_GetTick>
 8006688:	0003      	movs	r3, r0
 800668a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800668c:	e008      	b.n	80066a0 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800668e:	f7fe f8f1 	bl	8004874 <HAL_GetTick>
 8006692:	0002      	movs	r2, r0
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	1ad3      	subs	r3, r2, r3
 8006698:	2b02      	cmp	r3, #2
 800669a:	d901      	bls.n	80066a0 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 800669c:	2303      	movs	r3, #3
 800669e:	e02c      	b.n	80066fa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80066a0:	4b18      	ldr	r3, [pc, #96]	; (8006704 <HAL_RCC_OscConfig+0x628>)
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	2380      	movs	r3, #128	; 0x80
 80066a6:	049b      	lsls	r3, r3, #18
 80066a8:	4013      	ands	r3, r2
 80066aa:	d1f0      	bne.n	800668e <HAL_RCC_OscConfig+0x5b2>
 80066ac:	e024      	b.n	80066f8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a1b      	ldr	r3, [r3, #32]
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d101      	bne.n	80066ba <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e01f      	b.n	80066fa <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80066ba:	4b12      	ldr	r3, [pc, #72]	; (8006704 <HAL_RCC_OscConfig+0x628>)
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80066c0:	4b10      	ldr	r3, [pc, #64]	; (8006704 <HAL_RCC_OscConfig+0x628>)
 80066c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80066c6:	697a      	ldr	r2, [r7, #20]
 80066c8:	23c0      	movs	r3, #192	; 0xc0
 80066ca:	025b      	lsls	r3, r3, #9
 80066cc:	401a      	ands	r2, r3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d10e      	bne.n	80066f4 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	220f      	movs	r2, #15
 80066da:	401a      	ands	r2, r3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d107      	bne.n	80066f4 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80066e4:	697a      	ldr	r2, [r7, #20]
 80066e6:	23f0      	movs	r3, #240	; 0xf0
 80066e8:	039b      	lsls	r3, r3, #14
 80066ea:	401a      	ands	r2, r3
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d001      	beq.n	80066f8 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	e000      	b.n	80066fa <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	0018      	movs	r0, r3
 80066fc:	46bd      	mov	sp, r7
 80066fe:	b008      	add	sp, #32
 8006700:	bd80      	pop	{r7, pc}
 8006702:	46c0      	nop			; (mov r8, r8)
 8006704:	40021000 	.word	0x40021000
 8006708:	00001388 	.word	0x00001388
 800670c:	efffffff 	.word	0xefffffff
 8006710:	feffffff 	.word	0xfeffffff
 8006714:	ffc27fff 	.word	0xffc27fff

08006718 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d101      	bne.n	800672c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e0b3      	b.n	8006894 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800672c:	4b5b      	ldr	r3, [pc, #364]	; (800689c <HAL_RCC_ClockConfig+0x184>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2201      	movs	r2, #1
 8006732:	4013      	ands	r3, r2
 8006734:	683a      	ldr	r2, [r7, #0]
 8006736:	429a      	cmp	r2, r3
 8006738:	d911      	bls.n	800675e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800673a:	4b58      	ldr	r3, [pc, #352]	; (800689c <HAL_RCC_ClockConfig+0x184>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2201      	movs	r2, #1
 8006740:	4393      	bics	r3, r2
 8006742:	0019      	movs	r1, r3
 8006744:	4b55      	ldr	r3, [pc, #340]	; (800689c <HAL_RCC_ClockConfig+0x184>)
 8006746:	683a      	ldr	r2, [r7, #0]
 8006748:	430a      	orrs	r2, r1
 800674a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800674c:	4b53      	ldr	r3, [pc, #332]	; (800689c <HAL_RCC_ClockConfig+0x184>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2201      	movs	r2, #1
 8006752:	4013      	ands	r3, r2
 8006754:	683a      	ldr	r2, [r7, #0]
 8006756:	429a      	cmp	r2, r3
 8006758:	d001      	beq.n	800675e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e09a      	b.n	8006894 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2202      	movs	r2, #2
 8006764:	4013      	ands	r3, r2
 8006766:	d015      	beq.n	8006794 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	2204      	movs	r2, #4
 800676e:	4013      	ands	r3, r2
 8006770:	d006      	beq.n	8006780 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006772:	4b4b      	ldr	r3, [pc, #300]	; (80068a0 <HAL_RCC_ClockConfig+0x188>)
 8006774:	685a      	ldr	r2, [r3, #4]
 8006776:	4b4a      	ldr	r3, [pc, #296]	; (80068a0 <HAL_RCC_ClockConfig+0x188>)
 8006778:	21e0      	movs	r1, #224	; 0xe0
 800677a:	00c9      	lsls	r1, r1, #3
 800677c:	430a      	orrs	r2, r1
 800677e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006780:	4b47      	ldr	r3, [pc, #284]	; (80068a0 <HAL_RCC_ClockConfig+0x188>)
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	22f0      	movs	r2, #240	; 0xf0
 8006786:	4393      	bics	r3, r2
 8006788:	0019      	movs	r1, r3
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	689a      	ldr	r2, [r3, #8]
 800678e:	4b44      	ldr	r3, [pc, #272]	; (80068a0 <HAL_RCC_ClockConfig+0x188>)
 8006790:	430a      	orrs	r2, r1
 8006792:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2201      	movs	r2, #1
 800679a:	4013      	ands	r3, r2
 800679c:	d040      	beq.n	8006820 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d107      	bne.n	80067b6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067a6:	4b3e      	ldr	r3, [pc, #248]	; (80068a0 <HAL_RCC_ClockConfig+0x188>)
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	2380      	movs	r3, #128	; 0x80
 80067ac:	029b      	lsls	r3, r3, #10
 80067ae:	4013      	ands	r3, r2
 80067b0:	d114      	bne.n	80067dc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e06e      	b.n	8006894 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	2b02      	cmp	r3, #2
 80067bc:	d107      	bne.n	80067ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067be:	4b38      	ldr	r3, [pc, #224]	; (80068a0 <HAL_RCC_ClockConfig+0x188>)
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	2380      	movs	r3, #128	; 0x80
 80067c4:	049b      	lsls	r3, r3, #18
 80067c6:	4013      	ands	r3, r2
 80067c8:	d108      	bne.n	80067dc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e062      	b.n	8006894 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067ce:	4b34      	ldr	r3, [pc, #208]	; (80068a0 <HAL_RCC_ClockConfig+0x188>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	2202      	movs	r2, #2
 80067d4:	4013      	ands	r3, r2
 80067d6:	d101      	bne.n	80067dc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	e05b      	b.n	8006894 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067dc:	4b30      	ldr	r3, [pc, #192]	; (80068a0 <HAL_RCC_ClockConfig+0x188>)
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	2203      	movs	r2, #3
 80067e2:	4393      	bics	r3, r2
 80067e4:	0019      	movs	r1, r3
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	685a      	ldr	r2, [r3, #4]
 80067ea:	4b2d      	ldr	r3, [pc, #180]	; (80068a0 <HAL_RCC_ClockConfig+0x188>)
 80067ec:	430a      	orrs	r2, r1
 80067ee:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067f0:	f7fe f840 	bl	8004874 <HAL_GetTick>
 80067f4:	0003      	movs	r3, r0
 80067f6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067f8:	e009      	b.n	800680e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067fa:	f7fe f83b 	bl	8004874 <HAL_GetTick>
 80067fe:	0002      	movs	r2, r0
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	4a27      	ldr	r2, [pc, #156]	; (80068a4 <HAL_RCC_ClockConfig+0x18c>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d901      	bls.n	800680e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800680a:	2303      	movs	r3, #3
 800680c:	e042      	b.n	8006894 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800680e:	4b24      	ldr	r3, [pc, #144]	; (80068a0 <HAL_RCC_ClockConfig+0x188>)
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	220c      	movs	r2, #12
 8006814:	401a      	ands	r2, r3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	429a      	cmp	r2, r3
 800681e:	d1ec      	bne.n	80067fa <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006820:	4b1e      	ldr	r3, [pc, #120]	; (800689c <HAL_RCC_ClockConfig+0x184>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2201      	movs	r2, #1
 8006826:	4013      	ands	r3, r2
 8006828:	683a      	ldr	r2, [r7, #0]
 800682a:	429a      	cmp	r2, r3
 800682c:	d211      	bcs.n	8006852 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800682e:	4b1b      	ldr	r3, [pc, #108]	; (800689c <HAL_RCC_ClockConfig+0x184>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2201      	movs	r2, #1
 8006834:	4393      	bics	r3, r2
 8006836:	0019      	movs	r1, r3
 8006838:	4b18      	ldr	r3, [pc, #96]	; (800689c <HAL_RCC_ClockConfig+0x184>)
 800683a:	683a      	ldr	r2, [r7, #0]
 800683c:	430a      	orrs	r2, r1
 800683e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006840:	4b16      	ldr	r3, [pc, #88]	; (800689c <HAL_RCC_ClockConfig+0x184>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2201      	movs	r2, #1
 8006846:	4013      	ands	r3, r2
 8006848:	683a      	ldr	r2, [r7, #0]
 800684a:	429a      	cmp	r2, r3
 800684c:	d001      	beq.n	8006852 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e020      	b.n	8006894 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2204      	movs	r2, #4
 8006858:	4013      	ands	r3, r2
 800685a:	d009      	beq.n	8006870 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800685c:	4b10      	ldr	r3, [pc, #64]	; (80068a0 <HAL_RCC_ClockConfig+0x188>)
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	4a11      	ldr	r2, [pc, #68]	; (80068a8 <HAL_RCC_ClockConfig+0x190>)
 8006862:	4013      	ands	r3, r2
 8006864:	0019      	movs	r1, r3
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	68da      	ldr	r2, [r3, #12]
 800686a:	4b0d      	ldr	r3, [pc, #52]	; (80068a0 <HAL_RCC_ClockConfig+0x188>)
 800686c:	430a      	orrs	r2, r1
 800686e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006870:	f000 f820 	bl	80068b4 <HAL_RCC_GetSysClockFreq>
 8006874:	0001      	movs	r1, r0
 8006876:	4b0a      	ldr	r3, [pc, #40]	; (80068a0 <HAL_RCC_ClockConfig+0x188>)
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	091b      	lsrs	r3, r3, #4
 800687c:	220f      	movs	r2, #15
 800687e:	4013      	ands	r3, r2
 8006880:	4a0a      	ldr	r2, [pc, #40]	; (80068ac <HAL_RCC_ClockConfig+0x194>)
 8006882:	5cd3      	ldrb	r3, [r2, r3]
 8006884:	000a      	movs	r2, r1
 8006886:	40da      	lsrs	r2, r3
 8006888:	4b09      	ldr	r3, [pc, #36]	; (80068b0 <HAL_RCC_ClockConfig+0x198>)
 800688a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800688c:	2003      	movs	r0, #3
 800688e:	f7fd fe2d 	bl	80044ec <HAL_InitTick>
  
  return HAL_OK;
 8006892:	2300      	movs	r3, #0
}
 8006894:	0018      	movs	r0, r3
 8006896:	46bd      	mov	sp, r7
 8006898:	b004      	add	sp, #16
 800689a:	bd80      	pop	{r7, pc}
 800689c:	40022000 	.word	0x40022000
 80068a0:	40021000 	.word	0x40021000
 80068a4:	00001388 	.word	0x00001388
 80068a8:	fffff8ff 	.word	0xfffff8ff
 80068ac:	080135b8 	.word	0x080135b8
 80068b0:	20000064 	.word	0x20000064

080068b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068b4:	b590      	push	{r4, r7, lr}
 80068b6:	b08f      	sub	sp, #60	; 0x3c
 80068b8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80068ba:	2314      	movs	r3, #20
 80068bc:	18fb      	adds	r3, r7, r3
 80068be:	4a2c      	ldr	r2, [pc, #176]	; (8006970 <HAL_RCC_GetSysClockFreq+0xbc>)
 80068c0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80068c2:	c313      	stmia	r3!, {r0, r1, r4}
 80068c4:	6812      	ldr	r2, [r2, #0]
 80068c6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80068c8:	1d3b      	adds	r3, r7, #4
 80068ca:	4a2a      	ldr	r2, [pc, #168]	; (8006974 <HAL_RCC_GetSysClockFreq+0xc0>)
 80068cc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80068ce:	c313      	stmia	r3!, {r0, r1, r4}
 80068d0:	6812      	ldr	r2, [r2, #0]
 80068d2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80068d4:	2300      	movs	r3, #0
 80068d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068d8:	2300      	movs	r3, #0
 80068da:	62bb      	str	r3, [r7, #40]	; 0x28
 80068dc:	2300      	movs	r3, #0
 80068de:	637b      	str	r3, [r7, #52]	; 0x34
 80068e0:	2300      	movs	r3, #0
 80068e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80068e4:	2300      	movs	r3, #0
 80068e6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80068e8:	4b23      	ldr	r3, [pc, #140]	; (8006978 <HAL_RCC_GetSysClockFreq+0xc4>)
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80068ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f0:	220c      	movs	r2, #12
 80068f2:	4013      	ands	r3, r2
 80068f4:	2b04      	cmp	r3, #4
 80068f6:	d002      	beq.n	80068fe <HAL_RCC_GetSysClockFreq+0x4a>
 80068f8:	2b08      	cmp	r3, #8
 80068fa:	d003      	beq.n	8006904 <HAL_RCC_GetSysClockFreq+0x50>
 80068fc:	e02f      	b.n	800695e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80068fe:	4b1f      	ldr	r3, [pc, #124]	; (800697c <HAL_RCC_GetSysClockFreq+0xc8>)
 8006900:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006902:	e02f      	b.n	8006964 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8006904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006906:	0c9b      	lsrs	r3, r3, #18
 8006908:	220f      	movs	r2, #15
 800690a:	4013      	ands	r3, r2
 800690c:	2214      	movs	r2, #20
 800690e:	18ba      	adds	r2, r7, r2
 8006910:	5cd3      	ldrb	r3, [r2, r3]
 8006912:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8006914:	4b18      	ldr	r3, [pc, #96]	; (8006978 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006918:	220f      	movs	r2, #15
 800691a:	4013      	ands	r3, r2
 800691c:	1d3a      	adds	r2, r7, #4
 800691e:	5cd3      	ldrb	r3, [r2, r3]
 8006920:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006922:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006924:	23c0      	movs	r3, #192	; 0xc0
 8006926:	025b      	lsls	r3, r3, #9
 8006928:	401a      	ands	r2, r3
 800692a:	2380      	movs	r3, #128	; 0x80
 800692c:	025b      	lsls	r3, r3, #9
 800692e:	429a      	cmp	r2, r3
 8006930:	d109      	bne.n	8006946 <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006932:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006934:	4811      	ldr	r0, [pc, #68]	; (800697c <HAL_RCC_GetSysClockFreq+0xc8>)
 8006936:	f7f9 fc03 	bl	8000140 <__udivsi3>
 800693a:	0003      	movs	r3, r0
 800693c:	001a      	movs	r2, r3
 800693e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006940:	4353      	muls	r3, r2
 8006942:	637b      	str	r3, [r7, #52]	; 0x34
 8006944:	e008      	b.n	8006958 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006946:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006948:	480c      	ldr	r0, [pc, #48]	; (800697c <HAL_RCC_GetSysClockFreq+0xc8>)
 800694a:	f7f9 fbf9 	bl	8000140 <__udivsi3>
 800694e:	0003      	movs	r3, r0
 8006950:	001a      	movs	r2, r3
 8006952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006954:	4353      	muls	r3, r2
 8006956:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8006958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800695a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800695c:	e002      	b.n	8006964 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800695e:	4b07      	ldr	r3, [pc, #28]	; (800697c <HAL_RCC_GetSysClockFreq+0xc8>)
 8006960:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006962:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8006966:	0018      	movs	r0, r3
 8006968:	46bd      	mov	sp, r7
 800696a:	b00f      	add	sp, #60	; 0x3c
 800696c:	bd90      	pop	{r4, r7, pc}
 800696e:	46c0      	nop			; (mov r8, r8)
 8006970:	08012e8c 	.word	0x08012e8c
 8006974:	08012e9c 	.word	0x08012e9c
 8006978:	40021000 	.word	0x40021000
 800697c:	007a1200 	.word	0x007a1200

08006980 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006984:	4b02      	ldr	r3, [pc, #8]	; (8006990 <HAL_RCC_GetHCLKFreq+0x10>)
 8006986:	681b      	ldr	r3, [r3, #0]
}
 8006988:	0018      	movs	r0, r3
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	46c0      	nop			; (mov r8, r8)
 8006990:	20000064 	.word	0x20000064

08006994 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8006998:	f7ff fff2 	bl	8006980 <HAL_RCC_GetHCLKFreq>
 800699c:	0001      	movs	r1, r0
 800699e:	4b06      	ldr	r3, [pc, #24]	; (80069b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	0a1b      	lsrs	r3, r3, #8
 80069a4:	2207      	movs	r2, #7
 80069a6:	4013      	ands	r3, r2
 80069a8:	4a04      	ldr	r2, [pc, #16]	; (80069bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80069aa:	5cd3      	ldrb	r3, [r2, r3]
 80069ac:	40d9      	lsrs	r1, r3
 80069ae:	000b      	movs	r3, r1
}    
 80069b0:	0018      	movs	r0, r3
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	46c0      	nop			; (mov r8, r8)
 80069b8:	40021000 	.word	0x40021000
 80069bc:	080135c8 	.word	0x080135c8

080069c0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b082      	sub	sp, #8
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2207      	movs	r2, #7
 80069ce:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80069d0:	4b0e      	ldr	r3, [pc, #56]	; (8006a0c <HAL_RCC_GetClockConfig+0x4c>)
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	2203      	movs	r2, #3
 80069d6:	401a      	ands	r2, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80069dc:	4b0b      	ldr	r3, [pc, #44]	; (8006a0c <HAL_RCC_GetClockConfig+0x4c>)
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	22f0      	movs	r2, #240	; 0xf0
 80069e2:	401a      	ands	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 80069e8:	4b08      	ldr	r3, [pc, #32]	; (8006a0c <HAL_RCC_GetClockConfig+0x4c>)
 80069ea:	685a      	ldr	r2, [r3, #4]
 80069ec:	23e0      	movs	r3, #224	; 0xe0
 80069ee:	00db      	lsls	r3, r3, #3
 80069f0:	401a      	ands	r2, r3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 80069f6:	4b06      	ldr	r3, [pc, #24]	; (8006a10 <HAL_RCC_GetClockConfig+0x50>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	2201      	movs	r2, #1
 80069fc:	401a      	ands	r2, r3
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	601a      	str	r2, [r3, #0]
}
 8006a02:	46c0      	nop			; (mov r8, r8)
 8006a04:	46bd      	mov	sp, r7
 8006a06:	b002      	add	sp, #8
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	46c0      	nop			; (mov r8, r8)
 8006a0c:	40021000 	.word	0x40021000
 8006a10:	40022000 	.word	0x40022000

08006a14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b086      	sub	sp, #24
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8006a20:	2300      	movs	r3, #0
 8006a22:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	2380      	movs	r3, #128	; 0x80
 8006a2a:	025b      	lsls	r3, r3, #9
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	d100      	bne.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8006a30:	e08e      	b.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8006a32:	2017      	movs	r0, #23
 8006a34:	183b      	adds	r3, r7, r0
 8006a36:	2200      	movs	r2, #0
 8006a38:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a3a:	4b5f      	ldr	r3, [pc, #380]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006a3c:	69da      	ldr	r2, [r3, #28]
 8006a3e:	2380      	movs	r3, #128	; 0x80
 8006a40:	055b      	lsls	r3, r3, #21
 8006a42:	4013      	ands	r3, r2
 8006a44:	d110      	bne.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006a46:	4b5c      	ldr	r3, [pc, #368]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006a48:	69da      	ldr	r2, [r3, #28]
 8006a4a:	4b5b      	ldr	r3, [pc, #364]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006a4c:	2180      	movs	r1, #128	; 0x80
 8006a4e:	0549      	lsls	r1, r1, #21
 8006a50:	430a      	orrs	r2, r1
 8006a52:	61da      	str	r2, [r3, #28]
 8006a54:	4b58      	ldr	r3, [pc, #352]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006a56:	69da      	ldr	r2, [r3, #28]
 8006a58:	2380      	movs	r3, #128	; 0x80
 8006a5a:	055b      	lsls	r3, r3, #21
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	60bb      	str	r3, [r7, #8]
 8006a60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a62:	183b      	adds	r3, r7, r0
 8006a64:	2201      	movs	r2, #1
 8006a66:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a68:	4b54      	ldr	r3, [pc, #336]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	2380      	movs	r3, #128	; 0x80
 8006a6e:	005b      	lsls	r3, r3, #1
 8006a70:	4013      	ands	r3, r2
 8006a72:	d11a      	bne.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a74:	4b51      	ldr	r3, [pc, #324]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	4b50      	ldr	r3, [pc, #320]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006a7a:	2180      	movs	r1, #128	; 0x80
 8006a7c:	0049      	lsls	r1, r1, #1
 8006a7e:	430a      	orrs	r2, r1
 8006a80:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a82:	f7fd fef7 	bl	8004874 <HAL_GetTick>
 8006a86:	0003      	movs	r3, r0
 8006a88:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a8a:	e008      	b.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a8c:	f7fd fef2 	bl	8004874 <HAL_GetTick>
 8006a90:	0002      	movs	r2, r0
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	2b64      	cmp	r3, #100	; 0x64
 8006a98:	d901      	bls.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e087      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a9e:	4b47      	ldr	r3, [pc, #284]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	2380      	movs	r3, #128	; 0x80
 8006aa4:	005b      	lsls	r3, r3, #1
 8006aa6:	4013      	ands	r3, r2
 8006aa8:	d0f0      	beq.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006aaa:	4b43      	ldr	r3, [pc, #268]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006aac:	6a1a      	ldr	r2, [r3, #32]
 8006aae:	23c0      	movs	r3, #192	; 0xc0
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	4013      	ands	r3, r2
 8006ab4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d034      	beq.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	685a      	ldr	r2, [r3, #4]
 8006ac0:	23c0      	movs	r3, #192	; 0xc0
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	4013      	ands	r3, r2
 8006ac6:	68fa      	ldr	r2, [r7, #12]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d02c      	beq.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006acc:	4b3a      	ldr	r3, [pc, #232]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006ace:	6a1b      	ldr	r3, [r3, #32]
 8006ad0:	4a3b      	ldr	r2, [pc, #236]	; (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ad2:	4013      	ands	r3, r2
 8006ad4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006ad6:	4b38      	ldr	r3, [pc, #224]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006ad8:	6a1a      	ldr	r2, [r3, #32]
 8006ada:	4b37      	ldr	r3, [pc, #220]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006adc:	2180      	movs	r1, #128	; 0x80
 8006ade:	0249      	lsls	r1, r1, #9
 8006ae0:	430a      	orrs	r2, r1
 8006ae2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006ae4:	4b34      	ldr	r3, [pc, #208]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006ae6:	6a1a      	ldr	r2, [r3, #32]
 8006ae8:	4b33      	ldr	r3, [pc, #204]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006aea:	4936      	ldr	r1, [pc, #216]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006aec:	400a      	ands	r2, r1
 8006aee:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006af0:	4b31      	ldr	r3, [pc, #196]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006af2:	68fa      	ldr	r2, [r7, #12]
 8006af4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2201      	movs	r2, #1
 8006afa:	4013      	ands	r3, r2
 8006afc:	d013      	beq.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006afe:	f7fd feb9 	bl	8004874 <HAL_GetTick>
 8006b02:	0003      	movs	r3, r0
 8006b04:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b06:	e009      	b.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b08:	f7fd feb4 	bl	8004874 <HAL_GetTick>
 8006b0c:	0002      	movs	r2, r0
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	4a2d      	ldr	r2, [pc, #180]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d901      	bls.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	e048      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b1c:	4b26      	ldr	r3, [pc, #152]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006b1e:	6a1b      	ldr	r3, [r3, #32]
 8006b20:	2202      	movs	r2, #2
 8006b22:	4013      	ands	r3, r2
 8006b24:	d0f0      	beq.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b26:	4b24      	ldr	r3, [pc, #144]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006b28:	6a1b      	ldr	r3, [r3, #32]
 8006b2a:	4a25      	ldr	r2, [pc, #148]	; (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	0019      	movs	r1, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	685a      	ldr	r2, [r3, #4]
 8006b34:	4b20      	ldr	r3, [pc, #128]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006b36:	430a      	orrs	r2, r1
 8006b38:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006b3a:	2317      	movs	r3, #23
 8006b3c:	18fb      	adds	r3, r7, r3
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d105      	bne.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b44:	4b1c      	ldr	r3, [pc, #112]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006b46:	69da      	ldr	r2, [r3, #28]
 8006b48:	4b1b      	ldr	r3, [pc, #108]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006b4a:	4920      	ldr	r1, [pc, #128]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b4c:	400a      	ands	r2, r1
 8006b4e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2201      	movs	r2, #1
 8006b56:	4013      	ands	r3, r2
 8006b58:	d009      	beq.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006b5a:	4b17      	ldr	r3, [pc, #92]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b5e:	2203      	movs	r2, #3
 8006b60:	4393      	bics	r3, r2
 8006b62:	0019      	movs	r1, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	689a      	ldr	r2, [r3, #8]
 8006b68:	4b13      	ldr	r3, [pc, #76]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006b6a:	430a      	orrs	r2, r1
 8006b6c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	2220      	movs	r2, #32
 8006b74:	4013      	ands	r3, r2
 8006b76:	d009      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006b78:	4b0f      	ldr	r3, [pc, #60]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b7c:	2210      	movs	r2, #16
 8006b7e:	4393      	bics	r3, r2
 8006b80:	0019      	movs	r1, r3
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	68da      	ldr	r2, [r3, #12]
 8006b86:	4b0c      	ldr	r3, [pc, #48]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006b88:	430a      	orrs	r2, r1
 8006b8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	2380      	movs	r3, #128	; 0x80
 8006b92:	029b      	lsls	r3, r3, #10
 8006b94:	4013      	ands	r3, r2
 8006b96:	d009      	beq.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b98:	4b07      	ldr	r3, [pc, #28]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b9c:	2280      	movs	r2, #128	; 0x80
 8006b9e:	4393      	bics	r3, r2
 8006ba0:	0019      	movs	r1, r3
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	691a      	ldr	r2, [r3, #16]
 8006ba6:	4b04      	ldr	r3, [pc, #16]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006ba8:	430a      	orrs	r2, r1
 8006baa:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	0018      	movs	r0, r3
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	b006      	add	sp, #24
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	46c0      	nop			; (mov r8, r8)
 8006bb8:	40021000 	.word	0x40021000
 8006bbc:	40007000 	.word	0x40007000
 8006bc0:	fffffcff 	.word	0xfffffcff
 8006bc4:	fffeffff 	.word	0xfffeffff
 8006bc8:	00001388 	.word	0x00001388
 8006bcc:	efffffff 	.word	0xefffffff

08006bd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d101      	bne.n	8006be2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	e042      	b.n	8006c68 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	223d      	movs	r2, #61	; 0x3d
 8006be6:	5c9b      	ldrb	r3, [r3, r2]
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d107      	bne.n	8006bfe <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	223c      	movs	r2, #60	; 0x3c
 8006bf2:	2100      	movs	r1, #0
 8006bf4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	0018      	movs	r0, r3
 8006bfa:	f7fd fbc5 	bl	8004388 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	223d      	movs	r2, #61	; 0x3d
 8006c02:	2102      	movs	r1, #2
 8006c04:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	3304      	adds	r3, #4
 8006c0e:	0019      	movs	r1, r3
 8006c10:	0010      	movs	r0, r2
 8006c12:	f000 fc53 	bl	80074bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2246      	movs	r2, #70	; 0x46
 8006c1a:	2101      	movs	r1, #1
 8006c1c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	223e      	movs	r2, #62	; 0x3e
 8006c22:	2101      	movs	r1, #1
 8006c24:	5499      	strb	r1, [r3, r2]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	223f      	movs	r2, #63	; 0x3f
 8006c2a:	2101      	movs	r1, #1
 8006c2c:	5499      	strb	r1, [r3, r2]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2240      	movs	r2, #64	; 0x40
 8006c32:	2101      	movs	r1, #1
 8006c34:	5499      	strb	r1, [r3, r2]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2241      	movs	r2, #65	; 0x41
 8006c3a:	2101      	movs	r1, #1
 8006c3c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2242      	movs	r2, #66	; 0x42
 8006c42:	2101      	movs	r1, #1
 8006c44:	5499      	strb	r1, [r3, r2]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2243      	movs	r2, #67	; 0x43
 8006c4a:	2101      	movs	r1, #1
 8006c4c:	5499      	strb	r1, [r3, r2]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2244      	movs	r2, #68	; 0x44
 8006c52:	2101      	movs	r1, #1
 8006c54:	5499      	strb	r1, [r3, r2]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2245      	movs	r2, #69	; 0x45
 8006c5a:	2101      	movs	r1, #1
 8006c5c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	223d      	movs	r2, #61	; 0x3d
 8006c62:	2101      	movs	r1, #1
 8006c64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	0018      	movs	r0, r3
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	b002      	add	sp, #8
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	223d      	movs	r2, #61	; 0x3d
 8006c7c:	5c9b      	ldrb	r3, [r3, r2]
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d001      	beq.n	8006c88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	e035      	b.n	8006cf4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	223d      	movs	r2, #61	; 0x3d
 8006c8c:	2102      	movs	r1, #2
 8006c8e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	68da      	ldr	r2, [r3, #12]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2101      	movs	r1, #1
 8006c9c:	430a      	orrs	r2, r1
 8006c9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a15      	ldr	r2, [pc, #84]	; (8006cfc <HAL_TIM_Base_Start_IT+0x8c>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d009      	beq.n	8006cbe <HAL_TIM_Base_Start_IT+0x4e>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a14      	ldr	r2, [pc, #80]	; (8006d00 <HAL_TIM_Base_Start_IT+0x90>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d004      	beq.n	8006cbe <HAL_TIM_Base_Start_IT+0x4e>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a12      	ldr	r2, [pc, #72]	; (8006d04 <HAL_TIM_Base_Start_IT+0x94>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d111      	bne.n	8006ce2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	2207      	movs	r2, #7
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2b06      	cmp	r3, #6
 8006cce:	d010      	beq.n	8006cf2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	2101      	movs	r1, #1
 8006cdc:	430a      	orrs	r2, r1
 8006cde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ce0:	e007      	b.n	8006cf2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2101      	movs	r1, #1
 8006cee:	430a      	orrs	r2, r1
 8006cf0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	0018      	movs	r0, r3
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	b004      	add	sp, #16
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	40012c00 	.word	0x40012c00
 8006d00:	40000400 	.word	0x40000400
 8006d04:	40014000 	.word	0x40014000

08006d08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d101      	bne.n	8006d1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e042      	b.n	8006da0 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	223d      	movs	r2, #61	; 0x3d
 8006d1e:	5c9b      	ldrb	r3, [r3, r2]
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d107      	bne.n	8006d36 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	223c      	movs	r2, #60	; 0x3c
 8006d2a:	2100      	movs	r1, #0
 8006d2c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	0018      	movs	r0, r3
 8006d32:	f000 f839 	bl	8006da8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	223d      	movs	r2, #61	; 0x3d
 8006d3a:	2102      	movs	r1, #2
 8006d3c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	3304      	adds	r3, #4
 8006d46:	0019      	movs	r1, r3
 8006d48:	0010      	movs	r0, r2
 8006d4a:	f000 fbb7 	bl	80074bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2246      	movs	r2, #70	; 0x46
 8006d52:	2101      	movs	r1, #1
 8006d54:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	223e      	movs	r2, #62	; 0x3e
 8006d5a:	2101      	movs	r1, #1
 8006d5c:	5499      	strb	r1, [r3, r2]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	223f      	movs	r2, #63	; 0x3f
 8006d62:	2101      	movs	r1, #1
 8006d64:	5499      	strb	r1, [r3, r2]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2240      	movs	r2, #64	; 0x40
 8006d6a:	2101      	movs	r1, #1
 8006d6c:	5499      	strb	r1, [r3, r2]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2241      	movs	r2, #65	; 0x41
 8006d72:	2101      	movs	r1, #1
 8006d74:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2242      	movs	r2, #66	; 0x42
 8006d7a:	2101      	movs	r1, #1
 8006d7c:	5499      	strb	r1, [r3, r2]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2243      	movs	r2, #67	; 0x43
 8006d82:	2101      	movs	r1, #1
 8006d84:	5499      	strb	r1, [r3, r2]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2244      	movs	r2, #68	; 0x44
 8006d8a:	2101      	movs	r1, #1
 8006d8c:	5499      	strb	r1, [r3, r2]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2245      	movs	r2, #69	; 0x45
 8006d92:	2101      	movs	r1, #1
 8006d94:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	223d      	movs	r2, #61	; 0x3d
 8006d9a:	2101      	movs	r1, #1
 8006d9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	0018      	movs	r0, r3
 8006da2:	46bd      	mov	sp, r7
 8006da4:	b002      	add	sp, #8
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b082      	sub	sp, #8
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006db0:	46c0      	nop			; (mov r8, r8)
 8006db2:	46bd      	mov	sp, r7
 8006db4:	b002      	add	sp, #8
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d108      	bne.n	8006dda <HAL_TIM_PWM_Start+0x22>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	223e      	movs	r2, #62	; 0x3e
 8006dcc:	5c9b      	ldrb	r3, [r3, r2]
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	3b01      	subs	r3, #1
 8006dd2:	1e5a      	subs	r2, r3, #1
 8006dd4:	4193      	sbcs	r3, r2
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	e01f      	b.n	8006e1a <HAL_TIM_PWM_Start+0x62>
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	2b04      	cmp	r3, #4
 8006dde:	d108      	bne.n	8006df2 <HAL_TIM_PWM_Start+0x3a>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	223f      	movs	r2, #63	; 0x3f
 8006de4:	5c9b      	ldrb	r3, [r3, r2]
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	3b01      	subs	r3, #1
 8006dea:	1e5a      	subs	r2, r3, #1
 8006dec:	4193      	sbcs	r3, r2
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	e013      	b.n	8006e1a <HAL_TIM_PWM_Start+0x62>
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	2b08      	cmp	r3, #8
 8006df6:	d108      	bne.n	8006e0a <HAL_TIM_PWM_Start+0x52>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2240      	movs	r2, #64	; 0x40
 8006dfc:	5c9b      	ldrb	r3, [r3, r2]
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	3b01      	subs	r3, #1
 8006e02:	1e5a      	subs	r2, r3, #1
 8006e04:	4193      	sbcs	r3, r2
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	e007      	b.n	8006e1a <HAL_TIM_PWM_Start+0x62>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2241      	movs	r2, #65	; 0x41
 8006e0e:	5c9b      	ldrb	r3, [r3, r2]
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	3b01      	subs	r3, #1
 8006e14:	1e5a      	subs	r2, r3, #1
 8006e16:	4193      	sbcs	r3, r2
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d001      	beq.n	8006e22 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e06e      	b.n	8006f00 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d104      	bne.n	8006e32 <HAL_TIM_PWM_Start+0x7a>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	223e      	movs	r2, #62	; 0x3e
 8006e2c:	2102      	movs	r1, #2
 8006e2e:	5499      	strb	r1, [r3, r2]
 8006e30:	e013      	b.n	8006e5a <HAL_TIM_PWM_Start+0xa2>
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	2b04      	cmp	r3, #4
 8006e36:	d104      	bne.n	8006e42 <HAL_TIM_PWM_Start+0x8a>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	223f      	movs	r2, #63	; 0x3f
 8006e3c:	2102      	movs	r1, #2
 8006e3e:	5499      	strb	r1, [r3, r2]
 8006e40:	e00b      	b.n	8006e5a <HAL_TIM_PWM_Start+0xa2>
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	2b08      	cmp	r3, #8
 8006e46:	d104      	bne.n	8006e52 <HAL_TIM_PWM_Start+0x9a>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2240      	movs	r2, #64	; 0x40
 8006e4c:	2102      	movs	r1, #2
 8006e4e:	5499      	strb	r1, [r3, r2]
 8006e50:	e003      	b.n	8006e5a <HAL_TIM_PWM_Start+0xa2>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2241      	movs	r2, #65	; 0x41
 8006e56:	2102      	movs	r1, #2
 8006e58:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	6839      	ldr	r1, [r7, #0]
 8006e60:	2201      	movs	r2, #1
 8006e62:	0018      	movs	r0, r3
 8006e64:	f000 fe36 	bl	8007ad4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a26      	ldr	r2, [pc, #152]	; (8006f08 <HAL_TIM_PWM_Start+0x150>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d00e      	beq.n	8006e90 <HAL_TIM_PWM_Start+0xd8>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a25      	ldr	r2, [pc, #148]	; (8006f0c <HAL_TIM_PWM_Start+0x154>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d009      	beq.n	8006e90 <HAL_TIM_PWM_Start+0xd8>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a23      	ldr	r2, [pc, #140]	; (8006f10 <HAL_TIM_PWM_Start+0x158>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d004      	beq.n	8006e90 <HAL_TIM_PWM_Start+0xd8>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a22      	ldr	r2, [pc, #136]	; (8006f14 <HAL_TIM_PWM_Start+0x15c>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d101      	bne.n	8006e94 <HAL_TIM_PWM_Start+0xdc>
 8006e90:	2301      	movs	r3, #1
 8006e92:	e000      	b.n	8006e96 <HAL_TIM_PWM_Start+0xde>
 8006e94:	2300      	movs	r3, #0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d008      	beq.n	8006eac <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2180      	movs	r1, #128	; 0x80
 8006ea6:	0209      	lsls	r1, r1, #8
 8006ea8:	430a      	orrs	r2, r1
 8006eaa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a15      	ldr	r2, [pc, #84]	; (8006f08 <HAL_TIM_PWM_Start+0x150>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d009      	beq.n	8006eca <HAL_TIM_PWM_Start+0x112>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a17      	ldr	r2, [pc, #92]	; (8006f18 <HAL_TIM_PWM_Start+0x160>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d004      	beq.n	8006eca <HAL_TIM_PWM_Start+0x112>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a11      	ldr	r2, [pc, #68]	; (8006f0c <HAL_TIM_PWM_Start+0x154>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d111      	bne.n	8006eee <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	2207      	movs	r2, #7
 8006ed2:	4013      	ands	r3, r2
 8006ed4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2b06      	cmp	r3, #6
 8006eda:	d010      	beq.n	8006efe <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2101      	movs	r1, #1
 8006ee8:	430a      	orrs	r2, r1
 8006eea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eec:	e007      	b.n	8006efe <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2101      	movs	r1, #1
 8006efa:	430a      	orrs	r2, r1
 8006efc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	0018      	movs	r0, r3
 8006f02:	46bd      	mov	sp, r7
 8006f04:	b004      	add	sp, #16
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	40012c00 	.word	0x40012c00
 8006f0c:	40014000 	.word	0x40014000
 8006f10:	40014400 	.word	0x40014400
 8006f14:	40014800 	.word	0x40014800
 8006f18:	40000400 	.word	0x40000400

08006f1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	2202      	movs	r2, #2
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	d124      	bne.n	8006f7c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	2202      	movs	r2, #2
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	2b02      	cmp	r3, #2
 8006f3e:	d11d      	bne.n	8006f7c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2203      	movs	r2, #3
 8006f46:	4252      	negs	r2, r2
 8006f48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	699b      	ldr	r3, [r3, #24]
 8006f56:	2203      	movs	r2, #3
 8006f58:	4013      	ands	r3, r2
 8006f5a:	d004      	beq.n	8006f66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	0018      	movs	r0, r3
 8006f60:	f000 fa94 	bl	800748c <HAL_TIM_IC_CaptureCallback>
 8006f64:	e007      	b.n	8006f76 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	0018      	movs	r0, r3
 8006f6a:	f000 fa87 	bl	800747c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	0018      	movs	r0, r3
 8006f72:	f000 fa93 	bl	800749c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	691b      	ldr	r3, [r3, #16]
 8006f82:	2204      	movs	r2, #4
 8006f84:	4013      	ands	r3, r2
 8006f86:	2b04      	cmp	r3, #4
 8006f88:	d125      	bne.n	8006fd6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	2204      	movs	r2, #4
 8006f92:	4013      	ands	r3, r2
 8006f94:	2b04      	cmp	r3, #4
 8006f96:	d11e      	bne.n	8006fd6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	2205      	movs	r2, #5
 8006f9e:	4252      	negs	r2, r2
 8006fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2202      	movs	r2, #2
 8006fa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	699a      	ldr	r2, [r3, #24]
 8006fae:	23c0      	movs	r3, #192	; 0xc0
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	4013      	ands	r3, r2
 8006fb4:	d004      	beq.n	8006fc0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	0018      	movs	r0, r3
 8006fba:	f000 fa67 	bl	800748c <HAL_TIM_IC_CaptureCallback>
 8006fbe:	e007      	b.n	8006fd0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	0018      	movs	r0, r3
 8006fc4:	f000 fa5a 	bl	800747c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	0018      	movs	r0, r3
 8006fcc:	f000 fa66 	bl	800749c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	2208      	movs	r2, #8
 8006fde:	4013      	ands	r3, r2
 8006fe0:	2b08      	cmp	r3, #8
 8006fe2:	d124      	bne.n	800702e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	2208      	movs	r2, #8
 8006fec:	4013      	ands	r3, r2
 8006fee:	2b08      	cmp	r3, #8
 8006ff0:	d11d      	bne.n	800702e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2209      	movs	r2, #9
 8006ff8:	4252      	negs	r2, r2
 8006ffa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2204      	movs	r2, #4
 8007000:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	69db      	ldr	r3, [r3, #28]
 8007008:	2203      	movs	r2, #3
 800700a:	4013      	ands	r3, r2
 800700c:	d004      	beq.n	8007018 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	0018      	movs	r0, r3
 8007012:	f000 fa3b 	bl	800748c <HAL_TIM_IC_CaptureCallback>
 8007016:	e007      	b.n	8007028 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	0018      	movs	r0, r3
 800701c:	f000 fa2e 	bl	800747c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	0018      	movs	r0, r3
 8007024:	f000 fa3a 	bl	800749c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	2210      	movs	r2, #16
 8007036:	4013      	ands	r3, r2
 8007038:	2b10      	cmp	r3, #16
 800703a:	d125      	bne.n	8007088 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	68db      	ldr	r3, [r3, #12]
 8007042:	2210      	movs	r2, #16
 8007044:	4013      	ands	r3, r2
 8007046:	2b10      	cmp	r3, #16
 8007048:	d11e      	bne.n	8007088 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2211      	movs	r2, #17
 8007050:	4252      	negs	r2, r2
 8007052:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2208      	movs	r2, #8
 8007058:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	69da      	ldr	r2, [r3, #28]
 8007060:	23c0      	movs	r3, #192	; 0xc0
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	4013      	ands	r3, r2
 8007066:	d004      	beq.n	8007072 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	0018      	movs	r0, r3
 800706c:	f000 fa0e 	bl	800748c <HAL_TIM_IC_CaptureCallback>
 8007070:	e007      	b.n	8007082 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	0018      	movs	r0, r3
 8007076:	f000 fa01 	bl	800747c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	0018      	movs	r0, r3
 800707e:	f000 fa0d 	bl	800749c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	691b      	ldr	r3, [r3, #16]
 800708e:	2201      	movs	r2, #1
 8007090:	4013      	ands	r3, r2
 8007092:	2b01      	cmp	r3, #1
 8007094:	d10f      	bne.n	80070b6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	2201      	movs	r2, #1
 800709e:	4013      	ands	r3, r2
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d108      	bne.n	80070b6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2202      	movs	r2, #2
 80070aa:	4252      	negs	r2, r2
 80070ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	0018      	movs	r0, r3
 80070b2:	f7fd f88b 	bl	80041cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	691b      	ldr	r3, [r3, #16]
 80070bc:	2280      	movs	r2, #128	; 0x80
 80070be:	4013      	ands	r3, r2
 80070c0:	2b80      	cmp	r3, #128	; 0x80
 80070c2:	d10f      	bne.n	80070e4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	2280      	movs	r2, #128	; 0x80
 80070cc:	4013      	ands	r3, r2
 80070ce:	2b80      	cmp	r3, #128	; 0x80
 80070d0:	d108      	bne.n	80070e4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2281      	movs	r2, #129	; 0x81
 80070d8:	4252      	negs	r2, r2
 80070da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	0018      	movs	r0, r3
 80070e0:	f000 fd7c 	bl	8007bdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	2240      	movs	r2, #64	; 0x40
 80070ec:	4013      	ands	r3, r2
 80070ee:	2b40      	cmp	r3, #64	; 0x40
 80070f0:	d10f      	bne.n	8007112 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	2240      	movs	r2, #64	; 0x40
 80070fa:	4013      	ands	r3, r2
 80070fc:	2b40      	cmp	r3, #64	; 0x40
 80070fe:	d108      	bne.n	8007112 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2241      	movs	r2, #65	; 0x41
 8007106:	4252      	negs	r2, r2
 8007108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	0018      	movs	r0, r3
 800710e:	f000 f9cd 	bl	80074ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	691b      	ldr	r3, [r3, #16]
 8007118:	2220      	movs	r2, #32
 800711a:	4013      	ands	r3, r2
 800711c:	2b20      	cmp	r3, #32
 800711e:	d10f      	bne.n	8007140 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	68db      	ldr	r3, [r3, #12]
 8007126:	2220      	movs	r2, #32
 8007128:	4013      	ands	r3, r2
 800712a:	2b20      	cmp	r3, #32
 800712c:	d108      	bne.n	8007140 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2221      	movs	r2, #33	; 0x21
 8007134:	4252      	negs	r2, r2
 8007136:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	0018      	movs	r0, r3
 800713c:	f000 fd46 	bl	8007bcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007140:	46c0      	nop			; (mov r8, r8)
 8007142:	46bd      	mov	sp, r7
 8007144:	b002      	add	sp, #8
 8007146:	bd80      	pop	{r7, pc}

08007148 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b086      	sub	sp, #24
 800714c:	af00      	add	r7, sp, #0
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	60b9      	str	r1, [r7, #8]
 8007152:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007154:	2317      	movs	r3, #23
 8007156:	18fb      	adds	r3, r7, r3
 8007158:	2200      	movs	r2, #0
 800715a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	223c      	movs	r2, #60	; 0x3c
 8007160:	5c9b      	ldrb	r3, [r3, r2]
 8007162:	2b01      	cmp	r3, #1
 8007164:	d101      	bne.n	800716a <HAL_TIM_PWM_ConfigChannel+0x22>
 8007166:	2302      	movs	r3, #2
 8007168:	e0ad      	b.n	80072c6 <HAL_TIM_PWM_ConfigChannel+0x17e>
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	223c      	movs	r2, #60	; 0x3c
 800716e:	2101      	movs	r1, #1
 8007170:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2b0c      	cmp	r3, #12
 8007176:	d100      	bne.n	800717a <HAL_TIM_PWM_ConfigChannel+0x32>
 8007178:	e076      	b.n	8007268 <HAL_TIM_PWM_ConfigChannel+0x120>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2b0c      	cmp	r3, #12
 800717e:	d900      	bls.n	8007182 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8007180:	e095      	b.n	80072ae <HAL_TIM_PWM_ConfigChannel+0x166>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2b08      	cmp	r3, #8
 8007186:	d04e      	beq.n	8007226 <HAL_TIM_PWM_ConfigChannel+0xde>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2b08      	cmp	r3, #8
 800718c:	d900      	bls.n	8007190 <HAL_TIM_PWM_ConfigChannel+0x48>
 800718e:	e08e      	b.n	80072ae <HAL_TIM_PWM_ConfigChannel+0x166>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d003      	beq.n	800719e <HAL_TIM_PWM_ConfigChannel+0x56>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2b04      	cmp	r3, #4
 800719a:	d021      	beq.n	80071e0 <HAL_TIM_PWM_ConfigChannel+0x98>
 800719c:	e087      	b.n	80072ae <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	68ba      	ldr	r2, [r7, #8]
 80071a4:	0011      	movs	r1, r2
 80071a6:	0018      	movs	r0, r3
 80071a8:	f000 f9fe 	bl	80075a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	699a      	ldr	r2, [r3, #24]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	2108      	movs	r1, #8
 80071b8:	430a      	orrs	r2, r1
 80071ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	699a      	ldr	r2, [r3, #24]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	2104      	movs	r1, #4
 80071c8:	438a      	bics	r2, r1
 80071ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	6999      	ldr	r1, [r3, #24]
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	691a      	ldr	r2, [r3, #16]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	430a      	orrs	r2, r1
 80071dc:	619a      	str	r2, [r3, #24]
      break;
 80071de:	e06b      	b.n	80072b8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	68ba      	ldr	r2, [r7, #8]
 80071e6:	0011      	movs	r1, r2
 80071e8:	0018      	movs	r0, r3
 80071ea:	f000 fa65 	bl	80076b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	699a      	ldr	r2, [r3, #24]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	2180      	movs	r1, #128	; 0x80
 80071fa:	0109      	lsls	r1, r1, #4
 80071fc:	430a      	orrs	r2, r1
 80071fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	699a      	ldr	r2, [r3, #24]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4931      	ldr	r1, [pc, #196]	; (80072d0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800720c:	400a      	ands	r2, r1
 800720e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	6999      	ldr	r1, [r3, #24]
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	691b      	ldr	r3, [r3, #16]
 800721a:	021a      	lsls	r2, r3, #8
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	430a      	orrs	r2, r1
 8007222:	619a      	str	r2, [r3, #24]
      break;
 8007224:	e048      	b.n	80072b8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	68ba      	ldr	r2, [r7, #8]
 800722c:	0011      	movs	r1, r2
 800722e:	0018      	movs	r0, r3
 8007230:	f000 fac6 	bl	80077c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	69da      	ldr	r2, [r3, #28]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2108      	movs	r1, #8
 8007240:	430a      	orrs	r2, r1
 8007242:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	69da      	ldr	r2, [r3, #28]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	2104      	movs	r1, #4
 8007250:	438a      	bics	r2, r1
 8007252:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	69d9      	ldr	r1, [r3, #28]
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	691a      	ldr	r2, [r3, #16]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	430a      	orrs	r2, r1
 8007264:	61da      	str	r2, [r3, #28]
      break;
 8007266:	e027      	b.n	80072b8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	68ba      	ldr	r2, [r7, #8]
 800726e:	0011      	movs	r1, r2
 8007270:	0018      	movs	r0, r3
 8007272:	f000 fb2b 	bl	80078cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	69da      	ldr	r2, [r3, #28]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2180      	movs	r1, #128	; 0x80
 8007282:	0109      	lsls	r1, r1, #4
 8007284:	430a      	orrs	r2, r1
 8007286:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	69da      	ldr	r2, [r3, #28]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	490f      	ldr	r1, [pc, #60]	; (80072d0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8007294:	400a      	ands	r2, r1
 8007296:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	69d9      	ldr	r1, [r3, #28]
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	691b      	ldr	r3, [r3, #16]
 80072a2:	021a      	lsls	r2, r3, #8
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	430a      	orrs	r2, r1
 80072aa:	61da      	str	r2, [r3, #28]
      break;
 80072ac:	e004      	b.n	80072b8 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80072ae:	2317      	movs	r3, #23
 80072b0:	18fb      	adds	r3, r7, r3
 80072b2:	2201      	movs	r2, #1
 80072b4:	701a      	strb	r2, [r3, #0]
      break;
 80072b6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	223c      	movs	r2, #60	; 0x3c
 80072bc:	2100      	movs	r1, #0
 80072be:	5499      	strb	r1, [r3, r2]

  return status;
 80072c0:	2317      	movs	r3, #23
 80072c2:	18fb      	adds	r3, r7, r3
 80072c4:	781b      	ldrb	r3, [r3, #0]
}
 80072c6:	0018      	movs	r0, r3
 80072c8:	46bd      	mov	sp, r7
 80072ca:	b006      	add	sp, #24
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	46c0      	nop			; (mov r8, r8)
 80072d0:	fffffbff 	.word	0xfffffbff

080072d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072de:	230f      	movs	r3, #15
 80072e0:	18fb      	adds	r3, r7, r3
 80072e2:	2200      	movs	r2, #0
 80072e4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	223c      	movs	r2, #60	; 0x3c
 80072ea:	5c9b      	ldrb	r3, [r3, r2]
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d101      	bne.n	80072f4 <HAL_TIM_ConfigClockSource+0x20>
 80072f0:	2302      	movs	r3, #2
 80072f2:	e0bc      	b.n	800746e <HAL_TIM_ConfigClockSource+0x19a>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	223c      	movs	r2, #60	; 0x3c
 80072f8:	2101      	movs	r1, #1
 80072fa:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	223d      	movs	r2, #61	; 0x3d
 8007300:	2102      	movs	r1, #2
 8007302:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	2277      	movs	r2, #119	; 0x77
 8007310:	4393      	bics	r3, r2
 8007312:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	4a58      	ldr	r2, [pc, #352]	; (8007478 <HAL_TIM_ConfigClockSource+0x1a4>)
 8007318:	4013      	ands	r3, r2
 800731a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	68ba      	ldr	r2, [r7, #8]
 8007322:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	2280      	movs	r2, #128	; 0x80
 800732a:	0192      	lsls	r2, r2, #6
 800732c:	4293      	cmp	r3, r2
 800732e:	d040      	beq.n	80073b2 <HAL_TIM_ConfigClockSource+0xde>
 8007330:	2280      	movs	r2, #128	; 0x80
 8007332:	0192      	lsls	r2, r2, #6
 8007334:	4293      	cmp	r3, r2
 8007336:	d900      	bls.n	800733a <HAL_TIM_ConfigClockSource+0x66>
 8007338:	e088      	b.n	800744c <HAL_TIM_ConfigClockSource+0x178>
 800733a:	2280      	movs	r2, #128	; 0x80
 800733c:	0152      	lsls	r2, r2, #5
 800733e:	4293      	cmp	r3, r2
 8007340:	d100      	bne.n	8007344 <HAL_TIM_ConfigClockSource+0x70>
 8007342:	e088      	b.n	8007456 <HAL_TIM_ConfigClockSource+0x182>
 8007344:	2280      	movs	r2, #128	; 0x80
 8007346:	0152      	lsls	r2, r2, #5
 8007348:	4293      	cmp	r3, r2
 800734a:	d900      	bls.n	800734e <HAL_TIM_ConfigClockSource+0x7a>
 800734c:	e07e      	b.n	800744c <HAL_TIM_ConfigClockSource+0x178>
 800734e:	2b70      	cmp	r3, #112	; 0x70
 8007350:	d018      	beq.n	8007384 <HAL_TIM_ConfigClockSource+0xb0>
 8007352:	d900      	bls.n	8007356 <HAL_TIM_ConfigClockSource+0x82>
 8007354:	e07a      	b.n	800744c <HAL_TIM_ConfigClockSource+0x178>
 8007356:	2b60      	cmp	r3, #96	; 0x60
 8007358:	d04f      	beq.n	80073fa <HAL_TIM_ConfigClockSource+0x126>
 800735a:	d900      	bls.n	800735e <HAL_TIM_ConfigClockSource+0x8a>
 800735c:	e076      	b.n	800744c <HAL_TIM_ConfigClockSource+0x178>
 800735e:	2b50      	cmp	r3, #80	; 0x50
 8007360:	d03b      	beq.n	80073da <HAL_TIM_ConfigClockSource+0x106>
 8007362:	d900      	bls.n	8007366 <HAL_TIM_ConfigClockSource+0x92>
 8007364:	e072      	b.n	800744c <HAL_TIM_ConfigClockSource+0x178>
 8007366:	2b40      	cmp	r3, #64	; 0x40
 8007368:	d057      	beq.n	800741a <HAL_TIM_ConfigClockSource+0x146>
 800736a:	d900      	bls.n	800736e <HAL_TIM_ConfigClockSource+0x9a>
 800736c:	e06e      	b.n	800744c <HAL_TIM_ConfigClockSource+0x178>
 800736e:	2b30      	cmp	r3, #48	; 0x30
 8007370:	d063      	beq.n	800743a <HAL_TIM_ConfigClockSource+0x166>
 8007372:	d86b      	bhi.n	800744c <HAL_TIM_ConfigClockSource+0x178>
 8007374:	2b20      	cmp	r3, #32
 8007376:	d060      	beq.n	800743a <HAL_TIM_ConfigClockSource+0x166>
 8007378:	d868      	bhi.n	800744c <HAL_TIM_ConfigClockSource+0x178>
 800737a:	2b00      	cmp	r3, #0
 800737c:	d05d      	beq.n	800743a <HAL_TIM_ConfigClockSource+0x166>
 800737e:	2b10      	cmp	r3, #16
 8007380:	d05b      	beq.n	800743a <HAL_TIM_ConfigClockSource+0x166>
 8007382:	e063      	b.n	800744c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6818      	ldr	r0, [r3, #0]
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	6899      	ldr	r1, [r3, #8]
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	685a      	ldr	r2, [r3, #4]
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	68db      	ldr	r3, [r3, #12]
 8007394:	f000 fb7e 	bl	8007a94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	2277      	movs	r2, #119	; 0x77
 80073a4:	4313      	orrs	r3, r2
 80073a6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	68ba      	ldr	r2, [r7, #8]
 80073ae:	609a      	str	r2, [r3, #8]
      break;
 80073b0:	e052      	b.n	8007458 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6818      	ldr	r0, [r3, #0]
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	6899      	ldr	r1, [r3, #8]
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	685a      	ldr	r2, [r3, #4]
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	f000 fb67 	bl	8007a94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	689a      	ldr	r2, [r3, #8]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2180      	movs	r1, #128	; 0x80
 80073d2:	01c9      	lsls	r1, r1, #7
 80073d4:	430a      	orrs	r2, r1
 80073d6:	609a      	str	r2, [r3, #8]
      break;
 80073d8:	e03e      	b.n	8007458 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6818      	ldr	r0, [r3, #0]
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	6859      	ldr	r1, [r3, #4]
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	001a      	movs	r2, r3
 80073e8:	f000 fada 	bl	80079a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2150      	movs	r1, #80	; 0x50
 80073f2:	0018      	movs	r0, r3
 80073f4:	f000 fb34 	bl	8007a60 <TIM_ITRx_SetConfig>
      break;
 80073f8:	e02e      	b.n	8007458 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6818      	ldr	r0, [r3, #0]
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	6859      	ldr	r1, [r3, #4]
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	001a      	movs	r2, r3
 8007408:	f000 faf8 	bl	80079fc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	2160      	movs	r1, #96	; 0x60
 8007412:	0018      	movs	r0, r3
 8007414:	f000 fb24 	bl	8007a60 <TIM_ITRx_SetConfig>
      break;
 8007418:	e01e      	b.n	8007458 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6818      	ldr	r0, [r3, #0]
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	6859      	ldr	r1, [r3, #4]
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	001a      	movs	r2, r3
 8007428:	f000 faba 	bl	80079a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2140      	movs	r1, #64	; 0x40
 8007432:	0018      	movs	r0, r3
 8007434:	f000 fb14 	bl	8007a60 <TIM_ITRx_SetConfig>
      break;
 8007438:	e00e      	b.n	8007458 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	0019      	movs	r1, r3
 8007444:	0010      	movs	r0, r2
 8007446:	f000 fb0b 	bl	8007a60 <TIM_ITRx_SetConfig>
      break;
 800744a:	e005      	b.n	8007458 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800744c:	230f      	movs	r3, #15
 800744e:	18fb      	adds	r3, r7, r3
 8007450:	2201      	movs	r2, #1
 8007452:	701a      	strb	r2, [r3, #0]
      break;
 8007454:	e000      	b.n	8007458 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8007456:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	223d      	movs	r2, #61	; 0x3d
 800745c:	2101      	movs	r1, #1
 800745e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	223c      	movs	r2, #60	; 0x3c
 8007464:	2100      	movs	r1, #0
 8007466:	5499      	strb	r1, [r3, r2]

  return status;
 8007468:	230f      	movs	r3, #15
 800746a:	18fb      	adds	r3, r7, r3
 800746c:	781b      	ldrb	r3, [r3, #0]
}
 800746e:	0018      	movs	r0, r3
 8007470:	46bd      	mov	sp, r7
 8007472:	b004      	add	sp, #16
 8007474:	bd80      	pop	{r7, pc}
 8007476:	46c0      	nop			; (mov r8, r8)
 8007478:	ffff00ff 	.word	0xffff00ff

0800747c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007484:	46c0      	nop			; (mov r8, r8)
 8007486:	46bd      	mov	sp, r7
 8007488:	b002      	add	sp, #8
 800748a:	bd80      	pop	{r7, pc}

0800748c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007494:	46c0      	nop			; (mov r8, r8)
 8007496:	46bd      	mov	sp, r7
 8007498:	b002      	add	sp, #8
 800749a:	bd80      	pop	{r7, pc}

0800749c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80074a4:	46c0      	nop			; (mov r8, r8)
 80074a6:	46bd      	mov	sp, r7
 80074a8:	b002      	add	sp, #8
 80074aa:	bd80      	pop	{r7, pc}

080074ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80074b4:	46c0      	nop			; (mov r8, r8)
 80074b6:	46bd      	mov	sp, r7
 80074b8:	b002      	add	sp, #8
 80074ba:	bd80      	pop	{r7, pc}

080074bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	4a2f      	ldr	r2, [pc, #188]	; (800758c <TIM_Base_SetConfig+0xd0>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d003      	beq.n	80074dc <TIM_Base_SetConfig+0x20>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	4a2e      	ldr	r2, [pc, #184]	; (8007590 <TIM_Base_SetConfig+0xd4>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d108      	bne.n	80074ee <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2270      	movs	r2, #112	; 0x70
 80074e0:	4393      	bics	r3, r2
 80074e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	68fa      	ldr	r2, [r7, #12]
 80074ea:	4313      	orrs	r3, r2
 80074ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4a26      	ldr	r2, [pc, #152]	; (800758c <TIM_Base_SetConfig+0xd0>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d013      	beq.n	800751e <TIM_Base_SetConfig+0x62>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4a25      	ldr	r2, [pc, #148]	; (8007590 <TIM_Base_SetConfig+0xd4>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d00f      	beq.n	800751e <TIM_Base_SetConfig+0x62>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4a24      	ldr	r2, [pc, #144]	; (8007594 <TIM_Base_SetConfig+0xd8>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d00b      	beq.n	800751e <TIM_Base_SetConfig+0x62>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4a23      	ldr	r2, [pc, #140]	; (8007598 <TIM_Base_SetConfig+0xdc>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d007      	beq.n	800751e <TIM_Base_SetConfig+0x62>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4a22      	ldr	r2, [pc, #136]	; (800759c <TIM_Base_SetConfig+0xe0>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d003      	beq.n	800751e <TIM_Base_SetConfig+0x62>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	4a21      	ldr	r2, [pc, #132]	; (80075a0 <TIM_Base_SetConfig+0xe4>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d108      	bne.n	8007530 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	4a20      	ldr	r2, [pc, #128]	; (80075a4 <TIM_Base_SetConfig+0xe8>)
 8007522:	4013      	ands	r3, r2
 8007524:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	68db      	ldr	r3, [r3, #12]
 800752a:	68fa      	ldr	r2, [r7, #12]
 800752c:	4313      	orrs	r3, r2
 800752e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2280      	movs	r2, #128	; 0x80
 8007534:	4393      	bics	r3, r2
 8007536:	001a      	movs	r2, r3
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	695b      	ldr	r3, [r3, #20]
 800753c:	4313      	orrs	r3, r2
 800753e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	689a      	ldr	r2, [r3, #8]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	4a0c      	ldr	r2, [pc, #48]	; (800758c <TIM_Base_SetConfig+0xd0>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d00b      	beq.n	8007576 <TIM_Base_SetConfig+0xba>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4a0d      	ldr	r2, [pc, #52]	; (8007598 <TIM_Base_SetConfig+0xdc>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d007      	beq.n	8007576 <TIM_Base_SetConfig+0xba>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4a0c      	ldr	r2, [pc, #48]	; (800759c <TIM_Base_SetConfig+0xe0>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d003      	beq.n	8007576 <TIM_Base_SetConfig+0xba>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4a0b      	ldr	r2, [pc, #44]	; (80075a0 <TIM_Base_SetConfig+0xe4>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d103      	bne.n	800757e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	691a      	ldr	r2, [r3, #16]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2201      	movs	r2, #1
 8007582:	615a      	str	r2, [r3, #20]
}
 8007584:	46c0      	nop			; (mov r8, r8)
 8007586:	46bd      	mov	sp, r7
 8007588:	b004      	add	sp, #16
 800758a:	bd80      	pop	{r7, pc}
 800758c:	40012c00 	.word	0x40012c00
 8007590:	40000400 	.word	0x40000400
 8007594:	40002000 	.word	0x40002000
 8007598:	40014000 	.word	0x40014000
 800759c:	40014400 	.word	0x40014400
 80075a0:	40014800 	.word	0x40014800
 80075a4:	fffffcff 	.word	0xfffffcff

080075a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b086      	sub	sp, #24
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a1b      	ldr	r3, [r3, #32]
 80075b6:	2201      	movs	r2, #1
 80075b8:	4393      	bics	r3, r2
 80075ba:	001a      	movs	r2, r3
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6a1b      	ldr	r3, [r3, #32]
 80075c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	699b      	ldr	r3, [r3, #24]
 80075d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2270      	movs	r2, #112	; 0x70
 80075d6:	4393      	bics	r3, r2
 80075d8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2203      	movs	r2, #3
 80075de:	4393      	bics	r3, r2
 80075e0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	68fa      	ldr	r2, [r7, #12]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	2202      	movs	r2, #2
 80075f0:	4393      	bics	r3, r2
 80075f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	697a      	ldr	r2, [r7, #20]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	4a27      	ldr	r2, [pc, #156]	; (80076a0 <TIM_OC1_SetConfig+0xf8>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d00b      	beq.n	800761e <TIM_OC1_SetConfig+0x76>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	4a26      	ldr	r2, [pc, #152]	; (80076a4 <TIM_OC1_SetConfig+0xfc>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d007      	beq.n	800761e <TIM_OC1_SetConfig+0x76>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	4a25      	ldr	r2, [pc, #148]	; (80076a8 <TIM_OC1_SetConfig+0x100>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d003      	beq.n	800761e <TIM_OC1_SetConfig+0x76>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	4a24      	ldr	r2, [pc, #144]	; (80076ac <TIM_OC1_SetConfig+0x104>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d10c      	bne.n	8007638 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	2208      	movs	r2, #8
 8007622:	4393      	bics	r3, r2
 8007624:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	697a      	ldr	r2, [r7, #20]
 800762c:	4313      	orrs	r3, r2
 800762e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	2204      	movs	r2, #4
 8007634:	4393      	bics	r3, r2
 8007636:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	4a19      	ldr	r2, [pc, #100]	; (80076a0 <TIM_OC1_SetConfig+0xf8>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d00b      	beq.n	8007658 <TIM_OC1_SetConfig+0xb0>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4a18      	ldr	r2, [pc, #96]	; (80076a4 <TIM_OC1_SetConfig+0xfc>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d007      	beq.n	8007658 <TIM_OC1_SetConfig+0xb0>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a17      	ldr	r2, [pc, #92]	; (80076a8 <TIM_OC1_SetConfig+0x100>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d003      	beq.n	8007658 <TIM_OC1_SetConfig+0xb0>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4a16      	ldr	r2, [pc, #88]	; (80076ac <TIM_OC1_SetConfig+0x104>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d111      	bne.n	800767c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	4a15      	ldr	r2, [pc, #84]	; (80076b0 <TIM_OC1_SetConfig+0x108>)
 800765c:	4013      	ands	r3, r2
 800765e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	4a14      	ldr	r2, [pc, #80]	; (80076b4 <TIM_OC1_SetConfig+0x10c>)
 8007664:	4013      	ands	r3, r2
 8007666:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	695b      	ldr	r3, [r3, #20]
 800766c:	693a      	ldr	r2, [r7, #16]
 800766e:	4313      	orrs	r3, r2
 8007670:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	699b      	ldr	r3, [r3, #24]
 8007676:	693a      	ldr	r2, [r7, #16]
 8007678:	4313      	orrs	r3, r2
 800767a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	693a      	ldr	r2, [r7, #16]
 8007680:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	68fa      	ldr	r2, [r7, #12]
 8007686:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	685a      	ldr	r2, [r3, #4]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	697a      	ldr	r2, [r7, #20]
 8007694:	621a      	str	r2, [r3, #32]
}
 8007696:	46c0      	nop			; (mov r8, r8)
 8007698:	46bd      	mov	sp, r7
 800769a:	b006      	add	sp, #24
 800769c:	bd80      	pop	{r7, pc}
 800769e:	46c0      	nop			; (mov r8, r8)
 80076a0:	40012c00 	.word	0x40012c00
 80076a4:	40014000 	.word	0x40014000
 80076a8:	40014400 	.word	0x40014400
 80076ac:	40014800 	.word	0x40014800
 80076b0:	fffffeff 	.word	0xfffffeff
 80076b4:	fffffdff 	.word	0xfffffdff

080076b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b086      	sub	sp, #24
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6a1b      	ldr	r3, [r3, #32]
 80076c6:	2210      	movs	r2, #16
 80076c8:	4393      	bics	r3, r2
 80076ca:	001a      	movs	r2, r3
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6a1b      	ldr	r3, [r3, #32]
 80076d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	699b      	ldr	r3, [r3, #24]
 80076e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	4a2e      	ldr	r2, [pc, #184]	; (80077a0 <TIM_OC2_SetConfig+0xe8>)
 80076e6:	4013      	ands	r3, r2
 80076e8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	4a2d      	ldr	r2, [pc, #180]	; (80077a4 <TIM_OC2_SetConfig+0xec>)
 80076ee:	4013      	ands	r3, r2
 80076f0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	021b      	lsls	r3, r3, #8
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	4313      	orrs	r3, r2
 80076fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	2220      	movs	r2, #32
 8007702:	4393      	bics	r3, r2
 8007704:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	011b      	lsls	r3, r3, #4
 800770c:	697a      	ldr	r2, [r7, #20]
 800770e:	4313      	orrs	r3, r2
 8007710:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4a24      	ldr	r2, [pc, #144]	; (80077a8 <TIM_OC2_SetConfig+0xf0>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d10d      	bne.n	8007736 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	2280      	movs	r2, #128	; 0x80
 800771e:	4393      	bics	r3, r2
 8007720:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	68db      	ldr	r3, [r3, #12]
 8007726:	011b      	lsls	r3, r3, #4
 8007728:	697a      	ldr	r2, [r7, #20]
 800772a:	4313      	orrs	r3, r2
 800772c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	2240      	movs	r2, #64	; 0x40
 8007732:	4393      	bics	r3, r2
 8007734:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	4a1b      	ldr	r2, [pc, #108]	; (80077a8 <TIM_OC2_SetConfig+0xf0>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d00b      	beq.n	8007756 <TIM_OC2_SetConfig+0x9e>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	4a1a      	ldr	r2, [pc, #104]	; (80077ac <TIM_OC2_SetConfig+0xf4>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d007      	beq.n	8007756 <TIM_OC2_SetConfig+0x9e>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4a19      	ldr	r2, [pc, #100]	; (80077b0 <TIM_OC2_SetConfig+0xf8>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d003      	beq.n	8007756 <TIM_OC2_SetConfig+0x9e>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4a18      	ldr	r2, [pc, #96]	; (80077b4 <TIM_OC2_SetConfig+0xfc>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d113      	bne.n	800777e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	4a17      	ldr	r2, [pc, #92]	; (80077b8 <TIM_OC2_SetConfig+0x100>)
 800775a:	4013      	ands	r3, r2
 800775c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	4a16      	ldr	r2, [pc, #88]	; (80077bc <TIM_OC2_SetConfig+0x104>)
 8007762:	4013      	ands	r3, r2
 8007764:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	695b      	ldr	r3, [r3, #20]
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	693a      	ldr	r2, [r7, #16]
 800776e:	4313      	orrs	r3, r2
 8007770:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	699b      	ldr	r3, [r3, #24]
 8007776:	009b      	lsls	r3, r3, #2
 8007778:	693a      	ldr	r2, [r7, #16]
 800777a:	4313      	orrs	r3, r2
 800777c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	693a      	ldr	r2, [r7, #16]
 8007782:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	68fa      	ldr	r2, [r7, #12]
 8007788:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	685a      	ldr	r2, [r3, #4]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	697a      	ldr	r2, [r7, #20]
 8007796:	621a      	str	r2, [r3, #32]
}
 8007798:	46c0      	nop			; (mov r8, r8)
 800779a:	46bd      	mov	sp, r7
 800779c:	b006      	add	sp, #24
 800779e:	bd80      	pop	{r7, pc}
 80077a0:	ffff8fff 	.word	0xffff8fff
 80077a4:	fffffcff 	.word	0xfffffcff
 80077a8:	40012c00 	.word	0x40012c00
 80077ac:	40014000 	.word	0x40014000
 80077b0:	40014400 	.word	0x40014400
 80077b4:	40014800 	.word	0x40014800
 80077b8:	fffffbff 	.word	0xfffffbff
 80077bc:	fffff7ff 	.word	0xfffff7ff

080077c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b086      	sub	sp, #24
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a1b      	ldr	r3, [r3, #32]
 80077ce:	4a35      	ldr	r2, [pc, #212]	; (80078a4 <TIM_OC3_SetConfig+0xe4>)
 80077d0:	401a      	ands	r2, r3
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a1b      	ldr	r3, [r3, #32]
 80077da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	69db      	ldr	r3, [r3, #28]
 80077e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2270      	movs	r2, #112	; 0x70
 80077ec:	4393      	bics	r3, r2
 80077ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2203      	movs	r2, #3
 80077f4:	4393      	bics	r3, r2
 80077f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	68fa      	ldr	r2, [r7, #12]
 80077fe:	4313      	orrs	r3, r2
 8007800:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	4a28      	ldr	r2, [pc, #160]	; (80078a8 <TIM_OC3_SetConfig+0xe8>)
 8007806:	4013      	ands	r3, r2
 8007808:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	021b      	lsls	r3, r3, #8
 8007810:	697a      	ldr	r2, [r7, #20]
 8007812:	4313      	orrs	r3, r2
 8007814:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	4a24      	ldr	r2, [pc, #144]	; (80078ac <TIM_OC3_SetConfig+0xec>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d10d      	bne.n	800783a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	4a23      	ldr	r2, [pc, #140]	; (80078b0 <TIM_OC3_SetConfig+0xf0>)
 8007822:	4013      	ands	r3, r2
 8007824:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	68db      	ldr	r3, [r3, #12]
 800782a:	021b      	lsls	r3, r3, #8
 800782c:	697a      	ldr	r2, [r7, #20]
 800782e:	4313      	orrs	r3, r2
 8007830:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	4a1f      	ldr	r2, [pc, #124]	; (80078b4 <TIM_OC3_SetConfig+0xf4>)
 8007836:	4013      	ands	r3, r2
 8007838:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	4a1b      	ldr	r2, [pc, #108]	; (80078ac <TIM_OC3_SetConfig+0xec>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d00b      	beq.n	800785a <TIM_OC3_SetConfig+0x9a>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4a1c      	ldr	r2, [pc, #112]	; (80078b8 <TIM_OC3_SetConfig+0xf8>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d007      	beq.n	800785a <TIM_OC3_SetConfig+0x9a>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	4a1b      	ldr	r2, [pc, #108]	; (80078bc <TIM_OC3_SetConfig+0xfc>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d003      	beq.n	800785a <TIM_OC3_SetConfig+0x9a>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	4a1a      	ldr	r2, [pc, #104]	; (80078c0 <TIM_OC3_SetConfig+0x100>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d113      	bne.n	8007882 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	4a19      	ldr	r2, [pc, #100]	; (80078c4 <TIM_OC3_SetConfig+0x104>)
 800785e:	4013      	ands	r3, r2
 8007860:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	4a18      	ldr	r2, [pc, #96]	; (80078c8 <TIM_OC3_SetConfig+0x108>)
 8007866:	4013      	ands	r3, r2
 8007868:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	695b      	ldr	r3, [r3, #20]
 800786e:	011b      	lsls	r3, r3, #4
 8007870:	693a      	ldr	r2, [r7, #16]
 8007872:	4313      	orrs	r3, r2
 8007874:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	699b      	ldr	r3, [r3, #24]
 800787a:	011b      	lsls	r3, r3, #4
 800787c:	693a      	ldr	r2, [r7, #16]
 800787e:	4313      	orrs	r3, r2
 8007880:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	693a      	ldr	r2, [r7, #16]
 8007886:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	68fa      	ldr	r2, [r7, #12]
 800788c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	685a      	ldr	r2, [r3, #4]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	697a      	ldr	r2, [r7, #20]
 800789a:	621a      	str	r2, [r3, #32]
}
 800789c:	46c0      	nop			; (mov r8, r8)
 800789e:	46bd      	mov	sp, r7
 80078a0:	b006      	add	sp, #24
 80078a2:	bd80      	pop	{r7, pc}
 80078a4:	fffffeff 	.word	0xfffffeff
 80078a8:	fffffdff 	.word	0xfffffdff
 80078ac:	40012c00 	.word	0x40012c00
 80078b0:	fffff7ff 	.word	0xfffff7ff
 80078b4:	fffffbff 	.word	0xfffffbff
 80078b8:	40014000 	.word	0x40014000
 80078bc:	40014400 	.word	0x40014400
 80078c0:	40014800 	.word	0x40014800
 80078c4:	ffffefff 	.word	0xffffefff
 80078c8:	ffffdfff 	.word	0xffffdfff

080078cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b086      	sub	sp, #24
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6a1b      	ldr	r3, [r3, #32]
 80078da:	4a28      	ldr	r2, [pc, #160]	; (800797c <TIM_OC4_SetConfig+0xb0>)
 80078dc:	401a      	ands	r2, r3
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6a1b      	ldr	r3, [r3, #32]
 80078e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	69db      	ldr	r3, [r3, #28]
 80078f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	4a22      	ldr	r2, [pc, #136]	; (8007980 <TIM_OC4_SetConfig+0xb4>)
 80078f8:	4013      	ands	r3, r2
 80078fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	4a21      	ldr	r2, [pc, #132]	; (8007984 <TIM_OC4_SetConfig+0xb8>)
 8007900:	4013      	ands	r3, r2
 8007902:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	021b      	lsls	r3, r3, #8
 800790a:	68fa      	ldr	r2, [r7, #12]
 800790c:	4313      	orrs	r3, r2
 800790e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	4a1d      	ldr	r2, [pc, #116]	; (8007988 <TIM_OC4_SetConfig+0xbc>)
 8007914:	4013      	ands	r3, r2
 8007916:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	031b      	lsls	r3, r3, #12
 800791e:	693a      	ldr	r2, [r7, #16]
 8007920:	4313      	orrs	r3, r2
 8007922:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	4a19      	ldr	r2, [pc, #100]	; (800798c <TIM_OC4_SetConfig+0xc0>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d00b      	beq.n	8007944 <TIM_OC4_SetConfig+0x78>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	4a18      	ldr	r2, [pc, #96]	; (8007990 <TIM_OC4_SetConfig+0xc4>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d007      	beq.n	8007944 <TIM_OC4_SetConfig+0x78>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	4a17      	ldr	r2, [pc, #92]	; (8007994 <TIM_OC4_SetConfig+0xc8>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d003      	beq.n	8007944 <TIM_OC4_SetConfig+0x78>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	4a16      	ldr	r2, [pc, #88]	; (8007998 <TIM_OC4_SetConfig+0xcc>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d109      	bne.n	8007958 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	4a15      	ldr	r2, [pc, #84]	; (800799c <TIM_OC4_SetConfig+0xd0>)
 8007948:	4013      	ands	r3, r2
 800794a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	695b      	ldr	r3, [r3, #20]
 8007950:	019b      	lsls	r3, r3, #6
 8007952:	697a      	ldr	r2, [r7, #20]
 8007954:	4313      	orrs	r3, r2
 8007956:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	697a      	ldr	r2, [r7, #20]
 800795c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	68fa      	ldr	r2, [r7, #12]
 8007962:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	685a      	ldr	r2, [r3, #4]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	693a      	ldr	r2, [r7, #16]
 8007970:	621a      	str	r2, [r3, #32]
}
 8007972:	46c0      	nop			; (mov r8, r8)
 8007974:	46bd      	mov	sp, r7
 8007976:	b006      	add	sp, #24
 8007978:	bd80      	pop	{r7, pc}
 800797a:	46c0      	nop			; (mov r8, r8)
 800797c:	ffffefff 	.word	0xffffefff
 8007980:	ffff8fff 	.word	0xffff8fff
 8007984:	fffffcff 	.word	0xfffffcff
 8007988:	ffffdfff 	.word	0xffffdfff
 800798c:	40012c00 	.word	0x40012c00
 8007990:	40014000 	.word	0x40014000
 8007994:	40014400 	.word	0x40014400
 8007998:	40014800 	.word	0x40014800
 800799c:	ffffbfff 	.word	0xffffbfff

080079a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b086      	sub	sp, #24
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	60b9      	str	r1, [r7, #8]
 80079aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	6a1b      	ldr	r3, [r3, #32]
 80079b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	6a1b      	ldr	r3, [r3, #32]
 80079b6:	2201      	movs	r2, #1
 80079b8:	4393      	bics	r3, r2
 80079ba:	001a      	movs	r2, r3
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	699b      	ldr	r3, [r3, #24]
 80079c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	22f0      	movs	r2, #240	; 0xf0
 80079ca:	4393      	bics	r3, r2
 80079cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	011b      	lsls	r3, r3, #4
 80079d2:	693a      	ldr	r2, [r7, #16]
 80079d4:	4313      	orrs	r3, r2
 80079d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	220a      	movs	r2, #10
 80079dc:	4393      	bics	r3, r2
 80079de:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80079e0:	697a      	ldr	r2, [r7, #20]
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	4313      	orrs	r3, r2
 80079e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	693a      	ldr	r2, [r7, #16]
 80079ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	697a      	ldr	r2, [r7, #20]
 80079f2:	621a      	str	r2, [r3, #32]
}
 80079f4:	46c0      	nop			; (mov r8, r8)
 80079f6:	46bd      	mov	sp, r7
 80079f8:	b006      	add	sp, #24
 80079fa:	bd80      	pop	{r7, pc}

080079fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b086      	sub	sp, #24
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	60b9      	str	r1, [r7, #8]
 8007a06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6a1b      	ldr	r3, [r3, #32]
 8007a0c:	2210      	movs	r2, #16
 8007a0e:	4393      	bics	r3, r2
 8007a10:	001a      	movs	r2, r3
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	699b      	ldr	r3, [r3, #24]
 8007a1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6a1b      	ldr	r3, [r3, #32]
 8007a20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	4a0d      	ldr	r2, [pc, #52]	; (8007a5c <TIM_TI2_ConfigInputStage+0x60>)
 8007a26:	4013      	ands	r3, r2
 8007a28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	031b      	lsls	r3, r3, #12
 8007a2e:	697a      	ldr	r2, [r7, #20]
 8007a30:	4313      	orrs	r3, r2
 8007a32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	22a0      	movs	r2, #160	; 0xa0
 8007a38:	4393      	bics	r3, r2
 8007a3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	011b      	lsls	r3, r3, #4
 8007a40:	693a      	ldr	r2, [r7, #16]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	697a      	ldr	r2, [r7, #20]
 8007a4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	693a      	ldr	r2, [r7, #16]
 8007a50:	621a      	str	r2, [r3, #32]
}
 8007a52:	46c0      	nop			; (mov r8, r8)
 8007a54:	46bd      	mov	sp, r7
 8007a56:	b006      	add	sp, #24
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	46c0      	nop			; (mov r8, r8)
 8007a5c:	ffff0fff 	.word	0xffff0fff

08007a60 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2270      	movs	r2, #112	; 0x70
 8007a74:	4393      	bics	r3, r2
 8007a76:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a78:	683a      	ldr	r2, [r7, #0]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	2207      	movs	r2, #7
 8007a80:	4313      	orrs	r3, r2
 8007a82:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	68fa      	ldr	r2, [r7, #12]
 8007a88:	609a      	str	r2, [r3, #8]
}
 8007a8a:	46c0      	nop			; (mov r8, r8)
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	b004      	add	sp, #16
 8007a90:	bd80      	pop	{r7, pc}
	...

08007a94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b086      	sub	sp, #24
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	60f8      	str	r0, [r7, #12]
 8007a9c:	60b9      	str	r1, [r7, #8]
 8007a9e:	607a      	str	r2, [r7, #4]
 8007aa0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	4a09      	ldr	r2, [pc, #36]	; (8007ad0 <TIM_ETR_SetConfig+0x3c>)
 8007aac:	4013      	ands	r3, r2
 8007aae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	021a      	lsls	r2, r3, #8
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	431a      	orrs	r2, r3
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	4313      	orrs	r3, r2
 8007abc:	697a      	ldr	r2, [r7, #20]
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	697a      	ldr	r2, [r7, #20]
 8007ac6:	609a      	str	r2, [r3, #8]
}
 8007ac8:	46c0      	nop			; (mov r8, r8)
 8007aca:	46bd      	mov	sp, r7
 8007acc:	b006      	add	sp, #24
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	ffff00ff 	.word	0xffff00ff

08007ad4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b086      	sub	sp, #24
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	221f      	movs	r2, #31
 8007ae4:	4013      	ands	r3, r2
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	409a      	lsls	r2, r3
 8007aea:	0013      	movs	r3, r2
 8007aec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	6a1b      	ldr	r3, [r3, #32]
 8007af2:	697a      	ldr	r2, [r7, #20]
 8007af4:	43d2      	mvns	r2, r2
 8007af6:	401a      	ands	r2, r3
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6a1a      	ldr	r2, [r3, #32]
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	211f      	movs	r1, #31
 8007b04:	400b      	ands	r3, r1
 8007b06:	6879      	ldr	r1, [r7, #4]
 8007b08:	4099      	lsls	r1, r3
 8007b0a:	000b      	movs	r3, r1
 8007b0c:	431a      	orrs	r2, r3
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	621a      	str	r2, [r3, #32]
}
 8007b12:	46c0      	nop			; (mov r8, r8)
 8007b14:	46bd      	mov	sp, r7
 8007b16:	b006      	add	sp, #24
 8007b18:	bd80      	pop	{r7, pc}
	...

08007b1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	223c      	movs	r2, #60	; 0x3c
 8007b2a:	5c9b      	ldrb	r3, [r3, r2]
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d101      	bne.n	8007b34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b30:	2302      	movs	r3, #2
 8007b32:	e041      	b.n	8007bb8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	223c      	movs	r2, #60	; 0x3c
 8007b38:	2101      	movs	r1, #1
 8007b3a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	223d      	movs	r2, #61	; 0x3d
 8007b40:	2102      	movs	r1, #2
 8007b42:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2270      	movs	r2, #112	; 0x70
 8007b58:	4393      	bics	r3, r2
 8007b5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	68fa      	ldr	r2, [r7, #12]
 8007b62:	4313      	orrs	r3, r2
 8007b64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	68fa      	ldr	r2, [r7, #12]
 8007b6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a13      	ldr	r2, [pc, #76]	; (8007bc0 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d009      	beq.n	8007b8c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a11      	ldr	r2, [pc, #68]	; (8007bc4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d004      	beq.n	8007b8c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a10      	ldr	r2, [pc, #64]	; (8007bc8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d10c      	bne.n	8007ba6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	2280      	movs	r2, #128	; 0x80
 8007b90:	4393      	bics	r3, r2
 8007b92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	68ba      	ldr	r2, [r7, #8]
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	68ba      	ldr	r2, [r7, #8]
 8007ba4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	223d      	movs	r2, #61	; 0x3d
 8007baa:	2101      	movs	r1, #1
 8007bac:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	223c      	movs	r2, #60	; 0x3c
 8007bb2:	2100      	movs	r1, #0
 8007bb4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007bb6:	2300      	movs	r3, #0
}
 8007bb8:	0018      	movs	r0, r3
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	b004      	add	sp, #16
 8007bbe:	bd80      	pop	{r7, pc}
 8007bc0:	40012c00 	.word	0x40012c00
 8007bc4:	40000400 	.word	0x40000400
 8007bc8:	40014000 	.word	0x40014000

08007bcc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b082      	sub	sp, #8
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007bd4:	46c0      	nop			; (mov r8, r8)
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	b002      	add	sp, #8
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007be4:	46c0      	nop			; (mov r8, r8)
 8007be6:	46bd      	mov	sp, r7
 8007be8:	b002      	add	sp, #8
 8007bea:	bd80      	pop	{r7, pc}

08007bec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b082      	sub	sp, #8
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d101      	bne.n	8007bfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e044      	b.n	8007c88 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d107      	bne.n	8007c16 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2274      	movs	r2, #116	; 0x74
 8007c0a:	2100      	movs	r1, #0
 8007c0c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	0018      	movs	r0, r3
 8007c12:	f7fc fc17 	bl	8004444 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2224      	movs	r2, #36	; 0x24
 8007c1a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	2101      	movs	r1, #1
 8007c28:	438a      	bics	r2, r1
 8007c2a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	0018      	movs	r0, r3
 8007c30:	f000 fbb2 	bl	8008398 <UART_SetConfig>
 8007c34:	0003      	movs	r3, r0
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	d101      	bne.n	8007c3e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	e024      	b.n	8007c88 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d003      	beq.n	8007c4e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	0018      	movs	r0, r3
 8007c4a:	f000 fcfd 	bl	8008648 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	685a      	ldr	r2, [r3, #4]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	490d      	ldr	r1, [pc, #52]	; (8007c90 <HAL_UART_Init+0xa4>)
 8007c5a:	400a      	ands	r2, r1
 8007c5c:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	689a      	ldr	r2, [r3, #8]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	2108      	movs	r1, #8
 8007c6a:	438a      	bics	r2, r1
 8007c6c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	2101      	movs	r1, #1
 8007c7a:	430a      	orrs	r2, r1
 8007c7c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	0018      	movs	r0, r3
 8007c82:	f000 fd95 	bl	80087b0 <UART_CheckIdleState>
 8007c86:	0003      	movs	r3, r0
}
 8007c88:	0018      	movs	r0, r3
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	b002      	add	sp, #8
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	fffff7ff 	.word	0xfffff7ff

08007c94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b08a      	sub	sp, #40	; 0x28
 8007c98:	af02      	add	r7, sp, #8
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	603b      	str	r3, [r7, #0]
 8007ca0:	1dbb      	adds	r3, r7, #6
 8007ca2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ca8:	2b20      	cmp	r3, #32
 8007caa:	d000      	beq.n	8007cae <HAL_UART_Transmit+0x1a>
 8007cac:	e096      	b.n	8007ddc <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d003      	beq.n	8007cbc <HAL_UART_Transmit+0x28>
 8007cb4:	1dbb      	adds	r3, r7, #6
 8007cb6:	881b      	ldrh	r3, [r3, #0]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d101      	bne.n	8007cc0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	e08e      	b.n	8007dde <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	689a      	ldr	r2, [r3, #8]
 8007cc4:	2380      	movs	r3, #128	; 0x80
 8007cc6:	015b      	lsls	r3, r3, #5
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d109      	bne.n	8007ce0 <HAL_UART_Transmit+0x4c>
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	691b      	ldr	r3, [r3, #16]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d105      	bne.n	8007ce0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	4013      	ands	r3, r2
 8007cda:	d001      	beq.n	8007ce0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	e07e      	b.n	8007dde <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2274      	movs	r2, #116	; 0x74
 8007ce4:	5c9b      	ldrb	r3, [r3, r2]
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d101      	bne.n	8007cee <HAL_UART_Transmit+0x5a>
 8007cea:	2302      	movs	r3, #2
 8007cec:	e077      	b.n	8007dde <HAL_UART_Transmit+0x14a>
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2274      	movs	r2, #116	; 0x74
 8007cf2:	2101      	movs	r1, #1
 8007cf4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2280      	movs	r2, #128	; 0x80
 8007cfa:	2100      	movs	r1, #0
 8007cfc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2221      	movs	r2, #33	; 0x21
 8007d02:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d04:	f7fc fdb6 	bl	8004874 <HAL_GetTick>
 8007d08:	0003      	movs	r3, r0
 8007d0a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	1dba      	adds	r2, r7, #6
 8007d10:	2150      	movs	r1, #80	; 0x50
 8007d12:	8812      	ldrh	r2, [r2, #0]
 8007d14:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	1dba      	adds	r2, r7, #6
 8007d1a:	2152      	movs	r1, #82	; 0x52
 8007d1c:	8812      	ldrh	r2, [r2, #0]
 8007d1e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	689a      	ldr	r2, [r3, #8]
 8007d24:	2380      	movs	r3, #128	; 0x80
 8007d26:	015b      	lsls	r3, r3, #5
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d108      	bne.n	8007d3e <HAL_UART_Transmit+0xaa>
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	691b      	ldr	r3, [r3, #16]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d104      	bne.n	8007d3e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8007d34:	2300      	movs	r3, #0
 8007d36:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	61bb      	str	r3, [r7, #24]
 8007d3c:	e003      	b.n	8007d46 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007d42:	2300      	movs	r3, #0
 8007d44:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2274      	movs	r2, #116	; 0x74
 8007d4a:	2100      	movs	r1, #0
 8007d4c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8007d4e:	e02d      	b.n	8007dac <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007d50:	697a      	ldr	r2, [r7, #20]
 8007d52:	68f8      	ldr	r0, [r7, #12]
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	9300      	str	r3, [sp, #0]
 8007d58:	0013      	movs	r3, r2
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	2180      	movs	r1, #128	; 0x80
 8007d5e:	f000 fd6f 	bl	8008840 <UART_WaitOnFlagUntilTimeout>
 8007d62:	1e03      	subs	r3, r0, #0
 8007d64:	d001      	beq.n	8007d6a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8007d66:	2303      	movs	r3, #3
 8007d68:	e039      	b.n	8007dde <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8007d6a:	69fb      	ldr	r3, [r7, #28]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d10b      	bne.n	8007d88 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007d70:	69bb      	ldr	r3, [r7, #24]
 8007d72:	881a      	ldrh	r2, [r3, #0]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	05d2      	lsls	r2, r2, #23
 8007d7a:	0dd2      	lsrs	r2, r2, #23
 8007d7c:	b292      	uxth	r2, r2
 8007d7e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007d80:	69bb      	ldr	r3, [r7, #24]
 8007d82:	3302      	adds	r3, #2
 8007d84:	61bb      	str	r3, [r7, #24]
 8007d86:	e008      	b.n	8007d9a <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007d88:	69fb      	ldr	r3, [r7, #28]
 8007d8a:	781a      	ldrb	r2, [r3, #0]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	b292      	uxth	r2, r2
 8007d92:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007d94:	69fb      	ldr	r3, [r7, #28]
 8007d96:	3301      	adds	r3, #1
 8007d98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2252      	movs	r2, #82	; 0x52
 8007d9e:	5a9b      	ldrh	r3, [r3, r2]
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	3b01      	subs	r3, #1
 8007da4:	b299      	uxth	r1, r3
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2252      	movs	r2, #82	; 0x52
 8007daa:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2252      	movs	r2, #82	; 0x52
 8007db0:	5a9b      	ldrh	r3, [r3, r2]
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d1cb      	bne.n	8007d50 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007db8:	697a      	ldr	r2, [r7, #20]
 8007dba:	68f8      	ldr	r0, [r7, #12]
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	9300      	str	r3, [sp, #0]
 8007dc0:	0013      	movs	r3, r2
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	2140      	movs	r1, #64	; 0x40
 8007dc6:	f000 fd3b 	bl	8008840 <UART_WaitOnFlagUntilTimeout>
 8007dca:	1e03      	subs	r3, r0, #0
 8007dcc:	d001      	beq.n	8007dd2 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8007dce:	2303      	movs	r3, #3
 8007dd0:	e005      	b.n	8007dde <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2220      	movs	r2, #32
 8007dd6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	e000      	b.n	8007dde <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8007ddc:	2302      	movs	r3, #2
  }
}
 8007dde:	0018      	movs	r0, r3
 8007de0:	46bd      	mov	sp, r7
 8007de2:	b008      	add	sp, #32
 8007de4:	bd80      	pop	{r7, pc}
	...

08007de8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007de8:	b590      	push	{r4, r7, lr}
 8007dea:	b0ab      	sub	sp, #172	; 0xac
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	69db      	ldr	r3, [r3, #28]
 8007df6:	22a4      	movs	r2, #164	; 0xa4
 8007df8:	18b9      	adds	r1, r7, r2
 8007dfa:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	20a0      	movs	r0, #160	; 0xa0
 8007e04:	1839      	adds	r1, r7, r0
 8007e06:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	219c      	movs	r1, #156	; 0x9c
 8007e10:	1879      	adds	r1, r7, r1
 8007e12:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007e14:	0011      	movs	r1, r2
 8007e16:	18bb      	adds	r3, r7, r2
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a99      	ldr	r2, [pc, #612]	; (8008080 <HAL_UART_IRQHandler+0x298>)
 8007e1c:	4013      	ands	r3, r2
 8007e1e:	2298      	movs	r2, #152	; 0x98
 8007e20:	18bc      	adds	r4, r7, r2
 8007e22:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8007e24:	18bb      	adds	r3, r7, r2
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d114      	bne.n	8007e56 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007e2c:	187b      	adds	r3, r7, r1
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2220      	movs	r2, #32
 8007e32:	4013      	ands	r3, r2
 8007e34:	d00f      	beq.n	8007e56 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007e36:	183b      	adds	r3, r7, r0
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	2220      	movs	r2, #32
 8007e3c:	4013      	ands	r3, r2
 8007e3e:	d00a      	beq.n	8007e56 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d100      	bne.n	8007e4a <HAL_UART_IRQHandler+0x62>
 8007e48:	e27e      	b.n	8008348 <HAL_UART_IRQHandler+0x560>
      {
        huart->RxISR(huart);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e4e:	687a      	ldr	r2, [r7, #4]
 8007e50:	0010      	movs	r0, r2
 8007e52:	4798      	blx	r3
      }
      return;
 8007e54:	e278      	b.n	8008348 <HAL_UART_IRQHandler+0x560>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007e56:	2398      	movs	r3, #152	; 0x98
 8007e58:	18fb      	adds	r3, r7, r3
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d100      	bne.n	8007e62 <HAL_UART_IRQHandler+0x7a>
 8007e60:	e114      	b.n	800808c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007e62:	239c      	movs	r3, #156	; 0x9c
 8007e64:	18fb      	adds	r3, r7, r3
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	2201      	movs	r2, #1
 8007e6a:	4013      	ands	r3, r2
 8007e6c:	d106      	bne.n	8007e7c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007e6e:	23a0      	movs	r3, #160	; 0xa0
 8007e70:	18fb      	adds	r3, r7, r3
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a83      	ldr	r2, [pc, #524]	; (8008084 <HAL_UART_IRQHandler+0x29c>)
 8007e76:	4013      	ands	r3, r2
 8007e78:	d100      	bne.n	8007e7c <HAL_UART_IRQHandler+0x94>
 8007e7a:	e107      	b.n	800808c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007e7c:	23a4      	movs	r3, #164	; 0xa4
 8007e7e:	18fb      	adds	r3, r7, r3
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	2201      	movs	r2, #1
 8007e84:	4013      	ands	r3, r2
 8007e86:	d012      	beq.n	8007eae <HAL_UART_IRQHandler+0xc6>
 8007e88:	23a0      	movs	r3, #160	; 0xa0
 8007e8a:	18fb      	adds	r3, r7, r3
 8007e8c:	681a      	ldr	r2, [r3, #0]
 8007e8e:	2380      	movs	r3, #128	; 0x80
 8007e90:	005b      	lsls	r3, r3, #1
 8007e92:	4013      	ands	r3, r2
 8007e94:	d00b      	beq.n	8007eae <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2280      	movs	r2, #128	; 0x80
 8007ea2:	589b      	ldr	r3, [r3, r2]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	431a      	orrs	r2, r3
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2180      	movs	r1, #128	; 0x80
 8007eac:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007eae:	23a4      	movs	r3, #164	; 0xa4
 8007eb0:	18fb      	adds	r3, r7, r3
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2202      	movs	r2, #2
 8007eb6:	4013      	ands	r3, r2
 8007eb8:	d011      	beq.n	8007ede <HAL_UART_IRQHandler+0xf6>
 8007eba:	239c      	movs	r3, #156	; 0x9c
 8007ebc:	18fb      	adds	r3, r7, r3
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	4013      	ands	r3, r2
 8007ec4:	d00b      	beq.n	8007ede <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	2202      	movs	r2, #2
 8007ecc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2280      	movs	r2, #128	; 0x80
 8007ed2:	589b      	ldr	r3, [r3, r2]
 8007ed4:	2204      	movs	r2, #4
 8007ed6:	431a      	orrs	r2, r3
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2180      	movs	r1, #128	; 0x80
 8007edc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ede:	23a4      	movs	r3, #164	; 0xa4
 8007ee0:	18fb      	adds	r3, r7, r3
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	2204      	movs	r2, #4
 8007ee6:	4013      	ands	r3, r2
 8007ee8:	d011      	beq.n	8007f0e <HAL_UART_IRQHandler+0x126>
 8007eea:	239c      	movs	r3, #156	; 0x9c
 8007eec:	18fb      	adds	r3, r7, r3
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	4013      	ands	r3, r2
 8007ef4:	d00b      	beq.n	8007f0e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	2204      	movs	r2, #4
 8007efc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2280      	movs	r2, #128	; 0x80
 8007f02:	589b      	ldr	r3, [r3, r2]
 8007f04:	2202      	movs	r2, #2
 8007f06:	431a      	orrs	r2, r3
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2180      	movs	r1, #128	; 0x80
 8007f0c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007f0e:	23a4      	movs	r3, #164	; 0xa4
 8007f10:	18fb      	adds	r3, r7, r3
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	2208      	movs	r2, #8
 8007f16:	4013      	ands	r3, r2
 8007f18:	d017      	beq.n	8007f4a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007f1a:	23a0      	movs	r3, #160	; 0xa0
 8007f1c:	18fb      	adds	r3, r7, r3
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	2220      	movs	r2, #32
 8007f22:	4013      	ands	r3, r2
 8007f24:	d105      	bne.n	8007f32 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007f26:	239c      	movs	r3, #156	; 0x9c
 8007f28:	18fb      	adds	r3, r7, r3
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007f30:	d00b      	beq.n	8007f4a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	2208      	movs	r2, #8
 8007f38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2280      	movs	r2, #128	; 0x80
 8007f3e:	589b      	ldr	r3, [r3, r2]
 8007f40:	2208      	movs	r2, #8
 8007f42:	431a      	orrs	r2, r3
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2180      	movs	r1, #128	; 0x80
 8007f48:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007f4a:	23a4      	movs	r3, #164	; 0xa4
 8007f4c:	18fb      	adds	r3, r7, r3
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	2380      	movs	r3, #128	; 0x80
 8007f52:	011b      	lsls	r3, r3, #4
 8007f54:	4013      	ands	r3, r2
 8007f56:	d013      	beq.n	8007f80 <HAL_UART_IRQHandler+0x198>
 8007f58:	23a0      	movs	r3, #160	; 0xa0
 8007f5a:	18fb      	adds	r3, r7, r3
 8007f5c:	681a      	ldr	r2, [r3, #0]
 8007f5e:	2380      	movs	r3, #128	; 0x80
 8007f60:	04db      	lsls	r3, r3, #19
 8007f62:	4013      	ands	r3, r2
 8007f64:	d00c      	beq.n	8007f80 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	2280      	movs	r2, #128	; 0x80
 8007f6c:	0112      	lsls	r2, r2, #4
 8007f6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2280      	movs	r2, #128	; 0x80
 8007f74:	589b      	ldr	r3, [r3, r2]
 8007f76:	2220      	movs	r2, #32
 8007f78:	431a      	orrs	r2, r3
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2180      	movs	r1, #128	; 0x80
 8007f7e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2280      	movs	r2, #128	; 0x80
 8007f84:	589b      	ldr	r3, [r3, r2]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d100      	bne.n	8007f8c <HAL_UART_IRQHandler+0x1a4>
 8007f8a:	e1df      	b.n	800834c <HAL_UART_IRQHandler+0x564>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007f8c:	23a4      	movs	r3, #164	; 0xa4
 8007f8e:	18fb      	adds	r3, r7, r3
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	2220      	movs	r2, #32
 8007f94:	4013      	ands	r3, r2
 8007f96:	d00e      	beq.n	8007fb6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007f98:	23a0      	movs	r3, #160	; 0xa0
 8007f9a:	18fb      	adds	r3, r7, r3
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	2220      	movs	r2, #32
 8007fa0:	4013      	ands	r3, r2
 8007fa2:	d008      	beq.n	8007fb6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d004      	beq.n	8007fb6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	0010      	movs	r0, r2
 8007fb4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2280      	movs	r2, #128	; 0x80
 8007fba:	589b      	ldr	r3, [r3, r2]
 8007fbc:	2194      	movs	r1, #148	; 0x94
 8007fbe:	187a      	adds	r2, r7, r1
 8007fc0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	689b      	ldr	r3, [r3, #8]
 8007fc8:	2240      	movs	r2, #64	; 0x40
 8007fca:	4013      	ands	r3, r2
 8007fcc:	2b40      	cmp	r3, #64	; 0x40
 8007fce:	d004      	beq.n	8007fda <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007fd0:	187b      	adds	r3, r7, r1
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	2228      	movs	r2, #40	; 0x28
 8007fd6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007fd8:	d047      	beq.n	800806a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	0018      	movs	r0, r3
 8007fde:	f000 fda3 	bl	8008b28 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	2240      	movs	r2, #64	; 0x40
 8007fea:	4013      	ands	r3, r2
 8007fec:	2b40      	cmp	r3, #64	; 0x40
 8007fee:	d137      	bne.n	8008060 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ff0:	f3ef 8310 	mrs	r3, PRIMASK
 8007ff4:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8007ff6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ff8:	2090      	movs	r0, #144	; 0x90
 8007ffa:	183a      	adds	r2, r7, r0
 8007ffc:	6013      	str	r3, [r2, #0]
 8007ffe:	2301      	movs	r3, #1
 8008000:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008002:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008004:	f383 8810 	msr	PRIMASK, r3
}
 8008008:	46c0      	nop			; (mov r8, r8)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	689a      	ldr	r2, [r3, #8]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	2140      	movs	r1, #64	; 0x40
 8008016:	438a      	bics	r2, r1
 8008018:	609a      	str	r2, [r3, #8]
 800801a:	183b      	adds	r3, r7, r0
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008020:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008022:	f383 8810 	msr	PRIMASK, r3
}
 8008026:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800802c:	2b00      	cmp	r3, #0
 800802e:	d012      	beq.n	8008056 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008034:	4a14      	ldr	r2, [pc, #80]	; (8008088 <HAL_UART_IRQHandler+0x2a0>)
 8008036:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800803c:	0018      	movs	r0, r3
 800803e:	f7fd fab8 	bl	80055b2 <HAL_DMA_Abort_IT>
 8008042:	1e03      	subs	r3, r0, #0
 8008044:	d01a      	beq.n	800807c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800804a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008050:	0018      	movs	r0, r3
 8008052:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008054:	e012      	b.n	800807c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	0018      	movs	r0, r3
 800805a:	f000 f995 	bl	8008388 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800805e:	e00d      	b.n	800807c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	0018      	movs	r0, r3
 8008064:	f000 f990 	bl	8008388 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008068:	e008      	b.n	800807c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	0018      	movs	r0, r3
 800806e:	f000 f98b 	bl	8008388 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2280      	movs	r2, #128	; 0x80
 8008076:	2100      	movs	r1, #0
 8008078:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800807a:	e167      	b.n	800834c <HAL_UART_IRQHandler+0x564>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800807c:	46c0      	nop			; (mov r8, r8)
    return;
 800807e:	e165      	b.n	800834c <HAL_UART_IRQHandler+0x564>
 8008080:	0000080f 	.word	0x0000080f
 8008084:	04000120 	.word	0x04000120
 8008088:	08008bed 	.word	0x08008bed

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008090:	2b01      	cmp	r3, #1
 8008092:	d000      	beq.n	8008096 <HAL_UART_IRQHandler+0x2ae>
 8008094:	e131      	b.n	80082fa <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008096:	23a4      	movs	r3, #164	; 0xa4
 8008098:	18fb      	adds	r3, r7, r3
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	2210      	movs	r2, #16
 800809e:	4013      	ands	r3, r2
 80080a0:	d100      	bne.n	80080a4 <HAL_UART_IRQHandler+0x2bc>
 80080a2:	e12a      	b.n	80082fa <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80080a4:	23a0      	movs	r3, #160	; 0xa0
 80080a6:	18fb      	adds	r3, r7, r3
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	2210      	movs	r2, #16
 80080ac:	4013      	ands	r3, r2
 80080ae:	d100      	bne.n	80080b2 <HAL_UART_IRQHandler+0x2ca>
 80080b0:	e123      	b.n	80082fa <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	2210      	movs	r2, #16
 80080b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	2240      	movs	r2, #64	; 0x40
 80080c2:	4013      	ands	r3, r2
 80080c4:	2b40      	cmp	r3, #64	; 0x40
 80080c6:	d000      	beq.n	80080ca <HAL_UART_IRQHandler+0x2e2>
 80080c8:	e09b      	b.n	8008202 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	685a      	ldr	r2, [r3, #4]
 80080d2:	217e      	movs	r1, #126	; 0x7e
 80080d4:	187b      	adds	r3, r7, r1
 80080d6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80080d8:	187b      	adds	r3, r7, r1
 80080da:	881b      	ldrh	r3, [r3, #0]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d100      	bne.n	80080e2 <HAL_UART_IRQHandler+0x2fa>
 80080e0:	e136      	b.n	8008350 <HAL_UART_IRQHandler+0x568>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2258      	movs	r2, #88	; 0x58
 80080e6:	5a9b      	ldrh	r3, [r3, r2]
 80080e8:	187a      	adds	r2, r7, r1
 80080ea:	8812      	ldrh	r2, [r2, #0]
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d300      	bcc.n	80080f2 <HAL_UART_IRQHandler+0x30a>
 80080f0:	e12e      	b.n	8008350 <HAL_UART_IRQHandler+0x568>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	187a      	adds	r2, r7, r1
 80080f6:	215a      	movs	r1, #90	; 0x5a
 80080f8:	8812      	ldrh	r2, [r2, #0]
 80080fa:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008100:	699b      	ldr	r3, [r3, #24]
 8008102:	2b20      	cmp	r3, #32
 8008104:	d06e      	beq.n	80081e4 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008106:	f3ef 8310 	mrs	r3, PRIMASK
 800810a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800810c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800810e:	67bb      	str	r3, [r7, #120]	; 0x78
 8008110:	2301      	movs	r3, #1
 8008112:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008116:	f383 8810 	msr	PRIMASK, r3
}
 800811a:	46c0      	nop			; (mov r8, r8)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	498e      	ldr	r1, [pc, #568]	; (8008360 <HAL_UART_IRQHandler+0x578>)
 8008128:	400a      	ands	r2, r1
 800812a:	601a      	str	r2, [r3, #0]
 800812c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800812e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008132:	f383 8810 	msr	PRIMASK, r3
}
 8008136:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008138:	f3ef 8310 	mrs	r3, PRIMASK
 800813c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800813e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008140:	677b      	str	r3, [r7, #116]	; 0x74
 8008142:	2301      	movs	r3, #1
 8008144:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008148:	f383 8810 	msr	PRIMASK, r3
}
 800814c:	46c0      	nop			; (mov r8, r8)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	689a      	ldr	r2, [r3, #8]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	2101      	movs	r1, #1
 800815a:	438a      	bics	r2, r1
 800815c:	609a      	str	r2, [r3, #8]
 800815e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008160:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008162:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008164:	f383 8810 	msr	PRIMASK, r3
}
 8008168:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800816a:	f3ef 8310 	mrs	r3, PRIMASK
 800816e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8008170:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008172:	673b      	str	r3, [r7, #112]	; 0x70
 8008174:	2301      	movs	r3, #1
 8008176:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008178:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800817a:	f383 8810 	msr	PRIMASK, r3
}
 800817e:	46c0      	nop			; (mov r8, r8)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	689a      	ldr	r2, [r3, #8]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	2140      	movs	r1, #64	; 0x40
 800818c:	438a      	bics	r2, r1
 800818e:	609a      	str	r2, [r3, #8]
 8008190:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008192:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008194:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008196:	f383 8810 	msr	PRIMASK, r3
}
 800819a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2220      	movs	r2, #32
 80081a0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081a8:	f3ef 8310 	mrs	r3, PRIMASK
 80081ac:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80081ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80081b2:	2301      	movs	r3, #1
 80081b4:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80081b8:	f383 8810 	msr	PRIMASK, r3
}
 80081bc:	46c0      	nop			; (mov r8, r8)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	681a      	ldr	r2, [r3, #0]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	2110      	movs	r1, #16
 80081ca:	438a      	bics	r2, r1
 80081cc:	601a      	str	r2, [r3, #0]
 80081ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081d4:	f383 8810 	msr	PRIMASK, r3
}
 80081d8:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081de:	0018      	movs	r0, r3
 80081e0:	f7fd f9af 	bl	8005542 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2258      	movs	r2, #88	; 0x58
 80081e8:	5a9a      	ldrh	r2, [r3, r2]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	215a      	movs	r1, #90	; 0x5a
 80081ee:	5a5b      	ldrh	r3, [r3, r1]
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	1ad3      	subs	r3, r2, r3
 80081f4:	b29a      	uxth	r2, r3
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	0011      	movs	r1, r2
 80081fa:	0018      	movs	r0, r3
 80081fc:	f7fb fb42 	bl	8003884 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008200:	e0a6      	b.n	8008350 <HAL_UART_IRQHandler+0x568>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2258      	movs	r2, #88	; 0x58
 8008206:	5a99      	ldrh	r1, [r3, r2]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	225a      	movs	r2, #90	; 0x5a
 800820c:	5a9b      	ldrh	r3, [r3, r2]
 800820e:	b29a      	uxth	r2, r3
 8008210:	208e      	movs	r0, #142	; 0x8e
 8008212:	183b      	adds	r3, r7, r0
 8008214:	1a8a      	subs	r2, r1, r2
 8008216:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	225a      	movs	r2, #90	; 0x5a
 800821c:	5a9b      	ldrh	r3, [r3, r2]
 800821e:	b29b      	uxth	r3, r3
 8008220:	2b00      	cmp	r3, #0
 8008222:	d100      	bne.n	8008226 <HAL_UART_IRQHandler+0x43e>
 8008224:	e096      	b.n	8008354 <HAL_UART_IRQHandler+0x56c>
          && (nb_rx_data > 0U))
 8008226:	183b      	adds	r3, r7, r0
 8008228:	881b      	ldrh	r3, [r3, #0]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d100      	bne.n	8008230 <HAL_UART_IRQHandler+0x448>
 800822e:	e091      	b.n	8008354 <HAL_UART_IRQHandler+0x56c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008230:	f3ef 8310 	mrs	r3, PRIMASK
 8008234:	60fb      	str	r3, [r7, #12]
  return(result);
 8008236:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008238:	2488      	movs	r4, #136	; 0x88
 800823a:	193a      	adds	r2, r7, r4
 800823c:	6013      	str	r3, [r2, #0]
 800823e:	2301      	movs	r3, #1
 8008240:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	f383 8810 	msr	PRIMASK, r3
}
 8008248:	46c0      	nop			; (mov r8, r8)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4943      	ldr	r1, [pc, #268]	; (8008364 <HAL_UART_IRQHandler+0x57c>)
 8008256:	400a      	ands	r2, r1
 8008258:	601a      	str	r2, [r3, #0]
 800825a:	193b      	adds	r3, r7, r4
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	f383 8810 	msr	PRIMASK, r3
}
 8008266:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008268:	f3ef 8310 	mrs	r3, PRIMASK
 800826c:	61bb      	str	r3, [r7, #24]
  return(result);
 800826e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008270:	2484      	movs	r4, #132	; 0x84
 8008272:	193a      	adds	r2, r7, r4
 8008274:	6013      	str	r3, [r2, #0]
 8008276:	2301      	movs	r3, #1
 8008278:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800827a:	69fb      	ldr	r3, [r7, #28]
 800827c:	f383 8810 	msr	PRIMASK, r3
}
 8008280:	46c0      	nop			; (mov r8, r8)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	689a      	ldr	r2, [r3, #8]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	2101      	movs	r1, #1
 800828e:	438a      	bics	r2, r1
 8008290:	609a      	str	r2, [r3, #8]
 8008292:	193b      	adds	r3, r7, r4
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008298:	6a3b      	ldr	r3, [r7, #32]
 800829a:	f383 8810 	msr	PRIMASK, r3
}
 800829e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2220      	movs	r2, #32
 80082a4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2200      	movs	r2, #0
 80082aa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082b2:	f3ef 8310 	mrs	r3, PRIMASK
 80082b6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80082b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082ba:	2480      	movs	r4, #128	; 0x80
 80082bc:	193a      	adds	r2, r7, r4
 80082be:	6013      	str	r3, [r2, #0]
 80082c0:	2301      	movs	r3, #1
 80082c2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c6:	f383 8810 	msr	PRIMASK, r3
}
 80082ca:	46c0      	nop			; (mov r8, r8)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	681a      	ldr	r2, [r3, #0]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	2110      	movs	r1, #16
 80082d8:	438a      	bics	r2, r1
 80082da:	601a      	str	r2, [r3, #0]
 80082dc:	193b      	adds	r3, r7, r4
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e4:	f383 8810 	msr	PRIMASK, r3
}
 80082e8:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80082ea:	183b      	adds	r3, r7, r0
 80082ec:	881a      	ldrh	r2, [r3, #0]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	0011      	movs	r1, r2
 80082f2:	0018      	movs	r0, r3
 80082f4:	f7fb fac6 	bl	8003884 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80082f8:	e02c      	b.n	8008354 <HAL_UART_IRQHandler+0x56c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80082fa:	23a4      	movs	r3, #164	; 0xa4
 80082fc:	18fb      	adds	r3, r7, r3
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	2280      	movs	r2, #128	; 0x80
 8008302:	4013      	ands	r3, r2
 8008304:	d00f      	beq.n	8008326 <HAL_UART_IRQHandler+0x53e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008306:	23a0      	movs	r3, #160	; 0xa0
 8008308:	18fb      	adds	r3, r7, r3
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	2280      	movs	r2, #128	; 0x80
 800830e:	4013      	ands	r3, r2
 8008310:	d009      	beq.n	8008326 <HAL_UART_IRQHandler+0x53e>
  {
    if (huart->TxISR != NULL)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008316:	2b00      	cmp	r3, #0
 8008318:	d01e      	beq.n	8008358 <HAL_UART_IRQHandler+0x570>
    {
      huart->TxISR(huart);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	0010      	movs	r0, r2
 8008322:	4798      	blx	r3
    }
    return;
 8008324:	e018      	b.n	8008358 <HAL_UART_IRQHandler+0x570>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008326:	23a4      	movs	r3, #164	; 0xa4
 8008328:	18fb      	adds	r3, r7, r3
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	2240      	movs	r2, #64	; 0x40
 800832e:	4013      	ands	r3, r2
 8008330:	d013      	beq.n	800835a <HAL_UART_IRQHandler+0x572>
 8008332:	23a0      	movs	r3, #160	; 0xa0
 8008334:	18fb      	adds	r3, r7, r3
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	2240      	movs	r2, #64	; 0x40
 800833a:	4013      	ands	r3, r2
 800833c:	d00d      	beq.n	800835a <HAL_UART_IRQHandler+0x572>
  {
    UART_EndTransmit_IT(huart);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	0018      	movs	r0, r3
 8008342:	f000 fc6a 	bl	8008c1a <UART_EndTransmit_IT>
    return;
 8008346:	e008      	b.n	800835a <HAL_UART_IRQHandler+0x572>
      return;
 8008348:	46c0      	nop			; (mov r8, r8)
 800834a:	e006      	b.n	800835a <HAL_UART_IRQHandler+0x572>
    return;
 800834c:	46c0      	nop			; (mov r8, r8)
 800834e:	e004      	b.n	800835a <HAL_UART_IRQHandler+0x572>
      return;
 8008350:	46c0      	nop			; (mov r8, r8)
 8008352:	e002      	b.n	800835a <HAL_UART_IRQHandler+0x572>
      return;
 8008354:	46c0      	nop			; (mov r8, r8)
 8008356:	e000      	b.n	800835a <HAL_UART_IRQHandler+0x572>
    return;
 8008358:	46c0      	nop			; (mov r8, r8)
  }

}
 800835a:	46bd      	mov	sp, r7
 800835c:	b02b      	add	sp, #172	; 0xac
 800835e:	bd90      	pop	{r4, r7, pc}
 8008360:	fffffeff 	.word	0xfffffeff
 8008364:	fffffedf 	.word	0xfffffedf

08008368 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008370:	46c0      	nop			; (mov r8, r8)
 8008372:	46bd      	mov	sp, r7
 8008374:	b002      	add	sp, #8
 8008376:	bd80      	pop	{r7, pc}

08008378 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008380:	46c0      	nop			; (mov r8, r8)
 8008382:	46bd      	mov	sp, r7
 8008384:	b002      	add	sp, #8
 8008386:	bd80      	pop	{r7, pc}

08008388 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b082      	sub	sp, #8
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008390:	46c0      	nop			; (mov r8, r8)
 8008392:	46bd      	mov	sp, r7
 8008394:	b002      	add	sp, #8
 8008396:	bd80      	pop	{r7, pc}

08008398 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b088      	sub	sp, #32
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80083a0:	231e      	movs	r3, #30
 80083a2:	18fb      	adds	r3, r7, r3
 80083a4:	2200      	movs	r2, #0
 80083a6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	689a      	ldr	r2, [r3, #8]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	691b      	ldr	r3, [r3, #16]
 80083b0:	431a      	orrs	r2, r3
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	695b      	ldr	r3, [r3, #20]
 80083b6:	431a      	orrs	r2, r3
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	69db      	ldr	r3, [r3, #28]
 80083bc:	4313      	orrs	r3, r2
 80083be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a97      	ldr	r2, [pc, #604]	; (8008624 <UART_SetConfig+0x28c>)
 80083c8:	4013      	ands	r3, r2
 80083ca:	0019      	movs	r1, r3
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	697a      	ldr	r2, [r7, #20]
 80083d2:	430a      	orrs	r2, r1
 80083d4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	4a92      	ldr	r2, [pc, #584]	; (8008628 <UART_SetConfig+0x290>)
 80083de:	4013      	ands	r3, r2
 80083e0:	0019      	movs	r1, r3
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	68da      	ldr	r2, [r3, #12]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	430a      	orrs	r2, r1
 80083ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	699b      	ldr	r3, [r3, #24]
 80083f2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6a1b      	ldr	r3, [r3, #32]
 80083f8:	697a      	ldr	r2, [r7, #20]
 80083fa:	4313      	orrs	r3, r2
 80083fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	4a89      	ldr	r2, [pc, #548]	; (800862c <UART_SetConfig+0x294>)
 8008406:	4013      	ands	r3, r2
 8008408:	0019      	movs	r1, r3
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	697a      	ldr	r2, [r7, #20]
 8008410:	430a      	orrs	r2, r1
 8008412:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a85      	ldr	r2, [pc, #532]	; (8008630 <UART_SetConfig+0x298>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d127      	bne.n	800846e <UART_SetConfig+0xd6>
 800841e:	4b85      	ldr	r3, [pc, #532]	; (8008634 <UART_SetConfig+0x29c>)
 8008420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008422:	2203      	movs	r2, #3
 8008424:	4013      	ands	r3, r2
 8008426:	2b03      	cmp	r3, #3
 8008428:	d00d      	beq.n	8008446 <UART_SetConfig+0xae>
 800842a:	d81b      	bhi.n	8008464 <UART_SetConfig+0xcc>
 800842c:	2b02      	cmp	r3, #2
 800842e:	d014      	beq.n	800845a <UART_SetConfig+0xc2>
 8008430:	d818      	bhi.n	8008464 <UART_SetConfig+0xcc>
 8008432:	2b00      	cmp	r3, #0
 8008434:	d002      	beq.n	800843c <UART_SetConfig+0xa4>
 8008436:	2b01      	cmp	r3, #1
 8008438:	d00a      	beq.n	8008450 <UART_SetConfig+0xb8>
 800843a:	e013      	b.n	8008464 <UART_SetConfig+0xcc>
 800843c:	231f      	movs	r3, #31
 800843e:	18fb      	adds	r3, r7, r3
 8008440:	2200      	movs	r2, #0
 8008442:	701a      	strb	r2, [r3, #0]
 8008444:	e035      	b.n	80084b2 <UART_SetConfig+0x11a>
 8008446:	231f      	movs	r3, #31
 8008448:	18fb      	adds	r3, r7, r3
 800844a:	2202      	movs	r2, #2
 800844c:	701a      	strb	r2, [r3, #0]
 800844e:	e030      	b.n	80084b2 <UART_SetConfig+0x11a>
 8008450:	231f      	movs	r3, #31
 8008452:	18fb      	adds	r3, r7, r3
 8008454:	2204      	movs	r2, #4
 8008456:	701a      	strb	r2, [r3, #0]
 8008458:	e02b      	b.n	80084b2 <UART_SetConfig+0x11a>
 800845a:	231f      	movs	r3, #31
 800845c:	18fb      	adds	r3, r7, r3
 800845e:	2208      	movs	r2, #8
 8008460:	701a      	strb	r2, [r3, #0]
 8008462:	e026      	b.n	80084b2 <UART_SetConfig+0x11a>
 8008464:	231f      	movs	r3, #31
 8008466:	18fb      	adds	r3, r7, r3
 8008468:	2210      	movs	r2, #16
 800846a:	701a      	strb	r2, [r3, #0]
 800846c:	e021      	b.n	80084b2 <UART_SetConfig+0x11a>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a71      	ldr	r2, [pc, #452]	; (8008638 <UART_SetConfig+0x2a0>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d104      	bne.n	8008482 <UART_SetConfig+0xea>
 8008478:	231f      	movs	r3, #31
 800847a:	18fb      	adds	r3, r7, r3
 800847c:	2200      	movs	r2, #0
 800847e:	701a      	strb	r2, [r3, #0]
 8008480:	e017      	b.n	80084b2 <UART_SetConfig+0x11a>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a6d      	ldr	r2, [pc, #436]	; (800863c <UART_SetConfig+0x2a4>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d104      	bne.n	8008496 <UART_SetConfig+0xfe>
 800848c:	231f      	movs	r3, #31
 800848e:	18fb      	adds	r3, r7, r3
 8008490:	2200      	movs	r2, #0
 8008492:	701a      	strb	r2, [r3, #0]
 8008494:	e00d      	b.n	80084b2 <UART_SetConfig+0x11a>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a69      	ldr	r2, [pc, #420]	; (8008640 <UART_SetConfig+0x2a8>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d104      	bne.n	80084aa <UART_SetConfig+0x112>
 80084a0:	231f      	movs	r3, #31
 80084a2:	18fb      	adds	r3, r7, r3
 80084a4:	2200      	movs	r2, #0
 80084a6:	701a      	strb	r2, [r3, #0]
 80084a8:	e003      	b.n	80084b2 <UART_SetConfig+0x11a>
 80084aa:	231f      	movs	r3, #31
 80084ac:	18fb      	adds	r3, r7, r3
 80084ae:	2210      	movs	r2, #16
 80084b0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	69da      	ldr	r2, [r3, #28]
 80084b6:	2380      	movs	r3, #128	; 0x80
 80084b8:	021b      	lsls	r3, r3, #8
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d15d      	bne.n	800857a <UART_SetConfig+0x1e2>
  {
    switch (clocksource)
 80084be:	231f      	movs	r3, #31
 80084c0:	18fb      	adds	r3, r7, r3
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	2b08      	cmp	r3, #8
 80084c6:	d015      	beq.n	80084f4 <UART_SetConfig+0x15c>
 80084c8:	dc18      	bgt.n	80084fc <UART_SetConfig+0x164>
 80084ca:	2b04      	cmp	r3, #4
 80084cc:	d00d      	beq.n	80084ea <UART_SetConfig+0x152>
 80084ce:	dc15      	bgt.n	80084fc <UART_SetConfig+0x164>
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d002      	beq.n	80084da <UART_SetConfig+0x142>
 80084d4:	2b02      	cmp	r3, #2
 80084d6:	d005      	beq.n	80084e4 <UART_SetConfig+0x14c>
 80084d8:	e010      	b.n	80084fc <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084da:	f7fe fa5b 	bl	8006994 <HAL_RCC_GetPCLK1Freq>
 80084de:	0003      	movs	r3, r0
 80084e0:	61bb      	str	r3, [r7, #24]
        break;
 80084e2:	e012      	b.n	800850a <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80084e4:	4b57      	ldr	r3, [pc, #348]	; (8008644 <UART_SetConfig+0x2ac>)
 80084e6:	61bb      	str	r3, [r7, #24]
        break;
 80084e8:	e00f      	b.n	800850a <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80084ea:	f7fe f9e3 	bl	80068b4 <HAL_RCC_GetSysClockFreq>
 80084ee:	0003      	movs	r3, r0
 80084f0:	61bb      	str	r3, [r7, #24]
        break;
 80084f2:	e00a      	b.n	800850a <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084f4:	2380      	movs	r3, #128	; 0x80
 80084f6:	021b      	lsls	r3, r3, #8
 80084f8:	61bb      	str	r3, [r7, #24]
        break;
 80084fa:	e006      	b.n	800850a <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 80084fc:	2300      	movs	r3, #0
 80084fe:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008500:	231e      	movs	r3, #30
 8008502:	18fb      	adds	r3, r7, r3
 8008504:	2201      	movs	r2, #1
 8008506:	701a      	strb	r2, [r3, #0]
        break;
 8008508:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800850a:	69bb      	ldr	r3, [r7, #24]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d100      	bne.n	8008512 <UART_SetConfig+0x17a>
 8008510:	e07b      	b.n	800860a <UART_SetConfig+0x272>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008512:	69bb      	ldr	r3, [r7, #24]
 8008514:	005a      	lsls	r2, r3, #1
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	085b      	lsrs	r3, r3, #1
 800851c:	18d2      	adds	r2, r2, r3
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	0019      	movs	r1, r3
 8008524:	0010      	movs	r0, r2
 8008526:	f7f7 fe0b 	bl	8000140 <__udivsi3>
 800852a:	0003      	movs	r3, r0
 800852c:	b29b      	uxth	r3, r3
 800852e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	2b0f      	cmp	r3, #15
 8008534:	d91c      	bls.n	8008570 <UART_SetConfig+0x1d8>
 8008536:	693a      	ldr	r2, [r7, #16]
 8008538:	2380      	movs	r3, #128	; 0x80
 800853a:	025b      	lsls	r3, r3, #9
 800853c:	429a      	cmp	r2, r3
 800853e:	d217      	bcs.n	8008570 <UART_SetConfig+0x1d8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	b29a      	uxth	r2, r3
 8008544:	200e      	movs	r0, #14
 8008546:	183b      	adds	r3, r7, r0
 8008548:	210f      	movs	r1, #15
 800854a:	438a      	bics	r2, r1
 800854c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	085b      	lsrs	r3, r3, #1
 8008552:	b29b      	uxth	r3, r3
 8008554:	2207      	movs	r2, #7
 8008556:	4013      	ands	r3, r2
 8008558:	b299      	uxth	r1, r3
 800855a:	183b      	adds	r3, r7, r0
 800855c:	183a      	adds	r2, r7, r0
 800855e:	8812      	ldrh	r2, [r2, #0]
 8008560:	430a      	orrs	r2, r1
 8008562:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	183a      	adds	r2, r7, r0
 800856a:	8812      	ldrh	r2, [r2, #0]
 800856c:	60da      	str	r2, [r3, #12]
 800856e:	e04c      	b.n	800860a <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 8008570:	231e      	movs	r3, #30
 8008572:	18fb      	adds	r3, r7, r3
 8008574:	2201      	movs	r2, #1
 8008576:	701a      	strb	r2, [r3, #0]
 8008578:	e047      	b.n	800860a <UART_SetConfig+0x272>
      }
    }
  }
  else
  {
    switch (clocksource)
 800857a:	231f      	movs	r3, #31
 800857c:	18fb      	adds	r3, r7, r3
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	2b08      	cmp	r3, #8
 8008582:	d015      	beq.n	80085b0 <UART_SetConfig+0x218>
 8008584:	dc18      	bgt.n	80085b8 <UART_SetConfig+0x220>
 8008586:	2b04      	cmp	r3, #4
 8008588:	d00d      	beq.n	80085a6 <UART_SetConfig+0x20e>
 800858a:	dc15      	bgt.n	80085b8 <UART_SetConfig+0x220>
 800858c:	2b00      	cmp	r3, #0
 800858e:	d002      	beq.n	8008596 <UART_SetConfig+0x1fe>
 8008590:	2b02      	cmp	r3, #2
 8008592:	d005      	beq.n	80085a0 <UART_SetConfig+0x208>
 8008594:	e010      	b.n	80085b8 <UART_SetConfig+0x220>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008596:	f7fe f9fd 	bl	8006994 <HAL_RCC_GetPCLK1Freq>
 800859a:	0003      	movs	r3, r0
 800859c:	61bb      	str	r3, [r7, #24]
        break;
 800859e:	e012      	b.n	80085c6 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80085a0:	4b28      	ldr	r3, [pc, #160]	; (8008644 <UART_SetConfig+0x2ac>)
 80085a2:	61bb      	str	r3, [r7, #24]
        break;
 80085a4:	e00f      	b.n	80085c6 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80085a6:	f7fe f985 	bl	80068b4 <HAL_RCC_GetSysClockFreq>
 80085aa:	0003      	movs	r3, r0
 80085ac:	61bb      	str	r3, [r7, #24]
        break;
 80085ae:	e00a      	b.n	80085c6 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085b0:	2380      	movs	r3, #128	; 0x80
 80085b2:	021b      	lsls	r3, r3, #8
 80085b4:	61bb      	str	r3, [r7, #24]
        break;
 80085b6:	e006      	b.n	80085c6 <UART_SetConfig+0x22e>
      default:
        pclk = 0U;
 80085b8:	2300      	movs	r3, #0
 80085ba:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80085bc:	231e      	movs	r3, #30
 80085be:	18fb      	adds	r3, r7, r3
 80085c0:	2201      	movs	r2, #1
 80085c2:	701a      	strb	r2, [r3, #0]
        break;
 80085c4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80085c6:	69bb      	ldr	r3, [r7, #24]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d01e      	beq.n	800860a <UART_SetConfig+0x272>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	085a      	lsrs	r2, r3, #1
 80085d2:	69bb      	ldr	r3, [r7, #24]
 80085d4:	18d2      	adds	r2, r2, r3
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	0019      	movs	r1, r3
 80085dc:	0010      	movs	r0, r2
 80085de:	f7f7 fdaf 	bl	8000140 <__udivsi3>
 80085e2:	0003      	movs	r3, r0
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	2b0f      	cmp	r3, #15
 80085ec:	d909      	bls.n	8008602 <UART_SetConfig+0x26a>
 80085ee:	693a      	ldr	r2, [r7, #16]
 80085f0:	2380      	movs	r3, #128	; 0x80
 80085f2:	025b      	lsls	r3, r3, #9
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d204      	bcs.n	8008602 <UART_SetConfig+0x26a>
      {
        huart->Instance->BRR = usartdiv;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	693a      	ldr	r2, [r7, #16]
 80085fe:	60da      	str	r2, [r3, #12]
 8008600:	e003      	b.n	800860a <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 8008602:	231e      	movs	r3, #30
 8008604:	18fb      	adds	r3, r7, r3
 8008606:	2201      	movs	r2, #1
 8008608:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2200      	movs	r2, #0
 800860e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2200      	movs	r2, #0
 8008614:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008616:	231e      	movs	r3, #30
 8008618:	18fb      	adds	r3, r7, r3
 800861a:	781b      	ldrb	r3, [r3, #0]
}
 800861c:	0018      	movs	r0, r3
 800861e:	46bd      	mov	sp, r7
 8008620:	b008      	add	sp, #32
 8008622:	bd80      	pop	{r7, pc}
 8008624:	efff69f3 	.word	0xefff69f3
 8008628:	ffffcfff 	.word	0xffffcfff
 800862c:	fffff4ff 	.word	0xfffff4ff
 8008630:	40013800 	.word	0x40013800
 8008634:	40021000 	.word	0x40021000
 8008638:	40004400 	.word	0x40004400
 800863c:	40004800 	.word	0x40004800
 8008640:	40004c00 	.word	0x40004c00
 8008644:	007a1200 	.word	0x007a1200

08008648 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b082      	sub	sp, #8
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008654:	2201      	movs	r2, #1
 8008656:	4013      	ands	r3, r2
 8008658:	d00b      	beq.n	8008672 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	4a4a      	ldr	r2, [pc, #296]	; (800878c <UART_AdvFeatureConfig+0x144>)
 8008662:	4013      	ands	r3, r2
 8008664:	0019      	movs	r1, r3
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	430a      	orrs	r2, r1
 8008670:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008676:	2202      	movs	r2, #2
 8008678:	4013      	ands	r3, r2
 800867a:	d00b      	beq.n	8008694 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	4a43      	ldr	r2, [pc, #268]	; (8008790 <UART_AdvFeatureConfig+0x148>)
 8008684:	4013      	ands	r3, r2
 8008686:	0019      	movs	r1, r3
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	430a      	orrs	r2, r1
 8008692:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008698:	2204      	movs	r2, #4
 800869a:	4013      	ands	r3, r2
 800869c:	d00b      	beq.n	80086b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	4a3b      	ldr	r2, [pc, #236]	; (8008794 <UART_AdvFeatureConfig+0x14c>)
 80086a6:	4013      	ands	r3, r2
 80086a8:	0019      	movs	r1, r3
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	430a      	orrs	r2, r1
 80086b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ba:	2208      	movs	r2, #8
 80086bc:	4013      	ands	r3, r2
 80086be:	d00b      	beq.n	80086d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	4a34      	ldr	r2, [pc, #208]	; (8008798 <UART_AdvFeatureConfig+0x150>)
 80086c8:	4013      	ands	r3, r2
 80086ca:	0019      	movs	r1, r3
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	430a      	orrs	r2, r1
 80086d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086dc:	2210      	movs	r2, #16
 80086de:	4013      	ands	r3, r2
 80086e0:	d00b      	beq.n	80086fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	689b      	ldr	r3, [r3, #8]
 80086e8:	4a2c      	ldr	r2, [pc, #176]	; (800879c <UART_AdvFeatureConfig+0x154>)
 80086ea:	4013      	ands	r3, r2
 80086ec:	0019      	movs	r1, r3
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	430a      	orrs	r2, r1
 80086f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086fe:	2220      	movs	r2, #32
 8008700:	4013      	ands	r3, r2
 8008702:	d00b      	beq.n	800871c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	689b      	ldr	r3, [r3, #8]
 800870a:	4a25      	ldr	r2, [pc, #148]	; (80087a0 <UART_AdvFeatureConfig+0x158>)
 800870c:	4013      	ands	r3, r2
 800870e:	0019      	movs	r1, r3
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	430a      	orrs	r2, r1
 800871a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008720:	2240      	movs	r2, #64	; 0x40
 8008722:	4013      	ands	r3, r2
 8008724:	d01d      	beq.n	8008762 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	4a1d      	ldr	r2, [pc, #116]	; (80087a4 <UART_AdvFeatureConfig+0x15c>)
 800872e:	4013      	ands	r3, r2
 8008730:	0019      	movs	r1, r3
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	430a      	orrs	r2, r1
 800873c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008742:	2380      	movs	r3, #128	; 0x80
 8008744:	035b      	lsls	r3, r3, #13
 8008746:	429a      	cmp	r2, r3
 8008748:	d10b      	bne.n	8008762 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	4a15      	ldr	r2, [pc, #84]	; (80087a8 <UART_AdvFeatureConfig+0x160>)
 8008752:	4013      	ands	r3, r2
 8008754:	0019      	movs	r1, r3
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	430a      	orrs	r2, r1
 8008760:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008766:	2280      	movs	r2, #128	; 0x80
 8008768:	4013      	ands	r3, r2
 800876a:	d00b      	beq.n	8008784 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	4a0e      	ldr	r2, [pc, #56]	; (80087ac <UART_AdvFeatureConfig+0x164>)
 8008774:	4013      	ands	r3, r2
 8008776:	0019      	movs	r1, r3
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	430a      	orrs	r2, r1
 8008782:	605a      	str	r2, [r3, #4]
  }
}
 8008784:	46c0      	nop			; (mov r8, r8)
 8008786:	46bd      	mov	sp, r7
 8008788:	b002      	add	sp, #8
 800878a:	bd80      	pop	{r7, pc}
 800878c:	fffdffff 	.word	0xfffdffff
 8008790:	fffeffff 	.word	0xfffeffff
 8008794:	fffbffff 	.word	0xfffbffff
 8008798:	ffff7fff 	.word	0xffff7fff
 800879c:	ffffefff 	.word	0xffffefff
 80087a0:	ffffdfff 	.word	0xffffdfff
 80087a4:	ffefffff 	.word	0xffefffff
 80087a8:	ff9fffff 	.word	0xff9fffff
 80087ac:	fff7ffff 	.word	0xfff7ffff

080087b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b086      	sub	sp, #24
 80087b4:	af02      	add	r7, sp, #8
 80087b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2280      	movs	r2, #128	; 0x80
 80087bc:	2100      	movs	r1, #0
 80087be:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80087c0:	f7fc f858 	bl	8004874 <HAL_GetTick>
 80087c4:	0003      	movs	r3, r0
 80087c6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	2208      	movs	r2, #8
 80087d0:	4013      	ands	r3, r2
 80087d2:	2b08      	cmp	r3, #8
 80087d4:	d10c      	bne.n	80087f0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2280      	movs	r2, #128	; 0x80
 80087da:	0391      	lsls	r1, r2, #14
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	4a17      	ldr	r2, [pc, #92]	; (800883c <UART_CheckIdleState+0x8c>)
 80087e0:	9200      	str	r2, [sp, #0]
 80087e2:	2200      	movs	r2, #0
 80087e4:	f000 f82c 	bl	8008840 <UART_WaitOnFlagUntilTimeout>
 80087e8:	1e03      	subs	r3, r0, #0
 80087ea:	d001      	beq.n	80087f0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087ec:	2303      	movs	r3, #3
 80087ee:	e021      	b.n	8008834 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	2204      	movs	r2, #4
 80087f8:	4013      	ands	r3, r2
 80087fa:	2b04      	cmp	r3, #4
 80087fc:	d10c      	bne.n	8008818 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2280      	movs	r2, #128	; 0x80
 8008802:	03d1      	lsls	r1, r2, #15
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	4a0d      	ldr	r2, [pc, #52]	; (800883c <UART_CheckIdleState+0x8c>)
 8008808:	9200      	str	r2, [sp, #0]
 800880a:	2200      	movs	r2, #0
 800880c:	f000 f818 	bl	8008840 <UART_WaitOnFlagUntilTimeout>
 8008810:	1e03      	subs	r3, r0, #0
 8008812:	d001      	beq.n	8008818 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008814:	2303      	movs	r3, #3
 8008816:	e00d      	b.n	8008834 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2220      	movs	r2, #32
 800881c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2220      	movs	r2, #32
 8008822:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2200      	movs	r2, #0
 8008828:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2274      	movs	r2, #116	; 0x74
 800882e:	2100      	movs	r1, #0
 8008830:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008832:	2300      	movs	r3, #0
}
 8008834:	0018      	movs	r0, r3
 8008836:	46bd      	mov	sp, r7
 8008838:	b004      	add	sp, #16
 800883a:	bd80      	pop	{r7, pc}
 800883c:	01ffffff 	.word	0x01ffffff

08008840 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b094      	sub	sp, #80	; 0x50
 8008844:	af00      	add	r7, sp, #0
 8008846:	60f8      	str	r0, [r7, #12]
 8008848:	60b9      	str	r1, [r7, #8]
 800884a:	603b      	str	r3, [r7, #0]
 800884c:	1dfb      	adds	r3, r7, #7
 800884e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008850:	e0a3      	b.n	800899a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008852:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008854:	3301      	adds	r3, #1
 8008856:	d100      	bne.n	800885a <UART_WaitOnFlagUntilTimeout+0x1a>
 8008858:	e09f      	b.n	800899a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800885a:	f7fc f80b 	bl	8004874 <HAL_GetTick>
 800885e:	0002      	movs	r2, r0
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	1ad3      	subs	r3, r2, r3
 8008864:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008866:	429a      	cmp	r2, r3
 8008868:	d302      	bcc.n	8008870 <UART_WaitOnFlagUntilTimeout+0x30>
 800886a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800886c:	2b00      	cmp	r3, #0
 800886e:	d13d      	bne.n	80088ec <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008870:	f3ef 8310 	mrs	r3, PRIMASK
 8008874:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008876:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008878:	647b      	str	r3, [r7, #68]	; 0x44
 800887a:	2301      	movs	r3, #1
 800887c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800887e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008880:	f383 8810 	msr	PRIMASK, r3
}
 8008884:	46c0      	nop			; (mov r8, r8)
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	681a      	ldr	r2, [r3, #0]
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	494c      	ldr	r1, [pc, #304]	; (80089c4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8008892:	400a      	ands	r2, r1
 8008894:	601a      	str	r2, [r3, #0]
 8008896:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008898:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800889a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800889c:	f383 8810 	msr	PRIMASK, r3
}
 80088a0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088a2:	f3ef 8310 	mrs	r3, PRIMASK
 80088a6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80088a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088aa:	643b      	str	r3, [r7, #64]	; 0x40
 80088ac:	2301      	movs	r3, #1
 80088ae:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088b2:	f383 8810 	msr	PRIMASK, r3
}
 80088b6:	46c0      	nop			; (mov r8, r8)
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	689a      	ldr	r2, [r3, #8]
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	2101      	movs	r1, #1
 80088c4:	438a      	bics	r2, r1
 80088c6:	609a      	str	r2, [r3, #8]
 80088c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088ce:	f383 8810 	msr	PRIMASK, r3
}
 80088d2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2220      	movs	r2, #32
 80088d8:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2220      	movs	r2, #32
 80088de:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2274      	movs	r2, #116	; 0x74
 80088e4:	2100      	movs	r1, #0
 80088e6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80088e8:	2303      	movs	r3, #3
 80088ea:	e067      	b.n	80089bc <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	2204      	movs	r2, #4
 80088f4:	4013      	ands	r3, r2
 80088f6:	d050      	beq.n	800899a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	69da      	ldr	r2, [r3, #28]
 80088fe:	2380      	movs	r3, #128	; 0x80
 8008900:	011b      	lsls	r3, r3, #4
 8008902:	401a      	ands	r2, r3
 8008904:	2380      	movs	r3, #128	; 0x80
 8008906:	011b      	lsls	r3, r3, #4
 8008908:	429a      	cmp	r2, r3
 800890a:	d146      	bne.n	800899a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	2280      	movs	r2, #128	; 0x80
 8008912:	0112      	lsls	r2, r2, #4
 8008914:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008916:	f3ef 8310 	mrs	r3, PRIMASK
 800891a:	613b      	str	r3, [r7, #16]
  return(result);
 800891c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800891e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008920:	2301      	movs	r3, #1
 8008922:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	f383 8810 	msr	PRIMASK, r3
}
 800892a:	46c0      	nop			; (mov r8, r8)
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	681a      	ldr	r2, [r3, #0]
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4923      	ldr	r1, [pc, #140]	; (80089c4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8008938:	400a      	ands	r2, r1
 800893a:	601a      	str	r2, [r3, #0]
 800893c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800893e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008940:	69bb      	ldr	r3, [r7, #24]
 8008942:	f383 8810 	msr	PRIMASK, r3
}
 8008946:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008948:	f3ef 8310 	mrs	r3, PRIMASK
 800894c:	61fb      	str	r3, [r7, #28]
  return(result);
 800894e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008950:	64bb      	str	r3, [r7, #72]	; 0x48
 8008952:	2301      	movs	r3, #1
 8008954:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008956:	6a3b      	ldr	r3, [r7, #32]
 8008958:	f383 8810 	msr	PRIMASK, r3
}
 800895c:	46c0      	nop			; (mov r8, r8)
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	689a      	ldr	r2, [r3, #8]
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	2101      	movs	r1, #1
 800896a:	438a      	bics	r2, r1
 800896c:	609a      	str	r2, [r3, #8]
 800896e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008970:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008974:	f383 8810 	msr	PRIMASK, r3
}
 8008978:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2220      	movs	r2, #32
 800897e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2220      	movs	r2, #32
 8008984:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2280      	movs	r2, #128	; 0x80
 800898a:	2120      	movs	r1, #32
 800898c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2274      	movs	r2, #116	; 0x74
 8008992:	2100      	movs	r1, #0
 8008994:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008996:	2303      	movs	r3, #3
 8008998:	e010      	b.n	80089bc <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	69db      	ldr	r3, [r3, #28]
 80089a0:	68ba      	ldr	r2, [r7, #8]
 80089a2:	4013      	ands	r3, r2
 80089a4:	68ba      	ldr	r2, [r7, #8]
 80089a6:	1ad3      	subs	r3, r2, r3
 80089a8:	425a      	negs	r2, r3
 80089aa:	4153      	adcs	r3, r2
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	001a      	movs	r2, r3
 80089b0:	1dfb      	adds	r3, r7, #7
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d100      	bne.n	80089ba <UART_WaitOnFlagUntilTimeout+0x17a>
 80089b8:	e74b      	b.n	8008852 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80089ba:	2300      	movs	r3, #0
}
 80089bc:	0018      	movs	r0, r3
 80089be:	46bd      	mov	sp, r7
 80089c0:	b014      	add	sp, #80	; 0x50
 80089c2:	bd80      	pop	{r7, pc}
 80089c4:	fffffe5f 	.word	0xfffffe5f

080089c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b08c      	sub	sp, #48	; 0x30
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	60b9      	str	r1, [r7, #8]
 80089d2:	1dbb      	adds	r3, r7, #6
 80089d4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	68ba      	ldr	r2, [r7, #8]
 80089da:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	1dba      	adds	r2, r7, #6
 80089e0:	2158      	movs	r1, #88	; 0x58
 80089e2:	8812      	ldrh	r2, [r2, #0]
 80089e4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	1dba      	adds	r2, r7, #6
 80089ea:	215a      	movs	r1, #90	; 0x5a
 80089ec:	8812      	ldrh	r2, [r2, #0]
 80089ee:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2200      	movs	r2, #0
 80089f4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	689a      	ldr	r2, [r3, #8]
 80089fa:	2380      	movs	r3, #128	; 0x80
 80089fc:	015b      	lsls	r3, r3, #5
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d10d      	bne.n	8008a1e <UART_Start_Receive_IT+0x56>
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	691b      	ldr	r3, [r3, #16]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d104      	bne.n	8008a14 <UART_Start_Receive_IT+0x4c>
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	225c      	movs	r2, #92	; 0x5c
 8008a0e:	4943      	ldr	r1, [pc, #268]	; (8008b1c <UART_Start_Receive_IT+0x154>)
 8008a10:	5299      	strh	r1, [r3, r2]
 8008a12:	e02e      	b.n	8008a72 <UART_Start_Receive_IT+0xaa>
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	225c      	movs	r2, #92	; 0x5c
 8008a18:	21ff      	movs	r1, #255	; 0xff
 8008a1a:	5299      	strh	r1, [r3, r2]
 8008a1c:	e029      	b.n	8008a72 <UART_Start_Receive_IT+0xaa>
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	689b      	ldr	r3, [r3, #8]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d10d      	bne.n	8008a42 <UART_Start_Receive_IT+0x7a>
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	691b      	ldr	r3, [r3, #16]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d104      	bne.n	8008a38 <UART_Start_Receive_IT+0x70>
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	225c      	movs	r2, #92	; 0x5c
 8008a32:	21ff      	movs	r1, #255	; 0xff
 8008a34:	5299      	strh	r1, [r3, r2]
 8008a36:	e01c      	b.n	8008a72 <UART_Start_Receive_IT+0xaa>
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	225c      	movs	r2, #92	; 0x5c
 8008a3c:	217f      	movs	r1, #127	; 0x7f
 8008a3e:	5299      	strh	r1, [r3, r2]
 8008a40:	e017      	b.n	8008a72 <UART_Start_Receive_IT+0xaa>
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	689a      	ldr	r2, [r3, #8]
 8008a46:	2380      	movs	r3, #128	; 0x80
 8008a48:	055b      	lsls	r3, r3, #21
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d10d      	bne.n	8008a6a <UART_Start_Receive_IT+0xa2>
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	691b      	ldr	r3, [r3, #16]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d104      	bne.n	8008a60 <UART_Start_Receive_IT+0x98>
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	225c      	movs	r2, #92	; 0x5c
 8008a5a:	217f      	movs	r1, #127	; 0x7f
 8008a5c:	5299      	strh	r1, [r3, r2]
 8008a5e:	e008      	b.n	8008a72 <UART_Start_Receive_IT+0xaa>
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	225c      	movs	r2, #92	; 0x5c
 8008a64:	213f      	movs	r1, #63	; 0x3f
 8008a66:	5299      	strh	r1, [r3, r2]
 8008a68:	e003      	b.n	8008a72 <UART_Start_Receive_IT+0xaa>
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	225c      	movs	r2, #92	; 0x5c
 8008a6e:	2100      	movs	r1, #0
 8008a70:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2280      	movs	r2, #128	; 0x80
 8008a76:	2100      	movs	r1, #0
 8008a78:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2222      	movs	r2, #34	; 0x22
 8008a7e:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a80:	f3ef 8310 	mrs	r3, PRIMASK
 8008a84:	61fb      	str	r3, [r7, #28]
  return(result);
 8008a86:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a8e:	6a3b      	ldr	r3, [r7, #32]
 8008a90:	f383 8810 	msr	PRIMASK, r3
}
 8008a94:	46c0      	nop			; (mov r8, r8)
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	689a      	ldr	r2, [r3, #8]
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	2101      	movs	r1, #1
 8008aa2:	430a      	orrs	r2, r1
 8008aa4:	609a      	str	r2, [r3, #8]
 8008aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aac:	f383 8810 	msr	PRIMASK, r3
}
 8008ab0:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	689a      	ldr	r2, [r3, #8]
 8008ab6:	2380      	movs	r3, #128	; 0x80
 8008ab8:	015b      	lsls	r3, r3, #5
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d107      	bne.n	8008ace <UART_Start_Receive_IT+0x106>
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	691b      	ldr	r3, [r3, #16]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d103      	bne.n	8008ace <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	4a15      	ldr	r2, [pc, #84]	; (8008b20 <UART_Start_Receive_IT+0x158>)
 8008aca:	665a      	str	r2, [r3, #100]	; 0x64
 8008acc:	e002      	b.n	8008ad4 <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	4a14      	ldr	r2, [pc, #80]	; (8008b24 <UART_Start_Receive_IT+0x15c>)
 8008ad2:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2274      	movs	r2, #116	; 0x74
 8008ad8:	2100      	movs	r1, #0
 8008ada:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008adc:	f3ef 8310 	mrs	r3, PRIMASK
 8008ae0:	613b      	str	r3, [r7, #16]
  return(result);
 8008ae2:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008ae4:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	f383 8810 	msr	PRIMASK, r3
}
 8008af0:	46c0      	nop			; (mov r8, r8)
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	681a      	ldr	r2, [r3, #0]
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	2190      	movs	r1, #144	; 0x90
 8008afe:	0049      	lsls	r1, r1, #1
 8008b00:	430a      	orrs	r2, r1
 8008b02:	601a      	str	r2, [r3, #0]
 8008b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b06:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b08:	69bb      	ldr	r3, [r7, #24]
 8008b0a:	f383 8810 	msr	PRIMASK, r3
}
 8008b0e:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8008b10:	2300      	movs	r3, #0
}
 8008b12:	0018      	movs	r0, r3
 8008b14:	46bd      	mov	sp, r7
 8008b16:	b00c      	add	sp, #48	; 0x30
 8008b18:	bd80      	pop	{r7, pc}
 8008b1a:	46c0      	nop			; (mov r8, r8)
 8008b1c:	000001ff 	.word	0x000001ff
 8008b20:	08008dd9 	.word	0x08008dd9
 8008b24:	08008c71 	.word	0x08008c71

08008b28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b08e      	sub	sp, #56	; 0x38
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b30:	f3ef 8310 	mrs	r3, PRIMASK
 8008b34:	617b      	str	r3, [r7, #20]
  return(result);
 8008b36:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b38:	637b      	str	r3, [r7, #52]	; 0x34
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b3e:	69bb      	ldr	r3, [r7, #24]
 8008b40:	f383 8810 	msr	PRIMASK, r3
}
 8008b44:	46c0      	nop			; (mov r8, r8)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4925      	ldr	r1, [pc, #148]	; (8008be8 <UART_EndRxTransfer+0xc0>)
 8008b52:	400a      	ands	r2, r1
 8008b54:	601a      	str	r2, [r3, #0]
 8008b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b5a:	69fb      	ldr	r3, [r7, #28]
 8008b5c:	f383 8810 	msr	PRIMASK, r3
}
 8008b60:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b62:	f3ef 8310 	mrs	r3, PRIMASK
 8008b66:	623b      	str	r3, [r7, #32]
  return(result);
 8008b68:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b6a:	633b      	str	r3, [r7, #48]	; 0x30
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b72:	f383 8810 	msr	PRIMASK, r3
}
 8008b76:	46c0      	nop			; (mov r8, r8)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	689a      	ldr	r2, [r3, #8]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	2101      	movs	r1, #1
 8008b84:	438a      	bics	r2, r1
 8008b86:	609a      	str	r2, [r3, #8]
 8008b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b8a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b8e:	f383 8810 	msr	PRIMASK, r3
}
 8008b92:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d118      	bne.n	8008bce <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b9c:	f3ef 8310 	mrs	r3, PRIMASK
 8008ba0:	60bb      	str	r3, [r7, #8]
  return(result);
 8008ba2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	f383 8810 	msr	PRIMASK, r3
}
 8008bb0:	46c0      	nop			; (mov r8, r8)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	2110      	movs	r1, #16
 8008bbe:	438a      	bics	r2, r1
 8008bc0:	601a      	str	r2, [r3, #0]
 8008bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	f383 8810 	msr	PRIMASK, r3
}
 8008bcc:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2220      	movs	r2, #32
 8008bd2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008be0:	46c0      	nop			; (mov r8, r8)
 8008be2:	46bd      	mov	sp, r7
 8008be4:	b00e      	add	sp, #56	; 0x38
 8008be6:	bd80      	pop	{r7, pc}
 8008be8:	fffffedf 	.word	0xfffffedf

08008bec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b084      	sub	sp, #16
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	225a      	movs	r2, #90	; 0x5a
 8008bfe:	2100      	movs	r1, #0
 8008c00:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	2252      	movs	r2, #82	; 0x52
 8008c06:	2100      	movs	r1, #0
 8008c08:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	0018      	movs	r0, r3
 8008c0e:	f7ff fbbb 	bl	8008388 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c12:	46c0      	nop			; (mov r8, r8)
 8008c14:	46bd      	mov	sp, r7
 8008c16:	b004      	add	sp, #16
 8008c18:	bd80      	pop	{r7, pc}

08008c1a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008c1a:	b580      	push	{r7, lr}
 8008c1c:	b086      	sub	sp, #24
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c22:	f3ef 8310 	mrs	r3, PRIMASK
 8008c26:	60bb      	str	r3, [r7, #8]
  return(result);
 8008c28:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008c2a:	617b      	str	r3, [r7, #20]
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f383 8810 	msr	PRIMASK, r3
}
 8008c36:	46c0      	nop			; (mov r8, r8)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	681a      	ldr	r2, [r3, #0]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	2140      	movs	r1, #64	; 0x40
 8008c44:	438a      	bics	r2, r1
 8008c46:	601a      	str	r2, [r3, #0]
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	f383 8810 	msr	PRIMASK, r3
}
 8008c52:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2220      	movs	r2, #32
 8008c58:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	0018      	movs	r0, r3
 8008c64:	f7ff fb80 	bl	8008368 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c68:	46c0      	nop			; (mov r8, r8)
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	b006      	add	sp, #24
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b090      	sub	sp, #64	; 0x40
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008c78:	203e      	movs	r0, #62	; 0x3e
 8008c7a:	183b      	adds	r3, r7, r0
 8008c7c:	687a      	ldr	r2, [r7, #4]
 8008c7e:	215c      	movs	r1, #92	; 0x5c
 8008c80:	5a52      	ldrh	r2, [r2, r1]
 8008c82:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c88:	2b22      	cmp	r3, #34	; 0x22
 8008c8a:	d000      	beq.n	8008c8e <UART_RxISR_8BIT+0x1e>
 8008c8c:	e095      	b.n	8008dba <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681a      	ldr	r2, [r3, #0]
 8008c92:	213c      	movs	r1, #60	; 0x3c
 8008c94:	187b      	adds	r3, r7, r1
 8008c96:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8008c98:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008c9a:	187b      	adds	r3, r7, r1
 8008c9c:	881b      	ldrh	r3, [r3, #0]
 8008c9e:	b2da      	uxtb	r2, r3
 8008ca0:	183b      	adds	r3, r7, r0
 8008ca2:	881b      	ldrh	r3, [r3, #0]
 8008ca4:	b2d9      	uxtb	r1, r3
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008caa:	400a      	ands	r2, r1
 8008cac:	b2d2      	uxtb	r2, r2
 8008cae:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cb4:	1c5a      	adds	r2, r3, #1
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	225a      	movs	r2, #90	; 0x5a
 8008cbe:	5a9b      	ldrh	r3, [r3, r2]
 8008cc0:	b29b      	uxth	r3, r3
 8008cc2:	3b01      	subs	r3, #1
 8008cc4:	b299      	uxth	r1, r3
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	225a      	movs	r2, #90	; 0x5a
 8008cca:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	225a      	movs	r2, #90	; 0x5a
 8008cd0:	5a9b      	ldrh	r3, [r3, r2]
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d178      	bne.n	8008dca <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cd8:	f3ef 8310 	mrs	r3, PRIMASK
 8008cdc:	61bb      	str	r3, [r7, #24]
  return(result);
 8008cde:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ce0:	63bb      	str	r3, [r7, #56]	; 0x38
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ce6:	69fb      	ldr	r3, [r7, #28]
 8008ce8:	f383 8810 	msr	PRIMASK, r3
}
 8008cec:	46c0      	nop			; (mov r8, r8)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	681a      	ldr	r2, [r3, #0]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4936      	ldr	r1, [pc, #216]	; (8008dd4 <UART_RxISR_8BIT+0x164>)
 8008cfa:	400a      	ands	r2, r1
 8008cfc:	601a      	str	r2, [r3, #0]
 8008cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d00:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d02:	6a3b      	ldr	r3, [r7, #32]
 8008d04:	f383 8810 	msr	PRIMASK, r3
}
 8008d08:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d0a:	f3ef 8310 	mrs	r3, PRIMASK
 8008d0e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d12:	637b      	str	r3, [r7, #52]	; 0x34
 8008d14:	2301      	movs	r3, #1
 8008d16:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d1a:	f383 8810 	msr	PRIMASK, r3
}
 8008d1e:	46c0      	nop			; (mov r8, r8)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	689a      	ldr	r2, [r3, #8]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	2101      	movs	r1, #1
 8008d2c:	438a      	bics	r2, r1
 8008d2e:	609a      	str	r2, [r3, #8]
 8008d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d32:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d36:	f383 8810 	msr	PRIMASK, r3
}
 8008d3a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2220      	movs	r2, #32
 8008d40:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2200      	movs	r2, #0
 8008d46:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d12f      	bne.n	8008db0 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2200      	movs	r2, #0
 8008d54:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d56:	f3ef 8310 	mrs	r3, PRIMASK
 8008d5a:	60fb      	str	r3, [r7, #12]
  return(result);
 8008d5c:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d5e:	633b      	str	r3, [r7, #48]	; 0x30
 8008d60:	2301      	movs	r3, #1
 8008d62:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	f383 8810 	msr	PRIMASK, r3
}
 8008d6a:	46c0      	nop			; (mov r8, r8)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	681a      	ldr	r2, [r3, #0]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	2110      	movs	r1, #16
 8008d78:	438a      	bics	r2, r1
 8008d7a:	601a      	str	r2, [r3, #0]
 8008d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d7e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	f383 8810 	msr	PRIMASK, r3
}
 8008d86:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	69db      	ldr	r3, [r3, #28]
 8008d8e:	2210      	movs	r2, #16
 8008d90:	4013      	ands	r3, r2
 8008d92:	2b10      	cmp	r3, #16
 8008d94:	d103      	bne.n	8008d9e <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	2210      	movs	r2, #16
 8008d9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2258      	movs	r2, #88	; 0x58
 8008da2:	5a9a      	ldrh	r2, [r3, r2]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	0011      	movs	r1, r2
 8008da8:	0018      	movs	r0, r3
 8008daa:	f7fa fd6b 	bl	8003884 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008dae:	e00c      	b.n	8008dca <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	0018      	movs	r0, r3
 8008db4:	f7ff fae0 	bl	8008378 <HAL_UART_RxCpltCallback>
}
 8008db8:	e007      	b.n	8008dca <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	699a      	ldr	r2, [r3, #24]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	2108      	movs	r1, #8
 8008dc6:	430a      	orrs	r2, r1
 8008dc8:	619a      	str	r2, [r3, #24]
}
 8008dca:	46c0      	nop			; (mov r8, r8)
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	b010      	add	sp, #64	; 0x40
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	46c0      	nop			; (mov r8, r8)
 8008dd4:	fffffedf 	.word	0xfffffedf

08008dd8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b090      	sub	sp, #64	; 0x40
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008de0:	203e      	movs	r0, #62	; 0x3e
 8008de2:	183b      	adds	r3, r7, r0
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	215c      	movs	r1, #92	; 0x5c
 8008de8:	5a52      	ldrh	r2, [r2, r1]
 8008dea:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008df0:	2b22      	cmp	r3, #34	; 0x22
 8008df2:	d000      	beq.n	8008df6 <UART_RxISR_16BIT+0x1e>
 8008df4:	e095      	b.n	8008f22 <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	213c      	movs	r1, #60	; 0x3c
 8008dfc:	187b      	adds	r3, r7, r1
 8008dfe:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8008e00:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e06:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8008e08:	187b      	adds	r3, r7, r1
 8008e0a:	183a      	adds	r2, r7, r0
 8008e0c:	881b      	ldrh	r3, [r3, #0]
 8008e0e:	8812      	ldrh	r2, [r2, #0]
 8008e10:	4013      	ands	r3, r2
 8008e12:	b29a      	uxth	r2, r3
 8008e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e16:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e1c:	1c9a      	adds	r2, r3, #2
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	225a      	movs	r2, #90	; 0x5a
 8008e26:	5a9b      	ldrh	r3, [r3, r2]
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	3b01      	subs	r3, #1
 8008e2c:	b299      	uxth	r1, r3
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	225a      	movs	r2, #90	; 0x5a
 8008e32:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	225a      	movs	r2, #90	; 0x5a
 8008e38:	5a9b      	ldrh	r3, [r3, r2]
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d178      	bne.n	8008f32 <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e40:	f3ef 8310 	mrs	r3, PRIMASK
 8008e44:	617b      	str	r3, [r7, #20]
  return(result);
 8008e46:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e48:	637b      	str	r3, [r7, #52]	; 0x34
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e4e:	69bb      	ldr	r3, [r7, #24]
 8008e50:	f383 8810 	msr	PRIMASK, r3
}
 8008e54:	46c0      	nop			; (mov r8, r8)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	681a      	ldr	r2, [r3, #0]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4936      	ldr	r1, [pc, #216]	; (8008f3c <UART_RxISR_16BIT+0x164>)
 8008e62:	400a      	ands	r2, r1
 8008e64:	601a      	str	r2, [r3, #0]
 8008e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e6a:	69fb      	ldr	r3, [r7, #28]
 8008e6c:	f383 8810 	msr	PRIMASK, r3
}
 8008e70:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e72:	f3ef 8310 	mrs	r3, PRIMASK
 8008e76:	623b      	str	r3, [r7, #32]
  return(result);
 8008e78:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e7a:	633b      	str	r3, [r7, #48]	; 0x30
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e82:	f383 8810 	msr	PRIMASK, r3
}
 8008e86:	46c0      	nop			; (mov r8, r8)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	689a      	ldr	r2, [r3, #8]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	2101      	movs	r1, #1
 8008e94:	438a      	bics	r2, r1
 8008e96:	609a      	str	r2, [r3, #8]
 8008e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e9a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9e:	f383 8810 	msr	PRIMASK, r3
}
 8008ea2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2220      	movs	r2, #32
 8008ea8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2200      	movs	r2, #0
 8008eae:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	d12f      	bne.n	8008f18 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ebe:	f3ef 8310 	mrs	r3, PRIMASK
 8008ec2:	60bb      	str	r3, [r7, #8]
  return(result);
 8008ec4:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ec8:	2301      	movs	r3, #1
 8008eca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f383 8810 	msr	PRIMASK, r3
}
 8008ed2:	46c0      	nop			; (mov r8, r8)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	681a      	ldr	r2, [r3, #0]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	2110      	movs	r1, #16
 8008ee0:	438a      	bics	r2, r1
 8008ee2:	601a      	str	r2, [r3, #0]
 8008ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ee6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	f383 8810 	msr	PRIMASK, r3
}
 8008eee:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	69db      	ldr	r3, [r3, #28]
 8008ef6:	2210      	movs	r2, #16
 8008ef8:	4013      	ands	r3, r2
 8008efa:	2b10      	cmp	r3, #16
 8008efc:	d103      	bne.n	8008f06 <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	2210      	movs	r2, #16
 8008f04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2258      	movs	r2, #88	; 0x58
 8008f0a:	5a9a      	ldrh	r2, [r3, r2]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	0011      	movs	r1, r2
 8008f10:	0018      	movs	r0, r3
 8008f12:	f7fa fcb7 	bl	8003884 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f16:	e00c      	b.n	8008f32 <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	0018      	movs	r0, r3
 8008f1c:	f7ff fa2c 	bl	8008378 <HAL_UART_RxCpltCallback>
}
 8008f20:	e007      	b.n	8008f32 <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	699a      	ldr	r2, [r3, #24]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	2108      	movs	r1, #8
 8008f2e:	430a      	orrs	r2, r1
 8008f30:	619a      	str	r2, [r3, #24]
}
 8008f32:	46c0      	nop			; (mov r8, r8)
 8008f34:	46bd      	mov	sp, r7
 8008f36:	b010      	add	sp, #64	; 0x40
 8008f38:	bd80      	pop	{r7, pc}
 8008f3a:	46c0      	nop			; (mov r8, r8)
 8008f3c:	fffffedf 	.word	0xfffffedf

08008f40 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f40:	b5b0      	push	{r4, r5, r7, lr}
 8008f42:	b08a      	sub	sp, #40	; 0x28
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	60f8      	str	r0, [r7, #12]
 8008f48:	60b9      	str	r1, [r7, #8]
 8008f4a:	1dbb      	adds	r3, r7, #6
 8008f4c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f52:	2b20      	cmp	r3, #32
 8008f54:	d15e      	bne.n	8009014 <HAL_UARTEx_ReceiveToIdle_IT+0xd4>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d003      	beq.n	8008f64 <HAL_UARTEx_ReceiveToIdle_IT+0x24>
 8008f5c:	1dbb      	adds	r3, r7, #6
 8008f5e:	881b      	ldrh	r3, [r3, #0]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d101      	bne.n	8008f68 <HAL_UARTEx_ReceiveToIdle_IT+0x28>
    {
      return HAL_ERROR;
 8008f64:	2301      	movs	r3, #1
 8008f66:	e056      	b.n	8009016 <HAL_UARTEx_ReceiveToIdle_IT+0xd6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data to be received from RDR will be
       handled through a uint16_t cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	689a      	ldr	r2, [r3, #8]
 8008f6c:	2380      	movs	r3, #128	; 0x80
 8008f6e:	015b      	lsls	r3, r3, #5
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d109      	bne.n	8008f88 <HAL_UARTEx_ReceiveToIdle_IT+0x48>
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	691b      	ldr	r3, [r3, #16]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d105      	bne.n	8008f88 <HAL_UARTEx_ReceiveToIdle_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	4013      	ands	r3, r2
 8008f82:	d001      	beq.n	8008f88 <HAL_UARTEx_ReceiveToIdle_IT+0x48>
      {
        return  HAL_ERROR;
 8008f84:	2301      	movs	r3, #1
 8008f86:	e046      	b.n	8009016 <HAL_UARTEx_ReceiveToIdle_IT+0xd6>
      }
    }

    __HAL_LOCK(huart);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2274      	movs	r2, #116	; 0x74
 8008f8c:	5c9b      	ldrb	r3, [r3, r2]
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	d101      	bne.n	8008f96 <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 8008f92:	2302      	movs	r3, #2
 8008f94:	e03f      	b.n	8009016 <HAL_UARTEx_ReceiveToIdle_IT+0xd6>
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2274      	movs	r2, #116	; 0x74
 8008f9a:	2101      	movs	r1, #1
 8008f9c:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	661a      	str	r2, [r3, #96]	; 0x60

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8008fa4:	2527      	movs	r5, #39	; 0x27
 8008fa6:	197c      	adds	r4, r7, r5
 8008fa8:	1dbb      	adds	r3, r7, #6
 8008faa:	881a      	ldrh	r2, [r3, #0]
 8008fac:	68b9      	ldr	r1, [r7, #8]
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	0018      	movs	r0, r3
 8008fb2:	f7ff fd09 	bl	80089c8 <UART_Start_Receive_IT>
 8008fb6:	0003      	movs	r3, r0
 8008fb8:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008fba:	197b      	adds	r3, r7, r5
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d124      	bne.n	800900c <HAL_UARTEx_ReceiveToIdle_IT+0xcc>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d11c      	bne.n	8009004 <HAL_UARTEx_ReceiveToIdle_IT+0xc4>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	2210      	movs	r2, #16
 8008fd0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008fd2:	f3ef 8310 	mrs	r3, PRIMASK
 8008fd6:	617b      	str	r3, [r7, #20]
  return(result);
 8008fd8:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fda:	623b      	str	r3, [r7, #32]
 8008fdc:	2301      	movs	r3, #1
 8008fde:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fe0:	69bb      	ldr	r3, [r7, #24]
 8008fe2:	f383 8810 	msr	PRIMASK, r3
}
 8008fe6:	46c0      	nop			; (mov r8, r8)
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	681a      	ldr	r2, [r3, #0]
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	2110      	movs	r1, #16
 8008ff4:	430a      	orrs	r2, r1
 8008ff6:	601a      	str	r2, [r3, #0]
 8008ff8:	6a3b      	ldr	r3, [r7, #32]
 8008ffa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ffc:	69fb      	ldr	r3, [r7, #28]
 8008ffe:	f383 8810 	msr	PRIMASK, r3
}
 8009002:	e003      	b.n	800900c <HAL_UARTEx_ReceiveToIdle_IT+0xcc>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009004:	2327      	movs	r3, #39	; 0x27
 8009006:	18fb      	adds	r3, r7, r3
 8009008:	2201      	movs	r2, #1
 800900a:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 800900c:	2327      	movs	r3, #39	; 0x27
 800900e:	18fb      	adds	r3, r7, r3
 8009010:	781b      	ldrb	r3, [r3, #0]
 8009012:	e000      	b.n	8009016 <HAL_UARTEx_ReceiveToIdle_IT+0xd6>
  }
  else
  {
    return HAL_BUSY;
 8009014:	2302      	movs	r3, #2
  }
}
 8009016:	0018      	movs	r0, r3
 8009018:	46bd      	mov	sp, r7
 800901a:	b00a      	add	sp, #40	; 0x28
 800901c:	bdb0      	pop	{r4, r5, r7, pc}

0800901e <u8g2_DrawHorizontalBitmap>:
  b		Pointer to the bitmap line.
  Only draw pixels which are set.
*/

void u8g2_DrawHorizontalBitmap(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 800901e:	b5b0      	push	{r4, r5, r7, lr}
 8009020:	b088      	sub	sp, #32
 8009022:	af02      	add	r7, sp, #8
 8009024:	60f8      	str	r0, [r7, #12]
 8009026:	000c      	movs	r4, r1
 8009028:	0010      	movs	r0, r2
 800902a:	0019      	movs	r1, r3
 800902c:	250a      	movs	r5, #10
 800902e:	197b      	adds	r3, r7, r5
 8009030:	1c22      	adds	r2, r4, #0
 8009032:	801a      	strh	r2, [r3, #0]
 8009034:	2408      	movs	r4, #8
 8009036:	193b      	adds	r3, r7, r4
 8009038:	1c02      	adds	r2, r0, #0
 800903a:	801a      	strh	r2, [r3, #0]
 800903c:	1dbb      	adds	r3, r7, #6
 800903e:	1c0a      	adds	r2, r1, #0
 8009040:	801a      	strh	r2, [r3, #0]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 8009042:	2016      	movs	r0, #22
 8009044:	183b      	adds	r3, r7, r0
 8009046:	68fa      	ldr	r2, [r7, #12]
 8009048:	2192      	movs	r1, #146	; 0x92
 800904a:	5c52      	ldrb	r2, [r2, r1]
 800904c:	701a      	strb	r2, [r3, #0]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 800904e:	183b      	adds	r3, r7, r0
 8009050:	781b      	ldrb	r3, [r3, #0]
 8009052:	425a      	negs	r2, r3
 8009054:	4153      	adcs	r3, r2
 8009056:	b2da      	uxtb	r2, r3
 8009058:	2315      	movs	r3, #21
 800905a:	18fb      	adds	r3, r7, r3
 800905c:	701a      	strb	r2, [r3, #0]

#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 800905e:	0029      	movs	r1, r5
 8009060:	187a      	adds	r2, r7, r1
 8009062:	1dbb      	adds	r3, r7, #6
 8009064:	8812      	ldrh	r2, [r2, #0]
 8009066:	881b      	ldrh	r3, [r3, #0]
 8009068:	18d3      	adds	r3, r2, r3
 800906a:	b29d      	uxth	r5, r3
 800906c:	193b      	adds	r3, r7, r4
 800906e:	881b      	ldrh	r3, [r3, #0]
 8009070:	3301      	adds	r3, #1
 8009072:	b29b      	uxth	r3, r3
 8009074:	193a      	adds	r2, r7, r4
 8009076:	8814      	ldrh	r4, [r2, #0]
 8009078:	187a      	adds	r2, r7, r1
 800907a:	8811      	ldrh	r1, [r2, #0]
 800907c:	68f8      	ldr	r0, [r7, #12]
 800907e:	9300      	str	r3, [sp, #0]
 8009080:	002b      	movs	r3, r5
 8009082:	0022      	movs	r2, r4
 8009084:	f001 fb08 	bl	800a698 <u8g2_IsIntersection>
 8009088:	1e03      	subs	r3, r0, #0
 800908a:	d05d      	beq.n	8009148 <u8g2_DrawHorizontalBitmap+0x12a>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 128;
 800908c:	2317      	movs	r3, #23
 800908e:	18fb      	adds	r3, r7, r3
 8009090:	2280      	movs	r2, #128	; 0x80
 8009092:	701a      	strb	r2, [r3, #0]
  while(len > 0)
 8009094:	e04d      	b.n	8009132 <u8g2_DrawHorizontalBitmap+0x114>
  {
    if ( *b & mask ) {
 8009096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009098:	781b      	ldrb	r3, [r3, #0]
 800909a:	2217      	movs	r2, #23
 800909c:	18ba      	adds	r2, r7, r2
 800909e:	7812      	ldrb	r2, [r2, #0]
 80090a0:	4013      	ands	r3, r2
 80090a2:	b2db      	uxtb	r3, r3
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d012      	beq.n	80090ce <u8g2_DrawHorizontalBitmap+0xb0>
      u8g2->draw_color = color;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	2216      	movs	r2, #22
 80090ac:	18ba      	adds	r2, r7, r2
 80090ae:	2192      	movs	r1, #146	; 0x92
 80090b0:	7812      	ldrb	r2, [r2, #0]
 80090b2:	545a      	strb	r2, [r3, r1]
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 80090b4:	2308      	movs	r3, #8
 80090b6:	18fb      	adds	r3, r7, r3
 80090b8:	881a      	ldrh	r2, [r3, #0]
 80090ba:	230a      	movs	r3, #10
 80090bc:	18fb      	adds	r3, r7, r3
 80090be:	8819      	ldrh	r1, [r3, #0]
 80090c0:	68f8      	ldr	r0, [r7, #12]
 80090c2:	2300      	movs	r3, #0
 80090c4:	9300      	str	r3, [sp, #0]
 80090c6:	2301      	movs	r3, #1
 80090c8:	f001 f9bd 	bl	800a446 <u8g2_DrawHVLine>
 80090cc:	e016      	b.n	80090fc <u8g2_DrawHorizontalBitmap+0xde>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2291      	movs	r2, #145	; 0x91
 80090d2:	5c9b      	ldrb	r3, [r3, r2]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d111      	bne.n	80090fc <u8g2_DrawHorizontalBitmap+0xde>
      u8g2->draw_color = ncolor;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2215      	movs	r2, #21
 80090dc:	18ba      	adds	r2, r7, r2
 80090de:	2192      	movs	r1, #146	; 0x92
 80090e0:	7812      	ldrb	r2, [r2, #0]
 80090e2:	545a      	strb	r2, [r3, r1]
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 80090e4:	2308      	movs	r3, #8
 80090e6:	18fb      	adds	r3, r7, r3
 80090e8:	881a      	ldrh	r2, [r3, #0]
 80090ea:	230a      	movs	r3, #10
 80090ec:	18fb      	adds	r3, r7, r3
 80090ee:	8819      	ldrh	r1, [r3, #0]
 80090f0:	68f8      	ldr	r0, [r7, #12]
 80090f2:	2300      	movs	r3, #0
 80090f4:	9300      	str	r3, [sp, #0]
 80090f6:	2301      	movs	r3, #1
 80090f8:	f001 f9a5 	bl	800a446 <u8g2_DrawHVLine>
    }

    x++;
 80090fc:	210a      	movs	r1, #10
 80090fe:	187b      	adds	r3, r7, r1
 8009100:	881a      	ldrh	r2, [r3, #0]
 8009102:	187b      	adds	r3, r7, r1
 8009104:	3201      	adds	r2, #1
 8009106:	801a      	strh	r2, [r3, #0]
    mask >>= 1;
 8009108:	2117      	movs	r1, #23
 800910a:	187b      	adds	r3, r7, r1
 800910c:	187a      	adds	r2, r7, r1
 800910e:	7812      	ldrb	r2, [r2, #0]
 8009110:	0852      	lsrs	r2, r2, #1
 8009112:	701a      	strb	r2, [r3, #0]
    if ( mask == 0 )
 8009114:	187b      	adds	r3, r7, r1
 8009116:	781b      	ldrb	r3, [r3, #0]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d105      	bne.n	8009128 <u8g2_DrawHorizontalBitmap+0x10a>
    {
      mask = 128;
 800911c:	187b      	adds	r3, r7, r1
 800911e:	2280      	movs	r2, #128	; 0x80
 8009120:	701a      	strb	r2, [r3, #0]
      b++;
 8009122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009124:	3301      	adds	r3, #1
 8009126:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    len--;
 8009128:	1dbb      	adds	r3, r7, #6
 800912a:	881a      	ldrh	r2, [r3, #0]
 800912c:	1dbb      	adds	r3, r7, #6
 800912e:	3a01      	subs	r2, #1
 8009130:	801a      	strh	r2, [r3, #0]
  while(len > 0)
 8009132:	1dbb      	adds	r3, r7, #6
 8009134:	881b      	ldrh	r3, [r3, #0]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d1ad      	bne.n	8009096 <u8g2_DrawHorizontalBitmap+0x78>
  }
  u8g2->draw_color = color;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2216      	movs	r2, #22
 800913e:	18ba      	adds	r2, r7, r2
 8009140:	2192      	movs	r1, #146	; 0x92
 8009142:	7812      	ldrb	r2, [r2, #0]
 8009144:	545a      	strb	r2, [r3, r1]
 8009146:	e000      	b.n	800914a <u8g2_DrawHorizontalBitmap+0x12c>
    return;
 8009148:	46c0      	nop			; (mov r8, r8)
}
 800914a:	46bd      	mov	sp, r7
 800914c:	b006      	add	sp, #24
 800914e:	bdb0      	pop	{r4, r5, r7, pc}

08009150 <u8g2_DrawBitmap>:


/* u8glib compatible bitmap draw function */
void u8g2_DrawBitmap(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t cnt, u8g2_uint_t h, const uint8_t *bitmap)
{
 8009150:	b5b0      	push	{r4, r5, r7, lr}
 8009152:	b088      	sub	sp, #32
 8009154:	af02      	add	r7, sp, #8
 8009156:	60f8      	str	r0, [r7, #12]
 8009158:	000c      	movs	r4, r1
 800915a:	0010      	movs	r0, r2
 800915c:	0019      	movs	r1, r3
 800915e:	250a      	movs	r5, #10
 8009160:	197b      	adds	r3, r7, r5
 8009162:	1c22      	adds	r2, r4, #0
 8009164:	801a      	strh	r2, [r3, #0]
 8009166:	2408      	movs	r4, #8
 8009168:	193b      	adds	r3, r7, r4
 800916a:	1c02      	adds	r2, r0, #0
 800916c:	801a      	strh	r2, [r3, #0]
 800916e:	1dbb      	adds	r3, r7, #6
 8009170:	1c0a      	adds	r2, r1, #0
 8009172:	801a      	strh	r2, [r3, #0]
  u8g2_uint_t w;
  w = cnt;
 8009174:	2116      	movs	r1, #22
 8009176:	187b      	adds	r3, r7, r1
 8009178:	1dba      	adds	r2, r7, #6
 800917a:	8812      	ldrh	r2, [r2, #0]
 800917c:	801a      	strh	r2, [r3, #0]
  w *= 8;
 800917e:	187b      	adds	r3, r7, r1
 8009180:	187a      	adds	r2, r7, r1
 8009182:	8812      	ldrh	r2, [r2, #0]
 8009184:	00d2      	lsls	r2, r2, #3
 8009186:	801a      	strh	r2, [r3, #0]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8009188:	0028      	movs	r0, r5
 800918a:	183a      	adds	r2, r7, r0
 800918c:	187b      	adds	r3, r7, r1
 800918e:	8812      	ldrh	r2, [r2, #0]
 8009190:	881b      	ldrh	r3, [r3, #0]
 8009192:	18d3      	adds	r3, r2, r3
 8009194:	b29d      	uxth	r5, r3
 8009196:	193a      	adds	r2, r7, r4
 8009198:	2328      	movs	r3, #40	; 0x28
 800919a:	18fb      	adds	r3, r7, r3
 800919c:	8812      	ldrh	r2, [r2, #0]
 800919e:	881b      	ldrh	r3, [r3, #0]
 80091a0:	18d3      	adds	r3, r2, r3
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	193a      	adds	r2, r7, r4
 80091a6:	8814      	ldrh	r4, [r2, #0]
 80091a8:	183a      	adds	r2, r7, r0
 80091aa:	8811      	ldrh	r1, [r2, #0]
 80091ac:	68f8      	ldr	r0, [r7, #12]
 80091ae:	9300      	str	r3, [sp, #0]
 80091b0:	002b      	movs	r3, r5
 80091b2:	0022      	movs	r2, r4
 80091b4:	f001 fa70 	bl	800a698 <u8g2_IsIntersection>
 80091b8:	1e03      	subs	r3, r0, #0
 80091ba:	d025      	beq.n	8009208 <u8g2_DrawBitmap+0xb8>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 80091bc:	e01e      	b.n	80091fc <u8g2_DrawBitmap+0xac>
  {
    u8g2_DrawHorizontalBitmap(u8g2, x, y, w, bitmap);
 80091be:	2316      	movs	r3, #22
 80091c0:	18fb      	adds	r3, r7, r3
 80091c2:	881c      	ldrh	r4, [r3, #0]
 80091c4:	2508      	movs	r5, #8
 80091c6:	197b      	adds	r3, r7, r5
 80091c8:	881a      	ldrh	r2, [r3, #0]
 80091ca:	230a      	movs	r3, #10
 80091cc:	18fb      	adds	r3, r7, r3
 80091ce:	8819      	ldrh	r1, [r3, #0]
 80091d0:	68f8      	ldr	r0, [r7, #12]
 80091d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091d4:	9300      	str	r3, [sp, #0]
 80091d6:	0023      	movs	r3, r4
 80091d8:	f7ff ff21 	bl	800901e <u8g2_DrawHorizontalBitmap>
    bitmap += cnt;
 80091dc:	1dbb      	adds	r3, r7, #6
 80091de:	881b      	ldrh	r3, [r3, #0]
 80091e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091e2:	18d3      	adds	r3, r2, r3
 80091e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    y++;
 80091e6:	197b      	adds	r3, r7, r5
 80091e8:	881a      	ldrh	r2, [r3, #0]
 80091ea:	197b      	adds	r3, r7, r5
 80091ec:	3201      	adds	r2, #1
 80091ee:	801a      	strh	r2, [r3, #0]
    h--;
 80091f0:	2128      	movs	r1, #40	; 0x28
 80091f2:	187b      	adds	r3, r7, r1
 80091f4:	881a      	ldrh	r2, [r3, #0]
 80091f6:	187b      	adds	r3, r7, r1
 80091f8:	3a01      	subs	r2, #1
 80091fa:	801a      	strh	r2, [r3, #0]
  while( h > 0 )
 80091fc:	2328      	movs	r3, #40	; 0x28
 80091fe:	18fb      	adds	r3, r7, r3
 8009200:	881b      	ldrh	r3, [r3, #0]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d1db      	bne.n	80091be <u8g2_DrawBitmap+0x6e>
 8009206:	e000      	b.n	800920a <u8g2_DrawBitmap+0xba>
    return;
 8009208:	46c0      	nop			; (mov r8, r8)
  }
}
 800920a:	46bd      	mov	sp, r7
 800920c:	b006      	add	sp, #24
 800920e:	bdb0      	pop	{r4, r5, r7, pc}

08009210 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b084      	sub	sp, #16
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	7c1b      	ldrb	r3, [r3, #16]
 800921e:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2238      	movs	r2, #56	; 0x38
 8009224:	5c9b      	ldrb	r3, [r3, r2]
 8009226:	001a      	movs	r2, r3
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	4353      	muls	r3, r2
 800922c:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	00db      	lsls	r3, r3, #3
 8009232:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009238:	68fa      	ldr	r2, [r7, #12]
 800923a:	2100      	movs	r1, #0
 800923c:	0018      	movs	r0, r3
 800923e:	f005 fd53 	bl	800ece8 <memset>
}
 8009242:	46c0      	nop			; (mov r8, r8)
 8009244:	46bd      	mov	sp, r7
 8009246:	b004      	add	sp, #16
 8009248:	bd80      	pop	{r7, pc}

0800924a <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 800924a:	b590      	push	{r4, r7, lr}
 800924c:	b087      	sub	sp, #28
 800924e:	af02      	add	r7, sp, #8
 8009250:	6078      	str	r0, [r7, #4]
 8009252:	0008      	movs	r0, r1
 8009254:	0011      	movs	r1, r2
 8009256:	1cfb      	adds	r3, r7, #3
 8009258:	1c02      	adds	r2, r0, #0
 800925a:	701a      	strb	r2, [r3, #0]
 800925c:	1cbb      	adds	r3, r7, #2
 800925e:	1c0a      	adds	r2, r1, #0
 8009260:	701a      	strb	r2, [r3, #0]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	240f      	movs	r4, #15
 8009268:	193b      	adds	r3, r7, r4
 800926a:	7c12      	ldrb	r2, [r2, #16]
 800926c:	701a      	strb	r2, [r3, #0]
  offset = src_tile_row;
 800926e:	210c      	movs	r1, #12
 8009270:	187b      	adds	r3, r7, r1
 8009272:	1cfa      	adds	r2, r7, #3
 8009274:	7812      	ldrb	r2, [r2, #0]
 8009276:	801a      	strh	r2, [r3, #0]
  ptr = u8g2->tile_buf_ptr;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800927c:	60bb      	str	r3, [r7, #8]
  offset *= w;
 800927e:	193b      	adds	r3, r7, r4
 8009280:	781b      	ldrb	r3, [r3, #0]
 8009282:	b29a      	uxth	r2, r3
 8009284:	187b      	adds	r3, r7, r1
 8009286:	0008      	movs	r0, r1
 8009288:	1879      	adds	r1, r7, r1
 800928a:	8809      	ldrh	r1, [r1, #0]
 800928c:	434a      	muls	r2, r1
 800928e:	801a      	strh	r2, [r3, #0]
  offset *= 8;
 8009290:	0001      	movs	r1, r0
 8009292:	187b      	adds	r3, r7, r1
 8009294:	187a      	adds	r2, r7, r1
 8009296:	8812      	ldrh	r2, [r2, #0]
 8009298:	00d2      	lsls	r2, r2, #3
 800929a:	801a      	strh	r2, [r3, #0]
  ptr += offset;
 800929c:	187b      	adds	r3, r7, r1
 800929e:	881b      	ldrh	r3, [r3, #0]
 80092a0:	68ba      	ldr	r2, [r7, #8]
 80092a2:	18d3      	adds	r3, r2, r3
 80092a4:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 80092a6:	193b      	adds	r3, r7, r4
 80092a8:	7819      	ldrb	r1, [r3, #0]
 80092aa:	1cbb      	adds	r3, r7, #2
 80092ac:	781a      	ldrb	r2, [r3, #0]
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	9300      	str	r3, [sp, #0]
 80092b4:	000b      	movs	r3, r1
 80092b6:	2100      	movs	r1, #0
 80092b8:	f002 f8fe 	bl	800b4b8 <u8x8_DrawTile>
}
 80092bc:	46c0      	nop			; (mov r8, r8)
 80092be:	46bd      	mov	sp, r7
 80092c0:	b005      	add	sp, #20
 80092c2:	bd90      	pop	{r4, r7, pc}

080092c4 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 80092c4:	b5b0      	push	{r4, r5, r7, lr}
 80092c6:	b084      	sub	sp, #16
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 80092cc:	230f      	movs	r3, #15
 80092ce:	18fb      	adds	r3, r7, r3
 80092d0:	2200      	movs	r2, #0
 80092d2:	701a      	strb	r2, [r3, #0]
  src_max = u8g2->tile_buf_height;
 80092d4:	230d      	movs	r3, #13
 80092d6:	18fb      	adds	r3, r7, r3
 80092d8:	687a      	ldr	r2, [r7, #4]
 80092da:	2138      	movs	r1, #56	; 0x38
 80092dc:	5c52      	ldrb	r2, [r2, r1]
 80092de:	701a      	strb	r2, [r3, #0]
  dest_row = u8g2->tile_curr_row;
 80092e0:	230e      	movs	r3, #14
 80092e2:	18fb      	adds	r3, r7, r3
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	2139      	movs	r1, #57	; 0x39
 80092e8:	5c52      	ldrb	r2, [r2, r1]
 80092ea:	701a      	strb	r2, [r3, #0]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681a      	ldr	r2, [r3, #0]
 80092f0:	230c      	movs	r3, #12
 80092f2:	18fb      	adds	r3, r7, r3
 80092f4:	7c52      	ldrb	r2, [r2, #17]
 80092f6:	701a      	strb	r2, [r3, #0]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 80092f8:	250e      	movs	r5, #14
 80092fa:	197b      	adds	r3, r7, r5
 80092fc:	781a      	ldrb	r2, [r3, #0]
 80092fe:	240f      	movs	r4, #15
 8009300:	193b      	adds	r3, r7, r4
 8009302:	7819      	ldrb	r1, [r3, #0]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	0018      	movs	r0, r3
 8009308:	f7ff ff9f 	bl	800924a <u8g2_send_tile_row>
    src_row++;
 800930c:	0021      	movs	r1, r4
 800930e:	187b      	adds	r3, r7, r1
 8009310:	781a      	ldrb	r2, [r3, #0]
 8009312:	187b      	adds	r3, r7, r1
 8009314:	3201      	adds	r2, #1
 8009316:	701a      	strb	r2, [r3, #0]
    dest_row++;
 8009318:	197b      	adds	r3, r7, r5
 800931a:	781a      	ldrb	r2, [r3, #0]
 800931c:	197b      	adds	r3, r7, r5
 800931e:	3201      	adds	r2, #1
 8009320:	701a      	strb	r2, [r3, #0]
  } while( src_row < src_max && dest_row < dest_max );
 8009322:	187a      	adds	r2, r7, r1
 8009324:	230d      	movs	r3, #13
 8009326:	18fb      	adds	r3, r7, r3
 8009328:	7812      	ldrb	r2, [r2, #0]
 800932a:	781b      	ldrb	r3, [r3, #0]
 800932c:	429a      	cmp	r2, r3
 800932e:	d206      	bcs.n	800933e <u8g2_send_buffer+0x7a>
 8009330:	197a      	adds	r2, r7, r5
 8009332:	230c      	movs	r3, #12
 8009334:	18fb      	adds	r3, r7, r3
 8009336:	7812      	ldrb	r2, [r2, #0]
 8009338:	781b      	ldrb	r3, [r3, #0]
 800933a:	429a      	cmp	r2, r3
 800933c:	d3dc      	bcc.n	80092f8 <u8g2_send_buffer+0x34>
}
 800933e:	46c0      	nop			; (mov r8, r8)
 8009340:	46bd      	mov	sp, r7
 8009342:	b004      	add	sp, #16
 8009344:	bdb0      	pop	{r4, r5, r7, pc}

08009346 <u8g2_SetBufferCurrTileRow>:
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8009346:	b580      	push	{r7, lr}
 8009348:	b082      	sub	sp, #8
 800934a:	af00      	add	r7, sp, #0
 800934c:	6078      	str	r0, [r7, #4]
 800934e:	000a      	movs	r2, r1
 8009350:	1cfb      	adds	r3, r7, #3
 8009352:	701a      	strb	r2, [r3, #0]
  u8g2->tile_curr_row = row;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	1cfa      	adds	r2, r7, #3
 8009358:	2139      	movs	r1, #57	; 0x39
 800935a:	7812      	ldrb	r2, [r2, #0]
 800935c:	545a      	strb	r2, [r3, r1]
  u8g2->cb->update_dimension(u8g2);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	0010      	movs	r0, r2
 8009368:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	687a      	ldr	r2, [r7, #4]
 8009372:	0010      	movs	r0, r2
 8009374:	4798      	blx	r3
}
 8009376:	46c0      	nop			; (mov r8, r8)
 8009378:	46bd      	mov	sp, r7
 800937a:	b002      	add	sp, #8
 800937c:	bd80      	pop	{r7, pc}

0800937e <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 800937e:	b580      	push	{r7, lr}
 8009380:	b082      	sub	sp, #8
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2293      	movs	r2, #147	; 0x93
 800938a:	5c9b      	ldrb	r3, [r3, r2]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d003      	beq.n	8009398 <u8g2_FirstPage+0x1a>
  {
    u8g2_ClearBuffer(u8g2);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	0018      	movs	r0, r3
 8009394:	f7ff ff3c 	bl	8009210 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2100      	movs	r1, #0
 800939c:	0018      	movs	r0, r3
 800939e:	f7ff ffd2 	bl	8009346 <u8g2_SetBufferCurrTileRow>
}
 80093a2:	46c0      	nop			; (mov r8, r8)
 80093a4:	46bd      	mov	sp, r7
 80093a6:	b002      	add	sp, #8
 80093a8:	bd80      	pop	{r7, pc}

080093aa <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 80093aa:	b580      	push	{r7, lr}
 80093ac:	b084      	sub	sp, #16
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	0018      	movs	r0, r3
 80093b6:	f7ff ff85 	bl	80092c4 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 80093ba:	200f      	movs	r0, #15
 80093bc:	183b      	adds	r3, r7, r0
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	2139      	movs	r1, #57	; 0x39
 80093c2:	5c52      	ldrb	r2, [r2, r1]
 80093c4:	701a      	strb	r2, [r3, #0]
  row += u8g2->tile_buf_height;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2238      	movs	r2, #56	; 0x38
 80093ca:	5c99      	ldrb	r1, [r3, r2]
 80093cc:	183b      	adds	r3, r7, r0
 80093ce:	183a      	adds	r2, r7, r0
 80093d0:	7812      	ldrb	r2, [r2, #0]
 80093d2:	188a      	adds	r2, r1, r2
 80093d4:	701a      	strb	r2, [r3, #0]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	7c5b      	ldrb	r3, [r3, #17]
 80093dc:	183a      	adds	r2, r7, r0
 80093de:	7812      	ldrb	r2, [r2, #0]
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d305      	bcc.n	80093f0 <u8g2_NextPage+0x46>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	0018      	movs	r0, r3
 80093e8:	f002 f8c3 	bl	800b572 <u8x8_RefreshDisplay>
    return 0;
 80093ec:	2300      	movs	r3, #0
 80093ee:	e011      	b.n	8009414 <u8g2_NextPage+0x6a>
  }
  if ( u8g2->is_auto_page_clear )
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2293      	movs	r2, #147	; 0x93
 80093f4:	5c9b      	ldrb	r3, [r3, r2]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d003      	beq.n	8009402 <u8g2_NextPage+0x58>
  {
    u8g2_ClearBuffer(u8g2);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	0018      	movs	r0, r3
 80093fe:	f7ff ff07 	bl	8009210 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8009402:	230f      	movs	r3, #15
 8009404:	18fb      	adds	r3, r7, r3
 8009406:	781a      	ldrb	r2, [r3, #0]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	0011      	movs	r1, r2
 800940c:	0018      	movs	r0, r3
 800940e:	f7ff ff9a 	bl	8009346 <u8g2_SetBufferCurrTileRow>
  return 1;
 8009412:	2301      	movs	r3, #1
}
 8009414:	0018      	movs	r0, r3
 8009416:	46bd      	mov	sp, r7
 8009418:	b004      	add	sp, #16
 800941a:	bd80      	pop	{r7, pc}

0800941c <u8g2_m_16_8_2>:
  *page_cnt = 1;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_2(uint8_t *page_cnt)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b082      	sub	sp, #8
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 2;
  return 0;
  #else
  static uint8_t buf[256];
  *page_cnt = 2;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2202      	movs	r2, #2
 8009428:	701a      	strb	r2, [r3, #0]
  return buf;
 800942a:	4b02      	ldr	r3, [pc, #8]	; (8009434 <u8g2_m_16_8_2+0x18>)
  #endif
}
 800942c:	0018      	movs	r0, r3
 800942e:	46bd      	mov	sp, r7
 8009430:	b002      	add	sp, #8
 8009432:	bd80      	pop	{r7, pc}
 8009434:	20000594 	.word	0x20000594

08009438 <u8g2_Setup_ssd1306_i2c_128x64_noname_2>:
  buf = u8g2_m_16_8_1(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 2 */
void u8g2_Setup_ssd1306_i2c_128x64_noname_2(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8009438:	b590      	push	{r4, r7, lr}
 800943a:	b089      	sub	sp, #36	; 0x24
 800943c:	af02      	add	r7, sp, #8
 800943e:	60f8      	str	r0, [r7, #12]
 8009440:	60b9      	str	r1, [r7, #8]
 8009442:	607a      	str	r2, [r7, #4]
 8009444:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 8009446:	687c      	ldr	r4, [r7, #4]
 8009448:	4a0e      	ldr	r2, [pc, #56]	; (8009484 <u8g2_Setup_ssd1306_i2c_128x64_noname_2+0x4c>)
 800944a:	490f      	ldr	r1, [pc, #60]	; (8009488 <u8g2_Setup_ssd1306_i2c_128x64_noname_2+0x50>)
 800944c:	68f8      	ldr	r0, [r7, #12]
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	9300      	str	r3, [sp, #0]
 8009452:	0023      	movs	r3, r4
 8009454:	f002 f8f6 	bl	800b644 <u8x8_Setup>
  buf = u8g2_m_16_8_2(&tile_buf_height);
 8009458:	2413      	movs	r4, #19
 800945a:	193b      	adds	r3, r7, r4
 800945c:	0018      	movs	r0, r3
 800945e:	f7ff ffdd 	bl	800941c <u8g2_m_16_8_2>
 8009462:	0003      	movs	r3, r0
 8009464:	617b      	str	r3, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8009466:	193b      	adds	r3, r7, r4
 8009468:	781a      	ldrb	r2, [r3, #0]
 800946a:	4c08      	ldr	r4, [pc, #32]	; (800948c <u8g2_Setup_ssd1306_i2c_128x64_noname_2+0x54>)
 800946c:	6979      	ldr	r1, [r7, #20]
 800946e:	68f8      	ldr	r0, [r7, #12]
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	9300      	str	r3, [sp, #0]
 8009474:	0023      	movs	r3, r4
 8009476:	f001 fb67 	bl	800ab48 <u8g2_SetupBuffer>
}
 800947a:	46c0      	nop			; (mov r8, r8)
 800947c:	46bd      	mov	sp, r7
 800947e:	b007      	add	sp, #28
 8009480:	bd90      	pop	{r4, r7, pc}
 8009482:	46c0      	nop			; (mov r8, r8)
 8009484:	0800b0b9 	.word	0x0800b0b9
 8009488:	0800b395 	.word	0x0800b395
 800948c:	0800a94d 	.word	0x0800a94d

08009490 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b082      	sub	sp, #8
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	000a      	movs	r2, r1
 800949a:	1cfb      	adds	r3, r7, #3
 800949c:	701a      	strb	r2, [r3, #0]
  font += offset;
 800949e:	1cfb      	adds	r3, r7, #3
 80094a0:	781b      	ldrb	r3, [r3, #0]
 80094a2:	687a      	ldr	r2, [r7, #4]
 80094a4:	18d3      	adds	r3, r2, r3
 80094a6:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	781b      	ldrb	r3, [r3, #0]
}
 80094ac:	0018      	movs	r0, r3
 80094ae:	46bd      	mov	sp, r7
 80094b0:	b002      	add	sp, #8
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b084      	sub	sp, #16
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	000a      	movs	r2, r1
 80094be:	1cfb      	adds	r3, r7, #3
 80094c0:	701a      	strb	r2, [r3, #0]
    uint16_t pos;
    font += offset;
 80094c2:	1cfb      	adds	r3, r7, #3
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	687a      	ldr	r2, [r7, #4]
 80094c8:	18d3      	adds	r3, r2, r3
 80094ca:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	781a      	ldrb	r2, [r3, #0]
 80094d0:	200e      	movs	r0, #14
 80094d2:	183b      	adds	r3, r7, r0
 80094d4:	801a      	strh	r2, [r3, #0]
    font++;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	3301      	adds	r3, #1
 80094da:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 80094dc:	183b      	adds	r3, r7, r0
 80094de:	183a      	adds	r2, r7, r0
 80094e0:	8812      	ldrh	r2, [r2, #0]
 80094e2:	0212      	lsls	r2, r2, #8
 80094e4:	801a      	strh	r2, [r3, #0]
    pos += u8x8_pgm_read( font);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	781b      	ldrb	r3, [r3, #0]
 80094ea:	b299      	uxth	r1, r3
 80094ec:	183b      	adds	r3, r7, r0
 80094ee:	183a      	adds	r2, r7, r0
 80094f0:	8812      	ldrh	r2, [r2, #0]
 80094f2:	188a      	adds	r2, r1, r2
 80094f4:	801a      	strh	r2, [r3, #0]
    return pos;
 80094f6:	183b      	adds	r3, r7, r0
 80094f8:	881b      	ldrh	r3, [r3, #0]
}
 80094fa:	0018      	movs	r0, r3
 80094fc:	46bd      	mov	sp, r7
 80094fe:	b004      	add	sp, #16
 8009500:	bd80      	pop	{r7, pc}

08009502 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8009502:	b580      	push	{r7, lr}
 8009504:	b082      	sub	sp, #8
 8009506:	af00      	add	r7, sp, #0
 8009508:	6078      	str	r0, [r7, #4]
 800950a:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	2100      	movs	r1, #0
 8009510:	0018      	movs	r0, r3
 8009512:	f7ff ffbd 	bl	8009490 <u8g2_font_get_byte>
 8009516:	0003      	movs	r3, r0
 8009518:	001a      	movs	r2, r3
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	2101      	movs	r1, #1
 8009522:	0018      	movs	r0, r3
 8009524:	f7ff ffb4 	bl	8009490 <u8g2_font_get_byte>
 8009528:	0003      	movs	r3, r0
 800952a:	001a      	movs	r2, r3
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	2102      	movs	r1, #2
 8009534:	0018      	movs	r0, r3
 8009536:	f7ff ffab 	bl	8009490 <u8g2_font_get_byte>
 800953a:	0003      	movs	r3, r0
 800953c:	001a      	movs	r2, r3
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	2103      	movs	r1, #3
 8009546:	0018      	movs	r0, r3
 8009548:	f7ff ffa2 	bl	8009490 <u8g2_font_get_byte>
 800954c:	0003      	movs	r3, r0
 800954e:	001a      	movs	r2, r3
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	2104      	movs	r1, #4
 8009558:	0018      	movs	r0, r3
 800955a:	f7ff ff99 	bl	8009490 <u8g2_font_get_byte>
 800955e:	0003      	movs	r3, r0
 8009560:	001a      	movs	r2, r3
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	2105      	movs	r1, #5
 800956a:	0018      	movs	r0, r3
 800956c:	f7ff ff90 	bl	8009490 <u8g2_font_get_byte>
 8009570:	0003      	movs	r3, r0
 8009572:	001a      	movs	r2, r3
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	2106      	movs	r1, #6
 800957c:	0018      	movs	r0, r3
 800957e:	f7ff ff87 	bl	8009490 <u8g2_font_get_byte>
 8009582:	0003      	movs	r3, r0
 8009584:	001a      	movs	r2, r3
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	2107      	movs	r1, #7
 800958e:	0018      	movs	r0, r3
 8009590:	f7ff ff7e 	bl	8009490 <u8g2_font_get_byte>
 8009594:	0003      	movs	r3, r0
 8009596:	001a      	movs	r2, r3
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	2108      	movs	r1, #8
 80095a0:	0018      	movs	r0, r3
 80095a2:	f7ff ff75 	bl	8009490 <u8g2_font_get_byte>
 80095a6:	0003      	movs	r3, r0
 80095a8:	001a      	movs	r2, r3
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	2109      	movs	r1, #9
 80095b2:	0018      	movs	r0, r3
 80095b4:	f7ff ff6c 	bl	8009490 <u8g2_font_get_byte>
 80095b8:	0003      	movs	r3, r0
 80095ba:	b25a      	sxtb	r2, r3
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	210a      	movs	r1, #10
 80095c4:	0018      	movs	r0, r3
 80095c6:	f7ff ff63 	bl	8009490 <u8g2_font_get_byte>
 80095ca:	0003      	movs	r3, r0
 80095cc:	b25a      	sxtb	r2, r3
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	210b      	movs	r1, #11
 80095d6:	0018      	movs	r0, r3
 80095d8:	f7ff ff5a 	bl	8009490 <u8g2_font_get_byte>
 80095dc:	0003      	movs	r3, r0
 80095de:	b25a      	sxtb	r2, r3
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	210c      	movs	r1, #12
 80095e8:	0018      	movs	r0, r3
 80095ea:	f7ff ff51 	bl	8009490 <u8g2_font_get_byte>
 80095ee:	0003      	movs	r3, r0
 80095f0:	b25a      	sxtb	r2, r3
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	210d      	movs	r1, #13
 80095fa:	0018      	movs	r0, r3
 80095fc:	f7ff ff48 	bl	8009490 <u8g2_font_get_byte>
 8009600:	0003      	movs	r3, r0
 8009602:	b25a      	sxtb	r2, r3
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	210e      	movs	r1, #14
 800960c:	0018      	movs	r0, r3
 800960e:	f7ff ff3f 	bl	8009490 <u8g2_font_get_byte>
 8009612:	0003      	movs	r3, r0
 8009614:	b25a      	sxtb	r2, r3
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	210f      	movs	r1, #15
 800961e:	0018      	movs	r0, r3
 8009620:	f7ff ff36 	bl	8009490 <u8g2_font_get_byte>
 8009624:	0003      	movs	r3, r0
 8009626:	b25a      	sxtb	r2, r3
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	2110      	movs	r1, #16
 8009630:	0018      	movs	r0, r3
 8009632:	f7ff ff2d 	bl	8009490 <u8g2_font_get_byte>
 8009636:	0003      	movs	r3, r0
 8009638:	b25a      	sxtb	r2, r3
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	2111      	movs	r1, #17
 8009642:	0018      	movs	r0, r3
 8009644:	f7ff ff36 	bl	80094b4 <u8g2_font_get_word>
 8009648:	0003      	movs	r3, r0
 800964a:	001a      	movs	r2, r3
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	2113      	movs	r1, #19
 8009654:	0018      	movs	r0, r3
 8009656:	f7ff ff2d 	bl	80094b4 <u8g2_font_get_word>
 800965a:	0003      	movs	r3, r0
 800965c:	001a      	movs	r2, r3
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	2115      	movs	r1, #21
 8009666:	0018      	movs	r0, r3
 8009668:	f7ff ff24 	bl	80094b4 <u8g2_font_get_word>
 800966c:	0003      	movs	r3, r0
 800966e:	001a      	movs	r2, r3
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	82da      	strh	r2, [r3, #22]
#endif
}
 8009674:	46c0      	nop			; (mov r8, r8)
 8009676:	46bd      	mov	sp, r7
 8009678:	b002      	add	sp, #8
 800967a:	bd80      	pop	{r7, pc}

0800967c <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 800967c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800967e:	b085      	sub	sp, #20
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	000a      	movs	r2, r1
 8009686:	1cfb      	adds	r3, r7, #3
 8009688:	701a      	strb	r2, [r3, #0]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 800968a:	250d      	movs	r5, #13
 800968c:	197b      	adds	r3, r7, r5
 800968e:	687a      	ldr	r2, [r7, #4]
 8009690:	7b12      	ldrb	r2, [r2, #12]
 8009692:	701a      	strb	r2, [r3, #0]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681a      	ldr	r2, [r3, #0]
 8009698:	240f      	movs	r4, #15
 800969a:	193b      	adds	r3, r7, r4
 800969c:	7812      	ldrb	r2, [r2, #0]
 800969e:	701a      	strb	r2, [r3, #0]
  
  val >>= bit_pos;
 80096a0:	193b      	adds	r3, r7, r4
 80096a2:	781a      	ldrb	r2, [r3, #0]
 80096a4:	197b      	adds	r3, r7, r5
 80096a6:	781b      	ldrb	r3, [r3, #0]
 80096a8:	411a      	asrs	r2, r3
 80096aa:	193b      	adds	r3, r7, r4
 80096ac:	701a      	strb	r2, [r3, #0]
  bit_pos_plus_cnt = bit_pos;
 80096ae:	200e      	movs	r0, #14
 80096b0:	183b      	adds	r3, r7, r0
 80096b2:	197a      	adds	r2, r7, r5
 80096b4:	7812      	ldrb	r2, [r2, #0]
 80096b6:	701a      	strb	r2, [r3, #0]
  bit_pos_plus_cnt += cnt;
 80096b8:	183b      	adds	r3, r7, r0
 80096ba:	1839      	adds	r1, r7, r0
 80096bc:	1cfa      	adds	r2, r7, #3
 80096be:	7809      	ldrb	r1, [r1, #0]
 80096c0:	7812      	ldrb	r2, [r2, #0]
 80096c2:	188a      	adds	r2, r1, r2
 80096c4:	701a      	strb	r2, [r3, #0]
  if ( bit_pos_plus_cnt >= 8 )
 80096c6:	183b      	adds	r3, r7, r0
 80096c8:	781b      	ldrb	r3, [r3, #0]
 80096ca:	2b07      	cmp	r3, #7
 80096cc:	d924      	bls.n	8009718 <u8g2_font_decode_get_unsigned_bits+0x9c>
  {
    uint8_t s = 8;
 80096ce:	260c      	movs	r6, #12
 80096d0:	19bb      	adds	r3, r7, r6
 80096d2:	2208      	movs	r2, #8
 80096d4:	701a      	strb	r2, [r3, #0]
    s -= bit_pos;
 80096d6:	19bb      	adds	r3, r7, r6
 80096d8:	19b9      	adds	r1, r7, r6
 80096da:	197a      	adds	r2, r7, r5
 80096dc:	7809      	ldrb	r1, [r1, #0]
 80096de:	7812      	ldrb	r2, [r2, #0]
 80096e0:	1a8a      	subs	r2, r1, r2
 80096e2:	701a      	strb	r2, [r3, #0]
    f->decode_ptr++;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	1c5a      	adds	r2, r3, #1
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	001a      	movs	r2, r3
 80096f6:	19bb      	adds	r3, r7, r6
 80096f8:	781b      	ldrb	r3, [r3, #0]
 80096fa:	409a      	lsls	r2, r3
 80096fc:	0013      	movs	r3, r2
 80096fe:	b25a      	sxtb	r2, r3
 8009700:	193b      	adds	r3, r7, r4
 8009702:	781b      	ldrb	r3, [r3, #0]
 8009704:	b25b      	sxtb	r3, r3
 8009706:	4313      	orrs	r3, r2
 8009708:	b25a      	sxtb	r2, r3
 800970a:	193b      	adds	r3, r7, r4
 800970c:	701a      	strb	r2, [r3, #0]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 800970e:	183b      	adds	r3, r7, r0
 8009710:	183a      	adds	r2, r7, r0
 8009712:	7812      	ldrb	r2, [r2, #0]
 8009714:	3a08      	subs	r2, #8
 8009716:	701a      	strb	r2, [r3, #0]
  }
  val &= (1U<<cnt)-1;
 8009718:	1cfb      	adds	r3, r7, #3
 800971a:	781b      	ldrb	r3, [r3, #0]
 800971c:	2201      	movs	r2, #1
 800971e:	4252      	negs	r2, r2
 8009720:	409a      	lsls	r2, r3
 8009722:	0013      	movs	r3, r2
 8009724:	b2db      	uxtb	r3, r3
 8009726:	43db      	mvns	r3, r3
 8009728:	b2da      	uxtb	r2, r3
 800972a:	200f      	movs	r0, #15
 800972c:	183b      	adds	r3, r7, r0
 800972e:	1839      	adds	r1, r7, r0
 8009730:	7809      	ldrb	r1, [r1, #0]
 8009732:	400a      	ands	r2, r1
 8009734:	701a      	strb	r2, [r3, #0]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	220e      	movs	r2, #14
 800973a:	18ba      	adds	r2, r7, r2
 800973c:	7812      	ldrb	r2, [r2, #0]
 800973e:	731a      	strb	r2, [r3, #12]
  return val;
 8009740:	183b      	adds	r3, r7, r0
 8009742:	781b      	ldrb	r3, [r3, #0]
}
 8009744:	0018      	movs	r0, r3
 8009746:	46bd      	mov	sp, r7
 8009748:	b005      	add	sp, #20
 800974a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800974c <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b084      	sub	sp, #16
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	000a      	movs	r2, r1
 8009756:	1cfb      	adds	r3, r7, #3
 8009758:	701a      	strb	r2, [r3, #0]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 800975a:	1cfb      	adds	r3, r7, #3
 800975c:	781a      	ldrb	r2, [r3, #0]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	0011      	movs	r1, r2
 8009762:	0018      	movs	r0, r3
 8009764:	f7ff ff8a 	bl	800967c <u8g2_font_decode_get_unsigned_bits>
 8009768:	0003      	movs	r3, r0
 800976a:	001a      	movs	r2, r3
 800976c:	210f      	movs	r1, #15
 800976e:	187b      	adds	r3, r7, r1
 8009770:	701a      	strb	r2, [r3, #0]
  d = 1;
 8009772:	200e      	movs	r0, #14
 8009774:	183b      	adds	r3, r7, r0
 8009776:	2201      	movs	r2, #1
 8009778:	701a      	strb	r2, [r3, #0]
  cnt--;
 800977a:	1cfb      	adds	r3, r7, #3
 800977c:	781a      	ldrb	r2, [r3, #0]
 800977e:	1cfb      	adds	r3, r7, #3
 8009780:	3a01      	subs	r2, #1
 8009782:	701a      	strb	r2, [r3, #0]
  d <<= cnt;
 8009784:	183b      	adds	r3, r7, r0
 8009786:	2200      	movs	r2, #0
 8009788:	569a      	ldrsb	r2, [r3, r2]
 800978a:	1cfb      	adds	r3, r7, #3
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	409a      	lsls	r2, r3
 8009790:	183b      	adds	r3, r7, r0
 8009792:	701a      	strb	r2, [r3, #0]
  v -= d;
 8009794:	187b      	adds	r3, r7, r1
 8009796:	781a      	ldrb	r2, [r3, #0]
 8009798:	183b      	adds	r3, r7, r0
 800979a:	781b      	ldrb	r3, [r3, #0]
 800979c:	1ad3      	subs	r3, r2, r3
 800979e:	b2da      	uxtb	r2, r3
 80097a0:	187b      	adds	r3, r7, r1
 80097a2:	701a      	strb	r2, [r3, #0]
  return v;
 80097a4:	187b      	adds	r3, r7, r1
 80097a6:	781b      	ldrb	r3, [r3, #0]
 80097a8:	b25b      	sxtb	r3, r3
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 80097aa:	0018      	movs	r0, r3
 80097ac:	46bd      	mov	sp, r7
 80097ae:	b004      	add	sp, #16
 80097b0:	bd80      	pop	{r7, pc}

080097b2 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 80097b2:	b5b0      	push	{r4, r5, r7, lr}
 80097b4:	b082      	sub	sp, #8
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	0005      	movs	r5, r0
 80097ba:	000c      	movs	r4, r1
 80097bc:	0010      	movs	r0, r2
 80097be:	0019      	movs	r1, r3
 80097c0:	1dbb      	adds	r3, r7, #6
 80097c2:	1c2a      	adds	r2, r5, #0
 80097c4:	801a      	strh	r2, [r3, #0]
 80097c6:	1d7b      	adds	r3, r7, #5
 80097c8:	1c22      	adds	r2, r4, #0
 80097ca:	701a      	strb	r2, [r3, #0]
 80097cc:	1d3b      	adds	r3, r7, #4
 80097ce:	1c02      	adds	r2, r0, #0
 80097d0:	701a      	strb	r2, [r3, #0]
 80097d2:	1cfb      	adds	r3, r7, #3
 80097d4:	1c0a      	adds	r2, r1, #0
 80097d6:	701a      	strb	r2, [r3, #0]
  switch(dir)
 80097d8:	1cfb      	adds	r3, r7, #3
 80097da:	781b      	ldrb	r3, [r3, #0]
 80097dc:	2b02      	cmp	r3, #2
 80097de:	d019      	beq.n	8009814 <u8g2_add_vector_y+0x62>
 80097e0:	dc22      	bgt.n	8009828 <u8g2_add_vector_y+0x76>
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d002      	beq.n	80097ec <u8g2_add_vector_y+0x3a>
 80097e6:	2b01      	cmp	r3, #1
 80097e8:	d00a      	beq.n	8009800 <u8g2_add_vector_y+0x4e>
 80097ea:	e01d      	b.n	8009828 <u8g2_add_vector_y+0x76>
  {
    case 0:
      dy += y;
 80097ec:	1d3b      	adds	r3, r7, #4
 80097ee:	781b      	ldrb	r3, [r3, #0]
 80097f0:	b25b      	sxtb	r3, r3
 80097f2:	b299      	uxth	r1, r3
 80097f4:	1dbb      	adds	r3, r7, #6
 80097f6:	1dba      	adds	r2, r7, #6
 80097f8:	8812      	ldrh	r2, [r2, #0]
 80097fa:	188a      	adds	r2, r1, r2
 80097fc:	801a      	strh	r2, [r3, #0]
      break;
 80097fe:	e01d      	b.n	800983c <u8g2_add_vector_y+0x8a>
    case 1:
      dy += x;
 8009800:	1d7b      	adds	r3, r7, #5
 8009802:	781b      	ldrb	r3, [r3, #0]
 8009804:	b25b      	sxtb	r3, r3
 8009806:	b299      	uxth	r1, r3
 8009808:	1dbb      	adds	r3, r7, #6
 800980a:	1dba      	adds	r2, r7, #6
 800980c:	8812      	ldrh	r2, [r2, #0]
 800980e:	188a      	adds	r2, r1, r2
 8009810:	801a      	strh	r2, [r3, #0]
      break;
 8009812:	e013      	b.n	800983c <u8g2_add_vector_y+0x8a>
    case 2:
      dy -= y;
 8009814:	1d3b      	adds	r3, r7, #4
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	b25b      	sxtb	r3, r3
 800981a:	b29a      	uxth	r2, r3
 800981c:	1dbb      	adds	r3, r7, #6
 800981e:	1db9      	adds	r1, r7, #6
 8009820:	8809      	ldrh	r1, [r1, #0]
 8009822:	1a8a      	subs	r2, r1, r2
 8009824:	801a      	strh	r2, [r3, #0]
      break;
 8009826:	e009      	b.n	800983c <u8g2_add_vector_y+0x8a>
    default:
      dy -= x;
 8009828:	1d7b      	adds	r3, r7, #5
 800982a:	781b      	ldrb	r3, [r3, #0]
 800982c:	b25b      	sxtb	r3, r3
 800982e:	b29a      	uxth	r2, r3
 8009830:	1dbb      	adds	r3, r7, #6
 8009832:	1db9      	adds	r1, r7, #6
 8009834:	8809      	ldrh	r1, [r1, #0]
 8009836:	1a8a      	subs	r2, r1, r2
 8009838:	801a      	strh	r2, [r3, #0]
      break;      
 800983a:	46c0      	nop			; (mov r8, r8)
  }
  return dy;
 800983c:	1dbb      	adds	r3, r7, #6
 800983e:	881b      	ldrh	r3, [r3, #0]
}
 8009840:	0018      	movs	r0, r3
 8009842:	46bd      	mov	sp, r7
 8009844:	b002      	add	sp, #8
 8009846:	bdb0      	pop	{r4, r5, r7, pc}

08009848 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8009848:	b5b0      	push	{r4, r5, r7, lr}
 800984a:	b082      	sub	sp, #8
 800984c:	af00      	add	r7, sp, #0
 800984e:	0005      	movs	r5, r0
 8009850:	000c      	movs	r4, r1
 8009852:	0010      	movs	r0, r2
 8009854:	0019      	movs	r1, r3
 8009856:	1dbb      	adds	r3, r7, #6
 8009858:	1c2a      	adds	r2, r5, #0
 800985a:	801a      	strh	r2, [r3, #0]
 800985c:	1d7b      	adds	r3, r7, #5
 800985e:	1c22      	adds	r2, r4, #0
 8009860:	701a      	strb	r2, [r3, #0]
 8009862:	1d3b      	adds	r3, r7, #4
 8009864:	1c02      	adds	r2, r0, #0
 8009866:	701a      	strb	r2, [r3, #0]
 8009868:	1cfb      	adds	r3, r7, #3
 800986a:	1c0a      	adds	r2, r1, #0
 800986c:	701a      	strb	r2, [r3, #0]
  switch(dir)
 800986e:	1cfb      	adds	r3, r7, #3
 8009870:	781b      	ldrb	r3, [r3, #0]
 8009872:	2b02      	cmp	r3, #2
 8009874:	d019      	beq.n	80098aa <u8g2_add_vector_x+0x62>
 8009876:	dc22      	bgt.n	80098be <u8g2_add_vector_x+0x76>
 8009878:	2b00      	cmp	r3, #0
 800987a:	d002      	beq.n	8009882 <u8g2_add_vector_x+0x3a>
 800987c:	2b01      	cmp	r3, #1
 800987e:	d00a      	beq.n	8009896 <u8g2_add_vector_x+0x4e>
 8009880:	e01d      	b.n	80098be <u8g2_add_vector_x+0x76>
  {
    case 0:
      dx += x;
 8009882:	1d7b      	adds	r3, r7, #5
 8009884:	781b      	ldrb	r3, [r3, #0]
 8009886:	b25b      	sxtb	r3, r3
 8009888:	b299      	uxth	r1, r3
 800988a:	1dbb      	adds	r3, r7, #6
 800988c:	1dba      	adds	r2, r7, #6
 800988e:	8812      	ldrh	r2, [r2, #0]
 8009890:	188a      	adds	r2, r1, r2
 8009892:	801a      	strh	r2, [r3, #0]
      break;
 8009894:	e01d      	b.n	80098d2 <u8g2_add_vector_x+0x8a>
    case 1:
      dx -= y;
 8009896:	1d3b      	adds	r3, r7, #4
 8009898:	781b      	ldrb	r3, [r3, #0]
 800989a:	b25b      	sxtb	r3, r3
 800989c:	b29a      	uxth	r2, r3
 800989e:	1dbb      	adds	r3, r7, #6
 80098a0:	1db9      	adds	r1, r7, #6
 80098a2:	8809      	ldrh	r1, [r1, #0]
 80098a4:	1a8a      	subs	r2, r1, r2
 80098a6:	801a      	strh	r2, [r3, #0]
      break;
 80098a8:	e013      	b.n	80098d2 <u8g2_add_vector_x+0x8a>
    case 2:
      dx -= x;
 80098aa:	1d7b      	adds	r3, r7, #5
 80098ac:	781b      	ldrb	r3, [r3, #0]
 80098ae:	b25b      	sxtb	r3, r3
 80098b0:	b29a      	uxth	r2, r3
 80098b2:	1dbb      	adds	r3, r7, #6
 80098b4:	1db9      	adds	r1, r7, #6
 80098b6:	8809      	ldrh	r1, [r1, #0]
 80098b8:	1a8a      	subs	r2, r1, r2
 80098ba:	801a      	strh	r2, [r3, #0]
      break;
 80098bc:	e009      	b.n	80098d2 <u8g2_add_vector_x+0x8a>
    default:
      dx += y;
 80098be:	1d3b      	adds	r3, r7, #4
 80098c0:	781b      	ldrb	r3, [r3, #0]
 80098c2:	b25b      	sxtb	r3, r3
 80098c4:	b299      	uxth	r1, r3
 80098c6:	1dbb      	adds	r3, r7, #6
 80098c8:	1dba      	adds	r2, r7, #6
 80098ca:	8812      	ldrh	r2, [r2, #0]
 80098cc:	188a      	adds	r2, r1, r2
 80098ce:	801a      	strh	r2, [r3, #0]
      break;      
 80098d0:	46c0      	nop			; (mov r8, r8)
  }
  return dx;
 80098d2:	1dbb      	adds	r3, r7, #6
 80098d4:	881b      	ldrh	r3, [r3, #0]
}
 80098d6:	0018      	movs	r0, r3
 80098d8:	46bd      	mov	sp, r7
 80098da:	b002      	add	sp, #8
 80098dc:	bdb0      	pop	{r4, r5, r7, pc}

080098de <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 80098de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098e0:	b089      	sub	sp, #36	; 0x24
 80098e2:	af02      	add	r7, sp, #8
 80098e4:	6078      	str	r0, [r7, #4]
 80098e6:	0008      	movs	r0, r1
 80098e8:	0011      	movs	r1, r2
 80098ea:	1cfb      	adds	r3, r7, #3
 80098ec:	1c02      	adds	r2, r0, #0
 80098ee:	701a      	strb	r2, [r3, #0]
 80098f0:	1cbb      	adds	r3, r7, #2
 80098f2:	1c0a      	adds	r2, r1, #0
 80098f4:	701a      	strb	r2, [r3, #0]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	3360      	adds	r3, #96	; 0x60
 80098fa:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 80098fc:	2317      	movs	r3, #23
 80098fe:	18fb      	adds	r3, r7, r3
 8009900:	1cfa      	adds	r2, r7, #3
 8009902:	7812      	ldrb	r2, [r2, #0]
 8009904:	701a      	strb	r2, [r3, #0]
  
  /* get the local position */
  lx = decode->x;
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	2208      	movs	r2, #8
 800990a:	569a      	ldrsb	r2, [r3, r2]
 800990c:	2315      	movs	r3, #21
 800990e:	18fb      	adds	r3, r7, r3
 8009910:	701a      	strb	r2, [r3, #0]
  ly = decode->y;
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	2209      	movs	r2, #9
 8009916:	569a      	ldrsb	r2, [r3, r2]
 8009918:	2314      	movs	r3, #20
 800991a:	18fb      	adds	r3, r7, r3
 800991c:	701a      	strb	r2, [r3, #0]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	220a      	movs	r2, #10
 8009922:	569a      	ldrsb	r2, [r3, r2]
 8009924:	200f      	movs	r0, #15
 8009926:	183b      	adds	r3, r7, r0
 8009928:	701a      	strb	r2, [r3, #0]
    rem -= lx;
 800992a:	183b      	adds	r3, r7, r0
 800992c:	1839      	adds	r1, r7, r0
 800992e:	2215      	movs	r2, #21
 8009930:	18ba      	adds	r2, r7, r2
 8009932:	7809      	ldrb	r1, [r1, #0]
 8009934:	7812      	ldrb	r2, [r2, #0]
 8009936:	1a8a      	subs	r2, r1, r2
 8009938:	701a      	strb	r2, [r3, #0]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 800993a:	2116      	movs	r1, #22
 800993c:	187b      	adds	r3, r7, r1
 800993e:	183a      	adds	r2, r7, r0
 8009940:	7812      	ldrb	r2, [r2, #0]
 8009942:	701a      	strb	r2, [r3, #0]
    if ( cnt < rem )
 8009944:	2417      	movs	r4, #23
 8009946:	193a      	adds	r2, r7, r4
 8009948:	183b      	adds	r3, r7, r0
 800994a:	7812      	ldrb	r2, [r2, #0]
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	429a      	cmp	r2, r3
 8009950:	d203      	bcs.n	800995a <u8g2_font_decode_len+0x7c>
      current = cnt;
 8009952:	187b      	adds	r3, r7, r1
 8009954:	193a      	adds	r2, r7, r4
 8009956:	7812      	ldrb	r2, [r2, #0]
 8009958:	701a      	strb	r2, [r3, #0]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 800995a:	260c      	movs	r6, #12
 800995c:	19bb      	adds	r3, r7, r6
 800995e:	693a      	ldr	r2, [r7, #16]
 8009960:	8892      	ldrh	r2, [r2, #4]
 8009962:	801a      	strh	r2, [r3, #0]
    y = decode->target_y;
 8009964:	230a      	movs	r3, #10
 8009966:	18fb      	adds	r3, r7, r3
 8009968:	693a      	ldr	r2, [r7, #16]
 800996a:	88d2      	ldrh	r2, [r2, #6]
 800996c:	801a      	strh	r2, [r3, #0]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 800996e:	2215      	movs	r2, #21
 8009970:	18bb      	adds	r3, r7, r2
 8009972:	2100      	movs	r1, #0
 8009974:	5659      	ldrsb	r1, [r3, r1]
 8009976:	2014      	movs	r0, #20
 8009978:	183b      	adds	r3, r7, r0
 800997a:	2200      	movs	r2, #0
 800997c:	569a      	ldrsb	r2, [r3, r2]
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	7c1d      	ldrb	r5, [r3, #16]
 8009982:	19bc      	adds	r4, r7, r6
 8009984:	19bb      	adds	r3, r7, r6
 8009986:	8818      	ldrh	r0, [r3, #0]
 8009988:	002b      	movs	r3, r5
 800998a:	f7ff ff5d 	bl	8009848 <u8g2_add_vector_x>
 800998e:	0003      	movs	r3, r0
 8009990:	8023      	strh	r3, [r4, #0]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8009992:	2215      	movs	r2, #21
 8009994:	18bb      	adds	r3, r7, r2
 8009996:	2100      	movs	r1, #0
 8009998:	5659      	ldrsb	r1, [r3, r1]
 800999a:	2014      	movs	r0, #20
 800999c:	183b      	adds	r3, r7, r0
 800999e:	2200      	movs	r2, #0
 80099a0:	569a      	ldrsb	r2, [r3, r2]
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	7c1d      	ldrb	r5, [r3, #16]
 80099a6:	230a      	movs	r3, #10
 80099a8:	18fc      	adds	r4, r7, r3
 80099aa:	18fb      	adds	r3, r7, r3
 80099ac:	8818      	ldrh	r0, [r3, #0]
 80099ae:	002b      	movs	r3, r5
 80099b0:	f7ff feff 	bl	80097b2 <u8g2_add_vector_y>
 80099b4:	0003      	movs	r3, r0
 80099b6:	8023      	strh	r3, [r4, #0]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 80099b8:	1cbb      	adds	r3, r7, #2
 80099ba:	781b      	ldrb	r3, [r3, #0]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d016      	beq.n	80099ee <u8g2_font_decode_len+0x110>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	7b99      	ldrb	r1, [r3, #14]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2292      	movs	r2, #146	; 0x92
 80099c8:	5499      	strb	r1, [r3, r2]
      u8g2_DrawHVLine(u8g2, 
 80099ca:	2116      	movs	r1, #22
 80099cc:	187b      	adds	r3, r7, r1
 80099ce:	781b      	ldrb	r3, [r3, #0]
 80099d0:	b29d      	uxth	r5, r3
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	7c1b      	ldrb	r3, [r3, #16]
 80099d6:	220a      	movs	r2, #10
 80099d8:	18ba      	adds	r2, r7, r2
 80099da:	8814      	ldrh	r4, [r2, #0]
 80099dc:	19ba      	adds	r2, r7, r6
 80099de:	8811      	ldrh	r1, [r2, #0]
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	9300      	str	r3, [sp, #0]
 80099e4:	002b      	movs	r3, r5
 80099e6:	0022      	movs	r2, r4
 80099e8:	f000 fd2d 	bl	800a446 <u8g2_DrawHVLine>
 80099ec:	e01a      	b.n	8009a24 <u8g2_font_decode_len+0x146>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	7b5b      	ldrb	r3, [r3, #13]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d116      	bne.n	8009a24 <u8g2_font_decode_len+0x146>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	7bd9      	ldrb	r1, [r3, #15]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2292      	movs	r2, #146	; 0x92
 80099fe:	5499      	strb	r1, [r3, r2]
      u8g2_DrawHVLine(u8g2, 
 8009a00:	2316      	movs	r3, #22
 8009a02:	18fb      	adds	r3, r7, r3
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	b29d      	uxth	r5, r3
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	7c1b      	ldrb	r3, [r3, #16]
 8009a0c:	220a      	movs	r2, #10
 8009a0e:	18ba      	adds	r2, r7, r2
 8009a10:	8814      	ldrh	r4, [r2, #0]
 8009a12:	220c      	movs	r2, #12
 8009a14:	18ba      	adds	r2, r7, r2
 8009a16:	8811      	ldrh	r1, [r2, #0]
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	9300      	str	r3, [sp, #0]
 8009a1c:	002b      	movs	r3, r5
 8009a1e:	0022      	movs	r2, r4
 8009a20:	f000 fd11 	bl	800a446 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8009a24:	2117      	movs	r1, #23
 8009a26:	187a      	adds	r2, r7, r1
 8009a28:	200f      	movs	r0, #15
 8009a2a:	183b      	adds	r3, r7, r0
 8009a2c:	7812      	ldrb	r2, [r2, #0]
 8009a2e:	781b      	ldrb	r3, [r3, #0]
 8009a30:	429a      	cmp	r2, r3
 8009a32:	d311      	bcc.n	8009a58 <u8g2_font_decode_len+0x17a>
      break;
    cnt -= rem;
 8009a34:	187b      	adds	r3, r7, r1
 8009a36:	1879      	adds	r1, r7, r1
 8009a38:	183a      	adds	r2, r7, r0
 8009a3a:	7809      	ldrb	r1, [r1, #0]
 8009a3c:	7812      	ldrb	r2, [r2, #0]
 8009a3e:	1a8a      	subs	r2, r1, r2
 8009a40:	701a      	strb	r2, [r3, #0]
    lx = 0;
 8009a42:	2315      	movs	r3, #21
 8009a44:	18fb      	adds	r3, r7, r3
 8009a46:	2200      	movs	r2, #0
 8009a48:	701a      	strb	r2, [r3, #0]
    ly++;
 8009a4a:	2114      	movs	r1, #20
 8009a4c:	187b      	adds	r3, r7, r1
 8009a4e:	781a      	ldrb	r2, [r3, #0]
 8009a50:	187b      	adds	r3, r7, r1
 8009a52:	3201      	adds	r2, #1
 8009a54:	701a      	strb	r2, [r3, #0]
    rem = decode->glyph_width;
 8009a56:	e762      	b.n	800991e <u8g2_font_decode_len+0x40>
      break;
 8009a58:	46c0      	nop			; (mov r8, r8)
  }
  lx += cnt;
 8009a5a:	2015      	movs	r0, #21
 8009a5c:	183b      	adds	r3, r7, r0
 8009a5e:	1839      	adds	r1, r7, r0
 8009a60:	2217      	movs	r2, #23
 8009a62:	18ba      	adds	r2, r7, r2
 8009a64:	7809      	ldrb	r1, [r1, #0]
 8009a66:	7812      	ldrb	r2, [r2, #0]
 8009a68:	188a      	adds	r2, r1, r2
 8009a6a:	701a      	strb	r2, [r3, #0]
  
  decode->x = lx;
 8009a6c:	183b      	adds	r3, r7, r0
 8009a6e:	2200      	movs	r2, #0
 8009a70:	569a      	ldrsb	r2, [r3, r2]
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	721a      	strb	r2, [r3, #8]
  decode->y = ly;
 8009a76:	2314      	movs	r3, #20
 8009a78:	18fb      	adds	r3, r7, r3
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	569a      	ldrsb	r2, [r3, r2]
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	725a      	strb	r2, [r3, #9]
  
}
 8009a82:	46c0      	nop			; (mov r8, r8)
 8009a84:	46bd      	mov	sp, r7
 8009a86:	b007      	add	sp, #28
 8009a88:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009a8a <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8009a8a:	b580      	push	{r7, lr}
 8009a8c:	b084      	sub	sp, #16
 8009a8e:	af00      	add	r7, sp, #0
 8009a90:	6078      	str	r0, [r7, #4]
 8009a92:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	3360      	adds	r3, #96	; 0x60
 8009a98:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	683a      	ldr	r2, [r7, #0]
 8009a9e:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2278      	movs	r2, #120	; 0x78
 8009aaa:	5c9a      	ldrb	r2, [r3, r2]
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	0011      	movs	r1, r2
 8009ab0:	0018      	movs	r0, r3
 8009ab2:	f7ff fde3 	bl	800967c <u8g2_font_decode_get_unsigned_bits>
 8009ab6:	0003      	movs	r3, r0
 8009ab8:	b25a      	sxtb	r2, r3
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2279      	movs	r2, #121	; 0x79
 8009ac2:	5c9a      	ldrb	r2, [r3, r2]
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	0011      	movs	r1, r2
 8009ac8:	0018      	movs	r0, r3
 8009aca:	f7ff fdd7 	bl	800967c <u8g2_font_decode_get_unsigned_bits>
 8009ace:	0003      	movs	r3, r0
 8009ad0:	b25a      	sxtb	r2, r3
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2292      	movs	r2, #146	; 0x92
 8009ada:	5c9a      	ldrb	r2, [r3, r2]
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	7b9b      	ldrb	r3, [r3, #14]
 8009ae4:	425a      	negs	r2, r3
 8009ae6:	4153      	adcs	r3, r2
 8009ae8:	b2db      	uxtb	r3, r3
 8009aea:	001a      	movs	r2, r3
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	73da      	strb	r2, [r3, #15]
}
 8009af0:	46c0      	nop			; (mov r8, r8)
 8009af2:	46bd      	mov	sp, r7
 8009af4:	b004      	add	sp, #16
 8009af6:	bd80      	pop	{r7, pc}

08009af8 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8009af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009afa:	b08b      	sub	sp, #44	; 0x2c
 8009afc:	af02      	add	r7, sp, #8
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	3360      	adds	r3, #96	; 0x60
 8009b06:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 8009b08:	683a      	ldr	r2, [r7, #0]
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	0011      	movs	r1, r2
 8009b0e:	0018      	movs	r0, r3
 8009b10:	f7ff ffbb 	bl	8009a8a <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8009b14:	2513      	movs	r5, #19
 8009b16:	197b      	adds	r3, r7, r5
 8009b18:	687a      	ldr	r2, [r7, #4]
 8009b1a:	216b      	movs	r1, #107	; 0x6b
 8009b1c:	5c52      	ldrb	r2, [r2, r1]
 8009b1e:	701a      	strb	r2, [r3, #0]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	227a      	movs	r2, #122	; 0x7a
 8009b24:	5c9a      	ldrb	r2, [r3, r2]
 8009b26:	2612      	movs	r6, #18
 8009b28:	19bc      	adds	r4, r7, r6
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	0011      	movs	r1, r2
 8009b2e:	0018      	movs	r0, r3
 8009b30:	f7ff fe0c 	bl	800974c <u8g2_font_decode_get_signed_bits>
 8009b34:	0003      	movs	r3, r0
 8009b36:	7023      	strb	r3, [r4, #0]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	227b      	movs	r2, #123	; 0x7b
 8009b3c:	5c9a      	ldrb	r2, [r3, r2]
 8009b3e:	2311      	movs	r3, #17
 8009b40:	18fc      	adds	r4, r7, r3
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	0011      	movs	r1, r2
 8009b46:	0018      	movs	r0, r3
 8009b48:	f7ff fe00 	bl	800974c <u8g2_font_decode_get_signed_bits>
 8009b4c:	0003      	movs	r3, r0
 8009b4e:	7023      	strb	r3, [r4, #0]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	227c      	movs	r2, #124	; 0x7c
 8009b54:	5c9a      	ldrb	r2, [r3, r2]
 8009b56:	2110      	movs	r1, #16
 8009b58:	187c      	adds	r4, r7, r1
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	0011      	movs	r1, r2
 8009b5e:	0018      	movs	r0, r3
 8009b60:	f7ff fdf4 	bl	800974c <u8g2_font_decode_get_signed_bits>
 8009b64:	0003      	movs	r3, r0
 8009b66:	7023      	strb	r3, [r4, #0]
  
  if ( decode->glyph_width > 0 )
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	7a9b      	ldrb	r3, [r3, #10]
 8009b6c:	b25b      	sxtb	r3, r3
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	dc00      	bgt.n	8009b74 <u8g2_font_decode_glyph+0x7c>
 8009b72:	e134      	b.n	8009dde <u8g2_font_decode_glyph+0x2e6>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	8898      	ldrh	r0, [r3, #4]
 8009b78:	197b      	adds	r3, r7, r5
 8009b7a:	781a      	ldrb	r2, [r3, #0]
 8009b7c:	2311      	movs	r3, #17
 8009b7e:	18fb      	adds	r3, r7, r3
 8009b80:	781b      	ldrb	r3, [r3, #0]
 8009b82:	18d3      	adds	r3, r2, r3
 8009b84:	b2db      	uxtb	r3, r3
 8009b86:	425b      	negs	r3, r3
 8009b88:	b2db      	uxtb	r3, r3
 8009b8a:	b25a      	sxtb	r2, r3
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	7c1c      	ldrb	r4, [r3, #16]
 8009b90:	19bb      	adds	r3, r7, r6
 8009b92:	2100      	movs	r1, #0
 8009b94:	5659      	ldrsb	r1, [r3, r1]
 8009b96:	0023      	movs	r3, r4
 8009b98:	f7ff fe56 	bl	8009848 <u8g2_add_vector_x>
 8009b9c:	0003      	movs	r3, r0
 8009b9e:	001a      	movs	r2, r3
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	88d8      	ldrh	r0, [r3, #6]
 8009ba8:	197b      	adds	r3, r7, r5
 8009baa:	781a      	ldrb	r2, [r3, #0]
 8009bac:	2311      	movs	r3, #17
 8009bae:	18fb      	adds	r3, r7, r3
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	18d3      	adds	r3, r2, r3
 8009bb4:	b2db      	uxtb	r3, r3
 8009bb6:	425b      	negs	r3, r3
 8009bb8:	b2db      	uxtb	r3, r3
 8009bba:	b25a      	sxtb	r2, r3
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	7c1c      	ldrb	r4, [r3, #16]
 8009bc0:	19bb      	adds	r3, r7, r6
 8009bc2:	2100      	movs	r1, #0
 8009bc4:	5659      	ldrsb	r1, [r3, r1]
 8009bc6:	0023      	movs	r3, r4
 8009bc8:	f7ff fdf3 	bl	80097b2 <u8g2_add_vector_y>
 8009bcc:	0003      	movs	r3, r0
 8009bce:	001a      	movs	r2, r3
 8009bd0:	697b      	ldr	r3, [r7, #20]
 8009bd2:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8009bd4:	211e      	movs	r1, #30
 8009bd6:	187b      	adds	r3, r7, r1
 8009bd8:	697a      	ldr	r2, [r7, #20]
 8009bda:	8892      	ldrh	r2, [r2, #4]
 8009bdc:	801a      	strh	r2, [r3, #0]
      y0 = decode->target_y;
 8009bde:	201a      	movs	r0, #26
 8009be0:	183b      	adds	r3, r7, r0
 8009be2:	697a      	ldr	r2, [r7, #20]
 8009be4:	88d2      	ldrh	r2, [r2, #6]
 8009be6:	801a      	strh	r2, [r3, #0]
      x1 = x0;
 8009be8:	231c      	movs	r3, #28
 8009bea:	18fb      	adds	r3, r7, r3
 8009bec:	187a      	adds	r2, r7, r1
 8009bee:	8812      	ldrh	r2, [r2, #0]
 8009bf0:	801a      	strh	r2, [r3, #0]
      y1 = y0;
 8009bf2:	2318      	movs	r3, #24
 8009bf4:	18fb      	adds	r3, r7, r3
 8009bf6:	183a      	adds	r2, r7, r0
 8009bf8:	8812      	ldrh	r2, [r2, #0]
 8009bfa:	801a      	strh	r2, [r3, #0]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	7c1b      	ldrb	r3, [r3, #16]
 8009c00:	2b03      	cmp	r3, #3
 8009c02:	d100      	bne.n	8009c06 <u8g2_font_decode_glyph+0x10e>
 8009c04:	e06d      	b.n	8009ce2 <u8g2_font_decode_glyph+0x1ea>
 8009c06:	dd00      	ble.n	8009c0a <u8g2_font_decode_glyph+0x112>
 8009c08:	e08c      	b.n	8009d24 <u8g2_font_decode_glyph+0x22c>
 8009c0a:	2b02      	cmp	r3, #2
 8009c0c:	d03d      	beq.n	8009c8a <u8g2_font_decode_glyph+0x192>
 8009c0e:	dd00      	ble.n	8009c12 <u8g2_font_decode_glyph+0x11a>
 8009c10:	e088      	b.n	8009d24 <u8g2_font_decode_glyph+0x22c>
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d002      	beq.n	8009c1c <u8g2_font_decode_glyph+0x124>
 8009c16:	2b01      	cmp	r3, #1
 8009c18:	d016      	beq.n	8009c48 <u8g2_font_decode_glyph+0x150>
 8009c1a:	e083      	b.n	8009d24 <u8g2_font_decode_glyph+0x22c>
      {
	case 0:
	    x1 += decode->glyph_width;
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	7a9b      	ldrb	r3, [r3, #10]
 8009c20:	b25b      	sxtb	r3, r3
 8009c22:	b299      	uxth	r1, r3
 8009c24:	221c      	movs	r2, #28
 8009c26:	18bb      	adds	r3, r7, r2
 8009c28:	18ba      	adds	r2, r7, r2
 8009c2a:	8812      	ldrh	r2, [r2, #0]
 8009c2c:	188a      	adds	r2, r1, r2
 8009c2e:	801a      	strh	r2, [r3, #0]
	    y1 += h;
 8009c30:	2313      	movs	r3, #19
 8009c32:	18fb      	adds	r3, r7, r3
 8009c34:	781b      	ldrb	r3, [r3, #0]
 8009c36:	b25b      	sxtb	r3, r3
 8009c38:	b299      	uxth	r1, r3
 8009c3a:	2218      	movs	r2, #24
 8009c3c:	18bb      	adds	r3, r7, r2
 8009c3e:	18ba      	adds	r2, r7, r2
 8009c40:	8812      	ldrh	r2, [r2, #0]
 8009c42:	188a      	adds	r2, r1, r2
 8009c44:	801a      	strh	r2, [r3, #0]
	    break;
 8009c46:	e06d      	b.n	8009d24 <u8g2_font_decode_glyph+0x22c>
	case 1:
	    x0 -= h;
 8009c48:	2313      	movs	r3, #19
 8009c4a:	18fb      	adds	r3, r7, r3
 8009c4c:	781b      	ldrb	r3, [r3, #0]
 8009c4e:	b25b      	sxtb	r3, r3
 8009c50:	b29a      	uxth	r2, r3
 8009c52:	201e      	movs	r0, #30
 8009c54:	183b      	adds	r3, r7, r0
 8009c56:	1839      	adds	r1, r7, r0
 8009c58:	8809      	ldrh	r1, [r1, #0]
 8009c5a:	1a8a      	subs	r2, r1, r2
 8009c5c:	801a      	strh	r2, [r3, #0]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8009c5e:	183b      	adds	r3, r7, r0
 8009c60:	881a      	ldrh	r2, [r3, #0]
 8009c62:	183b      	adds	r3, r7, r0
 8009c64:	3201      	adds	r2, #1
 8009c66:	801a      	strh	r2, [r3, #0]
	    x1++;
 8009c68:	211c      	movs	r1, #28
 8009c6a:	187b      	adds	r3, r7, r1
 8009c6c:	881a      	ldrh	r2, [r3, #0]
 8009c6e:	187b      	adds	r3, r7, r1
 8009c70:	3201      	adds	r2, #1
 8009c72:	801a      	strh	r2, [r3, #0]
	    y1 += decode->glyph_width;
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	7a9b      	ldrb	r3, [r3, #10]
 8009c78:	b25b      	sxtb	r3, r3
 8009c7a:	b299      	uxth	r1, r3
 8009c7c:	2218      	movs	r2, #24
 8009c7e:	18bb      	adds	r3, r7, r2
 8009c80:	18ba      	adds	r2, r7, r2
 8009c82:	8812      	ldrh	r2, [r2, #0]
 8009c84:	188a      	adds	r2, r1, r2
 8009c86:	801a      	strh	r2, [r3, #0]
	    break;
 8009c88:	e04c      	b.n	8009d24 <u8g2_font_decode_glyph+0x22c>
	case 2:
	    x0 -= decode->glyph_width;
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	7a9b      	ldrb	r3, [r3, #10]
 8009c8e:	b25b      	sxtb	r3, r3
 8009c90:	b29a      	uxth	r2, r3
 8009c92:	201e      	movs	r0, #30
 8009c94:	183b      	adds	r3, r7, r0
 8009c96:	1839      	adds	r1, r7, r0
 8009c98:	8809      	ldrh	r1, [r1, #0]
 8009c9a:	1a8a      	subs	r2, r1, r2
 8009c9c:	801a      	strh	r2, [r3, #0]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8009c9e:	183b      	adds	r3, r7, r0
 8009ca0:	881a      	ldrh	r2, [r3, #0]
 8009ca2:	183b      	adds	r3, r7, r0
 8009ca4:	3201      	adds	r2, #1
 8009ca6:	801a      	strh	r2, [r3, #0]
	    x1++;
 8009ca8:	211c      	movs	r1, #28
 8009caa:	187b      	adds	r3, r7, r1
 8009cac:	881a      	ldrh	r2, [r3, #0]
 8009cae:	187b      	adds	r3, r7, r1
 8009cb0:	3201      	adds	r2, #1
 8009cb2:	801a      	strh	r2, [r3, #0]
	    y0 -= h;
 8009cb4:	2313      	movs	r3, #19
 8009cb6:	18fb      	adds	r3, r7, r3
 8009cb8:	781b      	ldrb	r3, [r3, #0]
 8009cba:	b25b      	sxtb	r3, r3
 8009cbc:	b29a      	uxth	r2, r3
 8009cbe:	201a      	movs	r0, #26
 8009cc0:	183b      	adds	r3, r7, r0
 8009cc2:	1839      	adds	r1, r7, r0
 8009cc4:	8809      	ldrh	r1, [r1, #0]
 8009cc6:	1a8a      	subs	r2, r1, r2
 8009cc8:	801a      	strh	r2, [r3, #0]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8009cca:	183b      	adds	r3, r7, r0
 8009ccc:	881a      	ldrh	r2, [r3, #0]
 8009cce:	183b      	adds	r3, r7, r0
 8009cd0:	3201      	adds	r2, #1
 8009cd2:	801a      	strh	r2, [r3, #0]
	    y1++;
 8009cd4:	2118      	movs	r1, #24
 8009cd6:	187b      	adds	r3, r7, r1
 8009cd8:	881a      	ldrh	r2, [r3, #0]
 8009cda:	187b      	adds	r3, r7, r1
 8009cdc:	3201      	adds	r2, #1
 8009cde:	801a      	strh	r2, [r3, #0]
	    break;	  
 8009ce0:	e020      	b.n	8009d24 <u8g2_font_decode_glyph+0x22c>
	case 3:
	    x1 += h;
 8009ce2:	2313      	movs	r3, #19
 8009ce4:	18fb      	adds	r3, r7, r3
 8009ce6:	781b      	ldrb	r3, [r3, #0]
 8009ce8:	b25b      	sxtb	r3, r3
 8009cea:	b299      	uxth	r1, r3
 8009cec:	221c      	movs	r2, #28
 8009cee:	18bb      	adds	r3, r7, r2
 8009cf0:	18ba      	adds	r2, r7, r2
 8009cf2:	8812      	ldrh	r2, [r2, #0]
 8009cf4:	188a      	adds	r2, r1, r2
 8009cf6:	801a      	strh	r2, [r3, #0]
	    y0 -= decode->glyph_width;
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	7a9b      	ldrb	r3, [r3, #10]
 8009cfc:	b25b      	sxtb	r3, r3
 8009cfe:	b29a      	uxth	r2, r3
 8009d00:	201a      	movs	r0, #26
 8009d02:	183b      	adds	r3, r7, r0
 8009d04:	1839      	adds	r1, r7, r0
 8009d06:	8809      	ldrh	r1, [r1, #0]
 8009d08:	1a8a      	subs	r2, r1, r2
 8009d0a:	801a      	strh	r2, [r3, #0]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8009d0c:	183b      	adds	r3, r7, r0
 8009d0e:	881a      	ldrh	r2, [r3, #0]
 8009d10:	183b      	adds	r3, r7, r0
 8009d12:	3201      	adds	r2, #1
 8009d14:	801a      	strh	r2, [r3, #0]
	    y1++;
 8009d16:	2118      	movs	r1, #24
 8009d18:	187b      	adds	r3, r7, r1
 8009d1a:	881a      	ldrh	r2, [r3, #0]
 8009d1c:	187b      	adds	r3, r7, r1
 8009d1e:	3201      	adds	r2, #1
 8009d20:	801a      	strh	r2, [r3, #0]
	    break;	  
 8009d22:	46c0      	nop			; (mov r8, r8)
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8009d24:	231c      	movs	r3, #28
 8009d26:	18fb      	adds	r3, r7, r3
 8009d28:	881c      	ldrh	r4, [r3, #0]
 8009d2a:	231a      	movs	r3, #26
 8009d2c:	18fb      	adds	r3, r7, r3
 8009d2e:	881a      	ldrh	r2, [r3, #0]
 8009d30:	231e      	movs	r3, #30
 8009d32:	18fb      	adds	r3, r7, r3
 8009d34:	8819      	ldrh	r1, [r3, #0]
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	2318      	movs	r3, #24
 8009d3a:	18fb      	adds	r3, r7, r3
 8009d3c:	881b      	ldrh	r3, [r3, #0]
 8009d3e:	9300      	str	r3, [sp, #0]
 8009d40:	0023      	movs	r3, r4
 8009d42:	f000 fca9 	bl	800a698 <u8g2_IsIntersection>
 8009d46:	1e03      	subs	r3, r0, #0
 8009d48:	d104      	bne.n	8009d54 <u8g2_font_decode_glyph+0x25c>
	return d;
 8009d4a:	2310      	movs	r3, #16
 8009d4c:	18fb      	adds	r3, r7, r3
 8009d4e:	781b      	ldrb	r3, [r3, #0]
 8009d50:	b25b      	sxtb	r3, r3
 8009d52:	e048      	b.n	8009de6 <u8g2_font_decode_glyph+0x2ee>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	2200      	movs	r2, #0
 8009d58:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2276      	movs	r2, #118	; 0x76
 8009d64:	5c9a      	ldrb	r2, [r3, r2]
 8009d66:	230f      	movs	r3, #15
 8009d68:	18fc      	adds	r4, r7, r3
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	0011      	movs	r1, r2
 8009d6e:	0018      	movs	r0, r3
 8009d70:	f7ff fc84 	bl	800967c <u8g2_font_decode_get_unsigned_bits>
 8009d74:	0003      	movs	r3, r0
 8009d76:	7023      	strb	r3, [r4, #0]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2277      	movs	r2, #119	; 0x77
 8009d7c:	5c9a      	ldrb	r2, [r3, r2]
 8009d7e:	230e      	movs	r3, #14
 8009d80:	18fc      	adds	r4, r7, r3
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	0011      	movs	r1, r2
 8009d86:	0018      	movs	r0, r3
 8009d88:	f7ff fc78 	bl	800967c <u8g2_font_decode_get_unsigned_bits>
 8009d8c:	0003      	movs	r3, r0
 8009d8e:	7023      	strb	r3, [r4, #0]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8009d90:	230f      	movs	r3, #15
 8009d92:	18fb      	adds	r3, r7, r3
 8009d94:	7819      	ldrb	r1, [r3, #0]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	0018      	movs	r0, r3
 8009d9c:	f7ff fd9f 	bl	80098de <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8009da0:	230e      	movs	r3, #14
 8009da2:	18fb      	adds	r3, r7, r3
 8009da4:	7819      	ldrb	r1, [r3, #0]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2201      	movs	r2, #1
 8009daa:	0018      	movs	r0, r3
 8009dac:	f7ff fd97 	bl	80098de <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	2101      	movs	r1, #1
 8009db4:	0018      	movs	r0, r3
 8009db6:	f7ff fc61 	bl	800967c <u8g2_font_decode_get_unsigned_bits>
 8009dba:	1e03      	subs	r3, r0, #0
 8009dbc:	d1e8      	bne.n	8009d90 <u8g2_font_decode_glyph+0x298>

      if ( decode->y >= h )
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	7a5b      	ldrb	r3, [r3, #9]
 8009dc2:	b25b      	sxtb	r3, r3
 8009dc4:	2213      	movs	r2, #19
 8009dc6:	18ba      	adds	r2, r7, r2
 8009dc8:	7812      	ldrb	r2, [r2, #0]
 8009dca:	b252      	sxtb	r2, r2
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	dd00      	ble.n	8009dd2 <u8g2_font_decode_glyph+0x2da>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8009dd0:	e7c6      	b.n	8009d60 <u8g2_font_decode_glyph+0x268>
	break;
 8009dd2:	46c0      	nop			; (mov r8, r8)
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	7b99      	ldrb	r1, [r3, #14]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2292      	movs	r2, #146	; 0x92
 8009ddc:	5499      	strb	r1, [r3, r2]
  }
  return d;
 8009dde:	2310      	movs	r3, #16
 8009de0:	18fb      	adds	r3, r7, r3
 8009de2:	781b      	ldrb	r3, [r3, #0]
 8009de4:	b25b      	sxtb	r3, r3
}
 8009de6:	0018      	movs	r0, r3
 8009de8:	46bd      	mov	sp, r7
 8009dea:	b009      	add	sp, #36	; 0x24
 8009dec:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009dee <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8009dee:	b5b0      	push	{r4, r5, r7, lr}
 8009df0:	b086      	sub	sp, #24
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	6078      	str	r0, [r7, #4]
 8009df6:	000a      	movs	r2, r1
 8009df8:	1cbb      	adds	r3, r7, #2
 8009dfa:	801a      	strh	r2, [r3, #0]
  const uint8_t *font = u8g2->font;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e00:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	3317      	adds	r3, #23
 8009e06:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8009e08:	1cbb      	adds	r3, r7, #2
 8009e0a:	881b      	ldrh	r3, [r3, #0]
 8009e0c:	2bff      	cmp	r3, #255	; 0xff
 8009e0e:	d82d      	bhi.n	8009e6c <u8g2_font_get_glyph_data+0x7e>
  {
    if ( encoding >= 'a' )
 8009e10:	1cbb      	adds	r3, r7, #2
 8009e12:	881b      	ldrh	r3, [r3, #0]
 8009e14:	2b60      	cmp	r3, #96	; 0x60
 8009e16:	d907      	bls.n	8009e28 <u8g2_font_get_glyph_data+0x3a>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2288      	movs	r2, #136	; 0x88
 8009e1c:	5a9b      	ldrh	r3, [r3, r2]
 8009e1e:	001a      	movs	r2, r3
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	189b      	adds	r3, r3, r2
 8009e24:	617b      	str	r3, [r7, #20]
 8009e26:	e00a      	b.n	8009e3e <u8g2_font_get_glyph_data+0x50>
    }
    else if ( encoding >= 'A' )
 8009e28:	1cbb      	adds	r3, r7, #2
 8009e2a:	881b      	ldrh	r3, [r3, #0]
 8009e2c:	2b40      	cmp	r3, #64	; 0x40
 8009e2e:	d906      	bls.n	8009e3e <u8g2_font_get_glyph_data+0x50>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2286      	movs	r2, #134	; 0x86
 8009e34:	5a9b      	ldrh	r3, [r3, r2]
 8009e36:	001a      	movs	r2, r3
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	189b      	adds	r3, r3, r2
 8009e3c:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8009e3e:	697b      	ldr	r3, [r7, #20]
 8009e40:	3301      	adds	r3, #1
 8009e42:	781b      	ldrb	r3, [r3, #0]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d05e      	beq.n	8009f06 <u8g2_font_get_glyph_data+0x118>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	b29b      	uxth	r3, r3
 8009e4e:	1cba      	adds	r2, r7, #2
 8009e50:	8812      	ldrh	r2, [r2, #0]
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d102      	bne.n	8009e5c <u8g2_font_get_glyph_data+0x6e>
      {
	return font+2;	/* skip encoding and glyph size */
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	3302      	adds	r3, #2
 8009e5a:	e058      	b.n	8009f0e <u8g2_font_get_glyph_data+0x120>
      }
      font += u8x8_pgm_read( font + 1 );
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	3301      	adds	r3, #1
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	001a      	movs	r2, r3
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	189b      	adds	r3, r3, r2
 8009e68:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8009e6a:	e7e8      	b.n	8009e3e <u8g2_font_get_glyph_data+0x50>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	228a      	movs	r2, #138	; 0x8a
 8009e70:	5a9b      	ldrh	r3, [r3, r2]
 8009e72:	001a      	movs	r2, r3
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	189b      	adds	r3, r3, r2
 8009e78:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8009e7a:	697b      	ldr	r3, [r7, #20]
 8009e7c:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	2100      	movs	r1, #0
 8009e82:	0018      	movs	r0, r3
 8009e84:	f7ff fb16 	bl	80094b4 <u8g2_font_get_word>
 8009e88:	0003      	movs	r3, r0
 8009e8a:	001a      	movs	r2, r3
 8009e8c:	697b      	ldr	r3, [r7, #20]
 8009e8e:	189b      	adds	r3, r3, r2
 8009e90:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8009e92:	250e      	movs	r5, #14
 8009e94:	197c      	adds	r4, r7, r5
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	2102      	movs	r1, #2
 8009e9a:	0018      	movs	r0, r3
 8009e9c:	f7ff fb0a 	bl	80094b4 <u8g2_font_get_word>
 8009ea0:	0003      	movs	r3, r0
 8009ea2:	8023      	strh	r3, [r4, #0]
      unicode_lookup_table+=4;
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	3304      	adds	r3, #4
 8009ea8:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8009eaa:	197a      	adds	r2, r7, r5
 8009eac:	1cbb      	adds	r3, r7, #2
 8009eae:	8812      	ldrh	r2, [r2, #0]
 8009eb0:	881b      	ldrh	r3, [r3, #0]
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	d3e3      	bcc.n	8009e7e <u8g2_font_get_glyph_data+0x90>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	781a      	ldrb	r2, [r3, #0]
 8009eba:	200e      	movs	r0, #14
 8009ebc:	183b      	adds	r3, r7, r0
 8009ebe:	801a      	strh	r2, [r3, #0]
      e <<= 8;
 8009ec0:	183b      	adds	r3, r7, r0
 8009ec2:	183a      	adds	r2, r7, r0
 8009ec4:	8812      	ldrh	r2, [r2, #0]
 8009ec6:	0212      	lsls	r2, r2, #8
 8009ec8:	801a      	strh	r2, [r3, #0]
      e |= u8x8_pgm_read( font + 1 );
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	3301      	adds	r3, #1
 8009ece:	781b      	ldrb	r3, [r3, #0]
 8009ed0:	b299      	uxth	r1, r3
 8009ed2:	183b      	adds	r3, r7, r0
 8009ed4:	183a      	adds	r2, r7, r0
 8009ed6:	8812      	ldrh	r2, [r2, #0]
 8009ed8:	430a      	orrs	r2, r1
 8009eda:	801a      	strh	r2, [r3, #0]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8009edc:	183b      	adds	r3, r7, r0
 8009ede:	881b      	ldrh	r3, [r3, #0]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d012      	beq.n	8009f0a <u8g2_font_get_glyph_data+0x11c>
	break;
  
      if ( e == encoding )
 8009ee4:	183a      	adds	r2, r7, r0
 8009ee6:	1cbb      	adds	r3, r7, #2
 8009ee8:	8812      	ldrh	r2, [r2, #0]
 8009eea:	881b      	ldrh	r3, [r3, #0]
 8009eec:	429a      	cmp	r2, r3
 8009eee:	d102      	bne.n	8009ef6 <u8g2_font_get_glyph_data+0x108>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	3303      	adds	r3, #3
 8009ef4:	e00b      	b.n	8009f0e <u8g2_font_get_glyph_data+0x120>
      }
      font += u8x8_pgm_read( font + 2 );
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	3302      	adds	r3, #2
 8009efa:	781b      	ldrb	r3, [r3, #0]
 8009efc:	001a      	movs	r2, r3
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	189b      	adds	r3, r3, r2
 8009f02:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8009f04:	e7d7      	b.n	8009eb6 <u8g2_font_get_glyph_data+0xc8>
	break;
 8009f06:	46c0      	nop			; (mov r8, r8)
 8009f08:	e000      	b.n	8009f0c <u8g2_font_get_glyph_data+0x11e>
	break;
 8009f0a:	46c0      	nop			; (mov r8, r8)
    }  
  }
#endif
  
  return NULL;
 8009f0c:	2300      	movs	r3, #0
}
 8009f0e:	0018      	movs	r0, r3
 8009f10:	46bd      	mov	sp, r7
 8009f12:	b006      	add	sp, #24
 8009f14:	bdb0      	pop	{r4, r5, r7, pc}

08009f16 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8009f16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f18:	b087      	sub	sp, #28
 8009f1a:	af00      	add	r7, sp, #0
 8009f1c:	60f8      	str	r0, [r7, #12]
 8009f1e:	000c      	movs	r4, r1
 8009f20:	0010      	movs	r0, r2
 8009f22:	0019      	movs	r1, r3
 8009f24:	250a      	movs	r5, #10
 8009f26:	197b      	adds	r3, r7, r5
 8009f28:	1c22      	adds	r2, r4, #0
 8009f2a:	801a      	strh	r2, [r3, #0]
 8009f2c:	2408      	movs	r4, #8
 8009f2e:	193b      	adds	r3, r7, r4
 8009f30:	1c02      	adds	r2, r0, #0
 8009f32:	801a      	strh	r2, [r3, #0]
 8009f34:	1dbb      	adds	r3, r7, #6
 8009f36:	1c0a      	adds	r2, r1, #0
 8009f38:	801a      	strh	r2, [r3, #0]
  u8g2_uint_t dx = 0;
 8009f3a:	2616      	movs	r6, #22
 8009f3c:	19bb      	adds	r3, r7, r6
 8009f3e:	2200      	movs	r2, #0
 8009f40:	801a      	strh	r2, [r3, #0]
  u8g2->font_decode.target_x = x;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	197a      	adds	r2, r7, r5
 8009f46:	2164      	movs	r1, #100	; 0x64
 8009f48:	8812      	ldrh	r2, [r2, #0]
 8009f4a:	525a      	strh	r2, [r3, r1]
  u8g2->font_decode.target_y = y;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	193a      	adds	r2, r7, r4
 8009f50:	2166      	movs	r1, #102	; 0x66
 8009f52:	8812      	ldrh	r2, [r2, #0]
 8009f54:	525a      	strh	r2, [r3, r1]
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8009f56:	1dbb      	adds	r3, r7, #6
 8009f58:	881a      	ldrh	r2, [r3, #0]
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	0011      	movs	r1, r2
 8009f5e:	0018      	movs	r0, r3
 8009f60:	f7ff ff45 	bl	8009dee <u8g2_font_get_glyph_data>
 8009f64:	0003      	movs	r3, r0
 8009f66:	613b      	str	r3, [r7, #16]
  if ( glyph_data != NULL )
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d009      	beq.n	8009f82 <u8g2_font_draw_glyph+0x6c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8009f6e:	693a      	ldr	r2, [r7, #16]
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	0011      	movs	r1, r2
 8009f74:	0018      	movs	r0, r3
 8009f76:	f7ff fdbf 	bl	8009af8 <u8g2_font_decode_glyph>
 8009f7a:	0003      	movs	r3, r0
 8009f7c:	001a      	movs	r2, r3
 8009f7e:	19bb      	adds	r3, r7, r6
 8009f80:	801a      	strh	r2, [r3, #0]
  }
  return dx;
 8009f82:	2316      	movs	r3, #22
 8009f84:	18fb      	adds	r3, r7, r3
 8009f86:	881b      	ldrh	r3, [r3, #0]
}
 8009f88:	0018      	movs	r0, r3
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	b007      	add	sp, #28
 8009f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009f90 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8009f90:	b590      	push	{r4, r7, lr}
 8009f92:	b085      	sub	sp, #20
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	60f8      	str	r0, [r7, #12]
 8009f98:	000c      	movs	r4, r1
 8009f9a:	0010      	movs	r0, r2
 8009f9c:	0019      	movs	r1, r3
 8009f9e:	230a      	movs	r3, #10
 8009fa0:	18fb      	adds	r3, r7, r3
 8009fa2:	1c22      	adds	r2, r4, #0
 8009fa4:	801a      	strh	r2, [r3, #0]
 8009fa6:	2308      	movs	r3, #8
 8009fa8:	18fb      	adds	r3, r7, r3
 8009faa:	1c02      	adds	r2, r0, #0
 8009fac:	801a      	strh	r2, [r3, #0]
 8009fae:	1dbb      	adds	r3, r7, #6
 8009fb0:	1c0a      	adds	r2, r1, #0
 8009fb2:	801a      	strh	r2, [r3, #0]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	2270      	movs	r2, #112	; 0x70
 8009fb8:	5c9b      	ldrb	r3, [r3, r2]
 8009fba:	2b03      	cmp	r3, #3
 8009fbc:	d032      	beq.n	800a024 <u8g2_DrawGlyph+0x94>
 8009fbe:	dc3f      	bgt.n	800a040 <u8g2_DrawGlyph+0xb0>
 8009fc0:	2b02      	cmp	r3, #2
 8009fc2:	d021      	beq.n	800a008 <u8g2_DrawGlyph+0x78>
 8009fc4:	dc3c      	bgt.n	800a040 <u8g2_DrawGlyph+0xb0>
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d002      	beq.n	8009fd0 <u8g2_DrawGlyph+0x40>
 8009fca:	2b01      	cmp	r3, #1
 8009fcc:	d00e      	beq.n	8009fec <u8g2_DrawGlyph+0x5c>
 8009fce:	e037      	b.n	800a040 <u8g2_DrawGlyph+0xb0>
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fd4:	68fa      	ldr	r2, [r7, #12]
 8009fd6:	0010      	movs	r0, r2
 8009fd8:	4798      	blx	r3
 8009fda:	0003      	movs	r3, r0
 8009fdc:	0019      	movs	r1, r3
 8009fde:	2208      	movs	r2, #8
 8009fe0:	18bb      	adds	r3, r7, r2
 8009fe2:	18ba      	adds	r2, r7, r2
 8009fe4:	8812      	ldrh	r2, [r2, #0]
 8009fe6:	188a      	adds	r2, r1, r2
 8009fe8:	801a      	strh	r2, [r3, #0]
      break;
 8009fea:	e029      	b.n	800a040 <u8g2_DrawGlyph+0xb0>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ff0:	68fa      	ldr	r2, [r7, #12]
 8009ff2:	0010      	movs	r0, r2
 8009ff4:	4798      	blx	r3
 8009ff6:	0003      	movs	r3, r0
 8009ff8:	0019      	movs	r1, r3
 8009ffa:	220a      	movs	r2, #10
 8009ffc:	18bb      	adds	r3, r7, r2
 8009ffe:	18ba      	adds	r2, r7, r2
 800a000:	8812      	ldrh	r2, [r2, #0]
 800a002:	1a52      	subs	r2, r2, r1
 800a004:	801a      	strh	r2, [r3, #0]
      break;
 800a006:	e01b      	b.n	800a040 <u8g2_DrawGlyph+0xb0>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a00c:	68fa      	ldr	r2, [r7, #12]
 800a00e:	0010      	movs	r0, r2
 800a010:	4798      	blx	r3
 800a012:	0003      	movs	r3, r0
 800a014:	0019      	movs	r1, r3
 800a016:	2208      	movs	r2, #8
 800a018:	18bb      	adds	r3, r7, r2
 800a01a:	18ba      	adds	r2, r7, r2
 800a01c:	8812      	ldrh	r2, [r2, #0]
 800a01e:	1a52      	subs	r2, r2, r1
 800a020:	801a      	strh	r2, [r3, #0]
      break;
 800a022:	e00d      	b.n	800a040 <u8g2_DrawGlyph+0xb0>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a028:	68fa      	ldr	r2, [r7, #12]
 800a02a:	0010      	movs	r0, r2
 800a02c:	4798      	blx	r3
 800a02e:	0003      	movs	r3, r0
 800a030:	0019      	movs	r1, r3
 800a032:	220a      	movs	r2, #10
 800a034:	18bb      	adds	r3, r7, r2
 800a036:	18ba      	adds	r2, r7, r2
 800a038:	8812      	ldrh	r2, [r2, #0]
 800a03a:	188a      	adds	r2, r1, r2
 800a03c:	801a      	strh	r2, [r3, #0]
      break;
 800a03e:	46c0      	nop			; (mov r8, r8)
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 800a040:	1dbb      	adds	r3, r7, #6
 800a042:	881c      	ldrh	r4, [r3, #0]
 800a044:	2308      	movs	r3, #8
 800a046:	18fb      	adds	r3, r7, r3
 800a048:	881a      	ldrh	r2, [r3, #0]
 800a04a:	230a      	movs	r3, #10
 800a04c:	18fb      	adds	r3, r7, r3
 800a04e:	8819      	ldrh	r1, [r3, #0]
 800a050:	68f8      	ldr	r0, [r7, #12]
 800a052:	0023      	movs	r3, r4
 800a054:	f7ff ff5f 	bl	8009f16 <u8g2_font_draw_glyph>
 800a058:	0003      	movs	r3, r0
}
 800a05a:	0018      	movs	r0, r3
 800a05c:	46bd      	mov	sp, r7
 800a05e:	b005      	add	sp, #20
 800a060:	bd90      	pop	{r4, r7, pc}
	...

0800a064 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 800a064:	b5b0      	push	{r4, r5, r7, lr}
 800a066:	b086      	sub	sp, #24
 800a068:	af00      	add	r7, sp, #0
 800a06a:	60f8      	str	r0, [r7, #12]
 800a06c:	0008      	movs	r0, r1
 800a06e:	0011      	movs	r1, r2
 800a070:	607b      	str	r3, [r7, #4]
 800a072:	230a      	movs	r3, #10
 800a074:	18fb      	adds	r3, r7, r3
 800a076:	1c02      	adds	r2, r0, #0
 800a078:	801a      	strh	r2, [r3, #0]
 800a07a:	2308      	movs	r3, #8
 800a07c:	18fb      	adds	r3, r7, r3
 800a07e:	1c0a      	adds	r2, r1, #0
 800a080:	801a      	strh	r2, [r3, #0]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	0018      	movs	r0, r3
 800a086:	f000 fec6 	bl	800ae16 <u8x8_utf8_init>
  sum = 0;
 800a08a:	2316      	movs	r3, #22
 800a08c:	18fb      	adds	r3, r7, r3
 800a08e:	2200      	movs	r2, #0
 800a090:	801a      	strh	r2, [r3, #0]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	685b      	ldr	r3, [r3, #4]
 800a096:	687a      	ldr	r2, [r7, #4]
 800a098:	7811      	ldrb	r1, [r2, #0]
 800a09a:	2514      	movs	r5, #20
 800a09c:	197c      	adds	r4, r7, r5
 800a09e:	68fa      	ldr	r2, [r7, #12]
 800a0a0:	0010      	movs	r0, r2
 800a0a2:	4798      	blx	r3
 800a0a4:	0003      	movs	r3, r0
 800a0a6:	8023      	strh	r3, [r4, #0]
    if ( e == 0x0ffff )
 800a0a8:	0029      	movs	r1, r5
 800a0aa:	187b      	adds	r3, r7, r1
 800a0ac:	881b      	ldrh	r3, [r3, #0]
 800a0ae:	4a31      	ldr	r2, [pc, #196]	; (800a174 <u8g2_draw_string+0x110>)
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d057      	beq.n	800a164 <u8g2_draw_string+0x100>
      break;
    str++;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	3301      	adds	r3, #1
 800a0b8:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 800a0ba:	187b      	adds	r3, r7, r1
 800a0bc:	881b      	ldrh	r3, [r3, #0]
 800a0be:	4a2e      	ldr	r2, [pc, #184]	; (800a178 <u8g2_draw_string+0x114>)
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d0e6      	beq.n	800a092 <u8g2_draw_string+0x2e>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 800a0c4:	2312      	movs	r3, #18
 800a0c6:	18fc      	adds	r4, r7, r3
 800a0c8:	187b      	adds	r3, r7, r1
 800a0ca:	881d      	ldrh	r5, [r3, #0]
 800a0cc:	2308      	movs	r3, #8
 800a0ce:	18fb      	adds	r3, r7, r3
 800a0d0:	881a      	ldrh	r2, [r3, #0]
 800a0d2:	230a      	movs	r3, #10
 800a0d4:	18fb      	adds	r3, r7, r3
 800a0d6:	8819      	ldrh	r1, [r3, #0]
 800a0d8:	68f8      	ldr	r0, [r7, #12]
 800a0da:	002b      	movs	r3, r5
 800a0dc:	f7ff ff58 	bl	8009f90 <u8g2_DrawGlyph>
 800a0e0:	0003      	movs	r3, r0
 800a0e2:	8023      	strh	r3, [r4, #0]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	2270      	movs	r2, #112	; 0x70
 800a0e8:	5c9b      	ldrb	r3, [r3, r2]
 800a0ea:	2b03      	cmp	r3, #3
 800a0ec:	d026      	beq.n	800a13c <u8g2_draw_string+0xd8>
 800a0ee:	dc2f      	bgt.n	800a150 <u8g2_draw_string+0xec>
 800a0f0:	2b02      	cmp	r3, #2
 800a0f2:	d019      	beq.n	800a128 <u8g2_draw_string+0xc4>
 800a0f4:	dc2c      	bgt.n	800a150 <u8g2_draw_string+0xec>
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d002      	beq.n	800a100 <u8g2_draw_string+0x9c>
 800a0fa:	2b01      	cmp	r3, #1
 800a0fc:	d00a      	beq.n	800a114 <u8g2_draw_string+0xb0>
 800a0fe:	e027      	b.n	800a150 <u8g2_draw_string+0xec>
      {
	case 0:
	  x += delta;
 800a100:	220a      	movs	r2, #10
 800a102:	18bb      	adds	r3, r7, r2
 800a104:	18b9      	adds	r1, r7, r2
 800a106:	2212      	movs	r2, #18
 800a108:	18ba      	adds	r2, r7, r2
 800a10a:	8809      	ldrh	r1, [r1, #0]
 800a10c:	8812      	ldrh	r2, [r2, #0]
 800a10e:	188a      	adds	r2, r1, r2
 800a110:	801a      	strh	r2, [r3, #0]
	  break;
 800a112:	e01d      	b.n	800a150 <u8g2_draw_string+0xec>
	case 1:
	  y += delta;
 800a114:	2208      	movs	r2, #8
 800a116:	18bb      	adds	r3, r7, r2
 800a118:	18b9      	adds	r1, r7, r2
 800a11a:	2212      	movs	r2, #18
 800a11c:	18ba      	adds	r2, r7, r2
 800a11e:	8809      	ldrh	r1, [r1, #0]
 800a120:	8812      	ldrh	r2, [r2, #0]
 800a122:	188a      	adds	r2, r1, r2
 800a124:	801a      	strh	r2, [r3, #0]
	  break;
 800a126:	e013      	b.n	800a150 <u8g2_draw_string+0xec>
	case 2:
	  x -= delta;
 800a128:	220a      	movs	r2, #10
 800a12a:	18bb      	adds	r3, r7, r2
 800a12c:	18b9      	adds	r1, r7, r2
 800a12e:	2212      	movs	r2, #18
 800a130:	18ba      	adds	r2, r7, r2
 800a132:	8809      	ldrh	r1, [r1, #0]
 800a134:	8812      	ldrh	r2, [r2, #0]
 800a136:	1a8a      	subs	r2, r1, r2
 800a138:	801a      	strh	r2, [r3, #0]
	  break;
 800a13a:	e009      	b.n	800a150 <u8g2_draw_string+0xec>
	case 3:
	  y -= delta;
 800a13c:	2208      	movs	r2, #8
 800a13e:	18bb      	adds	r3, r7, r2
 800a140:	18b9      	adds	r1, r7, r2
 800a142:	2212      	movs	r2, #18
 800a144:	18ba      	adds	r2, r7, r2
 800a146:	8809      	ldrh	r1, [r1, #0]
 800a148:	8812      	ldrh	r2, [r2, #0]
 800a14a:	1a8a      	subs	r2, r1, r2
 800a14c:	801a      	strh	r2, [r3, #0]
	  break;
 800a14e:	46c0      	nop			; (mov r8, r8)

#else
      x += delta;
#endif

      sum += delta;    
 800a150:	2216      	movs	r2, #22
 800a152:	18bb      	adds	r3, r7, r2
 800a154:	18b9      	adds	r1, r7, r2
 800a156:	2212      	movs	r2, #18
 800a158:	18ba      	adds	r2, r7, r2
 800a15a:	8809      	ldrh	r1, [r1, #0]
 800a15c:	8812      	ldrh	r2, [r2, #0]
 800a15e:	188a      	adds	r2, r1, r2
 800a160:	801a      	strh	r2, [r3, #0]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 800a162:	e796      	b.n	800a092 <u8g2_draw_string+0x2e>
      break;
 800a164:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sum;
 800a166:	2316      	movs	r3, #22
 800a168:	18fb      	adds	r3, r7, r3
 800a16a:	881b      	ldrh	r3, [r3, #0]
}
 800a16c:	0018      	movs	r0, r3
 800a16e:	46bd      	mov	sp, r7
 800a170:	b006      	add	sp, #24
 800a172:	bdb0      	pop	{r4, r5, r7, pc}
 800a174:	0000ffff 	.word	0x0000ffff
 800a178:	0000fffe 	.word	0x0000fffe

0800a17c <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 800a17c:	b5b0      	push	{r4, r5, r7, lr}
 800a17e:	b084      	sub	sp, #16
 800a180:	af00      	add	r7, sp, #0
 800a182:	60f8      	str	r0, [r7, #12]
 800a184:	0008      	movs	r0, r1
 800a186:	0011      	movs	r1, r2
 800a188:	607b      	str	r3, [r7, #4]
 800a18a:	250a      	movs	r5, #10
 800a18c:	197b      	adds	r3, r7, r5
 800a18e:	1c02      	adds	r2, r0, #0
 800a190:	801a      	strh	r2, [r3, #0]
 800a192:	2008      	movs	r0, #8
 800a194:	183b      	adds	r3, r7, r0
 800a196:	1c0a      	adds	r2, r1, #0
 800a198:	801a      	strh	r2, [r3, #0]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	4a07      	ldr	r2, [pc, #28]	; (800a1bc <u8g2_DrawStr+0x40>)
 800a19e:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 800a1a0:	687c      	ldr	r4, [r7, #4]
 800a1a2:	183b      	adds	r3, r7, r0
 800a1a4:	881a      	ldrh	r2, [r3, #0]
 800a1a6:	197b      	adds	r3, r7, r5
 800a1a8:	8819      	ldrh	r1, [r3, #0]
 800a1aa:	68f8      	ldr	r0, [r7, #12]
 800a1ac:	0023      	movs	r3, r4
 800a1ae:	f7ff ff59 	bl	800a064 <u8g2_draw_string>
 800a1b2:	0003      	movs	r3, r0
}
 800a1b4:	0018      	movs	r0, r3
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	b004      	add	sp, #16
 800a1ba:	bdb0      	pop	{r4, r5, r7, pc}
 800a1bc:	0800ae31 	.word	0x0800ae31

0800a1c0 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b082      	sub	sp, #8
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d05d      	beq.n	800a28c <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2281      	movs	r2, #129	; 0x81
 800a1d4:	5699      	ldrsb	r1, [r3, r2]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	228e      	movs	r2, #142	; 0x8e
 800a1da:	5499      	strb	r1, [r3, r2]
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2282      	movs	r2, #130	; 0x82
 800a1e0:	5699      	ldrsb	r1, [r3, r2]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	228f      	movs	r2, #143	; 0x8f
 800a1e6:	5499      	strb	r1, [r3, r2]
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	228d      	movs	r2, #141	; 0x8d
 800a1ec:	5c9b      	ldrb	r3, [r3, r2]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d04d      	beq.n	800a28e <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	228d      	movs	r2, #141	; 0x8d
 800a1f6:	5c9b      	ldrb	r3, [r3, r2]
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	d11c      	bne.n	800a236 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	228e      	movs	r2, #142	; 0x8e
 800a200:	569a      	ldrsb	r2, [r3, r2]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2183      	movs	r1, #131	; 0x83
 800a206:	565b      	ldrsb	r3, [r3, r1]
 800a208:	429a      	cmp	r2, r3
 800a20a:	da05      	bge.n	800a218 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2283      	movs	r2, #131	; 0x83
 800a210:	5699      	ldrsb	r1, [r3, r2]
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	228e      	movs	r2, #142	; 0x8e
 800a216:	5499      	strb	r1, [r3, r2]
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	228f      	movs	r2, #143	; 0x8f
 800a21c:	569a      	ldrsb	r2, [r3, r2]
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2184      	movs	r1, #132	; 0x84
 800a222:	565b      	ldrsb	r3, [r3, r1]
 800a224:	429a      	cmp	r2, r3
 800a226:	dd32      	ble.n	800a28e <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2284      	movs	r2, #132	; 0x84
 800a22c:	5699      	ldrsb	r1, [r3, r2]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	228f      	movs	r2, #143	; 0x8f
 800a232:	5499      	strb	r1, [r3, r2]
 800a234:	e02b      	b.n	800a28e <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	228e      	movs	r2, #142	; 0x8e
 800a23a:	569b      	ldrsb	r3, [r3, r2]
 800a23c:	0019      	movs	r1, r3
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	227e      	movs	r2, #126	; 0x7e
 800a242:	569b      	ldrsb	r3, [r3, r2]
 800a244:	0018      	movs	r0, r3
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2280      	movs	r2, #128	; 0x80
 800a24a:	569b      	ldrsb	r3, [r3, r2]
 800a24c:	18c3      	adds	r3, r0, r3
 800a24e:	4299      	cmp	r1, r3
 800a250:	da0d      	bge.n	800a26e <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	227e      	movs	r2, #126	; 0x7e
 800a256:	569b      	ldrsb	r3, [r3, r2]
 800a258:	b2da      	uxtb	r2, r3
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2180      	movs	r1, #128	; 0x80
 800a25e:	565b      	ldrsb	r3, [r3, r1]
 800a260:	b2db      	uxtb	r3, r3
 800a262:	18d3      	adds	r3, r2, r3
 800a264:	b2db      	uxtb	r3, r3
 800a266:	b259      	sxtb	r1, r3
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	228e      	movs	r2, #142	; 0x8e
 800a26c:	5499      	strb	r1, [r3, r2]
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	228f      	movs	r2, #143	; 0x8f
 800a272:	569a      	ldrsb	r2, [r3, r2]
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2180      	movs	r1, #128	; 0x80
 800a278:	565b      	ldrsb	r3, [r3, r1]
 800a27a:	429a      	cmp	r2, r3
 800a27c:	dd07      	ble.n	800a28e <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2280      	movs	r2, #128	; 0x80
 800a282:	5699      	ldrsb	r1, [r3, r2]
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	228f      	movs	r2, #143	; 0x8f
 800a288:	5499      	strb	r1, [r3, r2]
 800a28a:	e000      	b.n	800a28e <u8g2_UpdateRefHeight+0xce>
    return;
 800a28c:	46c0      	nop			; (mov r8, r8)
  }  
}
 800a28e:	46bd      	mov	sp, r7
 800a290:	b002      	add	sp, #8
 800a292:	bd80      	pop	{r7, pc}

0800a294 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b082      	sub	sp, #8
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
  return 0;
 800a29c:	2300      	movs	r3, #0
}
 800a29e:	0018      	movs	r0, r3
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	b002      	add	sp, #8
 800a2a4:	bd80      	pop	{r7, pc}
	...

0800a2a8 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b082      	sub	sp, #8
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	4a03      	ldr	r2, [pc, #12]	; (800a2c0 <u8g2_SetFontPosBaseline+0x18>)
 800a2b4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800a2b6:	46c0      	nop			; (mov r8, r8)
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	b002      	add	sp, #8
 800a2bc:	bd80      	pop	{r7, pc}
 800a2be:	46c0      	nop			; (mov r8, r8)
 800a2c0:	0800a295 	.word	0x0800a295

0800a2c4 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b082      	sub	sp, #8
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
 800a2cc:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2d2:	683a      	ldr	r2, [r7, #0]
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d00d      	beq.n	800a2f4 <u8g2_SetFont+0x30>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	683a      	ldr	r2, [r7, #0]
 800a2dc:	659a      	str	r2, [r3, #88]	; 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	3374      	adds	r3, #116	; 0x74
 800a2e2:	683a      	ldr	r2, [r7, #0]
 800a2e4:	0011      	movs	r1, r2
 800a2e6:	0018      	movs	r0, r3
 800a2e8:	f7ff f90b 	bl	8009502 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	0018      	movs	r0, r3
 800a2f0:	f7ff ff66 	bl	800a1c0 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 800a2f4:	46c0      	nop			; (mov r8, r8)
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	b002      	add	sp, #8
 800a2fa:	bd80      	pop	{r7, pc}

0800a2fc <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 800a2fc:	b590      	push	{r4, r7, lr}
 800a2fe:	b087      	sub	sp, #28
 800a300:	af00      	add	r7, sp, #0
 800a302:	60f8      	str	r0, [r7, #12]
 800a304:	60b9      	str	r1, [r7, #8]
 800a306:	0019      	movs	r1, r3
 800a308:	1dbb      	adds	r3, r7, #6
 800a30a:	801a      	strh	r2, [r3, #0]
 800a30c:	1d3b      	adds	r3, r7, #4
 800a30e:	1c0a      	adds	r2, r1, #0
 800a310:	801a      	strh	r2, [r3, #0]
  u8g2_uint_t a = *ap;
 800a312:	2416      	movs	r4, #22
 800a314:	193b      	adds	r3, r7, r4
 800a316:	68fa      	ldr	r2, [r7, #12]
 800a318:	8812      	ldrh	r2, [r2, #0]
 800a31a:	801a      	strh	r2, [r3, #0]
  u8g2_uint_t b;
  b  = a;
 800a31c:	2014      	movs	r0, #20
 800a31e:	183b      	adds	r3, r7, r0
 800a320:	193a      	adds	r2, r7, r4
 800a322:	8812      	ldrh	r2, [r2, #0]
 800a324:	801a      	strh	r2, [r3, #0]
  b += *len;
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	8819      	ldrh	r1, [r3, #0]
 800a32a:	183b      	adds	r3, r7, r0
 800a32c:	183a      	adds	r2, r7, r0
 800a32e:	8812      	ldrh	r2, [r2, #0]
 800a330:	188a      	adds	r2, r1, r2
 800a332:	801a      	strh	r2, [r3, #0]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 800a334:	193a      	adds	r2, r7, r4
 800a336:	0001      	movs	r1, r0
 800a338:	187b      	adds	r3, r7, r1
 800a33a:	8812      	ldrh	r2, [r2, #0]
 800a33c:	881b      	ldrh	r3, [r3, #0]
 800a33e:	429a      	cmp	r2, r3
 800a340:	d914      	bls.n	800a36c <u8g2_clip_intersection2+0x70>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 800a342:	193a      	adds	r2, r7, r4
 800a344:	1d3b      	adds	r3, r7, #4
 800a346:	8812      	ldrh	r2, [r2, #0]
 800a348:	881b      	ldrh	r3, [r3, #0]
 800a34a:	429a      	cmp	r2, r3
 800a34c:	d209      	bcs.n	800a362 <u8g2_clip_intersection2+0x66>
    {
      b = d;
 800a34e:	187b      	adds	r3, r7, r1
 800a350:	1d3a      	adds	r2, r7, #4
 800a352:	8812      	ldrh	r2, [r2, #0]
 800a354:	801a      	strh	r2, [r3, #0]
      b--;
 800a356:	187b      	adds	r3, r7, r1
 800a358:	881a      	ldrh	r2, [r3, #0]
 800a35a:	187b      	adds	r3, r7, r1
 800a35c:	3a01      	subs	r2, #1
 800a35e:	801a      	strh	r2, [r3, #0]
 800a360:	e004      	b.n	800a36c <u8g2_clip_intersection2+0x70>
    }
    else
    {
      a = c;
 800a362:	2316      	movs	r3, #22
 800a364:	18fb      	adds	r3, r7, r3
 800a366:	1dba      	adds	r2, r7, #6
 800a368:	8812      	ldrh	r2, [r2, #0]
 800a36a:	801a      	strh	r2, [r3, #0]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 800a36c:	2316      	movs	r3, #22
 800a36e:	18fa      	adds	r2, r7, r3
 800a370:	1d3b      	adds	r3, r7, #4
 800a372:	8812      	ldrh	r2, [r2, #0]
 800a374:	881b      	ldrh	r3, [r3, #0]
 800a376:	429a      	cmp	r2, r3
 800a378:	d301      	bcc.n	800a37e <u8g2_clip_intersection2+0x82>
    return 0;
 800a37a:	2300      	movs	r3, #0
 800a37c:	e030      	b.n	800a3e0 <u8g2_clip_intersection2+0xe4>
  if ( b <= c )
 800a37e:	2314      	movs	r3, #20
 800a380:	18fa      	adds	r2, r7, r3
 800a382:	1dbb      	adds	r3, r7, #6
 800a384:	8812      	ldrh	r2, [r2, #0]
 800a386:	881b      	ldrh	r3, [r3, #0]
 800a388:	429a      	cmp	r2, r3
 800a38a:	d801      	bhi.n	800a390 <u8g2_clip_intersection2+0x94>
    return 0;
 800a38c:	2300      	movs	r3, #0
 800a38e:	e027      	b.n	800a3e0 <u8g2_clip_intersection2+0xe4>
  if ( a < c )		
 800a390:	2116      	movs	r1, #22
 800a392:	187a      	adds	r2, r7, r1
 800a394:	1dbb      	adds	r3, r7, #6
 800a396:	8812      	ldrh	r2, [r2, #0]
 800a398:	881b      	ldrh	r3, [r3, #0]
 800a39a:	429a      	cmp	r2, r3
 800a39c:	d203      	bcs.n	800a3a6 <u8g2_clip_intersection2+0xaa>
    a = c;
 800a39e:	187b      	adds	r3, r7, r1
 800a3a0:	1dba      	adds	r2, r7, #6
 800a3a2:	8812      	ldrh	r2, [r2, #0]
 800a3a4:	801a      	strh	r2, [r3, #0]
  if ( b > d )
 800a3a6:	2114      	movs	r1, #20
 800a3a8:	187a      	adds	r2, r7, r1
 800a3aa:	1d3b      	adds	r3, r7, #4
 800a3ac:	8812      	ldrh	r2, [r2, #0]
 800a3ae:	881b      	ldrh	r3, [r3, #0]
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	d903      	bls.n	800a3bc <u8g2_clip_intersection2+0xc0>
    b = d;
 800a3b4:	187b      	adds	r3, r7, r1
 800a3b6:	1d3a      	adds	r2, r7, #4
 800a3b8:	8812      	ldrh	r2, [r2, #0]
 800a3ba:	801a      	strh	r2, [r3, #0]
  
  *ap = a;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	2416      	movs	r4, #22
 800a3c0:	193a      	adds	r2, r7, r4
 800a3c2:	8812      	ldrh	r2, [r2, #0]
 800a3c4:	801a      	strh	r2, [r3, #0]
  b -= a;
 800a3c6:	2014      	movs	r0, #20
 800a3c8:	183b      	adds	r3, r7, r0
 800a3ca:	1839      	adds	r1, r7, r0
 800a3cc:	193a      	adds	r2, r7, r4
 800a3ce:	8809      	ldrh	r1, [r1, #0]
 800a3d0:	8812      	ldrh	r2, [r2, #0]
 800a3d2:	1a8a      	subs	r2, r1, r2
 800a3d4:	801a      	strh	r2, [r3, #0]
  *len = b;
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	183a      	adds	r2, r7, r0
 800a3da:	8812      	ldrh	r2, [r2, #0]
 800a3dc:	801a      	strh	r2, [r3, #0]
  return 1;
 800a3de:	2301      	movs	r3, #1
}
 800a3e0:	0018      	movs	r0, r3
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	b007      	add	sp, #28
 800a3e6:	bd90      	pop	{r4, r7, pc}

0800a3e8 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800a3e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3ea:	b087      	sub	sp, #28
 800a3ec:	af02      	add	r7, sp, #8
 800a3ee:	60f8      	str	r0, [r7, #12]
 800a3f0:	000c      	movs	r4, r1
 800a3f2:	0010      	movs	r0, r2
 800a3f4:	0019      	movs	r1, r3
 800a3f6:	260a      	movs	r6, #10
 800a3f8:	19bb      	adds	r3, r7, r6
 800a3fa:	1c22      	adds	r2, r4, #0
 800a3fc:	801a      	strh	r2, [r3, #0]
 800a3fe:	2408      	movs	r4, #8
 800a400:	193b      	adds	r3, r7, r4
 800a402:	1c02      	adds	r2, r0, #0
 800a404:	801a      	strh	r2, [r3, #0]
 800a406:	1dbb      	adds	r3, r7, #6
 800a408:	1c0a      	adds	r2, r1, #0
 800a40a:	801a      	strh	r2, [r3, #0]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 800a410:	0020      	movs	r0, r4
 800a412:	183b      	adds	r3, r7, r0
 800a414:	1839      	adds	r1, r7, r0
 800a416:	8809      	ldrh	r1, [r1, #0]
 800a418:	1a8a      	subs	r2, r1, r2
 800a41a:	801a      	strh	r2, [r3, #0]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800a420:	1dbb      	adds	r3, r7, #6
 800a422:	881d      	ldrh	r5, [r3, #0]
 800a424:	183b      	adds	r3, r7, r0
 800a426:	881a      	ldrh	r2, [r3, #0]
 800a428:	19bb      	adds	r3, r7, r6
 800a42a:	8819      	ldrh	r1, [r3, #0]
 800a42c:	68f8      	ldr	r0, [r7, #12]
 800a42e:	2320      	movs	r3, #32
 800a430:	2608      	movs	r6, #8
 800a432:	199b      	adds	r3, r3, r6
 800a434:	19db      	adds	r3, r3, r7
 800a436:	781b      	ldrb	r3, [r3, #0]
 800a438:	9300      	str	r3, [sp, #0]
 800a43a:	002b      	movs	r3, r5
 800a43c:	47a0      	blx	r4
}
 800a43e:	46c0      	nop			; (mov r8, r8)
 800a440:	46bd      	mov	sp, r7
 800a442:	b005      	add	sp, #20
 800a444:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a446 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800a446:	b5b0      	push	{r4, r5, r7, lr}
 800a448:	b086      	sub	sp, #24
 800a44a:	af02      	add	r7, sp, #8
 800a44c:	60f8      	str	r0, [r7, #12]
 800a44e:	000c      	movs	r4, r1
 800a450:	0010      	movs	r0, r2
 800a452:	0019      	movs	r1, r3
 800a454:	250a      	movs	r5, #10
 800a456:	197b      	adds	r3, r7, r5
 800a458:	1c22      	adds	r2, r4, #0
 800a45a:	801a      	strh	r2, [r3, #0]
 800a45c:	2308      	movs	r3, #8
 800a45e:	18fb      	adds	r3, r7, r3
 800a460:	1c02      	adds	r2, r0, #0
 800a462:	801a      	strh	r2, [r3, #0]
 800a464:	1dbb      	adds	r3, r7, #6
 800a466:	1c0a      	adds	r2, r1, #0
 800a468:	801a      	strh	r2, [r3, #0]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	228c      	movs	r2, #140	; 0x8c
 800a46e:	5c9b      	ldrb	r3, [r3, r2]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d100      	bne.n	800a476 <u8g2_DrawHVLine+0x30>
 800a474:	e090      	b.n	800a598 <u8g2_DrawHVLine+0x152>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 800a476:	1dbb      	adds	r3, r7, #6
 800a478:	881b      	ldrh	r3, [r3, #0]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d100      	bne.n	800a480 <u8g2_DrawHVLine+0x3a>
 800a47e:	e08b      	b.n	800a598 <u8g2_DrawHVLine+0x152>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 800a480:	1dbb      	adds	r3, r7, #6
 800a482:	881b      	ldrh	r3, [r3, #0]
 800a484:	2b01      	cmp	r3, #1
 800a486:	d927      	bls.n	800a4d8 <u8g2_DrawHVLine+0x92>
      {
	if ( dir == 2 )
 800a488:	2320      	movs	r3, #32
 800a48a:	18fb      	adds	r3, r7, r3
 800a48c:	781b      	ldrb	r3, [r3, #0]
 800a48e:	2b02      	cmp	r3, #2
 800a490:	d10e      	bne.n	800a4b0 <u8g2_DrawHVLine+0x6a>
	{
	  x -= len;
 800a492:	197b      	adds	r3, r7, r5
 800a494:	881a      	ldrh	r2, [r3, #0]
 800a496:	1dbb      	adds	r3, r7, #6
 800a498:	881b      	ldrh	r3, [r3, #0]
 800a49a:	1ad3      	subs	r3, r2, r3
 800a49c:	b29a      	uxth	r2, r3
 800a49e:	197b      	adds	r3, r7, r5
 800a4a0:	801a      	strh	r2, [r3, #0]
	  x++;
 800a4a2:	197b      	adds	r3, r7, r5
 800a4a4:	881b      	ldrh	r3, [r3, #0]
 800a4a6:	3301      	adds	r3, #1
 800a4a8:	b29a      	uxth	r2, r3
 800a4aa:	197b      	adds	r3, r7, r5
 800a4ac:	801a      	strh	r2, [r3, #0]
 800a4ae:	e013      	b.n	800a4d8 <u8g2_DrawHVLine+0x92>
	}
	else if ( dir == 3 )
 800a4b0:	2320      	movs	r3, #32
 800a4b2:	18fb      	adds	r3, r7, r3
 800a4b4:	781b      	ldrb	r3, [r3, #0]
 800a4b6:	2b03      	cmp	r3, #3
 800a4b8:	d10e      	bne.n	800a4d8 <u8g2_DrawHVLine+0x92>
	{
	  y -= len;
 800a4ba:	2108      	movs	r1, #8
 800a4bc:	187b      	adds	r3, r7, r1
 800a4be:	881a      	ldrh	r2, [r3, #0]
 800a4c0:	1dbb      	adds	r3, r7, #6
 800a4c2:	881b      	ldrh	r3, [r3, #0]
 800a4c4:	1ad3      	subs	r3, r2, r3
 800a4c6:	b29a      	uxth	r2, r3
 800a4c8:	187b      	adds	r3, r7, r1
 800a4ca:	801a      	strh	r2, [r3, #0]
	  y++;
 800a4cc:	187b      	adds	r3, r7, r1
 800a4ce:	881b      	ldrh	r3, [r3, #0]
 800a4d0:	3301      	adds	r3, #1
 800a4d2:	b29a      	uxth	r2, r3
 800a4d4:	187b      	adds	r3, r7, r1
 800a4d6:	801a      	strh	r2, [r3, #0]
	}
      }
      dir &= 1;  
 800a4d8:	2020      	movs	r0, #32
 800a4da:	183b      	adds	r3, r7, r0
 800a4dc:	183a      	adds	r2, r7, r0
 800a4de:	7812      	ldrb	r2, [r2, #0]
 800a4e0:	2101      	movs	r1, #1
 800a4e2:	400a      	ands	r2, r1
 800a4e4:	701a      	strb	r2, [r3, #0]
      
      /* clip against the user window */
      if ( dir == 0 )
 800a4e6:	183b      	adds	r3, r7, r0
 800a4e8:	781b      	ldrb	r3, [r3, #0]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d11c      	bne.n	800a528 <u8g2_DrawHVLine+0xe2>
      {
	if ( y < u8g2->user_y0 )
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	224c      	movs	r2, #76	; 0x4c
 800a4f2:	5a9a      	ldrh	r2, [r3, r2]
 800a4f4:	2108      	movs	r1, #8
 800a4f6:	187b      	adds	r3, r7, r1
 800a4f8:	881b      	ldrh	r3, [r3, #0]
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d843      	bhi.n	800a586 <u8g2_DrawHVLine+0x140>
	  return;
	if ( y >= u8g2->user_y1 )
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	224e      	movs	r2, #78	; 0x4e
 800a502:	5a9a      	ldrh	r2, [r3, r2]
 800a504:	187b      	adds	r3, r7, r1
 800a506:	881b      	ldrh	r3, [r3, #0]
 800a508:	429a      	cmp	r2, r3
 800a50a:	d93e      	bls.n	800a58a <u8g2_DrawHVLine+0x144>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	2248      	movs	r2, #72	; 0x48
 800a510:	5a9a      	ldrh	r2, [r3, r2]
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	214a      	movs	r1, #74	; 0x4a
 800a516:	5a5b      	ldrh	r3, [r3, r1]
 800a518:	1db9      	adds	r1, r7, #6
 800a51a:	200a      	movs	r0, #10
 800a51c:	1838      	adds	r0, r7, r0
 800a51e:	f7ff feed 	bl	800a2fc <u8g2_clip_intersection2>
 800a522:	1e03      	subs	r3, r0, #0
 800a524:	d11c      	bne.n	800a560 <u8g2_DrawHVLine+0x11a>
	  return;
 800a526:	e037      	b.n	800a598 <u8g2_DrawHVLine+0x152>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2248      	movs	r2, #72	; 0x48
 800a52c:	5a9a      	ldrh	r2, [r3, r2]
 800a52e:	210a      	movs	r1, #10
 800a530:	187b      	adds	r3, r7, r1
 800a532:	881b      	ldrh	r3, [r3, #0]
 800a534:	429a      	cmp	r2, r3
 800a536:	d82a      	bhi.n	800a58e <u8g2_DrawHVLine+0x148>
	  return;
	if ( x >= u8g2->user_x1 )
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	224a      	movs	r2, #74	; 0x4a
 800a53c:	5a9a      	ldrh	r2, [r3, r2]
 800a53e:	187b      	adds	r3, r7, r1
 800a540:	881b      	ldrh	r3, [r3, #0]
 800a542:	429a      	cmp	r2, r3
 800a544:	d925      	bls.n	800a592 <u8g2_DrawHVLine+0x14c>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	224c      	movs	r2, #76	; 0x4c
 800a54a:	5a9a      	ldrh	r2, [r3, r2]
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	214e      	movs	r1, #78	; 0x4e
 800a550:	5a5b      	ldrh	r3, [r3, r1]
 800a552:	1db9      	adds	r1, r7, #6
 800a554:	2008      	movs	r0, #8
 800a556:	1838      	adds	r0, r7, r0
 800a558:	f7ff fed0 	bl	800a2fc <u8g2_clip_intersection2>
 800a55c:	1e03      	subs	r3, r0, #0
 800a55e:	d01a      	beq.n	800a596 <u8g2_DrawHVLine+0x150>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a564:	689c      	ldr	r4, [r3, #8]
 800a566:	230a      	movs	r3, #10
 800a568:	18fb      	adds	r3, r7, r3
 800a56a:	8819      	ldrh	r1, [r3, #0]
 800a56c:	2308      	movs	r3, #8
 800a56e:	18fb      	adds	r3, r7, r3
 800a570:	881a      	ldrh	r2, [r3, #0]
 800a572:	1dbb      	adds	r3, r7, #6
 800a574:	881d      	ldrh	r5, [r3, #0]
 800a576:	68f8      	ldr	r0, [r7, #12]
 800a578:	2320      	movs	r3, #32
 800a57a:	18fb      	adds	r3, r7, r3
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	9300      	str	r3, [sp, #0]
 800a580:	002b      	movs	r3, r5
 800a582:	47a0      	blx	r4
 800a584:	e008      	b.n	800a598 <u8g2_DrawHVLine+0x152>
	  return;
 800a586:	46c0      	nop			; (mov r8, r8)
 800a588:	e006      	b.n	800a598 <u8g2_DrawHVLine+0x152>
	  return;
 800a58a:	46c0      	nop			; (mov r8, r8)
 800a58c:	e004      	b.n	800a598 <u8g2_DrawHVLine+0x152>
	  return;
 800a58e:	46c0      	nop			; (mov r8, r8)
 800a590:	e002      	b.n	800a598 <u8g2_DrawHVLine+0x152>
	  return;
 800a592:	46c0      	nop			; (mov r8, r8)
 800a594:	e000      	b.n	800a598 <u8g2_DrawHVLine+0x152>
	  return;
 800a596:	46c0      	nop			; (mov r8, r8)
    }
}
 800a598:	46bd      	mov	sp, r7
 800a59a:	b004      	add	sp, #16
 800a59c:	bdb0      	pop	{r4, r5, r7, pc}

0800a59e <u8g2_DrawPixel>:
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
}

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 800a59e:	b580      	push	{r7, lr}
 800a5a0:	b084      	sub	sp, #16
 800a5a2:	af02      	add	r7, sp, #8
 800a5a4:	6078      	str	r0, [r7, #4]
 800a5a6:	0008      	movs	r0, r1
 800a5a8:	0011      	movs	r1, r2
 800a5aa:	1cbb      	adds	r3, r7, #2
 800a5ac:	1c02      	adds	r2, r0, #0
 800a5ae:	801a      	strh	r2, [r3, #0]
 800a5b0:	003b      	movs	r3, r7
 800a5b2:	1c0a      	adds	r2, r1, #0
 800a5b4:	801a      	strh	r2, [r3, #0]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	224c      	movs	r2, #76	; 0x4c
 800a5ba:	5a9b      	ldrh	r3, [r3, r2]
 800a5bc:	003a      	movs	r2, r7
 800a5be:	8812      	ldrh	r2, [r2, #0]
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	d31f      	bcc.n	800a604 <u8g2_DrawPixel+0x66>
    return;
  if ( y >= u8g2->user_y1 )
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	224e      	movs	r2, #78	; 0x4e
 800a5c8:	5a9b      	ldrh	r3, [r3, r2]
 800a5ca:	003a      	movs	r2, r7
 800a5cc:	8812      	ldrh	r2, [r2, #0]
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d21a      	bcs.n	800a608 <u8g2_DrawPixel+0x6a>
    return;
  if ( x < u8g2->user_x0 )
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2248      	movs	r2, #72	; 0x48
 800a5d6:	5a9b      	ldrh	r3, [r3, r2]
 800a5d8:	1cba      	adds	r2, r7, #2
 800a5da:	8812      	ldrh	r2, [r2, #0]
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	d315      	bcc.n	800a60c <u8g2_DrawPixel+0x6e>
    return;
  if ( x >= u8g2->user_x1 )
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	224a      	movs	r2, #74	; 0x4a
 800a5e4:	5a9b      	ldrh	r3, [r3, r2]
 800a5e6:	1cba      	adds	r2, r7, #2
 800a5e8:	8812      	ldrh	r2, [r2, #0]
 800a5ea:	429a      	cmp	r2, r3
 800a5ec:	d210      	bcs.n	800a610 <u8g2_DrawPixel+0x72>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 800a5ee:	003b      	movs	r3, r7
 800a5f0:	881a      	ldrh	r2, [r3, #0]
 800a5f2:	1cbb      	adds	r3, r7, #2
 800a5f4:	8819      	ldrh	r1, [r3, #0]
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	9300      	str	r3, [sp, #0]
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	f7ff ff22 	bl	800a446 <u8g2_DrawHVLine>
 800a602:	e006      	b.n	800a612 <u8g2_DrawPixel+0x74>
    return;
 800a604:	46c0      	nop			; (mov r8, r8)
 800a606:	e004      	b.n	800a612 <u8g2_DrawPixel+0x74>
    return;
 800a608:	46c0      	nop			; (mov r8, r8)
 800a60a:	e002      	b.n	800a612 <u8g2_DrawPixel+0x74>
    return;
 800a60c:	46c0      	nop			; (mov r8, r8)
 800a60e:	e000      	b.n	800a612 <u8g2_DrawPixel+0x74>
    return;
 800a610:	46c0      	nop			; (mov r8, r8)
}
 800a612:	46bd      	mov	sp, r7
 800a614:	b002      	add	sp, #8
 800a616:	bd80      	pop	{r7, pc}

0800a618 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 800a618:	b5b0      	push	{r4, r5, r7, lr}
 800a61a:	b082      	sub	sp, #8
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	0005      	movs	r5, r0
 800a620:	000c      	movs	r4, r1
 800a622:	0010      	movs	r0, r2
 800a624:	0019      	movs	r1, r3
 800a626:	1dbb      	adds	r3, r7, #6
 800a628:	1c2a      	adds	r2, r5, #0
 800a62a:	801a      	strh	r2, [r3, #0]
 800a62c:	1d3b      	adds	r3, r7, #4
 800a62e:	1c22      	adds	r2, r4, #0
 800a630:	801a      	strh	r2, [r3, #0]
 800a632:	1cbb      	adds	r3, r7, #2
 800a634:	1c02      	adds	r2, r0, #0
 800a636:	801a      	strh	r2, [r3, #0]
 800a638:	003b      	movs	r3, r7
 800a63a:	1c0a      	adds	r2, r1, #0
 800a63c:	801a      	strh	r2, [r3, #0]
  if ( v0 < a1 )		// v0 <= a1
 800a63e:	1cba      	adds	r2, r7, #2
 800a640:	1d3b      	adds	r3, r7, #4
 800a642:	8812      	ldrh	r2, [r2, #0]
 800a644:	881b      	ldrh	r3, [r3, #0]
 800a646:	429a      	cmp	r2, r3
 800a648:	d211      	bcs.n	800a66e <u8g2_is_intersection_decision_tree+0x56>
  {
    if ( v1 > a0 )	// v1 >= a0
 800a64a:	003a      	movs	r2, r7
 800a64c:	1dbb      	adds	r3, r7, #6
 800a64e:	8812      	ldrh	r2, [r2, #0]
 800a650:	881b      	ldrh	r3, [r3, #0]
 800a652:	429a      	cmp	r2, r3
 800a654:	d901      	bls.n	800a65a <u8g2_is_intersection_decision_tree+0x42>
    {
      return 1;
 800a656:	2301      	movs	r3, #1
 800a658:	e01a      	b.n	800a690 <u8g2_is_intersection_decision_tree+0x78>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 800a65a:	1cba      	adds	r2, r7, #2
 800a65c:	003b      	movs	r3, r7
 800a65e:	8812      	ldrh	r2, [r2, #0]
 800a660:	881b      	ldrh	r3, [r3, #0]
 800a662:	429a      	cmp	r2, r3
 800a664:	d901      	bls.n	800a66a <u8g2_is_intersection_decision_tree+0x52>
      {
	return 1;
 800a666:	2301      	movs	r3, #1
 800a668:	e012      	b.n	800a690 <u8g2_is_intersection_decision_tree+0x78>
      }
      else
      {
	return 0;
 800a66a:	2300      	movs	r3, #0
 800a66c:	e010      	b.n	800a690 <u8g2_is_intersection_decision_tree+0x78>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 800a66e:	003a      	movs	r2, r7
 800a670:	1dbb      	adds	r3, r7, #6
 800a672:	8812      	ldrh	r2, [r2, #0]
 800a674:	881b      	ldrh	r3, [r3, #0]
 800a676:	429a      	cmp	r2, r3
 800a678:	d909      	bls.n	800a68e <u8g2_is_intersection_decision_tree+0x76>
    {
      if ( v0 > v1 )	// v0 > v1
 800a67a:	1cba      	adds	r2, r7, #2
 800a67c:	003b      	movs	r3, r7
 800a67e:	8812      	ldrh	r2, [r2, #0]
 800a680:	881b      	ldrh	r3, [r3, #0]
 800a682:	429a      	cmp	r2, r3
 800a684:	d901      	bls.n	800a68a <u8g2_is_intersection_decision_tree+0x72>
      {
	return 1;
 800a686:	2301      	movs	r3, #1
 800a688:	e002      	b.n	800a690 <u8g2_is_intersection_decision_tree+0x78>
      }
      else
      {
	return 0;
 800a68a:	2300      	movs	r3, #0
 800a68c:	e000      	b.n	800a690 <u8g2_is_intersection_decision_tree+0x78>
      }
    }
    else
    {
      return 0;
 800a68e:	2300      	movs	r3, #0
    }
  }
}
 800a690:	0018      	movs	r0, r3
 800a692:	46bd      	mov	sp, r7
 800a694:	b002      	add	sp, #8
 800a696:	bdb0      	pop	{r4, r5, r7, pc}

0800a698 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 800a698:	b5b0      	push	{r4, r5, r7, lr}
 800a69a:	b084      	sub	sp, #16
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	60f8      	str	r0, [r7, #12]
 800a6a0:	000c      	movs	r4, r1
 800a6a2:	0010      	movs	r0, r2
 800a6a4:	0019      	movs	r1, r3
 800a6a6:	230a      	movs	r3, #10
 800a6a8:	18fb      	adds	r3, r7, r3
 800a6aa:	1c22      	adds	r2, r4, #0
 800a6ac:	801a      	strh	r2, [r3, #0]
 800a6ae:	2508      	movs	r5, #8
 800a6b0:	197b      	adds	r3, r7, r5
 800a6b2:	1c02      	adds	r2, r0, #0
 800a6b4:	801a      	strh	r2, [r3, #0]
 800a6b6:	1dbb      	adds	r3, r7, #6
 800a6b8:	1c0a      	adds	r2, r1, #0
 800a6ba:	801a      	strh	r2, [r3, #0]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	224c      	movs	r2, #76	; 0x4c
 800a6c0:	5a98      	ldrh	r0, [r3, r2]
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	224e      	movs	r2, #78	; 0x4e
 800a6c6:	5a99      	ldrh	r1, [r3, r2]
 800a6c8:	2320      	movs	r3, #32
 800a6ca:	18fb      	adds	r3, r7, r3
 800a6cc:	881c      	ldrh	r4, [r3, #0]
 800a6ce:	197b      	adds	r3, r7, r5
 800a6d0:	881a      	ldrh	r2, [r3, #0]
 800a6d2:	0023      	movs	r3, r4
 800a6d4:	f7ff ffa0 	bl	800a618 <u8g2_is_intersection_decision_tree>
 800a6d8:	1e03      	subs	r3, r0, #0
 800a6da:	d101      	bne.n	800a6e0 <u8g2_IsIntersection+0x48>
    return 0; 
 800a6dc:	2300      	movs	r3, #0
 800a6de:	e00e      	b.n	800a6fe <u8g2_IsIntersection+0x66>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	2248      	movs	r2, #72	; 0x48
 800a6e4:	5a98      	ldrh	r0, [r3, r2]
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	224a      	movs	r2, #74	; 0x4a
 800a6ea:	5a99      	ldrh	r1, [r3, r2]
 800a6ec:	1dbb      	adds	r3, r7, #6
 800a6ee:	881c      	ldrh	r4, [r3, #0]
 800a6f0:	230a      	movs	r3, #10
 800a6f2:	18fb      	adds	r3, r7, r3
 800a6f4:	881a      	ldrh	r2, [r3, #0]
 800a6f6:	0023      	movs	r3, r4
 800a6f8:	f7ff ff8e 	bl	800a618 <u8g2_is_intersection_decision_tree>
 800a6fc:	0003      	movs	r3, r0
}
 800a6fe:	0018      	movs	r0, r3
 800a700:	46bd      	mov	sp, r7
 800a702:	b004      	add	sp, #16
 800a704:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a708 <u8g2_DrawLine>:

#include "u8g2.h"


void u8g2_DrawLine(u8g2_t *u8g2, u8g2_uint_t x1, u8g2_uint_t y1, u8g2_uint_t x2, u8g2_uint_t y2)
{
 800a708:	b5b0      	push	{r4, r5, r7, lr}
 800a70a:	b088      	sub	sp, #32
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	60f8      	str	r0, [r7, #12]
 800a710:	000c      	movs	r4, r1
 800a712:	0010      	movs	r0, r2
 800a714:	0019      	movs	r1, r3
 800a716:	250a      	movs	r5, #10
 800a718:	197b      	adds	r3, r7, r5
 800a71a:	1c22      	adds	r2, r4, #0
 800a71c:	801a      	strh	r2, [r3, #0]
 800a71e:	2308      	movs	r3, #8
 800a720:	18fb      	adds	r3, r7, r3
 800a722:	1c02      	adds	r2, r0, #0
 800a724:	801a      	strh	r2, [r3, #0]
 800a726:	1dbb      	adds	r3, r7, #6
 800a728:	1c0a      	adds	r2, r1, #0
 800a72a:	801a      	strh	r2, [r3, #0]
  u8g2_uint_t x,y;
  u8g2_uint_t dx, dy;
  u8g2_int_t err;
  u8g2_int_t ystep;

  uint8_t swapxy = 0;
 800a72c:	2313      	movs	r3, #19
 800a72e:	18fb      	adds	r3, r7, r3
 800a730:	2200      	movs	r2, #0
 800a732:	701a      	strb	r2, [r3, #0]
  
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
 800a734:	197a      	adds	r2, r7, r5
 800a736:	1dbb      	adds	r3, r7, #6
 800a738:	8812      	ldrh	r2, [r2, #0]
 800a73a:	881b      	ldrh	r3, [r3, #0]
 800a73c:	429a      	cmp	r2, r3
 800a73e:	d908      	bls.n	800a752 <u8g2_DrawLine+0x4a>
 800a740:	231a      	movs	r3, #26
 800a742:	18fb      	adds	r3, r7, r3
 800a744:	1979      	adds	r1, r7, r5
 800a746:	1dba      	adds	r2, r7, #6
 800a748:	8809      	ldrh	r1, [r1, #0]
 800a74a:	8812      	ldrh	r2, [r2, #0]
 800a74c:	1a8a      	subs	r2, r1, r2
 800a74e:	801a      	strh	r2, [r3, #0]
 800a750:	e008      	b.n	800a764 <u8g2_DrawLine+0x5c>
 800a752:	231a      	movs	r3, #26
 800a754:	18fb      	adds	r3, r7, r3
 800a756:	1db9      	adds	r1, r7, #6
 800a758:	220a      	movs	r2, #10
 800a75a:	18ba      	adds	r2, r7, r2
 800a75c:	8809      	ldrh	r1, [r1, #0]
 800a75e:	8812      	ldrh	r2, [r2, #0]
 800a760:	1a8a      	subs	r2, r1, r2
 800a762:	801a      	strh	r2, [r3, #0]
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
 800a764:	2108      	movs	r1, #8
 800a766:	187a      	adds	r2, r7, r1
 800a768:	2030      	movs	r0, #48	; 0x30
 800a76a:	183b      	adds	r3, r7, r0
 800a76c:	8812      	ldrh	r2, [r2, #0]
 800a76e:	881b      	ldrh	r3, [r3, #0]
 800a770:	429a      	cmp	r2, r3
 800a772:	d908      	bls.n	800a786 <u8g2_DrawLine+0x7e>
 800a774:	2318      	movs	r3, #24
 800a776:	18fa      	adds	r2, r7, r3
 800a778:	1879      	adds	r1, r7, r1
 800a77a:	183b      	adds	r3, r7, r0
 800a77c:	8809      	ldrh	r1, [r1, #0]
 800a77e:	881b      	ldrh	r3, [r3, #0]
 800a780:	1acb      	subs	r3, r1, r3
 800a782:	8013      	strh	r3, [r2, #0]
 800a784:	e009      	b.n	800a79a <u8g2_DrawLine+0x92>
 800a786:	2318      	movs	r3, #24
 800a788:	18fa      	adds	r2, r7, r3
 800a78a:	2330      	movs	r3, #48	; 0x30
 800a78c:	18fb      	adds	r3, r7, r3
 800a78e:	2108      	movs	r1, #8
 800a790:	1878      	adds	r0, r7, r1
 800a792:	8819      	ldrh	r1, [r3, #0]
 800a794:	8803      	ldrh	r3, [r0, #0]
 800a796:	1acb      	subs	r3, r1, r3
 800a798:	8013      	strh	r3, [r2, #0]

  if ( dy > dx ) 
 800a79a:	2018      	movs	r0, #24
 800a79c:	183a      	adds	r2, r7, r0
 800a79e:	241a      	movs	r4, #26
 800a7a0:	193b      	adds	r3, r7, r4
 800a7a2:	8812      	ldrh	r2, [r2, #0]
 800a7a4:	881b      	ldrh	r3, [r3, #0]
 800a7a6:	429a      	cmp	r2, r3
 800a7a8:	d92b      	bls.n	800a802 <u8g2_DrawLine+0xfa>
  {
    swapxy = 1;
 800a7aa:	2313      	movs	r3, #19
 800a7ac:	18fb      	adds	r3, r7, r3
 800a7ae:	2201      	movs	r2, #1
 800a7b0:	701a      	strb	r2, [r3, #0]
    tmp = dx; dx =dy; dy = tmp;
 800a7b2:	2110      	movs	r1, #16
 800a7b4:	187b      	adds	r3, r7, r1
 800a7b6:	193a      	adds	r2, r7, r4
 800a7b8:	8812      	ldrh	r2, [r2, #0]
 800a7ba:	801a      	strh	r2, [r3, #0]
 800a7bc:	193b      	adds	r3, r7, r4
 800a7be:	183a      	adds	r2, r7, r0
 800a7c0:	8812      	ldrh	r2, [r2, #0]
 800a7c2:	801a      	strh	r2, [r3, #0]
 800a7c4:	183b      	adds	r3, r7, r0
 800a7c6:	187a      	adds	r2, r7, r1
 800a7c8:	8812      	ldrh	r2, [r2, #0]
 800a7ca:	801a      	strh	r2, [r3, #0]
    tmp = x1; x1 =y1; y1 = tmp;
 800a7cc:	187b      	adds	r3, r7, r1
 800a7ce:	200a      	movs	r0, #10
 800a7d0:	183a      	adds	r2, r7, r0
 800a7d2:	8812      	ldrh	r2, [r2, #0]
 800a7d4:	801a      	strh	r2, [r3, #0]
 800a7d6:	183b      	adds	r3, r7, r0
 800a7d8:	2008      	movs	r0, #8
 800a7da:	183a      	adds	r2, r7, r0
 800a7dc:	8812      	ldrh	r2, [r2, #0]
 800a7de:	801a      	strh	r2, [r3, #0]
 800a7e0:	183b      	adds	r3, r7, r0
 800a7e2:	187a      	adds	r2, r7, r1
 800a7e4:	8812      	ldrh	r2, [r2, #0]
 800a7e6:	801a      	strh	r2, [r3, #0]
    tmp = x2; x2 =y2; y2 = tmp;
 800a7e8:	187b      	adds	r3, r7, r1
 800a7ea:	1dba      	adds	r2, r7, #6
 800a7ec:	8812      	ldrh	r2, [r2, #0]
 800a7ee:	801a      	strh	r2, [r3, #0]
 800a7f0:	1dba      	adds	r2, r7, #6
 800a7f2:	2030      	movs	r0, #48	; 0x30
 800a7f4:	183b      	adds	r3, r7, r0
 800a7f6:	881b      	ldrh	r3, [r3, #0]
 800a7f8:	8013      	strh	r3, [r2, #0]
 800a7fa:	183b      	adds	r3, r7, r0
 800a7fc:	187a      	adds	r2, r7, r1
 800a7fe:	8812      	ldrh	r2, [r2, #0]
 800a800:	801a      	strh	r2, [r3, #0]
  }
  if ( x1 > x2 ) 
 800a802:	200a      	movs	r0, #10
 800a804:	183a      	adds	r2, r7, r0
 800a806:	1dbb      	adds	r3, r7, #6
 800a808:	8812      	ldrh	r2, [r2, #0]
 800a80a:	881b      	ldrh	r3, [r3, #0]
 800a80c:	429a      	cmp	r2, r3
 800a80e:	d91a      	bls.n	800a846 <u8g2_DrawLine+0x13e>
  {
    tmp = x1; x1 =x2; x2 = tmp;
 800a810:	2110      	movs	r1, #16
 800a812:	187b      	adds	r3, r7, r1
 800a814:	183a      	adds	r2, r7, r0
 800a816:	8812      	ldrh	r2, [r2, #0]
 800a818:	801a      	strh	r2, [r3, #0]
 800a81a:	183b      	adds	r3, r7, r0
 800a81c:	1dba      	adds	r2, r7, #6
 800a81e:	8812      	ldrh	r2, [r2, #0]
 800a820:	801a      	strh	r2, [r3, #0]
 800a822:	1dbb      	adds	r3, r7, #6
 800a824:	187a      	adds	r2, r7, r1
 800a826:	8812      	ldrh	r2, [r2, #0]
 800a828:	801a      	strh	r2, [r3, #0]
    tmp = y1; y1 =y2; y2 = tmp;
 800a82a:	187b      	adds	r3, r7, r1
 800a82c:	2008      	movs	r0, #8
 800a82e:	183a      	adds	r2, r7, r0
 800a830:	8812      	ldrh	r2, [r2, #0]
 800a832:	801a      	strh	r2, [r3, #0]
 800a834:	183a      	adds	r2, r7, r0
 800a836:	2030      	movs	r0, #48	; 0x30
 800a838:	183b      	adds	r3, r7, r0
 800a83a:	881b      	ldrh	r3, [r3, #0]
 800a83c:	8013      	strh	r3, [r2, #0]
 800a83e:	183b      	adds	r3, r7, r0
 800a840:	187a      	adds	r2, r7, r1
 800a842:	8812      	ldrh	r2, [r2, #0]
 800a844:	801a      	strh	r2, [r3, #0]
  }
  err = dx >> 1;
 800a846:	231a      	movs	r3, #26
 800a848:	18fb      	adds	r3, r7, r3
 800a84a:	881b      	ldrh	r3, [r3, #0]
 800a84c:	085b      	lsrs	r3, r3, #1
 800a84e:	b29a      	uxth	r2, r3
 800a850:	2316      	movs	r3, #22
 800a852:	18fb      	adds	r3, r7, r3
 800a854:	801a      	strh	r2, [r3, #0]
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
 800a856:	2330      	movs	r3, #48	; 0x30
 800a858:	18fb      	adds	r3, r7, r3
 800a85a:	2208      	movs	r2, #8
 800a85c:	18b9      	adds	r1, r7, r2
 800a85e:	881a      	ldrh	r2, [r3, #0]
 800a860:	880b      	ldrh	r3, [r1, #0]
 800a862:	429a      	cmp	r2, r3
 800a864:	d904      	bls.n	800a870 <u8g2_DrawLine+0x168>
 800a866:	2314      	movs	r3, #20
 800a868:	18fb      	adds	r3, r7, r3
 800a86a:	2201      	movs	r2, #1
 800a86c:	801a      	strh	r2, [r3, #0]
 800a86e:	e004      	b.n	800a87a <u8g2_DrawLine+0x172>
 800a870:	2314      	movs	r3, #20
 800a872:	18fb      	adds	r3, r7, r3
 800a874:	2201      	movs	r2, #1
 800a876:	4252      	negs	r2, r2
 800a878:	801a      	strh	r2, [r3, #0]
  y = y1;
 800a87a:	231c      	movs	r3, #28
 800a87c:	18fb      	adds	r3, r7, r3
 800a87e:	2208      	movs	r2, #8
 800a880:	18ba      	adds	r2, r7, r2
 800a882:	8812      	ldrh	r2, [r2, #0]
 800a884:	801a      	strh	r2, [r3, #0]

#ifndef  U8G2_16BIT
  if ( x2 == 255 )
    x2--;
#else
  if ( x2 == 0xffff )
 800a886:	1dbb      	adds	r3, r7, #6
 800a888:	881b      	ldrh	r3, [r3, #0]
 800a88a:	4a2f      	ldr	r2, [pc, #188]	; (800a948 <u8g2_DrawLine+0x240>)
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d104      	bne.n	800a89a <u8g2_DrawLine+0x192>
    x2--;
 800a890:	1dbb      	adds	r3, r7, #6
 800a892:	881a      	ldrh	r2, [r3, #0]
 800a894:	1dbb      	adds	r3, r7, #6
 800a896:	3a01      	subs	r2, #1
 800a898:	801a      	strh	r2, [r3, #0]
#endif

  for( x = x1; x <= x2; x++ )
 800a89a:	231e      	movs	r3, #30
 800a89c:	18fb      	adds	r3, r7, r3
 800a89e:	220a      	movs	r2, #10
 800a8a0:	18ba      	adds	r2, r7, r2
 800a8a2:	8812      	ldrh	r2, [r2, #0]
 800a8a4:	801a      	strh	r2, [r3, #0]
 800a8a6:	e042      	b.n	800a92e <u8g2_DrawLine+0x226>
  {
    if ( swapxy == 0 ) 
 800a8a8:	2313      	movs	r3, #19
 800a8aa:	18fb      	adds	r3, r7, r3
 800a8ac:	781b      	ldrb	r3, [r3, #0]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d10a      	bne.n	800a8c8 <u8g2_DrawLine+0x1c0>
      u8g2_DrawPixel(u8g2, x, y); 
 800a8b2:	231c      	movs	r3, #28
 800a8b4:	18fb      	adds	r3, r7, r3
 800a8b6:	881a      	ldrh	r2, [r3, #0]
 800a8b8:	231e      	movs	r3, #30
 800a8ba:	18fb      	adds	r3, r7, r3
 800a8bc:	8819      	ldrh	r1, [r3, #0]
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	0018      	movs	r0, r3
 800a8c2:	f7ff fe6c 	bl	800a59e <u8g2_DrawPixel>
 800a8c6:	e009      	b.n	800a8dc <u8g2_DrawLine+0x1d4>
    else 
      u8g2_DrawPixel(u8g2, y, x); 
 800a8c8:	231e      	movs	r3, #30
 800a8ca:	18fb      	adds	r3, r7, r3
 800a8cc:	881a      	ldrh	r2, [r3, #0]
 800a8ce:	231c      	movs	r3, #28
 800a8d0:	18fb      	adds	r3, r7, r3
 800a8d2:	8819      	ldrh	r1, [r3, #0]
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	0018      	movs	r0, r3
 800a8d8:	f7ff fe61 	bl	800a59e <u8g2_DrawPixel>
    err -= (uint8_t)dy;
 800a8dc:	2016      	movs	r0, #22
 800a8de:	183b      	adds	r3, r7, r0
 800a8e0:	881a      	ldrh	r2, [r3, #0]
 800a8e2:	2318      	movs	r3, #24
 800a8e4:	18fb      	adds	r3, r7, r3
 800a8e6:	881b      	ldrh	r3, [r3, #0]
 800a8e8:	b2db      	uxtb	r3, r3
 800a8ea:	b29b      	uxth	r3, r3
 800a8ec:	1ad3      	subs	r3, r2, r3
 800a8ee:	b29a      	uxth	r2, r3
 800a8f0:	183b      	adds	r3, r7, r0
 800a8f2:	801a      	strh	r2, [r3, #0]
    if ( err < 0 ) 
 800a8f4:	183b      	adds	r3, r7, r0
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	5e9b      	ldrsh	r3, [r3, r2]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	da11      	bge.n	800a922 <u8g2_DrawLine+0x21a>
    {
      y += (u8g2_uint_t)ystep;
 800a8fe:	2314      	movs	r3, #20
 800a900:	18fb      	adds	r3, r7, r3
 800a902:	8819      	ldrh	r1, [r3, #0]
 800a904:	221c      	movs	r2, #28
 800a906:	18bb      	adds	r3, r7, r2
 800a908:	18ba      	adds	r2, r7, r2
 800a90a:	8812      	ldrh	r2, [r2, #0]
 800a90c:	188a      	adds	r2, r1, r2
 800a90e:	801a      	strh	r2, [r3, #0]
      err += (u8g2_uint_t)dx;
 800a910:	183b      	adds	r3, r7, r0
 800a912:	881a      	ldrh	r2, [r3, #0]
 800a914:	231a      	movs	r3, #26
 800a916:	18fb      	adds	r3, r7, r3
 800a918:	881b      	ldrh	r3, [r3, #0]
 800a91a:	18d3      	adds	r3, r2, r3
 800a91c:	b29a      	uxth	r2, r3
 800a91e:	183b      	adds	r3, r7, r0
 800a920:	801a      	strh	r2, [r3, #0]
  for( x = x1; x <= x2; x++ )
 800a922:	211e      	movs	r1, #30
 800a924:	187b      	adds	r3, r7, r1
 800a926:	881a      	ldrh	r2, [r3, #0]
 800a928:	187b      	adds	r3, r7, r1
 800a92a:	3201      	adds	r2, #1
 800a92c:	801a      	strh	r2, [r3, #0]
 800a92e:	231e      	movs	r3, #30
 800a930:	18fa      	adds	r2, r7, r3
 800a932:	1dbb      	adds	r3, r7, #6
 800a934:	8812      	ldrh	r2, [r2, #0]
 800a936:	881b      	ldrh	r3, [r3, #0]
 800a938:	429a      	cmp	r2, r3
 800a93a:	d9b5      	bls.n	800a8a8 <u8g2_DrawLine+0x1a0>
    }
  }
}
 800a93c:	46c0      	nop			; (mov r8, r8)
 800a93e:	46c0      	nop			; (mov r8, r8)
 800a940:	46bd      	mov	sp, r7
 800a942:	b008      	add	sp, #32
 800a944:	bdb0      	pop	{r4, r5, r7, pc}
 800a946:	46c0      	nop			; (mov r8, r8)
 800a948:	0000ffff 	.word	0x0000ffff

0800a94c <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800a94c:	b590      	push	{r4, r7, lr}
 800a94e:	b089      	sub	sp, #36	; 0x24
 800a950:	af00      	add	r7, sp, #0
 800a952:	60f8      	str	r0, [r7, #12]
 800a954:	000c      	movs	r4, r1
 800a956:	0010      	movs	r0, r2
 800a958:	0019      	movs	r1, r3
 800a95a:	230a      	movs	r3, #10
 800a95c:	18fb      	adds	r3, r7, r3
 800a95e:	1c22      	adds	r2, r4, #0
 800a960:	801a      	strh	r2, [r3, #0]
 800a962:	2408      	movs	r4, #8
 800a964:	193b      	adds	r3, r7, r4
 800a966:	1c02      	adds	r2, r0, #0
 800a968:	801a      	strh	r2, [r3, #0]
 800a96a:	1dbb      	adds	r3, r7, #6
 800a96c:	1c0a      	adds	r2, r1, #0
 800a96e:	801a      	strh	r2, [r3, #0]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 800a970:	201b      	movs	r0, #27
 800a972:	183b      	adds	r3, r7, r0
 800a974:	193a      	adds	r2, r7, r4
 800a976:	8812      	ldrh	r2, [r2, #0]
 800a978:	701a      	strb	r2, [r3, #0]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 800a97a:	183b      	adds	r3, r7, r0
 800a97c:	183a      	adds	r2, r7, r0
 800a97e:	7812      	ldrb	r2, [r2, #0]
 800a980:	2107      	movs	r1, #7
 800a982:	400a      	ands	r2, r1
 800a984:	701a      	strb	r2, [r3, #0]
  mask = 1;
 800a986:	2118      	movs	r1, #24
 800a988:	187b      	adds	r3, r7, r1
 800a98a:	2201      	movs	r2, #1
 800a98c:	701a      	strb	r2, [r3, #0]
  mask <<= bit_pos;
 800a98e:	187b      	adds	r3, r7, r1
 800a990:	781a      	ldrb	r2, [r3, #0]
 800a992:	183b      	adds	r3, r7, r0
 800a994:	781b      	ldrb	r3, [r3, #0]
 800a996:	409a      	lsls	r2, r3
 800a998:	187b      	adds	r3, r7, r1
 800a99a:	701a      	strb	r2, [r3, #0]

  or_mask = 0;
 800a99c:	201a      	movs	r0, #26
 800a99e:	183b      	adds	r3, r7, r0
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	701a      	strb	r2, [r3, #0]
  xor_mask = 0;
 800a9a4:	2319      	movs	r3, #25
 800a9a6:	18fb      	adds	r3, r7, r3
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	701a      	strb	r2, [r3, #0]
  if ( u8g2->draw_color <= 1 )
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	2292      	movs	r2, #146	; 0x92
 800a9b0:	5c9b      	ldrb	r3, [r3, r2]
 800a9b2:	2b01      	cmp	r3, #1
 800a9b4:	d803      	bhi.n	800a9be <u8g2_ll_hvline_vertical_top_lsb+0x72>
    or_mask  = mask;
 800a9b6:	183b      	adds	r3, r7, r0
 800a9b8:	187a      	adds	r2, r7, r1
 800a9ba:	7812      	ldrb	r2, [r2, #0]
 800a9bc:	701a      	strb	r2, [r3, #0]
  if ( u8g2->draw_color != 1 )
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	2292      	movs	r2, #146	; 0x92
 800a9c2:	5c9b      	ldrb	r3, [r3, r2]
 800a9c4:	2b01      	cmp	r3, #1
 800a9c6:	d005      	beq.n	800a9d4 <u8g2_ll_hvline_vertical_top_lsb+0x88>
    xor_mask = mask;
 800a9c8:	2319      	movs	r3, #25
 800a9ca:	18fb      	adds	r3, r7, r3
 800a9cc:	2218      	movs	r2, #24
 800a9ce:	18ba      	adds	r2, r7, r2
 800a9d0:	7812      	ldrb	r2, [r2, #0]
 800a9d2:	701a      	strb	r2, [r3, #0]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 800a9d4:	2016      	movs	r0, #22
 800a9d6:	183b      	adds	r3, r7, r0
 800a9d8:	2208      	movs	r2, #8
 800a9da:	18ba      	adds	r2, r7, r2
 800a9dc:	8812      	ldrh	r2, [r2, #0]
 800a9de:	801a      	strh	r2, [r3, #0]
  offset &= ~7;
 800a9e0:	183b      	adds	r3, r7, r0
 800a9e2:	183a      	adds	r2, r7, r0
 800a9e4:	8812      	ldrh	r2, [r2, #0]
 800a9e6:	2107      	movs	r1, #7
 800a9e8:	438a      	bics	r2, r1
 800a9ea:	801a      	strh	r2, [r3, #0]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	7c1b      	ldrb	r3, [r3, #16]
 800a9f2:	b29a      	uxth	r2, r3
 800a9f4:	183b      	adds	r3, r7, r0
 800a9f6:	1839      	adds	r1, r7, r0
 800a9f8:	8809      	ldrh	r1, [r1, #0]
 800a9fa:	434a      	muls	r2, r1
 800a9fc:	801a      	strh	r2, [r3, #0]
  ptr = u8g2->tile_buf_ptr;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa02:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 800aa04:	183b      	adds	r3, r7, r0
 800aa06:	881b      	ldrh	r3, [r3, #0]
 800aa08:	69fa      	ldr	r2, [r7, #28]
 800aa0a:	18d3      	adds	r3, r2, r3
 800aa0c:	61fb      	str	r3, [r7, #28]
  ptr += x;
 800aa0e:	230a      	movs	r3, #10
 800aa10:	18fb      	adds	r3, r7, r3
 800aa12:	881b      	ldrh	r3, [r3, #0]
 800aa14:	69fa      	ldr	r2, [r7, #28]
 800aa16:	18d3      	adds	r3, r2, r3
 800aa18:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 800aa1a:	2330      	movs	r3, #48	; 0x30
 800aa1c:	18fb      	adds	r3, r7, r3
 800aa1e:	781b      	ldrb	r3, [r3, #0]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d11e      	bne.n	800aa62 <u8g2_ll_hvline_vertical_top_lsb+0x116>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 800aa24:	69fb      	ldr	r3, [r7, #28]
 800aa26:	781a      	ldrb	r2, [r3, #0]
 800aa28:	231a      	movs	r3, #26
 800aa2a:	18fb      	adds	r3, r7, r3
 800aa2c:	781b      	ldrb	r3, [r3, #0]
 800aa2e:	4313      	orrs	r3, r2
 800aa30:	b2da      	uxtb	r2, r3
 800aa32:	69fb      	ldr	r3, [r7, #28]
 800aa34:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 800aa36:	69fb      	ldr	r3, [r7, #28]
 800aa38:	781a      	ldrb	r2, [r3, #0]
 800aa3a:	2319      	movs	r3, #25
 800aa3c:	18fb      	adds	r3, r7, r3
 800aa3e:	781b      	ldrb	r3, [r3, #0]
 800aa40:	4053      	eors	r3, r2
 800aa42:	b2da      	uxtb	r2, r3
 800aa44:	69fb      	ldr	r3, [r7, #28]
 800aa46:	701a      	strb	r2, [r3, #0]
	ptr++;
 800aa48:	69fb      	ldr	r3, [r7, #28]
 800aa4a:	3301      	adds	r3, #1
 800aa4c:	61fb      	str	r3, [r7, #28]
	len--;
 800aa4e:	1dbb      	adds	r3, r7, #6
 800aa50:	881a      	ldrh	r2, [r3, #0]
 800aa52:	1dbb      	adds	r3, r7, #6
 800aa54:	3a01      	subs	r2, #1
 800aa56:	801a      	strh	r2, [r3, #0]
      } while( len != 0 );
 800aa58:	1dbb      	adds	r3, r7, #6
 800aa5a:	881b      	ldrh	r3, [r3, #0]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d1e1      	bne.n	800aa24 <u8g2_ll_hvline_vertical_top_lsb+0xd8>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 800aa60:	e04e      	b.n	800ab00 <u8g2_ll_hvline_vertical_top_lsb+0x1b4>
      *ptr |= or_mask;
 800aa62:	69fb      	ldr	r3, [r7, #28]
 800aa64:	781a      	ldrb	r2, [r3, #0]
 800aa66:	241a      	movs	r4, #26
 800aa68:	193b      	adds	r3, r7, r4
 800aa6a:	781b      	ldrb	r3, [r3, #0]
 800aa6c:	4313      	orrs	r3, r2
 800aa6e:	b2da      	uxtb	r2, r3
 800aa70:	69fb      	ldr	r3, [r7, #28]
 800aa72:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 800aa74:	69fb      	ldr	r3, [r7, #28]
 800aa76:	781a      	ldrb	r2, [r3, #0]
 800aa78:	2319      	movs	r3, #25
 800aa7a:	18fb      	adds	r3, r7, r3
 800aa7c:	781b      	ldrb	r3, [r3, #0]
 800aa7e:	4053      	eors	r3, r2
 800aa80:	b2da      	uxtb	r2, r3
 800aa82:	69fb      	ldr	r3, [r7, #28]
 800aa84:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 800aa86:	201b      	movs	r0, #27
 800aa88:	183b      	adds	r3, r7, r0
 800aa8a:	781a      	ldrb	r2, [r3, #0]
 800aa8c:	183b      	adds	r3, r7, r0
 800aa8e:	3201      	adds	r2, #1
 800aa90:	701a      	strb	r2, [r3, #0]
      bit_pos &= 7;
 800aa92:	183b      	adds	r3, r7, r0
 800aa94:	183a      	adds	r2, r7, r0
 800aa96:	7812      	ldrb	r2, [r2, #0]
 800aa98:	2107      	movs	r1, #7
 800aa9a:	400a      	ands	r2, r1
 800aa9c:	701a      	strb	r2, [r3, #0]
      len--;
 800aa9e:	1dbb      	adds	r3, r7, #6
 800aaa0:	881a      	ldrh	r2, [r3, #0]
 800aaa2:	1dbb      	adds	r3, r7, #6
 800aaa4:	3a01      	subs	r2, #1
 800aaa6:	801a      	strh	r2, [r3, #0]
      if ( bit_pos == 0 )
 800aaa8:	183b      	adds	r3, r7, r0
 800aaaa:	781b      	ldrb	r3, [r3, #0]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d117      	bne.n	800aae0 <u8g2_ll_hvline_vertical_top_lsb+0x194>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800aab4:	001a      	movs	r2, r3
 800aab6:	69fb      	ldr	r3, [r7, #28]
 800aab8:	189b      	adds	r3, r3, r2
 800aaba:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	2292      	movs	r2, #146	; 0x92
 800aac0:	5c9b      	ldrb	r3, [r3, r2]
 800aac2:	2b01      	cmp	r3, #1
 800aac4:	d802      	bhi.n	800aacc <u8g2_ll_hvline_vertical_top_lsb+0x180>
	  or_mask  = 1;
 800aac6:	193b      	adds	r3, r7, r4
 800aac8:	2201      	movs	r2, #1
 800aaca:	701a      	strb	r2, [r3, #0]
	if ( u8g2->draw_color != 1 )
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	2292      	movs	r2, #146	; 0x92
 800aad0:	5c9b      	ldrb	r3, [r3, r2]
 800aad2:	2b01      	cmp	r3, #1
 800aad4:	d010      	beq.n	800aaf8 <u8g2_ll_hvline_vertical_top_lsb+0x1ac>
	  xor_mask = 1;
 800aad6:	2319      	movs	r3, #25
 800aad8:	18fb      	adds	r3, r7, r3
 800aada:	2201      	movs	r2, #1
 800aadc:	701a      	strb	r2, [r3, #0]
 800aade:	e00b      	b.n	800aaf8 <u8g2_ll_hvline_vertical_top_lsb+0x1ac>
	or_mask <<= 1;
 800aae0:	231a      	movs	r3, #26
 800aae2:	18fa      	adds	r2, r7, r3
 800aae4:	18fb      	adds	r3, r7, r3
 800aae6:	781b      	ldrb	r3, [r3, #0]
 800aae8:	18db      	adds	r3, r3, r3
 800aaea:	7013      	strb	r3, [r2, #0]
	xor_mask <<= 1;
 800aaec:	2319      	movs	r3, #25
 800aaee:	18fa      	adds	r2, r7, r3
 800aaf0:	18fb      	adds	r3, r7, r3
 800aaf2:	781b      	ldrb	r3, [r3, #0]
 800aaf4:	18db      	adds	r3, r3, r3
 800aaf6:	7013      	strb	r3, [r2, #0]
    } while( len != 0 );
 800aaf8:	1dbb      	adds	r3, r7, #6
 800aafa:	881b      	ldrh	r3, [r3, #0]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d1b0      	bne.n	800aa62 <u8g2_ll_hvline_vertical_top_lsb+0x116>
}
 800ab00:	46c0      	nop			; (mov r8, r8)
 800ab02:	46bd      	mov	sp, r7
 800ab04:	b009      	add	sp, #36	; 0x24
 800ab06:	bd90      	pop	{r4, r7, pc}

0800ab08 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b082      	sub	sp, #8
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2250      	movs	r2, #80	; 0x50
 800ab14:	2100      	movs	r1, #0
 800ab16:	5299      	strh	r1, [r3, r2]
  u8g2->clip_y0 = 0;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2254      	movs	r2, #84	; 0x54
 800ab1c:	2100      	movs	r1, #0
 800ab1e:	5299      	strh	r1, [r3, r2]
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2252      	movs	r2, #82	; 0x52
 800ab24:	2101      	movs	r1, #1
 800ab26:	4249      	negs	r1, r1
 800ab28:	5299      	strh	r1, [r3, r2]
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2256      	movs	r2, #86	; 0x56
 800ab2e:	2101      	movs	r1, #1
 800ab30:	4249      	negs	r1, r1
 800ab32:	5299      	strh	r1, [r3, r2]
  
  u8g2->cb->update_page_win(u8g2);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab38:	685b      	ldr	r3, [r3, #4]
 800ab3a:	687a      	ldr	r2, [r7, #4]
 800ab3c:	0010      	movs	r0, r2
 800ab3e:	4798      	blx	r3
}
 800ab40:	46c0      	nop			; (mov r8, r8)
 800ab42:	46bd      	mov	sp, r7
 800ab44:	b002      	add	sp, #8
 800ab46:	bd80      	pop	{r7, pc}

0800ab48 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b084      	sub	sp, #16
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	60f8      	str	r0, [r7, #12]
 800ab50:	60b9      	str	r1, [r7, #8]
 800ab52:	603b      	str	r3, [r7, #0]
 800ab54:	1dfb      	adds	r3, r7, #7
 800ab56:	701a      	strb	r2, [r3, #0]
  u8g2->font = NULL;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	683a      	ldr	r2, [r7, #0]
 800ab62:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	68ba      	ldr	r2, [r7, #8]
 800ab68:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	1dfa      	adds	r2, r7, #7
 800ab6e:	2138      	movs	r1, #56	; 0x38
 800ab70:	7812      	ldrb	r2, [r2, #0]
 800ab72:	545a      	strb	r2, [r3, r1]
  
  u8g2->tile_curr_row = 0;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	2239      	movs	r2, #57	; 0x39
 800ab78:	2100      	movs	r1, #0
 800ab7a:	5499      	strb	r1, [r3, r2]
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	226d      	movs	r2, #109	; 0x6d
 800ab80:	2100      	movs	r1, #0
 800ab82:	5499      	strb	r1, [r3, r2]
  u8g2->bitmap_transparency = 0;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	2291      	movs	r2, #145	; 0x91
 800ab88:	2100      	movs	r1, #0
 800ab8a:	5499      	strb	r1, [r3, r2]
  
  u8g2->draw_color = 1;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	2292      	movs	r2, #146	; 0x92
 800ab90:	2101      	movs	r1, #1
 800ab92:	5499      	strb	r1, [r3, r2]
  u8g2->is_auto_page_clear = 1;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	2293      	movs	r2, #147	; 0x93
 800ab98:	2101      	movs	r1, #1
 800ab9a:	5499      	strb	r1, [r3, r2]
  
  u8g2->cb = u8g2_cb;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	69ba      	ldr	r2, [r7, #24]
 800aba0:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	68fa      	ldr	r2, [r7, #12]
 800abaa:	0010      	movs	r0, r2
 800abac:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	0018      	movs	r0, r3
 800abb2:	f7ff ffa9 	bl	800ab08 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	0018      	movs	r0, r3
 800abba:	f7ff fb75 	bl	800a2a8 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	2270      	movs	r2, #112	; 0x70
 800abc2:	2100      	movs	r1, #0
 800abc4:	5499      	strb	r1, [r3, r2]
#endif
}
 800abc6:	46c0      	nop			; (mov r8, r8)
 800abc8:	46bd      	mov	sp, r7
 800abca:	b004      	add	sp, #16
 800abcc:	bd80      	pop	{r7, pc}

0800abce <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 800abce:	b580      	push	{r7, lr}
 800abd0:	b084      	sub	sp, #16
 800abd2:	af00      	add	r7, sp, #0
 800abd4:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2238      	movs	r2, #56	; 0x38
 800abe0:	5c9a      	ldrb	r2, [r3, r2]
 800abe2:	210e      	movs	r1, #14
 800abe4:	187b      	adds	r3, r7, r1
 800abe6:	801a      	strh	r2, [r3, #0]
  t *= 8;
 800abe8:	187b      	adds	r3, r7, r1
 800abea:	187a      	adds	r2, r7, r1
 800abec:	8812      	ldrh	r2, [r2, #0]
 800abee:	00d2      	lsls	r2, r2, #3
 800abf0:	801a      	strh	r2, [r3, #0]
  u8g2->pixel_buf_height = t;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	187a      	adds	r2, r7, r1
 800abf6:	8812      	ldrh	r2, [r2, #0]
 800abf8:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	7c1a      	ldrb	r2, [r3, #16]
 800abfe:	187b      	adds	r3, r7, r1
 800ac00:	801a      	strh	r2, [r3, #0]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 800ac02:	187b      	adds	r3, r7, r1
 800ac04:	187a      	adds	r2, r7, r1
 800ac06:	8812      	ldrh	r2, [r2, #0]
 800ac08:	00d2      	lsls	r2, r2, #3
 800ac0a:	801a      	strh	r2, [r3, #0]
  u8g2->pixel_buf_width = t;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	187a      	adds	r2, r7, r1
 800ac10:	8812      	ldrh	r2, [r2, #0]
 800ac12:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2239      	movs	r2, #57	; 0x39
 800ac18:	5c9a      	ldrb	r2, [r3, r2]
 800ac1a:	187b      	adds	r3, r7, r1
 800ac1c:	801a      	strh	r2, [r3, #0]
  t *= 8;
 800ac1e:	187b      	adds	r3, r7, r1
 800ac20:	0008      	movs	r0, r1
 800ac22:	187a      	adds	r2, r7, r1
 800ac24:	8812      	ldrh	r2, [r2, #0]
 800ac26:	00d2      	lsls	r2, r2, #3
 800ac28:	801a      	strh	r2, [r3, #0]
  u8g2->pixel_curr_row = t;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	183a      	adds	r2, r7, r0
 800ac2e:	8812      	ldrh	r2, [r2, #0]
 800ac30:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2238      	movs	r2, #56	; 0x38
 800ac36:	5c9a      	ldrb	r2, [r3, r2]
 800ac38:	183b      	adds	r3, r7, r0
 800ac3a:	801a      	strh	r2, [r3, #0]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 800ac3c:	183b      	adds	r3, r7, r0
 800ac3e:	881b      	ldrh	r3, [r3, #0]
 800ac40:	687a      	ldr	r2, [r7, #4]
 800ac42:	2139      	movs	r1, #57	; 0x39
 800ac44:	5c52      	ldrb	r2, [r2, r1]
 800ac46:	189b      	adds	r3, r3, r2
 800ac48:	68ba      	ldr	r2, [r7, #8]
 800ac4a:	7c52      	ldrb	r2, [r2, #17]
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	dd09      	ble.n	800ac64 <u8g2_update_dimension_common+0x96>
    t = display_info->tile_height - u8g2->tile_curr_row;
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	7c5b      	ldrb	r3, [r3, #17]
 800ac54:	b299      	uxth	r1, r3
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2239      	movs	r2, #57	; 0x39
 800ac5a:	5c9b      	ldrb	r3, [r3, r2]
 800ac5c:	b29a      	uxth	r2, r3
 800ac5e:	183b      	adds	r3, r7, r0
 800ac60:	1a8a      	subs	r2, r1, r2
 800ac62:	801a      	strh	r2, [r3, #0]
  t *= 8;
 800ac64:	200e      	movs	r0, #14
 800ac66:	183b      	adds	r3, r7, r0
 800ac68:	183a      	adds	r2, r7, r0
 800ac6a:	8812      	ldrh	r2, [r2, #0]
 800ac6c:	00d2      	lsls	r2, r2, #3
 800ac6e:	801a      	strh	r2, [r3, #0]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2240      	movs	r2, #64	; 0x40
 800ac78:	5299      	strh	r1, [r3, r2]
  u8g2->buf_y1 = u8g2->buf_y0;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2240      	movs	r2, #64	; 0x40
 800ac7e:	5a99      	ldrh	r1, [r3, r2]
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2242      	movs	r2, #66	; 0x42
 800ac84:	5299      	strh	r1, [r3, r2]
  u8g2->buf_y1 += t;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2242      	movs	r2, #66	; 0x42
 800ac8a:	5a9a      	ldrh	r2, [r3, r2]
 800ac8c:	183b      	adds	r3, r7, r0
 800ac8e:	881b      	ldrh	r3, [r3, #0]
 800ac90:	18d3      	adds	r3, r2, r3
 800ac92:	b299      	uxth	r1, r3
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2242      	movs	r2, #66	; 0x42
 800ac98:	5299      	strh	r1, [r3, r2]

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	8a99      	ldrh	r1, [r3, #20]
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2244      	movs	r2, #68	; 0x44
 800aca2:	5299      	strh	r1, [r3, r2]
  u8g2->height = display_info->pixel_height;
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	8ad9      	ldrh	r1, [r3, #22]
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2246      	movs	r2, #70	; 0x46
 800acac:	5299      	strh	r1, [r3, r2]
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 800acae:	46c0      	nop			; (mov r8, r8)
 800acb0:	46bd      	mov	sp, r7
 800acb2:	b004      	add	sp, #16
 800acb4:	bd80      	pop	{r7, pc}

0800acb6 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 800acb6:	b590      	push	{r4, r7, lr}
 800acb8:	b085      	sub	sp, #20
 800acba:	af02      	add	r7, sp, #8
 800acbc:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2250      	movs	r2, #80	; 0x50
 800acc2:	5a99      	ldrh	r1, [r3, r2]
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2254      	movs	r2, #84	; 0x54
 800acc8:	5a9a      	ldrh	r2, [r3, r2]
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2052      	movs	r0, #82	; 0x52
 800acce:	5a1c      	ldrh	r4, [r3, r0]
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2056      	movs	r0, #86	; 0x56
 800acd4:	5a1b      	ldrh	r3, [r3, r0]
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	9300      	str	r3, [sp, #0]
 800acda:	0023      	movs	r3, r4
 800acdc:	f7ff fcdc 	bl	800a698 <u8g2_IsIntersection>
 800ace0:	1e03      	subs	r3, r0, #0
 800ace2:	d104      	bne.n	800acee <u8g2_apply_clip_window+0x38>
  {
    u8g2->is_page_clip_window_intersection = 0;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	228c      	movs	r2, #140	; 0x8c
 800ace8:	2100      	movs	r1, #0
 800acea:	5499      	strb	r1, [r3, r2]
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 800acec:	e03b      	b.n	800ad66 <u8g2_apply_clip_window+0xb0>
    u8g2->is_page_clip_window_intersection = 1;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	228c      	movs	r2, #140	; 0x8c
 800acf2:	2101      	movs	r1, #1
 800acf4:	5499      	strb	r1, [r3, r2]
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2248      	movs	r2, #72	; 0x48
 800acfa:	5a9a      	ldrh	r2, [r3, r2]
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2150      	movs	r1, #80	; 0x50
 800ad00:	5a5b      	ldrh	r3, [r3, r1]
 800ad02:	429a      	cmp	r2, r3
 800ad04:	d205      	bcs.n	800ad12 <u8g2_apply_clip_window+0x5c>
      u8g2->user_x0 = u8g2->clip_x0;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2250      	movs	r2, #80	; 0x50
 800ad0a:	5a99      	ldrh	r1, [r3, r2]
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2248      	movs	r2, #72	; 0x48
 800ad10:	5299      	strh	r1, [r3, r2]
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	224a      	movs	r2, #74	; 0x4a
 800ad16:	5a9a      	ldrh	r2, [r3, r2]
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2152      	movs	r1, #82	; 0x52
 800ad1c:	5a5b      	ldrh	r3, [r3, r1]
 800ad1e:	429a      	cmp	r2, r3
 800ad20:	d905      	bls.n	800ad2e <u8g2_apply_clip_window+0x78>
      u8g2->user_x1 = u8g2->clip_x1;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2252      	movs	r2, #82	; 0x52
 800ad26:	5a99      	ldrh	r1, [r3, r2]
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	224a      	movs	r2, #74	; 0x4a
 800ad2c:	5299      	strh	r1, [r3, r2]
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	224c      	movs	r2, #76	; 0x4c
 800ad32:	5a9a      	ldrh	r2, [r3, r2]
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2154      	movs	r1, #84	; 0x54
 800ad38:	5a5b      	ldrh	r3, [r3, r1]
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	d205      	bcs.n	800ad4a <u8g2_apply_clip_window+0x94>
      u8g2->user_y0 = u8g2->clip_y0;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2254      	movs	r2, #84	; 0x54
 800ad42:	5a99      	ldrh	r1, [r3, r2]
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	224c      	movs	r2, #76	; 0x4c
 800ad48:	5299      	strh	r1, [r3, r2]
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	224e      	movs	r2, #78	; 0x4e
 800ad4e:	5a9a      	ldrh	r2, [r3, r2]
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2156      	movs	r1, #86	; 0x56
 800ad54:	5a5b      	ldrh	r3, [r3, r1]
 800ad56:	429a      	cmp	r2, r3
 800ad58:	d905      	bls.n	800ad66 <u8g2_apply_clip_window+0xb0>
      u8g2->user_y1 = u8g2->clip_y1;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2256      	movs	r2, #86	; 0x56
 800ad5e:	5a99      	ldrh	r1, [r3, r2]
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	224e      	movs	r2, #78	; 0x4e
 800ad64:	5299      	strh	r1, [r3, r2]
}
 800ad66:	46c0      	nop			; (mov r8, r8)
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	b003      	add	sp, #12
 800ad6c:	bd90      	pop	{r4, r7, pc}

0800ad6e <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 800ad6e:	b580      	push	{r7, lr}
 800ad70:	b082      	sub	sp, #8
 800ad72:	af00      	add	r7, sp, #0
 800ad74:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	0018      	movs	r0, r3
 800ad7a:	f7ff ff28 	bl	800abce <u8g2_update_dimension_common>
}
 800ad7e:	46c0      	nop			; (mov r8, r8)
 800ad80:	46bd      	mov	sp, r7
 800ad82:	b002      	add	sp, #8
 800ad84:	bd80      	pop	{r7, pc}

0800ad86 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 800ad86:	b580      	push	{r7, lr}
 800ad88:	b082      	sub	sp, #8
 800ad8a:	af00      	add	r7, sp, #0
 800ad8c:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2248      	movs	r2, #72	; 0x48
 800ad92:	2100      	movs	r1, #0
 800ad94:	5299      	strh	r1, [r3, r2]
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2244      	movs	r2, #68	; 0x44
 800ad9a:	5a99      	ldrh	r1, [r3, r2]
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	224a      	movs	r2, #74	; 0x4a
 800ada0:	5299      	strh	r1, [r3, r2]
  
  u8g2->user_y0 = u8g2->buf_y0;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2240      	movs	r2, #64	; 0x40
 800ada6:	5a99      	ldrh	r1, [r3, r2]
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	224c      	movs	r2, #76	; 0x4c
 800adac:	5299      	strh	r1, [r3, r2]
  u8g2->user_y1 = u8g2->buf_y1;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2242      	movs	r2, #66	; 0x42
 800adb2:	5a99      	ldrh	r1, [r3, r2]
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	224e      	movs	r2, #78	; 0x4e
 800adb8:	5299      	strh	r1, [r3, r2]
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	0018      	movs	r0, r3
 800adbe:	f7ff ff7a 	bl	800acb6 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 800adc2:	46c0      	nop			; (mov r8, r8)
 800adc4:	46bd      	mov	sp, r7
 800adc6:	b002      	add	sp, #8
 800adc8:	bd80      	pop	{r7, pc}

0800adca <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800adca:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adcc:	b087      	sub	sp, #28
 800adce:	af02      	add	r7, sp, #8
 800add0:	60f8      	str	r0, [r7, #12]
 800add2:	000c      	movs	r4, r1
 800add4:	0010      	movs	r0, r2
 800add6:	0019      	movs	r1, r3
 800add8:	250a      	movs	r5, #10
 800adda:	197b      	adds	r3, r7, r5
 800addc:	1c22      	adds	r2, r4, #0
 800adde:	801a      	strh	r2, [r3, #0]
 800ade0:	2608      	movs	r6, #8
 800ade2:	19bb      	adds	r3, r7, r6
 800ade4:	1c02      	adds	r2, r0, #0
 800ade6:	801a      	strh	r2, [r3, #0]
 800ade8:	1dbb      	adds	r3, r7, #6
 800adea:	1c0a      	adds	r2, r1, #0
 800adec:	801a      	strh	r2, [r3, #0]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 800adee:	1dbb      	adds	r3, r7, #6
 800adf0:	881c      	ldrh	r4, [r3, #0]
 800adf2:	19bb      	adds	r3, r7, r6
 800adf4:	881a      	ldrh	r2, [r3, #0]
 800adf6:	197b      	adds	r3, r7, r5
 800adf8:	8819      	ldrh	r1, [r3, #0]
 800adfa:	68f8      	ldr	r0, [r7, #12]
 800adfc:	2320      	movs	r3, #32
 800adfe:	2508      	movs	r5, #8
 800ae00:	195b      	adds	r3, r3, r5
 800ae02:	19db      	adds	r3, r3, r7
 800ae04:	781b      	ldrb	r3, [r3, #0]
 800ae06:	9300      	str	r3, [sp, #0]
 800ae08:	0023      	movs	r3, r4
 800ae0a:	f7ff faed 	bl	800a3e8 <u8g2_draw_hv_line_2dir>
}
 800ae0e:	46c0      	nop			; (mov r8, r8)
 800ae10:	46bd      	mov	sp, r7
 800ae12:	b005      	add	sp, #20
 800ae14:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ae16 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 800ae16:	b580      	push	{r7, lr}
 800ae18:	b082      	sub	sp, #8
 800ae1a:	af00      	add	r7, sp, #0
 800ae1c:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2226      	movs	r2, #38	; 0x26
 800ae22:	2100      	movs	r1, #0
 800ae24:	5499      	strb	r1, [r3, r2]
}
 800ae26:	46c0      	nop			; (mov r8, r8)
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	b002      	add	sp, #8
 800ae2c:	bd80      	pop	{r7, pc}
	...

0800ae30 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b082      	sub	sp, #8
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
 800ae38:	000a      	movs	r2, r1
 800ae3a:	1cfb      	adds	r3, r7, #3
 800ae3c:	701a      	strb	r2, [r3, #0]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 800ae3e:	1cfb      	adds	r3, r7, #3
 800ae40:	781b      	ldrb	r3, [r3, #0]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d003      	beq.n	800ae4e <u8x8_ascii_next+0x1e>
 800ae46:	1cfb      	adds	r3, r7, #3
 800ae48:	781b      	ldrb	r3, [r3, #0]
 800ae4a:	2b0a      	cmp	r3, #10
 800ae4c:	d101      	bne.n	800ae52 <u8x8_ascii_next+0x22>
    return 0x0ffff;	/* end of string detected*/
 800ae4e:	4b04      	ldr	r3, [pc, #16]	; (800ae60 <u8x8_ascii_next+0x30>)
 800ae50:	e002      	b.n	800ae58 <u8x8_ascii_next+0x28>
  return b;
 800ae52:	1cfb      	adds	r3, r7, #3
 800ae54:	781b      	ldrb	r3, [r3, #0]
 800ae56:	b29b      	uxth	r3, r3
}
 800ae58:	0018      	movs	r0, r3
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	b002      	add	sp, #8
 800ae5e:	bd80      	pop	{r7, pc}
 800ae60:	0000ffff 	.word	0x0000ffff

0800ae64 <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 800ae64:	b590      	push	{r4, r7, lr}
 800ae66:	b085      	sub	sp, #20
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	60f8      	str	r0, [r7, #12]
 800ae6c:	607a      	str	r2, [r7, #4]
 800ae6e:	200b      	movs	r0, #11
 800ae70:	183b      	adds	r3, r7, r0
 800ae72:	1c0a      	adds	r2, r1, #0
 800ae74:	701a      	strb	r2, [r3, #0]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	691c      	ldr	r4, [r3, #16]
 800ae7a:	6879      	ldr	r1, [r7, #4]
 800ae7c:	183b      	adds	r3, r7, r0
 800ae7e:	781a      	ldrb	r2, [r3, #0]
 800ae80:	68f8      	ldr	r0, [r7, #12]
 800ae82:	000b      	movs	r3, r1
 800ae84:	2117      	movs	r1, #23
 800ae86:	47a0      	blx	r4
 800ae88:	0003      	movs	r3, r0
}
 800ae8a:	0018      	movs	r0, r3
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	b005      	add	sp, #20
 800ae90:	bd90      	pop	{r4, r7, pc}

0800ae92 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 800ae92:	b580      	push	{r7, lr}
 800ae94:	b082      	sub	sp, #8
 800ae96:	af00      	add	r7, sp, #0
 800ae98:	6078      	str	r0, [r7, #4]
 800ae9a:	000a      	movs	r2, r1
 800ae9c:	1cfb      	adds	r3, r7, #3
 800ae9e:	701a      	strb	r2, [r3, #0]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 800aea0:	1cfa      	adds	r2, r7, #3
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2101      	movs	r1, #1
 800aea6:	0018      	movs	r0, r3
 800aea8:	f7ff ffdc 	bl	800ae64 <u8x8_byte_SendBytes>
 800aeac:	0003      	movs	r3, r0
}
 800aeae:	0018      	movs	r0, r3
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	b002      	add	sp, #8
 800aeb4:	bd80      	pop	{r7, pc}

0800aeb6 <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 800aeb6:	b590      	push	{r4, r7, lr}
 800aeb8:	b083      	sub	sp, #12
 800aeba:	af00      	add	r7, sp, #0
 800aebc:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	691c      	ldr	r4, [r3, #16]
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	2300      	movs	r3, #0
 800aec6:	2200      	movs	r2, #0
 800aec8:	2118      	movs	r1, #24
 800aeca:	47a0      	blx	r4
 800aecc:	0003      	movs	r3, r0
}
 800aece:	0018      	movs	r0, r3
 800aed0:	46bd      	mov	sp, r7
 800aed2:	b003      	add	sp, #12
 800aed4:	bd90      	pop	{r4, r7, pc}

0800aed6 <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 800aed6:	b590      	push	{r4, r7, lr}
 800aed8:	b083      	sub	sp, #12
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	691c      	ldr	r4, [r3, #16]
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	2300      	movs	r3, #0
 800aee6:	2200      	movs	r2, #0
 800aee8:	2119      	movs	r1, #25
 800aeea:	47a0      	blx	r4
 800aeec:	0003      	movs	r3, r0
}
 800aeee:	0018      	movs	r0, r3
 800aef0:	46bd      	mov	sp, r7
 800aef2:	b003      	add	sp, #12
 800aef4:	bd90      	pop	{r4, r7, pc}

0800aef6 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 800aef6:	b590      	push	{r4, r7, lr}
 800aef8:	b083      	sub	sp, #12
 800aefa:	af00      	add	r7, sp, #0
 800aefc:	6078      	str	r0, [r7, #4]
 800aefe:	000a      	movs	r2, r1
 800af00:	1cfb      	adds	r3, r7, #3
 800af02:	701a      	strb	r2, [r3, #0]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	68dc      	ldr	r4, [r3, #12]
 800af08:	1cfb      	adds	r3, r7, #3
 800af0a:	781a      	ldrb	r2, [r3, #0]
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	2300      	movs	r3, #0
 800af10:	2115      	movs	r1, #21
 800af12:	47a0      	blx	r4
 800af14:	0003      	movs	r3, r0
}
 800af16:	0018      	movs	r0, r3
 800af18:	46bd      	mov	sp, r7
 800af1a:	b003      	add	sp, #12
 800af1c:	bd90      	pop	{r4, r7, pc}

0800af1e <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 800af1e:	b590      	push	{r4, r7, lr}
 800af20:	b083      	sub	sp, #12
 800af22:	af00      	add	r7, sp, #0
 800af24:	6078      	str	r0, [r7, #4]
 800af26:	000a      	movs	r2, r1
 800af28:	1cfb      	adds	r3, r7, #3
 800af2a:	701a      	strb	r2, [r3, #0]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	68dc      	ldr	r4, [r3, #12]
 800af30:	1cfb      	adds	r3, r7, #3
 800af32:	781a      	ldrb	r2, [r3, #0]
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	2300      	movs	r3, #0
 800af38:	2116      	movs	r1, #22
 800af3a:	47a0      	blx	r4
 800af3c:	0003      	movs	r3, r0
}
 800af3e:	0018      	movs	r0, r3
 800af40:	46bd      	mov	sp, r7
 800af42:	b003      	add	sp, #12
 800af44:	bd90      	pop	{r4, r7, pc}

0800af46 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 800af46:	b590      	push	{r4, r7, lr}
 800af48:	b085      	sub	sp, #20
 800af4a:	af00      	add	r7, sp, #0
 800af4c:	60f8      	str	r0, [r7, #12]
 800af4e:	607a      	str	r2, [r7, #4]
 800af50:	200b      	movs	r0, #11
 800af52:	183b      	adds	r3, r7, r0
 800af54:	1c0a      	adds	r2, r1, #0
 800af56:	701a      	strb	r2, [r3, #0]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	68dc      	ldr	r4, [r3, #12]
 800af5c:	6879      	ldr	r1, [r7, #4]
 800af5e:	183b      	adds	r3, r7, r0
 800af60:	781a      	ldrb	r2, [r3, #0]
 800af62:	68f8      	ldr	r0, [r7, #12]
 800af64:	000b      	movs	r3, r1
 800af66:	2117      	movs	r1, #23
 800af68:	47a0      	blx	r4
 800af6a:	0003      	movs	r3, r0
}
 800af6c:	0018      	movs	r0, r3
 800af6e:	46bd      	mov	sp, r7
 800af70:	b005      	add	sp, #20
 800af72:	bd90      	pop	{r4, r7, pc}

0800af74 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 800af74:	b590      	push	{r4, r7, lr}
 800af76:	b083      	sub	sp, #12
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	68dc      	ldr	r4, [r3, #12]
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	2300      	movs	r3, #0
 800af84:	2200      	movs	r2, #0
 800af86:	2118      	movs	r1, #24
 800af88:	47a0      	blx	r4
 800af8a:	0003      	movs	r3, r0
}
 800af8c:	0018      	movs	r0, r3
 800af8e:	46bd      	mov	sp, r7
 800af90:	b003      	add	sp, #12
 800af92:	bd90      	pop	{r4, r7, pc}

0800af94 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 800af94:	b590      	push	{r4, r7, lr}
 800af96:	b083      	sub	sp, #12
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	68dc      	ldr	r4, [r3, #12]
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	2300      	movs	r3, #0
 800afa4:	2200      	movs	r2, #0
 800afa6:	2119      	movs	r1, #25
 800afa8:	47a0      	blx	r4
 800afaa:	0003      	movs	r3, r0
}
 800afac:	0018      	movs	r0, r3
 800afae:	46bd      	mov	sp, r7
 800afb0:	b003      	add	sp, #12
 800afb2:	bd90      	pop	{r4, r7, pc}

0800afb4 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 800afb4:	b590      	push	{r4, r7, lr}
 800afb6:	b085      	sub	sp, #20
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
 800afbc:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 800afbe:	210f      	movs	r1, #15
 800afc0:	187b      	adds	r3, r7, r1
 800afc2:	683a      	ldr	r2, [r7, #0]
 800afc4:	7812      	ldrb	r2, [r2, #0]
 800afc6:	701a      	strb	r2, [r3, #0]
    data++;
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	3301      	adds	r3, #1
 800afcc:	603b      	str	r3, [r7, #0]
    switch( cmd )
 800afce:	187b      	adds	r3, r7, r1
 800afd0:	781b      	ldrb	r3, [r3, #0]
 800afd2:	2bfe      	cmp	r3, #254	; 0xfe
 800afd4:	d038      	beq.n	800b048 <u8x8_cad_SendSequence+0x94>
 800afd6:	dc48      	bgt.n	800b06a <u8x8_cad_SendSequence+0xb6>
 800afd8:	2b19      	cmp	r3, #25
 800afda:	dc46      	bgt.n	800b06a <u8x8_cad_SendSequence+0xb6>
 800afdc:	2b18      	cmp	r3, #24
 800afde:	da29      	bge.n	800b034 <u8x8_cad_SendSequence+0x80>
 800afe0:	2b16      	cmp	r3, #22
 800afe2:	dc02      	bgt.n	800afea <u8x8_cad_SendSequence+0x36>
 800afe4:	2b15      	cmp	r3, #21
 800afe6:	da03      	bge.n	800aff0 <u8x8_cad_SendSequence+0x3c>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 800afe8:	e03f      	b.n	800b06a <u8x8_cad_SendSequence+0xb6>
    switch( cmd )
 800afea:	2b17      	cmp	r3, #23
 800afec:	d013      	beq.n	800b016 <u8x8_cad_SendSequence+0x62>
	return;
 800afee:	e03c      	b.n	800b06a <u8x8_cad_SendSequence+0xb6>
	  v = *data;
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	781a      	ldrb	r2, [r3, #0]
 800aff4:	210e      	movs	r1, #14
 800aff6:	187b      	adds	r3, r7, r1
 800aff8:	701a      	strb	r2, [r3, #0]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	68dc      	ldr	r4, [r3, #12]
 800affe:	187b      	adds	r3, r7, r1
 800b000:	781a      	ldrb	r2, [r3, #0]
 800b002:	230f      	movs	r3, #15
 800b004:	18fb      	adds	r3, r7, r3
 800b006:	7819      	ldrb	r1, [r3, #0]
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	2300      	movs	r3, #0
 800b00c:	47a0      	blx	r4
	  data++;
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	3301      	adds	r3, #1
 800b012:	603b      	str	r3, [r7, #0]
	  break;
 800b014:	e028      	b.n	800b068 <u8x8_cad_SendSequence+0xb4>
	  v = *data;
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	781a      	ldrb	r2, [r3, #0]
 800b01a:	210e      	movs	r1, #14
 800b01c:	187b      	adds	r3, r7, r1
 800b01e:	701a      	strb	r2, [r3, #0]
	  u8x8_cad_SendData(u8x8, 1, &v);
 800b020:	187a      	adds	r2, r7, r1
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2101      	movs	r1, #1
 800b026:	0018      	movs	r0, r3
 800b028:	f7ff ff8d 	bl	800af46 <u8x8_cad_SendData>
	  data++;
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	3301      	adds	r3, #1
 800b030:	603b      	str	r3, [r7, #0]
	  break;
 800b032:	e019      	b.n	800b068 <u8x8_cad_SendSequence+0xb4>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	68dc      	ldr	r4, [r3, #12]
 800b038:	230f      	movs	r3, #15
 800b03a:	18fb      	adds	r3, r7, r3
 800b03c:	7819      	ldrb	r1, [r3, #0]
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	2300      	movs	r3, #0
 800b042:	2200      	movs	r2, #0
 800b044:	47a0      	blx	r4
	  break;
 800b046:	e00f      	b.n	800b068 <u8x8_cad_SendSequence+0xb4>
	  v = *data;
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	781a      	ldrb	r2, [r3, #0]
 800b04c:	210e      	movs	r1, #14
 800b04e:	187b      	adds	r3, r7, r1
 800b050:	701a      	strb	r2, [r3, #0]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 800b052:	187b      	adds	r3, r7, r1
 800b054:	781a      	ldrb	r2, [r3, #0]
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2129      	movs	r1, #41	; 0x29
 800b05a:	0018      	movs	r0, r3
 800b05c:	f000 fa98 	bl	800b590 <u8x8_gpio_call>
	  data++;
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	3301      	adds	r3, #1
 800b064:	603b      	str	r3, [r7, #0]
	  break;
 800b066:	46c0      	nop			; (mov r8, r8)
    cmd = *data;
 800b068:	e7a9      	b.n	800afbe <u8x8_cad_SendSequence+0xa>
	return;
 800b06a:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800b06c:	46bd      	mov	sp, r7
 800b06e:	b005      	add	sp, #20
 800b070:	bd90      	pop	{r4, r7, pc}

0800b072 <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 800b072:	b5b0      	push	{r4, r5, r7, lr}
 800b074:	b084      	sub	sp, #16
 800b076:	af00      	add	r7, sp, #0
 800b078:	60f8      	str	r0, [r7, #12]
 800b07a:	607a      	str	r2, [r7, #4]
 800b07c:	250b      	movs	r5, #11
 800b07e:	197b      	adds	r3, r7, r5
 800b080:	1c0a      	adds	r2, r1, #0
 800b082:	701a      	strb	r2, [r3, #0]
    u8x8_byte_StartTransfer(u8x8);    
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	0018      	movs	r0, r3
 800b088:	f7ff ff15 	bl	800aeb6 <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	2140      	movs	r1, #64	; 0x40
 800b090:	0018      	movs	r0, r3
 800b092:	f7ff fefe 	bl	800ae92 <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	691c      	ldr	r4, [r3, #16]
 800b09a:	6879      	ldr	r1, [r7, #4]
 800b09c:	197b      	adds	r3, r7, r5
 800b09e:	781a      	ldrb	r2, [r3, #0]
 800b0a0:	68f8      	ldr	r0, [r7, #12]
 800b0a2:	000b      	movs	r3, r1
 800b0a4:	2117      	movs	r1, #23
 800b0a6:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	0018      	movs	r0, r3
 800b0ac:	f7ff ff13 	bl	800aed6 <u8x8_byte_EndTransfer>
}
 800b0b0:	46c0      	nop			; (mov r8, r8)
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	b004      	add	sp, #16
 800b0b6:	bdb0      	pop	{r4, r5, r7, pc}

0800b0b8 <u8x8_cad_ssd13xx_fast_i2c>:
}


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800b0b8:	b5b0      	push	{r4, r5, r7, lr}
 800b0ba:	b086      	sub	sp, #24
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	60f8      	str	r0, [r7, #12]
 800b0c0:	0008      	movs	r0, r1
 800b0c2:	0011      	movs	r1, r2
 800b0c4:	607b      	str	r3, [r7, #4]
 800b0c6:	240b      	movs	r4, #11
 800b0c8:	193b      	adds	r3, r7, r4
 800b0ca:	1c02      	adds	r2, r0, #0
 800b0cc:	701a      	strb	r2, [r3, #0]
 800b0ce:	230a      	movs	r3, #10
 800b0d0:	18fb      	adds	r3, r7, r3
 800b0d2:	1c0a      	adds	r2, r1, #0
 800b0d4:	701a      	strb	r2, [r3, #0]
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
 800b0d6:	193b      	adds	r3, r7, r4
 800b0d8:	781b      	ldrb	r3, [r3, #0]
 800b0da:	3b14      	subs	r3, #20
 800b0dc:	2b05      	cmp	r3, #5
 800b0de:	d900      	bls.n	800b0e2 <u8x8_cad_ssd13xx_fast_i2c+0x2a>
 800b0e0:	e07b      	b.n	800b1da <u8x8_cad_ssd13xx_fast_i2c+0x122>
 800b0e2:	009a      	lsls	r2, r3, #2
 800b0e4:	4b40      	ldr	r3, [pc, #256]	; (800b1e8 <u8x8_cad_ssd13xx_fast_i2c+0x130>)
 800b0e6:	18d3      	adds	r3, r2, r3
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	469f      	mov	pc, r3
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
 800b0ec:	4b3f      	ldr	r3, [pc, #252]	; (800b1ec <u8x8_cad_ssd13xx_fast_i2c+0x134>)
 800b0ee:	781b      	ldrb	r3, [r3, #0]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d003      	beq.n	800b0fc <u8x8_cad_ssd13xx_fast_i2c+0x44>
	 u8x8_byte_EndTransfer(u8x8); 
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	0018      	movs	r0, r3
 800b0f8:	f7ff feed 	bl	800aed6 <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	0018      	movs	r0, r3
 800b100:	f7ff fed9 	bl	800aeb6 <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	2100      	movs	r1, #0
 800b108:	0018      	movs	r0, r3
 800b10a:	f7ff fec2 	bl	800ae92 <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 800b10e:	230a      	movs	r3, #10
 800b110:	18fb      	adds	r3, r7, r3
 800b112:	781a      	ldrb	r2, [r3, #0]
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	0011      	movs	r1, r2
 800b118:	0018      	movs	r0, r3
 800b11a:	f7ff feba 	bl	800ae92 <u8x8_byte_SendByte>
      in_transfer = 1;
 800b11e:	4b33      	ldr	r3, [pc, #204]	; (800b1ec <u8x8_cad_ssd13xx_fast_i2c+0x134>)
 800b120:	2201      	movs	r2, #1
 800b122:	701a      	strb	r2, [r3, #0]
	//   u8x8_byte_StartTransfer(u8x8);
	//   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
 800b124:	e05b      	b.n	800b1de <u8x8_cad_ssd13xx_fast_i2c+0x126>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
 800b126:	230a      	movs	r3, #10
 800b128:	18fb      	adds	r3, r7, r3
 800b12a:	781a      	ldrb	r2, [r3, #0]
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	0011      	movs	r1, r2
 800b130:	0018      	movs	r0, r3
 800b132:	f7ff feae 	bl	800ae92 <u8x8_byte_SendByte>
      break;      
 800b136:	e052      	b.n	800b1de <u8x8_cad_ssd13xx_fast_i2c+0x126>
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
 800b138:	4b2c      	ldr	r3, [pc, #176]	; (800b1ec <u8x8_cad_ssd13xx_fast_i2c+0x134>)
 800b13a:	781b      	ldrb	r3, [r3, #0]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d003      	beq.n	800b148 <u8x8_cad_ssd13xx_fast_i2c+0x90>
	u8x8_byte_EndTransfer(u8x8); 
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	0018      	movs	r0, r3
 800b144:	f7ff fec7 	bl	800aed6 <u8x8_byte_EndTransfer>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 800b14c:	e00e      	b.n	800b16c <u8x8_cad_ssd13xx_fast_i2c+0xb4>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 800b14e:	697a      	ldr	r2, [r7, #20]
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	2118      	movs	r1, #24
 800b154:	0018      	movs	r0, r3
 800b156:	f7ff ff8c 	bl	800b072 <u8x8_i2c_data_transfer>
	arg_int-=24;
 800b15a:	220a      	movs	r2, #10
 800b15c:	18bb      	adds	r3, r7, r2
 800b15e:	18ba      	adds	r2, r7, r2
 800b160:	7812      	ldrb	r2, [r2, #0]
 800b162:	3a18      	subs	r2, #24
 800b164:	701a      	strb	r2, [r3, #0]
	p+=24;
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	3318      	adds	r3, #24
 800b16a:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 800b16c:	210a      	movs	r1, #10
 800b16e:	187b      	adds	r3, r7, r1
 800b170:	781b      	ldrb	r3, [r3, #0]
 800b172:	2b18      	cmp	r3, #24
 800b174:	d8eb      	bhi.n	800b14e <u8x8_cad_ssd13xx_fast_i2c+0x96>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 800b176:	697a      	ldr	r2, [r7, #20]
 800b178:	187b      	adds	r3, r7, r1
 800b17a:	7819      	ldrb	r1, [r3, #0]
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	0018      	movs	r0, r3
 800b180:	f7ff ff77 	bl	800b072 <u8x8_i2c_data_transfer>
      in_transfer = 0;
 800b184:	4b19      	ldr	r3, [pc, #100]	; (800b1ec <u8x8_cad_ssd13xx_fast_i2c+0x134>)
 800b186:	2200      	movs	r2, #0
 800b188:	701a      	strb	r2, [r3, #0]
      break;
 800b18a:	e028      	b.n	800b1de <u8x8_cad_ssd13xx_fast_i2c+0x126>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	2224      	movs	r2, #36	; 0x24
 800b190:	5c9b      	ldrb	r3, [r3, r2]
 800b192:	2bff      	cmp	r3, #255	; 0xff
 800b194:	d103      	bne.n	800b19e <u8x8_cad_ssd13xx_fast_i2c+0xe6>
	u8x8->i2c_address = 0x078;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	2224      	movs	r2, #36	; 0x24
 800b19a:	2178      	movs	r1, #120	; 0x78
 800b19c:	5499      	strb	r1, [r3, r2]
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	691c      	ldr	r4, [r3, #16]
 800b1a2:	687d      	ldr	r5, [r7, #4]
 800b1a4:	230a      	movs	r3, #10
 800b1a6:	18fb      	adds	r3, r7, r3
 800b1a8:	781a      	ldrb	r2, [r3, #0]
 800b1aa:	230b      	movs	r3, #11
 800b1ac:	18fb      	adds	r3, r7, r3
 800b1ae:	7819      	ldrb	r1, [r3, #0]
 800b1b0:	68f8      	ldr	r0, [r7, #12]
 800b1b2:	002b      	movs	r3, r5
 800b1b4:	47a0      	blx	r4
 800b1b6:	0003      	movs	r3, r0
 800b1b8:	e012      	b.n	800b1e0 <u8x8_cad_ssd13xx_fast_i2c+0x128>
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
 800b1ba:	4b0c      	ldr	r3, [pc, #48]	; (800b1ec <u8x8_cad_ssd13xx_fast_i2c+0x134>)
 800b1bc:	2200      	movs	r2, #0
 800b1be:	701a      	strb	r2, [r3, #0]
      break;
 800b1c0:	e00d      	b.n	800b1de <u8x8_cad_ssd13xx_fast_i2c+0x126>
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
 800b1c2:	4b0a      	ldr	r3, [pc, #40]	; (800b1ec <u8x8_cad_ssd13xx_fast_i2c+0x134>)
 800b1c4:	781b      	ldrb	r3, [r3, #0]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d003      	beq.n	800b1d2 <u8x8_cad_ssd13xx_fast_i2c+0x11a>
	u8x8_byte_EndTransfer(u8x8); 
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	0018      	movs	r0, r3
 800b1ce:	f7ff fe82 	bl	800aed6 <u8x8_byte_EndTransfer>
      in_transfer = 0;
 800b1d2:	4b06      	ldr	r3, [pc, #24]	; (800b1ec <u8x8_cad_ssd13xx_fast_i2c+0x134>)
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	701a      	strb	r2, [r3, #0]
      break;
 800b1d8:	e001      	b.n	800b1de <u8x8_cad_ssd13xx_fast_i2c+0x126>
    default:
      return 0;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	e000      	b.n	800b1e0 <u8x8_cad_ssd13xx_fast_i2c+0x128>
  }
  return 1;
 800b1de:	2301      	movs	r3, #1
}
 800b1e0:	0018      	movs	r0, r3
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	b006      	add	sp, #24
 800b1e6:	bdb0      	pop	{r4, r5, r7, pc}
 800b1e8:	08013928 	.word	0x08013928
 800b1ec:	20000694 	.word	0x20000694

0800b1f0 <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800b1f0:	b590      	push	{r4, r7, lr}
 800b1f2:	b087      	sub	sp, #28
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	60f8      	str	r0, [r7, #12]
 800b1f8:	0008      	movs	r0, r1
 800b1fa:	0011      	movs	r1, r2
 800b1fc:	607b      	str	r3, [r7, #4]
 800b1fe:	240b      	movs	r4, #11
 800b200:	193b      	adds	r3, r7, r4
 800b202:	1c02      	adds	r2, r0, #0
 800b204:	701a      	strb	r2, [r3, #0]
 800b206:	230a      	movs	r3, #10
 800b208:	18fb      	adds	r3, r7, r3
 800b20a:	1c0a      	adds	r2, r1, #0
 800b20c:	701a      	strb	r2, [r3, #0]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 800b20e:	193b      	adds	r3, r7, r4
 800b210:	781b      	ldrb	r3, [r3, #0]
 800b212:	2b0f      	cmp	r3, #15
 800b214:	d052      	beq.n	800b2bc <u8x8_d_ssd1306_sh1106_generic+0xcc>
 800b216:	dd00      	ble.n	800b21a <u8x8_d_ssd1306_sh1106_generic+0x2a>
 800b218:	e0ac      	b.n	800b374 <u8x8_d_ssd1306_sh1106_generic+0x184>
 800b21a:	2b0e      	cmp	r3, #14
 800b21c:	d038      	beq.n	800b290 <u8x8_d_ssd1306_sh1106_generic+0xa0>
 800b21e:	dd00      	ble.n	800b222 <u8x8_d_ssd1306_sh1106_generic+0x32>
 800b220:	e0a8      	b.n	800b374 <u8x8_d_ssd1306_sh1106_generic+0x184>
 800b222:	2b0b      	cmp	r3, #11
 800b224:	d002      	beq.n	800b22c <u8x8_d_ssd1306_sh1106_generic+0x3c>
 800b226:	2b0d      	cmp	r3, #13
 800b228:	d013      	beq.n	800b252 <u8x8_d_ssd1306_sh1106_generic+0x62>
 800b22a:	e0a3      	b.n	800b374 <u8x8_d_ssd1306_sh1106_generic+0x184>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 800b22c:	230a      	movs	r3, #10
 800b22e:	18fb      	adds	r3, r7, r3
 800b230:	781b      	ldrb	r3, [r3, #0]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d106      	bne.n	800b244 <u8x8_d_ssd1306_sh1106_generic+0x54>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 800b236:	4a53      	ldr	r2, [pc, #332]	; (800b384 <u8x8_d_ssd1306_sh1106_generic+0x194>)
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	0011      	movs	r1, r2
 800b23c:	0018      	movs	r0, r3
 800b23e:	f7ff feb9 	bl	800afb4 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 800b242:	e099      	b.n	800b378 <u8x8_d_ssd1306_sh1106_generic+0x188>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 800b244:	4a50      	ldr	r2, [pc, #320]	; (800b388 <u8x8_d_ssd1306_sh1106_generic+0x198>)
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	0011      	movs	r1, r2
 800b24a:	0018      	movs	r0, r3
 800b24c:	f7ff feb2 	bl	800afb4 <u8x8_cad_SendSequence>
      break;
 800b250:	e092      	b.n	800b378 <u8x8_d_ssd1306_sh1106_generic+0x188>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 800b252:	230a      	movs	r3, #10
 800b254:	18fb      	adds	r3, r7, r3
 800b256:	781b      	ldrb	r3, [r3, #0]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d10c      	bne.n	800b276 <u8x8_d_ssd1306_sh1106_generic+0x86>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 800b25c:	4a4b      	ldr	r2, [pc, #300]	; (800b38c <u8x8_d_ssd1306_sh1106_generic+0x19c>)
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	0011      	movs	r1, r2
 800b262:	0018      	movs	r0, r3
 800b264:	f7ff fea6 	bl	800afb4 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	7c99      	ldrb	r1, [r3, #18]
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	2222      	movs	r2, #34	; 0x22
 800b272:	5499      	strb	r1, [r3, r2]
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 800b274:	e080      	b.n	800b378 <u8x8_d_ssd1306_sh1106_generic+0x188>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 800b276:	4a46      	ldr	r2, [pc, #280]	; (800b390 <u8x8_d_ssd1306_sh1106_generic+0x1a0>)
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	0011      	movs	r1, r2
 800b27c:	0018      	movs	r0, r3
 800b27e:	f7ff fe99 	bl	800afb4 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	7cd9      	ldrb	r1, [r3, #19]
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	2222      	movs	r2, #34	; 0x22
 800b28c:	5499      	strb	r1, [r3, r2]
      break;
 800b28e:	e073      	b.n	800b378 <u8x8_d_ssd1306_sh1106_generic+0x188>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	0018      	movs	r0, r3
 800b294:	f7ff fe6e 	bl	800af74 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	2181      	movs	r1, #129	; 0x81
 800b29c:	0018      	movs	r0, r3
 800b29e:	f7ff fe2a 	bl	800aef6 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 800b2a2:	230a      	movs	r3, #10
 800b2a4:	18fb      	adds	r3, r7, r3
 800b2a6:	781a      	ldrb	r2, [r3, #0]
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	0011      	movs	r1, r2
 800b2ac:	0018      	movs	r0, r3
 800b2ae:	f7ff fe36 	bl	800af1e <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	0018      	movs	r0, r3
 800b2b6:	f7ff fe6d 	bl	800af94 <u8x8_cad_EndTransfer>
      break;
 800b2ba:	e05d      	b.n	800b378 <u8x8_d_ssd1306_sh1106_generic+0x188>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	0018      	movs	r0, r3
 800b2c0:	f7ff fe58 	bl	800af74 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 800b2c4:	2417      	movs	r4, #23
 800b2c6:	193b      	adds	r3, r7, r4
 800b2c8:	687a      	ldr	r2, [r7, #4]
 800b2ca:	7952      	ldrb	r2, [r2, #5]
 800b2cc:	701a      	strb	r2, [r3, #0]
      x *= 8;
 800b2ce:	193b      	adds	r3, r7, r4
 800b2d0:	193a      	adds	r2, r7, r4
 800b2d2:	7812      	ldrb	r2, [r2, #0]
 800b2d4:	00d2      	lsls	r2, r2, #3
 800b2d6:	701a      	strb	r2, [r3, #0]
      x += u8x8->x_offset;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	2222      	movs	r2, #34	; 0x22
 800b2dc:	5c99      	ldrb	r1, [r3, r2]
 800b2de:	193b      	adds	r3, r7, r4
 800b2e0:	193a      	adds	r2, r7, r4
 800b2e2:	7812      	ldrb	r2, [r2, #0]
 800b2e4:	188a      	adds	r2, r1, r2
 800b2e6:	701a      	strb	r2, [r3, #0]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	2140      	movs	r1, #64	; 0x40
 800b2ec:	0018      	movs	r0, r3
 800b2ee:	f7ff fe02 	bl	800aef6 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 800b2f2:	193b      	adds	r3, r7, r4
 800b2f4:	781b      	ldrb	r3, [r3, #0]
 800b2f6:	091b      	lsrs	r3, r3, #4
 800b2f8:	b2db      	uxtb	r3, r3
 800b2fa:	2210      	movs	r2, #16
 800b2fc:	4313      	orrs	r3, r2
 800b2fe:	b2da      	uxtb	r2, r3
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	0011      	movs	r1, r2
 800b304:	0018      	movs	r0, r3
 800b306:	f7ff fdf6 	bl	800aef6 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 800b30a:	193b      	adds	r3, r7, r4
 800b30c:	781b      	ldrb	r3, [r3, #0]
 800b30e:	220f      	movs	r2, #15
 800b310:	4013      	ands	r3, r2
 800b312:	b2da      	uxtb	r2, r3
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	0011      	movs	r1, r2
 800b318:	0018      	movs	r0, r3
 800b31a:	f7ff fe00 	bl	800af1e <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	799b      	ldrb	r3, [r3, #6]
 800b322:	2250      	movs	r2, #80	; 0x50
 800b324:	4252      	negs	r2, r2
 800b326:	4313      	orrs	r3, r2
 800b328:	b2da      	uxtb	r2, r3
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	0011      	movs	r1, r2
 800b32e:	0018      	movs	r0, r3
 800b330:	f7ff fdf5 	bl	800af1e <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 800b334:	2116      	movs	r1, #22
 800b336:	187b      	adds	r3, r7, r1
 800b338:	687a      	ldr	r2, [r7, #4]
 800b33a:	7912      	ldrb	r2, [r2, #4]
 800b33c:	701a      	strb	r2, [r3, #0]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 800b344:	187b      	adds	r3, r7, r1
 800b346:	781b      	ldrb	r3, [r3, #0]
 800b348:	00db      	lsls	r3, r3, #3
 800b34a:	b2d9      	uxtb	r1, r3
 800b34c:	693a      	ldr	r2, [r7, #16]
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	0018      	movs	r0, r3
 800b352:	f7ff fdf8 	bl	800af46 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 800b356:	210a      	movs	r1, #10
 800b358:	187b      	adds	r3, r7, r1
 800b35a:	781a      	ldrb	r2, [r3, #0]
 800b35c:	187b      	adds	r3, r7, r1
 800b35e:	3a01      	subs	r2, #1
 800b360:	701a      	strb	r2, [r3, #0]
      } while( arg_int > 0 );
 800b362:	187b      	adds	r3, r7, r1
 800b364:	781b      	ldrb	r3, [r3, #0]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d1e4      	bne.n	800b334 <u8x8_d_ssd1306_sh1106_generic+0x144>
      
      u8x8_cad_EndTransfer(u8x8);
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	0018      	movs	r0, r3
 800b36e:	f7ff fe11 	bl	800af94 <u8x8_cad_EndTransfer>
      break;
 800b372:	e001      	b.n	800b378 <u8x8_d_ssd1306_sh1106_generic+0x188>
    default:
      return 0;
 800b374:	2300      	movs	r3, #0
 800b376:	e000      	b.n	800b37a <u8x8_d_ssd1306_sh1106_generic+0x18a>
  }
  return 1;
 800b378:	2301      	movs	r3, #1
}
 800b37a:	0018      	movs	r0, r3
 800b37c:	46bd      	mov	sp, r7
 800b37e:	b007      	add	sp, #28
 800b380:	bd90      	pop	{r4, r7, pc}
 800b382:	46c0      	nop			; (mov r8, r8)
 800b384:	08013978 	.word	0x08013978
 800b388:	08013980 	.word	0x08013980
 800b38c:	08013988 	.word	0x08013988
 800b390:	08013990 	.word	0x08013990

0800b394 <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800b394:	b5b0      	push	{r4, r5, r7, lr}
 800b396:	b084      	sub	sp, #16
 800b398:	af00      	add	r7, sp, #0
 800b39a:	60f8      	str	r0, [r7, #12]
 800b39c:	0008      	movs	r0, r1
 800b39e:	0011      	movs	r1, r2
 800b3a0:	607b      	str	r3, [r7, #4]
 800b3a2:	250b      	movs	r5, #11
 800b3a4:	197b      	adds	r3, r7, r5
 800b3a6:	1c02      	adds	r2, r0, #0
 800b3a8:	701a      	strb	r2, [r3, #0]
 800b3aa:	200a      	movs	r0, #10
 800b3ac:	183b      	adds	r3, r7, r0
 800b3ae:	1c0a      	adds	r2, r1, #0
 800b3b0:	701a      	strb	r2, [r3, #0]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 800b3b2:	687c      	ldr	r4, [r7, #4]
 800b3b4:	183b      	adds	r3, r7, r0
 800b3b6:	781a      	ldrb	r2, [r3, #0]
 800b3b8:	197b      	adds	r3, r7, r5
 800b3ba:	7819      	ldrb	r1, [r3, #0]
 800b3bc:	68f8      	ldr	r0, [r7, #12]
 800b3be:	0023      	movs	r3, r4
 800b3c0:	f7ff ff16 	bl	800b1f0 <u8x8_d_ssd1306_sh1106_generic>
 800b3c4:	1e03      	subs	r3, r0, #0
 800b3c6:	d001      	beq.n	800b3cc <u8x8_d_ssd1306_128x64_noname+0x38>
    return 1;
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	e01b      	b.n	800b404 <u8x8_d_ssd1306_128x64_noname+0x70>
  
  switch(msg)
 800b3cc:	230b      	movs	r3, #11
 800b3ce:	18fb      	adds	r3, r7, r3
 800b3d0:	781b      	ldrb	r3, [r3, #0]
 800b3d2:	2b09      	cmp	r3, #9
 800b3d4:	d00c      	beq.n	800b3f0 <u8x8_d_ssd1306_128x64_noname+0x5c>
 800b3d6:	2b0a      	cmp	r3, #10
 800b3d8:	d111      	bne.n	800b3fe <u8x8_d_ssd1306_128x64_noname+0x6a>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	0018      	movs	r0, r3
 800b3de:	f000 f82b 	bl	800b438 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 800b3e2:	4a0a      	ldr	r2, [pc, #40]	; (800b40c <u8x8_d_ssd1306_128x64_noname+0x78>)
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	0011      	movs	r1, r2
 800b3e8:	0018      	movs	r0, r3
 800b3ea:	f7ff fde3 	bl	800afb4 <u8x8_cad_SendSequence>
      break;
 800b3ee:	e008      	b.n	800b402 <u8x8_d_ssd1306_128x64_noname+0x6e>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 800b3f0:	4a07      	ldr	r2, [pc, #28]	; (800b410 <u8x8_d_ssd1306_128x64_noname+0x7c>)
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	0011      	movs	r1, r2
 800b3f6:	0018      	movs	r0, r3
 800b3f8:	f000 f80c 	bl	800b414 <u8x8_d_helper_display_setup_memory>
      break;
 800b3fc:	e001      	b.n	800b402 <u8x8_d_ssd1306_128x64_noname+0x6e>
    default:
      return 0;
 800b3fe:	2300      	movs	r3, #0
 800b400:	e000      	b.n	800b404 <u8x8_d_ssd1306_128x64_noname+0x70>
  }
  return 1;
 800b402:	2301      	movs	r3, #1
}
 800b404:	0018      	movs	r0, r3
 800b406:	46bd      	mov	sp, r7
 800b408:	b004      	add	sp, #16
 800b40a:	bdb0      	pop	{r4, r5, r7, pc}
 800b40c:	08013940 	.word	0x08013940
 800b410:	08013998 	.word	0x08013998

0800b414 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b082      	sub	sp, #8
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
 800b41c:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	683a      	ldr	r2, [r7, #0]
 800b422:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	7c99      	ldrb	r1, [r3, #18]
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2222      	movs	r2, #34	; 0x22
 800b42e:	5499      	strb	r1, [r3, r2]
}
 800b430:	46c0      	nop			; (mov r8, r8)
 800b432:	46bd      	mov	sp, r7
 800b434:	b002      	add	sp, #8
 800b436:	bd80      	pop	{r7, pc}

0800b438 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 800b438:	b590      	push	{r4, r7, lr}
 800b43a:	b083      	sub	sp, #12
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	695c      	ldr	r4, [r3, #20]
 800b444:	6878      	ldr	r0, [r7, #4]
 800b446:	2300      	movs	r3, #0
 800b448:	2200      	movs	r2, #0
 800b44a:	2128      	movs	r1, #40	; 0x28
 800b44c:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	68dc      	ldr	r4, [r3, #12]
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	2300      	movs	r3, #0
 800b456:	2200      	movs	r2, #0
 800b458:	2114      	movs	r1, #20
 800b45a:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2201      	movs	r2, #1
 800b460:	214b      	movs	r1, #75	; 0x4b
 800b462:	0018      	movs	r0, r3
 800b464:	f000 f894 	bl	800b590 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	791a      	ldrb	r2, [r3, #4]
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2129      	movs	r1, #41	; 0x29
 800b472:	0018      	movs	r0, r3
 800b474:	f000 f88c 	bl	800b590 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2200      	movs	r2, #0
 800b47c:	214b      	movs	r1, #75	; 0x4b
 800b47e:	0018      	movs	r0, r3
 800b480:	f000 f886 	bl	800b590 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	791a      	ldrb	r2, [r3, #4]
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2129      	movs	r1, #41	; 0x29
 800b48e:	0018      	movs	r0, r3
 800b490:	f000 f87e 	bl	800b590 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2201      	movs	r2, #1
 800b498:	214b      	movs	r1, #75	; 0x4b
 800b49a:	0018      	movs	r0, r3
 800b49c:	f000 f878 	bl	800b590 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	795a      	ldrb	r2, [r3, #5]
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2129      	movs	r1, #41	; 0x29
 800b4aa:	0018      	movs	r0, r3
 800b4ac:	f000 f870 	bl	800b590 <u8x8_gpio_call>
}    
 800b4b0:	46c0      	nop			; (mov r8, r8)
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	b003      	add	sp, #12
 800b4b6:	bd90      	pop	{r4, r7, pc}

0800b4b8 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 800b4b8:	b590      	push	{r4, r7, lr}
 800b4ba:	b085      	sub	sp, #20
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
 800b4c0:	000c      	movs	r4, r1
 800b4c2:	0010      	movs	r0, r2
 800b4c4:	0019      	movs	r1, r3
 800b4c6:	1cfb      	adds	r3, r7, #3
 800b4c8:	1c22      	adds	r2, r4, #0
 800b4ca:	701a      	strb	r2, [r3, #0]
 800b4cc:	1cbb      	adds	r3, r7, #2
 800b4ce:	1c02      	adds	r2, r0, #0
 800b4d0:	701a      	strb	r2, [r3, #0]
 800b4d2:	1c7b      	adds	r3, r7, #1
 800b4d4:	1c0a      	adds	r2, r1, #0
 800b4d6:	701a      	strb	r2, [r3, #0]
  u8x8_tile_t tile;
  tile.x_pos = x;
 800b4d8:	2108      	movs	r1, #8
 800b4da:	187b      	adds	r3, r7, r1
 800b4dc:	1cfa      	adds	r2, r7, #3
 800b4de:	7812      	ldrb	r2, [r2, #0]
 800b4e0:	715a      	strb	r2, [r3, #5]
  tile.y_pos = y;
 800b4e2:	187b      	adds	r3, r7, r1
 800b4e4:	1cba      	adds	r2, r7, #2
 800b4e6:	7812      	ldrb	r2, [r2, #0]
 800b4e8:	719a      	strb	r2, [r3, #6]
  tile.cnt = cnt;
 800b4ea:	187b      	adds	r3, r7, r1
 800b4ec:	1c7a      	adds	r2, r7, #1
 800b4ee:	7812      	ldrb	r2, [r2, #0]
 800b4f0:	711a      	strb	r2, [r3, #4]
  tile.tile_ptr = tile_ptr;
 800b4f2:	187b      	adds	r3, r7, r1
 800b4f4:	6a3a      	ldr	r2, [r7, #32]
 800b4f6:	601a      	str	r2, [r3, #0]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	689c      	ldr	r4, [r3, #8]
 800b4fc:	187b      	adds	r3, r7, r1
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	2201      	movs	r2, #1
 800b502:	210f      	movs	r1, #15
 800b504:	47a0      	blx	r4
 800b506:	0003      	movs	r3, r0
}
 800b508:	0018      	movs	r0, r3
 800b50a:	46bd      	mov	sp, r7
 800b50c:	b005      	add	sp, #20
 800b50e:	bd90      	pop	{r4, r7, pc}

0800b510 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 800b510:	b590      	push	{r4, r7, lr}
 800b512:	b083      	sub	sp, #12
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	689c      	ldr	r4, [r3, #8]
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	2300      	movs	r3, #0
 800b520:	2200      	movs	r2, #0
 800b522:	2109      	movs	r1, #9
 800b524:	47a0      	blx	r4
}
 800b526:	46c0      	nop			; (mov r8, r8)
 800b528:	46bd      	mov	sp, r7
 800b52a:	b003      	add	sp, #12
 800b52c:	bd90      	pop	{r4, r7, pc}

0800b52e <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 800b52e:	b590      	push	{r4, r7, lr}
 800b530:	b083      	sub	sp, #12
 800b532:	af00      	add	r7, sp, #0
 800b534:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	689c      	ldr	r4, [r3, #8]
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	2300      	movs	r3, #0
 800b53e:	2200      	movs	r2, #0
 800b540:	210a      	movs	r1, #10
 800b542:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 800b544:	46c0      	nop			; (mov r8, r8)
 800b546:	46bd      	mov	sp, r7
 800b548:	b003      	add	sp, #12
 800b54a:	bd90      	pop	{r4, r7, pc}

0800b54c <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 800b54c:	b590      	push	{r4, r7, lr}
 800b54e:	b083      	sub	sp, #12
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
 800b554:	000a      	movs	r2, r1
 800b556:	1cfb      	adds	r3, r7, #3
 800b558:	701a      	strb	r2, [r3, #0]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	689c      	ldr	r4, [r3, #8]
 800b55e:	1cfb      	adds	r3, r7, #3
 800b560:	781a      	ldrb	r2, [r3, #0]
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	2300      	movs	r3, #0
 800b566:	210b      	movs	r1, #11
 800b568:	47a0      	blx	r4
}
 800b56a:	46c0      	nop			; (mov r8, r8)
 800b56c:	46bd      	mov	sp, r7
 800b56e:	b003      	add	sp, #12
 800b570:	bd90      	pop	{r4, r7, pc}

0800b572 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 800b572:	b590      	push	{r4, r7, lr}
 800b574:	b083      	sub	sp, #12
 800b576:	af00      	add	r7, sp, #0
 800b578:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	689c      	ldr	r4, [r3, #8]
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	2300      	movs	r3, #0
 800b582:	2200      	movs	r2, #0
 800b584:	2110      	movs	r1, #16
 800b586:	47a0      	blx	r4
}
 800b588:	46c0      	nop			; (mov r8, r8)
 800b58a:	46bd      	mov	sp, r7
 800b58c:	b003      	add	sp, #12
 800b58e:	bd90      	pop	{r4, r7, pc}

0800b590 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 800b590:	b590      	push	{r4, r7, lr}
 800b592:	b083      	sub	sp, #12
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
 800b598:	0008      	movs	r0, r1
 800b59a:	0011      	movs	r1, r2
 800b59c:	1cfb      	adds	r3, r7, #3
 800b59e:	1c02      	adds	r2, r0, #0
 800b5a0:	701a      	strb	r2, [r3, #0]
 800b5a2:	1cbb      	adds	r3, r7, #2
 800b5a4:	1c0a      	adds	r2, r1, #0
 800b5a6:	701a      	strb	r2, [r3, #0]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	695c      	ldr	r4, [r3, #20]
 800b5ac:	1cbb      	adds	r3, r7, #2
 800b5ae:	781a      	ldrb	r2, [r3, #0]
 800b5b0:	1cfb      	adds	r3, r7, #3
 800b5b2:	7819      	ldrb	r1, [r3, #0]
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	47a0      	blx	r4
}
 800b5ba:	46c0      	nop			; (mov r8, r8)
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	b003      	add	sp, #12
 800b5c0:	bd90      	pop	{r4, r7, pc}

0800b5c2 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 800b5c2:	b580      	push	{r7, lr}
 800b5c4:	b084      	sub	sp, #16
 800b5c6:	af00      	add	r7, sp, #0
 800b5c8:	60f8      	str	r0, [r7, #12]
 800b5ca:	0008      	movs	r0, r1
 800b5cc:	0011      	movs	r1, r2
 800b5ce:	607b      	str	r3, [r7, #4]
 800b5d0:	230b      	movs	r3, #11
 800b5d2:	18fb      	adds	r3, r7, r3
 800b5d4:	1c02      	adds	r2, r0, #0
 800b5d6:	701a      	strb	r2, [r3, #0]
 800b5d8:	230a      	movs	r3, #10
 800b5da:	18fb      	adds	r3, r7, r3
 800b5dc:	1c0a      	adds	r2, r1, #0
 800b5de:	701a      	strb	r2, [r3, #0]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 800b5e0:	2300      	movs	r3, #0
}
 800b5e2:	0018      	movs	r0, r3
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	b004      	add	sp, #16
 800b5e8:	bd80      	pop	{r7, pc}
	...

0800b5ec <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b082      	sub	sp, #8
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	4a10      	ldr	r2, [pc, #64]	; (800b640 <u8x8_SetupDefaults+0x54>)
 800b5fe:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	4a0f      	ldr	r2, [pc, #60]	; (800b640 <u8x8_SetupDefaults+0x54>)
 800b604:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	4a0d      	ldr	r2, [pc, #52]	; (800b640 <u8x8_SetupDefaults+0x54>)
 800b60a:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	4a0c      	ldr	r2, [pc, #48]	; (800b640 <u8x8_SetupDefaults+0x54>)
 800b610:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2223      	movs	r2, #35	; 0x23
 800b616:	2100      	movs	r1, #0
 800b618:	5499      	strb	r1, [r3, r2]
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2226      	movs	r2, #38	; 0x26
 800b61e:	2100      	movs	r1, #0
 800b620:	5499      	strb	r1, [r3, r2]
    u8x8->bus_clock = 0;		/* issue 769 */
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2200      	movs	r2, #0
 800b626:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2224      	movs	r2, #36	; 0x24
 800b62c:	21ff      	movs	r1, #255	; 0xff
 800b62e:	5499      	strb	r1, [r3, r2]
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2228      	movs	r2, #40	; 0x28
 800b634:	21ff      	movs	r1, #255	; 0xff
 800b636:	5499      	strb	r1, [r3, r2]
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 800b638:	46c0      	nop			; (mov r8, r8)
 800b63a:	46bd      	mov	sp, r7
 800b63c:	b002      	add	sp, #8
 800b63e:	bd80      	pop	{r7, pc}
 800b640:	0800b5c3 	.word	0x0800b5c3

0800b644 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b084      	sub	sp, #16
 800b648:	af00      	add	r7, sp, #0
 800b64a:	60f8      	str	r0, [r7, #12]
 800b64c:	60b9      	str	r1, [r7, #8]
 800b64e:	607a      	str	r2, [r7, #4]
 800b650:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	0018      	movs	r0, r3
 800b656:	f7ff ffc9 	bl	800b5ec <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	68ba      	ldr	r2, [r7, #8]
 800b65e:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	687a      	ldr	r2, [r7, #4]
 800b664:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	683a      	ldr	r2, [r7, #0]
 800b66a:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	69ba      	ldr	r2, [r7, #24]
 800b670:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	0018      	movs	r0, r3
 800b676:	f7ff ff4b 	bl	800b510 <u8x8_SetupMemory>
}
 800b67a:	46c0      	nop			; (mov r8, r8)
 800b67c:	46bd      	mov	sp, r7
 800b67e:	b004      	add	sp, #16
 800b680:	bd80      	pop	{r7, pc}
	...

0800b684 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b684:	b580      	push	{r7, lr}
 800b686:	b084      	sub	sp, #16
 800b688:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b68a:	f3ef 8305 	mrs	r3, IPSR
 800b68e:	60bb      	str	r3, [r7, #8]
  return(result);
 800b690:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b692:	2b00      	cmp	r3, #0
 800b694:	d109      	bne.n	800b6aa <osKernelInitialize+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b696:	f3ef 8310 	mrs	r3, PRIMASK
 800b69a:	607b      	str	r3, [r7, #4]
  return(result);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d007      	beq.n	800b6b2 <osKernelInitialize+0x2e>
 800b6a2:	4b0d      	ldr	r3, [pc, #52]	; (800b6d8 <osKernelInitialize+0x54>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	2b02      	cmp	r3, #2
 800b6a8:	d103      	bne.n	800b6b2 <osKernelInitialize+0x2e>
    stat = osErrorISR;
 800b6aa:	2306      	movs	r3, #6
 800b6ac:	425b      	negs	r3, r3
 800b6ae:	60fb      	str	r3, [r7, #12]
 800b6b0:	e00c      	b.n	800b6cc <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b6b2:	4b09      	ldr	r3, [pc, #36]	; (800b6d8 <osKernelInitialize+0x54>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d105      	bne.n	800b6c6 <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800b6ba:	4b07      	ldr	r3, [pc, #28]	; (800b6d8 <osKernelInitialize+0x54>)
 800b6bc:	2201      	movs	r2, #1
 800b6be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	60fb      	str	r3, [r7, #12]
 800b6c4:	e002      	b.n	800b6cc <osKernelInitialize+0x48>
    } else {
      stat = osError;
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	425b      	negs	r3, r3
 800b6ca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b6cc:	68fb      	ldr	r3, [r7, #12]
}
 800b6ce:	0018      	movs	r0, r3
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	b004      	add	sp, #16
 800b6d4:	bd80      	pop	{r7, pc}
 800b6d6:	46c0      	nop			; (mov r8, r8)
 800b6d8:	20000698 	.word	0x20000698

0800b6dc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b084      	sub	sp, #16
 800b6e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b6e2:	f3ef 8305 	mrs	r3, IPSR
 800b6e6:	60bb      	str	r3, [r7, #8]
  return(result);
 800b6e8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d109      	bne.n	800b702 <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b6ee:	f3ef 8310 	mrs	r3, PRIMASK
 800b6f2:	607b      	str	r3, [r7, #4]
  return(result);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d007      	beq.n	800b70a <osKernelStart+0x2e>
 800b6fa:	4b0e      	ldr	r3, [pc, #56]	; (800b734 <osKernelStart+0x58>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	2b02      	cmp	r3, #2
 800b700:	d103      	bne.n	800b70a <osKernelStart+0x2e>
    stat = osErrorISR;
 800b702:	2306      	movs	r3, #6
 800b704:	425b      	negs	r3, r3
 800b706:	60fb      	str	r3, [r7, #12]
 800b708:	e00e      	b.n	800b728 <osKernelStart+0x4c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b70a:	4b0a      	ldr	r3, [pc, #40]	; (800b734 <osKernelStart+0x58>)
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	2b01      	cmp	r3, #1
 800b710:	d107      	bne.n	800b722 <osKernelStart+0x46>
      KernelState = osKernelRunning;
 800b712:	4b08      	ldr	r3, [pc, #32]	; (800b734 <osKernelStart+0x58>)
 800b714:	2202      	movs	r2, #2
 800b716:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800b718:	f001 fe4e 	bl	800d3b8 <vTaskStartScheduler>
      stat = osOK;
 800b71c:	2300      	movs	r3, #0
 800b71e:	60fb      	str	r3, [r7, #12]
 800b720:	e002      	b.n	800b728 <osKernelStart+0x4c>
    } else {
      stat = osError;
 800b722:	2301      	movs	r3, #1
 800b724:	425b      	negs	r3, r3
 800b726:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b728:	68fb      	ldr	r3, [r7, #12]
}
 800b72a:	0018      	movs	r0, r3
 800b72c:	46bd      	mov	sp, r7
 800b72e:	b004      	add	sp, #16
 800b730:	bd80      	pop	{r7, pc}
 800b732:	46c0      	nop			; (mov r8, r8)
 800b734:	20000698 	.word	0x20000698

0800b738 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b738:	b5b0      	push	{r4, r5, r7, lr}
 800b73a:	b090      	sub	sp, #64	; 0x40
 800b73c:	af04      	add	r7, sp, #16
 800b73e:	60f8      	str	r0, [r7, #12]
 800b740:	60b9      	str	r1, [r7, #8]
 800b742:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b744:	2300      	movs	r3, #0
 800b746:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b748:	f3ef 8305 	mrs	r3, IPSR
 800b74c:	61fb      	str	r3, [r7, #28]
  return(result);
 800b74e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800b750:	2b00      	cmp	r3, #0
 800b752:	d000      	beq.n	800b756 <osThreadNew+0x1e>
 800b754:	e090      	b.n	800b878 <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b756:	f3ef 8310 	mrs	r3, PRIMASK
 800b75a:	61bb      	str	r3, [r7, #24]
  return(result);
 800b75c:	69bb      	ldr	r3, [r7, #24]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d004      	beq.n	800b76c <osThreadNew+0x34>
 800b762:	4b48      	ldr	r3, [pc, #288]	; (800b884 <osThreadNew+0x14c>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	2b02      	cmp	r3, #2
 800b768:	d100      	bne.n	800b76c <osThreadNew+0x34>
 800b76a:	e085      	b.n	800b878 <osThreadNew+0x140>
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d100      	bne.n	800b774 <osThreadNew+0x3c>
 800b772:	e081      	b.n	800b878 <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 800b774:	2340      	movs	r3, #64	; 0x40
 800b776:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800b778:	2318      	movs	r3, #24
 800b77a:	627b      	str	r3, [r7, #36]	; 0x24

    empty = '\0';
 800b77c:	2117      	movs	r1, #23
 800b77e:	187b      	adds	r3, r7, r1
 800b780:	2200      	movs	r2, #0
 800b782:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 800b784:	187b      	adds	r3, r7, r1
 800b786:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem   = -1;
 800b788:	2301      	movs	r3, #1
 800b78a:	425b      	negs	r3, r3
 800b78c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d044      	beq.n	800b81e <osThreadNew+0xe6>
      if (attr->name != NULL) {
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d002      	beq.n	800b7a2 <osThreadNew+0x6a>
        name = attr->name;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	699b      	ldr	r3, [r3, #24]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d002      	beq.n	800b7b0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	699b      	ldr	r3, [r3, #24]
 800b7ae:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d007      	beq.n	800b7c6 <osThreadNew+0x8e>
 800b7b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7b8:	2b38      	cmp	r3, #56	; 0x38
 800b7ba:	d804      	bhi.n	800b7c6 <osThreadNew+0x8e>
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	685b      	ldr	r3, [r3, #4]
 800b7c0:	2201      	movs	r2, #1
 800b7c2:	4013      	ands	r3, r2
 800b7c4:	d001      	beq.n	800b7ca <osThreadNew+0x92>
        return (NULL);
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	e057      	b.n	800b87a <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	695b      	ldr	r3, [r3, #20]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d003      	beq.n	800b7da <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	695b      	ldr	r3, [r3, #20]
 800b7d6:	089b      	lsrs	r3, r3, #2
 800b7d8:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	689b      	ldr	r3, [r3, #8]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d00e      	beq.n	800b800 <osThreadNew+0xc8>
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	68db      	ldr	r3, [r3, #12]
 800b7e6:	2bbb      	cmp	r3, #187	; 0xbb
 800b7e8:	d90a      	bls.n	800b800 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d006      	beq.n	800b800 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	695b      	ldr	r3, [r3, #20]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d002      	beq.n	800b800 <osThreadNew+0xc8>
        mem = 1;
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	623b      	str	r3, [r7, #32]
 800b7fe:	e010      	b.n	800b822 <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	689b      	ldr	r3, [r3, #8]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d10c      	bne.n	800b822 <osThreadNew+0xea>
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	68db      	ldr	r3, [r3, #12]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d108      	bne.n	800b822 <osThreadNew+0xea>
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	691b      	ldr	r3, [r3, #16]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d104      	bne.n	800b822 <osThreadNew+0xea>
          mem = 0;
 800b818:	2300      	movs	r3, #0
 800b81a:	623b      	str	r3, [r7, #32]
 800b81c:	e001      	b.n	800b822 <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 800b81e:	2300      	movs	r3, #0
 800b820:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800b822:	6a3b      	ldr	r3, [r7, #32]
 800b824:	2b01      	cmp	r3, #1
 800b826:	d112      	bne.n	800b84e <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b830:	68bd      	ldr	r5, [r7, #8]
 800b832:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800b834:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b836:	68f8      	ldr	r0, [r7, #12]
 800b838:	9302      	str	r3, [sp, #8]
 800b83a:	9201      	str	r2, [sp, #4]
 800b83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b83e:	9300      	str	r3, [sp, #0]
 800b840:	002b      	movs	r3, r5
 800b842:	0022      	movs	r2, r4
 800b844:	f001 fb1f 	bl	800ce86 <xTaskCreateStatic>
 800b848:	0003      	movs	r3, r0
 800b84a:	613b      	str	r3, [r7, #16]
 800b84c:	e014      	b.n	800b878 <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 800b84e:	6a3b      	ldr	r3, [r7, #32]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d111      	bne.n	800b878 <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b856:	b29a      	uxth	r2, r3
 800b858:	68bc      	ldr	r4, [r7, #8]
 800b85a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b85c:	68f8      	ldr	r0, [r7, #12]
 800b85e:	2310      	movs	r3, #16
 800b860:	18fb      	adds	r3, r7, r3
 800b862:	9301      	str	r3, [sp, #4]
 800b864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b866:	9300      	str	r3, [sp, #0]
 800b868:	0023      	movs	r3, r4
 800b86a:	f001 fb4f 	bl	800cf0c <xTaskCreate>
 800b86e:	0003      	movs	r3, r0
 800b870:	2b01      	cmp	r3, #1
 800b872:	d001      	beq.n	800b878 <osThreadNew+0x140>
          hTask = NULL;
 800b874:	2300      	movs	r3, #0
 800b876:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b878:	693b      	ldr	r3, [r7, #16]
}
 800b87a:	0018      	movs	r0, r3
 800b87c:	46bd      	mov	sp, r7
 800b87e:	b00c      	add	sp, #48	; 0x30
 800b880:	bdb0      	pop	{r4, r5, r7, pc}
 800b882:	46c0      	nop			; (mov r8, r8)
 800b884:	20000698 	.word	0x20000698

0800b888 <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 800b888:	b580      	push	{r7, lr}
 800b88a:	b086      	sub	sp, #24
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b894:	f3ef 8305 	mrs	r3, IPSR
 800b898:	60fb      	str	r3, [r7, #12]
  return(result);
 800b89a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d109      	bne.n	800b8b4 <osThreadSuspend+0x2c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b8a0:	f3ef 8310 	mrs	r3, PRIMASK
 800b8a4:	60bb      	str	r3, [r7, #8]
  return(result);
 800b8a6:	68bb      	ldr	r3, [r7, #8]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d007      	beq.n	800b8bc <osThreadSuspend+0x34>
 800b8ac:	4b0c      	ldr	r3, [pc, #48]	; (800b8e0 <osThreadSuspend+0x58>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	2b02      	cmp	r3, #2
 800b8b2:	d103      	bne.n	800b8bc <osThreadSuspend+0x34>
    stat = osErrorISR;
 800b8b4:	2306      	movs	r3, #6
 800b8b6:	425b      	negs	r3, r3
 800b8b8:	617b      	str	r3, [r7, #20]
 800b8ba:	e00c      	b.n	800b8d6 <osThreadSuspend+0x4e>
  }
  else if (hTask == NULL) {
 800b8bc:	693b      	ldr	r3, [r7, #16]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d103      	bne.n	800b8ca <osThreadSuspend+0x42>
    stat = osErrorParameter;
 800b8c2:	2304      	movs	r3, #4
 800b8c4:	425b      	negs	r3, r3
 800b8c6:	617b      	str	r3, [r7, #20]
 800b8c8:	e005      	b.n	800b8d6 <osThreadSuspend+0x4e>
  }
  else {
    stat = osOK;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 800b8ce:	693b      	ldr	r3, [r7, #16]
 800b8d0:	0018      	movs	r0, r3
 800b8d2:	f001 fc8d 	bl	800d1f0 <vTaskSuspend>
  }

  return (stat);
 800b8d6:	697b      	ldr	r3, [r7, #20]
}
 800b8d8:	0018      	movs	r0, r3
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	b006      	add	sp, #24
 800b8de:	bd80      	pop	{r7, pc}
 800b8e0:	20000698 	.word	0x20000698

0800b8e4 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b086      	sub	sp, #24
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b8f0:	f3ef 8305 	mrs	r3, IPSR
 800b8f4:	60fb      	str	r3, [r7, #12]
  return(result);
 800b8f6:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d109      	bne.n	800b910 <osThreadResume+0x2c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b8fc:	f3ef 8310 	mrs	r3, PRIMASK
 800b900:	60bb      	str	r3, [r7, #8]
  return(result);
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d007      	beq.n	800b918 <osThreadResume+0x34>
 800b908:	4b0c      	ldr	r3, [pc, #48]	; (800b93c <osThreadResume+0x58>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	2b02      	cmp	r3, #2
 800b90e:	d103      	bne.n	800b918 <osThreadResume+0x34>
    stat = osErrorISR;
 800b910:	2306      	movs	r3, #6
 800b912:	425b      	negs	r3, r3
 800b914:	617b      	str	r3, [r7, #20]
 800b916:	e00c      	b.n	800b932 <osThreadResume+0x4e>
  }
  else if (hTask == NULL) {
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d103      	bne.n	800b926 <osThreadResume+0x42>
    stat = osErrorParameter;
 800b91e:	2304      	movs	r3, #4
 800b920:	425b      	negs	r3, r3
 800b922:	617b      	str	r3, [r7, #20]
 800b924:	e005      	b.n	800b932 <osThreadResume+0x4e>
  }
  else {
    stat = osOK;
 800b926:	2300      	movs	r3, #0
 800b928:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 800b92a:	693b      	ldr	r3, [r7, #16]
 800b92c:	0018      	movs	r0, r3
 800b92e:	f001 fcf5 	bl	800d31c <vTaskResume>
  }

  return (stat);
 800b932:	697b      	ldr	r3, [r7, #20]
}
 800b934:	0018      	movs	r0, r3
 800b936:	46bd      	mov	sp, r7
 800b938:	b006      	add	sp, #24
 800b93a:	bd80      	pop	{r7, pc}
 800b93c:	20000698 	.word	0x20000698

0800b940 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800b940:	b580      	push	{r7, lr}
 800b942:	b086      	sub	sp, #24
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b948:	f3ef 8305 	mrs	r3, IPSR
 800b94c:	613b      	str	r3, [r7, #16]
  return(result);
 800b94e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b950:	2b00      	cmp	r3, #0
 800b952:	d109      	bne.n	800b968 <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b954:	f3ef 8310 	mrs	r3, PRIMASK
 800b958:	60fb      	str	r3, [r7, #12]
  return(result);
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d007      	beq.n	800b970 <osDelay+0x30>
 800b960:	4b0a      	ldr	r3, [pc, #40]	; (800b98c <osDelay+0x4c>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	2b02      	cmp	r3, #2
 800b966:	d103      	bne.n	800b970 <osDelay+0x30>
    stat = osErrorISR;
 800b968:	2306      	movs	r3, #6
 800b96a:	425b      	negs	r3, r3
 800b96c:	617b      	str	r3, [r7, #20]
 800b96e:	e008      	b.n	800b982 <osDelay+0x42>
  }
  else {
    stat = osOK;
 800b970:	2300      	movs	r3, #0
 800b972:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d003      	beq.n	800b982 <osDelay+0x42>
      vTaskDelay(ticks);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	0018      	movs	r0, r3
 800b97e:	f001 fc11 	bl	800d1a4 <vTaskDelay>
    }
  }

  return (stat);
 800b982:	697b      	ldr	r3, [r7, #20]
}
 800b984:	0018      	movs	r0, r3
 800b986:	46bd      	mov	sp, r7
 800b988:	b006      	add	sp, #24
 800b98a:	bd80      	pop	{r7, pc}
 800b98c:	20000698 	.word	0x20000698

0800b990 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b990:	b580      	push	{r7, lr}
 800b992:	b08c      	sub	sp, #48	; 0x30
 800b994:	af02      	add	r7, sp, #8
 800b996:	60f8      	str	r0, [r7, #12]
 800b998:	60b9      	str	r1, [r7, #8]
 800b99a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800b99c:	2300      	movs	r3, #0
 800b99e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b9a0:	f3ef 8305 	mrs	r3, IPSR
 800b9a4:	61bb      	str	r3, [r7, #24]
  return(result);
 800b9a6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d000      	beq.n	800b9ae <osSemaphoreNew+0x1e>
 800b9ac:	e08a      	b.n	800bac4 <osSemaphoreNew+0x134>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b9ae:	f3ef 8310 	mrs	r3, PRIMASK
 800b9b2:	617b      	str	r3, [r7, #20]
  return(result);
 800b9b4:	697b      	ldr	r3, [r7, #20]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d004      	beq.n	800b9c4 <osSemaphoreNew+0x34>
 800b9ba:	4b45      	ldr	r3, [pc, #276]	; (800bad0 <osSemaphoreNew+0x140>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	2b02      	cmp	r3, #2
 800b9c0:	d100      	bne.n	800b9c4 <osSemaphoreNew+0x34>
 800b9c2:	e07f      	b.n	800bac4 <osSemaphoreNew+0x134>
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d100      	bne.n	800b9cc <osSemaphoreNew+0x3c>
 800b9ca:	e07b      	b.n	800bac4 <osSemaphoreNew+0x134>
 800b9cc:	68ba      	ldr	r2, [r7, #8]
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	429a      	cmp	r2, r3
 800b9d2:	d900      	bls.n	800b9d6 <osSemaphoreNew+0x46>
 800b9d4:	e076      	b.n	800bac4 <osSemaphoreNew+0x134>
    mem = -1;
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	425b      	negs	r3, r3
 800b9da:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d015      	beq.n	800ba0e <osSemaphoreNew+0x7e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	689b      	ldr	r3, [r3, #8]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d006      	beq.n	800b9f8 <osSemaphoreNew+0x68>
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	68db      	ldr	r3, [r3, #12]
 800b9ee:	2b4f      	cmp	r3, #79	; 0x4f
 800b9f0:	d902      	bls.n	800b9f8 <osSemaphoreNew+0x68>
        mem = 1;
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	623b      	str	r3, [r7, #32]
 800b9f6:	e00c      	b.n	800ba12 <osSemaphoreNew+0x82>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	689b      	ldr	r3, [r3, #8]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d108      	bne.n	800ba12 <osSemaphoreNew+0x82>
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	68db      	ldr	r3, [r3, #12]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d104      	bne.n	800ba12 <osSemaphoreNew+0x82>
          mem = 0;
 800ba08:	2300      	movs	r3, #0
 800ba0a:	623b      	str	r3, [r7, #32]
 800ba0c:	e001      	b.n	800ba12 <osSemaphoreNew+0x82>
        }
      }
    }
    else {
      mem = 0;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800ba12:	6a3b      	ldr	r3, [r7, #32]
 800ba14:	3301      	adds	r3, #1
 800ba16:	d055      	beq.n	800bac4 <osSemaphoreNew+0x134>
      if (max_count == 1U) {
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	2b01      	cmp	r3, #1
 800ba1c:	d12b      	bne.n	800ba76 <osSemaphoreNew+0xe6>
        if (mem == 1) {
 800ba1e:	6a3b      	ldr	r3, [r7, #32]
 800ba20:	2b01      	cmp	r3, #1
 800ba22:	d10b      	bne.n	800ba3c <osSemaphoreNew+0xac>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	689b      	ldr	r3, [r3, #8]
 800ba28:	2203      	movs	r2, #3
 800ba2a:	9200      	str	r2, [sp, #0]
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	2100      	movs	r1, #0
 800ba30:	2001      	movs	r0, #1
 800ba32:	f000 fbb0 	bl	800c196 <xQueueGenericCreateStatic>
 800ba36:	0003      	movs	r3, r0
 800ba38:	627b      	str	r3, [r7, #36]	; 0x24
 800ba3a:	e006      	b.n	800ba4a <osSemaphoreNew+0xba>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800ba3c:	2203      	movs	r2, #3
 800ba3e:	2100      	movs	r1, #0
 800ba40:	2001      	movs	r0, #1
 800ba42:	f000 fbf3 	bl	800c22c <xQueueGenericCreate>
 800ba46:	0003      	movs	r3, r0
 800ba48:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800ba4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d027      	beq.n	800baa0 <osSemaphoreNew+0x110>
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d024      	beq.n	800baa0 <osSemaphoreNew+0x110>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ba56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba58:	2300      	movs	r3, #0
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	2100      	movs	r1, #0
 800ba5e:	f000 fc8b 	bl	800c378 <xQueueGenericSend>
 800ba62:	0003      	movs	r3, r0
 800ba64:	2b01      	cmp	r3, #1
 800ba66:	d01b      	beq.n	800baa0 <osSemaphoreNew+0x110>
            vSemaphoreDelete (hSemaphore);
 800ba68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba6a:	0018      	movs	r0, r3
 800ba6c:	f001 f836 	bl	800cadc <vQueueDelete>
            hSemaphore = NULL;
 800ba70:	2300      	movs	r3, #0
 800ba72:	627b      	str	r3, [r7, #36]	; 0x24
 800ba74:	e014      	b.n	800baa0 <osSemaphoreNew+0x110>
          }
        }
      }
      else {
        if (mem == 1) {
 800ba76:	6a3b      	ldr	r3, [r7, #32]
 800ba78:	2b01      	cmp	r3, #1
 800ba7a:	d109      	bne.n	800ba90 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	689a      	ldr	r2, [r3, #8]
 800ba80:	68b9      	ldr	r1, [r7, #8]
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	0018      	movs	r0, r3
 800ba86:	f000 fc2e 	bl	800c2e6 <xQueueCreateCountingSemaphoreStatic>
 800ba8a:	0003      	movs	r3, r0
 800ba8c:	627b      	str	r3, [r7, #36]	; 0x24
 800ba8e:	e007      	b.n	800baa0 <osSemaphoreNew+0x110>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800ba90:	68ba      	ldr	r2, [r7, #8]
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	0011      	movs	r1, r2
 800ba96:	0018      	movs	r0, r3
 800ba98:	f000 fc4b 	bl	800c332 <xQueueCreateCountingSemaphore>
 800ba9c:	0003      	movs	r3, r0
 800ba9e:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800baa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d00e      	beq.n	800bac4 <osSemaphoreNew+0x134>
        if (attr != NULL) {
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d003      	beq.n	800bab4 <osSemaphoreNew+0x124>
          name = attr->name;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	61fb      	str	r3, [r7, #28]
 800bab2:	e001      	b.n	800bab8 <osSemaphoreNew+0x128>
        } else {
          name = NULL;
 800bab4:	2300      	movs	r3, #0
 800bab6:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800bab8:	69fa      	ldr	r2, [r7, #28]
 800baba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800babc:	0011      	movs	r1, r2
 800babe:	0018      	movs	r0, r3
 800bac0:	f001 f95c 	bl	800cd7c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800bac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bac6:	0018      	movs	r0, r3
 800bac8:	46bd      	mov	sp, r7
 800baca:	b00a      	add	sp, #40	; 0x28
 800bacc:	bd80      	pop	{r7, pc}
 800bace:	46c0      	nop			; (mov r8, r8)
 800bad0:	20000698 	.word	0x20000698

0800bad4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b088      	sub	sp, #32
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
 800badc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800bae2:	2300      	movs	r3, #0
 800bae4:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800bae6:	69bb      	ldr	r3, [r7, #24]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d103      	bne.n	800baf4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800baec:	2304      	movs	r3, #4
 800baee:	425b      	negs	r3, r3
 800baf0:	61fb      	str	r3, [r7, #28]
 800baf2:	e043      	b.n	800bb7c <osSemaphoreAcquire+0xa8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800baf4:	f3ef 8305 	mrs	r3, IPSR
 800baf8:	617b      	str	r3, [r7, #20]
  return(result);
 800bafa:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d109      	bne.n	800bb14 <osSemaphoreAcquire+0x40>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bb00:	f3ef 8310 	mrs	r3, PRIMASK
 800bb04:	613b      	str	r3, [r7, #16]
  return(result);
 800bb06:	693b      	ldr	r3, [r7, #16]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d022      	beq.n	800bb52 <osSemaphoreAcquire+0x7e>
 800bb0c:	4b1e      	ldr	r3, [pc, #120]	; (800bb88 <osSemaphoreAcquire+0xb4>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	2b02      	cmp	r3, #2
 800bb12:	d11e      	bne.n	800bb52 <osSemaphoreAcquire+0x7e>
    if (timeout != 0U) {
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d003      	beq.n	800bb22 <osSemaphoreAcquire+0x4e>
      stat = osErrorParameter;
 800bb1a:	2304      	movs	r3, #4
 800bb1c:	425b      	negs	r3, r3
 800bb1e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800bb20:	e02b      	b.n	800bb7a <osSemaphoreAcquire+0xa6>
    }
    else {
      yield = pdFALSE;
 800bb22:	2300      	movs	r3, #0
 800bb24:	60fb      	str	r3, [r7, #12]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800bb26:	230c      	movs	r3, #12
 800bb28:	18fa      	adds	r2, r7, r3
 800bb2a:	69bb      	ldr	r3, [r7, #24]
 800bb2c:	2100      	movs	r1, #0
 800bb2e:	0018      	movs	r0, r3
 800bb30:	f000 ff4b 	bl	800c9ca <xQueueReceiveFromISR>
 800bb34:	0003      	movs	r3, r0
 800bb36:	2b01      	cmp	r3, #1
 800bb38:	d003      	beq.n	800bb42 <osSemaphoreAcquire+0x6e>
        stat = osErrorResource;
 800bb3a:	2303      	movs	r3, #3
 800bb3c:	425b      	negs	r3, r3
 800bb3e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800bb40:	e01b      	b.n	800bb7a <osSemaphoreAcquire+0xa6>
      } else {
        portYIELD_FROM_ISR (yield);
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d018      	beq.n	800bb7a <osSemaphoreAcquire+0xa6>
 800bb48:	4b10      	ldr	r3, [pc, #64]	; (800bb8c <osSemaphoreAcquire+0xb8>)
 800bb4a:	2280      	movs	r2, #128	; 0x80
 800bb4c:	0552      	lsls	r2, r2, #21
 800bb4e:	601a      	str	r2, [r3, #0]
    if (timeout != 0U) {
 800bb50:	e013      	b.n	800bb7a <osSemaphoreAcquire+0xa6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800bb52:	683a      	ldr	r2, [r7, #0]
 800bb54:	69bb      	ldr	r3, [r7, #24]
 800bb56:	0011      	movs	r1, r2
 800bb58:	0018      	movs	r0, r3
 800bb5a:	f000 fe5c 	bl	800c816 <xQueueSemaphoreTake>
 800bb5e:	0003      	movs	r3, r0
 800bb60:	2b01      	cmp	r3, #1
 800bb62:	d00b      	beq.n	800bb7c <osSemaphoreAcquire+0xa8>
      if (timeout != 0U) {
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d003      	beq.n	800bb72 <osSemaphoreAcquire+0x9e>
        stat = osErrorTimeout;
 800bb6a:	2302      	movs	r3, #2
 800bb6c:	425b      	negs	r3, r3
 800bb6e:	61fb      	str	r3, [r7, #28]
 800bb70:	e004      	b.n	800bb7c <osSemaphoreAcquire+0xa8>
      } else {
        stat = osErrorResource;
 800bb72:	2303      	movs	r3, #3
 800bb74:	425b      	negs	r3, r3
 800bb76:	61fb      	str	r3, [r7, #28]
 800bb78:	e000      	b.n	800bb7c <osSemaphoreAcquire+0xa8>
    if (timeout != 0U) {
 800bb7a:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  return (stat);
 800bb7c:	69fb      	ldr	r3, [r7, #28]
}
 800bb7e:	0018      	movs	r0, r3
 800bb80:	46bd      	mov	sp, r7
 800bb82:	b008      	add	sp, #32
 800bb84:	bd80      	pop	{r7, pc}
 800bb86:	46c0      	nop			; (mov r8, r8)
 800bb88:	20000698 	.word	0x20000698
 800bb8c:	e000ed04 	.word	0xe000ed04

0800bb90 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b088      	sub	sp, #32
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800bba0:	69bb      	ldr	r3, [r7, #24]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d103      	bne.n	800bbae <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800bba6:	2304      	movs	r3, #4
 800bba8:	425b      	negs	r3, r3
 800bbaa:	61fb      	str	r3, [r7, #28]
 800bbac:	e035      	b.n	800bc1a <osSemaphoreRelease+0x8a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bbae:	f3ef 8305 	mrs	r3, IPSR
 800bbb2:	617b      	str	r3, [r7, #20]
  return(result);
 800bbb4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d109      	bne.n	800bbce <osSemaphoreRelease+0x3e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bbba:	f3ef 8310 	mrs	r3, PRIMASK
 800bbbe:	613b      	str	r3, [r7, #16]
  return(result);
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d01b      	beq.n	800bbfe <osSemaphoreRelease+0x6e>
 800bbc6:	4b17      	ldr	r3, [pc, #92]	; (800bc24 <osSemaphoreRelease+0x94>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	2b02      	cmp	r3, #2
 800bbcc:	d117      	bne.n	800bbfe <osSemaphoreRelease+0x6e>
    yield = pdFALSE;
 800bbce:	2300      	movs	r3, #0
 800bbd0:	60fb      	str	r3, [r7, #12]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800bbd2:	230c      	movs	r3, #12
 800bbd4:	18fa      	adds	r2, r7, r3
 800bbd6:	69bb      	ldr	r3, [r7, #24]
 800bbd8:	0011      	movs	r1, r2
 800bbda:	0018      	movs	r0, r3
 800bbdc:	f000 fd01 	bl	800c5e2 <xQueueGiveFromISR>
 800bbe0:	0003      	movs	r3, r0
 800bbe2:	2b01      	cmp	r3, #1
 800bbe4:	d003      	beq.n	800bbee <osSemaphoreRelease+0x5e>
      stat = osErrorResource;
 800bbe6:	2303      	movs	r3, #3
 800bbe8:	425b      	negs	r3, r3
 800bbea:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800bbec:	e014      	b.n	800bc18 <osSemaphoreRelease+0x88>
    } else {
      portYIELD_FROM_ISR (yield);
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d011      	beq.n	800bc18 <osSemaphoreRelease+0x88>
 800bbf4:	4b0c      	ldr	r3, [pc, #48]	; (800bc28 <osSemaphoreRelease+0x98>)
 800bbf6:	2280      	movs	r2, #128	; 0x80
 800bbf8:	0552      	lsls	r2, r2, #21
 800bbfa:	601a      	str	r2, [r3, #0]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800bbfc:	e00c      	b.n	800bc18 <osSemaphoreRelease+0x88>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800bbfe:	69b8      	ldr	r0, [r7, #24]
 800bc00:	2300      	movs	r3, #0
 800bc02:	2200      	movs	r2, #0
 800bc04:	2100      	movs	r1, #0
 800bc06:	f000 fbb7 	bl	800c378 <xQueueGenericSend>
 800bc0a:	0003      	movs	r3, r0
 800bc0c:	2b01      	cmp	r3, #1
 800bc0e:	d004      	beq.n	800bc1a <osSemaphoreRelease+0x8a>
      stat = osErrorResource;
 800bc10:	2303      	movs	r3, #3
 800bc12:	425b      	negs	r3, r3
 800bc14:	61fb      	str	r3, [r7, #28]
 800bc16:	e000      	b.n	800bc1a <osSemaphoreRelease+0x8a>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800bc18:	46c0      	nop			; (mov r8, r8)
    }
  }

  return (stat);
 800bc1a:	69fb      	ldr	r3, [r7, #28]
}
 800bc1c:	0018      	movs	r0, r3
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	b008      	add	sp, #32
 800bc22:	bd80      	pop	{r7, pc}
 800bc24:	20000698 	.word	0x20000698
 800bc28:	e000ed04 	.word	0xe000ed04

0800bc2c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800bc2c:	b590      	push	{r4, r7, lr}
 800bc2e:	b08d      	sub	sp, #52	; 0x34
 800bc30:	af02      	add	r7, sp, #8
 800bc32:	60f8      	str	r0, [r7, #12]
 800bc34:	60b9      	str	r1, [r7, #8]
 800bc36:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800bc38:	2300      	movs	r3, #0
 800bc3a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc3c:	f3ef 8305 	mrs	r3, IPSR
 800bc40:	61bb      	str	r3, [r7, #24]
  return(result);
 800bc42:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d000      	beq.n	800bc4a <osMessageQueueNew+0x1e>
 800bc48:	e06f      	b.n	800bd2a <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc4a:	f3ef 8310 	mrs	r3, PRIMASK
 800bc4e:	617b      	str	r3, [r7, #20]
  return(result);
 800bc50:	697b      	ldr	r3, [r7, #20]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d004      	beq.n	800bc60 <osMessageQueueNew+0x34>
 800bc56:	4b37      	ldr	r3, [pc, #220]	; (800bd34 <osMessageQueueNew+0x108>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	2b02      	cmp	r3, #2
 800bc5c:	d100      	bne.n	800bc60 <osMessageQueueNew+0x34>
 800bc5e:	e064      	b.n	800bd2a <osMessageQueueNew+0xfe>
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d100      	bne.n	800bc68 <osMessageQueueNew+0x3c>
 800bc66:	e060      	b.n	800bd2a <osMessageQueueNew+0xfe>
 800bc68:	68bb      	ldr	r3, [r7, #8]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d05d      	beq.n	800bd2a <osMessageQueueNew+0xfe>
    mem = -1;
 800bc6e:	2301      	movs	r3, #1
 800bc70:	425b      	negs	r3, r3
 800bc72:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d028      	beq.n	800bccc <osMessageQueueNew+0xa0>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	689b      	ldr	r3, [r3, #8]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d011      	beq.n	800bca6 <osMessageQueueNew+0x7a>
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	68db      	ldr	r3, [r3, #12]
 800bc86:	2b4f      	cmp	r3, #79	; 0x4f
 800bc88:	d90d      	bls.n	800bca6 <osMessageQueueNew+0x7a>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d009      	beq.n	800bca6 <osMessageQueueNew+0x7a>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	695a      	ldr	r2, [r3, #20]
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	68b9      	ldr	r1, [r7, #8]
 800bc9a:	434b      	muls	r3, r1
 800bc9c:	429a      	cmp	r2, r3
 800bc9e:	d302      	bcc.n	800bca6 <osMessageQueueNew+0x7a>
        mem = 1;
 800bca0:	2301      	movs	r3, #1
 800bca2:	623b      	str	r3, [r7, #32]
 800bca4:	e014      	b.n	800bcd0 <osMessageQueueNew+0xa4>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	689b      	ldr	r3, [r3, #8]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d110      	bne.n	800bcd0 <osMessageQueueNew+0xa4>
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	68db      	ldr	r3, [r3, #12]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d10c      	bne.n	800bcd0 <osMessageQueueNew+0xa4>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d108      	bne.n	800bcd0 <osMessageQueueNew+0xa4>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	695b      	ldr	r3, [r3, #20]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d104      	bne.n	800bcd0 <osMessageQueueNew+0xa4>
          mem = 0;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	623b      	str	r3, [r7, #32]
 800bcca:	e001      	b.n	800bcd0 <osMessageQueueNew+0xa4>
        }
      }
    }
    else {
      mem = 0;
 800bccc:	2300      	movs	r3, #0
 800bcce:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800bcd0:	6a3b      	ldr	r3, [r7, #32]
 800bcd2:	2b01      	cmp	r3, #1
 800bcd4:	d10c      	bne.n	800bcf0 <osMessageQueueNew+0xc4>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	691a      	ldr	r2, [r3, #16]
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	689b      	ldr	r3, [r3, #8]
 800bcde:	68b9      	ldr	r1, [r7, #8]
 800bce0:	68f8      	ldr	r0, [r7, #12]
 800bce2:	2400      	movs	r4, #0
 800bce4:	9400      	str	r4, [sp, #0]
 800bce6:	f000 fa56 	bl	800c196 <xQueueGenericCreateStatic>
 800bcea:	0003      	movs	r3, r0
 800bcec:	627b      	str	r3, [r7, #36]	; 0x24
 800bcee:	e00a      	b.n	800bd06 <osMessageQueueNew+0xda>
    }
    else {
      if (mem == 0) {
 800bcf0:	6a3b      	ldr	r3, [r7, #32]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d107      	bne.n	800bd06 <osMessageQueueNew+0xda>
        hQueue = xQueueCreate (msg_count, msg_size);
 800bcf6:	68b9      	ldr	r1, [r7, #8]
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	0018      	movs	r0, r3
 800bcfe:	f000 fa95 	bl	800c22c <xQueueGenericCreate>
 800bd02:	0003      	movs	r3, r0
 800bd04:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800bd06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d00e      	beq.n	800bd2a <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d003      	beq.n	800bd1a <osMessageQueueNew+0xee>
        name = attr->name;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	61fb      	str	r3, [r7, #28]
 800bd18:	e001      	b.n	800bd1e <osMessageQueueNew+0xf2>
      } else {
        name = NULL;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800bd1e:	69fa      	ldr	r2, [r7, #28]
 800bd20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd22:	0011      	movs	r1, r2
 800bd24:	0018      	movs	r0, r3
 800bd26:	f001 f829 	bl	800cd7c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800bd2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bd2c:	0018      	movs	r0, r3
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	b00b      	add	sp, #44	; 0x2c
 800bd32:	bd90      	pop	{r4, r7, pc}
 800bd34:	20000698 	.word	0x20000698

0800bd38 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b08a      	sub	sp, #40	; 0x28
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	60f8      	str	r0, [r7, #12]
 800bd40:	60b9      	str	r1, [r7, #8]
 800bd42:	603b      	str	r3, [r7, #0]
 800bd44:	1dfb      	adds	r3, r7, #7
 800bd46:	701a      	strb	r2, [r3, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd50:	f3ef 8305 	mrs	r3, IPSR
 800bd54:	61fb      	str	r3, [r7, #28]
  return(result);
 800bd56:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d109      	bne.n	800bd70 <osMessageQueuePut+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bd5c:	f3ef 8310 	mrs	r3, PRIMASK
 800bd60:	61bb      	str	r3, [r7, #24]
  return(result);
 800bd62:	69bb      	ldr	r3, [r7, #24]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d028      	beq.n	800bdba <osMessageQueuePut+0x82>
 800bd68:	4b26      	ldr	r3, [pc, #152]	; (800be04 <osMessageQueuePut+0xcc>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	2b02      	cmp	r3, #2
 800bd6e:	d124      	bne.n	800bdba <osMessageQueuePut+0x82>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bd70:	6a3b      	ldr	r3, [r7, #32]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d005      	beq.n	800bd82 <osMessageQueuePut+0x4a>
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d002      	beq.n	800bd82 <osMessageQueuePut+0x4a>
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d003      	beq.n	800bd8a <osMessageQueuePut+0x52>
      stat = osErrorParameter;
 800bd82:	2304      	movs	r3, #4
 800bd84:	425b      	negs	r3, r3
 800bd86:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bd88:	e035      	b.n	800bdf6 <osMessageQueuePut+0xbe>
    }
    else {
      yield = pdFALSE;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	617b      	str	r3, [r7, #20]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800bd8e:	2314      	movs	r3, #20
 800bd90:	18fa      	adds	r2, r7, r3
 800bd92:	68b9      	ldr	r1, [r7, #8]
 800bd94:	6a38      	ldr	r0, [r7, #32]
 800bd96:	2300      	movs	r3, #0
 800bd98:	f000 fbb2 	bl	800c500 <xQueueGenericSendFromISR>
 800bd9c:	0003      	movs	r3, r0
 800bd9e:	2b01      	cmp	r3, #1
 800bda0:	d003      	beq.n	800bdaa <osMessageQueuePut+0x72>
        stat = osErrorResource;
 800bda2:	2303      	movs	r3, #3
 800bda4:	425b      	negs	r3, r3
 800bda6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bda8:	e025      	b.n	800bdf6 <osMessageQueuePut+0xbe>
      } else {
        portYIELD_FROM_ISR (yield);
 800bdaa:	697b      	ldr	r3, [r7, #20]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d022      	beq.n	800bdf6 <osMessageQueuePut+0xbe>
 800bdb0:	4b15      	ldr	r3, [pc, #84]	; (800be08 <osMessageQueuePut+0xd0>)
 800bdb2:	2280      	movs	r2, #128	; 0x80
 800bdb4:	0552      	lsls	r2, r2, #21
 800bdb6:	601a      	str	r2, [r3, #0]
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bdb8:	e01d      	b.n	800bdf6 <osMessageQueuePut+0xbe>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800bdba:	6a3b      	ldr	r3, [r7, #32]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d002      	beq.n	800bdc6 <osMessageQueuePut+0x8e>
 800bdc0:	68bb      	ldr	r3, [r7, #8]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d103      	bne.n	800bdce <osMessageQueuePut+0x96>
      stat = osErrorParameter;
 800bdc6:	2304      	movs	r3, #4
 800bdc8:	425b      	negs	r3, r3
 800bdca:	627b      	str	r3, [r7, #36]	; 0x24
 800bdcc:	e014      	b.n	800bdf8 <osMessageQueuePut+0xc0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800bdce:	683a      	ldr	r2, [r7, #0]
 800bdd0:	68b9      	ldr	r1, [r7, #8]
 800bdd2:	6a38      	ldr	r0, [r7, #32]
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	f000 facf 	bl	800c378 <xQueueGenericSend>
 800bdda:	0003      	movs	r3, r0
 800bddc:	2b01      	cmp	r3, #1
 800bdde:	d00b      	beq.n	800bdf8 <osMessageQueuePut+0xc0>
        if (timeout != 0U) {
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d003      	beq.n	800bdee <osMessageQueuePut+0xb6>
          stat = osErrorTimeout;
 800bde6:	2302      	movs	r3, #2
 800bde8:	425b      	negs	r3, r3
 800bdea:	627b      	str	r3, [r7, #36]	; 0x24
 800bdec:	e004      	b.n	800bdf8 <osMessageQueuePut+0xc0>
        } else {
          stat = osErrorResource;
 800bdee:	2303      	movs	r3, #3
 800bdf0:	425b      	negs	r3, r3
 800bdf2:	627b      	str	r3, [r7, #36]	; 0x24
 800bdf4:	e000      	b.n	800bdf8 <osMessageQueuePut+0xc0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bdf6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  return (stat);
 800bdf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bdfa:	0018      	movs	r0, r3
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	b00a      	add	sp, #40	; 0x28
 800be00:	bd80      	pop	{r7, pc}
 800be02:	46c0      	nop			; (mov r8, r8)
 800be04:	20000698 	.word	0x20000698
 800be08:	e000ed04 	.word	0xe000ed04

0800be0c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b08a      	sub	sp, #40	; 0x28
 800be10:	af00      	add	r7, sp, #0
 800be12:	60f8      	str	r0, [r7, #12]
 800be14:	60b9      	str	r1, [r7, #8]
 800be16:	607a      	str	r2, [r7, #4]
 800be18:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800be1e:	2300      	movs	r3, #0
 800be20:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be22:	f3ef 8305 	mrs	r3, IPSR
 800be26:	61fb      	str	r3, [r7, #28]
  return(result);
 800be28:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d109      	bne.n	800be42 <osMessageQueueGet+0x36>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800be2e:	f3ef 8310 	mrs	r3, PRIMASK
 800be32:	61bb      	str	r3, [r7, #24]
  return(result);
 800be34:	69bb      	ldr	r3, [r7, #24]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d028      	beq.n	800be8c <osMessageQueueGet+0x80>
 800be3a:	4b26      	ldr	r3, [pc, #152]	; (800bed4 <osMessageQueueGet+0xc8>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	2b02      	cmp	r3, #2
 800be40:	d124      	bne.n	800be8c <osMessageQueueGet+0x80>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800be42:	6a3b      	ldr	r3, [r7, #32]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d005      	beq.n	800be54 <osMessageQueueGet+0x48>
 800be48:	68bb      	ldr	r3, [r7, #8]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d002      	beq.n	800be54 <osMessageQueueGet+0x48>
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d003      	beq.n	800be5c <osMessageQueueGet+0x50>
      stat = osErrorParameter;
 800be54:	2304      	movs	r3, #4
 800be56:	425b      	negs	r3, r3
 800be58:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800be5a:	e035      	b.n	800bec8 <osMessageQueueGet+0xbc>
    }
    else {
      yield = pdFALSE;
 800be5c:	2300      	movs	r3, #0
 800be5e:	617b      	str	r3, [r7, #20]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800be60:	2314      	movs	r3, #20
 800be62:	18fa      	adds	r2, r7, r3
 800be64:	68b9      	ldr	r1, [r7, #8]
 800be66:	6a3b      	ldr	r3, [r7, #32]
 800be68:	0018      	movs	r0, r3
 800be6a:	f000 fdae 	bl	800c9ca <xQueueReceiveFromISR>
 800be6e:	0003      	movs	r3, r0
 800be70:	2b01      	cmp	r3, #1
 800be72:	d003      	beq.n	800be7c <osMessageQueueGet+0x70>
        stat = osErrorResource;
 800be74:	2303      	movs	r3, #3
 800be76:	425b      	negs	r3, r3
 800be78:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800be7a:	e025      	b.n	800bec8 <osMessageQueueGet+0xbc>
      } else {
        portYIELD_FROM_ISR (yield);
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d022      	beq.n	800bec8 <osMessageQueueGet+0xbc>
 800be82:	4b15      	ldr	r3, [pc, #84]	; (800bed8 <osMessageQueueGet+0xcc>)
 800be84:	2280      	movs	r2, #128	; 0x80
 800be86:	0552      	lsls	r2, r2, #21
 800be88:	601a      	str	r2, [r3, #0]
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800be8a:	e01d      	b.n	800bec8 <osMessageQueueGet+0xbc>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800be8c:	6a3b      	ldr	r3, [r7, #32]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d002      	beq.n	800be98 <osMessageQueueGet+0x8c>
 800be92:	68bb      	ldr	r3, [r7, #8]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d103      	bne.n	800bea0 <osMessageQueueGet+0x94>
      stat = osErrorParameter;
 800be98:	2304      	movs	r3, #4
 800be9a:	425b      	negs	r3, r3
 800be9c:	627b      	str	r3, [r7, #36]	; 0x24
 800be9e:	e014      	b.n	800beca <osMessageQueueGet+0xbe>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800bea0:	683a      	ldr	r2, [r7, #0]
 800bea2:	68b9      	ldr	r1, [r7, #8]
 800bea4:	6a3b      	ldr	r3, [r7, #32]
 800bea6:	0018      	movs	r0, r3
 800bea8:	f000 fc00 	bl	800c6ac <xQueueReceive>
 800beac:	0003      	movs	r3, r0
 800beae:	2b01      	cmp	r3, #1
 800beb0:	d00b      	beq.n	800beca <osMessageQueueGet+0xbe>
        if (timeout != 0U) {
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d003      	beq.n	800bec0 <osMessageQueueGet+0xb4>
          stat = osErrorTimeout;
 800beb8:	2302      	movs	r3, #2
 800beba:	425b      	negs	r3, r3
 800bebc:	627b      	str	r3, [r7, #36]	; 0x24
 800bebe:	e004      	b.n	800beca <osMessageQueueGet+0xbe>
        } else {
          stat = osErrorResource;
 800bec0:	2303      	movs	r3, #3
 800bec2:	425b      	negs	r3, r3
 800bec4:	627b      	str	r3, [r7, #36]	; 0x24
 800bec6:	e000      	b.n	800beca <osMessageQueueGet+0xbe>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bec8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  return (stat);
 800beca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800becc:	0018      	movs	r0, r3
 800bece:	46bd      	mov	sp, r7
 800bed0:	b00a      	add	sp, #40	; 0x28
 800bed2:	bd80      	pop	{r7, pc}
 800bed4:	20000698 	.word	0x20000698
 800bed8:	e000ed04 	.word	0xe000ed04

0800bedc <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800bedc:	b580      	push	{r7, lr}
 800bede:	b086      	sub	sp, #24
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 800bee8:	693b      	ldr	r3, [r7, #16]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d102      	bne.n	800bef4 <osMessageQueueGetCount+0x18>
    count = 0U;
 800beee:	2300      	movs	r3, #0
 800bef0:	617b      	str	r3, [r7, #20]
 800bef2:	e01c      	b.n	800bf2e <osMessageQueueGetCount+0x52>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bef4:	f3ef 8305 	mrs	r3, IPSR
 800bef8:	60fb      	str	r3, [r7, #12]
  return(result);
 800befa:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800befc:	2b00      	cmp	r3, #0
 800befe:	d109      	bne.n	800bf14 <osMessageQueueGetCount+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf00:	f3ef 8310 	mrs	r3, PRIMASK
 800bf04:	60bb      	str	r3, [r7, #8]
  return(result);
 800bf06:	68bb      	ldr	r3, [r7, #8]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d00a      	beq.n	800bf22 <osMessageQueueGetCount+0x46>
 800bf0c:	4b0a      	ldr	r3, [pc, #40]	; (800bf38 <osMessageQueueGetCount+0x5c>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	2b02      	cmp	r3, #2
 800bf12:	d106      	bne.n	800bf22 <osMessageQueueGetCount+0x46>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800bf14:	693b      	ldr	r3, [r7, #16]
 800bf16:	0018      	movs	r0, r3
 800bf18:	f000 fdcf 	bl	800caba <uxQueueMessagesWaitingFromISR>
 800bf1c:	0003      	movs	r3, r0
 800bf1e:	617b      	str	r3, [r7, #20]
 800bf20:	e005      	b.n	800bf2e <osMessageQueueGetCount+0x52>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800bf22:	693b      	ldr	r3, [r7, #16]
 800bf24:	0018      	movs	r0, r3
 800bf26:	f000 fdb3 	bl	800ca90 <uxQueueMessagesWaiting>
 800bf2a:	0003      	movs	r3, r0
 800bf2c:	617b      	str	r3, [r7, #20]
  }

  return ((uint32_t)count);
 800bf2e:	697b      	ldr	r3, [r7, #20]
}
 800bf30:	0018      	movs	r0, r3
 800bf32:	46bd      	mov	sp, r7
 800bf34:	b006      	add	sp, #24
 800bf36:	bd80      	pop	{r7, pc}
 800bf38:	20000698 	.word	0x20000698

0800bf3c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b084      	sub	sp, #16
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	60f8      	str	r0, [r7, #12]
 800bf44:	60b9      	str	r1, [r7, #8]
 800bf46:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	4a06      	ldr	r2, [pc, #24]	; (800bf64 <vApplicationGetIdleTaskMemory+0x28>)
 800bf4c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bf4e:	68bb      	ldr	r3, [r7, #8]
 800bf50:	4a05      	ldr	r2, [pc, #20]	; (800bf68 <vApplicationGetIdleTaskMemory+0x2c>)
 800bf52:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2240      	movs	r2, #64	; 0x40
 800bf58:	601a      	str	r2, [r3, #0]
}
 800bf5a:	46c0      	nop			; (mov r8, r8)
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	b004      	add	sp, #16
 800bf60:	bd80      	pop	{r7, pc}
 800bf62:	46c0      	nop			; (mov r8, r8)
 800bf64:	2000069c 	.word	0x2000069c
 800bf68:	20000758 	.word	0x20000758

0800bf6c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b084      	sub	sp, #16
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	60f8      	str	r0, [r7, #12]
 800bf74:	60b9      	str	r1, [r7, #8]
 800bf76:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	4a06      	ldr	r2, [pc, #24]	; (800bf94 <vApplicationGetTimerTaskMemory+0x28>)
 800bf7c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	4a05      	ldr	r2, [pc, #20]	; (800bf98 <vApplicationGetTimerTaskMemory+0x2c>)
 800bf82:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2280      	movs	r2, #128	; 0x80
 800bf88:	601a      	str	r2, [r3, #0]
}
 800bf8a:	46c0      	nop			; (mov r8, r8)
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	b004      	add	sp, #16
 800bf90:	bd80      	pop	{r7, pc}
 800bf92:	46c0      	nop			; (mov r8, r8)
 800bf94:	20000858 	.word	0x20000858
 800bf98:	20000914 	.word	0x20000914

0800bf9c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b082      	sub	sp, #8
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	3308      	adds	r3, #8
 800bfa8:	001a      	movs	r2, r3
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	2201      	movs	r2, #1
 800bfb2:	4252      	negs	r2, r2
 800bfb4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	3308      	adds	r3, #8
 800bfba:	001a      	movs	r2, r3
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	3308      	adds	r3, #8
 800bfc4:	001a      	movs	r2, r3
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2200      	movs	r2, #0
 800bfce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bfd0:	46c0      	nop			; (mov r8, r8)
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	b002      	add	sp, #8
 800bfd6:	bd80      	pop	{r7, pc}

0800bfd8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b082      	sub	sp, #8
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bfe6:	46c0      	nop			; (mov r8, r8)
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	b002      	add	sp, #8
 800bfec:	bd80      	pop	{r7, pc}

0800bfee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bfee:	b580      	push	{r7, lr}
 800bff0:	b084      	sub	sp, #16
 800bff2:	af00      	add	r7, sp, #0
 800bff4:	6078      	str	r0, [r7, #4]
 800bff6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	685b      	ldr	r3, [r3, #4]
 800bffc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	68fa      	ldr	r2, [r7, #12]
 800c002:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	689a      	ldr	r2, [r3, #8]
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	689b      	ldr	r3, [r3, #8]
 800c010:	683a      	ldr	r2, [r7, #0]
 800c012:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	683a      	ldr	r2, [r7, #0]
 800c018:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	687a      	ldr	r2, [r7, #4]
 800c01e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	1c5a      	adds	r2, r3, #1
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	601a      	str	r2, [r3, #0]
}
 800c02a:	46c0      	nop			; (mov r8, r8)
 800c02c:	46bd      	mov	sp, r7
 800c02e:	b004      	add	sp, #16
 800c030:	bd80      	pop	{r7, pc}

0800c032 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c032:	b580      	push	{r7, lr}
 800c034:	b084      	sub	sp, #16
 800c036:	af00      	add	r7, sp, #0
 800c038:	6078      	str	r0, [r7, #4]
 800c03a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c042:	68bb      	ldr	r3, [r7, #8]
 800c044:	3301      	adds	r3, #1
 800c046:	d103      	bne.n	800c050 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	691b      	ldr	r3, [r3, #16]
 800c04c:	60fb      	str	r3, [r7, #12]
 800c04e:	e00c      	b.n	800c06a <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	3308      	adds	r3, #8
 800c054:	60fb      	str	r3, [r7, #12]
 800c056:	e002      	b.n	800c05e <vListInsert+0x2c>
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	685b      	ldr	r3, [r3, #4]
 800c05c:	60fb      	str	r3, [r7, #12]
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	685b      	ldr	r3, [r3, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	68ba      	ldr	r2, [r7, #8]
 800c066:	429a      	cmp	r2, r3
 800c068:	d2f6      	bcs.n	800c058 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	685a      	ldr	r2, [r3, #4]
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	685b      	ldr	r3, [r3, #4]
 800c076:	683a      	ldr	r2, [r7, #0]
 800c078:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	68fa      	ldr	r2, [r7, #12]
 800c07e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	683a      	ldr	r2, [r7, #0]
 800c084:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	687a      	ldr	r2, [r7, #4]
 800c08a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	1c5a      	adds	r2, r3, #1
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	601a      	str	r2, [r3, #0]
}
 800c096:	46c0      	nop			; (mov r8, r8)
 800c098:	46bd      	mov	sp, r7
 800c09a:	b004      	add	sp, #16
 800c09c:	bd80      	pop	{r7, pc}

0800c09e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c09e:	b580      	push	{r7, lr}
 800c0a0:	b084      	sub	sp, #16
 800c0a2:	af00      	add	r7, sp, #0
 800c0a4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	691b      	ldr	r3, [r3, #16]
 800c0aa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	685b      	ldr	r3, [r3, #4]
 800c0b0:	687a      	ldr	r2, [r7, #4]
 800c0b2:	6892      	ldr	r2, [r2, #8]
 800c0b4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	689b      	ldr	r3, [r3, #8]
 800c0ba:	687a      	ldr	r2, [r7, #4]
 800c0bc:	6852      	ldr	r2, [r2, #4]
 800c0be:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	685b      	ldr	r3, [r3, #4]
 800c0c4:	687a      	ldr	r2, [r7, #4]
 800c0c6:	429a      	cmp	r2, r3
 800c0c8:	d103      	bne.n	800c0d2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	689a      	ldr	r2, [r3, #8]
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	1e5a      	subs	r2, r3, #1
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	681b      	ldr	r3, [r3, #0]
}
 800c0e6:	0018      	movs	r0, r3
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	b004      	add	sp, #16
 800c0ec:	bd80      	pop	{r7, pc}

0800c0ee <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c0ee:	b580      	push	{r7, lr}
 800c0f0:	b084      	sub	sp, #16
 800c0f2:	af00      	add	r7, sp, #0
 800c0f4:	6078      	str	r0, [r7, #4]
 800c0f6:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d101      	bne.n	800c106 <xQueueGenericReset+0x18>
 800c102:	b672      	cpsid	i
 800c104:	e7fe      	b.n	800c104 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 800c106:	f002 fa73 	bl	800e5f0 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	681a      	ldr	r2, [r3, #0]
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c116:	434b      	muls	r3, r1
 800c118:	18d2      	adds	r2, r2, r3
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	2200      	movs	r2, #0
 800c122:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	681a      	ldr	r2, [r3, #0]
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	681a      	ldr	r2, [r3, #0]
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c134:	1e59      	subs	r1, r3, #1
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c13a:	434b      	muls	r3, r1
 800c13c:	18d2      	adds	r2, r2, r3
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	2244      	movs	r2, #68	; 0x44
 800c146:	21ff      	movs	r1, #255	; 0xff
 800c148:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	2245      	movs	r2, #69	; 0x45
 800c14e:	21ff      	movs	r1, #255	; 0xff
 800c150:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d10d      	bne.n	800c174 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	691b      	ldr	r3, [r3, #16]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d013      	beq.n	800c188 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	3310      	adds	r3, #16
 800c164:	0018      	movs	r0, r3
 800c166:	f001 fb7d 	bl	800d864 <xTaskRemoveFromEventList>
 800c16a:	1e03      	subs	r3, r0, #0
 800c16c:	d00c      	beq.n	800c188 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c16e:	f002 fa2f 	bl	800e5d0 <vPortYield>
 800c172:	e009      	b.n	800c188 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	3310      	adds	r3, #16
 800c178:	0018      	movs	r0, r3
 800c17a:	f7ff ff0f 	bl	800bf9c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	3324      	adds	r3, #36	; 0x24
 800c182:	0018      	movs	r0, r3
 800c184:	f7ff ff0a 	bl	800bf9c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c188:	f002 fa44 	bl	800e614 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c18c:	2301      	movs	r3, #1
}
 800c18e:	0018      	movs	r0, r3
 800c190:	46bd      	mov	sp, r7
 800c192:	b004      	add	sp, #16
 800c194:	bd80      	pop	{r7, pc}

0800c196 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c196:	b590      	push	{r4, r7, lr}
 800c198:	b089      	sub	sp, #36	; 0x24
 800c19a:	af02      	add	r7, sp, #8
 800c19c:	60f8      	str	r0, [r7, #12]
 800c19e:	60b9      	str	r1, [r7, #8]
 800c1a0:	607a      	str	r2, [r7, #4]
 800c1a2:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d101      	bne.n	800c1ae <xQueueGenericCreateStatic+0x18>
 800c1aa:	b672      	cpsid	i
 800c1ac:	e7fe      	b.n	800c1ac <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d101      	bne.n	800c1b8 <xQueueGenericCreateStatic+0x22>
 800c1b4:	b672      	cpsid	i
 800c1b6:	e7fe      	b.n	800c1b6 <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d002      	beq.n	800c1c4 <xQueueGenericCreateStatic+0x2e>
 800c1be:	68bb      	ldr	r3, [r7, #8]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d001      	beq.n	800c1c8 <xQueueGenericCreateStatic+0x32>
 800c1c4:	2301      	movs	r3, #1
 800c1c6:	e000      	b.n	800c1ca <xQueueGenericCreateStatic+0x34>
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d101      	bne.n	800c1d2 <xQueueGenericCreateStatic+0x3c>
 800c1ce:	b672      	cpsid	i
 800c1d0:	e7fe      	b.n	800c1d0 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d102      	bne.n	800c1de <xQueueGenericCreateStatic+0x48>
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d101      	bne.n	800c1e2 <xQueueGenericCreateStatic+0x4c>
 800c1de:	2301      	movs	r3, #1
 800c1e0:	e000      	b.n	800c1e4 <xQueueGenericCreateStatic+0x4e>
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d101      	bne.n	800c1ec <xQueueGenericCreateStatic+0x56>
 800c1e8:	b672      	cpsid	i
 800c1ea:	e7fe      	b.n	800c1ea <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c1ec:	2350      	movs	r3, #80	; 0x50
 800c1ee:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c1f0:	693b      	ldr	r3, [r7, #16]
 800c1f2:	2b50      	cmp	r3, #80	; 0x50
 800c1f4:	d001      	beq.n	800c1fa <xQueueGenericCreateStatic+0x64>
 800c1f6:	b672      	cpsid	i
 800c1f8:	e7fe      	b.n	800c1f8 <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 800c1fe:	697b      	ldr	r3, [r7, #20]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d00e      	beq.n	800c222 <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c204:	697b      	ldr	r3, [r7, #20]
 800c206:	2246      	movs	r2, #70	; 0x46
 800c208:	2101      	movs	r1, #1
 800c20a:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c20c:	2328      	movs	r3, #40	; 0x28
 800c20e:	18fb      	adds	r3, r7, r3
 800c210:	781c      	ldrb	r4, [r3, #0]
 800c212:	687a      	ldr	r2, [r7, #4]
 800c214:	68b9      	ldr	r1, [r7, #8]
 800c216:	68f8      	ldr	r0, [r7, #12]
 800c218:	697b      	ldr	r3, [r7, #20]
 800c21a:	9300      	str	r3, [sp, #0]
 800c21c:	0023      	movs	r3, r4
 800c21e:	f000 f83b 	bl	800c298 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800c222:	697b      	ldr	r3, [r7, #20]
	}
 800c224:	0018      	movs	r0, r3
 800c226:	46bd      	mov	sp, r7
 800c228:	b007      	add	sp, #28
 800c22a:	bd90      	pop	{r4, r7, pc}

0800c22c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c22c:	b590      	push	{r4, r7, lr}
 800c22e:	b08b      	sub	sp, #44	; 0x2c
 800c230:	af02      	add	r7, sp, #8
 800c232:	60f8      	str	r0, [r7, #12]
 800c234:	60b9      	str	r1, [r7, #8]
 800c236:	1dfb      	adds	r3, r7, #7
 800c238:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d101      	bne.n	800c244 <xQueueGenericCreate+0x18>
 800c240:	b672      	cpsid	i
 800c242:	e7fe      	b.n	800c242 <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d102      	bne.n	800c250 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800c24a:	2300      	movs	r3, #0
 800c24c:	61fb      	str	r3, [r7, #28]
 800c24e:	e003      	b.n	800c258 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	68ba      	ldr	r2, [r7, #8]
 800c254:	4353      	muls	r3, r2
 800c256:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800c258:	69fb      	ldr	r3, [r7, #28]
 800c25a:	3350      	adds	r3, #80	; 0x50
 800c25c:	0018      	movs	r0, r3
 800c25e:	f002 fa5f 	bl	800e720 <pvPortMalloc>
 800c262:	0003      	movs	r3, r0
 800c264:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 800c266:	69bb      	ldr	r3, [r7, #24]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d010      	beq.n	800c28e <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800c26c:	69bb      	ldr	r3, [r7, #24]
 800c26e:	3350      	adds	r3, #80	; 0x50
 800c270:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c272:	69bb      	ldr	r3, [r7, #24]
 800c274:	2246      	movs	r2, #70	; 0x46
 800c276:	2100      	movs	r1, #0
 800c278:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c27a:	1dfb      	adds	r3, r7, #7
 800c27c:	781c      	ldrb	r4, [r3, #0]
 800c27e:	697a      	ldr	r2, [r7, #20]
 800c280:	68b9      	ldr	r1, [r7, #8]
 800c282:	68f8      	ldr	r0, [r7, #12]
 800c284:	69bb      	ldr	r3, [r7, #24]
 800c286:	9300      	str	r3, [sp, #0]
 800c288:	0023      	movs	r3, r4
 800c28a:	f000 f805 	bl	800c298 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800c28e:	69bb      	ldr	r3, [r7, #24]
	}
 800c290:	0018      	movs	r0, r3
 800c292:	46bd      	mov	sp, r7
 800c294:	b009      	add	sp, #36	; 0x24
 800c296:	bd90      	pop	{r4, r7, pc}

0800c298 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b084      	sub	sp, #16
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	60f8      	str	r0, [r7, #12]
 800c2a0:	60b9      	str	r1, [r7, #8]
 800c2a2:	607a      	str	r2, [r7, #4]
 800c2a4:	001a      	movs	r2, r3
 800c2a6:	1cfb      	adds	r3, r7, #3
 800c2a8:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c2aa:	68bb      	ldr	r3, [r7, #8]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d103      	bne.n	800c2b8 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c2b0:	69bb      	ldr	r3, [r7, #24]
 800c2b2:	69ba      	ldr	r2, [r7, #24]
 800c2b4:	601a      	str	r2, [r3, #0]
 800c2b6:	e002      	b.n	800c2be <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c2b8:	69bb      	ldr	r3, [r7, #24]
 800c2ba:	687a      	ldr	r2, [r7, #4]
 800c2bc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c2be:	69bb      	ldr	r3, [r7, #24]
 800c2c0:	68fa      	ldr	r2, [r7, #12]
 800c2c2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c2c4:	69bb      	ldr	r3, [r7, #24]
 800c2c6:	68ba      	ldr	r2, [r7, #8]
 800c2c8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c2ca:	69bb      	ldr	r3, [r7, #24]
 800c2cc:	2101      	movs	r1, #1
 800c2ce:	0018      	movs	r0, r3
 800c2d0:	f7ff ff0d 	bl	800c0ee <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c2d4:	69bb      	ldr	r3, [r7, #24]
 800c2d6:	1cfa      	adds	r2, r7, #3
 800c2d8:	214c      	movs	r1, #76	; 0x4c
 800c2da:	7812      	ldrb	r2, [r2, #0]
 800c2dc:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c2de:	46c0      	nop			; (mov r8, r8)
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	b004      	add	sp, #16
 800c2e4:	bd80      	pop	{r7, pc}

0800c2e6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800c2e6:	b580      	push	{r7, lr}
 800c2e8:	b088      	sub	sp, #32
 800c2ea:	af02      	add	r7, sp, #8
 800c2ec:	60f8      	str	r0, [r7, #12]
 800c2ee:	60b9      	str	r1, [r7, #8]
 800c2f0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d101      	bne.n	800c2fc <xQueueCreateCountingSemaphoreStatic+0x16>
 800c2f8:	b672      	cpsid	i
 800c2fa:	e7fe      	b.n	800c2fa <xQueueCreateCountingSemaphoreStatic+0x14>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c2fc:	68ba      	ldr	r2, [r7, #8]
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	429a      	cmp	r2, r3
 800c302:	d901      	bls.n	800c308 <xQueueCreateCountingSemaphoreStatic+0x22>
 800c304:	b672      	cpsid	i
 800c306:	e7fe      	b.n	800c306 <xQueueCreateCountingSemaphoreStatic+0x20>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	68f8      	ldr	r0, [r7, #12]
 800c30c:	2202      	movs	r2, #2
 800c30e:	9200      	str	r2, [sp, #0]
 800c310:	2200      	movs	r2, #0
 800c312:	2100      	movs	r1, #0
 800c314:	f7ff ff3f 	bl	800c196 <xQueueGenericCreateStatic>
 800c318:	0003      	movs	r3, r0
 800c31a:	617b      	str	r3, [r7, #20]

		if( xHandle != NULL )
 800c31c:	697b      	ldr	r3, [r7, #20]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d002      	beq.n	800c328 <xQueueCreateCountingSemaphoreStatic+0x42>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c322:	697b      	ldr	r3, [r7, #20]
 800c324:	68ba      	ldr	r2, [r7, #8]
 800c326:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c328:	697b      	ldr	r3, [r7, #20]
	}
 800c32a:	0018      	movs	r0, r3
 800c32c:	46bd      	mov	sp, r7
 800c32e:	b006      	add	sp, #24
 800c330:	bd80      	pop	{r7, pc}

0800c332 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800c332:	b580      	push	{r7, lr}
 800c334:	b084      	sub	sp, #16
 800c336:	af00      	add	r7, sp, #0
 800c338:	6078      	str	r0, [r7, #4]
 800c33a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d101      	bne.n	800c346 <xQueueCreateCountingSemaphore+0x14>
 800c342:	b672      	cpsid	i
 800c344:	e7fe      	b.n	800c344 <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c346:	683a      	ldr	r2, [r7, #0]
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	429a      	cmp	r2, r3
 800c34c:	d901      	bls.n	800c352 <xQueueCreateCountingSemaphore+0x20>
 800c34e:	b672      	cpsid	i
 800c350:	e7fe      	b.n	800c350 <xQueueCreateCountingSemaphore+0x1e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	2202      	movs	r2, #2
 800c356:	2100      	movs	r1, #0
 800c358:	0018      	movs	r0, r3
 800c35a:	f7ff ff67 	bl	800c22c <xQueueGenericCreate>
 800c35e:	0003      	movs	r3, r0
 800c360:	60fb      	str	r3, [r7, #12]

		if( xHandle != NULL )
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d002      	beq.n	800c36e <xQueueCreateCountingSemaphore+0x3c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	683a      	ldr	r2, [r7, #0]
 800c36c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c36e:	68fb      	ldr	r3, [r7, #12]
	}
 800c370:	0018      	movs	r0, r3
 800c372:	46bd      	mov	sp, r7
 800c374:	b004      	add	sp, #16
 800c376:	bd80      	pop	{r7, pc}

0800c378 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b08a      	sub	sp, #40	; 0x28
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	60f8      	str	r0, [r7, #12]
 800c380:	60b9      	str	r1, [r7, #8]
 800c382:	607a      	str	r2, [r7, #4]
 800c384:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c386:	2300      	movs	r3, #0
 800c388:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800c38e:	6a3b      	ldr	r3, [r7, #32]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d101      	bne.n	800c398 <xQueueGenericSend+0x20>
 800c394:	b672      	cpsid	i
 800c396:	e7fe      	b.n	800c396 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d103      	bne.n	800c3a6 <xQueueGenericSend+0x2e>
 800c39e:	6a3b      	ldr	r3, [r7, #32]
 800c3a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d101      	bne.n	800c3aa <xQueueGenericSend+0x32>
 800c3a6:	2301      	movs	r3, #1
 800c3a8:	e000      	b.n	800c3ac <xQueueGenericSend+0x34>
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d101      	bne.n	800c3b4 <xQueueGenericSend+0x3c>
 800c3b0:	b672      	cpsid	i
 800c3b2:	e7fe      	b.n	800c3b2 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	2b02      	cmp	r3, #2
 800c3b8:	d103      	bne.n	800c3c2 <xQueueGenericSend+0x4a>
 800c3ba:	6a3b      	ldr	r3, [r7, #32]
 800c3bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3be:	2b01      	cmp	r3, #1
 800c3c0:	d101      	bne.n	800c3c6 <xQueueGenericSend+0x4e>
 800c3c2:	2301      	movs	r3, #1
 800c3c4:	e000      	b.n	800c3c8 <xQueueGenericSend+0x50>
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d101      	bne.n	800c3d0 <xQueueGenericSend+0x58>
 800c3cc:	b672      	cpsid	i
 800c3ce:	e7fe      	b.n	800c3ce <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c3d0:	f001 fbe6 	bl	800dba0 <xTaskGetSchedulerState>
 800c3d4:	1e03      	subs	r3, r0, #0
 800c3d6:	d102      	bne.n	800c3de <xQueueGenericSend+0x66>
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d101      	bne.n	800c3e2 <xQueueGenericSend+0x6a>
 800c3de:	2301      	movs	r3, #1
 800c3e0:	e000      	b.n	800c3e4 <xQueueGenericSend+0x6c>
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d101      	bne.n	800c3ec <xQueueGenericSend+0x74>
 800c3e8:	b672      	cpsid	i
 800c3ea:	e7fe      	b.n	800c3ea <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c3ec:	f002 f900 	bl	800e5f0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c3f0:	6a3b      	ldr	r3, [r7, #32]
 800c3f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c3f4:	6a3b      	ldr	r3, [r7, #32]
 800c3f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3f8:	429a      	cmp	r2, r3
 800c3fa:	d302      	bcc.n	800c402 <xQueueGenericSend+0x8a>
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	2b02      	cmp	r3, #2
 800c400:	d11e      	bne.n	800c440 <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c402:	683a      	ldr	r2, [r7, #0]
 800c404:	68b9      	ldr	r1, [r7, #8]
 800c406:	6a3b      	ldr	r3, [r7, #32]
 800c408:	0018      	movs	r0, r3
 800c40a:	f000 fb99 	bl	800cb40 <prvCopyDataToQueue>
 800c40e:	0003      	movs	r3, r0
 800c410:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c412:	6a3b      	ldr	r3, [r7, #32]
 800c414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c416:	2b00      	cmp	r3, #0
 800c418:	d009      	beq.n	800c42e <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c41a:	6a3b      	ldr	r3, [r7, #32]
 800c41c:	3324      	adds	r3, #36	; 0x24
 800c41e:	0018      	movs	r0, r3
 800c420:	f001 fa20 	bl	800d864 <xTaskRemoveFromEventList>
 800c424:	1e03      	subs	r3, r0, #0
 800c426:	d007      	beq.n	800c438 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c428:	f002 f8d2 	bl	800e5d0 <vPortYield>
 800c42c:	e004      	b.n	800c438 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c42e:	69fb      	ldr	r3, [r7, #28]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d001      	beq.n	800c438 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c434:	f002 f8cc 	bl	800e5d0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c438:	f002 f8ec 	bl	800e614 <vPortExitCritical>
				return pdPASS;
 800c43c:	2301      	movs	r3, #1
 800c43e:	e05b      	b.n	800c4f8 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d103      	bne.n	800c44e <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c446:	f002 f8e5 	bl	800e614 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c44a:	2300      	movs	r3, #0
 800c44c:	e054      	b.n	800c4f8 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c450:	2b00      	cmp	r3, #0
 800c452:	d106      	bne.n	800c462 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c454:	2314      	movs	r3, #20
 800c456:	18fb      	adds	r3, r7, r3
 800c458:	0018      	movs	r0, r3
 800c45a:	f001 fa5f 	bl	800d91c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c45e:	2301      	movs	r3, #1
 800c460:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c462:	f002 f8d7 	bl	800e614 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c466:	f001 f805 	bl	800d474 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c46a:	f002 f8c1 	bl	800e5f0 <vPortEnterCritical>
 800c46e:	6a3b      	ldr	r3, [r7, #32]
 800c470:	2244      	movs	r2, #68	; 0x44
 800c472:	5c9b      	ldrb	r3, [r3, r2]
 800c474:	b25b      	sxtb	r3, r3
 800c476:	3301      	adds	r3, #1
 800c478:	d103      	bne.n	800c482 <xQueueGenericSend+0x10a>
 800c47a:	6a3b      	ldr	r3, [r7, #32]
 800c47c:	2244      	movs	r2, #68	; 0x44
 800c47e:	2100      	movs	r1, #0
 800c480:	5499      	strb	r1, [r3, r2]
 800c482:	6a3b      	ldr	r3, [r7, #32]
 800c484:	2245      	movs	r2, #69	; 0x45
 800c486:	5c9b      	ldrb	r3, [r3, r2]
 800c488:	b25b      	sxtb	r3, r3
 800c48a:	3301      	adds	r3, #1
 800c48c:	d103      	bne.n	800c496 <xQueueGenericSend+0x11e>
 800c48e:	6a3b      	ldr	r3, [r7, #32]
 800c490:	2245      	movs	r2, #69	; 0x45
 800c492:	2100      	movs	r1, #0
 800c494:	5499      	strb	r1, [r3, r2]
 800c496:	f002 f8bd 	bl	800e614 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c49a:	1d3a      	adds	r2, r7, #4
 800c49c:	2314      	movs	r3, #20
 800c49e:	18fb      	adds	r3, r7, r3
 800c4a0:	0011      	movs	r1, r2
 800c4a2:	0018      	movs	r0, r3
 800c4a4:	f001 fa4e 	bl	800d944 <xTaskCheckForTimeOut>
 800c4a8:	1e03      	subs	r3, r0, #0
 800c4aa:	d11e      	bne.n	800c4ea <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c4ac:	6a3b      	ldr	r3, [r7, #32]
 800c4ae:	0018      	movs	r0, r3
 800c4b0:	f000 fc4b 	bl	800cd4a <prvIsQueueFull>
 800c4b4:	1e03      	subs	r3, r0, #0
 800c4b6:	d011      	beq.n	800c4dc <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c4b8:	6a3b      	ldr	r3, [r7, #32]
 800c4ba:	3310      	adds	r3, #16
 800c4bc:	687a      	ldr	r2, [r7, #4]
 800c4be:	0011      	movs	r1, r2
 800c4c0:	0018      	movs	r0, r3
 800c4c2:	f001 f98b 	bl	800d7dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c4c6:	6a3b      	ldr	r3, [r7, #32]
 800c4c8:	0018      	movs	r0, r3
 800c4ca:	f000 fbca 	bl	800cc62 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c4ce:	f000 ffdd 	bl	800d48c <xTaskResumeAll>
 800c4d2:	1e03      	subs	r3, r0, #0
 800c4d4:	d18a      	bne.n	800c3ec <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 800c4d6:	f002 f87b 	bl	800e5d0 <vPortYield>
 800c4da:	e787      	b.n	800c3ec <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c4dc:	6a3b      	ldr	r3, [r7, #32]
 800c4de:	0018      	movs	r0, r3
 800c4e0:	f000 fbbf 	bl	800cc62 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c4e4:	f000 ffd2 	bl	800d48c <xTaskResumeAll>
 800c4e8:	e780      	b.n	800c3ec <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c4ea:	6a3b      	ldr	r3, [r7, #32]
 800c4ec:	0018      	movs	r0, r3
 800c4ee:	f000 fbb8 	bl	800cc62 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c4f2:	f000 ffcb 	bl	800d48c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c4f6:	2300      	movs	r3, #0
		}
	}
}
 800c4f8:	0018      	movs	r0, r3
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	b00a      	add	sp, #40	; 0x28
 800c4fe:	bd80      	pop	{r7, pc}

0800c500 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c500:	b590      	push	{r4, r7, lr}
 800c502:	b089      	sub	sp, #36	; 0x24
 800c504:	af00      	add	r7, sp, #0
 800c506:	60f8      	str	r0, [r7, #12]
 800c508:	60b9      	str	r1, [r7, #8]
 800c50a:	607a      	str	r2, [r7, #4]
 800c50c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 800c512:	69bb      	ldr	r3, [r7, #24]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d101      	bne.n	800c51c <xQueueGenericSendFromISR+0x1c>
 800c518:	b672      	cpsid	i
 800c51a:	e7fe      	b.n	800c51a <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c51c:	68bb      	ldr	r3, [r7, #8]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d103      	bne.n	800c52a <xQueueGenericSendFromISR+0x2a>
 800c522:	69bb      	ldr	r3, [r7, #24]
 800c524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c526:	2b00      	cmp	r3, #0
 800c528:	d101      	bne.n	800c52e <xQueueGenericSendFromISR+0x2e>
 800c52a:	2301      	movs	r3, #1
 800c52c:	e000      	b.n	800c530 <xQueueGenericSendFromISR+0x30>
 800c52e:	2300      	movs	r3, #0
 800c530:	2b00      	cmp	r3, #0
 800c532:	d101      	bne.n	800c538 <xQueueGenericSendFromISR+0x38>
 800c534:	b672      	cpsid	i
 800c536:	e7fe      	b.n	800c536 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	2b02      	cmp	r3, #2
 800c53c:	d103      	bne.n	800c546 <xQueueGenericSendFromISR+0x46>
 800c53e:	69bb      	ldr	r3, [r7, #24]
 800c540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c542:	2b01      	cmp	r3, #1
 800c544:	d101      	bne.n	800c54a <xQueueGenericSendFromISR+0x4a>
 800c546:	2301      	movs	r3, #1
 800c548:	e000      	b.n	800c54c <xQueueGenericSendFromISR+0x4c>
 800c54a:	2300      	movs	r3, #0
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d101      	bne.n	800c554 <xQueueGenericSendFromISR+0x54>
 800c550:	b672      	cpsid	i
 800c552:	e7fe      	b.n	800c552 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c554:	f002 f876 	bl	800e644 <ulSetInterruptMaskFromISR>
 800c558:	0003      	movs	r3, r0
 800c55a:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c55c:	69bb      	ldr	r3, [r7, #24]
 800c55e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c560:	69bb      	ldr	r3, [r7, #24]
 800c562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c564:	429a      	cmp	r2, r3
 800c566:	d302      	bcc.n	800c56e <xQueueGenericSendFromISR+0x6e>
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	2b02      	cmp	r3, #2
 800c56c:	d12e      	bne.n	800c5cc <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c56e:	2413      	movs	r4, #19
 800c570:	193b      	adds	r3, r7, r4
 800c572:	69ba      	ldr	r2, [r7, #24]
 800c574:	2145      	movs	r1, #69	; 0x45
 800c576:	5c52      	ldrb	r2, [r2, r1]
 800c578:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c57a:	683a      	ldr	r2, [r7, #0]
 800c57c:	68b9      	ldr	r1, [r7, #8]
 800c57e:	69bb      	ldr	r3, [r7, #24]
 800c580:	0018      	movs	r0, r3
 800c582:	f000 fadd 	bl	800cb40 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c586:	193b      	adds	r3, r7, r4
 800c588:	781b      	ldrb	r3, [r3, #0]
 800c58a:	b25b      	sxtb	r3, r3
 800c58c:	3301      	adds	r3, #1
 800c58e:	d111      	bne.n	800c5b4 <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c590:	69bb      	ldr	r3, [r7, #24]
 800c592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c594:	2b00      	cmp	r3, #0
 800c596:	d016      	beq.n	800c5c6 <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c598:	69bb      	ldr	r3, [r7, #24]
 800c59a:	3324      	adds	r3, #36	; 0x24
 800c59c:	0018      	movs	r0, r3
 800c59e:	f001 f961 	bl	800d864 <xTaskRemoveFromEventList>
 800c5a2:	1e03      	subs	r3, r0, #0
 800c5a4:	d00f      	beq.n	800c5c6 <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d00c      	beq.n	800c5c6 <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2201      	movs	r2, #1
 800c5b0:	601a      	str	r2, [r3, #0]
 800c5b2:	e008      	b.n	800c5c6 <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c5b4:	2313      	movs	r3, #19
 800c5b6:	18fb      	adds	r3, r7, r3
 800c5b8:	781b      	ldrb	r3, [r3, #0]
 800c5ba:	3301      	adds	r3, #1
 800c5bc:	b2db      	uxtb	r3, r3
 800c5be:	b259      	sxtb	r1, r3
 800c5c0:	69bb      	ldr	r3, [r7, #24]
 800c5c2:	2245      	movs	r2, #69	; 0x45
 800c5c4:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	61fb      	str	r3, [r7, #28]
		{
 800c5ca:	e001      	b.n	800c5d0 <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800c5d0:	697b      	ldr	r3, [r7, #20]
 800c5d2:	0018      	movs	r0, r3
 800c5d4:	f002 f83c 	bl	800e650 <vClearInterruptMaskFromISR>

	return xReturn;
 800c5d8:	69fb      	ldr	r3, [r7, #28]
}
 800c5da:	0018      	movs	r0, r3
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	b009      	add	sp, #36	; 0x24
 800c5e0:	bd90      	pop	{r4, r7, pc}

0800c5e2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c5e2:	b580      	push	{r7, lr}
 800c5e4:	b088      	sub	sp, #32
 800c5e6:	af00      	add	r7, sp, #0
 800c5e8:	6078      	str	r0, [r7, #4]
 800c5ea:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c5f0:	69bb      	ldr	r3, [r7, #24]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d101      	bne.n	800c5fa <xQueueGiveFromISR+0x18>
 800c5f6:	b672      	cpsid	i
 800c5f8:	e7fe      	b.n	800c5f8 <xQueueGiveFromISR+0x16>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c5fa:	69bb      	ldr	r3, [r7, #24]
 800c5fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d001      	beq.n	800c606 <xQueueGiveFromISR+0x24>
 800c602:	b672      	cpsid	i
 800c604:	e7fe      	b.n	800c604 <xQueueGiveFromISR+0x22>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800c606:	69bb      	ldr	r3, [r7, #24]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d103      	bne.n	800c616 <xQueueGiveFromISR+0x34>
 800c60e:	69bb      	ldr	r3, [r7, #24]
 800c610:	685b      	ldr	r3, [r3, #4]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d101      	bne.n	800c61a <xQueueGiveFromISR+0x38>
 800c616:	2301      	movs	r3, #1
 800c618:	e000      	b.n	800c61c <xQueueGiveFromISR+0x3a>
 800c61a:	2300      	movs	r3, #0
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d101      	bne.n	800c624 <xQueueGiveFromISR+0x42>
 800c620:	b672      	cpsid	i
 800c622:	e7fe      	b.n	800c622 <xQueueGiveFromISR+0x40>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c624:	f002 f80e 	bl	800e644 <ulSetInterruptMaskFromISR>
 800c628:	0003      	movs	r3, r0
 800c62a:	617b      	str	r3, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c62c:	69bb      	ldr	r3, [r7, #24]
 800c62e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c630:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c632:	69bb      	ldr	r3, [r7, #24]
 800c634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c636:	693a      	ldr	r2, [r7, #16]
 800c638:	429a      	cmp	r2, r3
 800c63a:	d22c      	bcs.n	800c696 <xQueueGiveFromISR+0xb4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c63c:	200f      	movs	r0, #15
 800c63e:	183b      	adds	r3, r7, r0
 800c640:	69ba      	ldr	r2, [r7, #24]
 800c642:	2145      	movs	r1, #69	; 0x45
 800c644:	5c52      	ldrb	r2, [r2, r1]
 800c646:	701a      	strb	r2, [r3, #0]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c648:	693b      	ldr	r3, [r7, #16]
 800c64a:	1c5a      	adds	r2, r3, #1
 800c64c:	69bb      	ldr	r3, [r7, #24]
 800c64e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c650:	183b      	adds	r3, r7, r0
 800c652:	781b      	ldrb	r3, [r3, #0]
 800c654:	b25b      	sxtb	r3, r3
 800c656:	3301      	adds	r3, #1
 800c658:	d111      	bne.n	800c67e <xQueueGiveFromISR+0x9c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c65a:	69bb      	ldr	r3, [r7, #24]
 800c65c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d016      	beq.n	800c690 <xQueueGiveFromISR+0xae>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c662:	69bb      	ldr	r3, [r7, #24]
 800c664:	3324      	adds	r3, #36	; 0x24
 800c666:	0018      	movs	r0, r3
 800c668:	f001 f8fc 	bl	800d864 <xTaskRemoveFromEventList>
 800c66c:	1e03      	subs	r3, r0, #0
 800c66e:	d00f      	beq.n	800c690 <xQueueGiveFromISR+0xae>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d00c      	beq.n	800c690 <xQueueGiveFromISR+0xae>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	2201      	movs	r2, #1
 800c67a:	601a      	str	r2, [r3, #0]
 800c67c:	e008      	b.n	800c690 <xQueueGiveFromISR+0xae>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c67e:	230f      	movs	r3, #15
 800c680:	18fb      	adds	r3, r7, r3
 800c682:	781b      	ldrb	r3, [r3, #0]
 800c684:	3301      	adds	r3, #1
 800c686:	b2db      	uxtb	r3, r3
 800c688:	b259      	sxtb	r1, r3
 800c68a:	69bb      	ldr	r3, [r7, #24]
 800c68c:	2245      	movs	r2, #69	; 0x45
 800c68e:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800c690:	2301      	movs	r3, #1
 800c692:	61fb      	str	r3, [r7, #28]
 800c694:	e001      	b.n	800c69a <xQueueGiveFromISR+0xb8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c696:	2300      	movs	r3, #0
 800c698:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800c69a:	697b      	ldr	r3, [r7, #20]
 800c69c:	0018      	movs	r0, r3
 800c69e:	f001 ffd7 	bl	800e650 <vClearInterruptMaskFromISR>

	return xReturn;
 800c6a2:	69fb      	ldr	r3, [r7, #28]
}
 800c6a4:	0018      	movs	r0, r3
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	b008      	add	sp, #32
 800c6aa:	bd80      	pop	{r7, pc}

0800c6ac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b08a      	sub	sp, #40	; 0x28
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	60f8      	str	r0, [r7, #12]
 800c6b4:	60b9      	str	r1, [r7, #8]
 800c6b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c6c0:	6a3b      	ldr	r3, [r7, #32]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d101      	bne.n	800c6ca <xQueueReceive+0x1e>
 800c6c6:	b672      	cpsid	i
 800c6c8:	e7fe      	b.n	800c6c8 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c6ca:	68bb      	ldr	r3, [r7, #8]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d103      	bne.n	800c6d8 <xQueueReceive+0x2c>
 800c6d0:	6a3b      	ldr	r3, [r7, #32]
 800c6d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d101      	bne.n	800c6dc <xQueueReceive+0x30>
 800c6d8:	2301      	movs	r3, #1
 800c6da:	e000      	b.n	800c6de <xQueueReceive+0x32>
 800c6dc:	2300      	movs	r3, #0
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d101      	bne.n	800c6e6 <xQueueReceive+0x3a>
 800c6e2:	b672      	cpsid	i
 800c6e4:	e7fe      	b.n	800c6e4 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c6e6:	f001 fa5b 	bl	800dba0 <xTaskGetSchedulerState>
 800c6ea:	1e03      	subs	r3, r0, #0
 800c6ec:	d102      	bne.n	800c6f4 <xQueueReceive+0x48>
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d101      	bne.n	800c6f8 <xQueueReceive+0x4c>
 800c6f4:	2301      	movs	r3, #1
 800c6f6:	e000      	b.n	800c6fa <xQueueReceive+0x4e>
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d101      	bne.n	800c702 <xQueueReceive+0x56>
 800c6fe:	b672      	cpsid	i
 800c700:	e7fe      	b.n	800c700 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800c702:	f001 ff75 	bl	800e5f0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c706:	6a3b      	ldr	r3, [r7, #32]
 800c708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c70a:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c70c:	69fb      	ldr	r3, [r7, #28]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d01a      	beq.n	800c748 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c712:	68ba      	ldr	r2, [r7, #8]
 800c714:	6a3b      	ldr	r3, [r7, #32]
 800c716:	0011      	movs	r1, r2
 800c718:	0018      	movs	r0, r3
 800c71a:	f000 fa7c 	bl	800cc16 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c71e:	69fb      	ldr	r3, [r7, #28]
 800c720:	1e5a      	subs	r2, r3, #1
 800c722:	6a3b      	ldr	r3, [r7, #32]
 800c724:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c726:	6a3b      	ldr	r3, [r7, #32]
 800c728:	691b      	ldr	r3, [r3, #16]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d008      	beq.n	800c740 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c72e:	6a3b      	ldr	r3, [r7, #32]
 800c730:	3310      	adds	r3, #16
 800c732:	0018      	movs	r0, r3
 800c734:	f001 f896 	bl	800d864 <xTaskRemoveFromEventList>
 800c738:	1e03      	subs	r3, r0, #0
 800c73a:	d001      	beq.n	800c740 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c73c:	f001 ff48 	bl	800e5d0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c740:	f001 ff68 	bl	800e614 <vPortExitCritical>
				return pdPASS;
 800c744:	2301      	movs	r3, #1
 800c746:	e062      	b.n	800c80e <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d103      	bne.n	800c756 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c74e:	f001 ff61 	bl	800e614 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c752:	2300      	movs	r3, #0
 800c754:	e05b      	b.n	800c80e <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d106      	bne.n	800c76a <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c75c:	2314      	movs	r3, #20
 800c75e:	18fb      	adds	r3, r7, r3
 800c760:	0018      	movs	r0, r3
 800c762:	f001 f8db 	bl	800d91c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c766:	2301      	movs	r3, #1
 800c768:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c76a:	f001 ff53 	bl	800e614 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c76e:	f000 fe81 	bl	800d474 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c772:	f001 ff3d 	bl	800e5f0 <vPortEnterCritical>
 800c776:	6a3b      	ldr	r3, [r7, #32]
 800c778:	2244      	movs	r2, #68	; 0x44
 800c77a:	5c9b      	ldrb	r3, [r3, r2]
 800c77c:	b25b      	sxtb	r3, r3
 800c77e:	3301      	adds	r3, #1
 800c780:	d103      	bne.n	800c78a <xQueueReceive+0xde>
 800c782:	6a3b      	ldr	r3, [r7, #32]
 800c784:	2244      	movs	r2, #68	; 0x44
 800c786:	2100      	movs	r1, #0
 800c788:	5499      	strb	r1, [r3, r2]
 800c78a:	6a3b      	ldr	r3, [r7, #32]
 800c78c:	2245      	movs	r2, #69	; 0x45
 800c78e:	5c9b      	ldrb	r3, [r3, r2]
 800c790:	b25b      	sxtb	r3, r3
 800c792:	3301      	adds	r3, #1
 800c794:	d103      	bne.n	800c79e <xQueueReceive+0xf2>
 800c796:	6a3b      	ldr	r3, [r7, #32]
 800c798:	2245      	movs	r2, #69	; 0x45
 800c79a:	2100      	movs	r1, #0
 800c79c:	5499      	strb	r1, [r3, r2]
 800c79e:	f001 ff39 	bl	800e614 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c7a2:	1d3a      	adds	r2, r7, #4
 800c7a4:	2314      	movs	r3, #20
 800c7a6:	18fb      	adds	r3, r7, r3
 800c7a8:	0011      	movs	r1, r2
 800c7aa:	0018      	movs	r0, r3
 800c7ac:	f001 f8ca 	bl	800d944 <xTaskCheckForTimeOut>
 800c7b0:	1e03      	subs	r3, r0, #0
 800c7b2:	d11e      	bne.n	800c7f2 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c7b4:	6a3b      	ldr	r3, [r7, #32]
 800c7b6:	0018      	movs	r0, r3
 800c7b8:	f000 fab1 	bl	800cd1e <prvIsQueueEmpty>
 800c7bc:	1e03      	subs	r3, r0, #0
 800c7be:	d011      	beq.n	800c7e4 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c7c0:	6a3b      	ldr	r3, [r7, #32]
 800c7c2:	3324      	adds	r3, #36	; 0x24
 800c7c4:	687a      	ldr	r2, [r7, #4]
 800c7c6:	0011      	movs	r1, r2
 800c7c8:	0018      	movs	r0, r3
 800c7ca:	f001 f807 	bl	800d7dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c7ce:	6a3b      	ldr	r3, [r7, #32]
 800c7d0:	0018      	movs	r0, r3
 800c7d2:	f000 fa46 	bl	800cc62 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c7d6:	f000 fe59 	bl	800d48c <xTaskResumeAll>
 800c7da:	1e03      	subs	r3, r0, #0
 800c7dc:	d191      	bne.n	800c702 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 800c7de:	f001 fef7 	bl	800e5d0 <vPortYield>
 800c7e2:	e78e      	b.n	800c702 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c7e4:	6a3b      	ldr	r3, [r7, #32]
 800c7e6:	0018      	movs	r0, r3
 800c7e8:	f000 fa3b 	bl	800cc62 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c7ec:	f000 fe4e 	bl	800d48c <xTaskResumeAll>
 800c7f0:	e787      	b.n	800c702 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c7f2:	6a3b      	ldr	r3, [r7, #32]
 800c7f4:	0018      	movs	r0, r3
 800c7f6:	f000 fa34 	bl	800cc62 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c7fa:	f000 fe47 	bl	800d48c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c7fe:	6a3b      	ldr	r3, [r7, #32]
 800c800:	0018      	movs	r0, r3
 800c802:	f000 fa8c 	bl	800cd1e <prvIsQueueEmpty>
 800c806:	1e03      	subs	r3, r0, #0
 800c808:	d100      	bne.n	800c80c <xQueueReceive+0x160>
 800c80a:	e77a      	b.n	800c702 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c80c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800c80e:	0018      	movs	r0, r3
 800c810:	46bd      	mov	sp, r7
 800c812:	b00a      	add	sp, #40	; 0x28
 800c814:	bd80      	pop	{r7, pc}

0800c816 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c816:	b580      	push	{r7, lr}
 800c818:	b08a      	sub	sp, #40	; 0x28
 800c81a:	af00      	add	r7, sp, #0
 800c81c:	6078      	str	r0, [r7, #4]
 800c81e:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c820:	2300      	movs	r3, #0
 800c822:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c828:	2300      	movs	r3, #0
 800c82a:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c82c:	69fb      	ldr	r3, [r7, #28]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d101      	bne.n	800c836 <xQueueSemaphoreTake+0x20>
 800c832:	b672      	cpsid	i
 800c834:	e7fe      	b.n	800c834 <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c836:	69fb      	ldr	r3, [r7, #28]
 800c838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d001      	beq.n	800c842 <xQueueSemaphoreTake+0x2c>
 800c83e:	b672      	cpsid	i
 800c840:	e7fe      	b.n	800c840 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c842:	f001 f9ad 	bl	800dba0 <xTaskGetSchedulerState>
 800c846:	1e03      	subs	r3, r0, #0
 800c848:	d102      	bne.n	800c850 <xQueueSemaphoreTake+0x3a>
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d101      	bne.n	800c854 <xQueueSemaphoreTake+0x3e>
 800c850:	2301      	movs	r3, #1
 800c852:	e000      	b.n	800c856 <xQueueSemaphoreTake+0x40>
 800c854:	2300      	movs	r3, #0
 800c856:	2b00      	cmp	r3, #0
 800c858:	d101      	bne.n	800c85e <xQueueSemaphoreTake+0x48>
 800c85a:	b672      	cpsid	i
 800c85c:	e7fe      	b.n	800c85c <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800c85e:	f001 fec7 	bl	800e5f0 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c862:	69fb      	ldr	r3, [r7, #28]
 800c864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c866:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c868:	69bb      	ldr	r3, [r7, #24]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d01d      	beq.n	800c8aa <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c86e:	69bb      	ldr	r3, [r7, #24]
 800c870:	1e5a      	subs	r2, r3, #1
 800c872:	69fb      	ldr	r3, [r7, #28]
 800c874:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c876:	69fb      	ldr	r3, [r7, #28]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d104      	bne.n	800c888 <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800c87e:	f001 fae9 	bl	800de54 <pvTaskIncrementMutexHeldCount>
 800c882:	0002      	movs	r2, r0
 800c884:	69fb      	ldr	r3, [r7, #28]
 800c886:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c888:	69fb      	ldr	r3, [r7, #28]
 800c88a:	691b      	ldr	r3, [r3, #16]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d008      	beq.n	800c8a2 <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c890:	69fb      	ldr	r3, [r7, #28]
 800c892:	3310      	adds	r3, #16
 800c894:	0018      	movs	r0, r3
 800c896:	f000 ffe5 	bl	800d864 <xTaskRemoveFromEventList>
 800c89a:	1e03      	subs	r3, r0, #0
 800c89c:	d001      	beq.n	800c8a2 <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c89e:	f001 fe97 	bl	800e5d0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c8a2:	f001 feb7 	bl	800e614 <vPortExitCritical>
				return pdPASS;
 800c8a6:	2301      	movs	r3, #1
 800c8a8:	e08b      	b.n	800c9c2 <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d108      	bne.n	800c8c2 <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c8b0:	6a3b      	ldr	r3, [r7, #32]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d001      	beq.n	800c8ba <xQueueSemaphoreTake+0xa4>
 800c8b6:	b672      	cpsid	i
 800c8b8:	e7fe      	b.n	800c8b8 <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c8ba:	f001 feab 	bl	800e614 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c8be:	2300      	movs	r3, #0
 800c8c0:	e07f      	b.n	800c9c2 <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d106      	bne.n	800c8d6 <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c8c8:	230c      	movs	r3, #12
 800c8ca:	18fb      	adds	r3, r7, r3
 800c8cc:	0018      	movs	r0, r3
 800c8ce:	f001 f825 	bl	800d91c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c8d6:	f001 fe9d 	bl	800e614 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c8da:	f000 fdcb 	bl	800d474 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c8de:	f001 fe87 	bl	800e5f0 <vPortEnterCritical>
 800c8e2:	69fb      	ldr	r3, [r7, #28]
 800c8e4:	2244      	movs	r2, #68	; 0x44
 800c8e6:	5c9b      	ldrb	r3, [r3, r2]
 800c8e8:	b25b      	sxtb	r3, r3
 800c8ea:	3301      	adds	r3, #1
 800c8ec:	d103      	bne.n	800c8f6 <xQueueSemaphoreTake+0xe0>
 800c8ee:	69fb      	ldr	r3, [r7, #28]
 800c8f0:	2244      	movs	r2, #68	; 0x44
 800c8f2:	2100      	movs	r1, #0
 800c8f4:	5499      	strb	r1, [r3, r2]
 800c8f6:	69fb      	ldr	r3, [r7, #28]
 800c8f8:	2245      	movs	r2, #69	; 0x45
 800c8fa:	5c9b      	ldrb	r3, [r3, r2]
 800c8fc:	b25b      	sxtb	r3, r3
 800c8fe:	3301      	adds	r3, #1
 800c900:	d103      	bne.n	800c90a <xQueueSemaphoreTake+0xf4>
 800c902:	69fb      	ldr	r3, [r7, #28]
 800c904:	2245      	movs	r2, #69	; 0x45
 800c906:	2100      	movs	r1, #0
 800c908:	5499      	strb	r1, [r3, r2]
 800c90a:	f001 fe83 	bl	800e614 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c90e:	003a      	movs	r2, r7
 800c910:	230c      	movs	r3, #12
 800c912:	18fb      	adds	r3, r7, r3
 800c914:	0011      	movs	r1, r2
 800c916:	0018      	movs	r0, r3
 800c918:	f001 f814 	bl	800d944 <xTaskCheckForTimeOut>
 800c91c:	1e03      	subs	r3, r0, #0
 800c91e:	d12e      	bne.n	800c97e <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c920:	69fb      	ldr	r3, [r7, #28]
 800c922:	0018      	movs	r0, r3
 800c924:	f000 f9fb 	bl	800cd1e <prvIsQueueEmpty>
 800c928:	1e03      	subs	r3, r0, #0
 800c92a:	d021      	beq.n	800c970 <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c92c:	69fb      	ldr	r3, [r7, #28]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d10a      	bne.n	800c94a <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
 800c934:	f001 fe5c 	bl	800e5f0 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800c938:	69fb      	ldr	r3, [r7, #28]
 800c93a:	685b      	ldr	r3, [r3, #4]
 800c93c:	0018      	movs	r0, r3
 800c93e:	f001 f94b 	bl	800dbd8 <xTaskPriorityInherit>
 800c942:	0003      	movs	r3, r0
 800c944:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 800c946:	f001 fe65 	bl	800e614 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c94a:	69fb      	ldr	r3, [r7, #28]
 800c94c:	3324      	adds	r3, #36	; 0x24
 800c94e:	683a      	ldr	r2, [r7, #0]
 800c950:	0011      	movs	r1, r2
 800c952:	0018      	movs	r0, r3
 800c954:	f000 ff42 	bl	800d7dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c958:	69fb      	ldr	r3, [r7, #28]
 800c95a:	0018      	movs	r0, r3
 800c95c:	f000 f981 	bl	800cc62 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c960:	f000 fd94 	bl	800d48c <xTaskResumeAll>
 800c964:	1e03      	subs	r3, r0, #0
 800c966:	d000      	beq.n	800c96a <xQueueSemaphoreTake+0x154>
 800c968:	e779      	b.n	800c85e <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
 800c96a:	f001 fe31 	bl	800e5d0 <vPortYield>
 800c96e:	e776      	b.n	800c85e <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c970:	69fb      	ldr	r3, [r7, #28]
 800c972:	0018      	movs	r0, r3
 800c974:	f000 f975 	bl	800cc62 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c978:	f000 fd88 	bl	800d48c <xTaskResumeAll>
 800c97c:	e76f      	b.n	800c85e <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c97e:	69fb      	ldr	r3, [r7, #28]
 800c980:	0018      	movs	r0, r3
 800c982:	f000 f96e 	bl	800cc62 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c986:	f000 fd81 	bl	800d48c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c98a:	69fb      	ldr	r3, [r7, #28]
 800c98c:	0018      	movs	r0, r3
 800c98e:	f000 f9c6 	bl	800cd1e <prvIsQueueEmpty>
 800c992:	1e03      	subs	r3, r0, #0
 800c994:	d100      	bne.n	800c998 <xQueueSemaphoreTake+0x182>
 800c996:	e762      	b.n	800c85e <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c998:	6a3b      	ldr	r3, [r7, #32]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d010      	beq.n	800c9c0 <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
 800c99e:	f001 fe27 	bl	800e5f0 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c9a2:	69fb      	ldr	r3, [r7, #28]
 800c9a4:	0018      	movs	r0, r3
 800c9a6:	f000 f8b5 	bl	800cb14 <prvGetDisinheritPriorityAfterTimeout>
 800c9aa:	0003      	movs	r3, r0
 800c9ac:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800c9ae:	69fb      	ldr	r3, [r7, #28]
 800c9b0:	685b      	ldr	r3, [r3, #4]
 800c9b2:	697a      	ldr	r2, [r7, #20]
 800c9b4:	0011      	movs	r1, r2
 800c9b6:	0018      	movs	r0, r3
 800c9b8:	f001 f9d8 	bl	800dd6c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c9bc:	f001 fe2a 	bl	800e614 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c9c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800c9c2:	0018      	movs	r0, r3
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	b00a      	add	sp, #40	; 0x28
 800c9c8:	bd80      	pop	{r7, pc}

0800c9ca <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c9ca:	b590      	push	{r4, r7, lr}
 800c9cc:	b08b      	sub	sp, #44	; 0x2c
 800c9ce:	af00      	add	r7, sp, #0
 800c9d0:	60f8      	str	r0, [r7, #12]
 800c9d2:	60b9      	str	r1, [r7, #8]
 800c9d4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800c9da:	6a3b      	ldr	r3, [r7, #32]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d101      	bne.n	800c9e4 <xQueueReceiveFromISR+0x1a>
 800c9e0:	b672      	cpsid	i
 800c9e2:	e7fe      	b.n	800c9e2 <xQueueReceiveFromISR+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c9e4:	68bb      	ldr	r3, [r7, #8]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d103      	bne.n	800c9f2 <xQueueReceiveFromISR+0x28>
 800c9ea:	6a3b      	ldr	r3, [r7, #32]
 800c9ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d101      	bne.n	800c9f6 <xQueueReceiveFromISR+0x2c>
 800c9f2:	2301      	movs	r3, #1
 800c9f4:	e000      	b.n	800c9f8 <xQueueReceiveFromISR+0x2e>
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d101      	bne.n	800ca00 <xQueueReceiveFromISR+0x36>
 800c9fc:	b672      	cpsid	i
 800c9fe:	e7fe      	b.n	800c9fe <xQueueReceiveFromISR+0x34>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ca00:	f001 fe20 	bl	800e644 <ulSetInterruptMaskFromISR>
 800ca04:	0003      	movs	r3, r0
 800ca06:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ca08:	6a3b      	ldr	r3, [r7, #32]
 800ca0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca0c:	61bb      	str	r3, [r7, #24]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ca0e:	69bb      	ldr	r3, [r7, #24]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d032      	beq.n	800ca7a <xQueueReceiveFromISR+0xb0>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ca14:	2417      	movs	r4, #23
 800ca16:	193b      	adds	r3, r7, r4
 800ca18:	6a3a      	ldr	r2, [r7, #32]
 800ca1a:	2144      	movs	r1, #68	; 0x44
 800ca1c:	5c52      	ldrb	r2, [r2, r1]
 800ca1e:	701a      	strb	r2, [r3, #0]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ca20:	68ba      	ldr	r2, [r7, #8]
 800ca22:	6a3b      	ldr	r3, [r7, #32]
 800ca24:	0011      	movs	r1, r2
 800ca26:	0018      	movs	r0, r3
 800ca28:	f000 f8f5 	bl	800cc16 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ca2c:	69bb      	ldr	r3, [r7, #24]
 800ca2e:	1e5a      	subs	r2, r3, #1
 800ca30:	6a3b      	ldr	r3, [r7, #32]
 800ca32:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ca34:	193b      	adds	r3, r7, r4
 800ca36:	781b      	ldrb	r3, [r3, #0]
 800ca38:	b25b      	sxtb	r3, r3
 800ca3a:	3301      	adds	r3, #1
 800ca3c:	d111      	bne.n	800ca62 <xQueueReceiveFromISR+0x98>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca3e:	6a3b      	ldr	r3, [r7, #32]
 800ca40:	691b      	ldr	r3, [r3, #16]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d016      	beq.n	800ca74 <xQueueReceiveFromISR+0xaa>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca46:	6a3b      	ldr	r3, [r7, #32]
 800ca48:	3310      	adds	r3, #16
 800ca4a:	0018      	movs	r0, r3
 800ca4c:	f000 ff0a 	bl	800d864 <xTaskRemoveFromEventList>
 800ca50:	1e03      	subs	r3, r0, #0
 800ca52:	d00f      	beq.n	800ca74 <xQueueReceiveFromISR+0xaa>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d00c      	beq.n	800ca74 <xQueueReceiveFromISR+0xaa>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	2201      	movs	r2, #1
 800ca5e:	601a      	str	r2, [r3, #0]
 800ca60:	e008      	b.n	800ca74 <xQueueReceiveFromISR+0xaa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ca62:	2317      	movs	r3, #23
 800ca64:	18fb      	adds	r3, r7, r3
 800ca66:	781b      	ldrb	r3, [r3, #0]
 800ca68:	3301      	adds	r3, #1
 800ca6a:	b2db      	uxtb	r3, r3
 800ca6c:	b259      	sxtb	r1, r3
 800ca6e:	6a3b      	ldr	r3, [r7, #32]
 800ca70:	2244      	movs	r2, #68	; 0x44
 800ca72:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800ca74:	2301      	movs	r3, #1
 800ca76:	627b      	str	r3, [r7, #36]	; 0x24
 800ca78:	e001      	b.n	800ca7e <xQueueReceiveFromISR+0xb4>
		}
		else
		{
			xReturn = pdFAIL;
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	627b      	str	r3, [r7, #36]	; 0x24
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800ca7e:	69fb      	ldr	r3, [r7, #28]
 800ca80:	0018      	movs	r0, r3
 800ca82:	f001 fde5 	bl	800e650 <vClearInterruptMaskFromISR>

	return xReturn;
 800ca86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ca88:	0018      	movs	r0, r3
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	b00b      	add	sp, #44	; 0x2c
 800ca8e:	bd90      	pop	{r4, r7, pc}

0800ca90 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b084      	sub	sp, #16
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d101      	bne.n	800caa2 <uxQueueMessagesWaiting+0x12>
 800ca9e:	b672      	cpsid	i
 800caa0:	e7fe      	b.n	800caa0 <uxQueueMessagesWaiting+0x10>

	taskENTER_CRITICAL();
 800caa2:	f001 fda5 	bl	800e5f0 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caaa:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800caac:	f001 fdb2 	bl	800e614 <vPortExitCritical>

	return uxReturn;
 800cab0:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800cab2:	0018      	movs	r0, r3
 800cab4:	46bd      	mov	sp, r7
 800cab6:	b004      	add	sp, #16
 800cab8:	bd80      	pop	{r7, pc}

0800caba <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800caba:	b580      	push	{r7, lr}
 800cabc:	b084      	sub	sp, #16
 800cabe:	af00      	add	r7, sp, #0
 800cac0:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d101      	bne.n	800cacc <uxQueueMessagesWaitingFromISR+0x12>
 800cac8:	b672      	cpsid	i
 800caca:	e7fe      	b.n	800caca <uxQueueMessagesWaitingFromISR+0x10>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cad0:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 800cad2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800cad4:	0018      	movs	r0, r3
 800cad6:	46bd      	mov	sp, r7
 800cad8:	b004      	add	sp, #16
 800cada:	bd80      	pop	{r7, pc}

0800cadc <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b084      	sub	sp, #16
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d101      	bne.n	800caf2 <vQueueDelete+0x16>
 800caee:	b672      	cpsid	i
 800caf0:	e7fe      	b.n	800caf0 <vQueueDelete+0x14>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	0018      	movs	r0, r3
 800caf6:	f000 f969 	bl	800cdcc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	2246      	movs	r2, #70	; 0x46
 800cafe:	5c9b      	ldrb	r3, [r3, r2]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d103      	bne.n	800cb0c <vQueueDelete+0x30>
		{
			vPortFree( pxQueue );
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	0018      	movs	r0, r3
 800cb08:	f001 feb0 	bl	800e86c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800cb0c:	46c0      	nop			; (mov r8, r8)
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	b004      	add	sp, #16
 800cb12:	bd80      	pop	{r7, pc}

0800cb14 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b084      	sub	sp, #16
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d006      	beq.n	800cb32 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	2238      	movs	r2, #56	; 0x38
 800cb2c:	1ad3      	subs	r3, r2, r3
 800cb2e:	60fb      	str	r3, [r7, #12]
 800cb30:	e001      	b.n	800cb36 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800cb32:	2300      	movs	r3, #0
 800cb34:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800cb36:	68fb      	ldr	r3, [r7, #12]
	}
 800cb38:	0018      	movs	r0, r3
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	b004      	add	sp, #16
 800cb3e:	bd80      	pop	{r7, pc}

0800cb40 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b086      	sub	sp, #24
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	60f8      	str	r0, [r7, #12]
 800cb48:	60b9      	str	r1, [r7, #8]
 800cb4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb54:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d10e      	bne.n	800cb7c <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d14e      	bne.n	800cc04 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	685b      	ldr	r3, [r3, #4]
 800cb6a:	0018      	movs	r0, r3
 800cb6c:	f001 f8a2 	bl	800dcb4 <xTaskPriorityDisinherit>
 800cb70:	0003      	movs	r3, r0
 800cb72:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	2200      	movs	r2, #0
 800cb78:	605a      	str	r2, [r3, #4]
 800cb7a:	e043      	b.n	800cc04 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d119      	bne.n	800cbb6 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	6898      	ldr	r0, [r3, #8]
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cb8a:	68bb      	ldr	r3, [r7, #8]
 800cb8c:	0019      	movs	r1, r3
 800cb8e:	f002 f8a2 	bl	800ecd6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	689a      	ldr	r2, [r3, #8]
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb9a:	18d2      	adds	r2, r2, r3
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	689a      	ldr	r2, [r3, #8]
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	685b      	ldr	r3, [r3, #4]
 800cba8:	429a      	cmp	r2, r3
 800cbaa:	d32b      	bcc.n	800cc04 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	681a      	ldr	r2, [r3, #0]
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	609a      	str	r2, [r3, #8]
 800cbb4:	e026      	b.n	800cc04 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	68d8      	ldr	r0, [r3, #12]
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cbbe:	68bb      	ldr	r3, [r7, #8]
 800cbc0:	0019      	movs	r1, r3
 800cbc2:	f002 f888 	bl	800ecd6 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	68da      	ldr	r2, [r3, #12]
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbce:	425b      	negs	r3, r3
 800cbd0:	18d2      	adds	r2, r2, r3
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	68da      	ldr	r2, [r3, #12]
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	429a      	cmp	r2, r3
 800cbe0:	d207      	bcs.n	800cbf2 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	685a      	ldr	r2, [r3, #4]
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbea:	425b      	negs	r3, r3
 800cbec:	18d2      	adds	r2, r2, r3
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	2b02      	cmp	r3, #2
 800cbf6:	d105      	bne.n	800cc04 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cbf8:	693b      	ldr	r3, [r7, #16]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d002      	beq.n	800cc04 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cbfe:	693b      	ldr	r3, [r7, #16]
 800cc00:	3b01      	subs	r3, #1
 800cc02:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cc04:	693b      	ldr	r3, [r7, #16]
 800cc06:	1c5a      	adds	r2, r3, #1
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800cc0c:	697b      	ldr	r3, [r7, #20]
}
 800cc0e:	0018      	movs	r0, r3
 800cc10:	46bd      	mov	sp, r7
 800cc12:	b006      	add	sp, #24
 800cc14:	bd80      	pop	{r7, pc}

0800cc16 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cc16:	b580      	push	{r7, lr}
 800cc18:	b082      	sub	sp, #8
 800cc1a:	af00      	add	r7, sp, #0
 800cc1c:	6078      	str	r0, [r7, #4]
 800cc1e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d018      	beq.n	800cc5a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	68da      	ldr	r2, [r3, #12]
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc30:	18d2      	adds	r2, r2, r3
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	68da      	ldr	r2, [r3, #12]
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	685b      	ldr	r3, [r3, #4]
 800cc3e:	429a      	cmp	r2, r3
 800cc40:	d303      	bcc.n	800cc4a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681a      	ldr	r2, [r3, #0]
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	68d9      	ldr	r1, [r3, #12]
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	0018      	movs	r0, r3
 800cc56:	f002 f83e 	bl	800ecd6 <memcpy>
	}
}
 800cc5a:	46c0      	nop			; (mov r8, r8)
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	b002      	add	sp, #8
 800cc60:	bd80      	pop	{r7, pc}

0800cc62 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cc62:	b580      	push	{r7, lr}
 800cc64:	b084      	sub	sp, #16
 800cc66:	af00      	add	r7, sp, #0
 800cc68:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cc6a:	f001 fcc1 	bl	800e5f0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cc6e:	230f      	movs	r3, #15
 800cc70:	18fb      	adds	r3, r7, r3
 800cc72:	687a      	ldr	r2, [r7, #4]
 800cc74:	2145      	movs	r1, #69	; 0x45
 800cc76:	5c52      	ldrb	r2, [r2, r1]
 800cc78:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cc7a:	e013      	b.n	800cca4 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d016      	beq.n	800ccb2 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	3324      	adds	r3, #36	; 0x24
 800cc88:	0018      	movs	r0, r3
 800cc8a:	f000 fdeb 	bl	800d864 <xTaskRemoveFromEventList>
 800cc8e:	1e03      	subs	r3, r0, #0
 800cc90:	d001      	beq.n	800cc96 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cc92:	f000 fea7 	bl	800d9e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cc96:	210f      	movs	r1, #15
 800cc98:	187b      	adds	r3, r7, r1
 800cc9a:	781b      	ldrb	r3, [r3, #0]
 800cc9c:	3b01      	subs	r3, #1
 800cc9e:	b2da      	uxtb	r2, r3
 800cca0:	187b      	adds	r3, r7, r1
 800cca2:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cca4:	230f      	movs	r3, #15
 800cca6:	18fb      	adds	r3, r7, r3
 800cca8:	781b      	ldrb	r3, [r3, #0]
 800ccaa:	b25b      	sxtb	r3, r3
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	dce5      	bgt.n	800cc7c <prvUnlockQueue+0x1a>
 800ccb0:	e000      	b.n	800ccb4 <prvUnlockQueue+0x52>
					break;
 800ccb2:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2245      	movs	r2, #69	; 0x45
 800ccb8:	21ff      	movs	r1, #255	; 0xff
 800ccba:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800ccbc:	f001 fcaa 	bl	800e614 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ccc0:	f001 fc96 	bl	800e5f0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ccc4:	230e      	movs	r3, #14
 800ccc6:	18fb      	adds	r3, r7, r3
 800ccc8:	687a      	ldr	r2, [r7, #4]
 800ccca:	2144      	movs	r1, #68	; 0x44
 800cccc:	5c52      	ldrb	r2, [r2, r1]
 800ccce:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ccd0:	e013      	b.n	800ccfa <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	691b      	ldr	r3, [r3, #16]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d016      	beq.n	800cd08 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	3310      	adds	r3, #16
 800ccde:	0018      	movs	r0, r3
 800cce0:	f000 fdc0 	bl	800d864 <xTaskRemoveFromEventList>
 800cce4:	1e03      	subs	r3, r0, #0
 800cce6:	d001      	beq.n	800ccec <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 800cce8:	f000 fe7c 	bl	800d9e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ccec:	210e      	movs	r1, #14
 800ccee:	187b      	adds	r3, r7, r1
 800ccf0:	781b      	ldrb	r3, [r3, #0]
 800ccf2:	3b01      	subs	r3, #1
 800ccf4:	b2da      	uxtb	r2, r3
 800ccf6:	187b      	adds	r3, r7, r1
 800ccf8:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ccfa:	230e      	movs	r3, #14
 800ccfc:	18fb      	adds	r3, r7, r3
 800ccfe:	781b      	ldrb	r3, [r3, #0]
 800cd00:	b25b      	sxtb	r3, r3
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	dce5      	bgt.n	800ccd2 <prvUnlockQueue+0x70>
 800cd06:	e000      	b.n	800cd0a <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 800cd08:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	2244      	movs	r2, #68	; 0x44
 800cd0e:	21ff      	movs	r1, #255	; 0xff
 800cd10:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800cd12:	f001 fc7f 	bl	800e614 <vPortExitCritical>
}
 800cd16:	46c0      	nop			; (mov r8, r8)
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	b004      	add	sp, #16
 800cd1c:	bd80      	pop	{r7, pc}

0800cd1e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cd1e:	b580      	push	{r7, lr}
 800cd20:	b084      	sub	sp, #16
 800cd22:	af00      	add	r7, sp, #0
 800cd24:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cd26:	f001 fc63 	bl	800e5f0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d102      	bne.n	800cd38 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cd32:	2301      	movs	r3, #1
 800cd34:	60fb      	str	r3, [r7, #12]
 800cd36:	e001      	b.n	800cd3c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cd38:	2300      	movs	r3, #0
 800cd3a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cd3c:	f001 fc6a 	bl	800e614 <vPortExitCritical>

	return xReturn;
 800cd40:	68fb      	ldr	r3, [r7, #12]
}
 800cd42:	0018      	movs	r0, r3
 800cd44:	46bd      	mov	sp, r7
 800cd46:	b004      	add	sp, #16
 800cd48:	bd80      	pop	{r7, pc}

0800cd4a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cd4a:	b580      	push	{r7, lr}
 800cd4c:	b084      	sub	sp, #16
 800cd4e:	af00      	add	r7, sp, #0
 800cd50:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cd52:	f001 fc4d 	bl	800e5f0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd5e:	429a      	cmp	r2, r3
 800cd60:	d102      	bne.n	800cd68 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cd62:	2301      	movs	r3, #1
 800cd64:	60fb      	str	r3, [r7, #12]
 800cd66:	e001      	b.n	800cd6c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cd68:	2300      	movs	r3, #0
 800cd6a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cd6c:	f001 fc52 	bl	800e614 <vPortExitCritical>

	return xReturn;
 800cd70:	68fb      	ldr	r3, [r7, #12]
}
 800cd72:	0018      	movs	r0, r3
 800cd74:	46bd      	mov	sp, r7
 800cd76:	b004      	add	sp, #16
 800cd78:	bd80      	pop	{r7, pc}
	...

0800cd7c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b084      	sub	sp, #16
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
 800cd84:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cd86:	2300      	movs	r3, #0
 800cd88:	60fb      	str	r3, [r7, #12]
 800cd8a:	e015      	b.n	800cdb8 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cd8c:	4b0e      	ldr	r3, [pc, #56]	; (800cdc8 <vQueueAddToRegistry+0x4c>)
 800cd8e:	68fa      	ldr	r2, [r7, #12]
 800cd90:	00d2      	lsls	r2, r2, #3
 800cd92:	58d3      	ldr	r3, [r2, r3]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d10c      	bne.n	800cdb2 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cd98:	4b0b      	ldr	r3, [pc, #44]	; (800cdc8 <vQueueAddToRegistry+0x4c>)
 800cd9a:	68fa      	ldr	r2, [r7, #12]
 800cd9c:	00d2      	lsls	r2, r2, #3
 800cd9e:	6839      	ldr	r1, [r7, #0]
 800cda0:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cda2:	4a09      	ldr	r2, [pc, #36]	; (800cdc8 <vQueueAddToRegistry+0x4c>)
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	00db      	lsls	r3, r3, #3
 800cda8:	18d3      	adds	r3, r2, r3
 800cdaa:	3304      	adds	r3, #4
 800cdac:	687a      	ldr	r2, [r7, #4]
 800cdae:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cdb0:	e006      	b.n	800cdc0 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	3301      	adds	r3, #1
 800cdb6:	60fb      	str	r3, [r7, #12]
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	2b07      	cmp	r3, #7
 800cdbc:	d9e6      	bls.n	800cd8c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cdbe:	46c0      	nop			; (mov r8, r8)
 800cdc0:	46c0      	nop			; (mov r8, r8)
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	b004      	add	sp, #16
 800cdc6:	bd80      	pop	{r7, pc}
 800cdc8:	20000b14 	.word	0x20000b14

0800cdcc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b084      	sub	sp, #16
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	60fb      	str	r3, [r7, #12]
 800cdd8:	e018      	b.n	800ce0c <vQueueUnregisterQueue+0x40>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800cdda:	4a10      	ldr	r2, [pc, #64]	; (800ce1c <vQueueUnregisterQueue+0x50>)
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	00db      	lsls	r3, r3, #3
 800cde0:	18d3      	adds	r3, r2, r3
 800cde2:	3304      	adds	r3, #4
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	687a      	ldr	r2, [r7, #4]
 800cde8:	429a      	cmp	r2, r3
 800cdea:	d10c      	bne.n	800ce06 <vQueueUnregisterQueue+0x3a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800cdec:	4b0b      	ldr	r3, [pc, #44]	; (800ce1c <vQueueUnregisterQueue+0x50>)
 800cdee:	68fa      	ldr	r2, [r7, #12]
 800cdf0:	00d2      	lsls	r2, r2, #3
 800cdf2:	2100      	movs	r1, #0
 800cdf4:	50d1      	str	r1, [r2, r3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800cdf6:	4a09      	ldr	r2, [pc, #36]	; (800ce1c <vQueueUnregisterQueue+0x50>)
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	00db      	lsls	r3, r3, #3
 800cdfc:	18d3      	adds	r3, r2, r3
 800cdfe:	3304      	adds	r3, #4
 800ce00:	2200      	movs	r2, #0
 800ce02:	601a      	str	r2, [r3, #0]
				break;
 800ce04:	e006      	b.n	800ce14 <vQueueUnregisterQueue+0x48>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	3301      	adds	r3, #1
 800ce0a:	60fb      	str	r3, [r7, #12]
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	2b07      	cmp	r3, #7
 800ce10:	d9e3      	bls.n	800cdda <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ce12:	46c0      	nop			; (mov r8, r8)
 800ce14:	46c0      	nop			; (mov r8, r8)
 800ce16:	46bd      	mov	sp, r7
 800ce18:	b004      	add	sp, #16
 800ce1a:	bd80      	pop	{r7, pc}
 800ce1c:	20000b14 	.word	0x20000b14

0800ce20 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b086      	sub	sp, #24
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	60f8      	str	r0, [r7, #12]
 800ce28:	60b9      	str	r1, [r7, #8]
 800ce2a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ce30:	f001 fbde 	bl	800e5f0 <vPortEnterCritical>
 800ce34:	697b      	ldr	r3, [r7, #20]
 800ce36:	2244      	movs	r2, #68	; 0x44
 800ce38:	5c9b      	ldrb	r3, [r3, r2]
 800ce3a:	b25b      	sxtb	r3, r3
 800ce3c:	3301      	adds	r3, #1
 800ce3e:	d103      	bne.n	800ce48 <vQueueWaitForMessageRestricted+0x28>
 800ce40:	697b      	ldr	r3, [r7, #20]
 800ce42:	2244      	movs	r2, #68	; 0x44
 800ce44:	2100      	movs	r1, #0
 800ce46:	5499      	strb	r1, [r3, r2]
 800ce48:	697b      	ldr	r3, [r7, #20]
 800ce4a:	2245      	movs	r2, #69	; 0x45
 800ce4c:	5c9b      	ldrb	r3, [r3, r2]
 800ce4e:	b25b      	sxtb	r3, r3
 800ce50:	3301      	adds	r3, #1
 800ce52:	d103      	bne.n	800ce5c <vQueueWaitForMessageRestricted+0x3c>
 800ce54:	697b      	ldr	r3, [r7, #20]
 800ce56:	2245      	movs	r2, #69	; 0x45
 800ce58:	2100      	movs	r1, #0
 800ce5a:	5499      	strb	r1, [r3, r2]
 800ce5c:	f001 fbda 	bl	800e614 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ce60:	697b      	ldr	r3, [r7, #20]
 800ce62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d106      	bne.n	800ce76 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ce68:	697b      	ldr	r3, [r7, #20]
 800ce6a:	3324      	adds	r3, #36	; 0x24
 800ce6c:	687a      	ldr	r2, [r7, #4]
 800ce6e:	68b9      	ldr	r1, [r7, #8]
 800ce70:	0018      	movs	r0, r3
 800ce72:	f000 fcd1 	bl	800d818 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ce76:	697b      	ldr	r3, [r7, #20]
 800ce78:	0018      	movs	r0, r3
 800ce7a:	f7ff fef2 	bl	800cc62 <prvUnlockQueue>
	}
 800ce7e:	46c0      	nop			; (mov r8, r8)
 800ce80:	46bd      	mov	sp, r7
 800ce82:	b006      	add	sp, #24
 800ce84:	bd80      	pop	{r7, pc}

0800ce86 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ce86:	b590      	push	{r4, r7, lr}
 800ce88:	b08d      	sub	sp, #52	; 0x34
 800ce8a:	af04      	add	r7, sp, #16
 800ce8c:	60f8      	str	r0, [r7, #12]
 800ce8e:	60b9      	str	r1, [r7, #8]
 800ce90:	607a      	str	r2, [r7, #4]
 800ce92:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ce94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d101      	bne.n	800ce9e <xTaskCreateStatic+0x18>
 800ce9a:	b672      	cpsid	i
 800ce9c:	e7fe      	b.n	800ce9c <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800ce9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d101      	bne.n	800cea8 <xTaskCreateStatic+0x22>
 800cea4:	b672      	cpsid	i
 800cea6:	e7fe      	b.n	800cea6 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cea8:	23bc      	movs	r3, #188	; 0xbc
 800ceaa:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ceac:	697b      	ldr	r3, [r7, #20]
 800ceae:	2bbc      	cmp	r3, #188	; 0xbc
 800ceb0:	d001      	beq.n	800ceb6 <xTaskCreateStatic+0x30>
 800ceb2:	b672      	cpsid	i
 800ceb4:	e7fe      	b.n	800ceb4 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ceb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d020      	beq.n	800cefe <xTaskCreateStatic+0x78>
 800cebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d01d      	beq.n	800cefe <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cec4:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cec6:	69fb      	ldr	r3, [r7, #28]
 800cec8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ceca:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cecc:	69fb      	ldr	r3, [r7, #28]
 800cece:	22b9      	movs	r2, #185	; 0xb9
 800ced0:	2102      	movs	r1, #2
 800ced2:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ced4:	683c      	ldr	r4, [r7, #0]
 800ced6:	687a      	ldr	r2, [r7, #4]
 800ced8:	68b9      	ldr	r1, [r7, #8]
 800ceda:	68f8      	ldr	r0, [r7, #12]
 800cedc:	2300      	movs	r3, #0
 800cede:	9303      	str	r3, [sp, #12]
 800cee0:	69fb      	ldr	r3, [r7, #28]
 800cee2:	9302      	str	r3, [sp, #8]
 800cee4:	2318      	movs	r3, #24
 800cee6:	18fb      	adds	r3, r7, r3
 800cee8:	9301      	str	r3, [sp, #4]
 800ceea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceec:	9300      	str	r3, [sp, #0]
 800ceee:	0023      	movs	r3, r4
 800cef0:	f000 f858 	bl	800cfa4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cef4:	69fb      	ldr	r3, [r7, #28]
 800cef6:	0018      	movs	r0, r3
 800cef8:	f000 f8ec 	bl	800d0d4 <prvAddNewTaskToReadyList>
 800cefc:	e001      	b.n	800cf02 <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 800cefe:	2300      	movs	r3, #0
 800cf00:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cf02:	69bb      	ldr	r3, [r7, #24]
	}
 800cf04:	0018      	movs	r0, r3
 800cf06:	46bd      	mov	sp, r7
 800cf08:	b009      	add	sp, #36	; 0x24
 800cf0a:	bd90      	pop	{r4, r7, pc}

0800cf0c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cf0c:	b590      	push	{r4, r7, lr}
 800cf0e:	b08d      	sub	sp, #52	; 0x34
 800cf10:	af04      	add	r7, sp, #16
 800cf12:	60f8      	str	r0, [r7, #12]
 800cf14:	60b9      	str	r1, [r7, #8]
 800cf16:	603b      	str	r3, [r7, #0]
 800cf18:	1dbb      	adds	r3, r7, #6
 800cf1a:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf1c:	1dbb      	adds	r3, r7, #6
 800cf1e:	881b      	ldrh	r3, [r3, #0]
 800cf20:	009b      	lsls	r3, r3, #2
 800cf22:	0018      	movs	r0, r3
 800cf24:	f001 fbfc 	bl	800e720 <pvPortMalloc>
 800cf28:	0003      	movs	r3, r0
 800cf2a:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800cf2c:	697b      	ldr	r3, [r7, #20]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d010      	beq.n	800cf54 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800cf32:	20bc      	movs	r0, #188	; 0xbc
 800cf34:	f001 fbf4 	bl	800e720 <pvPortMalloc>
 800cf38:	0003      	movs	r3, r0
 800cf3a:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800cf3c:	69fb      	ldr	r3, [r7, #28]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d003      	beq.n	800cf4a <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cf42:	69fb      	ldr	r3, [r7, #28]
 800cf44:	697a      	ldr	r2, [r7, #20]
 800cf46:	631a      	str	r2, [r3, #48]	; 0x30
 800cf48:	e006      	b.n	800cf58 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cf4a:	697b      	ldr	r3, [r7, #20]
 800cf4c:	0018      	movs	r0, r3
 800cf4e:	f001 fc8d 	bl	800e86c <vPortFree>
 800cf52:	e001      	b.n	800cf58 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cf54:	2300      	movs	r3, #0
 800cf56:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cf58:	69fb      	ldr	r3, [r7, #28]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d01a      	beq.n	800cf94 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cf5e:	69fb      	ldr	r3, [r7, #28]
 800cf60:	22b9      	movs	r2, #185	; 0xb9
 800cf62:	2100      	movs	r1, #0
 800cf64:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cf66:	1dbb      	adds	r3, r7, #6
 800cf68:	881a      	ldrh	r2, [r3, #0]
 800cf6a:	683c      	ldr	r4, [r7, #0]
 800cf6c:	68b9      	ldr	r1, [r7, #8]
 800cf6e:	68f8      	ldr	r0, [r7, #12]
 800cf70:	2300      	movs	r3, #0
 800cf72:	9303      	str	r3, [sp, #12]
 800cf74:	69fb      	ldr	r3, [r7, #28]
 800cf76:	9302      	str	r3, [sp, #8]
 800cf78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf7a:	9301      	str	r3, [sp, #4]
 800cf7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf7e:	9300      	str	r3, [sp, #0]
 800cf80:	0023      	movs	r3, r4
 800cf82:	f000 f80f 	bl	800cfa4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cf86:	69fb      	ldr	r3, [r7, #28]
 800cf88:	0018      	movs	r0, r3
 800cf8a:	f000 f8a3 	bl	800d0d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cf8e:	2301      	movs	r3, #1
 800cf90:	61bb      	str	r3, [r7, #24]
 800cf92:	e002      	b.n	800cf9a <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cf94:	2301      	movs	r3, #1
 800cf96:	425b      	negs	r3, r3
 800cf98:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cf9a:	69bb      	ldr	r3, [r7, #24]
	}
 800cf9c:	0018      	movs	r0, r3
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	b009      	add	sp, #36	; 0x24
 800cfa2:	bd90      	pop	{r4, r7, pc}

0800cfa4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b086      	sub	sp, #24
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	60f8      	str	r0, [r7, #12]
 800cfac:	60b9      	str	r1, [r7, #8]
 800cfae:	607a      	str	r2, [r7, #4]
 800cfb0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cfb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfb4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	009b      	lsls	r3, r3, #2
 800cfba:	001a      	movs	r2, r3
 800cfbc:	21a5      	movs	r1, #165	; 0xa5
 800cfbe:	f001 fe93 	bl	800ece8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800cfc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	493e      	ldr	r1, [pc, #248]	; (800d0c4 <prvInitialiseNewTask+0x120>)
 800cfca:	468c      	mov	ip, r1
 800cfcc:	4463      	add	r3, ip
 800cfce:	009b      	lsls	r3, r3, #2
 800cfd0:	18d3      	adds	r3, r2, r3
 800cfd2:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800cfd4:	693b      	ldr	r3, [r7, #16]
 800cfd6:	2207      	movs	r2, #7
 800cfd8:	4393      	bics	r3, r2
 800cfda:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cfdc:	693b      	ldr	r3, [r7, #16]
 800cfde:	2207      	movs	r2, #7
 800cfe0:	4013      	ands	r3, r2
 800cfe2:	d001      	beq.n	800cfe8 <prvInitialiseNewTask+0x44>
 800cfe4:	b672      	cpsid	i
 800cfe6:	e7fe      	b.n	800cfe6 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cfe8:	2300      	movs	r3, #0
 800cfea:	617b      	str	r3, [r7, #20]
 800cfec:	e013      	b.n	800d016 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cfee:	68ba      	ldr	r2, [r7, #8]
 800cff0:	697b      	ldr	r3, [r7, #20]
 800cff2:	18d3      	adds	r3, r2, r3
 800cff4:	7818      	ldrb	r0, [r3, #0]
 800cff6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cff8:	2134      	movs	r1, #52	; 0x34
 800cffa:	697b      	ldr	r3, [r7, #20]
 800cffc:	18d3      	adds	r3, r2, r3
 800cffe:	185b      	adds	r3, r3, r1
 800d000:	1c02      	adds	r2, r0, #0
 800d002:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800d004:	68ba      	ldr	r2, [r7, #8]
 800d006:	697b      	ldr	r3, [r7, #20]
 800d008:	18d3      	adds	r3, r2, r3
 800d00a:	781b      	ldrb	r3, [r3, #0]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d006      	beq.n	800d01e <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d010:	697b      	ldr	r3, [r7, #20]
 800d012:	3301      	adds	r3, #1
 800d014:	617b      	str	r3, [r7, #20]
 800d016:	697b      	ldr	r3, [r7, #20]
 800d018:	2b0f      	cmp	r3, #15
 800d01a:	d9e8      	bls.n	800cfee <prvInitialiseNewTask+0x4a>
 800d01c:	e000      	b.n	800d020 <prvInitialiseNewTask+0x7c>
		{
			break;
 800d01e:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d022:	2243      	movs	r2, #67	; 0x43
 800d024:	2100      	movs	r1, #0
 800d026:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d028:	6a3b      	ldr	r3, [r7, #32]
 800d02a:	2b37      	cmp	r3, #55	; 0x37
 800d02c:	d901      	bls.n	800d032 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d02e:	2337      	movs	r3, #55	; 0x37
 800d030:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d034:	6a3a      	ldr	r2, [r7, #32]
 800d036:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d03a:	6a3a      	ldr	r2, [r7, #32]
 800d03c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d040:	2200      	movs	r2, #0
 800d042:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d046:	3304      	adds	r3, #4
 800d048:	0018      	movs	r0, r3
 800d04a:	f7fe ffc5 	bl	800bfd8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d050:	3318      	adds	r3, #24
 800d052:	0018      	movs	r0, r3
 800d054:	f7fe ffc0 	bl	800bfd8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d05a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d05c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d05e:	6a3b      	ldr	r3, [r7, #32]
 800d060:	2238      	movs	r2, #56	; 0x38
 800d062:	1ad2      	subs	r2, r2, r3
 800d064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d066:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d06a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d06c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d06e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d070:	22b4      	movs	r2, #180	; 0xb4
 800d072:	2100      	movs	r1, #0
 800d074:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d078:	22b8      	movs	r2, #184	; 0xb8
 800d07a:	2100      	movs	r1, #0
 800d07c:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d080:	3354      	adds	r3, #84	; 0x54
 800d082:	2260      	movs	r2, #96	; 0x60
 800d084:	2100      	movs	r1, #0
 800d086:	0018      	movs	r0, r3
 800d088:	f001 fe2e 	bl	800ece8 <memset>
 800d08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d08e:	4a0e      	ldr	r2, [pc, #56]	; (800d0c8 <prvInitialiseNewTask+0x124>)
 800d090:	659a      	str	r2, [r3, #88]	; 0x58
 800d092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d094:	4a0d      	ldr	r2, [pc, #52]	; (800d0cc <prvInitialiseNewTask+0x128>)
 800d096:	65da      	str	r2, [r3, #92]	; 0x5c
 800d098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d09a:	4a0d      	ldr	r2, [pc, #52]	; (800d0d0 <prvInitialiseNewTask+0x12c>)
 800d09c:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d09e:	683a      	ldr	r2, [r7, #0]
 800d0a0:	68f9      	ldr	r1, [r7, #12]
 800d0a2:	693b      	ldr	r3, [r7, #16]
 800d0a4:	0018      	movs	r0, r3
 800d0a6:	f001 fa0b 	bl	800e4c0 <pxPortInitialiseStack>
 800d0aa:	0002      	movs	r2, r0
 800d0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ae:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800d0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d002      	beq.n	800d0bc <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d0bc:	46c0      	nop			; (mov r8, r8)
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	b006      	add	sp, #24
 800d0c2:	bd80      	pop	{r7, pc}
 800d0c4:	3fffffff 	.word	0x3fffffff
 800d0c8:	080139f8 	.word	0x080139f8
 800d0cc:	08013a18 	.word	0x08013a18
 800d0d0:	080139d8 	.word	0x080139d8

0800d0d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b082      	sub	sp, #8
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d0dc:	f001 fa88 	bl	800e5f0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d0e0:	4b2a      	ldr	r3, [pc, #168]	; (800d18c <prvAddNewTaskToReadyList+0xb8>)
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	1c5a      	adds	r2, r3, #1
 800d0e6:	4b29      	ldr	r3, [pc, #164]	; (800d18c <prvAddNewTaskToReadyList+0xb8>)
 800d0e8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800d0ea:	4b29      	ldr	r3, [pc, #164]	; (800d190 <prvAddNewTaskToReadyList+0xbc>)
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d109      	bne.n	800d106 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d0f2:	4b27      	ldr	r3, [pc, #156]	; (800d190 <prvAddNewTaskToReadyList+0xbc>)
 800d0f4:	687a      	ldr	r2, [r7, #4]
 800d0f6:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d0f8:	4b24      	ldr	r3, [pc, #144]	; (800d18c <prvAddNewTaskToReadyList+0xb8>)
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	2b01      	cmp	r3, #1
 800d0fe:	d110      	bne.n	800d122 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d100:	f000 fc8a 	bl	800da18 <prvInitialiseTaskLists>
 800d104:	e00d      	b.n	800d122 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d106:	4b23      	ldr	r3, [pc, #140]	; (800d194 <prvAddNewTaskToReadyList+0xc0>)
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d109      	bne.n	800d122 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d10e:	4b20      	ldr	r3, [pc, #128]	; (800d190 <prvAddNewTaskToReadyList+0xbc>)
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d118:	429a      	cmp	r2, r3
 800d11a:	d802      	bhi.n	800d122 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d11c:	4b1c      	ldr	r3, [pc, #112]	; (800d190 <prvAddNewTaskToReadyList+0xbc>)
 800d11e:	687a      	ldr	r2, [r7, #4]
 800d120:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d122:	4b1d      	ldr	r3, [pc, #116]	; (800d198 <prvAddNewTaskToReadyList+0xc4>)
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	1c5a      	adds	r2, r3, #1
 800d128:	4b1b      	ldr	r3, [pc, #108]	; (800d198 <prvAddNewTaskToReadyList+0xc4>)
 800d12a:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d12c:	4b1a      	ldr	r3, [pc, #104]	; (800d198 <prvAddNewTaskToReadyList+0xc4>)
 800d12e:	681a      	ldr	r2, [r3, #0]
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d138:	4b18      	ldr	r3, [pc, #96]	; (800d19c <prvAddNewTaskToReadyList+0xc8>)
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	429a      	cmp	r2, r3
 800d13e:	d903      	bls.n	800d148 <prvAddNewTaskToReadyList+0x74>
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d144:	4b15      	ldr	r3, [pc, #84]	; (800d19c <prvAddNewTaskToReadyList+0xc8>)
 800d146:	601a      	str	r2, [r3, #0]
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d14c:	0013      	movs	r3, r2
 800d14e:	009b      	lsls	r3, r3, #2
 800d150:	189b      	adds	r3, r3, r2
 800d152:	009b      	lsls	r3, r3, #2
 800d154:	4a12      	ldr	r2, [pc, #72]	; (800d1a0 <prvAddNewTaskToReadyList+0xcc>)
 800d156:	189a      	adds	r2, r3, r2
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	3304      	adds	r3, #4
 800d15c:	0019      	movs	r1, r3
 800d15e:	0010      	movs	r0, r2
 800d160:	f7fe ff45 	bl	800bfee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d164:	f001 fa56 	bl	800e614 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d168:	4b0a      	ldr	r3, [pc, #40]	; (800d194 <prvAddNewTaskToReadyList+0xc0>)
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d008      	beq.n	800d182 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d170:	4b07      	ldr	r3, [pc, #28]	; (800d190 <prvAddNewTaskToReadyList+0xbc>)
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d17a:	429a      	cmp	r2, r3
 800d17c:	d201      	bcs.n	800d182 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d17e:	f001 fa27 	bl	800e5d0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d182:	46c0      	nop			; (mov r8, r8)
 800d184:	46bd      	mov	sp, r7
 800d186:	b002      	add	sp, #8
 800d188:	bd80      	pop	{r7, pc}
 800d18a:	46c0      	nop			; (mov r8, r8)
 800d18c:	20001028 	.word	0x20001028
 800d190:	20000b54 	.word	0x20000b54
 800d194:	20001034 	.word	0x20001034
 800d198:	20001044 	.word	0x20001044
 800d19c:	20001030 	.word	0x20001030
 800d1a0:	20000b58 	.word	0x20000b58

0800d1a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b084      	sub	sp, #16
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d010      	beq.n	800d1d8 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d1b6:	4b0d      	ldr	r3, [pc, #52]	; (800d1ec <vTaskDelay+0x48>)
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d001      	beq.n	800d1c2 <vTaskDelay+0x1e>
 800d1be:	b672      	cpsid	i
 800d1c0:	e7fe      	b.n	800d1c0 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800d1c2:	f000 f957 	bl	800d474 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	2100      	movs	r1, #0
 800d1ca:	0018      	movs	r0, r3
 800d1cc:	f000 fe54 	bl	800de78 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d1d0:	f000 f95c 	bl	800d48c <xTaskResumeAll>
 800d1d4:	0003      	movs	r3, r0
 800d1d6:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d101      	bne.n	800d1e2 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 800d1de:	f001 f9f7 	bl	800e5d0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d1e2:	46c0      	nop			; (mov r8, r8)
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	b004      	add	sp, #16
 800d1e8:	bd80      	pop	{r7, pc}
 800d1ea:	46c0      	nop			; (mov r8, r8)
 800d1ec:	20001050 	.word	0x20001050

0800d1f0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b084      	sub	sp, #16
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800d1f8:	f001 f9fa 	bl	800e5f0 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d102      	bne.n	800d208 <vTaskSuspend+0x18>
 800d202:	4b29      	ldr	r3, [pc, #164]	; (800d2a8 <vTaskSuspend+0xb8>)
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	e000      	b.n	800d20a <vTaskSuspend+0x1a>
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	3304      	adds	r3, #4
 800d210:	0018      	movs	r0, r3
 800d212:	f7fe ff44 	bl	800c09e <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d004      	beq.n	800d228 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	3318      	adds	r3, #24
 800d222:	0018      	movs	r0, r3
 800d224:	f7fe ff3b 	bl	800c09e <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	1d1a      	adds	r2, r3, #4
 800d22c:	4b1f      	ldr	r3, [pc, #124]	; (800d2ac <vTaskSuspend+0xbc>)
 800d22e:	0011      	movs	r1, r2
 800d230:	0018      	movs	r0, r3
 800d232:	f7fe fedc 	bl	800bfee <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	22b8      	movs	r2, #184	; 0xb8
 800d23a:	5c9b      	ldrb	r3, [r3, r2]
 800d23c:	b2db      	uxtb	r3, r3
 800d23e:	2b01      	cmp	r3, #1
 800d240:	d103      	bne.n	800d24a <vTaskSuspend+0x5a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	22b8      	movs	r2, #184	; 0xb8
 800d246:	2100      	movs	r1, #0
 800d248:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800d24a:	f001 f9e3 	bl	800e614 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800d24e:	4b18      	ldr	r3, [pc, #96]	; (800d2b0 <vTaskSuspend+0xc0>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d005      	beq.n	800d262 <vTaskSuspend+0x72>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800d256:	f001 f9cb 	bl	800e5f0 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800d25a:	f000 fc7d 	bl	800db58 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800d25e:	f001 f9d9 	bl	800e614 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800d262:	4b11      	ldr	r3, [pc, #68]	; (800d2a8 <vTaskSuspend+0xb8>)
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	68fa      	ldr	r2, [r7, #12]
 800d268:	429a      	cmp	r2, r3
 800d26a:	d118      	bne.n	800d29e <vTaskSuspend+0xae>
		{
			if( xSchedulerRunning != pdFALSE )
 800d26c:	4b10      	ldr	r3, [pc, #64]	; (800d2b0 <vTaskSuspend+0xc0>)
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d008      	beq.n	800d286 <vTaskSuspend+0x96>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800d274:	4b0f      	ldr	r3, [pc, #60]	; (800d2b4 <vTaskSuspend+0xc4>)
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d001      	beq.n	800d280 <vTaskSuspend+0x90>
 800d27c:	b672      	cpsid	i
 800d27e:	e7fe      	b.n	800d27e <vTaskSuspend+0x8e>
				portYIELD_WITHIN_API();
 800d280:	f001 f9a6 	bl	800e5d0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d284:	e00b      	b.n	800d29e <vTaskSuspend+0xae>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 800d286:	4b09      	ldr	r3, [pc, #36]	; (800d2ac <vTaskSuspend+0xbc>)
 800d288:	681a      	ldr	r2, [r3, #0]
 800d28a:	4b0b      	ldr	r3, [pc, #44]	; (800d2b8 <vTaskSuspend+0xc8>)
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	429a      	cmp	r2, r3
 800d290:	d103      	bne.n	800d29a <vTaskSuspend+0xaa>
					pxCurrentTCB = NULL;
 800d292:	4b05      	ldr	r3, [pc, #20]	; (800d2a8 <vTaskSuspend+0xb8>)
 800d294:	2200      	movs	r2, #0
 800d296:	601a      	str	r2, [r3, #0]
	}
 800d298:	e001      	b.n	800d29e <vTaskSuspend+0xae>
					vTaskSwitchContext();
 800d29a:	f000 fa45 	bl	800d728 <vTaskSwitchContext>
	}
 800d29e:	46c0      	nop			; (mov r8, r8)
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	b004      	add	sp, #16
 800d2a4:	bd80      	pop	{r7, pc}
 800d2a6:	46c0      	nop			; (mov r8, r8)
 800d2a8:	20000b54 	.word	0x20000b54
 800d2ac:	20001014 	.word	0x20001014
 800d2b0:	20001034 	.word	0x20001034
 800d2b4:	20001050 	.word	0x20001050
 800d2b8:	20001028 	.word	0x20001028

0800d2bc <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b084      	sub	sp, #16
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	60fb      	str	r3, [r7, #12]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	60bb      	str	r3, [r7, #8]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d101      	bne.n	800d2d6 <prvTaskIsTaskSuspended+0x1a>
 800d2d2:	b672      	cpsid	i
 800d2d4:	e7fe      	b.n	800d2d4 <prvTaskIsTaskSuspended+0x18>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d2d6:	68bb      	ldr	r3, [r7, #8]
 800d2d8:	695a      	ldr	r2, [r3, #20]
 800d2da:	4b0e      	ldr	r3, [pc, #56]	; (800d314 <prvTaskIsTaskSuspended+0x58>)
 800d2dc:	429a      	cmp	r2, r3
 800d2de:	d101      	bne.n	800d2e4 <prvTaskIsTaskSuspended+0x28>
 800d2e0:	2301      	movs	r3, #1
 800d2e2:	e000      	b.n	800d2e6 <prvTaskIsTaskSuspended+0x2a>
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d00f      	beq.n	800d30a <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800d2ea:	68bb      	ldr	r3, [r7, #8]
 800d2ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d2ee:	4b0a      	ldr	r3, [pc, #40]	; (800d318 <prvTaskIsTaskSuspended+0x5c>)
 800d2f0:	429a      	cmp	r2, r3
 800d2f2:	d00a      	beq.n	800d30a <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800d2f4:	68bb      	ldr	r3, [r7, #8]
 800d2f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d101      	bne.n	800d300 <prvTaskIsTaskSuspended+0x44>
 800d2fc:	2301      	movs	r3, #1
 800d2fe:	e000      	b.n	800d302 <prvTaskIsTaskSuspended+0x46>
 800d300:	2300      	movs	r3, #0
 800d302:	2b00      	cmp	r3, #0
 800d304:	d001      	beq.n	800d30a <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 800d306:	2301      	movs	r3, #1
 800d308:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d30a:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800d30c:	0018      	movs	r0, r3
 800d30e:	46bd      	mov	sp, r7
 800d310:	b004      	add	sp, #16
 800d312:	bd80      	pop	{r7, pc}
 800d314:	20001014 	.word	0x20001014
 800d318:	20000fe8 	.word	0x20000fe8

0800d31c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b084      	sub	sp, #16
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d101      	bne.n	800d332 <vTaskResume+0x16>
 800d32e:	b672      	cpsid	i
 800d330:	e7fe      	b.n	800d330 <vTaskResume+0x14>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d034      	beq.n	800d3a2 <vTaskResume+0x86>
 800d338:	4b1c      	ldr	r3, [pc, #112]	; (800d3ac <vTaskResume+0x90>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	68fa      	ldr	r2, [r7, #12]
 800d33e:	429a      	cmp	r2, r3
 800d340:	d02f      	beq.n	800d3a2 <vTaskResume+0x86>
		{
			taskENTER_CRITICAL();
 800d342:	f001 f955 	bl	800e5f0 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	0018      	movs	r0, r3
 800d34a:	f7ff ffb7 	bl	800d2bc <prvTaskIsTaskSuspended>
 800d34e:	1e03      	subs	r3, r0, #0
 800d350:	d025      	beq.n	800d39e <vTaskResume+0x82>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	3304      	adds	r3, #4
 800d356:	0018      	movs	r0, r3
 800d358:	f7fe fea1 	bl	800c09e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d360:	4b13      	ldr	r3, [pc, #76]	; (800d3b0 <vTaskResume+0x94>)
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	429a      	cmp	r2, r3
 800d366:	d903      	bls.n	800d370 <vTaskResume+0x54>
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d36c:	4b10      	ldr	r3, [pc, #64]	; (800d3b0 <vTaskResume+0x94>)
 800d36e:	601a      	str	r2, [r3, #0]
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d374:	0013      	movs	r3, r2
 800d376:	009b      	lsls	r3, r3, #2
 800d378:	189b      	adds	r3, r3, r2
 800d37a:	009b      	lsls	r3, r3, #2
 800d37c:	4a0d      	ldr	r2, [pc, #52]	; (800d3b4 <vTaskResume+0x98>)
 800d37e:	189a      	adds	r2, r3, r2
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	3304      	adds	r3, #4
 800d384:	0019      	movs	r1, r3
 800d386:	0010      	movs	r0, r2
 800d388:	f7fe fe31 	bl	800bfee <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d390:	4b06      	ldr	r3, [pc, #24]	; (800d3ac <vTaskResume+0x90>)
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d396:	429a      	cmp	r2, r3
 800d398:	d301      	bcc.n	800d39e <vTaskResume+0x82>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800d39a:	f001 f919 	bl	800e5d0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800d39e:	f001 f939 	bl	800e614 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d3a2:	46c0      	nop			; (mov r8, r8)
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	b004      	add	sp, #16
 800d3a8:	bd80      	pop	{r7, pc}
 800d3aa:	46c0      	nop			; (mov r8, r8)
 800d3ac:	20000b54 	.word	0x20000b54
 800d3b0:	20001030 	.word	0x20001030
 800d3b4:	20000b58 	.word	0x20000b58

0800d3b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d3b8:	b590      	push	{r4, r7, lr}
 800d3ba:	b089      	sub	sp, #36	; 0x24
 800d3bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d3be:	2300      	movs	r3, #0
 800d3c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d3c6:	003a      	movs	r2, r7
 800d3c8:	1d39      	adds	r1, r7, #4
 800d3ca:	2308      	movs	r3, #8
 800d3cc:	18fb      	adds	r3, r7, r3
 800d3ce:	0018      	movs	r0, r3
 800d3d0:	f7fe fdb4 	bl	800bf3c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d3d4:	683c      	ldr	r4, [r7, #0]
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	68ba      	ldr	r2, [r7, #8]
 800d3da:	491e      	ldr	r1, [pc, #120]	; (800d454 <vTaskStartScheduler+0x9c>)
 800d3dc:	481e      	ldr	r0, [pc, #120]	; (800d458 <vTaskStartScheduler+0xa0>)
 800d3de:	9202      	str	r2, [sp, #8]
 800d3e0:	9301      	str	r3, [sp, #4]
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	9300      	str	r3, [sp, #0]
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	0022      	movs	r2, r4
 800d3ea:	f7ff fd4c 	bl	800ce86 <xTaskCreateStatic>
 800d3ee:	0002      	movs	r2, r0
 800d3f0:	4b1a      	ldr	r3, [pc, #104]	; (800d45c <vTaskStartScheduler+0xa4>)
 800d3f2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d3f4:	4b19      	ldr	r3, [pc, #100]	; (800d45c <vTaskStartScheduler+0xa4>)
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d002      	beq.n	800d402 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d3fc:	2301      	movs	r3, #1
 800d3fe:	60fb      	str	r3, [r7, #12]
 800d400:	e001      	b.n	800d406 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d402:	2300      	movs	r3, #0
 800d404:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	2b01      	cmp	r3, #1
 800d40a:	d103      	bne.n	800d414 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 800d40c:	f000 fd88 	bl	800df20 <xTimerCreateTimerTask>
 800d410:	0003      	movs	r3, r0
 800d412:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	2b01      	cmp	r3, #1
 800d418:	d113      	bne.n	800d442 <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800d41a:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d41c:	4b10      	ldr	r3, [pc, #64]	; (800d460 <vTaskStartScheduler+0xa8>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	3354      	adds	r3, #84	; 0x54
 800d422:	001a      	movs	r2, r3
 800d424:	4b0f      	ldr	r3, [pc, #60]	; (800d464 <vTaskStartScheduler+0xac>)
 800d426:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d428:	4b0f      	ldr	r3, [pc, #60]	; (800d468 <vTaskStartScheduler+0xb0>)
 800d42a:	2201      	movs	r2, #1
 800d42c:	4252      	negs	r2, r2
 800d42e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d430:	4b0e      	ldr	r3, [pc, #56]	; (800d46c <vTaskStartScheduler+0xb4>)
 800d432:	2201      	movs	r2, #1
 800d434:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800d436:	4b0e      	ldr	r3, [pc, #56]	; (800d470 <vTaskStartScheduler+0xb8>)
 800d438:	2200      	movs	r2, #0
 800d43a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d43c:	f001 f8a4 	bl	800e588 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d440:	e004      	b.n	800d44c <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	3301      	adds	r3, #1
 800d446:	d101      	bne.n	800d44c <vTaskStartScheduler+0x94>
 800d448:	b672      	cpsid	i
 800d44a:	e7fe      	b.n	800d44a <vTaskStartScheduler+0x92>
}
 800d44c:	46c0      	nop			; (mov r8, r8)
 800d44e:	46bd      	mov	sp, r7
 800d450:	b005      	add	sp, #20
 800d452:	bd90      	pop	{r4, r7, pc}
 800d454:	08012eac 	.word	0x08012eac
 800d458:	0800d9f9 	.word	0x0800d9f9
 800d45c:	2000104c 	.word	0x2000104c
 800d460:	20000b54 	.word	0x20000b54
 800d464:	20000074 	.word	0x20000074
 800d468:	20001048 	.word	0x20001048
 800d46c:	20001034 	.word	0x20001034
 800d470:	2000102c 	.word	0x2000102c

0800d474 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d474:	b580      	push	{r7, lr}
 800d476:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800d478:	4b03      	ldr	r3, [pc, #12]	; (800d488 <vTaskSuspendAll+0x14>)
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	1c5a      	adds	r2, r3, #1
 800d47e:	4b02      	ldr	r3, [pc, #8]	; (800d488 <vTaskSuspendAll+0x14>)
 800d480:	601a      	str	r2, [r3, #0]
}
 800d482:	46c0      	nop			; (mov r8, r8)
 800d484:	46bd      	mov	sp, r7
 800d486:	bd80      	pop	{r7, pc}
 800d488:	20001050 	.word	0x20001050

0800d48c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b084      	sub	sp, #16
 800d490:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d492:	2300      	movs	r3, #0
 800d494:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d496:	2300      	movs	r3, #0
 800d498:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d49a:	4b3a      	ldr	r3, [pc, #232]	; (800d584 <xTaskResumeAll+0xf8>)
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d101      	bne.n	800d4a6 <xTaskResumeAll+0x1a>
 800d4a2:	b672      	cpsid	i
 800d4a4:	e7fe      	b.n	800d4a4 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d4a6:	f001 f8a3 	bl	800e5f0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d4aa:	4b36      	ldr	r3, [pc, #216]	; (800d584 <xTaskResumeAll+0xf8>)
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	1e5a      	subs	r2, r3, #1
 800d4b0:	4b34      	ldr	r3, [pc, #208]	; (800d584 <xTaskResumeAll+0xf8>)
 800d4b2:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d4b4:	4b33      	ldr	r3, [pc, #204]	; (800d584 <xTaskResumeAll+0xf8>)
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d15b      	bne.n	800d574 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d4bc:	4b32      	ldr	r3, [pc, #200]	; (800d588 <xTaskResumeAll+0xfc>)
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d057      	beq.n	800d574 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d4c4:	e02f      	b.n	800d526 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800d4c6:	4b31      	ldr	r3, [pc, #196]	; (800d58c <xTaskResumeAll+0x100>)
 800d4c8:	68db      	ldr	r3, [r3, #12]
 800d4ca:	68db      	ldr	r3, [r3, #12]
 800d4cc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	3318      	adds	r3, #24
 800d4d2:	0018      	movs	r0, r3
 800d4d4:	f7fe fde3 	bl	800c09e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	3304      	adds	r3, #4
 800d4dc:	0018      	movs	r0, r3
 800d4de:	f7fe fdde 	bl	800c09e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4e6:	4b2a      	ldr	r3, [pc, #168]	; (800d590 <xTaskResumeAll+0x104>)
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	429a      	cmp	r2, r3
 800d4ec:	d903      	bls.n	800d4f6 <xTaskResumeAll+0x6a>
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4f2:	4b27      	ldr	r3, [pc, #156]	; (800d590 <xTaskResumeAll+0x104>)
 800d4f4:	601a      	str	r2, [r3, #0]
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4fa:	0013      	movs	r3, r2
 800d4fc:	009b      	lsls	r3, r3, #2
 800d4fe:	189b      	adds	r3, r3, r2
 800d500:	009b      	lsls	r3, r3, #2
 800d502:	4a24      	ldr	r2, [pc, #144]	; (800d594 <xTaskResumeAll+0x108>)
 800d504:	189a      	adds	r2, r3, r2
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	3304      	adds	r3, #4
 800d50a:	0019      	movs	r1, r3
 800d50c:	0010      	movs	r0, r2
 800d50e:	f7fe fd6e 	bl	800bfee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d516:	4b20      	ldr	r3, [pc, #128]	; (800d598 <xTaskResumeAll+0x10c>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d51c:	429a      	cmp	r2, r3
 800d51e:	d302      	bcc.n	800d526 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 800d520:	4b1e      	ldr	r3, [pc, #120]	; (800d59c <xTaskResumeAll+0x110>)
 800d522:	2201      	movs	r2, #1
 800d524:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d526:	4b19      	ldr	r3, [pc, #100]	; (800d58c <xTaskResumeAll+0x100>)
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d1cb      	bne.n	800d4c6 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d001      	beq.n	800d538 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d534:	f000 fb10 	bl	800db58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d538:	4b19      	ldr	r3, [pc, #100]	; (800d5a0 <xTaskResumeAll+0x114>)
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d00f      	beq.n	800d564 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d544:	f000 f83c 	bl	800d5c0 <xTaskIncrementTick>
 800d548:	1e03      	subs	r3, r0, #0
 800d54a:	d002      	beq.n	800d552 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 800d54c:	4b13      	ldr	r3, [pc, #76]	; (800d59c <xTaskResumeAll+0x110>)
 800d54e:	2201      	movs	r2, #1
 800d550:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	3b01      	subs	r3, #1
 800d556:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d1f2      	bne.n	800d544 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 800d55e:	4b10      	ldr	r3, [pc, #64]	; (800d5a0 <xTaskResumeAll+0x114>)
 800d560:	2200      	movs	r2, #0
 800d562:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d564:	4b0d      	ldr	r3, [pc, #52]	; (800d59c <xTaskResumeAll+0x110>)
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d003      	beq.n	800d574 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d56c:	2301      	movs	r3, #1
 800d56e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d570:	f001 f82e 	bl	800e5d0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d574:	f001 f84e 	bl	800e614 <vPortExitCritical>

	return xAlreadyYielded;
 800d578:	68bb      	ldr	r3, [r7, #8]
}
 800d57a:	0018      	movs	r0, r3
 800d57c:	46bd      	mov	sp, r7
 800d57e:	b004      	add	sp, #16
 800d580:	bd80      	pop	{r7, pc}
 800d582:	46c0      	nop			; (mov r8, r8)
 800d584:	20001050 	.word	0x20001050
 800d588:	20001028 	.word	0x20001028
 800d58c:	20000fe8 	.word	0x20000fe8
 800d590:	20001030 	.word	0x20001030
 800d594:	20000b58 	.word	0x20000b58
 800d598:	20000b54 	.word	0x20000b54
 800d59c:	2000103c 	.word	0x2000103c
 800d5a0:	20001038 	.word	0x20001038

0800d5a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b082      	sub	sp, #8
 800d5a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d5aa:	4b04      	ldr	r3, [pc, #16]	; (800d5bc <xTaskGetTickCount+0x18>)
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d5b0:	687b      	ldr	r3, [r7, #4]
}
 800d5b2:	0018      	movs	r0, r3
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	b002      	add	sp, #8
 800d5b8:	bd80      	pop	{r7, pc}
 800d5ba:	46c0      	nop			; (mov r8, r8)
 800d5bc:	2000102c 	.word	0x2000102c

0800d5c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b086      	sub	sp, #24
 800d5c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d5ca:	4b4c      	ldr	r3, [pc, #304]	; (800d6fc <xTaskIncrementTick+0x13c>)
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d000      	beq.n	800d5d4 <xTaskIncrementTick+0x14>
 800d5d2:	e083      	b.n	800d6dc <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d5d4:	4b4a      	ldr	r3, [pc, #296]	; (800d700 <xTaskIncrementTick+0x140>)
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	3301      	adds	r3, #1
 800d5da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d5dc:	4b48      	ldr	r3, [pc, #288]	; (800d700 <xTaskIncrementTick+0x140>)
 800d5de:	693a      	ldr	r2, [r7, #16]
 800d5e0:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d5e2:	693b      	ldr	r3, [r7, #16]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d117      	bne.n	800d618 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 800d5e8:	4b46      	ldr	r3, [pc, #280]	; (800d704 <xTaskIncrementTick+0x144>)
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d001      	beq.n	800d5f6 <xTaskIncrementTick+0x36>
 800d5f2:	b672      	cpsid	i
 800d5f4:	e7fe      	b.n	800d5f4 <xTaskIncrementTick+0x34>
 800d5f6:	4b43      	ldr	r3, [pc, #268]	; (800d704 <xTaskIncrementTick+0x144>)
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	60fb      	str	r3, [r7, #12]
 800d5fc:	4b42      	ldr	r3, [pc, #264]	; (800d708 <xTaskIncrementTick+0x148>)
 800d5fe:	681a      	ldr	r2, [r3, #0]
 800d600:	4b40      	ldr	r3, [pc, #256]	; (800d704 <xTaskIncrementTick+0x144>)
 800d602:	601a      	str	r2, [r3, #0]
 800d604:	4b40      	ldr	r3, [pc, #256]	; (800d708 <xTaskIncrementTick+0x148>)
 800d606:	68fa      	ldr	r2, [r7, #12]
 800d608:	601a      	str	r2, [r3, #0]
 800d60a:	4b40      	ldr	r3, [pc, #256]	; (800d70c <xTaskIncrementTick+0x14c>)
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	1c5a      	adds	r2, r3, #1
 800d610:	4b3e      	ldr	r3, [pc, #248]	; (800d70c <xTaskIncrementTick+0x14c>)
 800d612:	601a      	str	r2, [r3, #0]
 800d614:	f000 faa0 	bl	800db58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d618:	4b3d      	ldr	r3, [pc, #244]	; (800d710 <xTaskIncrementTick+0x150>)
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	693a      	ldr	r2, [r7, #16]
 800d61e:	429a      	cmp	r2, r3
 800d620:	d34e      	bcc.n	800d6c0 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d622:	4b38      	ldr	r3, [pc, #224]	; (800d704 <xTaskIncrementTick+0x144>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d101      	bne.n	800d630 <xTaskIncrementTick+0x70>
 800d62c:	2301      	movs	r3, #1
 800d62e:	e000      	b.n	800d632 <xTaskIncrementTick+0x72>
 800d630:	2300      	movs	r3, #0
 800d632:	2b00      	cmp	r3, #0
 800d634:	d004      	beq.n	800d640 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d636:	4b36      	ldr	r3, [pc, #216]	; (800d710 <xTaskIncrementTick+0x150>)
 800d638:	2201      	movs	r2, #1
 800d63a:	4252      	negs	r2, r2
 800d63c:	601a      	str	r2, [r3, #0]
					break;
 800d63e:	e03f      	b.n	800d6c0 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d640:	4b30      	ldr	r3, [pc, #192]	; (800d704 <xTaskIncrementTick+0x144>)
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	68db      	ldr	r3, [r3, #12]
 800d646:	68db      	ldr	r3, [r3, #12]
 800d648:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d64a:	68bb      	ldr	r3, [r7, #8]
 800d64c:	685b      	ldr	r3, [r3, #4]
 800d64e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d650:	693a      	ldr	r2, [r7, #16]
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	429a      	cmp	r2, r3
 800d656:	d203      	bcs.n	800d660 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d658:	4b2d      	ldr	r3, [pc, #180]	; (800d710 <xTaskIncrementTick+0x150>)
 800d65a:	687a      	ldr	r2, [r7, #4]
 800d65c:	601a      	str	r2, [r3, #0]
						break;
 800d65e:	e02f      	b.n	800d6c0 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	3304      	adds	r3, #4
 800d664:	0018      	movs	r0, r3
 800d666:	f7fe fd1a 	bl	800c09e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d66a:	68bb      	ldr	r3, [r7, #8]
 800d66c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d004      	beq.n	800d67c <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d672:	68bb      	ldr	r3, [r7, #8]
 800d674:	3318      	adds	r3, #24
 800d676:	0018      	movs	r0, r3
 800d678:	f7fe fd11 	bl	800c09e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d67c:	68bb      	ldr	r3, [r7, #8]
 800d67e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d680:	4b24      	ldr	r3, [pc, #144]	; (800d714 <xTaskIncrementTick+0x154>)
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	429a      	cmp	r2, r3
 800d686:	d903      	bls.n	800d690 <xTaskIncrementTick+0xd0>
 800d688:	68bb      	ldr	r3, [r7, #8]
 800d68a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d68c:	4b21      	ldr	r3, [pc, #132]	; (800d714 <xTaskIncrementTick+0x154>)
 800d68e:	601a      	str	r2, [r3, #0]
 800d690:	68bb      	ldr	r3, [r7, #8]
 800d692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d694:	0013      	movs	r3, r2
 800d696:	009b      	lsls	r3, r3, #2
 800d698:	189b      	adds	r3, r3, r2
 800d69a:	009b      	lsls	r3, r3, #2
 800d69c:	4a1e      	ldr	r2, [pc, #120]	; (800d718 <xTaskIncrementTick+0x158>)
 800d69e:	189a      	adds	r2, r3, r2
 800d6a0:	68bb      	ldr	r3, [r7, #8]
 800d6a2:	3304      	adds	r3, #4
 800d6a4:	0019      	movs	r1, r3
 800d6a6:	0010      	movs	r0, r2
 800d6a8:	f7fe fca1 	bl	800bfee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d6ac:	68bb      	ldr	r3, [r7, #8]
 800d6ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6b0:	4b1a      	ldr	r3, [pc, #104]	; (800d71c <xTaskIncrementTick+0x15c>)
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6b6:	429a      	cmp	r2, r3
 800d6b8:	d3b3      	bcc.n	800d622 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 800d6ba:	2301      	movs	r3, #1
 800d6bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d6be:	e7b0      	b.n	800d622 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d6c0:	4b16      	ldr	r3, [pc, #88]	; (800d71c <xTaskIncrementTick+0x15c>)
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6c6:	4914      	ldr	r1, [pc, #80]	; (800d718 <xTaskIncrementTick+0x158>)
 800d6c8:	0013      	movs	r3, r2
 800d6ca:	009b      	lsls	r3, r3, #2
 800d6cc:	189b      	adds	r3, r3, r2
 800d6ce:	009b      	lsls	r3, r3, #2
 800d6d0:	585b      	ldr	r3, [r3, r1]
 800d6d2:	2b01      	cmp	r3, #1
 800d6d4:	d907      	bls.n	800d6e6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800d6d6:	2301      	movs	r3, #1
 800d6d8:	617b      	str	r3, [r7, #20]
 800d6da:	e004      	b.n	800d6e6 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800d6dc:	4b10      	ldr	r3, [pc, #64]	; (800d720 <xTaskIncrementTick+0x160>)
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	1c5a      	adds	r2, r3, #1
 800d6e2:	4b0f      	ldr	r3, [pc, #60]	; (800d720 <xTaskIncrementTick+0x160>)
 800d6e4:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800d6e6:	4b0f      	ldr	r3, [pc, #60]	; (800d724 <xTaskIncrementTick+0x164>)
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d001      	beq.n	800d6f2 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 800d6ee:	2301      	movs	r3, #1
 800d6f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800d6f2:	697b      	ldr	r3, [r7, #20]
}
 800d6f4:	0018      	movs	r0, r3
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	b006      	add	sp, #24
 800d6fa:	bd80      	pop	{r7, pc}
 800d6fc:	20001050 	.word	0x20001050
 800d700:	2000102c 	.word	0x2000102c
 800d704:	20000fe0 	.word	0x20000fe0
 800d708:	20000fe4 	.word	0x20000fe4
 800d70c:	20001040 	.word	0x20001040
 800d710:	20001048 	.word	0x20001048
 800d714:	20001030 	.word	0x20001030
 800d718:	20000b58 	.word	0x20000b58
 800d71c:	20000b54 	.word	0x20000b54
 800d720:	20001038 	.word	0x20001038
 800d724:	2000103c 	.word	0x2000103c

0800d728 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b082      	sub	sp, #8
 800d72c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d72e:	4b25      	ldr	r3, [pc, #148]	; (800d7c4 <vTaskSwitchContext+0x9c>)
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d003      	beq.n	800d73e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d736:	4b24      	ldr	r3, [pc, #144]	; (800d7c8 <vTaskSwitchContext+0xa0>)
 800d738:	2201      	movs	r2, #1
 800d73a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d73c:	e03d      	b.n	800d7ba <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 800d73e:	4b22      	ldr	r3, [pc, #136]	; (800d7c8 <vTaskSwitchContext+0xa0>)
 800d740:	2200      	movs	r2, #0
 800d742:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800d744:	4b21      	ldr	r3, [pc, #132]	; (800d7cc <vTaskSwitchContext+0xa4>)
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	607b      	str	r3, [r7, #4]
 800d74a:	e007      	b.n	800d75c <vTaskSwitchContext+0x34>
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d101      	bne.n	800d756 <vTaskSwitchContext+0x2e>
 800d752:	b672      	cpsid	i
 800d754:	e7fe      	b.n	800d754 <vTaskSwitchContext+0x2c>
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	3b01      	subs	r3, #1
 800d75a:	607b      	str	r3, [r7, #4]
 800d75c:	491c      	ldr	r1, [pc, #112]	; (800d7d0 <vTaskSwitchContext+0xa8>)
 800d75e:	687a      	ldr	r2, [r7, #4]
 800d760:	0013      	movs	r3, r2
 800d762:	009b      	lsls	r3, r3, #2
 800d764:	189b      	adds	r3, r3, r2
 800d766:	009b      	lsls	r3, r3, #2
 800d768:	585b      	ldr	r3, [r3, r1]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d0ee      	beq.n	800d74c <vTaskSwitchContext+0x24>
 800d76e:	687a      	ldr	r2, [r7, #4]
 800d770:	0013      	movs	r3, r2
 800d772:	009b      	lsls	r3, r3, #2
 800d774:	189b      	adds	r3, r3, r2
 800d776:	009b      	lsls	r3, r3, #2
 800d778:	4a15      	ldr	r2, [pc, #84]	; (800d7d0 <vTaskSwitchContext+0xa8>)
 800d77a:	189b      	adds	r3, r3, r2
 800d77c:	603b      	str	r3, [r7, #0]
 800d77e:	683b      	ldr	r3, [r7, #0]
 800d780:	685b      	ldr	r3, [r3, #4]
 800d782:	685a      	ldr	r2, [r3, #4]
 800d784:	683b      	ldr	r3, [r7, #0]
 800d786:	605a      	str	r2, [r3, #4]
 800d788:	683b      	ldr	r3, [r7, #0]
 800d78a:	685a      	ldr	r2, [r3, #4]
 800d78c:	683b      	ldr	r3, [r7, #0]
 800d78e:	3308      	adds	r3, #8
 800d790:	429a      	cmp	r2, r3
 800d792:	d104      	bne.n	800d79e <vTaskSwitchContext+0x76>
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	685b      	ldr	r3, [r3, #4]
 800d798:	685a      	ldr	r2, [r3, #4]
 800d79a:	683b      	ldr	r3, [r7, #0]
 800d79c:	605a      	str	r2, [r3, #4]
 800d79e:	683b      	ldr	r3, [r7, #0]
 800d7a0:	685b      	ldr	r3, [r3, #4]
 800d7a2:	68da      	ldr	r2, [r3, #12]
 800d7a4:	4b0b      	ldr	r3, [pc, #44]	; (800d7d4 <vTaskSwitchContext+0xac>)
 800d7a6:	601a      	str	r2, [r3, #0]
 800d7a8:	4b08      	ldr	r3, [pc, #32]	; (800d7cc <vTaskSwitchContext+0xa4>)
 800d7aa:	687a      	ldr	r2, [r7, #4]
 800d7ac:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d7ae:	4b09      	ldr	r3, [pc, #36]	; (800d7d4 <vTaskSwitchContext+0xac>)
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	3354      	adds	r3, #84	; 0x54
 800d7b4:	001a      	movs	r2, r3
 800d7b6:	4b08      	ldr	r3, [pc, #32]	; (800d7d8 <vTaskSwitchContext+0xb0>)
 800d7b8:	601a      	str	r2, [r3, #0]
}
 800d7ba:	46c0      	nop			; (mov r8, r8)
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	b002      	add	sp, #8
 800d7c0:	bd80      	pop	{r7, pc}
 800d7c2:	46c0      	nop			; (mov r8, r8)
 800d7c4:	20001050 	.word	0x20001050
 800d7c8:	2000103c 	.word	0x2000103c
 800d7cc:	20001030 	.word	0x20001030
 800d7d0:	20000b58 	.word	0x20000b58
 800d7d4:	20000b54 	.word	0x20000b54
 800d7d8:	20000074 	.word	0x20000074

0800d7dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b082      	sub	sp, #8
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
 800d7e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d101      	bne.n	800d7f0 <vTaskPlaceOnEventList+0x14>
 800d7ec:	b672      	cpsid	i
 800d7ee:	e7fe      	b.n	800d7ee <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d7f0:	4b08      	ldr	r3, [pc, #32]	; (800d814 <vTaskPlaceOnEventList+0x38>)
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	3318      	adds	r3, #24
 800d7f6:	001a      	movs	r2, r3
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	0011      	movs	r1, r2
 800d7fc:	0018      	movs	r0, r3
 800d7fe:	f7fe fc18 	bl	800c032 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d802:	683b      	ldr	r3, [r7, #0]
 800d804:	2101      	movs	r1, #1
 800d806:	0018      	movs	r0, r3
 800d808:	f000 fb36 	bl	800de78 <prvAddCurrentTaskToDelayedList>
}
 800d80c:	46c0      	nop			; (mov r8, r8)
 800d80e:	46bd      	mov	sp, r7
 800d810:	b002      	add	sp, #8
 800d812:	bd80      	pop	{r7, pc}
 800d814:	20000b54 	.word	0x20000b54

0800d818 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b084      	sub	sp, #16
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	60f8      	str	r0, [r7, #12]
 800d820:	60b9      	str	r1, [r7, #8]
 800d822:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d101      	bne.n	800d82e <vTaskPlaceOnEventListRestricted+0x16>
 800d82a:	b672      	cpsid	i
 800d82c:	e7fe      	b.n	800d82c <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d82e:	4b0c      	ldr	r3, [pc, #48]	; (800d860 <vTaskPlaceOnEventListRestricted+0x48>)
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	3318      	adds	r3, #24
 800d834:	001a      	movs	r2, r3
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	0011      	movs	r1, r2
 800d83a:	0018      	movs	r0, r3
 800d83c:	f7fe fbd7 	bl	800bfee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d002      	beq.n	800d84c <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 800d846:	2301      	movs	r3, #1
 800d848:	425b      	negs	r3, r3
 800d84a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d84c:	687a      	ldr	r2, [r7, #4]
 800d84e:	68bb      	ldr	r3, [r7, #8]
 800d850:	0011      	movs	r1, r2
 800d852:	0018      	movs	r0, r3
 800d854:	f000 fb10 	bl	800de78 <prvAddCurrentTaskToDelayedList>
	}
 800d858:	46c0      	nop			; (mov r8, r8)
 800d85a:	46bd      	mov	sp, r7
 800d85c:	b004      	add	sp, #16
 800d85e:	bd80      	pop	{r7, pc}
 800d860:	20000b54 	.word	0x20000b54

0800d864 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d864:	b580      	push	{r7, lr}
 800d866:	b084      	sub	sp, #16
 800d868:	af00      	add	r7, sp, #0
 800d86a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	68db      	ldr	r3, [r3, #12]
 800d870:	68db      	ldr	r3, [r3, #12]
 800d872:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 800d874:	68bb      	ldr	r3, [r7, #8]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d101      	bne.n	800d87e <xTaskRemoveFromEventList+0x1a>
 800d87a:	b672      	cpsid	i
 800d87c:	e7fe      	b.n	800d87c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d87e:	68bb      	ldr	r3, [r7, #8]
 800d880:	3318      	adds	r3, #24
 800d882:	0018      	movs	r0, r3
 800d884:	f7fe fc0b 	bl	800c09e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d888:	4b1e      	ldr	r3, [pc, #120]	; (800d904 <xTaskRemoveFromEventList+0xa0>)
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d11d      	bne.n	800d8cc <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d890:	68bb      	ldr	r3, [r7, #8]
 800d892:	3304      	adds	r3, #4
 800d894:	0018      	movs	r0, r3
 800d896:	f7fe fc02 	bl	800c09e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d89a:	68bb      	ldr	r3, [r7, #8]
 800d89c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d89e:	4b1a      	ldr	r3, [pc, #104]	; (800d908 <xTaskRemoveFromEventList+0xa4>)
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	429a      	cmp	r2, r3
 800d8a4:	d903      	bls.n	800d8ae <xTaskRemoveFromEventList+0x4a>
 800d8a6:	68bb      	ldr	r3, [r7, #8]
 800d8a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8aa:	4b17      	ldr	r3, [pc, #92]	; (800d908 <xTaskRemoveFromEventList+0xa4>)
 800d8ac:	601a      	str	r2, [r3, #0]
 800d8ae:	68bb      	ldr	r3, [r7, #8]
 800d8b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8b2:	0013      	movs	r3, r2
 800d8b4:	009b      	lsls	r3, r3, #2
 800d8b6:	189b      	adds	r3, r3, r2
 800d8b8:	009b      	lsls	r3, r3, #2
 800d8ba:	4a14      	ldr	r2, [pc, #80]	; (800d90c <xTaskRemoveFromEventList+0xa8>)
 800d8bc:	189a      	adds	r2, r3, r2
 800d8be:	68bb      	ldr	r3, [r7, #8]
 800d8c0:	3304      	adds	r3, #4
 800d8c2:	0019      	movs	r1, r3
 800d8c4:	0010      	movs	r0, r2
 800d8c6:	f7fe fb92 	bl	800bfee <vListInsertEnd>
 800d8ca:	e007      	b.n	800d8dc <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d8cc:	68bb      	ldr	r3, [r7, #8]
 800d8ce:	3318      	adds	r3, #24
 800d8d0:	001a      	movs	r2, r3
 800d8d2:	4b0f      	ldr	r3, [pc, #60]	; (800d910 <xTaskRemoveFromEventList+0xac>)
 800d8d4:	0011      	movs	r1, r2
 800d8d6:	0018      	movs	r0, r3
 800d8d8:	f7fe fb89 	bl	800bfee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d8dc:	68bb      	ldr	r3, [r7, #8]
 800d8de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8e0:	4b0c      	ldr	r3, [pc, #48]	; (800d914 <xTaskRemoveFromEventList+0xb0>)
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8e6:	429a      	cmp	r2, r3
 800d8e8:	d905      	bls.n	800d8f6 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d8ea:	2301      	movs	r3, #1
 800d8ec:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d8ee:	4b0a      	ldr	r3, [pc, #40]	; (800d918 <xTaskRemoveFromEventList+0xb4>)
 800d8f0:	2201      	movs	r2, #1
 800d8f2:	601a      	str	r2, [r3, #0]
 800d8f4:	e001      	b.n	800d8fa <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800d8fa:	68fb      	ldr	r3, [r7, #12]
}
 800d8fc:	0018      	movs	r0, r3
 800d8fe:	46bd      	mov	sp, r7
 800d900:	b004      	add	sp, #16
 800d902:	bd80      	pop	{r7, pc}
 800d904:	20001050 	.word	0x20001050
 800d908:	20001030 	.word	0x20001030
 800d90c:	20000b58 	.word	0x20000b58
 800d910:	20000fe8 	.word	0x20000fe8
 800d914:	20000b54 	.word	0x20000b54
 800d918:	2000103c 	.word	0x2000103c

0800d91c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b082      	sub	sp, #8
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d924:	4b05      	ldr	r3, [pc, #20]	; (800d93c <vTaskInternalSetTimeOutState+0x20>)
 800d926:	681a      	ldr	r2, [r3, #0]
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d92c:	4b04      	ldr	r3, [pc, #16]	; (800d940 <vTaskInternalSetTimeOutState+0x24>)
 800d92e:	681a      	ldr	r2, [r3, #0]
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	605a      	str	r2, [r3, #4]
}
 800d934:	46c0      	nop			; (mov r8, r8)
 800d936:	46bd      	mov	sp, r7
 800d938:	b002      	add	sp, #8
 800d93a:	bd80      	pop	{r7, pc}
 800d93c:	20001040 	.word	0x20001040
 800d940:	2000102c 	.word	0x2000102c

0800d944 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b086      	sub	sp, #24
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
 800d94c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d101      	bne.n	800d958 <xTaskCheckForTimeOut+0x14>
 800d954:	b672      	cpsid	i
 800d956:	e7fe      	b.n	800d956 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d101      	bne.n	800d962 <xTaskCheckForTimeOut+0x1e>
 800d95e:	b672      	cpsid	i
 800d960:	e7fe      	b.n	800d960 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 800d962:	f000 fe45 	bl	800e5f0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d966:	4b1d      	ldr	r3, [pc, #116]	; (800d9dc <xTaskCheckForTimeOut+0x98>)
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	685b      	ldr	r3, [r3, #4]
 800d970:	693a      	ldr	r2, [r7, #16]
 800d972:	1ad3      	subs	r3, r2, r3
 800d974:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	3301      	adds	r3, #1
 800d97c:	d102      	bne.n	800d984 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d97e:	2300      	movs	r3, #0
 800d980:	617b      	str	r3, [r7, #20]
 800d982:	e024      	b.n	800d9ce <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	681a      	ldr	r2, [r3, #0]
 800d988:	4b15      	ldr	r3, [pc, #84]	; (800d9e0 <xTaskCheckForTimeOut+0x9c>)
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	429a      	cmp	r2, r3
 800d98e:	d007      	beq.n	800d9a0 <xTaskCheckForTimeOut+0x5c>
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	685b      	ldr	r3, [r3, #4]
 800d994:	693a      	ldr	r2, [r7, #16]
 800d996:	429a      	cmp	r2, r3
 800d998:	d302      	bcc.n	800d9a0 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d99a:	2301      	movs	r3, #1
 800d99c:	617b      	str	r3, [r7, #20]
 800d99e:	e016      	b.n	800d9ce <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d9a0:	683b      	ldr	r3, [r7, #0]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	68fa      	ldr	r2, [r7, #12]
 800d9a6:	429a      	cmp	r2, r3
 800d9a8:	d20c      	bcs.n	800d9c4 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	681a      	ldr	r2, [r3, #0]
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	1ad2      	subs	r2, r2, r3
 800d9b2:	683b      	ldr	r3, [r7, #0]
 800d9b4:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	0018      	movs	r0, r3
 800d9ba:	f7ff ffaf 	bl	800d91c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d9be:	2300      	movs	r3, #0
 800d9c0:	617b      	str	r3, [r7, #20]
 800d9c2:	e004      	b.n	800d9ce <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 800d9c4:	683b      	ldr	r3, [r7, #0]
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d9ca:	2301      	movs	r3, #1
 800d9cc:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800d9ce:	f000 fe21 	bl	800e614 <vPortExitCritical>

	return xReturn;
 800d9d2:	697b      	ldr	r3, [r7, #20]
}
 800d9d4:	0018      	movs	r0, r3
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	b006      	add	sp, #24
 800d9da:	bd80      	pop	{r7, pc}
 800d9dc:	2000102c 	.word	0x2000102c
 800d9e0:	20001040 	.word	0x20001040

0800d9e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d9e8:	4b02      	ldr	r3, [pc, #8]	; (800d9f4 <vTaskMissedYield+0x10>)
 800d9ea:	2201      	movs	r2, #1
 800d9ec:	601a      	str	r2, [r3, #0]
}
 800d9ee:	46c0      	nop			; (mov r8, r8)
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	bd80      	pop	{r7, pc}
 800d9f4:	2000103c 	.word	0x2000103c

0800d9f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b082      	sub	sp, #8
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800da00:	f000 f84e 	bl	800daa0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800da04:	4b03      	ldr	r3, [pc, #12]	; (800da14 <prvIdleTask+0x1c>)
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	2b01      	cmp	r3, #1
 800da0a:	d9f9      	bls.n	800da00 <prvIdleTask+0x8>
			{
				taskYIELD();
 800da0c:	f000 fde0 	bl	800e5d0 <vPortYield>
		prvCheckTasksWaitingTermination();
 800da10:	e7f6      	b.n	800da00 <prvIdleTask+0x8>
 800da12:	46c0      	nop			; (mov r8, r8)
 800da14:	20000b58 	.word	0x20000b58

0800da18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b082      	sub	sp, #8
 800da1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800da1e:	2300      	movs	r3, #0
 800da20:	607b      	str	r3, [r7, #4]
 800da22:	e00c      	b.n	800da3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800da24:	687a      	ldr	r2, [r7, #4]
 800da26:	0013      	movs	r3, r2
 800da28:	009b      	lsls	r3, r3, #2
 800da2a:	189b      	adds	r3, r3, r2
 800da2c:	009b      	lsls	r3, r3, #2
 800da2e:	4a14      	ldr	r2, [pc, #80]	; (800da80 <prvInitialiseTaskLists+0x68>)
 800da30:	189b      	adds	r3, r3, r2
 800da32:	0018      	movs	r0, r3
 800da34:	f7fe fab2 	bl	800bf9c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	3301      	adds	r3, #1
 800da3c:	607b      	str	r3, [r7, #4]
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	2b37      	cmp	r3, #55	; 0x37
 800da42:	d9ef      	bls.n	800da24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800da44:	4b0f      	ldr	r3, [pc, #60]	; (800da84 <prvInitialiseTaskLists+0x6c>)
 800da46:	0018      	movs	r0, r3
 800da48:	f7fe faa8 	bl	800bf9c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800da4c:	4b0e      	ldr	r3, [pc, #56]	; (800da88 <prvInitialiseTaskLists+0x70>)
 800da4e:	0018      	movs	r0, r3
 800da50:	f7fe faa4 	bl	800bf9c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800da54:	4b0d      	ldr	r3, [pc, #52]	; (800da8c <prvInitialiseTaskLists+0x74>)
 800da56:	0018      	movs	r0, r3
 800da58:	f7fe faa0 	bl	800bf9c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800da5c:	4b0c      	ldr	r3, [pc, #48]	; (800da90 <prvInitialiseTaskLists+0x78>)
 800da5e:	0018      	movs	r0, r3
 800da60:	f7fe fa9c 	bl	800bf9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800da64:	4b0b      	ldr	r3, [pc, #44]	; (800da94 <prvInitialiseTaskLists+0x7c>)
 800da66:	0018      	movs	r0, r3
 800da68:	f7fe fa98 	bl	800bf9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800da6c:	4b0a      	ldr	r3, [pc, #40]	; (800da98 <prvInitialiseTaskLists+0x80>)
 800da6e:	4a05      	ldr	r2, [pc, #20]	; (800da84 <prvInitialiseTaskLists+0x6c>)
 800da70:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800da72:	4b0a      	ldr	r3, [pc, #40]	; (800da9c <prvInitialiseTaskLists+0x84>)
 800da74:	4a04      	ldr	r2, [pc, #16]	; (800da88 <prvInitialiseTaskLists+0x70>)
 800da76:	601a      	str	r2, [r3, #0]
}
 800da78:	46c0      	nop			; (mov r8, r8)
 800da7a:	46bd      	mov	sp, r7
 800da7c:	b002      	add	sp, #8
 800da7e:	bd80      	pop	{r7, pc}
 800da80:	20000b58 	.word	0x20000b58
 800da84:	20000fb8 	.word	0x20000fb8
 800da88:	20000fcc 	.word	0x20000fcc
 800da8c:	20000fe8 	.word	0x20000fe8
 800da90:	20000ffc 	.word	0x20000ffc
 800da94:	20001014 	.word	0x20001014
 800da98:	20000fe0 	.word	0x20000fe0
 800da9c:	20000fe4 	.word	0x20000fe4

0800daa0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b082      	sub	sp, #8
 800daa4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800daa6:	e01a      	b.n	800dade <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 800daa8:	f000 fda2 	bl	800e5f0 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800daac:	4b10      	ldr	r3, [pc, #64]	; (800daf0 <prvCheckTasksWaitingTermination+0x50>)
 800daae:	68db      	ldr	r3, [r3, #12]
 800dab0:	68db      	ldr	r3, [r3, #12]
 800dab2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	3304      	adds	r3, #4
 800dab8:	0018      	movs	r0, r3
 800daba:	f7fe faf0 	bl	800c09e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800dabe:	4b0d      	ldr	r3, [pc, #52]	; (800daf4 <prvCheckTasksWaitingTermination+0x54>)
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	1e5a      	subs	r2, r3, #1
 800dac4:	4b0b      	ldr	r3, [pc, #44]	; (800daf4 <prvCheckTasksWaitingTermination+0x54>)
 800dac6:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 800dac8:	4b0b      	ldr	r3, [pc, #44]	; (800daf8 <prvCheckTasksWaitingTermination+0x58>)
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	1e5a      	subs	r2, r3, #1
 800dace:	4b0a      	ldr	r3, [pc, #40]	; (800daf8 <prvCheckTasksWaitingTermination+0x58>)
 800dad0:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 800dad2:	f000 fd9f 	bl	800e614 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	0018      	movs	r0, r3
 800dada:	f000 f80f 	bl	800dafc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dade:	4b06      	ldr	r3, [pc, #24]	; (800daf8 <prvCheckTasksWaitingTermination+0x58>)
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d1e0      	bne.n	800daa8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800dae6:	46c0      	nop			; (mov r8, r8)
 800dae8:	46c0      	nop			; (mov r8, r8)
 800daea:	46bd      	mov	sp, r7
 800daec:	b002      	add	sp, #8
 800daee:	bd80      	pop	{r7, pc}
 800daf0:	20000ffc 	.word	0x20000ffc
 800daf4:	20001028 	.word	0x20001028
 800daf8:	20001010 	.word	0x20001010

0800dafc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b082      	sub	sp, #8
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	3354      	adds	r3, #84	; 0x54
 800db08:	0018      	movs	r0, r3
 800db0a:	f001 fe09 	bl	800f720 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	22b9      	movs	r2, #185	; 0xb9
 800db12:	5c9b      	ldrb	r3, [r3, r2]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d109      	bne.n	800db2c <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db1c:	0018      	movs	r0, r3
 800db1e:	f000 fea5 	bl	800e86c <vPortFree>
				vPortFree( pxTCB );
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	0018      	movs	r0, r3
 800db26:	f000 fea1 	bl	800e86c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800db2a:	e010      	b.n	800db4e <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	22b9      	movs	r2, #185	; 0xb9
 800db30:	5c9b      	ldrb	r3, [r3, r2]
 800db32:	2b01      	cmp	r3, #1
 800db34:	d104      	bne.n	800db40 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	0018      	movs	r0, r3
 800db3a:	f000 fe97 	bl	800e86c <vPortFree>
	}
 800db3e:	e006      	b.n	800db4e <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	22b9      	movs	r2, #185	; 0xb9
 800db44:	5c9b      	ldrb	r3, [r3, r2]
 800db46:	2b02      	cmp	r3, #2
 800db48:	d001      	beq.n	800db4e <prvDeleteTCB+0x52>
 800db4a:	b672      	cpsid	i
 800db4c:	e7fe      	b.n	800db4c <prvDeleteTCB+0x50>
	}
 800db4e:	46c0      	nop			; (mov r8, r8)
 800db50:	46bd      	mov	sp, r7
 800db52:	b002      	add	sp, #8
 800db54:	bd80      	pop	{r7, pc}
	...

0800db58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b082      	sub	sp, #8
 800db5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800db5e:	4b0e      	ldr	r3, [pc, #56]	; (800db98 <prvResetNextTaskUnblockTime+0x40>)
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d101      	bne.n	800db6c <prvResetNextTaskUnblockTime+0x14>
 800db68:	2301      	movs	r3, #1
 800db6a:	e000      	b.n	800db6e <prvResetNextTaskUnblockTime+0x16>
 800db6c:	2300      	movs	r3, #0
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d004      	beq.n	800db7c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800db72:	4b0a      	ldr	r3, [pc, #40]	; (800db9c <prvResetNextTaskUnblockTime+0x44>)
 800db74:	2201      	movs	r2, #1
 800db76:	4252      	negs	r2, r2
 800db78:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800db7a:	e008      	b.n	800db8e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800db7c:	4b06      	ldr	r3, [pc, #24]	; (800db98 <prvResetNextTaskUnblockTime+0x40>)
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	68db      	ldr	r3, [r3, #12]
 800db82:	68db      	ldr	r3, [r3, #12]
 800db84:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	685a      	ldr	r2, [r3, #4]
 800db8a:	4b04      	ldr	r3, [pc, #16]	; (800db9c <prvResetNextTaskUnblockTime+0x44>)
 800db8c:	601a      	str	r2, [r3, #0]
}
 800db8e:	46c0      	nop			; (mov r8, r8)
 800db90:	46bd      	mov	sp, r7
 800db92:	b002      	add	sp, #8
 800db94:	bd80      	pop	{r7, pc}
 800db96:	46c0      	nop			; (mov r8, r8)
 800db98:	20000fe0 	.word	0x20000fe0
 800db9c:	20001048 	.word	0x20001048

0800dba0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b082      	sub	sp, #8
 800dba4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800dba6:	4b0a      	ldr	r3, [pc, #40]	; (800dbd0 <xTaskGetSchedulerState+0x30>)
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d102      	bne.n	800dbb4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800dbae:	2301      	movs	r3, #1
 800dbb0:	607b      	str	r3, [r7, #4]
 800dbb2:	e008      	b.n	800dbc6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dbb4:	4b07      	ldr	r3, [pc, #28]	; (800dbd4 <xTaskGetSchedulerState+0x34>)
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d102      	bne.n	800dbc2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800dbbc:	2302      	movs	r3, #2
 800dbbe:	607b      	str	r3, [r7, #4]
 800dbc0:	e001      	b.n	800dbc6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800dbc6:	687b      	ldr	r3, [r7, #4]
	}
 800dbc8:	0018      	movs	r0, r3
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	b002      	add	sp, #8
 800dbce:	bd80      	pop	{r7, pc}
 800dbd0:	20001034 	.word	0x20001034
 800dbd4:	20001050 	.word	0x20001050

0800dbd8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b084      	sub	sp, #16
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d056      	beq.n	800dc9c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800dbee:	68bb      	ldr	r3, [r7, #8]
 800dbf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbf2:	4b2d      	ldr	r3, [pc, #180]	; (800dca8 <xTaskPriorityInherit+0xd0>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbf8:	429a      	cmp	r2, r3
 800dbfa:	d246      	bcs.n	800dc8a <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dbfc:	68bb      	ldr	r3, [r7, #8]
 800dbfe:	699b      	ldr	r3, [r3, #24]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	db06      	blt.n	800dc12 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc04:	4b28      	ldr	r3, [pc, #160]	; (800dca8 <xTaskPriorityInherit+0xd0>)
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc0a:	2238      	movs	r2, #56	; 0x38
 800dc0c:	1ad2      	subs	r2, r2, r3
 800dc0e:	68bb      	ldr	r3, [r7, #8]
 800dc10:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800dc12:	68bb      	ldr	r3, [r7, #8]
 800dc14:	6959      	ldr	r1, [r3, #20]
 800dc16:	68bb      	ldr	r3, [r7, #8]
 800dc18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc1a:	0013      	movs	r3, r2
 800dc1c:	009b      	lsls	r3, r3, #2
 800dc1e:	189b      	adds	r3, r3, r2
 800dc20:	009b      	lsls	r3, r3, #2
 800dc22:	4a22      	ldr	r2, [pc, #136]	; (800dcac <xTaskPriorityInherit+0xd4>)
 800dc24:	189b      	adds	r3, r3, r2
 800dc26:	4299      	cmp	r1, r3
 800dc28:	d101      	bne.n	800dc2e <xTaskPriorityInherit+0x56>
 800dc2a:	2301      	movs	r3, #1
 800dc2c:	e000      	b.n	800dc30 <xTaskPriorityInherit+0x58>
 800dc2e:	2300      	movs	r3, #0
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d022      	beq.n	800dc7a <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dc34:	68bb      	ldr	r3, [r7, #8]
 800dc36:	3304      	adds	r3, #4
 800dc38:	0018      	movs	r0, r3
 800dc3a:	f7fe fa30 	bl	800c09e <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dc3e:	4b1a      	ldr	r3, [pc, #104]	; (800dca8 <xTaskPriorityInherit+0xd0>)
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc44:	68bb      	ldr	r3, [r7, #8]
 800dc46:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800dc48:	68bb      	ldr	r3, [r7, #8]
 800dc4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc4c:	4b18      	ldr	r3, [pc, #96]	; (800dcb0 <xTaskPriorityInherit+0xd8>)
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	429a      	cmp	r2, r3
 800dc52:	d903      	bls.n	800dc5c <xTaskPriorityInherit+0x84>
 800dc54:	68bb      	ldr	r3, [r7, #8]
 800dc56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc58:	4b15      	ldr	r3, [pc, #84]	; (800dcb0 <xTaskPriorityInherit+0xd8>)
 800dc5a:	601a      	str	r2, [r3, #0]
 800dc5c:	68bb      	ldr	r3, [r7, #8]
 800dc5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc60:	0013      	movs	r3, r2
 800dc62:	009b      	lsls	r3, r3, #2
 800dc64:	189b      	adds	r3, r3, r2
 800dc66:	009b      	lsls	r3, r3, #2
 800dc68:	4a10      	ldr	r2, [pc, #64]	; (800dcac <xTaskPriorityInherit+0xd4>)
 800dc6a:	189a      	adds	r2, r3, r2
 800dc6c:	68bb      	ldr	r3, [r7, #8]
 800dc6e:	3304      	adds	r3, #4
 800dc70:	0019      	movs	r1, r3
 800dc72:	0010      	movs	r0, r2
 800dc74:	f7fe f9bb 	bl	800bfee <vListInsertEnd>
 800dc78:	e004      	b.n	800dc84 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dc7a:	4b0b      	ldr	r3, [pc, #44]	; (800dca8 <xTaskPriorityInherit+0xd0>)
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc80:	68bb      	ldr	r3, [r7, #8]
 800dc82:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800dc84:	2301      	movs	r3, #1
 800dc86:	60fb      	str	r3, [r7, #12]
 800dc88:	e008      	b.n	800dc9c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800dc8a:	68bb      	ldr	r3, [r7, #8]
 800dc8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dc8e:	4b06      	ldr	r3, [pc, #24]	; (800dca8 <xTaskPriorityInherit+0xd0>)
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc94:	429a      	cmp	r2, r3
 800dc96:	d201      	bcs.n	800dc9c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800dc98:	2301      	movs	r3, #1
 800dc9a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
	}
 800dc9e:	0018      	movs	r0, r3
 800dca0:	46bd      	mov	sp, r7
 800dca2:	b004      	add	sp, #16
 800dca4:	bd80      	pop	{r7, pc}
 800dca6:	46c0      	nop			; (mov r8, r8)
 800dca8:	20000b54 	.word	0x20000b54
 800dcac:	20000b58 	.word	0x20000b58
 800dcb0:	20001030 	.word	0x20001030

0800dcb4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b084      	sub	sp, #16
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d044      	beq.n	800dd54 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800dcca:	4b25      	ldr	r3, [pc, #148]	; (800dd60 <xTaskPriorityDisinherit+0xac>)
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	68ba      	ldr	r2, [r7, #8]
 800dcd0:	429a      	cmp	r2, r3
 800dcd2:	d001      	beq.n	800dcd8 <xTaskPriorityDisinherit+0x24>
 800dcd4:	b672      	cpsid	i
 800dcd6:	e7fe      	b.n	800dcd6 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800dcd8:	68bb      	ldr	r3, [r7, #8]
 800dcda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d101      	bne.n	800dce4 <xTaskPriorityDisinherit+0x30>
 800dce0:	b672      	cpsid	i
 800dce2:	e7fe      	b.n	800dce2 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 800dce4:	68bb      	ldr	r3, [r7, #8]
 800dce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dce8:	1e5a      	subs	r2, r3, #1
 800dcea:	68bb      	ldr	r3, [r7, #8]
 800dcec:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dcee:	68bb      	ldr	r3, [r7, #8]
 800dcf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dcf6:	429a      	cmp	r2, r3
 800dcf8:	d02c      	beq.n	800dd54 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dcfa:	68bb      	ldr	r3, [r7, #8]
 800dcfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d128      	bne.n	800dd54 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dd02:	68bb      	ldr	r3, [r7, #8]
 800dd04:	3304      	adds	r3, #4
 800dd06:	0018      	movs	r0, r3
 800dd08:	f7fe f9c9 	bl	800c09e <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dd0c:	68bb      	ldr	r3, [r7, #8]
 800dd0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dd10:	68bb      	ldr	r3, [r7, #8]
 800dd12:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd14:	68bb      	ldr	r3, [r7, #8]
 800dd16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd18:	2238      	movs	r2, #56	; 0x38
 800dd1a:	1ad2      	subs	r2, r2, r3
 800dd1c:	68bb      	ldr	r3, [r7, #8]
 800dd1e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800dd20:	68bb      	ldr	r3, [r7, #8]
 800dd22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd24:	4b0f      	ldr	r3, [pc, #60]	; (800dd64 <xTaskPriorityDisinherit+0xb0>)
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	429a      	cmp	r2, r3
 800dd2a:	d903      	bls.n	800dd34 <xTaskPriorityDisinherit+0x80>
 800dd2c:	68bb      	ldr	r3, [r7, #8]
 800dd2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd30:	4b0c      	ldr	r3, [pc, #48]	; (800dd64 <xTaskPriorityDisinherit+0xb0>)
 800dd32:	601a      	str	r2, [r3, #0]
 800dd34:	68bb      	ldr	r3, [r7, #8]
 800dd36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd38:	0013      	movs	r3, r2
 800dd3a:	009b      	lsls	r3, r3, #2
 800dd3c:	189b      	adds	r3, r3, r2
 800dd3e:	009b      	lsls	r3, r3, #2
 800dd40:	4a09      	ldr	r2, [pc, #36]	; (800dd68 <xTaskPriorityDisinherit+0xb4>)
 800dd42:	189a      	adds	r2, r3, r2
 800dd44:	68bb      	ldr	r3, [r7, #8]
 800dd46:	3304      	adds	r3, #4
 800dd48:	0019      	movs	r1, r3
 800dd4a:	0010      	movs	r0, r2
 800dd4c:	f7fe f94f 	bl	800bfee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800dd50:	2301      	movs	r3, #1
 800dd52:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dd54:	68fb      	ldr	r3, [r7, #12]
	}
 800dd56:	0018      	movs	r0, r3
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	b004      	add	sp, #16
 800dd5c:	bd80      	pop	{r7, pc}
 800dd5e:	46c0      	nop			; (mov r8, r8)
 800dd60:	20000b54 	.word	0x20000b54
 800dd64:	20001030 	.word	0x20001030
 800dd68:	20000b58 	.word	0x20000b58

0800dd6c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b086      	sub	sp, #24
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
 800dd74:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800dd7a:	2301      	movs	r3, #1
 800dd7c:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d05d      	beq.n	800de40 <vTaskPriorityDisinheritAfterTimeout+0xd4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800dd84:	693b      	ldr	r3, [r7, #16]
 800dd86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d101      	bne.n	800dd90 <vTaskPriorityDisinheritAfterTimeout+0x24>
 800dd8c:	b672      	cpsid	i
 800dd8e:	e7fe      	b.n	800dd8e <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800dd90:	693b      	ldr	r3, [r7, #16]
 800dd92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd94:	683a      	ldr	r2, [r7, #0]
 800dd96:	429a      	cmp	r2, r3
 800dd98:	d902      	bls.n	800dda0 <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800dd9a:	683b      	ldr	r3, [r7, #0]
 800dd9c:	617b      	str	r3, [r7, #20]
 800dd9e:	e002      	b.n	800dda6 <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800dda0:	693b      	ldr	r3, [r7, #16]
 800dda2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dda4:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800dda6:	693b      	ldr	r3, [r7, #16]
 800dda8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddaa:	697a      	ldr	r2, [r7, #20]
 800ddac:	429a      	cmp	r2, r3
 800ddae:	d047      	beq.n	800de40 <vTaskPriorityDisinheritAfterTimeout+0xd4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ddb0:	693b      	ldr	r3, [r7, #16]
 800ddb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ddb4:	68fa      	ldr	r2, [r7, #12]
 800ddb6:	429a      	cmp	r2, r3
 800ddb8:	d142      	bne.n	800de40 <vTaskPriorityDisinheritAfterTimeout+0xd4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ddba:	4b23      	ldr	r3, [pc, #140]	; (800de48 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	693a      	ldr	r2, [r7, #16]
 800ddc0:	429a      	cmp	r2, r3
 800ddc2:	d101      	bne.n	800ddc8 <vTaskPriorityDisinheritAfterTimeout+0x5c>
 800ddc4:	b672      	cpsid	i
 800ddc6:	e7fe      	b.n	800ddc6 <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ddc8:	693b      	ldr	r3, [r7, #16]
 800ddca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddcc:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 800ddce:	693b      	ldr	r3, [r7, #16]
 800ddd0:	697a      	ldr	r2, [r7, #20]
 800ddd2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ddd4:	693b      	ldr	r3, [r7, #16]
 800ddd6:	699b      	ldr	r3, [r3, #24]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	db04      	blt.n	800dde6 <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dddc:	697b      	ldr	r3, [r7, #20]
 800ddde:	2238      	movs	r2, #56	; 0x38
 800dde0:	1ad2      	subs	r2, r2, r3
 800dde2:	693b      	ldr	r3, [r7, #16]
 800dde4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dde6:	693b      	ldr	r3, [r7, #16]
 800dde8:	6959      	ldr	r1, [r3, #20]
 800ddea:	68ba      	ldr	r2, [r7, #8]
 800ddec:	0013      	movs	r3, r2
 800ddee:	009b      	lsls	r3, r3, #2
 800ddf0:	189b      	adds	r3, r3, r2
 800ddf2:	009b      	lsls	r3, r3, #2
 800ddf4:	4a15      	ldr	r2, [pc, #84]	; (800de4c <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 800ddf6:	189b      	adds	r3, r3, r2
 800ddf8:	4299      	cmp	r1, r3
 800ddfa:	d101      	bne.n	800de00 <vTaskPriorityDisinheritAfterTimeout+0x94>
 800ddfc:	2301      	movs	r3, #1
 800ddfe:	e000      	b.n	800de02 <vTaskPriorityDisinheritAfterTimeout+0x96>
 800de00:	2300      	movs	r3, #0
 800de02:	2b00      	cmp	r3, #0
 800de04:	d01c      	beq.n	800de40 <vTaskPriorityDisinheritAfterTimeout+0xd4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800de06:	693b      	ldr	r3, [r7, #16]
 800de08:	3304      	adds	r3, #4
 800de0a:	0018      	movs	r0, r3
 800de0c:	f7fe f947 	bl	800c09e <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800de10:	693b      	ldr	r3, [r7, #16]
 800de12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de14:	4b0e      	ldr	r3, [pc, #56]	; (800de50 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	429a      	cmp	r2, r3
 800de1a:	d903      	bls.n	800de24 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800de1c:	693b      	ldr	r3, [r7, #16]
 800de1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de20:	4b0b      	ldr	r3, [pc, #44]	; (800de50 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 800de22:	601a      	str	r2, [r3, #0]
 800de24:	693b      	ldr	r3, [r7, #16]
 800de26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de28:	0013      	movs	r3, r2
 800de2a:	009b      	lsls	r3, r3, #2
 800de2c:	189b      	adds	r3, r3, r2
 800de2e:	009b      	lsls	r3, r3, #2
 800de30:	4a06      	ldr	r2, [pc, #24]	; (800de4c <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 800de32:	189a      	adds	r2, r3, r2
 800de34:	693b      	ldr	r3, [r7, #16]
 800de36:	3304      	adds	r3, #4
 800de38:	0019      	movs	r1, r3
 800de3a:	0010      	movs	r0, r2
 800de3c:	f7fe f8d7 	bl	800bfee <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800de40:	46c0      	nop			; (mov r8, r8)
 800de42:	46bd      	mov	sp, r7
 800de44:	b006      	add	sp, #24
 800de46:	bd80      	pop	{r7, pc}
 800de48:	20000b54 	.word	0x20000b54
 800de4c:	20000b58 	.word	0x20000b58
 800de50:	20001030 	.word	0x20001030

0800de54 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800de54:	b580      	push	{r7, lr}
 800de56:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800de58:	4b06      	ldr	r3, [pc, #24]	; (800de74 <pvTaskIncrementMutexHeldCount+0x20>)
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d004      	beq.n	800de6a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800de60:	4b04      	ldr	r3, [pc, #16]	; (800de74 <pvTaskIncrementMutexHeldCount+0x20>)
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800de66:	3201      	adds	r2, #1
 800de68:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800de6a:	4b02      	ldr	r3, [pc, #8]	; (800de74 <pvTaskIncrementMutexHeldCount+0x20>)
 800de6c:	681b      	ldr	r3, [r3, #0]
	}
 800de6e:	0018      	movs	r0, r3
 800de70:	46bd      	mov	sp, r7
 800de72:	bd80      	pop	{r7, pc}
 800de74:	20000b54 	.word	0x20000b54

0800de78 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b084      	sub	sp, #16
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
 800de80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800de82:	4b21      	ldr	r3, [pc, #132]	; (800df08 <prvAddCurrentTaskToDelayedList+0x90>)
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800de88:	4b20      	ldr	r3, [pc, #128]	; (800df0c <prvAddCurrentTaskToDelayedList+0x94>)
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	3304      	adds	r3, #4
 800de8e:	0018      	movs	r0, r3
 800de90:	f7fe f905 	bl	800c09e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	3301      	adds	r3, #1
 800de98:	d10b      	bne.n	800deb2 <prvAddCurrentTaskToDelayedList+0x3a>
 800de9a:	683b      	ldr	r3, [r7, #0]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d008      	beq.n	800deb2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dea0:	4b1a      	ldr	r3, [pc, #104]	; (800df0c <prvAddCurrentTaskToDelayedList+0x94>)
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	1d1a      	adds	r2, r3, #4
 800dea6:	4b1a      	ldr	r3, [pc, #104]	; (800df10 <prvAddCurrentTaskToDelayedList+0x98>)
 800dea8:	0011      	movs	r1, r2
 800deaa:	0018      	movs	r0, r3
 800deac:	f7fe f89f 	bl	800bfee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800deb0:	e026      	b.n	800df00 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800deb2:	68fa      	ldr	r2, [r7, #12]
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	18d3      	adds	r3, r2, r3
 800deb8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800deba:	4b14      	ldr	r3, [pc, #80]	; (800df0c <prvAddCurrentTaskToDelayedList+0x94>)
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	68ba      	ldr	r2, [r7, #8]
 800dec0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dec2:	68ba      	ldr	r2, [r7, #8]
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	429a      	cmp	r2, r3
 800dec8:	d209      	bcs.n	800dede <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800deca:	4b12      	ldr	r3, [pc, #72]	; (800df14 <prvAddCurrentTaskToDelayedList+0x9c>)
 800decc:	681a      	ldr	r2, [r3, #0]
 800dece:	4b0f      	ldr	r3, [pc, #60]	; (800df0c <prvAddCurrentTaskToDelayedList+0x94>)
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	3304      	adds	r3, #4
 800ded4:	0019      	movs	r1, r3
 800ded6:	0010      	movs	r0, r2
 800ded8:	f7fe f8ab 	bl	800c032 <vListInsert>
}
 800dedc:	e010      	b.n	800df00 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dede:	4b0e      	ldr	r3, [pc, #56]	; (800df18 <prvAddCurrentTaskToDelayedList+0xa0>)
 800dee0:	681a      	ldr	r2, [r3, #0]
 800dee2:	4b0a      	ldr	r3, [pc, #40]	; (800df0c <prvAddCurrentTaskToDelayedList+0x94>)
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	3304      	adds	r3, #4
 800dee8:	0019      	movs	r1, r3
 800deea:	0010      	movs	r0, r2
 800deec:	f7fe f8a1 	bl	800c032 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800def0:	4b0a      	ldr	r3, [pc, #40]	; (800df1c <prvAddCurrentTaskToDelayedList+0xa4>)
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	68ba      	ldr	r2, [r7, #8]
 800def6:	429a      	cmp	r2, r3
 800def8:	d202      	bcs.n	800df00 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800defa:	4b08      	ldr	r3, [pc, #32]	; (800df1c <prvAddCurrentTaskToDelayedList+0xa4>)
 800defc:	68ba      	ldr	r2, [r7, #8]
 800defe:	601a      	str	r2, [r3, #0]
}
 800df00:	46c0      	nop			; (mov r8, r8)
 800df02:	46bd      	mov	sp, r7
 800df04:	b004      	add	sp, #16
 800df06:	bd80      	pop	{r7, pc}
 800df08:	2000102c 	.word	0x2000102c
 800df0c:	20000b54 	.word	0x20000b54
 800df10:	20001014 	.word	0x20001014
 800df14:	20000fe4 	.word	0x20000fe4
 800df18:	20000fe0 	.word	0x20000fe0
 800df1c:	20001048 	.word	0x20001048

0800df20 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800df20:	b590      	push	{r4, r7, lr}
 800df22:	b089      	sub	sp, #36	; 0x24
 800df24:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800df26:	2300      	movs	r3, #0
 800df28:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800df2a:	f000 fa87 	bl	800e43c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800df2e:	4b17      	ldr	r3, [pc, #92]	; (800df8c <xTimerCreateTimerTask+0x6c>)
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d020      	beq.n	800df78 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800df36:	2300      	movs	r3, #0
 800df38:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800df3a:	2300      	movs	r3, #0
 800df3c:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800df3e:	003a      	movs	r2, r7
 800df40:	1d39      	adds	r1, r7, #4
 800df42:	2308      	movs	r3, #8
 800df44:	18fb      	adds	r3, r7, r3
 800df46:	0018      	movs	r0, r3
 800df48:	f7fe f810 	bl	800bf6c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800df4c:	683c      	ldr	r4, [r7, #0]
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	68ba      	ldr	r2, [r7, #8]
 800df52:	490f      	ldr	r1, [pc, #60]	; (800df90 <xTimerCreateTimerTask+0x70>)
 800df54:	480f      	ldr	r0, [pc, #60]	; (800df94 <xTimerCreateTimerTask+0x74>)
 800df56:	9202      	str	r2, [sp, #8]
 800df58:	9301      	str	r3, [sp, #4]
 800df5a:	2302      	movs	r3, #2
 800df5c:	9300      	str	r3, [sp, #0]
 800df5e:	2300      	movs	r3, #0
 800df60:	0022      	movs	r2, r4
 800df62:	f7fe ff90 	bl	800ce86 <xTaskCreateStatic>
 800df66:	0002      	movs	r2, r0
 800df68:	4b0b      	ldr	r3, [pc, #44]	; (800df98 <xTimerCreateTimerTask+0x78>)
 800df6a:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800df6c:	4b0a      	ldr	r3, [pc, #40]	; (800df98 <xTimerCreateTimerTask+0x78>)
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d001      	beq.n	800df78 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 800df74:	2301      	movs	r3, #1
 800df76:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d101      	bne.n	800df82 <xTimerCreateTimerTask+0x62>
 800df7e:	b672      	cpsid	i
 800df80:	e7fe      	b.n	800df80 <xTimerCreateTimerTask+0x60>
	return xReturn;
 800df82:	68fb      	ldr	r3, [r7, #12]
}
 800df84:	0018      	movs	r0, r3
 800df86:	46bd      	mov	sp, r7
 800df88:	b005      	add	sp, #20
 800df8a:	bd90      	pop	{r4, r7, pc}
 800df8c:	20001084 	.word	0x20001084
 800df90:	08012eb4 	.word	0x08012eb4
 800df94:	0800e0a1 	.word	0x0800e0a1
 800df98:	20001088 	.word	0x20001088

0800df9c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800df9c:	b590      	push	{r4, r7, lr}
 800df9e:	b08b      	sub	sp, #44	; 0x2c
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	60f8      	str	r0, [r7, #12]
 800dfa4:	60b9      	str	r1, [r7, #8]
 800dfa6:	607a      	str	r2, [r7, #4]
 800dfa8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800dfaa:	2300      	movs	r3, #0
 800dfac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d101      	bne.n	800dfb8 <xTimerGenericCommand+0x1c>
 800dfb4:	b672      	cpsid	i
 800dfb6:	e7fe      	b.n	800dfb6 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800dfb8:	4b1c      	ldr	r3, [pc, #112]	; (800e02c <xTimerGenericCommand+0x90>)
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d030      	beq.n	800e022 <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800dfc0:	2414      	movs	r4, #20
 800dfc2:	193b      	adds	r3, r7, r4
 800dfc4:	68ba      	ldr	r2, [r7, #8]
 800dfc6:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800dfc8:	193b      	adds	r3, r7, r4
 800dfca:	687a      	ldr	r2, [r7, #4]
 800dfcc:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800dfce:	193b      	adds	r3, r7, r4
 800dfd0:	68fa      	ldr	r2, [r7, #12]
 800dfd2:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800dfd4:	68bb      	ldr	r3, [r7, #8]
 800dfd6:	2b05      	cmp	r3, #5
 800dfd8:	dc19      	bgt.n	800e00e <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800dfda:	f7ff fde1 	bl	800dba0 <xTaskGetSchedulerState>
 800dfde:	0003      	movs	r3, r0
 800dfe0:	2b02      	cmp	r3, #2
 800dfe2:	d109      	bne.n	800dff8 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800dfe4:	4b11      	ldr	r3, [pc, #68]	; (800e02c <xTimerGenericCommand+0x90>)
 800dfe6:	6818      	ldr	r0, [r3, #0]
 800dfe8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dfea:	1939      	adds	r1, r7, r4
 800dfec:	2300      	movs	r3, #0
 800dfee:	f7fe f9c3 	bl	800c378 <xQueueGenericSend>
 800dff2:	0003      	movs	r3, r0
 800dff4:	627b      	str	r3, [r7, #36]	; 0x24
 800dff6:	e014      	b.n	800e022 <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800dff8:	4b0c      	ldr	r3, [pc, #48]	; (800e02c <xTimerGenericCommand+0x90>)
 800dffa:	6818      	ldr	r0, [r3, #0]
 800dffc:	2314      	movs	r3, #20
 800dffe:	18f9      	adds	r1, r7, r3
 800e000:	2300      	movs	r3, #0
 800e002:	2200      	movs	r2, #0
 800e004:	f7fe f9b8 	bl	800c378 <xQueueGenericSend>
 800e008:	0003      	movs	r3, r0
 800e00a:	627b      	str	r3, [r7, #36]	; 0x24
 800e00c:	e009      	b.n	800e022 <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e00e:	4b07      	ldr	r3, [pc, #28]	; (800e02c <xTimerGenericCommand+0x90>)
 800e010:	6818      	ldr	r0, [r3, #0]
 800e012:	683a      	ldr	r2, [r7, #0]
 800e014:	2314      	movs	r3, #20
 800e016:	18f9      	adds	r1, r7, r3
 800e018:	2300      	movs	r3, #0
 800e01a:	f7fe fa71 	bl	800c500 <xQueueGenericSendFromISR>
 800e01e:	0003      	movs	r3, r0
 800e020:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e024:	0018      	movs	r0, r3
 800e026:	46bd      	mov	sp, r7
 800e028:	b00b      	add	sp, #44	; 0x2c
 800e02a:	bd90      	pop	{r4, r7, pc}
 800e02c:	20001084 	.word	0x20001084

0800e030 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b086      	sub	sp, #24
 800e034:	af02      	add	r7, sp, #8
 800e036:	6078      	str	r0, [r7, #4]
 800e038:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e03a:	4b18      	ldr	r3, [pc, #96]	; (800e09c <prvProcessExpiredTimer+0x6c>)
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	68db      	ldr	r3, [r3, #12]
 800e040:	68db      	ldr	r3, [r3, #12]
 800e042:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	3304      	adds	r3, #4
 800e048:	0018      	movs	r0, r3
 800e04a:	f7fe f828 	bl	800c09e <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	69db      	ldr	r3, [r3, #28]
 800e052:	2b01      	cmp	r3, #1
 800e054:	d119      	bne.n	800e08a <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	699a      	ldr	r2, [r3, #24]
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	18d1      	adds	r1, r2, r3
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	683a      	ldr	r2, [r7, #0]
 800e062:	68f8      	ldr	r0, [r7, #12]
 800e064:	f000 f8b6 	bl	800e1d4 <prvInsertTimerInActiveList>
 800e068:	1e03      	subs	r3, r0, #0
 800e06a:	d00e      	beq.n	800e08a <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e06c:	687a      	ldr	r2, [r7, #4]
 800e06e:	68f8      	ldr	r0, [r7, #12]
 800e070:	2300      	movs	r3, #0
 800e072:	9300      	str	r3, [sp, #0]
 800e074:	2300      	movs	r3, #0
 800e076:	2100      	movs	r1, #0
 800e078:	f7ff ff90 	bl	800df9c <xTimerGenericCommand>
 800e07c:	0003      	movs	r3, r0
 800e07e:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d101      	bne.n	800e08a <prvProcessExpiredTimer+0x5a>
 800e086:	b672      	cpsid	i
 800e088:	e7fe      	b.n	800e088 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e08e:	68fa      	ldr	r2, [r7, #12]
 800e090:	0010      	movs	r0, r2
 800e092:	4798      	blx	r3
}
 800e094:	46c0      	nop			; (mov r8, r8)
 800e096:	46bd      	mov	sp, r7
 800e098:	b004      	add	sp, #16
 800e09a:	bd80      	pop	{r7, pc}
 800e09c:	2000107c 	.word	0x2000107c

0800e0a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b084      	sub	sp, #16
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e0a8:	2308      	movs	r3, #8
 800e0aa:	18fb      	adds	r3, r7, r3
 800e0ac:	0018      	movs	r0, r3
 800e0ae:	f000 f851 	bl	800e154 <prvGetNextExpireTime>
 800e0b2:	0003      	movs	r3, r0
 800e0b4:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e0b6:	68ba      	ldr	r2, [r7, #8]
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	0011      	movs	r1, r2
 800e0bc:	0018      	movs	r0, r3
 800e0be:	f000 f803 	bl	800e0c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e0c2:	f000 f8c9 	bl	800e258 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e0c6:	e7ef      	b.n	800e0a8 <prvTimerTask+0x8>

0800e0c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b084      	sub	sp, #16
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	6078      	str	r0, [r7, #4]
 800e0d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e0d2:	f7ff f9cf 	bl	800d474 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e0d6:	2308      	movs	r3, #8
 800e0d8:	18fb      	adds	r3, r7, r3
 800e0da:	0018      	movs	r0, r3
 800e0dc:	f000 f85a 	bl	800e194 <prvSampleTimeNow>
 800e0e0:	0003      	movs	r3, r0
 800e0e2:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e0e4:	68bb      	ldr	r3, [r7, #8]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d129      	bne.n	800e13e <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e0ea:	683b      	ldr	r3, [r7, #0]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d10c      	bne.n	800e10a <prvProcessTimerOrBlockTask+0x42>
 800e0f0:	687a      	ldr	r2, [r7, #4]
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	429a      	cmp	r2, r3
 800e0f6:	d808      	bhi.n	800e10a <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 800e0f8:	f7ff f9c8 	bl	800d48c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e0fc:	68fa      	ldr	r2, [r7, #12]
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	0011      	movs	r1, r2
 800e102:	0018      	movs	r0, r3
 800e104:	f7ff ff94 	bl	800e030 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e108:	e01b      	b.n	800e142 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 800e10a:	683b      	ldr	r3, [r7, #0]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d006      	beq.n	800e11e <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e110:	4b0e      	ldr	r3, [pc, #56]	; (800e14c <prvProcessTimerOrBlockTask+0x84>)
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	425a      	negs	r2, r3
 800e118:	4153      	adcs	r3, r2
 800e11a:	b2db      	uxtb	r3, r3
 800e11c:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e11e:	4b0c      	ldr	r3, [pc, #48]	; (800e150 <prvProcessTimerOrBlockTask+0x88>)
 800e120:	6818      	ldr	r0, [r3, #0]
 800e122:	687a      	ldr	r2, [r7, #4]
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	1ad3      	subs	r3, r2, r3
 800e128:	683a      	ldr	r2, [r7, #0]
 800e12a:	0019      	movs	r1, r3
 800e12c:	f7fe fe78 	bl	800ce20 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e130:	f7ff f9ac 	bl	800d48c <xTaskResumeAll>
 800e134:	1e03      	subs	r3, r0, #0
 800e136:	d104      	bne.n	800e142 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 800e138:	f000 fa4a 	bl	800e5d0 <vPortYield>
}
 800e13c:	e001      	b.n	800e142 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 800e13e:	f7ff f9a5 	bl	800d48c <xTaskResumeAll>
}
 800e142:	46c0      	nop			; (mov r8, r8)
 800e144:	46bd      	mov	sp, r7
 800e146:	b004      	add	sp, #16
 800e148:	bd80      	pop	{r7, pc}
 800e14a:	46c0      	nop			; (mov r8, r8)
 800e14c:	20001080 	.word	0x20001080
 800e150:	20001084 	.word	0x20001084

0800e154 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b084      	sub	sp, #16
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e15c:	4b0c      	ldr	r3, [pc, #48]	; (800e190 <prvGetNextExpireTime+0x3c>)
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	425a      	negs	r2, r3
 800e164:	4153      	adcs	r3, r2
 800e166:	b2db      	uxtb	r3, r3
 800e168:	001a      	movs	r2, r3
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d105      	bne.n	800e182 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e176:	4b06      	ldr	r3, [pc, #24]	; (800e190 <prvGetNextExpireTime+0x3c>)
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	68db      	ldr	r3, [r3, #12]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	60fb      	str	r3, [r7, #12]
 800e180:	e001      	b.n	800e186 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e182:	2300      	movs	r3, #0
 800e184:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e186:	68fb      	ldr	r3, [r7, #12]
}
 800e188:	0018      	movs	r0, r3
 800e18a:	46bd      	mov	sp, r7
 800e18c:	b004      	add	sp, #16
 800e18e:	bd80      	pop	{r7, pc}
 800e190:	2000107c 	.word	0x2000107c

0800e194 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e194:	b580      	push	{r7, lr}
 800e196:	b084      	sub	sp, #16
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e19c:	f7ff fa02 	bl	800d5a4 <xTaskGetTickCount>
 800e1a0:	0003      	movs	r3, r0
 800e1a2:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 800e1a4:	4b0a      	ldr	r3, [pc, #40]	; (800e1d0 <prvSampleTimeNow+0x3c>)
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	68fa      	ldr	r2, [r7, #12]
 800e1aa:	429a      	cmp	r2, r3
 800e1ac:	d205      	bcs.n	800e1ba <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 800e1ae:	f000 f8eb 	bl	800e388 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	2201      	movs	r2, #1
 800e1b6:	601a      	str	r2, [r3, #0]
 800e1b8:	e002      	b.n	800e1c0 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	2200      	movs	r2, #0
 800e1be:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e1c0:	4b03      	ldr	r3, [pc, #12]	; (800e1d0 <prvSampleTimeNow+0x3c>)
 800e1c2:	68fa      	ldr	r2, [r7, #12]
 800e1c4:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 800e1c6:	68fb      	ldr	r3, [r7, #12]
}
 800e1c8:	0018      	movs	r0, r3
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	b004      	add	sp, #16
 800e1ce:	bd80      	pop	{r7, pc}
 800e1d0:	2000108c 	.word	0x2000108c

0800e1d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b086      	sub	sp, #24
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	60f8      	str	r0, [r7, #12]
 800e1dc:	60b9      	str	r1, [r7, #8]
 800e1de:	607a      	str	r2, [r7, #4]
 800e1e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	68ba      	ldr	r2, [r7, #8]
 800e1ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	68fa      	ldr	r2, [r7, #12]
 800e1f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e1f2:	68ba      	ldr	r2, [r7, #8]
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	429a      	cmp	r2, r3
 800e1f8:	d812      	bhi.n	800e220 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1fa:	687a      	ldr	r2, [r7, #4]
 800e1fc:	683b      	ldr	r3, [r7, #0]
 800e1fe:	1ad2      	subs	r2, r2, r3
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	699b      	ldr	r3, [r3, #24]
 800e204:	429a      	cmp	r2, r3
 800e206:	d302      	bcc.n	800e20e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e208:	2301      	movs	r3, #1
 800e20a:	617b      	str	r3, [r7, #20]
 800e20c:	e01b      	b.n	800e246 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e20e:	4b10      	ldr	r3, [pc, #64]	; (800e250 <prvInsertTimerInActiveList+0x7c>)
 800e210:	681a      	ldr	r2, [r3, #0]
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	3304      	adds	r3, #4
 800e216:	0019      	movs	r1, r3
 800e218:	0010      	movs	r0, r2
 800e21a:	f7fd ff0a 	bl	800c032 <vListInsert>
 800e21e:	e012      	b.n	800e246 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e220:	687a      	ldr	r2, [r7, #4]
 800e222:	683b      	ldr	r3, [r7, #0]
 800e224:	429a      	cmp	r2, r3
 800e226:	d206      	bcs.n	800e236 <prvInsertTimerInActiveList+0x62>
 800e228:	68ba      	ldr	r2, [r7, #8]
 800e22a:	683b      	ldr	r3, [r7, #0]
 800e22c:	429a      	cmp	r2, r3
 800e22e:	d302      	bcc.n	800e236 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e230:	2301      	movs	r3, #1
 800e232:	617b      	str	r3, [r7, #20]
 800e234:	e007      	b.n	800e246 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e236:	4b07      	ldr	r3, [pc, #28]	; (800e254 <prvInsertTimerInActiveList+0x80>)
 800e238:	681a      	ldr	r2, [r3, #0]
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	3304      	adds	r3, #4
 800e23e:	0019      	movs	r1, r3
 800e240:	0010      	movs	r0, r2
 800e242:	f7fd fef6 	bl	800c032 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e246:	697b      	ldr	r3, [r7, #20]
}
 800e248:	0018      	movs	r0, r3
 800e24a:	46bd      	mov	sp, r7
 800e24c:	b006      	add	sp, #24
 800e24e:	bd80      	pop	{r7, pc}
 800e250:	20001080 	.word	0x20001080
 800e254:	2000107c 	.word	0x2000107c

0800e258 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e258:	b590      	push	{r4, r7, lr}
 800e25a:	b08d      	sub	sp, #52	; 0x34
 800e25c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e25e:	e07f      	b.n	800e360 <prvProcessReceivedCommands+0x108>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e260:	2208      	movs	r2, #8
 800e262:	18bb      	adds	r3, r7, r2
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	2b00      	cmp	r3, #0
 800e268:	da0f      	bge.n	800e28a <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e26a:	18bb      	adds	r3, r7, r2
 800e26c:	3304      	adds	r3, #4
 800e26e:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e272:	2b00      	cmp	r3, #0
 800e274:	d101      	bne.n	800e27a <prvProcessReceivedCommands+0x22>
 800e276:	b672      	cpsid	i
 800e278:	e7fe      	b.n	800e278 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e27c:	681a      	ldr	r2, [r3, #0]
 800e27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e280:	6858      	ldr	r0, [r3, #4]
 800e282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e284:	689b      	ldr	r3, [r3, #8]
 800e286:	0019      	movs	r1, r3
 800e288:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e28a:	2208      	movs	r2, #8
 800e28c:	18bb      	adds	r3, r7, r2
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	2b00      	cmp	r3, #0
 800e292:	db64      	blt.n	800e35e <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e294:	18bb      	adds	r3, r7, r2
 800e296:	689b      	ldr	r3, [r3, #8]
 800e298:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e29a:	6a3b      	ldr	r3, [r7, #32]
 800e29c:	695b      	ldr	r3, [r3, #20]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d004      	beq.n	800e2ac <prvProcessReceivedCommands+0x54>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e2a2:	6a3b      	ldr	r3, [r7, #32]
 800e2a4:	3304      	adds	r3, #4
 800e2a6:	0018      	movs	r0, r3
 800e2a8:	f7fd fef9 	bl	800c09e <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e2ac:	1d3b      	adds	r3, r7, #4
 800e2ae:	0018      	movs	r0, r3
 800e2b0:	f7ff ff70 	bl	800e194 <prvSampleTimeNow>
 800e2b4:	0003      	movs	r3, r0
 800e2b6:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 800e2b8:	2308      	movs	r3, #8
 800e2ba:	18fb      	adds	r3, r7, r3
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	2b09      	cmp	r3, #9
 800e2c0:	d84e      	bhi.n	800e360 <prvProcessReceivedCommands+0x108>
 800e2c2:	009a      	lsls	r2, r3, #2
 800e2c4:	4b2e      	ldr	r3, [pc, #184]	; (800e380 <prvProcessReceivedCommands+0x128>)
 800e2c6:	18d3      	adds	r3, r2, r3
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e2cc:	2408      	movs	r4, #8
 800e2ce:	193b      	adds	r3, r7, r4
 800e2d0:	685a      	ldr	r2, [r3, #4]
 800e2d2:	6a3b      	ldr	r3, [r7, #32]
 800e2d4:	699b      	ldr	r3, [r3, #24]
 800e2d6:	18d1      	adds	r1, r2, r3
 800e2d8:	193b      	adds	r3, r7, r4
 800e2da:	685b      	ldr	r3, [r3, #4]
 800e2dc:	69fa      	ldr	r2, [r7, #28]
 800e2de:	6a38      	ldr	r0, [r7, #32]
 800e2e0:	f7ff ff78 	bl	800e1d4 <prvInsertTimerInActiveList>
 800e2e4:	1e03      	subs	r3, r0, #0
 800e2e6:	d03b      	beq.n	800e360 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e2e8:	6a3b      	ldr	r3, [r7, #32]
 800e2ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2ec:	6a3a      	ldr	r2, [r7, #32]
 800e2ee:	0010      	movs	r0, r2
 800e2f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800e2f2:	6a3b      	ldr	r3, [r7, #32]
 800e2f4:	69db      	ldr	r3, [r3, #28]
 800e2f6:	2b01      	cmp	r3, #1
 800e2f8:	d132      	bne.n	800e360 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e2fa:	193b      	adds	r3, r7, r4
 800e2fc:	685a      	ldr	r2, [r3, #4]
 800e2fe:	6a3b      	ldr	r3, [r7, #32]
 800e300:	699b      	ldr	r3, [r3, #24]
 800e302:	18d2      	adds	r2, r2, r3
 800e304:	6a38      	ldr	r0, [r7, #32]
 800e306:	2300      	movs	r3, #0
 800e308:	9300      	str	r3, [sp, #0]
 800e30a:	2300      	movs	r3, #0
 800e30c:	2100      	movs	r1, #0
 800e30e:	f7ff fe45 	bl	800df9c <xTimerGenericCommand>
 800e312:	0003      	movs	r3, r0
 800e314:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 800e316:	69bb      	ldr	r3, [r7, #24]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d121      	bne.n	800e360 <prvProcessReceivedCommands+0x108>
 800e31c:	b672      	cpsid	i
 800e31e:	e7fe      	b.n	800e31e <prvProcessReceivedCommands+0xc6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e320:	2308      	movs	r3, #8
 800e322:	18fb      	adds	r3, r7, r3
 800e324:	685a      	ldr	r2, [r3, #4]
 800e326:	6a3b      	ldr	r3, [r7, #32]
 800e328:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e32a:	6a3b      	ldr	r3, [r7, #32]
 800e32c:	699b      	ldr	r3, [r3, #24]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d101      	bne.n	800e336 <prvProcessReceivedCommands+0xde>
 800e332:	b672      	cpsid	i
 800e334:	e7fe      	b.n	800e334 <prvProcessReceivedCommands+0xdc>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e336:	6a3b      	ldr	r3, [r7, #32]
 800e338:	699a      	ldr	r2, [r3, #24]
 800e33a:	69fb      	ldr	r3, [r7, #28]
 800e33c:	18d1      	adds	r1, r2, r3
 800e33e:	69fb      	ldr	r3, [r7, #28]
 800e340:	69fa      	ldr	r2, [r7, #28]
 800e342:	6a38      	ldr	r0, [r7, #32]
 800e344:	f7ff ff46 	bl	800e1d4 <prvInsertTimerInActiveList>
					break;
 800e348:	e00a      	b.n	800e360 <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800e34a:	6a3b      	ldr	r3, [r7, #32]
 800e34c:	222c      	movs	r2, #44	; 0x2c
 800e34e:	5c9b      	ldrb	r3, [r3, r2]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d105      	bne.n	800e360 <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 800e354:	6a3b      	ldr	r3, [r7, #32]
 800e356:	0018      	movs	r0, r3
 800e358:	f000 fa88 	bl	800e86c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e35c:	e000      	b.n	800e360 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e35e:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e360:	4b08      	ldr	r3, [pc, #32]	; (800e384 <prvProcessReceivedCommands+0x12c>)
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	2208      	movs	r2, #8
 800e366:	18b9      	adds	r1, r7, r2
 800e368:	2200      	movs	r2, #0
 800e36a:	0018      	movs	r0, r3
 800e36c:	f7fe f99e 	bl	800c6ac <xQueueReceive>
 800e370:	1e03      	subs	r3, r0, #0
 800e372:	d000      	beq.n	800e376 <prvProcessReceivedCommands+0x11e>
 800e374:	e774      	b.n	800e260 <prvProcessReceivedCommands+0x8>
	}
}
 800e376:	46c0      	nop			; (mov r8, r8)
 800e378:	46c0      	nop			; (mov r8, r8)
 800e37a:	46bd      	mov	sp, r7
 800e37c:	b00b      	add	sp, #44	; 0x2c
 800e37e:	bd90      	pop	{r4, r7, pc}
 800e380:	080139b0 	.word	0x080139b0
 800e384:	20001084 	.word	0x20001084

0800e388 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	b088      	sub	sp, #32
 800e38c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e38e:	e03e      	b.n	800e40e <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e390:	4b28      	ldr	r3, [pc, #160]	; (800e434 <prvSwitchTimerLists+0xac>)
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	68db      	ldr	r3, [r3, #12]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e39a:	4b26      	ldr	r3, [pc, #152]	; (800e434 <prvSwitchTimerLists+0xac>)
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	68db      	ldr	r3, [r3, #12]
 800e3a0:	68db      	ldr	r3, [r3, #12]
 800e3a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	3304      	adds	r3, #4
 800e3a8:	0018      	movs	r0, r3
 800e3aa:	f7fd fe78 	bl	800c09e <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3b2:	68fa      	ldr	r2, [r7, #12]
 800e3b4:	0010      	movs	r0, r2
 800e3b6:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	69db      	ldr	r3, [r3, #28]
 800e3bc:	2b01      	cmp	r3, #1
 800e3be:	d126      	bne.n	800e40e <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	699b      	ldr	r3, [r3, #24]
 800e3c4:	693a      	ldr	r2, [r7, #16]
 800e3c6:	18d3      	adds	r3, r2, r3
 800e3c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e3ca:	68ba      	ldr	r2, [r7, #8]
 800e3cc:	693b      	ldr	r3, [r7, #16]
 800e3ce:	429a      	cmp	r2, r3
 800e3d0:	d90e      	bls.n	800e3f0 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	68ba      	ldr	r2, [r7, #8]
 800e3d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	68fa      	ldr	r2, [r7, #12]
 800e3dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e3de:	4b15      	ldr	r3, [pc, #84]	; (800e434 <prvSwitchTimerLists+0xac>)
 800e3e0:	681a      	ldr	r2, [r3, #0]
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	3304      	adds	r3, #4
 800e3e6:	0019      	movs	r1, r3
 800e3e8:	0010      	movs	r0, r2
 800e3ea:	f7fd fe22 	bl	800c032 <vListInsert>
 800e3ee:	e00e      	b.n	800e40e <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e3f0:	693a      	ldr	r2, [r7, #16]
 800e3f2:	68f8      	ldr	r0, [r7, #12]
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	9300      	str	r3, [sp, #0]
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	2100      	movs	r1, #0
 800e3fc:	f7ff fdce 	bl	800df9c <xTimerGenericCommand>
 800e400:	0003      	movs	r3, r0
 800e402:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d101      	bne.n	800e40e <prvSwitchTimerLists+0x86>
 800e40a:	b672      	cpsid	i
 800e40c:	e7fe      	b.n	800e40c <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e40e:	4b09      	ldr	r3, [pc, #36]	; (800e434 <prvSwitchTimerLists+0xac>)
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d1bb      	bne.n	800e390 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e418:	4b06      	ldr	r3, [pc, #24]	; (800e434 <prvSwitchTimerLists+0xac>)
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e41e:	4b06      	ldr	r3, [pc, #24]	; (800e438 <prvSwitchTimerLists+0xb0>)
 800e420:	681a      	ldr	r2, [r3, #0]
 800e422:	4b04      	ldr	r3, [pc, #16]	; (800e434 <prvSwitchTimerLists+0xac>)
 800e424:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 800e426:	4b04      	ldr	r3, [pc, #16]	; (800e438 <prvSwitchTimerLists+0xb0>)
 800e428:	697a      	ldr	r2, [r7, #20]
 800e42a:	601a      	str	r2, [r3, #0]
}
 800e42c:	46c0      	nop			; (mov r8, r8)
 800e42e:	46bd      	mov	sp, r7
 800e430:	b006      	add	sp, #24
 800e432:	bd80      	pop	{r7, pc}
 800e434:	2000107c 	.word	0x2000107c
 800e438:	20001080 	.word	0x20001080

0800e43c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b082      	sub	sp, #8
 800e440:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e442:	f000 f8d5 	bl	800e5f0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e446:	4b16      	ldr	r3, [pc, #88]	; (800e4a0 <prvCheckForValidListAndQueue+0x64>)
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d123      	bne.n	800e496 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 800e44e:	4b15      	ldr	r3, [pc, #84]	; (800e4a4 <prvCheckForValidListAndQueue+0x68>)
 800e450:	0018      	movs	r0, r3
 800e452:	f7fd fda3 	bl	800bf9c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e456:	4b14      	ldr	r3, [pc, #80]	; (800e4a8 <prvCheckForValidListAndQueue+0x6c>)
 800e458:	0018      	movs	r0, r3
 800e45a:	f7fd fd9f 	bl	800bf9c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e45e:	4b13      	ldr	r3, [pc, #76]	; (800e4ac <prvCheckForValidListAndQueue+0x70>)
 800e460:	4a10      	ldr	r2, [pc, #64]	; (800e4a4 <prvCheckForValidListAndQueue+0x68>)
 800e462:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e464:	4b12      	ldr	r3, [pc, #72]	; (800e4b0 <prvCheckForValidListAndQueue+0x74>)
 800e466:	4a10      	ldr	r2, [pc, #64]	; (800e4a8 <prvCheckForValidListAndQueue+0x6c>)
 800e468:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e46a:	4b12      	ldr	r3, [pc, #72]	; (800e4b4 <prvCheckForValidListAndQueue+0x78>)
 800e46c:	4a12      	ldr	r2, [pc, #72]	; (800e4b8 <prvCheckForValidListAndQueue+0x7c>)
 800e46e:	2100      	movs	r1, #0
 800e470:	9100      	str	r1, [sp, #0]
 800e472:	2110      	movs	r1, #16
 800e474:	200a      	movs	r0, #10
 800e476:	f7fd fe8e 	bl	800c196 <xQueueGenericCreateStatic>
 800e47a:	0002      	movs	r2, r0
 800e47c:	4b08      	ldr	r3, [pc, #32]	; (800e4a0 <prvCheckForValidListAndQueue+0x64>)
 800e47e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e480:	4b07      	ldr	r3, [pc, #28]	; (800e4a0 <prvCheckForValidListAndQueue+0x64>)
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d006      	beq.n	800e496 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e488:	4b05      	ldr	r3, [pc, #20]	; (800e4a0 <prvCheckForValidListAndQueue+0x64>)
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	4a0b      	ldr	r2, [pc, #44]	; (800e4bc <prvCheckForValidListAndQueue+0x80>)
 800e48e:	0011      	movs	r1, r2
 800e490:	0018      	movs	r0, r3
 800e492:	f7fe fc73 	bl	800cd7c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e496:	f000 f8bd 	bl	800e614 <vPortExitCritical>
}
 800e49a:	46c0      	nop			; (mov r8, r8)
 800e49c:	46bd      	mov	sp, r7
 800e49e:	bd80      	pop	{r7, pc}
 800e4a0:	20001084 	.word	0x20001084
 800e4a4:	20001054 	.word	0x20001054
 800e4a8:	20001068 	.word	0x20001068
 800e4ac:	2000107c 	.word	0x2000107c
 800e4b0:	20001080 	.word	0x20001080
 800e4b4:	20001130 	.word	0x20001130
 800e4b8:	20001090 	.word	0x20001090
 800e4bc:	08012ebc 	.word	0x08012ebc

0800e4c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b084      	sub	sp, #16
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	60f8      	str	r0, [r7, #12]
 800e4c8:	60b9      	str	r1, [r7, #8]
 800e4ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	3b04      	subs	r3, #4
 800e4d0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	2280      	movs	r2, #128	; 0x80
 800e4d6:	0452      	lsls	r2, r2, #17
 800e4d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	3b04      	subs	r3, #4
 800e4de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800e4e0:	68ba      	ldr	r2, [r7, #8]
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	3b04      	subs	r3, #4
 800e4ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e4ec:	4a08      	ldr	r2, [pc, #32]	; (800e510 <pxPortInitialiseStack+0x50>)
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	3b14      	subs	r3, #20
 800e4f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e4f8:	687a      	ldr	r2, [r7, #4]
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	3b20      	subs	r3, #32
 800e502:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e504:	68fb      	ldr	r3, [r7, #12]
}
 800e506:	0018      	movs	r0, r3
 800e508:	46bd      	mov	sp, r7
 800e50a:	b004      	add	sp, #16
 800e50c:	bd80      	pop	{r7, pc}
 800e50e:	46c0      	nop			; (mov r8, r8)
 800e510:	0800e515 	.word	0x0800e515

0800e514 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e514:	b580      	push	{r7, lr}
 800e516:	b082      	sub	sp, #8
 800e518:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800e51a:	2300      	movs	r3, #0
 800e51c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e51e:	4b08      	ldr	r3, [pc, #32]	; (800e540 <prvTaskExitError+0x2c>)
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	3301      	adds	r3, #1
 800e524:	d001      	beq.n	800e52a <prvTaskExitError+0x16>
 800e526:	b672      	cpsid	i
 800e528:	e7fe      	b.n	800e528 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800e52a:	b672      	cpsid	i
	while( ulDummy == 0 )
 800e52c:	46c0      	nop			; (mov r8, r8)
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d0fc      	beq.n	800e52e <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e534:	46c0      	nop			; (mov r8, r8)
 800e536:	46c0      	nop			; (mov r8, r8)
 800e538:	46bd      	mov	sp, r7
 800e53a:	b002      	add	sp, #8
 800e53c:	bd80      	pop	{r7, pc}
 800e53e:	46c0      	nop			; (mov r8, r8)
 800e540:	20000070 	.word	0x20000070

0800e544 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800e544:	b580      	push	{r7, lr}
 800e546:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 800e548:	46c0      	nop			; (mov r8, r8)
 800e54a:	46bd      	mov	sp, r7
 800e54c:	bd80      	pop	{r7, pc}
	...

0800e550 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800e550:	4a0b      	ldr	r2, [pc, #44]	; (800e580 <pxCurrentTCBConst2>)
 800e552:	6813      	ldr	r3, [r2, #0]
 800e554:	6818      	ldr	r0, [r3, #0]
 800e556:	3020      	adds	r0, #32
 800e558:	f380 8809 	msr	PSP, r0
 800e55c:	2002      	movs	r0, #2
 800e55e:	f380 8814 	msr	CONTROL, r0
 800e562:	f3bf 8f6f 	isb	sy
 800e566:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800e568:	46ae      	mov	lr, r5
 800e56a:	bc08      	pop	{r3}
 800e56c:	bc04      	pop	{r2}
 800e56e:	b662      	cpsie	i
 800e570:	4718      	bx	r3
 800e572:	46c0      	nop			; (mov r8, r8)
 800e574:	46c0      	nop			; (mov r8, r8)
 800e576:	46c0      	nop			; (mov r8, r8)
 800e578:	46c0      	nop			; (mov r8, r8)
 800e57a:	46c0      	nop			; (mov r8, r8)
 800e57c:	46c0      	nop			; (mov r8, r8)
 800e57e:	46c0      	nop			; (mov r8, r8)

0800e580 <pxCurrentTCBConst2>:
 800e580:	20000b54 	.word	0x20000b54
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 800e584:	46c0      	nop			; (mov r8, r8)
 800e586:	46c0      	nop			; (mov r8, r8)

0800e588 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800e58c:	4b0e      	ldr	r3, [pc, #56]	; (800e5c8 <xPortStartScheduler+0x40>)
 800e58e:	681a      	ldr	r2, [r3, #0]
 800e590:	4b0d      	ldr	r3, [pc, #52]	; (800e5c8 <xPortStartScheduler+0x40>)
 800e592:	21ff      	movs	r1, #255	; 0xff
 800e594:	0409      	lsls	r1, r1, #16
 800e596:	430a      	orrs	r2, r1
 800e598:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800e59a:	4b0b      	ldr	r3, [pc, #44]	; (800e5c8 <xPortStartScheduler+0x40>)
 800e59c:	681a      	ldr	r2, [r3, #0]
 800e59e:	4b0a      	ldr	r3, [pc, #40]	; (800e5c8 <xPortStartScheduler+0x40>)
 800e5a0:	21ff      	movs	r1, #255	; 0xff
 800e5a2:	0609      	lsls	r1, r1, #24
 800e5a4:	430a      	orrs	r2, r1
 800e5a6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 800e5a8:	f000 f898 	bl	800e6dc <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e5ac:	4b07      	ldr	r3, [pc, #28]	; (800e5cc <xPortStartScheduler+0x44>)
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 800e5b2:	f7ff ffcd 	bl	800e550 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e5b6:	f7ff f8b7 	bl	800d728 <vTaskSwitchContext>
	prvTaskExitError();
 800e5ba:	f7ff ffab 	bl	800e514 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e5be:	2300      	movs	r3, #0
}
 800e5c0:	0018      	movs	r0, r3
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	bd80      	pop	{r7, pc}
 800e5c6:	46c0      	nop			; (mov r8, r8)
 800e5c8:	e000ed20 	.word	0xe000ed20
 800e5cc:	20000070 	.word	0x20000070

0800e5d0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 800e5d4:	4b05      	ldr	r3, [pc, #20]	; (800e5ec <vPortYield+0x1c>)
 800e5d6:	2280      	movs	r2, #128	; 0x80
 800e5d8:	0552      	lsls	r2, r2, #21
 800e5da:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800e5dc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800e5e0:	f3bf 8f6f 	isb	sy
}
 800e5e4:	46c0      	nop			; (mov r8, r8)
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	bd80      	pop	{r7, pc}
 800e5ea:	46c0      	nop			; (mov r8, r8)
 800e5ec:	e000ed04 	.word	0xe000ed04

0800e5f0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 800e5f4:	b672      	cpsid	i
    uxCriticalNesting++;
 800e5f6:	4b06      	ldr	r3, [pc, #24]	; (800e610 <vPortEnterCritical+0x20>)
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	1c5a      	adds	r2, r3, #1
 800e5fc:	4b04      	ldr	r3, [pc, #16]	; (800e610 <vPortEnterCritical+0x20>)
 800e5fe:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 800e600:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800e604:	f3bf 8f6f 	isb	sy
}
 800e608:	46c0      	nop			; (mov r8, r8)
 800e60a:	46bd      	mov	sp, r7
 800e60c:	bd80      	pop	{r7, pc}
 800e60e:	46c0      	nop			; (mov r8, r8)
 800e610:	20000070 	.word	0x20000070

0800e614 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e614:	b580      	push	{r7, lr}
 800e616:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e618:	4b09      	ldr	r3, [pc, #36]	; (800e640 <vPortExitCritical+0x2c>)
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d101      	bne.n	800e624 <vPortExitCritical+0x10>
 800e620:	b672      	cpsid	i
 800e622:	e7fe      	b.n	800e622 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 800e624:	4b06      	ldr	r3, [pc, #24]	; (800e640 <vPortExitCritical+0x2c>)
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	1e5a      	subs	r2, r3, #1
 800e62a:	4b05      	ldr	r3, [pc, #20]	; (800e640 <vPortExitCritical+0x2c>)
 800e62c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800e62e:	4b04      	ldr	r3, [pc, #16]	; (800e640 <vPortExitCritical+0x2c>)
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d100      	bne.n	800e638 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 800e636:	b662      	cpsie	i
    }
}
 800e638:	46c0      	nop			; (mov r8, r8)
 800e63a:	46bd      	mov	sp, r7
 800e63c:	bd80      	pop	{r7, pc}
 800e63e:	46c0      	nop			; (mov r8, r8)
 800e640:	20000070 	.word	0x20000070

0800e644 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 800e644:	f3ef 8010 	mrs	r0, PRIMASK
 800e648:	b672      	cpsid	i
 800e64a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800e64c:	46c0      	nop			; (mov r8, r8)
 800e64e:	0018      	movs	r0, r3

0800e650 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 800e650:	f380 8810 	msr	PRIMASK, r0
 800e654:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 800e656:	46c0      	nop			; (mov r8, r8)
	...

0800e660 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e660:	f3ef 8009 	mrs	r0, PSP
 800e664:	4b0e      	ldr	r3, [pc, #56]	; (800e6a0 <pxCurrentTCBConst>)
 800e666:	681a      	ldr	r2, [r3, #0]
 800e668:	3820      	subs	r0, #32
 800e66a:	6010      	str	r0, [r2, #0]
 800e66c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800e66e:	4644      	mov	r4, r8
 800e670:	464d      	mov	r5, r9
 800e672:	4656      	mov	r6, sl
 800e674:	465f      	mov	r7, fp
 800e676:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800e678:	b508      	push	{r3, lr}
 800e67a:	b672      	cpsid	i
 800e67c:	f7ff f854 	bl	800d728 <vTaskSwitchContext>
 800e680:	b662      	cpsie	i
 800e682:	bc0c      	pop	{r2, r3}
 800e684:	6811      	ldr	r1, [r2, #0]
 800e686:	6808      	ldr	r0, [r1, #0]
 800e688:	3010      	adds	r0, #16
 800e68a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800e68c:	46a0      	mov	r8, r4
 800e68e:	46a9      	mov	r9, r5
 800e690:	46b2      	mov	sl, r6
 800e692:	46bb      	mov	fp, r7
 800e694:	f380 8809 	msr	PSP, r0
 800e698:	3820      	subs	r0, #32
 800e69a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800e69c:	4718      	bx	r3
 800e69e:	46c0      	nop			; (mov r8, r8)

0800e6a0 <pxCurrentTCBConst>:
 800e6a0:	20000b54 	.word	0x20000b54
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 800e6a4:	46c0      	nop			; (mov r8, r8)
 800e6a6:	46c0      	nop			; (mov r8, r8)

0800e6a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b082      	sub	sp, #8
 800e6ac:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800e6ae:	f7ff ffc9 	bl	800e644 <ulSetInterruptMaskFromISR>
 800e6b2:	0003      	movs	r3, r0
 800e6b4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e6b6:	f7fe ff83 	bl	800d5c0 <xTaskIncrementTick>
 800e6ba:	1e03      	subs	r3, r0, #0
 800e6bc:	d003      	beq.n	800e6c6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800e6be:	4b06      	ldr	r3, [pc, #24]	; (800e6d8 <SysTick_Handler+0x30>)
 800e6c0:	2280      	movs	r2, #128	; 0x80
 800e6c2:	0552      	lsls	r2, r2, #21
 800e6c4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	0018      	movs	r0, r3
 800e6ca:	f7ff ffc1 	bl	800e650 <vClearInterruptMaskFromISR>
}
 800e6ce:	46c0      	nop			; (mov r8, r8)
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	b002      	add	sp, #8
 800e6d4:	bd80      	pop	{r7, pc}
 800e6d6:	46c0      	nop			; (mov r8, r8)
 800e6d8:	e000ed04 	.word	0xe000ed04

0800e6dc <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 800e6e0:	4b0b      	ldr	r3, [pc, #44]	; (800e710 <prvSetupTimerInterrupt+0x34>)
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 800e6e6:	4b0b      	ldr	r3, [pc, #44]	; (800e714 <prvSetupTimerInterrupt+0x38>)
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e6ec:	4b0a      	ldr	r3, [pc, #40]	; (800e718 <prvSetupTimerInterrupt+0x3c>)
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	22fa      	movs	r2, #250	; 0xfa
 800e6f2:	0091      	lsls	r1, r2, #2
 800e6f4:	0018      	movs	r0, r3
 800e6f6:	f7f1 fd23 	bl	8000140 <__udivsi3>
 800e6fa:	0003      	movs	r3, r0
 800e6fc:	001a      	movs	r2, r3
 800e6fe:	4b07      	ldr	r3, [pc, #28]	; (800e71c <prvSetupTimerInterrupt+0x40>)
 800e700:	3a01      	subs	r2, #1
 800e702:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800e704:	4b02      	ldr	r3, [pc, #8]	; (800e710 <prvSetupTimerInterrupt+0x34>)
 800e706:	2207      	movs	r2, #7
 800e708:	601a      	str	r2, [r3, #0]
}
 800e70a:	46c0      	nop			; (mov r8, r8)
 800e70c:	46bd      	mov	sp, r7
 800e70e:	bd80      	pop	{r7, pc}
 800e710:	e000e010 	.word	0xe000e010
 800e714:	e000e018 	.word	0xe000e018
 800e718:	20000064 	.word	0x20000064
 800e71c:	e000e014 	.word	0xe000e014

0800e720 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b086      	sub	sp, #24
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e728:	2300      	movs	r3, #0
 800e72a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800e72c:	f7fe fea2 	bl	800d474 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e730:	4b49      	ldr	r3, [pc, #292]	; (800e858 <pvPortMalloc+0x138>)
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d101      	bne.n	800e73c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e738:	f000 f8e0 	bl	800e8fc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e73c:	4b47      	ldr	r3, [pc, #284]	; (800e85c <pvPortMalloc+0x13c>)
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	687a      	ldr	r2, [r7, #4]
 800e742:	4013      	ands	r3, r2
 800e744:	d000      	beq.n	800e748 <pvPortMalloc+0x28>
 800e746:	e079      	b.n	800e83c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d012      	beq.n	800e774 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800e74e:	2208      	movs	r2, #8
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	189b      	adds	r3, r3, r2
 800e754:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	2207      	movs	r2, #7
 800e75a:	4013      	ands	r3, r2
 800e75c:	d00a      	beq.n	800e774 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	2207      	movs	r2, #7
 800e762:	4393      	bics	r3, r2
 800e764:	3308      	adds	r3, #8
 800e766:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	2207      	movs	r2, #7
 800e76c:	4013      	ands	r3, r2
 800e76e:	d001      	beq.n	800e774 <pvPortMalloc+0x54>
 800e770:	b672      	cpsid	i
 800e772:	e7fe      	b.n	800e772 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d060      	beq.n	800e83c <pvPortMalloc+0x11c>
 800e77a:	4b39      	ldr	r3, [pc, #228]	; (800e860 <pvPortMalloc+0x140>)
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	687a      	ldr	r2, [r7, #4]
 800e780:	429a      	cmp	r2, r3
 800e782:	d85b      	bhi.n	800e83c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e784:	4b37      	ldr	r3, [pc, #220]	; (800e864 <pvPortMalloc+0x144>)
 800e786:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800e788:	4b36      	ldr	r3, [pc, #216]	; (800e864 <pvPortMalloc+0x144>)
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e78e:	e004      	b.n	800e79a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 800e790:	697b      	ldr	r3, [r7, #20]
 800e792:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e794:	697b      	ldr	r3, [r7, #20]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e79a:	697b      	ldr	r3, [r7, #20]
 800e79c:	685b      	ldr	r3, [r3, #4]
 800e79e:	687a      	ldr	r2, [r7, #4]
 800e7a0:	429a      	cmp	r2, r3
 800e7a2:	d903      	bls.n	800e7ac <pvPortMalloc+0x8c>
 800e7a4:	697b      	ldr	r3, [r7, #20]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d1f1      	bne.n	800e790 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e7ac:	4b2a      	ldr	r3, [pc, #168]	; (800e858 <pvPortMalloc+0x138>)
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	697a      	ldr	r2, [r7, #20]
 800e7b2:	429a      	cmp	r2, r3
 800e7b4:	d042      	beq.n	800e83c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e7b6:	693b      	ldr	r3, [r7, #16]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	2208      	movs	r2, #8
 800e7bc:	189b      	adds	r3, r3, r2
 800e7be:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e7c0:	697b      	ldr	r3, [r7, #20]
 800e7c2:	681a      	ldr	r2, [r3, #0]
 800e7c4:	693b      	ldr	r3, [r7, #16]
 800e7c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e7c8:	697b      	ldr	r3, [r7, #20]
 800e7ca:	685a      	ldr	r2, [r3, #4]
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	1ad2      	subs	r2, r2, r3
 800e7d0:	2308      	movs	r3, #8
 800e7d2:	005b      	lsls	r3, r3, #1
 800e7d4:	429a      	cmp	r2, r3
 800e7d6:	d916      	bls.n	800e806 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e7d8:	697a      	ldr	r2, [r7, #20]
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	18d3      	adds	r3, r2, r3
 800e7de:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e7e0:	68bb      	ldr	r3, [r7, #8]
 800e7e2:	2207      	movs	r2, #7
 800e7e4:	4013      	ands	r3, r2
 800e7e6:	d001      	beq.n	800e7ec <pvPortMalloc+0xcc>
 800e7e8:	b672      	cpsid	i
 800e7ea:	e7fe      	b.n	800e7ea <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e7ec:	697b      	ldr	r3, [r7, #20]
 800e7ee:	685a      	ldr	r2, [r3, #4]
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	1ad2      	subs	r2, r2, r3
 800e7f4:	68bb      	ldr	r3, [r7, #8]
 800e7f6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e7f8:	697b      	ldr	r3, [r7, #20]
 800e7fa:	687a      	ldr	r2, [r7, #4]
 800e7fc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e7fe:	68bb      	ldr	r3, [r7, #8]
 800e800:	0018      	movs	r0, r3
 800e802:	f000 f8db 	bl	800e9bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e806:	4b16      	ldr	r3, [pc, #88]	; (800e860 <pvPortMalloc+0x140>)
 800e808:	681a      	ldr	r2, [r3, #0]
 800e80a:	697b      	ldr	r3, [r7, #20]
 800e80c:	685b      	ldr	r3, [r3, #4]
 800e80e:	1ad2      	subs	r2, r2, r3
 800e810:	4b13      	ldr	r3, [pc, #76]	; (800e860 <pvPortMalloc+0x140>)
 800e812:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e814:	4b12      	ldr	r3, [pc, #72]	; (800e860 <pvPortMalloc+0x140>)
 800e816:	681a      	ldr	r2, [r3, #0]
 800e818:	4b13      	ldr	r3, [pc, #76]	; (800e868 <pvPortMalloc+0x148>)
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	429a      	cmp	r2, r3
 800e81e:	d203      	bcs.n	800e828 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e820:	4b0f      	ldr	r3, [pc, #60]	; (800e860 <pvPortMalloc+0x140>)
 800e822:	681a      	ldr	r2, [r3, #0]
 800e824:	4b10      	ldr	r3, [pc, #64]	; (800e868 <pvPortMalloc+0x148>)
 800e826:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e828:	697b      	ldr	r3, [r7, #20]
 800e82a:	685a      	ldr	r2, [r3, #4]
 800e82c:	4b0b      	ldr	r3, [pc, #44]	; (800e85c <pvPortMalloc+0x13c>)
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	431a      	orrs	r2, r3
 800e832:	697b      	ldr	r3, [r7, #20]
 800e834:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e836:	697b      	ldr	r3, [r7, #20]
 800e838:	2200      	movs	r2, #0
 800e83a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e83c:	f7fe fe26 	bl	800d48c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	2207      	movs	r2, #7
 800e844:	4013      	ands	r3, r2
 800e846:	d001      	beq.n	800e84c <pvPortMalloc+0x12c>
 800e848:	b672      	cpsid	i
 800e84a:	e7fe      	b.n	800e84a <pvPortMalloc+0x12a>
	return pvReturn;
 800e84c:	68fb      	ldr	r3, [r7, #12]
}
 800e84e:	0018      	movs	r0, r3
 800e850:	46bd      	mov	sp, r7
 800e852:	b006      	add	sp, #24
 800e854:	bd80      	pop	{r7, pc}
 800e856:	46c0      	nop			; (mov r8, r8)
 800e858:	20002188 	.word	0x20002188
 800e85c:	20002194 	.word	0x20002194
 800e860:	2000218c 	.word	0x2000218c
 800e864:	20002180 	.word	0x20002180
 800e868:	20002190 	.word	0x20002190

0800e86c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b084      	sub	sp, #16
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d035      	beq.n	800e8ea <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e87e:	2308      	movs	r3, #8
 800e880:	425b      	negs	r3, r3
 800e882:	68fa      	ldr	r2, [r7, #12]
 800e884:	18d3      	adds	r3, r2, r3
 800e886:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e88c:	68bb      	ldr	r3, [r7, #8]
 800e88e:	685a      	ldr	r2, [r3, #4]
 800e890:	4b18      	ldr	r3, [pc, #96]	; (800e8f4 <vPortFree+0x88>)
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	4013      	ands	r3, r2
 800e896:	d101      	bne.n	800e89c <vPortFree+0x30>
 800e898:	b672      	cpsid	i
 800e89a:	e7fe      	b.n	800e89a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e89c:	68bb      	ldr	r3, [r7, #8]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d001      	beq.n	800e8a8 <vPortFree+0x3c>
 800e8a4:	b672      	cpsid	i
 800e8a6:	e7fe      	b.n	800e8a6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e8a8:	68bb      	ldr	r3, [r7, #8]
 800e8aa:	685a      	ldr	r2, [r3, #4]
 800e8ac:	4b11      	ldr	r3, [pc, #68]	; (800e8f4 <vPortFree+0x88>)
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	4013      	ands	r3, r2
 800e8b2:	d01a      	beq.n	800e8ea <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e8b4:	68bb      	ldr	r3, [r7, #8]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d116      	bne.n	800e8ea <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e8bc:	68bb      	ldr	r3, [r7, #8]
 800e8be:	685a      	ldr	r2, [r3, #4]
 800e8c0:	4b0c      	ldr	r3, [pc, #48]	; (800e8f4 <vPortFree+0x88>)
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	43db      	mvns	r3, r3
 800e8c6:	401a      	ands	r2, r3
 800e8c8:	68bb      	ldr	r3, [r7, #8]
 800e8ca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e8cc:	f7fe fdd2 	bl	800d474 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e8d0:	68bb      	ldr	r3, [r7, #8]
 800e8d2:	685a      	ldr	r2, [r3, #4]
 800e8d4:	4b08      	ldr	r3, [pc, #32]	; (800e8f8 <vPortFree+0x8c>)
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	18d2      	adds	r2, r2, r3
 800e8da:	4b07      	ldr	r3, [pc, #28]	; (800e8f8 <vPortFree+0x8c>)
 800e8dc:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e8de:	68bb      	ldr	r3, [r7, #8]
 800e8e0:	0018      	movs	r0, r3
 800e8e2:	f000 f86b 	bl	800e9bc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e8e6:	f7fe fdd1 	bl	800d48c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e8ea:	46c0      	nop			; (mov r8, r8)
 800e8ec:	46bd      	mov	sp, r7
 800e8ee:	b004      	add	sp, #16
 800e8f0:	bd80      	pop	{r7, pc}
 800e8f2:	46c0      	nop			; (mov r8, r8)
 800e8f4:	20002194 	.word	0x20002194
 800e8f8:	2000218c 	.word	0x2000218c

0800e8fc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b084      	sub	sp, #16
 800e900:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e902:	2380      	movs	r3, #128	; 0x80
 800e904:	015b      	lsls	r3, r3, #5
 800e906:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e908:	4b26      	ldr	r3, [pc, #152]	; (800e9a4 <prvHeapInit+0xa8>)
 800e90a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	2207      	movs	r2, #7
 800e910:	4013      	ands	r3, r2
 800e912:	d00c      	beq.n	800e92e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	3307      	adds	r3, #7
 800e918:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	2207      	movs	r2, #7
 800e91e:	4393      	bics	r3, r2
 800e920:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e922:	68ba      	ldr	r2, [r7, #8]
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	1ad2      	subs	r2, r2, r3
 800e928:	4b1e      	ldr	r3, [pc, #120]	; (800e9a4 <prvHeapInit+0xa8>)
 800e92a:	18d3      	adds	r3, r2, r3
 800e92c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e932:	4b1d      	ldr	r3, [pc, #116]	; (800e9a8 <prvHeapInit+0xac>)
 800e934:	687a      	ldr	r2, [r7, #4]
 800e936:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e938:	4b1b      	ldr	r3, [pc, #108]	; (800e9a8 <prvHeapInit+0xac>)
 800e93a:	2200      	movs	r2, #0
 800e93c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	68ba      	ldr	r2, [r7, #8]
 800e942:	18d3      	adds	r3, r2, r3
 800e944:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e946:	2208      	movs	r2, #8
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	1a9b      	subs	r3, r3, r2
 800e94c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	2207      	movs	r2, #7
 800e952:	4393      	bics	r3, r2
 800e954:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e956:	68fa      	ldr	r2, [r7, #12]
 800e958:	4b14      	ldr	r3, [pc, #80]	; (800e9ac <prvHeapInit+0xb0>)
 800e95a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800e95c:	4b13      	ldr	r3, [pc, #76]	; (800e9ac <prvHeapInit+0xb0>)
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	2200      	movs	r2, #0
 800e962:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e964:	4b11      	ldr	r3, [pc, #68]	; (800e9ac <prvHeapInit+0xb0>)
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	2200      	movs	r2, #0
 800e96a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e970:	683b      	ldr	r3, [r7, #0]
 800e972:	68fa      	ldr	r2, [r7, #12]
 800e974:	1ad2      	subs	r2, r2, r3
 800e976:	683b      	ldr	r3, [r7, #0]
 800e978:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e97a:	4b0c      	ldr	r3, [pc, #48]	; (800e9ac <prvHeapInit+0xb0>)
 800e97c:	681a      	ldr	r2, [r3, #0]
 800e97e:	683b      	ldr	r3, [r7, #0]
 800e980:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e982:	683b      	ldr	r3, [r7, #0]
 800e984:	685a      	ldr	r2, [r3, #4]
 800e986:	4b0a      	ldr	r3, [pc, #40]	; (800e9b0 <prvHeapInit+0xb4>)
 800e988:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e98a:	683b      	ldr	r3, [r7, #0]
 800e98c:	685a      	ldr	r2, [r3, #4]
 800e98e:	4b09      	ldr	r3, [pc, #36]	; (800e9b4 <prvHeapInit+0xb8>)
 800e990:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e992:	4b09      	ldr	r3, [pc, #36]	; (800e9b8 <prvHeapInit+0xbc>)
 800e994:	2280      	movs	r2, #128	; 0x80
 800e996:	0612      	lsls	r2, r2, #24
 800e998:	601a      	str	r2, [r3, #0]
}
 800e99a:	46c0      	nop			; (mov r8, r8)
 800e99c:	46bd      	mov	sp, r7
 800e99e:	b004      	add	sp, #16
 800e9a0:	bd80      	pop	{r7, pc}
 800e9a2:	46c0      	nop			; (mov r8, r8)
 800e9a4:	20001180 	.word	0x20001180
 800e9a8:	20002180 	.word	0x20002180
 800e9ac:	20002188 	.word	0x20002188
 800e9b0:	20002190 	.word	0x20002190
 800e9b4:	2000218c 	.word	0x2000218c
 800e9b8:	20002194 	.word	0x20002194

0800e9bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b084      	sub	sp, #16
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e9c4:	4b27      	ldr	r3, [pc, #156]	; (800ea64 <prvInsertBlockIntoFreeList+0xa8>)
 800e9c6:	60fb      	str	r3, [r7, #12]
 800e9c8:	e002      	b.n	800e9d0 <prvInsertBlockIntoFreeList+0x14>
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	60fb      	str	r3, [r7, #12]
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	687a      	ldr	r2, [r7, #4]
 800e9d6:	429a      	cmp	r2, r3
 800e9d8:	d8f7      	bhi.n	800e9ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	685b      	ldr	r3, [r3, #4]
 800e9e2:	68ba      	ldr	r2, [r7, #8]
 800e9e4:	18d3      	adds	r3, r2, r3
 800e9e6:	687a      	ldr	r2, [r7, #4]
 800e9e8:	429a      	cmp	r2, r3
 800e9ea:	d108      	bne.n	800e9fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	685a      	ldr	r2, [r3, #4]
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	685b      	ldr	r3, [r3, #4]
 800e9f4:	18d2      	adds	r2, r2, r3
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	685b      	ldr	r3, [r3, #4]
 800ea06:	68ba      	ldr	r2, [r7, #8]
 800ea08:	18d2      	adds	r2, r2, r3
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	429a      	cmp	r2, r3
 800ea10:	d118      	bne.n	800ea44 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	681a      	ldr	r2, [r3, #0]
 800ea16:	4b14      	ldr	r3, [pc, #80]	; (800ea68 <prvInsertBlockIntoFreeList+0xac>)
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	429a      	cmp	r2, r3
 800ea1c:	d00d      	beq.n	800ea3a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	685a      	ldr	r2, [r3, #4]
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	685b      	ldr	r3, [r3, #4]
 800ea28:	18d2      	adds	r2, r2, r3
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	681a      	ldr	r2, [r3, #0]
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	601a      	str	r2, [r3, #0]
 800ea38:	e008      	b.n	800ea4c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ea3a:	4b0b      	ldr	r3, [pc, #44]	; (800ea68 <prvInsertBlockIntoFreeList+0xac>)
 800ea3c:	681a      	ldr	r2, [r3, #0]
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	601a      	str	r2, [r3, #0]
 800ea42:	e003      	b.n	800ea4c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	681a      	ldr	r2, [r3, #0]
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ea4c:	68fa      	ldr	r2, [r7, #12]
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	429a      	cmp	r2, r3
 800ea52:	d002      	beq.n	800ea5a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	687a      	ldr	r2, [r7, #4]
 800ea58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ea5a:	46c0      	nop			; (mov r8, r8)
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	b004      	add	sp, #16
 800ea60:	bd80      	pop	{r7, pc}
 800ea62:	46c0      	nop			; (mov r8, r8)
 800ea64:	20002180 	.word	0x20002180
 800ea68:	20002188 	.word	0x20002188

0800ea6c <atol>:
 800ea6c:	b510      	push	{r4, lr}
 800ea6e:	220a      	movs	r2, #10
 800ea70:	2100      	movs	r1, #0
 800ea72:	f000 ffc7 	bl	800fa04 <strtol>
 800ea76:	bd10      	pop	{r4, pc}

0800ea78 <__errno>:
 800ea78:	4b01      	ldr	r3, [pc, #4]	; (800ea80 <__errno+0x8>)
 800ea7a:	6818      	ldr	r0, [r3, #0]
 800ea7c:	4770      	bx	lr
 800ea7e:	46c0      	nop			; (mov r8, r8)
 800ea80:	20000074 	.word	0x20000074

0800ea84 <std>:
 800ea84:	2300      	movs	r3, #0
 800ea86:	b510      	push	{r4, lr}
 800ea88:	0004      	movs	r4, r0
 800ea8a:	6003      	str	r3, [r0, #0]
 800ea8c:	6043      	str	r3, [r0, #4]
 800ea8e:	6083      	str	r3, [r0, #8]
 800ea90:	8181      	strh	r1, [r0, #12]
 800ea92:	6643      	str	r3, [r0, #100]	; 0x64
 800ea94:	0019      	movs	r1, r3
 800ea96:	81c2      	strh	r2, [r0, #14]
 800ea98:	6103      	str	r3, [r0, #16]
 800ea9a:	6143      	str	r3, [r0, #20]
 800ea9c:	6183      	str	r3, [r0, #24]
 800ea9e:	2208      	movs	r2, #8
 800eaa0:	305c      	adds	r0, #92	; 0x5c
 800eaa2:	f000 f921 	bl	800ece8 <memset>
 800eaa6:	4b05      	ldr	r3, [pc, #20]	; (800eabc <std+0x38>)
 800eaa8:	6224      	str	r4, [r4, #32]
 800eaaa:	6263      	str	r3, [r4, #36]	; 0x24
 800eaac:	4b04      	ldr	r3, [pc, #16]	; (800eac0 <std+0x3c>)
 800eaae:	62a3      	str	r3, [r4, #40]	; 0x28
 800eab0:	4b04      	ldr	r3, [pc, #16]	; (800eac4 <std+0x40>)
 800eab2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800eab4:	4b04      	ldr	r3, [pc, #16]	; (800eac8 <std+0x44>)
 800eab6:	6323      	str	r3, [r4, #48]	; 0x30
 800eab8:	bd10      	pop	{r4, pc}
 800eaba:	46c0      	nop			; (mov r8, r8)
 800eabc:	0800f851 	.word	0x0800f851
 800eac0:	0800f879 	.word	0x0800f879
 800eac4:	0800f8b1 	.word	0x0800f8b1
 800eac8:	0800f8dd 	.word	0x0800f8dd

0800eacc <_cleanup_r>:
 800eacc:	b510      	push	{r4, lr}
 800eace:	4902      	ldr	r1, [pc, #8]	; (800ead8 <_cleanup_r+0xc>)
 800ead0:	f000 f8ba 	bl	800ec48 <_fwalk_reent>
 800ead4:	bd10      	pop	{r4, pc}
 800ead6:	46c0      	nop			; (mov r8, r8)
 800ead8:	080108cd 	.word	0x080108cd

0800eadc <__sfmoreglue>:
 800eadc:	b570      	push	{r4, r5, r6, lr}
 800eade:	2568      	movs	r5, #104	; 0x68
 800eae0:	1e4a      	subs	r2, r1, #1
 800eae2:	4355      	muls	r5, r2
 800eae4:	000e      	movs	r6, r1
 800eae6:	0029      	movs	r1, r5
 800eae8:	3174      	adds	r1, #116	; 0x74
 800eaea:	f000 f927 	bl	800ed3c <_malloc_r>
 800eaee:	1e04      	subs	r4, r0, #0
 800eaf0:	d008      	beq.n	800eb04 <__sfmoreglue+0x28>
 800eaf2:	2100      	movs	r1, #0
 800eaf4:	002a      	movs	r2, r5
 800eaf6:	6001      	str	r1, [r0, #0]
 800eaf8:	6046      	str	r6, [r0, #4]
 800eafa:	300c      	adds	r0, #12
 800eafc:	60a0      	str	r0, [r4, #8]
 800eafe:	3268      	adds	r2, #104	; 0x68
 800eb00:	f000 f8f2 	bl	800ece8 <memset>
 800eb04:	0020      	movs	r0, r4
 800eb06:	bd70      	pop	{r4, r5, r6, pc}

0800eb08 <__sfp_lock_acquire>:
 800eb08:	b510      	push	{r4, lr}
 800eb0a:	4802      	ldr	r0, [pc, #8]	; (800eb14 <__sfp_lock_acquire+0xc>)
 800eb0c:	f000 f8e1 	bl	800ecd2 <__retarget_lock_acquire_recursive>
 800eb10:	bd10      	pop	{r4, pc}
 800eb12:	46c0      	nop			; (mov r8, r8)
 800eb14:	20002199 	.word	0x20002199

0800eb18 <__sfp_lock_release>:
 800eb18:	b510      	push	{r4, lr}
 800eb1a:	4802      	ldr	r0, [pc, #8]	; (800eb24 <__sfp_lock_release+0xc>)
 800eb1c:	f000 f8da 	bl	800ecd4 <__retarget_lock_release_recursive>
 800eb20:	bd10      	pop	{r4, pc}
 800eb22:	46c0      	nop			; (mov r8, r8)
 800eb24:	20002199 	.word	0x20002199

0800eb28 <__sinit_lock_acquire>:
 800eb28:	b510      	push	{r4, lr}
 800eb2a:	4802      	ldr	r0, [pc, #8]	; (800eb34 <__sinit_lock_acquire+0xc>)
 800eb2c:	f000 f8d1 	bl	800ecd2 <__retarget_lock_acquire_recursive>
 800eb30:	bd10      	pop	{r4, pc}
 800eb32:	46c0      	nop			; (mov r8, r8)
 800eb34:	2000219a 	.word	0x2000219a

0800eb38 <__sinit_lock_release>:
 800eb38:	b510      	push	{r4, lr}
 800eb3a:	4802      	ldr	r0, [pc, #8]	; (800eb44 <__sinit_lock_release+0xc>)
 800eb3c:	f000 f8ca 	bl	800ecd4 <__retarget_lock_release_recursive>
 800eb40:	bd10      	pop	{r4, pc}
 800eb42:	46c0      	nop			; (mov r8, r8)
 800eb44:	2000219a 	.word	0x2000219a

0800eb48 <__sinit>:
 800eb48:	b513      	push	{r0, r1, r4, lr}
 800eb4a:	0004      	movs	r4, r0
 800eb4c:	f7ff ffec 	bl	800eb28 <__sinit_lock_acquire>
 800eb50:	69a3      	ldr	r3, [r4, #24]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d002      	beq.n	800eb5c <__sinit+0x14>
 800eb56:	f7ff ffef 	bl	800eb38 <__sinit_lock_release>
 800eb5a:	bd13      	pop	{r0, r1, r4, pc}
 800eb5c:	64a3      	str	r3, [r4, #72]	; 0x48
 800eb5e:	64e3      	str	r3, [r4, #76]	; 0x4c
 800eb60:	6523      	str	r3, [r4, #80]	; 0x50
 800eb62:	4b13      	ldr	r3, [pc, #76]	; (800ebb0 <__sinit+0x68>)
 800eb64:	4a13      	ldr	r2, [pc, #76]	; (800ebb4 <__sinit+0x6c>)
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	62a2      	str	r2, [r4, #40]	; 0x28
 800eb6a:	9301      	str	r3, [sp, #4]
 800eb6c:	42a3      	cmp	r3, r4
 800eb6e:	d101      	bne.n	800eb74 <__sinit+0x2c>
 800eb70:	2301      	movs	r3, #1
 800eb72:	61a3      	str	r3, [r4, #24]
 800eb74:	0020      	movs	r0, r4
 800eb76:	f000 f81f 	bl	800ebb8 <__sfp>
 800eb7a:	6060      	str	r0, [r4, #4]
 800eb7c:	0020      	movs	r0, r4
 800eb7e:	f000 f81b 	bl	800ebb8 <__sfp>
 800eb82:	60a0      	str	r0, [r4, #8]
 800eb84:	0020      	movs	r0, r4
 800eb86:	f000 f817 	bl	800ebb8 <__sfp>
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	2104      	movs	r1, #4
 800eb8e:	60e0      	str	r0, [r4, #12]
 800eb90:	6860      	ldr	r0, [r4, #4]
 800eb92:	f7ff ff77 	bl	800ea84 <std>
 800eb96:	2201      	movs	r2, #1
 800eb98:	2109      	movs	r1, #9
 800eb9a:	68a0      	ldr	r0, [r4, #8]
 800eb9c:	f7ff ff72 	bl	800ea84 <std>
 800eba0:	2202      	movs	r2, #2
 800eba2:	2112      	movs	r1, #18
 800eba4:	68e0      	ldr	r0, [r4, #12]
 800eba6:	f7ff ff6d 	bl	800ea84 <std>
 800ebaa:	2301      	movs	r3, #1
 800ebac:	61a3      	str	r3, [r4, #24]
 800ebae:	e7d2      	b.n	800eb56 <__sinit+0xe>
 800ebb0:	08013a38 	.word	0x08013a38
 800ebb4:	0800eacd 	.word	0x0800eacd

0800ebb8 <__sfp>:
 800ebb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebba:	0007      	movs	r7, r0
 800ebbc:	f7ff ffa4 	bl	800eb08 <__sfp_lock_acquire>
 800ebc0:	4b1f      	ldr	r3, [pc, #124]	; (800ec40 <__sfp+0x88>)
 800ebc2:	681e      	ldr	r6, [r3, #0]
 800ebc4:	69b3      	ldr	r3, [r6, #24]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d102      	bne.n	800ebd0 <__sfp+0x18>
 800ebca:	0030      	movs	r0, r6
 800ebcc:	f7ff ffbc 	bl	800eb48 <__sinit>
 800ebd0:	3648      	adds	r6, #72	; 0x48
 800ebd2:	68b4      	ldr	r4, [r6, #8]
 800ebd4:	6873      	ldr	r3, [r6, #4]
 800ebd6:	3b01      	subs	r3, #1
 800ebd8:	d504      	bpl.n	800ebe4 <__sfp+0x2c>
 800ebda:	6833      	ldr	r3, [r6, #0]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d022      	beq.n	800ec26 <__sfp+0x6e>
 800ebe0:	6836      	ldr	r6, [r6, #0]
 800ebe2:	e7f6      	b.n	800ebd2 <__sfp+0x1a>
 800ebe4:	220c      	movs	r2, #12
 800ebe6:	5ea5      	ldrsh	r5, [r4, r2]
 800ebe8:	2d00      	cmp	r5, #0
 800ebea:	d11a      	bne.n	800ec22 <__sfp+0x6a>
 800ebec:	0020      	movs	r0, r4
 800ebee:	4b15      	ldr	r3, [pc, #84]	; (800ec44 <__sfp+0x8c>)
 800ebf0:	3058      	adds	r0, #88	; 0x58
 800ebf2:	60e3      	str	r3, [r4, #12]
 800ebf4:	6665      	str	r5, [r4, #100]	; 0x64
 800ebf6:	f000 f86b 	bl	800ecd0 <__retarget_lock_init_recursive>
 800ebfa:	f7ff ff8d 	bl	800eb18 <__sfp_lock_release>
 800ebfe:	0020      	movs	r0, r4
 800ec00:	2208      	movs	r2, #8
 800ec02:	0029      	movs	r1, r5
 800ec04:	6025      	str	r5, [r4, #0]
 800ec06:	60a5      	str	r5, [r4, #8]
 800ec08:	6065      	str	r5, [r4, #4]
 800ec0a:	6125      	str	r5, [r4, #16]
 800ec0c:	6165      	str	r5, [r4, #20]
 800ec0e:	61a5      	str	r5, [r4, #24]
 800ec10:	305c      	adds	r0, #92	; 0x5c
 800ec12:	f000 f869 	bl	800ece8 <memset>
 800ec16:	6365      	str	r5, [r4, #52]	; 0x34
 800ec18:	63a5      	str	r5, [r4, #56]	; 0x38
 800ec1a:	64a5      	str	r5, [r4, #72]	; 0x48
 800ec1c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800ec1e:	0020      	movs	r0, r4
 800ec20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec22:	3468      	adds	r4, #104	; 0x68
 800ec24:	e7d7      	b.n	800ebd6 <__sfp+0x1e>
 800ec26:	2104      	movs	r1, #4
 800ec28:	0038      	movs	r0, r7
 800ec2a:	f7ff ff57 	bl	800eadc <__sfmoreglue>
 800ec2e:	1e04      	subs	r4, r0, #0
 800ec30:	6030      	str	r0, [r6, #0]
 800ec32:	d1d5      	bne.n	800ebe0 <__sfp+0x28>
 800ec34:	f7ff ff70 	bl	800eb18 <__sfp_lock_release>
 800ec38:	230c      	movs	r3, #12
 800ec3a:	603b      	str	r3, [r7, #0]
 800ec3c:	e7ef      	b.n	800ec1e <__sfp+0x66>
 800ec3e:	46c0      	nop			; (mov r8, r8)
 800ec40:	08013a38 	.word	0x08013a38
 800ec44:	ffff0001 	.word	0xffff0001

0800ec48 <_fwalk_reent>:
 800ec48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ec4a:	0004      	movs	r4, r0
 800ec4c:	0006      	movs	r6, r0
 800ec4e:	2700      	movs	r7, #0
 800ec50:	9101      	str	r1, [sp, #4]
 800ec52:	3448      	adds	r4, #72	; 0x48
 800ec54:	6863      	ldr	r3, [r4, #4]
 800ec56:	68a5      	ldr	r5, [r4, #8]
 800ec58:	9300      	str	r3, [sp, #0]
 800ec5a:	9b00      	ldr	r3, [sp, #0]
 800ec5c:	3b01      	subs	r3, #1
 800ec5e:	9300      	str	r3, [sp, #0]
 800ec60:	d504      	bpl.n	800ec6c <_fwalk_reent+0x24>
 800ec62:	6824      	ldr	r4, [r4, #0]
 800ec64:	2c00      	cmp	r4, #0
 800ec66:	d1f5      	bne.n	800ec54 <_fwalk_reent+0xc>
 800ec68:	0038      	movs	r0, r7
 800ec6a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ec6c:	89ab      	ldrh	r3, [r5, #12]
 800ec6e:	2b01      	cmp	r3, #1
 800ec70:	d908      	bls.n	800ec84 <_fwalk_reent+0x3c>
 800ec72:	220e      	movs	r2, #14
 800ec74:	5eab      	ldrsh	r3, [r5, r2]
 800ec76:	3301      	adds	r3, #1
 800ec78:	d004      	beq.n	800ec84 <_fwalk_reent+0x3c>
 800ec7a:	0029      	movs	r1, r5
 800ec7c:	0030      	movs	r0, r6
 800ec7e:	9b01      	ldr	r3, [sp, #4]
 800ec80:	4798      	blx	r3
 800ec82:	4307      	orrs	r7, r0
 800ec84:	3568      	adds	r5, #104	; 0x68
 800ec86:	e7e8      	b.n	800ec5a <_fwalk_reent+0x12>

0800ec88 <__libc_init_array>:
 800ec88:	b570      	push	{r4, r5, r6, lr}
 800ec8a:	2600      	movs	r6, #0
 800ec8c:	4d0c      	ldr	r5, [pc, #48]	; (800ecc0 <__libc_init_array+0x38>)
 800ec8e:	4c0d      	ldr	r4, [pc, #52]	; (800ecc4 <__libc_init_array+0x3c>)
 800ec90:	1b64      	subs	r4, r4, r5
 800ec92:	10a4      	asrs	r4, r4, #2
 800ec94:	42a6      	cmp	r6, r4
 800ec96:	d109      	bne.n	800ecac <__libc_init_array+0x24>
 800ec98:	2600      	movs	r6, #0
 800ec9a:	f004 f815 	bl	8012cc8 <_init>
 800ec9e:	4d0a      	ldr	r5, [pc, #40]	; (800ecc8 <__libc_init_array+0x40>)
 800eca0:	4c0a      	ldr	r4, [pc, #40]	; (800eccc <__libc_init_array+0x44>)
 800eca2:	1b64      	subs	r4, r4, r5
 800eca4:	10a4      	asrs	r4, r4, #2
 800eca6:	42a6      	cmp	r6, r4
 800eca8:	d105      	bne.n	800ecb6 <__libc_init_array+0x2e>
 800ecaa:	bd70      	pop	{r4, r5, r6, pc}
 800ecac:	00b3      	lsls	r3, r6, #2
 800ecae:	58eb      	ldr	r3, [r5, r3]
 800ecb0:	4798      	blx	r3
 800ecb2:	3601      	adds	r6, #1
 800ecb4:	e7ee      	b.n	800ec94 <__libc_init_array+0xc>
 800ecb6:	00b3      	lsls	r3, r6, #2
 800ecb8:	58eb      	ldr	r3, [r5, r3]
 800ecba:	4798      	blx	r3
 800ecbc:	3601      	adds	r6, #1
 800ecbe:	e7f2      	b.n	800eca6 <__libc_init_array+0x1e>
 800ecc0:	08013f90 	.word	0x08013f90
 800ecc4:	08013f90 	.word	0x08013f90
 800ecc8:	08013f90 	.word	0x08013f90
 800eccc:	08013f94 	.word	0x08013f94

0800ecd0 <__retarget_lock_init_recursive>:
 800ecd0:	4770      	bx	lr

0800ecd2 <__retarget_lock_acquire_recursive>:
 800ecd2:	4770      	bx	lr

0800ecd4 <__retarget_lock_release_recursive>:
 800ecd4:	4770      	bx	lr

0800ecd6 <memcpy>:
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	b510      	push	{r4, lr}
 800ecda:	429a      	cmp	r2, r3
 800ecdc:	d100      	bne.n	800ece0 <memcpy+0xa>
 800ecde:	bd10      	pop	{r4, pc}
 800ece0:	5ccc      	ldrb	r4, [r1, r3]
 800ece2:	54c4      	strb	r4, [r0, r3]
 800ece4:	3301      	adds	r3, #1
 800ece6:	e7f8      	b.n	800ecda <memcpy+0x4>

0800ece8 <memset>:
 800ece8:	0003      	movs	r3, r0
 800ecea:	1882      	adds	r2, r0, r2
 800ecec:	4293      	cmp	r3, r2
 800ecee:	d100      	bne.n	800ecf2 <memset+0xa>
 800ecf0:	4770      	bx	lr
 800ecf2:	7019      	strb	r1, [r3, #0]
 800ecf4:	3301      	adds	r3, #1
 800ecf6:	e7f9      	b.n	800ecec <memset+0x4>

0800ecf8 <sbrk_aligned>:
 800ecf8:	b570      	push	{r4, r5, r6, lr}
 800ecfa:	4e0f      	ldr	r6, [pc, #60]	; (800ed38 <sbrk_aligned+0x40>)
 800ecfc:	000d      	movs	r5, r1
 800ecfe:	6831      	ldr	r1, [r6, #0]
 800ed00:	0004      	movs	r4, r0
 800ed02:	2900      	cmp	r1, #0
 800ed04:	d102      	bne.n	800ed0c <sbrk_aligned+0x14>
 800ed06:	f000 fd71 	bl	800f7ec <_sbrk_r>
 800ed0a:	6030      	str	r0, [r6, #0]
 800ed0c:	0029      	movs	r1, r5
 800ed0e:	0020      	movs	r0, r4
 800ed10:	f000 fd6c 	bl	800f7ec <_sbrk_r>
 800ed14:	1c43      	adds	r3, r0, #1
 800ed16:	d00a      	beq.n	800ed2e <sbrk_aligned+0x36>
 800ed18:	2303      	movs	r3, #3
 800ed1a:	1cc5      	adds	r5, r0, #3
 800ed1c:	439d      	bics	r5, r3
 800ed1e:	42a8      	cmp	r0, r5
 800ed20:	d007      	beq.n	800ed32 <sbrk_aligned+0x3a>
 800ed22:	1a29      	subs	r1, r5, r0
 800ed24:	0020      	movs	r0, r4
 800ed26:	f000 fd61 	bl	800f7ec <_sbrk_r>
 800ed2a:	1c43      	adds	r3, r0, #1
 800ed2c:	d101      	bne.n	800ed32 <sbrk_aligned+0x3a>
 800ed2e:	2501      	movs	r5, #1
 800ed30:	426d      	negs	r5, r5
 800ed32:	0028      	movs	r0, r5
 800ed34:	bd70      	pop	{r4, r5, r6, pc}
 800ed36:	46c0      	nop			; (mov r8, r8)
 800ed38:	200021a0 	.word	0x200021a0

0800ed3c <_malloc_r>:
 800ed3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ed3e:	2203      	movs	r2, #3
 800ed40:	1ccb      	adds	r3, r1, #3
 800ed42:	4393      	bics	r3, r2
 800ed44:	3308      	adds	r3, #8
 800ed46:	0006      	movs	r6, r0
 800ed48:	001f      	movs	r7, r3
 800ed4a:	2b0c      	cmp	r3, #12
 800ed4c:	d232      	bcs.n	800edb4 <_malloc_r+0x78>
 800ed4e:	270c      	movs	r7, #12
 800ed50:	42b9      	cmp	r1, r7
 800ed52:	d831      	bhi.n	800edb8 <_malloc_r+0x7c>
 800ed54:	0030      	movs	r0, r6
 800ed56:	f001 fe27 	bl	80109a8 <__malloc_lock>
 800ed5a:	4d32      	ldr	r5, [pc, #200]	; (800ee24 <_malloc_r+0xe8>)
 800ed5c:	682b      	ldr	r3, [r5, #0]
 800ed5e:	001c      	movs	r4, r3
 800ed60:	2c00      	cmp	r4, #0
 800ed62:	d12e      	bne.n	800edc2 <_malloc_r+0x86>
 800ed64:	0039      	movs	r1, r7
 800ed66:	0030      	movs	r0, r6
 800ed68:	f7ff ffc6 	bl	800ecf8 <sbrk_aligned>
 800ed6c:	0004      	movs	r4, r0
 800ed6e:	1c43      	adds	r3, r0, #1
 800ed70:	d11e      	bne.n	800edb0 <_malloc_r+0x74>
 800ed72:	682c      	ldr	r4, [r5, #0]
 800ed74:	0025      	movs	r5, r4
 800ed76:	2d00      	cmp	r5, #0
 800ed78:	d14a      	bne.n	800ee10 <_malloc_r+0xd4>
 800ed7a:	6823      	ldr	r3, [r4, #0]
 800ed7c:	0029      	movs	r1, r5
 800ed7e:	18e3      	adds	r3, r4, r3
 800ed80:	0030      	movs	r0, r6
 800ed82:	9301      	str	r3, [sp, #4]
 800ed84:	f000 fd32 	bl	800f7ec <_sbrk_r>
 800ed88:	9b01      	ldr	r3, [sp, #4]
 800ed8a:	4283      	cmp	r3, r0
 800ed8c:	d143      	bne.n	800ee16 <_malloc_r+0xda>
 800ed8e:	6823      	ldr	r3, [r4, #0]
 800ed90:	3703      	adds	r7, #3
 800ed92:	1aff      	subs	r7, r7, r3
 800ed94:	2303      	movs	r3, #3
 800ed96:	439f      	bics	r7, r3
 800ed98:	3708      	adds	r7, #8
 800ed9a:	2f0c      	cmp	r7, #12
 800ed9c:	d200      	bcs.n	800eda0 <_malloc_r+0x64>
 800ed9e:	270c      	movs	r7, #12
 800eda0:	0039      	movs	r1, r7
 800eda2:	0030      	movs	r0, r6
 800eda4:	f7ff ffa8 	bl	800ecf8 <sbrk_aligned>
 800eda8:	1c43      	adds	r3, r0, #1
 800edaa:	d034      	beq.n	800ee16 <_malloc_r+0xda>
 800edac:	6823      	ldr	r3, [r4, #0]
 800edae:	19df      	adds	r7, r3, r7
 800edb0:	6027      	str	r7, [r4, #0]
 800edb2:	e013      	b.n	800eddc <_malloc_r+0xa0>
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	dacb      	bge.n	800ed50 <_malloc_r+0x14>
 800edb8:	230c      	movs	r3, #12
 800edba:	2500      	movs	r5, #0
 800edbc:	6033      	str	r3, [r6, #0]
 800edbe:	0028      	movs	r0, r5
 800edc0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800edc2:	6822      	ldr	r2, [r4, #0]
 800edc4:	1bd1      	subs	r1, r2, r7
 800edc6:	d420      	bmi.n	800ee0a <_malloc_r+0xce>
 800edc8:	290b      	cmp	r1, #11
 800edca:	d917      	bls.n	800edfc <_malloc_r+0xc0>
 800edcc:	19e2      	adds	r2, r4, r7
 800edce:	6027      	str	r7, [r4, #0]
 800edd0:	42a3      	cmp	r3, r4
 800edd2:	d111      	bne.n	800edf8 <_malloc_r+0xbc>
 800edd4:	602a      	str	r2, [r5, #0]
 800edd6:	6863      	ldr	r3, [r4, #4]
 800edd8:	6011      	str	r1, [r2, #0]
 800edda:	6053      	str	r3, [r2, #4]
 800eddc:	0030      	movs	r0, r6
 800edde:	0025      	movs	r5, r4
 800ede0:	f001 fdea 	bl	80109b8 <__malloc_unlock>
 800ede4:	2207      	movs	r2, #7
 800ede6:	350b      	adds	r5, #11
 800ede8:	1d23      	adds	r3, r4, #4
 800edea:	4395      	bics	r5, r2
 800edec:	1aea      	subs	r2, r5, r3
 800edee:	429d      	cmp	r5, r3
 800edf0:	d0e5      	beq.n	800edbe <_malloc_r+0x82>
 800edf2:	1b5b      	subs	r3, r3, r5
 800edf4:	50a3      	str	r3, [r4, r2]
 800edf6:	e7e2      	b.n	800edbe <_malloc_r+0x82>
 800edf8:	605a      	str	r2, [r3, #4]
 800edfa:	e7ec      	b.n	800edd6 <_malloc_r+0x9a>
 800edfc:	6862      	ldr	r2, [r4, #4]
 800edfe:	42a3      	cmp	r3, r4
 800ee00:	d101      	bne.n	800ee06 <_malloc_r+0xca>
 800ee02:	602a      	str	r2, [r5, #0]
 800ee04:	e7ea      	b.n	800eddc <_malloc_r+0xa0>
 800ee06:	605a      	str	r2, [r3, #4]
 800ee08:	e7e8      	b.n	800eddc <_malloc_r+0xa0>
 800ee0a:	0023      	movs	r3, r4
 800ee0c:	6864      	ldr	r4, [r4, #4]
 800ee0e:	e7a7      	b.n	800ed60 <_malloc_r+0x24>
 800ee10:	002c      	movs	r4, r5
 800ee12:	686d      	ldr	r5, [r5, #4]
 800ee14:	e7af      	b.n	800ed76 <_malloc_r+0x3a>
 800ee16:	230c      	movs	r3, #12
 800ee18:	0030      	movs	r0, r6
 800ee1a:	6033      	str	r3, [r6, #0]
 800ee1c:	f001 fdcc 	bl	80109b8 <__malloc_unlock>
 800ee20:	e7cd      	b.n	800edbe <_malloc_r+0x82>
 800ee22:	46c0      	nop			; (mov r8, r8)
 800ee24:	2000219c 	.word	0x2000219c

0800ee28 <__cvt>:
 800ee28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee2a:	001e      	movs	r6, r3
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	0014      	movs	r4, r2
 800ee30:	b08b      	sub	sp, #44	; 0x2c
 800ee32:	429e      	cmp	r6, r3
 800ee34:	da04      	bge.n	800ee40 <__cvt+0x18>
 800ee36:	2180      	movs	r1, #128	; 0x80
 800ee38:	0609      	lsls	r1, r1, #24
 800ee3a:	1873      	adds	r3, r6, r1
 800ee3c:	001e      	movs	r6, r3
 800ee3e:	232d      	movs	r3, #45	; 0x2d
 800ee40:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ee42:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800ee44:	7013      	strb	r3, [r2, #0]
 800ee46:	2320      	movs	r3, #32
 800ee48:	2203      	movs	r2, #3
 800ee4a:	439f      	bics	r7, r3
 800ee4c:	2f46      	cmp	r7, #70	; 0x46
 800ee4e:	d007      	beq.n	800ee60 <__cvt+0x38>
 800ee50:	003b      	movs	r3, r7
 800ee52:	3b45      	subs	r3, #69	; 0x45
 800ee54:	4259      	negs	r1, r3
 800ee56:	414b      	adcs	r3, r1
 800ee58:	9910      	ldr	r1, [sp, #64]	; 0x40
 800ee5a:	3a01      	subs	r2, #1
 800ee5c:	18cb      	adds	r3, r1, r3
 800ee5e:	9310      	str	r3, [sp, #64]	; 0x40
 800ee60:	ab09      	add	r3, sp, #36	; 0x24
 800ee62:	9304      	str	r3, [sp, #16]
 800ee64:	ab08      	add	r3, sp, #32
 800ee66:	9303      	str	r3, [sp, #12]
 800ee68:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ee6a:	9200      	str	r2, [sp, #0]
 800ee6c:	9302      	str	r3, [sp, #8]
 800ee6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ee70:	0022      	movs	r2, r4
 800ee72:	9301      	str	r3, [sp, #4]
 800ee74:	0033      	movs	r3, r6
 800ee76:	f000 fe83 	bl	800fb80 <_dtoa_r>
 800ee7a:	0005      	movs	r5, r0
 800ee7c:	2f47      	cmp	r7, #71	; 0x47
 800ee7e:	d102      	bne.n	800ee86 <__cvt+0x5e>
 800ee80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ee82:	07db      	lsls	r3, r3, #31
 800ee84:	d528      	bpl.n	800eed8 <__cvt+0xb0>
 800ee86:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ee88:	18eb      	adds	r3, r5, r3
 800ee8a:	9307      	str	r3, [sp, #28]
 800ee8c:	2f46      	cmp	r7, #70	; 0x46
 800ee8e:	d114      	bne.n	800eeba <__cvt+0x92>
 800ee90:	782b      	ldrb	r3, [r5, #0]
 800ee92:	2b30      	cmp	r3, #48	; 0x30
 800ee94:	d10c      	bne.n	800eeb0 <__cvt+0x88>
 800ee96:	2200      	movs	r2, #0
 800ee98:	2300      	movs	r3, #0
 800ee9a:	0020      	movs	r0, r4
 800ee9c:	0031      	movs	r1, r6
 800ee9e:	f7f1 fad5 	bl	800044c <__aeabi_dcmpeq>
 800eea2:	2800      	cmp	r0, #0
 800eea4:	d104      	bne.n	800eeb0 <__cvt+0x88>
 800eea6:	2301      	movs	r3, #1
 800eea8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800eeaa:	1a9b      	subs	r3, r3, r2
 800eeac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800eeae:	6013      	str	r3, [r2, #0]
 800eeb0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800eeb2:	9a07      	ldr	r2, [sp, #28]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	18d3      	adds	r3, r2, r3
 800eeb8:	9307      	str	r3, [sp, #28]
 800eeba:	2200      	movs	r2, #0
 800eebc:	2300      	movs	r3, #0
 800eebe:	0020      	movs	r0, r4
 800eec0:	0031      	movs	r1, r6
 800eec2:	f7f1 fac3 	bl	800044c <__aeabi_dcmpeq>
 800eec6:	2800      	cmp	r0, #0
 800eec8:	d001      	beq.n	800eece <__cvt+0xa6>
 800eeca:	9b07      	ldr	r3, [sp, #28]
 800eecc:	9309      	str	r3, [sp, #36]	; 0x24
 800eece:	2230      	movs	r2, #48	; 0x30
 800eed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eed2:	9907      	ldr	r1, [sp, #28]
 800eed4:	428b      	cmp	r3, r1
 800eed6:	d306      	bcc.n	800eee6 <__cvt+0xbe>
 800eed8:	0028      	movs	r0, r5
 800eeda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eedc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800eede:	1b5b      	subs	r3, r3, r5
 800eee0:	6013      	str	r3, [r2, #0]
 800eee2:	b00b      	add	sp, #44	; 0x2c
 800eee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eee6:	1c59      	adds	r1, r3, #1
 800eee8:	9109      	str	r1, [sp, #36]	; 0x24
 800eeea:	701a      	strb	r2, [r3, #0]
 800eeec:	e7f0      	b.n	800eed0 <__cvt+0xa8>

0800eeee <__exponent>:
 800eeee:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eef0:	1c83      	adds	r3, r0, #2
 800eef2:	b087      	sub	sp, #28
 800eef4:	9303      	str	r3, [sp, #12]
 800eef6:	0005      	movs	r5, r0
 800eef8:	000c      	movs	r4, r1
 800eefa:	232b      	movs	r3, #43	; 0x2b
 800eefc:	7002      	strb	r2, [r0, #0]
 800eefe:	2900      	cmp	r1, #0
 800ef00:	da01      	bge.n	800ef06 <__exponent+0x18>
 800ef02:	424c      	negs	r4, r1
 800ef04:	3302      	adds	r3, #2
 800ef06:	706b      	strb	r3, [r5, #1]
 800ef08:	2c09      	cmp	r4, #9
 800ef0a:	dd31      	ble.n	800ef70 <__exponent+0x82>
 800ef0c:	270a      	movs	r7, #10
 800ef0e:	ab04      	add	r3, sp, #16
 800ef10:	1dde      	adds	r6, r3, #7
 800ef12:	0020      	movs	r0, r4
 800ef14:	0039      	movs	r1, r7
 800ef16:	9601      	str	r6, [sp, #4]
 800ef18:	f7f1 fa82 	bl	8000420 <__aeabi_idivmod>
 800ef1c:	3e01      	subs	r6, #1
 800ef1e:	3130      	adds	r1, #48	; 0x30
 800ef20:	0020      	movs	r0, r4
 800ef22:	7031      	strb	r1, [r6, #0]
 800ef24:	0039      	movs	r1, r7
 800ef26:	9402      	str	r4, [sp, #8]
 800ef28:	f7f1 f994 	bl	8000254 <__divsi3>
 800ef2c:	9b02      	ldr	r3, [sp, #8]
 800ef2e:	0004      	movs	r4, r0
 800ef30:	2b63      	cmp	r3, #99	; 0x63
 800ef32:	dcee      	bgt.n	800ef12 <__exponent+0x24>
 800ef34:	9b01      	ldr	r3, [sp, #4]
 800ef36:	3430      	adds	r4, #48	; 0x30
 800ef38:	1e9a      	subs	r2, r3, #2
 800ef3a:	0013      	movs	r3, r2
 800ef3c:	9903      	ldr	r1, [sp, #12]
 800ef3e:	7014      	strb	r4, [r2, #0]
 800ef40:	a804      	add	r0, sp, #16
 800ef42:	3007      	adds	r0, #7
 800ef44:	4298      	cmp	r0, r3
 800ef46:	d80e      	bhi.n	800ef66 <__exponent+0x78>
 800ef48:	ab04      	add	r3, sp, #16
 800ef4a:	3307      	adds	r3, #7
 800ef4c:	2000      	movs	r0, #0
 800ef4e:	429a      	cmp	r2, r3
 800ef50:	d804      	bhi.n	800ef5c <__exponent+0x6e>
 800ef52:	ab04      	add	r3, sp, #16
 800ef54:	3009      	adds	r0, #9
 800ef56:	18c0      	adds	r0, r0, r3
 800ef58:	9b01      	ldr	r3, [sp, #4]
 800ef5a:	1ac0      	subs	r0, r0, r3
 800ef5c:	9b03      	ldr	r3, [sp, #12]
 800ef5e:	1818      	adds	r0, r3, r0
 800ef60:	1b40      	subs	r0, r0, r5
 800ef62:	b007      	add	sp, #28
 800ef64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef66:	7818      	ldrb	r0, [r3, #0]
 800ef68:	3301      	adds	r3, #1
 800ef6a:	7008      	strb	r0, [r1, #0]
 800ef6c:	3101      	adds	r1, #1
 800ef6e:	e7e7      	b.n	800ef40 <__exponent+0x52>
 800ef70:	2330      	movs	r3, #48	; 0x30
 800ef72:	18e4      	adds	r4, r4, r3
 800ef74:	70ab      	strb	r3, [r5, #2]
 800ef76:	1d28      	adds	r0, r5, #4
 800ef78:	70ec      	strb	r4, [r5, #3]
 800ef7a:	e7f1      	b.n	800ef60 <__exponent+0x72>

0800ef7c <_printf_float>:
 800ef7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef7e:	b095      	sub	sp, #84	; 0x54
 800ef80:	000c      	movs	r4, r1
 800ef82:	9209      	str	r2, [sp, #36]	; 0x24
 800ef84:	001e      	movs	r6, r3
 800ef86:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800ef88:	0007      	movs	r7, r0
 800ef8a:	f001 fcdf 	bl	801094c <_localeconv_r>
 800ef8e:	6803      	ldr	r3, [r0, #0]
 800ef90:	0018      	movs	r0, r3
 800ef92:	930c      	str	r3, [sp, #48]	; 0x30
 800ef94:	f7f1 f8b8 	bl	8000108 <strlen>
 800ef98:	2300      	movs	r3, #0
 800ef9a:	9312      	str	r3, [sp, #72]	; 0x48
 800ef9c:	7e23      	ldrb	r3, [r4, #24]
 800ef9e:	2207      	movs	r2, #7
 800efa0:	930a      	str	r3, [sp, #40]	; 0x28
 800efa2:	6823      	ldr	r3, [r4, #0]
 800efa4:	900e      	str	r0, [sp, #56]	; 0x38
 800efa6:	930d      	str	r3, [sp, #52]	; 0x34
 800efa8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800efaa:	682b      	ldr	r3, [r5, #0]
 800efac:	05c9      	lsls	r1, r1, #23
 800efae:	d547      	bpl.n	800f040 <_printf_float+0xc4>
 800efb0:	189b      	adds	r3, r3, r2
 800efb2:	4393      	bics	r3, r2
 800efb4:	001a      	movs	r2, r3
 800efb6:	3208      	adds	r2, #8
 800efb8:	602a      	str	r2, [r5, #0]
 800efba:	681a      	ldr	r2, [r3, #0]
 800efbc:	685b      	ldr	r3, [r3, #4]
 800efbe:	64a2      	str	r2, [r4, #72]	; 0x48
 800efc0:	64e3      	str	r3, [r4, #76]	; 0x4c
 800efc2:	2201      	movs	r2, #1
 800efc4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800efc6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800efc8:	930b      	str	r3, [sp, #44]	; 0x2c
 800efca:	006b      	lsls	r3, r5, #1
 800efcc:	085b      	lsrs	r3, r3, #1
 800efce:	930f      	str	r3, [sp, #60]	; 0x3c
 800efd0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800efd2:	4ba7      	ldr	r3, [pc, #668]	; (800f270 <_printf_float+0x2f4>)
 800efd4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800efd6:	4252      	negs	r2, r2
 800efd8:	f7f3 fc14 	bl	8002804 <__aeabi_dcmpun>
 800efdc:	2800      	cmp	r0, #0
 800efde:	d131      	bne.n	800f044 <_printf_float+0xc8>
 800efe0:	2201      	movs	r2, #1
 800efe2:	4ba3      	ldr	r3, [pc, #652]	; (800f270 <_printf_float+0x2f4>)
 800efe4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800efe6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800efe8:	4252      	negs	r2, r2
 800efea:	f7f1 fa3f 	bl	800046c <__aeabi_dcmple>
 800efee:	2800      	cmp	r0, #0
 800eff0:	d128      	bne.n	800f044 <_printf_float+0xc8>
 800eff2:	2200      	movs	r2, #0
 800eff4:	2300      	movs	r3, #0
 800eff6:	0029      	movs	r1, r5
 800eff8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800effa:	f7f1 fa2d 	bl	8000458 <__aeabi_dcmplt>
 800effe:	2800      	cmp	r0, #0
 800f000:	d003      	beq.n	800f00a <_printf_float+0x8e>
 800f002:	0023      	movs	r3, r4
 800f004:	222d      	movs	r2, #45	; 0x2d
 800f006:	3343      	adds	r3, #67	; 0x43
 800f008:	701a      	strb	r2, [r3, #0]
 800f00a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f00c:	4d99      	ldr	r5, [pc, #612]	; (800f274 <_printf_float+0x2f8>)
 800f00e:	2b47      	cmp	r3, #71	; 0x47
 800f010:	d900      	bls.n	800f014 <_printf_float+0x98>
 800f012:	4d99      	ldr	r5, [pc, #612]	; (800f278 <_printf_float+0x2fc>)
 800f014:	2303      	movs	r3, #3
 800f016:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f018:	6123      	str	r3, [r4, #16]
 800f01a:	3301      	adds	r3, #1
 800f01c:	439a      	bics	r2, r3
 800f01e:	2300      	movs	r3, #0
 800f020:	6022      	str	r2, [r4, #0]
 800f022:	930b      	str	r3, [sp, #44]	; 0x2c
 800f024:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f026:	0021      	movs	r1, r4
 800f028:	0038      	movs	r0, r7
 800f02a:	9600      	str	r6, [sp, #0]
 800f02c:	aa13      	add	r2, sp, #76	; 0x4c
 800f02e:	f000 f9e7 	bl	800f400 <_printf_common>
 800f032:	1c43      	adds	r3, r0, #1
 800f034:	d000      	beq.n	800f038 <_printf_float+0xbc>
 800f036:	e0a2      	b.n	800f17e <_printf_float+0x202>
 800f038:	2001      	movs	r0, #1
 800f03a:	4240      	negs	r0, r0
 800f03c:	b015      	add	sp, #84	; 0x54
 800f03e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f040:	3307      	adds	r3, #7
 800f042:	e7b6      	b.n	800efb2 <_printf_float+0x36>
 800f044:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f046:	002b      	movs	r3, r5
 800f048:	0010      	movs	r0, r2
 800f04a:	0029      	movs	r1, r5
 800f04c:	f7f3 fbda 	bl	8002804 <__aeabi_dcmpun>
 800f050:	2800      	cmp	r0, #0
 800f052:	d00b      	beq.n	800f06c <_printf_float+0xf0>
 800f054:	2d00      	cmp	r5, #0
 800f056:	da03      	bge.n	800f060 <_printf_float+0xe4>
 800f058:	0023      	movs	r3, r4
 800f05a:	222d      	movs	r2, #45	; 0x2d
 800f05c:	3343      	adds	r3, #67	; 0x43
 800f05e:	701a      	strb	r2, [r3, #0]
 800f060:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f062:	4d86      	ldr	r5, [pc, #536]	; (800f27c <_printf_float+0x300>)
 800f064:	2b47      	cmp	r3, #71	; 0x47
 800f066:	d9d5      	bls.n	800f014 <_printf_float+0x98>
 800f068:	4d85      	ldr	r5, [pc, #532]	; (800f280 <_printf_float+0x304>)
 800f06a:	e7d3      	b.n	800f014 <_printf_float+0x98>
 800f06c:	2220      	movs	r2, #32
 800f06e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f070:	6863      	ldr	r3, [r4, #4]
 800f072:	4391      	bics	r1, r2
 800f074:	910f      	str	r1, [sp, #60]	; 0x3c
 800f076:	1c5a      	adds	r2, r3, #1
 800f078:	d149      	bne.n	800f10e <_printf_float+0x192>
 800f07a:	3307      	adds	r3, #7
 800f07c:	6063      	str	r3, [r4, #4]
 800f07e:	2380      	movs	r3, #128	; 0x80
 800f080:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f082:	00db      	lsls	r3, r3, #3
 800f084:	4313      	orrs	r3, r2
 800f086:	2200      	movs	r2, #0
 800f088:	9206      	str	r2, [sp, #24]
 800f08a:	aa12      	add	r2, sp, #72	; 0x48
 800f08c:	9205      	str	r2, [sp, #20]
 800f08e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f090:	a908      	add	r1, sp, #32
 800f092:	9204      	str	r2, [sp, #16]
 800f094:	aa11      	add	r2, sp, #68	; 0x44
 800f096:	9203      	str	r2, [sp, #12]
 800f098:	2223      	movs	r2, #35	; 0x23
 800f09a:	6023      	str	r3, [r4, #0]
 800f09c:	9301      	str	r3, [sp, #4]
 800f09e:	6863      	ldr	r3, [r4, #4]
 800f0a0:	1852      	adds	r2, r2, r1
 800f0a2:	9202      	str	r2, [sp, #8]
 800f0a4:	9300      	str	r3, [sp, #0]
 800f0a6:	0038      	movs	r0, r7
 800f0a8:	002b      	movs	r3, r5
 800f0aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f0ac:	f7ff febc 	bl	800ee28 <__cvt>
 800f0b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f0b2:	0005      	movs	r5, r0
 800f0b4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f0b6:	2b47      	cmp	r3, #71	; 0x47
 800f0b8:	d108      	bne.n	800f0cc <_printf_float+0x150>
 800f0ba:	1ccb      	adds	r3, r1, #3
 800f0bc:	db02      	blt.n	800f0c4 <_printf_float+0x148>
 800f0be:	6863      	ldr	r3, [r4, #4]
 800f0c0:	4299      	cmp	r1, r3
 800f0c2:	dd48      	ble.n	800f156 <_printf_float+0x1da>
 800f0c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f0c6:	3b02      	subs	r3, #2
 800f0c8:	b2db      	uxtb	r3, r3
 800f0ca:	930a      	str	r3, [sp, #40]	; 0x28
 800f0cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f0ce:	2b65      	cmp	r3, #101	; 0x65
 800f0d0:	d824      	bhi.n	800f11c <_printf_float+0x1a0>
 800f0d2:	0020      	movs	r0, r4
 800f0d4:	001a      	movs	r2, r3
 800f0d6:	3901      	subs	r1, #1
 800f0d8:	3050      	adds	r0, #80	; 0x50
 800f0da:	9111      	str	r1, [sp, #68]	; 0x44
 800f0dc:	f7ff ff07 	bl	800eeee <__exponent>
 800f0e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f0e2:	900b      	str	r0, [sp, #44]	; 0x2c
 800f0e4:	1813      	adds	r3, r2, r0
 800f0e6:	6123      	str	r3, [r4, #16]
 800f0e8:	2a01      	cmp	r2, #1
 800f0ea:	dc02      	bgt.n	800f0f2 <_printf_float+0x176>
 800f0ec:	6822      	ldr	r2, [r4, #0]
 800f0ee:	07d2      	lsls	r2, r2, #31
 800f0f0:	d501      	bpl.n	800f0f6 <_printf_float+0x17a>
 800f0f2:	3301      	adds	r3, #1
 800f0f4:	6123      	str	r3, [r4, #16]
 800f0f6:	2323      	movs	r3, #35	; 0x23
 800f0f8:	aa08      	add	r2, sp, #32
 800f0fa:	189b      	adds	r3, r3, r2
 800f0fc:	781b      	ldrb	r3, [r3, #0]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d100      	bne.n	800f104 <_printf_float+0x188>
 800f102:	e78f      	b.n	800f024 <_printf_float+0xa8>
 800f104:	0023      	movs	r3, r4
 800f106:	222d      	movs	r2, #45	; 0x2d
 800f108:	3343      	adds	r3, #67	; 0x43
 800f10a:	701a      	strb	r2, [r3, #0]
 800f10c:	e78a      	b.n	800f024 <_printf_float+0xa8>
 800f10e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f110:	2a47      	cmp	r2, #71	; 0x47
 800f112:	d1b4      	bne.n	800f07e <_printf_float+0x102>
 800f114:	2b00      	cmp	r3, #0
 800f116:	d1b2      	bne.n	800f07e <_printf_float+0x102>
 800f118:	3301      	adds	r3, #1
 800f11a:	e7af      	b.n	800f07c <_printf_float+0x100>
 800f11c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f11e:	2b66      	cmp	r3, #102	; 0x66
 800f120:	d11b      	bne.n	800f15a <_printf_float+0x1de>
 800f122:	6863      	ldr	r3, [r4, #4]
 800f124:	2900      	cmp	r1, #0
 800f126:	dd0d      	ble.n	800f144 <_printf_float+0x1c8>
 800f128:	6121      	str	r1, [r4, #16]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d102      	bne.n	800f134 <_printf_float+0x1b8>
 800f12e:	6822      	ldr	r2, [r4, #0]
 800f130:	07d2      	lsls	r2, r2, #31
 800f132:	d502      	bpl.n	800f13a <_printf_float+0x1be>
 800f134:	3301      	adds	r3, #1
 800f136:	1859      	adds	r1, r3, r1
 800f138:	6121      	str	r1, [r4, #16]
 800f13a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f13c:	65a3      	str	r3, [r4, #88]	; 0x58
 800f13e:	2300      	movs	r3, #0
 800f140:	930b      	str	r3, [sp, #44]	; 0x2c
 800f142:	e7d8      	b.n	800f0f6 <_printf_float+0x17a>
 800f144:	2b00      	cmp	r3, #0
 800f146:	d103      	bne.n	800f150 <_printf_float+0x1d4>
 800f148:	2201      	movs	r2, #1
 800f14a:	6821      	ldr	r1, [r4, #0]
 800f14c:	4211      	tst	r1, r2
 800f14e:	d000      	beq.n	800f152 <_printf_float+0x1d6>
 800f150:	1c9a      	adds	r2, r3, #2
 800f152:	6122      	str	r2, [r4, #16]
 800f154:	e7f1      	b.n	800f13a <_printf_float+0x1be>
 800f156:	2367      	movs	r3, #103	; 0x67
 800f158:	930a      	str	r3, [sp, #40]	; 0x28
 800f15a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f15c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f15e:	4293      	cmp	r3, r2
 800f160:	db06      	blt.n	800f170 <_printf_float+0x1f4>
 800f162:	6822      	ldr	r2, [r4, #0]
 800f164:	6123      	str	r3, [r4, #16]
 800f166:	07d2      	lsls	r2, r2, #31
 800f168:	d5e7      	bpl.n	800f13a <_printf_float+0x1be>
 800f16a:	3301      	adds	r3, #1
 800f16c:	6123      	str	r3, [r4, #16]
 800f16e:	e7e4      	b.n	800f13a <_printf_float+0x1be>
 800f170:	2101      	movs	r1, #1
 800f172:	2b00      	cmp	r3, #0
 800f174:	dc01      	bgt.n	800f17a <_printf_float+0x1fe>
 800f176:	1849      	adds	r1, r1, r1
 800f178:	1ac9      	subs	r1, r1, r3
 800f17a:	1852      	adds	r2, r2, r1
 800f17c:	e7e9      	b.n	800f152 <_printf_float+0x1d6>
 800f17e:	6822      	ldr	r2, [r4, #0]
 800f180:	0553      	lsls	r3, r2, #21
 800f182:	d407      	bmi.n	800f194 <_printf_float+0x218>
 800f184:	6923      	ldr	r3, [r4, #16]
 800f186:	002a      	movs	r2, r5
 800f188:	0038      	movs	r0, r7
 800f18a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f18c:	47b0      	blx	r6
 800f18e:	1c43      	adds	r3, r0, #1
 800f190:	d128      	bne.n	800f1e4 <_printf_float+0x268>
 800f192:	e751      	b.n	800f038 <_printf_float+0xbc>
 800f194:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f196:	2b65      	cmp	r3, #101	; 0x65
 800f198:	d800      	bhi.n	800f19c <_printf_float+0x220>
 800f19a:	e0e1      	b.n	800f360 <_printf_float+0x3e4>
 800f19c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800f19e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800f1a0:	2200      	movs	r2, #0
 800f1a2:	2300      	movs	r3, #0
 800f1a4:	f7f1 f952 	bl	800044c <__aeabi_dcmpeq>
 800f1a8:	2800      	cmp	r0, #0
 800f1aa:	d031      	beq.n	800f210 <_printf_float+0x294>
 800f1ac:	2301      	movs	r3, #1
 800f1ae:	0038      	movs	r0, r7
 800f1b0:	4a34      	ldr	r2, [pc, #208]	; (800f284 <_printf_float+0x308>)
 800f1b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f1b4:	47b0      	blx	r6
 800f1b6:	1c43      	adds	r3, r0, #1
 800f1b8:	d100      	bne.n	800f1bc <_printf_float+0x240>
 800f1ba:	e73d      	b.n	800f038 <_printf_float+0xbc>
 800f1bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f1be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f1c0:	4293      	cmp	r3, r2
 800f1c2:	db02      	blt.n	800f1ca <_printf_float+0x24e>
 800f1c4:	6823      	ldr	r3, [r4, #0]
 800f1c6:	07db      	lsls	r3, r3, #31
 800f1c8:	d50c      	bpl.n	800f1e4 <_printf_float+0x268>
 800f1ca:	0038      	movs	r0, r7
 800f1cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f1ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f1d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f1d2:	47b0      	blx	r6
 800f1d4:	2500      	movs	r5, #0
 800f1d6:	1c43      	adds	r3, r0, #1
 800f1d8:	d100      	bne.n	800f1dc <_printf_float+0x260>
 800f1da:	e72d      	b.n	800f038 <_printf_float+0xbc>
 800f1dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f1de:	3b01      	subs	r3, #1
 800f1e0:	42ab      	cmp	r3, r5
 800f1e2:	dc0a      	bgt.n	800f1fa <_printf_float+0x27e>
 800f1e4:	6823      	ldr	r3, [r4, #0]
 800f1e6:	079b      	lsls	r3, r3, #30
 800f1e8:	d500      	bpl.n	800f1ec <_printf_float+0x270>
 800f1ea:	e106      	b.n	800f3fa <_printf_float+0x47e>
 800f1ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f1ee:	68e0      	ldr	r0, [r4, #12]
 800f1f0:	4298      	cmp	r0, r3
 800f1f2:	db00      	blt.n	800f1f6 <_printf_float+0x27a>
 800f1f4:	e722      	b.n	800f03c <_printf_float+0xc0>
 800f1f6:	0018      	movs	r0, r3
 800f1f8:	e720      	b.n	800f03c <_printf_float+0xc0>
 800f1fa:	0022      	movs	r2, r4
 800f1fc:	2301      	movs	r3, #1
 800f1fe:	0038      	movs	r0, r7
 800f200:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f202:	321a      	adds	r2, #26
 800f204:	47b0      	blx	r6
 800f206:	1c43      	adds	r3, r0, #1
 800f208:	d100      	bne.n	800f20c <_printf_float+0x290>
 800f20a:	e715      	b.n	800f038 <_printf_float+0xbc>
 800f20c:	3501      	adds	r5, #1
 800f20e:	e7e5      	b.n	800f1dc <_printf_float+0x260>
 800f210:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f212:	2b00      	cmp	r3, #0
 800f214:	dc38      	bgt.n	800f288 <_printf_float+0x30c>
 800f216:	2301      	movs	r3, #1
 800f218:	0038      	movs	r0, r7
 800f21a:	4a1a      	ldr	r2, [pc, #104]	; (800f284 <_printf_float+0x308>)
 800f21c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f21e:	47b0      	blx	r6
 800f220:	1c43      	adds	r3, r0, #1
 800f222:	d100      	bne.n	800f226 <_printf_float+0x2aa>
 800f224:	e708      	b.n	800f038 <_printf_float+0xbc>
 800f226:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f228:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f22a:	4313      	orrs	r3, r2
 800f22c:	d102      	bne.n	800f234 <_printf_float+0x2b8>
 800f22e:	6823      	ldr	r3, [r4, #0]
 800f230:	07db      	lsls	r3, r3, #31
 800f232:	d5d7      	bpl.n	800f1e4 <_printf_float+0x268>
 800f234:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f236:	0038      	movs	r0, r7
 800f238:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f23a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f23c:	47b0      	blx	r6
 800f23e:	1c43      	adds	r3, r0, #1
 800f240:	d100      	bne.n	800f244 <_printf_float+0x2c8>
 800f242:	e6f9      	b.n	800f038 <_printf_float+0xbc>
 800f244:	2300      	movs	r3, #0
 800f246:	930a      	str	r3, [sp, #40]	; 0x28
 800f248:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f24a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f24c:	425b      	negs	r3, r3
 800f24e:	4293      	cmp	r3, r2
 800f250:	dc01      	bgt.n	800f256 <_printf_float+0x2da>
 800f252:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f254:	e797      	b.n	800f186 <_printf_float+0x20a>
 800f256:	0022      	movs	r2, r4
 800f258:	2301      	movs	r3, #1
 800f25a:	0038      	movs	r0, r7
 800f25c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f25e:	321a      	adds	r2, #26
 800f260:	47b0      	blx	r6
 800f262:	1c43      	adds	r3, r0, #1
 800f264:	d100      	bne.n	800f268 <_printf_float+0x2ec>
 800f266:	e6e7      	b.n	800f038 <_printf_float+0xbc>
 800f268:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f26a:	3301      	adds	r3, #1
 800f26c:	e7eb      	b.n	800f246 <_printf_float+0x2ca>
 800f26e:	46c0      	nop			; (mov r8, r8)
 800f270:	7fefffff 	.word	0x7fefffff
 800f274:	08013a3c 	.word	0x08013a3c
 800f278:	08013a40 	.word	0x08013a40
 800f27c:	08013a44 	.word	0x08013a44
 800f280:	08013a48 	.word	0x08013a48
 800f284:	08013a4c 	.word	0x08013a4c
 800f288:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f28a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f28c:	920a      	str	r2, [sp, #40]	; 0x28
 800f28e:	429a      	cmp	r2, r3
 800f290:	dd00      	ble.n	800f294 <_printf_float+0x318>
 800f292:	930a      	str	r3, [sp, #40]	; 0x28
 800f294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f296:	2b00      	cmp	r3, #0
 800f298:	dc3c      	bgt.n	800f314 <_printf_float+0x398>
 800f29a:	2300      	movs	r3, #0
 800f29c:	930d      	str	r3, [sp, #52]	; 0x34
 800f29e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2a0:	43db      	mvns	r3, r3
 800f2a2:	17db      	asrs	r3, r3, #31
 800f2a4:	930f      	str	r3, [sp, #60]	; 0x3c
 800f2a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f2a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f2aa:	930b      	str	r3, [sp, #44]	; 0x2c
 800f2ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2ae:	4013      	ands	r3, r2
 800f2b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f2b2:	1ad3      	subs	r3, r2, r3
 800f2b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f2b6:	4293      	cmp	r3, r2
 800f2b8:	dc34      	bgt.n	800f324 <_printf_float+0x3a8>
 800f2ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f2bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f2be:	4293      	cmp	r3, r2
 800f2c0:	db3d      	blt.n	800f33e <_printf_float+0x3c2>
 800f2c2:	6823      	ldr	r3, [r4, #0]
 800f2c4:	07db      	lsls	r3, r3, #31
 800f2c6:	d43a      	bmi.n	800f33e <_printf_float+0x3c2>
 800f2c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f2ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f2cc:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f2ce:	1ad3      	subs	r3, r2, r3
 800f2d0:	1a52      	subs	r2, r2, r1
 800f2d2:	920a      	str	r2, [sp, #40]	; 0x28
 800f2d4:	429a      	cmp	r2, r3
 800f2d6:	dd00      	ble.n	800f2da <_printf_float+0x35e>
 800f2d8:	930a      	str	r3, [sp, #40]	; 0x28
 800f2da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	dc36      	bgt.n	800f34e <_printf_float+0x3d2>
 800f2e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2e2:	2500      	movs	r5, #0
 800f2e4:	43db      	mvns	r3, r3
 800f2e6:	17db      	asrs	r3, r3, #31
 800f2e8:	930b      	str	r3, [sp, #44]	; 0x2c
 800f2ea:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f2ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f2ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f2f0:	1a9b      	subs	r3, r3, r2
 800f2f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f2f4:	400a      	ands	r2, r1
 800f2f6:	1a9b      	subs	r3, r3, r2
 800f2f8:	42ab      	cmp	r3, r5
 800f2fa:	dc00      	bgt.n	800f2fe <_printf_float+0x382>
 800f2fc:	e772      	b.n	800f1e4 <_printf_float+0x268>
 800f2fe:	0022      	movs	r2, r4
 800f300:	2301      	movs	r3, #1
 800f302:	0038      	movs	r0, r7
 800f304:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f306:	321a      	adds	r2, #26
 800f308:	47b0      	blx	r6
 800f30a:	1c43      	adds	r3, r0, #1
 800f30c:	d100      	bne.n	800f310 <_printf_float+0x394>
 800f30e:	e693      	b.n	800f038 <_printf_float+0xbc>
 800f310:	3501      	adds	r5, #1
 800f312:	e7ea      	b.n	800f2ea <_printf_float+0x36e>
 800f314:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f316:	002a      	movs	r2, r5
 800f318:	0038      	movs	r0, r7
 800f31a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f31c:	47b0      	blx	r6
 800f31e:	1c43      	adds	r3, r0, #1
 800f320:	d1bb      	bne.n	800f29a <_printf_float+0x31e>
 800f322:	e689      	b.n	800f038 <_printf_float+0xbc>
 800f324:	0022      	movs	r2, r4
 800f326:	2301      	movs	r3, #1
 800f328:	0038      	movs	r0, r7
 800f32a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f32c:	321a      	adds	r2, #26
 800f32e:	47b0      	blx	r6
 800f330:	1c43      	adds	r3, r0, #1
 800f332:	d100      	bne.n	800f336 <_printf_float+0x3ba>
 800f334:	e680      	b.n	800f038 <_printf_float+0xbc>
 800f336:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f338:	3301      	adds	r3, #1
 800f33a:	930d      	str	r3, [sp, #52]	; 0x34
 800f33c:	e7b3      	b.n	800f2a6 <_printf_float+0x32a>
 800f33e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f340:	0038      	movs	r0, r7
 800f342:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f344:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f346:	47b0      	blx	r6
 800f348:	1c43      	adds	r3, r0, #1
 800f34a:	d1bd      	bne.n	800f2c8 <_printf_float+0x34c>
 800f34c:	e674      	b.n	800f038 <_printf_float+0xbc>
 800f34e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f350:	0038      	movs	r0, r7
 800f352:	18ea      	adds	r2, r5, r3
 800f354:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f356:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f358:	47b0      	blx	r6
 800f35a:	1c43      	adds	r3, r0, #1
 800f35c:	d1c0      	bne.n	800f2e0 <_printf_float+0x364>
 800f35e:	e66b      	b.n	800f038 <_printf_float+0xbc>
 800f360:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f362:	2b01      	cmp	r3, #1
 800f364:	dc02      	bgt.n	800f36c <_printf_float+0x3f0>
 800f366:	2301      	movs	r3, #1
 800f368:	421a      	tst	r2, r3
 800f36a:	d034      	beq.n	800f3d6 <_printf_float+0x45a>
 800f36c:	2301      	movs	r3, #1
 800f36e:	002a      	movs	r2, r5
 800f370:	0038      	movs	r0, r7
 800f372:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f374:	47b0      	blx	r6
 800f376:	1c43      	adds	r3, r0, #1
 800f378:	d100      	bne.n	800f37c <_printf_float+0x400>
 800f37a:	e65d      	b.n	800f038 <_printf_float+0xbc>
 800f37c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f37e:	0038      	movs	r0, r7
 800f380:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f382:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f384:	47b0      	blx	r6
 800f386:	1c43      	adds	r3, r0, #1
 800f388:	d100      	bne.n	800f38c <_printf_float+0x410>
 800f38a:	e655      	b.n	800f038 <_printf_float+0xbc>
 800f38c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800f38e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800f390:	2200      	movs	r2, #0
 800f392:	2300      	movs	r3, #0
 800f394:	f7f1 f85a 	bl	800044c <__aeabi_dcmpeq>
 800f398:	2800      	cmp	r0, #0
 800f39a:	d11a      	bne.n	800f3d2 <_printf_float+0x456>
 800f39c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f39e:	1c6a      	adds	r2, r5, #1
 800f3a0:	3b01      	subs	r3, #1
 800f3a2:	0038      	movs	r0, r7
 800f3a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f3a6:	47b0      	blx	r6
 800f3a8:	1c43      	adds	r3, r0, #1
 800f3aa:	d10e      	bne.n	800f3ca <_printf_float+0x44e>
 800f3ac:	e644      	b.n	800f038 <_printf_float+0xbc>
 800f3ae:	0022      	movs	r2, r4
 800f3b0:	2301      	movs	r3, #1
 800f3b2:	0038      	movs	r0, r7
 800f3b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f3b6:	321a      	adds	r2, #26
 800f3b8:	47b0      	blx	r6
 800f3ba:	1c43      	adds	r3, r0, #1
 800f3bc:	d100      	bne.n	800f3c0 <_printf_float+0x444>
 800f3be:	e63b      	b.n	800f038 <_printf_float+0xbc>
 800f3c0:	3501      	adds	r5, #1
 800f3c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f3c4:	3b01      	subs	r3, #1
 800f3c6:	42ab      	cmp	r3, r5
 800f3c8:	dcf1      	bgt.n	800f3ae <_printf_float+0x432>
 800f3ca:	0022      	movs	r2, r4
 800f3cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f3ce:	3250      	adds	r2, #80	; 0x50
 800f3d0:	e6da      	b.n	800f188 <_printf_float+0x20c>
 800f3d2:	2500      	movs	r5, #0
 800f3d4:	e7f5      	b.n	800f3c2 <_printf_float+0x446>
 800f3d6:	002a      	movs	r2, r5
 800f3d8:	e7e3      	b.n	800f3a2 <_printf_float+0x426>
 800f3da:	0022      	movs	r2, r4
 800f3dc:	2301      	movs	r3, #1
 800f3de:	0038      	movs	r0, r7
 800f3e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f3e2:	3219      	adds	r2, #25
 800f3e4:	47b0      	blx	r6
 800f3e6:	1c43      	adds	r3, r0, #1
 800f3e8:	d100      	bne.n	800f3ec <_printf_float+0x470>
 800f3ea:	e625      	b.n	800f038 <_printf_float+0xbc>
 800f3ec:	3501      	adds	r5, #1
 800f3ee:	68e3      	ldr	r3, [r4, #12]
 800f3f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f3f2:	1a9b      	subs	r3, r3, r2
 800f3f4:	42ab      	cmp	r3, r5
 800f3f6:	dcf0      	bgt.n	800f3da <_printf_float+0x45e>
 800f3f8:	e6f8      	b.n	800f1ec <_printf_float+0x270>
 800f3fa:	2500      	movs	r5, #0
 800f3fc:	e7f7      	b.n	800f3ee <_printf_float+0x472>
 800f3fe:	46c0      	nop			; (mov r8, r8)

0800f400 <_printf_common>:
 800f400:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f402:	0015      	movs	r5, r2
 800f404:	9301      	str	r3, [sp, #4]
 800f406:	688a      	ldr	r2, [r1, #8]
 800f408:	690b      	ldr	r3, [r1, #16]
 800f40a:	000c      	movs	r4, r1
 800f40c:	9000      	str	r0, [sp, #0]
 800f40e:	4293      	cmp	r3, r2
 800f410:	da00      	bge.n	800f414 <_printf_common+0x14>
 800f412:	0013      	movs	r3, r2
 800f414:	0022      	movs	r2, r4
 800f416:	602b      	str	r3, [r5, #0]
 800f418:	3243      	adds	r2, #67	; 0x43
 800f41a:	7812      	ldrb	r2, [r2, #0]
 800f41c:	2a00      	cmp	r2, #0
 800f41e:	d001      	beq.n	800f424 <_printf_common+0x24>
 800f420:	3301      	adds	r3, #1
 800f422:	602b      	str	r3, [r5, #0]
 800f424:	6823      	ldr	r3, [r4, #0]
 800f426:	069b      	lsls	r3, r3, #26
 800f428:	d502      	bpl.n	800f430 <_printf_common+0x30>
 800f42a:	682b      	ldr	r3, [r5, #0]
 800f42c:	3302      	adds	r3, #2
 800f42e:	602b      	str	r3, [r5, #0]
 800f430:	6822      	ldr	r2, [r4, #0]
 800f432:	2306      	movs	r3, #6
 800f434:	0017      	movs	r7, r2
 800f436:	401f      	ands	r7, r3
 800f438:	421a      	tst	r2, r3
 800f43a:	d027      	beq.n	800f48c <_printf_common+0x8c>
 800f43c:	0023      	movs	r3, r4
 800f43e:	3343      	adds	r3, #67	; 0x43
 800f440:	781b      	ldrb	r3, [r3, #0]
 800f442:	1e5a      	subs	r2, r3, #1
 800f444:	4193      	sbcs	r3, r2
 800f446:	6822      	ldr	r2, [r4, #0]
 800f448:	0692      	lsls	r2, r2, #26
 800f44a:	d430      	bmi.n	800f4ae <_printf_common+0xae>
 800f44c:	0022      	movs	r2, r4
 800f44e:	9901      	ldr	r1, [sp, #4]
 800f450:	9800      	ldr	r0, [sp, #0]
 800f452:	9e08      	ldr	r6, [sp, #32]
 800f454:	3243      	adds	r2, #67	; 0x43
 800f456:	47b0      	blx	r6
 800f458:	1c43      	adds	r3, r0, #1
 800f45a:	d025      	beq.n	800f4a8 <_printf_common+0xa8>
 800f45c:	2306      	movs	r3, #6
 800f45e:	6820      	ldr	r0, [r4, #0]
 800f460:	682a      	ldr	r2, [r5, #0]
 800f462:	68e1      	ldr	r1, [r4, #12]
 800f464:	2500      	movs	r5, #0
 800f466:	4003      	ands	r3, r0
 800f468:	2b04      	cmp	r3, #4
 800f46a:	d103      	bne.n	800f474 <_printf_common+0x74>
 800f46c:	1a8d      	subs	r5, r1, r2
 800f46e:	43eb      	mvns	r3, r5
 800f470:	17db      	asrs	r3, r3, #31
 800f472:	401d      	ands	r5, r3
 800f474:	68a3      	ldr	r3, [r4, #8]
 800f476:	6922      	ldr	r2, [r4, #16]
 800f478:	4293      	cmp	r3, r2
 800f47a:	dd01      	ble.n	800f480 <_printf_common+0x80>
 800f47c:	1a9b      	subs	r3, r3, r2
 800f47e:	18ed      	adds	r5, r5, r3
 800f480:	2700      	movs	r7, #0
 800f482:	42bd      	cmp	r5, r7
 800f484:	d120      	bne.n	800f4c8 <_printf_common+0xc8>
 800f486:	2000      	movs	r0, #0
 800f488:	e010      	b.n	800f4ac <_printf_common+0xac>
 800f48a:	3701      	adds	r7, #1
 800f48c:	68e3      	ldr	r3, [r4, #12]
 800f48e:	682a      	ldr	r2, [r5, #0]
 800f490:	1a9b      	subs	r3, r3, r2
 800f492:	42bb      	cmp	r3, r7
 800f494:	ddd2      	ble.n	800f43c <_printf_common+0x3c>
 800f496:	0022      	movs	r2, r4
 800f498:	2301      	movs	r3, #1
 800f49a:	9901      	ldr	r1, [sp, #4]
 800f49c:	9800      	ldr	r0, [sp, #0]
 800f49e:	9e08      	ldr	r6, [sp, #32]
 800f4a0:	3219      	adds	r2, #25
 800f4a2:	47b0      	blx	r6
 800f4a4:	1c43      	adds	r3, r0, #1
 800f4a6:	d1f0      	bne.n	800f48a <_printf_common+0x8a>
 800f4a8:	2001      	movs	r0, #1
 800f4aa:	4240      	negs	r0, r0
 800f4ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f4ae:	2030      	movs	r0, #48	; 0x30
 800f4b0:	18e1      	adds	r1, r4, r3
 800f4b2:	3143      	adds	r1, #67	; 0x43
 800f4b4:	7008      	strb	r0, [r1, #0]
 800f4b6:	0021      	movs	r1, r4
 800f4b8:	1c5a      	adds	r2, r3, #1
 800f4ba:	3145      	adds	r1, #69	; 0x45
 800f4bc:	7809      	ldrb	r1, [r1, #0]
 800f4be:	18a2      	adds	r2, r4, r2
 800f4c0:	3243      	adds	r2, #67	; 0x43
 800f4c2:	3302      	adds	r3, #2
 800f4c4:	7011      	strb	r1, [r2, #0]
 800f4c6:	e7c1      	b.n	800f44c <_printf_common+0x4c>
 800f4c8:	0022      	movs	r2, r4
 800f4ca:	2301      	movs	r3, #1
 800f4cc:	9901      	ldr	r1, [sp, #4]
 800f4ce:	9800      	ldr	r0, [sp, #0]
 800f4d0:	9e08      	ldr	r6, [sp, #32]
 800f4d2:	321a      	adds	r2, #26
 800f4d4:	47b0      	blx	r6
 800f4d6:	1c43      	adds	r3, r0, #1
 800f4d8:	d0e6      	beq.n	800f4a8 <_printf_common+0xa8>
 800f4da:	3701      	adds	r7, #1
 800f4dc:	e7d1      	b.n	800f482 <_printf_common+0x82>
	...

0800f4e0 <_printf_i>:
 800f4e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f4e2:	b08b      	sub	sp, #44	; 0x2c
 800f4e4:	9206      	str	r2, [sp, #24]
 800f4e6:	000a      	movs	r2, r1
 800f4e8:	3243      	adds	r2, #67	; 0x43
 800f4ea:	9307      	str	r3, [sp, #28]
 800f4ec:	9005      	str	r0, [sp, #20]
 800f4ee:	9204      	str	r2, [sp, #16]
 800f4f0:	7e0a      	ldrb	r2, [r1, #24]
 800f4f2:	000c      	movs	r4, r1
 800f4f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f4f6:	2a78      	cmp	r2, #120	; 0x78
 800f4f8:	d807      	bhi.n	800f50a <_printf_i+0x2a>
 800f4fa:	2a62      	cmp	r2, #98	; 0x62
 800f4fc:	d809      	bhi.n	800f512 <_printf_i+0x32>
 800f4fe:	2a00      	cmp	r2, #0
 800f500:	d100      	bne.n	800f504 <_printf_i+0x24>
 800f502:	e0c1      	b.n	800f688 <_printf_i+0x1a8>
 800f504:	2a58      	cmp	r2, #88	; 0x58
 800f506:	d100      	bne.n	800f50a <_printf_i+0x2a>
 800f508:	e08c      	b.n	800f624 <_printf_i+0x144>
 800f50a:	0026      	movs	r6, r4
 800f50c:	3642      	adds	r6, #66	; 0x42
 800f50e:	7032      	strb	r2, [r6, #0]
 800f510:	e022      	b.n	800f558 <_printf_i+0x78>
 800f512:	0010      	movs	r0, r2
 800f514:	3863      	subs	r0, #99	; 0x63
 800f516:	2815      	cmp	r0, #21
 800f518:	d8f7      	bhi.n	800f50a <_printf_i+0x2a>
 800f51a:	f7f0 fe07 	bl	800012c <__gnu_thumb1_case_shi>
 800f51e:	0016      	.short	0x0016
 800f520:	fff6001f 	.word	0xfff6001f
 800f524:	fff6fff6 	.word	0xfff6fff6
 800f528:	001ffff6 	.word	0x001ffff6
 800f52c:	fff6fff6 	.word	0xfff6fff6
 800f530:	fff6fff6 	.word	0xfff6fff6
 800f534:	003600a8 	.word	0x003600a8
 800f538:	fff6009a 	.word	0xfff6009a
 800f53c:	00b9fff6 	.word	0x00b9fff6
 800f540:	0036fff6 	.word	0x0036fff6
 800f544:	fff6fff6 	.word	0xfff6fff6
 800f548:	009e      	.short	0x009e
 800f54a:	0026      	movs	r6, r4
 800f54c:	681a      	ldr	r2, [r3, #0]
 800f54e:	3642      	adds	r6, #66	; 0x42
 800f550:	1d11      	adds	r1, r2, #4
 800f552:	6019      	str	r1, [r3, #0]
 800f554:	6813      	ldr	r3, [r2, #0]
 800f556:	7033      	strb	r3, [r6, #0]
 800f558:	2301      	movs	r3, #1
 800f55a:	e0a7      	b.n	800f6ac <_printf_i+0x1cc>
 800f55c:	6808      	ldr	r0, [r1, #0]
 800f55e:	6819      	ldr	r1, [r3, #0]
 800f560:	1d0a      	adds	r2, r1, #4
 800f562:	0605      	lsls	r5, r0, #24
 800f564:	d50b      	bpl.n	800f57e <_printf_i+0x9e>
 800f566:	680d      	ldr	r5, [r1, #0]
 800f568:	601a      	str	r2, [r3, #0]
 800f56a:	2d00      	cmp	r5, #0
 800f56c:	da03      	bge.n	800f576 <_printf_i+0x96>
 800f56e:	232d      	movs	r3, #45	; 0x2d
 800f570:	9a04      	ldr	r2, [sp, #16]
 800f572:	426d      	negs	r5, r5
 800f574:	7013      	strb	r3, [r2, #0]
 800f576:	4b61      	ldr	r3, [pc, #388]	; (800f6fc <_printf_i+0x21c>)
 800f578:	270a      	movs	r7, #10
 800f57a:	9303      	str	r3, [sp, #12]
 800f57c:	e01b      	b.n	800f5b6 <_printf_i+0xd6>
 800f57e:	680d      	ldr	r5, [r1, #0]
 800f580:	601a      	str	r2, [r3, #0]
 800f582:	0641      	lsls	r1, r0, #25
 800f584:	d5f1      	bpl.n	800f56a <_printf_i+0x8a>
 800f586:	b22d      	sxth	r5, r5
 800f588:	e7ef      	b.n	800f56a <_printf_i+0x8a>
 800f58a:	680d      	ldr	r5, [r1, #0]
 800f58c:	6819      	ldr	r1, [r3, #0]
 800f58e:	1d08      	adds	r0, r1, #4
 800f590:	6018      	str	r0, [r3, #0]
 800f592:	062e      	lsls	r6, r5, #24
 800f594:	d501      	bpl.n	800f59a <_printf_i+0xba>
 800f596:	680d      	ldr	r5, [r1, #0]
 800f598:	e003      	b.n	800f5a2 <_printf_i+0xc2>
 800f59a:	066d      	lsls	r5, r5, #25
 800f59c:	d5fb      	bpl.n	800f596 <_printf_i+0xb6>
 800f59e:	680d      	ldr	r5, [r1, #0]
 800f5a0:	b2ad      	uxth	r5, r5
 800f5a2:	4b56      	ldr	r3, [pc, #344]	; (800f6fc <_printf_i+0x21c>)
 800f5a4:	2708      	movs	r7, #8
 800f5a6:	9303      	str	r3, [sp, #12]
 800f5a8:	2a6f      	cmp	r2, #111	; 0x6f
 800f5aa:	d000      	beq.n	800f5ae <_printf_i+0xce>
 800f5ac:	3702      	adds	r7, #2
 800f5ae:	0023      	movs	r3, r4
 800f5b0:	2200      	movs	r2, #0
 800f5b2:	3343      	adds	r3, #67	; 0x43
 800f5b4:	701a      	strb	r2, [r3, #0]
 800f5b6:	6863      	ldr	r3, [r4, #4]
 800f5b8:	60a3      	str	r3, [r4, #8]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	db03      	blt.n	800f5c6 <_printf_i+0xe6>
 800f5be:	2204      	movs	r2, #4
 800f5c0:	6821      	ldr	r1, [r4, #0]
 800f5c2:	4391      	bics	r1, r2
 800f5c4:	6021      	str	r1, [r4, #0]
 800f5c6:	2d00      	cmp	r5, #0
 800f5c8:	d102      	bne.n	800f5d0 <_printf_i+0xf0>
 800f5ca:	9e04      	ldr	r6, [sp, #16]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d00c      	beq.n	800f5ea <_printf_i+0x10a>
 800f5d0:	9e04      	ldr	r6, [sp, #16]
 800f5d2:	0028      	movs	r0, r5
 800f5d4:	0039      	movs	r1, r7
 800f5d6:	f7f0 fe39 	bl	800024c <__aeabi_uidivmod>
 800f5da:	9b03      	ldr	r3, [sp, #12]
 800f5dc:	3e01      	subs	r6, #1
 800f5de:	5c5b      	ldrb	r3, [r3, r1]
 800f5e0:	7033      	strb	r3, [r6, #0]
 800f5e2:	002b      	movs	r3, r5
 800f5e4:	0005      	movs	r5, r0
 800f5e6:	429f      	cmp	r7, r3
 800f5e8:	d9f3      	bls.n	800f5d2 <_printf_i+0xf2>
 800f5ea:	2f08      	cmp	r7, #8
 800f5ec:	d109      	bne.n	800f602 <_printf_i+0x122>
 800f5ee:	6823      	ldr	r3, [r4, #0]
 800f5f0:	07db      	lsls	r3, r3, #31
 800f5f2:	d506      	bpl.n	800f602 <_printf_i+0x122>
 800f5f4:	6863      	ldr	r3, [r4, #4]
 800f5f6:	6922      	ldr	r2, [r4, #16]
 800f5f8:	4293      	cmp	r3, r2
 800f5fa:	dc02      	bgt.n	800f602 <_printf_i+0x122>
 800f5fc:	2330      	movs	r3, #48	; 0x30
 800f5fe:	3e01      	subs	r6, #1
 800f600:	7033      	strb	r3, [r6, #0]
 800f602:	9b04      	ldr	r3, [sp, #16]
 800f604:	1b9b      	subs	r3, r3, r6
 800f606:	6123      	str	r3, [r4, #16]
 800f608:	9b07      	ldr	r3, [sp, #28]
 800f60a:	0021      	movs	r1, r4
 800f60c:	9300      	str	r3, [sp, #0]
 800f60e:	9805      	ldr	r0, [sp, #20]
 800f610:	9b06      	ldr	r3, [sp, #24]
 800f612:	aa09      	add	r2, sp, #36	; 0x24
 800f614:	f7ff fef4 	bl	800f400 <_printf_common>
 800f618:	1c43      	adds	r3, r0, #1
 800f61a:	d14c      	bne.n	800f6b6 <_printf_i+0x1d6>
 800f61c:	2001      	movs	r0, #1
 800f61e:	4240      	negs	r0, r0
 800f620:	b00b      	add	sp, #44	; 0x2c
 800f622:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f624:	3145      	adds	r1, #69	; 0x45
 800f626:	700a      	strb	r2, [r1, #0]
 800f628:	4a34      	ldr	r2, [pc, #208]	; (800f6fc <_printf_i+0x21c>)
 800f62a:	9203      	str	r2, [sp, #12]
 800f62c:	681a      	ldr	r2, [r3, #0]
 800f62e:	6821      	ldr	r1, [r4, #0]
 800f630:	ca20      	ldmia	r2!, {r5}
 800f632:	601a      	str	r2, [r3, #0]
 800f634:	0608      	lsls	r0, r1, #24
 800f636:	d516      	bpl.n	800f666 <_printf_i+0x186>
 800f638:	07cb      	lsls	r3, r1, #31
 800f63a:	d502      	bpl.n	800f642 <_printf_i+0x162>
 800f63c:	2320      	movs	r3, #32
 800f63e:	4319      	orrs	r1, r3
 800f640:	6021      	str	r1, [r4, #0]
 800f642:	2710      	movs	r7, #16
 800f644:	2d00      	cmp	r5, #0
 800f646:	d1b2      	bne.n	800f5ae <_printf_i+0xce>
 800f648:	2320      	movs	r3, #32
 800f64a:	6822      	ldr	r2, [r4, #0]
 800f64c:	439a      	bics	r2, r3
 800f64e:	6022      	str	r2, [r4, #0]
 800f650:	e7ad      	b.n	800f5ae <_printf_i+0xce>
 800f652:	2220      	movs	r2, #32
 800f654:	6809      	ldr	r1, [r1, #0]
 800f656:	430a      	orrs	r2, r1
 800f658:	6022      	str	r2, [r4, #0]
 800f65a:	0022      	movs	r2, r4
 800f65c:	2178      	movs	r1, #120	; 0x78
 800f65e:	3245      	adds	r2, #69	; 0x45
 800f660:	7011      	strb	r1, [r2, #0]
 800f662:	4a27      	ldr	r2, [pc, #156]	; (800f700 <_printf_i+0x220>)
 800f664:	e7e1      	b.n	800f62a <_printf_i+0x14a>
 800f666:	0648      	lsls	r0, r1, #25
 800f668:	d5e6      	bpl.n	800f638 <_printf_i+0x158>
 800f66a:	b2ad      	uxth	r5, r5
 800f66c:	e7e4      	b.n	800f638 <_printf_i+0x158>
 800f66e:	681a      	ldr	r2, [r3, #0]
 800f670:	680d      	ldr	r5, [r1, #0]
 800f672:	1d10      	adds	r0, r2, #4
 800f674:	6949      	ldr	r1, [r1, #20]
 800f676:	6018      	str	r0, [r3, #0]
 800f678:	6813      	ldr	r3, [r2, #0]
 800f67a:	062e      	lsls	r6, r5, #24
 800f67c:	d501      	bpl.n	800f682 <_printf_i+0x1a2>
 800f67e:	6019      	str	r1, [r3, #0]
 800f680:	e002      	b.n	800f688 <_printf_i+0x1a8>
 800f682:	066d      	lsls	r5, r5, #25
 800f684:	d5fb      	bpl.n	800f67e <_printf_i+0x19e>
 800f686:	8019      	strh	r1, [r3, #0]
 800f688:	2300      	movs	r3, #0
 800f68a:	9e04      	ldr	r6, [sp, #16]
 800f68c:	6123      	str	r3, [r4, #16]
 800f68e:	e7bb      	b.n	800f608 <_printf_i+0x128>
 800f690:	681a      	ldr	r2, [r3, #0]
 800f692:	1d11      	adds	r1, r2, #4
 800f694:	6019      	str	r1, [r3, #0]
 800f696:	6816      	ldr	r6, [r2, #0]
 800f698:	2100      	movs	r1, #0
 800f69a:	0030      	movs	r0, r6
 800f69c:	6862      	ldr	r2, [r4, #4]
 800f69e:	f001 f977 	bl	8010990 <memchr>
 800f6a2:	2800      	cmp	r0, #0
 800f6a4:	d001      	beq.n	800f6aa <_printf_i+0x1ca>
 800f6a6:	1b80      	subs	r0, r0, r6
 800f6a8:	6060      	str	r0, [r4, #4]
 800f6aa:	6863      	ldr	r3, [r4, #4]
 800f6ac:	6123      	str	r3, [r4, #16]
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	9a04      	ldr	r2, [sp, #16]
 800f6b2:	7013      	strb	r3, [r2, #0]
 800f6b4:	e7a8      	b.n	800f608 <_printf_i+0x128>
 800f6b6:	6923      	ldr	r3, [r4, #16]
 800f6b8:	0032      	movs	r2, r6
 800f6ba:	9906      	ldr	r1, [sp, #24]
 800f6bc:	9805      	ldr	r0, [sp, #20]
 800f6be:	9d07      	ldr	r5, [sp, #28]
 800f6c0:	47a8      	blx	r5
 800f6c2:	1c43      	adds	r3, r0, #1
 800f6c4:	d0aa      	beq.n	800f61c <_printf_i+0x13c>
 800f6c6:	6823      	ldr	r3, [r4, #0]
 800f6c8:	079b      	lsls	r3, r3, #30
 800f6ca:	d415      	bmi.n	800f6f8 <_printf_i+0x218>
 800f6cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6ce:	68e0      	ldr	r0, [r4, #12]
 800f6d0:	4298      	cmp	r0, r3
 800f6d2:	daa5      	bge.n	800f620 <_printf_i+0x140>
 800f6d4:	0018      	movs	r0, r3
 800f6d6:	e7a3      	b.n	800f620 <_printf_i+0x140>
 800f6d8:	0022      	movs	r2, r4
 800f6da:	2301      	movs	r3, #1
 800f6dc:	9906      	ldr	r1, [sp, #24]
 800f6de:	9805      	ldr	r0, [sp, #20]
 800f6e0:	9e07      	ldr	r6, [sp, #28]
 800f6e2:	3219      	adds	r2, #25
 800f6e4:	47b0      	blx	r6
 800f6e6:	1c43      	adds	r3, r0, #1
 800f6e8:	d098      	beq.n	800f61c <_printf_i+0x13c>
 800f6ea:	3501      	adds	r5, #1
 800f6ec:	68e3      	ldr	r3, [r4, #12]
 800f6ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f6f0:	1a9b      	subs	r3, r3, r2
 800f6f2:	42ab      	cmp	r3, r5
 800f6f4:	dcf0      	bgt.n	800f6d8 <_printf_i+0x1f8>
 800f6f6:	e7e9      	b.n	800f6cc <_printf_i+0x1ec>
 800f6f8:	2500      	movs	r5, #0
 800f6fa:	e7f7      	b.n	800f6ec <_printf_i+0x20c>
 800f6fc:	08013a4e 	.word	0x08013a4e
 800f700:	08013a5f 	.word	0x08013a5f

0800f704 <cleanup_glue>:
 800f704:	b570      	push	{r4, r5, r6, lr}
 800f706:	000d      	movs	r5, r1
 800f708:	6809      	ldr	r1, [r1, #0]
 800f70a:	0004      	movs	r4, r0
 800f70c:	2900      	cmp	r1, #0
 800f70e:	d001      	beq.n	800f714 <cleanup_glue+0x10>
 800f710:	f7ff fff8 	bl	800f704 <cleanup_glue>
 800f714:	0029      	movs	r1, r5
 800f716:	0020      	movs	r0, r4
 800f718:	f001 fd1e 	bl	8011158 <_free_r>
 800f71c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f720 <_reclaim_reent>:
 800f720:	4b31      	ldr	r3, [pc, #196]	; (800f7e8 <_reclaim_reent+0xc8>)
 800f722:	b570      	push	{r4, r5, r6, lr}
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	0004      	movs	r4, r0
 800f728:	4283      	cmp	r3, r0
 800f72a:	d049      	beq.n	800f7c0 <_reclaim_reent+0xa0>
 800f72c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d00a      	beq.n	800f748 <_reclaim_reent+0x28>
 800f732:	2500      	movs	r5, #0
 800f734:	68db      	ldr	r3, [r3, #12]
 800f736:	42ab      	cmp	r3, r5
 800f738:	d147      	bne.n	800f7ca <_reclaim_reent+0xaa>
 800f73a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f73c:	6819      	ldr	r1, [r3, #0]
 800f73e:	2900      	cmp	r1, #0
 800f740:	d002      	beq.n	800f748 <_reclaim_reent+0x28>
 800f742:	0020      	movs	r0, r4
 800f744:	f001 fd08 	bl	8011158 <_free_r>
 800f748:	6961      	ldr	r1, [r4, #20]
 800f74a:	2900      	cmp	r1, #0
 800f74c:	d002      	beq.n	800f754 <_reclaim_reent+0x34>
 800f74e:	0020      	movs	r0, r4
 800f750:	f001 fd02 	bl	8011158 <_free_r>
 800f754:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f756:	2900      	cmp	r1, #0
 800f758:	d002      	beq.n	800f760 <_reclaim_reent+0x40>
 800f75a:	0020      	movs	r0, r4
 800f75c:	f001 fcfc 	bl	8011158 <_free_r>
 800f760:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f762:	2900      	cmp	r1, #0
 800f764:	d002      	beq.n	800f76c <_reclaim_reent+0x4c>
 800f766:	0020      	movs	r0, r4
 800f768:	f001 fcf6 	bl	8011158 <_free_r>
 800f76c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f76e:	2900      	cmp	r1, #0
 800f770:	d002      	beq.n	800f778 <_reclaim_reent+0x58>
 800f772:	0020      	movs	r0, r4
 800f774:	f001 fcf0 	bl	8011158 <_free_r>
 800f778:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f77a:	2900      	cmp	r1, #0
 800f77c:	d002      	beq.n	800f784 <_reclaim_reent+0x64>
 800f77e:	0020      	movs	r0, r4
 800f780:	f001 fcea 	bl	8011158 <_free_r>
 800f784:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f786:	2900      	cmp	r1, #0
 800f788:	d002      	beq.n	800f790 <_reclaim_reent+0x70>
 800f78a:	0020      	movs	r0, r4
 800f78c:	f001 fce4 	bl	8011158 <_free_r>
 800f790:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f792:	2900      	cmp	r1, #0
 800f794:	d002      	beq.n	800f79c <_reclaim_reent+0x7c>
 800f796:	0020      	movs	r0, r4
 800f798:	f001 fcde 	bl	8011158 <_free_r>
 800f79c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f79e:	2900      	cmp	r1, #0
 800f7a0:	d002      	beq.n	800f7a8 <_reclaim_reent+0x88>
 800f7a2:	0020      	movs	r0, r4
 800f7a4:	f001 fcd8 	bl	8011158 <_free_r>
 800f7a8:	69a3      	ldr	r3, [r4, #24]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d008      	beq.n	800f7c0 <_reclaim_reent+0xa0>
 800f7ae:	0020      	movs	r0, r4
 800f7b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f7b2:	4798      	blx	r3
 800f7b4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f7b6:	2900      	cmp	r1, #0
 800f7b8:	d002      	beq.n	800f7c0 <_reclaim_reent+0xa0>
 800f7ba:	0020      	movs	r0, r4
 800f7bc:	f7ff ffa2 	bl	800f704 <cleanup_glue>
 800f7c0:	bd70      	pop	{r4, r5, r6, pc}
 800f7c2:	5949      	ldr	r1, [r1, r5]
 800f7c4:	2900      	cmp	r1, #0
 800f7c6:	d108      	bne.n	800f7da <_reclaim_reent+0xba>
 800f7c8:	3504      	adds	r5, #4
 800f7ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f7cc:	68d9      	ldr	r1, [r3, #12]
 800f7ce:	2d80      	cmp	r5, #128	; 0x80
 800f7d0:	d1f7      	bne.n	800f7c2 <_reclaim_reent+0xa2>
 800f7d2:	0020      	movs	r0, r4
 800f7d4:	f001 fcc0 	bl	8011158 <_free_r>
 800f7d8:	e7af      	b.n	800f73a <_reclaim_reent+0x1a>
 800f7da:	680e      	ldr	r6, [r1, #0]
 800f7dc:	0020      	movs	r0, r4
 800f7de:	f001 fcbb 	bl	8011158 <_free_r>
 800f7e2:	0031      	movs	r1, r6
 800f7e4:	e7ee      	b.n	800f7c4 <_reclaim_reent+0xa4>
 800f7e6:	46c0      	nop			; (mov r8, r8)
 800f7e8:	20000074 	.word	0x20000074

0800f7ec <_sbrk_r>:
 800f7ec:	2300      	movs	r3, #0
 800f7ee:	b570      	push	{r4, r5, r6, lr}
 800f7f0:	4d06      	ldr	r5, [pc, #24]	; (800f80c <_sbrk_r+0x20>)
 800f7f2:	0004      	movs	r4, r0
 800f7f4:	0008      	movs	r0, r1
 800f7f6:	602b      	str	r3, [r5, #0]
 800f7f8:	f7f4 ffb0 	bl	800475c <_sbrk>
 800f7fc:	1c43      	adds	r3, r0, #1
 800f7fe:	d103      	bne.n	800f808 <_sbrk_r+0x1c>
 800f800:	682b      	ldr	r3, [r5, #0]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d000      	beq.n	800f808 <_sbrk_r+0x1c>
 800f806:	6023      	str	r3, [r4, #0]
 800f808:	bd70      	pop	{r4, r5, r6, pc}
 800f80a:	46c0      	nop			; (mov r8, r8)
 800f80c:	200021a4 	.word	0x200021a4

0800f810 <siprintf>:
 800f810:	b40e      	push	{r1, r2, r3}
 800f812:	b500      	push	{lr}
 800f814:	490b      	ldr	r1, [pc, #44]	; (800f844 <siprintf+0x34>)
 800f816:	b09c      	sub	sp, #112	; 0x70
 800f818:	ab1d      	add	r3, sp, #116	; 0x74
 800f81a:	9002      	str	r0, [sp, #8]
 800f81c:	9006      	str	r0, [sp, #24]
 800f81e:	9107      	str	r1, [sp, #28]
 800f820:	9104      	str	r1, [sp, #16]
 800f822:	4809      	ldr	r0, [pc, #36]	; (800f848 <siprintf+0x38>)
 800f824:	4909      	ldr	r1, [pc, #36]	; (800f84c <siprintf+0x3c>)
 800f826:	cb04      	ldmia	r3!, {r2}
 800f828:	9105      	str	r1, [sp, #20]
 800f82a:	6800      	ldr	r0, [r0, #0]
 800f82c:	a902      	add	r1, sp, #8
 800f82e:	9301      	str	r3, [sp, #4]
 800f830:	f001 fd3e 	bl	80112b0 <_svfiprintf_r>
 800f834:	2300      	movs	r3, #0
 800f836:	9a02      	ldr	r2, [sp, #8]
 800f838:	7013      	strb	r3, [r2, #0]
 800f83a:	b01c      	add	sp, #112	; 0x70
 800f83c:	bc08      	pop	{r3}
 800f83e:	b003      	add	sp, #12
 800f840:	4718      	bx	r3
 800f842:	46c0      	nop			; (mov r8, r8)
 800f844:	7fffffff 	.word	0x7fffffff
 800f848:	20000074 	.word	0x20000074
 800f84c:	ffff0208 	.word	0xffff0208

0800f850 <__sread>:
 800f850:	b570      	push	{r4, r5, r6, lr}
 800f852:	000c      	movs	r4, r1
 800f854:	250e      	movs	r5, #14
 800f856:	5f49      	ldrsh	r1, [r1, r5]
 800f858:	f001 fe2a 	bl	80114b0 <_read_r>
 800f85c:	2800      	cmp	r0, #0
 800f85e:	db03      	blt.n	800f868 <__sread+0x18>
 800f860:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800f862:	181b      	adds	r3, r3, r0
 800f864:	6563      	str	r3, [r4, #84]	; 0x54
 800f866:	bd70      	pop	{r4, r5, r6, pc}
 800f868:	89a3      	ldrh	r3, [r4, #12]
 800f86a:	4a02      	ldr	r2, [pc, #8]	; (800f874 <__sread+0x24>)
 800f86c:	4013      	ands	r3, r2
 800f86e:	81a3      	strh	r3, [r4, #12]
 800f870:	e7f9      	b.n	800f866 <__sread+0x16>
 800f872:	46c0      	nop			; (mov r8, r8)
 800f874:	ffffefff 	.word	0xffffefff

0800f878 <__swrite>:
 800f878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f87a:	001f      	movs	r7, r3
 800f87c:	898b      	ldrh	r3, [r1, #12]
 800f87e:	0005      	movs	r5, r0
 800f880:	000c      	movs	r4, r1
 800f882:	0016      	movs	r6, r2
 800f884:	05db      	lsls	r3, r3, #23
 800f886:	d505      	bpl.n	800f894 <__swrite+0x1c>
 800f888:	230e      	movs	r3, #14
 800f88a:	5ec9      	ldrsh	r1, [r1, r3]
 800f88c:	2200      	movs	r2, #0
 800f88e:	2302      	movs	r3, #2
 800f890:	f001 f860 	bl	8010954 <_lseek_r>
 800f894:	89a3      	ldrh	r3, [r4, #12]
 800f896:	4a05      	ldr	r2, [pc, #20]	; (800f8ac <__swrite+0x34>)
 800f898:	0028      	movs	r0, r5
 800f89a:	4013      	ands	r3, r2
 800f89c:	81a3      	strh	r3, [r4, #12]
 800f89e:	0032      	movs	r2, r6
 800f8a0:	230e      	movs	r3, #14
 800f8a2:	5ee1      	ldrsh	r1, [r4, r3]
 800f8a4:	003b      	movs	r3, r7
 800f8a6:	f000 f8b9 	bl	800fa1c <_write_r>
 800f8aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f8ac:	ffffefff 	.word	0xffffefff

0800f8b0 <__sseek>:
 800f8b0:	b570      	push	{r4, r5, r6, lr}
 800f8b2:	000c      	movs	r4, r1
 800f8b4:	250e      	movs	r5, #14
 800f8b6:	5f49      	ldrsh	r1, [r1, r5]
 800f8b8:	f001 f84c 	bl	8010954 <_lseek_r>
 800f8bc:	89a3      	ldrh	r3, [r4, #12]
 800f8be:	1c42      	adds	r2, r0, #1
 800f8c0:	d103      	bne.n	800f8ca <__sseek+0x1a>
 800f8c2:	4a05      	ldr	r2, [pc, #20]	; (800f8d8 <__sseek+0x28>)
 800f8c4:	4013      	ands	r3, r2
 800f8c6:	81a3      	strh	r3, [r4, #12]
 800f8c8:	bd70      	pop	{r4, r5, r6, pc}
 800f8ca:	2280      	movs	r2, #128	; 0x80
 800f8cc:	0152      	lsls	r2, r2, #5
 800f8ce:	4313      	orrs	r3, r2
 800f8d0:	81a3      	strh	r3, [r4, #12]
 800f8d2:	6560      	str	r0, [r4, #84]	; 0x54
 800f8d4:	e7f8      	b.n	800f8c8 <__sseek+0x18>
 800f8d6:	46c0      	nop			; (mov r8, r8)
 800f8d8:	ffffefff 	.word	0xffffefff

0800f8dc <__sclose>:
 800f8dc:	b510      	push	{r4, lr}
 800f8de:	230e      	movs	r3, #14
 800f8e0:	5ec9      	ldrsh	r1, [r1, r3]
 800f8e2:	f000 f8af 	bl	800fa44 <_close_r>
 800f8e6:	bd10      	pop	{r4, pc}

0800f8e8 <_strtol_l.constprop.0>:
 800f8e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f8ea:	b087      	sub	sp, #28
 800f8ec:	001e      	movs	r6, r3
 800f8ee:	9005      	str	r0, [sp, #20]
 800f8f0:	9101      	str	r1, [sp, #4]
 800f8f2:	9202      	str	r2, [sp, #8]
 800f8f4:	2b01      	cmp	r3, #1
 800f8f6:	d045      	beq.n	800f984 <_strtol_l.constprop.0+0x9c>
 800f8f8:	000b      	movs	r3, r1
 800f8fa:	2e24      	cmp	r6, #36	; 0x24
 800f8fc:	d842      	bhi.n	800f984 <_strtol_l.constprop.0+0x9c>
 800f8fe:	4a3f      	ldr	r2, [pc, #252]	; (800f9fc <_strtol_l.constprop.0+0x114>)
 800f900:	2108      	movs	r1, #8
 800f902:	4694      	mov	ip, r2
 800f904:	001a      	movs	r2, r3
 800f906:	4660      	mov	r0, ip
 800f908:	7814      	ldrb	r4, [r2, #0]
 800f90a:	3301      	adds	r3, #1
 800f90c:	5d00      	ldrb	r0, [r0, r4]
 800f90e:	001d      	movs	r5, r3
 800f910:	0007      	movs	r7, r0
 800f912:	400f      	ands	r7, r1
 800f914:	4208      	tst	r0, r1
 800f916:	d1f5      	bne.n	800f904 <_strtol_l.constprop.0+0x1c>
 800f918:	2c2d      	cmp	r4, #45	; 0x2d
 800f91a:	d13a      	bne.n	800f992 <_strtol_l.constprop.0+0xaa>
 800f91c:	2701      	movs	r7, #1
 800f91e:	781c      	ldrb	r4, [r3, #0]
 800f920:	1c95      	adds	r5, r2, #2
 800f922:	2e00      	cmp	r6, #0
 800f924:	d065      	beq.n	800f9f2 <_strtol_l.constprop.0+0x10a>
 800f926:	2e10      	cmp	r6, #16
 800f928:	d109      	bne.n	800f93e <_strtol_l.constprop.0+0x56>
 800f92a:	2c30      	cmp	r4, #48	; 0x30
 800f92c:	d107      	bne.n	800f93e <_strtol_l.constprop.0+0x56>
 800f92e:	2220      	movs	r2, #32
 800f930:	782b      	ldrb	r3, [r5, #0]
 800f932:	4393      	bics	r3, r2
 800f934:	2b58      	cmp	r3, #88	; 0x58
 800f936:	d157      	bne.n	800f9e8 <_strtol_l.constprop.0+0x100>
 800f938:	2610      	movs	r6, #16
 800f93a:	786c      	ldrb	r4, [r5, #1]
 800f93c:	3502      	adds	r5, #2
 800f93e:	4b30      	ldr	r3, [pc, #192]	; (800fa00 <_strtol_l.constprop.0+0x118>)
 800f940:	0031      	movs	r1, r6
 800f942:	18fb      	adds	r3, r7, r3
 800f944:	0018      	movs	r0, r3
 800f946:	9303      	str	r3, [sp, #12]
 800f948:	f7f0 fc80 	bl	800024c <__aeabi_uidivmod>
 800f94c:	2300      	movs	r3, #0
 800f94e:	2201      	movs	r2, #1
 800f950:	4684      	mov	ip, r0
 800f952:	0018      	movs	r0, r3
 800f954:	9104      	str	r1, [sp, #16]
 800f956:	4252      	negs	r2, r2
 800f958:	0021      	movs	r1, r4
 800f95a:	3930      	subs	r1, #48	; 0x30
 800f95c:	2909      	cmp	r1, #9
 800f95e:	d81d      	bhi.n	800f99c <_strtol_l.constprop.0+0xb4>
 800f960:	000c      	movs	r4, r1
 800f962:	42a6      	cmp	r6, r4
 800f964:	dd28      	ble.n	800f9b8 <_strtol_l.constprop.0+0xd0>
 800f966:	2b00      	cmp	r3, #0
 800f968:	db24      	blt.n	800f9b4 <_strtol_l.constprop.0+0xcc>
 800f96a:	0013      	movs	r3, r2
 800f96c:	4584      	cmp	ip, r0
 800f96e:	d306      	bcc.n	800f97e <_strtol_l.constprop.0+0x96>
 800f970:	d102      	bne.n	800f978 <_strtol_l.constprop.0+0x90>
 800f972:	9904      	ldr	r1, [sp, #16]
 800f974:	42a1      	cmp	r1, r4
 800f976:	db02      	blt.n	800f97e <_strtol_l.constprop.0+0x96>
 800f978:	2301      	movs	r3, #1
 800f97a:	4370      	muls	r0, r6
 800f97c:	1820      	adds	r0, r4, r0
 800f97e:	782c      	ldrb	r4, [r5, #0]
 800f980:	3501      	adds	r5, #1
 800f982:	e7e9      	b.n	800f958 <_strtol_l.constprop.0+0x70>
 800f984:	f7ff f878 	bl	800ea78 <__errno>
 800f988:	2316      	movs	r3, #22
 800f98a:	6003      	str	r3, [r0, #0]
 800f98c:	2000      	movs	r0, #0
 800f98e:	b007      	add	sp, #28
 800f990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f992:	2c2b      	cmp	r4, #43	; 0x2b
 800f994:	d1c5      	bne.n	800f922 <_strtol_l.constprop.0+0x3a>
 800f996:	781c      	ldrb	r4, [r3, #0]
 800f998:	1c95      	adds	r5, r2, #2
 800f99a:	e7c2      	b.n	800f922 <_strtol_l.constprop.0+0x3a>
 800f99c:	0021      	movs	r1, r4
 800f99e:	3941      	subs	r1, #65	; 0x41
 800f9a0:	2919      	cmp	r1, #25
 800f9a2:	d801      	bhi.n	800f9a8 <_strtol_l.constprop.0+0xc0>
 800f9a4:	3c37      	subs	r4, #55	; 0x37
 800f9a6:	e7dc      	b.n	800f962 <_strtol_l.constprop.0+0x7a>
 800f9a8:	0021      	movs	r1, r4
 800f9aa:	3961      	subs	r1, #97	; 0x61
 800f9ac:	2919      	cmp	r1, #25
 800f9ae:	d803      	bhi.n	800f9b8 <_strtol_l.constprop.0+0xd0>
 800f9b0:	3c57      	subs	r4, #87	; 0x57
 800f9b2:	e7d6      	b.n	800f962 <_strtol_l.constprop.0+0x7a>
 800f9b4:	0013      	movs	r3, r2
 800f9b6:	e7e2      	b.n	800f97e <_strtol_l.constprop.0+0x96>
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	da09      	bge.n	800f9d0 <_strtol_l.constprop.0+0xe8>
 800f9bc:	2322      	movs	r3, #34	; 0x22
 800f9be:	9a05      	ldr	r2, [sp, #20]
 800f9c0:	9803      	ldr	r0, [sp, #12]
 800f9c2:	6013      	str	r3, [r2, #0]
 800f9c4:	9b02      	ldr	r3, [sp, #8]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d0e1      	beq.n	800f98e <_strtol_l.constprop.0+0xa6>
 800f9ca:	1e6b      	subs	r3, r5, #1
 800f9cc:	9301      	str	r3, [sp, #4]
 800f9ce:	e007      	b.n	800f9e0 <_strtol_l.constprop.0+0xf8>
 800f9d0:	2f00      	cmp	r7, #0
 800f9d2:	d000      	beq.n	800f9d6 <_strtol_l.constprop.0+0xee>
 800f9d4:	4240      	negs	r0, r0
 800f9d6:	9a02      	ldr	r2, [sp, #8]
 800f9d8:	2a00      	cmp	r2, #0
 800f9da:	d0d8      	beq.n	800f98e <_strtol_l.constprop.0+0xa6>
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d1f4      	bne.n	800f9ca <_strtol_l.constprop.0+0xe2>
 800f9e0:	9b02      	ldr	r3, [sp, #8]
 800f9e2:	9a01      	ldr	r2, [sp, #4]
 800f9e4:	601a      	str	r2, [r3, #0]
 800f9e6:	e7d2      	b.n	800f98e <_strtol_l.constprop.0+0xa6>
 800f9e8:	2430      	movs	r4, #48	; 0x30
 800f9ea:	2e00      	cmp	r6, #0
 800f9ec:	d1a7      	bne.n	800f93e <_strtol_l.constprop.0+0x56>
 800f9ee:	3608      	adds	r6, #8
 800f9f0:	e7a5      	b.n	800f93e <_strtol_l.constprop.0+0x56>
 800f9f2:	2c30      	cmp	r4, #48	; 0x30
 800f9f4:	d09b      	beq.n	800f92e <_strtol_l.constprop.0+0x46>
 800f9f6:	260a      	movs	r6, #10
 800f9f8:	e7a1      	b.n	800f93e <_strtol_l.constprop.0+0x56>
 800f9fa:	46c0      	nop			; (mov r8, r8)
 800f9fc:	08013a71 	.word	0x08013a71
 800fa00:	7fffffff 	.word	0x7fffffff

0800fa04 <strtol>:
 800fa04:	b510      	push	{r4, lr}
 800fa06:	0013      	movs	r3, r2
 800fa08:	000a      	movs	r2, r1
 800fa0a:	0001      	movs	r1, r0
 800fa0c:	4802      	ldr	r0, [pc, #8]	; (800fa18 <strtol+0x14>)
 800fa0e:	6800      	ldr	r0, [r0, #0]
 800fa10:	f7ff ff6a 	bl	800f8e8 <_strtol_l.constprop.0>
 800fa14:	bd10      	pop	{r4, pc}
 800fa16:	46c0      	nop			; (mov r8, r8)
 800fa18:	20000074 	.word	0x20000074

0800fa1c <_write_r>:
 800fa1c:	b570      	push	{r4, r5, r6, lr}
 800fa1e:	0004      	movs	r4, r0
 800fa20:	0008      	movs	r0, r1
 800fa22:	0011      	movs	r1, r2
 800fa24:	001a      	movs	r2, r3
 800fa26:	2300      	movs	r3, #0
 800fa28:	4d05      	ldr	r5, [pc, #20]	; (800fa40 <_write_r+0x24>)
 800fa2a:	602b      	str	r3, [r5, #0]
 800fa2c:	f7f4 fe4d 	bl	80046ca <_write>
 800fa30:	1c43      	adds	r3, r0, #1
 800fa32:	d103      	bne.n	800fa3c <_write_r+0x20>
 800fa34:	682b      	ldr	r3, [r5, #0]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d000      	beq.n	800fa3c <_write_r+0x20>
 800fa3a:	6023      	str	r3, [r4, #0]
 800fa3c:	bd70      	pop	{r4, r5, r6, pc}
 800fa3e:	46c0      	nop			; (mov r8, r8)
 800fa40:	200021a4 	.word	0x200021a4

0800fa44 <_close_r>:
 800fa44:	2300      	movs	r3, #0
 800fa46:	b570      	push	{r4, r5, r6, lr}
 800fa48:	4d06      	ldr	r5, [pc, #24]	; (800fa64 <_close_r+0x20>)
 800fa4a:	0004      	movs	r4, r0
 800fa4c:	0008      	movs	r0, r1
 800fa4e:	602b      	str	r3, [r5, #0]
 800fa50:	f7f4 fe57 	bl	8004702 <_close>
 800fa54:	1c43      	adds	r3, r0, #1
 800fa56:	d103      	bne.n	800fa60 <_close_r+0x1c>
 800fa58:	682b      	ldr	r3, [r5, #0]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d000      	beq.n	800fa60 <_close_r+0x1c>
 800fa5e:	6023      	str	r3, [r4, #0]
 800fa60:	bd70      	pop	{r4, r5, r6, pc}
 800fa62:	46c0      	nop			; (mov r8, r8)
 800fa64:	200021a4 	.word	0x200021a4

0800fa68 <quorem>:
 800fa68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa6a:	0006      	movs	r6, r0
 800fa6c:	690b      	ldr	r3, [r1, #16]
 800fa6e:	6932      	ldr	r2, [r6, #16]
 800fa70:	b087      	sub	sp, #28
 800fa72:	2000      	movs	r0, #0
 800fa74:	9103      	str	r1, [sp, #12]
 800fa76:	429a      	cmp	r2, r3
 800fa78:	db65      	blt.n	800fb46 <quorem+0xde>
 800fa7a:	3b01      	subs	r3, #1
 800fa7c:	009c      	lsls	r4, r3, #2
 800fa7e:	9300      	str	r3, [sp, #0]
 800fa80:	000b      	movs	r3, r1
 800fa82:	3314      	adds	r3, #20
 800fa84:	9305      	str	r3, [sp, #20]
 800fa86:	191b      	adds	r3, r3, r4
 800fa88:	9304      	str	r3, [sp, #16]
 800fa8a:	0033      	movs	r3, r6
 800fa8c:	3314      	adds	r3, #20
 800fa8e:	9302      	str	r3, [sp, #8]
 800fa90:	191c      	adds	r4, r3, r4
 800fa92:	9b04      	ldr	r3, [sp, #16]
 800fa94:	6827      	ldr	r7, [r4, #0]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	0038      	movs	r0, r7
 800fa9a:	1c5d      	adds	r5, r3, #1
 800fa9c:	0029      	movs	r1, r5
 800fa9e:	9301      	str	r3, [sp, #4]
 800faa0:	f7f0 fb4e 	bl	8000140 <__udivsi3>
 800faa4:	9001      	str	r0, [sp, #4]
 800faa6:	42af      	cmp	r7, r5
 800faa8:	d324      	bcc.n	800faf4 <quorem+0x8c>
 800faaa:	2500      	movs	r5, #0
 800faac:	46ac      	mov	ip, r5
 800faae:	9802      	ldr	r0, [sp, #8]
 800fab0:	9f05      	ldr	r7, [sp, #20]
 800fab2:	cf08      	ldmia	r7!, {r3}
 800fab4:	9a01      	ldr	r2, [sp, #4]
 800fab6:	b299      	uxth	r1, r3
 800fab8:	4351      	muls	r1, r2
 800faba:	0c1b      	lsrs	r3, r3, #16
 800fabc:	4353      	muls	r3, r2
 800fabe:	1949      	adds	r1, r1, r5
 800fac0:	0c0a      	lsrs	r2, r1, #16
 800fac2:	189b      	adds	r3, r3, r2
 800fac4:	6802      	ldr	r2, [r0, #0]
 800fac6:	b289      	uxth	r1, r1
 800fac8:	b292      	uxth	r2, r2
 800faca:	4462      	add	r2, ip
 800facc:	1a52      	subs	r2, r2, r1
 800face:	6801      	ldr	r1, [r0, #0]
 800fad0:	0c1d      	lsrs	r5, r3, #16
 800fad2:	0c09      	lsrs	r1, r1, #16
 800fad4:	b29b      	uxth	r3, r3
 800fad6:	1acb      	subs	r3, r1, r3
 800fad8:	1411      	asrs	r1, r2, #16
 800fada:	185b      	adds	r3, r3, r1
 800fadc:	1419      	asrs	r1, r3, #16
 800fade:	b292      	uxth	r2, r2
 800fae0:	041b      	lsls	r3, r3, #16
 800fae2:	431a      	orrs	r2, r3
 800fae4:	9b04      	ldr	r3, [sp, #16]
 800fae6:	468c      	mov	ip, r1
 800fae8:	c004      	stmia	r0!, {r2}
 800faea:	42bb      	cmp	r3, r7
 800faec:	d2e1      	bcs.n	800fab2 <quorem+0x4a>
 800faee:	6823      	ldr	r3, [r4, #0]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d030      	beq.n	800fb56 <quorem+0xee>
 800faf4:	0030      	movs	r0, r6
 800faf6:	9903      	ldr	r1, [sp, #12]
 800faf8:	f001 f9ea 	bl	8010ed0 <__mcmp>
 800fafc:	2800      	cmp	r0, #0
 800fafe:	db21      	blt.n	800fb44 <quorem+0xdc>
 800fb00:	0030      	movs	r0, r6
 800fb02:	2400      	movs	r4, #0
 800fb04:	9b01      	ldr	r3, [sp, #4]
 800fb06:	9903      	ldr	r1, [sp, #12]
 800fb08:	3301      	adds	r3, #1
 800fb0a:	9301      	str	r3, [sp, #4]
 800fb0c:	3014      	adds	r0, #20
 800fb0e:	3114      	adds	r1, #20
 800fb10:	6803      	ldr	r3, [r0, #0]
 800fb12:	c920      	ldmia	r1!, {r5}
 800fb14:	b29a      	uxth	r2, r3
 800fb16:	1914      	adds	r4, r2, r4
 800fb18:	b2aa      	uxth	r2, r5
 800fb1a:	1aa2      	subs	r2, r4, r2
 800fb1c:	0c1b      	lsrs	r3, r3, #16
 800fb1e:	0c2d      	lsrs	r5, r5, #16
 800fb20:	1414      	asrs	r4, r2, #16
 800fb22:	1b5b      	subs	r3, r3, r5
 800fb24:	191b      	adds	r3, r3, r4
 800fb26:	141c      	asrs	r4, r3, #16
 800fb28:	b292      	uxth	r2, r2
 800fb2a:	041b      	lsls	r3, r3, #16
 800fb2c:	4313      	orrs	r3, r2
 800fb2e:	c008      	stmia	r0!, {r3}
 800fb30:	9b04      	ldr	r3, [sp, #16]
 800fb32:	428b      	cmp	r3, r1
 800fb34:	d2ec      	bcs.n	800fb10 <quorem+0xa8>
 800fb36:	9b00      	ldr	r3, [sp, #0]
 800fb38:	9a02      	ldr	r2, [sp, #8]
 800fb3a:	009b      	lsls	r3, r3, #2
 800fb3c:	18d3      	adds	r3, r2, r3
 800fb3e:	681a      	ldr	r2, [r3, #0]
 800fb40:	2a00      	cmp	r2, #0
 800fb42:	d015      	beq.n	800fb70 <quorem+0x108>
 800fb44:	9801      	ldr	r0, [sp, #4]
 800fb46:	b007      	add	sp, #28
 800fb48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb4a:	6823      	ldr	r3, [r4, #0]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d106      	bne.n	800fb5e <quorem+0xf6>
 800fb50:	9b00      	ldr	r3, [sp, #0]
 800fb52:	3b01      	subs	r3, #1
 800fb54:	9300      	str	r3, [sp, #0]
 800fb56:	9b02      	ldr	r3, [sp, #8]
 800fb58:	3c04      	subs	r4, #4
 800fb5a:	42a3      	cmp	r3, r4
 800fb5c:	d3f5      	bcc.n	800fb4a <quorem+0xe2>
 800fb5e:	9b00      	ldr	r3, [sp, #0]
 800fb60:	6133      	str	r3, [r6, #16]
 800fb62:	e7c7      	b.n	800faf4 <quorem+0x8c>
 800fb64:	681a      	ldr	r2, [r3, #0]
 800fb66:	2a00      	cmp	r2, #0
 800fb68:	d106      	bne.n	800fb78 <quorem+0x110>
 800fb6a:	9a00      	ldr	r2, [sp, #0]
 800fb6c:	3a01      	subs	r2, #1
 800fb6e:	9200      	str	r2, [sp, #0]
 800fb70:	9a02      	ldr	r2, [sp, #8]
 800fb72:	3b04      	subs	r3, #4
 800fb74:	429a      	cmp	r2, r3
 800fb76:	d3f5      	bcc.n	800fb64 <quorem+0xfc>
 800fb78:	9b00      	ldr	r3, [sp, #0]
 800fb7a:	6133      	str	r3, [r6, #16]
 800fb7c:	e7e2      	b.n	800fb44 <quorem+0xdc>
	...

0800fb80 <_dtoa_r>:
 800fb80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb82:	b09d      	sub	sp, #116	; 0x74
 800fb84:	9202      	str	r2, [sp, #8]
 800fb86:	9303      	str	r3, [sp, #12]
 800fb88:	9b02      	ldr	r3, [sp, #8]
 800fb8a:	9c03      	ldr	r4, [sp, #12]
 800fb8c:	9308      	str	r3, [sp, #32]
 800fb8e:	9409      	str	r4, [sp, #36]	; 0x24
 800fb90:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800fb92:	0007      	movs	r7, r0
 800fb94:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800fb96:	2c00      	cmp	r4, #0
 800fb98:	d10e      	bne.n	800fbb8 <_dtoa_r+0x38>
 800fb9a:	2010      	movs	r0, #16
 800fb9c:	f000 feee 	bl	801097c <malloc>
 800fba0:	1e02      	subs	r2, r0, #0
 800fba2:	6278      	str	r0, [r7, #36]	; 0x24
 800fba4:	d104      	bne.n	800fbb0 <_dtoa_r+0x30>
 800fba6:	21ea      	movs	r1, #234	; 0xea
 800fba8:	4bc7      	ldr	r3, [pc, #796]	; (800fec8 <_dtoa_r+0x348>)
 800fbaa:	48c8      	ldr	r0, [pc, #800]	; (800fecc <_dtoa_r+0x34c>)
 800fbac:	f001 fd62 	bl	8011674 <__assert_func>
 800fbb0:	6044      	str	r4, [r0, #4]
 800fbb2:	6084      	str	r4, [r0, #8]
 800fbb4:	6004      	str	r4, [r0, #0]
 800fbb6:	60c4      	str	r4, [r0, #12]
 800fbb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbba:	6819      	ldr	r1, [r3, #0]
 800fbbc:	2900      	cmp	r1, #0
 800fbbe:	d00a      	beq.n	800fbd6 <_dtoa_r+0x56>
 800fbc0:	685a      	ldr	r2, [r3, #4]
 800fbc2:	2301      	movs	r3, #1
 800fbc4:	4093      	lsls	r3, r2
 800fbc6:	604a      	str	r2, [r1, #4]
 800fbc8:	608b      	str	r3, [r1, #8]
 800fbca:	0038      	movs	r0, r7
 800fbcc:	f000 ff40 	bl	8010a50 <_Bfree>
 800fbd0:	2200      	movs	r2, #0
 800fbd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbd4:	601a      	str	r2, [r3, #0]
 800fbd6:	9b03      	ldr	r3, [sp, #12]
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	da20      	bge.n	800fc1e <_dtoa_r+0x9e>
 800fbdc:	2301      	movs	r3, #1
 800fbde:	602b      	str	r3, [r5, #0]
 800fbe0:	9b03      	ldr	r3, [sp, #12]
 800fbe2:	005b      	lsls	r3, r3, #1
 800fbe4:	085b      	lsrs	r3, r3, #1
 800fbe6:	9309      	str	r3, [sp, #36]	; 0x24
 800fbe8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800fbea:	4bb9      	ldr	r3, [pc, #740]	; (800fed0 <_dtoa_r+0x350>)
 800fbec:	4ab8      	ldr	r2, [pc, #736]	; (800fed0 <_dtoa_r+0x350>)
 800fbee:	402b      	ands	r3, r5
 800fbf0:	4293      	cmp	r3, r2
 800fbf2:	d117      	bne.n	800fc24 <_dtoa_r+0xa4>
 800fbf4:	4bb7      	ldr	r3, [pc, #732]	; (800fed4 <_dtoa_r+0x354>)
 800fbf6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800fbf8:	0328      	lsls	r0, r5, #12
 800fbfa:	6013      	str	r3, [r2, #0]
 800fbfc:	9b02      	ldr	r3, [sp, #8]
 800fbfe:	0b00      	lsrs	r0, r0, #12
 800fc00:	4318      	orrs	r0, r3
 800fc02:	d101      	bne.n	800fc08 <_dtoa_r+0x88>
 800fc04:	f000 fdbf 	bl	8010786 <_dtoa_r+0xc06>
 800fc08:	48b3      	ldr	r0, [pc, #716]	; (800fed8 <_dtoa_r+0x358>)
 800fc0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800fc0c:	9006      	str	r0, [sp, #24]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d002      	beq.n	800fc18 <_dtoa_r+0x98>
 800fc12:	4bb2      	ldr	r3, [pc, #712]	; (800fedc <_dtoa_r+0x35c>)
 800fc14:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800fc16:	6013      	str	r3, [r2, #0]
 800fc18:	9806      	ldr	r0, [sp, #24]
 800fc1a:	b01d      	add	sp, #116	; 0x74
 800fc1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc1e:	2300      	movs	r3, #0
 800fc20:	602b      	str	r3, [r5, #0]
 800fc22:	e7e1      	b.n	800fbe8 <_dtoa_r+0x68>
 800fc24:	9b08      	ldr	r3, [sp, #32]
 800fc26:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800fc28:	9312      	str	r3, [sp, #72]	; 0x48
 800fc2a:	9413      	str	r4, [sp, #76]	; 0x4c
 800fc2c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800fc2e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800fc30:	2200      	movs	r2, #0
 800fc32:	2300      	movs	r3, #0
 800fc34:	f7f0 fc0a 	bl	800044c <__aeabi_dcmpeq>
 800fc38:	1e04      	subs	r4, r0, #0
 800fc3a:	d009      	beq.n	800fc50 <_dtoa_r+0xd0>
 800fc3c:	2301      	movs	r3, #1
 800fc3e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800fc40:	6013      	str	r3, [r2, #0]
 800fc42:	4ba7      	ldr	r3, [pc, #668]	; (800fee0 <_dtoa_r+0x360>)
 800fc44:	9306      	str	r3, [sp, #24]
 800fc46:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d0e5      	beq.n	800fc18 <_dtoa_r+0x98>
 800fc4c:	4ba5      	ldr	r3, [pc, #660]	; (800fee4 <_dtoa_r+0x364>)
 800fc4e:	e7e1      	b.n	800fc14 <_dtoa_r+0x94>
 800fc50:	ab1a      	add	r3, sp, #104	; 0x68
 800fc52:	9301      	str	r3, [sp, #4]
 800fc54:	ab1b      	add	r3, sp, #108	; 0x6c
 800fc56:	9300      	str	r3, [sp, #0]
 800fc58:	0038      	movs	r0, r7
 800fc5a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fc5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fc5e:	f001 f9eb 	bl	8011038 <__d2b>
 800fc62:	006e      	lsls	r6, r5, #1
 800fc64:	9005      	str	r0, [sp, #20]
 800fc66:	0d76      	lsrs	r6, r6, #21
 800fc68:	d100      	bne.n	800fc6c <_dtoa_r+0xec>
 800fc6a:	e07c      	b.n	800fd66 <_dtoa_r+0x1e6>
 800fc6c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800fc6e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800fc70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fc72:	4a9d      	ldr	r2, [pc, #628]	; (800fee8 <_dtoa_r+0x368>)
 800fc74:	031b      	lsls	r3, r3, #12
 800fc76:	0b1b      	lsrs	r3, r3, #12
 800fc78:	431a      	orrs	r2, r3
 800fc7a:	0011      	movs	r1, r2
 800fc7c:	4b9b      	ldr	r3, [pc, #620]	; (800feec <_dtoa_r+0x36c>)
 800fc7e:	9418      	str	r4, [sp, #96]	; 0x60
 800fc80:	18f6      	adds	r6, r6, r3
 800fc82:	2200      	movs	r2, #0
 800fc84:	4b9a      	ldr	r3, [pc, #616]	; (800fef0 <_dtoa_r+0x370>)
 800fc86:	f7f2 fa2b 	bl	80020e0 <__aeabi_dsub>
 800fc8a:	4a9a      	ldr	r2, [pc, #616]	; (800fef4 <_dtoa_r+0x374>)
 800fc8c:	4b9a      	ldr	r3, [pc, #616]	; (800fef8 <_dtoa_r+0x378>)
 800fc8e:	f7f1 ffbb 	bl	8001c08 <__aeabi_dmul>
 800fc92:	4a9a      	ldr	r2, [pc, #616]	; (800fefc <_dtoa_r+0x37c>)
 800fc94:	4b9a      	ldr	r3, [pc, #616]	; (800ff00 <_dtoa_r+0x380>)
 800fc96:	f7f1 f879 	bl	8000d8c <__aeabi_dadd>
 800fc9a:	0004      	movs	r4, r0
 800fc9c:	0030      	movs	r0, r6
 800fc9e:	000d      	movs	r5, r1
 800fca0:	f7f2 fe04 	bl	80028ac <__aeabi_i2d>
 800fca4:	4a97      	ldr	r2, [pc, #604]	; (800ff04 <_dtoa_r+0x384>)
 800fca6:	4b98      	ldr	r3, [pc, #608]	; (800ff08 <_dtoa_r+0x388>)
 800fca8:	f7f1 ffae 	bl	8001c08 <__aeabi_dmul>
 800fcac:	0002      	movs	r2, r0
 800fcae:	000b      	movs	r3, r1
 800fcb0:	0020      	movs	r0, r4
 800fcb2:	0029      	movs	r1, r5
 800fcb4:	f7f1 f86a 	bl	8000d8c <__aeabi_dadd>
 800fcb8:	0004      	movs	r4, r0
 800fcba:	000d      	movs	r5, r1
 800fcbc:	f7f2 fdc0 	bl	8002840 <__aeabi_d2iz>
 800fcc0:	2200      	movs	r2, #0
 800fcc2:	9002      	str	r0, [sp, #8]
 800fcc4:	2300      	movs	r3, #0
 800fcc6:	0020      	movs	r0, r4
 800fcc8:	0029      	movs	r1, r5
 800fcca:	f7f0 fbc5 	bl	8000458 <__aeabi_dcmplt>
 800fcce:	2800      	cmp	r0, #0
 800fcd0:	d00b      	beq.n	800fcea <_dtoa_r+0x16a>
 800fcd2:	9802      	ldr	r0, [sp, #8]
 800fcd4:	f7f2 fdea 	bl	80028ac <__aeabi_i2d>
 800fcd8:	002b      	movs	r3, r5
 800fcda:	0022      	movs	r2, r4
 800fcdc:	f7f0 fbb6 	bl	800044c <__aeabi_dcmpeq>
 800fce0:	4243      	negs	r3, r0
 800fce2:	4158      	adcs	r0, r3
 800fce4:	9b02      	ldr	r3, [sp, #8]
 800fce6:	1a1b      	subs	r3, r3, r0
 800fce8:	9302      	str	r3, [sp, #8]
 800fcea:	2301      	movs	r3, #1
 800fcec:	9316      	str	r3, [sp, #88]	; 0x58
 800fcee:	9b02      	ldr	r3, [sp, #8]
 800fcf0:	2b16      	cmp	r3, #22
 800fcf2:	d80f      	bhi.n	800fd14 <_dtoa_r+0x194>
 800fcf4:	9812      	ldr	r0, [sp, #72]	; 0x48
 800fcf6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800fcf8:	00da      	lsls	r2, r3, #3
 800fcfa:	4b84      	ldr	r3, [pc, #528]	; (800ff0c <_dtoa_r+0x38c>)
 800fcfc:	189b      	adds	r3, r3, r2
 800fcfe:	681a      	ldr	r2, [r3, #0]
 800fd00:	685b      	ldr	r3, [r3, #4]
 800fd02:	f7f0 fba9 	bl	8000458 <__aeabi_dcmplt>
 800fd06:	2800      	cmp	r0, #0
 800fd08:	d049      	beq.n	800fd9e <_dtoa_r+0x21e>
 800fd0a:	9b02      	ldr	r3, [sp, #8]
 800fd0c:	3b01      	subs	r3, #1
 800fd0e:	9302      	str	r3, [sp, #8]
 800fd10:	2300      	movs	r3, #0
 800fd12:	9316      	str	r3, [sp, #88]	; 0x58
 800fd14:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800fd16:	1b9e      	subs	r6, r3, r6
 800fd18:	2300      	movs	r3, #0
 800fd1a:	930a      	str	r3, [sp, #40]	; 0x28
 800fd1c:	0033      	movs	r3, r6
 800fd1e:	3b01      	subs	r3, #1
 800fd20:	930d      	str	r3, [sp, #52]	; 0x34
 800fd22:	d504      	bpl.n	800fd2e <_dtoa_r+0x1ae>
 800fd24:	2301      	movs	r3, #1
 800fd26:	1b9b      	subs	r3, r3, r6
 800fd28:	930a      	str	r3, [sp, #40]	; 0x28
 800fd2a:	2300      	movs	r3, #0
 800fd2c:	930d      	str	r3, [sp, #52]	; 0x34
 800fd2e:	9b02      	ldr	r3, [sp, #8]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	db36      	blt.n	800fda2 <_dtoa_r+0x222>
 800fd34:	9a02      	ldr	r2, [sp, #8]
 800fd36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fd38:	4694      	mov	ip, r2
 800fd3a:	4463      	add	r3, ip
 800fd3c:	930d      	str	r3, [sp, #52]	; 0x34
 800fd3e:	2300      	movs	r3, #0
 800fd40:	9215      	str	r2, [sp, #84]	; 0x54
 800fd42:	930e      	str	r3, [sp, #56]	; 0x38
 800fd44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fd46:	2401      	movs	r4, #1
 800fd48:	2b09      	cmp	r3, #9
 800fd4a:	d864      	bhi.n	800fe16 <_dtoa_r+0x296>
 800fd4c:	2b05      	cmp	r3, #5
 800fd4e:	dd02      	ble.n	800fd56 <_dtoa_r+0x1d6>
 800fd50:	2400      	movs	r4, #0
 800fd52:	3b04      	subs	r3, #4
 800fd54:	9322      	str	r3, [sp, #136]	; 0x88
 800fd56:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fd58:	1e98      	subs	r0, r3, #2
 800fd5a:	2803      	cmp	r0, #3
 800fd5c:	d864      	bhi.n	800fe28 <_dtoa_r+0x2a8>
 800fd5e:	f7f0 f9db 	bl	8000118 <__gnu_thumb1_case_uqi>
 800fd62:	3829      	.short	0x3829
 800fd64:	5836      	.short	0x5836
 800fd66:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800fd68:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800fd6a:	189e      	adds	r6, r3, r2
 800fd6c:	4b68      	ldr	r3, [pc, #416]	; (800ff10 <_dtoa_r+0x390>)
 800fd6e:	18f2      	adds	r2, r6, r3
 800fd70:	2a20      	cmp	r2, #32
 800fd72:	dd0f      	ble.n	800fd94 <_dtoa_r+0x214>
 800fd74:	2340      	movs	r3, #64	; 0x40
 800fd76:	1a9b      	subs	r3, r3, r2
 800fd78:	409d      	lsls	r5, r3
 800fd7a:	4b66      	ldr	r3, [pc, #408]	; (800ff14 <_dtoa_r+0x394>)
 800fd7c:	9802      	ldr	r0, [sp, #8]
 800fd7e:	18f3      	adds	r3, r6, r3
 800fd80:	40d8      	lsrs	r0, r3
 800fd82:	4328      	orrs	r0, r5
 800fd84:	f7f2 fdc2 	bl	800290c <__aeabi_ui2d>
 800fd88:	2301      	movs	r3, #1
 800fd8a:	4c63      	ldr	r4, [pc, #396]	; (800ff18 <_dtoa_r+0x398>)
 800fd8c:	3e01      	subs	r6, #1
 800fd8e:	1909      	adds	r1, r1, r4
 800fd90:	9318      	str	r3, [sp, #96]	; 0x60
 800fd92:	e776      	b.n	800fc82 <_dtoa_r+0x102>
 800fd94:	2320      	movs	r3, #32
 800fd96:	9802      	ldr	r0, [sp, #8]
 800fd98:	1a9b      	subs	r3, r3, r2
 800fd9a:	4098      	lsls	r0, r3
 800fd9c:	e7f2      	b.n	800fd84 <_dtoa_r+0x204>
 800fd9e:	9016      	str	r0, [sp, #88]	; 0x58
 800fda0:	e7b8      	b.n	800fd14 <_dtoa_r+0x194>
 800fda2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fda4:	9a02      	ldr	r2, [sp, #8]
 800fda6:	1a9b      	subs	r3, r3, r2
 800fda8:	930a      	str	r3, [sp, #40]	; 0x28
 800fdaa:	4253      	negs	r3, r2
 800fdac:	930e      	str	r3, [sp, #56]	; 0x38
 800fdae:	2300      	movs	r3, #0
 800fdb0:	9315      	str	r3, [sp, #84]	; 0x54
 800fdb2:	e7c7      	b.n	800fd44 <_dtoa_r+0x1c4>
 800fdb4:	2300      	movs	r3, #0
 800fdb6:	930f      	str	r3, [sp, #60]	; 0x3c
 800fdb8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800fdba:	930c      	str	r3, [sp, #48]	; 0x30
 800fdbc:	9307      	str	r3, [sp, #28]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	dc13      	bgt.n	800fdea <_dtoa_r+0x26a>
 800fdc2:	2301      	movs	r3, #1
 800fdc4:	001a      	movs	r2, r3
 800fdc6:	930c      	str	r3, [sp, #48]	; 0x30
 800fdc8:	9307      	str	r3, [sp, #28]
 800fdca:	9223      	str	r2, [sp, #140]	; 0x8c
 800fdcc:	e00d      	b.n	800fdea <_dtoa_r+0x26a>
 800fdce:	2301      	movs	r3, #1
 800fdd0:	e7f1      	b.n	800fdb6 <_dtoa_r+0x236>
 800fdd2:	2300      	movs	r3, #0
 800fdd4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800fdd6:	930f      	str	r3, [sp, #60]	; 0x3c
 800fdd8:	4694      	mov	ip, r2
 800fdda:	9b02      	ldr	r3, [sp, #8]
 800fddc:	4463      	add	r3, ip
 800fdde:	930c      	str	r3, [sp, #48]	; 0x30
 800fde0:	3301      	adds	r3, #1
 800fde2:	9307      	str	r3, [sp, #28]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	dc00      	bgt.n	800fdea <_dtoa_r+0x26a>
 800fde8:	2301      	movs	r3, #1
 800fdea:	2200      	movs	r2, #0
 800fdec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fdee:	6042      	str	r2, [r0, #4]
 800fdf0:	3204      	adds	r2, #4
 800fdf2:	0015      	movs	r5, r2
 800fdf4:	3514      	adds	r5, #20
 800fdf6:	6841      	ldr	r1, [r0, #4]
 800fdf8:	429d      	cmp	r5, r3
 800fdfa:	d919      	bls.n	800fe30 <_dtoa_r+0x2b0>
 800fdfc:	0038      	movs	r0, r7
 800fdfe:	f000 fde3 	bl	80109c8 <_Balloc>
 800fe02:	9006      	str	r0, [sp, #24]
 800fe04:	2800      	cmp	r0, #0
 800fe06:	d117      	bne.n	800fe38 <_dtoa_r+0x2b8>
 800fe08:	21d5      	movs	r1, #213	; 0xd5
 800fe0a:	0002      	movs	r2, r0
 800fe0c:	4b43      	ldr	r3, [pc, #268]	; (800ff1c <_dtoa_r+0x39c>)
 800fe0e:	0049      	lsls	r1, r1, #1
 800fe10:	e6cb      	b.n	800fbaa <_dtoa_r+0x2a>
 800fe12:	2301      	movs	r3, #1
 800fe14:	e7de      	b.n	800fdd4 <_dtoa_r+0x254>
 800fe16:	2300      	movs	r3, #0
 800fe18:	940f      	str	r4, [sp, #60]	; 0x3c
 800fe1a:	9322      	str	r3, [sp, #136]	; 0x88
 800fe1c:	3b01      	subs	r3, #1
 800fe1e:	930c      	str	r3, [sp, #48]	; 0x30
 800fe20:	9307      	str	r3, [sp, #28]
 800fe22:	2200      	movs	r2, #0
 800fe24:	3313      	adds	r3, #19
 800fe26:	e7d0      	b.n	800fdca <_dtoa_r+0x24a>
 800fe28:	2301      	movs	r3, #1
 800fe2a:	930f      	str	r3, [sp, #60]	; 0x3c
 800fe2c:	3b02      	subs	r3, #2
 800fe2e:	e7f6      	b.n	800fe1e <_dtoa_r+0x29e>
 800fe30:	3101      	adds	r1, #1
 800fe32:	6041      	str	r1, [r0, #4]
 800fe34:	0052      	lsls	r2, r2, #1
 800fe36:	e7dc      	b.n	800fdf2 <_dtoa_r+0x272>
 800fe38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe3a:	9a06      	ldr	r2, [sp, #24]
 800fe3c:	601a      	str	r2, [r3, #0]
 800fe3e:	9b07      	ldr	r3, [sp, #28]
 800fe40:	2b0e      	cmp	r3, #14
 800fe42:	d900      	bls.n	800fe46 <_dtoa_r+0x2c6>
 800fe44:	e0eb      	b.n	801001e <_dtoa_r+0x49e>
 800fe46:	2c00      	cmp	r4, #0
 800fe48:	d100      	bne.n	800fe4c <_dtoa_r+0x2cc>
 800fe4a:	e0e8      	b.n	801001e <_dtoa_r+0x49e>
 800fe4c:	9b02      	ldr	r3, [sp, #8]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	dd68      	ble.n	800ff24 <_dtoa_r+0x3a4>
 800fe52:	001a      	movs	r2, r3
 800fe54:	210f      	movs	r1, #15
 800fe56:	4b2d      	ldr	r3, [pc, #180]	; (800ff0c <_dtoa_r+0x38c>)
 800fe58:	400a      	ands	r2, r1
 800fe5a:	00d2      	lsls	r2, r2, #3
 800fe5c:	189b      	adds	r3, r3, r2
 800fe5e:	681d      	ldr	r5, [r3, #0]
 800fe60:	685e      	ldr	r6, [r3, #4]
 800fe62:	9b02      	ldr	r3, [sp, #8]
 800fe64:	111c      	asrs	r4, r3, #4
 800fe66:	2302      	movs	r3, #2
 800fe68:	9310      	str	r3, [sp, #64]	; 0x40
 800fe6a:	9b02      	ldr	r3, [sp, #8]
 800fe6c:	05db      	lsls	r3, r3, #23
 800fe6e:	d50b      	bpl.n	800fe88 <_dtoa_r+0x308>
 800fe70:	4b2b      	ldr	r3, [pc, #172]	; (800ff20 <_dtoa_r+0x3a0>)
 800fe72:	400c      	ands	r4, r1
 800fe74:	6a1a      	ldr	r2, [r3, #32]
 800fe76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe78:	9812      	ldr	r0, [sp, #72]	; 0x48
 800fe7a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800fe7c:	f7f1 fac2 	bl	8001404 <__aeabi_ddiv>
 800fe80:	2303      	movs	r3, #3
 800fe82:	9008      	str	r0, [sp, #32]
 800fe84:	9109      	str	r1, [sp, #36]	; 0x24
 800fe86:	9310      	str	r3, [sp, #64]	; 0x40
 800fe88:	4b25      	ldr	r3, [pc, #148]	; (800ff20 <_dtoa_r+0x3a0>)
 800fe8a:	9314      	str	r3, [sp, #80]	; 0x50
 800fe8c:	2c00      	cmp	r4, #0
 800fe8e:	d108      	bne.n	800fea2 <_dtoa_r+0x322>
 800fe90:	9808      	ldr	r0, [sp, #32]
 800fe92:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fe94:	002a      	movs	r2, r5
 800fe96:	0033      	movs	r3, r6
 800fe98:	f7f1 fab4 	bl	8001404 <__aeabi_ddiv>
 800fe9c:	9008      	str	r0, [sp, #32]
 800fe9e:	9109      	str	r1, [sp, #36]	; 0x24
 800fea0:	e05c      	b.n	800ff5c <_dtoa_r+0x3dc>
 800fea2:	2301      	movs	r3, #1
 800fea4:	421c      	tst	r4, r3
 800fea6:	d00b      	beq.n	800fec0 <_dtoa_r+0x340>
 800fea8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800feaa:	0028      	movs	r0, r5
 800feac:	3301      	adds	r3, #1
 800feae:	9310      	str	r3, [sp, #64]	; 0x40
 800feb0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800feb2:	0031      	movs	r1, r6
 800feb4:	681a      	ldr	r2, [r3, #0]
 800feb6:	685b      	ldr	r3, [r3, #4]
 800feb8:	f7f1 fea6 	bl	8001c08 <__aeabi_dmul>
 800febc:	0005      	movs	r5, r0
 800febe:	000e      	movs	r6, r1
 800fec0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fec2:	1064      	asrs	r4, r4, #1
 800fec4:	3308      	adds	r3, #8
 800fec6:	e7e0      	b.n	800fe8a <_dtoa_r+0x30a>
 800fec8:	08013b7e 	.word	0x08013b7e
 800fecc:	08013b95 	.word	0x08013b95
 800fed0:	7ff00000 	.word	0x7ff00000
 800fed4:	0000270f 	.word	0x0000270f
 800fed8:	08013b7a 	.word	0x08013b7a
 800fedc:	08013b7d 	.word	0x08013b7d
 800fee0:	08013a4c 	.word	0x08013a4c
 800fee4:	08013a4d 	.word	0x08013a4d
 800fee8:	3ff00000 	.word	0x3ff00000
 800feec:	fffffc01 	.word	0xfffffc01
 800fef0:	3ff80000 	.word	0x3ff80000
 800fef4:	636f4361 	.word	0x636f4361
 800fef8:	3fd287a7 	.word	0x3fd287a7
 800fefc:	8b60c8b3 	.word	0x8b60c8b3
 800ff00:	3fc68a28 	.word	0x3fc68a28
 800ff04:	509f79fb 	.word	0x509f79fb
 800ff08:	3fd34413 	.word	0x3fd34413
 800ff0c:	08013c88 	.word	0x08013c88
 800ff10:	00000432 	.word	0x00000432
 800ff14:	00000412 	.word	0x00000412
 800ff18:	fe100000 	.word	0xfe100000
 800ff1c:	08013bf0 	.word	0x08013bf0
 800ff20:	08013c60 	.word	0x08013c60
 800ff24:	2302      	movs	r3, #2
 800ff26:	9310      	str	r3, [sp, #64]	; 0x40
 800ff28:	9b02      	ldr	r3, [sp, #8]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d016      	beq.n	800ff5c <_dtoa_r+0x3dc>
 800ff2e:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ff30:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ff32:	425c      	negs	r4, r3
 800ff34:	230f      	movs	r3, #15
 800ff36:	4ab6      	ldr	r2, [pc, #728]	; (8010210 <_dtoa_r+0x690>)
 800ff38:	4023      	ands	r3, r4
 800ff3a:	00db      	lsls	r3, r3, #3
 800ff3c:	18d3      	adds	r3, r2, r3
 800ff3e:	681a      	ldr	r2, [r3, #0]
 800ff40:	685b      	ldr	r3, [r3, #4]
 800ff42:	f7f1 fe61 	bl	8001c08 <__aeabi_dmul>
 800ff46:	2601      	movs	r6, #1
 800ff48:	2300      	movs	r3, #0
 800ff4a:	9008      	str	r0, [sp, #32]
 800ff4c:	9109      	str	r1, [sp, #36]	; 0x24
 800ff4e:	4db1      	ldr	r5, [pc, #708]	; (8010214 <_dtoa_r+0x694>)
 800ff50:	1124      	asrs	r4, r4, #4
 800ff52:	2c00      	cmp	r4, #0
 800ff54:	d000      	beq.n	800ff58 <_dtoa_r+0x3d8>
 800ff56:	e094      	b.n	8010082 <_dtoa_r+0x502>
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d19f      	bne.n	800fe9c <_dtoa_r+0x31c>
 800ff5c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d100      	bne.n	800ff64 <_dtoa_r+0x3e4>
 800ff62:	e09b      	b.n	801009c <_dtoa_r+0x51c>
 800ff64:	9c08      	ldr	r4, [sp, #32]
 800ff66:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ff68:	2200      	movs	r2, #0
 800ff6a:	0020      	movs	r0, r4
 800ff6c:	0029      	movs	r1, r5
 800ff6e:	4baa      	ldr	r3, [pc, #680]	; (8010218 <_dtoa_r+0x698>)
 800ff70:	f7f0 fa72 	bl	8000458 <__aeabi_dcmplt>
 800ff74:	2800      	cmp	r0, #0
 800ff76:	d100      	bne.n	800ff7a <_dtoa_r+0x3fa>
 800ff78:	e090      	b.n	801009c <_dtoa_r+0x51c>
 800ff7a:	9b07      	ldr	r3, [sp, #28]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d100      	bne.n	800ff82 <_dtoa_r+0x402>
 800ff80:	e08c      	b.n	801009c <_dtoa_r+0x51c>
 800ff82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	dd46      	ble.n	8010016 <_dtoa_r+0x496>
 800ff88:	9b02      	ldr	r3, [sp, #8]
 800ff8a:	2200      	movs	r2, #0
 800ff8c:	0020      	movs	r0, r4
 800ff8e:	0029      	movs	r1, r5
 800ff90:	1e5e      	subs	r6, r3, #1
 800ff92:	4ba2      	ldr	r3, [pc, #648]	; (801021c <_dtoa_r+0x69c>)
 800ff94:	f7f1 fe38 	bl	8001c08 <__aeabi_dmul>
 800ff98:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ff9a:	9008      	str	r0, [sp, #32]
 800ff9c:	9109      	str	r1, [sp, #36]	; 0x24
 800ff9e:	3301      	adds	r3, #1
 800ffa0:	9310      	str	r3, [sp, #64]	; 0x40
 800ffa2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ffa4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ffa6:	9c08      	ldr	r4, [sp, #32]
 800ffa8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ffaa:	9314      	str	r3, [sp, #80]	; 0x50
 800ffac:	f7f2 fc7e 	bl	80028ac <__aeabi_i2d>
 800ffb0:	0022      	movs	r2, r4
 800ffb2:	002b      	movs	r3, r5
 800ffb4:	f7f1 fe28 	bl	8001c08 <__aeabi_dmul>
 800ffb8:	2200      	movs	r2, #0
 800ffba:	4b99      	ldr	r3, [pc, #612]	; (8010220 <_dtoa_r+0x6a0>)
 800ffbc:	f7f0 fee6 	bl	8000d8c <__aeabi_dadd>
 800ffc0:	9010      	str	r0, [sp, #64]	; 0x40
 800ffc2:	9111      	str	r1, [sp, #68]	; 0x44
 800ffc4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ffc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ffc8:	9208      	str	r2, [sp, #32]
 800ffca:	9309      	str	r3, [sp, #36]	; 0x24
 800ffcc:	4a95      	ldr	r2, [pc, #596]	; (8010224 <_dtoa_r+0x6a4>)
 800ffce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ffd0:	4694      	mov	ip, r2
 800ffd2:	4463      	add	r3, ip
 800ffd4:	9317      	str	r3, [sp, #92]	; 0x5c
 800ffd6:	9309      	str	r3, [sp, #36]	; 0x24
 800ffd8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d161      	bne.n	80100a2 <_dtoa_r+0x522>
 800ffde:	2200      	movs	r2, #0
 800ffe0:	0020      	movs	r0, r4
 800ffe2:	0029      	movs	r1, r5
 800ffe4:	4b90      	ldr	r3, [pc, #576]	; (8010228 <_dtoa_r+0x6a8>)
 800ffe6:	f7f2 f87b 	bl	80020e0 <__aeabi_dsub>
 800ffea:	9a08      	ldr	r2, [sp, #32]
 800ffec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ffee:	0004      	movs	r4, r0
 800fff0:	000d      	movs	r5, r1
 800fff2:	f7f0 fa45 	bl	8000480 <__aeabi_dcmpgt>
 800fff6:	2800      	cmp	r0, #0
 800fff8:	d000      	beq.n	800fffc <_dtoa_r+0x47c>
 800fffa:	e2af      	b.n	801055c <_dtoa_r+0x9dc>
 800fffc:	488b      	ldr	r0, [pc, #556]	; (801022c <_dtoa_r+0x6ac>)
 800fffe:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010000:	4684      	mov	ip, r0
 8010002:	4461      	add	r1, ip
 8010004:	000b      	movs	r3, r1
 8010006:	0020      	movs	r0, r4
 8010008:	0029      	movs	r1, r5
 801000a:	9a08      	ldr	r2, [sp, #32]
 801000c:	f7f0 fa24 	bl	8000458 <__aeabi_dcmplt>
 8010010:	2800      	cmp	r0, #0
 8010012:	d000      	beq.n	8010016 <_dtoa_r+0x496>
 8010014:	e29f      	b.n	8010556 <_dtoa_r+0x9d6>
 8010016:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010018:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801001a:	9308      	str	r3, [sp, #32]
 801001c:	9409      	str	r4, [sp, #36]	; 0x24
 801001e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010020:	2b00      	cmp	r3, #0
 8010022:	da00      	bge.n	8010026 <_dtoa_r+0x4a6>
 8010024:	e172      	b.n	801030c <_dtoa_r+0x78c>
 8010026:	9a02      	ldr	r2, [sp, #8]
 8010028:	2a0e      	cmp	r2, #14
 801002a:	dd00      	ble.n	801002e <_dtoa_r+0x4ae>
 801002c:	e16e      	b.n	801030c <_dtoa_r+0x78c>
 801002e:	4b78      	ldr	r3, [pc, #480]	; (8010210 <_dtoa_r+0x690>)
 8010030:	00d2      	lsls	r2, r2, #3
 8010032:	189b      	adds	r3, r3, r2
 8010034:	685c      	ldr	r4, [r3, #4]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	930a      	str	r3, [sp, #40]	; 0x28
 801003a:	940b      	str	r4, [sp, #44]	; 0x2c
 801003c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801003e:	2b00      	cmp	r3, #0
 8010040:	db00      	blt.n	8010044 <_dtoa_r+0x4c4>
 8010042:	e0f7      	b.n	8010234 <_dtoa_r+0x6b4>
 8010044:	9b07      	ldr	r3, [sp, #28]
 8010046:	2b00      	cmp	r3, #0
 8010048:	dd00      	ble.n	801004c <_dtoa_r+0x4cc>
 801004a:	e0f3      	b.n	8010234 <_dtoa_r+0x6b4>
 801004c:	d000      	beq.n	8010050 <_dtoa_r+0x4d0>
 801004e:	e282      	b.n	8010556 <_dtoa_r+0x9d6>
 8010050:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010052:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010054:	2200      	movs	r2, #0
 8010056:	4b74      	ldr	r3, [pc, #464]	; (8010228 <_dtoa_r+0x6a8>)
 8010058:	f7f1 fdd6 	bl	8001c08 <__aeabi_dmul>
 801005c:	9a08      	ldr	r2, [sp, #32]
 801005e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010060:	f7f0 fa18 	bl	8000494 <__aeabi_dcmpge>
 8010064:	9e07      	ldr	r6, [sp, #28]
 8010066:	0035      	movs	r5, r6
 8010068:	2800      	cmp	r0, #0
 801006a:	d000      	beq.n	801006e <_dtoa_r+0x4ee>
 801006c:	e259      	b.n	8010522 <_dtoa_r+0x9a2>
 801006e:	9b06      	ldr	r3, [sp, #24]
 8010070:	9a06      	ldr	r2, [sp, #24]
 8010072:	3301      	adds	r3, #1
 8010074:	9308      	str	r3, [sp, #32]
 8010076:	2331      	movs	r3, #49	; 0x31
 8010078:	7013      	strb	r3, [r2, #0]
 801007a:	9b02      	ldr	r3, [sp, #8]
 801007c:	3301      	adds	r3, #1
 801007e:	9302      	str	r3, [sp, #8]
 8010080:	e254      	b.n	801052c <_dtoa_r+0x9ac>
 8010082:	4234      	tst	r4, r6
 8010084:	d007      	beq.n	8010096 <_dtoa_r+0x516>
 8010086:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010088:	3301      	adds	r3, #1
 801008a:	9310      	str	r3, [sp, #64]	; 0x40
 801008c:	682a      	ldr	r2, [r5, #0]
 801008e:	686b      	ldr	r3, [r5, #4]
 8010090:	f7f1 fdba 	bl	8001c08 <__aeabi_dmul>
 8010094:	0033      	movs	r3, r6
 8010096:	1064      	asrs	r4, r4, #1
 8010098:	3508      	adds	r5, #8
 801009a:	e75a      	b.n	800ff52 <_dtoa_r+0x3d2>
 801009c:	9e02      	ldr	r6, [sp, #8]
 801009e:	9b07      	ldr	r3, [sp, #28]
 80100a0:	e780      	b.n	800ffa4 <_dtoa_r+0x424>
 80100a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80100a4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80100a6:	1e5a      	subs	r2, r3, #1
 80100a8:	4b59      	ldr	r3, [pc, #356]	; (8010210 <_dtoa_r+0x690>)
 80100aa:	00d2      	lsls	r2, r2, #3
 80100ac:	189b      	adds	r3, r3, r2
 80100ae:	681a      	ldr	r2, [r3, #0]
 80100b0:	685b      	ldr	r3, [r3, #4]
 80100b2:	2900      	cmp	r1, #0
 80100b4:	d051      	beq.n	801015a <_dtoa_r+0x5da>
 80100b6:	2000      	movs	r0, #0
 80100b8:	495d      	ldr	r1, [pc, #372]	; (8010230 <_dtoa_r+0x6b0>)
 80100ba:	f7f1 f9a3 	bl	8001404 <__aeabi_ddiv>
 80100be:	9a08      	ldr	r2, [sp, #32]
 80100c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80100c2:	f7f2 f80d 	bl	80020e0 <__aeabi_dsub>
 80100c6:	9a06      	ldr	r2, [sp, #24]
 80100c8:	9b06      	ldr	r3, [sp, #24]
 80100ca:	4694      	mov	ip, r2
 80100cc:	9317      	str	r3, [sp, #92]	; 0x5c
 80100ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80100d0:	9010      	str	r0, [sp, #64]	; 0x40
 80100d2:	9111      	str	r1, [sp, #68]	; 0x44
 80100d4:	4463      	add	r3, ip
 80100d6:	9319      	str	r3, [sp, #100]	; 0x64
 80100d8:	0029      	movs	r1, r5
 80100da:	0020      	movs	r0, r4
 80100dc:	f7f2 fbb0 	bl	8002840 <__aeabi_d2iz>
 80100e0:	9014      	str	r0, [sp, #80]	; 0x50
 80100e2:	f7f2 fbe3 	bl	80028ac <__aeabi_i2d>
 80100e6:	0002      	movs	r2, r0
 80100e8:	000b      	movs	r3, r1
 80100ea:	0020      	movs	r0, r4
 80100ec:	0029      	movs	r1, r5
 80100ee:	f7f1 fff7 	bl	80020e0 <__aeabi_dsub>
 80100f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80100f4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80100f6:	3301      	adds	r3, #1
 80100f8:	9308      	str	r3, [sp, #32]
 80100fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80100fc:	0004      	movs	r4, r0
 80100fe:	3330      	adds	r3, #48	; 0x30
 8010100:	7013      	strb	r3, [r2, #0]
 8010102:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010104:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010106:	000d      	movs	r5, r1
 8010108:	f7f0 f9a6 	bl	8000458 <__aeabi_dcmplt>
 801010c:	2800      	cmp	r0, #0
 801010e:	d175      	bne.n	80101fc <_dtoa_r+0x67c>
 8010110:	0022      	movs	r2, r4
 8010112:	002b      	movs	r3, r5
 8010114:	2000      	movs	r0, #0
 8010116:	4940      	ldr	r1, [pc, #256]	; (8010218 <_dtoa_r+0x698>)
 8010118:	f7f1 ffe2 	bl	80020e0 <__aeabi_dsub>
 801011c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801011e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010120:	f7f0 f99a 	bl	8000458 <__aeabi_dcmplt>
 8010124:	2800      	cmp	r0, #0
 8010126:	d000      	beq.n	801012a <_dtoa_r+0x5aa>
 8010128:	e0d2      	b.n	80102d0 <_dtoa_r+0x750>
 801012a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801012c:	9a08      	ldr	r2, [sp, #32]
 801012e:	4293      	cmp	r3, r2
 8010130:	d100      	bne.n	8010134 <_dtoa_r+0x5b4>
 8010132:	e770      	b.n	8010016 <_dtoa_r+0x496>
 8010134:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010136:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010138:	2200      	movs	r2, #0
 801013a:	4b38      	ldr	r3, [pc, #224]	; (801021c <_dtoa_r+0x69c>)
 801013c:	f7f1 fd64 	bl	8001c08 <__aeabi_dmul>
 8010140:	4b36      	ldr	r3, [pc, #216]	; (801021c <_dtoa_r+0x69c>)
 8010142:	9010      	str	r0, [sp, #64]	; 0x40
 8010144:	9111      	str	r1, [sp, #68]	; 0x44
 8010146:	2200      	movs	r2, #0
 8010148:	0020      	movs	r0, r4
 801014a:	0029      	movs	r1, r5
 801014c:	f7f1 fd5c 	bl	8001c08 <__aeabi_dmul>
 8010150:	9b08      	ldr	r3, [sp, #32]
 8010152:	0004      	movs	r4, r0
 8010154:	000d      	movs	r5, r1
 8010156:	9317      	str	r3, [sp, #92]	; 0x5c
 8010158:	e7be      	b.n	80100d8 <_dtoa_r+0x558>
 801015a:	9808      	ldr	r0, [sp, #32]
 801015c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801015e:	f7f1 fd53 	bl	8001c08 <__aeabi_dmul>
 8010162:	9a06      	ldr	r2, [sp, #24]
 8010164:	9b06      	ldr	r3, [sp, #24]
 8010166:	4694      	mov	ip, r2
 8010168:	9308      	str	r3, [sp, #32]
 801016a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801016c:	9010      	str	r0, [sp, #64]	; 0x40
 801016e:	9111      	str	r1, [sp, #68]	; 0x44
 8010170:	4463      	add	r3, ip
 8010172:	9319      	str	r3, [sp, #100]	; 0x64
 8010174:	0029      	movs	r1, r5
 8010176:	0020      	movs	r0, r4
 8010178:	f7f2 fb62 	bl	8002840 <__aeabi_d2iz>
 801017c:	9017      	str	r0, [sp, #92]	; 0x5c
 801017e:	f7f2 fb95 	bl	80028ac <__aeabi_i2d>
 8010182:	0002      	movs	r2, r0
 8010184:	000b      	movs	r3, r1
 8010186:	0020      	movs	r0, r4
 8010188:	0029      	movs	r1, r5
 801018a:	f7f1 ffa9 	bl	80020e0 <__aeabi_dsub>
 801018e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010190:	9a08      	ldr	r2, [sp, #32]
 8010192:	3330      	adds	r3, #48	; 0x30
 8010194:	7013      	strb	r3, [r2, #0]
 8010196:	0013      	movs	r3, r2
 8010198:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801019a:	3301      	adds	r3, #1
 801019c:	0004      	movs	r4, r0
 801019e:	000d      	movs	r5, r1
 80101a0:	9308      	str	r3, [sp, #32]
 80101a2:	4293      	cmp	r3, r2
 80101a4:	d12c      	bne.n	8010200 <_dtoa_r+0x680>
 80101a6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80101a8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80101aa:	9a06      	ldr	r2, [sp, #24]
 80101ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80101ae:	4694      	mov	ip, r2
 80101b0:	4463      	add	r3, ip
 80101b2:	2200      	movs	r2, #0
 80101b4:	9308      	str	r3, [sp, #32]
 80101b6:	4b1e      	ldr	r3, [pc, #120]	; (8010230 <_dtoa_r+0x6b0>)
 80101b8:	f7f0 fde8 	bl	8000d8c <__aeabi_dadd>
 80101bc:	0002      	movs	r2, r0
 80101be:	000b      	movs	r3, r1
 80101c0:	0020      	movs	r0, r4
 80101c2:	0029      	movs	r1, r5
 80101c4:	f7f0 f95c 	bl	8000480 <__aeabi_dcmpgt>
 80101c8:	2800      	cmp	r0, #0
 80101ca:	d000      	beq.n	80101ce <_dtoa_r+0x64e>
 80101cc:	e080      	b.n	80102d0 <_dtoa_r+0x750>
 80101ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80101d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80101d2:	2000      	movs	r0, #0
 80101d4:	4916      	ldr	r1, [pc, #88]	; (8010230 <_dtoa_r+0x6b0>)
 80101d6:	f7f1 ff83 	bl	80020e0 <__aeabi_dsub>
 80101da:	0002      	movs	r2, r0
 80101dc:	000b      	movs	r3, r1
 80101de:	0020      	movs	r0, r4
 80101e0:	0029      	movs	r1, r5
 80101e2:	f7f0 f939 	bl	8000458 <__aeabi_dcmplt>
 80101e6:	2800      	cmp	r0, #0
 80101e8:	d100      	bne.n	80101ec <_dtoa_r+0x66c>
 80101ea:	e714      	b.n	8010016 <_dtoa_r+0x496>
 80101ec:	9b08      	ldr	r3, [sp, #32]
 80101ee:	001a      	movs	r2, r3
 80101f0:	3a01      	subs	r2, #1
 80101f2:	9208      	str	r2, [sp, #32]
 80101f4:	7812      	ldrb	r2, [r2, #0]
 80101f6:	2a30      	cmp	r2, #48	; 0x30
 80101f8:	d0f8      	beq.n	80101ec <_dtoa_r+0x66c>
 80101fa:	9308      	str	r3, [sp, #32]
 80101fc:	9602      	str	r6, [sp, #8]
 80101fe:	e055      	b.n	80102ac <_dtoa_r+0x72c>
 8010200:	2200      	movs	r2, #0
 8010202:	4b06      	ldr	r3, [pc, #24]	; (801021c <_dtoa_r+0x69c>)
 8010204:	f7f1 fd00 	bl	8001c08 <__aeabi_dmul>
 8010208:	0004      	movs	r4, r0
 801020a:	000d      	movs	r5, r1
 801020c:	e7b2      	b.n	8010174 <_dtoa_r+0x5f4>
 801020e:	46c0      	nop			; (mov r8, r8)
 8010210:	08013c88 	.word	0x08013c88
 8010214:	08013c60 	.word	0x08013c60
 8010218:	3ff00000 	.word	0x3ff00000
 801021c:	40240000 	.word	0x40240000
 8010220:	401c0000 	.word	0x401c0000
 8010224:	fcc00000 	.word	0xfcc00000
 8010228:	40140000 	.word	0x40140000
 801022c:	7cc00000 	.word	0x7cc00000
 8010230:	3fe00000 	.word	0x3fe00000
 8010234:	9b07      	ldr	r3, [sp, #28]
 8010236:	9e06      	ldr	r6, [sp, #24]
 8010238:	3b01      	subs	r3, #1
 801023a:	199b      	adds	r3, r3, r6
 801023c:	930c      	str	r3, [sp, #48]	; 0x30
 801023e:	9c08      	ldr	r4, [sp, #32]
 8010240:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8010242:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010244:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010246:	0020      	movs	r0, r4
 8010248:	0029      	movs	r1, r5
 801024a:	f7f1 f8db 	bl	8001404 <__aeabi_ddiv>
 801024e:	f7f2 faf7 	bl	8002840 <__aeabi_d2iz>
 8010252:	9007      	str	r0, [sp, #28]
 8010254:	f7f2 fb2a 	bl	80028ac <__aeabi_i2d>
 8010258:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801025a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801025c:	f7f1 fcd4 	bl	8001c08 <__aeabi_dmul>
 8010260:	0002      	movs	r2, r0
 8010262:	000b      	movs	r3, r1
 8010264:	0020      	movs	r0, r4
 8010266:	0029      	movs	r1, r5
 8010268:	f7f1 ff3a 	bl	80020e0 <__aeabi_dsub>
 801026c:	0033      	movs	r3, r6
 801026e:	9a07      	ldr	r2, [sp, #28]
 8010270:	3601      	adds	r6, #1
 8010272:	3230      	adds	r2, #48	; 0x30
 8010274:	701a      	strb	r2, [r3, #0]
 8010276:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010278:	9608      	str	r6, [sp, #32]
 801027a:	429a      	cmp	r2, r3
 801027c:	d139      	bne.n	80102f2 <_dtoa_r+0x772>
 801027e:	0002      	movs	r2, r0
 8010280:	000b      	movs	r3, r1
 8010282:	f7f0 fd83 	bl	8000d8c <__aeabi_dadd>
 8010286:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010288:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801028a:	0004      	movs	r4, r0
 801028c:	000d      	movs	r5, r1
 801028e:	f7f0 f8f7 	bl	8000480 <__aeabi_dcmpgt>
 8010292:	2800      	cmp	r0, #0
 8010294:	d11b      	bne.n	80102ce <_dtoa_r+0x74e>
 8010296:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010298:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801029a:	0020      	movs	r0, r4
 801029c:	0029      	movs	r1, r5
 801029e:	f7f0 f8d5 	bl	800044c <__aeabi_dcmpeq>
 80102a2:	2800      	cmp	r0, #0
 80102a4:	d002      	beq.n	80102ac <_dtoa_r+0x72c>
 80102a6:	9b07      	ldr	r3, [sp, #28]
 80102a8:	07db      	lsls	r3, r3, #31
 80102aa:	d410      	bmi.n	80102ce <_dtoa_r+0x74e>
 80102ac:	0038      	movs	r0, r7
 80102ae:	9905      	ldr	r1, [sp, #20]
 80102b0:	f000 fbce 	bl	8010a50 <_Bfree>
 80102b4:	2300      	movs	r3, #0
 80102b6:	9a08      	ldr	r2, [sp, #32]
 80102b8:	9802      	ldr	r0, [sp, #8]
 80102ba:	7013      	strb	r3, [r2, #0]
 80102bc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80102be:	3001      	adds	r0, #1
 80102c0:	6018      	str	r0, [r3, #0]
 80102c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d100      	bne.n	80102ca <_dtoa_r+0x74a>
 80102c8:	e4a6      	b.n	800fc18 <_dtoa_r+0x98>
 80102ca:	601a      	str	r2, [r3, #0]
 80102cc:	e4a4      	b.n	800fc18 <_dtoa_r+0x98>
 80102ce:	9e02      	ldr	r6, [sp, #8]
 80102d0:	9b08      	ldr	r3, [sp, #32]
 80102d2:	9308      	str	r3, [sp, #32]
 80102d4:	3b01      	subs	r3, #1
 80102d6:	781a      	ldrb	r2, [r3, #0]
 80102d8:	2a39      	cmp	r2, #57	; 0x39
 80102da:	d106      	bne.n	80102ea <_dtoa_r+0x76a>
 80102dc:	9a06      	ldr	r2, [sp, #24]
 80102de:	429a      	cmp	r2, r3
 80102e0:	d1f7      	bne.n	80102d2 <_dtoa_r+0x752>
 80102e2:	2230      	movs	r2, #48	; 0x30
 80102e4:	9906      	ldr	r1, [sp, #24]
 80102e6:	3601      	adds	r6, #1
 80102e8:	700a      	strb	r2, [r1, #0]
 80102ea:	781a      	ldrb	r2, [r3, #0]
 80102ec:	3201      	adds	r2, #1
 80102ee:	701a      	strb	r2, [r3, #0]
 80102f0:	e784      	b.n	80101fc <_dtoa_r+0x67c>
 80102f2:	2200      	movs	r2, #0
 80102f4:	4baa      	ldr	r3, [pc, #680]	; (80105a0 <_dtoa_r+0xa20>)
 80102f6:	f7f1 fc87 	bl	8001c08 <__aeabi_dmul>
 80102fa:	2200      	movs	r2, #0
 80102fc:	2300      	movs	r3, #0
 80102fe:	0004      	movs	r4, r0
 8010300:	000d      	movs	r5, r1
 8010302:	f7f0 f8a3 	bl	800044c <__aeabi_dcmpeq>
 8010306:	2800      	cmp	r0, #0
 8010308:	d09b      	beq.n	8010242 <_dtoa_r+0x6c2>
 801030a:	e7cf      	b.n	80102ac <_dtoa_r+0x72c>
 801030c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801030e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8010310:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010312:	2d00      	cmp	r5, #0
 8010314:	d012      	beq.n	801033c <_dtoa_r+0x7bc>
 8010316:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8010318:	2a01      	cmp	r2, #1
 801031a:	dc66      	bgt.n	80103ea <_dtoa_r+0x86a>
 801031c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801031e:	2a00      	cmp	r2, #0
 8010320:	d05d      	beq.n	80103de <_dtoa_r+0x85e>
 8010322:	4aa0      	ldr	r2, [pc, #640]	; (80105a4 <_dtoa_r+0xa24>)
 8010324:	189b      	adds	r3, r3, r2
 8010326:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010328:	2101      	movs	r1, #1
 801032a:	18d2      	adds	r2, r2, r3
 801032c:	920a      	str	r2, [sp, #40]	; 0x28
 801032e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010330:	0038      	movs	r0, r7
 8010332:	18d3      	adds	r3, r2, r3
 8010334:	930d      	str	r3, [sp, #52]	; 0x34
 8010336:	f000 fc3b 	bl	8010bb0 <__i2b>
 801033a:	0005      	movs	r5, r0
 801033c:	2c00      	cmp	r4, #0
 801033e:	dd0e      	ble.n	801035e <_dtoa_r+0x7de>
 8010340:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010342:	2b00      	cmp	r3, #0
 8010344:	dd0b      	ble.n	801035e <_dtoa_r+0x7de>
 8010346:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010348:	0023      	movs	r3, r4
 801034a:	4294      	cmp	r4, r2
 801034c:	dd00      	ble.n	8010350 <_dtoa_r+0x7d0>
 801034e:	0013      	movs	r3, r2
 8010350:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010352:	1ae4      	subs	r4, r4, r3
 8010354:	1ad2      	subs	r2, r2, r3
 8010356:	920a      	str	r2, [sp, #40]	; 0x28
 8010358:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801035a:	1ad3      	subs	r3, r2, r3
 801035c:	930d      	str	r3, [sp, #52]	; 0x34
 801035e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010360:	2b00      	cmp	r3, #0
 8010362:	d01f      	beq.n	80103a4 <_dtoa_r+0x824>
 8010364:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010366:	2b00      	cmp	r3, #0
 8010368:	d054      	beq.n	8010414 <_dtoa_r+0x894>
 801036a:	2e00      	cmp	r6, #0
 801036c:	dd11      	ble.n	8010392 <_dtoa_r+0x812>
 801036e:	0029      	movs	r1, r5
 8010370:	0032      	movs	r2, r6
 8010372:	0038      	movs	r0, r7
 8010374:	f000 fce2 	bl	8010d3c <__pow5mult>
 8010378:	9a05      	ldr	r2, [sp, #20]
 801037a:	0001      	movs	r1, r0
 801037c:	0005      	movs	r5, r0
 801037e:	0038      	movs	r0, r7
 8010380:	f000 fc2c 	bl	8010bdc <__multiply>
 8010384:	9905      	ldr	r1, [sp, #20]
 8010386:	9014      	str	r0, [sp, #80]	; 0x50
 8010388:	0038      	movs	r0, r7
 801038a:	f000 fb61 	bl	8010a50 <_Bfree>
 801038e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010390:	9305      	str	r3, [sp, #20]
 8010392:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010394:	1b9a      	subs	r2, r3, r6
 8010396:	42b3      	cmp	r3, r6
 8010398:	d004      	beq.n	80103a4 <_dtoa_r+0x824>
 801039a:	0038      	movs	r0, r7
 801039c:	9905      	ldr	r1, [sp, #20]
 801039e:	f000 fccd 	bl	8010d3c <__pow5mult>
 80103a2:	9005      	str	r0, [sp, #20]
 80103a4:	2101      	movs	r1, #1
 80103a6:	0038      	movs	r0, r7
 80103a8:	f000 fc02 	bl	8010bb0 <__i2b>
 80103ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80103ae:	0006      	movs	r6, r0
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	dd31      	ble.n	8010418 <_dtoa_r+0x898>
 80103b4:	001a      	movs	r2, r3
 80103b6:	0001      	movs	r1, r0
 80103b8:	0038      	movs	r0, r7
 80103ba:	f000 fcbf 	bl	8010d3c <__pow5mult>
 80103be:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80103c0:	0006      	movs	r6, r0
 80103c2:	2b01      	cmp	r3, #1
 80103c4:	dd2d      	ble.n	8010422 <_dtoa_r+0x8a2>
 80103c6:	2300      	movs	r3, #0
 80103c8:	930e      	str	r3, [sp, #56]	; 0x38
 80103ca:	6933      	ldr	r3, [r6, #16]
 80103cc:	3303      	adds	r3, #3
 80103ce:	009b      	lsls	r3, r3, #2
 80103d0:	18f3      	adds	r3, r6, r3
 80103d2:	6858      	ldr	r0, [r3, #4]
 80103d4:	f000 fba4 	bl	8010b20 <__hi0bits>
 80103d8:	2320      	movs	r3, #32
 80103da:	1a18      	subs	r0, r3, r0
 80103dc:	e039      	b.n	8010452 <_dtoa_r+0x8d2>
 80103de:	2336      	movs	r3, #54	; 0x36
 80103e0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80103e2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80103e4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80103e6:	1a9b      	subs	r3, r3, r2
 80103e8:	e79d      	b.n	8010326 <_dtoa_r+0x7a6>
 80103ea:	9b07      	ldr	r3, [sp, #28]
 80103ec:	1e5e      	subs	r6, r3, #1
 80103ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80103f0:	42b3      	cmp	r3, r6
 80103f2:	db07      	blt.n	8010404 <_dtoa_r+0x884>
 80103f4:	1b9e      	subs	r6, r3, r6
 80103f6:	9b07      	ldr	r3, [sp, #28]
 80103f8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	da93      	bge.n	8010326 <_dtoa_r+0x7a6>
 80103fe:	1ae4      	subs	r4, r4, r3
 8010400:	2300      	movs	r3, #0
 8010402:	e790      	b.n	8010326 <_dtoa_r+0x7a6>
 8010404:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010406:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010408:	1af3      	subs	r3, r6, r3
 801040a:	18d3      	adds	r3, r2, r3
 801040c:	960e      	str	r6, [sp, #56]	; 0x38
 801040e:	9315      	str	r3, [sp, #84]	; 0x54
 8010410:	2600      	movs	r6, #0
 8010412:	e7f0      	b.n	80103f6 <_dtoa_r+0x876>
 8010414:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010416:	e7c0      	b.n	801039a <_dtoa_r+0x81a>
 8010418:	2300      	movs	r3, #0
 801041a:	930e      	str	r3, [sp, #56]	; 0x38
 801041c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801041e:	2b01      	cmp	r3, #1
 8010420:	dc13      	bgt.n	801044a <_dtoa_r+0x8ca>
 8010422:	2300      	movs	r3, #0
 8010424:	930e      	str	r3, [sp, #56]	; 0x38
 8010426:	9b08      	ldr	r3, [sp, #32]
 8010428:	2b00      	cmp	r3, #0
 801042a:	d10e      	bne.n	801044a <_dtoa_r+0x8ca>
 801042c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801042e:	031b      	lsls	r3, r3, #12
 8010430:	d10b      	bne.n	801044a <_dtoa_r+0x8ca>
 8010432:	4b5d      	ldr	r3, [pc, #372]	; (80105a8 <_dtoa_r+0xa28>)
 8010434:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010436:	4213      	tst	r3, r2
 8010438:	d007      	beq.n	801044a <_dtoa_r+0x8ca>
 801043a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801043c:	3301      	adds	r3, #1
 801043e:	930a      	str	r3, [sp, #40]	; 0x28
 8010440:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010442:	3301      	adds	r3, #1
 8010444:	930d      	str	r3, [sp, #52]	; 0x34
 8010446:	2301      	movs	r3, #1
 8010448:	930e      	str	r3, [sp, #56]	; 0x38
 801044a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801044c:	2001      	movs	r0, #1
 801044e:	2b00      	cmp	r3, #0
 8010450:	d1bb      	bne.n	80103ca <_dtoa_r+0x84a>
 8010452:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010454:	221f      	movs	r2, #31
 8010456:	1818      	adds	r0, r3, r0
 8010458:	0003      	movs	r3, r0
 801045a:	4013      	ands	r3, r2
 801045c:	4210      	tst	r0, r2
 801045e:	d046      	beq.n	80104ee <_dtoa_r+0x96e>
 8010460:	3201      	adds	r2, #1
 8010462:	1ad2      	subs	r2, r2, r3
 8010464:	2a04      	cmp	r2, #4
 8010466:	dd3f      	ble.n	80104e8 <_dtoa_r+0x968>
 8010468:	221c      	movs	r2, #28
 801046a:	1ad3      	subs	r3, r2, r3
 801046c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801046e:	18e4      	adds	r4, r4, r3
 8010470:	18d2      	adds	r2, r2, r3
 8010472:	920a      	str	r2, [sp, #40]	; 0x28
 8010474:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010476:	18d3      	adds	r3, r2, r3
 8010478:	930d      	str	r3, [sp, #52]	; 0x34
 801047a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801047c:	2b00      	cmp	r3, #0
 801047e:	dd05      	ble.n	801048c <_dtoa_r+0x90c>
 8010480:	001a      	movs	r2, r3
 8010482:	0038      	movs	r0, r7
 8010484:	9905      	ldr	r1, [sp, #20]
 8010486:	f000 fcb5 	bl	8010df4 <__lshift>
 801048a:	9005      	str	r0, [sp, #20]
 801048c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801048e:	2b00      	cmp	r3, #0
 8010490:	dd05      	ble.n	801049e <_dtoa_r+0x91e>
 8010492:	0031      	movs	r1, r6
 8010494:	001a      	movs	r2, r3
 8010496:	0038      	movs	r0, r7
 8010498:	f000 fcac 	bl	8010df4 <__lshift>
 801049c:	0006      	movs	r6, r0
 801049e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d026      	beq.n	80104f2 <_dtoa_r+0x972>
 80104a4:	0031      	movs	r1, r6
 80104a6:	9805      	ldr	r0, [sp, #20]
 80104a8:	f000 fd12 	bl	8010ed0 <__mcmp>
 80104ac:	2800      	cmp	r0, #0
 80104ae:	da20      	bge.n	80104f2 <_dtoa_r+0x972>
 80104b0:	9b02      	ldr	r3, [sp, #8]
 80104b2:	220a      	movs	r2, #10
 80104b4:	3b01      	subs	r3, #1
 80104b6:	9302      	str	r3, [sp, #8]
 80104b8:	0038      	movs	r0, r7
 80104ba:	2300      	movs	r3, #0
 80104bc:	9905      	ldr	r1, [sp, #20]
 80104be:	f000 faeb 	bl	8010a98 <__multadd>
 80104c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80104c4:	9005      	str	r0, [sp, #20]
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d100      	bne.n	80104cc <_dtoa_r+0x94c>
 80104ca:	e166      	b.n	801079a <_dtoa_r+0xc1a>
 80104cc:	2300      	movs	r3, #0
 80104ce:	0029      	movs	r1, r5
 80104d0:	220a      	movs	r2, #10
 80104d2:	0038      	movs	r0, r7
 80104d4:	f000 fae0 	bl	8010a98 <__multadd>
 80104d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80104da:	0005      	movs	r5, r0
 80104dc:	2b00      	cmp	r3, #0
 80104de:	dc47      	bgt.n	8010570 <_dtoa_r+0x9f0>
 80104e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80104e2:	2b02      	cmp	r3, #2
 80104e4:	dc0d      	bgt.n	8010502 <_dtoa_r+0x982>
 80104e6:	e043      	b.n	8010570 <_dtoa_r+0x9f0>
 80104e8:	2a04      	cmp	r2, #4
 80104ea:	d0c6      	beq.n	801047a <_dtoa_r+0x8fa>
 80104ec:	0013      	movs	r3, r2
 80104ee:	331c      	adds	r3, #28
 80104f0:	e7bc      	b.n	801046c <_dtoa_r+0x8ec>
 80104f2:	9b07      	ldr	r3, [sp, #28]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	dc35      	bgt.n	8010564 <_dtoa_r+0x9e4>
 80104f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80104fa:	2b02      	cmp	r3, #2
 80104fc:	dd32      	ble.n	8010564 <_dtoa_r+0x9e4>
 80104fe:	9b07      	ldr	r3, [sp, #28]
 8010500:	930c      	str	r3, [sp, #48]	; 0x30
 8010502:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010504:	2b00      	cmp	r3, #0
 8010506:	d10c      	bne.n	8010522 <_dtoa_r+0x9a2>
 8010508:	0031      	movs	r1, r6
 801050a:	2205      	movs	r2, #5
 801050c:	0038      	movs	r0, r7
 801050e:	f000 fac3 	bl	8010a98 <__multadd>
 8010512:	0006      	movs	r6, r0
 8010514:	0001      	movs	r1, r0
 8010516:	9805      	ldr	r0, [sp, #20]
 8010518:	f000 fcda 	bl	8010ed0 <__mcmp>
 801051c:	2800      	cmp	r0, #0
 801051e:	dd00      	ble.n	8010522 <_dtoa_r+0x9a2>
 8010520:	e5a5      	b.n	801006e <_dtoa_r+0x4ee>
 8010522:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010524:	43db      	mvns	r3, r3
 8010526:	9302      	str	r3, [sp, #8]
 8010528:	9b06      	ldr	r3, [sp, #24]
 801052a:	9308      	str	r3, [sp, #32]
 801052c:	2400      	movs	r4, #0
 801052e:	0031      	movs	r1, r6
 8010530:	0038      	movs	r0, r7
 8010532:	f000 fa8d 	bl	8010a50 <_Bfree>
 8010536:	2d00      	cmp	r5, #0
 8010538:	d100      	bne.n	801053c <_dtoa_r+0x9bc>
 801053a:	e6b7      	b.n	80102ac <_dtoa_r+0x72c>
 801053c:	2c00      	cmp	r4, #0
 801053e:	d005      	beq.n	801054c <_dtoa_r+0x9cc>
 8010540:	42ac      	cmp	r4, r5
 8010542:	d003      	beq.n	801054c <_dtoa_r+0x9cc>
 8010544:	0021      	movs	r1, r4
 8010546:	0038      	movs	r0, r7
 8010548:	f000 fa82 	bl	8010a50 <_Bfree>
 801054c:	0029      	movs	r1, r5
 801054e:	0038      	movs	r0, r7
 8010550:	f000 fa7e 	bl	8010a50 <_Bfree>
 8010554:	e6aa      	b.n	80102ac <_dtoa_r+0x72c>
 8010556:	2600      	movs	r6, #0
 8010558:	0035      	movs	r5, r6
 801055a:	e7e2      	b.n	8010522 <_dtoa_r+0x9a2>
 801055c:	9602      	str	r6, [sp, #8]
 801055e:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8010560:	0035      	movs	r5, r6
 8010562:	e584      	b.n	801006e <_dtoa_r+0x4ee>
 8010564:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010566:	2b00      	cmp	r3, #0
 8010568:	d100      	bne.n	801056c <_dtoa_r+0x9ec>
 801056a:	e0ce      	b.n	801070a <_dtoa_r+0xb8a>
 801056c:	9b07      	ldr	r3, [sp, #28]
 801056e:	930c      	str	r3, [sp, #48]	; 0x30
 8010570:	2c00      	cmp	r4, #0
 8010572:	dd05      	ble.n	8010580 <_dtoa_r+0xa00>
 8010574:	0029      	movs	r1, r5
 8010576:	0022      	movs	r2, r4
 8010578:	0038      	movs	r0, r7
 801057a:	f000 fc3b 	bl	8010df4 <__lshift>
 801057e:	0005      	movs	r5, r0
 8010580:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010582:	0028      	movs	r0, r5
 8010584:	2b00      	cmp	r3, #0
 8010586:	d022      	beq.n	80105ce <_dtoa_r+0xa4e>
 8010588:	0038      	movs	r0, r7
 801058a:	6869      	ldr	r1, [r5, #4]
 801058c:	f000 fa1c 	bl	80109c8 <_Balloc>
 8010590:	1e04      	subs	r4, r0, #0
 8010592:	d10f      	bne.n	80105b4 <_dtoa_r+0xa34>
 8010594:	0002      	movs	r2, r0
 8010596:	4b05      	ldr	r3, [pc, #20]	; (80105ac <_dtoa_r+0xa2c>)
 8010598:	4905      	ldr	r1, [pc, #20]	; (80105b0 <_dtoa_r+0xa30>)
 801059a:	f7ff fb06 	bl	800fbaa <_dtoa_r+0x2a>
 801059e:	46c0      	nop			; (mov r8, r8)
 80105a0:	40240000 	.word	0x40240000
 80105a4:	00000433 	.word	0x00000433
 80105a8:	7ff00000 	.word	0x7ff00000
 80105ac:	08013bf0 	.word	0x08013bf0
 80105b0:	000002ea 	.word	0x000002ea
 80105b4:	0029      	movs	r1, r5
 80105b6:	692b      	ldr	r3, [r5, #16]
 80105b8:	310c      	adds	r1, #12
 80105ba:	1c9a      	adds	r2, r3, #2
 80105bc:	0092      	lsls	r2, r2, #2
 80105be:	300c      	adds	r0, #12
 80105c0:	f7fe fb89 	bl	800ecd6 <memcpy>
 80105c4:	2201      	movs	r2, #1
 80105c6:	0021      	movs	r1, r4
 80105c8:	0038      	movs	r0, r7
 80105ca:	f000 fc13 	bl	8010df4 <__lshift>
 80105ce:	9b06      	ldr	r3, [sp, #24]
 80105d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80105d2:	930a      	str	r3, [sp, #40]	; 0x28
 80105d4:	3b01      	subs	r3, #1
 80105d6:	189b      	adds	r3, r3, r2
 80105d8:	2201      	movs	r2, #1
 80105da:	002c      	movs	r4, r5
 80105dc:	0005      	movs	r5, r0
 80105de:	9314      	str	r3, [sp, #80]	; 0x50
 80105e0:	9b08      	ldr	r3, [sp, #32]
 80105e2:	4013      	ands	r3, r2
 80105e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80105e6:	0031      	movs	r1, r6
 80105e8:	9805      	ldr	r0, [sp, #20]
 80105ea:	f7ff fa3d 	bl	800fa68 <quorem>
 80105ee:	0003      	movs	r3, r0
 80105f0:	0021      	movs	r1, r4
 80105f2:	3330      	adds	r3, #48	; 0x30
 80105f4:	900d      	str	r0, [sp, #52]	; 0x34
 80105f6:	9805      	ldr	r0, [sp, #20]
 80105f8:	9307      	str	r3, [sp, #28]
 80105fa:	f000 fc69 	bl	8010ed0 <__mcmp>
 80105fe:	002a      	movs	r2, r5
 8010600:	900e      	str	r0, [sp, #56]	; 0x38
 8010602:	0031      	movs	r1, r6
 8010604:	0038      	movs	r0, r7
 8010606:	f000 fc7f 	bl	8010f08 <__mdiff>
 801060a:	68c3      	ldr	r3, [r0, #12]
 801060c:	9008      	str	r0, [sp, #32]
 801060e:	9310      	str	r3, [sp, #64]	; 0x40
 8010610:	2301      	movs	r3, #1
 8010612:	930c      	str	r3, [sp, #48]	; 0x30
 8010614:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010616:	2b00      	cmp	r3, #0
 8010618:	d104      	bne.n	8010624 <_dtoa_r+0xaa4>
 801061a:	0001      	movs	r1, r0
 801061c:	9805      	ldr	r0, [sp, #20]
 801061e:	f000 fc57 	bl	8010ed0 <__mcmp>
 8010622:	900c      	str	r0, [sp, #48]	; 0x30
 8010624:	0038      	movs	r0, r7
 8010626:	9908      	ldr	r1, [sp, #32]
 8010628:	f000 fa12 	bl	8010a50 <_Bfree>
 801062c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801062e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010630:	3301      	adds	r3, #1
 8010632:	9308      	str	r3, [sp, #32]
 8010634:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010636:	4313      	orrs	r3, r2
 8010638:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801063a:	4313      	orrs	r3, r2
 801063c:	d10c      	bne.n	8010658 <_dtoa_r+0xad8>
 801063e:	9b07      	ldr	r3, [sp, #28]
 8010640:	2b39      	cmp	r3, #57	; 0x39
 8010642:	d026      	beq.n	8010692 <_dtoa_r+0xb12>
 8010644:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010646:	2b00      	cmp	r3, #0
 8010648:	dd02      	ble.n	8010650 <_dtoa_r+0xad0>
 801064a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801064c:	3331      	adds	r3, #49	; 0x31
 801064e:	9307      	str	r3, [sp, #28]
 8010650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010652:	9a07      	ldr	r2, [sp, #28]
 8010654:	701a      	strb	r2, [r3, #0]
 8010656:	e76a      	b.n	801052e <_dtoa_r+0x9ae>
 8010658:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801065a:	2b00      	cmp	r3, #0
 801065c:	db04      	blt.n	8010668 <_dtoa_r+0xae8>
 801065e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8010660:	4313      	orrs	r3, r2
 8010662:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010664:	4313      	orrs	r3, r2
 8010666:	d11f      	bne.n	80106a8 <_dtoa_r+0xb28>
 8010668:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801066a:	2b00      	cmp	r3, #0
 801066c:	ddf0      	ble.n	8010650 <_dtoa_r+0xad0>
 801066e:	9905      	ldr	r1, [sp, #20]
 8010670:	2201      	movs	r2, #1
 8010672:	0038      	movs	r0, r7
 8010674:	f000 fbbe 	bl	8010df4 <__lshift>
 8010678:	0031      	movs	r1, r6
 801067a:	9005      	str	r0, [sp, #20]
 801067c:	f000 fc28 	bl	8010ed0 <__mcmp>
 8010680:	2800      	cmp	r0, #0
 8010682:	dc03      	bgt.n	801068c <_dtoa_r+0xb0c>
 8010684:	d1e4      	bne.n	8010650 <_dtoa_r+0xad0>
 8010686:	9b07      	ldr	r3, [sp, #28]
 8010688:	07db      	lsls	r3, r3, #31
 801068a:	d5e1      	bpl.n	8010650 <_dtoa_r+0xad0>
 801068c:	9b07      	ldr	r3, [sp, #28]
 801068e:	2b39      	cmp	r3, #57	; 0x39
 8010690:	d1db      	bne.n	801064a <_dtoa_r+0xaca>
 8010692:	2339      	movs	r3, #57	; 0x39
 8010694:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010696:	7013      	strb	r3, [r2, #0]
 8010698:	9b08      	ldr	r3, [sp, #32]
 801069a:	9308      	str	r3, [sp, #32]
 801069c:	3b01      	subs	r3, #1
 801069e:	781a      	ldrb	r2, [r3, #0]
 80106a0:	2a39      	cmp	r2, #57	; 0x39
 80106a2:	d068      	beq.n	8010776 <_dtoa_r+0xbf6>
 80106a4:	3201      	adds	r2, #1
 80106a6:	e7d5      	b.n	8010654 <_dtoa_r+0xad4>
 80106a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	dd07      	ble.n	80106be <_dtoa_r+0xb3e>
 80106ae:	9b07      	ldr	r3, [sp, #28]
 80106b0:	2b39      	cmp	r3, #57	; 0x39
 80106b2:	d0ee      	beq.n	8010692 <_dtoa_r+0xb12>
 80106b4:	9b07      	ldr	r3, [sp, #28]
 80106b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80106b8:	3301      	adds	r3, #1
 80106ba:	7013      	strb	r3, [r2, #0]
 80106bc:	e737      	b.n	801052e <_dtoa_r+0x9ae>
 80106be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80106c0:	9a07      	ldr	r2, [sp, #28]
 80106c2:	701a      	strb	r2, [r3, #0]
 80106c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80106c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80106c8:	4293      	cmp	r3, r2
 80106ca:	d03e      	beq.n	801074a <_dtoa_r+0xbca>
 80106cc:	2300      	movs	r3, #0
 80106ce:	220a      	movs	r2, #10
 80106d0:	9905      	ldr	r1, [sp, #20]
 80106d2:	0038      	movs	r0, r7
 80106d4:	f000 f9e0 	bl	8010a98 <__multadd>
 80106d8:	2300      	movs	r3, #0
 80106da:	9005      	str	r0, [sp, #20]
 80106dc:	220a      	movs	r2, #10
 80106de:	0021      	movs	r1, r4
 80106e0:	0038      	movs	r0, r7
 80106e2:	42ac      	cmp	r4, r5
 80106e4:	d106      	bne.n	80106f4 <_dtoa_r+0xb74>
 80106e6:	f000 f9d7 	bl	8010a98 <__multadd>
 80106ea:	0004      	movs	r4, r0
 80106ec:	0005      	movs	r5, r0
 80106ee:	9b08      	ldr	r3, [sp, #32]
 80106f0:	930a      	str	r3, [sp, #40]	; 0x28
 80106f2:	e778      	b.n	80105e6 <_dtoa_r+0xa66>
 80106f4:	f000 f9d0 	bl	8010a98 <__multadd>
 80106f8:	0029      	movs	r1, r5
 80106fa:	0004      	movs	r4, r0
 80106fc:	2300      	movs	r3, #0
 80106fe:	220a      	movs	r2, #10
 8010700:	0038      	movs	r0, r7
 8010702:	f000 f9c9 	bl	8010a98 <__multadd>
 8010706:	0005      	movs	r5, r0
 8010708:	e7f1      	b.n	80106ee <_dtoa_r+0xb6e>
 801070a:	9b07      	ldr	r3, [sp, #28]
 801070c:	930c      	str	r3, [sp, #48]	; 0x30
 801070e:	2400      	movs	r4, #0
 8010710:	0031      	movs	r1, r6
 8010712:	9805      	ldr	r0, [sp, #20]
 8010714:	f7ff f9a8 	bl	800fa68 <quorem>
 8010718:	9b06      	ldr	r3, [sp, #24]
 801071a:	3030      	adds	r0, #48	; 0x30
 801071c:	5518      	strb	r0, [r3, r4]
 801071e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010720:	3401      	adds	r4, #1
 8010722:	9007      	str	r0, [sp, #28]
 8010724:	42a3      	cmp	r3, r4
 8010726:	dd07      	ble.n	8010738 <_dtoa_r+0xbb8>
 8010728:	2300      	movs	r3, #0
 801072a:	220a      	movs	r2, #10
 801072c:	0038      	movs	r0, r7
 801072e:	9905      	ldr	r1, [sp, #20]
 8010730:	f000 f9b2 	bl	8010a98 <__multadd>
 8010734:	9005      	str	r0, [sp, #20]
 8010736:	e7eb      	b.n	8010710 <_dtoa_r+0xb90>
 8010738:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801073a:	2001      	movs	r0, #1
 801073c:	2b00      	cmp	r3, #0
 801073e:	dd00      	ble.n	8010742 <_dtoa_r+0xbc2>
 8010740:	0018      	movs	r0, r3
 8010742:	2400      	movs	r4, #0
 8010744:	9b06      	ldr	r3, [sp, #24]
 8010746:	181b      	adds	r3, r3, r0
 8010748:	9308      	str	r3, [sp, #32]
 801074a:	9905      	ldr	r1, [sp, #20]
 801074c:	2201      	movs	r2, #1
 801074e:	0038      	movs	r0, r7
 8010750:	f000 fb50 	bl	8010df4 <__lshift>
 8010754:	0031      	movs	r1, r6
 8010756:	9005      	str	r0, [sp, #20]
 8010758:	f000 fbba 	bl	8010ed0 <__mcmp>
 801075c:	2800      	cmp	r0, #0
 801075e:	dc9b      	bgt.n	8010698 <_dtoa_r+0xb18>
 8010760:	d102      	bne.n	8010768 <_dtoa_r+0xbe8>
 8010762:	9b07      	ldr	r3, [sp, #28]
 8010764:	07db      	lsls	r3, r3, #31
 8010766:	d497      	bmi.n	8010698 <_dtoa_r+0xb18>
 8010768:	9b08      	ldr	r3, [sp, #32]
 801076a:	9308      	str	r3, [sp, #32]
 801076c:	3b01      	subs	r3, #1
 801076e:	781a      	ldrb	r2, [r3, #0]
 8010770:	2a30      	cmp	r2, #48	; 0x30
 8010772:	d0fa      	beq.n	801076a <_dtoa_r+0xbea>
 8010774:	e6db      	b.n	801052e <_dtoa_r+0x9ae>
 8010776:	9a06      	ldr	r2, [sp, #24]
 8010778:	429a      	cmp	r2, r3
 801077a:	d18e      	bne.n	801069a <_dtoa_r+0xb1a>
 801077c:	9b02      	ldr	r3, [sp, #8]
 801077e:	3301      	adds	r3, #1
 8010780:	9302      	str	r3, [sp, #8]
 8010782:	2331      	movs	r3, #49	; 0x31
 8010784:	e799      	b.n	80106ba <_dtoa_r+0xb3a>
 8010786:	4b09      	ldr	r3, [pc, #36]	; (80107ac <_dtoa_r+0xc2c>)
 8010788:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801078a:	9306      	str	r3, [sp, #24]
 801078c:	4b08      	ldr	r3, [pc, #32]	; (80107b0 <_dtoa_r+0xc30>)
 801078e:	2a00      	cmp	r2, #0
 8010790:	d001      	beq.n	8010796 <_dtoa_r+0xc16>
 8010792:	f7ff fa3f 	bl	800fc14 <_dtoa_r+0x94>
 8010796:	f7ff fa3f 	bl	800fc18 <_dtoa_r+0x98>
 801079a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801079c:	2b00      	cmp	r3, #0
 801079e:	dcb6      	bgt.n	801070e <_dtoa_r+0xb8e>
 80107a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80107a2:	2b02      	cmp	r3, #2
 80107a4:	dd00      	ble.n	80107a8 <_dtoa_r+0xc28>
 80107a6:	e6ac      	b.n	8010502 <_dtoa_r+0x982>
 80107a8:	e7b1      	b.n	801070e <_dtoa_r+0xb8e>
 80107aa:	46c0      	nop			; (mov r8, r8)
 80107ac:	08013b71 	.word	0x08013b71
 80107b0:	08013b79 	.word	0x08013b79

080107b4 <__sflush_r>:
 80107b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80107b6:	898b      	ldrh	r3, [r1, #12]
 80107b8:	0005      	movs	r5, r0
 80107ba:	000c      	movs	r4, r1
 80107bc:	071a      	lsls	r2, r3, #28
 80107be:	d45f      	bmi.n	8010880 <__sflush_r+0xcc>
 80107c0:	684a      	ldr	r2, [r1, #4]
 80107c2:	2a00      	cmp	r2, #0
 80107c4:	dc04      	bgt.n	80107d0 <__sflush_r+0x1c>
 80107c6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80107c8:	2a00      	cmp	r2, #0
 80107ca:	dc01      	bgt.n	80107d0 <__sflush_r+0x1c>
 80107cc:	2000      	movs	r0, #0
 80107ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80107d0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80107d2:	2f00      	cmp	r7, #0
 80107d4:	d0fa      	beq.n	80107cc <__sflush_r+0x18>
 80107d6:	2200      	movs	r2, #0
 80107d8:	2180      	movs	r1, #128	; 0x80
 80107da:	682e      	ldr	r6, [r5, #0]
 80107dc:	602a      	str	r2, [r5, #0]
 80107de:	001a      	movs	r2, r3
 80107e0:	0149      	lsls	r1, r1, #5
 80107e2:	400a      	ands	r2, r1
 80107e4:	420b      	tst	r3, r1
 80107e6:	d034      	beq.n	8010852 <__sflush_r+0x9e>
 80107e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80107ea:	89a3      	ldrh	r3, [r4, #12]
 80107ec:	075b      	lsls	r3, r3, #29
 80107ee:	d506      	bpl.n	80107fe <__sflush_r+0x4a>
 80107f0:	6863      	ldr	r3, [r4, #4]
 80107f2:	1ac0      	subs	r0, r0, r3
 80107f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d001      	beq.n	80107fe <__sflush_r+0x4a>
 80107fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80107fc:	1ac0      	subs	r0, r0, r3
 80107fe:	0002      	movs	r2, r0
 8010800:	6a21      	ldr	r1, [r4, #32]
 8010802:	2300      	movs	r3, #0
 8010804:	0028      	movs	r0, r5
 8010806:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8010808:	47b8      	blx	r7
 801080a:	89a1      	ldrh	r1, [r4, #12]
 801080c:	1c43      	adds	r3, r0, #1
 801080e:	d106      	bne.n	801081e <__sflush_r+0x6a>
 8010810:	682b      	ldr	r3, [r5, #0]
 8010812:	2b1d      	cmp	r3, #29
 8010814:	d831      	bhi.n	801087a <__sflush_r+0xc6>
 8010816:	4a2c      	ldr	r2, [pc, #176]	; (80108c8 <__sflush_r+0x114>)
 8010818:	40da      	lsrs	r2, r3
 801081a:	07d3      	lsls	r3, r2, #31
 801081c:	d52d      	bpl.n	801087a <__sflush_r+0xc6>
 801081e:	2300      	movs	r3, #0
 8010820:	6063      	str	r3, [r4, #4]
 8010822:	6923      	ldr	r3, [r4, #16]
 8010824:	6023      	str	r3, [r4, #0]
 8010826:	04cb      	lsls	r3, r1, #19
 8010828:	d505      	bpl.n	8010836 <__sflush_r+0x82>
 801082a:	1c43      	adds	r3, r0, #1
 801082c:	d102      	bne.n	8010834 <__sflush_r+0x80>
 801082e:	682b      	ldr	r3, [r5, #0]
 8010830:	2b00      	cmp	r3, #0
 8010832:	d100      	bne.n	8010836 <__sflush_r+0x82>
 8010834:	6560      	str	r0, [r4, #84]	; 0x54
 8010836:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010838:	602e      	str	r6, [r5, #0]
 801083a:	2900      	cmp	r1, #0
 801083c:	d0c6      	beq.n	80107cc <__sflush_r+0x18>
 801083e:	0023      	movs	r3, r4
 8010840:	3344      	adds	r3, #68	; 0x44
 8010842:	4299      	cmp	r1, r3
 8010844:	d002      	beq.n	801084c <__sflush_r+0x98>
 8010846:	0028      	movs	r0, r5
 8010848:	f000 fc86 	bl	8011158 <_free_r>
 801084c:	2000      	movs	r0, #0
 801084e:	6360      	str	r0, [r4, #52]	; 0x34
 8010850:	e7bd      	b.n	80107ce <__sflush_r+0x1a>
 8010852:	2301      	movs	r3, #1
 8010854:	0028      	movs	r0, r5
 8010856:	6a21      	ldr	r1, [r4, #32]
 8010858:	47b8      	blx	r7
 801085a:	1c43      	adds	r3, r0, #1
 801085c:	d1c5      	bne.n	80107ea <__sflush_r+0x36>
 801085e:	682b      	ldr	r3, [r5, #0]
 8010860:	2b00      	cmp	r3, #0
 8010862:	d0c2      	beq.n	80107ea <__sflush_r+0x36>
 8010864:	2b1d      	cmp	r3, #29
 8010866:	d001      	beq.n	801086c <__sflush_r+0xb8>
 8010868:	2b16      	cmp	r3, #22
 801086a:	d101      	bne.n	8010870 <__sflush_r+0xbc>
 801086c:	602e      	str	r6, [r5, #0]
 801086e:	e7ad      	b.n	80107cc <__sflush_r+0x18>
 8010870:	2340      	movs	r3, #64	; 0x40
 8010872:	89a2      	ldrh	r2, [r4, #12]
 8010874:	4313      	orrs	r3, r2
 8010876:	81a3      	strh	r3, [r4, #12]
 8010878:	e7a9      	b.n	80107ce <__sflush_r+0x1a>
 801087a:	2340      	movs	r3, #64	; 0x40
 801087c:	430b      	orrs	r3, r1
 801087e:	e7fa      	b.n	8010876 <__sflush_r+0xc2>
 8010880:	690f      	ldr	r7, [r1, #16]
 8010882:	2f00      	cmp	r7, #0
 8010884:	d0a2      	beq.n	80107cc <__sflush_r+0x18>
 8010886:	680a      	ldr	r2, [r1, #0]
 8010888:	600f      	str	r7, [r1, #0]
 801088a:	1bd2      	subs	r2, r2, r7
 801088c:	9201      	str	r2, [sp, #4]
 801088e:	2200      	movs	r2, #0
 8010890:	079b      	lsls	r3, r3, #30
 8010892:	d100      	bne.n	8010896 <__sflush_r+0xe2>
 8010894:	694a      	ldr	r2, [r1, #20]
 8010896:	60a2      	str	r2, [r4, #8]
 8010898:	9b01      	ldr	r3, [sp, #4]
 801089a:	2b00      	cmp	r3, #0
 801089c:	dc00      	bgt.n	80108a0 <__sflush_r+0xec>
 801089e:	e795      	b.n	80107cc <__sflush_r+0x18>
 80108a0:	003a      	movs	r2, r7
 80108a2:	0028      	movs	r0, r5
 80108a4:	9b01      	ldr	r3, [sp, #4]
 80108a6:	6a21      	ldr	r1, [r4, #32]
 80108a8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80108aa:	47b0      	blx	r6
 80108ac:	2800      	cmp	r0, #0
 80108ae:	dc06      	bgt.n	80108be <__sflush_r+0x10a>
 80108b0:	2340      	movs	r3, #64	; 0x40
 80108b2:	2001      	movs	r0, #1
 80108b4:	89a2      	ldrh	r2, [r4, #12]
 80108b6:	4240      	negs	r0, r0
 80108b8:	4313      	orrs	r3, r2
 80108ba:	81a3      	strh	r3, [r4, #12]
 80108bc:	e787      	b.n	80107ce <__sflush_r+0x1a>
 80108be:	9b01      	ldr	r3, [sp, #4]
 80108c0:	183f      	adds	r7, r7, r0
 80108c2:	1a1b      	subs	r3, r3, r0
 80108c4:	9301      	str	r3, [sp, #4]
 80108c6:	e7e7      	b.n	8010898 <__sflush_r+0xe4>
 80108c8:	20400001 	.word	0x20400001

080108cc <_fflush_r>:
 80108cc:	690b      	ldr	r3, [r1, #16]
 80108ce:	b570      	push	{r4, r5, r6, lr}
 80108d0:	0005      	movs	r5, r0
 80108d2:	000c      	movs	r4, r1
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d102      	bne.n	80108de <_fflush_r+0x12>
 80108d8:	2500      	movs	r5, #0
 80108da:	0028      	movs	r0, r5
 80108dc:	bd70      	pop	{r4, r5, r6, pc}
 80108de:	2800      	cmp	r0, #0
 80108e0:	d004      	beq.n	80108ec <_fflush_r+0x20>
 80108e2:	6983      	ldr	r3, [r0, #24]
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d101      	bne.n	80108ec <_fflush_r+0x20>
 80108e8:	f7fe f92e 	bl	800eb48 <__sinit>
 80108ec:	4b14      	ldr	r3, [pc, #80]	; (8010940 <_fflush_r+0x74>)
 80108ee:	429c      	cmp	r4, r3
 80108f0:	d11b      	bne.n	801092a <_fflush_r+0x5e>
 80108f2:	686c      	ldr	r4, [r5, #4]
 80108f4:	220c      	movs	r2, #12
 80108f6:	5ea3      	ldrsh	r3, [r4, r2]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d0ed      	beq.n	80108d8 <_fflush_r+0xc>
 80108fc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80108fe:	07d2      	lsls	r2, r2, #31
 8010900:	d404      	bmi.n	801090c <_fflush_r+0x40>
 8010902:	059b      	lsls	r3, r3, #22
 8010904:	d402      	bmi.n	801090c <_fflush_r+0x40>
 8010906:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010908:	f7fe f9e3 	bl	800ecd2 <__retarget_lock_acquire_recursive>
 801090c:	0028      	movs	r0, r5
 801090e:	0021      	movs	r1, r4
 8010910:	f7ff ff50 	bl	80107b4 <__sflush_r>
 8010914:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010916:	0005      	movs	r5, r0
 8010918:	07db      	lsls	r3, r3, #31
 801091a:	d4de      	bmi.n	80108da <_fflush_r+0xe>
 801091c:	89a3      	ldrh	r3, [r4, #12]
 801091e:	059b      	lsls	r3, r3, #22
 8010920:	d4db      	bmi.n	80108da <_fflush_r+0xe>
 8010922:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010924:	f7fe f9d6 	bl	800ecd4 <__retarget_lock_release_recursive>
 8010928:	e7d7      	b.n	80108da <_fflush_r+0xe>
 801092a:	4b06      	ldr	r3, [pc, #24]	; (8010944 <_fflush_r+0x78>)
 801092c:	429c      	cmp	r4, r3
 801092e:	d101      	bne.n	8010934 <_fflush_r+0x68>
 8010930:	68ac      	ldr	r4, [r5, #8]
 8010932:	e7df      	b.n	80108f4 <_fflush_r+0x28>
 8010934:	4b04      	ldr	r3, [pc, #16]	; (8010948 <_fflush_r+0x7c>)
 8010936:	429c      	cmp	r4, r3
 8010938:	d1dc      	bne.n	80108f4 <_fflush_r+0x28>
 801093a:	68ec      	ldr	r4, [r5, #12]
 801093c:	e7da      	b.n	80108f4 <_fflush_r+0x28>
 801093e:	46c0      	nop			; (mov r8, r8)
 8010940:	080139f8 	.word	0x080139f8
 8010944:	08013a18 	.word	0x08013a18
 8010948:	080139d8 	.word	0x080139d8

0801094c <_localeconv_r>:
 801094c:	4800      	ldr	r0, [pc, #0]	; (8010950 <_localeconv_r+0x4>)
 801094e:	4770      	bx	lr
 8010950:	200001c8 	.word	0x200001c8

08010954 <_lseek_r>:
 8010954:	b570      	push	{r4, r5, r6, lr}
 8010956:	0004      	movs	r4, r0
 8010958:	0008      	movs	r0, r1
 801095a:	0011      	movs	r1, r2
 801095c:	001a      	movs	r2, r3
 801095e:	2300      	movs	r3, #0
 8010960:	4d05      	ldr	r5, [pc, #20]	; (8010978 <_lseek_r+0x24>)
 8010962:	602b      	str	r3, [r5, #0]
 8010964:	f7f3 feee 	bl	8004744 <_lseek>
 8010968:	1c43      	adds	r3, r0, #1
 801096a:	d103      	bne.n	8010974 <_lseek_r+0x20>
 801096c:	682b      	ldr	r3, [r5, #0]
 801096e:	2b00      	cmp	r3, #0
 8010970:	d000      	beq.n	8010974 <_lseek_r+0x20>
 8010972:	6023      	str	r3, [r4, #0]
 8010974:	bd70      	pop	{r4, r5, r6, pc}
 8010976:	46c0      	nop			; (mov r8, r8)
 8010978:	200021a4 	.word	0x200021a4

0801097c <malloc>:
 801097c:	b510      	push	{r4, lr}
 801097e:	4b03      	ldr	r3, [pc, #12]	; (801098c <malloc+0x10>)
 8010980:	0001      	movs	r1, r0
 8010982:	6818      	ldr	r0, [r3, #0]
 8010984:	f7fe f9da 	bl	800ed3c <_malloc_r>
 8010988:	bd10      	pop	{r4, pc}
 801098a:	46c0      	nop			; (mov r8, r8)
 801098c:	20000074 	.word	0x20000074

08010990 <memchr>:
 8010990:	b2c9      	uxtb	r1, r1
 8010992:	1882      	adds	r2, r0, r2
 8010994:	4290      	cmp	r0, r2
 8010996:	d101      	bne.n	801099c <memchr+0xc>
 8010998:	2000      	movs	r0, #0
 801099a:	4770      	bx	lr
 801099c:	7803      	ldrb	r3, [r0, #0]
 801099e:	428b      	cmp	r3, r1
 80109a0:	d0fb      	beq.n	801099a <memchr+0xa>
 80109a2:	3001      	adds	r0, #1
 80109a4:	e7f6      	b.n	8010994 <memchr+0x4>
	...

080109a8 <__malloc_lock>:
 80109a8:	b510      	push	{r4, lr}
 80109aa:	4802      	ldr	r0, [pc, #8]	; (80109b4 <__malloc_lock+0xc>)
 80109ac:	f7fe f991 	bl	800ecd2 <__retarget_lock_acquire_recursive>
 80109b0:	bd10      	pop	{r4, pc}
 80109b2:	46c0      	nop			; (mov r8, r8)
 80109b4:	20002198 	.word	0x20002198

080109b8 <__malloc_unlock>:
 80109b8:	b510      	push	{r4, lr}
 80109ba:	4802      	ldr	r0, [pc, #8]	; (80109c4 <__malloc_unlock+0xc>)
 80109bc:	f7fe f98a 	bl	800ecd4 <__retarget_lock_release_recursive>
 80109c0:	bd10      	pop	{r4, pc}
 80109c2:	46c0      	nop			; (mov r8, r8)
 80109c4:	20002198 	.word	0x20002198

080109c8 <_Balloc>:
 80109c8:	b570      	push	{r4, r5, r6, lr}
 80109ca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80109cc:	0006      	movs	r6, r0
 80109ce:	000c      	movs	r4, r1
 80109d0:	2d00      	cmp	r5, #0
 80109d2:	d10e      	bne.n	80109f2 <_Balloc+0x2a>
 80109d4:	2010      	movs	r0, #16
 80109d6:	f7ff ffd1 	bl	801097c <malloc>
 80109da:	1e02      	subs	r2, r0, #0
 80109dc:	6270      	str	r0, [r6, #36]	; 0x24
 80109de:	d104      	bne.n	80109ea <_Balloc+0x22>
 80109e0:	2166      	movs	r1, #102	; 0x66
 80109e2:	4b19      	ldr	r3, [pc, #100]	; (8010a48 <_Balloc+0x80>)
 80109e4:	4819      	ldr	r0, [pc, #100]	; (8010a4c <_Balloc+0x84>)
 80109e6:	f000 fe45 	bl	8011674 <__assert_func>
 80109ea:	6045      	str	r5, [r0, #4]
 80109ec:	6085      	str	r5, [r0, #8]
 80109ee:	6005      	str	r5, [r0, #0]
 80109f0:	60c5      	str	r5, [r0, #12]
 80109f2:	6a75      	ldr	r5, [r6, #36]	; 0x24
 80109f4:	68eb      	ldr	r3, [r5, #12]
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d013      	beq.n	8010a22 <_Balloc+0x5a>
 80109fa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80109fc:	00a2      	lsls	r2, r4, #2
 80109fe:	68db      	ldr	r3, [r3, #12]
 8010a00:	189b      	adds	r3, r3, r2
 8010a02:	6818      	ldr	r0, [r3, #0]
 8010a04:	2800      	cmp	r0, #0
 8010a06:	d118      	bne.n	8010a3a <_Balloc+0x72>
 8010a08:	2101      	movs	r1, #1
 8010a0a:	000d      	movs	r5, r1
 8010a0c:	40a5      	lsls	r5, r4
 8010a0e:	1d6a      	adds	r2, r5, #5
 8010a10:	0030      	movs	r0, r6
 8010a12:	0092      	lsls	r2, r2, #2
 8010a14:	f000 fb74 	bl	8011100 <_calloc_r>
 8010a18:	2800      	cmp	r0, #0
 8010a1a:	d00c      	beq.n	8010a36 <_Balloc+0x6e>
 8010a1c:	6044      	str	r4, [r0, #4]
 8010a1e:	6085      	str	r5, [r0, #8]
 8010a20:	e00d      	b.n	8010a3e <_Balloc+0x76>
 8010a22:	2221      	movs	r2, #33	; 0x21
 8010a24:	2104      	movs	r1, #4
 8010a26:	0030      	movs	r0, r6
 8010a28:	f000 fb6a 	bl	8011100 <_calloc_r>
 8010a2c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010a2e:	60e8      	str	r0, [r5, #12]
 8010a30:	68db      	ldr	r3, [r3, #12]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d1e1      	bne.n	80109fa <_Balloc+0x32>
 8010a36:	2000      	movs	r0, #0
 8010a38:	bd70      	pop	{r4, r5, r6, pc}
 8010a3a:	6802      	ldr	r2, [r0, #0]
 8010a3c:	601a      	str	r2, [r3, #0]
 8010a3e:	2300      	movs	r3, #0
 8010a40:	6103      	str	r3, [r0, #16]
 8010a42:	60c3      	str	r3, [r0, #12]
 8010a44:	e7f8      	b.n	8010a38 <_Balloc+0x70>
 8010a46:	46c0      	nop			; (mov r8, r8)
 8010a48:	08013b7e 	.word	0x08013b7e
 8010a4c:	08013c01 	.word	0x08013c01

08010a50 <_Bfree>:
 8010a50:	b570      	push	{r4, r5, r6, lr}
 8010a52:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010a54:	0005      	movs	r5, r0
 8010a56:	000c      	movs	r4, r1
 8010a58:	2e00      	cmp	r6, #0
 8010a5a:	d10e      	bne.n	8010a7a <_Bfree+0x2a>
 8010a5c:	2010      	movs	r0, #16
 8010a5e:	f7ff ff8d 	bl	801097c <malloc>
 8010a62:	1e02      	subs	r2, r0, #0
 8010a64:	6268      	str	r0, [r5, #36]	; 0x24
 8010a66:	d104      	bne.n	8010a72 <_Bfree+0x22>
 8010a68:	218a      	movs	r1, #138	; 0x8a
 8010a6a:	4b09      	ldr	r3, [pc, #36]	; (8010a90 <_Bfree+0x40>)
 8010a6c:	4809      	ldr	r0, [pc, #36]	; (8010a94 <_Bfree+0x44>)
 8010a6e:	f000 fe01 	bl	8011674 <__assert_func>
 8010a72:	6046      	str	r6, [r0, #4]
 8010a74:	6086      	str	r6, [r0, #8]
 8010a76:	6006      	str	r6, [r0, #0]
 8010a78:	60c6      	str	r6, [r0, #12]
 8010a7a:	2c00      	cmp	r4, #0
 8010a7c:	d007      	beq.n	8010a8e <_Bfree+0x3e>
 8010a7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010a80:	6862      	ldr	r2, [r4, #4]
 8010a82:	68db      	ldr	r3, [r3, #12]
 8010a84:	0092      	lsls	r2, r2, #2
 8010a86:	189b      	adds	r3, r3, r2
 8010a88:	681a      	ldr	r2, [r3, #0]
 8010a8a:	6022      	str	r2, [r4, #0]
 8010a8c:	601c      	str	r4, [r3, #0]
 8010a8e:	bd70      	pop	{r4, r5, r6, pc}
 8010a90:	08013b7e 	.word	0x08013b7e
 8010a94:	08013c01 	.word	0x08013c01

08010a98 <__multadd>:
 8010a98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010a9a:	000e      	movs	r6, r1
 8010a9c:	9001      	str	r0, [sp, #4]
 8010a9e:	000c      	movs	r4, r1
 8010aa0:	001d      	movs	r5, r3
 8010aa2:	2000      	movs	r0, #0
 8010aa4:	690f      	ldr	r7, [r1, #16]
 8010aa6:	3614      	adds	r6, #20
 8010aa8:	6833      	ldr	r3, [r6, #0]
 8010aaa:	3001      	adds	r0, #1
 8010aac:	b299      	uxth	r1, r3
 8010aae:	4351      	muls	r1, r2
 8010ab0:	0c1b      	lsrs	r3, r3, #16
 8010ab2:	4353      	muls	r3, r2
 8010ab4:	1949      	adds	r1, r1, r5
 8010ab6:	0c0d      	lsrs	r5, r1, #16
 8010ab8:	195b      	adds	r3, r3, r5
 8010aba:	0c1d      	lsrs	r5, r3, #16
 8010abc:	b289      	uxth	r1, r1
 8010abe:	041b      	lsls	r3, r3, #16
 8010ac0:	185b      	adds	r3, r3, r1
 8010ac2:	c608      	stmia	r6!, {r3}
 8010ac4:	4287      	cmp	r7, r0
 8010ac6:	dcef      	bgt.n	8010aa8 <__multadd+0x10>
 8010ac8:	2d00      	cmp	r5, #0
 8010aca:	d022      	beq.n	8010b12 <__multadd+0x7a>
 8010acc:	68a3      	ldr	r3, [r4, #8]
 8010ace:	42bb      	cmp	r3, r7
 8010ad0:	dc19      	bgt.n	8010b06 <__multadd+0x6e>
 8010ad2:	6863      	ldr	r3, [r4, #4]
 8010ad4:	9801      	ldr	r0, [sp, #4]
 8010ad6:	1c59      	adds	r1, r3, #1
 8010ad8:	f7ff ff76 	bl	80109c8 <_Balloc>
 8010adc:	1e06      	subs	r6, r0, #0
 8010ade:	d105      	bne.n	8010aec <__multadd+0x54>
 8010ae0:	0002      	movs	r2, r0
 8010ae2:	21b5      	movs	r1, #181	; 0xb5
 8010ae4:	4b0c      	ldr	r3, [pc, #48]	; (8010b18 <__multadd+0x80>)
 8010ae6:	480d      	ldr	r0, [pc, #52]	; (8010b1c <__multadd+0x84>)
 8010ae8:	f000 fdc4 	bl	8011674 <__assert_func>
 8010aec:	0021      	movs	r1, r4
 8010aee:	6923      	ldr	r3, [r4, #16]
 8010af0:	310c      	adds	r1, #12
 8010af2:	1c9a      	adds	r2, r3, #2
 8010af4:	0092      	lsls	r2, r2, #2
 8010af6:	300c      	adds	r0, #12
 8010af8:	f7fe f8ed 	bl	800ecd6 <memcpy>
 8010afc:	0021      	movs	r1, r4
 8010afe:	9801      	ldr	r0, [sp, #4]
 8010b00:	f7ff ffa6 	bl	8010a50 <_Bfree>
 8010b04:	0034      	movs	r4, r6
 8010b06:	1d3b      	adds	r3, r7, #4
 8010b08:	009b      	lsls	r3, r3, #2
 8010b0a:	18e3      	adds	r3, r4, r3
 8010b0c:	605d      	str	r5, [r3, #4]
 8010b0e:	1c7b      	adds	r3, r7, #1
 8010b10:	6123      	str	r3, [r4, #16]
 8010b12:	0020      	movs	r0, r4
 8010b14:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010b16:	46c0      	nop			; (mov r8, r8)
 8010b18:	08013bf0 	.word	0x08013bf0
 8010b1c:	08013c01 	.word	0x08013c01

08010b20 <__hi0bits>:
 8010b20:	0003      	movs	r3, r0
 8010b22:	0c02      	lsrs	r2, r0, #16
 8010b24:	2000      	movs	r0, #0
 8010b26:	4282      	cmp	r2, r0
 8010b28:	d101      	bne.n	8010b2e <__hi0bits+0xe>
 8010b2a:	041b      	lsls	r3, r3, #16
 8010b2c:	3010      	adds	r0, #16
 8010b2e:	0e1a      	lsrs	r2, r3, #24
 8010b30:	d101      	bne.n	8010b36 <__hi0bits+0x16>
 8010b32:	3008      	adds	r0, #8
 8010b34:	021b      	lsls	r3, r3, #8
 8010b36:	0f1a      	lsrs	r2, r3, #28
 8010b38:	d101      	bne.n	8010b3e <__hi0bits+0x1e>
 8010b3a:	3004      	adds	r0, #4
 8010b3c:	011b      	lsls	r3, r3, #4
 8010b3e:	0f9a      	lsrs	r2, r3, #30
 8010b40:	d101      	bne.n	8010b46 <__hi0bits+0x26>
 8010b42:	3002      	adds	r0, #2
 8010b44:	009b      	lsls	r3, r3, #2
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	db03      	blt.n	8010b52 <__hi0bits+0x32>
 8010b4a:	3001      	adds	r0, #1
 8010b4c:	005b      	lsls	r3, r3, #1
 8010b4e:	d400      	bmi.n	8010b52 <__hi0bits+0x32>
 8010b50:	2020      	movs	r0, #32
 8010b52:	4770      	bx	lr

08010b54 <__lo0bits>:
 8010b54:	6803      	ldr	r3, [r0, #0]
 8010b56:	0002      	movs	r2, r0
 8010b58:	2107      	movs	r1, #7
 8010b5a:	0018      	movs	r0, r3
 8010b5c:	4008      	ands	r0, r1
 8010b5e:	420b      	tst	r3, r1
 8010b60:	d00d      	beq.n	8010b7e <__lo0bits+0x2a>
 8010b62:	3906      	subs	r1, #6
 8010b64:	2000      	movs	r0, #0
 8010b66:	420b      	tst	r3, r1
 8010b68:	d105      	bne.n	8010b76 <__lo0bits+0x22>
 8010b6a:	3002      	adds	r0, #2
 8010b6c:	4203      	tst	r3, r0
 8010b6e:	d003      	beq.n	8010b78 <__lo0bits+0x24>
 8010b70:	40cb      	lsrs	r3, r1
 8010b72:	0008      	movs	r0, r1
 8010b74:	6013      	str	r3, [r2, #0]
 8010b76:	4770      	bx	lr
 8010b78:	089b      	lsrs	r3, r3, #2
 8010b7a:	6013      	str	r3, [r2, #0]
 8010b7c:	e7fb      	b.n	8010b76 <__lo0bits+0x22>
 8010b7e:	b299      	uxth	r1, r3
 8010b80:	2900      	cmp	r1, #0
 8010b82:	d101      	bne.n	8010b88 <__lo0bits+0x34>
 8010b84:	2010      	movs	r0, #16
 8010b86:	0c1b      	lsrs	r3, r3, #16
 8010b88:	b2d9      	uxtb	r1, r3
 8010b8a:	2900      	cmp	r1, #0
 8010b8c:	d101      	bne.n	8010b92 <__lo0bits+0x3e>
 8010b8e:	3008      	adds	r0, #8
 8010b90:	0a1b      	lsrs	r3, r3, #8
 8010b92:	0719      	lsls	r1, r3, #28
 8010b94:	d101      	bne.n	8010b9a <__lo0bits+0x46>
 8010b96:	3004      	adds	r0, #4
 8010b98:	091b      	lsrs	r3, r3, #4
 8010b9a:	0799      	lsls	r1, r3, #30
 8010b9c:	d101      	bne.n	8010ba2 <__lo0bits+0x4e>
 8010b9e:	3002      	adds	r0, #2
 8010ba0:	089b      	lsrs	r3, r3, #2
 8010ba2:	07d9      	lsls	r1, r3, #31
 8010ba4:	d4e9      	bmi.n	8010b7a <__lo0bits+0x26>
 8010ba6:	3001      	adds	r0, #1
 8010ba8:	085b      	lsrs	r3, r3, #1
 8010baa:	d1e6      	bne.n	8010b7a <__lo0bits+0x26>
 8010bac:	2020      	movs	r0, #32
 8010bae:	e7e2      	b.n	8010b76 <__lo0bits+0x22>

08010bb0 <__i2b>:
 8010bb0:	b510      	push	{r4, lr}
 8010bb2:	000c      	movs	r4, r1
 8010bb4:	2101      	movs	r1, #1
 8010bb6:	f7ff ff07 	bl	80109c8 <_Balloc>
 8010bba:	2800      	cmp	r0, #0
 8010bbc:	d106      	bne.n	8010bcc <__i2b+0x1c>
 8010bbe:	21a0      	movs	r1, #160	; 0xa0
 8010bc0:	0002      	movs	r2, r0
 8010bc2:	4b04      	ldr	r3, [pc, #16]	; (8010bd4 <__i2b+0x24>)
 8010bc4:	4804      	ldr	r0, [pc, #16]	; (8010bd8 <__i2b+0x28>)
 8010bc6:	0049      	lsls	r1, r1, #1
 8010bc8:	f000 fd54 	bl	8011674 <__assert_func>
 8010bcc:	2301      	movs	r3, #1
 8010bce:	6144      	str	r4, [r0, #20]
 8010bd0:	6103      	str	r3, [r0, #16]
 8010bd2:	bd10      	pop	{r4, pc}
 8010bd4:	08013bf0 	.word	0x08013bf0
 8010bd8:	08013c01 	.word	0x08013c01

08010bdc <__multiply>:
 8010bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010bde:	690b      	ldr	r3, [r1, #16]
 8010be0:	0014      	movs	r4, r2
 8010be2:	6912      	ldr	r2, [r2, #16]
 8010be4:	000d      	movs	r5, r1
 8010be6:	b089      	sub	sp, #36	; 0x24
 8010be8:	4293      	cmp	r3, r2
 8010bea:	da01      	bge.n	8010bf0 <__multiply+0x14>
 8010bec:	0025      	movs	r5, r4
 8010bee:	000c      	movs	r4, r1
 8010bf0:	692f      	ldr	r7, [r5, #16]
 8010bf2:	6926      	ldr	r6, [r4, #16]
 8010bf4:	6869      	ldr	r1, [r5, #4]
 8010bf6:	19bb      	adds	r3, r7, r6
 8010bf8:	9302      	str	r3, [sp, #8]
 8010bfa:	68ab      	ldr	r3, [r5, #8]
 8010bfc:	19ba      	adds	r2, r7, r6
 8010bfe:	4293      	cmp	r3, r2
 8010c00:	da00      	bge.n	8010c04 <__multiply+0x28>
 8010c02:	3101      	adds	r1, #1
 8010c04:	f7ff fee0 	bl	80109c8 <_Balloc>
 8010c08:	9001      	str	r0, [sp, #4]
 8010c0a:	2800      	cmp	r0, #0
 8010c0c:	d106      	bne.n	8010c1c <__multiply+0x40>
 8010c0e:	215e      	movs	r1, #94	; 0x5e
 8010c10:	0002      	movs	r2, r0
 8010c12:	4b48      	ldr	r3, [pc, #288]	; (8010d34 <__multiply+0x158>)
 8010c14:	4848      	ldr	r0, [pc, #288]	; (8010d38 <__multiply+0x15c>)
 8010c16:	31ff      	adds	r1, #255	; 0xff
 8010c18:	f000 fd2c 	bl	8011674 <__assert_func>
 8010c1c:	9b01      	ldr	r3, [sp, #4]
 8010c1e:	2200      	movs	r2, #0
 8010c20:	3314      	adds	r3, #20
 8010c22:	469c      	mov	ip, r3
 8010c24:	19bb      	adds	r3, r7, r6
 8010c26:	009b      	lsls	r3, r3, #2
 8010c28:	4463      	add	r3, ip
 8010c2a:	9303      	str	r3, [sp, #12]
 8010c2c:	4663      	mov	r3, ip
 8010c2e:	9903      	ldr	r1, [sp, #12]
 8010c30:	428b      	cmp	r3, r1
 8010c32:	d32c      	bcc.n	8010c8e <__multiply+0xb2>
 8010c34:	002b      	movs	r3, r5
 8010c36:	0022      	movs	r2, r4
 8010c38:	3314      	adds	r3, #20
 8010c3a:	00bf      	lsls	r7, r7, #2
 8010c3c:	3214      	adds	r2, #20
 8010c3e:	9306      	str	r3, [sp, #24]
 8010c40:	00b6      	lsls	r6, r6, #2
 8010c42:	19db      	adds	r3, r3, r7
 8010c44:	9304      	str	r3, [sp, #16]
 8010c46:	1993      	adds	r3, r2, r6
 8010c48:	9307      	str	r3, [sp, #28]
 8010c4a:	2304      	movs	r3, #4
 8010c4c:	9305      	str	r3, [sp, #20]
 8010c4e:	002b      	movs	r3, r5
 8010c50:	9904      	ldr	r1, [sp, #16]
 8010c52:	3315      	adds	r3, #21
 8010c54:	9200      	str	r2, [sp, #0]
 8010c56:	4299      	cmp	r1, r3
 8010c58:	d305      	bcc.n	8010c66 <__multiply+0x8a>
 8010c5a:	1b4b      	subs	r3, r1, r5
 8010c5c:	3b15      	subs	r3, #21
 8010c5e:	089b      	lsrs	r3, r3, #2
 8010c60:	3301      	adds	r3, #1
 8010c62:	009b      	lsls	r3, r3, #2
 8010c64:	9305      	str	r3, [sp, #20]
 8010c66:	9b07      	ldr	r3, [sp, #28]
 8010c68:	9a00      	ldr	r2, [sp, #0]
 8010c6a:	429a      	cmp	r2, r3
 8010c6c:	d311      	bcc.n	8010c92 <__multiply+0xb6>
 8010c6e:	9b02      	ldr	r3, [sp, #8]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	dd06      	ble.n	8010c82 <__multiply+0xa6>
 8010c74:	9b03      	ldr	r3, [sp, #12]
 8010c76:	3b04      	subs	r3, #4
 8010c78:	9303      	str	r3, [sp, #12]
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	9300      	str	r3, [sp, #0]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d053      	beq.n	8010d2a <__multiply+0x14e>
 8010c82:	9b01      	ldr	r3, [sp, #4]
 8010c84:	9a02      	ldr	r2, [sp, #8]
 8010c86:	0018      	movs	r0, r3
 8010c88:	611a      	str	r2, [r3, #16]
 8010c8a:	b009      	add	sp, #36	; 0x24
 8010c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c8e:	c304      	stmia	r3!, {r2}
 8010c90:	e7cd      	b.n	8010c2e <__multiply+0x52>
 8010c92:	9b00      	ldr	r3, [sp, #0]
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	b298      	uxth	r0, r3
 8010c98:	2800      	cmp	r0, #0
 8010c9a:	d01b      	beq.n	8010cd4 <__multiply+0xf8>
 8010c9c:	4667      	mov	r7, ip
 8010c9e:	2400      	movs	r4, #0
 8010ca0:	9e06      	ldr	r6, [sp, #24]
 8010ca2:	ce02      	ldmia	r6!, {r1}
 8010ca4:	683a      	ldr	r2, [r7, #0]
 8010ca6:	b28b      	uxth	r3, r1
 8010ca8:	4343      	muls	r3, r0
 8010caa:	b292      	uxth	r2, r2
 8010cac:	189b      	adds	r3, r3, r2
 8010cae:	191b      	adds	r3, r3, r4
 8010cb0:	0c0c      	lsrs	r4, r1, #16
 8010cb2:	4344      	muls	r4, r0
 8010cb4:	683a      	ldr	r2, [r7, #0]
 8010cb6:	0c11      	lsrs	r1, r2, #16
 8010cb8:	1861      	adds	r1, r4, r1
 8010cba:	0c1c      	lsrs	r4, r3, #16
 8010cbc:	1909      	adds	r1, r1, r4
 8010cbe:	0c0c      	lsrs	r4, r1, #16
 8010cc0:	b29b      	uxth	r3, r3
 8010cc2:	0409      	lsls	r1, r1, #16
 8010cc4:	430b      	orrs	r3, r1
 8010cc6:	c708      	stmia	r7!, {r3}
 8010cc8:	9b04      	ldr	r3, [sp, #16]
 8010cca:	42b3      	cmp	r3, r6
 8010ccc:	d8e9      	bhi.n	8010ca2 <__multiply+0xc6>
 8010cce:	4663      	mov	r3, ip
 8010cd0:	9a05      	ldr	r2, [sp, #20]
 8010cd2:	509c      	str	r4, [r3, r2]
 8010cd4:	9b00      	ldr	r3, [sp, #0]
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	0c1e      	lsrs	r6, r3, #16
 8010cda:	d020      	beq.n	8010d1e <__multiply+0x142>
 8010cdc:	4663      	mov	r3, ip
 8010cde:	002c      	movs	r4, r5
 8010ce0:	4660      	mov	r0, ip
 8010ce2:	2700      	movs	r7, #0
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	3414      	adds	r4, #20
 8010ce8:	6822      	ldr	r2, [r4, #0]
 8010cea:	b29b      	uxth	r3, r3
 8010cec:	b291      	uxth	r1, r2
 8010cee:	4371      	muls	r1, r6
 8010cf0:	6802      	ldr	r2, [r0, #0]
 8010cf2:	0c12      	lsrs	r2, r2, #16
 8010cf4:	1889      	adds	r1, r1, r2
 8010cf6:	19cf      	adds	r7, r1, r7
 8010cf8:	0439      	lsls	r1, r7, #16
 8010cfa:	430b      	orrs	r3, r1
 8010cfc:	6003      	str	r3, [r0, #0]
 8010cfe:	cc02      	ldmia	r4!, {r1}
 8010d00:	6843      	ldr	r3, [r0, #4]
 8010d02:	0c09      	lsrs	r1, r1, #16
 8010d04:	4371      	muls	r1, r6
 8010d06:	b29b      	uxth	r3, r3
 8010d08:	0c3f      	lsrs	r7, r7, #16
 8010d0a:	18cb      	adds	r3, r1, r3
 8010d0c:	9a04      	ldr	r2, [sp, #16]
 8010d0e:	19db      	adds	r3, r3, r7
 8010d10:	0c1f      	lsrs	r7, r3, #16
 8010d12:	3004      	adds	r0, #4
 8010d14:	42a2      	cmp	r2, r4
 8010d16:	d8e7      	bhi.n	8010ce8 <__multiply+0x10c>
 8010d18:	4662      	mov	r2, ip
 8010d1a:	9905      	ldr	r1, [sp, #20]
 8010d1c:	5053      	str	r3, [r2, r1]
 8010d1e:	9b00      	ldr	r3, [sp, #0]
 8010d20:	3304      	adds	r3, #4
 8010d22:	9300      	str	r3, [sp, #0]
 8010d24:	2304      	movs	r3, #4
 8010d26:	449c      	add	ip, r3
 8010d28:	e79d      	b.n	8010c66 <__multiply+0x8a>
 8010d2a:	9b02      	ldr	r3, [sp, #8]
 8010d2c:	3b01      	subs	r3, #1
 8010d2e:	9302      	str	r3, [sp, #8]
 8010d30:	e79d      	b.n	8010c6e <__multiply+0x92>
 8010d32:	46c0      	nop			; (mov r8, r8)
 8010d34:	08013bf0 	.word	0x08013bf0
 8010d38:	08013c01 	.word	0x08013c01

08010d3c <__pow5mult>:
 8010d3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010d3e:	2303      	movs	r3, #3
 8010d40:	0015      	movs	r5, r2
 8010d42:	0007      	movs	r7, r0
 8010d44:	000e      	movs	r6, r1
 8010d46:	401a      	ands	r2, r3
 8010d48:	421d      	tst	r5, r3
 8010d4a:	d008      	beq.n	8010d5e <__pow5mult+0x22>
 8010d4c:	4925      	ldr	r1, [pc, #148]	; (8010de4 <__pow5mult+0xa8>)
 8010d4e:	3a01      	subs	r2, #1
 8010d50:	0092      	lsls	r2, r2, #2
 8010d52:	5852      	ldr	r2, [r2, r1]
 8010d54:	2300      	movs	r3, #0
 8010d56:	0031      	movs	r1, r6
 8010d58:	f7ff fe9e 	bl	8010a98 <__multadd>
 8010d5c:	0006      	movs	r6, r0
 8010d5e:	10ad      	asrs	r5, r5, #2
 8010d60:	d03d      	beq.n	8010dde <__pow5mult+0xa2>
 8010d62:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8010d64:	2c00      	cmp	r4, #0
 8010d66:	d10f      	bne.n	8010d88 <__pow5mult+0x4c>
 8010d68:	2010      	movs	r0, #16
 8010d6a:	f7ff fe07 	bl	801097c <malloc>
 8010d6e:	1e02      	subs	r2, r0, #0
 8010d70:	6278      	str	r0, [r7, #36]	; 0x24
 8010d72:	d105      	bne.n	8010d80 <__pow5mult+0x44>
 8010d74:	21d7      	movs	r1, #215	; 0xd7
 8010d76:	4b1c      	ldr	r3, [pc, #112]	; (8010de8 <__pow5mult+0xac>)
 8010d78:	481c      	ldr	r0, [pc, #112]	; (8010dec <__pow5mult+0xb0>)
 8010d7a:	0049      	lsls	r1, r1, #1
 8010d7c:	f000 fc7a 	bl	8011674 <__assert_func>
 8010d80:	6044      	str	r4, [r0, #4]
 8010d82:	6084      	str	r4, [r0, #8]
 8010d84:	6004      	str	r4, [r0, #0]
 8010d86:	60c4      	str	r4, [r0, #12]
 8010d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d8a:	689c      	ldr	r4, [r3, #8]
 8010d8c:	9301      	str	r3, [sp, #4]
 8010d8e:	2c00      	cmp	r4, #0
 8010d90:	d108      	bne.n	8010da4 <__pow5mult+0x68>
 8010d92:	0038      	movs	r0, r7
 8010d94:	4916      	ldr	r1, [pc, #88]	; (8010df0 <__pow5mult+0xb4>)
 8010d96:	f7ff ff0b 	bl	8010bb0 <__i2b>
 8010d9a:	9b01      	ldr	r3, [sp, #4]
 8010d9c:	0004      	movs	r4, r0
 8010d9e:	6098      	str	r0, [r3, #8]
 8010da0:	2300      	movs	r3, #0
 8010da2:	6003      	str	r3, [r0, #0]
 8010da4:	2301      	movs	r3, #1
 8010da6:	421d      	tst	r5, r3
 8010da8:	d00a      	beq.n	8010dc0 <__pow5mult+0x84>
 8010daa:	0031      	movs	r1, r6
 8010dac:	0022      	movs	r2, r4
 8010dae:	0038      	movs	r0, r7
 8010db0:	f7ff ff14 	bl	8010bdc <__multiply>
 8010db4:	0031      	movs	r1, r6
 8010db6:	9001      	str	r0, [sp, #4]
 8010db8:	0038      	movs	r0, r7
 8010dba:	f7ff fe49 	bl	8010a50 <_Bfree>
 8010dbe:	9e01      	ldr	r6, [sp, #4]
 8010dc0:	106d      	asrs	r5, r5, #1
 8010dc2:	d00c      	beq.n	8010dde <__pow5mult+0xa2>
 8010dc4:	6820      	ldr	r0, [r4, #0]
 8010dc6:	2800      	cmp	r0, #0
 8010dc8:	d107      	bne.n	8010dda <__pow5mult+0x9e>
 8010dca:	0022      	movs	r2, r4
 8010dcc:	0021      	movs	r1, r4
 8010dce:	0038      	movs	r0, r7
 8010dd0:	f7ff ff04 	bl	8010bdc <__multiply>
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	6020      	str	r0, [r4, #0]
 8010dd8:	6003      	str	r3, [r0, #0]
 8010dda:	0004      	movs	r4, r0
 8010ddc:	e7e2      	b.n	8010da4 <__pow5mult+0x68>
 8010dde:	0030      	movs	r0, r6
 8010de0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010de2:	46c0      	nop			; (mov r8, r8)
 8010de4:	08013d50 	.word	0x08013d50
 8010de8:	08013b7e 	.word	0x08013b7e
 8010dec:	08013c01 	.word	0x08013c01
 8010df0:	00000271 	.word	0x00000271

08010df4 <__lshift>:
 8010df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010df6:	000c      	movs	r4, r1
 8010df8:	0017      	movs	r7, r2
 8010dfa:	6923      	ldr	r3, [r4, #16]
 8010dfc:	1155      	asrs	r5, r2, #5
 8010dfe:	b087      	sub	sp, #28
 8010e00:	18eb      	adds	r3, r5, r3
 8010e02:	9302      	str	r3, [sp, #8]
 8010e04:	3301      	adds	r3, #1
 8010e06:	9301      	str	r3, [sp, #4]
 8010e08:	6849      	ldr	r1, [r1, #4]
 8010e0a:	68a3      	ldr	r3, [r4, #8]
 8010e0c:	9004      	str	r0, [sp, #16]
 8010e0e:	9a01      	ldr	r2, [sp, #4]
 8010e10:	4293      	cmp	r3, r2
 8010e12:	db10      	blt.n	8010e36 <__lshift+0x42>
 8010e14:	9804      	ldr	r0, [sp, #16]
 8010e16:	f7ff fdd7 	bl	80109c8 <_Balloc>
 8010e1a:	2300      	movs	r3, #0
 8010e1c:	0002      	movs	r2, r0
 8010e1e:	0006      	movs	r6, r0
 8010e20:	0019      	movs	r1, r3
 8010e22:	3214      	adds	r2, #20
 8010e24:	4298      	cmp	r0, r3
 8010e26:	d10c      	bne.n	8010e42 <__lshift+0x4e>
 8010e28:	21da      	movs	r1, #218	; 0xda
 8010e2a:	0002      	movs	r2, r0
 8010e2c:	4b26      	ldr	r3, [pc, #152]	; (8010ec8 <__lshift+0xd4>)
 8010e2e:	4827      	ldr	r0, [pc, #156]	; (8010ecc <__lshift+0xd8>)
 8010e30:	31ff      	adds	r1, #255	; 0xff
 8010e32:	f000 fc1f 	bl	8011674 <__assert_func>
 8010e36:	3101      	adds	r1, #1
 8010e38:	005b      	lsls	r3, r3, #1
 8010e3a:	e7e8      	b.n	8010e0e <__lshift+0x1a>
 8010e3c:	0098      	lsls	r0, r3, #2
 8010e3e:	5011      	str	r1, [r2, r0]
 8010e40:	3301      	adds	r3, #1
 8010e42:	42ab      	cmp	r3, r5
 8010e44:	dbfa      	blt.n	8010e3c <__lshift+0x48>
 8010e46:	43eb      	mvns	r3, r5
 8010e48:	17db      	asrs	r3, r3, #31
 8010e4a:	401d      	ands	r5, r3
 8010e4c:	211f      	movs	r1, #31
 8010e4e:	0023      	movs	r3, r4
 8010e50:	0038      	movs	r0, r7
 8010e52:	00ad      	lsls	r5, r5, #2
 8010e54:	1955      	adds	r5, r2, r5
 8010e56:	6922      	ldr	r2, [r4, #16]
 8010e58:	3314      	adds	r3, #20
 8010e5a:	0092      	lsls	r2, r2, #2
 8010e5c:	4008      	ands	r0, r1
 8010e5e:	4684      	mov	ip, r0
 8010e60:	189a      	adds	r2, r3, r2
 8010e62:	420f      	tst	r7, r1
 8010e64:	d02a      	beq.n	8010ebc <__lshift+0xc8>
 8010e66:	3101      	adds	r1, #1
 8010e68:	1a09      	subs	r1, r1, r0
 8010e6a:	9105      	str	r1, [sp, #20]
 8010e6c:	2100      	movs	r1, #0
 8010e6e:	9503      	str	r5, [sp, #12]
 8010e70:	4667      	mov	r7, ip
 8010e72:	6818      	ldr	r0, [r3, #0]
 8010e74:	40b8      	lsls	r0, r7
 8010e76:	4301      	orrs	r1, r0
 8010e78:	9803      	ldr	r0, [sp, #12]
 8010e7a:	c002      	stmia	r0!, {r1}
 8010e7c:	cb02      	ldmia	r3!, {r1}
 8010e7e:	9003      	str	r0, [sp, #12]
 8010e80:	9805      	ldr	r0, [sp, #20]
 8010e82:	40c1      	lsrs	r1, r0
 8010e84:	429a      	cmp	r2, r3
 8010e86:	d8f3      	bhi.n	8010e70 <__lshift+0x7c>
 8010e88:	0020      	movs	r0, r4
 8010e8a:	3015      	adds	r0, #21
 8010e8c:	2304      	movs	r3, #4
 8010e8e:	4282      	cmp	r2, r0
 8010e90:	d304      	bcc.n	8010e9c <__lshift+0xa8>
 8010e92:	1b13      	subs	r3, r2, r4
 8010e94:	3b15      	subs	r3, #21
 8010e96:	089b      	lsrs	r3, r3, #2
 8010e98:	3301      	adds	r3, #1
 8010e9a:	009b      	lsls	r3, r3, #2
 8010e9c:	50e9      	str	r1, [r5, r3]
 8010e9e:	2900      	cmp	r1, #0
 8010ea0:	d002      	beq.n	8010ea8 <__lshift+0xb4>
 8010ea2:	9b02      	ldr	r3, [sp, #8]
 8010ea4:	3302      	adds	r3, #2
 8010ea6:	9301      	str	r3, [sp, #4]
 8010ea8:	9b01      	ldr	r3, [sp, #4]
 8010eaa:	9804      	ldr	r0, [sp, #16]
 8010eac:	3b01      	subs	r3, #1
 8010eae:	0021      	movs	r1, r4
 8010eb0:	6133      	str	r3, [r6, #16]
 8010eb2:	f7ff fdcd 	bl	8010a50 <_Bfree>
 8010eb6:	0030      	movs	r0, r6
 8010eb8:	b007      	add	sp, #28
 8010eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ebc:	cb02      	ldmia	r3!, {r1}
 8010ebe:	c502      	stmia	r5!, {r1}
 8010ec0:	429a      	cmp	r2, r3
 8010ec2:	d8fb      	bhi.n	8010ebc <__lshift+0xc8>
 8010ec4:	e7f0      	b.n	8010ea8 <__lshift+0xb4>
 8010ec6:	46c0      	nop			; (mov r8, r8)
 8010ec8:	08013bf0 	.word	0x08013bf0
 8010ecc:	08013c01 	.word	0x08013c01

08010ed0 <__mcmp>:
 8010ed0:	6902      	ldr	r2, [r0, #16]
 8010ed2:	690b      	ldr	r3, [r1, #16]
 8010ed4:	b530      	push	{r4, r5, lr}
 8010ed6:	0004      	movs	r4, r0
 8010ed8:	1ad0      	subs	r0, r2, r3
 8010eda:	429a      	cmp	r2, r3
 8010edc:	d10d      	bne.n	8010efa <__mcmp+0x2a>
 8010ede:	009b      	lsls	r3, r3, #2
 8010ee0:	3414      	adds	r4, #20
 8010ee2:	3114      	adds	r1, #20
 8010ee4:	18e2      	adds	r2, r4, r3
 8010ee6:	18c9      	adds	r1, r1, r3
 8010ee8:	3a04      	subs	r2, #4
 8010eea:	3904      	subs	r1, #4
 8010eec:	6815      	ldr	r5, [r2, #0]
 8010eee:	680b      	ldr	r3, [r1, #0]
 8010ef0:	429d      	cmp	r5, r3
 8010ef2:	d003      	beq.n	8010efc <__mcmp+0x2c>
 8010ef4:	2001      	movs	r0, #1
 8010ef6:	429d      	cmp	r5, r3
 8010ef8:	d303      	bcc.n	8010f02 <__mcmp+0x32>
 8010efa:	bd30      	pop	{r4, r5, pc}
 8010efc:	4294      	cmp	r4, r2
 8010efe:	d3f3      	bcc.n	8010ee8 <__mcmp+0x18>
 8010f00:	e7fb      	b.n	8010efa <__mcmp+0x2a>
 8010f02:	4240      	negs	r0, r0
 8010f04:	e7f9      	b.n	8010efa <__mcmp+0x2a>
	...

08010f08 <__mdiff>:
 8010f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f0a:	000e      	movs	r6, r1
 8010f0c:	0007      	movs	r7, r0
 8010f0e:	0011      	movs	r1, r2
 8010f10:	0030      	movs	r0, r6
 8010f12:	b087      	sub	sp, #28
 8010f14:	0014      	movs	r4, r2
 8010f16:	f7ff ffdb 	bl	8010ed0 <__mcmp>
 8010f1a:	1e05      	subs	r5, r0, #0
 8010f1c:	d110      	bne.n	8010f40 <__mdiff+0x38>
 8010f1e:	0001      	movs	r1, r0
 8010f20:	0038      	movs	r0, r7
 8010f22:	f7ff fd51 	bl	80109c8 <_Balloc>
 8010f26:	1e02      	subs	r2, r0, #0
 8010f28:	d104      	bne.n	8010f34 <__mdiff+0x2c>
 8010f2a:	4b40      	ldr	r3, [pc, #256]	; (801102c <__mdiff+0x124>)
 8010f2c:	4940      	ldr	r1, [pc, #256]	; (8011030 <__mdiff+0x128>)
 8010f2e:	4841      	ldr	r0, [pc, #260]	; (8011034 <__mdiff+0x12c>)
 8010f30:	f000 fba0 	bl	8011674 <__assert_func>
 8010f34:	2301      	movs	r3, #1
 8010f36:	6145      	str	r5, [r0, #20]
 8010f38:	6103      	str	r3, [r0, #16]
 8010f3a:	0010      	movs	r0, r2
 8010f3c:	b007      	add	sp, #28
 8010f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f40:	2301      	movs	r3, #1
 8010f42:	9301      	str	r3, [sp, #4]
 8010f44:	2800      	cmp	r0, #0
 8010f46:	db04      	blt.n	8010f52 <__mdiff+0x4a>
 8010f48:	0023      	movs	r3, r4
 8010f4a:	0034      	movs	r4, r6
 8010f4c:	001e      	movs	r6, r3
 8010f4e:	2300      	movs	r3, #0
 8010f50:	9301      	str	r3, [sp, #4]
 8010f52:	0038      	movs	r0, r7
 8010f54:	6861      	ldr	r1, [r4, #4]
 8010f56:	f7ff fd37 	bl	80109c8 <_Balloc>
 8010f5a:	1e02      	subs	r2, r0, #0
 8010f5c:	d103      	bne.n	8010f66 <__mdiff+0x5e>
 8010f5e:	2190      	movs	r1, #144	; 0x90
 8010f60:	4b32      	ldr	r3, [pc, #200]	; (801102c <__mdiff+0x124>)
 8010f62:	0089      	lsls	r1, r1, #2
 8010f64:	e7e3      	b.n	8010f2e <__mdiff+0x26>
 8010f66:	9b01      	ldr	r3, [sp, #4]
 8010f68:	2700      	movs	r7, #0
 8010f6a:	60c3      	str	r3, [r0, #12]
 8010f6c:	6920      	ldr	r0, [r4, #16]
 8010f6e:	3414      	adds	r4, #20
 8010f70:	9401      	str	r4, [sp, #4]
 8010f72:	9b01      	ldr	r3, [sp, #4]
 8010f74:	0084      	lsls	r4, r0, #2
 8010f76:	191b      	adds	r3, r3, r4
 8010f78:	0034      	movs	r4, r6
 8010f7a:	9302      	str	r3, [sp, #8]
 8010f7c:	6933      	ldr	r3, [r6, #16]
 8010f7e:	3414      	adds	r4, #20
 8010f80:	0099      	lsls	r1, r3, #2
 8010f82:	1863      	adds	r3, r4, r1
 8010f84:	9303      	str	r3, [sp, #12]
 8010f86:	0013      	movs	r3, r2
 8010f88:	3314      	adds	r3, #20
 8010f8a:	469c      	mov	ip, r3
 8010f8c:	9305      	str	r3, [sp, #20]
 8010f8e:	9b01      	ldr	r3, [sp, #4]
 8010f90:	9304      	str	r3, [sp, #16]
 8010f92:	9b04      	ldr	r3, [sp, #16]
 8010f94:	cc02      	ldmia	r4!, {r1}
 8010f96:	cb20      	ldmia	r3!, {r5}
 8010f98:	9304      	str	r3, [sp, #16]
 8010f9a:	b2ab      	uxth	r3, r5
 8010f9c:	19df      	adds	r7, r3, r7
 8010f9e:	b28b      	uxth	r3, r1
 8010fa0:	1afb      	subs	r3, r7, r3
 8010fa2:	0c09      	lsrs	r1, r1, #16
 8010fa4:	0c2d      	lsrs	r5, r5, #16
 8010fa6:	1a6d      	subs	r5, r5, r1
 8010fa8:	1419      	asrs	r1, r3, #16
 8010faa:	186d      	adds	r5, r5, r1
 8010fac:	4661      	mov	r1, ip
 8010fae:	142f      	asrs	r7, r5, #16
 8010fb0:	b29b      	uxth	r3, r3
 8010fb2:	042d      	lsls	r5, r5, #16
 8010fb4:	432b      	orrs	r3, r5
 8010fb6:	c108      	stmia	r1!, {r3}
 8010fb8:	9b03      	ldr	r3, [sp, #12]
 8010fba:	468c      	mov	ip, r1
 8010fbc:	42a3      	cmp	r3, r4
 8010fbe:	d8e8      	bhi.n	8010f92 <__mdiff+0x8a>
 8010fc0:	0031      	movs	r1, r6
 8010fc2:	9c03      	ldr	r4, [sp, #12]
 8010fc4:	3115      	adds	r1, #21
 8010fc6:	2304      	movs	r3, #4
 8010fc8:	428c      	cmp	r4, r1
 8010fca:	d304      	bcc.n	8010fd6 <__mdiff+0xce>
 8010fcc:	1ba3      	subs	r3, r4, r6
 8010fce:	3b15      	subs	r3, #21
 8010fd0:	089b      	lsrs	r3, r3, #2
 8010fd2:	3301      	adds	r3, #1
 8010fd4:	009b      	lsls	r3, r3, #2
 8010fd6:	9901      	ldr	r1, [sp, #4]
 8010fd8:	18cc      	adds	r4, r1, r3
 8010fda:	9905      	ldr	r1, [sp, #20]
 8010fdc:	0026      	movs	r6, r4
 8010fde:	18cb      	adds	r3, r1, r3
 8010fe0:	469c      	mov	ip, r3
 8010fe2:	9902      	ldr	r1, [sp, #8]
 8010fe4:	428e      	cmp	r6, r1
 8010fe6:	d310      	bcc.n	801100a <__mdiff+0x102>
 8010fe8:	9e02      	ldr	r6, [sp, #8]
 8010fea:	1ee1      	subs	r1, r4, #3
 8010fec:	2500      	movs	r5, #0
 8010fee:	428e      	cmp	r6, r1
 8010ff0:	d304      	bcc.n	8010ffc <__mdiff+0xf4>
 8010ff2:	0031      	movs	r1, r6
 8010ff4:	3103      	adds	r1, #3
 8010ff6:	1b0c      	subs	r4, r1, r4
 8010ff8:	08a4      	lsrs	r4, r4, #2
 8010ffa:	00a5      	lsls	r5, r4, #2
 8010ffc:	195b      	adds	r3, r3, r5
 8010ffe:	3b04      	subs	r3, #4
 8011000:	6819      	ldr	r1, [r3, #0]
 8011002:	2900      	cmp	r1, #0
 8011004:	d00f      	beq.n	8011026 <__mdiff+0x11e>
 8011006:	6110      	str	r0, [r2, #16]
 8011008:	e797      	b.n	8010f3a <__mdiff+0x32>
 801100a:	ce02      	ldmia	r6!, {r1}
 801100c:	b28d      	uxth	r5, r1
 801100e:	19ed      	adds	r5, r5, r7
 8011010:	0c0f      	lsrs	r7, r1, #16
 8011012:	1429      	asrs	r1, r5, #16
 8011014:	1879      	adds	r1, r7, r1
 8011016:	140f      	asrs	r7, r1, #16
 8011018:	b2ad      	uxth	r5, r5
 801101a:	0409      	lsls	r1, r1, #16
 801101c:	430d      	orrs	r5, r1
 801101e:	4661      	mov	r1, ip
 8011020:	c120      	stmia	r1!, {r5}
 8011022:	468c      	mov	ip, r1
 8011024:	e7dd      	b.n	8010fe2 <__mdiff+0xda>
 8011026:	3801      	subs	r0, #1
 8011028:	e7e9      	b.n	8010ffe <__mdiff+0xf6>
 801102a:	46c0      	nop			; (mov r8, r8)
 801102c:	08013bf0 	.word	0x08013bf0
 8011030:	00000232 	.word	0x00000232
 8011034:	08013c01 	.word	0x08013c01

08011038 <__d2b>:
 8011038:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801103a:	2101      	movs	r1, #1
 801103c:	0014      	movs	r4, r2
 801103e:	001e      	movs	r6, r3
 8011040:	9f08      	ldr	r7, [sp, #32]
 8011042:	f7ff fcc1 	bl	80109c8 <_Balloc>
 8011046:	1e05      	subs	r5, r0, #0
 8011048:	d105      	bne.n	8011056 <__d2b+0x1e>
 801104a:	0002      	movs	r2, r0
 801104c:	4b26      	ldr	r3, [pc, #152]	; (80110e8 <__d2b+0xb0>)
 801104e:	4927      	ldr	r1, [pc, #156]	; (80110ec <__d2b+0xb4>)
 8011050:	4827      	ldr	r0, [pc, #156]	; (80110f0 <__d2b+0xb8>)
 8011052:	f000 fb0f 	bl	8011674 <__assert_func>
 8011056:	0333      	lsls	r3, r6, #12
 8011058:	0076      	lsls	r6, r6, #1
 801105a:	0b1b      	lsrs	r3, r3, #12
 801105c:	0d76      	lsrs	r6, r6, #21
 801105e:	d124      	bne.n	80110aa <__d2b+0x72>
 8011060:	9301      	str	r3, [sp, #4]
 8011062:	2c00      	cmp	r4, #0
 8011064:	d027      	beq.n	80110b6 <__d2b+0x7e>
 8011066:	4668      	mov	r0, sp
 8011068:	9400      	str	r4, [sp, #0]
 801106a:	f7ff fd73 	bl	8010b54 <__lo0bits>
 801106e:	9c00      	ldr	r4, [sp, #0]
 8011070:	2800      	cmp	r0, #0
 8011072:	d01e      	beq.n	80110b2 <__d2b+0x7a>
 8011074:	9b01      	ldr	r3, [sp, #4]
 8011076:	2120      	movs	r1, #32
 8011078:	001a      	movs	r2, r3
 801107a:	1a09      	subs	r1, r1, r0
 801107c:	408a      	lsls	r2, r1
 801107e:	40c3      	lsrs	r3, r0
 8011080:	4322      	orrs	r2, r4
 8011082:	616a      	str	r2, [r5, #20]
 8011084:	9301      	str	r3, [sp, #4]
 8011086:	9c01      	ldr	r4, [sp, #4]
 8011088:	61ac      	str	r4, [r5, #24]
 801108a:	1e63      	subs	r3, r4, #1
 801108c:	419c      	sbcs	r4, r3
 801108e:	3401      	adds	r4, #1
 8011090:	612c      	str	r4, [r5, #16]
 8011092:	2e00      	cmp	r6, #0
 8011094:	d018      	beq.n	80110c8 <__d2b+0x90>
 8011096:	4b17      	ldr	r3, [pc, #92]	; (80110f4 <__d2b+0xbc>)
 8011098:	18f6      	adds	r6, r6, r3
 801109a:	2335      	movs	r3, #53	; 0x35
 801109c:	1836      	adds	r6, r6, r0
 801109e:	1a18      	subs	r0, r3, r0
 80110a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110a2:	603e      	str	r6, [r7, #0]
 80110a4:	6018      	str	r0, [r3, #0]
 80110a6:	0028      	movs	r0, r5
 80110a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80110aa:	2280      	movs	r2, #128	; 0x80
 80110ac:	0352      	lsls	r2, r2, #13
 80110ae:	4313      	orrs	r3, r2
 80110b0:	e7d6      	b.n	8011060 <__d2b+0x28>
 80110b2:	616c      	str	r4, [r5, #20]
 80110b4:	e7e7      	b.n	8011086 <__d2b+0x4e>
 80110b6:	a801      	add	r0, sp, #4
 80110b8:	f7ff fd4c 	bl	8010b54 <__lo0bits>
 80110bc:	2401      	movs	r4, #1
 80110be:	9b01      	ldr	r3, [sp, #4]
 80110c0:	612c      	str	r4, [r5, #16]
 80110c2:	616b      	str	r3, [r5, #20]
 80110c4:	3020      	adds	r0, #32
 80110c6:	e7e4      	b.n	8011092 <__d2b+0x5a>
 80110c8:	4b0b      	ldr	r3, [pc, #44]	; (80110f8 <__d2b+0xc0>)
 80110ca:	18c0      	adds	r0, r0, r3
 80110cc:	4b0b      	ldr	r3, [pc, #44]	; (80110fc <__d2b+0xc4>)
 80110ce:	6038      	str	r0, [r7, #0]
 80110d0:	18e3      	adds	r3, r4, r3
 80110d2:	009b      	lsls	r3, r3, #2
 80110d4:	18eb      	adds	r3, r5, r3
 80110d6:	6958      	ldr	r0, [r3, #20]
 80110d8:	f7ff fd22 	bl	8010b20 <__hi0bits>
 80110dc:	0164      	lsls	r4, r4, #5
 80110de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110e0:	1a24      	subs	r4, r4, r0
 80110e2:	601c      	str	r4, [r3, #0]
 80110e4:	e7df      	b.n	80110a6 <__d2b+0x6e>
 80110e6:	46c0      	nop			; (mov r8, r8)
 80110e8:	08013bf0 	.word	0x08013bf0
 80110ec:	0000030a 	.word	0x0000030a
 80110f0:	08013c01 	.word	0x08013c01
 80110f4:	fffffbcd 	.word	0xfffffbcd
 80110f8:	fffffbce 	.word	0xfffffbce
 80110fc:	3fffffff 	.word	0x3fffffff

08011100 <_calloc_r>:
 8011100:	b570      	push	{r4, r5, r6, lr}
 8011102:	0c13      	lsrs	r3, r2, #16
 8011104:	0c0d      	lsrs	r5, r1, #16
 8011106:	d11e      	bne.n	8011146 <_calloc_r+0x46>
 8011108:	2b00      	cmp	r3, #0
 801110a:	d10c      	bne.n	8011126 <_calloc_r+0x26>
 801110c:	b289      	uxth	r1, r1
 801110e:	b294      	uxth	r4, r2
 8011110:	434c      	muls	r4, r1
 8011112:	0021      	movs	r1, r4
 8011114:	f7fd fe12 	bl	800ed3c <_malloc_r>
 8011118:	1e05      	subs	r5, r0, #0
 801111a:	d01b      	beq.n	8011154 <_calloc_r+0x54>
 801111c:	0022      	movs	r2, r4
 801111e:	2100      	movs	r1, #0
 8011120:	f7fd fde2 	bl	800ece8 <memset>
 8011124:	e016      	b.n	8011154 <_calloc_r+0x54>
 8011126:	1c1d      	adds	r5, r3, #0
 8011128:	1c0b      	adds	r3, r1, #0
 801112a:	b292      	uxth	r2, r2
 801112c:	b289      	uxth	r1, r1
 801112e:	b29c      	uxth	r4, r3
 8011130:	4351      	muls	r1, r2
 8011132:	b2ab      	uxth	r3, r5
 8011134:	4363      	muls	r3, r4
 8011136:	0c0c      	lsrs	r4, r1, #16
 8011138:	191c      	adds	r4, r3, r4
 801113a:	0c22      	lsrs	r2, r4, #16
 801113c:	d107      	bne.n	801114e <_calloc_r+0x4e>
 801113e:	0424      	lsls	r4, r4, #16
 8011140:	b289      	uxth	r1, r1
 8011142:	430c      	orrs	r4, r1
 8011144:	e7e5      	b.n	8011112 <_calloc_r+0x12>
 8011146:	2b00      	cmp	r3, #0
 8011148:	d101      	bne.n	801114e <_calloc_r+0x4e>
 801114a:	1c13      	adds	r3, r2, #0
 801114c:	e7ed      	b.n	801112a <_calloc_r+0x2a>
 801114e:	230c      	movs	r3, #12
 8011150:	2500      	movs	r5, #0
 8011152:	6003      	str	r3, [r0, #0]
 8011154:	0028      	movs	r0, r5
 8011156:	bd70      	pop	{r4, r5, r6, pc}

08011158 <_free_r>:
 8011158:	b570      	push	{r4, r5, r6, lr}
 801115a:	0005      	movs	r5, r0
 801115c:	2900      	cmp	r1, #0
 801115e:	d010      	beq.n	8011182 <_free_r+0x2a>
 8011160:	1f0c      	subs	r4, r1, #4
 8011162:	6823      	ldr	r3, [r4, #0]
 8011164:	2b00      	cmp	r3, #0
 8011166:	da00      	bge.n	801116a <_free_r+0x12>
 8011168:	18e4      	adds	r4, r4, r3
 801116a:	0028      	movs	r0, r5
 801116c:	f7ff fc1c 	bl	80109a8 <__malloc_lock>
 8011170:	4a1d      	ldr	r2, [pc, #116]	; (80111e8 <_free_r+0x90>)
 8011172:	6813      	ldr	r3, [r2, #0]
 8011174:	2b00      	cmp	r3, #0
 8011176:	d105      	bne.n	8011184 <_free_r+0x2c>
 8011178:	6063      	str	r3, [r4, #4]
 801117a:	6014      	str	r4, [r2, #0]
 801117c:	0028      	movs	r0, r5
 801117e:	f7ff fc1b 	bl	80109b8 <__malloc_unlock>
 8011182:	bd70      	pop	{r4, r5, r6, pc}
 8011184:	42a3      	cmp	r3, r4
 8011186:	d908      	bls.n	801119a <_free_r+0x42>
 8011188:	6821      	ldr	r1, [r4, #0]
 801118a:	1860      	adds	r0, r4, r1
 801118c:	4283      	cmp	r3, r0
 801118e:	d1f3      	bne.n	8011178 <_free_r+0x20>
 8011190:	6818      	ldr	r0, [r3, #0]
 8011192:	685b      	ldr	r3, [r3, #4]
 8011194:	1841      	adds	r1, r0, r1
 8011196:	6021      	str	r1, [r4, #0]
 8011198:	e7ee      	b.n	8011178 <_free_r+0x20>
 801119a:	001a      	movs	r2, r3
 801119c:	685b      	ldr	r3, [r3, #4]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d001      	beq.n	80111a6 <_free_r+0x4e>
 80111a2:	42a3      	cmp	r3, r4
 80111a4:	d9f9      	bls.n	801119a <_free_r+0x42>
 80111a6:	6811      	ldr	r1, [r2, #0]
 80111a8:	1850      	adds	r0, r2, r1
 80111aa:	42a0      	cmp	r0, r4
 80111ac:	d10b      	bne.n	80111c6 <_free_r+0x6e>
 80111ae:	6820      	ldr	r0, [r4, #0]
 80111b0:	1809      	adds	r1, r1, r0
 80111b2:	1850      	adds	r0, r2, r1
 80111b4:	6011      	str	r1, [r2, #0]
 80111b6:	4283      	cmp	r3, r0
 80111b8:	d1e0      	bne.n	801117c <_free_r+0x24>
 80111ba:	6818      	ldr	r0, [r3, #0]
 80111bc:	685b      	ldr	r3, [r3, #4]
 80111be:	1841      	adds	r1, r0, r1
 80111c0:	6011      	str	r1, [r2, #0]
 80111c2:	6053      	str	r3, [r2, #4]
 80111c4:	e7da      	b.n	801117c <_free_r+0x24>
 80111c6:	42a0      	cmp	r0, r4
 80111c8:	d902      	bls.n	80111d0 <_free_r+0x78>
 80111ca:	230c      	movs	r3, #12
 80111cc:	602b      	str	r3, [r5, #0]
 80111ce:	e7d5      	b.n	801117c <_free_r+0x24>
 80111d0:	6821      	ldr	r1, [r4, #0]
 80111d2:	1860      	adds	r0, r4, r1
 80111d4:	4283      	cmp	r3, r0
 80111d6:	d103      	bne.n	80111e0 <_free_r+0x88>
 80111d8:	6818      	ldr	r0, [r3, #0]
 80111da:	685b      	ldr	r3, [r3, #4]
 80111dc:	1841      	adds	r1, r0, r1
 80111de:	6021      	str	r1, [r4, #0]
 80111e0:	6063      	str	r3, [r4, #4]
 80111e2:	6054      	str	r4, [r2, #4]
 80111e4:	e7ca      	b.n	801117c <_free_r+0x24>
 80111e6:	46c0      	nop			; (mov r8, r8)
 80111e8:	2000219c 	.word	0x2000219c

080111ec <__ssputs_r>:
 80111ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80111ee:	688e      	ldr	r6, [r1, #8]
 80111f0:	b085      	sub	sp, #20
 80111f2:	0007      	movs	r7, r0
 80111f4:	000c      	movs	r4, r1
 80111f6:	9203      	str	r2, [sp, #12]
 80111f8:	9301      	str	r3, [sp, #4]
 80111fa:	429e      	cmp	r6, r3
 80111fc:	d83c      	bhi.n	8011278 <__ssputs_r+0x8c>
 80111fe:	2390      	movs	r3, #144	; 0x90
 8011200:	898a      	ldrh	r2, [r1, #12]
 8011202:	00db      	lsls	r3, r3, #3
 8011204:	421a      	tst	r2, r3
 8011206:	d034      	beq.n	8011272 <__ssputs_r+0x86>
 8011208:	6909      	ldr	r1, [r1, #16]
 801120a:	6823      	ldr	r3, [r4, #0]
 801120c:	6960      	ldr	r0, [r4, #20]
 801120e:	1a5b      	subs	r3, r3, r1
 8011210:	9302      	str	r3, [sp, #8]
 8011212:	2303      	movs	r3, #3
 8011214:	4343      	muls	r3, r0
 8011216:	0fdd      	lsrs	r5, r3, #31
 8011218:	18ed      	adds	r5, r5, r3
 801121a:	9b01      	ldr	r3, [sp, #4]
 801121c:	9802      	ldr	r0, [sp, #8]
 801121e:	3301      	adds	r3, #1
 8011220:	181b      	adds	r3, r3, r0
 8011222:	106d      	asrs	r5, r5, #1
 8011224:	42ab      	cmp	r3, r5
 8011226:	d900      	bls.n	801122a <__ssputs_r+0x3e>
 8011228:	001d      	movs	r5, r3
 801122a:	0553      	lsls	r3, r2, #21
 801122c:	d532      	bpl.n	8011294 <__ssputs_r+0xa8>
 801122e:	0029      	movs	r1, r5
 8011230:	0038      	movs	r0, r7
 8011232:	f7fd fd83 	bl	800ed3c <_malloc_r>
 8011236:	1e06      	subs	r6, r0, #0
 8011238:	d109      	bne.n	801124e <__ssputs_r+0x62>
 801123a:	230c      	movs	r3, #12
 801123c:	603b      	str	r3, [r7, #0]
 801123e:	2340      	movs	r3, #64	; 0x40
 8011240:	2001      	movs	r0, #1
 8011242:	89a2      	ldrh	r2, [r4, #12]
 8011244:	4240      	negs	r0, r0
 8011246:	4313      	orrs	r3, r2
 8011248:	81a3      	strh	r3, [r4, #12]
 801124a:	b005      	add	sp, #20
 801124c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801124e:	9a02      	ldr	r2, [sp, #8]
 8011250:	6921      	ldr	r1, [r4, #16]
 8011252:	f7fd fd40 	bl	800ecd6 <memcpy>
 8011256:	89a3      	ldrh	r3, [r4, #12]
 8011258:	4a14      	ldr	r2, [pc, #80]	; (80112ac <__ssputs_r+0xc0>)
 801125a:	401a      	ands	r2, r3
 801125c:	2380      	movs	r3, #128	; 0x80
 801125e:	4313      	orrs	r3, r2
 8011260:	81a3      	strh	r3, [r4, #12]
 8011262:	9b02      	ldr	r3, [sp, #8]
 8011264:	6126      	str	r6, [r4, #16]
 8011266:	18f6      	adds	r6, r6, r3
 8011268:	6026      	str	r6, [r4, #0]
 801126a:	6165      	str	r5, [r4, #20]
 801126c:	9e01      	ldr	r6, [sp, #4]
 801126e:	1aed      	subs	r5, r5, r3
 8011270:	60a5      	str	r5, [r4, #8]
 8011272:	9b01      	ldr	r3, [sp, #4]
 8011274:	429e      	cmp	r6, r3
 8011276:	d900      	bls.n	801127a <__ssputs_r+0x8e>
 8011278:	9e01      	ldr	r6, [sp, #4]
 801127a:	0032      	movs	r2, r6
 801127c:	9903      	ldr	r1, [sp, #12]
 801127e:	6820      	ldr	r0, [r4, #0]
 8011280:	f000 faa4 	bl	80117cc <memmove>
 8011284:	68a3      	ldr	r3, [r4, #8]
 8011286:	2000      	movs	r0, #0
 8011288:	1b9b      	subs	r3, r3, r6
 801128a:	60a3      	str	r3, [r4, #8]
 801128c:	6823      	ldr	r3, [r4, #0]
 801128e:	199e      	adds	r6, r3, r6
 8011290:	6026      	str	r6, [r4, #0]
 8011292:	e7da      	b.n	801124a <__ssputs_r+0x5e>
 8011294:	002a      	movs	r2, r5
 8011296:	0038      	movs	r0, r7
 8011298:	f000 faab 	bl	80117f2 <_realloc_r>
 801129c:	1e06      	subs	r6, r0, #0
 801129e:	d1e0      	bne.n	8011262 <__ssputs_r+0x76>
 80112a0:	0038      	movs	r0, r7
 80112a2:	6921      	ldr	r1, [r4, #16]
 80112a4:	f7ff ff58 	bl	8011158 <_free_r>
 80112a8:	e7c7      	b.n	801123a <__ssputs_r+0x4e>
 80112aa:	46c0      	nop			; (mov r8, r8)
 80112ac:	fffffb7f 	.word	0xfffffb7f

080112b0 <_svfiprintf_r>:
 80112b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80112b2:	b0a1      	sub	sp, #132	; 0x84
 80112b4:	9003      	str	r0, [sp, #12]
 80112b6:	001d      	movs	r5, r3
 80112b8:	898b      	ldrh	r3, [r1, #12]
 80112ba:	000f      	movs	r7, r1
 80112bc:	0016      	movs	r6, r2
 80112be:	061b      	lsls	r3, r3, #24
 80112c0:	d511      	bpl.n	80112e6 <_svfiprintf_r+0x36>
 80112c2:	690b      	ldr	r3, [r1, #16]
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d10e      	bne.n	80112e6 <_svfiprintf_r+0x36>
 80112c8:	2140      	movs	r1, #64	; 0x40
 80112ca:	f7fd fd37 	bl	800ed3c <_malloc_r>
 80112ce:	6038      	str	r0, [r7, #0]
 80112d0:	6138      	str	r0, [r7, #16]
 80112d2:	2800      	cmp	r0, #0
 80112d4:	d105      	bne.n	80112e2 <_svfiprintf_r+0x32>
 80112d6:	230c      	movs	r3, #12
 80112d8:	9a03      	ldr	r2, [sp, #12]
 80112da:	3801      	subs	r0, #1
 80112dc:	6013      	str	r3, [r2, #0]
 80112de:	b021      	add	sp, #132	; 0x84
 80112e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80112e2:	2340      	movs	r3, #64	; 0x40
 80112e4:	617b      	str	r3, [r7, #20]
 80112e6:	2300      	movs	r3, #0
 80112e8:	ac08      	add	r4, sp, #32
 80112ea:	6163      	str	r3, [r4, #20]
 80112ec:	3320      	adds	r3, #32
 80112ee:	7663      	strb	r3, [r4, #25]
 80112f0:	3310      	adds	r3, #16
 80112f2:	76a3      	strb	r3, [r4, #26]
 80112f4:	9507      	str	r5, [sp, #28]
 80112f6:	0035      	movs	r5, r6
 80112f8:	782b      	ldrb	r3, [r5, #0]
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d001      	beq.n	8011302 <_svfiprintf_r+0x52>
 80112fe:	2b25      	cmp	r3, #37	; 0x25
 8011300:	d147      	bne.n	8011392 <_svfiprintf_r+0xe2>
 8011302:	1bab      	subs	r3, r5, r6
 8011304:	9305      	str	r3, [sp, #20]
 8011306:	42b5      	cmp	r5, r6
 8011308:	d00c      	beq.n	8011324 <_svfiprintf_r+0x74>
 801130a:	0032      	movs	r2, r6
 801130c:	0039      	movs	r1, r7
 801130e:	9803      	ldr	r0, [sp, #12]
 8011310:	f7ff ff6c 	bl	80111ec <__ssputs_r>
 8011314:	1c43      	adds	r3, r0, #1
 8011316:	d100      	bne.n	801131a <_svfiprintf_r+0x6a>
 8011318:	e0ae      	b.n	8011478 <_svfiprintf_r+0x1c8>
 801131a:	6962      	ldr	r2, [r4, #20]
 801131c:	9b05      	ldr	r3, [sp, #20]
 801131e:	4694      	mov	ip, r2
 8011320:	4463      	add	r3, ip
 8011322:	6163      	str	r3, [r4, #20]
 8011324:	782b      	ldrb	r3, [r5, #0]
 8011326:	2b00      	cmp	r3, #0
 8011328:	d100      	bne.n	801132c <_svfiprintf_r+0x7c>
 801132a:	e0a5      	b.n	8011478 <_svfiprintf_r+0x1c8>
 801132c:	2201      	movs	r2, #1
 801132e:	2300      	movs	r3, #0
 8011330:	4252      	negs	r2, r2
 8011332:	6062      	str	r2, [r4, #4]
 8011334:	a904      	add	r1, sp, #16
 8011336:	3254      	adds	r2, #84	; 0x54
 8011338:	1852      	adds	r2, r2, r1
 801133a:	1c6e      	adds	r6, r5, #1
 801133c:	6023      	str	r3, [r4, #0]
 801133e:	60e3      	str	r3, [r4, #12]
 8011340:	60a3      	str	r3, [r4, #8]
 8011342:	7013      	strb	r3, [r2, #0]
 8011344:	65a3      	str	r3, [r4, #88]	; 0x58
 8011346:	2205      	movs	r2, #5
 8011348:	7831      	ldrb	r1, [r6, #0]
 801134a:	4854      	ldr	r0, [pc, #336]	; (801149c <_svfiprintf_r+0x1ec>)
 801134c:	f7ff fb20 	bl	8010990 <memchr>
 8011350:	1c75      	adds	r5, r6, #1
 8011352:	2800      	cmp	r0, #0
 8011354:	d11f      	bne.n	8011396 <_svfiprintf_r+0xe6>
 8011356:	6822      	ldr	r2, [r4, #0]
 8011358:	06d3      	lsls	r3, r2, #27
 801135a:	d504      	bpl.n	8011366 <_svfiprintf_r+0xb6>
 801135c:	2353      	movs	r3, #83	; 0x53
 801135e:	a904      	add	r1, sp, #16
 8011360:	185b      	adds	r3, r3, r1
 8011362:	2120      	movs	r1, #32
 8011364:	7019      	strb	r1, [r3, #0]
 8011366:	0713      	lsls	r3, r2, #28
 8011368:	d504      	bpl.n	8011374 <_svfiprintf_r+0xc4>
 801136a:	2353      	movs	r3, #83	; 0x53
 801136c:	a904      	add	r1, sp, #16
 801136e:	185b      	adds	r3, r3, r1
 8011370:	212b      	movs	r1, #43	; 0x2b
 8011372:	7019      	strb	r1, [r3, #0]
 8011374:	7833      	ldrb	r3, [r6, #0]
 8011376:	2b2a      	cmp	r3, #42	; 0x2a
 8011378:	d016      	beq.n	80113a8 <_svfiprintf_r+0xf8>
 801137a:	0035      	movs	r5, r6
 801137c:	2100      	movs	r1, #0
 801137e:	200a      	movs	r0, #10
 8011380:	68e3      	ldr	r3, [r4, #12]
 8011382:	782a      	ldrb	r2, [r5, #0]
 8011384:	1c6e      	adds	r6, r5, #1
 8011386:	3a30      	subs	r2, #48	; 0x30
 8011388:	2a09      	cmp	r2, #9
 801138a:	d94e      	bls.n	801142a <_svfiprintf_r+0x17a>
 801138c:	2900      	cmp	r1, #0
 801138e:	d111      	bne.n	80113b4 <_svfiprintf_r+0x104>
 8011390:	e017      	b.n	80113c2 <_svfiprintf_r+0x112>
 8011392:	3501      	adds	r5, #1
 8011394:	e7b0      	b.n	80112f8 <_svfiprintf_r+0x48>
 8011396:	4b41      	ldr	r3, [pc, #260]	; (801149c <_svfiprintf_r+0x1ec>)
 8011398:	6822      	ldr	r2, [r4, #0]
 801139a:	1ac0      	subs	r0, r0, r3
 801139c:	2301      	movs	r3, #1
 801139e:	4083      	lsls	r3, r0
 80113a0:	4313      	orrs	r3, r2
 80113a2:	002e      	movs	r6, r5
 80113a4:	6023      	str	r3, [r4, #0]
 80113a6:	e7ce      	b.n	8011346 <_svfiprintf_r+0x96>
 80113a8:	9b07      	ldr	r3, [sp, #28]
 80113aa:	1d19      	adds	r1, r3, #4
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	9107      	str	r1, [sp, #28]
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	db01      	blt.n	80113b8 <_svfiprintf_r+0x108>
 80113b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80113b6:	e004      	b.n	80113c2 <_svfiprintf_r+0x112>
 80113b8:	425b      	negs	r3, r3
 80113ba:	60e3      	str	r3, [r4, #12]
 80113bc:	2302      	movs	r3, #2
 80113be:	4313      	orrs	r3, r2
 80113c0:	6023      	str	r3, [r4, #0]
 80113c2:	782b      	ldrb	r3, [r5, #0]
 80113c4:	2b2e      	cmp	r3, #46	; 0x2e
 80113c6:	d10a      	bne.n	80113de <_svfiprintf_r+0x12e>
 80113c8:	786b      	ldrb	r3, [r5, #1]
 80113ca:	2b2a      	cmp	r3, #42	; 0x2a
 80113cc:	d135      	bne.n	801143a <_svfiprintf_r+0x18a>
 80113ce:	9b07      	ldr	r3, [sp, #28]
 80113d0:	3502      	adds	r5, #2
 80113d2:	1d1a      	adds	r2, r3, #4
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	9207      	str	r2, [sp, #28]
 80113d8:	2b00      	cmp	r3, #0
 80113da:	db2b      	blt.n	8011434 <_svfiprintf_r+0x184>
 80113dc:	9309      	str	r3, [sp, #36]	; 0x24
 80113de:	4e30      	ldr	r6, [pc, #192]	; (80114a0 <_svfiprintf_r+0x1f0>)
 80113e0:	2203      	movs	r2, #3
 80113e2:	0030      	movs	r0, r6
 80113e4:	7829      	ldrb	r1, [r5, #0]
 80113e6:	f7ff fad3 	bl	8010990 <memchr>
 80113ea:	2800      	cmp	r0, #0
 80113ec:	d006      	beq.n	80113fc <_svfiprintf_r+0x14c>
 80113ee:	2340      	movs	r3, #64	; 0x40
 80113f0:	1b80      	subs	r0, r0, r6
 80113f2:	4083      	lsls	r3, r0
 80113f4:	6822      	ldr	r2, [r4, #0]
 80113f6:	3501      	adds	r5, #1
 80113f8:	4313      	orrs	r3, r2
 80113fa:	6023      	str	r3, [r4, #0]
 80113fc:	7829      	ldrb	r1, [r5, #0]
 80113fe:	2206      	movs	r2, #6
 8011400:	4828      	ldr	r0, [pc, #160]	; (80114a4 <_svfiprintf_r+0x1f4>)
 8011402:	1c6e      	adds	r6, r5, #1
 8011404:	7621      	strb	r1, [r4, #24]
 8011406:	f7ff fac3 	bl	8010990 <memchr>
 801140a:	2800      	cmp	r0, #0
 801140c:	d03c      	beq.n	8011488 <_svfiprintf_r+0x1d8>
 801140e:	4b26      	ldr	r3, [pc, #152]	; (80114a8 <_svfiprintf_r+0x1f8>)
 8011410:	2b00      	cmp	r3, #0
 8011412:	d125      	bne.n	8011460 <_svfiprintf_r+0x1b0>
 8011414:	2207      	movs	r2, #7
 8011416:	9b07      	ldr	r3, [sp, #28]
 8011418:	3307      	adds	r3, #7
 801141a:	4393      	bics	r3, r2
 801141c:	3308      	adds	r3, #8
 801141e:	9307      	str	r3, [sp, #28]
 8011420:	6963      	ldr	r3, [r4, #20]
 8011422:	9a04      	ldr	r2, [sp, #16]
 8011424:	189b      	adds	r3, r3, r2
 8011426:	6163      	str	r3, [r4, #20]
 8011428:	e765      	b.n	80112f6 <_svfiprintf_r+0x46>
 801142a:	4343      	muls	r3, r0
 801142c:	0035      	movs	r5, r6
 801142e:	2101      	movs	r1, #1
 8011430:	189b      	adds	r3, r3, r2
 8011432:	e7a6      	b.n	8011382 <_svfiprintf_r+0xd2>
 8011434:	2301      	movs	r3, #1
 8011436:	425b      	negs	r3, r3
 8011438:	e7d0      	b.n	80113dc <_svfiprintf_r+0x12c>
 801143a:	2300      	movs	r3, #0
 801143c:	200a      	movs	r0, #10
 801143e:	001a      	movs	r2, r3
 8011440:	3501      	adds	r5, #1
 8011442:	6063      	str	r3, [r4, #4]
 8011444:	7829      	ldrb	r1, [r5, #0]
 8011446:	1c6e      	adds	r6, r5, #1
 8011448:	3930      	subs	r1, #48	; 0x30
 801144a:	2909      	cmp	r1, #9
 801144c:	d903      	bls.n	8011456 <_svfiprintf_r+0x1a6>
 801144e:	2b00      	cmp	r3, #0
 8011450:	d0c5      	beq.n	80113de <_svfiprintf_r+0x12e>
 8011452:	9209      	str	r2, [sp, #36]	; 0x24
 8011454:	e7c3      	b.n	80113de <_svfiprintf_r+0x12e>
 8011456:	4342      	muls	r2, r0
 8011458:	0035      	movs	r5, r6
 801145a:	2301      	movs	r3, #1
 801145c:	1852      	adds	r2, r2, r1
 801145e:	e7f1      	b.n	8011444 <_svfiprintf_r+0x194>
 8011460:	ab07      	add	r3, sp, #28
 8011462:	9300      	str	r3, [sp, #0]
 8011464:	003a      	movs	r2, r7
 8011466:	0021      	movs	r1, r4
 8011468:	4b10      	ldr	r3, [pc, #64]	; (80114ac <_svfiprintf_r+0x1fc>)
 801146a:	9803      	ldr	r0, [sp, #12]
 801146c:	f7fd fd86 	bl	800ef7c <_printf_float>
 8011470:	9004      	str	r0, [sp, #16]
 8011472:	9b04      	ldr	r3, [sp, #16]
 8011474:	3301      	adds	r3, #1
 8011476:	d1d3      	bne.n	8011420 <_svfiprintf_r+0x170>
 8011478:	89bb      	ldrh	r3, [r7, #12]
 801147a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801147c:	065b      	lsls	r3, r3, #25
 801147e:	d400      	bmi.n	8011482 <_svfiprintf_r+0x1d2>
 8011480:	e72d      	b.n	80112de <_svfiprintf_r+0x2e>
 8011482:	2001      	movs	r0, #1
 8011484:	4240      	negs	r0, r0
 8011486:	e72a      	b.n	80112de <_svfiprintf_r+0x2e>
 8011488:	ab07      	add	r3, sp, #28
 801148a:	9300      	str	r3, [sp, #0]
 801148c:	003a      	movs	r2, r7
 801148e:	0021      	movs	r1, r4
 8011490:	4b06      	ldr	r3, [pc, #24]	; (80114ac <_svfiprintf_r+0x1fc>)
 8011492:	9803      	ldr	r0, [sp, #12]
 8011494:	f7fe f824 	bl	800f4e0 <_printf_i>
 8011498:	e7ea      	b.n	8011470 <_svfiprintf_r+0x1c0>
 801149a:	46c0      	nop			; (mov r8, r8)
 801149c:	08013d5c 	.word	0x08013d5c
 80114a0:	08013d62 	.word	0x08013d62
 80114a4:	08013d66 	.word	0x08013d66
 80114a8:	0800ef7d 	.word	0x0800ef7d
 80114ac:	080111ed 	.word	0x080111ed

080114b0 <_read_r>:
 80114b0:	b570      	push	{r4, r5, r6, lr}
 80114b2:	0004      	movs	r4, r0
 80114b4:	0008      	movs	r0, r1
 80114b6:	0011      	movs	r1, r2
 80114b8:	001a      	movs	r2, r3
 80114ba:	2300      	movs	r3, #0
 80114bc:	4d05      	ldr	r5, [pc, #20]	; (80114d4 <_read_r+0x24>)
 80114be:	602b      	str	r3, [r5, #0]
 80114c0:	f7f3 f8e6 	bl	8004690 <_read>
 80114c4:	1c43      	adds	r3, r0, #1
 80114c6:	d103      	bne.n	80114d0 <_read_r+0x20>
 80114c8:	682b      	ldr	r3, [r5, #0]
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d000      	beq.n	80114d0 <_read_r+0x20>
 80114ce:	6023      	str	r3, [r4, #0]
 80114d0:	bd70      	pop	{r4, r5, r6, pc}
 80114d2:	46c0      	nop			; (mov r8, r8)
 80114d4:	200021a4 	.word	0x200021a4

080114d8 <__swbuf_r>:
 80114d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114da:	0005      	movs	r5, r0
 80114dc:	000e      	movs	r6, r1
 80114de:	0014      	movs	r4, r2
 80114e0:	2800      	cmp	r0, #0
 80114e2:	d004      	beq.n	80114ee <__swbuf_r+0x16>
 80114e4:	6983      	ldr	r3, [r0, #24]
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d101      	bne.n	80114ee <__swbuf_r+0x16>
 80114ea:	f7fd fb2d 	bl	800eb48 <__sinit>
 80114ee:	4b22      	ldr	r3, [pc, #136]	; (8011578 <__swbuf_r+0xa0>)
 80114f0:	429c      	cmp	r4, r3
 80114f2:	d12e      	bne.n	8011552 <__swbuf_r+0x7a>
 80114f4:	686c      	ldr	r4, [r5, #4]
 80114f6:	69a3      	ldr	r3, [r4, #24]
 80114f8:	60a3      	str	r3, [r4, #8]
 80114fa:	89a3      	ldrh	r3, [r4, #12]
 80114fc:	071b      	lsls	r3, r3, #28
 80114fe:	d532      	bpl.n	8011566 <__swbuf_r+0x8e>
 8011500:	6923      	ldr	r3, [r4, #16]
 8011502:	2b00      	cmp	r3, #0
 8011504:	d02f      	beq.n	8011566 <__swbuf_r+0x8e>
 8011506:	6823      	ldr	r3, [r4, #0]
 8011508:	6922      	ldr	r2, [r4, #16]
 801150a:	b2f7      	uxtb	r7, r6
 801150c:	1a98      	subs	r0, r3, r2
 801150e:	6963      	ldr	r3, [r4, #20]
 8011510:	b2f6      	uxtb	r6, r6
 8011512:	4283      	cmp	r3, r0
 8011514:	dc05      	bgt.n	8011522 <__swbuf_r+0x4a>
 8011516:	0021      	movs	r1, r4
 8011518:	0028      	movs	r0, r5
 801151a:	f7ff f9d7 	bl	80108cc <_fflush_r>
 801151e:	2800      	cmp	r0, #0
 8011520:	d127      	bne.n	8011572 <__swbuf_r+0x9a>
 8011522:	68a3      	ldr	r3, [r4, #8]
 8011524:	3001      	adds	r0, #1
 8011526:	3b01      	subs	r3, #1
 8011528:	60a3      	str	r3, [r4, #8]
 801152a:	6823      	ldr	r3, [r4, #0]
 801152c:	1c5a      	adds	r2, r3, #1
 801152e:	6022      	str	r2, [r4, #0]
 8011530:	701f      	strb	r7, [r3, #0]
 8011532:	6963      	ldr	r3, [r4, #20]
 8011534:	4283      	cmp	r3, r0
 8011536:	d004      	beq.n	8011542 <__swbuf_r+0x6a>
 8011538:	89a3      	ldrh	r3, [r4, #12]
 801153a:	07db      	lsls	r3, r3, #31
 801153c:	d507      	bpl.n	801154e <__swbuf_r+0x76>
 801153e:	2e0a      	cmp	r6, #10
 8011540:	d105      	bne.n	801154e <__swbuf_r+0x76>
 8011542:	0021      	movs	r1, r4
 8011544:	0028      	movs	r0, r5
 8011546:	f7ff f9c1 	bl	80108cc <_fflush_r>
 801154a:	2800      	cmp	r0, #0
 801154c:	d111      	bne.n	8011572 <__swbuf_r+0x9a>
 801154e:	0030      	movs	r0, r6
 8011550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011552:	4b0a      	ldr	r3, [pc, #40]	; (801157c <__swbuf_r+0xa4>)
 8011554:	429c      	cmp	r4, r3
 8011556:	d101      	bne.n	801155c <__swbuf_r+0x84>
 8011558:	68ac      	ldr	r4, [r5, #8]
 801155a:	e7cc      	b.n	80114f6 <__swbuf_r+0x1e>
 801155c:	4b08      	ldr	r3, [pc, #32]	; (8011580 <__swbuf_r+0xa8>)
 801155e:	429c      	cmp	r4, r3
 8011560:	d1c9      	bne.n	80114f6 <__swbuf_r+0x1e>
 8011562:	68ec      	ldr	r4, [r5, #12]
 8011564:	e7c7      	b.n	80114f6 <__swbuf_r+0x1e>
 8011566:	0021      	movs	r1, r4
 8011568:	0028      	movs	r0, r5
 801156a:	f000 f80b 	bl	8011584 <__swsetup_r>
 801156e:	2800      	cmp	r0, #0
 8011570:	d0c9      	beq.n	8011506 <__swbuf_r+0x2e>
 8011572:	2601      	movs	r6, #1
 8011574:	4276      	negs	r6, r6
 8011576:	e7ea      	b.n	801154e <__swbuf_r+0x76>
 8011578:	080139f8 	.word	0x080139f8
 801157c:	08013a18 	.word	0x08013a18
 8011580:	080139d8 	.word	0x080139d8

08011584 <__swsetup_r>:
 8011584:	4b37      	ldr	r3, [pc, #220]	; (8011664 <__swsetup_r+0xe0>)
 8011586:	b570      	push	{r4, r5, r6, lr}
 8011588:	681d      	ldr	r5, [r3, #0]
 801158a:	0006      	movs	r6, r0
 801158c:	000c      	movs	r4, r1
 801158e:	2d00      	cmp	r5, #0
 8011590:	d005      	beq.n	801159e <__swsetup_r+0x1a>
 8011592:	69ab      	ldr	r3, [r5, #24]
 8011594:	2b00      	cmp	r3, #0
 8011596:	d102      	bne.n	801159e <__swsetup_r+0x1a>
 8011598:	0028      	movs	r0, r5
 801159a:	f7fd fad5 	bl	800eb48 <__sinit>
 801159e:	4b32      	ldr	r3, [pc, #200]	; (8011668 <__swsetup_r+0xe4>)
 80115a0:	429c      	cmp	r4, r3
 80115a2:	d10f      	bne.n	80115c4 <__swsetup_r+0x40>
 80115a4:	686c      	ldr	r4, [r5, #4]
 80115a6:	230c      	movs	r3, #12
 80115a8:	5ee2      	ldrsh	r2, [r4, r3]
 80115aa:	b293      	uxth	r3, r2
 80115ac:	0711      	lsls	r1, r2, #28
 80115ae:	d42d      	bmi.n	801160c <__swsetup_r+0x88>
 80115b0:	06d9      	lsls	r1, r3, #27
 80115b2:	d411      	bmi.n	80115d8 <__swsetup_r+0x54>
 80115b4:	2309      	movs	r3, #9
 80115b6:	2001      	movs	r0, #1
 80115b8:	6033      	str	r3, [r6, #0]
 80115ba:	3337      	adds	r3, #55	; 0x37
 80115bc:	4313      	orrs	r3, r2
 80115be:	81a3      	strh	r3, [r4, #12]
 80115c0:	4240      	negs	r0, r0
 80115c2:	bd70      	pop	{r4, r5, r6, pc}
 80115c4:	4b29      	ldr	r3, [pc, #164]	; (801166c <__swsetup_r+0xe8>)
 80115c6:	429c      	cmp	r4, r3
 80115c8:	d101      	bne.n	80115ce <__swsetup_r+0x4a>
 80115ca:	68ac      	ldr	r4, [r5, #8]
 80115cc:	e7eb      	b.n	80115a6 <__swsetup_r+0x22>
 80115ce:	4b28      	ldr	r3, [pc, #160]	; (8011670 <__swsetup_r+0xec>)
 80115d0:	429c      	cmp	r4, r3
 80115d2:	d1e8      	bne.n	80115a6 <__swsetup_r+0x22>
 80115d4:	68ec      	ldr	r4, [r5, #12]
 80115d6:	e7e6      	b.n	80115a6 <__swsetup_r+0x22>
 80115d8:	075b      	lsls	r3, r3, #29
 80115da:	d513      	bpl.n	8011604 <__swsetup_r+0x80>
 80115dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80115de:	2900      	cmp	r1, #0
 80115e0:	d008      	beq.n	80115f4 <__swsetup_r+0x70>
 80115e2:	0023      	movs	r3, r4
 80115e4:	3344      	adds	r3, #68	; 0x44
 80115e6:	4299      	cmp	r1, r3
 80115e8:	d002      	beq.n	80115f0 <__swsetup_r+0x6c>
 80115ea:	0030      	movs	r0, r6
 80115ec:	f7ff fdb4 	bl	8011158 <_free_r>
 80115f0:	2300      	movs	r3, #0
 80115f2:	6363      	str	r3, [r4, #52]	; 0x34
 80115f4:	2224      	movs	r2, #36	; 0x24
 80115f6:	89a3      	ldrh	r3, [r4, #12]
 80115f8:	4393      	bics	r3, r2
 80115fa:	81a3      	strh	r3, [r4, #12]
 80115fc:	2300      	movs	r3, #0
 80115fe:	6063      	str	r3, [r4, #4]
 8011600:	6923      	ldr	r3, [r4, #16]
 8011602:	6023      	str	r3, [r4, #0]
 8011604:	2308      	movs	r3, #8
 8011606:	89a2      	ldrh	r2, [r4, #12]
 8011608:	4313      	orrs	r3, r2
 801160a:	81a3      	strh	r3, [r4, #12]
 801160c:	6923      	ldr	r3, [r4, #16]
 801160e:	2b00      	cmp	r3, #0
 8011610:	d10b      	bne.n	801162a <__swsetup_r+0xa6>
 8011612:	21a0      	movs	r1, #160	; 0xa0
 8011614:	2280      	movs	r2, #128	; 0x80
 8011616:	89a3      	ldrh	r3, [r4, #12]
 8011618:	0089      	lsls	r1, r1, #2
 801161a:	0092      	lsls	r2, r2, #2
 801161c:	400b      	ands	r3, r1
 801161e:	4293      	cmp	r3, r2
 8011620:	d003      	beq.n	801162a <__swsetup_r+0xa6>
 8011622:	0021      	movs	r1, r4
 8011624:	0030      	movs	r0, r6
 8011626:	f000 f87b 	bl	8011720 <__smakebuf_r>
 801162a:	220c      	movs	r2, #12
 801162c:	5ea3      	ldrsh	r3, [r4, r2]
 801162e:	2001      	movs	r0, #1
 8011630:	001a      	movs	r2, r3
 8011632:	b299      	uxth	r1, r3
 8011634:	4002      	ands	r2, r0
 8011636:	4203      	tst	r3, r0
 8011638:	d00f      	beq.n	801165a <__swsetup_r+0xd6>
 801163a:	2200      	movs	r2, #0
 801163c:	60a2      	str	r2, [r4, #8]
 801163e:	6962      	ldr	r2, [r4, #20]
 8011640:	4252      	negs	r2, r2
 8011642:	61a2      	str	r2, [r4, #24]
 8011644:	2000      	movs	r0, #0
 8011646:	6922      	ldr	r2, [r4, #16]
 8011648:	4282      	cmp	r2, r0
 801164a:	d1ba      	bne.n	80115c2 <__swsetup_r+0x3e>
 801164c:	060a      	lsls	r2, r1, #24
 801164e:	d5b8      	bpl.n	80115c2 <__swsetup_r+0x3e>
 8011650:	2240      	movs	r2, #64	; 0x40
 8011652:	4313      	orrs	r3, r2
 8011654:	81a3      	strh	r3, [r4, #12]
 8011656:	3801      	subs	r0, #1
 8011658:	e7b3      	b.n	80115c2 <__swsetup_r+0x3e>
 801165a:	0788      	lsls	r0, r1, #30
 801165c:	d400      	bmi.n	8011660 <__swsetup_r+0xdc>
 801165e:	6962      	ldr	r2, [r4, #20]
 8011660:	60a2      	str	r2, [r4, #8]
 8011662:	e7ef      	b.n	8011644 <__swsetup_r+0xc0>
 8011664:	20000074 	.word	0x20000074
 8011668:	080139f8 	.word	0x080139f8
 801166c:	08013a18 	.word	0x08013a18
 8011670:	080139d8 	.word	0x080139d8

08011674 <__assert_func>:
 8011674:	b530      	push	{r4, r5, lr}
 8011676:	0014      	movs	r4, r2
 8011678:	001a      	movs	r2, r3
 801167a:	4b09      	ldr	r3, [pc, #36]	; (80116a0 <__assert_func+0x2c>)
 801167c:	0005      	movs	r5, r0
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	b085      	sub	sp, #20
 8011682:	68d8      	ldr	r0, [r3, #12]
 8011684:	4b07      	ldr	r3, [pc, #28]	; (80116a4 <__assert_func+0x30>)
 8011686:	2c00      	cmp	r4, #0
 8011688:	d101      	bne.n	801168e <__assert_func+0x1a>
 801168a:	4b07      	ldr	r3, [pc, #28]	; (80116a8 <__assert_func+0x34>)
 801168c:	001c      	movs	r4, r3
 801168e:	9301      	str	r3, [sp, #4]
 8011690:	9100      	str	r1, [sp, #0]
 8011692:	002b      	movs	r3, r5
 8011694:	4905      	ldr	r1, [pc, #20]	; (80116ac <__assert_func+0x38>)
 8011696:	9402      	str	r4, [sp, #8]
 8011698:	f000 f80a 	bl	80116b0 <fiprintf>
 801169c:	f000 fa47 	bl	8011b2e <abort>
 80116a0:	20000074 	.word	0x20000074
 80116a4:	08013d6d 	.word	0x08013d6d
 80116a8:	08013da8 	.word	0x08013da8
 80116ac:	08013d7a 	.word	0x08013d7a

080116b0 <fiprintf>:
 80116b0:	b40e      	push	{r1, r2, r3}
 80116b2:	b503      	push	{r0, r1, lr}
 80116b4:	0001      	movs	r1, r0
 80116b6:	ab03      	add	r3, sp, #12
 80116b8:	4804      	ldr	r0, [pc, #16]	; (80116cc <fiprintf+0x1c>)
 80116ba:	cb04      	ldmia	r3!, {r2}
 80116bc:	6800      	ldr	r0, [r0, #0]
 80116be:	9301      	str	r3, [sp, #4]
 80116c0:	f000 f8ee 	bl	80118a0 <_vfiprintf_r>
 80116c4:	b002      	add	sp, #8
 80116c6:	bc08      	pop	{r3}
 80116c8:	b003      	add	sp, #12
 80116ca:	4718      	bx	r3
 80116cc:	20000074 	.word	0x20000074

080116d0 <__swhatbuf_r>:
 80116d0:	b570      	push	{r4, r5, r6, lr}
 80116d2:	000e      	movs	r6, r1
 80116d4:	001d      	movs	r5, r3
 80116d6:	230e      	movs	r3, #14
 80116d8:	5ec9      	ldrsh	r1, [r1, r3]
 80116da:	0014      	movs	r4, r2
 80116dc:	b096      	sub	sp, #88	; 0x58
 80116de:	2900      	cmp	r1, #0
 80116e0:	da08      	bge.n	80116f4 <__swhatbuf_r+0x24>
 80116e2:	220c      	movs	r2, #12
 80116e4:	5eb3      	ldrsh	r3, [r6, r2]
 80116e6:	2200      	movs	r2, #0
 80116e8:	602a      	str	r2, [r5, #0]
 80116ea:	061b      	lsls	r3, r3, #24
 80116ec:	d411      	bmi.n	8011712 <__swhatbuf_r+0x42>
 80116ee:	2380      	movs	r3, #128	; 0x80
 80116f0:	00db      	lsls	r3, r3, #3
 80116f2:	e00f      	b.n	8011714 <__swhatbuf_r+0x44>
 80116f4:	466a      	mov	r2, sp
 80116f6:	f000 fa21 	bl	8011b3c <_fstat_r>
 80116fa:	2800      	cmp	r0, #0
 80116fc:	dbf1      	blt.n	80116e2 <__swhatbuf_r+0x12>
 80116fe:	23f0      	movs	r3, #240	; 0xf0
 8011700:	9901      	ldr	r1, [sp, #4]
 8011702:	021b      	lsls	r3, r3, #8
 8011704:	4019      	ands	r1, r3
 8011706:	4b05      	ldr	r3, [pc, #20]	; (801171c <__swhatbuf_r+0x4c>)
 8011708:	18c9      	adds	r1, r1, r3
 801170a:	424b      	negs	r3, r1
 801170c:	4159      	adcs	r1, r3
 801170e:	6029      	str	r1, [r5, #0]
 8011710:	e7ed      	b.n	80116ee <__swhatbuf_r+0x1e>
 8011712:	2340      	movs	r3, #64	; 0x40
 8011714:	2000      	movs	r0, #0
 8011716:	6023      	str	r3, [r4, #0]
 8011718:	b016      	add	sp, #88	; 0x58
 801171a:	bd70      	pop	{r4, r5, r6, pc}
 801171c:	ffffe000 	.word	0xffffe000

08011720 <__smakebuf_r>:
 8011720:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011722:	2602      	movs	r6, #2
 8011724:	898b      	ldrh	r3, [r1, #12]
 8011726:	0005      	movs	r5, r0
 8011728:	000c      	movs	r4, r1
 801172a:	4233      	tst	r3, r6
 801172c:	d006      	beq.n	801173c <__smakebuf_r+0x1c>
 801172e:	0023      	movs	r3, r4
 8011730:	3347      	adds	r3, #71	; 0x47
 8011732:	6023      	str	r3, [r4, #0]
 8011734:	6123      	str	r3, [r4, #16]
 8011736:	2301      	movs	r3, #1
 8011738:	6163      	str	r3, [r4, #20]
 801173a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 801173c:	466a      	mov	r2, sp
 801173e:	ab01      	add	r3, sp, #4
 8011740:	f7ff ffc6 	bl	80116d0 <__swhatbuf_r>
 8011744:	9900      	ldr	r1, [sp, #0]
 8011746:	0007      	movs	r7, r0
 8011748:	0028      	movs	r0, r5
 801174a:	f7fd faf7 	bl	800ed3c <_malloc_r>
 801174e:	2800      	cmp	r0, #0
 8011750:	d108      	bne.n	8011764 <__smakebuf_r+0x44>
 8011752:	220c      	movs	r2, #12
 8011754:	5ea3      	ldrsh	r3, [r4, r2]
 8011756:	059a      	lsls	r2, r3, #22
 8011758:	d4ef      	bmi.n	801173a <__smakebuf_r+0x1a>
 801175a:	2203      	movs	r2, #3
 801175c:	4393      	bics	r3, r2
 801175e:	431e      	orrs	r6, r3
 8011760:	81a6      	strh	r6, [r4, #12]
 8011762:	e7e4      	b.n	801172e <__smakebuf_r+0xe>
 8011764:	4b0f      	ldr	r3, [pc, #60]	; (80117a4 <__smakebuf_r+0x84>)
 8011766:	62ab      	str	r3, [r5, #40]	; 0x28
 8011768:	2380      	movs	r3, #128	; 0x80
 801176a:	89a2      	ldrh	r2, [r4, #12]
 801176c:	6020      	str	r0, [r4, #0]
 801176e:	4313      	orrs	r3, r2
 8011770:	81a3      	strh	r3, [r4, #12]
 8011772:	9b00      	ldr	r3, [sp, #0]
 8011774:	6120      	str	r0, [r4, #16]
 8011776:	6163      	str	r3, [r4, #20]
 8011778:	9b01      	ldr	r3, [sp, #4]
 801177a:	2b00      	cmp	r3, #0
 801177c:	d00d      	beq.n	801179a <__smakebuf_r+0x7a>
 801177e:	0028      	movs	r0, r5
 8011780:	230e      	movs	r3, #14
 8011782:	5ee1      	ldrsh	r1, [r4, r3]
 8011784:	f000 f9ec 	bl	8011b60 <_isatty_r>
 8011788:	2800      	cmp	r0, #0
 801178a:	d006      	beq.n	801179a <__smakebuf_r+0x7a>
 801178c:	2203      	movs	r2, #3
 801178e:	89a3      	ldrh	r3, [r4, #12]
 8011790:	4393      	bics	r3, r2
 8011792:	001a      	movs	r2, r3
 8011794:	2301      	movs	r3, #1
 8011796:	4313      	orrs	r3, r2
 8011798:	81a3      	strh	r3, [r4, #12]
 801179a:	89a0      	ldrh	r0, [r4, #12]
 801179c:	4307      	orrs	r7, r0
 801179e:	81a7      	strh	r7, [r4, #12]
 80117a0:	e7cb      	b.n	801173a <__smakebuf_r+0x1a>
 80117a2:	46c0      	nop			; (mov r8, r8)
 80117a4:	0800eacd 	.word	0x0800eacd

080117a8 <__ascii_mbtowc>:
 80117a8:	b082      	sub	sp, #8
 80117aa:	2900      	cmp	r1, #0
 80117ac:	d100      	bne.n	80117b0 <__ascii_mbtowc+0x8>
 80117ae:	a901      	add	r1, sp, #4
 80117b0:	1e10      	subs	r0, r2, #0
 80117b2:	d006      	beq.n	80117c2 <__ascii_mbtowc+0x1a>
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d006      	beq.n	80117c6 <__ascii_mbtowc+0x1e>
 80117b8:	7813      	ldrb	r3, [r2, #0]
 80117ba:	600b      	str	r3, [r1, #0]
 80117bc:	7810      	ldrb	r0, [r2, #0]
 80117be:	1e43      	subs	r3, r0, #1
 80117c0:	4198      	sbcs	r0, r3
 80117c2:	b002      	add	sp, #8
 80117c4:	4770      	bx	lr
 80117c6:	2002      	movs	r0, #2
 80117c8:	4240      	negs	r0, r0
 80117ca:	e7fa      	b.n	80117c2 <__ascii_mbtowc+0x1a>

080117cc <memmove>:
 80117cc:	b510      	push	{r4, lr}
 80117ce:	4288      	cmp	r0, r1
 80117d0:	d902      	bls.n	80117d8 <memmove+0xc>
 80117d2:	188b      	adds	r3, r1, r2
 80117d4:	4298      	cmp	r0, r3
 80117d6:	d303      	bcc.n	80117e0 <memmove+0x14>
 80117d8:	2300      	movs	r3, #0
 80117da:	e007      	b.n	80117ec <memmove+0x20>
 80117dc:	5c8b      	ldrb	r3, [r1, r2]
 80117de:	5483      	strb	r3, [r0, r2]
 80117e0:	3a01      	subs	r2, #1
 80117e2:	d2fb      	bcs.n	80117dc <memmove+0x10>
 80117e4:	bd10      	pop	{r4, pc}
 80117e6:	5ccc      	ldrb	r4, [r1, r3]
 80117e8:	54c4      	strb	r4, [r0, r3]
 80117ea:	3301      	adds	r3, #1
 80117ec:	429a      	cmp	r2, r3
 80117ee:	d1fa      	bne.n	80117e6 <memmove+0x1a>
 80117f0:	e7f8      	b.n	80117e4 <memmove+0x18>

080117f2 <_realloc_r>:
 80117f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80117f4:	0007      	movs	r7, r0
 80117f6:	000e      	movs	r6, r1
 80117f8:	0014      	movs	r4, r2
 80117fa:	2900      	cmp	r1, #0
 80117fc:	d105      	bne.n	801180a <_realloc_r+0x18>
 80117fe:	0011      	movs	r1, r2
 8011800:	f7fd fa9c 	bl	800ed3c <_malloc_r>
 8011804:	0005      	movs	r5, r0
 8011806:	0028      	movs	r0, r5
 8011808:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801180a:	2a00      	cmp	r2, #0
 801180c:	d103      	bne.n	8011816 <_realloc_r+0x24>
 801180e:	f7ff fca3 	bl	8011158 <_free_r>
 8011812:	0025      	movs	r5, r4
 8011814:	e7f7      	b.n	8011806 <_realloc_r+0x14>
 8011816:	f000 f9b5 	bl	8011b84 <_malloc_usable_size_r>
 801181a:	9001      	str	r0, [sp, #4]
 801181c:	4284      	cmp	r4, r0
 801181e:	d803      	bhi.n	8011828 <_realloc_r+0x36>
 8011820:	0035      	movs	r5, r6
 8011822:	0843      	lsrs	r3, r0, #1
 8011824:	42a3      	cmp	r3, r4
 8011826:	d3ee      	bcc.n	8011806 <_realloc_r+0x14>
 8011828:	0021      	movs	r1, r4
 801182a:	0038      	movs	r0, r7
 801182c:	f7fd fa86 	bl	800ed3c <_malloc_r>
 8011830:	1e05      	subs	r5, r0, #0
 8011832:	d0e8      	beq.n	8011806 <_realloc_r+0x14>
 8011834:	9b01      	ldr	r3, [sp, #4]
 8011836:	0022      	movs	r2, r4
 8011838:	429c      	cmp	r4, r3
 801183a:	d900      	bls.n	801183e <_realloc_r+0x4c>
 801183c:	001a      	movs	r2, r3
 801183e:	0031      	movs	r1, r6
 8011840:	0028      	movs	r0, r5
 8011842:	f7fd fa48 	bl	800ecd6 <memcpy>
 8011846:	0031      	movs	r1, r6
 8011848:	0038      	movs	r0, r7
 801184a:	f7ff fc85 	bl	8011158 <_free_r>
 801184e:	e7da      	b.n	8011806 <_realloc_r+0x14>

08011850 <__sfputc_r>:
 8011850:	6893      	ldr	r3, [r2, #8]
 8011852:	b510      	push	{r4, lr}
 8011854:	3b01      	subs	r3, #1
 8011856:	6093      	str	r3, [r2, #8]
 8011858:	2b00      	cmp	r3, #0
 801185a:	da04      	bge.n	8011866 <__sfputc_r+0x16>
 801185c:	6994      	ldr	r4, [r2, #24]
 801185e:	42a3      	cmp	r3, r4
 8011860:	db07      	blt.n	8011872 <__sfputc_r+0x22>
 8011862:	290a      	cmp	r1, #10
 8011864:	d005      	beq.n	8011872 <__sfputc_r+0x22>
 8011866:	6813      	ldr	r3, [r2, #0]
 8011868:	1c58      	adds	r0, r3, #1
 801186a:	6010      	str	r0, [r2, #0]
 801186c:	7019      	strb	r1, [r3, #0]
 801186e:	0008      	movs	r0, r1
 8011870:	bd10      	pop	{r4, pc}
 8011872:	f7ff fe31 	bl	80114d8 <__swbuf_r>
 8011876:	0001      	movs	r1, r0
 8011878:	e7f9      	b.n	801186e <__sfputc_r+0x1e>

0801187a <__sfputs_r>:
 801187a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801187c:	0006      	movs	r6, r0
 801187e:	000f      	movs	r7, r1
 8011880:	0014      	movs	r4, r2
 8011882:	18d5      	adds	r5, r2, r3
 8011884:	42ac      	cmp	r4, r5
 8011886:	d101      	bne.n	801188c <__sfputs_r+0x12>
 8011888:	2000      	movs	r0, #0
 801188a:	e007      	b.n	801189c <__sfputs_r+0x22>
 801188c:	7821      	ldrb	r1, [r4, #0]
 801188e:	003a      	movs	r2, r7
 8011890:	0030      	movs	r0, r6
 8011892:	f7ff ffdd 	bl	8011850 <__sfputc_r>
 8011896:	3401      	adds	r4, #1
 8011898:	1c43      	adds	r3, r0, #1
 801189a:	d1f3      	bne.n	8011884 <__sfputs_r+0xa>
 801189c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080118a0 <_vfiprintf_r>:
 80118a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80118a2:	b0a1      	sub	sp, #132	; 0x84
 80118a4:	0006      	movs	r6, r0
 80118a6:	000c      	movs	r4, r1
 80118a8:	001f      	movs	r7, r3
 80118aa:	9203      	str	r2, [sp, #12]
 80118ac:	2800      	cmp	r0, #0
 80118ae:	d004      	beq.n	80118ba <_vfiprintf_r+0x1a>
 80118b0:	6983      	ldr	r3, [r0, #24]
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d101      	bne.n	80118ba <_vfiprintf_r+0x1a>
 80118b6:	f7fd f947 	bl	800eb48 <__sinit>
 80118ba:	4b8e      	ldr	r3, [pc, #568]	; (8011af4 <_vfiprintf_r+0x254>)
 80118bc:	429c      	cmp	r4, r3
 80118be:	d11c      	bne.n	80118fa <_vfiprintf_r+0x5a>
 80118c0:	6874      	ldr	r4, [r6, #4]
 80118c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80118c4:	07db      	lsls	r3, r3, #31
 80118c6:	d405      	bmi.n	80118d4 <_vfiprintf_r+0x34>
 80118c8:	89a3      	ldrh	r3, [r4, #12]
 80118ca:	059b      	lsls	r3, r3, #22
 80118cc:	d402      	bmi.n	80118d4 <_vfiprintf_r+0x34>
 80118ce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80118d0:	f7fd f9ff 	bl	800ecd2 <__retarget_lock_acquire_recursive>
 80118d4:	89a3      	ldrh	r3, [r4, #12]
 80118d6:	071b      	lsls	r3, r3, #28
 80118d8:	d502      	bpl.n	80118e0 <_vfiprintf_r+0x40>
 80118da:	6923      	ldr	r3, [r4, #16]
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d11d      	bne.n	801191c <_vfiprintf_r+0x7c>
 80118e0:	0021      	movs	r1, r4
 80118e2:	0030      	movs	r0, r6
 80118e4:	f7ff fe4e 	bl	8011584 <__swsetup_r>
 80118e8:	2800      	cmp	r0, #0
 80118ea:	d017      	beq.n	801191c <_vfiprintf_r+0x7c>
 80118ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80118ee:	07db      	lsls	r3, r3, #31
 80118f0:	d50d      	bpl.n	801190e <_vfiprintf_r+0x6e>
 80118f2:	2001      	movs	r0, #1
 80118f4:	4240      	negs	r0, r0
 80118f6:	b021      	add	sp, #132	; 0x84
 80118f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80118fa:	4b7f      	ldr	r3, [pc, #508]	; (8011af8 <_vfiprintf_r+0x258>)
 80118fc:	429c      	cmp	r4, r3
 80118fe:	d101      	bne.n	8011904 <_vfiprintf_r+0x64>
 8011900:	68b4      	ldr	r4, [r6, #8]
 8011902:	e7de      	b.n	80118c2 <_vfiprintf_r+0x22>
 8011904:	4b7d      	ldr	r3, [pc, #500]	; (8011afc <_vfiprintf_r+0x25c>)
 8011906:	429c      	cmp	r4, r3
 8011908:	d1db      	bne.n	80118c2 <_vfiprintf_r+0x22>
 801190a:	68f4      	ldr	r4, [r6, #12]
 801190c:	e7d9      	b.n	80118c2 <_vfiprintf_r+0x22>
 801190e:	89a3      	ldrh	r3, [r4, #12]
 8011910:	059b      	lsls	r3, r3, #22
 8011912:	d4ee      	bmi.n	80118f2 <_vfiprintf_r+0x52>
 8011914:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011916:	f7fd f9dd 	bl	800ecd4 <__retarget_lock_release_recursive>
 801191a:	e7ea      	b.n	80118f2 <_vfiprintf_r+0x52>
 801191c:	2300      	movs	r3, #0
 801191e:	ad08      	add	r5, sp, #32
 8011920:	616b      	str	r3, [r5, #20]
 8011922:	3320      	adds	r3, #32
 8011924:	766b      	strb	r3, [r5, #25]
 8011926:	3310      	adds	r3, #16
 8011928:	76ab      	strb	r3, [r5, #26]
 801192a:	9707      	str	r7, [sp, #28]
 801192c:	9f03      	ldr	r7, [sp, #12]
 801192e:	783b      	ldrb	r3, [r7, #0]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d001      	beq.n	8011938 <_vfiprintf_r+0x98>
 8011934:	2b25      	cmp	r3, #37	; 0x25
 8011936:	d14e      	bne.n	80119d6 <_vfiprintf_r+0x136>
 8011938:	9b03      	ldr	r3, [sp, #12]
 801193a:	1afb      	subs	r3, r7, r3
 801193c:	9305      	str	r3, [sp, #20]
 801193e:	9b03      	ldr	r3, [sp, #12]
 8011940:	429f      	cmp	r7, r3
 8011942:	d00d      	beq.n	8011960 <_vfiprintf_r+0xc0>
 8011944:	9b05      	ldr	r3, [sp, #20]
 8011946:	0021      	movs	r1, r4
 8011948:	0030      	movs	r0, r6
 801194a:	9a03      	ldr	r2, [sp, #12]
 801194c:	f7ff ff95 	bl	801187a <__sfputs_r>
 8011950:	1c43      	adds	r3, r0, #1
 8011952:	d100      	bne.n	8011956 <_vfiprintf_r+0xb6>
 8011954:	e0b5      	b.n	8011ac2 <_vfiprintf_r+0x222>
 8011956:	696a      	ldr	r2, [r5, #20]
 8011958:	9b05      	ldr	r3, [sp, #20]
 801195a:	4694      	mov	ip, r2
 801195c:	4463      	add	r3, ip
 801195e:	616b      	str	r3, [r5, #20]
 8011960:	783b      	ldrb	r3, [r7, #0]
 8011962:	2b00      	cmp	r3, #0
 8011964:	d100      	bne.n	8011968 <_vfiprintf_r+0xc8>
 8011966:	e0ac      	b.n	8011ac2 <_vfiprintf_r+0x222>
 8011968:	2201      	movs	r2, #1
 801196a:	1c7b      	adds	r3, r7, #1
 801196c:	9303      	str	r3, [sp, #12]
 801196e:	2300      	movs	r3, #0
 8011970:	4252      	negs	r2, r2
 8011972:	606a      	str	r2, [r5, #4]
 8011974:	a904      	add	r1, sp, #16
 8011976:	3254      	adds	r2, #84	; 0x54
 8011978:	1852      	adds	r2, r2, r1
 801197a:	602b      	str	r3, [r5, #0]
 801197c:	60eb      	str	r3, [r5, #12]
 801197e:	60ab      	str	r3, [r5, #8]
 8011980:	7013      	strb	r3, [r2, #0]
 8011982:	65ab      	str	r3, [r5, #88]	; 0x58
 8011984:	9b03      	ldr	r3, [sp, #12]
 8011986:	2205      	movs	r2, #5
 8011988:	7819      	ldrb	r1, [r3, #0]
 801198a:	485d      	ldr	r0, [pc, #372]	; (8011b00 <_vfiprintf_r+0x260>)
 801198c:	f7ff f800 	bl	8010990 <memchr>
 8011990:	9b03      	ldr	r3, [sp, #12]
 8011992:	1c5f      	adds	r7, r3, #1
 8011994:	2800      	cmp	r0, #0
 8011996:	d120      	bne.n	80119da <_vfiprintf_r+0x13a>
 8011998:	682a      	ldr	r2, [r5, #0]
 801199a:	06d3      	lsls	r3, r2, #27
 801199c:	d504      	bpl.n	80119a8 <_vfiprintf_r+0x108>
 801199e:	2353      	movs	r3, #83	; 0x53
 80119a0:	a904      	add	r1, sp, #16
 80119a2:	185b      	adds	r3, r3, r1
 80119a4:	2120      	movs	r1, #32
 80119a6:	7019      	strb	r1, [r3, #0]
 80119a8:	0713      	lsls	r3, r2, #28
 80119aa:	d504      	bpl.n	80119b6 <_vfiprintf_r+0x116>
 80119ac:	2353      	movs	r3, #83	; 0x53
 80119ae:	a904      	add	r1, sp, #16
 80119b0:	185b      	adds	r3, r3, r1
 80119b2:	212b      	movs	r1, #43	; 0x2b
 80119b4:	7019      	strb	r1, [r3, #0]
 80119b6:	9b03      	ldr	r3, [sp, #12]
 80119b8:	781b      	ldrb	r3, [r3, #0]
 80119ba:	2b2a      	cmp	r3, #42	; 0x2a
 80119bc:	d016      	beq.n	80119ec <_vfiprintf_r+0x14c>
 80119be:	2100      	movs	r1, #0
 80119c0:	68eb      	ldr	r3, [r5, #12]
 80119c2:	9f03      	ldr	r7, [sp, #12]
 80119c4:	783a      	ldrb	r2, [r7, #0]
 80119c6:	1c78      	adds	r0, r7, #1
 80119c8:	3a30      	subs	r2, #48	; 0x30
 80119ca:	4684      	mov	ip, r0
 80119cc:	2a09      	cmp	r2, #9
 80119ce:	d94f      	bls.n	8011a70 <_vfiprintf_r+0x1d0>
 80119d0:	2900      	cmp	r1, #0
 80119d2:	d111      	bne.n	80119f8 <_vfiprintf_r+0x158>
 80119d4:	e017      	b.n	8011a06 <_vfiprintf_r+0x166>
 80119d6:	3701      	adds	r7, #1
 80119d8:	e7a9      	b.n	801192e <_vfiprintf_r+0x8e>
 80119da:	4b49      	ldr	r3, [pc, #292]	; (8011b00 <_vfiprintf_r+0x260>)
 80119dc:	682a      	ldr	r2, [r5, #0]
 80119de:	1ac0      	subs	r0, r0, r3
 80119e0:	2301      	movs	r3, #1
 80119e2:	4083      	lsls	r3, r0
 80119e4:	4313      	orrs	r3, r2
 80119e6:	602b      	str	r3, [r5, #0]
 80119e8:	9703      	str	r7, [sp, #12]
 80119ea:	e7cb      	b.n	8011984 <_vfiprintf_r+0xe4>
 80119ec:	9b07      	ldr	r3, [sp, #28]
 80119ee:	1d19      	adds	r1, r3, #4
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	9107      	str	r1, [sp, #28]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	db01      	blt.n	80119fc <_vfiprintf_r+0x15c>
 80119f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80119fa:	e004      	b.n	8011a06 <_vfiprintf_r+0x166>
 80119fc:	425b      	negs	r3, r3
 80119fe:	60eb      	str	r3, [r5, #12]
 8011a00:	2302      	movs	r3, #2
 8011a02:	4313      	orrs	r3, r2
 8011a04:	602b      	str	r3, [r5, #0]
 8011a06:	783b      	ldrb	r3, [r7, #0]
 8011a08:	2b2e      	cmp	r3, #46	; 0x2e
 8011a0a:	d10a      	bne.n	8011a22 <_vfiprintf_r+0x182>
 8011a0c:	787b      	ldrb	r3, [r7, #1]
 8011a0e:	2b2a      	cmp	r3, #42	; 0x2a
 8011a10:	d137      	bne.n	8011a82 <_vfiprintf_r+0x1e2>
 8011a12:	9b07      	ldr	r3, [sp, #28]
 8011a14:	3702      	adds	r7, #2
 8011a16:	1d1a      	adds	r2, r3, #4
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	9207      	str	r2, [sp, #28]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	db2d      	blt.n	8011a7c <_vfiprintf_r+0x1dc>
 8011a20:	9309      	str	r3, [sp, #36]	; 0x24
 8011a22:	2203      	movs	r2, #3
 8011a24:	7839      	ldrb	r1, [r7, #0]
 8011a26:	4837      	ldr	r0, [pc, #220]	; (8011b04 <_vfiprintf_r+0x264>)
 8011a28:	f7fe ffb2 	bl	8010990 <memchr>
 8011a2c:	2800      	cmp	r0, #0
 8011a2e:	d007      	beq.n	8011a40 <_vfiprintf_r+0x1a0>
 8011a30:	4b34      	ldr	r3, [pc, #208]	; (8011b04 <_vfiprintf_r+0x264>)
 8011a32:	682a      	ldr	r2, [r5, #0]
 8011a34:	1ac0      	subs	r0, r0, r3
 8011a36:	2340      	movs	r3, #64	; 0x40
 8011a38:	4083      	lsls	r3, r0
 8011a3a:	4313      	orrs	r3, r2
 8011a3c:	3701      	adds	r7, #1
 8011a3e:	602b      	str	r3, [r5, #0]
 8011a40:	7839      	ldrb	r1, [r7, #0]
 8011a42:	1c7b      	adds	r3, r7, #1
 8011a44:	2206      	movs	r2, #6
 8011a46:	4830      	ldr	r0, [pc, #192]	; (8011b08 <_vfiprintf_r+0x268>)
 8011a48:	9303      	str	r3, [sp, #12]
 8011a4a:	7629      	strb	r1, [r5, #24]
 8011a4c:	f7fe ffa0 	bl	8010990 <memchr>
 8011a50:	2800      	cmp	r0, #0
 8011a52:	d045      	beq.n	8011ae0 <_vfiprintf_r+0x240>
 8011a54:	4b2d      	ldr	r3, [pc, #180]	; (8011b0c <_vfiprintf_r+0x26c>)
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d127      	bne.n	8011aaa <_vfiprintf_r+0x20a>
 8011a5a:	2207      	movs	r2, #7
 8011a5c:	9b07      	ldr	r3, [sp, #28]
 8011a5e:	3307      	adds	r3, #7
 8011a60:	4393      	bics	r3, r2
 8011a62:	3308      	adds	r3, #8
 8011a64:	9307      	str	r3, [sp, #28]
 8011a66:	696b      	ldr	r3, [r5, #20]
 8011a68:	9a04      	ldr	r2, [sp, #16]
 8011a6a:	189b      	adds	r3, r3, r2
 8011a6c:	616b      	str	r3, [r5, #20]
 8011a6e:	e75d      	b.n	801192c <_vfiprintf_r+0x8c>
 8011a70:	210a      	movs	r1, #10
 8011a72:	434b      	muls	r3, r1
 8011a74:	4667      	mov	r7, ip
 8011a76:	189b      	adds	r3, r3, r2
 8011a78:	3909      	subs	r1, #9
 8011a7a:	e7a3      	b.n	80119c4 <_vfiprintf_r+0x124>
 8011a7c:	2301      	movs	r3, #1
 8011a7e:	425b      	negs	r3, r3
 8011a80:	e7ce      	b.n	8011a20 <_vfiprintf_r+0x180>
 8011a82:	2300      	movs	r3, #0
 8011a84:	001a      	movs	r2, r3
 8011a86:	3701      	adds	r7, #1
 8011a88:	606b      	str	r3, [r5, #4]
 8011a8a:	7839      	ldrb	r1, [r7, #0]
 8011a8c:	1c78      	adds	r0, r7, #1
 8011a8e:	3930      	subs	r1, #48	; 0x30
 8011a90:	4684      	mov	ip, r0
 8011a92:	2909      	cmp	r1, #9
 8011a94:	d903      	bls.n	8011a9e <_vfiprintf_r+0x1fe>
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d0c3      	beq.n	8011a22 <_vfiprintf_r+0x182>
 8011a9a:	9209      	str	r2, [sp, #36]	; 0x24
 8011a9c:	e7c1      	b.n	8011a22 <_vfiprintf_r+0x182>
 8011a9e:	230a      	movs	r3, #10
 8011aa0:	435a      	muls	r2, r3
 8011aa2:	4667      	mov	r7, ip
 8011aa4:	1852      	adds	r2, r2, r1
 8011aa6:	3b09      	subs	r3, #9
 8011aa8:	e7ef      	b.n	8011a8a <_vfiprintf_r+0x1ea>
 8011aaa:	ab07      	add	r3, sp, #28
 8011aac:	9300      	str	r3, [sp, #0]
 8011aae:	0022      	movs	r2, r4
 8011ab0:	0029      	movs	r1, r5
 8011ab2:	0030      	movs	r0, r6
 8011ab4:	4b16      	ldr	r3, [pc, #88]	; (8011b10 <_vfiprintf_r+0x270>)
 8011ab6:	f7fd fa61 	bl	800ef7c <_printf_float>
 8011aba:	9004      	str	r0, [sp, #16]
 8011abc:	9b04      	ldr	r3, [sp, #16]
 8011abe:	3301      	adds	r3, #1
 8011ac0:	d1d1      	bne.n	8011a66 <_vfiprintf_r+0x1c6>
 8011ac2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011ac4:	07db      	lsls	r3, r3, #31
 8011ac6:	d405      	bmi.n	8011ad4 <_vfiprintf_r+0x234>
 8011ac8:	89a3      	ldrh	r3, [r4, #12]
 8011aca:	059b      	lsls	r3, r3, #22
 8011acc:	d402      	bmi.n	8011ad4 <_vfiprintf_r+0x234>
 8011ace:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011ad0:	f7fd f900 	bl	800ecd4 <__retarget_lock_release_recursive>
 8011ad4:	89a3      	ldrh	r3, [r4, #12]
 8011ad6:	065b      	lsls	r3, r3, #25
 8011ad8:	d500      	bpl.n	8011adc <_vfiprintf_r+0x23c>
 8011ada:	e70a      	b.n	80118f2 <_vfiprintf_r+0x52>
 8011adc:	980d      	ldr	r0, [sp, #52]	; 0x34
 8011ade:	e70a      	b.n	80118f6 <_vfiprintf_r+0x56>
 8011ae0:	ab07      	add	r3, sp, #28
 8011ae2:	9300      	str	r3, [sp, #0]
 8011ae4:	0022      	movs	r2, r4
 8011ae6:	0029      	movs	r1, r5
 8011ae8:	0030      	movs	r0, r6
 8011aea:	4b09      	ldr	r3, [pc, #36]	; (8011b10 <_vfiprintf_r+0x270>)
 8011aec:	f7fd fcf8 	bl	800f4e0 <_printf_i>
 8011af0:	e7e3      	b.n	8011aba <_vfiprintf_r+0x21a>
 8011af2:	46c0      	nop			; (mov r8, r8)
 8011af4:	080139f8 	.word	0x080139f8
 8011af8:	08013a18 	.word	0x08013a18
 8011afc:	080139d8 	.word	0x080139d8
 8011b00:	08013d5c 	.word	0x08013d5c
 8011b04:	08013d62 	.word	0x08013d62
 8011b08:	08013d66 	.word	0x08013d66
 8011b0c:	0800ef7d 	.word	0x0800ef7d
 8011b10:	0801187b 	.word	0x0801187b

08011b14 <__ascii_wctomb>:
 8011b14:	0003      	movs	r3, r0
 8011b16:	1e08      	subs	r0, r1, #0
 8011b18:	d005      	beq.n	8011b26 <__ascii_wctomb+0x12>
 8011b1a:	2aff      	cmp	r2, #255	; 0xff
 8011b1c:	d904      	bls.n	8011b28 <__ascii_wctomb+0x14>
 8011b1e:	228a      	movs	r2, #138	; 0x8a
 8011b20:	2001      	movs	r0, #1
 8011b22:	601a      	str	r2, [r3, #0]
 8011b24:	4240      	negs	r0, r0
 8011b26:	4770      	bx	lr
 8011b28:	2001      	movs	r0, #1
 8011b2a:	700a      	strb	r2, [r1, #0]
 8011b2c:	e7fb      	b.n	8011b26 <__ascii_wctomb+0x12>

08011b2e <abort>:
 8011b2e:	2006      	movs	r0, #6
 8011b30:	b510      	push	{r4, lr}
 8011b32:	f000 f859 	bl	8011be8 <raise>
 8011b36:	2001      	movs	r0, #1
 8011b38:	f7f2 fd9e 	bl	8004678 <_exit>

08011b3c <_fstat_r>:
 8011b3c:	2300      	movs	r3, #0
 8011b3e:	b570      	push	{r4, r5, r6, lr}
 8011b40:	4d06      	ldr	r5, [pc, #24]	; (8011b5c <_fstat_r+0x20>)
 8011b42:	0004      	movs	r4, r0
 8011b44:	0008      	movs	r0, r1
 8011b46:	0011      	movs	r1, r2
 8011b48:	602b      	str	r3, [r5, #0]
 8011b4a:	f7f2 fde4 	bl	8004716 <_fstat>
 8011b4e:	1c43      	adds	r3, r0, #1
 8011b50:	d103      	bne.n	8011b5a <_fstat_r+0x1e>
 8011b52:	682b      	ldr	r3, [r5, #0]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d000      	beq.n	8011b5a <_fstat_r+0x1e>
 8011b58:	6023      	str	r3, [r4, #0]
 8011b5a:	bd70      	pop	{r4, r5, r6, pc}
 8011b5c:	200021a4 	.word	0x200021a4

08011b60 <_isatty_r>:
 8011b60:	2300      	movs	r3, #0
 8011b62:	b570      	push	{r4, r5, r6, lr}
 8011b64:	4d06      	ldr	r5, [pc, #24]	; (8011b80 <_isatty_r+0x20>)
 8011b66:	0004      	movs	r4, r0
 8011b68:	0008      	movs	r0, r1
 8011b6a:	602b      	str	r3, [r5, #0]
 8011b6c:	f7f2 fde1 	bl	8004732 <_isatty>
 8011b70:	1c43      	adds	r3, r0, #1
 8011b72:	d103      	bne.n	8011b7c <_isatty_r+0x1c>
 8011b74:	682b      	ldr	r3, [r5, #0]
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d000      	beq.n	8011b7c <_isatty_r+0x1c>
 8011b7a:	6023      	str	r3, [r4, #0]
 8011b7c:	bd70      	pop	{r4, r5, r6, pc}
 8011b7e:	46c0      	nop			; (mov r8, r8)
 8011b80:	200021a4 	.word	0x200021a4

08011b84 <_malloc_usable_size_r>:
 8011b84:	1f0b      	subs	r3, r1, #4
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	1f18      	subs	r0, r3, #4
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	da01      	bge.n	8011b92 <_malloc_usable_size_r+0xe>
 8011b8e:	580b      	ldr	r3, [r1, r0]
 8011b90:	18c0      	adds	r0, r0, r3
 8011b92:	4770      	bx	lr

08011b94 <_raise_r>:
 8011b94:	b570      	push	{r4, r5, r6, lr}
 8011b96:	0004      	movs	r4, r0
 8011b98:	000d      	movs	r5, r1
 8011b9a:	291f      	cmp	r1, #31
 8011b9c:	d904      	bls.n	8011ba8 <_raise_r+0x14>
 8011b9e:	2316      	movs	r3, #22
 8011ba0:	6003      	str	r3, [r0, #0]
 8011ba2:	2001      	movs	r0, #1
 8011ba4:	4240      	negs	r0, r0
 8011ba6:	bd70      	pop	{r4, r5, r6, pc}
 8011ba8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d004      	beq.n	8011bb8 <_raise_r+0x24>
 8011bae:	008a      	lsls	r2, r1, #2
 8011bb0:	189b      	adds	r3, r3, r2
 8011bb2:	681a      	ldr	r2, [r3, #0]
 8011bb4:	2a00      	cmp	r2, #0
 8011bb6:	d108      	bne.n	8011bca <_raise_r+0x36>
 8011bb8:	0020      	movs	r0, r4
 8011bba:	f000 f831 	bl	8011c20 <_getpid_r>
 8011bbe:	002a      	movs	r2, r5
 8011bc0:	0001      	movs	r1, r0
 8011bc2:	0020      	movs	r0, r4
 8011bc4:	f000 f81a 	bl	8011bfc <_kill_r>
 8011bc8:	e7ed      	b.n	8011ba6 <_raise_r+0x12>
 8011bca:	2000      	movs	r0, #0
 8011bcc:	2a01      	cmp	r2, #1
 8011bce:	d0ea      	beq.n	8011ba6 <_raise_r+0x12>
 8011bd0:	1c51      	adds	r1, r2, #1
 8011bd2:	d103      	bne.n	8011bdc <_raise_r+0x48>
 8011bd4:	2316      	movs	r3, #22
 8011bd6:	3001      	adds	r0, #1
 8011bd8:	6023      	str	r3, [r4, #0]
 8011bda:	e7e4      	b.n	8011ba6 <_raise_r+0x12>
 8011bdc:	2400      	movs	r4, #0
 8011bde:	0028      	movs	r0, r5
 8011be0:	601c      	str	r4, [r3, #0]
 8011be2:	4790      	blx	r2
 8011be4:	0020      	movs	r0, r4
 8011be6:	e7de      	b.n	8011ba6 <_raise_r+0x12>

08011be8 <raise>:
 8011be8:	b510      	push	{r4, lr}
 8011bea:	4b03      	ldr	r3, [pc, #12]	; (8011bf8 <raise+0x10>)
 8011bec:	0001      	movs	r1, r0
 8011bee:	6818      	ldr	r0, [r3, #0]
 8011bf0:	f7ff ffd0 	bl	8011b94 <_raise_r>
 8011bf4:	bd10      	pop	{r4, pc}
 8011bf6:	46c0      	nop			; (mov r8, r8)
 8011bf8:	20000074 	.word	0x20000074

08011bfc <_kill_r>:
 8011bfc:	2300      	movs	r3, #0
 8011bfe:	b570      	push	{r4, r5, r6, lr}
 8011c00:	4d06      	ldr	r5, [pc, #24]	; (8011c1c <_kill_r+0x20>)
 8011c02:	0004      	movs	r4, r0
 8011c04:	0008      	movs	r0, r1
 8011c06:	0011      	movs	r1, r2
 8011c08:	602b      	str	r3, [r5, #0]
 8011c0a:	f7f2 fd25 	bl	8004658 <_kill>
 8011c0e:	1c43      	adds	r3, r0, #1
 8011c10:	d103      	bne.n	8011c1a <_kill_r+0x1e>
 8011c12:	682b      	ldr	r3, [r5, #0]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d000      	beq.n	8011c1a <_kill_r+0x1e>
 8011c18:	6023      	str	r3, [r4, #0]
 8011c1a:	bd70      	pop	{r4, r5, r6, pc}
 8011c1c:	200021a4 	.word	0x200021a4

08011c20 <_getpid_r>:
 8011c20:	b510      	push	{r4, lr}
 8011c22:	f7f2 fd13 	bl	800464c <_getpid>
 8011c26:	bd10      	pop	{r4, pc}

08011c28 <cos>:
 8011c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c2a:	4a1e      	ldr	r2, [pc, #120]	; (8011ca4 <cos+0x7c>)
 8011c2c:	004b      	lsls	r3, r1, #1
 8011c2e:	b087      	sub	sp, #28
 8011c30:	085b      	lsrs	r3, r3, #1
 8011c32:	4293      	cmp	r3, r2
 8011c34:	dc04      	bgt.n	8011c40 <cos+0x18>
 8011c36:	2200      	movs	r2, #0
 8011c38:	2300      	movs	r3, #0
 8011c3a:	f000 fa6d 	bl	8012118 <__kernel_cos>
 8011c3e:	e006      	b.n	8011c4e <cos+0x26>
 8011c40:	4a19      	ldr	r2, [pc, #100]	; (8011ca8 <cos+0x80>)
 8011c42:	4293      	cmp	r3, r2
 8011c44:	dd05      	ble.n	8011c52 <cos+0x2a>
 8011c46:	0002      	movs	r2, r0
 8011c48:	000b      	movs	r3, r1
 8011c4a:	f7f0 fa49 	bl	80020e0 <__aeabi_dsub>
 8011c4e:	b007      	add	sp, #28
 8011c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c52:	aa02      	add	r2, sp, #8
 8011c54:	f000 f870 	bl	8011d38 <__ieee754_rem_pio2>
 8011c58:	9c04      	ldr	r4, [sp, #16]
 8011c5a:	9d05      	ldr	r5, [sp, #20]
 8011c5c:	2303      	movs	r3, #3
 8011c5e:	4003      	ands	r3, r0
 8011c60:	2b01      	cmp	r3, #1
 8011c62:	d008      	beq.n	8011c76 <cos+0x4e>
 8011c64:	9802      	ldr	r0, [sp, #8]
 8011c66:	9903      	ldr	r1, [sp, #12]
 8011c68:	2b02      	cmp	r3, #2
 8011c6a:	d00f      	beq.n	8011c8c <cos+0x64>
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d112      	bne.n	8011c96 <cos+0x6e>
 8011c70:	0022      	movs	r2, r4
 8011c72:	002b      	movs	r3, r5
 8011c74:	e7e1      	b.n	8011c3a <cos+0x12>
 8011c76:	9300      	str	r3, [sp, #0]
 8011c78:	0022      	movs	r2, r4
 8011c7a:	9802      	ldr	r0, [sp, #8]
 8011c7c:	9903      	ldr	r1, [sp, #12]
 8011c7e:	002b      	movs	r3, r5
 8011c80:	f000 fe74 	bl	801296c <__kernel_sin>
 8011c84:	2380      	movs	r3, #128	; 0x80
 8011c86:	061b      	lsls	r3, r3, #24
 8011c88:	18c9      	adds	r1, r1, r3
 8011c8a:	e7e0      	b.n	8011c4e <cos+0x26>
 8011c8c:	0022      	movs	r2, r4
 8011c8e:	002b      	movs	r3, r5
 8011c90:	f000 fa42 	bl	8012118 <__kernel_cos>
 8011c94:	e7f6      	b.n	8011c84 <cos+0x5c>
 8011c96:	2301      	movs	r3, #1
 8011c98:	0022      	movs	r2, r4
 8011c9a:	9300      	str	r3, [sp, #0]
 8011c9c:	002b      	movs	r3, r5
 8011c9e:	f000 fe65 	bl	801296c <__kernel_sin>
 8011ca2:	e7d4      	b.n	8011c4e <cos+0x26>
 8011ca4:	3fe921fb 	.word	0x3fe921fb
 8011ca8:	7fefffff 	.word	0x7fefffff

08011cac <sin>:
 8011cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011cae:	4a20      	ldr	r2, [pc, #128]	; (8011d30 <sin+0x84>)
 8011cb0:	004b      	lsls	r3, r1, #1
 8011cb2:	b087      	sub	sp, #28
 8011cb4:	085b      	lsrs	r3, r3, #1
 8011cb6:	4293      	cmp	r3, r2
 8011cb8:	dc06      	bgt.n	8011cc8 <sin+0x1c>
 8011cba:	2300      	movs	r3, #0
 8011cbc:	2200      	movs	r2, #0
 8011cbe:	9300      	str	r3, [sp, #0]
 8011cc0:	2300      	movs	r3, #0
 8011cc2:	f000 fe53 	bl	801296c <__kernel_sin>
 8011cc6:	e006      	b.n	8011cd6 <sin+0x2a>
 8011cc8:	4a1a      	ldr	r2, [pc, #104]	; (8011d34 <sin+0x88>)
 8011cca:	4293      	cmp	r3, r2
 8011ccc:	dd05      	ble.n	8011cda <sin+0x2e>
 8011cce:	0002      	movs	r2, r0
 8011cd0:	000b      	movs	r3, r1
 8011cd2:	f7f0 fa05 	bl	80020e0 <__aeabi_dsub>
 8011cd6:	b007      	add	sp, #28
 8011cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011cda:	aa02      	add	r2, sp, #8
 8011cdc:	f000 f82c 	bl	8011d38 <__ieee754_rem_pio2>
 8011ce0:	9c04      	ldr	r4, [sp, #16]
 8011ce2:	9d05      	ldr	r5, [sp, #20]
 8011ce4:	2303      	movs	r3, #3
 8011ce6:	4003      	ands	r3, r0
 8011ce8:	2b01      	cmp	r3, #1
 8011cea:	d00a      	beq.n	8011d02 <sin+0x56>
 8011cec:	9802      	ldr	r0, [sp, #8]
 8011cee:	9903      	ldr	r1, [sp, #12]
 8011cf0:	2b02      	cmp	r3, #2
 8011cf2:	d00d      	beq.n	8011d10 <sin+0x64>
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d115      	bne.n	8011d24 <sin+0x78>
 8011cf8:	3301      	adds	r3, #1
 8011cfa:	9300      	str	r3, [sp, #0]
 8011cfc:	0022      	movs	r2, r4
 8011cfe:	002b      	movs	r3, r5
 8011d00:	e7df      	b.n	8011cc2 <sin+0x16>
 8011d02:	0022      	movs	r2, r4
 8011d04:	9802      	ldr	r0, [sp, #8]
 8011d06:	9903      	ldr	r1, [sp, #12]
 8011d08:	002b      	movs	r3, r5
 8011d0a:	f000 fa05 	bl	8012118 <__kernel_cos>
 8011d0e:	e7e2      	b.n	8011cd6 <sin+0x2a>
 8011d10:	2301      	movs	r3, #1
 8011d12:	0022      	movs	r2, r4
 8011d14:	9300      	str	r3, [sp, #0]
 8011d16:	002b      	movs	r3, r5
 8011d18:	f000 fe28 	bl	801296c <__kernel_sin>
 8011d1c:	2380      	movs	r3, #128	; 0x80
 8011d1e:	061b      	lsls	r3, r3, #24
 8011d20:	18c9      	adds	r1, r1, r3
 8011d22:	e7d8      	b.n	8011cd6 <sin+0x2a>
 8011d24:	0022      	movs	r2, r4
 8011d26:	002b      	movs	r3, r5
 8011d28:	f000 f9f6 	bl	8012118 <__kernel_cos>
 8011d2c:	e7f6      	b.n	8011d1c <sin+0x70>
 8011d2e:	46c0      	nop			; (mov r8, r8)
 8011d30:	3fe921fb 	.word	0x3fe921fb
 8011d34:	7fefffff 	.word	0x7fefffff

08011d38 <__ieee754_rem_pio2>:
 8011d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011d3a:	004b      	lsls	r3, r1, #1
 8011d3c:	b091      	sub	sp, #68	; 0x44
 8011d3e:	085b      	lsrs	r3, r3, #1
 8011d40:	9302      	str	r3, [sp, #8]
 8011d42:	0017      	movs	r7, r2
 8011d44:	4bb6      	ldr	r3, [pc, #728]	; (8012020 <__ieee754_rem_pio2+0x2e8>)
 8011d46:	9a02      	ldr	r2, [sp, #8]
 8011d48:	0004      	movs	r4, r0
 8011d4a:	000d      	movs	r5, r1
 8011d4c:	9109      	str	r1, [sp, #36]	; 0x24
 8011d4e:	429a      	cmp	r2, r3
 8011d50:	dc09      	bgt.n	8011d66 <__ieee754_rem_pio2+0x2e>
 8011d52:	0002      	movs	r2, r0
 8011d54:	000b      	movs	r3, r1
 8011d56:	603a      	str	r2, [r7, #0]
 8011d58:	607b      	str	r3, [r7, #4]
 8011d5a:	2200      	movs	r2, #0
 8011d5c:	2300      	movs	r3, #0
 8011d5e:	60ba      	str	r2, [r7, #8]
 8011d60:	60fb      	str	r3, [r7, #12]
 8011d62:	2600      	movs	r6, #0
 8011d64:	e025      	b.n	8011db2 <__ieee754_rem_pio2+0x7a>
 8011d66:	4baf      	ldr	r3, [pc, #700]	; (8012024 <__ieee754_rem_pio2+0x2ec>)
 8011d68:	9a02      	ldr	r2, [sp, #8]
 8011d6a:	429a      	cmp	r2, r3
 8011d6c:	dd00      	ble.n	8011d70 <__ieee754_rem_pio2+0x38>
 8011d6e:	e06e      	b.n	8011e4e <__ieee754_rem_pio2+0x116>
 8011d70:	4ead      	ldr	r6, [pc, #692]	; (8012028 <__ieee754_rem_pio2+0x2f0>)
 8011d72:	4aae      	ldr	r2, [pc, #696]	; (801202c <__ieee754_rem_pio2+0x2f4>)
 8011d74:	2d00      	cmp	r5, #0
 8011d76:	dd35      	ble.n	8011de4 <__ieee754_rem_pio2+0xac>
 8011d78:	0020      	movs	r0, r4
 8011d7a:	0029      	movs	r1, r5
 8011d7c:	4baa      	ldr	r3, [pc, #680]	; (8012028 <__ieee754_rem_pio2+0x2f0>)
 8011d7e:	f7f0 f9af 	bl	80020e0 <__aeabi_dsub>
 8011d82:	9b02      	ldr	r3, [sp, #8]
 8011d84:	0004      	movs	r4, r0
 8011d86:	000d      	movs	r5, r1
 8011d88:	42b3      	cmp	r3, r6
 8011d8a:	d015      	beq.n	8011db8 <__ieee754_rem_pio2+0x80>
 8011d8c:	4aa8      	ldr	r2, [pc, #672]	; (8012030 <__ieee754_rem_pio2+0x2f8>)
 8011d8e:	4ba9      	ldr	r3, [pc, #676]	; (8012034 <__ieee754_rem_pio2+0x2fc>)
 8011d90:	f7f0 f9a6 	bl	80020e0 <__aeabi_dsub>
 8011d94:	0002      	movs	r2, r0
 8011d96:	000b      	movs	r3, r1
 8011d98:	0020      	movs	r0, r4
 8011d9a:	603a      	str	r2, [r7, #0]
 8011d9c:	607b      	str	r3, [r7, #4]
 8011d9e:	0029      	movs	r1, r5
 8011da0:	f7f0 f99e 	bl	80020e0 <__aeabi_dsub>
 8011da4:	4aa2      	ldr	r2, [pc, #648]	; (8012030 <__ieee754_rem_pio2+0x2f8>)
 8011da6:	4ba3      	ldr	r3, [pc, #652]	; (8012034 <__ieee754_rem_pio2+0x2fc>)
 8011da8:	f7f0 f99a 	bl	80020e0 <__aeabi_dsub>
 8011dac:	2601      	movs	r6, #1
 8011dae:	60b8      	str	r0, [r7, #8]
 8011db0:	60f9      	str	r1, [r7, #12]
 8011db2:	0030      	movs	r0, r6
 8011db4:	b011      	add	sp, #68	; 0x44
 8011db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011db8:	22d3      	movs	r2, #211	; 0xd3
 8011dba:	4b9e      	ldr	r3, [pc, #632]	; (8012034 <__ieee754_rem_pio2+0x2fc>)
 8011dbc:	0552      	lsls	r2, r2, #21
 8011dbe:	f7f0 f98f 	bl	80020e0 <__aeabi_dsub>
 8011dc2:	4a9d      	ldr	r2, [pc, #628]	; (8012038 <__ieee754_rem_pio2+0x300>)
 8011dc4:	4b9d      	ldr	r3, [pc, #628]	; (801203c <__ieee754_rem_pio2+0x304>)
 8011dc6:	0004      	movs	r4, r0
 8011dc8:	000d      	movs	r5, r1
 8011dca:	f7f0 f989 	bl	80020e0 <__aeabi_dsub>
 8011dce:	0002      	movs	r2, r0
 8011dd0:	000b      	movs	r3, r1
 8011dd2:	0020      	movs	r0, r4
 8011dd4:	603a      	str	r2, [r7, #0]
 8011dd6:	607b      	str	r3, [r7, #4]
 8011dd8:	0029      	movs	r1, r5
 8011dda:	f7f0 f981 	bl	80020e0 <__aeabi_dsub>
 8011dde:	4a96      	ldr	r2, [pc, #600]	; (8012038 <__ieee754_rem_pio2+0x300>)
 8011de0:	4b96      	ldr	r3, [pc, #600]	; (801203c <__ieee754_rem_pio2+0x304>)
 8011de2:	e7e1      	b.n	8011da8 <__ieee754_rem_pio2+0x70>
 8011de4:	0020      	movs	r0, r4
 8011de6:	0029      	movs	r1, r5
 8011de8:	4b8f      	ldr	r3, [pc, #572]	; (8012028 <__ieee754_rem_pio2+0x2f0>)
 8011dea:	f7ee ffcf 	bl	8000d8c <__aeabi_dadd>
 8011dee:	9b02      	ldr	r3, [sp, #8]
 8011df0:	0004      	movs	r4, r0
 8011df2:	000d      	movs	r5, r1
 8011df4:	42b3      	cmp	r3, r6
 8011df6:	d014      	beq.n	8011e22 <__ieee754_rem_pio2+0xea>
 8011df8:	4a8d      	ldr	r2, [pc, #564]	; (8012030 <__ieee754_rem_pio2+0x2f8>)
 8011dfa:	4b8e      	ldr	r3, [pc, #568]	; (8012034 <__ieee754_rem_pio2+0x2fc>)
 8011dfc:	f7ee ffc6 	bl	8000d8c <__aeabi_dadd>
 8011e00:	0002      	movs	r2, r0
 8011e02:	000b      	movs	r3, r1
 8011e04:	0020      	movs	r0, r4
 8011e06:	603a      	str	r2, [r7, #0]
 8011e08:	607b      	str	r3, [r7, #4]
 8011e0a:	0029      	movs	r1, r5
 8011e0c:	f7f0 f968 	bl	80020e0 <__aeabi_dsub>
 8011e10:	4a87      	ldr	r2, [pc, #540]	; (8012030 <__ieee754_rem_pio2+0x2f8>)
 8011e12:	4b88      	ldr	r3, [pc, #544]	; (8012034 <__ieee754_rem_pio2+0x2fc>)
 8011e14:	f7ee ffba 	bl	8000d8c <__aeabi_dadd>
 8011e18:	2601      	movs	r6, #1
 8011e1a:	60b8      	str	r0, [r7, #8]
 8011e1c:	60f9      	str	r1, [r7, #12]
 8011e1e:	4276      	negs	r6, r6
 8011e20:	e7c7      	b.n	8011db2 <__ieee754_rem_pio2+0x7a>
 8011e22:	22d3      	movs	r2, #211	; 0xd3
 8011e24:	4b83      	ldr	r3, [pc, #524]	; (8012034 <__ieee754_rem_pio2+0x2fc>)
 8011e26:	0552      	lsls	r2, r2, #21
 8011e28:	f7ee ffb0 	bl	8000d8c <__aeabi_dadd>
 8011e2c:	4a82      	ldr	r2, [pc, #520]	; (8012038 <__ieee754_rem_pio2+0x300>)
 8011e2e:	4b83      	ldr	r3, [pc, #524]	; (801203c <__ieee754_rem_pio2+0x304>)
 8011e30:	0004      	movs	r4, r0
 8011e32:	000d      	movs	r5, r1
 8011e34:	f7ee ffaa 	bl	8000d8c <__aeabi_dadd>
 8011e38:	0002      	movs	r2, r0
 8011e3a:	000b      	movs	r3, r1
 8011e3c:	0020      	movs	r0, r4
 8011e3e:	603a      	str	r2, [r7, #0]
 8011e40:	607b      	str	r3, [r7, #4]
 8011e42:	0029      	movs	r1, r5
 8011e44:	f7f0 f94c 	bl	80020e0 <__aeabi_dsub>
 8011e48:	4a7b      	ldr	r2, [pc, #492]	; (8012038 <__ieee754_rem_pio2+0x300>)
 8011e4a:	4b7c      	ldr	r3, [pc, #496]	; (801203c <__ieee754_rem_pio2+0x304>)
 8011e4c:	e7e2      	b.n	8011e14 <__ieee754_rem_pio2+0xdc>
 8011e4e:	4b7c      	ldr	r3, [pc, #496]	; (8012040 <__ieee754_rem_pio2+0x308>)
 8011e50:	9a02      	ldr	r2, [sp, #8]
 8011e52:	429a      	cmp	r2, r3
 8011e54:	dd00      	ble.n	8011e58 <__ieee754_rem_pio2+0x120>
 8011e56:	e0d3      	b.n	8012000 <__ieee754_rem_pio2+0x2c8>
 8011e58:	0020      	movs	r0, r4
 8011e5a:	0029      	movs	r1, r5
 8011e5c:	f000 fe32 	bl	8012ac4 <fabs>
 8011e60:	4a78      	ldr	r2, [pc, #480]	; (8012044 <__ieee754_rem_pio2+0x30c>)
 8011e62:	4b79      	ldr	r3, [pc, #484]	; (8012048 <__ieee754_rem_pio2+0x310>)
 8011e64:	0004      	movs	r4, r0
 8011e66:	000d      	movs	r5, r1
 8011e68:	f7ef fece 	bl	8001c08 <__aeabi_dmul>
 8011e6c:	2200      	movs	r2, #0
 8011e6e:	4b77      	ldr	r3, [pc, #476]	; (801204c <__ieee754_rem_pio2+0x314>)
 8011e70:	f7ee ff8c 	bl	8000d8c <__aeabi_dadd>
 8011e74:	f7f0 fce4 	bl	8002840 <__aeabi_d2iz>
 8011e78:	0006      	movs	r6, r0
 8011e7a:	f7f0 fd17 	bl	80028ac <__aeabi_i2d>
 8011e7e:	4a6b      	ldr	r2, [pc, #428]	; (801202c <__ieee754_rem_pio2+0x2f4>)
 8011e80:	4b69      	ldr	r3, [pc, #420]	; (8012028 <__ieee754_rem_pio2+0x2f0>)
 8011e82:	9006      	str	r0, [sp, #24]
 8011e84:	9107      	str	r1, [sp, #28]
 8011e86:	f7ef febf 	bl	8001c08 <__aeabi_dmul>
 8011e8a:	0002      	movs	r2, r0
 8011e8c:	000b      	movs	r3, r1
 8011e8e:	0020      	movs	r0, r4
 8011e90:	0029      	movs	r1, r5
 8011e92:	f7f0 f925 	bl	80020e0 <__aeabi_dsub>
 8011e96:	4a66      	ldr	r2, [pc, #408]	; (8012030 <__ieee754_rem_pio2+0x2f8>)
 8011e98:	9004      	str	r0, [sp, #16]
 8011e9a:	9105      	str	r1, [sp, #20]
 8011e9c:	9806      	ldr	r0, [sp, #24]
 8011e9e:	9907      	ldr	r1, [sp, #28]
 8011ea0:	4b64      	ldr	r3, [pc, #400]	; (8012034 <__ieee754_rem_pio2+0x2fc>)
 8011ea2:	f7ef feb1 	bl	8001c08 <__aeabi_dmul>
 8011ea6:	0004      	movs	r4, r0
 8011ea8:	000d      	movs	r5, r1
 8011eaa:	2e1f      	cmp	r6, #31
 8011eac:	dc0f      	bgt.n	8011ece <__ieee754_rem_pio2+0x196>
 8011eae:	4a68      	ldr	r2, [pc, #416]	; (8012050 <__ieee754_rem_pio2+0x318>)
 8011eb0:	1e73      	subs	r3, r6, #1
 8011eb2:	009b      	lsls	r3, r3, #2
 8011eb4:	589b      	ldr	r3, [r3, r2]
 8011eb6:	9a02      	ldr	r2, [sp, #8]
 8011eb8:	4293      	cmp	r3, r2
 8011eba:	d008      	beq.n	8011ece <__ieee754_rem_pio2+0x196>
 8011ebc:	9804      	ldr	r0, [sp, #16]
 8011ebe:	9905      	ldr	r1, [sp, #20]
 8011ec0:	0022      	movs	r2, r4
 8011ec2:	002b      	movs	r3, r5
 8011ec4:	f7f0 f90c 	bl	80020e0 <__aeabi_dsub>
 8011ec8:	6038      	str	r0, [r7, #0]
 8011eca:	6079      	str	r1, [r7, #4]
 8011ecc:	e012      	b.n	8011ef4 <__ieee754_rem_pio2+0x1bc>
 8011ece:	0022      	movs	r2, r4
 8011ed0:	9804      	ldr	r0, [sp, #16]
 8011ed2:	9905      	ldr	r1, [sp, #20]
 8011ed4:	002b      	movs	r3, r5
 8011ed6:	f7f0 f903 	bl	80020e0 <__aeabi_dsub>
 8011eda:	9b02      	ldr	r3, [sp, #8]
 8011edc:	151b      	asrs	r3, r3, #20
 8011ede:	9308      	str	r3, [sp, #32]
 8011ee0:	9a08      	ldr	r2, [sp, #32]
 8011ee2:	004b      	lsls	r3, r1, #1
 8011ee4:	0d5b      	lsrs	r3, r3, #21
 8011ee6:	1ad3      	subs	r3, r2, r3
 8011ee8:	2b10      	cmp	r3, #16
 8011eea:	dc21      	bgt.n	8011f30 <__ieee754_rem_pio2+0x1f8>
 8011eec:	0002      	movs	r2, r0
 8011eee:	000b      	movs	r3, r1
 8011ef0:	603a      	str	r2, [r7, #0]
 8011ef2:	607b      	str	r3, [r7, #4]
 8011ef4:	9804      	ldr	r0, [sp, #16]
 8011ef6:	9905      	ldr	r1, [sp, #20]
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	683a      	ldr	r2, [r7, #0]
 8011efc:	9302      	str	r3, [sp, #8]
 8011efe:	9b02      	ldr	r3, [sp, #8]
 8011f00:	f7f0 f8ee 	bl	80020e0 <__aeabi_dsub>
 8011f04:	0022      	movs	r2, r4
 8011f06:	002b      	movs	r3, r5
 8011f08:	f7f0 f8ea 	bl	80020e0 <__aeabi_dsub>
 8011f0c:	000b      	movs	r3, r1
 8011f0e:	0002      	movs	r2, r0
 8011f10:	60ba      	str	r2, [r7, #8]
 8011f12:	60fb      	str	r3, [r7, #12]
 8011f14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	db00      	blt.n	8011f1c <__ieee754_rem_pio2+0x1e4>
 8011f1a:	e74a      	b.n	8011db2 <__ieee754_rem_pio2+0x7a>
 8011f1c:	2380      	movs	r3, #128	; 0x80
 8011f1e:	061b      	lsls	r3, r3, #24
 8011f20:	469c      	mov	ip, r3
 8011f22:	9c02      	ldr	r4, [sp, #8]
 8011f24:	18c9      	adds	r1, r1, r3
 8011f26:	4464      	add	r4, ip
 8011f28:	607c      	str	r4, [r7, #4]
 8011f2a:	60b8      	str	r0, [r7, #8]
 8011f2c:	60f9      	str	r1, [r7, #12]
 8011f2e:	e776      	b.n	8011e1e <__ieee754_rem_pio2+0xe6>
 8011f30:	22d3      	movs	r2, #211	; 0xd3
 8011f32:	9806      	ldr	r0, [sp, #24]
 8011f34:	9907      	ldr	r1, [sp, #28]
 8011f36:	4b3f      	ldr	r3, [pc, #252]	; (8012034 <__ieee754_rem_pio2+0x2fc>)
 8011f38:	0552      	lsls	r2, r2, #21
 8011f3a:	f7ef fe65 	bl	8001c08 <__aeabi_dmul>
 8011f3e:	0004      	movs	r4, r0
 8011f40:	000d      	movs	r5, r1
 8011f42:	0002      	movs	r2, r0
 8011f44:	000b      	movs	r3, r1
 8011f46:	9804      	ldr	r0, [sp, #16]
 8011f48:	9905      	ldr	r1, [sp, #20]
 8011f4a:	f7f0 f8c9 	bl	80020e0 <__aeabi_dsub>
 8011f4e:	0002      	movs	r2, r0
 8011f50:	000b      	movs	r3, r1
 8011f52:	9002      	str	r0, [sp, #8]
 8011f54:	9103      	str	r1, [sp, #12]
 8011f56:	9804      	ldr	r0, [sp, #16]
 8011f58:	9905      	ldr	r1, [sp, #20]
 8011f5a:	f7f0 f8c1 	bl	80020e0 <__aeabi_dsub>
 8011f5e:	0022      	movs	r2, r4
 8011f60:	002b      	movs	r3, r5
 8011f62:	f7f0 f8bd 	bl	80020e0 <__aeabi_dsub>
 8011f66:	0004      	movs	r4, r0
 8011f68:	000d      	movs	r5, r1
 8011f6a:	9806      	ldr	r0, [sp, #24]
 8011f6c:	9907      	ldr	r1, [sp, #28]
 8011f6e:	4a32      	ldr	r2, [pc, #200]	; (8012038 <__ieee754_rem_pio2+0x300>)
 8011f70:	4b32      	ldr	r3, [pc, #200]	; (801203c <__ieee754_rem_pio2+0x304>)
 8011f72:	f7ef fe49 	bl	8001c08 <__aeabi_dmul>
 8011f76:	0022      	movs	r2, r4
 8011f78:	002b      	movs	r3, r5
 8011f7a:	f7f0 f8b1 	bl	80020e0 <__aeabi_dsub>
 8011f7e:	0002      	movs	r2, r0
 8011f80:	000b      	movs	r3, r1
 8011f82:	0004      	movs	r4, r0
 8011f84:	000d      	movs	r5, r1
 8011f86:	9802      	ldr	r0, [sp, #8]
 8011f88:	9903      	ldr	r1, [sp, #12]
 8011f8a:	f7f0 f8a9 	bl	80020e0 <__aeabi_dsub>
 8011f8e:	9a08      	ldr	r2, [sp, #32]
 8011f90:	004b      	lsls	r3, r1, #1
 8011f92:	0d5b      	lsrs	r3, r3, #21
 8011f94:	1ad3      	subs	r3, r2, r3
 8011f96:	2b31      	cmp	r3, #49	; 0x31
 8011f98:	dc08      	bgt.n	8011fac <__ieee754_rem_pio2+0x274>
 8011f9a:	0002      	movs	r2, r0
 8011f9c:	000b      	movs	r3, r1
 8011f9e:	603a      	str	r2, [r7, #0]
 8011fa0:	607b      	str	r3, [r7, #4]
 8011fa2:	9a02      	ldr	r2, [sp, #8]
 8011fa4:	9b03      	ldr	r3, [sp, #12]
 8011fa6:	9204      	str	r2, [sp, #16]
 8011fa8:	9305      	str	r3, [sp, #20]
 8011faa:	e7a3      	b.n	8011ef4 <__ieee754_rem_pio2+0x1bc>
 8011fac:	22b8      	movs	r2, #184	; 0xb8
 8011fae:	9806      	ldr	r0, [sp, #24]
 8011fb0:	9907      	ldr	r1, [sp, #28]
 8011fb2:	4b22      	ldr	r3, [pc, #136]	; (801203c <__ieee754_rem_pio2+0x304>)
 8011fb4:	0592      	lsls	r2, r2, #22
 8011fb6:	f7ef fe27 	bl	8001c08 <__aeabi_dmul>
 8011fba:	0004      	movs	r4, r0
 8011fbc:	000d      	movs	r5, r1
 8011fbe:	0002      	movs	r2, r0
 8011fc0:	000b      	movs	r3, r1
 8011fc2:	9802      	ldr	r0, [sp, #8]
 8011fc4:	9903      	ldr	r1, [sp, #12]
 8011fc6:	f7f0 f88b 	bl	80020e0 <__aeabi_dsub>
 8011fca:	0002      	movs	r2, r0
 8011fcc:	000b      	movs	r3, r1
 8011fce:	9004      	str	r0, [sp, #16]
 8011fd0:	9105      	str	r1, [sp, #20]
 8011fd2:	9802      	ldr	r0, [sp, #8]
 8011fd4:	9903      	ldr	r1, [sp, #12]
 8011fd6:	f7f0 f883 	bl	80020e0 <__aeabi_dsub>
 8011fda:	0022      	movs	r2, r4
 8011fdc:	002b      	movs	r3, r5
 8011fde:	f7f0 f87f 	bl	80020e0 <__aeabi_dsub>
 8011fe2:	0004      	movs	r4, r0
 8011fe4:	000d      	movs	r5, r1
 8011fe6:	9806      	ldr	r0, [sp, #24]
 8011fe8:	9907      	ldr	r1, [sp, #28]
 8011fea:	4a1a      	ldr	r2, [pc, #104]	; (8012054 <__ieee754_rem_pio2+0x31c>)
 8011fec:	4b1a      	ldr	r3, [pc, #104]	; (8012058 <__ieee754_rem_pio2+0x320>)
 8011fee:	f7ef fe0b 	bl	8001c08 <__aeabi_dmul>
 8011ff2:	0022      	movs	r2, r4
 8011ff4:	002b      	movs	r3, r5
 8011ff6:	f7f0 f873 	bl	80020e0 <__aeabi_dsub>
 8011ffa:	0004      	movs	r4, r0
 8011ffc:	000d      	movs	r5, r1
 8011ffe:	e75d      	b.n	8011ebc <__ieee754_rem_pio2+0x184>
 8012000:	4b16      	ldr	r3, [pc, #88]	; (801205c <__ieee754_rem_pio2+0x324>)
 8012002:	9a02      	ldr	r2, [sp, #8]
 8012004:	429a      	cmp	r2, r3
 8012006:	dd2b      	ble.n	8012060 <__ieee754_rem_pio2+0x328>
 8012008:	0022      	movs	r2, r4
 801200a:	002b      	movs	r3, r5
 801200c:	0020      	movs	r0, r4
 801200e:	0029      	movs	r1, r5
 8012010:	f7f0 f866 	bl	80020e0 <__aeabi_dsub>
 8012014:	60b8      	str	r0, [r7, #8]
 8012016:	60f9      	str	r1, [r7, #12]
 8012018:	6038      	str	r0, [r7, #0]
 801201a:	6079      	str	r1, [r7, #4]
 801201c:	e6a1      	b.n	8011d62 <__ieee754_rem_pio2+0x2a>
 801201e:	46c0      	nop			; (mov r8, r8)
 8012020:	3fe921fb 	.word	0x3fe921fb
 8012024:	4002d97b 	.word	0x4002d97b
 8012028:	3ff921fb 	.word	0x3ff921fb
 801202c:	54400000 	.word	0x54400000
 8012030:	1a626331 	.word	0x1a626331
 8012034:	3dd0b461 	.word	0x3dd0b461
 8012038:	2e037073 	.word	0x2e037073
 801203c:	3ba3198a 	.word	0x3ba3198a
 8012040:	413921fb 	.word	0x413921fb
 8012044:	6dc9c883 	.word	0x6dc9c883
 8012048:	3fe45f30 	.word	0x3fe45f30
 801204c:	3fe00000 	.word	0x3fe00000
 8012050:	08013db4 	.word	0x08013db4
 8012054:	252049c1 	.word	0x252049c1
 8012058:	397b839a 	.word	0x397b839a
 801205c:	7fefffff 	.word	0x7fefffff
 8012060:	9a02      	ldr	r2, [sp, #8]
 8012062:	0020      	movs	r0, r4
 8012064:	1516      	asrs	r6, r2, #20
 8012066:	4a29      	ldr	r2, [pc, #164]	; (801210c <__ieee754_rem_pio2+0x3d4>)
 8012068:	18b6      	adds	r6, r6, r2
 801206a:	9a02      	ldr	r2, [sp, #8]
 801206c:	0533      	lsls	r3, r6, #20
 801206e:	1ad5      	subs	r5, r2, r3
 8012070:	0029      	movs	r1, r5
 8012072:	f7f0 fbe5 	bl	8002840 <__aeabi_d2iz>
 8012076:	f7f0 fc19 	bl	80028ac <__aeabi_i2d>
 801207a:	0002      	movs	r2, r0
 801207c:	000b      	movs	r3, r1
 801207e:	0020      	movs	r0, r4
 8012080:	0029      	movs	r1, r5
 8012082:	920a      	str	r2, [sp, #40]	; 0x28
 8012084:	930b      	str	r3, [sp, #44]	; 0x2c
 8012086:	f7f0 f82b 	bl	80020e0 <__aeabi_dsub>
 801208a:	2200      	movs	r2, #0
 801208c:	4b20      	ldr	r3, [pc, #128]	; (8012110 <__ieee754_rem_pio2+0x3d8>)
 801208e:	f7ef fdbb 	bl	8001c08 <__aeabi_dmul>
 8012092:	000d      	movs	r5, r1
 8012094:	0004      	movs	r4, r0
 8012096:	f7f0 fbd3 	bl	8002840 <__aeabi_d2iz>
 801209a:	f7f0 fc07 	bl	80028ac <__aeabi_i2d>
 801209e:	0002      	movs	r2, r0
 80120a0:	000b      	movs	r3, r1
 80120a2:	0020      	movs	r0, r4
 80120a4:	0029      	movs	r1, r5
 80120a6:	920c      	str	r2, [sp, #48]	; 0x30
 80120a8:	930d      	str	r3, [sp, #52]	; 0x34
 80120aa:	f7f0 f819 	bl	80020e0 <__aeabi_dsub>
 80120ae:	2200      	movs	r2, #0
 80120b0:	4b17      	ldr	r3, [pc, #92]	; (8012110 <__ieee754_rem_pio2+0x3d8>)
 80120b2:	f7ef fda9 	bl	8001c08 <__aeabi_dmul>
 80120b6:	2503      	movs	r5, #3
 80120b8:	900e      	str	r0, [sp, #56]	; 0x38
 80120ba:	910f      	str	r1, [sp, #60]	; 0x3c
 80120bc:	ac0a      	add	r4, sp, #40	; 0x28
 80120be:	2200      	movs	r2, #0
 80120c0:	6920      	ldr	r0, [r4, #16]
 80120c2:	6961      	ldr	r1, [r4, #20]
 80120c4:	2300      	movs	r3, #0
 80120c6:	9502      	str	r5, [sp, #8]
 80120c8:	3c08      	subs	r4, #8
 80120ca:	3d01      	subs	r5, #1
 80120cc:	f7ee f9be 	bl	800044c <__aeabi_dcmpeq>
 80120d0:	2800      	cmp	r0, #0
 80120d2:	d1f4      	bne.n	80120be <__ieee754_rem_pio2+0x386>
 80120d4:	4b0f      	ldr	r3, [pc, #60]	; (8012114 <__ieee754_rem_pio2+0x3dc>)
 80120d6:	0032      	movs	r2, r6
 80120d8:	9301      	str	r3, [sp, #4]
 80120da:	2302      	movs	r3, #2
 80120dc:	0039      	movs	r1, r7
 80120de:	9300      	str	r3, [sp, #0]
 80120e0:	a80a      	add	r0, sp, #40	; 0x28
 80120e2:	9b02      	ldr	r3, [sp, #8]
 80120e4:	f000 f8d8 	bl	8012298 <__kernel_rem_pio2>
 80120e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120ea:	0006      	movs	r6, r0
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	db00      	blt.n	80120f2 <__ieee754_rem_pio2+0x3ba>
 80120f0:	e65f      	b.n	8011db2 <__ieee754_rem_pio2+0x7a>
 80120f2:	2180      	movs	r1, #128	; 0x80
 80120f4:	6878      	ldr	r0, [r7, #4]
 80120f6:	683a      	ldr	r2, [r7, #0]
 80120f8:	0609      	lsls	r1, r1, #24
 80120fa:	1843      	adds	r3, r0, r1
 80120fc:	68f8      	ldr	r0, [r7, #12]
 80120fe:	603a      	str	r2, [r7, #0]
 8012100:	607b      	str	r3, [r7, #4]
 8012102:	68ba      	ldr	r2, [r7, #8]
 8012104:	1843      	adds	r3, r0, r1
 8012106:	60ba      	str	r2, [r7, #8]
 8012108:	60fb      	str	r3, [r7, #12]
 801210a:	e688      	b.n	8011e1e <__ieee754_rem_pio2+0xe6>
 801210c:	fffffbea 	.word	0xfffffbea
 8012110:	41700000 	.word	0x41700000
 8012114:	08013e34 	.word	0x08013e34

08012118 <__kernel_cos>:
 8012118:	b5f0      	push	{r4, r5, r6, r7, lr}
 801211a:	b087      	sub	sp, #28
 801211c:	9204      	str	r2, [sp, #16]
 801211e:	9305      	str	r3, [sp, #20]
 8012120:	004b      	lsls	r3, r1, #1
 8012122:	085b      	lsrs	r3, r3, #1
 8012124:	9300      	str	r3, [sp, #0]
 8012126:	23f9      	movs	r3, #249	; 0xf9
 8012128:	9a00      	ldr	r2, [sp, #0]
 801212a:	0007      	movs	r7, r0
 801212c:	000e      	movs	r6, r1
 801212e:	059b      	lsls	r3, r3, #22
 8012130:	429a      	cmp	r2, r3
 8012132:	da04      	bge.n	801213e <__kernel_cos+0x26>
 8012134:	f7f0 fb84 	bl	8002840 <__aeabi_d2iz>
 8012138:	2800      	cmp	r0, #0
 801213a:	d100      	bne.n	801213e <__kernel_cos+0x26>
 801213c:	e084      	b.n	8012248 <__kernel_cos+0x130>
 801213e:	003a      	movs	r2, r7
 8012140:	0033      	movs	r3, r6
 8012142:	0038      	movs	r0, r7
 8012144:	0031      	movs	r1, r6
 8012146:	f7ef fd5f 	bl	8001c08 <__aeabi_dmul>
 801214a:	2200      	movs	r2, #0
 801214c:	4b40      	ldr	r3, [pc, #256]	; (8012250 <__kernel_cos+0x138>)
 801214e:	0004      	movs	r4, r0
 8012150:	000d      	movs	r5, r1
 8012152:	f7ef fd59 	bl	8001c08 <__aeabi_dmul>
 8012156:	4a3f      	ldr	r2, [pc, #252]	; (8012254 <__kernel_cos+0x13c>)
 8012158:	9002      	str	r0, [sp, #8]
 801215a:	9103      	str	r1, [sp, #12]
 801215c:	4b3e      	ldr	r3, [pc, #248]	; (8012258 <__kernel_cos+0x140>)
 801215e:	0020      	movs	r0, r4
 8012160:	0029      	movs	r1, r5
 8012162:	f7ef fd51 	bl	8001c08 <__aeabi_dmul>
 8012166:	4a3d      	ldr	r2, [pc, #244]	; (801225c <__kernel_cos+0x144>)
 8012168:	4b3d      	ldr	r3, [pc, #244]	; (8012260 <__kernel_cos+0x148>)
 801216a:	f7ee fe0f 	bl	8000d8c <__aeabi_dadd>
 801216e:	0022      	movs	r2, r4
 8012170:	002b      	movs	r3, r5
 8012172:	f7ef fd49 	bl	8001c08 <__aeabi_dmul>
 8012176:	4a3b      	ldr	r2, [pc, #236]	; (8012264 <__kernel_cos+0x14c>)
 8012178:	4b3b      	ldr	r3, [pc, #236]	; (8012268 <__kernel_cos+0x150>)
 801217a:	f7ef ffb1 	bl	80020e0 <__aeabi_dsub>
 801217e:	0022      	movs	r2, r4
 8012180:	002b      	movs	r3, r5
 8012182:	f7ef fd41 	bl	8001c08 <__aeabi_dmul>
 8012186:	4a39      	ldr	r2, [pc, #228]	; (801226c <__kernel_cos+0x154>)
 8012188:	4b39      	ldr	r3, [pc, #228]	; (8012270 <__kernel_cos+0x158>)
 801218a:	f7ee fdff 	bl	8000d8c <__aeabi_dadd>
 801218e:	0022      	movs	r2, r4
 8012190:	002b      	movs	r3, r5
 8012192:	f7ef fd39 	bl	8001c08 <__aeabi_dmul>
 8012196:	4a37      	ldr	r2, [pc, #220]	; (8012274 <__kernel_cos+0x15c>)
 8012198:	4b37      	ldr	r3, [pc, #220]	; (8012278 <__kernel_cos+0x160>)
 801219a:	f7ef ffa1 	bl	80020e0 <__aeabi_dsub>
 801219e:	0022      	movs	r2, r4
 80121a0:	002b      	movs	r3, r5
 80121a2:	f7ef fd31 	bl	8001c08 <__aeabi_dmul>
 80121a6:	4a35      	ldr	r2, [pc, #212]	; (801227c <__kernel_cos+0x164>)
 80121a8:	4b35      	ldr	r3, [pc, #212]	; (8012280 <__kernel_cos+0x168>)
 80121aa:	f7ee fdef 	bl	8000d8c <__aeabi_dadd>
 80121ae:	0022      	movs	r2, r4
 80121b0:	002b      	movs	r3, r5
 80121b2:	f7ef fd29 	bl	8001c08 <__aeabi_dmul>
 80121b6:	0022      	movs	r2, r4
 80121b8:	002b      	movs	r3, r5
 80121ba:	f7ef fd25 	bl	8001c08 <__aeabi_dmul>
 80121be:	9a04      	ldr	r2, [sp, #16]
 80121c0:	9b05      	ldr	r3, [sp, #20]
 80121c2:	0004      	movs	r4, r0
 80121c4:	000d      	movs	r5, r1
 80121c6:	0038      	movs	r0, r7
 80121c8:	0031      	movs	r1, r6
 80121ca:	f7ef fd1d 	bl	8001c08 <__aeabi_dmul>
 80121ce:	0002      	movs	r2, r0
 80121d0:	000b      	movs	r3, r1
 80121d2:	0020      	movs	r0, r4
 80121d4:	0029      	movs	r1, r5
 80121d6:	f7ef ff83 	bl	80020e0 <__aeabi_dsub>
 80121da:	4b2a      	ldr	r3, [pc, #168]	; (8012284 <__kernel_cos+0x16c>)
 80121dc:	9a00      	ldr	r2, [sp, #0]
 80121de:	0004      	movs	r4, r0
 80121e0:	000d      	movs	r5, r1
 80121e2:	429a      	cmp	r2, r3
 80121e4:	dc0d      	bgt.n	8012202 <__kernel_cos+0xea>
 80121e6:	0002      	movs	r2, r0
 80121e8:	000b      	movs	r3, r1
 80121ea:	9802      	ldr	r0, [sp, #8]
 80121ec:	9903      	ldr	r1, [sp, #12]
 80121ee:	f7ef ff77 	bl	80020e0 <__aeabi_dsub>
 80121f2:	0002      	movs	r2, r0
 80121f4:	2000      	movs	r0, #0
 80121f6:	000b      	movs	r3, r1
 80121f8:	4923      	ldr	r1, [pc, #140]	; (8012288 <__kernel_cos+0x170>)
 80121fa:	f7ef ff71 	bl	80020e0 <__aeabi_dsub>
 80121fe:	b007      	add	sp, #28
 8012200:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012202:	4b22      	ldr	r3, [pc, #136]	; (801228c <__kernel_cos+0x174>)
 8012204:	9a00      	ldr	r2, [sp, #0]
 8012206:	2600      	movs	r6, #0
 8012208:	429a      	cmp	r2, r3
 801220a:	dc1b      	bgt.n	8012244 <__kernel_cos+0x12c>
 801220c:	0013      	movs	r3, r2
 801220e:	4a20      	ldr	r2, [pc, #128]	; (8012290 <__kernel_cos+0x178>)
 8012210:	4694      	mov	ip, r2
 8012212:	4463      	add	r3, ip
 8012214:	001f      	movs	r7, r3
 8012216:	0032      	movs	r2, r6
 8012218:	003b      	movs	r3, r7
 801221a:	2000      	movs	r0, #0
 801221c:	491a      	ldr	r1, [pc, #104]	; (8012288 <__kernel_cos+0x170>)
 801221e:	f7ef ff5f 	bl	80020e0 <__aeabi_dsub>
 8012222:	0032      	movs	r2, r6
 8012224:	003b      	movs	r3, r7
 8012226:	9000      	str	r0, [sp, #0]
 8012228:	9101      	str	r1, [sp, #4]
 801222a:	9802      	ldr	r0, [sp, #8]
 801222c:	9903      	ldr	r1, [sp, #12]
 801222e:	f7ef ff57 	bl	80020e0 <__aeabi_dsub>
 8012232:	0022      	movs	r2, r4
 8012234:	002b      	movs	r3, r5
 8012236:	f7ef ff53 	bl	80020e0 <__aeabi_dsub>
 801223a:	0002      	movs	r2, r0
 801223c:	000b      	movs	r3, r1
 801223e:	9800      	ldr	r0, [sp, #0]
 8012240:	9901      	ldr	r1, [sp, #4]
 8012242:	e7da      	b.n	80121fa <__kernel_cos+0xe2>
 8012244:	4f13      	ldr	r7, [pc, #76]	; (8012294 <__kernel_cos+0x17c>)
 8012246:	e7e6      	b.n	8012216 <__kernel_cos+0xfe>
 8012248:	2000      	movs	r0, #0
 801224a:	490f      	ldr	r1, [pc, #60]	; (8012288 <__kernel_cos+0x170>)
 801224c:	e7d7      	b.n	80121fe <__kernel_cos+0xe6>
 801224e:	46c0      	nop			; (mov r8, r8)
 8012250:	3fe00000 	.word	0x3fe00000
 8012254:	be8838d4 	.word	0xbe8838d4
 8012258:	bda8fae9 	.word	0xbda8fae9
 801225c:	bdb4b1c4 	.word	0xbdb4b1c4
 8012260:	3e21ee9e 	.word	0x3e21ee9e
 8012264:	809c52ad 	.word	0x809c52ad
 8012268:	3e927e4f 	.word	0x3e927e4f
 801226c:	19cb1590 	.word	0x19cb1590
 8012270:	3efa01a0 	.word	0x3efa01a0
 8012274:	16c15177 	.word	0x16c15177
 8012278:	3f56c16c 	.word	0x3f56c16c
 801227c:	5555554c 	.word	0x5555554c
 8012280:	3fa55555 	.word	0x3fa55555
 8012284:	3fd33332 	.word	0x3fd33332
 8012288:	3ff00000 	.word	0x3ff00000
 801228c:	3fe90000 	.word	0x3fe90000
 8012290:	ffe00000 	.word	0xffe00000
 8012294:	3fd20000 	.word	0x3fd20000

08012298 <__kernel_rem_pio2>:
 8012298:	b5f0      	push	{r4, r5, r6, r7, lr}
 801229a:	4ccb      	ldr	r4, [pc, #812]	; (80125c8 <__kernel_rem_pio2+0x330>)
 801229c:	44a5      	add	sp, r4
 801229e:	930d      	str	r3, [sp, #52]	; 0x34
 80122a0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80122a2:	0014      	movs	r4, r2
 80122a4:	009a      	lsls	r2, r3, #2
 80122a6:	4bc9      	ldr	r3, [pc, #804]	; (80125cc <__kernel_rem_pio2+0x334>)
 80122a8:	900e      	str	r0, [sp, #56]	; 0x38
 80122aa:	58d3      	ldr	r3, [r2, r3]
 80122ac:	9107      	str	r1, [sp, #28]
 80122ae:	930a      	str	r3, [sp, #40]	; 0x28
 80122b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80122b2:	3b01      	subs	r3, #1
 80122b4:	930c      	str	r3, [sp, #48]	; 0x30
 80122b6:	2300      	movs	r3, #0
 80122b8:	9300      	str	r3, [sp, #0]
 80122ba:	0023      	movs	r3, r4
 80122bc:	3314      	adds	r3, #20
 80122be:	db04      	blt.n	80122ca <__kernel_rem_pio2+0x32>
 80122c0:	2118      	movs	r1, #24
 80122c2:	1ee0      	subs	r0, r4, #3
 80122c4:	f7ed ffc6 	bl	8000254 <__divsi3>
 80122c8:	9000      	str	r0, [sp, #0]
 80122ca:	2218      	movs	r2, #24
 80122cc:	9b00      	ldr	r3, [sp, #0]
 80122ce:	4252      	negs	r2, r2
 80122d0:	3301      	adds	r3, #1
 80122d2:	435a      	muls	r2, r3
 80122d4:	1913      	adds	r3, r2, r4
 80122d6:	9302      	str	r3, [sp, #8]
 80122d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80122da:	9b00      	ldr	r3, [sp, #0]
 80122dc:	ae26      	add	r6, sp, #152	; 0x98
 80122de:	1a9d      	subs	r5, r3, r2
 80122e0:	002c      	movs	r4, r5
 80122e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80122e4:	189f      	adds	r7, r3, r2
 80122e6:	1b63      	subs	r3, r4, r5
 80122e8:	429f      	cmp	r7, r3
 80122ea:	da0f      	bge.n	801230c <__kernel_rem_pio2+0x74>
 80122ec:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80122ee:	af76      	add	r7, sp, #472	; 0x1d8
 80122f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80122f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80122f4:	1af3      	subs	r3, r6, r3
 80122f6:	429a      	cmp	r2, r3
 80122f8:	db30      	blt.n	801235c <__kernel_rem_pio2+0xc4>
 80122fa:	ab26      	add	r3, sp, #152	; 0x98
 80122fc:	00f4      	lsls	r4, r6, #3
 80122fe:	2200      	movs	r2, #0
 8012300:	18e4      	adds	r4, r4, r3
 8012302:	2300      	movs	r3, #0
 8012304:	2500      	movs	r5, #0
 8012306:	9204      	str	r2, [sp, #16]
 8012308:	9305      	str	r3, [sp, #20]
 801230a:	e01e      	b.n	801234a <__kernel_rem_pio2+0xb2>
 801230c:	2c00      	cmp	r4, #0
 801230e:	db07      	blt.n	8012320 <__kernel_rem_pio2+0x88>
 8012310:	9aa5      	ldr	r2, [sp, #660]	; 0x294
 8012312:	00a3      	lsls	r3, r4, #2
 8012314:	58d0      	ldr	r0, [r2, r3]
 8012316:	f7f0 fac9 	bl	80028ac <__aeabi_i2d>
 801231a:	c603      	stmia	r6!, {r0, r1}
 801231c:	3401      	adds	r4, #1
 801231e:	e7e2      	b.n	80122e6 <__kernel_rem_pio2+0x4e>
 8012320:	2000      	movs	r0, #0
 8012322:	2100      	movs	r1, #0
 8012324:	e7f9      	b.n	801231a <__kernel_rem_pio2+0x82>
 8012326:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012328:	00e9      	lsls	r1, r5, #3
 801232a:	1859      	adds	r1, r3, r1
 801232c:	6808      	ldr	r0, [r1, #0]
 801232e:	6849      	ldr	r1, [r1, #4]
 8012330:	6822      	ldr	r2, [r4, #0]
 8012332:	6863      	ldr	r3, [r4, #4]
 8012334:	f7ef fc68 	bl	8001c08 <__aeabi_dmul>
 8012338:	0002      	movs	r2, r0
 801233a:	000b      	movs	r3, r1
 801233c:	9804      	ldr	r0, [sp, #16]
 801233e:	9905      	ldr	r1, [sp, #20]
 8012340:	f7ee fd24 	bl	8000d8c <__aeabi_dadd>
 8012344:	9004      	str	r0, [sp, #16]
 8012346:	9105      	str	r1, [sp, #20]
 8012348:	3501      	adds	r5, #1
 801234a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801234c:	3c08      	subs	r4, #8
 801234e:	429d      	cmp	r5, r3
 8012350:	dde9      	ble.n	8012326 <__kernel_rem_pio2+0x8e>
 8012352:	9b04      	ldr	r3, [sp, #16]
 8012354:	9c05      	ldr	r4, [sp, #20]
 8012356:	3601      	adds	r6, #1
 8012358:	c718      	stmia	r7!, {r3, r4}
 801235a:	e7c9      	b.n	80122f0 <__kernel_rem_pio2+0x58>
 801235c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801235e:	aa12      	add	r2, sp, #72	; 0x48
 8012360:	009b      	lsls	r3, r3, #2
 8012362:	189b      	adds	r3, r3, r2
 8012364:	9310      	str	r3, [sp, #64]	; 0x40
 8012366:	9b00      	ldr	r3, [sp, #0]
 8012368:	0098      	lsls	r0, r3, #2
 801236a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801236c:	181b      	adds	r3, r3, r0
 801236e:	930f      	str	r3, [sp, #60]	; 0x3c
 8012370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012372:	9304      	str	r3, [sp, #16]
 8012374:	9b04      	ldr	r3, [sp, #16]
 8012376:	aa76      	add	r2, sp, #472	; 0x1d8
 8012378:	00db      	lsls	r3, r3, #3
 801237a:	18d3      	adds	r3, r2, r3
 801237c:	681c      	ldr	r4, [r3, #0]
 801237e:	685d      	ldr	r5, [r3, #4]
 8012380:	ab12      	add	r3, sp, #72	; 0x48
 8012382:	9300      	str	r3, [sp, #0]
 8012384:	9309      	str	r3, [sp, #36]	; 0x24
 8012386:	9b04      	ldr	r3, [sp, #16]
 8012388:	9211      	str	r2, [sp, #68]	; 0x44
 801238a:	9308      	str	r3, [sp, #32]
 801238c:	9b08      	ldr	r3, [sp, #32]
 801238e:	2b00      	cmp	r3, #0
 8012390:	dc74      	bgt.n	801247c <__kernel_rem_pio2+0x1e4>
 8012392:	0020      	movs	r0, r4
 8012394:	0029      	movs	r1, r5
 8012396:	9a02      	ldr	r2, [sp, #8]
 8012398:	f000 fc22 	bl	8012be0 <scalbn>
 801239c:	23ff      	movs	r3, #255	; 0xff
 801239e:	2200      	movs	r2, #0
 80123a0:	059b      	lsls	r3, r3, #22
 80123a2:	0004      	movs	r4, r0
 80123a4:	000d      	movs	r5, r1
 80123a6:	f7ef fc2f 	bl	8001c08 <__aeabi_dmul>
 80123aa:	f000 fb8f 	bl	8012acc <floor>
 80123ae:	2200      	movs	r2, #0
 80123b0:	4b87      	ldr	r3, [pc, #540]	; (80125d0 <__kernel_rem_pio2+0x338>)
 80123b2:	f7ef fc29 	bl	8001c08 <__aeabi_dmul>
 80123b6:	0002      	movs	r2, r0
 80123b8:	000b      	movs	r3, r1
 80123ba:	0020      	movs	r0, r4
 80123bc:	0029      	movs	r1, r5
 80123be:	f7ef fe8f 	bl	80020e0 <__aeabi_dsub>
 80123c2:	000d      	movs	r5, r1
 80123c4:	0004      	movs	r4, r0
 80123c6:	f7f0 fa3b 	bl	8002840 <__aeabi_d2iz>
 80123ca:	9009      	str	r0, [sp, #36]	; 0x24
 80123cc:	f7f0 fa6e 	bl	80028ac <__aeabi_i2d>
 80123d0:	000b      	movs	r3, r1
 80123d2:	0002      	movs	r2, r0
 80123d4:	0029      	movs	r1, r5
 80123d6:	0020      	movs	r0, r4
 80123d8:	f7ef fe82 	bl	80020e0 <__aeabi_dsub>
 80123dc:	9b02      	ldr	r3, [sp, #8]
 80123de:	0006      	movs	r6, r0
 80123e0:	000f      	movs	r7, r1
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	dd74      	ble.n	80124d0 <__kernel_rem_pio2+0x238>
 80123e6:	2118      	movs	r1, #24
 80123e8:	9b04      	ldr	r3, [sp, #16]
 80123ea:	aa12      	add	r2, sp, #72	; 0x48
 80123ec:	3b01      	subs	r3, #1
 80123ee:	009b      	lsls	r3, r3, #2
 80123f0:	589a      	ldr	r2, [r3, r2]
 80123f2:	9802      	ldr	r0, [sp, #8]
 80123f4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80123f6:	1a09      	subs	r1, r1, r0
 80123f8:	0010      	movs	r0, r2
 80123fa:	4108      	asrs	r0, r1
 80123fc:	1824      	adds	r4, r4, r0
 80123fe:	4088      	lsls	r0, r1
 8012400:	a912      	add	r1, sp, #72	; 0x48
 8012402:	1a12      	subs	r2, r2, r0
 8012404:	505a      	str	r2, [r3, r1]
 8012406:	2317      	movs	r3, #23
 8012408:	9902      	ldr	r1, [sp, #8]
 801240a:	9409      	str	r4, [sp, #36]	; 0x24
 801240c:	1a5b      	subs	r3, r3, r1
 801240e:	411a      	asrs	r2, r3
 8012410:	9208      	str	r2, [sp, #32]
 8012412:	9b08      	ldr	r3, [sp, #32]
 8012414:	2b00      	cmp	r3, #0
 8012416:	dd6d      	ble.n	80124f4 <__kernel_rem_pio2+0x25c>
 8012418:	2200      	movs	r2, #0
 801241a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801241c:	2080      	movs	r0, #128	; 0x80
 801241e:	3301      	adds	r3, #1
 8012420:	9309      	str	r3, [sp, #36]	; 0x24
 8012422:	4b6c      	ldr	r3, [pc, #432]	; (80125d4 <__kernel_rem_pio2+0x33c>)
 8012424:	0014      	movs	r4, r2
 8012426:	469c      	mov	ip, r3
 8012428:	2501      	movs	r5, #1
 801242a:	0440      	lsls	r0, r0, #17
 801242c:	9b04      	ldr	r3, [sp, #16]
 801242e:	4293      	cmp	r3, r2
 8012430:	dd00      	ble.n	8012434 <__kernel_rem_pio2+0x19c>
 8012432:	e099      	b.n	8012568 <__kernel_rem_pio2+0x2d0>
 8012434:	9b02      	ldr	r3, [sp, #8]
 8012436:	2b00      	cmp	r3, #0
 8012438:	dd05      	ble.n	8012446 <__kernel_rem_pio2+0x1ae>
 801243a:	2b01      	cmp	r3, #1
 801243c:	d100      	bne.n	8012440 <__kernel_rem_pio2+0x1a8>
 801243e:	e0a9      	b.n	8012594 <__kernel_rem_pio2+0x2fc>
 8012440:	2b02      	cmp	r3, #2
 8012442:	d100      	bne.n	8012446 <__kernel_rem_pio2+0x1ae>
 8012444:	e0b1      	b.n	80125aa <__kernel_rem_pio2+0x312>
 8012446:	9b08      	ldr	r3, [sp, #32]
 8012448:	2b02      	cmp	r3, #2
 801244a:	d153      	bne.n	80124f4 <__kernel_rem_pio2+0x25c>
 801244c:	0032      	movs	r2, r6
 801244e:	003b      	movs	r3, r7
 8012450:	2000      	movs	r0, #0
 8012452:	4961      	ldr	r1, [pc, #388]	; (80125d8 <__kernel_rem_pio2+0x340>)
 8012454:	f7ef fe44 	bl	80020e0 <__aeabi_dsub>
 8012458:	0006      	movs	r6, r0
 801245a:	000f      	movs	r7, r1
 801245c:	2c00      	cmp	r4, #0
 801245e:	d049      	beq.n	80124f4 <__kernel_rem_pio2+0x25c>
 8012460:	9a02      	ldr	r2, [sp, #8]
 8012462:	2000      	movs	r0, #0
 8012464:	495c      	ldr	r1, [pc, #368]	; (80125d8 <__kernel_rem_pio2+0x340>)
 8012466:	f000 fbbb 	bl	8012be0 <scalbn>
 801246a:	0002      	movs	r2, r0
 801246c:	000b      	movs	r3, r1
 801246e:	0030      	movs	r0, r6
 8012470:	0039      	movs	r1, r7
 8012472:	f7ef fe35 	bl	80020e0 <__aeabi_dsub>
 8012476:	0006      	movs	r6, r0
 8012478:	000f      	movs	r7, r1
 801247a:	e03b      	b.n	80124f4 <__kernel_rem_pio2+0x25c>
 801247c:	2200      	movs	r2, #0
 801247e:	4b57      	ldr	r3, [pc, #348]	; (80125dc <__kernel_rem_pio2+0x344>)
 8012480:	0020      	movs	r0, r4
 8012482:	0029      	movs	r1, r5
 8012484:	f7ef fbc0 	bl	8001c08 <__aeabi_dmul>
 8012488:	f7f0 f9da 	bl	8002840 <__aeabi_d2iz>
 801248c:	f7f0 fa0e 	bl	80028ac <__aeabi_i2d>
 8012490:	2200      	movs	r2, #0
 8012492:	4b53      	ldr	r3, [pc, #332]	; (80125e0 <__kernel_rem_pio2+0x348>)
 8012494:	0006      	movs	r6, r0
 8012496:	000f      	movs	r7, r1
 8012498:	f7ef fbb6 	bl	8001c08 <__aeabi_dmul>
 801249c:	0002      	movs	r2, r0
 801249e:	000b      	movs	r3, r1
 80124a0:	0020      	movs	r0, r4
 80124a2:	0029      	movs	r1, r5
 80124a4:	f7ef fe1c 	bl	80020e0 <__aeabi_dsub>
 80124a8:	f7f0 f9ca 	bl	8002840 <__aeabi_d2iz>
 80124ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80124b0:	c301      	stmia	r3!, {r0}
 80124b2:	9309      	str	r3, [sp, #36]	; 0x24
 80124b4:	9b08      	ldr	r3, [sp, #32]
 80124b6:	0030      	movs	r0, r6
 80124b8:	3b01      	subs	r3, #1
 80124ba:	9308      	str	r3, [sp, #32]
 80124bc:	00db      	lsls	r3, r3, #3
 80124be:	18d3      	adds	r3, r2, r3
 80124c0:	0039      	movs	r1, r7
 80124c2:	681a      	ldr	r2, [r3, #0]
 80124c4:	685b      	ldr	r3, [r3, #4]
 80124c6:	f7ee fc61 	bl	8000d8c <__aeabi_dadd>
 80124ca:	0004      	movs	r4, r0
 80124cc:	000d      	movs	r5, r1
 80124ce:	e75d      	b.n	801238c <__kernel_rem_pio2+0xf4>
 80124d0:	9b02      	ldr	r3, [sp, #8]
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d107      	bne.n	80124e6 <__kernel_rem_pio2+0x24e>
 80124d6:	9b04      	ldr	r3, [sp, #16]
 80124d8:	aa12      	add	r2, sp, #72	; 0x48
 80124da:	3b01      	subs	r3, #1
 80124dc:	009b      	lsls	r3, r3, #2
 80124de:	5898      	ldr	r0, [r3, r2]
 80124e0:	15c3      	asrs	r3, r0, #23
 80124e2:	9308      	str	r3, [sp, #32]
 80124e4:	e795      	b.n	8012412 <__kernel_rem_pio2+0x17a>
 80124e6:	2200      	movs	r2, #0
 80124e8:	4b3e      	ldr	r3, [pc, #248]	; (80125e4 <__kernel_rem_pio2+0x34c>)
 80124ea:	f7ed ffd3 	bl	8000494 <__aeabi_dcmpge>
 80124ee:	2800      	cmp	r0, #0
 80124f0:	d137      	bne.n	8012562 <__kernel_rem_pio2+0x2ca>
 80124f2:	9008      	str	r0, [sp, #32]
 80124f4:	2200      	movs	r2, #0
 80124f6:	2300      	movs	r3, #0
 80124f8:	0030      	movs	r0, r6
 80124fa:	0039      	movs	r1, r7
 80124fc:	f7ed ffa6 	bl	800044c <__aeabi_dcmpeq>
 8012500:	2800      	cmp	r0, #0
 8012502:	d100      	bne.n	8012506 <__kernel_rem_pio2+0x26e>
 8012504:	e0b9      	b.n	801267a <__kernel_rem_pio2+0x3e2>
 8012506:	2200      	movs	r2, #0
 8012508:	9b04      	ldr	r3, [sp, #16]
 801250a:	3b01      	subs	r3, #1
 801250c:	9300      	str	r3, [sp, #0]
 801250e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012510:	428b      	cmp	r3, r1
 8012512:	da53      	bge.n	80125bc <__kernel_rem_pio2+0x324>
 8012514:	2a00      	cmp	r2, #0
 8012516:	d100      	bne.n	801251a <__kernel_rem_pio2+0x282>
 8012518:	e095      	b.n	8012646 <__kernel_rem_pio2+0x3ae>
 801251a:	9b02      	ldr	r3, [sp, #8]
 801251c:	aa12      	add	r2, sp, #72	; 0x48
 801251e:	3b18      	subs	r3, #24
 8012520:	9302      	str	r3, [sp, #8]
 8012522:	9b00      	ldr	r3, [sp, #0]
 8012524:	009b      	lsls	r3, r3, #2
 8012526:	589b      	ldr	r3, [r3, r2]
 8012528:	2b00      	cmp	r3, #0
 801252a:	d100      	bne.n	801252e <__kernel_rem_pio2+0x296>
 801252c:	e0a1      	b.n	8012672 <__kernel_rem_pio2+0x3da>
 801252e:	2000      	movs	r0, #0
 8012530:	9a02      	ldr	r2, [sp, #8]
 8012532:	4929      	ldr	r1, [pc, #164]	; (80125d8 <__kernel_rem_pio2+0x340>)
 8012534:	f000 fb54 	bl	8012be0 <scalbn>
 8012538:	0006      	movs	r6, r0
 801253a:	000f      	movs	r7, r1
 801253c:	9c00      	ldr	r4, [sp, #0]
 801253e:	2c00      	cmp	r4, #0
 8012540:	db00      	blt.n	8012544 <__kernel_rem_pio2+0x2ac>
 8012542:	e0d9      	b.n	80126f8 <__kernel_rem_pio2+0x460>
 8012544:	9c00      	ldr	r4, [sp, #0]
 8012546:	2c00      	cmp	r4, #0
 8012548:	da00      	bge.n	801254c <__kernel_rem_pio2+0x2b4>
 801254a:	e10c      	b.n	8012766 <__kernel_rem_pio2+0x4ce>
 801254c:	ab76      	add	r3, sp, #472	; 0x1d8
 801254e:	00e6      	lsls	r6, r4, #3
 8012550:	2200      	movs	r2, #0
 8012552:	18f6      	adds	r6, r6, r3
 8012554:	2300      	movs	r3, #0
 8012556:	9202      	str	r2, [sp, #8]
 8012558:	9303      	str	r3, [sp, #12]
 801255a:	9b00      	ldr	r3, [sp, #0]
 801255c:	2500      	movs	r5, #0
 801255e:	1b1f      	subs	r7, r3, r4
 8012560:	e0f3      	b.n	801274a <__kernel_rem_pio2+0x4b2>
 8012562:	2302      	movs	r3, #2
 8012564:	9308      	str	r3, [sp, #32]
 8012566:	e757      	b.n	8012418 <__kernel_rem_pio2+0x180>
 8012568:	9b00      	ldr	r3, [sp, #0]
 801256a:	681b      	ldr	r3, [r3, #0]
 801256c:	2c00      	cmp	r4, #0
 801256e:	d10b      	bne.n	8012588 <__kernel_rem_pio2+0x2f0>
 8012570:	2b00      	cmp	r3, #0
 8012572:	d003      	beq.n	801257c <__kernel_rem_pio2+0x2e4>
 8012574:	9c00      	ldr	r4, [sp, #0]
 8012576:	1ac3      	subs	r3, r0, r3
 8012578:	6023      	str	r3, [r4, #0]
 801257a:	002b      	movs	r3, r5
 801257c:	9c00      	ldr	r4, [sp, #0]
 801257e:	3201      	adds	r2, #1
 8012580:	3404      	adds	r4, #4
 8012582:	9400      	str	r4, [sp, #0]
 8012584:	001c      	movs	r4, r3
 8012586:	e751      	b.n	801242c <__kernel_rem_pio2+0x194>
 8012588:	4661      	mov	r1, ip
 801258a:	1acb      	subs	r3, r1, r3
 801258c:	9900      	ldr	r1, [sp, #0]
 801258e:	600b      	str	r3, [r1, #0]
 8012590:	0023      	movs	r3, r4
 8012592:	e7f3      	b.n	801257c <__kernel_rem_pio2+0x2e4>
 8012594:	9b04      	ldr	r3, [sp, #16]
 8012596:	aa12      	add	r2, sp, #72	; 0x48
 8012598:	3b01      	subs	r3, #1
 801259a:	009b      	lsls	r3, r3, #2
 801259c:	589a      	ldr	r2, [r3, r2]
 801259e:	9200      	str	r2, [sp, #0]
 80125a0:	0252      	lsls	r2, r2, #9
 80125a2:	0a52      	lsrs	r2, r2, #9
 80125a4:	a912      	add	r1, sp, #72	; 0x48
 80125a6:	505a      	str	r2, [r3, r1]
 80125a8:	e74d      	b.n	8012446 <__kernel_rem_pio2+0x1ae>
 80125aa:	9b04      	ldr	r3, [sp, #16]
 80125ac:	aa12      	add	r2, sp, #72	; 0x48
 80125ae:	3b01      	subs	r3, #1
 80125b0:	009b      	lsls	r3, r3, #2
 80125b2:	589a      	ldr	r2, [r3, r2]
 80125b4:	9200      	str	r2, [sp, #0]
 80125b6:	0292      	lsls	r2, r2, #10
 80125b8:	0a92      	lsrs	r2, r2, #10
 80125ba:	e7f3      	b.n	80125a4 <__kernel_rem_pio2+0x30c>
 80125bc:	0099      	lsls	r1, r3, #2
 80125be:	a812      	add	r0, sp, #72	; 0x48
 80125c0:	5809      	ldr	r1, [r1, r0]
 80125c2:	3b01      	subs	r3, #1
 80125c4:	430a      	orrs	r2, r1
 80125c6:	e7a2      	b.n	801250e <__kernel_rem_pio2+0x276>
 80125c8:	fffffd84 	.word	0xfffffd84
 80125cc:	08013f80 	.word	0x08013f80
 80125d0:	40200000 	.word	0x40200000
 80125d4:	00ffffff 	.word	0x00ffffff
 80125d8:	3ff00000 	.word	0x3ff00000
 80125dc:	3e700000 	.word	0x3e700000
 80125e0:	41700000 	.word	0x41700000
 80125e4:	3fe00000 	.word	0x3fe00000
 80125e8:	3301      	adds	r3, #1
 80125ea:	9910      	ldr	r1, [sp, #64]	; 0x40
 80125ec:	009a      	lsls	r2, r3, #2
 80125ee:	4252      	negs	r2, r2
 80125f0:	588a      	ldr	r2, [r1, r2]
 80125f2:	2a00      	cmp	r2, #0
 80125f4:	d0f8      	beq.n	80125e8 <__kernel_rem_pio2+0x350>
 80125f6:	9a04      	ldr	r2, [sp, #16]
 80125f8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80125fa:	1c57      	adds	r7, r2, #1
 80125fc:	1854      	adds	r4, r2, r1
 80125fe:	00e4      	lsls	r4, r4, #3
 8012600:	aa26      	add	r2, sp, #152	; 0x98
 8012602:	1914      	adds	r4, r2, r4
 8012604:	9a04      	ldr	r2, [sp, #16]
 8012606:	18d3      	adds	r3, r2, r3
 8012608:	9304      	str	r3, [sp, #16]
 801260a:	9b04      	ldr	r3, [sp, #16]
 801260c:	42bb      	cmp	r3, r7
 801260e:	da00      	bge.n	8012612 <__kernel_rem_pio2+0x37a>
 8012610:	e6b0      	b.n	8012374 <__kernel_rem_pio2+0xdc>
 8012612:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012614:	00bb      	lsls	r3, r7, #2
 8012616:	58d0      	ldr	r0, [r2, r3]
 8012618:	f7f0 f948 	bl	80028ac <__aeabi_i2d>
 801261c:	2200      	movs	r2, #0
 801261e:	2300      	movs	r3, #0
 8012620:	0026      	movs	r6, r4
 8012622:	2500      	movs	r5, #0
 8012624:	6020      	str	r0, [r4, #0]
 8012626:	6061      	str	r1, [r4, #4]
 8012628:	9200      	str	r2, [sp, #0]
 801262a:	9301      	str	r3, [sp, #4]
 801262c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801262e:	429d      	cmp	r5, r3
 8012630:	dd0b      	ble.n	801264a <__kernel_rem_pio2+0x3b2>
 8012632:	00fb      	lsls	r3, r7, #3
 8012634:	aa76      	add	r2, sp, #472	; 0x1d8
 8012636:	18d3      	adds	r3, r2, r3
 8012638:	3701      	adds	r7, #1
 801263a:	9900      	ldr	r1, [sp, #0]
 801263c:	9a01      	ldr	r2, [sp, #4]
 801263e:	3408      	adds	r4, #8
 8012640:	6019      	str	r1, [r3, #0]
 8012642:	605a      	str	r2, [r3, #4]
 8012644:	e7e1      	b.n	801260a <__kernel_rem_pio2+0x372>
 8012646:	2301      	movs	r3, #1
 8012648:	e7cf      	b.n	80125ea <__kernel_rem_pio2+0x352>
 801264a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801264c:	00e9      	lsls	r1, r5, #3
 801264e:	1859      	adds	r1, r3, r1
 8012650:	6808      	ldr	r0, [r1, #0]
 8012652:	6849      	ldr	r1, [r1, #4]
 8012654:	6832      	ldr	r2, [r6, #0]
 8012656:	6873      	ldr	r3, [r6, #4]
 8012658:	f7ef fad6 	bl	8001c08 <__aeabi_dmul>
 801265c:	0002      	movs	r2, r0
 801265e:	000b      	movs	r3, r1
 8012660:	9800      	ldr	r0, [sp, #0]
 8012662:	9901      	ldr	r1, [sp, #4]
 8012664:	f7ee fb92 	bl	8000d8c <__aeabi_dadd>
 8012668:	3501      	adds	r5, #1
 801266a:	9000      	str	r0, [sp, #0]
 801266c:	9101      	str	r1, [sp, #4]
 801266e:	3e08      	subs	r6, #8
 8012670:	e7dc      	b.n	801262c <__kernel_rem_pio2+0x394>
 8012672:	9b00      	ldr	r3, [sp, #0]
 8012674:	3b01      	subs	r3, #1
 8012676:	9300      	str	r3, [sp, #0]
 8012678:	e74f      	b.n	801251a <__kernel_rem_pio2+0x282>
 801267a:	9b02      	ldr	r3, [sp, #8]
 801267c:	0030      	movs	r0, r6
 801267e:	425a      	negs	r2, r3
 8012680:	0039      	movs	r1, r7
 8012682:	f000 faad 	bl	8012be0 <scalbn>
 8012686:	2200      	movs	r2, #0
 8012688:	4bb5      	ldr	r3, [pc, #724]	; (8012960 <__kernel_rem_pio2+0x6c8>)
 801268a:	0004      	movs	r4, r0
 801268c:	000d      	movs	r5, r1
 801268e:	f7ed ff01 	bl	8000494 <__aeabi_dcmpge>
 8012692:	2800      	cmp	r0, #0
 8012694:	d025      	beq.n	80126e2 <__kernel_rem_pio2+0x44a>
 8012696:	2200      	movs	r2, #0
 8012698:	4bb2      	ldr	r3, [pc, #712]	; (8012964 <__kernel_rem_pio2+0x6cc>)
 801269a:	0020      	movs	r0, r4
 801269c:	0029      	movs	r1, r5
 801269e:	f7ef fab3 	bl	8001c08 <__aeabi_dmul>
 80126a2:	f7f0 f8cd 	bl	8002840 <__aeabi_d2iz>
 80126a6:	9b04      	ldr	r3, [sp, #16]
 80126a8:	0006      	movs	r6, r0
 80126aa:	009f      	lsls	r7, r3, #2
 80126ac:	f7f0 f8fe 	bl	80028ac <__aeabi_i2d>
 80126b0:	2200      	movs	r2, #0
 80126b2:	4bab      	ldr	r3, [pc, #684]	; (8012960 <__kernel_rem_pio2+0x6c8>)
 80126b4:	f7ef faa8 	bl	8001c08 <__aeabi_dmul>
 80126b8:	0002      	movs	r2, r0
 80126ba:	000b      	movs	r3, r1
 80126bc:	0020      	movs	r0, r4
 80126be:	0029      	movs	r1, r5
 80126c0:	f7ef fd0e 	bl	80020e0 <__aeabi_dsub>
 80126c4:	f7f0 f8bc 	bl	8002840 <__aeabi_d2iz>
 80126c8:	ab12      	add	r3, sp, #72	; 0x48
 80126ca:	51d8      	str	r0, [r3, r7]
 80126cc:	9b04      	ldr	r3, [sp, #16]
 80126ce:	aa12      	add	r2, sp, #72	; 0x48
 80126d0:	3301      	adds	r3, #1
 80126d2:	9300      	str	r3, [sp, #0]
 80126d4:	9b02      	ldr	r3, [sp, #8]
 80126d6:	3318      	adds	r3, #24
 80126d8:	9302      	str	r3, [sp, #8]
 80126da:	9b00      	ldr	r3, [sp, #0]
 80126dc:	009b      	lsls	r3, r3, #2
 80126de:	509e      	str	r6, [r3, r2]
 80126e0:	e725      	b.n	801252e <__kernel_rem_pio2+0x296>
 80126e2:	9b04      	ldr	r3, [sp, #16]
 80126e4:	0020      	movs	r0, r4
 80126e6:	0029      	movs	r1, r5
 80126e8:	009e      	lsls	r6, r3, #2
 80126ea:	f7f0 f8a9 	bl	8002840 <__aeabi_d2iz>
 80126ee:	ab12      	add	r3, sp, #72	; 0x48
 80126f0:	5198      	str	r0, [r3, r6]
 80126f2:	9b04      	ldr	r3, [sp, #16]
 80126f4:	9300      	str	r3, [sp, #0]
 80126f6:	e71a      	b.n	801252e <__kernel_rem_pio2+0x296>
 80126f8:	00e5      	lsls	r5, r4, #3
 80126fa:	ab76      	add	r3, sp, #472	; 0x1d8
 80126fc:	aa12      	add	r2, sp, #72	; 0x48
 80126fe:	195d      	adds	r5, r3, r5
 8012700:	00a3      	lsls	r3, r4, #2
 8012702:	5898      	ldr	r0, [r3, r2]
 8012704:	f7f0 f8d2 	bl	80028ac <__aeabi_i2d>
 8012708:	0032      	movs	r2, r6
 801270a:	003b      	movs	r3, r7
 801270c:	f7ef fa7c 	bl	8001c08 <__aeabi_dmul>
 8012710:	2200      	movs	r2, #0
 8012712:	6028      	str	r0, [r5, #0]
 8012714:	6069      	str	r1, [r5, #4]
 8012716:	4b93      	ldr	r3, [pc, #588]	; (8012964 <__kernel_rem_pio2+0x6cc>)
 8012718:	0030      	movs	r0, r6
 801271a:	0039      	movs	r1, r7
 801271c:	f7ef fa74 	bl	8001c08 <__aeabi_dmul>
 8012720:	3c01      	subs	r4, #1
 8012722:	0006      	movs	r6, r0
 8012724:	000f      	movs	r7, r1
 8012726:	e70a      	b.n	801253e <__kernel_rem_pio2+0x2a6>
 8012728:	4b8f      	ldr	r3, [pc, #572]	; (8012968 <__kernel_rem_pio2+0x6d0>)
 801272a:	00e9      	lsls	r1, r5, #3
 801272c:	1859      	adds	r1, r3, r1
 801272e:	6808      	ldr	r0, [r1, #0]
 8012730:	6849      	ldr	r1, [r1, #4]
 8012732:	ce0c      	ldmia	r6!, {r2, r3}
 8012734:	f7ef fa68 	bl	8001c08 <__aeabi_dmul>
 8012738:	0002      	movs	r2, r0
 801273a:	000b      	movs	r3, r1
 801273c:	9802      	ldr	r0, [sp, #8]
 801273e:	9903      	ldr	r1, [sp, #12]
 8012740:	f7ee fb24 	bl	8000d8c <__aeabi_dadd>
 8012744:	9002      	str	r0, [sp, #8]
 8012746:	9103      	str	r1, [sp, #12]
 8012748:	3501      	adds	r5, #1
 801274a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801274c:	429d      	cmp	r5, r3
 801274e:	dc01      	bgt.n	8012754 <__kernel_rem_pio2+0x4bc>
 8012750:	42bd      	cmp	r5, r7
 8012752:	dde9      	ble.n	8012728 <__kernel_rem_pio2+0x490>
 8012754:	ab4e      	add	r3, sp, #312	; 0x138
 8012756:	00ff      	lsls	r7, r7, #3
 8012758:	19df      	adds	r7, r3, r7
 801275a:	3c01      	subs	r4, #1
 801275c:	9a02      	ldr	r2, [sp, #8]
 801275e:	9b03      	ldr	r3, [sp, #12]
 8012760:	603a      	str	r2, [r7, #0]
 8012762:	607b      	str	r3, [r7, #4]
 8012764:	e6ef      	b.n	8012546 <__kernel_rem_pio2+0x2ae>
 8012766:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8012768:	2b02      	cmp	r3, #2
 801276a:	dc0e      	bgt.n	801278a <__kernel_rem_pio2+0x4f2>
 801276c:	2b00      	cmp	r3, #0
 801276e:	dd00      	ble.n	8012772 <__kernel_rem_pio2+0x4da>
 8012770:	e08c      	b.n	801288c <__kernel_rem_pio2+0x5f4>
 8012772:	2500      	movs	r5, #0
 8012774:	002c      	movs	r4, r5
 8012776:	42ab      	cmp	r3, r5
 8012778:	d046      	beq.n	8012808 <__kernel_rem_pio2+0x570>
 801277a:	2007      	movs	r0, #7
 801277c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801277e:	4003      	ands	r3, r0
 8012780:	0018      	movs	r0, r3
 8012782:	239f      	movs	r3, #159	; 0x9f
 8012784:	009b      	lsls	r3, r3, #2
 8012786:	449d      	add	sp, r3
 8012788:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801278a:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801278c:	2b03      	cmp	r3, #3
 801278e:	d1f4      	bne.n	801277a <__kernel_rem_pio2+0x4e2>
 8012790:	9b00      	ldr	r3, [sp, #0]
 8012792:	00dc      	lsls	r4, r3, #3
 8012794:	ab4e      	add	r3, sp, #312	; 0x138
 8012796:	191c      	adds	r4, r3, r4
 8012798:	0025      	movs	r5, r4
 801279a:	9b00      	ldr	r3, [sp, #0]
 801279c:	9302      	str	r3, [sp, #8]
 801279e:	9b02      	ldr	r3, [sp, #8]
 80127a0:	3d08      	subs	r5, #8
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	dd00      	ble.n	80127a8 <__kernel_rem_pio2+0x510>
 80127a6:	e07f      	b.n	80128a8 <__kernel_rem_pio2+0x610>
 80127a8:	9d00      	ldr	r5, [sp, #0]
 80127aa:	3c08      	subs	r4, #8
 80127ac:	2d01      	cmp	r5, #1
 80127ae:	dd00      	ble.n	80127b2 <__kernel_rem_pio2+0x51a>
 80127b0:	e09c      	b.n	80128ec <__kernel_rem_pio2+0x654>
 80127b2:	2400      	movs	r4, #0
 80127b4:	0021      	movs	r1, r4
 80127b6:	9b00      	ldr	r3, [sp, #0]
 80127b8:	2b01      	cmp	r3, #1
 80127ba:	dd00      	ble.n	80127be <__kernel_rem_pio2+0x526>
 80127bc:	e0b4      	b.n	8012928 <__kernel_rem_pio2+0x690>
 80127be:	9b08      	ldr	r3, [sp, #32]
 80127c0:	9f4e      	ldr	r7, [sp, #312]	; 0x138
 80127c2:	9e4f      	ldr	r6, [sp, #316]	; 0x13c
 80127c4:	9d50      	ldr	r5, [sp, #320]	; 0x140
 80127c6:	9851      	ldr	r0, [sp, #324]	; 0x144
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d000      	beq.n	80127ce <__kernel_rem_pio2+0x536>
 80127cc:	e0ba      	b.n	8012944 <__kernel_rem_pio2+0x6ac>
 80127ce:	0033      	movs	r3, r6
 80127d0:	003a      	movs	r2, r7
 80127d2:	9e07      	ldr	r6, [sp, #28]
 80127d4:	6032      	str	r2, [r6, #0]
 80127d6:	6073      	str	r3, [r6, #4]
 80127d8:	002a      	movs	r2, r5
 80127da:	0003      	movs	r3, r0
 80127dc:	60b2      	str	r2, [r6, #8]
 80127de:	60f3      	str	r3, [r6, #12]
 80127e0:	0022      	movs	r2, r4
 80127e2:	000b      	movs	r3, r1
 80127e4:	6132      	str	r2, [r6, #16]
 80127e6:	6173      	str	r3, [r6, #20]
 80127e8:	e7c7      	b.n	801277a <__kernel_rem_pio2+0x4e2>
 80127ea:	9b00      	ldr	r3, [sp, #0]
 80127ec:	aa4e      	add	r2, sp, #312	; 0x138
 80127ee:	00db      	lsls	r3, r3, #3
 80127f0:	18d3      	adds	r3, r2, r3
 80127f2:	0028      	movs	r0, r5
 80127f4:	681a      	ldr	r2, [r3, #0]
 80127f6:	685b      	ldr	r3, [r3, #4]
 80127f8:	0021      	movs	r1, r4
 80127fa:	f7ee fac7 	bl	8000d8c <__aeabi_dadd>
 80127fe:	0005      	movs	r5, r0
 8012800:	000c      	movs	r4, r1
 8012802:	9b00      	ldr	r3, [sp, #0]
 8012804:	3b01      	subs	r3, #1
 8012806:	9300      	str	r3, [sp, #0]
 8012808:	9b00      	ldr	r3, [sp, #0]
 801280a:	2b00      	cmp	r3, #0
 801280c:	daed      	bge.n	80127ea <__kernel_rem_pio2+0x552>
 801280e:	9b08      	ldr	r3, [sp, #32]
 8012810:	2b00      	cmp	r3, #0
 8012812:	d002      	beq.n	801281a <__kernel_rem_pio2+0x582>
 8012814:	2380      	movs	r3, #128	; 0x80
 8012816:	061b      	lsls	r3, r3, #24
 8012818:	18e4      	adds	r4, r4, r3
 801281a:	002a      	movs	r2, r5
 801281c:	0023      	movs	r3, r4
 801281e:	9907      	ldr	r1, [sp, #28]
 8012820:	600a      	str	r2, [r1, #0]
 8012822:	604b      	str	r3, [r1, #4]
 8012824:	e7a9      	b.n	801277a <__kernel_rem_pio2+0x4e2>
 8012826:	00e3      	lsls	r3, r4, #3
 8012828:	aa4e      	add	r2, sp, #312	; 0x138
 801282a:	18d3      	adds	r3, r2, r3
 801282c:	0030      	movs	r0, r6
 801282e:	681a      	ldr	r2, [r3, #0]
 8012830:	685b      	ldr	r3, [r3, #4]
 8012832:	0029      	movs	r1, r5
 8012834:	f7ee faaa 	bl	8000d8c <__aeabi_dadd>
 8012838:	0006      	movs	r6, r0
 801283a:	000d      	movs	r5, r1
 801283c:	3c01      	subs	r4, #1
 801283e:	2c00      	cmp	r4, #0
 8012840:	daf1      	bge.n	8012826 <__kernel_rem_pio2+0x58e>
 8012842:	9b08      	ldr	r3, [sp, #32]
 8012844:	0029      	movs	r1, r5
 8012846:	2b00      	cmp	r3, #0
 8012848:	d002      	beq.n	8012850 <__kernel_rem_pio2+0x5b8>
 801284a:	2380      	movs	r3, #128	; 0x80
 801284c:	061b      	lsls	r3, r3, #24
 801284e:	18e9      	adds	r1, r5, r3
 8012850:	0032      	movs	r2, r6
 8012852:	000b      	movs	r3, r1
 8012854:	9907      	ldr	r1, [sp, #28]
 8012856:	2401      	movs	r4, #1
 8012858:	600a      	str	r2, [r1, #0]
 801285a:	604b      	str	r3, [r1, #4]
 801285c:	984e      	ldr	r0, [sp, #312]	; 0x138
 801285e:	994f      	ldr	r1, [sp, #316]	; 0x13c
 8012860:	002b      	movs	r3, r5
 8012862:	f7ef fc3d 	bl	80020e0 <__aeabi_dsub>
 8012866:	0007      	movs	r7, r0
 8012868:	000e      	movs	r6, r1
 801286a:	ad4e      	add	r5, sp, #312	; 0x138
 801286c:	9b00      	ldr	r3, [sp, #0]
 801286e:	3508      	adds	r5, #8
 8012870:	42a3      	cmp	r3, r4
 8012872:	da0f      	bge.n	8012894 <__kernel_rem_pio2+0x5fc>
 8012874:	9b08      	ldr	r3, [sp, #32]
 8012876:	2b00      	cmp	r3, #0
 8012878:	d002      	beq.n	8012880 <__kernel_rem_pio2+0x5e8>
 801287a:	2380      	movs	r3, #128	; 0x80
 801287c:	061b      	lsls	r3, r3, #24
 801287e:	18f6      	adds	r6, r6, r3
 8012880:	003a      	movs	r2, r7
 8012882:	0033      	movs	r3, r6
 8012884:	9907      	ldr	r1, [sp, #28]
 8012886:	608a      	str	r2, [r1, #8]
 8012888:	60cb      	str	r3, [r1, #12]
 801288a:	e776      	b.n	801277a <__kernel_rem_pio2+0x4e2>
 801288c:	2600      	movs	r6, #0
 801288e:	9c00      	ldr	r4, [sp, #0]
 8012890:	0035      	movs	r5, r6
 8012892:	e7d4      	b.n	801283e <__kernel_rem_pio2+0x5a6>
 8012894:	0038      	movs	r0, r7
 8012896:	682a      	ldr	r2, [r5, #0]
 8012898:	686b      	ldr	r3, [r5, #4]
 801289a:	0031      	movs	r1, r6
 801289c:	f7ee fa76 	bl	8000d8c <__aeabi_dadd>
 80128a0:	3401      	adds	r4, #1
 80128a2:	0007      	movs	r7, r0
 80128a4:	000e      	movs	r6, r1
 80128a6:	e7e1      	b.n	801286c <__kernel_rem_pio2+0x5d4>
 80128a8:	9b02      	ldr	r3, [sp, #8]
 80128aa:	68ae      	ldr	r6, [r5, #8]
 80128ac:	68ef      	ldr	r7, [r5, #12]
 80128ae:	3b01      	subs	r3, #1
 80128b0:	9302      	str	r3, [sp, #8]
 80128b2:	682a      	ldr	r2, [r5, #0]
 80128b4:	686b      	ldr	r3, [r5, #4]
 80128b6:	9204      	str	r2, [sp, #16]
 80128b8:	9305      	str	r3, [sp, #20]
 80128ba:	9804      	ldr	r0, [sp, #16]
 80128bc:	9905      	ldr	r1, [sp, #20]
 80128be:	0032      	movs	r2, r6
 80128c0:	003b      	movs	r3, r7
 80128c2:	f7ee fa63 	bl	8000d8c <__aeabi_dadd>
 80128c6:	0002      	movs	r2, r0
 80128c8:	000b      	movs	r3, r1
 80128ca:	900a      	str	r0, [sp, #40]	; 0x28
 80128cc:	910b      	str	r1, [sp, #44]	; 0x2c
 80128ce:	9804      	ldr	r0, [sp, #16]
 80128d0:	9905      	ldr	r1, [sp, #20]
 80128d2:	f7ef fc05 	bl	80020e0 <__aeabi_dsub>
 80128d6:	0032      	movs	r2, r6
 80128d8:	003b      	movs	r3, r7
 80128da:	f7ee fa57 	bl	8000d8c <__aeabi_dadd>
 80128de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80128e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80128e2:	60a8      	str	r0, [r5, #8]
 80128e4:	60e9      	str	r1, [r5, #12]
 80128e6:	602a      	str	r2, [r5, #0]
 80128e8:	606b      	str	r3, [r5, #4]
 80128ea:	e758      	b.n	801279e <__kernel_rem_pio2+0x506>
 80128ec:	6826      	ldr	r6, [r4, #0]
 80128ee:	6867      	ldr	r7, [r4, #4]
 80128f0:	68a2      	ldr	r2, [r4, #8]
 80128f2:	68e3      	ldr	r3, [r4, #12]
 80128f4:	0030      	movs	r0, r6
 80128f6:	0039      	movs	r1, r7
 80128f8:	9202      	str	r2, [sp, #8]
 80128fa:	9303      	str	r3, [sp, #12]
 80128fc:	f7ee fa46 	bl	8000d8c <__aeabi_dadd>
 8012900:	0002      	movs	r2, r0
 8012902:	000b      	movs	r3, r1
 8012904:	9004      	str	r0, [sp, #16]
 8012906:	9105      	str	r1, [sp, #20]
 8012908:	0030      	movs	r0, r6
 801290a:	0039      	movs	r1, r7
 801290c:	f7ef fbe8 	bl	80020e0 <__aeabi_dsub>
 8012910:	9a02      	ldr	r2, [sp, #8]
 8012912:	9b03      	ldr	r3, [sp, #12]
 8012914:	f7ee fa3a 	bl	8000d8c <__aeabi_dadd>
 8012918:	9a04      	ldr	r2, [sp, #16]
 801291a:	9b05      	ldr	r3, [sp, #20]
 801291c:	60a0      	str	r0, [r4, #8]
 801291e:	60e1      	str	r1, [r4, #12]
 8012920:	6022      	str	r2, [r4, #0]
 8012922:	6063      	str	r3, [r4, #4]
 8012924:	3d01      	subs	r5, #1
 8012926:	e740      	b.n	80127aa <__kernel_rem_pio2+0x512>
 8012928:	9b00      	ldr	r3, [sp, #0]
 801292a:	aa4e      	add	r2, sp, #312	; 0x138
 801292c:	00db      	lsls	r3, r3, #3
 801292e:	18d3      	adds	r3, r2, r3
 8012930:	0020      	movs	r0, r4
 8012932:	681a      	ldr	r2, [r3, #0]
 8012934:	685b      	ldr	r3, [r3, #4]
 8012936:	f7ee fa29 	bl	8000d8c <__aeabi_dadd>
 801293a:	9b00      	ldr	r3, [sp, #0]
 801293c:	0004      	movs	r4, r0
 801293e:	3b01      	subs	r3, #1
 8012940:	9300      	str	r3, [sp, #0]
 8012942:	e738      	b.n	80127b6 <__kernel_rem_pio2+0x51e>
 8012944:	9b07      	ldr	r3, [sp, #28]
 8012946:	9a07      	ldr	r2, [sp, #28]
 8012948:	601f      	str	r7, [r3, #0]
 801294a:	2380      	movs	r3, #128	; 0x80
 801294c:	061b      	lsls	r3, r3, #24
 801294e:	18f6      	adds	r6, r6, r3
 8012950:	18c0      	adds	r0, r0, r3
 8012952:	18c9      	adds	r1, r1, r3
 8012954:	6056      	str	r6, [r2, #4]
 8012956:	6095      	str	r5, [r2, #8]
 8012958:	60d0      	str	r0, [r2, #12]
 801295a:	6114      	str	r4, [r2, #16]
 801295c:	6151      	str	r1, [r2, #20]
 801295e:	e70c      	b.n	801277a <__kernel_rem_pio2+0x4e2>
 8012960:	41700000 	.word	0x41700000
 8012964:	3e700000 	.word	0x3e700000
 8012968:	08013f40 	.word	0x08013f40

0801296c <__kernel_sin>:
 801296c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801296e:	b089      	sub	sp, #36	; 0x24
 8012970:	9202      	str	r2, [sp, #8]
 8012972:	9303      	str	r3, [sp, #12]
 8012974:	22f9      	movs	r2, #249	; 0xf9
 8012976:	004b      	lsls	r3, r1, #1
 8012978:	0007      	movs	r7, r0
 801297a:	000e      	movs	r6, r1
 801297c:	085b      	lsrs	r3, r3, #1
 801297e:	0592      	lsls	r2, r2, #22
 8012980:	4293      	cmp	r3, r2
 8012982:	da03      	bge.n	801298c <__kernel_sin+0x20>
 8012984:	f7ef ff5c 	bl	8002840 <__aeabi_d2iz>
 8012988:	2800      	cmp	r0, #0
 801298a:	d04c      	beq.n	8012a26 <__kernel_sin+0xba>
 801298c:	003a      	movs	r2, r7
 801298e:	0033      	movs	r3, r6
 8012990:	0038      	movs	r0, r7
 8012992:	0031      	movs	r1, r6
 8012994:	f7ef f938 	bl	8001c08 <__aeabi_dmul>
 8012998:	0004      	movs	r4, r0
 801299a:	000d      	movs	r5, r1
 801299c:	0002      	movs	r2, r0
 801299e:	000b      	movs	r3, r1
 80129a0:	0038      	movs	r0, r7
 80129a2:	0031      	movs	r1, r6
 80129a4:	f7ef f930 	bl	8001c08 <__aeabi_dmul>
 80129a8:	4a39      	ldr	r2, [pc, #228]	; (8012a90 <__kernel_sin+0x124>)
 80129aa:	9000      	str	r0, [sp, #0]
 80129ac:	9101      	str	r1, [sp, #4]
 80129ae:	4b39      	ldr	r3, [pc, #228]	; (8012a94 <__kernel_sin+0x128>)
 80129b0:	0020      	movs	r0, r4
 80129b2:	0029      	movs	r1, r5
 80129b4:	f7ef f928 	bl	8001c08 <__aeabi_dmul>
 80129b8:	4a37      	ldr	r2, [pc, #220]	; (8012a98 <__kernel_sin+0x12c>)
 80129ba:	4b38      	ldr	r3, [pc, #224]	; (8012a9c <__kernel_sin+0x130>)
 80129bc:	f7ef fb90 	bl	80020e0 <__aeabi_dsub>
 80129c0:	0022      	movs	r2, r4
 80129c2:	002b      	movs	r3, r5
 80129c4:	f7ef f920 	bl	8001c08 <__aeabi_dmul>
 80129c8:	4a35      	ldr	r2, [pc, #212]	; (8012aa0 <__kernel_sin+0x134>)
 80129ca:	4b36      	ldr	r3, [pc, #216]	; (8012aa4 <__kernel_sin+0x138>)
 80129cc:	f7ee f9de 	bl	8000d8c <__aeabi_dadd>
 80129d0:	0022      	movs	r2, r4
 80129d2:	002b      	movs	r3, r5
 80129d4:	f7ef f918 	bl	8001c08 <__aeabi_dmul>
 80129d8:	4a33      	ldr	r2, [pc, #204]	; (8012aa8 <__kernel_sin+0x13c>)
 80129da:	4b34      	ldr	r3, [pc, #208]	; (8012aac <__kernel_sin+0x140>)
 80129dc:	f7ef fb80 	bl	80020e0 <__aeabi_dsub>
 80129e0:	0022      	movs	r2, r4
 80129e2:	002b      	movs	r3, r5
 80129e4:	f7ef f910 	bl	8001c08 <__aeabi_dmul>
 80129e8:	4b31      	ldr	r3, [pc, #196]	; (8012ab0 <__kernel_sin+0x144>)
 80129ea:	4a32      	ldr	r2, [pc, #200]	; (8012ab4 <__kernel_sin+0x148>)
 80129ec:	f7ee f9ce 	bl	8000d8c <__aeabi_dadd>
 80129f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80129f2:	9004      	str	r0, [sp, #16]
 80129f4:	9105      	str	r1, [sp, #20]
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d119      	bne.n	8012a2e <__kernel_sin+0xc2>
 80129fa:	0002      	movs	r2, r0
 80129fc:	000b      	movs	r3, r1
 80129fe:	0020      	movs	r0, r4
 8012a00:	0029      	movs	r1, r5
 8012a02:	f7ef f901 	bl	8001c08 <__aeabi_dmul>
 8012a06:	4a2c      	ldr	r2, [pc, #176]	; (8012ab8 <__kernel_sin+0x14c>)
 8012a08:	4b2c      	ldr	r3, [pc, #176]	; (8012abc <__kernel_sin+0x150>)
 8012a0a:	f7ef fb69 	bl	80020e0 <__aeabi_dsub>
 8012a0e:	9a00      	ldr	r2, [sp, #0]
 8012a10:	9b01      	ldr	r3, [sp, #4]
 8012a12:	f7ef f8f9 	bl	8001c08 <__aeabi_dmul>
 8012a16:	0002      	movs	r2, r0
 8012a18:	000b      	movs	r3, r1
 8012a1a:	0038      	movs	r0, r7
 8012a1c:	0031      	movs	r1, r6
 8012a1e:	f7ee f9b5 	bl	8000d8c <__aeabi_dadd>
 8012a22:	0007      	movs	r7, r0
 8012a24:	000e      	movs	r6, r1
 8012a26:	0038      	movs	r0, r7
 8012a28:	0031      	movs	r1, r6
 8012a2a:	b009      	add	sp, #36	; 0x24
 8012a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a2e:	2200      	movs	r2, #0
 8012a30:	9802      	ldr	r0, [sp, #8]
 8012a32:	9903      	ldr	r1, [sp, #12]
 8012a34:	4b22      	ldr	r3, [pc, #136]	; (8012ac0 <__kernel_sin+0x154>)
 8012a36:	f7ef f8e7 	bl	8001c08 <__aeabi_dmul>
 8012a3a:	9a04      	ldr	r2, [sp, #16]
 8012a3c:	9b05      	ldr	r3, [sp, #20]
 8012a3e:	9006      	str	r0, [sp, #24]
 8012a40:	9107      	str	r1, [sp, #28]
 8012a42:	9800      	ldr	r0, [sp, #0]
 8012a44:	9901      	ldr	r1, [sp, #4]
 8012a46:	f7ef f8df 	bl	8001c08 <__aeabi_dmul>
 8012a4a:	0002      	movs	r2, r0
 8012a4c:	000b      	movs	r3, r1
 8012a4e:	9806      	ldr	r0, [sp, #24]
 8012a50:	9907      	ldr	r1, [sp, #28]
 8012a52:	f7ef fb45 	bl	80020e0 <__aeabi_dsub>
 8012a56:	0022      	movs	r2, r4
 8012a58:	002b      	movs	r3, r5
 8012a5a:	f7ef f8d5 	bl	8001c08 <__aeabi_dmul>
 8012a5e:	9a02      	ldr	r2, [sp, #8]
 8012a60:	9b03      	ldr	r3, [sp, #12]
 8012a62:	f7ef fb3d 	bl	80020e0 <__aeabi_dsub>
 8012a66:	4a14      	ldr	r2, [pc, #80]	; (8012ab8 <__kernel_sin+0x14c>)
 8012a68:	0004      	movs	r4, r0
 8012a6a:	000d      	movs	r5, r1
 8012a6c:	9800      	ldr	r0, [sp, #0]
 8012a6e:	9901      	ldr	r1, [sp, #4]
 8012a70:	4b12      	ldr	r3, [pc, #72]	; (8012abc <__kernel_sin+0x150>)
 8012a72:	f7ef f8c9 	bl	8001c08 <__aeabi_dmul>
 8012a76:	0002      	movs	r2, r0
 8012a78:	000b      	movs	r3, r1
 8012a7a:	0020      	movs	r0, r4
 8012a7c:	0029      	movs	r1, r5
 8012a7e:	f7ee f985 	bl	8000d8c <__aeabi_dadd>
 8012a82:	0002      	movs	r2, r0
 8012a84:	000b      	movs	r3, r1
 8012a86:	0038      	movs	r0, r7
 8012a88:	0031      	movs	r1, r6
 8012a8a:	f7ef fb29 	bl	80020e0 <__aeabi_dsub>
 8012a8e:	e7c8      	b.n	8012a22 <__kernel_sin+0xb6>
 8012a90:	5acfd57c 	.word	0x5acfd57c
 8012a94:	3de5d93a 	.word	0x3de5d93a
 8012a98:	8a2b9ceb 	.word	0x8a2b9ceb
 8012a9c:	3e5ae5e6 	.word	0x3e5ae5e6
 8012aa0:	57b1fe7d 	.word	0x57b1fe7d
 8012aa4:	3ec71de3 	.word	0x3ec71de3
 8012aa8:	19c161d5 	.word	0x19c161d5
 8012aac:	3f2a01a0 	.word	0x3f2a01a0
 8012ab0:	3f811111 	.word	0x3f811111
 8012ab4:	1110f8a6 	.word	0x1110f8a6
 8012ab8:	55555549 	.word	0x55555549
 8012abc:	3fc55555 	.word	0x3fc55555
 8012ac0:	3fe00000 	.word	0x3fe00000

08012ac4 <fabs>:
 8012ac4:	004b      	lsls	r3, r1, #1
 8012ac6:	0859      	lsrs	r1, r3, #1
 8012ac8:	4770      	bx	lr
	...

08012acc <floor>:
 8012acc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012ace:	004b      	lsls	r3, r1, #1
 8012ad0:	4a3d      	ldr	r2, [pc, #244]	; (8012bc8 <floor+0xfc>)
 8012ad2:	0d5b      	lsrs	r3, r3, #21
 8012ad4:	189f      	adds	r7, r3, r2
 8012ad6:	4684      	mov	ip, r0
 8012ad8:	000e      	movs	r6, r1
 8012ada:	000d      	movs	r5, r1
 8012adc:	0004      	movs	r4, r0
 8012ade:	9001      	str	r0, [sp, #4]
 8012ae0:	2f13      	cmp	r7, #19
 8012ae2:	dc34      	bgt.n	8012b4e <floor+0x82>
 8012ae4:	2f00      	cmp	r7, #0
 8012ae6:	da16      	bge.n	8012b16 <floor+0x4a>
 8012ae8:	4a38      	ldr	r2, [pc, #224]	; (8012bcc <floor+0x100>)
 8012aea:	4b39      	ldr	r3, [pc, #228]	; (8012bd0 <floor+0x104>)
 8012aec:	4660      	mov	r0, ip
 8012aee:	0031      	movs	r1, r6
 8012af0:	f7ee f94c 	bl	8000d8c <__aeabi_dadd>
 8012af4:	2200      	movs	r2, #0
 8012af6:	2300      	movs	r3, #0
 8012af8:	f7ed fcc2 	bl	8000480 <__aeabi_dcmpgt>
 8012afc:	2800      	cmp	r0, #0
 8012afe:	d007      	beq.n	8012b10 <floor+0x44>
 8012b00:	2e00      	cmp	r6, #0
 8012b02:	da5d      	bge.n	8012bc0 <floor+0xf4>
 8012b04:	0073      	lsls	r3, r6, #1
 8012b06:	085b      	lsrs	r3, r3, #1
 8012b08:	431c      	orrs	r4, r3
 8012b0a:	d001      	beq.n	8012b10 <floor+0x44>
 8012b0c:	2400      	movs	r4, #0
 8012b0e:	4d31      	ldr	r5, [pc, #196]	; (8012bd4 <floor+0x108>)
 8012b10:	46a4      	mov	ip, r4
 8012b12:	002e      	movs	r6, r5
 8012b14:	e029      	b.n	8012b6a <floor+0x9e>
 8012b16:	4b30      	ldr	r3, [pc, #192]	; (8012bd8 <floor+0x10c>)
 8012b18:	413b      	asrs	r3, r7
 8012b1a:	9300      	str	r3, [sp, #0]
 8012b1c:	400b      	ands	r3, r1
 8012b1e:	4303      	orrs	r3, r0
 8012b20:	d023      	beq.n	8012b6a <floor+0x9e>
 8012b22:	4a2a      	ldr	r2, [pc, #168]	; (8012bcc <floor+0x100>)
 8012b24:	4b2a      	ldr	r3, [pc, #168]	; (8012bd0 <floor+0x104>)
 8012b26:	4660      	mov	r0, ip
 8012b28:	0031      	movs	r1, r6
 8012b2a:	f7ee f92f 	bl	8000d8c <__aeabi_dadd>
 8012b2e:	2200      	movs	r2, #0
 8012b30:	2300      	movs	r3, #0
 8012b32:	f7ed fca5 	bl	8000480 <__aeabi_dcmpgt>
 8012b36:	2800      	cmp	r0, #0
 8012b38:	d0ea      	beq.n	8012b10 <floor+0x44>
 8012b3a:	2e00      	cmp	r6, #0
 8012b3c:	da03      	bge.n	8012b46 <floor+0x7a>
 8012b3e:	2380      	movs	r3, #128	; 0x80
 8012b40:	035b      	lsls	r3, r3, #13
 8012b42:	413b      	asrs	r3, r7
 8012b44:	18f5      	adds	r5, r6, r3
 8012b46:	9b00      	ldr	r3, [sp, #0]
 8012b48:	2400      	movs	r4, #0
 8012b4a:	439d      	bics	r5, r3
 8012b4c:	e7e0      	b.n	8012b10 <floor+0x44>
 8012b4e:	2f33      	cmp	r7, #51	; 0x33
 8012b50:	dd0f      	ble.n	8012b72 <floor+0xa6>
 8012b52:	2380      	movs	r3, #128	; 0x80
 8012b54:	00db      	lsls	r3, r3, #3
 8012b56:	429f      	cmp	r7, r3
 8012b58:	d107      	bne.n	8012b6a <floor+0x9e>
 8012b5a:	0002      	movs	r2, r0
 8012b5c:	000b      	movs	r3, r1
 8012b5e:	4660      	mov	r0, ip
 8012b60:	0031      	movs	r1, r6
 8012b62:	f7ee f913 	bl	8000d8c <__aeabi_dadd>
 8012b66:	4684      	mov	ip, r0
 8012b68:	000e      	movs	r6, r1
 8012b6a:	4660      	mov	r0, ip
 8012b6c:	0031      	movs	r1, r6
 8012b6e:	b003      	add	sp, #12
 8012b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b72:	4a1a      	ldr	r2, [pc, #104]	; (8012bdc <floor+0x110>)
 8012b74:	189b      	adds	r3, r3, r2
 8012b76:	2201      	movs	r2, #1
 8012b78:	4252      	negs	r2, r2
 8012b7a:	40da      	lsrs	r2, r3
 8012b7c:	9200      	str	r2, [sp, #0]
 8012b7e:	4210      	tst	r0, r2
 8012b80:	d0f3      	beq.n	8012b6a <floor+0x9e>
 8012b82:	4a12      	ldr	r2, [pc, #72]	; (8012bcc <floor+0x100>)
 8012b84:	4b12      	ldr	r3, [pc, #72]	; (8012bd0 <floor+0x104>)
 8012b86:	4660      	mov	r0, ip
 8012b88:	0031      	movs	r1, r6
 8012b8a:	f7ee f8ff 	bl	8000d8c <__aeabi_dadd>
 8012b8e:	2200      	movs	r2, #0
 8012b90:	2300      	movs	r3, #0
 8012b92:	f7ed fc75 	bl	8000480 <__aeabi_dcmpgt>
 8012b96:	2800      	cmp	r0, #0
 8012b98:	d0ba      	beq.n	8012b10 <floor+0x44>
 8012b9a:	2e00      	cmp	r6, #0
 8012b9c:	da02      	bge.n	8012ba4 <floor+0xd8>
 8012b9e:	2f14      	cmp	r7, #20
 8012ba0:	d103      	bne.n	8012baa <floor+0xde>
 8012ba2:	3501      	adds	r5, #1
 8012ba4:	9b00      	ldr	r3, [sp, #0]
 8012ba6:	439c      	bics	r4, r3
 8012ba8:	e7b2      	b.n	8012b10 <floor+0x44>
 8012baa:	2334      	movs	r3, #52	; 0x34
 8012bac:	1bdf      	subs	r7, r3, r7
 8012bae:	3b33      	subs	r3, #51	; 0x33
 8012bb0:	40bb      	lsls	r3, r7
 8012bb2:	18e4      	adds	r4, r4, r3
 8012bb4:	9b01      	ldr	r3, [sp, #4]
 8012bb6:	429c      	cmp	r4, r3
 8012bb8:	419b      	sbcs	r3, r3
 8012bba:	425b      	negs	r3, r3
 8012bbc:	18f5      	adds	r5, r6, r3
 8012bbe:	e7f1      	b.n	8012ba4 <floor+0xd8>
 8012bc0:	2400      	movs	r4, #0
 8012bc2:	0025      	movs	r5, r4
 8012bc4:	e7a4      	b.n	8012b10 <floor+0x44>
 8012bc6:	46c0      	nop			; (mov r8, r8)
 8012bc8:	fffffc01 	.word	0xfffffc01
 8012bcc:	8800759c 	.word	0x8800759c
 8012bd0:	7e37e43c 	.word	0x7e37e43c
 8012bd4:	bff00000 	.word	0xbff00000
 8012bd8:	000fffff 	.word	0x000fffff
 8012bdc:	fffffbed 	.word	0xfffffbed

08012be0 <scalbn>:
 8012be0:	004b      	lsls	r3, r1, #1
 8012be2:	b570      	push	{r4, r5, r6, lr}
 8012be4:	0d5b      	lsrs	r3, r3, #21
 8012be6:	0014      	movs	r4, r2
 8012be8:	000a      	movs	r2, r1
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d10d      	bne.n	8012c0a <scalbn+0x2a>
 8012bee:	004b      	lsls	r3, r1, #1
 8012bf0:	085b      	lsrs	r3, r3, #1
 8012bf2:	4303      	orrs	r3, r0
 8012bf4:	d010      	beq.n	8012c18 <scalbn+0x38>
 8012bf6:	4b27      	ldr	r3, [pc, #156]	; (8012c94 <scalbn+0xb4>)
 8012bf8:	2200      	movs	r2, #0
 8012bfa:	f7ef f805 	bl	8001c08 <__aeabi_dmul>
 8012bfe:	4b26      	ldr	r3, [pc, #152]	; (8012c98 <scalbn+0xb8>)
 8012c00:	429c      	cmp	r4, r3
 8012c02:	da0a      	bge.n	8012c1a <scalbn+0x3a>
 8012c04:	4a25      	ldr	r2, [pc, #148]	; (8012c9c <scalbn+0xbc>)
 8012c06:	4b26      	ldr	r3, [pc, #152]	; (8012ca0 <scalbn+0xc0>)
 8012c08:	e019      	b.n	8012c3e <scalbn+0x5e>
 8012c0a:	4d26      	ldr	r5, [pc, #152]	; (8012ca4 <scalbn+0xc4>)
 8012c0c:	42ab      	cmp	r3, r5
 8012c0e:	d108      	bne.n	8012c22 <scalbn+0x42>
 8012c10:	0002      	movs	r2, r0
 8012c12:	000b      	movs	r3, r1
 8012c14:	f7ee f8ba 	bl	8000d8c <__aeabi_dadd>
 8012c18:	bd70      	pop	{r4, r5, r6, pc}
 8012c1a:	000a      	movs	r2, r1
 8012c1c:	004b      	lsls	r3, r1, #1
 8012c1e:	0d5b      	lsrs	r3, r3, #21
 8012c20:	3b36      	subs	r3, #54	; 0x36
 8012c22:	4d21      	ldr	r5, [pc, #132]	; (8012ca8 <scalbn+0xc8>)
 8012c24:	18e3      	adds	r3, r4, r3
 8012c26:	42ab      	cmp	r3, r5
 8012c28:	dd0c      	ble.n	8012c44 <scalbn+0x64>
 8012c2a:	4c20      	ldr	r4, [pc, #128]	; (8012cac <scalbn+0xcc>)
 8012c2c:	4d20      	ldr	r5, [pc, #128]	; (8012cb0 <scalbn+0xd0>)
 8012c2e:	2900      	cmp	r1, #0
 8012c30:	da01      	bge.n	8012c36 <scalbn+0x56>
 8012c32:	4c1e      	ldr	r4, [pc, #120]	; (8012cac <scalbn+0xcc>)
 8012c34:	4d1f      	ldr	r5, [pc, #124]	; (8012cb4 <scalbn+0xd4>)
 8012c36:	0020      	movs	r0, r4
 8012c38:	0029      	movs	r1, r5
 8012c3a:	4a1c      	ldr	r2, [pc, #112]	; (8012cac <scalbn+0xcc>)
 8012c3c:	4b1c      	ldr	r3, [pc, #112]	; (8012cb0 <scalbn+0xd0>)
 8012c3e:	f7ee ffe3 	bl	8001c08 <__aeabi_dmul>
 8012c42:	e7e9      	b.n	8012c18 <scalbn+0x38>
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	dd05      	ble.n	8012c54 <scalbn+0x74>
 8012c48:	4c1b      	ldr	r4, [pc, #108]	; (8012cb8 <scalbn+0xd8>)
 8012c4a:	051b      	lsls	r3, r3, #20
 8012c4c:	4022      	ands	r2, r4
 8012c4e:	431a      	orrs	r2, r3
 8012c50:	0011      	movs	r1, r2
 8012c52:	e7e1      	b.n	8012c18 <scalbn+0x38>
 8012c54:	001d      	movs	r5, r3
 8012c56:	3535      	adds	r5, #53	; 0x35
 8012c58:	da13      	bge.n	8012c82 <scalbn+0xa2>
 8012c5a:	4a18      	ldr	r2, [pc, #96]	; (8012cbc <scalbn+0xdc>)
 8012c5c:	0fcb      	lsrs	r3, r1, #31
 8012c5e:	4294      	cmp	r4, r2
 8012c60:	dd08      	ble.n	8012c74 <scalbn+0x94>
 8012c62:	4812      	ldr	r0, [pc, #72]	; (8012cac <scalbn+0xcc>)
 8012c64:	4912      	ldr	r1, [pc, #72]	; (8012cb0 <scalbn+0xd0>)
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d001      	beq.n	8012c6e <scalbn+0x8e>
 8012c6a:	4810      	ldr	r0, [pc, #64]	; (8012cac <scalbn+0xcc>)
 8012c6c:	4911      	ldr	r1, [pc, #68]	; (8012cb4 <scalbn+0xd4>)
 8012c6e:	4a0f      	ldr	r2, [pc, #60]	; (8012cac <scalbn+0xcc>)
 8012c70:	4b0f      	ldr	r3, [pc, #60]	; (8012cb0 <scalbn+0xd0>)
 8012c72:	e7e4      	b.n	8012c3e <scalbn+0x5e>
 8012c74:	4809      	ldr	r0, [pc, #36]	; (8012c9c <scalbn+0xbc>)
 8012c76:	490a      	ldr	r1, [pc, #40]	; (8012ca0 <scalbn+0xc0>)
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d0c3      	beq.n	8012c04 <scalbn+0x24>
 8012c7c:	4807      	ldr	r0, [pc, #28]	; (8012c9c <scalbn+0xbc>)
 8012c7e:	4910      	ldr	r1, [pc, #64]	; (8012cc0 <scalbn+0xe0>)
 8012c80:	e7c0      	b.n	8012c04 <scalbn+0x24>
 8012c82:	4c0d      	ldr	r4, [pc, #52]	; (8012cb8 <scalbn+0xd8>)
 8012c84:	3336      	adds	r3, #54	; 0x36
 8012c86:	4022      	ands	r2, r4
 8012c88:	051b      	lsls	r3, r3, #20
 8012c8a:	4313      	orrs	r3, r2
 8012c8c:	0019      	movs	r1, r3
 8012c8e:	2200      	movs	r2, #0
 8012c90:	4b0c      	ldr	r3, [pc, #48]	; (8012cc4 <scalbn+0xe4>)
 8012c92:	e7d4      	b.n	8012c3e <scalbn+0x5e>
 8012c94:	43500000 	.word	0x43500000
 8012c98:	ffff3cb0 	.word	0xffff3cb0
 8012c9c:	c2f8f359 	.word	0xc2f8f359
 8012ca0:	01a56e1f 	.word	0x01a56e1f
 8012ca4:	000007ff 	.word	0x000007ff
 8012ca8:	000007fe 	.word	0x000007fe
 8012cac:	8800759c 	.word	0x8800759c
 8012cb0:	7e37e43c 	.word	0x7e37e43c
 8012cb4:	fe37e43c 	.word	0xfe37e43c
 8012cb8:	800fffff 	.word	0x800fffff
 8012cbc:	0000c350 	.word	0x0000c350
 8012cc0:	81a56e1f 	.word	0x81a56e1f
 8012cc4:	3c900000 	.word	0x3c900000

08012cc8 <_init>:
 8012cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cca:	46c0      	nop			; (mov r8, r8)
 8012ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012cce:	bc08      	pop	{r3}
 8012cd0:	469e      	mov	lr, r3
 8012cd2:	4770      	bx	lr

08012cd4 <_fini>:
 8012cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cd6:	46c0      	nop			; (mov r8, r8)
 8012cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012cda:	bc08      	pop	{r3}
 8012cdc:	469e      	mov	lr, r3
 8012cde:	4770      	bx	lr
