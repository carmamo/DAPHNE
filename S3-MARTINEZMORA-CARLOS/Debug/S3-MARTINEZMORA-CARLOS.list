
S3-MARTINEZMORA-CARLOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c0c  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  08004ccc  08004ccc  00014ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e50  08004e50  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08004e50  08004e50  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e50  08004e50  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e50  08004e50  00014e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e54  08004e54  00014e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08004e58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b08  20000090  08004ee8  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b98  08004ee8  00021b98  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016234  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c76  00000000  00000000  000362ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001278  00000000  00000000  00038f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001170  00000000  00000000  0003a1e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002992  00000000  00000000  0003b350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013d79  00000000  00000000  0003dce2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00071914  00000000  00000000  00051a5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c336f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004610  00000000  00000000  000c33c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000090 	.word	0x20000090
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004cb4 	.word	0x08004cb4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000094 	.word	0x20000094
 8000104:	08004cb4 	.word	0x08004cb4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fbb0 	bl	8000988 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f846 	bl	80002b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f8c0 	bl	80003b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000230:	f000 f88e 	bl	8000350 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000234:	f002 f8b4 	bl	80023a0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of button */
  buttonHandle = osThreadNew(check_status, NULL, &button_attributes);
 8000238:	4a13      	ldr	r2, [pc, #76]	; (8000288 <main+0x68>)
 800023a:	4b14      	ldr	r3, [pc, #80]	; (800028c <main+0x6c>)
 800023c:	2100      	movs	r1, #0
 800023e:	0018      	movs	r0, r3
 8000240:	f002 f908 	bl	8002454 <osThreadNew>
 8000244:	0002      	movs	r2, r0
 8000246:	4b12      	ldr	r3, [pc, #72]	; (8000290 <main+0x70>)
 8000248:	601a      	str	r2, [r3, #0]

  /* creation of Stepper */
  StepperHandle = osThreadNew(stepper_run, NULL, &Stepper_attributes);
 800024a:	4a12      	ldr	r2, [pc, #72]	; (8000294 <main+0x74>)
 800024c:	4b12      	ldr	r3, [pc, #72]	; (8000298 <main+0x78>)
 800024e:	2100      	movs	r1, #0
 8000250:	0018      	movs	r0, r3
 8000252:	f002 f8ff 	bl	8002454 <osThreadNew>
 8000256:	0002      	movs	r2, r0
 8000258:	4b10      	ldr	r3, [pc, #64]	; (800029c <main+0x7c>)
 800025a:	601a      	str	r2, [r3, #0]

  /* creation of led */
  ledHandle = osThreadNew(blink, NULL, &led_attributes);
 800025c:	4a10      	ldr	r2, [pc, #64]	; (80002a0 <main+0x80>)
 800025e:	4b11      	ldr	r3, [pc, #68]	; (80002a4 <main+0x84>)
 8000260:	2100      	movs	r1, #0
 8000262:	0018      	movs	r0, r3
 8000264:	f002 f8f6 	bl	8002454 <osThreadNew>
 8000268:	0002      	movs	r2, r0
 800026a:	4b0f      	ldr	r3, [pc, #60]	; (80002a8 <main+0x88>)
 800026c:	601a      	str	r2, [r3, #0]

  /* creation of Serial */
  SerialHandle = osThreadNew(serial_receive, NULL, &Serial_attributes);
 800026e:	4a0f      	ldr	r2, [pc, #60]	; (80002ac <main+0x8c>)
 8000270:	4b0f      	ldr	r3, [pc, #60]	; (80002b0 <main+0x90>)
 8000272:	2100      	movs	r1, #0
 8000274:	0018      	movs	r0, r3
 8000276:	f002 f8ed 	bl	8002454 <osThreadNew>
 800027a:	0002      	movs	r2, r0
 800027c:	4b0d      	ldr	r3, [pc, #52]	; (80002b4 <main+0x94>)
 800027e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000280:	f002 f8ba 	bl	80023f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000284:	e7fe      	b.n	8000284 <main+0x64>
 8000286:	46c0      	nop			; (mov r8, r8)
 8000288:	08004d20 	.word	0x08004d20
 800028c:	08000535 	.word	0x08000535
 8000290:	20000130 	.word	0x20000130
 8000294:	08004d44 	.word	0x08004d44
 8000298:	080005f5 	.word	0x080005f5
 800029c:	20000134 	.word	0x20000134
 80002a0:	08004d68 	.word	0x08004d68
 80002a4:	080006b5 	.word	0x080006b5
 80002a8:	20000138 	.word	0x20000138
 80002ac:	08004d8c 	.word	0x08004d8c
 80002b0:	080006d1 	.word	0x080006d1
 80002b4:	2000013c 	.word	0x2000013c

080002b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b8:	b590      	push	{r4, r7, lr}
 80002ba:	b091      	sub	sp, #68	; 0x44
 80002bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002be:	2410      	movs	r4, #16
 80002c0:	193b      	adds	r3, r7, r4
 80002c2:	0018      	movs	r0, r3
 80002c4:	2330      	movs	r3, #48	; 0x30
 80002c6:	001a      	movs	r2, r3
 80002c8:	2100      	movs	r1, #0
 80002ca:	f004 fc1e 	bl	8004b0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ce:	003b      	movs	r3, r7
 80002d0:	0018      	movs	r0, r3
 80002d2:	2310      	movs	r3, #16
 80002d4:	001a      	movs	r2, r3
 80002d6:	2100      	movs	r1, #0
 80002d8:	f004 fc17 	bl	8004b0a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002dc:	0021      	movs	r1, r4
 80002de:	187b      	adds	r3, r7, r1
 80002e0:	2202      	movs	r2, #2
 80002e2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e4:	187b      	adds	r3, r7, r1
 80002e6:	2201      	movs	r2, #1
 80002e8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	2210      	movs	r2, #16
 80002ee:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f0:	187b      	adds	r3, r7, r1
 80002f2:	2202      	movs	r2, #2
 80002f4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002f6:	187b      	adds	r3, r7, r1
 80002f8:	2280      	movs	r2, #128	; 0x80
 80002fa:	0212      	lsls	r2, r2, #8
 80002fc:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	2280      	movs	r2, #128	; 0x80
 8000302:	0352      	lsls	r2, r2, #13
 8000304:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000306:	187b      	adds	r3, r7, r1
 8000308:	2200      	movs	r2, #0
 800030a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800030c:	187b      	adds	r3, r7, r1
 800030e:	0018      	movs	r0, r3
 8000310:	f000 fdde 	bl	8000ed0 <HAL_RCC_OscConfig>
 8000314:	1e03      	subs	r3, r0, #0
 8000316:	d001      	beq.n	800031c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000318:	f000 f9f4 	bl	8000704 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800031c:	003b      	movs	r3, r7
 800031e:	2207      	movs	r2, #7
 8000320:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000322:	003b      	movs	r3, r7
 8000324:	2202      	movs	r2, #2
 8000326:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000328:	003b      	movs	r3, r7
 800032a:	2200      	movs	r2, #0
 800032c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800032e:	003b      	movs	r3, r7
 8000330:	2200      	movs	r2, #0
 8000332:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000334:	003b      	movs	r3, r7
 8000336:	2101      	movs	r1, #1
 8000338:	0018      	movs	r0, r3
 800033a:	f001 f8e7 	bl	800150c <HAL_RCC_ClockConfig>
 800033e:	1e03      	subs	r3, r0, #0
 8000340:	d001      	beq.n	8000346 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000342:	f000 f9df 	bl	8000704 <Error_Handler>
  }
}
 8000346:	46c0      	nop			; (mov r8, r8)
 8000348:	46bd      	mov	sp, r7
 800034a:	b011      	add	sp, #68	; 0x44
 800034c:	bd90      	pop	{r4, r7, pc}
	...

08000350 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000354:	4b14      	ldr	r3, [pc, #80]	; (80003a8 <MX_USART2_UART_Init+0x58>)
 8000356:	4a15      	ldr	r2, [pc, #84]	; (80003ac <MX_USART2_UART_Init+0x5c>)
 8000358:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800035a:	4b13      	ldr	r3, [pc, #76]	; (80003a8 <MX_USART2_UART_Init+0x58>)
 800035c:	2296      	movs	r2, #150	; 0x96
 800035e:	0212      	lsls	r2, r2, #8
 8000360:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000362:	4b11      	ldr	r3, [pc, #68]	; (80003a8 <MX_USART2_UART_Init+0x58>)
 8000364:	2200      	movs	r2, #0
 8000366:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000368:	4b0f      	ldr	r3, [pc, #60]	; (80003a8 <MX_USART2_UART_Init+0x58>)
 800036a:	2200      	movs	r2, #0
 800036c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800036e:	4b0e      	ldr	r3, [pc, #56]	; (80003a8 <MX_USART2_UART_Init+0x58>)
 8000370:	2200      	movs	r2, #0
 8000372:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000374:	4b0c      	ldr	r3, [pc, #48]	; (80003a8 <MX_USART2_UART_Init+0x58>)
 8000376:	220c      	movs	r2, #12
 8000378:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800037a:	4b0b      	ldr	r3, [pc, #44]	; (80003a8 <MX_USART2_UART_Init+0x58>)
 800037c:	2200      	movs	r2, #0
 800037e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000380:	4b09      	ldr	r3, [pc, #36]	; (80003a8 <MX_USART2_UART_Init+0x58>)
 8000382:	2200      	movs	r2, #0
 8000384:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000386:	4b08      	ldr	r3, [pc, #32]	; (80003a8 <MX_USART2_UART_Init+0x58>)
 8000388:	2200      	movs	r2, #0
 800038a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800038c:	4b06      	ldr	r3, [pc, #24]	; (80003a8 <MX_USART2_UART_Init+0x58>)
 800038e:	2200      	movs	r2, #0
 8000390:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000392:	4b05      	ldr	r3, [pc, #20]	; (80003a8 <MX_USART2_UART_Init+0x58>)
 8000394:	0018      	movs	r0, r3
 8000396:	f001 fc97 	bl	8001cc8 <HAL_UART_Init>
 800039a:	1e03      	subs	r3, r0, #0
 800039c:	d001      	beq.n	80003a2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800039e:	f000 f9b1 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003a2:	46c0      	nop			; (mov r8, r8)
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	200000ac 	.word	0x200000ac
 80003ac:	40004400 	.word	0x40004400

080003b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003b0:	b590      	push	{r4, r7, lr}
 80003b2:	b08b      	sub	sp, #44	; 0x2c
 80003b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b6:	2414      	movs	r4, #20
 80003b8:	193b      	adds	r3, r7, r4
 80003ba:	0018      	movs	r0, r3
 80003bc:	2314      	movs	r3, #20
 80003be:	001a      	movs	r2, r3
 80003c0:	2100      	movs	r1, #0
 80003c2:	f004 fba2 	bl	8004b0a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003c6:	4b41      	ldr	r3, [pc, #260]	; (80004cc <MX_GPIO_Init+0x11c>)
 80003c8:	695a      	ldr	r2, [r3, #20]
 80003ca:	4b40      	ldr	r3, [pc, #256]	; (80004cc <MX_GPIO_Init+0x11c>)
 80003cc:	2180      	movs	r1, #128	; 0x80
 80003ce:	0309      	lsls	r1, r1, #12
 80003d0:	430a      	orrs	r2, r1
 80003d2:	615a      	str	r2, [r3, #20]
 80003d4:	4b3d      	ldr	r3, [pc, #244]	; (80004cc <MX_GPIO_Init+0x11c>)
 80003d6:	695a      	ldr	r2, [r3, #20]
 80003d8:	2380      	movs	r3, #128	; 0x80
 80003da:	031b      	lsls	r3, r3, #12
 80003dc:	4013      	ands	r3, r2
 80003de:	613b      	str	r3, [r7, #16]
 80003e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003e2:	4b3a      	ldr	r3, [pc, #232]	; (80004cc <MX_GPIO_Init+0x11c>)
 80003e4:	695a      	ldr	r2, [r3, #20]
 80003e6:	4b39      	ldr	r3, [pc, #228]	; (80004cc <MX_GPIO_Init+0x11c>)
 80003e8:	2180      	movs	r1, #128	; 0x80
 80003ea:	03c9      	lsls	r1, r1, #15
 80003ec:	430a      	orrs	r2, r1
 80003ee:	615a      	str	r2, [r3, #20]
 80003f0:	4b36      	ldr	r3, [pc, #216]	; (80004cc <MX_GPIO_Init+0x11c>)
 80003f2:	695a      	ldr	r2, [r3, #20]
 80003f4:	2380      	movs	r3, #128	; 0x80
 80003f6:	03db      	lsls	r3, r3, #15
 80003f8:	4013      	ands	r3, r2
 80003fa:	60fb      	str	r3, [r7, #12]
 80003fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003fe:	4b33      	ldr	r3, [pc, #204]	; (80004cc <MX_GPIO_Init+0x11c>)
 8000400:	695a      	ldr	r2, [r3, #20]
 8000402:	4b32      	ldr	r3, [pc, #200]	; (80004cc <MX_GPIO_Init+0x11c>)
 8000404:	2180      	movs	r1, #128	; 0x80
 8000406:	0289      	lsls	r1, r1, #10
 8000408:	430a      	orrs	r2, r1
 800040a:	615a      	str	r2, [r3, #20]
 800040c:	4b2f      	ldr	r3, [pc, #188]	; (80004cc <MX_GPIO_Init+0x11c>)
 800040e:	695a      	ldr	r2, [r3, #20]
 8000410:	2380      	movs	r3, #128	; 0x80
 8000412:	029b      	lsls	r3, r3, #10
 8000414:	4013      	ands	r3, r2
 8000416:	60bb      	str	r3, [r7, #8]
 8000418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800041a:	4b2c      	ldr	r3, [pc, #176]	; (80004cc <MX_GPIO_Init+0x11c>)
 800041c:	695a      	ldr	r2, [r3, #20]
 800041e:	4b2b      	ldr	r3, [pc, #172]	; (80004cc <MX_GPIO_Init+0x11c>)
 8000420:	2180      	movs	r1, #128	; 0x80
 8000422:	02c9      	lsls	r1, r1, #11
 8000424:	430a      	orrs	r2, r1
 8000426:	615a      	str	r2, [r3, #20]
 8000428:	4b28      	ldr	r3, [pc, #160]	; (80004cc <MX_GPIO_Init+0x11c>)
 800042a:	695a      	ldr	r2, [r3, #20]
 800042c:	2380      	movs	r3, #128	; 0x80
 800042e:	02db      	lsls	r3, r3, #11
 8000430:	4013      	ands	r3, r2
 8000432:	607b      	str	r3, [r7, #4]
 8000434:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 8000436:	2390      	movs	r3, #144	; 0x90
 8000438:	05db      	lsls	r3, r3, #23
 800043a:	2200      	movs	r2, #0
 800043c:	2120      	movs	r1, #32
 800043e:	0018      	movs	r0, r3
 8000440:	f000 fd0d 	bl	8000e5e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000444:	2387      	movs	r3, #135	; 0x87
 8000446:	00db      	lsls	r3, r3, #3
 8000448:	4821      	ldr	r0, [pc, #132]	; (80004d0 <MX_GPIO_Init+0x120>)
 800044a:	2200      	movs	r2, #0
 800044c:	0019      	movs	r1, r3
 800044e:	f000 fd06 	bl	8000e5e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000452:	193b      	adds	r3, r7, r4
 8000454:	2280      	movs	r2, #128	; 0x80
 8000456:	0192      	lsls	r2, r2, #6
 8000458:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800045a:	193b      	adds	r3, r7, r4
 800045c:	2284      	movs	r2, #132	; 0x84
 800045e:	0392      	lsls	r2, r2, #14
 8000460:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000462:	193b      	adds	r3, r7, r4
 8000464:	2200      	movs	r2, #0
 8000466:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000468:	193b      	adds	r3, r7, r4
 800046a:	4a1a      	ldr	r2, [pc, #104]	; (80004d4 <MX_GPIO_Init+0x124>)
 800046c:	0019      	movs	r1, r3
 800046e:	0010      	movs	r0, r2
 8000470:	f000 fb68 	bl	8000b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : Led_Pin */
  GPIO_InitStruct.Pin = Led_Pin;
 8000474:	193b      	adds	r3, r7, r4
 8000476:	2220      	movs	r2, #32
 8000478:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800047a:	193b      	adds	r3, r7, r4
 800047c:	2201      	movs	r2, #1
 800047e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000480:	193b      	adds	r3, r7, r4
 8000482:	2200      	movs	r2, #0
 8000484:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000486:	193b      	adds	r3, r7, r4
 8000488:	2200      	movs	r2, #0
 800048a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 800048c:	193a      	adds	r2, r7, r4
 800048e:	2390      	movs	r3, #144	; 0x90
 8000490:	05db      	lsls	r3, r3, #23
 8000492:	0011      	movs	r1, r2
 8000494:	0018      	movs	r0, r3
 8000496:	f000 fb55 	bl	8000b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800049a:	0021      	movs	r1, r4
 800049c:	187b      	adds	r3, r7, r1
 800049e:	2287      	movs	r2, #135	; 0x87
 80004a0:	00d2      	lsls	r2, r2, #3
 80004a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a4:	187b      	adds	r3, r7, r1
 80004a6:	2201      	movs	r2, #1
 80004a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004aa:	187b      	adds	r3, r7, r1
 80004ac:	2200      	movs	r2, #0
 80004ae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b0:	187b      	adds	r3, r7, r1
 80004b2:	2200      	movs	r2, #0
 80004b4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004b6:	187b      	adds	r3, r7, r1
 80004b8:	4a05      	ldr	r2, [pc, #20]	; (80004d0 <MX_GPIO_Init+0x120>)
 80004ba:	0019      	movs	r1, r3
 80004bc:	0010      	movs	r0, r2
 80004be:	f000 fb41 	bl	8000b44 <HAL_GPIO_Init>

}
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	46bd      	mov	sp, r7
 80004c6:	b00b      	add	sp, #44	; 0x2c
 80004c8:	bd90      	pop	{r4, r7, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	40021000 	.word	0x40021000
 80004d0:	48000400 	.word	0x48000400
 80004d4:	48000800 	.word	0x48000800

080004d8 <debounce>:

/* USER CODE BEGIN 4 */
static int debounce(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 80004d8:	b590      	push	{r4, r7, lr}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	000a      	movs	r2, r1
 80004e2:	1cbb      	adds	r3, r7, #2
 80004e4:	801a      	strh	r2, [r3, #0]
	static uint16_t rebote = 0;

	rebote = (rebote << 1) | HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) | 0xfe00;
 80004e6:	4b10      	ldr	r3, [pc, #64]	; (8000528 <debounce+0x50>)
 80004e8:	881b      	ldrh	r3, [r3, #0]
 80004ea:	005b      	lsls	r3, r3, #1
 80004ec:	b21c      	sxth	r4, r3
 80004ee:	1cbb      	adds	r3, r7, #2
 80004f0:	881a      	ldrh	r2, [r3, #0]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	0011      	movs	r1, r2
 80004f6:	0018      	movs	r0, r3
 80004f8:	f000 fc94 	bl	8000e24 <HAL_GPIO_ReadPin>
 80004fc:	0003      	movs	r3, r0
 80004fe:	b21b      	sxth	r3, r3
 8000500:	4323      	orrs	r3, r4
 8000502:	b21b      	sxth	r3, r3
 8000504:	4a09      	ldr	r2, [pc, #36]	; (800052c <debounce+0x54>)
 8000506:	4313      	orrs	r3, r2
 8000508:	b21b      	sxth	r3, r3
 800050a:	b29a      	uxth	r2, r3
 800050c:	4b06      	ldr	r3, [pc, #24]	; (8000528 <debounce+0x50>)
 800050e:	801a      	strh	r2, [r3, #0]
	return (rebote <= 0xfff0);
 8000510:	4b05      	ldr	r3, [pc, #20]	; (8000528 <debounce+0x50>)
 8000512:	881a      	ldrh	r2, [r3, #0]
 8000514:	4906      	ldr	r1, [pc, #24]	; (8000530 <debounce+0x58>)
 8000516:	2300      	movs	r3, #0
 8000518:	4291      	cmp	r1, r2
 800051a:	415b      	adcs	r3, r3
 800051c:	b2db      	uxtb	r3, r3
}
 800051e:	0018      	movs	r0, r3
 8000520:	46bd      	mov	sp, r7
 8000522:	b003      	add	sp, #12
 8000524:	bd90      	pop	{r4, r7, pc}
 8000526:	46c0      	nop			; (mov r8, r8)
 8000528:	20000142 	.word	0x20000142
 800052c:	fffffe00 	.word	0xfffffe00
 8000530:	0000fff0 	.word	0x0000fff0

08000534 <check_status>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_check_status */
void check_status(void *argument)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
	  if(debounce(GPIOC, GPIO_PIN_13))
 800053c:	2380      	movs	r3, #128	; 0x80
 800053e:	019b      	lsls	r3, r3, #6
 8000540:	4a26      	ldr	r2, [pc, #152]	; (80005dc <check_status+0xa8>)
 8000542:	0019      	movs	r1, r3
 8000544:	0010      	movs	r0, r2
 8000546:	f7ff ffc7 	bl	80004d8 <debounce>
 800054a:	1e03      	subs	r3, r0, #0
 800054c:	d02f      	beq.n	80005ae <check_status+0x7a>
	  {
		  while(debounce(GPIOC, GPIO_PIN_13))
 800054e:	e01a      	b.n	8000586 <check_status+0x52>
		  {
			  osThreadSuspend(StepperHandle);
 8000550:	4b23      	ldr	r3, [pc, #140]	; (80005e0 <check_status+0xac>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	0018      	movs	r0, r3
 8000556:	f002 f825 	bl	80025a4 <osThreadSuspend>
			  for(int i = 0; i < 4; i++)
 800055a:	2300      	movs	r3, #0
 800055c:	60fb      	str	r3, [r7, #12]
 800055e:	e00f      	b.n	8000580 <check_status+0x4c>
			  {
				  HAL_GPIO_WritePin(GPIOB, pines[i], matrix[4][i]);
 8000560:	4b20      	ldr	r3, [pc, #128]	; (80005e4 <check_status+0xb0>)
 8000562:	68fa      	ldr	r2, [r7, #12]
 8000564:	0052      	lsls	r2, r2, #1
 8000566:	5ad1      	ldrh	r1, [r2, r3]
 8000568:	4a1f      	ldr	r2, [pc, #124]	; (80005e8 <check_status+0xb4>)
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	18d3      	adds	r3, r2, r3
 800056e:	3310      	adds	r3, #16
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	481e      	ldr	r0, [pc, #120]	; (80005ec <check_status+0xb8>)
 8000574:	001a      	movs	r2, r3
 8000576:	f000 fc72 	bl	8000e5e <HAL_GPIO_WritePin>
			  for(int i = 0; i < 4; i++)
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	3301      	adds	r3, #1
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	2b03      	cmp	r3, #3
 8000584:	ddec      	ble.n	8000560 <check_status+0x2c>
		  while(debounce(GPIOC, GPIO_PIN_13))
 8000586:	2380      	movs	r3, #128	; 0x80
 8000588:	019b      	lsls	r3, r3, #6
 800058a:	4a14      	ldr	r2, [pc, #80]	; (80005dc <check_status+0xa8>)
 800058c:	0019      	movs	r1, r3
 800058e:	0010      	movs	r0, r2
 8000590:	f7ff ffa2 	bl	80004d8 <debounce>
 8000594:	1e03      	subs	r3, r0, #0
 8000596:	d1db      	bne.n	8000550 <check_status+0x1c>
			  }
		  }
		  if (giro_stepper == Horario)
 8000598:	4b15      	ldr	r3, [pc, #84]	; (80005f0 <check_status+0xbc>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b01      	cmp	r3, #1
 800059e:	d103      	bne.n	80005a8 <check_status+0x74>
		  {
			  giro_stepper = Antihorario;
 80005a0:	4b13      	ldr	r3, [pc, #76]	; (80005f0 <check_status+0xbc>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	701a      	strb	r2, [r3, #0]
 80005a6:	e002      	b.n	80005ae <check_status+0x7a>
		  }
		  else
		  {
			  giro_stepper = Horario;
 80005a8:	4b11      	ldr	r3, [pc, #68]	; (80005f0 <check_status+0xbc>)
 80005aa:	2201      	movs	r2, #1
 80005ac:	701a      	strb	r2, [r3, #0]

		  }
	  }

	  switch(giro_stepper)
 80005ae:	4b10      	ldr	r3, [pc, #64]	; (80005f0 <check_status+0xbc>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d007      	beq.n	80005c6 <check_status+0x92>
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d10b      	bne.n	80005d2 <check_status+0x9e>
//		  }
//		  break;
//	  }
	  case Horario:
	  {
		  osThreadResume(StepperHandle);
 80005ba:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <check_status+0xac>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	0018      	movs	r0, r3
 80005c0:	f002 f81e 	bl	8002600 <osThreadResume>
		  break;
 80005c4:	e006      	b.n	80005d4 <check_status+0xa0>
	  }
	  case Antihorario:
	  {
		  osThreadResume(StepperHandle);
 80005c6:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <check_status+0xac>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	0018      	movs	r0, r3
 80005cc:	f002 f818 	bl	8002600 <osThreadResume>
		  break;
 80005d0:	e000      	b.n	80005d4 <check_status+0xa0>
	  }
	  default:{
		  break;
 80005d2:	46c0      	nop			; (mov r8, r8)
	  }
	  }


    osDelay(20);
 80005d4:	2014      	movs	r0, #20
 80005d6:	f002 f841 	bl	800265c <osDelay>
	  if(debounce(GPIOC, GPIO_PIN_13))
 80005da:	e7af      	b.n	800053c <check_status+0x8>
 80005dc:	48000800 	.word	0x48000800
 80005e0:	20000134 	.word	0x20000134
 80005e4:	20000000 	.word	0x20000000
 80005e8:	20000008 	.word	0x20000008
 80005ec:	48000400 	.word	0x48000400
 80005f0:	20000140 	.word	0x20000140

080005f4 <stepper_run>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_stepper_run */
void stepper_run(void *argument)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b086      	sub	sp, #24
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN stepper_run */
	int ciclo = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]

  /* Infinite loop */
  for(;;)
  {
	  switch(giro_stepper)
 8000600:	4b28      	ldr	r3, [pc, #160]	; (80006a4 <stepper_run+0xb0>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d022      	beq.n	800064e <stepper_run+0x5a>
 8000608:	2b01      	cmp	r3, #1
 800060a:	d141      	bne.n	8000690 <stepper_run+0x9c>
	  {
	  case Horario:
	  {
		  for(int i = 0; i < 4; i++)
 800060c:	2300      	movs	r3, #0
 800060e:	613b      	str	r3, [r7, #16]
 8000610:	e011      	b.n	8000636 <stepper_run+0x42>
		  {
			  HAL_GPIO_WritePin(GPIOB, pines[i], matrix[ciclo][i]);
 8000612:	4b25      	ldr	r3, [pc, #148]	; (80006a8 <stepper_run+0xb4>)
 8000614:	693a      	ldr	r2, [r7, #16]
 8000616:	0052      	lsls	r2, r2, #1
 8000618:	5ad1      	ldrh	r1, [r2, r3]
 800061a:	4a24      	ldr	r2, [pc, #144]	; (80006ac <stepper_run+0xb8>)
 800061c:	697b      	ldr	r3, [r7, #20]
 800061e:	009b      	lsls	r3, r3, #2
 8000620:	18d2      	adds	r2, r2, r3
 8000622:	693b      	ldr	r3, [r7, #16]
 8000624:	18d3      	adds	r3, r2, r3
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	4821      	ldr	r0, [pc, #132]	; (80006b0 <stepper_run+0xbc>)
 800062a:	001a      	movs	r2, r3
 800062c:	f000 fc17 	bl	8000e5e <HAL_GPIO_WritePin>
		  for(int i = 0; i < 4; i++)
 8000630:	693b      	ldr	r3, [r7, #16]
 8000632:	3301      	adds	r3, #1
 8000634:	613b      	str	r3, [r7, #16]
 8000636:	693b      	ldr	r3, [r7, #16]
 8000638:	2b03      	cmp	r3, #3
 800063a:	ddea      	ble.n	8000612 <stepper_run+0x1e>
		  }
		  ciclo++;
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	3301      	adds	r3, #1
 8000640:	617b      	str	r3, [r7, #20]
		  if(ciclo > 3) ciclo = 0;
 8000642:	697b      	ldr	r3, [r7, #20]
 8000644:	2b03      	cmp	r3, #3
 8000646:	dd25      	ble.n	8000694 <stepper_run+0xa0>
 8000648:	2300      	movs	r3, #0
 800064a:	617b      	str	r3, [r7, #20]
		  break;
 800064c:	e022      	b.n	8000694 <stepper_run+0xa0>
	  }
	  case Antihorario:
	  {
		  for(int i = 0; i < 4; i++)
 800064e:	2300      	movs	r3, #0
 8000650:	60fb      	str	r3, [r7, #12]
 8000652:	e011      	b.n	8000678 <stepper_run+0x84>
		  {
			  HAL_GPIO_WritePin(GPIOB, pines[i], matrix[ciclo][i]);
 8000654:	4b14      	ldr	r3, [pc, #80]	; (80006a8 <stepper_run+0xb4>)
 8000656:	68fa      	ldr	r2, [r7, #12]
 8000658:	0052      	lsls	r2, r2, #1
 800065a:	5ad1      	ldrh	r1, [r2, r3]
 800065c:	4a13      	ldr	r2, [pc, #76]	; (80006ac <stepper_run+0xb8>)
 800065e:	697b      	ldr	r3, [r7, #20]
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	18d2      	adds	r2, r2, r3
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	18d3      	adds	r3, r2, r3
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	4811      	ldr	r0, [pc, #68]	; (80006b0 <stepper_run+0xbc>)
 800066c:	001a      	movs	r2, r3
 800066e:	f000 fbf6 	bl	8000e5e <HAL_GPIO_WritePin>
		  for(int i = 0; i < 4; i++)
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	3301      	adds	r3, #1
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	2b03      	cmp	r3, #3
 800067c:	ddea      	ble.n	8000654 <stepper_run+0x60>
		  }
		  ciclo--;
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	3b01      	subs	r3, #1
 8000682:	617b      	str	r3, [r7, #20]
		  if(ciclo < 0) ciclo = 3;
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	2b00      	cmp	r3, #0
 8000688:	da06      	bge.n	8000698 <stepper_run+0xa4>
 800068a:	2303      	movs	r3, #3
 800068c:	617b      	str	r3, [r7, #20]
		  break;
 800068e:	e003      	b.n	8000698 <stepper_run+0xa4>
	  }
	  default:
	  {
		  break;
 8000690:	46c0      	nop			; (mov r8, r8)
 8000692:	e002      	b.n	800069a <stepper_run+0xa6>
		  break;
 8000694:	46c0      	nop			; (mov r8, r8)
 8000696:	e000      	b.n	800069a <stepper_run+0xa6>
		  break;
 8000698:	46c0      	nop			; (mov r8, r8)
	  }




    osDelay(2);
 800069a:	2002      	movs	r0, #2
 800069c:	f001 ffde 	bl	800265c <osDelay>
	  switch(giro_stepper)
 80006a0:	e7ae      	b.n	8000600 <stepper_run+0xc>
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	20000140 	.word	0x20000140
 80006a8:	20000000 	.word	0x20000000
 80006ac:	20000008 	.word	0x20000008
 80006b0:	48000400 	.word	0x48000400

080006b4 <blink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_blink */
void blink(void *argument)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN blink */
	/* Infinite loop */
	for(;;)
	{
		HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);
 80006bc:	2390      	movs	r3, #144	; 0x90
 80006be:	05db      	lsls	r3, r3, #23
 80006c0:	2120      	movs	r1, #32
 80006c2:	0018      	movs	r0, r3
 80006c4:	f000 fbe8 	bl	8000e98 <HAL_GPIO_TogglePin>
		osDelay(250);
 80006c8:	20fa      	movs	r0, #250	; 0xfa
 80006ca:	f001 ffc7 	bl	800265c <osDelay>
		HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);
 80006ce:	e7f5      	b.n	80006bc <blink+0x8>

080006d0 <serial_receive>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_serial_receive */
void serial_receive(void *argument)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN serial_receive */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006d8:	2001      	movs	r0, #1
 80006da:	f001 ffbf 	bl	800265c <osDelay>
 80006de:	e7fb      	b.n	80006d8 <serial_receive+0x8>

080006e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a04      	ldr	r2, [pc, #16]	; (8000700 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d101      	bne.n	80006f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006f2:	f000 f95d 	bl	80009b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006f6:	46c0      	nop			; (mov r8, r8)
 80006f8:	46bd      	mov	sp, r7
 80006fa:	b002      	add	sp, #8
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	40000400 	.word	0x40000400

08000704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000708:	b672      	cpsid	i
}
 800070a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800070c:	e7fe      	b.n	800070c <Error_Handler+0x8>
	...

08000710 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000716:	4b12      	ldr	r3, [pc, #72]	; (8000760 <HAL_MspInit+0x50>)
 8000718:	699a      	ldr	r2, [r3, #24]
 800071a:	4b11      	ldr	r3, [pc, #68]	; (8000760 <HAL_MspInit+0x50>)
 800071c:	2101      	movs	r1, #1
 800071e:	430a      	orrs	r2, r1
 8000720:	619a      	str	r2, [r3, #24]
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <HAL_MspInit+0x50>)
 8000724:	699b      	ldr	r3, [r3, #24]
 8000726:	2201      	movs	r2, #1
 8000728:	4013      	ands	r3, r2
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800072e:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <HAL_MspInit+0x50>)
 8000730:	69da      	ldr	r2, [r3, #28]
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <HAL_MspInit+0x50>)
 8000734:	2180      	movs	r1, #128	; 0x80
 8000736:	0549      	lsls	r1, r1, #21
 8000738:	430a      	orrs	r2, r1
 800073a:	61da      	str	r2, [r3, #28]
 800073c:	4b08      	ldr	r3, [pc, #32]	; (8000760 <HAL_MspInit+0x50>)
 800073e:	69da      	ldr	r2, [r3, #28]
 8000740:	2380      	movs	r3, #128	; 0x80
 8000742:	055b      	lsls	r3, r3, #21
 8000744:	4013      	ands	r3, r2
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800074a:	2302      	movs	r3, #2
 800074c:	425b      	negs	r3, r3
 800074e:	2200      	movs	r2, #0
 8000750:	2103      	movs	r1, #3
 8000752:	0018      	movs	r0, r3
 8000754:	f000 f9d0 	bl	8000af8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000758:	46c0      	nop			; (mov r8, r8)
 800075a:	46bd      	mov	sp, r7
 800075c:	b002      	add	sp, #8
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40021000 	.word	0x40021000

08000764 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000764:	b590      	push	{r4, r7, lr}
 8000766:	b08b      	sub	sp, #44	; 0x2c
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076c:	2414      	movs	r4, #20
 800076e:	193b      	adds	r3, r7, r4
 8000770:	0018      	movs	r0, r3
 8000772:	2314      	movs	r3, #20
 8000774:	001a      	movs	r2, r3
 8000776:	2100      	movs	r1, #0
 8000778:	f004 f9c7 	bl	8004b0a <memset>
  if(huart->Instance==USART2)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a1c      	ldr	r2, [pc, #112]	; (80007f4 <HAL_UART_MspInit+0x90>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d132      	bne.n	80007ec <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000786:	4b1c      	ldr	r3, [pc, #112]	; (80007f8 <HAL_UART_MspInit+0x94>)
 8000788:	69da      	ldr	r2, [r3, #28]
 800078a:	4b1b      	ldr	r3, [pc, #108]	; (80007f8 <HAL_UART_MspInit+0x94>)
 800078c:	2180      	movs	r1, #128	; 0x80
 800078e:	0289      	lsls	r1, r1, #10
 8000790:	430a      	orrs	r2, r1
 8000792:	61da      	str	r2, [r3, #28]
 8000794:	4b18      	ldr	r3, [pc, #96]	; (80007f8 <HAL_UART_MspInit+0x94>)
 8000796:	69da      	ldr	r2, [r3, #28]
 8000798:	2380      	movs	r3, #128	; 0x80
 800079a:	029b      	lsls	r3, r3, #10
 800079c:	4013      	ands	r3, r2
 800079e:	613b      	str	r3, [r7, #16]
 80007a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a2:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <HAL_UART_MspInit+0x94>)
 80007a4:	695a      	ldr	r2, [r3, #20]
 80007a6:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <HAL_UART_MspInit+0x94>)
 80007a8:	2180      	movs	r1, #128	; 0x80
 80007aa:	0289      	lsls	r1, r1, #10
 80007ac:	430a      	orrs	r2, r1
 80007ae:	615a      	str	r2, [r3, #20]
 80007b0:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <HAL_UART_MspInit+0x94>)
 80007b2:	695a      	ldr	r2, [r3, #20]
 80007b4:	2380      	movs	r3, #128	; 0x80
 80007b6:	029b      	lsls	r3, r3, #10
 80007b8:	4013      	ands	r3, r2
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007be:	0021      	movs	r1, r4
 80007c0:	187b      	adds	r3, r7, r1
 80007c2:	220c      	movs	r2, #12
 80007c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c6:	187b      	adds	r3, r7, r1
 80007c8:	2202      	movs	r2, #2
 80007ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	187b      	adds	r3, r7, r1
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007d2:	187b      	adds	r3, r7, r1
 80007d4:	2203      	movs	r2, #3
 80007d6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80007d8:	187b      	adds	r3, r7, r1
 80007da:	2201      	movs	r2, #1
 80007dc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007de:	187a      	adds	r2, r7, r1
 80007e0:	2390      	movs	r3, #144	; 0x90
 80007e2:	05db      	lsls	r3, r3, #23
 80007e4:	0011      	movs	r1, r2
 80007e6:	0018      	movs	r0, r3
 80007e8:	f000 f9ac 	bl	8000b44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007ec:	46c0      	nop			; (mov r8, r8)
 80007ee:	46bd      	mov	sp, r7
 80007f0:	b00b      	add	sp, #44	; 0x2c
 80007f2:	bd90      	pop	{r4, r7, pc}
 80007f4:	40004400 	.word	0x40004400
 80007f8:	40021000 	.word	0x40021000

080007fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007fc:	b5b0      	push	{r4, r5, r7, lr}
 80007fe:	b08c      	sub	sp, #48	; 0x30
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000804:	2300      	movs	r3, #0
 8000806:	627b      	str	r3, [r7, #36]	; 0x24

  uint32_t              uwPrescalerValue = 0U;
 8000808:	2300      	movs	r3, #0
 800080a:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 800080c:	4b37      	ldr	r3, [pc, #220]	; (80008ec <HAL_InitTick+0xf0>)
 800080e:	69da      	ldr	r2, [r3, #28]
 8000810:	4b36      	ldr	r3, [pc, #216]	; (80008ec <HAL_InitTick+0xf0>)
 8000812:	2102      	movs	r1, #2
 8000814:	430a      	orrs	r2, r1
 8000816:	61da      	str	r2, [r3, #28]
 8000818:	4b34      	ldr	r3, [pc, #208]	; (80008ec <HAL_InitTick+0xf0>)
 800081a:	69db      	ldr	r3, [r3, #28]
 800081c:	2202      	movs	r2, #2
 800081e:	4013      	ands	r3, r2
 8000820:	60bb      	str	r3, [r7, #8]
 8000822:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000824:	230c      	movs	r3, #12
 8000826:	18fa      	adds	r2, r7, r3
 8000828:	2410      	movs	r4, #16
 800082a:	193b      	adds	r3, r7, r4
 800082c:	0011      	movs	r1, r2
 800082e:	0018      	movs	r0, r3
 8000830:	f000 ffc0 	bl	80017b4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000834:	193b      	adds	r3, r7, r4
 8000836:	68db      	ldr	r3, [r3, #12]
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800083a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800083c:	2b00      	cmp	r3, #0
 800083e:	d104      	bne.n	800084a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000840:	f000 ffa2 	bl	8001788 <HAL_RCC_GetPCLK1Freq>
 8000844:	0003      	movs	r3, r0
 8000846:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000848:	e004      	b.n	8000854 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800084a:	f000 ff9d 	bl	8001788 <HAL_RCC_GetPCLK1Freq>
 800084e:	0003      	movs	r3, r0
 8000850:	005b      	lsls	r3, r3, #1
 8000852:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000856:	4926      	ldr	r1, [pc, #152]	; (80008f0 <HAL_InitTick+0xf4>)
 8000858:	0018      	movs	r0, r3
 800085a:	f7ff fc55 	bl	8000108 <__udivsi3>
 800085e:	0003      	movs	r3, r0
 8000860:	3b01      	subs	r3, #1
 8000862:	623b      	str	r3, [r7, #32]

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000864:	4b23      	ldr	r3, [pc, #140]	; (80008f4 <HAL_InitTick+0xf8>)
 8000866:	4a24      	ldr	r2, [pc, #144]	; (80008f8 <HAL_InitTick+0xfc>)
 8000868:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 800086a:	4b22      	ldr	r3, [pc, #136]	; (80008f4 <HAL_InitTick+0xf8>)
 800086c:	4a23      	ldr	r2, [pc, #140]	; (80008fc <HAL_InitTick+0x100>)
 800086e:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000870:	4b20      	ldr	r3, [pc, #128]	; (80008f4 <HAL_InitTick+0xf8>)
 8000872:	6a3a      	ldr	r2, [r7, #32]
 8000874:	605a      	str	r2, [r3, #4]
  htim3.Init.ClockDivision = 0;
 8000876:	4b1f      	ldr	r3, [pc, #124]	; (80008f4 <HAL_InitTick+0xf8>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800087c:	4b1d      	ldr	r3, [pc, #116]	; (80008f4 <HAL_InitTick+0xf8>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000882:	4b1c      	ldr	r3, [pc, #112]	; (80008f4 <HAL_InitTick+0xf8>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8000888:	252b      	movs	r5, #43	; 0x2b
 800088a:	197c      	adds	r4, r7, r5
 800088c:	4b19      	ldr	r3, [pc, #100]	; (80008f4 <HAL_InitTick+0xf8>)
 800088e:	0018      	movs	r0, r3
 8000890:	f000 ffba 	bl	8001808 <HAL_TIM_Base_Init>
 8000894:	0003      	movs	r3, r0
 8000896:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8000898:	197b      	adds	r3, r7, r5
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d11e      	bne.n	80008de <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 80008a0:	197c      	adds	r4, r7, r5
 80008a2:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <HAL_InitTick+0xf8>)
 80008a4:	0018      	movs	r0, r3
 80008a6:	f001 f807 	bl	80018b8 <HAL_TIM_Base_Start_IT>
 80008aa:	0003      	movs	r3, r0
 80008ac:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 80008ae:	197b      	adds	r3, r7, r5
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d113      	bne.n	80008de <HAL_InitTick+0xe2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80008b6:	2010      	movs	r0, #16
 80008b8:	f000 f933 	bl	8000b22 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2b03      	cmp	r3, #3
 80008c0:	d809      	bhi.n	80008d6 <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	2200      	movs	r2, #0
 80008c6:	0019      	movs	r1, r3
 80008c8:	2010      	movs	r0, #16
 80008ca:	f000 f915 	bl	8000af8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008ce:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <HAL_InitTick+0x104>)
 80008d0:	687a      	ldr	r2, [r7, #4]
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	e003      	b.n	80008de <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 80008d6:	232b      	movs	r3, #43	; 0x2b
 80008d8:	18fb      	adds	r3, r7, r3
 80008da:	2201      	movs	r2, #1
 80008dc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 80008de:	232b      	movs	r3, #43	; 0x2b
 80008e0:	18fb      	adds	r3, r7, r3
 80008e2:	781b      	ldrb	r3, [r3, #0]
}
 80008e4:	0018      	movs	r0, r3
 80008e6:	46bd      	mov	sp, r7
 80008e8:	b00c      	add	sp, #48	; 0x30
 80008ea:	bdb0      	pop	{r4, r5, r7, pc}
 80008ec:	40021000 	.word	0x40021000
 80008f0:	000f4240 	.word	0x000f4240
 80008f4:	20000144 	.word	0x20000144
 80008f8:	40000400 	.word	0x40000400
 80008fc:	000003e7 	.word	0x000003e7
 8000900:	20000020 	.word	0x20000020

08000904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000908:	e7fe      	b.n	8000908 <NMI_Handler+0x4>

0800090a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800090a:	b580      	push	{r7, lr}
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800090e:	e7fe      	b.n	800090e <HardFault_Handler+0x4>

08000910 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000914:	4b03      	ldr	r3, [pc, #12]	; (8000924 <TIM3_IRQHandler+0x14>)
 8000916:	0018      	movs	r0, r3
 8000918:	f001 f81a 	bl	8001950 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800091c:	46c0      	nop			; (mov r8, r8)
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	20000144 	.word	0x20000144

08000928 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800092c:	46c0      	nop			; (mov r8, r8)
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000934:	480d      	ldr	r0, [pc, #52]	; (800096c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000936:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000938:	480d      	ldr	r0, [pc, #52]	; (8000970 <LoopForever+0x6>)
  ldr r1, =_edata
 800093a:	490e      	ldr	r1, [pc, #56]	; (8000974 <LoopForever+0xa>)
  ldr r2, =_sidata
 800093c:	4a0e      	ldr	r2, [pc, #56]	; (8000978 <LoopForever+0xe>)
  movs r3, #0
 800093e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000940:	e002      	b.n	8000948 <LoopCopyDataInit>

08000942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000946:	3304      	adds	r3, #4

08000948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800094a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800094c:	d3f9      	bcc.n	8000942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800094e:	4a0b      	ldr	r2, [pc, #44]	; (800097c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000950:	4c0b      	ldr	r4, [pc, #44]	; (8000980 <LoopForever+0x16>)
  movs r3, #0
 8000952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000954:	e001      	b.n	800095a <LoopFillZerobss>

08000956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000958:	3204      	adds	r2, #4

0800095a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800095a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800095c:	d3fb      	bcc.n	8000956 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800095e:	f7ff ffe3 	bl	8000928 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000962:	f004 f8a3 	bl	8004aac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000966:	f7ff fc5b 	bl	8000220 <main>

0800096a <LoopForever>:

LoopForever:
    b LoopForever
 800096a:	e7fe      	b.n	800096a <LoopForever>
  ldr   r0, =_estack
 800096c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000974:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000978:	08004e58 	.word	0x08004e58
  ldr r2, =_sbss
 800097c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000980:	20001b98 	.word	0x20001b98

08000984 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000984:	e7fe      	b.n	8000984 <ADC1_IRQHandler>
	...

08000988 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800098c:	4b07      	ldr	r3, [pc, #28]	; (80009ac <HAL_Init+0x24>)
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <HAL_Init+0x24>)
 8000992:	2110      	movs	r1, #16
 8000994:	430a      	orrs	r2, r1
 8000996:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000998:	2003      	movs	r0, #3
 800099a:	f7ff ff2f 	bl	80007fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800099e:	f7ff feb7 	bl	8000710 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009a2:	2300      	movs	r3, #0
}
 80009a4:	0018      	movs	r0, r3
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	40022000 	.word	0x40022000

080009b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009b4:	4b05      	ldr	r3, [pc, #20]	; (80009cc <HAL_IncTick+0x1c>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	001a      	movs	r2, r3
 80009ba:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <HAL_IncTick+0x20>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	18d2      	adds	r2, r2, r3
 80009c0:	4b03      	ldr	r3, [pc, #12]	; (80009d0 <HAL_IncTick+0x20>)
 80009c2:	601a      	str	r2, [r3, #0]
}
 80009c4:	46c0      	nop			; (mov r8, r8)
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	46c0      	nop			; (mov r8, r8)
 80009cc:	20000024 	.word	0x20000024
 80009d0:	2000018c 	.word	0x2000018c

080009d4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  return uwTick;
 80009d8:	4b02      	ldr	r3, [pc, #8]	; (80009e4 <HAL_GetTick+0x10>)
 80009da:	681b      	ldr	r3, [r3, #0]
}
 80009dc:	0018      	movs	r0, r3
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	2000018c 	.word	0x2000018c

080009e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	0002      	movs	r2, r0
 80009f0:	1dfb      	adds	r3, r7, #7
 80009f2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009f4:	1dfb      	adds	r3, r7, #7
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	2b7f      	cmp	r3, #127	; 0x7f
 80009fa:	d809      	bhi.n	8000a10 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009fc:	1dfb      	adds	r3, r7, #7
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	001a      	movs	r2, r3
 8000a02:	231f      	movs	r3, #31
 8000a04:	401a      	ands	r2, r3
 8000a06:	4b04      	ldr	r3, [pc, #16]	; (8000a18 <__NVIC_EnableIRQ+0x30>)
 8000a08:	2101      	movs	r1, #1
 8000a0a:	4091      	lsls	r1, r2
 8000a0c:	000a      	movs	r2, r1
 8000a0e:	601a      	str	r2, [r3, #0]
  }
}
 8000a10:	46c0      	nop			; (mov r8, r8)
 8000a12:	46bd      	mov	sp, r7
 8000a14:	b002      	add	sp, #8
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	e000e100 	.word	0xe000e100

08000a1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a1c:	b590      	push	{r4, r7, lr}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	0002      	movs	r2, r0
 8000a24:	6039      	str	r1, [r7, #0]
 8000a26:	1dfb      	adds	r3, r7, #7
 8000a28:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a2a:	1dfb      	adds	r3, r7, #7
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	2b7f      	cmp	r3, #127	; 0x7f
 8000a30:	d828      	bhi.n	8000a84 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a32:	4a2f      	ldr	r2, [pc, #188]	; (8000af0 <__NVIC_SetPriority+0xd4>)
 8000a34:	1dfb      	adds	r3, r7, #7
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	b25b      	sxtb	r3, r3
 8000a3a:	089b      	lsrs	r3, r3, #2
 8000a3c:	33c0      	adds	r3, #192	; 0xc0
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	589b      	ldr	r3, [r3, r2]
 8000a42:	1dfa      	adds	r2, r7, #7
 8000a44:	7812      	ldrb	r2, [r2, #0]
 8000a46:	0011      	movs	r1, r2
 8000a48:	2203      	movs	r2, #3
 8000a4a:	400a      	ands	r2, r1
 8000a4c:	00d2      	lsls	r2, r2, #3
 8000a4e:	21ff      	movs	r1, #255	; 0xff
 8000a50:	4091      	lsls	r1, r2
 8000a52:	000a      	movs	r2, r1
 8000a54:	43d2      	mvns	r2, r2
 8000a56:	401a      	ands	r2, r3
 8000a58:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	019b      	lsls	r3, r3, #6
 8000a5e:	22ff      	movs	r2, #255	; 0xff
 8000a60:	401a      	ands	r2, r3
 8000a62:	1dfb      	adds	r3, r7, #7
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	0018      	movs	r0, r3
 8000a68:	2303      	movs	r3, #3
 8000a6a:	4003      	ands	r3, r0
 8000a6c:	00db      	lsls	r3, r3, #3
 8000a6e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a70:	481f      	ldr	r0, [pc, #124]	; (8000af0 <__NVIC_SetPriority+0xd4>)
 8000a72:	1dfb      	adds	r3, r7, #7
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	b25b      	sxtb	r3, r3
 8000a78:	089b      	lsrs	r3, r3, #2
 8000a7a:	430a      	orrs	r2, r1
 8000a7c:	33c0      	adds	r3, #192	; 0xc0
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a82:	e031      	b.n	8000ae8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a84:	4a1b      	ldr	r2, [pc, #108]	; (8000af4 <__NVIC_SetPriority+0xd8>)
 8000a86:	1dfb      	adds	r3, r7, #7
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	0019      	movs	r1, r3
 8000a8c:	230f      	movs	r3, #15
 8000a8e:	400b      	ands	r3, r1
 8000a90:	3b08      	subs	r3, #8
 8000a92:	089b      	lsrs	r3, r3, #2
 8000a94:	3306      	adds	r3, #6
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	18d3      	adds	r3, r2, r3
 8000a9a:	3304      	adds	r3, #4
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	1dfa      	adds	r2, r7, #7
 8000aa0:	7812      	ldrb	r2, [r2, #0]
 8000aa2:	0011      	movs	r1, r2
 8000aa4:	2203      	movs	r2, #3
 8000aa6:	400a      	ands	r2, r1
 8000aa8:	00d2      	lsls	r2, r2, #3
 8000aaa:	21ff      	movs	r1, #255	; 0xff
 8000aac:	4091      	lsls	r1, r2
 8000aae:	000a      	movs	r2, r1
 8000ab0:	43d2      	mvns	r2, r2
 8000ab2:	401a      	ands	r2, r3
 8000ab4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	019b      	lsls	r3, r3, #6
 8000aba:	22ff      	movs	r2, #255	; 0xff
 8000abc:	401a      	ands	r2, r3
 8000abe:	1dfb      	adds	r3, r7, #7
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	4003      	ands	r3, r0
 8000ac8:	00db      	lsls	r3, r3, #3
 8000aca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000acc:	4809      	ldr	r0, [pc, #36]	; (8000af4 <__NVIC_SetPriority+0xd8>)
 8000ace:	1dfb      	adds	r3, r7, #7
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	001c      	movs	r4, r3
 8000ad4:	230f      	movs	r3, #15
 8000ad6:	4023      	ands	r3, r4
 8000ad8:	3b08      	subs	r3, #8
 8000ada:	089b      	lsrs	r3, r3, #2
 8000adc:	430a      	orrs	r2, r1
 8000ade:	3306      	adds	r3, #6
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	18c3      	adds	r3, r0, r3
 8000ae4:	3304      	adds	r3, #4
 8000ae6:	601a      	str	r2, [r3, #0]
}
 8000ae8:	46c0      	nop			; (mov r8, r8)
 8000aea:	46bd      	mov	sp, r7
 8000aec:	b003      	add	sp, #12
 8000aee:	bd90      	pop	{r4, r7, pc}
 8000af0:	e000e100 	.word	0xe000e100
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60b9      	str	r1, [r7, #8]
 8000b00:	607a      	str	r2, [r7, #4]
 8000b02:	210f      	movs	r1, #15
 8000b04:	187b      	adds	r3, r7, r1
 8000b06:	1c02      	adds	r2, r0, #0
 8000b08:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b0a:	68ba      	ldr	r2, [r7, #8]
 8000b0c:	187b      	adds	r3, r7, r1
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	b25b      	sxtb	r3, r3
 8000b12:	0011      	movs	r1, r2
 8000b14:	0018      	movs	r0, r3
 8000b16:	f7ff ff81 	bl	8000a1c <__NVIC_SetPriority>
}
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	b004      	add	sp, #16
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b082      	sub	sp, #8
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	0002      	movs	r2, r0
 8000b2a:	1dfb      	adds	r3, r7, #7
 8000b2c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b2e:	1dfb      	adds	r3, r7, #7
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	b25b      	sxtb	r3, r3
 8000b34:	0018      	movs	r0, r3
 8000b36:	f7ff ff57 	bl	80009e8 <__NVIC_EnableIRQ>
}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	b002      	add	sp, #8
 8000b40:	bd80      	pop	{r7, pc}
	...

08000b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b52:	e14f      	b.n	8000df4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2101      	movs	r1, #1
 8000b5a:	697a      	ldr	r2, [r7, #20]
 8000b5c:	4091      	lsls	r1, r2
 8000b5e:	000a      	movs	r2, r1
 8000b60:	4013      	ands	r3, r2
 8000b62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d100      	bne.n	8000b6c <HAL_GPIO_Init+0x28>
 8000b6a:	e140      	b.n	8000dee <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	2203      	movs	r2, #3
 8000b72:	4013      	ands	r3, r2
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d005      	beq.n	8000b84 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	2203      	movs	r2, #3
 8000b7e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b80:	2b02      	cmp	r3, #2
 8000b82:	d130      	bne.n	8000be6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	689b      	ldr	r3, [r3, #8]
 8000b88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	2203      	movs	r2, #3
 8000b90:	409a      	lsls	r2, r3
 8000b92:	0013      	movs	r3, r2
 8000b94:	43da      	mvns	r2, r3
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	4013      	ands	r3, r2
 8000b9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	68da      	ldr	r2, [r3, #12]
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	409a      	lsls	r2, r3
 8000ba6:	0013      	movs	r3, r2
 8000ba8:	693a      	ldr	r2, [r7, #16]
 8000baa:	4313      	orrs	r3, r2
 8000bac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	693a      	ldr	r2, [r7, #16]
 8000bb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bba:	2201      	movs	r2, #1
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	409a      	lsls	r2, r3
 8000bc0:	0013      	movs	r3, r2
 8000bc2:	43da      	mvns	r2, r3
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	091b      	lsrs	r3, r3, #4
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	401a      	ands	r2, r3
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	409a      	lsls	r2, r3
 8000bd8:	0013      	movs	r3, r2
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	2203      	movs	r2, #3
 8000bec:	4013      	ands	r3, r2
 8000bee:	2b03      	cmp	r3, #3
 8000bf0:	d017      	beq.n	8000c22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	68db      	ldr	r3, [r3, #12]
 8000bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	2203      	movs	r2, #3
 8000bfe:	409a      	lsls	r2, r3
 8000c00:	0013      	movs	r3, r2
 8000c02:	43da      	mvns	r2, r3
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	4013      	ands	r3, r2
 8000c08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	689a      	ldr	r2, [r3, #8]
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	409a      	lsls	r2, r3
 8000c14:	0013      	movs	r3, r2
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	2203      	movs	r2, #3
 8000c28:	4013      	ands	r3, r2
 8000c2a:	2b02      	cmp	r3, #2
 8000c2c:	d123      	bne.n	8000c76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	08da      	lsrs	r2, r3, #3
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	3208      	adds	r2, #8
 8000c36:	0092      	lsls	r2, r2, #2
 8000c38:	58d3      	ldr	r3, [r2, r3]
 8000c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	2207      	movs	r2, #7
 8000c40:	4013      	ands	r3, r2
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	220f      	movs	r2, #15
 8000c46:	409a      	lsls	r2, r3
 8000c48:	0013      	movs	r3, r2
 8000c4a:	43da      	mvns	r2, r3
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	4013      	ands	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	691a      	ldr	r2, [r3, #16]
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	2107      	movs	r1, #7
 8000c5a:	400b      	ands	r3, r1
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	409a      	lsls	r2, r3
 8000c60:	0013      	movs	r3, r2
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	08da      	lsrs	r2, r3, #3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3208      	adds	r2, #8
 8000c70:	0092      	lsls	r2, r2, #2
 8000c72:	6939      	ldr	r1, [r7, #16]
 8000c74:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	2203      	movs	r2, #3
 8000c82:	409a      	lsls	r2, r3
 8000c84:	0013      	movs	r3, r2
 8000c86:	43da      	mvns	r2, r3
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	2203      	movs	r2, #3
 8000c94:	401a      	ands	r2, r3
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	409a      	lsls	r2, r3
 8000c9c:	0013      	movs	r3, r2
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685a      	ldr	r2, [r3, #4]
 8000cae:	23c0      	movs	r3, #192	; 0xc0
 8000cb0:	029b      	lsls	r3, r3, #10
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	d100      	bne.n	8000cb8 <HAL_GPIO_Init+0x174>
 8000cb6:	e09a      	b.n	8000dee <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb8:	4b54      	ldr	r3, [pc, #336]	; (8000e0c <HAL_GPIO_Init+0x2c8>)
 8000cba:	699a      	ldr	r2, [r3, #24]
 8000cbc:	4b53      	ldr	r3, [pc, #332]	; (8000e0c <HAL_GPIO_Init+0x2c8>)
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	430a      	orrs	r2, r1
 8000cc2:	619a      	str	r2, [r3, #24]
 8000cc4:	4b51      	ldr	r3, [pc, #324]	; (8000e0c <HAL_GPIO_Init+0x2c8>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	2201      	movs	r2, #1
 8000cca:	4013      	ands	r3, r2
 8000ccc:	60bb      	str	r3, [r7, #8]
 8000cce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000cd0:	4a4f      	ldr	r2, [pc, #316]	; (8000e10 <HAL_GPIO_Init+0x2cc>)
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	089b      	lsrs	r3, r3, #2
 8000cd6:	3302      	adds	r3, #2
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	589b      	ldr	r3, [r3, r2]
 8000cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	2203      	movs	r2, #3
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	220f      	movs	r2, #15
 8000ce8:	409a      	lsls	r2, r3
 8000cea:	0013      	movs	r3, r2
 8000cec:	43da      	mvns	r2, r3
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	2390      	movs	r3, #144	; 0x90
 8000cf8:	05db      	lsls	r3, r3, #23
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	d013      	beq.n	8000d26 <HAL_GPIO_Init+0x1e2>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4a44      	ldr	r2, [pc, #272]	; (8000e14 <HAL_GPIO_Init+0x2d0>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d00d      	beq.n	8000d22 <HAL_GPIO_Init+0x1de>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4a43      	ldr	r2, [pc, #268]	; (8000e18 <HAL_GPIO_Init+0x2d4>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d007      	beq.n	8000d1e <HAL_GPIO_Init+0x1da>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4a42      	ldr	r2, [pc, #264]	; (8000e1c <HAL_GPIO_Init+0x2d8>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d101      	bne.n	8000d1a <HAL_GPIO_Init+0x1d6>
 8000d16:	2303      	movs	r3, #3
 8000d18:	e006      	b.n	8000d28 <HAL_GPIO_Init+0x1e4>
 8000d1a:	2305      	movs	r3, #5
 8000d1c:	e004      	b.n	8000d28 <HAL_GPIO_Init+0x1e4>
 8000d1e:	2302      	movs	r3, #2
 8000d20:	e002      	b.n	8000d28 <HAL_GPIO_Init+0x1e4>
 8000d22:	2301      	movs	r3, #1
 8000d24:	e000      	b.n	8000d28 <HAL_GPIO_Init+0x1e4>
 8000d26:	2300      	movs	r3, #0
 8000d28:	697a      	ldr	r2, [r7, #20]
 8000d2a:	2103      	movs	r1, #3
 8000d2c:	400a      	ands	r2, r1
 8000d2e:	0092      	lsls	r2, r2, #2
 8000d30:	4093      	lsls	r3, r2
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d38:	4935      	ldr	r1, [pc, #212]	; (8000e10 <HAL_GPIO_Init+0x2cc>)
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	089b      	lsrs	r3, r3, #2
 8000d3e:	3302      	adds	r3, #2
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d46:	4b36      	ldr	r3, [pc, #216]	; (8000e20 <HAL_GPIO_Init+0x2dc>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	43da      	mvns	r2, r3
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	4013      	ands	r3, r2
 8000d54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685a      	ldr	r2, [r3, #4]
 8000d5a:	2380      	movs	r3, #128	; 0x80
 8000d5c:	025b      	lsls	r3, r3, #9
 8000d5e:	4013      	ands	r3, r2
 8000d60:	d003      	beq.n	8000d6a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d6a:	4b2d      	ldr	r3, [pc, #180]	; (8000e20 <HAL_GPIO_Init+0x2dc>)
 8000d6c:	693a      	ldr	r2, [r7, #16]
 8000d6e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000d70:	4b2b      	ldr	r3, [pc, #172]	; (8000e20 <HAL_GPIO_Init+0x2dc>)
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	43da      	mvns	r2, r3
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685a      	ldr	r2, [r3, #4]
 8000d84:	2380      	movs	r3, #128	; 0x80
 8000d86:	029b      	lsls	r3, r3, #10
 8000d88:	4013      	ands	r3, r2
 8000d8a:	d003      	beq.n	8000d94 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d94:	4b22      	ldr	r3, [pc, #136]	; (8000e20 <HAL_GPIO_Init+0x2dc>)
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d9a:	4b21      	ldr	r3, [pc, #132]	; (8000e20 <HAL_GPIO_Init+0x2dc>)
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	43da      	mvns	r2, r3
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	4013      	ands	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685a      	ldr	r2, [r3, #4]
 8000dae:	2380      	movs	r3, #128	; 0x80
 8000db0:	035b      	lsls	r3, r3, #13
 8000db2:	4013      	ands	r3, r2
 8000db4:	d003      	beq.n	8000dbe <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000dbe:	4b18      	ldr	r3, [pc, #96]	; (8000e20 <HAL_GPIO_Init+0x2dc>)
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000dc4:	4b16      	ldr	r3, [pc, #88]	; (8000e20 <HAL_GPIO_Init+0x2dc>)
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	43da      	mvns	r2, r3
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685a      	ldr	r2, [r3, #4]
 8000dd8:	2380      	movs	r3, #128	; 0x80
 8000dda:	039b      	lsls	r3, r3, #14
 8000ddc:	4013      	ands	r3, r2
 8000dde:	d003      	beq.n	8000de8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000de8:	4b0d      	ldr	r3, [pc, #52]	; (8000e20 <HAL_GPIO_Init+0x2dc>)
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	3301      	adds	r3, #1
 8000df2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	40da      	lsrs	r2, r3
 8000dfc:	1e13      	subs	r3, r2, #0
 8000dfe:	d000      	beq.n	8000e02 <HAL_GPIO_Init+0x2be>
 8000e00:	e6a8      	b.n	8000b54 <HAL_GPIO_Init+0x10>
  } 
}
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	46c0      	nop			; (mov r8, r8)
 8000e06:	46bd      	mov	sp, r7
 8000e08:	b006      	add	sp, #24
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	40010000 	.word	0x40010000
 8000e14:	48000400 	.word	0x48000400
 8000e18:	48000800 	.word	0x48000800
 8000e1c:	48000c00 	.word	0x48000c00
 8000e20:	40010400 	.word	0x40010400

08000e24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	000a      	movs	r2, r1
 8000e2e:	1cbb      	adds	r3, r7, #2
 8000e30:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	691b      	ldr	r3, [r3, #16]
 8000e36:	1cba      	adds	r2, r7, #2
 8000e38:	8812      	ldrh	r2, [r2, #0]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	d004      	beq.n	8000e48 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000e3e:	230f      	movs	r3, #15
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	2201      	movs	r2, #1
 8000e44:	701a      	strb	r2, [r3, #0]
 8000e46:	e003      	b.n	8000e50 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e48:	230f      	movs	r3, #15
 8000e4a:	18fb      	adds	r3, r7, r3
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000e50:	230f      	movs	r3, #15
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	781b      	ldrb	r3, [r3, #0]
  }
 8000e56:	0018      	movs	r0, r3
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	b004      	add	sp, #16
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b082      	sub	sp, #8
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
 8000e66:	0008      	movs	r0, r1
 8000e68:	0011      	movs	r1, r2
 8000e6a:	1cbb      	adds	r3, r7, #2
 8000e6c:	1c02      	adds	r2, r0, #0
 8000e6e:	801a      	strh	r2, [r3, #0]
 8000e70:	1c7b      	adds	r3, r7, #1
 8000e72:	1c0a      	adds	r2, r1, #0
 8000e74:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e76:	1c7b      	adds	r3, r7, #1
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d004      	beq.n	8000e88 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e7e:	1cbb      	adds	r3, r7, #2
 8000e80:	881a      	ldrh	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e86:	e003      	b.n	8000e90 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e88:	1cbb      	adds	r3, r7, #2
 8000e8a:	881a      	ldrh	r2, [r3, #0]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e90:	46c0      	nop			; (mov r8, r8)
 8000e92:	46bd      	mov	sp, r7
 8000e94:	b002      	add	sp, #8
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	000a      	movs	r2, r1
 8000ea2:	1cbb      	adds	r3, r7, #2
 8000ea4:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	695b      	ldr	r3, [r3, #20]
 8000eaa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000eac:	1cbb      	adds	r3, r7, #2
 8000eae:	881b      	ldrh	r3, [r3, #0]
 8000eb0:	68fa      	ldr	r2, [r7, #12]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	041a      	lsls	r2, r3, #16
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	1cb9      	adds	r1, r7, #2
 8000ebc:	8809      	ldrh	r1, [r1, #0]
 8000ebe:	400b      	ands	r3, r1
 8000ec0:	431a      	orrs	r2, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	619a      	str	r2, [r3, #24]
}
 8000ec6:	46c0      	nop			; (mov r8, r8)
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	b004      	add	sp, #16
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b088      	sub	sp, #32
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d101      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e305      	b.n	80014ee <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	4013      	ands	r3, r2
 8000eea:	d100      	bne.n	8000eee <HAL_RCC_OscConfig+0x1e>
 8000eec:	e08d      	b.n	800100a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000eee:	4bc5      	ldr	r3, [pc, #788]	; (8001204 <HAL_RCC_OscConfig+0x334>)
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	220c      	movs	r2, #12
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	2b04      	cmp	r3, #4
 8000ef8:	d00e      	beq.n	8000f18 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000efa:	4bc2      	ldr	r3, [pc, #776]	; (8001204 <HAL_RCC_OscConfig+0x334>)
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	220c      	movs	r2, #12
 8000f00:	4013      	ands	r3, r2
 8000f02:	2b08      	cmp	r3, #8
 8000f04:	d116      	bne.n	8000f34 <HAL_RCC_OscConfig+0x64>
 8000f06:	4bbf      	ldr	r3, [pc, #764]	; (8001204 <HAL_RCC_OscConfig+0x334>)
 8000f08:	685a      	ldr	r2, [r3, #4]
 8000f0a:	23c0      	movs	r3, #192	; 0xc0
 8000f0c:	025b      	lsls	r3, r3, #9
 8000f0e:	401a      	ands	r2, r3
 8000f10:	2380      	movs	r3, #128	; 0x80
 8000f12:	025b      	lsls	r3, r3, #9
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d10d      	bne.n	8000f34 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f18:	4bba      	ldr	r3, [pc, #744]	; (8001204 <HAL_RCC_OscConfig+0x334>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	2380      	movs	r3, #128	; 0x80
 8000f1e:	029b      	lsls	r3, r3, #10
 8000f20:	4013      	ands	r3, r2
 8000f22:	d100      	bne.n	8000f26 <HAL_RCC_OscConfig+0x56>
 8000f24:	e070      	b.n	8001008 <HAL_RCC_OscConfig+0x138>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d000      	beq.n	8000f30 <HAL_RCC_OscConfig+0x60>
 8000f2e:	e06b      	b.n	8001008 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	e2dc      	b.n	80014ee <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d107      	bne.n	8000f4c <HAL_RCC_OscConfig+0x7c>
 8000f3c:	4bb1      	ldr	r3, [pc, #708]	; (8001204 <HAL_RCC_OscConfig+0x334>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	4bb0      	ldr	r3, [pc, #704]	; (8001204 <HAL_RCC_OscConfig+0x334>)
 8000f42:	2180      	movs	r1, #128	; 0x80
 8000f44:	0249      	lsls	r1, r1, #9
 8000f46:	430a      	orrs	r2, r1
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	e02f      	b.n	8000fac <HAL_RCC_OscConfig+0xdc>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d10c      	bne.n	8000f6e <HAL_RCC_OscConfig+0x9e>
 8000f54:	4bab      	ldr	r3, [pc, #684]	; (8001204 <HAL_RCC_OscConfig+0x334>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	4baa      	ldr	r3, [pc, #680]	; (8001204 <HAL_RCC_OscConfig+0x334>)
 8000f5a:	49ab      	ldr	r1, [pc, #684]	; (8001208 <HAL_RCC_OscConfig+0x338>)
 8000f5c:	400a      	ands	r2, r1
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	4ba8      	ldr	r3, [pc, #672]	; (8001204 <HAL_RCC_OscConfig+0x334>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	4ba7      	ldr	r3, [pc, #668]	; (8001204 <HAL_RCC_OscConfig+0x334>)
 8000f66:	49a9      	ldr	r1, [pc, #676]	; (800120c <HAL_RCC_OscConfig+0x33c>)
 8000f68:	400a      	ands	r2, r1
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	e01e      	b.n	8000fac <HAL_RCC_OscConfig+0xdc>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	2b05      	cmp	r3, #5
 8000f74:	d10e      	bne.n	8000f94 <HAL_RCC_OscConfig+0xc4>
 8000f76:	4ba3      	ldr	r3, [pc, #652]	; (8001204 <HAL_RCC_OscConfig+0x334>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	4ba2      	ldr	r3, [pc, #648]	; (8001204 <HAL_RCC_OscConfig+0x334>)
 8000f7c:	2180      	movs	r1, #128	; 0x80
 8000f7e:	02c9      	lsls	r1, r1, #11
 8000f80:	430a      	orrs	r2, r1
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	4b9f      	ldr	r3, [pc, #636]	; (8001204 <HAL_RCC_OscConfig+0x334>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4b9e      	ldr	r3, [pc, #632]	; (8001204 <HAL_RCC_OscConfig+0x334>)
 8000f8a:	2180      	movs	r1, #128	; 0x80
 8000f8c:	0249      	lsls	r1, r1, #9
 8000f8e:	430a      	orrs	r2, r1
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	e00b      	b.n	8000fac <HAL_RCC_OscConfig+0xdc>
 8000f94:	4b9b      	ldr	r3, [pc, #620]	; (8001204 <HAL_RCC_OscConfig+0x334>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	4b9a      	ldr	r3, [pc, #616]	; (8001204 <HAL_RCC_OscConfig+0x334>)
 8000f9a:	499b      	ldr	r1, [pc, #620]	; (8001208 <HAL_RCC_OscConfig+0x338>)
 8000f9c:	400a      	ands	r2, r1
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	4b98      	ldr	r3, [pc, #608]	; (8001204 <HAL_RCC_OscConfig+0x334>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	4b97      	ldr	r3, [pc, #604]	; (8001204 <HAL_RCC_OscConfig+0x334>)
 8000fa6:	4999      	ldr	r1, [pc, #612]	; (800120c <HAL_RCC_OscConfig+0x33c>)
 8000fa8:	400a      	ands	r2, r1
 8000faa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d014      	beq.n	8000fde <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb4:	f7ff fd0e 	bl	80009d4 <HAL_GetTick>
 8000fb8:	0003      	movs	r3, r0
 8000fba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fbc:	e008      	b.n	8000fd0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fbe:	f7ff fd09 	bl	80009d4 <HAL_GetTick>
 8000fc2:	0002      	movs	r2, r0
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	2b64      	cmp	r3, #100	; 0x64
 8000fca:	d901      	bls.n	8000fd0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	e28e      	b.n	80014ee <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fd0:	4b8c      	ldr	r3, [pc, #560]	; (8001204 <HAL_RCC_OscConfig+0x334>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	2380      	movs	r3, #128	; 0x80
 8000fd6:	029b      	lsls	r3, r3, #10
 8000fd8:	4013      	ands	r3, r2
 8000fda:	d0f0      	beq.n	8000fbe <HAL_RCC_OscConfig+0xee>
 8000fdc:	e015      	b.n	800100a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fde:	f7ff fcf9 	bl	80009d4 <HAL_GetTick>
 8000fe2:	0003      	movs	r3, r0
 8000fe4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fe6:	e008      	b.n	8000ffa <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fe8:	f7ff fcf4 	bl	80009d4 <HAL_GetTick>
 8000fec:	0002      	movs	r2, r0
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	2b64      	cmp	r3, #100	; 0x64
 8000ff4:	d901      	bls.n	8000ffa <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	e279      	b.n	80014ee <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ffa:	4b82      	ldr	r3, [pc, #520]	; (8001204 <HAL_RCC_OscConfig+0x334>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	2380      	movs	r3, #128	; 0x80
 8001000:	029b      	lsls	r3, r3, #10
 8001002:	4013      	ands	r3, r2
 8001004:	d1f0      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x118>
 8001006:	e000      	b.n	800100a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001008:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2202      	movs	r2, #2
 8001010:	4013      	ands	r3, r2
 8001012:	d100      	bne.n	8001016 <HAL_RCC_OscConfig+0x146>
 8001014:	e06c      	b.n	80010f0 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001016:	4b7b      	ldr	r3, [pc, #492]	; (8001204 <HAL_RCC_OscConfig+0x334>)
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	220c      	movs	r2, #12
 800101c:	4013      	ands	r3, r2
 800101e:	d00e      	beq.n	800103e <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001020:	4b78      	ldr	r3, [pc, #480]	; (8001204 <HAL_RCC_OscConfig+0x334>)
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	220c      	movs	r2, #12
 8001026:	4013      	ands	r3, r2
 8001028:	2b08      	cmp	r3, #8
 800102a:	d11f      	bne.n	800106c <HAL_RCC_OscConfig+0x19c>
 800102c:	4b75      	ldr	r3, [pc, #468]	; (8001204 <HAL_RCC_OscConfig+0x334>)
 800102e:	685a      	ldr	r2, [r3, #4]
 8001030:	23c0      	movs	r3, #192	; 0xc0
 8001032:	025b      	lsls	r3, r3, #9
 8001034:	401a      	ands	r2, r3
 8001036:	2380      	movs	r3, #128	; 0x80
 8001038:	021b      	lsls	r3, r3, #8
 800103a:	429a      	cmp	r2, r3
 800103c:	d116      	bne.n	800106c <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800103e:	4b71      	ldr	r3, [pc, #452]	; (8001204 <HAL_RCC_OscConfig+0x334>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2202      	movs	r2, #2
 8001044:	4013      	ands	r3, r2
 8001046:	d005      	beq.n	8001054 <HAL_RCC_OscConfig+0x184>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d001      	beq.n	8001054 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	e24c      	b.n	80014ee <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001054:	4b6b      	ldr	r3, [pc, #428]	; (8001204 <HAL_RCC_OscConfig+0x334>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	22f8      	movs	r2, #248	; 0xf8
 800105a:	4393      	bics	r3, r2
 800105c:	0019      	movs	r1, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	691b      	ldr	r3, [r3, #16]
 8001062:	00da      	lsls	r2, r3, #3
 8001064:	4b67      	ldr	r3, [pc, #412]	; (8001204 <HAL_RCC_OscConfig+0x334>)
 8001066:	430a      	orrs	r2, r1
 8001068:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800106a:	e041      	b.n	80010f0 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d024      	beq.n	80010be <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001074:	4b63      	ldr	r3, [pc, #396]	; (8001204 <HAL_RCC_OscConfig+0x334>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	4b62      	ldr	r3, [pc, #392]	; (8001204 <HAL_RCC_OscConfig+0x334>)
 800107a:	2101      	movs	r1, #1
 800107c:	430a      	orrs	r2, r1
 800107e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001080:	f7ff fca8 	bl	80009d4 <HAL_GetTick>
 8001084:	0003      	movs	r3, r0
 8001086:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001088:	e008      	b.n	800109c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800108a:	f7ff fca3 	bl	80009d4 <HAL_GetTick>
 800108e:	0002      	movs	r2, r0
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	2b02      	cmp	r3, #2
 8001096:	d901      	bls.n	800109c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001098:	2303      	movs	r3, #3
 800109a:	e228      	b.n	80014ee <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800109c:	4b59      	ldr	r3, [pc, #356]	; (8001204 <HAL_RCC_OscConfig+0x334>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2202      	movs	r2, #2
 80010a2:	4013      	ands	r3, r2
 80010a4:	d0f1      	beq.n	800108a <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010a6:	4b57      	ldr	r3, [pc, #348]	; (8001204 <HAL_RCC_OscConfig+0x334>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	22f8      	movs	r2, #248	; 0xf8
 80010ac:	4393      	bics	r3, r2
 80010ae:	0019      	movs	r1, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	691b      	ldr	r3, [r3, #16]
 80010b4:	00da      	lsls	r2, r3, #3
 80010b6:	4b53      	ldr	r3, [pc, #332]	; (8001204 <HAL_RCC_OscConfig+0x334>)
 80010b8:	430a      	orrs	r2, r1
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	e018      	b.n	80010f0 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010be:	4b51      	ldr	r3, [pc, #324]	; (8001204 <HAL_RCC_OscConfig+0x334>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	4b50      	ldr	r3, [pc, #320]	; (8001204 <HAL_RCC_OscConfig+0x334>)
 80010c4:	2101      	movs	r1, #1
 80010c6:	438a      	bics	r2, r1
 80010c8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ca:	f7ff fc83 	bl	80009d4 <HAL_GetTick>
 80010ce:	0003      	movs	r3, r0
 80010d0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010d2:	e008      	b.n	80010e6 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010d4:	f7ff fc7e 	bl	80009d4 <HAL_GetTick>
 80010d8:	0002      	movs	r2, r0
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d901      	bls.n	80010e6 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 80010e2:	2303      	movs	r3, #3
 80010e4:	e203      	b.n	80014ee <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010e6:	4b47      	ldr	r3, [pc, #284]	; (8001204 <HAL_RCC_OscConfig+0x334>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2202      	movs	r2, #2
 80010ec:	4013      	ands	r3, r2
 80010ee:	d1f1      	bne.n	80010d4 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2208      	movs	r2, #8
 80010f6:	4013      	ands	r3, r2
 80010f8:	d036      	beq.n	8001168 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	69db      	ldr	r3, [r3, #28]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d019      	beq.n	8001136 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001102:	4b40      	ldr	r3, [pc, #256]	; (8001204 <HAL_RCC_OscConfig+0x334>)
 8001104:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001106:	4b3f      	ldr	r3, [pc, #252]	; (8001204 <HAL_RCC_OscConfig+0x334>)
 8001108:	2101      	movs	r1, #1
 800110a:	430a      	orrs	r2, r1
 800110c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800110e:	f7ff fc61 	bl	80009d4 <HAL_GetTick>
 8001112:	0003      	movs	r3, r0
 8001114:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001116:	e008      	b.n	800112a <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001118:	f7ff fc5c 	bl	80009d4 <HAL_GetTick>
 800111c:	0002      	movs	r2, r0
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b02      	cmp	r3, #2
 8001124:	d901      	bls.n	800112a <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8001126:	2303      	movs	r3, #3
 8001128:	e1e1      	b.n	80014ee <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800112a:	4b36      	ldr	r3, [pc, #216]	; (8001204 <HAL_RCC_OscConfig+0x334>)
 800112c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112e:	2202      	movs	r2, #2
 8001130:	4013      	ands	r3, r2
 8001132:	d0f1      	beq.n	8001118 <HAL_RCC_OscConfig+0x248>
 8001134:	e018      	b.n	8001168 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001136:	4b33      	ldr	r3, [pc, #204]	; (8001204 <HAL_RCC_OscConfig+0x334>)
 8001138:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800113a:	4b32      	ldr	r3, [pc, #200]	; (8001204 <HAL_RCC_OscConfig+0x334>)
 800113c:	2101      	movs	r1, #1
 800113e:	438a      	bics	r2, r1
 8001140:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001142:	f7ff fc47 	bl	80009d4 <HAL_GetTick>
 8001146:	0003      	movs	r3, r0
 8001148:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800114a:	e008      	b.n	800115e <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800114c:	f7ff fc42 	bl	80009d4 <HAL_GetTick>
 8001150:	0002      	movs	r2, r0
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	2b02      	cmp	r3, #2
 8001158:	d901      	bls.n	800115e <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 800115a:	2303      	movs	r3, #3
 800115c:	e1c7      	b.n	80014ee <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800115e:	4b29      	ldr	r3, [pc, #164]	; (8001204 <HAL_RCC_OscConfig+0x334>)
 8001160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001162:	2202      	movs	r2, #2
 8001164:	4013      	ands	r3, r2
 8001166:	d1f1      	bne.n	800114c <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2204      	movs	r2, #4
 800116e:	4013      	ands	r3, r2
 8001170:	d100      	bne.n	8001174 <HAL_RCC_OscConfig+0x2a4>
 8001172:	e0b5      	b.n	80012e0 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001174:	201f      	movs	r0, #31
 8001176:	183b      	adds	r3, r7, r0
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800117c:	4b21      	ldr	r3, [pc, #132]	; (8001204 <HAL_RCC_OscConfig+0x334>)
 800117e:	69da      	ldr	r2, [r3, #28]
 8001180:	2380      	movs	r3, #128	; 0x80
 8001182:	055b      	lsls	r3, r3, #21
 8001184:	4013      	ands	r3, r2
 8001186:	d110      	bne.n	80011aa <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001188:	4b1e      	ldr	r3, [pc, #120]	; (8001204 <HAL_RCC_OscConfig+0x334>)
 800118a:	69da      	ldr	r2, [r3, #28]
 800118c:	4b1d      	ldr	r3, [pc, #116]	; (8001204 <HAL_RCC_OscConfig+0x334>)
 800118e:	2180      	movs	r1, #128	; 0x80
 8001190:	0549      	lsls	r1, r1, #21
 8001192:	430a      	orrs	r2, r1
 8001194:	61da      	str	r2, [r3, #28]
 8001196:	4b1b      	ldr	r3, [pc, #108]	; (8001204 <HAL_RCC_OscConfig+0x334>)
 8001198:	69da      	ldr	r2, [r3, #28]
 800119a:	2380      	movs	r3, #128	; 0x80
 800119c:	055b      	lsls	r3, r3, #21
 800119e:	4013      	ands	r3, r2
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80011a4:	183b      	adds	r3, r7, r0
 80011a6:	2201      	movs	r2, #1
 80011a8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011aa:	4b19      	ldr	r3, [pc, #100]	; (8001210 <HAL_RCC_OscConfig+0x340>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	2380      	movs	r3, #128	; 0x80
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	4013      	ands	r3, r2
 80011b4:	d11a      	bne.n	80011ec <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011b6:	4b16      	ldr	r3, [pc, #88]	; (8001210 <HAL_RCC_OscConfig+0x340>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	4b15      	ldr	r3, [pc, #84]	; (8001210 <HAL_RCC_OscConfig+0x340>)
 80011bc:	2180      	movs	r1, #128	; 0x80
 80011be:	0049      	lsls	r1, r1, #1
 80011c0:	430a      	orrs	r2, r1
 80011c2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011c4:	f7ff fc06 	bl	80009d4 <HAL_GetTick>
 80011c8:	0003      	movs	r3, r0
 80011ca:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011cc:	e008      	b.n	80011e0 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011ce:	f7ff fc01 	bl	80009d4 <HAL_GetTick>
 80011d2:	0002      	movs	r2, r0
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	2b64      	cmp	r3, #100	; 0x64
 80011da:	d901      	bls.n	80011e0 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 80011dc:	2303      	movs	r3, #3
 80011de:	e186      	b.n	80014ee <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011e0:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <HAL_RCC_OscConfig+0x340>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	2380      	movs	r3, #128	; 0x80
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	4013      	ands	r3, r2
 80011ea:	d0f0      	beq.n	80011ce <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d10f      	bne.n	8001214 <HAL_RCC_OscConfig+0x344>
 80011f4:	4b03      	ldr	r3, [pc, #12]	; (8001204 <HAL_RCC_OscConfig+0x334>)
 80011f6:	6a1a      	ldr	r2, [r3, #32]
 80011f8:	4b02      	ldr	r3, [pc, #8]	; (8001204 <HAL_RCC_OscConfig+0x334>)
 80011fa:	2101      	movs	r1, #1
 80011fc:	430a      	orrs	r2, r1
 80011fe:	621a      	str	r2, [r3, #32]
 8001200:	e036      	b.n	8001270 <HAL_RCC_OscConfig+0x3a0>
 8001202:	46c0      	nop			; (mov r8, r8)
 8001204:	40021000 	.word	0x40021000
 8001208:	fffeffff 	.word	0xfffeffff
 800120c:	fffbffff 	.word	0xfffbffff
 8001210:	40007000 	.word	0x40007000
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d10c      	bne.n	8001236 <HAL_RCC_OscConfig+0x366>
 800121c:	4bb6      	ldr	r3, [pc, #728]	; (80014f8 <HAL_RCC_OscConfig+0x628>)
 800121e:	6a1a      	ldr	r2, [r3, #32]
 8001220:	4bb5      	ldr	r3, [pc, #724]	; (80014f8 <HAL_RCC_OscConfig+0x628>)
 8001222:	2101      	movs	r1, #1
 8001224:	438a      	bics	r2, r1
 8001226:	621a      	str	r2, [r3, #32]
 8001228:	4bb3      	ldr	r3, [pc, #716]	; (80014f8 <HAL_RCC_OscConfig+0x628>)
 800122a:	6a1a      	ldr	r2, [r3, #32]
 800122c:	4bb2      	ldr	r3, [pc, #712]	; (80014f8 <HAL_RCC_OscConfig+0x628>)
 800122e:	2104      	movs	r1, #4
 8001230:	438a      	bics	r2, r1
 8001232:	621a      	str	r2, [r3, #32]
 8001234:	e01c      	b.n	8001270 <HAL_RCC_OscConfig+0x3a0>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	2b05      	cmp	r3, #5
 800123c:	d10c      	bne.n	8001258 <HAL_RCC_OscConfig+0x388>
 800123e:	4bae      	ldr	r3, [pc, #696]	; (80014f8 <HAL_RCC_OscConfig+0x628>)
 8001240:	6a1a      	ldr	r2, [r3, #32]
 8001242:	4bad      	ldr	r3, [pc, #692]	; (80014f8 <HAL_RCC_OscConfig+0x628>)
 8001244:	2104      	movs	r1, #4
 8001246:	430a      	orrs	r2, r1
 8001248:	621a      	str	r2, [r3, #32]
 800124a:	4bab      	ldr	r3, [pc, #684]	; (80014f8 <HAL_RCC_OscConfig+0x628>)
 800124c:	6a1a      	ldr	r2, [r3, #32]
 800124e:	4baa      	ldr	r3, [pc, #680]	; (80014f8 <HAL_RCC_OscConfig+0x628>)
 8001250:	2101      	movs	r1, #1
 8001252:	430a      	orrs	r2, r1
 8001254:	621a      	str	r2, [r3, #32]
 8001256:	e00b      	b.n	8001270 <HAL_RCC_OscConfig+0x3a0>
 8001258:	4ba7      	ldr	r3, [pc, #668]	; (80014f8 <HAL_RCC_OscConfig+0x628>)
 800125a:	6a1a      	ldr	r2, [r3, #32]
 800125c:	4ba6      	ldr	r3, [pc, #664]	; (80014f8 <HAL_RCC_OscConfig+0x628>)
 800125e:	2101      	movs	r1, #1
 8001260:	438a      	bics	r2, r1
 8001262:	621a      	str	r2, [r3, #32]
 8001264:	4ba4      	ldr	r3, [pc, #656]	; (80014f8 <HAL_RCC_OscConfig+0x628>)
 8001266:	6a1a      	ldr	r2, [r3, #32]
 8001268:	4ba3      	ldr	r3, [pc, #652]	; (80014f8 <HAL_RCC_OscConfig+0x628>)
 800126a:	2104      	movs	r1, #4
 800126c:	438a      	bics	r2, r1
 800126e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d014      	beq.n	80012a2 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001278:	f7ff fbac 	bl	80009d4 <HAL_GetTick>
 800127c:	0003      	movs	r3, r0
 800127e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001280:	e009      	b.n	8001296 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001282:	f7ff fba7 	bl	80009d4 <HAL_GetTick>
 8001286:	0002      	movs	r2, r0
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	4a9b      	ldr	r2, [pc, #620]	; (80014fc <HAL_RCC_OscConfig+0x62c>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d901      	bls.n	8001296 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e12b      	b.n	80014ee <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001296:	4b98      	ldr	r3, [pc, #608]	; (80014f8 <HAL_RCC_OscConfig+0x628>)
 8001298:	6a1b      	ldr	r3, [r3, #32]
 800129a:	2202      	movs	r2, #2
 800129c:	4013      	ands	r3, r2
 800129e:	d0f0      	beq.n	8001282 <HAL_RCC_OscConfig+0x3b2>
 80012a0:	e013      	b.n	80012ca <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012a2:	f7ff fb97 	bl	80009d4 <HAL_GetTick>
 80012a6:	0003      	movs	r3, r0
 80012a8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012aa:	e009      	b.n	80012c0 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012ac:	f7ff fb92 	bl	80009d4 <HAL_GetTick>
 80012b0:	0002      	movs	r2, r0
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	4a91      	ldr	r2, [pc, #580]	; (80014fc <HAL_RCC_OscConfig+0x62c>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d901      	bls.n	80012c0 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 80012bc:	2303      	movs	r3, #3
 80012be:	e116      	b.n	80014ee <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012c0:	4b8d      	ldr	r3, [pc, #564]	; (80014f8 <HAL_RCC_OscConfig+0x628>)
 80012c2:	6a1b      	ldr	r3, [r3, #32]
 80012c4:	2202      	movs	r2, #2
 80012c6:	4013      	ands	r3, r2
 80012c8:	d1f0      	bne.n	80012ac <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80012ca:	231f      	movs	r3, #31
 80012cc:	18fb      	adds	r3, r7, r3
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d105      	bne.n	80012e0 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012d4:	4b88      	ldr	r3, [pc, #544]	; (80014f8 <HAL_RCC_OscConfig+0x628>)
 80012d6:	69da      	ldr	r2, [r3, #28]
 80012d8:	4b87      	ldr	r3, [pc, #540]	; (80014f8 <HAL_RCC_OscConfig+0x628>)
 80012da:	4989      	ldr	r1, [pc, #548]	; (8001500 <HAL_RCC_OscConfig+0x630>)
 80012dc:	400a      	ands	r2, r1
 80012de:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2210      	movs	r2, #16
 80012e6:	4013      	ands	r3, r2
 80012e8:	d063      	beq.n	80013b2 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d12a      	bne.n	8001348 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80012f2:	4b81      	ldr	r3, [pc, #516]	; (80014f8 <HAL_RCC_OscConfig+0x628>)
 80012f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012f6:	4b80      	ldr	r3, [pc, #512]	; (80014f8 <HAL_RCC_OscConfig+0x628>)
 80012f8:	2104      	movs	r1, #4
 80012fa:	430a      	orrs	r2, r1
 80012fc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80012fe:	4b7e      	ldr	r3, [pc, #504]	; (80014f8 <HAL_RCC_OscConfig+0x628>)
 8001300:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001302:	4b7d      	ldr	r3, [pc, #500]	; (80014f8 <HAL_RCC_OscConfig+0x628>)
 8001304:	2101      	movs	r1, #1
 8001306:	430a      	orrs	r2, r1
 8001308:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800130a:	f7ff fb63 	bl	80009d4 <HAL_GetTick>
 800130e:	0003      	movs	r3, r0
 8001310:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001312:	e008      	b.n	8001326 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001314:	f7ff fb5e 	bl	80009d4 <HAL_GetTick>
 8001318:	0002      	movs	r2, r0
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b02      	cmp	r3, #2
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e0e3      	b.n	80014ee <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001326:	4b74      	ldr	r3, [pc, #464]	; (80014f8 <HAL_RCC_OscConfig+0x628>)
 8001328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800132a:	2202      	movs	r2, #2
 800132c:	4013      	ands	r3, r2
 800132e:	d0f1      	beq.n	8001314 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001330:	4b71      	ldr	r3, [pc, #452]	; (80014f8 <HAL_RCC_OscConfig+0x628>)
 8001332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001334:	22f8      	movs	r2, #248	; 0xf8
 8001336:	4393      	bics	r3, r2
 8001338:	0019      	movs	r1, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	00da      	lsls	r2, r3, #3
 8001340:	4b6d      	ldr	r3, [pc, #436]	; (80014f8 <HAL_RCC_OscConfig+0x628>)
 8001342:	430a      	orrs	r2, r1
 8001344:	635a      	str	r2, [r3, #52]	; 0x34
 8001346:	e034      	b.n	80013b2 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	695b      	ldr	r3, [r3, #20]
 800134c:	3305      	adds	r3, #5
 800134e:	d111      	bne.n	8001374 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001350:	4b69      	ldr	r3, [pc, #420]	; (80014f8 <HAL_RCC_OscConfig+0x628>)
 8001352:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001354:	4b68      	ldr	r3, [pc, #416]	; (80014f8 <HAL_RCC_OscConfig+0x628>)
 8001356:	2104      	movs	r1, #4
 8001358:	438a      	bics	r2, r1
 800135a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800135c:	4b66      	ldr	r3, [pc, #408]	; (80014f8 <HAL_RCC_OscConfig+0x628>)
 800135e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001360:	22f8      	movs	r2, #248	; 0xf8
 8001362:	4393      	bics	r3, r2
 8001364:	0019      	movs	r1, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	00da      	lsls	r2, r3, #3
 800136c:	4b62      	ldr	r3, [pc, #392]	; (80014f8 <HAL_RCC_OscConfig+0x628>)
 800136e:	430a      	orrs	r2, r1
 8001370:	635a      	str	r2, [r3, #52]	; 0x34
 8001372:	e01e      	b.n	80013b2 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001374:	4b60      	ldr	r3, [pc, #384]	; (80014f8 <HAL_RCC_OscConfig+0x628>)
 8001376:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001378:	4b5f      	ldr	r3, [pc, #380]	; (80014f8 <HAL_RCC_OscConfig+0x628>)
 800137a:	2104      	movs	r1, #4
 800137c:	430a      	orrs	r2, r1
 800137e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001380:	4b5d      	ldr	r3, [pc, #372]	; (80014f8 <HAL_RCC_OscConfig+0x628>)
 8001382:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001384:	4b5c      	ldr	r3, [pc, #368]	; (80014f8 <HAL_RCC_OscConfig+0x628>)
 8001386:	2101      	movs	r1, #1
 8001388:	438a      	bics	r2, r1
 800138a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800138c:	f7ff fb22 	bl	80009d4 <HAL_GetTick>
 8001390:	0003      	movs	r3, r0
 8001392:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001394:	e008      	b.n	80013a8 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001396:	f7ff fb1d 	bl	80009d4 <HAL_GetTick>
 800139a:	0002      	movs	r2, r0
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e0a2      	b.n	80014ee <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80013a8:	4b53      	ldr	r3, [pc, #332]	; (80014f8 <HAL_RCC_OscConfig+0x628>)
 80013aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013ac:	2202      	movs	r2, #2
 80013ae:	4013      	ands	r3, r2
 80013b0:	d1f1      	bne.n	8001396 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6a1b      	ldr	r3, [r3, #32]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d100      	bne.n	80013bc <HAL_RCC_OscConfig+0x4ec>
 80013ba:	e097      	b.n	80014ec <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013bc:	4b4e      	ldr	r3, [pc, #312]	; (80014f8 <HAL_RCC_OscConfig+0x628>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	220c      	movs	r2, #12
 80013c2:	4013      	ands	r3, r2
 80013c4:	2b08      	cmp	r3, #8
 80013c6:	d100      	bne.n	80013ca <HAL_RCC_OscConfig+0x4fa>
 80013c8:	e06b      	b.n	80014a2 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a1b      	ldr	r3, [r3, #32]
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d14c      	bne.n	800146c <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013d2:	4b49      	ldr	r3, [pc, #292]	; (80014f8 <HAL_RCC_OscConfig+0x628>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	4b48      	ldr	r3, [pc, #288]	; (80014f8 <HAL_RCC_OscConfig+0x628>)
 80013d8:	494a      	ldr	r1, [pc, #296]	; (8001504 <HAL_RCC_OscConfig+0x634>)
 80013da:	400a      	ands	r2, r1
 80013dc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013de:	f7ff faf9 	bl	80009d4 <HAL_GetTick>
 80013e2:	0003      	movs	r3, r0
 80013e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013e8:	f7ff faf4 	bl	80009d4 <HAL_GetTick>
 80013ec:	0002      	movs	r2, r0
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e079      	b.n	80014ee <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013fa:	4b3f      	ldr	r3, [pc, #252]	; (80014f8 <HAL_RCC_OscConfig+0x628>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	2380      	movs	r3, #128	; 0x80
 8001400:	049b      	lsls	r3, r3, #18
 8001402:	4013      	ands	r3, r2
 8001404:	d1f0      	bne.n	80013e8 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001406:	4b3c      	ldr	r3, [pc, #240]	; (80014f8 <HAL_RCC_OscConfig+0x628>)
 8001408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140a:	220f      	movs	r2, #15
 800140c:	4393      	bics	r3, r2
 800140e:	0019      	movs	r1, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001414:	4b38      	ldr	r3, [pc, #224]	; (80014f8 <HAL_RCC_OscConfig+0x628>)
 8001416:	430a      	orrs	r2, r1
 8001418:	62da      	str	r2, [r3, #44]	; 0x2c
 800141a:	4b37      	ldr	r3, [pc, #220]	; (80014f8 <HAL_RCC_OscConfig+0x628>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	4a3a      	ldr	r2, [pc, #232]	; (8001508 <HAL_RCC_OscConfig+0x638>)
 8001420:	4013      	ands	r3, r2
 8001422:	0019      	movs	r1, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142c:	431a      	orrs	r2, r3
 800142e:	4b32      	ldr	r3, [pc, #200]	; (80014f8 <HAL_RCC_OscConfig+0x628>)
 8001430:	430a      	orrs	r2, r1
 8001432:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001434:	4b30      	ldr	r3, [pc, #192]	; (80014f8 <HAL_RCC_OscConfig+0x628>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	4b2f      	ldr	r3, [pc, #188]	; (80014f8 <HAL_RCC_OscConfig+0x628>)
 800143a:	2180      	movs	r1, #128	; 0x80
 800143c:	0449      	lsls	r1, r1, #17
 800143e:	430a      	orrs	r2, r1
 8001440:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001442:	f7ff fac7 	bl	80009d4 <HAL_GetTick>
 8001446:	0003      	movs	r3, r0
 8001448:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800144c:	f7ff fac2 	bl	80009d4 <HAL_GetTick>
 8001450:	0002      	movs	r2, r0
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e047      	b.n	80014ee <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800145e:	4b26      	ldr	r3, [pc, #152]	; (80014f8 <HAL_RCC_OscConfig+0x628>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	2380      	movs	r3, #128	; 0x80
 8001464:	049b      	lsls	r3, r3, #18
 8001466:	4013      	ands	r3, r2
 8001468:	d0f0      	beq.n	800144c <HAL_RCC_OscConfig+0x57c>
 800146a:	e03f      	b.n	80014ec <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800146c:	4b22      	ldr	r3, [pc, #136]	; (80014f8 <HAL_RCC_OscConfig+0x628>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	4b21      	ldr	r3, [pc, #132]	; (80014f8 <HAL_RCC_OscConfig+0x628>)
 8001472:	4924      	ldr	r1, [pc, #144]	; (8001504 <HAL_RCC_OscConfig+0x634>)
 8001474:	400a      	ands	r2, r1
 8001476:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001478:	f7ff faac 	bl	80009d4 <HAL_GetTick>
 800147c:	0003      	movs	r3, r0
 800147e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001480:	e008      	b.n	8001494 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001482:	f7ff faa7 	bl	80009d4 <HAL_GetTick>
 8001486:	0002      	movs	r2, r0
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e02c      	b.n	80014ee <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001494:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <HAL_RCC_OscConfig+0x628>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	2380      	movs	r3, #128	; 0x80
 800149a:	049b      	lsls	r3, r3, #18
 800149c:	4013      	ands	r3, r2
 800149e:	d1f0      	bne.n	8001482 <HAL_RCC_OscConfig+0x5b2>
 80014a0:	e024      	b.n	80014ec <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a1b      	ldr	r3, [r3, #32]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d101      	bne.n	80014ae <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e01f      	b.n	80014ee <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80014ae:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <HAL_RCC_OscConfig+0x628>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80014b4:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <HAL_RCC_OscConfig+0x628>)
 80014b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ba:	697a      	ldr	r2, [r7, #20]
 80014bc:	23c0      	movs	r3, #192	; 0xc0
 80014be:	025b      	lsls	r3, r3, #9
 80014c0:	401a      	ands	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d10e      	bne.n	80014e8 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	220f      	movs	r2, #15
 80014ce:	401a      	ands	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d107      	bne.n	80014e8 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80014d8:	697a      	ldr	r2, [r7, #20]
 80014da:	23f0      	movs	r3, #240	; 0xf0
 80014dc:	039b      	lsls	r3, r3, #14
 80014de:	401a      	ands	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d001      	beq.n	80014ec <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e000      	b.n	80014ee <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	0018      	movs	r0, r3
 80014f0:	46bd      	mov	sp, r7
 80014f2:	b008      	add	sp, #32
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	40021000 	.word	0x40021000
 80014fc:	00001388 	.word	0x00001388
 8001500:	efffffff 	.word	0xefffffff
 8001504:	feffffff 	.word	0xfeffffff
 8001508:	ffc27fff 	.word	0xffc27fff

0800150c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d101      	bne.n	8001520 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e0b3      	b.n	8001688 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001520:	4b5b      	ldr	r3, [pc, #364]	; (8001690 <HAL_RCC_ClockConfig+0x184>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2201      	movs	r2, #1
 8001526:	4013      	ands	r3, r2
 8001528:	683a      	ldr	r2, [r7, #0]
 800152a:	429a      	cmp	r2, r3
 800152c:	d911      	bls.n	8001552 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800152e:	4b58      	ldr	r3, [pc, #352]	; (8001690 <HAL_RCC_ClockConfig+0x184>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2201      	movs	r2, #1
 8001534:	4393      	bics	r3, r2
 8001536:	0019      	movs	r1, r3
 8001538:	4b55      	ldr	r3, [pc, #340]	; (8001690 <HAL_RCC_ClockConfig+0x184>)
 800153a:	683a      	ldr	r2, [r7, #0]
 800153c:	430a      	orrs	r2, r1
 800153e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001540:	4b53      	ldr	r3, [pc, #332]	; (8001690 <HAL_RCC_ClockConfig+0x184>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2201      	movs	r2, #1
 8001546:	4013      	ands	r3, r2
 8001548:	683a      	ldr	r2, [r7, #0]
 800154a:	429a      	cmp	r2, r3
 800154c:	d001      	beq.n	8001552 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e09a      	b.n	8001688 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2202      	movs	r2, #2
 8001558:	4013      	ands	r3, r2
 800155a:	d015      	beq.n	8001588 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2204      	movs	r2, #4
 8001562:	4013      	ands	r3, r2
 8001564:	d006      	beq.n	8001574 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001566:	4b4b      	ldr	r3, [pc, #300]	; (8001694 <HAL_RCC_ClockConfig+0x188>)
 8001568:	685a      	ldr	r2, [r3, #4]
 800156a:	4b4a      	ldr	r3, [pc, #296]	; (8001694 <HAL_RCC_ClockConfig+0x188>)
 800156c:	21e0      	movs	r1, #224	; 0xe0
 800156e:	00c9      	lsls	r1, r1, #3
 8001570:	430a      	orrs	r2, r1
 8001572:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001574:	4b47      	ldr	r3, [pc, #284]	; (8001694 <HAL_RCC_ClockConfig+0x188>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	22f0      	movs	r2, #240	; 0xf0
 800157a:	4393      	bics	r3, r2
 800157c:	0019      	movs	r1, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	689a      	ldr	r2, [r3, #8]
 8001582:	4b44      	ldr	r3, [pc, #272]	; (8001694 <HAL_RCC_ClockConfig+0x188>)
 8001584:	430a      	orrs	r2, r1
 8001586:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2201      	movs	r2, #1
 800158e:	4013      	ands	r3, r2
 8001590:	d040      	beq.n	8001614 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d107      	bne.n	80015aa <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800159a:	4b3e      	ldr	r3, [pc, #248]	; (8001694 <HAL_RCC_ClockConfig+0x188>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	2380      	movs	r3, #128	; 0x80
 80015a0:	029b      	lsls	r3, r3, #10
 80015a2:	4013      	ands	r3, r2
 80015a4:	d114      	bne.n	80015d0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e06e      	b.n	8001688 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d107      	bne.n	80015c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015b2:	4b38      	ldr	r3, [pc, #224]	; (8001694 <HAL_RCC_ClockConfig+0x188>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	2380      	movs	r3, #128	; 0x80
 80015b8:	049b      	lsls	r3, r3, #18
 80015ba:	4013      	ands	r3, r2
 80015bc:	d108      	bne.n	80015d0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e062      	b.n	8001688 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c2:	4b34      	ldr	r3, [pc, #208]	; (8001694 <HAL_RCC_ClockConfig+0x188>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2202      	movs	r2, #2
 80015c8:	4013      	ands	r3, r2
 80015ca:	d101      	bne.n	80015d0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e05b      	b.n	8001688 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015d0:	4b30      	ldr	r3, [pc, #192]	; (8001694 <HAL_RCC_ClockConfig+0x188>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2203      	movs	r2, #3
 80015d6:	4393      	bics	r3, r2
 80015d8:	0019      	movs	r1, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685a      	ldr	r2, [r3, #4]
 80015de:	4b2d      	ldr	r3, [pc, #180]	; (8001694 <HAL_RCC_ClockConfig+0x188>)
 80015e0:	430a      	orrs	r2, r1
 80015e2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015e4:	f7ff f9f6 	bl	80009d4 <HAL_GetTick>
 80015e8:	0003      	movs	r3, r0
 80015ea:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ec:	e009      	b.n	8001602 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015ee:	f7ff f9f1 	bl	80009d4 <HAL_GetTick>
 80015f2:	0002      	movs	r2, r0
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	4a27      	ldr	r2, [pc, #156]	; (8001698 <HAL_RCC_ClockConfig+0x18c>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e042      	b.n	8001688 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001602:	4b24      	ldr	r3, [pc, #144]	; (8001694 <HAL_RCC_ClockConfig+0x188>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	220c      	movs	r2, #12
 8001608:	401a      	ands	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	429a      	cmp	r2, r3
 8001612:	d1ec      	bne.n	80015ee <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001614:	4b1e      	ldr	r3, [pc, #120]	; (8001690 <HAL_RCC_ClockConfig+0x184>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2201      	movs	r2, #1
 800161a:	4013      	ands	r3, r2
 800161c:	683a      	ldr	r2, [r7, #0]
 800161e:	429a      	cmp	r2, r3
 8001620:	d211      	bcs.n	8001646 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001622:	4b1b      	ldr	r3, [pc, #108]	; (8001690 <HAL_RCC_ClockConfig+0x184>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2201      	movs	r2, #1
 8001628:	4393      	bics	r3, r2
 800162a:	0019      	movs	r1, r3
 800162c:	4b18      	ldr	r3, [pc, #96]	; (8001690 <HAL_RCC_ClockConfig+0x184>)
 800162e:	683a      	ldr	r2, [r7, #0]
 8001630:	430a      	orrs	r2, r1
 8001632:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001634:	4b16      	ldr	r3, [pc, #88]	; (8001690 <HAL_RCC_ClockConfig+0x184>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2201      	movs	r2, #1
 800163a:	4013      	ands	r3, r2
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	429a      	cmp	r2, r3
 8001640:	d001      	beq.n	8001646 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e020      	b.n	8001688 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2204      	movs	r2, #4
 800164c:	4013      	ands	r3, r2
 800164e:	d009      	beq.n	8001664 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001650:	4b10      	ldr	r3, [pc, #64]	; (8001694 <HAL_RCC_ClockConfig+0x188>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	4a11      	ldr	r2, [pc, #68]	; (800169c <HAL_RCC_ClockConfig+0x190>)
 8001656:	4013      	ands	r3, r2
 8001658:	0019      	movs	r1, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	68da      	ldr	r2, [r3, #12]
 800165e:	4b0d      	ldr	r3, [pc, #52]	; (8001694 <HAL_RCC_ClockConfig+0x188>)
 8001660:	430a      	orrs	r2, r1
 8001662:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001664:	f000 f820 	bl	80016a8 <HAL_RCC_GetSysClockFreq>
 8001668:	0001      	movs	r1, r0
 800166a:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <HAL_RCC_ClockConfig+0x188>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	091b      	lsrs	r3, r3, #4
 8001670:	220f      	movs	r2, #15
 8001672:	4013      	ands	r3, r2
 8001674:	4a0a      	ldr	r2, [pc, #40]	; (80016a0 <HAL_RCC_ClockConfig+0x194>)
 8001676:	5cd3      	ldrb	r3, [r2, r3]
 8001678:	000a      	movs	r2, r1
 800167a:	40da      	lsrs	r2, r3
 800167c:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <HAL_RCC_ClockConfig+0x198>)
 800167e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001680:	2003      	movs	r0, #3
 8001682:	f7ff f8bb 	bl	80007fc <HAL_InitTick>
  
  return HAL_OK;
 8001686:	2300      	movs	r3, #0
}
 8001688:	0018      	movs	r0, r3
 800168a:	46bd      	mov	sp, r7
 800168c:	b004      	add	sp, #16
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40022000 	.word	0x40022000
 8001694:	40021000 	.word	0x40021000
 8001698:	00001388 	.word	0x00001388
 800169c:	fffff8ff 	.word	0xfffff8ff
 80016a0:	08004db0 	.word	0x08004db0
 80016a4:	2000001c 	.word	0x2000001c

080016a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016a8:	b590      	push	{r4, r7, lr}
 80016aa:	b08f      	sub	sp, #60	; 0x3c
 80016ac:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80016ae:	2314      	movs	r3, #20
 80016b0:	18fb      	adds	r3, r7, r3
 80016b2:	4a2c      	ldr	r2, [pc, #176]	; (8001764 <HAL_RCC_GetSysClockFreq+0xbc>)
 80016b4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80016b6:	c313      	stmia	r3!, {r0, r1, r4}
 80016b8:	6812      	ldr	r2, [r2, #0]
 80016ba:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80016bc:	1d3b      	adds	r3, r7, #4
 80016be:	4a2a      	ldr	r2, [pc, #168]	; (8001768 <HAL_RCC_GetSysClockFreq+0xc0>)
 80016c0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80016c2:	c313      	stmia	r3!, {r0, r1, r4}
 80016c4:	6812      	ldr	r2, [r2, #0]
 80016c6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016c8:	2300      	movs	r3, #0
 80016ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016cc:	2300      	movs	r3, #0
 80016ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80016d0:	2300      	movs	r3, #0
 80016d2:	637b      	str	r3, [r7, #52]	; 0x34
 80016d4:	2300      	movs	r3, #0
 80016d6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80016d8:	2300      	movs	r3, #0
 80016da:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80016dc:	4b23      	ldr	r3, [pc, #140]	; (800176c <HAL_RCC_GetSysClockFreq+0xc4>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e4:	220c      	movs	r2, #12
 80016e6:	4013      	ands	r3, r2
 80016e8:	2b04      	cmp	r3, #4
 80016ea:	d002      	beq.n	80016f2 <HAL_RCC_GetSysClockFreq+0x4a>
 80016ec:	2b08      	cmp	r3, #8
 80016ee:	d003      	beq.n	80016f8 <HAL_RCC_GetSysClockFreq+0x50>
 80016f0:	e02f      	b.n	8001752 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016f2:	4b1f      	ldr	r3, [pc, #124]	; (8001770 <HAL_RCC_GetSysClockFreq+0xc8>)
 80016f4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80016f6:	e02f      	b.n	8001758 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80016f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016fa:	0c9b      	lsrs	r3, r3, #18
 80016fc:	220f      	movs	r2, #15
 80016fe:	4013      	ands	r3, r2
 8001700:	2214      	movs	r2, #20
 8001702:	18ba      	adds	r2, r7, r2
 8001704:	5cd3      	ldrb	r3, [r2, r3]
 8001706:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001708:	4b18      	ldr	r3, [pc, #96]	; (800176c <HAL_RCC_GetSysClockFreq+0xc4>)
 800170a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170c:	220f      	movs	r2, #15
 800170e:	4013      	ands	r3, r2
 8001710:	1d3a      	adds	r2, r7, #4
 8001712:	5cd3      	ldrb	r3, [r2, r3]
 8001714:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001716:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001718:	23c0      	movs	r3, #192	; 0xc0
 800171a:	025b      	lsls	r3, r3, #9
 800171c:	401a      	ands	r2, r3
 800171e:	2380      	movs	r3, #128	; 0x80
 8001720:	025b      	lsls	r3, r3, #9
 8001722:	429a      	cmp	r2, r3
 8001724:	d109      	bne.n	800173a <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001726:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001728:	4811      	ldr	r0, [pc, #68]	; (8001770 <HAL_RCC_GetSysClockFreq+0xc8>)
 800172a:	f7fe fced 	bl	8000108 <__udivsi3>
 800172e:	0003      	movs	r3, r0
 8001730:	001a      	movs	r2, r3
 8001732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001734:	4353      	muls	r3, r2
 8001736:	637b      	str	r3, [r7, #52]	; 0x34
 8001738:	e008      	b.n	800174c <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800173a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800173c:	480c      	ldr	r0, [pc, #48]	; (8001770 <HAL_RCC_GetSysClockFreq+0xc8>)
 800173e:	f7fe fce3 	bl	8000108 <__udivsi3>
 8001742:	0003      	movs	r3, r0
 8001744:	001a      	movs	r2, r3
 8001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001748:	4353      	muls	r3, r2
 800174a:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800174c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800174e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001750:	e002      	b.n	8001758 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001752:	4b07      	ldr	r3, [pc, #28]	; (8001770 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001754:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001756:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800175a:	0018      	movs	r0, r3
 800175c:	46bd      	mov	sp, r7
 800175e:	b00f      	add	sp, #60	; 0x3c
 8001760:	bd90      	pop	{r4, r7, pc}
 8001762:	46c0      	nop			; (mov r8, r8)
 8001764:	08004ce8 	.word	0x08004ce8
 8001768:	08004cf8 	.word	0x08004cf8
 800176c:	40021000 	.word	0x40021000
 8001770:	007a1200 	.word	0x007a1200

08001774 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001778:	4b02      	ldr	r3, [pc, #8]	; (8001784 <HAL_RCC_GetHCLKFreq+0x10>)
 800177a:	681b      	ldr	r3, [r3, #0]
}
 800177c:	0018      	movs	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	46c0      	nop			; (mov r8, r8)
 8001784:	2000001c 	.word	0x2000001c

08001788 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800178c:	f7ff fff2 	bl	8001774 <HAL_RCC_GetHCLKFreq>
 8001790:	0001      	movs	r1, r0
 8001792:	4b06      	ldr	r3, [pc, #24]	; (80017ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	0a1b      	lsrs	r3, r3, #8
 8001798:	2207      	movs	r2, #7
 800179a:	4013      	ands	r3, r2
 800179c:	4a04      	ldr	r2, [pc, #16]	; (80017b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800179e:	5cd3      	ldrb	r3, [r2, r3]
 80017a0:	40d9      	lsrs	r1, r3
 80017a2:	000b      	movs	r3, r1
}    
 80017a4:	0018      	movs	r0, r3
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	46c0      	nop			; (mov r8, r8)
 80017ac:	40021000 	.word	0x40021000
 80017b0:	08004dc0 	.word	0x08004dc0

080017b4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2207      	movs	r2, #7
 80017c2:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80017c4:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <HAL_RCC_GetClockConfig+0x4c>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	2203      	movs	r2, #3
 80017ca:	401a      	ands	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80017d0:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <HAL_RCC_GetClockConfig+0x4c>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	22f0      	movs	r2, #240	; 0xf0
 80017d6:	401a      	ands	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 80017dc:	4b08      	ldr	r3, [pc, #32]	; (8001800 <HAL_RCC_GetClockConfig+0x4c>)
 80017de:	685a      	ldr	r2, [r3, #4]
 80017e0:	23e0      	movs	r3, #224	; 0xe0
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	401a      	ands	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 80017ea:	4b06      	ldr	r3, [pc, #24]	; (8001804 <HAL_RCC_GetClockConfig+0x50>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2201      	movs	r2, #1
 80017f0:	401a      	ands	r2, r3
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	601a      	str	r2, [r3, #0]
}
 80017f6:	46c0      	nop			; (mov r8, r8)
 80017f8:	46bd      	mov	sp, r7
 80017fa:	b002      	add	sp, #8
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	46c0      	nop			; (mov r8, r8)
 8001800:	40021000 	.word	0x40021000
 8001804:	40022000 	.word	0x40022000

08001808 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e042      	b.n	80018a0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	223d      	movs	r2, #61	; 0x3d
 800181e:	5c9b      	ldrb	r3, [r3, r2]
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	d107      	bne.n	8001836 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	223c      	movs	r2, #60	; 0x3c
 800182a:	2100      	movs	r1, #0
 800182c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	0018      	movs	r0, r3
 8001832:	f000 f839 	bl	80018a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	223d      	movs	r2, #61	; 0x3d
 800183a:	2102      	movs	r1, #2
 800183c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	3304      	adds	r3, #4
 8001846:	0019      	movs	r1, r3
 8001848:	0010      	movs	r0, r2
 800184a:	f000 f9b7 	bl	8001bbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2246      	movs	r2, #70	; 0x46
 8001852:	2101      	movs	r1, #1
 8001854:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	223e      	movs	r2, #62	; 0x3e
 800185a:	2101      	movs	r1, #1
 800185c:	5499      	strb	r1, [r3, r2]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	223f      	movs	r2, #63	; 0x3f
 8001862:	2101      	movs	r1, #1
 8001864:	5499      	strb	r1, [r3, r2]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2240      	movs	r2, #64	; 0x40
 800186a:	2101      	movs	r1, #1
 800186c:	5499      	strb	r1, [r3, r2]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2241      	movs	r2, #65	; 0x41
 8001872:	2101      	movs	r1, #1
 8001874:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2242      	movs	r2, #66	; 0x42
 800187a:	2101      	movs	r1, #1
 800187c:	5499      	strb	r1, [r3, r2]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2243      	movs	r2, #67	; 0x43
 8001882:	2101      	movs	r1, #1
 8001884:	5499      	strb	r1, [r3, r2]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2244      	movs	r2, #68	; 0x44
 800188a:	2101      	movs	r1, #1
 800188c:	5499      	strb	r1, [r3, r2]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2245      	movs	r2, #69	; 0x45
 8001892:	2101      	movs	r1, #1
 8001894:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	223d      	movs	r2, #61	; 0x3d
 800189a:	2101      	movs	r1, #1
 800189c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800189e:	2300      	movs	r3, #0
}
 80018a0:	0018      	movs	r0, r3
 80018a2:	46bd      	mov	sp, r7
 80018a4:	b002      	add	sp, #8
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80018b0:	46c0      	nop			; (mov r8, r8)
 80018b2:	46bd      	mov	sp, r7
 80018b4:	b002      	add	sp, #8
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	223d      	movs	r2, #61	; 0x3d
 80018c4:	5c9b      	ldrb	r3, [r3, r2]
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d001      	beq.n	80018d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e035      	b.n	800193c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	223d      	movs	r2, #61	; 0x3d
 80018d4:	2102      	movs	r1, #2
 80018d6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	68da      	ldr	r2, [r3, #12]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2101      	movs	r1, #1
 80018e4:	430a      	orrs	r2, r1
 80018e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a15      	ldr	r2, [pc, #84]	; (8001944 <HAL_TIM_Base_Start_IT+0x8c>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d009      	beq.n	8001906 <HAL_TIM_Base_Start_IT+0x4e>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a14      	ldr	r2, [pc, #80]	; (8001948 <HAL_TIM_Base_Start_IT+0x90>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d004      	beq.n	8001906 <HAL_TIM_Base_Start_IT+0x4e>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a12      	ldr	r2, [pc, #72]	; (800194c <HAL_TIM_Base_Start_IT+0x94>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d111      	bne.n	800192a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	2207      	movs	r2, #7
 800190e:	4013      	ands	r3, r2
 8001910:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2b06      	cmp	r3, #6
 8001916:	d010      	beq.n	800193a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2101      	movs	r1, #1
 8001924:	430a      	orrs	r2, r1
 8001926:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001928:	e007      	b.n	800193a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2101      	movs	r1, #1
 8001936:	430a      	orrs	r2, r1
 8001938:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800193a:	2300      	movs	r3, #0
}
 800193c:	0018      	movs	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	b004      	add	sp, #16
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40012c00 	.word	0x40012c00
 8001948:	40000400 	.word	0x40000400
 800194c:	40014000 	.word	0x40014000

08001950 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	691b      	ldr	r3, [r3, #16]
 800195e:	2202      	movs	r2, #2
 8001960:	4013      	ands	r3, r2
 8001962:	2b02      	cmp	r3, #2
 8001964:	d124      	bne.n	80019b0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	2202      	movs	r2, #2
 800196e:	4013      	ands	r3, r2
 8001970:	2b02      	cmp	r3, #2
 8001972:	d11d      	bne.n	80019b0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2203      	movs	r2, #3
 800197a:	4252      	negs	r2, r2
 800197c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2201      	movs	r2, #1
 8001982:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	2203      	movs	r2, #3
 800198c:	4013      	ands	r3, r2
 800198e:	d004      	beq.n	800199a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	0018      	movs	r0, r3
 8001994:	f000 f8fa 	bl	8001b8c <HAL_TIM_IC_CaptureCallback>
 8001998:	e007      	b.n	80019aa <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	0018      	movs	r0, r3
 800199e:	f000 f8ed 	bl	8001b7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	0018      	movs	r0, r3
 80019a6:	f000 f8f9 	bl	8001b9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	2204      	movs	r2, #4
 80019b8:	4013      	ands	r3, r2
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	d125      	bne.n	8001a0a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	2204      	movs	r2, #4
 80019c6:	4013      	ands	r3, r2
 80019c8:	2b04      	cmp	r3, #4
 80019ca:	d11e      	bne.n	8001a0a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2205      	movs	r2, #5
 80019d2:	4252      	negs	r2, r2
 80019d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2202      	movs	r2, #2
 80019da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	699a      	ldr	r2, [r3, #24]
 80019e2:	23c0      	movs	r3, #192	; 0xc0
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	4013      	ands	r3, r2
 80019e8:	d004      	beq.n	80019f4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	0018      	movs	r0, r3
 80019ee:	f000 f8cd 	bl	8001b8c <HAL_TIM_IC_CaptureCallback>
 80019f2:	e007      	b.n	8001a04 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	0018      	movs	r0, r3
 80019f8:	f000 f8c0 	bl	8001b7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	0018      	movs	r0, r3
 8001a00:	f000 f8cc 	bl	8001b9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	2208      	movs	r2, #8
 8001a12:	4013      	ands	r3, r2
 8001a14:	2b08      	cmp	r3, #8
 8001a16:	d124      	bne.n	8001a62 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	2208      	movs	r2, #8
 8001a20:	4013      	ands	r3, r2
 8001a22:	2b08      	cmp	r3, #8
 8001a24:	d11d      	bne.n	8001a62 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2209      	movs	r2, #9
 8001a2c:	4252      	negs	r2, r2
 8001a2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2204      	movs	r2, #4
 8001a34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	69db      	ldr	r3, [r3, #28]
 8001a3c:	2203      	movs	r2, #3
 8001a3e:	4013      	ands	r3, r2
 8001a40:	d004      	beq.n	8001a4c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	0018      	movs	r0, r3
 8001a46:	f000 f8a1 	bl	8001b8c <HAL_TIM_IC_CaptureCallback>
 8001a4a:	e007      	b.n	8001a5c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	0018      	movs	r0, r3
 8001a50:	f000 f894 	bl	8001b7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	0018      	movs	r0, r3
 8001a58:	f000 f8a0 	bl	8001b9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	2210      	movs	r2, #16
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	2b10      	cmp	r3, #16
 8001a6e:	d125      	bne.n	8001abc <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	2210      	movs	r2, #16
 8001a78:	4013      	ands	r3, r2
 8001a7a:	2b10      	cmp	r3, #16
 8001a7c:	d11e      	bne.n	8001abc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2211      	movs	r2, #17
 8001a84:	4252      	negs	r2, r2
 8001a86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2208      	movs	r2, #8
 8001a8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	69da      	ldr	r2, [r3, #28]
 8001a94:	23c0      	movs	r3, #192	; 0xc0
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	4013      	ands	r3, r2
 8001a9a:	d004      	beq.n	8001aa6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	0018      	movs	r0, r3
 8001aa0:	f000 f874 	bl	8001b8c <HAL_TIM_IC_CaptureCallback>
 8001aa4:	e007      	b.n	8001ab6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	f000 f867 	bl	8001b7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	f000 f873 	bl	8001b9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d10f      	bne.n	8001aea <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d108      	bne.n	8001aea <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2202      	movs	r2, #2
 8001ade:	4252      	negs	r2, r2
 8001ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	f7fe fdfb 	bl	80006e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	2280      	movs	r2, #128	; 0x80
 8001af2:	4013      	ands	r3, r2
 8001af4:	2b80      	cmp	r3, #128	; 0x80
 8001af6:	d10f      	bne.n	8001b18 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	2280      	movs	r2, #128	; 0x80
 8001b00:	4013      	ands	r3, r2
 8001b02:	2b80      	cmp	r3, #128	; 0x80
 8001b04:	d108      	bne.n	8001b18 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2281      	movs	r2, #129	; 0x81
 8001b0c:	4252      	negs	r2, r2
 8001b0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	0018      	movs	r0, r3
 8001b14:	f000 f8d0 	bl	8001cb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	2240      	movs	r2, #64	; 0x40
 8001b20:	4013      	ands	r3, r2
 8001b22:	2b40      	cmp	r3, #64	; 0x40
 8001b24:	d10f      	bne.n	8001b46 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	2240      	movs	r2, #64	; 0x40
 8001b2e:	4013      	ands	r3, r2
 8001b30:	2b40      	cmp	r3, #64	; 0x40
 8001b32:	d108      	bne.n	8001b46 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2241      	movs	r2, #65	; 0x41
 8001b3a:	4252      	negs	r2, r2
 8001b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	0018      	movs	r0, r3
 8001b42:	f000 f833 	bl	8001bac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	2220      	movs	r2, #32
 8001b4e:	4013      	ands	r3, r2
 8001b50:	2b20      	cmp	r3, #32
 8001b52:	d10f      	bne.n	8001b74 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	2220      	movs	r2, #32
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	2b20      	cmp	r3, #32
 8001b60:	d108      	bne.n	8001b74 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2221      	movs	r2, #33	; 0x21
 8001b68:	4252      	negs	r2, r2
 8001b6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	0018      	movs	r0, r3
 8001b70:	f000 f89a 	bl	8001ca8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b74:	46c0      	nop			; (mov r8, r8)
 8001b76:	46bd      	mov	sp, r7
 8001b78:	b002      	add	sp, #8
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b84:	46c0      	nop			; (mov r8, r8)
 8001b86:	46bd      	mov	sp, r7
 8001b88:	b002      	add	sp, #8
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b94:	46c0      	nop			; (mov r8, r8)
 8001b96:	46bd      	mov	sp, r7
 8001b98:	b002      	add	sp, #8
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ba4:	46c0      	nop			; (mov r8, r8)
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	b002      	add	sp, #8
 8001baa:	bd80      	pop	{r7, pc}

08001bac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001bb4:	46c0      	nop			; (mov r8, r8)
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	b002      	add	sp, #8
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a2f      	ldr	r2, [pc, #188]	; (8001c8c <TIM_Base_SetConfig+0xd0>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d003      	beq.n	8001bdc <TIM_Base_SetConfig+0x20>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4a2e      	ldr	r2, [pc, #184]	; (8001c90 <TIM_Base_SetConfig+0xd4>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d108      	bne.n	8001bee <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2270      	movs	r2, #112	; 0x70
 8001be0:	4393      	bics	r3, r2
 8001be2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	68fa      	ldr	r2, [r7, #12]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a26      	ldr	r2, [pc, #152]	; (8001c8c <TIM_Base_SetConfig+0xd0>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d013      	beq.n	8001c1e <TIM_Base_SetConfig+0x62>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a25      	ldr	r2, [pc, #148]	; (8001c90 <TIM_Base_SetConfig+0xd4>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d00f      	beq.n	8001c1e <TIM_Base_SetConfig+0x62>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a24      	ldr	r2, [pc, #144]	; (8001c94 <TIM_Base_SetConfig+0xd8>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d00b      	beq.n	8001c1e <TIM_Base_SetConfig+0x62>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a23      	ldr	r2, [pc, #140]	; (8001c98 <TIM_Base_SetConfig+0xdc>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d007      	beq.n	8001c1e <TIM_Base_SetConfig+0x62>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a22      	ldr	r2, [pc, #136]	; (8001c9c <TIM_Base_SetConfig+0xe0>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d003      	beq.n	8001c1e <TIM_Base_SetConfig+0x62>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a21      	ldr	r2, [pc, #132]	; (8001ca0 <TIM_Base_SetConfig+0xe4>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d108      	bne.n	8001c30 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	4a20      	ldr	r2, [pc, #128]	; (8001ca4 <TIM_Base_SetConfig+0xe8>)
 8001c22:	4013      	ands	r3, r2
 8001c24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2280      	movs	r2, #128	; 0x80
 8001c34:	4393      	bics	r3, r2
 8001c36:	001a      	movs	r2, r3
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	695b      	ldr	r3, [r3, #20]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	68fa      	ldr	r2, [r7, #12]
 8001c44:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	689a      	ldr	r2, [r3, #8]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a0c      	ldr	r2, [pc, #48]	; (8001c8c <TIM_Base_SetConfig+0xd0>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d00b      	beq.n	8001c76 <TIM_Base_SetConfig+0xba>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a0d      	ldr	r2, [pc, #52]	; (8001c98 <TIM_Base_SetConfig+0xdc>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d007      	beq.n	8001c76 <TIM_Base_SetConfig+0xba>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a0c      	ldr	r2, [pc, #48]	; (8001c9c <TIM_Base_SetConfig+0xe0>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d003      	beq.n	8001c76 <TIM_Base_SetConfig+0xba>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a0b      	ldr	r2, [pc, #44]	; (8001ca0 <TIM_Base_SetConfig+0xe4>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d103      	bne.n	8001c7e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	691a      	ldr	r2, [r3, #16]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2201      	movs	r2, #1
 8001c82:	615a      	str	r2, [r3, #20]
}
 8001c84:	46c0      	nop			; (mov r8, r8)
 8001c86:	46bd      	mov	sp, r7
 8001c88:	b004      	add	sp, #16
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40012c00 	.word	0x40012c00
 8001c90:	40000400 	.word	0x40000400
 8001c94:	40002000 	.word	0x40002000
 8001c98:	40014000 	.word	0x40014000
 8001c9c:	40014400 	.word	0x40014400
 8001ca0:	40014800 	.word	0x40014800
 8001ca4:	fffffcff 	.word	0xfffffcff

08001ca8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001cb0:	46c0      	nop			; (mov r8, r8)
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	b002      	add	sp, #8
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001cc0:	46c0      	nop			; (mov r8, r8)
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	b002      	add	sp, #8
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e044      	b.n	8001d64 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d107      	bne.n	8001cf2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2274      	movs	r2, #116	; 0x74
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	0018      	movs	r0, r3
 8001cee:	f7fe fd39 	bl	8000764 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2224      	movs	r2, #36	; 0x24
 8001cf6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2101      	movs	r1, #1
 8001d04:	438a      	bics	r2, r1
 8001d06:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	f000 f830 	bl	8001d70 <UART_SetConfig>
 8001d10:	0003      	movs	r3, r0
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d101      	bne.n	8001d1a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e024      	b.n	8001d64 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	0018      	movs	r0, r3
 8001d26:	f000 f97b 	bl	8002020 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	685a      	ldr	r2, [r3, #4]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	490d      	ldr	r1, [pc, #52]	; (8001d6c <HAL_UART_Init+0xa4>)
 8001d36:	400a      	ands	r2, r1
 8001d38:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2108      	movs	r1, #8
 8001d46:	438a      	bics	r2, r1
 8001d48:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2101      	movs	r1, #1
 8001d56:	430a      	orrs	r2, r1
 8001d58:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	0018      	movs	r0, r3
 8001d5e:	f000 fa13 	bl	8002188 <UART_CheckIdleState>
 8001d62:	0003      	movs	r3, r0
}
 8001d64:	0018      	movs	r0, r3
 8001d66:	46bd      	mov	sp, r7
 8001d68:	b002      	add	sp, #8
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	fffff7ff 	.word	0xfffff7ff

08001d70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b088      	sub	sp, #32
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001d78:	231e      	movs	r3, #30
 8001d7a:	18fb      	adds	r3, r7, r3
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	69db      	ldr	r3, [r3, #28]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a97      	ldr	r2, [pc, #604]	; (8001ffc <UART_SetConfig+0x28c>)
 8001da0:	4013      	ands	r3, r2
 8001da2:	0019      	movs	r1, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	430a      	orrs	r2, r1
 8001dac:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	4a92      	ldr	r2, [pc, #584]	; (8002000 <UART_SetConfig+0x290>)
 8001db6:	4013      	ands	r3, r2
 8001db8:	0019      	movs	r1, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	68da      	ldr	r2, [r3, #12]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	697a      	ldr	r2, [r7, #20]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	4a89      	ldr	r2, [pc, #548]	; (8002004 <UART_SetConfig+0x294>)
 8001dde:	4013      	ands	r3, r2
 8001de0:	0019      	movs	r1, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	430a      	orrs	r2, r1
 8001dea:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a85      	ldr	r2, [pc, #532]	; (8002008 <UART_SetConfig+0x298>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d127      	bne.n	8001e46 <UART_SetConfig+0xd6>
 8001df6:	4b85      	ldr	r3, [pc, #532]	; (800200c <UART_SetConfig+0x29c>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	2203      	movs	r2, #3
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	2b03      	cmp	r3, #3
 8001e00:	d00d      	beq.n	8001e1e <UART_SetConfig+0xae>
 8001e02:	d81b      	bhi.n	8001e3c <UART_SetConfig+0xcc>
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d014      	beq.n	8001e32 <UART_SetConfig+0xc2>
 8001e08:	d818      	bhi.n	8001e3c <UART_SetConfig+0xcc>
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d002      	beq.n	8001e14 <UART_SetConfig+0xa4>
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d00a      	beq.n	8001e28 <UART_SetConfig+0xb8>
 8001e12:	e013      	b.n	8001e3c <UART_SetConfig+0xcc>
 8001e14:	231f      	movs	r3, #31
 8001e16:	18fb      	adds	r3, r7, r3
 8001e18:	2200      	movs	r2, #0
 8001e1a:	701a      	strb	r2, [r3, #0]
 8001e1c:	e035      	b.n	8001e8a <UART_SetConfig+0x11a>
 8001e1e:	231f      	movs	r3, #31
 8001e20:	18fb      	adds	r3, r7, r3
 8001e22:	2202      	movs	r2, #2
 8001e24:	701a      	strb	r2, [r3, #0]
 8001e26:	e030      	b.n	8001e8a <UART_SetConfig+0x11a>
 8001e28:	231f      	movs	r3, #31
 8001e2a:	18fb      	adds	r3, r7, r3
 8001e2c:	2204      	movs	r2, #4
 8001e2e:	701a      	strb	r2, [r3, #0]
 8001e30:	e02b      	b.n	8001e8a <UART_SetConfig+0x11a>
 8001e32:	231f      	movs	r3, #31
 8001e34:	18fb      	adds	r3, r7, r3
 8001e36:	2208      	movs	r2, #8
 8001e38:	701a      	strb	r2, [r3, #0]
 8001e3a:	e026      	b.n	8001e8a <UART_SetConfig+0x11a>
 8001e3c:	231f      	movs	r3, #31
 8001e3e:	18fb      	adds	r3, r7, r3
 8001e40:	2210      	movs	r2, #16
 8001e42:	701a      	strb	r2, [r3, #0]
 8001e44:	e021      	b.n	8001e8a <UART_SetConfig+0x11a>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a71      	ldr	r2, [pc, #452]	; (8002010 <UART_SetConfig+0x2a0>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d104      	bne.n	8001e5a <UART_SetConfig+0xea>
 8001e50:	231f      	movs	r3, #31
 8001e52:	18fb      	adds	r3, r7, r3
 8001e54:	2200      	movs	r2, #0
 8001e56:	701a      	strb	r2, [r3, #0]
 8001e58:	e017      	b.n	8001e8a <UART_SetConfig+0x11a>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a6d      	ldr	r2, [pc, #436]	; (8002014 <UART_SetConfig+0x2a4>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d104      	bne.n	8001e6e <UART_SetConfig+0xfe>
 8001e64:	231f      	movs	r3, #31
 8001e66:	18fb      	adds	r3, r7, r3
 8001e68:	2200      	movs	r2, #0
 8001e6a:	701a      	strb	r2, [r3, #0]
 8001e6c:	e00d      	b.n	8001e8a <UART_SetConfig+0x11a>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a69      	ldr	r2, [pc, #420]	; (8002018 <UART_SetConfig+0x2a8>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d104      	bne.n	8001e82 <UART_SetConfig+0x112>
 8001e78:	231f      	movs	r3, #31
 8001e7a:	18fb      	adds	r3, r7, r3
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	701a      	strb	r2, [r3, #0]
 8001e80:	e003      	b.n	8001e8a <UART_SetConfig+0x11a>
 8001e82:	231f      	movs	r3, #31
 8001e84:	18fb      	adds	r3, r7, r3
 8001e86:	2210      	movs	r2, #16
 8001e88:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	69da      	ldr	r2, [r3, #28]
 8001e8e:	2380      	movs	r3, #128	; 0x80
 8001e90:	021b      	lsls	r3, r3, #8
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d15d      	bne.n	8001f52 <UART_SetConfig+0x1e2>
  {
    switch (clocksource)
 8001e96:	231f      	movs	r3, #31
 8001e98:	18fb      	adds	r3, r7, r3
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b08      	cmp	r3, #8
 8001e9e:	d015      	beq.n	8001ecc <UART_SetConfig+0x15c>
 8001ea0:	dc18      	bgt.n	8001ed4 <UART_SetConfig+0x164>
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	d00d      	beq.n	8001ec2 <UART_SetConfig+0x152>
 8001ea6:	dc15      	bgt.n	8001ed4 <UART_SetConfig+0x164>
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d002      	beq.n	8001eb2 <UART_SetConfig+0x142>
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d005      	beq.n	8001ebc <UART_SetConfig+0x14c>
 8001eb0:	e010      	b.n	8001ed4 <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001eb2:	f7ff fc69 	bl	8001788 <HAL_RCC_GetPCLK1Freq>
 8001eb6:	0003      	movs	r3, r0
 8001eb8:	61bb      	str	r3, [r7, #24]
        break;
 8001eba:	e012      	b.n	8001ee2 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001ebc:	4b57      	ldr	r3, [pc, #348]	; (800201c <UART_SetConfig+0x2ac>)
 8001ebe:	61bb      	str	r3, [r7, #24]
        break;
 8001ec0:	e00f      	b.n	8001ee2 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001ec2:	f7ff fbf1 	bl	80016a8 <HAL_RCC_GetSysClockFreq>
 8001ec6:	0003      	movs	r3, r0
 8001ec8:	61bb      	str	r3, [r7, #24]
        break;
 8001eca:	e00a      	b.n	8001ee2 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001ecc:	2380      	movs	r3, #128	; 0x80
 8001ece:	021b      	lsls	r3, r3, #8
 8001ed0:	61bb      	str	r3, [r7, #24]
        break;
 8001ed2:	e006      	b.n	8001ee2 <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001ed8:	231e      	movs	r3, #30
 8001eda:	18fb      	adds	r3, r7, r3
 8001edc:	2201      	movs	r2, #1
 8001ede:	701a      	strb	r2, [r3, #0]
        break;
 8001ee0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d100      	bne.n	8001eea <UART_SetConfig+0x17a>
 8001ee8:	e07b      	b.n	8001fe2 <UART_SetConfig+0x272>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	005a      	lsls	r2, r3, #1
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	085b      	lsrs	r3, r3, #1
 8001ef4:	18d2      	adds	r2, r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	0019      	movs	r1, r3
 8001efc:	0010      	movs	r0, r2
 8001efe:	f7fe f903 	bl	8000108 <__udivsi3>
 8001f02:	0003      	movs	r3, r0
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	2b0f      	cmp	r3, #15
 8001f0c:	d91c      	bls.n	8001f48 <UART_SetConfig+0x1d8>
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	2380      	movs	r3, #128	; 0x80
 8001f12:	025b      	lsls	r3, r3, #9
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d217      	bcs.n	8001f48 <UART_SetConfig+0x1d8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	200e      	movs	r0, #14
 8001f1e:	183b      	adds	r3, r7, r0
 8001f20:	210f      	movs	r1, #15
 8001f22:	438a      	bics	r2, r1
 8001f24:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	085b      	lsrs	r3, r3, #1
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	2207      	movs	r2, #7
 8001f2e:	4013      	ands	r3, r2
 8001f30:	b299      	uxth	r1, r3
 8001f32:	183b      	adds	r3, r7, r0
 8001f34:	183a      	adds	r2, r7, r0
 8001f36:	8812      	ldrh	r2, [r2, #0]
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	183a      	adds	r2, r7, r0
 8001f42:	8812      	ldrh	r2, [r2, #0]
 8001f44:	60da      	str	r2, [r3, #12]
 8001f46:	e04c      	b.n	8001fe2 <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 8001f48:	231e      	movs	r3, #30
 8001f4a:	18fb      	adds	r3, r7, r3
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	701a      	strb	r2, [r3, #0]
 8001f50:	e047      	b.n	8001fe2 <UART_SetConfig+0x272>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001f52:	231f      	movs	r3, #31
 8001f54:	18fb      	adds	r3, r7, r3
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b08      	cmp	r3, #8
 8001f5a:	d015      	beq.n	8001f88 <UART_SetConfig+0x218>
 8001f5c:	dc18      	bgt.n	8001f90 <UART_SetConfig+0x220>
 8001f5e:	2b04      	cmp	r3, #4
 8001f60:	d00d      	beq.n	8001f7e <UART_SetConfig+0x20e>
 8001f62:	dc15      	bgt.n	8001f90 <UART_SetConfig+0x220>
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d002      	beq.n	8001f6e <UART_SetConfig+0x1fe>
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d005      	beq.n	8001f78 <UART_SetConfig+0x208>
 8001f6c:	e010      	b.n	8001f90 <UART_SetConfig+0x220>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001f6e:	f7ff fc0b 	bl	8001788 <HAL_RCC_GetPCLK1Freq>
 8001f72:	0003      	movs	r3, r0
 8001f74:	61bb      	str	r3, [r7, #24]
        break;
 8001f76:	e012      	b.n	8001f9e <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001f78:	4b28      	ldr	r3, [pc, #160]	; (800201c <UART_SetConfig+0x2ac>)
 8001f7a:	61bb      	str	r3, [r7, #24]
        break;
 8001f7c:	e00f      	b.n	8001f9e <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001f7e:	f7ff fb93 	bl	80016a8 <HAL_RCC_GetSysClockFreq>
 8001f82:	0003      	movs	r3, r0
 8001f84:	61bb      	str	r3, [r7, #24]
        break;
 8001f86:	e00a      	b.n	8001f9e <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001f88:	2380      	movs	r3, #128	; 0x80
 8001f8a:	021b      	lsls	r3, r3, #8
 8001f8c:	61bb      	str	r3, [r7, #24]
        break;
 8001f8e:	e006      	b.n	8001f9e <UART_SetConfig+0x22e>
      default:
        pclk = 0U;
 8001f90:	2300      	movs	r3, #0
 8001f92:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001f94:	231e      	movs	r3, #30
 8001f96:	18fb      	adds	r3, r7, r3
 8001f98:	2201      	movs	r2, #1
 8001f9a:	701a      	strb	r2, [r3, #0]
        break;
 8001f9c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d01e      	beq.n	8001fe2 <UART_SetConfig+0x272>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	085a      	lsrs	r2, r3, #1
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	18d2      	adds	r2, r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	0019      	movs	r1, r3
 8001fb4:	0010      	movs	r0, r2
 8001fb6:	f7fe f8a7 	bl	8000108 <__udivsi3>
 8001fba:	0003      	movs	r3, r0
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	2b0f      	cmp	r3, #15
 8001fc4:	d909      	bls.n	8001fda <UART_SetConfig+0x26a>
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	2380      	movs	r3, #128	; 0x80
 8001fca:	025b      	lsls	r3, r3, #9
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d204      	bcs.n	8001fda <UART_SetConfig+0x26a>
      {
        huart->Instance->BRR = usartdiv;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	60da      	str	r2, [r3, #12]
 8001fd8:	e003      	b.n	8001fe2 <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 8001fda:	231e      	movs	r3, #30
 8001fdc:	18fb      	adds	r3, r7, r3
 8001fde:	2201      	movs	r2, #1
 8001fe0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8001fee:	231e      	movs	r3, #30
 8001ff0:	18fb      	adds	r3, r7, r3
 8001ff2:	781b      	ldrb	r3, [r3, #0]
}
 8001ff4:	0018      	movs	r0, r3
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	b008      	add	sp, #32
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	efff69f3 	.word	0xefff69f3
 8002000:	ffffcfff 	.word	0xffffcfff
 8002004:	fffff4ff 	.word	0xfffff4ff
 8002008:	40013800 	.word	0x40013800
 800200c:	40021000 	.word	0x40021000
 8002010:	40004400 	.word	0x40004400
 8002014:	40004800 	.word	0x40004800
 8002018:	40004c00 	.word	0x40004c00
 800201c:	007a1200 	.word	0x007a1200

08002020 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202c:	2201      	movs	r2, #1
 800202e:	4013      	ands	r3, r2
 8002030:	d00b      	beq.n	800204a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	4a4a      	ldr	r2, [pc, #296]	; (8002164 <UART_AdvFeatureConfig+0x144>)
 800203a:	4013      	ands	r3, r2
 800203c:	0019      	movs	r1, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	430a      	orrs	r2, r1
 8002048:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204e:	2202      	movs	r2, #2
 8002050:	4013      	ands	r3, r2
 8002052:	d00b      	beq.n	800206c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	4a43      	ldr	r2, [pc, #268]	; (8002168 <UART_AdvFeatureConfig+0x148>)
 800205c:	4013      	ands	r3, r2
 800205e:	0019      	movs	r1, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	430a      	orrs	r2, r1
 800206a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002070:	2204      	movs	r2, #4
 8002072:	4013      	ands	r3, r2
 8002074:	d00b      	beq.n	800208e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	4a3b      	ldr	r2, [pc, #236]	; (800216c <UART_AdvFeatureConfig+0x14c>)
 800207e:	4013      	ands	r3, r2
 8002080:	0019      	movs	r1, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	430a      	orrs	r2, r1
 800208c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002092:	2208      	movs	r2, #8
 8002094:	4013      	ands	r3, r2
 8002096:	d00b      	beq.n	80020b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	4a34      	ldr	r2, [pc, #208]	; (8002170 <UART_AdvFeatureConfig+0x150>)
 80020a0:	4013      	ands	r3, r2
 80020a2:	0019      	movs	r1, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b4:	2210      	movs	r2, #16
 80020b6:	4013      	ands	r3, r2
 80020b8:	d00b      	beq.n	80020d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	4a2c      	ldr	r2, [pc, #176]	; (8002174 <UART_AdvFeatureConfig+0x154>)
 80020c2:	4013      	ands	r3, r2
 80020c4:	0019      	movs	r1, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	430a      	orrs	r2, r1
 80020d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d6:	2220      	movs	r2, #32
 80020d8:	4013      	ands	r3, r2
 80020da:	d00b      	beq.n	80020f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	4a25      	ldr	r2, [pc, #148]	; (8002178 <UART_AdvFeatureConfig+0x158>)
 80020e4:	4013      	ands	r3, r2
 80020e6:	0019      	movs	r1, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	430a      	orrs	r2, r1
 80020f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f8:	2240      	movs	r2, #64	; 0x40
 80020fa:	4013      	ands	r3, r2
 80020fc:	d01d      	beq.n	800213a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	4a1d      	ldr	r2, [pc, #116]	; (800217c <UART_AdvFeatureConfig+0x15c>)
 8002106:	4013      	ands	r3, r2
 8002108:	0019      	movs	r1, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	430a      	orrs	r2, r1
 8002114:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800211a:	2380      	movs	r3, #128	; 0x80
 800211c:	035b      	lsls	r3, r3, #13
 800211e:	429a      	cmp	r2, r3
 8002120:	d10b      	bne.n	800213a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	4a15      	ldr	r2, [pc, #84]	; (8002180 <UART_AdvFeatureConfig+0x160>)
 800212a:	4013      	ands	r3, r2
 800212c:	0019      	movs	r1, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	430a      	orrs	r2, r1
 8002138:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213e:	2280      	movs	r2, #128	; 0x80
 8002140:	4013      	ands	r3, r2
 8002142:	d00b      	beq.n	800215c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	4a0e      	ldr	r2, [pc, #56]	; (8002184 <UART_AdvFeatureConfig+0x164>)
 800214c:	4013      	ands	r3, r2
 800214e:	0019      	movs	r1, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	430a      	orrs	r2, r1
 800215a:	605a      	str	r2, [r3, #4]
  }
}
 800215c:	46c0      	nop			; (mov r8, r8)
 800215e:	46bd      	mov	sp, r7
 8002160:	b002      	add	sp, #8
 8002162:	bd80      	pop	{r7, pc}
 8002164:	fffdffff 	.word	0xfffdffff
 8002168:	fffeffff 	.word	0xfffeffff
 800216c:	fffbffff 	.word	0xfffbffff
 8002170:	ffff7fff 	.word	0xffff7fff
 8002174:	ffffefff 	.word	0xffffefff
 8002178:	ffffdfff 	.word	0xffffdfff
 800217c:	ffefffff 	.word	0xffefffff
 8002180:	ff9fffff 	.word	0xff9fffff
 8002184:	fff7ffff 	.word	0xfff7ffff

08002188 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af02      	add	r7, sp, #8
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2280      	movs	r2, #128	; 0x80
 8002194:	2100      	movs	r1, #0
 8002196:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002198:	f7fe fc1c 	bl	80009d4 <HAL_GetTick>
 800219c:	0003      	movs	r3, r0
 800219e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2208      	movs	r2, #8
 80021a8:	4013      	ands	r3, r2
 80021aa:	2b08      	cmp	r3, #8
 80021ac:	d10c      	bne.n	80021c8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2280      	movs	r2, #128	; 0x80
 80021b2:	0391      	lsls	r1, r2, #14
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	4a17      	ldr	r2, [pc, #92]	; (8002214 <UART_CheckIdleState+0x8c>)
 80021b8:	9200      	str	r2, [sp, #0]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f000 f82c 	bl	8002218 <UART_WaitOnFlagUntilTimeout>
 80021c0:	1e03      	subs	r3, r0, #0
 80021c2:	d001      	beq.n	80021c8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e021      	b.n	800220c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2204      	movs	r2, #4
 80021d0:	4013      	ands	r3, r2
 80021d2:	2b04      	cmp	r3, #4
 80021d4:	d10c      	bne.n	80021f0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2280      	movs	r2, #128	; 0x80
 80021da:	03d1      	lsls	r1, r2, #15
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	4a0d      	ldr	r2, [pc, #52]	; (8002214 <UART_CheckIdleState+0x8c>)
 80021e0:	9200      	str	r2, [sp, #0]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f000 f818 	bl	8002218 <UART_WaitOnFlagUntilTimeout>
 80021e8:	1e03      	subs	r3, r0, #0
 80021ea:	d001      	beq.n	80021f0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e00d      	b.n	800220c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2220      	movs	r2, #32
 80021f4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2220      	movs	r2, #32
 80021fa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2274      	movs	r2, #116	; 0x74
 8002206:	2100      	movs	r1, #0
 8002208:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800220a:	2300      	movs	r3, #0
}
 800220c:	0018      	movs	r0, r3
 800220e:	46bd      	mov	sp, r7
 8002210:	b004      	add	sp, #16
 8002212:	bd80      	pop	{r7, pc}
 8002214:	01ffffff 	.word	0x01ffffff

08002218 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b094      	sub	sp, #80	; 0x50
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	603b      	str	r3, [r7, #0]
 8002224:	1dfb      	adds	r3, r7, #7
 8002226:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002228:	e0a3      	b.n	8002372 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800222a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800222c:	3301      	adds	r3, #1
 800222e:	d100      	bne.n	8002232 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002230:	e09f      	b.n	8002372 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002232:	f7fe fbcf 	bl	80009d4 <HAL_GetTick>
 8002236:	0002      	movs	r2, r0
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800223e:	429a      	cmp	r2, r3
 8002240:	d302      	bcc.n	8002248 <UART_WaitOnFlagUntilTimeout+0x30>
 8002242:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002244:	2b00      	cmp	r3, #0
 8002246:	d13d      	bne.n	80022c4 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002248:	f3ef 8310 	mrs	r3, PRIMASK
 800224c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800224e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002250:	647b      	str	r3, [r7, #68]	; 0x44
 8002252:	2301      	movs	r3, #1
 8002254:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002258:	f383 8810 	msr	PRIMASK, r3
}
 800225c:	46c0      	nop			; (mov r8, r8)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	494c      	ldr	r1, [pc, #304]	; (800239c <UART_WaitOnFlagUntilTimeout+0x184>)
 800226a:	400a      	ands	r2, r1
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002270:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002274:	f383 8810 	msr	PRIMASK, r3
}
 8002278:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800227a:	f3ef 8310 	mrs	r3, PRIMASK
 800227e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002282:	643b      	str	r3, [r7, #64]	; 0x40
 8002284:	2301      	movs	r3, #1
 8002286:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800228a:	f383 8810 	msr	PRIMASK, r3
}
 800228e:	46c0      	nop			; (mov r8, r8)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2101      	movs	r1, #1
 800229c:	438a      	bics	r2, r1
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022a6:	f383 8810 	msr	PRIMASK, r3
}
 80022aa:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2220      	movs	r2, #32
 80022b0:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2220      	movs	r2, #32
 80022b6:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2274      	movs	r2, #116	; 0x74
 80022bc:	2100      	movs	r1, #0
 80022be:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e067      	b.n	8002394 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2204      	movs	r2, #4
 80022cc:	4013      	ands	r3, r2
 80022ce:	d050      	beq.n	8002372 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	69da      	ldr	r2, [r3, #28]
 80022d6:	2380      	movs	r3, #128	; 0x80
 80022d8:	011b      	lsls	r3, r3, #4
 80022da:	401a      	ands	r2, r3
 80022dc:	2380      	movs	r3, #128	; 0x80
 80022de:	011b      	lsls	r3, r3, #4
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d146      	bne.n	8002372 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2280      	movs	r2, #128	; 0x80
 80022ea:	0112      	lsls	r2, r2, #4
 80022ec:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022ee:	f3ef 8310 	mrs	r3, PRIMASK
 80022f2:	613b      	str	r3, [r7, #16]
  return(result);
 80022f4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022f8:	2301      	movs	r3, #1
 80022fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	f383 8810 	msr	PRIMASK, r3
}
 8002302:	46c0      	nop			; (mov r8, r8)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4923      	ldr	r1, [pc, #140]	; (800239c <UART_WaitOnFlagUntilTimeout+0x184>)
 8002310:	400a      	ands	r2, r1
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002316:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	f383 8810 	msr	PRIMASK, r3
}
 800231e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002320:	f3ef 8310 	mrs	r3, PRIMASK
 8002324:	61fb      	str	r3, [r7, #28]
  return(result);
 8002326:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002328:	64bb      	str	r3, [r7, #72]	; 0x48
 800232a:	2301      	movs	r3, #1
 800232c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800232e:	6a3b      	ldr	r3, [r7, #32]
 8002330:	f383 8810 	msr	PRIMASK, r3
}
 8002334:	46c0      	nop			; (mov r8, r8)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2101      	movs	r1, #1
 8002342:	438a      	bics	r2, r1
 8002344:	609a      	str	r2, [r3, #8]
 8002346:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002348:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	f383 8810 	msr	PRIMASK, r3
}
 8002350:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2220      	movs	r2, #32
 8002356:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2220      	movs	r2, #32
 800235c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2280      	movs	r2, #128	; 0x80
 8002362:	2120      	movs	r1, #32
 8002364:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2274      	movs	r2, #116	; 0x74
 800236a:	2100      	movs	r1, #0
 800236c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e010      	b.n	8002394 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	69db      	ldr	r3, [r3, #28]
 8002378:	68ba      	ldr	r2, [r7, #8]
 800237a:	4013      	ands	r3, r2
 800237c:	68ba      	ldr	r2, [r7, #8]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	425a      	negs	r2, r3
 8002382:	4153      	adcs	r3, r2
 8002384:	b2db      	uxtb	r3, r3
 8002386:	001a      	movs	r2, r3
 8002388:	1dfb      	adds	r3, r7, #7
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	429a      	cmp	r2, r3
 800238e:	d100      	bne.n	8002392 <UART_WaitOnFlagUntilTimeout+0x17a>
 8002390:	e74b      	b.n	800222a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002392:	2300      	movs	r3, #0
}
 8002394:	0018      	movs	r0, r3
 8002396:	46bd      	mov	sp, r7
 8002398:	b014      	add	sp, #80	; 0x50
 800239a:	bd80      	pop	{r7, pc}
 800239c:	fffffe5f 	.word	0xfffffe5f

080023a0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023a6:	f3ef 8305 	mrs	r3, IPSR
 80023aa:	60bb      	str	r3, [r7, #8]
  return(result);
 80023ac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d109      	bne.n	80023c6 <osKernelInitialize+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023b2:	f3ef 8310 	mrs	r3, PRIMASK
 80023b6:	607b      	str	r3, [r7, #4]
  return(result);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d007      	beq.n	80023ce <osKernelInitialize+0x2e>
 80023be:	4b0d      	ldr	r3, [pc, #52]	; (80023f4 <osKernelInitialize+0x54>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d103      	bne.n	80023ce <osKernelInitialize+0x2e>
    stat = osErrorISR;
 80023c6:	2306      	movs	r3, #6
 80023c8:	425b      	negs	r3, r3
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	e00c      	b.n	80023e8 <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 80023ce:	4b09      	ldr	r3, [pc, #36]	; (80023f4 <osKernelInitialize+0x54>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d105      	bne.n	80023e2 <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80023d6:	4b07      	ldr	r3, [pc, #28]	; (80023f4 <osKernelInitialize+0x54>)
 80023d8:	2201      	movs	r2, #1
 80023da:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80023dc:	2300      	movs	r3, #0
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	e002      	b.n	80023e8 <osKernelInitialize+0x48>
    } else {
      stat = osError;
 80023e2:	2301      	movs	r3, #1
 80023e4:	425b      	negs	r3, r3
 80023e6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80023e8:	68fb      	ldr	r3, [r7, #12]
}
 80023ea:	0018      	movs	r0, r3
 80023ec:	46bd      	mov	sp, r7
 80023ee:	b004      	add	sp, #16
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	46c0      	nop			; (mov r8, r8)
 80023f4:	20000190 	.word	0x20000190

080023f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023fe:	f3ef 8305 	mrs	r3, IPSR
 8002402:	60bb      	str	r3, [r7, #8]
  return(result);
 8002404:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002406:	2b00      	cmp	r3, #0
 8002408:	d109      	bne.n	800241e <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800240a:	f3ef 8310 	mrs	r3, PRIMASK
 800240e:	607b      	str	r3, [r7, #4]
  return(result);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d007      	beq.n	8002426 <osKernelStart+0x2e>
 8002416:	4b0e      	ldr	r3, [pc, #56]	; (8002450 <osKernelStart+0x58>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2b02      	cmp	r3, #2
 800241c:	d103      	bne.n	8002426 <osKernelStart+0x2e>
    stat = osErrorISR;
 800241e:	2306      	movs	r3, #6
 8002420:	425b      	negs	r3, r3
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	e00e      	b.n	8002444 <osKernelStart+0x4c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002426:	4b0a      	ldr	r3, [pc, #40]	; (8002450 <osKernelStart+0x58>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d107      	bne.n	800243e <osKernelStart+0x46>
      KernelState = osKernelRunning;
 800242e:	4b08      	ldr	r3, [pc, #32]	; (8002450 <osKernelStart+0x58>)
 8002430:	2202      	movs	r2, #2
 8002432:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002434:	f001 f8d4 	bl	80035e0 <vTaskStartScheduler>
      stat = osOK;
 8002438:	2300      	movs	r3, #0
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	e002      	b.n	8002444 <osKernelStart+0x4c>
    } else {
      stat = osError;
 800243e:	2301      	movs	r3, #1
 8002440:	425b      	negs	r3, r3
 8002442:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002444:	68fb      	ldr	r3, [r7, #12]
}
 8002446:	0018      	movs	r0, r3
 8002448:	46bd      	mov	sp, r7
 800244a:	b004      	add	sp, #16
 800244c:	bd80      	pop	{r7, pc}
 800244e:	46c0      	nop			; (mov r8, r8)
 8002450:	20000190 	.word	0x20000190

08002454 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002454:	b5b0      	push	{r4, r5, r7, lr}
 8002456:	b090      	sub	sp, #64	; 0x40
 8002458:	af04      	add	r7, sp, #16
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002460:	2300      	movs	r3, #0
 8002462:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002464:	f3ef 8305 	mrs	r3, IPSR
 8002468:	61fb      	str	r3, [r7, #28]
  return(result);
 800246a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800246c:	2b00      	cmp	r3, #0
 800246e:	d000      	beq.n	8002472 <osThreadNew+0x1e>
 8002470:	e090      	b.n	8002594 <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002472:	f3ef 8310 	mrs	r3, PRIMASK
 8002476:	61bb      	str	r3, [r7, #24]
  return(result);
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d004      	beq.n	8002488 <osThreadNew+0x34>
 800247e:	4b48      	ldr	r3, [pc, #288]	; (80025a0 <osThreadNew+0x14c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2b02      	cmp	r3, #2
 8002484:	d100      	bne.n	8002488 <osThreadNew+0x34>
 8002486:	e085      	b.n	8002594 <osThreadNew+0x140>
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d100      	bne.n	8002490 <osThreadNew+0x3c>
 800248e:	e081      	b.n	8002594 <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 8002490:	2380      	movs	r3, #128	; 0x80
 8002492:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8002494:	2318      	movs	r3, #24
 8002496:	627b      	str	r3, [r7, #36]	; 0x24

    empty = '\0';
 8002498:	2117      	movs	r1, #23
 800249a:	187b      	adds	r3, r7, r1
 800249c:	2200      	movs	r2, #0
 800249e:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 80024a0:	187b      	adds	r3, r7, r1
 80024a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem   = -1;
 80024a4:	2301      	movs	r3, #1
 80024a6:	425b      	negs	r3, r3
 80024a8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d044      	beq.n	800253a <osThreadNew+0xe6>
      if (attr->name != NULL) {
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d002      	beq.n	80024be <osThreadNew+0x6a>
        name = attr->name;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d002      	beq.n	80024cc <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d007      	beq.n	80024e2 <osThreadNew+0x8e>
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	2b38      	cmp	r3, #56	; 0x38
 80024d6:	d804      	bhi.n	80024e2 <osThreadNew+0x8e>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	4013      	ands	r3, r2
 80024e0:	d001      	beq.n	80024e6 <osThreadNew+0x92>
        return (NULL);
 80024e2:	2300      	movs	r3, #0
 80024e4:	e057      	b.n	8002596 <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	089b      	lsrs	r3, r3, #2
 80024f4:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00e      	beq.n	800251c <osThreadNew+0xc8>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	2bbb      	cmp	r3, #187	; 0xbb
 8002504:	d90a      	bls.n	800251c <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800250a:	2b00      	cmp	r3, #0
 800250c:	d006      	beq.n	800251c <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d002      	beq.n	800251c <osThreadNew+0xc8>
        mem = 1;
 8002516:	2301      	movs	r3, #1
 8002518:	623b      	str	r3, [r7, #32]
 800251a:	e010      	b.n	800253e <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d10c      	bne.n	800253e <osThreadNew+0xea>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d108      	bne.n	800253e <osThreadNew+0xea>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d104      	bne.n	800253e <osThreadNew+0xea>
          mem = 0;
 8002534:	2300      	movs	r3, #0
 8002536:	623b      	str	r3, [r7, #32]
 8002538:	e001      	b.n	800253e <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 800253a:	2300      	movs	r3, #0
 800253c:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800253e:	6a3b      	ldr	r3, [r7, #32]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d112      	bne.n	800256a <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800254c:	68bd      	ldr	r5, [r7, #8]
 800254e:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8002550:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	9302      	str	r3, [sp, #8]
 8002556:	9201      	str	r2, [sp, #4]
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255a:	9300      	str	r3, [sp, #0]
 800255c:	002b      	movs	r3, r5
 800255e:	0022      	movs	r2, r4
 8002560:	f000 fda5 	bl	80030ae <xTaskCreateStatic>
 8002564:	0003      	movs	r3, r0
 8002566:	613b      	str	r3, [r7, #16]
 8002568:	e014      	b.n	8002594 <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 800256a:	6a3b      	ldr	r3, [r7, #32]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d111      	bne.n	8002594 <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002572:	b29a      	uxth	r2, r3
 8002574:	68bc      	ldr	r4, [r7, #8]
 8002576:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002578:	68f8      	ldr	r0, [r7, #12]
 800257a:	2310      	movs	r3, #16
 800257c:	18fb      	adds	r3, r7, r3
 800257e:	9301      	str	r3, [sp, #4]
 8002580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	0023      	movs	r3, r4
 8002586:	f000 fdd5 	bl	8003134 <xTaskCreate>
 800258a:	0003      	movs	r3, r0
 800258c:	2b01      	cmp	r3, #1
 800258e:	d001      	beq.n	8002594 <osThreadNew+0x140>
          hTask = NULL;
 8002590:	2300      	movs	r3, #0
 8002592:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002594:	693b      	ldr	r3, [r7, #16]
}
 8002596:	0018      	movs	r0, r3
 8002598:	46bd      	mov	sp, r7
 800259a:	b00c      	add	sp, #48	; 0x30
 800259c:	bdb0      	pop	{r4, r5, r7, pc}
 800259e:	46c0      	nop			; (mov r8, r8)
 80025a0:	20000190 	.word	0x20000190

080025a4 <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025b0:	f3ef 8305 	mrs	r3, IPSR
 80025b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80025b6:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d109      	bne.n	80025d0 <osThreadSuspend+0x2c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025bc:	f3ef 8310 	mrs	r3, PRIMASK
 80025c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d007      	beq.n	80025d8 <osThreadSuspend+0x34>
 80025c8:	4b0c      	ldr	r3, [pc, #48]	; (80025fc <osThreadSuspend+0x58>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d103      	bne.n	80025d8 <osThreadSuspend+0x34>
    stat = osErrorISR;
 80025d0:	2306      	movs	r3, #6
 80025d2:	425b      	negs	r3, r3
 80025d4:	617b      	str	r3, [r7, #20]
 80025d6:	e00c      	b.n	80025f2 <osThreadSuspend+0x4e>
  }
  else if (hTask == NULL) {
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d103      	bne.n	80025e6 <osThreadSuspend+0x42>
    stat = osErrorParameter;
 80025de:	2304      	movs	r3, #4
 80025e0:	425b      	negs	r3, r3
 80025e2:	617b      	str	r3, [r7, #20]
 80025e4:	e005      	b.n	80025f2 <osThreadSuspend+0x4e>
  }
  else {
    stat = osOK;
 80025e6:	2300      	movs	r3, #0
 80025e8:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	0018      	movs	r0, r3
 80025ee:	f000 ff13 	bl	8003418 <vTaskSuspend>
  }

  return (stat);
 80025f2:	697b      	ldr	r3, [r7, #20]
}
 80025f4:	0018      	movs	r0, r3
 80025f6:	46bd      	mov	sp, r7
 80025f8:	b006      	add	sp, #24
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	20000190 	.word	0x20000190

08002600 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800260c:	f3ef 8305 	mrs	r3, IPSR
 8002610:	60fb      	str	r3, [r7, #12]
  return(result);
 8002612:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002614:	2b00      	cmp	r3, #0
 8002616:	d109      	bne.n	800262c <osThreadResume+0x2c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002618:	f3ef 8310 	mrs	r3, PRIMASK
 800261c:	60bb      	str	r3, [r7, #8]
  return(result);
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d007      	beq.n	8002634 <osThreadResume+0x34>
 8002624:	4b0c      	ldr	r3, [pc, #48]	; (8002658 <osThreadResume+0x58>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2b02      	cmp	r3, #2
 800262a:	d103      	bne.n	8002634 <osThreadResume+0x34>
    stat = osErrorISR;
 800262c:	2306      	movs	r3, #6
 800262e:	425b      	negs	r3, r3
 8002630:	617b      	str	r3, [r7, #20]
 8002632:	e00c      	b.n	800264e <osThreadResume+0x4e>
  }
  else if (hTask == NULL) {
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d103      	bne.n	8002642 <osThreadResume+0x42>
    stat = osErrorParameter;
 800263a:	2304      	movs	r3, #4
 800263c:	425b      	negs	r3, r3
 800263e:	617b      	str	r3, [r7, #20]
 8002640:	e005      	b.n	800264e <osThreadResume+0x4e>
  }
  else {
    stat = osOK;
 8002642:	2300      	movs	r3, #0
 8002644:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	0018      	movs	r0, r3
 800264a:	f000 ff7b 	bl	8003544 <vTaskResume>
  }

  return (stat);
 800264e:	697b      	ldr	r3, [r7, #20]
}
 8002650:	0018      	movs	r0, r3
 8002652:	46bd      	mov	sp, r7
 8002654:	b006      	add	sp, #24
 8002656:	bd80      	pop	{r7, pc}
 8002658:	20000190 	.word	0x20000190

0800265c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002664:	f3ef 8305 	mrs	r3, IPSR
 8002668:	613b      	str	r3, [r7, #16]
  return(result);
 800266a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800266c:	2b00      	cmp	r3, #0
 800266e:	d109      	bne.n	8002684 <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002670:	f3ef 8310 	mrs	r3, PRIMASK
 8002674:	60fb      	str	r3, [r7, #12]
  return(result);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d007      	beq.n	800268c <osDelay+0x30>
 800267c:	4b0a      	ldr	r3, [pc, #40]	; (80026a8 <osDelay+0x4c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2b02      	cmp	r3, #2
 8002682:	d103      	bne.n	800268c <osDelay+0x30>
    stat = osErrorISR;
 8002684:	2306      	movs	r3, #6
 8002686:	425b      	negs	r3, r3
 8002688:	617b      	str	r3, [r7, #20]
 800268a:	e008      	b.n	800269e <osDelay+0x42>
  }
  else {
    stat = osOK;
 800268c:	2300      	movs	r3, #0
 800268e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <osDelay+0x42>
      vTaskDelay(ticks);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	0018      	movs	r0, r3
 800269a:	f000 fe97 	bl	80033cc <vTaskDelay>
    }
  }

  return (stat);
 800269e:	697b      	ldr	r3, [r7, #20]
}
 80026a0:	0018      	movs	r0, r3
 80026a2:	46bd      	mov	sp, r7
 80026a4:	b006      	add	sp, #24
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	20000190 	.word	0x20000190

080026ac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	4a06      	ldr	r2, [pc, #24]	; (80026d4 <vApplicationGetIdleTaskMemory+0x28>)
 80026bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	4a05      	ldr	r2, [pc, #20]	; (80026d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80026c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2280      	movs	r2, #128	; 0x80
 80026c8:	601a      	str	r2, [r3, #0]
}
 80026ca:	46c0      	nop			; (mov r8, r8)
 80026cc:	46bd      	mov	sp, r7
 80026ce:	b004      	add	sp, #16
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	46c0      	nop			; (mov r8, r8)
 80026d4:	20000194 	.word	0x20000194
 80026d8:	20000250 	.word	0x20000250

080026dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	4a06      	ldr	r2, [pc, #24]	; (8002704 <vApplicationGetTimerTaskMemory+0x28>)
 80026ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	4a05      	ldr	r2, [pc, #20]	; (8002708 <vApplicationGetTimerTaskMemory+0x2c>)
 80026f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2280      	movs	r2, #128	; 0x80
 80026f8:	0052      	lsls	r2, r2, #1
 80026fa:	601a      	str	r2, [r3, #0]
}
 80026fc:	46c0      	nop			; (mov r8, r8)
 80026fe:	46bd      	mov	sp, r7
 8002700:	b004      	add	sp, #16
 8002702:	bd80      	pop	{r7, pc}
 8002704:	20000450 	.word	0x20000450
 8002708:	2000050c 	.word	0x2000050c

0800270c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	3308      	adds	r3, #8
 8002718:	001a      	movs	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	4252      	negs	r2, r2
 8002724:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	3308      	adds	r3, #8
 800272a:	001a      	movs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3308      	adds	r3, #8
 8002734:	001a      	movs	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002740:	46c0      	nop			; (mov r8, r8)
 8002742:	46bd      	mov	sp, r7
 8002744:	b002      	add	sp, #8
 8002746:	bd80      	pop	{r7, pc}

08002748 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002756:	46c0      	nop			; (mov r8, r8)
 8002758:	46bd      	mov	sp, r7
 800275a:	b002      	add	sp, #8
 800275c:	bd80      	pop	{r7, pc}

0800275e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b084      	sub	sp, #16
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
 8002766:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	1c5a      	adds	r2, r3, #1
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	601a      	str	r2, [r3, #0]
}
 800279a:	46c0      	nop			; (mov r8, r8)
 800279c:	46bd      	mov	sp, r7
 800279e:	b004      	add	sp, #16
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b084      	sub	sp, #16
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
 80027aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	3301      	adds	r3, #1
 80027b6:	d103      	bne.n	80027c0 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	e00c      	b.n	80027da <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3308      	adds	r3, #8
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	e002      	b.n	80027ce <vListInsert+0x2c>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	60fb      	str	r3, [r7, #12]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d2f6      	bcs.n	80027c8 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	685a      	ldr	r2, [r3, #4]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	1c5a      	adds	r2, r3, #1
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	601a      	str	r2, [r3, #0]
}
 8002806:	46c0      	nop			; (mov r8, r8)
 8002808:	46bd      	mov	sp, r7
 800280a:	b004      	add	sp, #16
 800280c:	bd80      	pop	{r7, pc}

0800280e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b084      	sub	sp, #16
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	6892      	ldr	r2, [r2, #8]
 8002824:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	6852      	ldr	r2, [r2, #4]
 800282e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	429a      	cmp	r2, r3
 8002838:	d103      	bne.n	8002842 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	689a      	ldr	r2, [r3, #8]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	1e5a      	subs	r2, r3, #1
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
}
 8002856:	0018      	movs	r0, r3
 8002858:	46bd      	mov	sp, r7
 800285a:	b004      	add	sp, #16
 800285c:	bd80      	pop	{r7, pc}

0800285e <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800285e:	b580      	push	{r7, lr}
 8002860:	b084      	sub	sp, #16
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
 8002866:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <xQueueGenericReset+0x18>
 8002872:	b672      	cpsid	i
 8002874:	e7fe      	b.n	8002874 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8002876:	f001 fedb 	bl	8004630 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	434b      	muls	r3, r1
 8002888:	18d2      	adds	r2, r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a4:	1e59      	subs	r1, r3, #1
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	434b      	muls	r3, r1
 80028ac:	18d2      	adds	r2, r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2244      	movs	r2, #68	; 0x44
 80028b6:	21ff      	movs	r1, #255	; 0xff
 80028b8:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2245      	movs	r2, #69	; 0x45
 80028be:	21ff      	movs	r1, #255	; 0xff
 80028c0:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10d      	bne.n	80028e4 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d013      	beq.n	80028f8 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	3310      	adds	r3, #16
 80028d4:	0018      	movs	r0, r3
 80028d6:	f001 f8d9 	bl	8003a8c <xTaskRemoveFromEventList>
 80028da:	1e03      	subs	r3, r0, #0
 80028dc:	d00c      	beq.n	80028f8 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80028de:	f001 fe97 	bl	8004610 <vPortYield>
 80028e2:	e009      	b.n	80028f8 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	3310      	adds	r3, #16
 80028e8:	0018      	movs	r0, r3
 80028ea:	f7ff ff0f 	bl	800270c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	3324      	adds	r3, #36	; 0x24
 80028f2:	0018      	movs	r0, r3
 80028f4:	f7ff ff0a 	bl	800270c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80028f8:	f001 feac 	bl	8004654 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80028fc:	2301      	movs	r3, #1
}
 80028fe:	0018      	movs	r0, r3
 8002900:	46bd      	mov	sp, r7
 8002902:	b004      	add	sp, #16
 8002904:	bd80      	pop	{r7, pc}

08002906 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002906:	b590      	push	{r4, r7, lr}
 8002908:	b089      	sub	sp, #36	; 0x24
 800290a:	af02      	add	r7, sp, #8
 800290c:	60f8      	str	r0, [r7, #12]
 800290e:	60b9      	str	r1, [r7, #8]
 8002910:	607a      	str	r2, [r7, #4]
 8002912:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <xQueueGenericCreateStatic+0x18>
 800291a:	b672      	cpsid	i
 800291c:	e7fe      	b.n	800291c <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <xQueueGenericCreateStatic+0x22>
 8002924:	b672      	cpsid	i
 8002926:	e7fe      	b.n	8002926 <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d002      	beq.n	8002934 <xQueueGenericCreateStatic+0x2e>
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <xQueueGenericCreateStatic+0x32>
 8002934:	2301      	movs	r3, #1
 8002936:	e000      	b.n	800293a <xQueueGenericCreateStatic+0x34>
 8002938:	2300      	movs	r3, #0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <xQueueGenericCreateStatic+0x3c>
 800293e:	b672      	cpsid	i
 8002940:	e7fe      	b.n	8002940 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d102      	bne.n	800294e <xQueueGenericCreateStatic+0x48>
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <xQueueGenericCreateStatic+0x4c>
 800294e:	2301      	movs	r3, #1
 8002950:	e000      	b.n	8002954 <xQueueGenericCreateStatic+0x4e>
 8002952:	2300      	movs	r3, #0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d101      	bne.n	800295c <xQueueGenericCreateStatic+0x56>
 8002958:	b672      	cpsid	i
 800295a:	e7fe      	b.n	800295a <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800295c:	2350      	movs	r3, #80	; 0x50
 800295e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	2b50      	cmp	r3, #80	; 0x50
 8002964:	d001      	beq.n	800296a <xQueueGenericCreateStatic+0x64>
 8002966:	b672      	cpsid	i
 8002968:	e7fe      	b.n	8002968 <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00e      	beq.n	8002992 <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	2246      	movs	r2, #70	; 0x46
 8002978:	2101      	movs	r1, #1
 800297a:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800297c:	2328      	movs	r3, #40	; 0x28
 800297e:	18fb      	adds	r3, r7, r3
 8002980:	781c      	ldrb	r4, [r3, #0]
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	68b9      	ldr	r1, [r7, #8]
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	0023      	movs	r3, r4
 800298e:	f000 f805 	bl	800299c <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002992:	697b      	ldr	r3, [r7, #20]
	}
 8002994:	0018      	movs	r0, r3
 8002996:	46bd      	mov	sp, r7
 8002998:	b007      	add	sp, #28
 800299a:	bd90      	pop	{r4, r7, pc}

0800299c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
 80029a8:	001a      	movs	r2, r3
 80029aa:	1cfb      	adds	r3, r7, #3
 80029ac:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d103      	bne.n	80029bc <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	e002      	b.n	80029c2 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	68ba      	ldr	r2, [r7, #8]
 80029cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	2101      	movs	r1, #1
 80029d2:	0018      	movs	r0, r3
 80029d4:	f7ff ff43 	bl	800285e <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	1cfa      	adds	r2, r7, #3
 80029dc:	214c      	movs	r1, #76	; 0x4c
 80029de:	7812      	ldrb	r2, [r2, #0]
 80029e0:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80029e2:	46c0      	nop			; (mov r8, r8)
 80029e4:	46bd      	mov	sp, r7
 80029e6:	b004      	add	sp, #16
 80029e8:	bd80      	pop	{r7, pc}

080029ea <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b08a      	sub	sp, #40	; 0x28
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	60f8      	str	r0, [r7, #12]
 80029f2:	60b9      	str	r1, [r7, #8]
 80029f4:	607a      	str	r2, [r7, #4]
 80029f6:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80029f8:	2300      	movs	r3, #0
 80029fa:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8002a00:	6a3b      	ldr	r3, [r7, #32]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <xQueueGenericSend+0x20>
 8002a06:	b672      	cpsid	i
 8002a08:	e7fe      	b.n	8002a08 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d103      	bne.n	8002a18 <xQueueGenericSend+0x2e>
 8002a10:	6a3b      	ldr	r3, [r7, #32]
 8002a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d101      	bne.n	8002a1c <xQueueGenericSend+0x32>
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e000      	b.n	8002a1e <xQueueGenericSend+0x34>
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <xQueueGenericSend+0x3c>
 8002a22:	b672      	cpsid	i
 8002a24:	e7fe      	b.n	8002a24 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d103      	bne.n	8002a34 <xQueueGenericSend+0x4a>
 8002a2c:	6a3b      	ldr	r3, [r7, #32]
 8002a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d101      	bne.n	8002a38 <xQueueGenericSend+0x4e>
 8002a34:	2301      	movs	r3, #1
 8002a36:	e000      	b.n	8002a3a <xQueueGenericSend+0x50>
 8002a38:	2300      	movs	r3, #0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <xQueueGenericSend+0x58>
 8002a3e:	b672      	cpsid	i
 8002a40:	e7fe      	b.n	8002a40 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a42:	f001 f9c1 	bl	8003dc8 <xTaskGetSchedulerState>
 8002a46:	1e03      	subs	r3, r0, #0
 8002a48:	d102      	bne.n	8002a50 <xQueueGenericSend+0x66>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d101      	bne.n	8002a54 <xQueueGenericSend+0x6a>
 8002a50:	2301      	movs	r3, #1
 8002a52:	e000      	b.n	8002a56 <xQueueGenericSend+0x6c>
 8002a54:	2300      	movs	r3, #0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <xQueueGenericSend+0x74>
 8002a5a:	b672      	cpsid	i
 8002a5c:	e7fe      	b.n	8002a5c <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002a5e:	f001 fde7 	bl	8004630 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a62:	6a3b      	ldr	r3, [r7, #32]
 8002a64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a66:	6a3b      	ldr	r3, [r7, #32]
 8002a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d302      	bcc.n	8002a74 <xQueueGenericSend+0x8a>
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d11e      	bne.n	8002ab2 <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	68b9      	ldr	r1, [r7, #8]
 8002a78:	6a3b      	ldr	r3, [r7, #32]
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	f000 f99f 	bl	8002dbe <prvCopyDataToQueue>
 8002a80:	0003      	movs	r3, r0
 8002a82:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a84:	6a3b      	ldr	r3, [r7, #32]
 8002a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d009      	beq.n	8002aa0 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a8c:	6a3b      	ldr	r3, [r7, #32]
 8002a8e:	3324      	adds	r3, #36	; 0x24
 8002a90:	0018      	movs	r0, r3
 8002a92:	f000 fffb 	bl	8003a8c <xTaskRemoveFromEventList>
 8002a96:	1e03      	subs	r3, r0, #0
 8002a98:	d007      	beq.n	8002aaa <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002a9a:	f001 fdb9 	bl	8004610 <vPortYield>
 8002a9e:	e004      	b.n	8002aaa <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002aa6:	f001 fdb3 	bl	8004610 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002aaa:	f001 fdd3 	bl	8004654 <vPortExitCritical>
				return pdPASS;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e05b      	b.n	8002b6a <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d103      	bne.n	8002ac0 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002ab8:	f001 fdcc 	bl	8004654 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002abc:	2300      	movs	r3, #0
 8002abe:	e054      	b.n	8002b6a <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d106      	bne.n	8002ad4 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ac6:	2314      	movs	r3, #20
 8002ac8:	18fb      	adds	r3, r7, r3
 8002aca:	0018      	movs	r0, r3
 8002acc:	f001 f83a 	bl	8003b44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002ad4:	f001 fdbe 	bl	8004654 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ad8:	f000 fde0 	bl	800369c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002adc:	f001 fda8 	bl	8004630 <vPortEnterCritical>
 8002ae0:	6a3b      	ldr	r3, [r7, #32]
 8002ae2:	2244      	movs	r2, #68	; 0x44
 8002ae4:	5c9b      	ldrb	r3, [r3, r2]
 8002ae6:	b25b      	sxtb	r3, r3
 8002ae8:	3301      	adds	r3, #1
 8002aea:	d103      	bne.n	8002af4 <xQueueGenericSend+0x10a>
 8002aec:	6a3b      	ldr	r3, [r7, #32]
 8002aee:	2244      	movs	r2, #68	; 0x44
 8002af0:	2100      	movs	r1, #0
 8002af2:	5499      	strb	r1, [r3, r2]
 8002af4:	6a3b      	ldr	r3, [r7, #32]
 8002af6:	2245      	movs	r2, #69	; 0x45
 8002af8:	5c9b      	ldrb	r3, [r3, r2]
 8002afa:	b25b      	sxtb	r3, r3
 8002afc:	3301      	adds	r3, #1
 8002afe:	d103      	bne.n	8002b08 <xQueueGenericSend+0x11e>
 8002b00:	6a3b      	ldr	r3, [r7, #32]
 8002b02:	2245      	movs	r2, #69	; 0x45
 8002b04:	2100      	movs	r1, #0
 8002b06:	5499      	strb	r1, [r3, r2]
 8002b08:	f001 fda4 	bl	8004654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b0c:	1d3a      	adds	r2, r7, #4
 8002b0e:	2314      	movs	r3, #20
 8002b10:	18fb      	adds	r3, r7, r3
 8002b12:	0011      	movs	r1, r2
 8002b14:	0018      	movs	r0, r3
 8002b16:	f001 f829 	bl	8003b6c <xTaskCheckForTimeOut>
 8002b1a:	1e03      	subs	r3, r0, #0
 8002b1c:	d11e      	bne.n	8002b5c <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002b1e:	6a3b      	ldr	r3, [r7, #32]
 8002b20:	0018      	movs	r0, r3
 8002b22:	f000 fa51 	bl	8002fc8 <prvIsQueueFull>
 8002b26:	1e03      	subs	r3, r0, #0
 8002b28:	d011      	beq.n	8002b4e <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002b2a:	6a3b      	ldr	r3, [r7, #32]
 8002b2c:	3310      	adds	r3, #16
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	0011      	movs	r1, r2
 8002b32:	0018      	movs	r0, r3
 8002b34:	f000 ff66 	bl	8003a04 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002b38:	6a3b      	ldr	r3, [r7, #32]
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	f000 f9d0 	bl	8002ee0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002b40:	f000 fdb8 	bl	80036b4 <xTaskResumeAll>
 8002b44:	1e03      	subs	r3, r0, #0
 8002b46:	d18a      	bne.n	8002a5e <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8002b48:	f001 fd62 	bl	8004610 <vPortYield>
 8002b4c:	e787      	b.n	8002a5e <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002b4e:	6a3b      	ldr	r3, [r7, #32]
 8002b50:	0018      	movs	r0, r3
 8002b52:	f000 f9c5 	bl	8002ee0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002b56:	f000 fdad 	bl	80036b4 <xTaskResumeAll>
 8002b5a:	e780      	b.n	8002a5e <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002b5c:	6a3b      	ldr	r3, [r7, #32]
 8002b5e:	0018      	movs	r0, r3
 8002b60:	f000 f9be 	bl	8002ee0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002b64:	f000 fda6 	bl	80036b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002b68:	2300      	movs	r3, #0
		}
	}
}
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	b00a      	add	sp, #40	; 0x28
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002b72:	b590      	push	{r4, r7, lr}
 8002b74:	b089      	sub	sp, #36	; 0x24
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	60f8      	str	r0, [r7, #12]
 8002b7a:	60b9      	str	r1, [r7, #8]
 8002b7c:	607a      	str	r2, [r7, #4]
 8002b7e:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <xQueueGenericSendFromISR+0x1c>
 8002b8a:	b672      	cpsid	i
 8002b8c:	e7fe      	b.n	8002b8c <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d103      	bne.n	8002b9c <xQueueGenericSendFromISR+0x2a>
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d101      	bne.n	8002ba0 <xQueueGenericSendFromISR+0x2e>
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e000      	b.n	8002ba2 <xQueueGenericSendFromISR+0x30>
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <xQueueGenericSendFromISR+0x38>
 8002ba6:	b672      	cpsid	i
 8002ba8:	e7fe      	b.n	8002ba8 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d103      	bne.n	8002bb8 <xQueueGenericSendFromISR+0x46>
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d101      	bne.n	8002bbc <xQueueGenericSendFromISR+0x4a>
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e000      	b.n	8002bbe <xQueueGenericSendFromISR+0x4c>
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <xQueueGenericSendFromISR+0x54>
 8002bc2:	b672      	cpsid	i
 8002bc4:	e7fe      	b.n	8002bc4 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002bc6:	f001 fd5d 	bl	8004684 <ulSetInterruptMaskFromISR>
 8002bca:	0003      	movs	r3, r0
 8002bcc:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d302      	bcc.n	8002be0 <xQueueGenericSendFromISR+0x6e>
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d12e      	bne.n	8002c3e <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002be0:	2413      	movs	r4, #19
 8002be2:	193b      	adds	r3, r7, r4
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	2145      	movs	r1, #69	; 0x45
 8002be8:	5c52      	ldrb	r2, [r2, r1]
 8002bea:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	68b9      	ldr	r1, [r7, #8]
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	f000 f8e3 	bl	8002dbe <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002bf8:	193b      	adds	r3, r7, r4
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	b25b      	sxtb	r3, r3
 8002bfe:	3301      	adds	r3, #1
 8002c00:	d111      	bne.n	8002c26 <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d016      	beq.n	8002c38 <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	3324      	adds	r3, #36	; 0x24
 8002c0e:	0018      	movs	r0, r3
 8002c10:	f000 ff3c 	bl	8003a8c <xTaskRemoveFromEventList>
 8002c14:	1e03      	subs	r3, r0, #0
 8002c16:	d00f      	beq.n	8002c38 <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00c      	beq.n	8002c38 <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	e008      	b.n	8002c38 <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002c26:	2313      	movs	r3, #19
 8002c28:	18fb      	adds	r3, r7, r3
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	b259      	sxtb	r1, r3
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	2245      	movs	r2, #69	; 0x45
 8002c36:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	61fb      	str	r3, [r7, #28]
		{
 8002c3c:	e001      	b.n	8002c42 <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	0018      	movs	r0, r3
 8002c46:	f001 fd23 	bl	8004690 <vClearInterruptMaskFromISR>

	return xReturn;
 8002c4a:	69fb      	ldr	r3, [r7, #28]
}
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	b009      	add	sp, #36	; 0x24
 8002c52:	bd90      	pop	{r4, r7, pc}

08002c54 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b08a      	sub	sp, #40	; 0x28
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002c60:	2300      	movs	r3, #0
 8002c62:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002c68:	6a3b      	ldr	r3, [r7, #32]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <xQueueReceive+0x1e>
 8002c6e:	b672      	cpsid	i
 8002c70:	e7fe      	b.n	8002c70 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d103      	bne.n	8002c80 <xQueueReceive+0x2c>
 8002c78:	6a3b      	ldr	r3, [r7, #32]
 8002c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <xQueueReceive+0x30>
 8002c80:	2301      	movs	r3, #1
 8002c82:	e000      	b.n	8002c86 <xQueueReceive+0x32>
 8002c84:	2300      	movs	r3, #0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <xQueueReceive+0x3a>
 8002c8a:	b672      	cpsid	i
 8002c8c:	e7fe      	b.n	8002c8c <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c8e:	f001 f89b 	bl	8003dc8 <xTaskGetSchedulerState>
 8002c92:	1e03      	subs	r3, r0, #0
 8002c94:	d102      	bne.n	8002c9c <xQueueReceive+0x48>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <xQueueReceive+0x4c>
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e000      	b.n	8002ca2 <xQueueReceive+0x4e>
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <xQueueReceive+0x56>
 8002ca6:	b672      	cpsid	i
 8002ca8:	e7fe      	b.n	8002ca8 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002caa:	f001 fcc1 	bl	8004630 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002cae:	6a3b      	ldr	r3, [r7, #32]
 8002cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb2:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d01a      	beq.n	8002cf0 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002cba:	68ba      	ldr	r2, [r7, #8]
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	0011      	movs	r1, r2
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	f000 f8e7 	bl	8002e94 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	1e5a      	subs	r2, r3, #1
 8002cca:	6a3b      	ldr	r3, [r7, #32]
 8002ccc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cce:	6a3b      	ldr	r3, [r7, #32]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d008      	beq.n	8002ce8 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cd6:	6a3b      	ldr	r3, [r7, #32]
 8002cd8:	3310      	adds	r3, #16
 8002cda:	0018      	movs	r0, r3
 8002cdc:	f000 fed6 	bl	8003a8c <xTaskRemoveFromEventList>
 8002ce0:	1e03      	subs	r3, r0, #0
 8002ce2:	d001      	beq.n	8002ce8 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002ce4:	f001 fc94 	bl	8004610 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002ce8:	f001 fcb4 	bl	8004654 <vPortExitCritical>
				return pdPASS;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e062      	b.n	8002db6 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d103      	bne.n	8002cfe <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002cf6:	f001 fcad 	bl	8004654 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	e05b      	b.n	8002db6 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d106      	bne.n	8002d12 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d04:	2314      	movs	r3, #20
 8002d06:	18fb      	adds	r3, r7, r3
 8002d08:	0018      	movs	r0, r3
 8002d0a:	f000 ff1b 	bl	8003b44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d12:	f001 fc9f 	bl	8004654 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d16:	f000 fcc1 	bl	800369c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d1a:	f001 fc89 	bl	8004630 <vPortEnterCritical>
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	2244      	movs	r2, #68	; 0x44
 8002d22:	5c9b      	ldrb	r3, [r3, r2]
 8002d24:	b25b      	sxtb	r3, r3
 8002d26:	3301      	adds	r3, #1
 8002d28:	d103      	bne.n	8002d32 <xQueueReceive+0xde>
 8002d2a:	6a3b      	ldr	r3, [r7, #32]
 8002d2c:	2244      	movs	r2, #68	; 0x44
 8002d2e:	2100      	movs	r1, #0
 8002d30:	5499      	strb	r1, [r3, r2]
 8002d32:	6a3b      	ldr	r3, [r7, #32]
 8002d34:	2245      	movs	r2, #69	; 0x45
 8002d36:	5c9b      	ldrb	r3, [r3, r2]
 8002d38:	b25b      	sxtb	r3, r3
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	d103      	bne.n	8002d46 <xQueueReceive+0xf2>
 8002d3e:	6a3b      	ldr	r3, [r7, #32]
 8002d40:	2245      	movs	r2, #69	; 0x45
 8002d42:	2100      	movs	r1, #0
 8002d44:	5499      	strb	r1, [r3, r2]
 8002d46:	f001 fc85 	bl	8004654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d4a:	1d3a      	adds	r2, r7, #4
 8002d4c:	2314      	movs	r3, #20
 8002d4e:	18fb      	adds	r3, r7, r3
 8002d50:	0011      	movs	r1, r2
 8002d52:	0018      	movs	r0, r3
 8002d54:	f000 ff0a 	bl	8003b6c <xTaskCheckForTimeOut>
 8002d58:	1e03      	subs	r3, r0, #0
 8002d5a:	d11e      	bne.n	8002d9a <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
 8002d5e:	0018      	movs	r0, r3
 8002d60:	f000 f91c 	bl	8002f9c <prvIsQueueEmpty>
 8002d64:	1e03      	subs	r3, r0, #0
 8002d66:	d011      	beq.n	8002d8c <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002d68:	6a3b      	ldr	r3, [r7, #32]
 8002d6a:	3324      	adds	r3, #36	; 0x24
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	0011      	movs	r1, r2
 8002d70:	0018      	movs	r0, r3
 8002d72:	f000 fe47 	bl	8003a04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002d76:	6a3b      	ldr	r3, [r7, #32]
 8002d78:	0018      	movs	r0, r3
 8002d7a:	f000 f8b1 	bl	8002ee0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002d7e:	f000 fc99 	bl	80036b4 <xTaskResumeAll>
 8002d82:	1e03      	subs	r3, r0, #0
 8002d84:	d191      	bne.n	8002caa <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8002d86:	f001 fc43 	bl	8004610 <vPortYield>
 8002d8a:	e78e      	b.n	8002caa <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
 8002d8e:	0018      	movs	r0, r3
 8002d90:	f000 f8a6 	bl	8002ee0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002d94:	f000 fc8e 	bl	80036b4 <xTaskResumeAll>
 8002d98:	e787      	b.n	8002caa <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002d9a:	6a3b      	ldr	r3, [r7, #32]
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	f000 f89f 	bl	8002ee0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002da2:	f000 fc87 	bl	80036b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002da6:	6a3b      	ldr	r3, [r7, #32]
 8002da8:	0018      	movs	r0, r3
 8002daa:	f000 f8f7 	bl	8002f9c <prvIsQueueEmpty>
 8002dae:	1e03      	subs	r3, r0, #0
 8002db0:	d100      	bne.n	8002db4 <xQueueReceive+0x160>
 8002db2:	e77a      	b.n	8002caa <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002db4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002db6:	0018      	movs	r0, r3
 8002db8:	46bd      	mov	sp, r7
 8002dba:	b00a      	add	sp, #40	; 0x28
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b086      	sub	sp, #24
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	60f8      	str	r0, [r7, #12]
 8002dc6:	60b9      	str	r1, [r7, #8]
 8002dc8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d10e      	bne.n	8002dfa <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d14e      	bne.n	8002e82 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	0018      	movs	r0, r3
 8002dea:	f001 f809 	bl	8003e00 <xTaskPriorityDisinherit>
 8002dee:	0003      	movs	r3, r0
 8002df0:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	605a      	str	r2, [r3, #4]
 8002df8:	e043      	b.n	8002e82 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d119      	bne.n	8002e34 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6898      	ldr	r0, [r3, #8]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	0019      	movs	r1, r3
 8002e0c:	f001 fe74 	bl	8004af8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e18:	18d2      	adds	r2, r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	689a      	ldr	r2, [r3, #8]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d32b      	bcc.n	8002e82 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	609a      	str	r2, [r3, #8]
 8002e32:	e026      	b.n	8002e82 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	68d8      	ldr	r0, [r3, #12]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	0019      	movs	r1, r3
 8002e40:	f001 fe5a 	bl	8004af8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	68da      	ldr	r2, [r3, #12]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4c:	425b      	negs	r3, r3
 8002e4e:	18d2      	adds	r2, r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	68da      	ldr	r2, [r3, #12]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d207      	bcs.n	8002e70 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	685a      	ldr	r2, [r3, #4]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e68:	425b      	negs	r3, r3
 8002e6a:	18d2      	adds	r2, r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d105      	bne.n	8002e82 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d002      	beq.n	8002e82 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1c5a      	adds	r2, r3, #1
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002e8a:	697b      	ldr	r3, [r7, #20]
}
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	b006      	add	sp, #24
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d018      	beq.n	8002ed8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68da      	ldr	r2, [r3, #12]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	18d2      	adds	r2, r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68da      	ldr	r2, [r3, #12]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d303      	bcc.n	8002ec8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68d9      	ldr	r1, [r3, #12]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	f001 fe10 	bl	8004af8 <memcpy>
	}
}
 8002ed8:	46c0      	nop			; (mov r8, r8)
 8002eda:	46bd      	mov	sp, r7
 8002edc:	b002      	add	sp, #8
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002ee8:	f001 fba2 	bl	8004630 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002eec:	230f      	movs	r3, #15
 8002eee:	18fb      	adds	r3, r7, r3
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	2145      	movs	r1, #69	; 0x45
 8002ef4:	5c52      	ldrb	r2, [r2, r1]
 8002ef6:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ef8:	e013      	b.n	8002f22 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d016      	beq.n	8002f30 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	3324      	adds	r3, #36	; 0x24
 8002f06:	0018      	movs	r0, r3
 8002f08:	f000 fdc0 	bl	8003a8c <xTaskRemoveFromEventList>
 8002f0c:	1e03      	subs	r3, r0, #0
 8002f0e:	d001      	beq.n	8002f14 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002f10:	f000 fe7c 	bl	8003c0c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002f14:	210f      	movs	r1, #15
 8002f16:	187b      	adds	r3, r7, r1
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	b2da      	uxtb	r2, r3
 8002f1e:	187b      	adds	r3, r7, r1
 8002f20:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f22:	230f      	movs	r3, #15
 8002f24:	18fb      	adds	r3, r7, r3
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	b25b      	sxtb	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	dce5      	bgt.n	8002efa <prvUnlockQueue+0x1a>
 8002f2e:	e000      	b.n	8002f32 <prvUnlockQueue+0x52>
					break;
 8002f30:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2245      	movs	r2, #69	; 0x45
 8002f36:	21ff      	movs	r1, #255	; 0xff
 8002f38:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8002f3a:	f001 fb8b 	bl	8004654 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002f3e:	f001 fb77 	bl	8004630 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002f42:	230e      	movs	r3, #14
 8002f44:	18fb      	adds	r3, r7, r3
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	2144      	movs	r1, #68	; 0x44
 8002f4a:	5c52      	ldrb	r2, [r2, r1]
 8002f4c:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f4e:	e013      	b.n	8002f78 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d016      	beq.n	8002f86 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	3310      	adds	r3, #16
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	f000 fd95 	bl	8003a8c <xTaskRemoveFromEventList>
 8002f62:	1e03      	subs	r3, r0, #0
 8002f64:	d001      	beq.n	8002f6a <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8002f66:	f000 fe51 	bl	8003c0c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002f6a:	210e      	movs	r1, #14
 8002f6c:	187b      	adds	r3, r7, r1
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	3b01      	subs	r3, #1
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	187b      	adds	r3, r7, r1
 8002f76:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f78:	230e      	movs	r3, #14
 8002f7a:	18fb      	adds	r3, r7, r3
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	b25b      	sxtb	r3, r3
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	dce5      	bgt.n	8002f50 <prvUnlockQueue+0x70>
 8002f84:	e000      	b.n	8002f88 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8002f86:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2244      	movs	r2, #68	; 0x44
 8002f8c:	21ff      	movs	r1, #255	; 0xff
 8002f8e:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8002f90:	f001 fb60 	bl	8004654 <vPortExitCritical>
}
 8002f94:	46c0      	nop			; (mov r8, r8)
 8002f96:	46bd      	mov	sp, r7
 8002f98:	b004      	add	sp, #16
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002fa4:	f001 fb44 	bl	8004630 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d102      	bne.n	8002fb6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	e001      	b.n	8002fba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002fba:	f001 fb4b 	bl	8004654 <vPortExitCritical>

	return xReturn;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
}
 8002fc0:	0018      	movs	r0, r3
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	b004      	add	sp, #16
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002fd0:	f001 fb2e 	bl	8004630 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d102      	bne.n	8002fe6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	60fb      	str	r3, [r7, #12]
 8002fe4:	e001      	b.n	8002fea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002fea:	f001 fb33 	bl	8004654 <vPortExitCritical>

	return xReturn;
 8002fee:	68fb      	ldr	r3, [r7, #12]
}
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	b004      	add	sp, #16
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003002:	2300      	movs	r3, #0
 8003004:	60fb      	str	r3, [r7, #12]
 8003006:	e015      	b.n	8003034 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003008:	4b0e      	ldr	r3, [pc, #56]	; (8003044 <vQueueAddToRegistry+0x4c>)
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	00d2      	lsls	r2, r2, #3
 800300e:	58d3      	ldr	r3, [r2, r3]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d10c      	bne.n	800302e <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003014:	4b0b      	ldr	r3, [pc, #44]	; (8003044 <vQueueAddToRegistry+0x4c>)
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	00d2      	lsls	r2, r2, #3
 800301a:	6839      	ldr	r1, [r7, #0]
 800301c:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800301e:	4a09      	ldr	r2, [pc, #36]	; (8003044 <vQueueAddToRegistry+0x4c>)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	18d3      	adds	r3, r2, r3
 8003026:	3304      	adds	r3, #4
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800302c:	e006      	b.n	800303c <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	3301      	adds	r3, #1
 8003032:	60fb      	str	r3, [r7, #12]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2b07      	cmp	r3, #7
 8003038:	d9e6      	bls.n	8003008 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800303a:	46c0      	nop			; (mov r8, r8)
 800303c:	46c0      	nop			; (mov r8, r8)
 800303e:	46bd      	mov	sp, r7
 8003040:	b004      	add	sp, #16
 8003042:	bd80      	pop	{r7, pc}
 8003044:	2000090c 	.word	0x2000090c

08003048 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003058:	f001 faea 	bl	8004630 <vPortEnterCritical>
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	2244      	movs	r2, #68	; 0x44
 8003060:	5c9b      	ldrb	r3, [r3, r2]
 8003062:	b25b      	sxtb	r3, r3
 8003064:	3301      	adds	r3, #1
 8003066:	d103      	bne.n	8003070 <vQueueWaitForMessageRestricted+0x28>
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	2244      	movs	r2, #68	; 0x44
 800306c:	2100      	movs	r1, #0
 800306e:	5499      	strb	r1, [r3, r2]
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	2245      	movs	r2, #69	; 0x45
 8003074:	5c9b      	ldrb	r3, [r3, r2]
 8003076:	b25b      	sxtb	r3, r3
 8003078:	3301      	adds	r3, #1
 800307a:	d103      	bne.n	8003084 <vQueueWaitForMessageRestricted+0x3c>
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	2245      	movs	r2, #69	; 0x45
 8003080:	2100      	movs	r1, #0
 8003082:	5499      	strb	r1, [r3, r2]
 8003084:	f001 fae6 	bl	8004654 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800308c:	2b00      	cmp	r3, #0
 800308e:	d106      	bne.n	800309e <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	3324      	adds	r3, #36	; 0x24
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	68b9      	ldr	r1, [r7, #8]
 8003098:	0018      	movs	r0, r3
 800309a:	f000 fcd1 	bl	8003a40 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	0018      	movs	r0, r3
 80030a2:	f7ff ff1d 	bl	8002ee0 <prvUnlockQueue>
	}
 80030a6:	46c0      	nop			; (mov r8, r8)
 80030a8:	46bd      	mov	sp, r7
 80030aa:	b006      	add	sp, #24
 80030ac:	bd80      	pop	{r7, pc}

080030ae <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80030ae:	b590      	push	{r4, r7, lr}
 80030b0:	b08d      	sub	sp, #52	; 0x34
 80030b2:	af04      	add	r7, sp, #16
 80030b4:	60f8      	str	r0, [r7, #12]
 80030b6:	60b9      	str	r1, [r7, #8]
 80030b8:	607a      	str	r2, [r7, #4]
 80030ba:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80030bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <xTaskCreateStatic+0x18>
 80030c2:	b672      	cpsid	i
 80030c4:	e7fe      	b.n	80030c4 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 80030c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d101      	bne.n	80030d0 <xTaskCreateStatic+0x22>
 80030cc:	b672      	cpsid	i
 80030ce:	e7fe      	b.n	80030ce <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80030d0:	23bc      	movs	r3, #188	; 0xbc
 80030d2:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	2bbc      	cmp	r3, #188	; 0xbc
 80030d8:	d001      	beq.n	80030de <xTaskCreateStatic+0x30>
 80030da:	b672      	cpsid	i
 80030dc:	e7fe      	b.n	80030dc <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80030de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d020      	beq.n	8003126 <xTaskCreateStatic+0x78>
 80030e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d01d      	beq.n	8003126 <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80030ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ec:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030f2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	22b9      	movs	r2, #185	; 0xb9
 80030f8:	2102      	movs	r1, #2
 80030fa:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80030fc:	683c      	ldr	r4, [r7, #0]
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	68b9      	ldr	r1, [r7, #8]
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	2300      	movs	r3, #0
 8003106:	9303      	str	r3, [sp, #12]
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	9302      	str	r3, [sp, #8]
 800310c:	2318      	movs	r3, #24
 800310e:	18fb      	adds	r3, r7, r3
 8003110:	9301      	str	r3, [sp, #4]
 8003112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	0023      	movs	r3, r4
 8003118:	f000 f858 	bl	80031cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	0018      	movs	r0, r3
 8003120:	f000 f8ec 	bl	80032fc <prvAddNewTaskToReadyList>
 8003124:	e001      	b.n	800312a <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 8003126:	2300      	movs	r3, #0
 8003128:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800312a:	69bb      	ldr	r3, [r7, #24]
	}
 800312c:	0018      	movs	r0, r3
 800312e:	46bd      	mov	sp, r7
 8003130:	b009      	add	sp, #36	; 0x24
 8003132:	bd90      	pop	{r4, r7, pc}

08003134 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003134:	b590      	push	{r4, r7, lr}
 8003136:	b08d      	sub	sp, #52	; 0x34
 8003138:	af04      	add	r7, sp, #16
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	603b      	str	r3, [r7, #0]
 8003140:	1dbb      	adds	r3, r7, #6
 8003142:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003144:	1dbb      	adds	r3, r7, #6
 8003146:	881b      	ldrh	r3, [r3, #0]
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	0018      	movs	r0, r3
 800314c:	f001 fb08 	bl	8004760 <pvPortMalloc>
 8003150:	0003      	movs	r3, r0
 8003152:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d010      	beq.n	800317c <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800315a:	20bc      	movs	r0, #188	; 0xbc
 800315c:	f001 fb00 	bl	8004760 <pvPortMalloc>
 8003160:	0003      	movs	r3, r0
 8003162:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	631a      	str	r2, [r3, #48]	; 0x30
 8003170:	e006      	b.n	8003180 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	0018      	movs	r0, r3
 8003176:	f001 fb99 	bl	80048ac <vPortFree>
 800317a:	e001      	b.n	8003180 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800317c:	2300      	movs	r3, #0
 800317e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d01a      	beq.n	80031bc <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	22b9      	movs	r2, #185	; 0xb9
 800318a:	2100      	movs	r1, #0
 800318c:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800318e:	1dbb      	adds	r3, r7, #6
 8003190:	881a      	ldrh	r2, [r3, #0]
 8003192:	683c      	ldr	r4, [r7, #0]
 8003194:	68b9      	ldr	r1, [r7, #8]
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	2300      	movs	r3, #0
 800319a:	9303      	str	r3, [sp, #12]
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	9302      	str	r3, [sp, #8]
 80031a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031a2:	9301      	str	r3, [sp, #4]
 80031a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a6:	9300      	str	r3, [sp, #0]
 80031a8:	0023      	movs	r3, r4
 80031aa:	f000 f80f 	bl	80031cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	0018      	movs	r0, r3
 80031b2:	f000 f8a3 	bl	80032fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80031b6:	2301      	movs	r3, #1
 80031b8:	61bb      	str	r3, [r7, #24]
 80031ba:	e002      	b.n	80031c2 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80031bc:	2301      	movs	r3, #1
 80031be:	425b      	negs	r3, r3
 80031c0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80031c2:	69bb      	ldr	r3, [r7, #24]
	}
 80031c4:	0018      	movs	r0, r3
 80031c6:	46bd      	mov	sp, r7
 80031c8:	b009      	add	sp, #36	; 0x24
 80031ca:	bd90      	pop	{r4, r7, pc}

080031cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
 80031d8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80031da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031dc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	001a      	movs	r2, r3
 80031e4:	21a5      	movs	r1, #165	; 0xa5
 80031e6:	f001 fc90 	bl	8004b0a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80031ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	493e      	ldr	r1, [pc, #248]	; (80032ec <prvInitialiseNewTask+0x120>)
 80031f2:	468c      	mov	ip, r1
 80031f4:	4463      	add	r3, ip
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	18d3      	adds	r3, r2, r3
 80031fa:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	2207      	movs	r2, #7
 8003200:	4393      	bics	r3, r2
 8003202:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	2207      	movs	r2, #7
 8003208:	4013      	ands	r3, r2
 800320a:	d001      	beq.n	8003210 <prvInitialiseNewTask+0x44>
 800320c:	b672      	cpsid	i
 800320e:	e7fe      	b.n	800320e <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003210:	2300      	movs	r3, #0
 8003212:	617b      	str	r3, [r7, #20]
 8003214:	e013      	b.n	800323e <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003216:	68ba      	ldr	r2, [r7, #8]
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	18d3      	adds	r3, r2, r3
 800321c:	7818      	ldrb	r0, [r3, #0]
 800321e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003220:	2134      	movs	r1, #52	; 0x34
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	18d3      	adds	r3, r2, r3
 8003226:	185b      	adds	r3, r3, r1
 8003228:	1c02      	adds	r2, r0, #0
 800322a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800322c:	68ba      	ldr	r2, [r7, #8]
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	18d3      	adds	r3, r2, r3
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d006      	beq.n	8003246 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	3301      	adds	r3, #1
 800323c:	617b      	str	r3, [r7, #20]
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	2b0f      	cmp	r3, #15
 8003242:	d9e8      	bls.n	8003216 <prvInitialiseNewTask+0x4a>
 8003244:	e000      	b.n	8003248 <prvInitialiseNewTask+0x7c>
		{
			break;
 8003246:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324a:	2243      	movs	r2, #67	; 0x43
 800324c:	2100      	movs	r1, #0
 800324e:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003250:	6a3b      	ldr	r3, [r7, #32]
 8003252:	2b37      	cmp	r3, #55	; 0x37
 8003254:	d901      	bls.n	800325a <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003256:	2337      	movs	r3, #55	; 0x37
 8003258:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800325a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325c:	6a3a      	ldr	r2, [r7, #32]
 800325e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003262:	6a3a      	ldr	r2, [r7, #32]
 8003264:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003268:	2200      	movs	r2, #0
 800326a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800326c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326e:	3304      	adds	r3, #4
 8003270:	0018      	movs	r0, r3
 8003272:	f7ff fa69 	bl	8002748 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003278:	3318      	adds	r3, #24
 800327a:	0018      	movs	r0, r3
 800327c:	f7ff fa64 	bl	8002748 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003282:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003284:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003286:	6a3b      	ldr	r3, [r7, #32]
 8003288:	2238      	movs	r2, #56	; 0x38
 800328a:	1ad2      	subs	r2, r2, r3
 800328c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800328e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003292:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003294:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003298:	22b4      	movs	r2, #180	; 0xb4
 800329a:	2100      	movs	r1, #0
 800329c:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800329e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a0:	22b8      	movs	r2, #184	; 0xb8
 80032a2:	2100      	movs	r1, #0
 80032a4:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80032a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a8:	3354      	adds	r3, #84	; 0x54
 80032aa:	2260      	movs	r2, #96	; 0x60
 80032ac:	2100      	movs	r1, #0
 80032ae:	0018      	movs	r0, r3
 80032b0:	f001 fc2b 	bl	8004b0a <memset>
 80032b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b6:	4a0e      	ldr	r2, [pc, #56]	; (80032f0 <prvInitialiseNewTask+0x124>)
 80032b8:	659a      	str	r2, [r3, #88]	; 0x58
 80032ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032bc:	4a0d      	ldr	r2, [pc, #52]	; (80032f4 <prvInitialiseNewTask+0x128>)
 80032be:	65da      	str	r2, [r3, #92]	; 0x5c
 80032c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c2:	4a0d      	ldr	r2, [pc, #52]	; (80032f8 <prvInitialiseNewTask+0x12c>)
 80032c4:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80032c6:	683a      	ldr	r2, [r7, #0]
 80032c8:	68f9      	ldr	r1, [r7, #12]
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	0018      	movs	r0, r3
 80032ce:	f001 f917 	bl	8004500 <pxPortInitialiseStack>
 80032d2:	0002      	movs	r2, r0
 80032d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80032d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d002      	beq.n	80032e4 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80032de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032e2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80032e4:	46c0      	nop			; (mov r8, r8)
 80032e6:	46bd      	mov	sp, r7
 80032e8:	b006      	add	sp, #24
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	3fffffff 	.word	0x3fffffff
 80032f0:	08004e10 	.word	0x08004e10
 80032f4:	08004e30 	.word	0x08004e30
 80032f8:	08004df0 	.word	0x08004df0

080032fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003304:	f001 f994 	bl	8004630 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003308:	4b2a      	ldr	r3, [pc, #168]	; (80033b4 <prvAddNewTaskToReadyList+0xb8>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	1c5a      	adds	r2, r3, #1
 800330e:	4b29      	ldr	r3, [pc, #164]	; (80033b4 <prvAddNewTaskToReadyList+0xb8>)
 8003310:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8003312:	4b29      	ldr	r3, [pc, #164]	; (80033b8 <prvAddNewTaskToReadyList+0xbc>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d109      	bne.n	800332e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800331a:	4b27      	ldr	r3, [pc, #156]	; (80033b8 <prvAddNewTaskToReadyList+0xbc>)
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003320:	4b24      	ldr	r3, [pc, #144]	; (80033b4 <prvAddNewTaskToReadyList+0xb8>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d110      	bne.n	800334a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003328:	f000 fc8a 	bl	8003c40 <prvInitialiseTaskLists>
 800332c:	e00d      	b.n	800334a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800332e:	4b23      	ldr	r3, [pc, #140]	; (80033bc <prvAddNewTaskToReadyList+0xc0>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d109      	bne.n	800334a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003336:	4b20      	ldr	r3, [pc, #128]	; (80033b8 <prvAddNewTaskToReadyList+0xbc>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003340:	429a      	cmp	r2, r3
 8003342:	d802      	bhi.n	800334a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003344:	4b1c      	ldr	r3, [pc, #112]	; (80033b8 <prvAddNewTaskToReadyList+0xbc>)
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800334a:	4b1d      	ldr	r3, [pc, #116]	; (80033c0 <prvAddNewTaskToReadyList+0xc4>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	1c5a      	adds	r2, r3, #1
 8003350:	4b1b      	ldr	r3, [pc, #108]	; (80033c0 <prvAddNewTaskToReadyList+0xc4>)
 8003352:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003354:	4b1a      	ldr	r3, [pc, #104]	; (80033c0 <prvAddNewTaskToReadyList+0xc4>)
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003360:	4b18      	ldr	r3, [pc, #96]	; (80033c4 <prvAddNewTaskToReadyList+0xc8>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	429a      	cmp	r2, r3
 8003366:	d903      	bls.n	8003370 <prvAddNewTaskToReadyList+0x74>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800336c:	4b15      	ldr	r3, [pc, #84]	; (80033c4 <prvAddNewTaskToReadyList+0xc8>)
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003374:	0013      	movs	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	189b      	adds	r3, r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4a12      	ldr	r2, [pc, #72]	; (80033c8 <prvAddNewTaskToReadyList+0xcc>)
 800337e:	189a      	adds	r2, r3, r2
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	3304      	adds	r3, #4
 8003384:	0019      	movs	r1, r3
 8003386:	0010      	movs	r0, r2
 8003388:	f7ff f9e9 	bl	800275e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800338c:	f001 f962 	bl	8004654 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003390:	4b0a      	ldr	r3, [pc, #40]	; (80033bc <prvAddNewTaskToReadyList+0xc0>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d008      	beq.n	80033aa <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003398:	4b07      	ldr	r3, [pc, #28]	; (80033b8 <prvAddNewTaskToReadyList+0xbc>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d201      	bcs.n	80033aa <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80033a6:	f001 f933 	bl	8004610 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80033aa:	46c0      	nop			; (mov r8, r8)
 80033ac:	46bd      	mov	sp, r7
 80033ae:	b002      	add	sp, #8
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	46c0      	nop			; (mov r8, r8)
 80033b4:	20000e20 	.word	0x20000e20
 80033b8:	2000094c 	.word	0x2000094c
 80033bc:	20000e2c 	.word	0x20000e2c
 80033c0:	20000e3c 	.word	0x20000e3c
 80033c4:	20000e28 	.word	0x20000e28
 80033c8:	20000950 	.word	0x20000950

080033cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80033d4:	2300      	movs	r3, #0
 80033d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d010      	beq.n	8003400 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80033de:	4b0d      	ldr	r3, [pc, #52]	; (8003414 <vTaskDelay+0x48>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <vTaskDelay+0x1e>
 80033e6:	b672      	cpsid	i
 80033e8:	e7fe      	b.n	80033e8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80033ea:	f000 f957 	bl	800369c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2100      	movs	r1, #0
 80033f2:	0018      	movs	r0, r3
 80033f4:	f000 fd60 	bl	8003eb8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80033f8:	f000 f95c 	bl	80036b4 <xTaskResumeAll>
 80033fc:	0003      	movs	r3, r0
 80033fe:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8003406:	f001 f903 	bl	8004610 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800340a:	46c0      	nop			; (mov r8, r8)
 800340c:	46bd      	mov	sp, r7
 800340e:	b004      	add	sp, #16
 8003410:	bd80      	pop	{r7, pc}
 8003412:	46c0      	nop			; (mov r8, r8)
 8003414:	20000e48 	.word	0x20000e48

08003418 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003420:	f001 f906 	bl	8004630 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d102      	bne.n	8003430 <vTaskSuspend+0x18>
 800342a:	4b29      	ldr	r3, [pc, #164]	; (80034d0 <vTaskSuspend+0xb8>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	e000      	b.n	8003432 <vTaskSuspend+0x1a>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	3304      	adds	r3, #4
 8003438:	0018      	movs	r0, r3
 800343a:	f7ff f9e8 	bl	800280e <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003442:	2b00      	cmp	r3, #0
 8003444:	d004      	beq.n	8003450 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	3318      	adds	r3, #24
 800344a:	0018      	movs	r0, r3
 800344c:	f7ff f9df 	bl	800280e <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	1d1a      	adds	r2, r3, #4
 8003454:	4b1f      	ldr	r3, [pc, #124]	; (80034d4 <vTaskSuspend+0xbc>)
 8003456:	0011      	movs	r1, r2
 8003458:	0018      	movs	r0, r3
 800345a:	f7ff f980 	bl	800275e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	22b8      	movs	r2, #184	; 0xb8
 8003462:	5c9b      	ldrb	r3, [r3, r2]
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b01      	cmp	r3, #1
 8003468:	d103      	bne.n	8003472 <vTaskSuspend+0x5a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	22b8      	movs	r2, #184	; 0xb8
 800346e:	2100      	movs	r1, #0
 8003470:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8003472:	f001 f8ef 	bl	8004654 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8003476:	4b18      	ldr	r3, [pc, #96]	; (80034d8 <vTaskSuspend+0xc0>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d005      	beq.n	800348a <vTaskSuspend+0x72>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800347e:	f001 f8d7 	bl	8004630 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8003482:	f000 fc7d 	bl	8003d80 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8003486:	f001 f8e5 	bl	8004654 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800348a:	4b11      	ldr	r3, [pc, #68]	; (80034d0 <vTaskSuspend+0xb8>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	429a      	cmp	r2, r3
 8003492:	d118      	bne.n	80034c6 <vTaskSuspend+0xae>
		{
			if( xSchedulerRunning != pdFALSE )
 8003494:	4b10      	ldr	r3, [pc, #64]	; (80034d8 <vTaskSuspend+0xc0>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d008      	beq.n	80034ae <vTaskSuspend+0x96>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800349c:	4b0f      	ldr	r3, [pc, #60]	; (80034dc <vTaskSuspend+0xc4>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d001      	beq.n	80034a8 <vTaskSuspend+0x90>
 80034a4:	b672      	cpsid	i
 80034a6:	e7fe      	b.n	80034a6 <vTaskSuspend+0x8e>
				portYIELD_WITHIN_API();
 80034a8:	f001 f8b2 	bl	8004610 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80034ac:	e00b      	b.n	80034c6 <vTaskSuspend+0xae>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 80034ae:	4b09      	ldr	r3, [pc, #36]	; (80034d4 <vTaskSuspend+0xbc>)
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	4b0b      	ldr	r3, [pc, #44]	; (80034e0 <vTaskSuspend+0xc8>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d103      	bne.n	80034c2 <vTaskSuspend+0xaa>
					pxCurrentTCB = NULL;
 80034ba:	4b05      	ldr	r3, [pc, #20]	; (80034d0 <vTaskSuspend+0xb8>)
 80034bc:	2200      	movs	r2, #0
 80034be:	601a      	str	r2, [r3, #0]
	}
 80034c0:	e001      	b.n	80034c6 <vTaskSuspend+0xae>
					vTaskSwitchContext();
 80034c2:	f000 fa45 	bl	8003950 <vTaskSwitchContext>
	}
 80034c6:	46c0      	nop			; (mov r8, r8)
 80034c8:	46bd      	mov	sp, r7
 80034ca:	b004      	add	sp, #16
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	46c0      	nop			; (mov r8, r8)
 80034d0:	2000094c 	.word	0x2000094c
 80034d4:	20000e0c 	.word	0x20000e0c
 80034d8:	20000e2c 	.word	0x20000e2c
 80034dc:	20000e48 	.word	0x20000e48
 80034e0:	20000e20 	.word	0x20000e20

080034e4 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80034ec:	2300      	movs	r3, #0
 80034ee:	60fb      	str	r3, [r7, #12]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	60bb      	str	r3, [r7, #8]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <prvTaskIsTaskSuspended+0x1a>
 80034fa:	b672      	cpsid	i
 80034fc:	e7fe      	b.n	80034fc <prvTaskIsTaskSuspended+0x18>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	695a      	ldr	r2, [r3, #20]
 8003502:	4b0e      	ldr	r3, [pc, #56]	; (800353c <prvTaskIsTaskSuspended+0x58>)
 8003504:	429a      	cmp	r2, r3
 8003506:	d101      	bne.n	800350c <prvTaskIsTaskSuspended+0x28>
 8003508:	2301      	movs	r3, #1
 800350a:	e000      	b.n	800350e <prvTaskIsTaskSuspended+0x2a>
 800350c:	2300      	movs	r3, #0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00f      	beq.n	8003532 <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003516:	4b0a      	ldr	r3, [pc, #40]	; (8003540 <prvTaskIsTaskSuspended+0x5c>)
 8003518:	429a      	cmp	r2, r3
 800351a:	d00a      	beq.n	8003532 <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <prvTaskIsTaskSuspended+0x44>
 8003524:	2301      	movs	r3, #1
 8003526:	e000      	b.n	800352a <prvTaskIsTaskSuspended+0x46>
 8003528:	2300      	movs	r3, #0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 800352e:	2301      	movs	r3, #1
 8003530:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003532:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003534:	0018      	movs	r0, r3
 8003536:	46bd      	mov	sp, r7
 8003538:	b004      	add	sp, #16
 800353a:	bd80      	pop	{r7, pc}
 800353c:	20000e0c 	.word	0x20000e0c
 8003540:	20000de0 	.word	0x20000de0

08003544 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <vTaskResume+0x16>
 8003556:	b672      	cpsid	i
 8003558:	e7fe      	b.n	8003558 <vTaskResume+0x14>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d034      	beq.n	80035ca <vTaskResume+0x86>
 8003560:	4b1c      	ldr	r3, [pc, #112]	; (80035d4 <vTaskResume+0x90>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	429a      	cmp	r2, r3
 8003568:	d02f      	beq.n	80035ca <vTaskResume+0x86>
		{
			taskENTER_CRITICAL();
 800356a:	f001 f861 	bl	8004630 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	0018      	movs	r0, r3
 8003572:	f7ff ffb7 	bl	80034e4 <prvTaskIsTaskSuspended>
 8003576:	1e03      	subs	r3, r0, #0
 8003578:	d025      	beq.n	80035c6 <vTaskResume+0x82>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	3304      	adds	r3, #4
 800357e:	0018      	movs	r0, r3
 8003580:	f7ff f945 	bl	800280e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003588:	4b13      	ldr	r3, [pc, #76]	; (80035d8 <vTaskResume+0x94>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	429a      	cmp	r2, r3
 800358e:	d903      	bls.n	8003598 <vTaskResume+0x54>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003594:	4b10      	ldr	r3, [pc, #64]	; (80035d8 <vTaskResume+0x94>)
 8003596:	601a      	str	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800359c:	0013      	movs	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	189b      	adds	r3, r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	4a0d      	ldr	r2, [pc, #52]	; (80035dc <vTaskResume+0x98>)
 80035a6:	189a      	adds	r2, r3, r2
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	3304      	adds	r3, #4
 80035ac:	0019      	movs	r1, r3
 80035ae:	0010      	movs	r0, r2
 80035b0:	f7ff f8d5 	bl	800275e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b8:	4b06      	ldr	r3, [pc, #24]	; (80035d4 <vTaskResume+0x90>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035be:	429a      	cmp	r2, r3
 80035c0:	d301      	bcc.n	80035c6 <vTaskResume+0x82>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80035c2:	f001 f825 	bl	8004610 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80035c6:	f001 f845 	bl	8004654 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80035ca:	46c0      	nop			; (mov r8, r8)
 80035cc:	46bd      	mov	sp, r7
 80035ce:	b004      	add	sp, #16
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	46c0      	nop			; (mov r8, r8)
 80035d4:	2000094c 	.word	0x2000094c
 80035d8:	20000e28 	.word	0x20000e28
 80035dc:	20000950 	.word	0x20000950

080035e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80035e0:	b590      	push	{r4, r7, lr}
 80035e2:	b089      	sub	sp, #36	; 0x24
 80035e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80035e6:	2300      	movs	r3, #0
 80035e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80035ea:	2300      	movs	r3, #0
 80035ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80035ee:	003a      	movs	r2, r7
 80035f0:	1d39      	adds	r1, r7, #4
 80035f2:	2308      	movs	r3, #8
 80035f4:	18fb      	adds	r3, r7, r3
 80035f6:	0018      	movs	r0, r3
 80035f8:	f7ff f858 	bl	80026ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80035fc:	683c      	ldr	r4, [r7, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	68ba      	ldr	r2, [r7, #8]
 8003602:	491e      	ldr	r1, [pc, #120]	; (800367c <vTaskStartScheduler+0x9c>)
 8003604:	481e      	ldr	r0, [pc, #120]	; (8003680 <vTaskStartScheduler+0xa0>)
 8003606:	9202      	str	r2, [sp, #8]
 8003608:	9301      	str	r3, [sp, #4]
 800360a:	2300      	movs	r3, #0
 800360c:	9300      	str	r3, [sp, #0]
 800360e:	2300      	movs	r3, #0
 8003610:	0022      	movs	r2, r4
 8003612:	f7ff fd4c 	bl	80030ae <xTaskCreateStatic>
 8003616:	0002      	movs	r2, r0
 8003618:	4b1a      	ldr	r3, [pc, #104]	; (8003684 <vTaskStartScheduler+0xa4>)
 800361a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800361c:	4b19      	ldr	r3, [pc, #100]	; (8003684 <vTaskStartScheduler+0xa4>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d002      	beq.n	800362a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003624:	2301      	movs	r3, #1
 8003626:	60fb      	str	r3, [r7, #12]
 8003628:	e001      	b.n	800362e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800362a:	2300      	movs	r3, #0
 800362c:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d103      	bne.n	800363c <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8003634:	f000 fc94 	bl	8003f60 <xTimerCreateTimerTask>
 8003638:	0003      	movs	r3, r0
 800363a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d113      	bne.n	800366a <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8003642:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003644:	4b10      	ldr	r3, [pc, #64]	; (8003688 <vTaskStartScheduler+0xa8>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	3354      	adds	r3, #84	; 0x54
 800364a:	001a      	movs	r2, r3
 800364c:	4b0f      	ldr	r3, [pc, #60]	; (800368c <vTaskStartScheduler+0xac>)
 800364e:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003650:	4b0f      	ldr	r3, [pc, #60]	; (8003690 <vTaskStartScheduler+0xb0>)
 8003652:	2201      	movs	r2, #1
 8003654:	4252      	negs	r2, r2
 8003656:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003658:	4b0e      	ldr	r3, [pc, #56]	; (8003694 <vTaskStartScheduler+0xb4>)
 800365a:	2201      	movs	r2, #1
 800365c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800365e:	4b0e      	ldr	r3, [pc, #56]	; (8003698 <vTaskStartScheduler+0xb8>)
 8003660:	2200      	movs	r2, #0
 8003662:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003664:	f000 ffb0 	bl	80045c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003668:	e004      	b.n	8003674 <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	3301      	adds	r3, #1
 800366e:	d101      	bne.n	8003674 <vTaskStartScheduler+0x94>
 8003670:	b672      	cpsid	i
 8003672:	e7fe      	b.n	8003672 <vTaskStartScheduler+0x92>
}
 8003674:	46c0      	nop			; (mov r8, r8)
 8003676:	46bd      	mov	sp, r7
 8003678:	b005      	add	sp, #20
 800367a:	bd90      	pop	{r4, r7, pc}
 800367c:	08004d08 	.word	0x08004d08
 8003680:	08003c21 	.word	0x08003c21
 8003684:	20000e44 	.word	0x20000e44
 8003688:	2000094c 	.word	0x2000094c
 800368c:	2000002c 	.word	0x2000002c
 8003690:	20000e40 	.word	0x20000e40
 8003694:	20000e2c 	.word	0x20000e2c
 8003698:	20000e24 	.word	0x20000e24

0800369c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80036a0:	4b03      	ldr	r3, [pc, #12]	; (80036b0 <vTaskSuspendAll+0x14>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	1c5a      	adds	r2, r3, #1
 80036a6:	4b02      	ldr	r3, [pc, #8]	; (80036b0 <vTaskSuspendAll+0x14>)
 80036a8:	601a      	str	r2, [r3, #0]
}
 80036aa:	46c0      	nop			; (mov r8, r8)
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	20000e48 	.word	0x20000e48

080036b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80036ba:	2300      	movs	r3, #0
 80036bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80036be:	2300      	movs	r3, #0
 80036c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80036c2:	4b3a      	ldr	r3, [pc, #232]	; (80037ac <xTaskResumeAll+0xf8>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <xTaskResumeAll+0x1a>
 80036ca:	b672      	cpsid	i
 80036cc:	e7fe      	b.n	80036cc <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80036ce:	f000 ffaf 	bl	8004630 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80036d2:	4b36      	ldr	r3, [pc, #216]	; (80037ac <xTaskResumeAll+0xf8>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	1e5a      	subs	r2, r3, #1
 80036d8:	4b34      	ldr	r3, [pc, #208]	; (80037ac <xTaskResumeAll+0xf8>)
 80036da:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036dc:	4b33      	ldr	r3, [pc, #204]	; (80037ac <xTaskResumeAll+0xf8>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d15b      	bne.n	800379c <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80036e4:	4b32      	ldr	r3, [pc, #200]	; (80037b0 <xTaskResumeAll+0xfc>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d057      	beq.n	800379c <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036ec:	e02f      	b.n	800374e <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80036ee:	4b31      	ldr	r3, [pc, #196]	; (80037b4 <xTaskResumeAll+0x100>)
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	3318      	adds	r3, #24
 80036fa:	0018      	movs	r0, r3
 80036fc:	f7ff f887 	bl	800280e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	3304      	adds	r3, #4
 8003704:	0018      	movs	r0, r3
 8003706:	f7ff f882 	bl	800280e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800370e:	4b2a      	ldr	r3, [pc, #168]	; (80037b8 <xTaskResumeAll+0x104>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	429a      	cmp	r2, r3
 8003714:	d903      	bls.n	800371e <xTaskResumeAll+0x6a>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800371a:	4b27      	ldr	r3, [pc, #156]	; (80037b8 <xTaskResumeAll+0x104>)
 800371c:	601a      	str	r2, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003722:	0013      	movs	r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	189b      	adds	r3, r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	4a24      	ldr	r2, [pc, #144]	; (80037bc <xTaskResumeAll+0x108>)
 800372c:	189a      	adds	r2, r3, r2
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	3304      	adds	r3, #4
 8003732:	0019      	movs	r1, r3
 8003734:	0010      	movs	r0, r2
 8003736:	f7ff f812 	bl	800275e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800373e:	4b20      	ldr	r3, [pc, #128]	; (80037c0 <xTaskResumeAll+0x10c>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003744:	429a      	cmp	r2, r3
 8003746:	d302      	bcc.n	800374e <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8003748:	4b1e      	ldr	r3, [pc, #120]	; (80037c4 <xTaskResumeAll+0x110>)
 800374a:	2201      	movs	r2, #1
 800374c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800374e:	4b19      	ldr	r3, [pc, #100]	; (80037b4 <xTaskResumeAll+0x100>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1cb      	bne.n	80036ee <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800375c:	f000 fb10 	bl	8003d80 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003760:	4b19      	ldr	r3, [pc, #100]	; (80037c8 <xTaskResumeAll+0x114>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00f      	beq.n	800378c <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800376c:	f000 f83c 	bl	80037e8 <xTaskIncrementTick>
 8003770:	1e03      	subs	r3, r0, #0
 8003772:	d002      	beq.n	800377a <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8003774:	4b13      	ldr	r3, [pc, #76]	; (80037c4 <xTaskResumeAll+0x110>)
 8003776:	2201      	movs	r2, #1
 8003778:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	3b01      	subs	r3, #1
 800377e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1f2      	bne.n	800376c <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8003786:	4b10      	ldr	r3, [pc, #64]	; (80037c8 <xTaskResumeAll+0x114>)
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800378c:	4b0d      	ldr	r3, [pc, #52]	; (80037c4 <xTaskResumeAll+0x110>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d003      	beq.n	800379c <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003794:	2301      	movs	r3, #1
 8003796:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003798:	f000 ff3a 	bl	8004610 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800379c:	f000 ff5a 	bl	8004654 <vPortExitCritical>

	return xAlreadyYielded;
 80037a0:	68bb      	ldr	r3, [r7, #8]
}
 80037a2:	0018      	movs	r0, r3
 80037a4:	46bd      	mov	sp, r7
 80037a6:	b004      	add	sp, #16
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	46c0      	nop			; (mov r8, r8)
 80037ac:	20000e48 	.word	0x20000e48
 80037b0:	20000e20 	.word	0x20000e20
 80037b4:	20000de0 	.word	0x20000de0
 80037b8:	20000e28 	.word	0x20000e28
 80037bc:	20000950 	.word	0x20000950
 80037c0:	2000094c 	.word	0x2000094c
 80037c4:	20000e34 	.word	0x20000e34
 80037c8:	20000e30 	.word	0x20000e30

080037cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80037d2:	4b04      	ldr	r3, [pc, #16]	; (80037e4 <xTaskGetTickCount+0x18>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80037d8:	687b      	ldr	r3, [r7, #4]
}
 80037da:	0018      	movs	r0, r3
 80037dc:	46bd      	mov	sp, r7
 80037de:	b002      	add	sp, #8
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	46c0      	nop			; (mov r8, r8)
 80037e4:	20000e24 	.word	0x20000e24

080037e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80037ee:	2300      	movs	r3, #0
 80037f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037f2:	4b4c      	ldr	r3, [pc, #304]	; (8003924 <xTaskIncrementTick+0x13c>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d000      	beq.n	80037fc <xTaskIncrementTick+0x14>
 80037fa:	e083      	b.n	8003904 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80037fc:	4b4a      	ldr	r3, [pc, #296]	; (8003928 <xTaskIncrementTick+0x140>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	3301      	adds	r3, #1
 8003802:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003804:	4b48      	ldr	r3, [pc, #288]	; (8003928 <xTaskIncrementTick+0x140>)
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d117      	bne.n	8003840 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8003810:	4b46      	ldr	r3, [pc, #280]	; (800392c <xTaskIncrementTick+0x144>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <xTaskIncrementTick+0x36>
 800381a:	b672      	cpsid	i
 800381c:	e7fe      	b.n	800381c <xTaskIncrementTick+0x34>
 800381e:	4b43      	ldr	r3, [pc, #268]	; (800392c <xTaskIncrementTick+0x144>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	60fb      	str	r3, [r7, #12]
 8003824:	4b42      	ldr	r3, [pc, #264]	; (8003930 <xTaskIncrementTick+0x148>)
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	4b40      	ldr	r3, [pc, #256]	; (800392c <xTaskIncrementTick+0x144>)
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	4b40      	ldr	r3, [pc, #256]	; (8003930 <xTaskIncrementTick+0x148>)
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	601a      	str	r2, [r3, #0]
 8003832:	4b40      	ldr	r3, [pc, #256]	; (8003934 <xTaskIncrementTick+0x14c>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	1c5a      	adds	r2, r3, #1
 8003838:	4b3e      	ldr	r3, [pc, #248]	; (8003934 <xTaskIncrementTick+0x14c>)
 800383a:	601a      	str	r2, [r3, #0]
 800383c:	f000 faa0 	bl	8003d80 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003840:	4b3d      	ldr	r3, [pc, #244]	; (8003938 <xTaskIncrementTick+0x150>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	429a      	cmp	r2, r3
 8003848:	d34e      	bcc.n	80038e8 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800384a:	4b38      	ldr	r3, [pc, #224]	; (800392c <xTaskIncrementTick+0x144>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d101      	bne.n	8003858 <xTaskIncrementTick+0x70>
 8003854:	2301      	movs	r3, #1
 8003856:	e000      	b.n	800385a <xTaskIncrementTick+0x72>
 8003858:	2300      	movs	r3, #0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d004      	beq.n	8003868 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800385e:	4b36      	ldr	r3, [pc, #216]	; (8003938 <xTaskIncrementTick+0x150>)
 8003860:	2201      	movs	r2, #1
 8003862:	4252      	negs	r2, r2
 8003864:	601a      	str	r2, [r3, #0]
					break;
 8003866:	e03f      	b.n	80038e8 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003868:	4b30      	ldr	r3, [pc, #192]	; (800392c <xTaskIncrementTick+0x144>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	429a      	cmp	r2, r3
 800387e:	d203      	bcs.n	8003888 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003880:	4b2d      	ldr	r3, [pc, #180]	; (8003938 <xTaskIncrementTick+0x150>)
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	601a      	str	r2, [r3, #0]
						break;
 8003886:	e02f      	b.n	80038e8 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	3304      	adds	r3, #4
 800388c:	0018      	movs	r0, r3
 800388e:	f7fe ffbe 	bl	800280e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003896:	2b00      	cmp	r3, #0
 8003898:	d004      	beq.n	80038a4 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	3318      	adds	r3, #24
 800389e:	0018      	movs	r0, r3
 80038a0:	f7fe ffb5 	bl	800280e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a8:	4b24      	ldr	r3, [pc, #144]	; (800393c <xTaskIncrementTick+0x154>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d903      	bls.n	80038b8 <xTaskIncrementTick+0xd0>
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b4:	4b21      	ldr	r3, [pc, #132]	; (800393c <xTaskIncrementTick+0x154>)
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038bc:	0013      	movs	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	189b      	adds	r3, r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	4a1e      	ldr	r2, [pc, #120]	; (8003940 <xTaskIncrementTick+0x158>)
 80038c6:	189a      	adds	r2, r3, r2
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	3304      	adds	r3, #4
 80038cc:	0019      	movs	r1, r3
 80038ce:	0010      	movs	r0, r2
 80038d0:	f7fe ff45 	bl	800275e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d8:	4b1a      	ldr	r3, [pc, #104]	; (8003944 <xTaskIncrementTick+0x15c>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038de:	429a      	cmp	r2, r3
 80038e0:	d3b3      	bcc.n	800384a <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 80038e2:	2301      	movs	r3, #1
 80038e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038e6:	e7b0      	b.n	800384a <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80038e8:	4b16      	ldr	r3, [pc, #88]	; (8003944 <xTaskIncrementTick+0x15c>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ee:	4914      	ldr	r1, [pc, #80]	; (8003940 <xTaskIncrementTick+0x158>)
 80038f0:	0013      	movs	r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	189b      	adds	r3, r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	585b      	ldr	r3, [r3, r1]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d907      	bls.n	800390e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80038fe:	2301      	movs	r3, #1
 8003900:	617b      	str	r3, [r7, #20]
 8003902:	e004      	b.n	800390e <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003904:	4b10      	ldr	r3, [pc, #64]	; (8003948 <xTaskIncrementTick+0x160>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	1c5a      	adds	r2, r3, #1
 800390a:	4b0f      	ldr	r3, [pc, #60]	; (8003948 <xTaskIncrementTick+0x160>)
 800390c:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800390e:	4b0f      	ldr	r3, [pc, #60]	; (800394c <xTaskIncrementTick+0x164>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8003916:	2301      	movs	r3, #1
 8003918:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800391a:	697b      	ldr	r3, [r7, #20]
}
 800391c:	0018      	movs	r0, r3
 800391e:	46bd      	mov	sp, r7
 8003920:	b006      	add	sp, #24
 8003922:	bd80      	pop	{r7, pc}
 8003924:	20000e48 	.word	0x20000e48
 8003928:	20000e24 	.word	0x20000e24
 800392c:	20000dd8 	.word	0x20000dd8
 8003930:	20000ddc 	.word	0x20000ddc
 8003934:	20000e38 	.word	0x20000e38
 8003938:	20000e40 	.word	0x20000e40
 800393c:	20000e28 	.word	0x20000e28
 8003940:	20000950 	.word	0x20000950
 8003944:	2000094c 	.word	0x2000094c
 8003948:	20000e30 	.word	0x20000e30
 800394c:	20000e34 	.word	0x20000e34

08003950 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003956:	4b25      	ldr	r3, [pc, #148]	; (80039ec <vTaskSwitchContext+0x9c>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d003      	beq.n	8003966 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800395e:	4b24      	ldr	r3, [pc, #144]	; (80039f0 <vTaskSwitchContext+0xa0>)
 8003960:	2201      	movs	r2, #1
 8003962:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003964:	e03d      	b.n	80039e2 <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 8003966:	4b22      	ldr	r3, [pc, #136]	; (80039f0 <vTaskSwitchContext+0xa0>)
 8003968:	2200      	movs	r2, #0
 800396a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800396c:	4b21      	ldr	r3, [pc, #132]	; (80039f4 <vTaskSwitchContext+0xa4>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	607b      	str	r3, [r7, #4]
 8003972:	e007      	b.n	8003984 <vTaskSwitchContext+0x34>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <vTaskSwitchContext+0x2e>
 800397a:	b672      	cpsid	i
 800397c:	e7fe      	b.n	800397c <vTaskSwitchContext+0x2c>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	3b01      	subs	r3, #1
 8003982:	607b      	str	r3, [r7, #4]
 8003984:	491c      	ldr	r1, [pc, #112]	; (80039f8 <vTaskSwitchContext+0xa8>)
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	0013      	movs	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	189b      	adds	r3, r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	585b      	ldr	r3, [r3, r1]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0ee      	beq.n	8003974 <vTaskSwitchContext+0x24>
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	0013      	movs	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	189b      	adds	r3, r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4a15      	ldr	r2, [pc, #84]	; (80039f8 <vTaskSwitchContext+0xa8>)
 80039a2:	189b      	adds	r3, r3, r2
 80039a4:	603b      	str	r3, [r7, #0]
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	685a      	ldr	r2, [r3, #4]
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	605a      	str	r2, [r3, #4]
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	3308      	adds	r3, #8
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d104      	bne.n	80039c6 <vTaskSwitchContext+0x76>
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	685a      	ldr	r2, [r3, #4]
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	605a      	str	r2, [r3, #4]
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	68da      	ldr	r2, [r3, #12]
 80039cc:	4b0b      	ldr	r3, [pc, #44]	; (80039fc <vTaskSwitchContext+0xac>)
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	4b08      	ldr	r3, [pc, #32]	; (80039f4 <vTaskSwitchContext+0xa4>)
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80039d6:	4b09      	ldr	r3, [pc, #36]	; (80039fc <vTaskSwitchContext+0xac>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	3354      	adds	r3, #84	; 0x54
 80039dc:	001a      	movs	r2, r3
 80039de:	4b08      	ldr	r3, [pc, #32]	; (8003a00 <vTaskSwitchContext+0xb0>)
 80039e0:	601a      	str	r2, [r3, #0]
}
 80039e2:	46c0      	nop			; (mov r8, r8)
 80039e4:	46bd      	mov	sp, r7
 80039e6:	b002      	add	sp, #8
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	46c0      	nop			; (mov r8, r8)
 80039ec:	20000e48 	.word	0x20000e48
 80039f0:	20000e34 	.word	0x20000e34
 80039f4:	20000e28 	.word	0x20000e28
 80039f8:	20000950 	.word	0x20000950
 80039fc:	2000094c 	.word	0x2000094c
 8003a00:	2000002c 	.word	0x2000002c

08003a04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d101      	bne.n	8003a18 <vTaskPlaceOnEventList+0x14>
 8003a14:	b672      	cpsid	i
 8003a16:	e7fe      	b.n	8003a16 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a18:	4b08      	ldr	r3, [pc, #32]	; (8003a3c <vTaskPlaceOnEventList+0x38>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	3318      	adds	r3, #24
 8003a1e:	001a      	movs	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	0011      	movs	r1, r2
 8003a24:	0018      	movs	r0, r3
 8003a26:	f7fe febc 	bl	80027a2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	2101      	movs	r1, #1
 8003a2e:	0018      	movs	r0, r3
 8003a30:	f000 fa42 	bl	8003eb8 <prvAddCurrentTaskToDelayedList>
}
 8003a34:	46c0      	nop			; (mov r8, r8)
 8003a36:	46bd      	mov	sp, r7
 8003a38:	b002      	add	sp, #8
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	2000094c 	.word	0x2000094c

08003a40 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <vTaskPlaceOnEventListRestricted+0x16>
 8003a52:	b672      	cpsid	i
 8003a54:	e7fe      	b.n	8003a54 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a56:	4b0c      	ldr	r3, [pc, #48]	; (8003a88 <vTaskPlaceOnEventListRestricted+0x48>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	3318      	adds	r3, #24
 8003a5c:	001a      	movs	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	0011      	movs	r1, r2
 8003a62:	0018      	movs	r0, r3
 8003a64:	f7fe fe7b 	bl	800275e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d002      	beq.n	8003a74 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	425b      	negs	r3, r3
 8003a72:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	0011      	movs	r1, r2
 8003a7a:	0018      	movs	r0, r3
 8003a7c:	f000 fa1c 	bl	8003eb8 <prvAddCurrentTaskToDelayedList>
	}
 8003a80:	46c0      	nop			; (mov r8, r8)
 8003a82:	46bd      	mov	sp, r7
 8003a84:	b004      	add	sp, #16
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	2000094c 	.word	0x2000094c

08003a8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <xTaskRemoveFromEventList+0x1a>
 8003aa2:	b672      	cpsid	i
 8003aa4:	e7fe      	b.n	8003aa4 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	3318      	adds	r3, #24
 8003aaa:	0018      	movs	r0, r3
 8003aac:	f7fe feaf 	bl	800280e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ab0:	4b1e      	ldr	r3, [pc, #120]	; (8003b2c <xTaskRemoveFromEventList+0xa0>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d11d      	bne.n	8003af4 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	3304      	adds	r3, #4
 8003abc:	0018      	movs	r0, r3
 8003abe:	f7fe fea6 	bl	800280e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ac6:	4b1a      	ldr	r3, [pc, #104]	; (8003b30 <xTaskRemoveFromEventList+0xa4>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d903      	bls.n	8003ad6 <xTaskRemoveFromEventList+0x4a>
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad2:	4b17      	ldr	r3, [pc, #92]	; (8003b30 <xTaskRemoveFromEventList+0xa4>)
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ada:	0013      	movs	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	189b      	adds	r3, r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	4a14      	ldr	r2, [pc, #80]	; (8003b34 <xTaskRemoveFromEventList+0xa8>)
 8003ae4:	189a      	adds	r2, r3, r2
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	3304      	adds	r3, #4
 8003aea:	0019      	movs	r1, r3
 8003aec:	0010      	movs	r0, r2
 8003aee:	f7fe fe36 	bl	800275e <vListInsertEnd>
 8003af2:	e007      	b.n	8003b04 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	3318      	adds	r3, #24
 8003af8:	001a      	movs	r2, r3
 8003afa:	4b0f      	ldr	r3, [pc, #60]	; (8003b38 <xTaskRemoveFromEventList+0xac>)
 8003afc:	0011      	movs	r1, r2
 8003afe:	0018      	movs	r0, r3
 8003b00:	f7fe fe2d 	bl	800275e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b08:	4b0c      	ldr	r3, [pc, #48]	; (8003b3c <xTaskRemoveFromEventList+0xb0>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d905      	bls.n	8003b1e <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003b12:	2301      	movs	r3, #1
 8003b14:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003b16:	4b0a      	ldr	r3, [pc, #40]	; (8003b40 <xTaskRemoveFromEventList+0xb4>)
 8003b18:	2201      	movs	r2, #1
 8003b1a:	601a      	str	r2, [r3, #0]
 8003b1c:	e001      	b.n	8003b22 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003b22:	68fb      	ldr	r3, [r7, #12]
}
 8003b24:	0018      	movs	r0, r3
 8003b26:	46bd      	mov	sp, r7
 8003b28:	b004      	add	sp, #16
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	20000e48 	.word	0x20000e48
 8003b30:	20000e28 	.word	0x20000e28
 8003b34:	20000950 	.word	0x20000950
 8003b38:	20000de0 	.word	0x20000de0
 8003b3c:	2000094c 	.word	0x2000094c
 8003b40:	20000e34 	.word	0x20000e34

08003b44 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003b4c:	4b05      	ldr	r3, [pc, #20]	; (8003b64 <vTaskInternalSetTimeOutState+0x20>)
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003b54:	4b04      	ldr	r3, [pc, #16]	; (8003b68 <vTaskInternalSetTimeOutState+0x24>)
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	605a      	str	r2, [r3, #4]
}
 8003b5c:	46c0      	nop			; (mov r8, r8)
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	b002      	add	sp, #8
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	20000e38 	.word	0x20000e38
 8003b68:	20000e24 	.word	0x20000e24

08003b6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d101      	bne.n	8003b80 <xTaskCheckForTimeOut+0x14>
 8003b7c:	b672      	cpsid	i
 8003b7e:	e7fe      	b.n	8003b7e <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <xTaskCheckForTimeOut+0x1e>
 8003b86:	b672      	cpsid	i
 8003b88:	e7fe      	b.n	8003b88 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8003b8a:	f000 fd51 	bl	8004630 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003b8e:	4b1d      	ldr	r3, [pc, #116]	; (8003c04 <xTaskCheckForTimeOut+0x98>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	d102      	bne.n	8003bac <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	617b      	str	r3, [r7, #20]
 8003baa:	e024      	b.n	8003bf6 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	4b15      	ldr	r3, [pc, #84]	; (8003c08 <xTaskCheckForTimeOut+0x9c>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d007      	beq.n	8003bc8 <xTaskCheckForTimeOut+0x5c>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d302      	bcc.n	8003bc8 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	617b      	str	r3, [r7, #20]
 8003bc6:	e016      	b.n	8003bf6 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d20c      	bcs.n	8003bec <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	1ad2      	subs	r2, r2, r3
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	0018      	movs	r0, r3
 8003be2:	f7ff ffaf 	bl	8003b44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003be6:	2300      	movs	r3, #0
 8003be8:	617b      	str	r3, [r7, #20]
 8003bea:	e004      	b.n	8003bf6 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8003bf6:	f000 fd2d 	bl	8004654 <vPortExitCritical>

	return xReturn;
 8003bfa:	697b      	ldr	r3, [r7, #20]
}
 8003bfc:	0018      	movs	r0, r3
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	b006      	add	sp, #24
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	20000e24 	.word	0x20000e24
 8003c08:	20000e38 	.word	0x20000e38

08003c0c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003c10:	4b02      	ldr	r3, [pc, #8]	; (8003c1c <vTaskMissedYield+0x10>)
 8003c12:	2201      	movs	r2, #1
 8003c14:	601a      	str	r2, [r3, #0]
}
 8003c16:	46c0      	nop			; (mov r8, r8)
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	20000e34 	.word	0x20000e34

08003c20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003c28:	f000 f84e 	bl	8003cc8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003c2c:	4b03      	ldr	r3, [pc, #12]	; (8003c3c <prvIdleTask+0x1c>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d9f9      	bls.n	8003c28 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003c34:	f000 fcec 	bl	8004610 <vPortYield>
		prvCheckTasksWaitingTermination();
 8003c38:	e7f6      	b.n	8003c28 <prvIdleTask+0x8>
 8003c3a:	46c0      	nop			; (mov r8, r8)
 8003c3c:	20000950 	.word	0x20000950

08003c40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c46:	2300      	movs	r3, #0
 8003c48:	607b      	str	r3, [r7, #4]
 8003c4a:	e00c      	b.n	8003c66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	0013      	movs	r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	189b      	adds	r3, r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	4a14      	ldr	r2, [pc, #80]	; (8003ca8 <prvInitialiseTaskLists+0x68>)
 8003c58:	189b      	adds	r3, r3, r2
 8003c5a:	0018      	movs	r0, r3
 8003c5c:	f7fe fd56 	bl	800270c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	3301      	adds	r3, #1
 8003c64:	607b      	str	r3, [r7, #4]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2b37      	cmp	r3, #55	; 0x37
 8003c6a:	d9ef      	bls.n	8003c4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003c6c:	4b0f      	ldr	r3, [pc, #60]	; (8003cac <prvInitialiseTaskLists+0x6c>)
 8003c6e:	0018      	movs	r0, r3
 8003c70:	f7fe fd4c 	bl	800270c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003c74:	4b0e      	ldr	r3, [pc, #56]	; (8003cb0 <prvInitialiseTaskLists+0x70>)
 8003c76:	0018      	movs	r0, r3
 8003c78:	f7fe fd48 	bl	800270c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003c7c:	4b0d      	ldr	r3, [pc, #52]	; (8003cb4 <prvInitialiseTaskLists+0x74>)
 8003c7e:	0018      	movs	r0, r3
 8003c80:	f7fe fd44 	bl	800270c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003c84:	4b0c      	ldr	r3, [pc, #48]	; (8003cb8 <prvInitialiseTaskLists+0x78>)
 8003c86:	0018      	movs	r0, r3
 8003c88:	f7fe fd40 	bl	800270c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003c8c:	4b0b      	ldr	r3, [pc, #44]	; (8003cbc <prvInitialiseTaskLists+0x7c>)
 8003c8e:	0018      	movs	r0, r3
 8003c90:	f7fe fd3c 	bl	800270c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003c94:	4b0a      	ldr	r3, [pc, #40]	; (8003cc0 <prvInitialiseTaskLists+0x80>)
 8003c96:	4a05      	ldr	r2, [pc, #20]	; (8003cac <prvInitialiseTaskLists+0x6c>)
 8003c98:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003c9a:	4b0a      	ldr	r3, [pc, #40]	; (8003cc4 <prvInitialiseTaskLists+0x84>)
 8003c9c:	4a04      	ldr	r2, [pc, #16]	; (8003cb0 <prvInitialiseTaskLists+0x70>)
 8003c9e:	601a      	str	r2, [r3, #0]
}
 8003ca0:	46c0      	nop			; (mov r8, r8)
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	b002      	add	sp, #8
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	20000950 	.word	0x20000950
 8003cac:	20000db0 	.word	0x20000db0
 8003cb0:	20000dc4 	.word	0x20000dc4
 8003cb4:	20000de0 	.word	0x20000de0
 8003cb8:	20000df4 	.word	0x20000df4
 8003cbc:	20000e0c 	.word	0x20000e0c
 8003cc0:	20000dd8 	.word	0x20000dd8
 8003cc4:	20000ddc 	.word	0x20000ddc

08003cc8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003cce:	e01a      	b.n	8003d06 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8003cd0:	f000 fcae 	bl	8004630 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003cd4:	4b10      	ldr	r3, [pc, #64]	; (8003d18 <prvCheckTasksWaitingTermination+0x50>)
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	3304      	adds	r3, #4
 8003ce0:	0018      	movs	r0, r3
 8003ce2:	f7fe fd94 	bl	800280e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003ce6:	4b0d      	ldr	r3, [pc, #52]	; (8003d1c <prvCheckTasksWaitingTermination+0x54>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	1e5a      	subs	r2, r3, #1
 8003cec:	4b0b      	ldr	r3, [pc, #44]	; (8003d1c <prvCheckTasksWaitingTermination+0x54>)
 8003cee:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003cf0:	4b0b      	ldr	r3, [pc, #44]	; (8003d20 <prvCheckTasksWaitingTermination+0x58>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	1e5a      	subs	r2, r3, #1
 8003cf6:	4b0a      	ldr	r3, [pc, #40]	; (8003d20 <prvCheckTasksWaitingTermination+0x58>)
 8003cf8:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8003cfa:	f000 fcab 	bl	8004654 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	0018      	movs	r0, r3
 8003d02:	f000 f80f 	bl	8003d24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d06:	4b06      	ldr	r3, [pc, #24]	; (8003d20 <prvCheckTasksWaitingTermination+0x58>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1e0      	bne.n	8003cd0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003d0e:	46c0      	nop			; (mov r8, r8)
 8003d10:	46c0      	nop			; (mov r8, r8)
 8003d12:	46bd      	mov	sp, r7
 8003d14:	b002      	add	sp, #8
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	20000df4 	.word	0x20000df4
 8003d1c:	20000e20 	.word	0x20000e20
 8003d20:	20000e08 	.word	0x20000e08

08003d24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	3354      	adds	r3, #84	; 0x54
 8003d30:	0018      	movs	r0, r3
 8003d32:	f000 feff 	bl	8004b34 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	22b9      	movs	r2, #185	; 0xb9
 8003d3a:	5c9b      	ldrb	r3, [r3, r2]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d109      	bne.n	8003d54 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d44:	0018      	movs	r0, r3
 8003d46:	f000 fdb1 	bl	80048ac <vPortFree>
				vPortFree( pxTCB );
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	0018      	movs	r0, r3
 8003d4e:	f000 fdad 	bl	80048ac <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003d52:	e010      	b.n	8003d76 <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	22b9      	movs	r2, #185	; 0xb9
 8003d58:	5c9b      	ldrb	r3, [r3, r2]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d104      	bne.n	8003d68 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	0018      	movs	r0, r3
 8003d62:	f000 fda3 	bl	80048ac <vPortFree>
	}
 8003d66:	e006      	b.n	8003d76 <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	22b9      	movs	r2, #185	; 0xb9
 8003d6c:	5c9b      	ldrb	r3, [r3, r2]
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d001      	beq.n	8003d76 <prvDeleteTCB+0x52>
 8003d72:	b672      	cpsid	i
 8003d74:	e7fe      	b.n	8003d74 <prvDeleteTCB+0x50>
	}
 8003d76:	46c0      	nop			; (mov r8, r8)
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	b002      	add	sp, #8
 8003d7c:	bd80      	pop	{r7, pc}
	...

08003d80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d86:	4b0e      	ldr	r3, [pc, #56]	; (8003dc0 <prvResetNextTaskUnblockTime+0x40>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d101      	bne.n	8003d94 <prvResetNextTaskUnblockTime+0x14>
 8003d90:	2301      	movs	r3, #1
 8003d92:	e000      	b.n	8003d96 <prvResetNextTaskUnblockTime+0x16>
 8003d94:	2300      	movs	r3, #0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d004      	beq.n	8003da4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003d9a:	4b0a      	ldr	r3, [pc, #40]	; (8003dc4 <prvResetNextTaskUnblockTime+0x44>)
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	4252      	negs	r2, r2
 8003da0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003da2:	e008      	b.n	8003db6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003da4:	4b06      	ldr	r3, [pc, #24]	; (8003dc0 <prvResetNextTaskUnblockTime+0x40>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685a      	ldr	r2, [r3, #4]
 8003db2:	4b04      	ldr	r3, [pc, #16]	; (8003dc4 <prvResetNextTaskUnblockTime+0x44>)
 8003db4:	601a      	str	r2, [r3, #0]
}
 8003db6:	46c0      	nop			; (mov r8, r8)
 8003db8:	46bd      	mov	sp, r7
 8003dba:	b002      	add	sp, #8
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	46c0      	nop			; (mov r8, r8)
 8003dc0:	20000dd8 	.word	0x20000dd8
 8003dc4:	20000e40 	.word	0x20000e40

08003dc8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003dce:	4b0a      	ldr	r3, [pc, #40]	; (8003df8 <xTaskGetSchedulerState+0x30>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d102      	bne.n	8003ddc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	607b      	str	r3, [r7, #4]
 8003dda:	e008      	b.n	8003dee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ddc:	4b07      	ldr	r3, [pc, #28]	; (8003dfc <xTaskGetSchedulerState+0x34>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d102      	bne.n	8003dea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003de4:	2302      	movs	r3, #2
 8003de6:	607b      	str	r3, [r7, #4]
 8003de8:	e001      	b.n	8003dee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003dea:	2300      	movs	r3, #0
 8003dec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003dee:	687b      	ldr	r3, [r7, #4]
	}
 8003df0:	0018      	movs	r0, r3
 8003df2:	46bd      	mov	sp, r7
 8003df4:	b002      	add	sp, #8
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	20000e2c 	.word	0x20000e2c
 8003dfc:	20000e48 	.word	0x20000e48

08003e00 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d044      	beq.n	8003ea0 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003e16:	4b25      	ldr	r3, [pc, #148]	; (8003eac <xTaskPriorityDisinherit+0xac>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d001      	beq.n	8003e24 <xTaskPriorityDisinherit+0x24>
 8003e20:	b672      	cpsid	i
 8003e22:	e7fe      	b.n	8003e22 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d101      	bne.n	8003e30 <xTaskPriorityDisinherit+0x30>
 8003e2c:	b672      	cpsid	i
 8003e2e:	e7fe      	b.n	8003e2e <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e34:	1e5a      	subs	r2, r3, #1
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d02c      	beq.n	8003ea0 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d128      	bne.n	8003ea0 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	3304      	adds	r3, #4
 8003e52:	0018      	movs	r0, r3
 8003e54:	f7fe fcdb 	bl	800280e <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e64:	2238      	movs	r2, #56	; 0x38
 8003e66:	1ad2      	subs	r2, r2, r3
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e70:	4b0f      	ldr	r3, [pc, #60]	; (8003eb0 <xTaskPriorityDisinherit+0xb0>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d903      	bls.n	8003e80 <xTaskPriorityDisinherit+0x80>
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e7c:	4b0c      	ldr	r3, [pc, #48]	; (8003eb0 <xTaskPriorityDisinherit+0xb0>)
 8003e7e:	601a      	str	r2, [r3, #0]
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e84:	0013      	movs	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	189b      	adds	r3, r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	4a09      	ldr	r2, [pc, #36]	; (8003eb4 <xTaskPriorityDisinherit+0xb4>)
 8003e8e:	189a      	adds	r2, r3, r2
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	3304      	adds	r3, #4
 8003e94:	0019      	movs	r1, r3
 8003e96:	0010      	movs	r0, r2
 8003e98:	f7fe fc61 	bl	800275e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
	}
 8003ea2:	0018      	movs	r0, r3
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	b004      	add	sp, #16
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	46c0      	nop			; (mov r8, r8)
 8003eac:	2000094c 	.word	0x2000094c
 8003eb0:	20000e28 	.word	0x20000e28
 8003eb4:	20000950 	.word	0x20000950

08003eb8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003ec2:	4b21      	ldr	r3, [pc, #132]	; (8003f48 <prvAddCurrentTaskToDelayedList+0x90>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ec8:	4b20      	ldr	r3, [pc, #128]	; (8003f4c <prvAddCurrentTaskToDelayedList+0x94>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	3304      	adds	r3, #4
 8003ece:	0018      	movs	r0, r3
 8003ed0:	f7fe fc9d 	bl	800280e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	d10b      	bne.n	8003ef2 <prvAddCurrentTaskToDelayedList+0x3a>
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d008      	beq.n	8003ef2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ee0:	4b1a      	ldr	r3, [pc, #104]	; (8003f4c <prvAddCurrentTaskToDelayedList+0x94>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	1d1a      	adds	r2, r3, #4
 8003ee6:	4b1a      	ldr	r3, [pc, #104]	; (8003f50 <prvAddCurrentTaskToDelayedList+0x98>)
 8003ee8:	0011      	movs	r1, r2
 8003eea:	0018      	movs	r0, r3
 8003eec:	f7fe fc37 	bl	800275e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003ef0:	e026      	b.n	8003f40 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	18d3      	adds	r3, r2, r3
 8003ef8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003efa:	4b14      	ldr	r3, [pc, #80]	; (8003f4c <prvAddCurrentTaskToDelayedList+0x94>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68ba      	ldr	r2, [r7, #8]
 8003f00:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003f02:	68ba      	ldr	r2, [r7, #8]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d209      	bcs.n	8003f1e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f0a:	4b12      	ldr	r3, [pc, #72]	; (8003f54 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	4b0f      	ldr	r3, [pc, #60]	; (8003f4c <prvAddCurrentTaskToDelayedList+0x94>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	3304      	adds	r3, #4
 8003f14:	0019      	movs	r1, r3
 8003f16:	0010      	movs	r0, r2
 8003f18:	f7fe fc43 	bl	80027a2 <vListInsert>
}
 8003f1c:	e010      	b.n	8003f40 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f1e:	4b0e      	ldr	r3, [pc, #56]	; (8003f58 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	4b0a      	ldr	r3, [pc, #40]	; (8003f4c <prvAddCurrentTaskToDelayedList+0x94>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	3304      	adds	r3, #4
 8003f28:	0019      	movs	r1, r3
 8003f2a:	0010      	movs	r0, r2
 8003f2c:	f7fe fc39 	bl	80027a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003f30:	4b0a      	ldr	r3, [pc, #40]	; (8003f5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68ba      	ldr	r2, [r7, #8]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d202      	bcs.n	8003f40 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003f3a:	4b08      	ldr	r3, [pc, #32]	; (8003f5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003f3c:	68ba      	ldr	r2, [r7, #8]
 8003f3e:	601a      	str	r2, [r3, #0]
}
 8003f40:	46c0      	nop			; (mov r8, r8)
 8003f42:	46bd      	mov	sp, r7
 8003f44:	b004      	add	sp, #16
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	20000e24 	.word	0x20000e24
 8003f4c:	2000094c 	.word	0x2000094c
 8003f50:	20000e0c 	.word	0x20000e0c
 8003f54:	20000ddc 	.word	0x20000ddc
 8003f58:	20000dd8 	.word	0x20000dd8
 8003f5c:	20000e40 	.word	0x20000e40

08003f60 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003f60:	b590      	push	{r4, r7, lr}
 8003f62:	b089      	sub	sp, #36	; 0x24
 8003f64:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003f66:	2300      	movs	r3, #0
 8003f68:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003f6a:	f000 fa87 	bl	800447c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003f6e:	4b17      	ldr	r3, [pc, #92]	; (8003fcc <xTimerCreateTimerTask+0x6c>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d020      	beq.n	8003fb8 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003f76:	2300      	movs	r3, #0
 8003f78:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003f7e:	003a      	movs	r2, r7
 8003f80:	1d39      	adds	r1, r7, #4
 8003f82:	2308      	movs	r3, #8
 8003f84:	18fb      	adds	r3, r7, r3
 8003f86:	0018      	movs	r0, r3
 8003f88:	f7fe fba8 	bl	80026dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003f8c:	683c      	ldr	r4, [r7, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	68ba      	ldr	r2, [r7, #8]
 8003f92:	490f      	ldr	r1, [pc, #60]	; (8003fd0 <xTimerCreateTimerTask+0x70>)
 8003f94:	480f      	ldr	r0, [pc, #60]	; (8003fd4 <xTimerCreateTimerTask+0x74>)
 8003f96:	9202      	str	r2, [sp, #8]
 8003f98:	9301      	str	r3, [sp, #4]
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	9300      	str	r3, [sp, #0]
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	0022      	movs	r2, r4
 8003fa2:	f7ff f884 	bl	80030ae <xTaskCreateStatic>
 8003fa6:	0002      	movs	r2, r0
 8003fa8:	4b0b      	ldr	r3, [pc, #44]	; (8003fd8 <xTimerCreateTimerTask+0x78>)
 8003faa:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003fac:	4b0a      	ldr	r3, [pc, #40]	; (8003fd8 <xTimerCreateTimerTask+0x78>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d101      	bne.n	8003fc2 <xTimerCreateTimerTask+0x62>
 8003fbe:	b672      	cpsid	i
 8003fc0:	e7fe      	b.n	8003fc0 <xTimerCreateTimerTask+0x60>
	return xReturn;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
}
 8003fc4:	0018      	movs	r0, r3
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	b005      	add	sp, #20
 8003fca:	bd90      	pop	{r4, r7, pc}
 8003fcc:	20000e7c 	.word	0x20000e7c
 8003fd0:	08004d10 	.word	0x08004d10
 8003fd4:	080040e1 	.word	0x080040e1
 8003fd8:	20000e80 	.word	0x20000e80

08003fdc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003fdc:	b590      	push	{r4, r7, lr}
 8003fde:	b08b      	sub	sp, #44	; 0x2c
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
 8003fe8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003fea:	2300      	movs	r3, #0
 8003fec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d101      	bne.n	8003ff8 <xTimerGenericCommand+0x1c>
 8003ff4:	b672      	cpsid	i
 8003ff6:	e7fe      	b.n	8003ff6 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003ff8:	4b1c      	ldr	r3, [pc, #112]	; (800406c <xTimerGenericCommand+0x90>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d030      	beq.n	8004062 <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004000:	2414      	movs	r4, #20
 8004002:	193b      	adds	r3, r7, r4
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004008:	193b      	adds	r3, r7, r4
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800400e:	193b      	adds	r3, r7, r4
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	2b05      	cmp	r3, #5
 8004018:	dc19      	bgt.n	800404e <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800401a:	f7ff fed5 	bl	8003dc8 <xTaskGetSchedulerState>
 800401e:	0003      	movs	r3, r0
 8004020:	2b02      	cmp	r3, #2
 8004022:	d109      	bne.n	8004038 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004024:	4b11      	ldr	r3, [pc, #68]	; (800406c <xTimerGenericCommand+0x90>)
 8004026:	6818      	ldr	r0, [r3, #0]
 8004028:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800402a:	1939      	adds	r1, r7, r4
 800402c:	2300      	movs	r3, #0
 800402e:	f7fe fcdc 	bl	80029ea <xQueueGenericSend>
 8004032:	0003      	movs	r3, r0
 8004034:	627b      	str	r3, [r7, #36]	; 0x24
 8004036:	e014      	b.n	8004062 <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004038:	4b0c      	ldr	r3, [pc, #48]	; (800406c <xTimerGenericCommand+0x90>)
 800403a:	6818      	ldr	r0, [r3, #0]
 800403c:	2314      	movs	r3, #20
 800403e:	18f9      	adds	r1, r7, r3
 8004040:	2300      	movs	r3, #0
 8004042:	2200      	movs	r2, #0
 8004044:	f7fe fcd1 	bl	80029ea <xQueueGenericSend>
 8004048:	0003      	movs	r3, r0
 800404a:	627b      	str	r3, [r7, #36]	; 0x24
 800404c:	e009      	b.n	8004062 <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800404e:	4b07      	ldr	r3, [pc, #28]	; (800406c <xTimerGenericCommand+0x90>)
 8004050:	6818      	ldr	r0, [r3, #0]
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	2314      	movs	r3, #20
 8004056:	18f9      	adds	r1, r7, r3
 8004058:	2300      	movs	r3, #0
 800405a:	f7fe fd8a 	bl	8002b72 <xQueueGenericSendFromISR>
 800405e:	0003      	movs	r3, r0
 8004060:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004064:	0018      	movs	r0, r3
 8004066:	46bd      	mov	sp, r7
 8004068:	b00b      	add	sp, #44	; 0x2c
 800406a:	bd90      	pop	{r4, r7, pc}
 800406c:	20000e7c 	.word	0x20000e7c

08004070 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af02      	add	r7, sp, #8
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800407a:	4b18      	ldr	r3, [pc, #96]	; (80040dc <prvProcessExpiredTimer+0x6c>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	3304      	adds	r3, #4
 8004088:	0018      	movs	r0, r3
 800408a:	f7fe fbc0 	bl	800280e <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	69db      	ldr	r3, [r3, #28]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d119      	bne.n	80040ca <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	699a      	ldr	r2, [r3, #24]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	18d1      	adds	r1, r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f000 f8b6 	bl	8004214 <prvInsertTimerInActiveList>
 80040a8:	1e03      	subs	r3, r0, #0
 80040aa:	d00e      	beq.n	80040ca <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	2300      	movs	r3, #0
 80040b2:	9300      	str	r3, [sp, #0]
 80040b4:	2300      	movs	r3, #0
 80040b6:	2100      	movs	r1, #0
 80040b8:	f7ff ff90 	bl	8003fdc <xTimerGenericCommand>
 80040bc:	0003      	movs	r3, r0
 80040be:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <prvProcessExpiredTimer+0x5a>
 80040c6:	b672      	cpsid	i
 80040c8:	e7fe      	b.n	80040c8 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	0010      	movs	r0, r2
 80040d2:	4798      	blx	r3
}
 80040d4:	46c0      	nop			; (mov r8, r8)
 80040d6:	46bd      	mov	sp, r7
 80040d8:	b004      	add	sp, #16
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	20000e74 	.word	0x20000e74

080040e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80040e8:	2308      	movs	r3, #8
 80040ea:	18fb      	adds	r3, r7, r3
 80040ec:	0018      	movs	r0, r3
 80040ee:	f000 f851 	bl	8004194 <prvGetNextExpireTime>
 80040f2:	0003      	movs	r3, r0
 80040f4:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80040f6:	68ba      	ldr	r2, [r7, #8]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	0011      	movs	r1, r2
 80040fc:	0018      	movs	r0, r3
 80040fe:	f000 f803 	bl	8004108 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004102:	f000 f8c9 	bl	8004298 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004106:	e7ef      	b.n	80040e8 <prvTimerTask+0x8>

08004108 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004112:	f7ff fac3 	bl	800369c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004116:	2308      	movs	r3, #8
 8004118:	18fb      	adds	r3, r7, r3
 800411a:	0018      	movs	r0, r3
 800411c:	f000 f85a 	bl	80041d4 <prvSampleTimeNow>
 8004120:	0003      	movs	r3, r0
 8004122:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d129      	bne.n	800417e <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d10c      	bne.n	800414a <prvProcessTimerOrBlockTask+0x42>
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	429a      	cmp	r2, r3
 8004136:	d808      	bhi.n	800414a <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8004138:	f7ff fabc 	bl	80036b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	0011      	movs	r1, r2
 8004142:	0018      	movs	r0, r3
 8004144:	f7ff ff94 	bl	8004070 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004148:	e01b      	b.n	8004182 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d006      	beq.n	800415e <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004150:	4b0e      	ldr	r3, [pc, #56]	; (800418c <prvProcessTimerOrBlockTask+0x84>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	425a      	negs	r2, r3
 8004158:	4153      	adcs	r3, r2
 800415a:	b2db      	uxtb	r3, r3
 800415c:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800415e:	4b0c      	ldr	r3, [pc, #48]	; (8004190 <prvProcessTimerOrBlockTask+0x88>)
 8004160:	6818      	ldr	r0, [r3, #0]
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	683a      	ldr	r2, [r7, #0]
 800416a:	0019      	movs	r1, r3
 800416c:	f7fe ff6c 	bl	8003048 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004170:	f7ff faa0 	bl	80036b4 <xTaskResumeAll>
 8004174:	1e03      	subs	r3, r0, #0
 8004176:	d104      	bne.n	8004182 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 8004178:	f000 fa4a 	bl	8004610 <vPortYield>
}
 800417c:	e001      	b.n	8004182 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 800417e:	f7ff fa99 	bl	80036b4 <xTaskResumeAll>
}
 8004182:	46c0      	nop			; (mov r8, r8)
 8004184:	46bd      	mov	sp, r7
 8004186:	b004      	add	sp, #16
 8004188:	bd80      	pop	{r7, pc}
 800418a:	46c0      	nop			; (mov r8, r8)
 800418c:	20000e78 	.word	0x20000e78
 8004190:	20000e7c 	.word	0x20000e7c

08004194 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800419c:	4b0c      	ldr	r3, [pc, #48]	; (80041d0 <prvGetNextExpireTime+0x3c>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	425a      	negs	r2, r3
 80041a4:	4153      	adcs	r3, r2
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	001a      	movs	r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d105      	bne.n	80041c2 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80041b6:	4b06      	ldr	r3, [pc, #24]	; (80041d0 <prvGetNextExpireTime+0x3c>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	60fb      	str	r3, [r7, #12]
 80041c0:	e001      	b.n	80041c6 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80041c2:	2300      	movs	r3, #0
 80041c4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80041c6:	68fb      	ldr	r3, [r7, #12]
}
 80041c8:	0018      	movs	r0, r3
 80041ca:	46bd      	mov	sp, r7
 80041cc:	b004      	add	sp, #16
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	20000e74 	.word	0x20000e74

080041d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80041dc:	f7ff faf6 	bl	80037cc <xTaskGetTickCount>
 80041e0:	0003      	movs	r3, r0
 80041e2:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 80041e4:	4b0a      	ldr	r3, [pc, #40]	; (8004210 <prvSampleTimeNow+0x3c>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d205      	bcs.n	80041fa <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 80041ee:	f000 f8eb 	bl	80043c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2201      	movs	r2, #1
 80041f6:	601a      	str	r2, [r3, #0]
 80041f8:	e002      	b.n	8004200 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004200:	4b03      	ldr	r3, [pc, #12]	; (8004210 <prvSampleTimeNow+0x3c>)
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8004206:	68fb      	ldr	r3, [r7, #12]
}
 8004208:	0018      	movs	r0, r3
 800420a:	46bd      	mov	sp, r7
 800420c:	b004      	add	sp, #16
 800420e:	bd80      	pop	{r7, pc}
 8004210:	20000e84 	.word	0x20000e84

08004214 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
 8004220:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004222:	2300      	movs	r3, #0
 8004224:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	68ba      	ldr	r2, [r7, #8]
 800422a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004232:	68ba      	ldr	r2, [r7, #8]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	429a      	cmp	r2, r3
 8004238:	d812      	bhi.n	8004260 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	1ad2      	subs	r2, r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	429a      	cmp	r2, r3
 8004246:	d302      	bcc.n	800424e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004248:	2301      	movs	r3, #1
 800424a:	617b      	str	r3, [r7, #20]
 800424c:	e01b      	b.n	8004286 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800424e:	4b10      	ldr	r3, [pc, #64]	; (8004290 <prvInsertTimerInActiveList+0x7c>)
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	3304      	adds	r3, #4
 8004256:	0019      	movs	r1, r3
 8004258:	0010      	movs	r0, r2
 800425a:	f7fe faa2 	bl	80027a2 <vListInsert>
 800425e:	e012      	b.n	8004286 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	429a      	cmp	r2, r3
 8004266:	d206      	bcs.n	8004276 <prvInsertTimerInActiveList+0x62>
 8004268:	68ba      	ldr	r2, [r7, #8]
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	429a      	cmp	r2, r3
 800426e:	d302      	bcc.n	8004276 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004270:	2301      	movs	r3, #1
 8004272:	617b      	str	r3, [r7, #20]
 8004274:	e007      	b.n	8004286 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004276:	4b07      	ldr	r3, [pc, #28]	; (8004294 <prvInsertTimerInActiveList+0x80>)
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	3304      	adds	r3, #4
 800427e:	0019      	movs	r1, r3
 8004280:	0010      	movs	r0, r2
 8004282:	f7fe fa8e 	bl	80027a2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004286:	697b      	ldr	r3, [r7, #20]
}
 8004288:	0018      	movs	r0, r3
 800428a:	46bd      	mov	sp, r7
 800428c:	b006      	add	sp, #24
 800428e:	bd80      	pop	{r7, pc}
 8004290:	20000e78 	.word	0x20000e78
 8004294:	20000e74 	.word	0x20000e74

08004298 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004298:	b590      	push	{r4, r7, lr}
 800429a:	b08d      	sub	sp, #52	; 0x34
 800429c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800429e:	e07f      	b.n	80043a0 <prvProcessReceivedCommands+0x108>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80042a0:	2208      	movs	r2, #8
 80042a2:	18bb      	adds	r3, r7, r2
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	da0f      	bge.n	80042ca <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80042aa:	18bb      	adds	r3, r7, r2
 80042ac:	3304      	adds	r3, #4
 80042ae:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <prvProcessReceivedCommands+0x22>
 80042b6:	b672      	cpsid	i
 80042b8:	e7fe      	b.n	80042b8 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80042ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c0:	6858      	ldr	r0, [r3, #4]
 80042c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	0019      	movs	r1, r3
 80042c8:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80042ca:	2208      	movs	r2, #8
 80042cc:	18bb      	adds	r3, r7, r2
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	db64      	blt.n	800439e <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80042d4:	18bb      	adds	r3, r7, r2
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80042da:	6a3b      	ldr	r3, [r7, #32]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d004      	beq.n	80042ec <prvProcessReceivedCommands+0x54>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80042e2:	6a3b      	ldr	r3, [r7, #32]
 80042e4:	3304      	adds	r3, #4
 80042e6:	0018      	movs	r0, r3
 80042e8:	f7fe fa91 	bl	800280e <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80042ec:	1d3b      	adds	r3, r7, #4
 80042ee:	0018      	movs	r0, r3
 80042f0:	f7ff ff70 	bl	80041d4 <prvSampleTimeNow>
 80042f4:	0003      	movs	r3, r0
 80042f6:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 80042f8:	2308      	movs	r3, #8
 80042fa:	18fb      	adds	r3, r7, r3
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2b09      	cmp	r3, #9
 8004300:	d84e      	bhi.n	80043a0 <prvProcessReceivedCommands+0x108>
 8004302:	009a      	lsls	r2, r3, #2
 8004304:	4b2e      	ldr	r3, [pc, #184]	; (80043c0 <prvProcessReceivedCommands+0x128>)
 8004306:	18d3      	adds	r3, r2, r3
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800430c:	2408      	movs	r4, #8
 800430e:	193b      	adds	r3, r7, r4
 8004310:	685a      	ldr	r2, [r3, #4]
 8004312:	6a3b      	ldr	r3, [r7, #32]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	18d1      	adds	r1, r2, r3
 8004318:	193b      	adds	r3, r7, r4
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	69fa      	ldr	r2, [r7, #28]
 800431e:	6a38      	ldr	r0, [r7, #32]
 8004320:	f7ff ff78 	bl	8004214 <prvInsertTimerInActiveList>
 8004324:	1e03      	subs	r3, r0, #0
 8004326:	d03b      	beq.n	80043a0 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004328:	6a3b      	ldr	r3, [r7, #32]
 800432a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432c:	6a3a      	ldr	r2, [r7, #32]
 800432e:	0010      	movs	r0, r2
 8004330:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004332:	6a3b      	ldr	r3, [r7, #32]
 8004334:	69db      	ldr	r3, [r3, #28]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d132      	bne.n	80043a0 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800433a:	193b      	adds	r3, r7, r4
 800433c:	685a      	ldr	r2, [r3, #4]
 800433e:	6a3b      	ldr	r3, [r7, #32]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	18d2      	adds	r2, r2, r3
 8004344:	6a38      	ldr	r0, [r7, #32]
 8004346:	2300      	movs	r3, #0
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	2300      	movs	r3, #0
 800434c:	2100      	movs	r1, #0
 800434e:	f7ff fe45 	bl	8003fdc <xTimerGenericCommand>
 8004352:	0003      	movs	r3, r0
 8004354:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d121      	bne.n	80043a0 <prvProcessReceivedCommands+0x108>
 800435c:	b672      	cpsid	i
 800435e:	e7fe      	b.n	800435e <prvProcessReceivedCommands+0xc6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004360:	2308      	movs	r3, #8
 8004362:	18fb      	adds	r3, r7, r3
 8004364:	685a      	ldr	r2, [r3, #4]
 8004366:	6a3b      	ldr	r3, [r7, #32]
 8004368:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800436a:	6a3b      	ldr	r3, [r7, #32]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <prvProcessReceivedCommands+0xde>
 8004372:	b672      	cpsid	i
 8004374:	e7fe      	b.n	8004374 <prvProcessReceivedCommands+0xdc>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004376:	6a3b      	ldr	r3, [r7, #32]
 8004378:	699a      	ldr	r2, [r3, #24]
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	18d1      	adds	r1, r2, r3
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	69fa      	ldr	r2, [r7, #28]
 8004382:	6a38      	ldr	r0, [r7, #32]
 8004384:	f7ff ff46 	bl	8004214 <prvInsertTimerInActiveList>
					break;
 8004388:	e00a      	b.n	80043a0 <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800438a:	6a3b      	ldr	r3, [r7, #32]
 800438c:	222c      	movs	r2, #44	; 0x2c
 800438e:	5c9b      	ldrb	r3, [r3, r2]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d105      	bne.n	80043a0 <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 8004394:	6a3b      	ldr	r3, [r7, #32]
 8004396:	0018      	movs	r0, r3
 8004398:	f000 fa88 	bl	80048ac <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800439c:	e000      	b.n	80043a0 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800439e:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80043a0:	4b08      	ldr	r3, [pc, #32]	; (80043c4 <prvProcessReceivedCommands+0x12c>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2208      	movs	r2, #8
 80043a6:	18b9      	adds	r1, r7, r2
 80043a8:	2200      	movs	r2, #0
 80043aa:	0018      	movs	r0, r3
 80043ac:	f7fe fc52 	bl	8002c54 <xQueueReceive>
 80043b0:	1e03      	subs	r3, r0, #0
 80043b2:	d000      	beq.n	80043b6 <prvProcessReceivedCommands+0x11e>
 80043b4:	e774      	b.n	80042a0 <prvProcessReceivedCommands+0x8>
	}
}
 80043b6:	46c0      	nop			; (mov r8, r8)
 80043b8:	46c0      	nop			; (mov r8, r8)
 80043ba:	46bd      	mov	sp, r7
 80043bc:	b00b      	add	sp, #44	; 0x2c
 80043be:	bd90      	pop	{r4, r7, pc}
 80043c0:	08004dc8 	.word	0x08004dc8
 80043c4:	20000e7c 	.word	0x20000e7c

080043c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b088      	sub	sp, #32
 80043cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80043ce:	e03e      	b.n	800444e <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80043d0:	4b28      	ldr	r3, [pc, #160]	; (8004474 <prvSwitchTimerLists+0xac>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80043da:	4b26      	ldr	r3, [pc, #152]	; (8004474 <prvSwitchTimerLists+0xac>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	3304      	adds	r3, #4
 80043e8:	0018      	movs	r0, r3
 80043ea:	f7fe fa10 	bl	800280e <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	0010      	movs	r0, r2
 80043f6:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	69db      	ldr	r3, [r3, #28]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d126      	bne.n	800444e <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	18d3      	adds	r3, r2, r3
 8004408:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800440a:	68ba      	ldr	r2, [r7, #8]
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	429a      	cmp	r2, r3
 8004410:	d90e      	bls.n	8004430 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	68ba      	ldr	r2, [r7, #8]
 8004416:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800441e:	4b15      	ldr	r3, [pc, #84]	; (8004474 <prvSwitchTimerLists+0xac>)
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	3304      	adds	r3, #4
 8004426:	0019      	movs	r1, r3
 8004428:	0010      	movs	r0, r2
 800442a:	f7fe f9ba 	bl	80027a2 <vListInsert>
 800442e:	e00e      	b.n	800444e <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	2300      	movs	r3, #0
 8004436:	9300      	str	r3, [sp, #0]
 8004438:	2300      	movs	r3, #0
 800443a:	2100      	movs	r1, #0
 800443c:	f7ff fdce 	bl	8003fdc <xTimerGenericCommand>
 8004440:	0003      	movs	r3, r0
 8004442:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d101      	bne.n	800444e <prvSwitchTimerLists+0x86>
 800444a:	b672      	cpsid	i
 800444c:	e7fe      	b.n	800444c <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800444e:	4b09      	ldr	r3, [pc, #36]	; (8004474 <prvSwitchTimerLists+0xac>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1bb      	bne.n	80043d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004458:	4b06      	ldr	r3, [pc, #24]	; (8004474 <prvSwitchTimerLists+0xac>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800445e:	4b06      	ldr	r3, [pc, #24]	; (8004478 <prvSwitchTimerLists+0xb0>)
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	4b04      	ldr	r3, [pc, #16]	; (8004474 <prvSwitchTimerLists+0xac>)
 8004464:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8004466:	4b04      	ldr	r3, [pc, #16]	; (8004478 <prvSwitchTimerLists+0xb0>)
 8004468:	697a      	ldr	r2, [r7, #20]
 800446a:	601a      	str	r2, [r3, #0]
}
 800446c:	46c0      	nop			; (mov r8, r8)
 800446e:	46bd      	mov	sp, r7
 8004470:	b006      	add	sp, #24
 8004472:	bd80      	pop	{r7, pc}
 8004474:	20000e74 	.word	0x20000e74
 8004478:	20000e78 	.word	0x20000e78

0800447c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004482:	f000 f8d5 	bl	8004630 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004486:	4b16      	ldr	r3, [pc, #88]	; (80044e0 <prvCheckForValidListAndQueue+0x64>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d123      	bne.n	80044d6 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 800448e:	4b15      	ldr	r3, [pc, #84]	; (80044e4 <prvCheckForValidListAndQueue+0x68>)
 8004490:	0018      	movs	r0, r3
 8004492:	f7fe f93b 	bl	800270c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004496:	4b14      	ldr	r3, [pc, #80]	; (80044e8 <prvCheckForValidListAndQueue+0x6c>)
 8004498:	0018      	movs	r0, r3
 800449a:	f7fe f937 	bl	800270c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800449e:	4b13      	ldr	r3, [pc, #76]	; (80044ec <prvCheckForValidListAndQueue+0x70>)
 80044a0:	4a10      	ldr	r2, [pc, #64]	; (80044e4 <prvCheckForValidListAndQueue+0x68>)
 80044a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80044a4:	4b12      	ldr	r3, [pc, #72]	; (80044f0 <prvCheckForValidListAndQueue+0x74>)
 80044a6:	4a10      	ldr	r2, [pc, #64]	; (80044e8 <prvCheckForValidListAndQueue+0x6c>)
 80044a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80044aa:	4b12      	ldr	r3, [pc, #72]	; (80044f4 <prvCheckForValidListAndQueue+0x78>)
 80044ac:	4a12      	ldr	r2, [pc, #72]	; (80044f8 <prvCheckForValidListAndQueue+0x7c>)
 80044ae:	2100      	movs	r1, #0
 80044b0:	9100      	str	r1, [sp, #0]
 80044b2:	2110      	movs	r1, #16
 80044b4:	200a      	movs	r0, #10
 80044b6:	f7fe fa26 	bl	8002906 <xQueueGenericCreateStatic>
 80044ba:	0002      	movs	r2, r0
 80044bc:	4b08      	ldr	r3, [pc, #32]	; (80044e0 <prvCheckForValidListAndQueue+0x64>)
 80044be:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80044c0:	4b07      	ldr	r3, [pc, #28]	; (80044e0 <prvCheckForValidListAndQueue+0x64>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d006      	beq.n	80044d6 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80044c8:	4b05      	ldr	r3, [pc, #20]	; (80044e0 <prvCheckForValidListAndQueue+0x64>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a0b      	ldr	r2, [pc, #44]	; (80044fc <prvCheckForValidListAndQueue+0x80>)
 80044ce:	0011      	movs	r1, r2
 80044d0:	0018      	movs	r0, r3
 80044d2:	f7fe fd91 	bl	8002ff8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80044d6:	f000 f8bd 	bl	8004654 <vPortExitCritical>
}
 80044da:	46c0      	nop			; (mov r8, r8)
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	20000e7c 	.word	0x20000e7c
 80044e4:	20000e4c 	.word	0x20000e4c
 80044e8:	20000e60 	.word	0x20000e60
 80044ec:	20000e74 	.word	0x20000e74
 80044f0:	20000e78 	.word	0x20000e78
 80044f4:	20000f28 	.word	0x20000f28
 80044f8:	20000e88 	.word	0x20000e88
 80044fc:	08004d18 	.word	0x08004d18

08004500 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	3b04      	subs	r3, #4
 8004510:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2280      	movs	r2, #128	; 0x80
 8004516:	0452      	lsls	r2, r2, #17
 8004518:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	3b04      	subs	r3, #4
 800451e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8004520:	68ba      	ldr	r2, [r7, #8]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	3b04      	subs	r3, #4
 800452a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800452c:	4a08      	ldr	r2, [pc, #32]	; (8004550 <pxPortInitialiseStack+0x50>)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	3b14      	subs	r3, #20
 8004536:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	3b20      	subs	r3, #32
 8004542:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004544:	68fb      	ldr	r3, [r7, #12]
}
 8004546:	0018      	movs	r0, r3
 8004548:	46bd      	mov	sp, r7
 800454a:	b004      	add	sp, #16
 800454c:	bd80      	pop	{r7, pc}
 800454e:	46c0      	nop			; (mov r8, r8)
 8004550:	08004555 	.word	0x08004555

08004554 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800455a:	2300      	movs	r3, #0
 800455c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800455e:	4b08      	ldr	r3, [pc, #32]	; (8004580 <prvTaskExitError+0x2c>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	3301      	adds	r3, #1
 8004564:	d001      	beq.n	800456a <prvTaskExitError+0x16>
 8004566:	b672      	cpsid	i
 8004568:	e7fe      	b.n	8004568 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800456a:	b672      	cpsid	i
	while( ulDummy == 0 )
 800456c:	46c0      	nop			; (mov r8, r8)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d0fc      	beq.n	800456e <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004574:	46c0      	nop			; (mov r8, r8)
 8004576:	46c0      	nop			; (mov r8, r8)
 8004578:	46bd      	mov	sp, r7
 800457a:	b002      	add	sp, #8
 800457c:	bd80      	pop	{r7, pc}
 800457e:	46c0      	nop			; (mov r8, r8)
 8004580:	20000028 	.word	0x20000028

08004584 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8004584:	b580      	push	{r7, lr}
 8004586:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8004588:	46c0      	nop			; (mov r8, r8)
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
	...

08004590 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8004590:	4a0b      	ldr	r2, [pc, #44]	; (80045c0 <pxCurrentTCBConst2>)
 8004592:	6813      	ldr	r3, [r2, #0]
 8004594:	6818      	ldr	r0, [r3, #0]
 8004596:	3020      	adds	r0, #32
 8004598:	f380 8809 	msr	PSP, r0
 800459c:	2002      	movs	r0, #2
 800459e:	f380 8814 	msr	CONTROL, r0
 80045a2:	f3bf 8f6f 	isb	sy
 80045a6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80045a8:	46ae      	mov	lr, r5
 80045aa:	bc08      	pop	{r3}
 80045ac:	bc04      	pop	{r2}
 80045ae:	b662      	cpsie	i
 80045b0:	4718      	bx	r3
 80045b2:	46c0      	nop			; (mov r8, r8)
 80045b4:	46c0      	nop			; (mov r8, r8)
 80045b6:	46c0      	nop			; (mov r8, r8)
 80045b8:	46c0      	nop			; (mov r8, r8)
 80045ba:	46c0      	nop			; (mov r8, r8)
 80045bc:	46c0      	nop			; (mov r8, r8)
 80045be:	46c0      	nop			; (mov r8, r8)

080045c0 <pxCurrentTCBConst2>:
 80045c0:	2000094c 	.word	0x2000094c
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80045c4:	46c0      	nop			; (mov r8, r8)
 80045c6:	46c0      	nop			; (mov r8, r8)

080045c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80045cc:	4b0e      	ldr	r3, [pc, #56]	; (8004608 <xPortStartScheduler+0x40>)
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	4b0d      	ldr	r3, [pc, #52]	; (8004608 <xPortStartScheduler+0x40>)
 80045d2:	21ff      	movs	r1, #255	; 0xff
 80045d4:	0409      	lsls	r1, r1, #16
 80045d6:	430a      	orrs	r2, r1
 80045d8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80045da:	4b0b      	ldr	r3, [pc, #44]	; (8004608 <xPortStartScheduler+0x40>)
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	4b0a      	ldr	r3, [pc, #40]	; (8004608 <xPortStartScheduler+0x40>)
 80045e0:	21ff      	movs	r1, #255	; 0xff
 80045e2:	0609      	lsls	r1, r1, #24
 80045e4:	430a      	orrs	r2, r1
 80045e6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 80045e8:	f000 f898 	bl	800471c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80045ec:	4b07      	ldr	r3, [pc, #28]	; (800460c <xPortStartScheduler+0x44>)
 80045ee:	2200      	movs	r2, #0
 80045f0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80045f2:	f7ff ffcd 	bl	8004590 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80045f6:	f7ff f9ab 	bl	8003950 <vTaskSwitchContext>
	prvTaskExitError();
 80045fa:	f7ff ffab 	bl	8004554 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	0018      	movs	r0, r3
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	46c0      	nop			; (mov r8, r8)
 8004608:	e000ed20 	.word	0xe000ed20
 800460c:	20000028 	.word	0x20000028

08004610 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8004610:	b580      	push	{r7, lr}
 8004612:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8004614:	4b05      	ldr	r3, [pc, #20]	; (800462c <vPortYield+0x1c>)
 8004616:	2280      	movs	r2, #128	; 0x80
 8004618:	0552      	lsls	r2, r2, #21
 800461a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800461c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004620:	f3bf 8f6f 	isb	sy
}
 8004624:	46c0      	nop			; (mov r8, r8)
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	46c0      	nop			; (mov r8, r8)
 800462c:	e000ed04 	.word	0xe000ed04

08004630 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004630:	b580      	push	{r7, lr}
 8004632:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8004634:	b672      	cpsid	i
    uxCriticalNesting++;
 8004636:	4b06      	ldr	r3, [pc, #24]	; (8004650 <vPortEnterCritical+0x20>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	1c5a      	adds	r2, r3, #1
 800463c:	4b04      	ldr	r3, [pc, #16]	; (8004650 <vPortEnterCritical+0x20>)
 800463e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8004640:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004644:	f3bf 8f6f 	isb	sy
}
 8004648:	46c0      	nop			; (mov r8, r8)
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	46c0      	nop			; (mov r8, r8)
 8004650:	20000028 	.word	0x20000028

08004654 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004654:	b580      	push	{r7, lr}
 8004656:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004658:	4b09      	ldr	r3, [pc, #36]	; (8004680 <vPortExitCritical+0x2c>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d101      	bne.n	8004664 <vPortExitCritical+0x10>
 8004660:	b672      	cpsid	i
 8004662:	e7fe      	b.n	8004662 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8004664:	4b06      	ldr	r3, [pc, #24]	; (8004680 <vPortExitCritical+0x2c>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	1e5a      	subs	r2, r3, #1
 800466a:	4b05      	ldr	r3, [pc, #20]	; (8004680 <vPortExitCritical+0x2c>)
 800466c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800466e:	4b04      	ldr	r3, [pc, #16]	; (8004680 <vPortExitCritical+0x2c>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d100      	bne.n	8004678 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8004676:	b662      	cpsie	i
    }
}
 8004678:	46c0      	nop			; (mov r8, r8)
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	46c0      	nop			; (mov r8, r8)
 8004680:	20000028 	.word	0x20000028

08004684 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8004684:	f3ef 8010 	mrs	r0, PRIMASK
 8004688:	b672      	cpsid	i
 800468a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800468c:	46c0      	nop			; (mov r8, r8)
 800468e:	0018      	movs	r0, r3

08004690 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8004690:	f380 8810 	msr	PRIMASK, r0
 8004694:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8004696:	46c0      	nop			; (mov r8, r8)
	...

080046a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80046a0:	f3ef 8009 	mrs	r0, PSP
 80046a4:	4b0e      	ldr	r3, [pc, #56]	; (80046e0 <pxCurrentTCBConst>)
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	3820      	subs	r0, #32
 80046aa:	6010      	str	r0, [r2, #0]
 80046ac:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80046ae:	4644      	mov	r4, r8
 80046b0:	464d      	mov	r5, r9
 80046b2:	4656      	mov	r6, sl
 80046b4:	465f      	mov	r7, fp
 80046b6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80046b8:	b508      	push	{r3, lr}
 80046ba:	b672      	cpsid	i
 80046bc:	f7ff f948 	bl	8003950 <vTaskSwitchContext>
 80046c0:	b662      	cpsie	i
 80046c2:	bc0c      	pop	{r2, r3}
 80046c4:	6811      	ldr	r1, [r2, #0]
 80046c6:	6808      	ldr	r0, [r1, #0]
 80046c8:	3010      	adds	r0, #16
 80046ca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80046cc:	46a0      	mov	r8, r4
 80046ce:	46a9      	mov	r9, r5
 80046d0:	46b2      	mov	sl, r6
 80046d2:	46bb      	mov	fp, r7
 80046d4:	f380 8809 	msr	PSP, r0
 80046d8:	3820      	subs	r0, #32
 80046da:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80046dc:	4718      	bx	r3
 80046de:	46c0      	nop			; (mov r8, r8)

080046e0 <pxCurrentTCBConst>:
 80046e0:	2000094c 	.word	0x2000094c
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80046e4:	46c0      	nop			; (mov r8, r8)
 80046e6:	46c0      	nop			; (mov r8, r8)

080046e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80046ee:	f7ff ffc9 	bl	8004684 <ulSetInterruptMaskFromISR>
 80046f2:	0003      	movs	r3, r0
 80046f4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80046f6:	f7ff f877 	bl	80037e8 <xTaskIncrementTick>
 80046fa:	1e03      	subs	r3, r0, #0
 80046fc:	d003      	beq.n	8004706 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80046fe:	4b06      	ldr	r3, [pc, #24]	; (8004718 <SysTick_Handler+0x30>)
 8004700:	2280      	movs	r2, #128	; 0x80
 8004702:	0552      	lsls	r2, r2, #21
 8004704:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	0018      	movs	r0, r3
 800470a:	f7ff ffc1 	bl	8004690 <vClearInterruptMaskFromISR>
}
 800470e:	46c0      	nop			; (mov r8, r8)
 8004710:	46bd      	mov	sp, r7
 8004712:	b002      	add	sp, #8
 8004714:	bd80      	pop	{r7, pc}
 8004716:	46c0      	nop			; (mov r8, r8)
 8004718:	e000ed04 	.word	0xe000ed04

0800471c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800471c:	b580      	push	{r7, lr}
 800471e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8004720:	4b0b      	ldr	r3, [pc, #44]	; (8004750 <prvSetupTimerInterrupt+0x34>)
 8004722:	2200      	movs	r2, #0
 8004724:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8004726:	4b0b      	ldr	r3, [pc, #44]	; (8004754 <prvSetupTimerInterrupt+0x38>)
 8004728:	2200      	movs	r2, #0
 800472a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800472c:	4b0a      	ldr	r3, [pc, #40]	; (8004758 <prvSetupTimerInterrupt+0x3c>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	22fa      	movs	r2, #250	; 0xfa
 8004732:	0091      	lsls	r1, r2, #2
 8004734:	0018      	movs	r0, r3
 8004736:	f7fb fce7 	bl	8000108 <__udivsi3>
 800473a:	0003      	movs	r3, r0
 800473c:	001a      	movs	r2, r3
 800473e:	4b07      	ldr	r3, [pc, #28]	; (800475c <prvSetupTimerInterrupt+0x40>)
 8004740:	3a01      	subs	r2, #1
 8004742:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8004744:	4b02      	ldr	r3, [pc, #8]	; (8004750 <prvSetupTimerInterrupt+0x34>)
 8004746:	2207      	movs	r2, #7
 8004748:	601a      	str	r2, [r3, #0]
}
 800474a:	46c0      	nop			; (mov r8, r8)
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	e000e010 	.word	0xe000e010
 8004754:	e000e018 	.word	0xe000e018
 8004758:	2000001c 	.word	0x2000001c
 800475c:	e000e014 	.word	0xe000e014

08004760 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b086      	sub	sp, #24
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004768:	2300      	movs	r3, #0
 800476a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800476c:	f7fe ff96 	bl	800369c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004770:	4b49      	ldr	r3, [pc, #292]	; (8004898 <pvPortMalloc+0x138>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d101      	bne.n	800477c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004778:	f000 f8e0 	bl	800493c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800477c:	4b47      	ldr	r3, [pc, #284]	; (800489c <pvPortMalloc+0x13c>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	4013      	ands	r3, r2
 8004784:	d000      	beq.n	8004788 <pvPortMalloc+0x28>
 8004786:	e079      	b.n	800487c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d012      	beq.n	80047b4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800478e:	2208      	movs	r2, #8
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	189b      	adds	r3, r3, r2
 8004794:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2207      	movs	r2, #7
 800479a:	4013      	ands	r3, r2
 800479c:	d00a      	beq.n	80047b4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2207      	movs	r2, #7
 80047a2:	4393      	bics	r3, r2
 80047a4:	3308      	adds	r3, #8
 80047a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2207      	movs	r2, #7
 80047ac:	4013      	ands	r3, r2
 80047ae:	d001      	beq.n	80047b4 <pvPortMalloc+0x54>
 80047b0:	b672      	cpsid	i
 80047b2:	e7fe      	b.n	80047b2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d060      	beq.n	800487c <pvPortMalloc+0x11c>
 80047ba:	4b39      	ldr	r3, [pc, #228]	; (80048a0 <pvPortMalloc+0x140>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d85b      	bhi.n	800487c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80047c4:	4b37      	ldr	r3, [pc, #220]	; (80048a4 <pvPortMalloc+0x144>)
 80047c6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80047c8:	4b36      	ldr	r3, [pc, #216]	; (80048a4 <pvPortMalloc+0x144>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047ce:	e004      	b.n	80047da <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d903      	bls.n	80047ec <pvPortMalloc+0x8c>
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1f1      	bne.n	80047d0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80047ec:	4b2a      	ldr	r3, [pc, #168]	; (8004898 <pvPortMalloc+0x138>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d042      	beq.n	800487c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2208      	movs	r2, #8
 80047fc:	189b      	adds	r3, r3, r2
 80047fe:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	685a      	ldr	r2, [r3, #4]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	1ad2      	subs	r2, r2, r3
 8004810:	2308      	movs	r3, #8
 8004812:	005b      	lsls	r3, r3, #1
 8004814:	429a      	cmp	r2, r3
 8004816:	d916      	bls.n	8004846 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	18d3      	adds	r3, r2, r3
 800481e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	2207      	movs	r2, #7
 8004824:	4013      	ands	r3, r2
 8004826:	d001      	beq.n	800482c <pvPortMalloc+0xcc>
 8004828:	b672      	cpsid	i
 800482a:	e7fe      	b.n	800482a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	685a      	ldr	r2, [r3, #4]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	1ad2      	subs	r2, r2, r3
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	0018      	movs	r0, r3
 8004842:	f000 f8db 	bl	80049fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004846:	4b16      	ldr	r3, [pc, #88]	; (80048a0 <pvPortMalloc+0x140>)
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	1ad2      	subs	r2, r2, r3
 8004850:	4b13      	ldr	r3, [pc, #76]	; (80048a0 <pvPortMalloc+0x140>)
 8004852:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004854:	4b12      	ldr	r3, [pc, #72]	; (80048a0 <pvPortMalloc+0x140>)
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	4b13      	ldr	r3, [pc, #76]	; (80048a8 <pvPortMalloc+0x148>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	429a      	cmp	r2, r3
 800485e:	d203      	bcs.n	8004868 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004860:	4b0f      	ldr	r3, [pc, #60]	; (80048a0 <pvPortMalloc+0x140>)
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	4b10      	ldr	r3, [pc, #64]	; (80048a8 <pvPortMalloc+0x148>)
 8004866:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	685a      	ldr	r2, [r3, #4]
 800486c:	4b0b      	ldr	r3, [pc, #44]	; (800489c <pvPortMalloc+0x13c>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	431a      	orrs	r2, r3
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	2200      	movs	r2, #0
 800487a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800487c:	f7fe ff1a 	bl	80036b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2207      	movs	r2, #7
 8004884:	4013      	ands	r3, r2
 8004886:	d001      	beq.n	800488c <pvPortMalloc+0x12c>
 8004888:	b672      	cpsid	i
 800488a:	e7fe      	b.n	800488a <pvPortMalloc+0x12a>
	return pvReturn;
 800488c:	68fb      	ldr	r3, [r7, #12]
}
 800488e:	0018      	movs	r0, r3
 8004890:	46bd      	mov	sp, r7
 8004892:	b006      	add	sp, #24
 8004894:	bd80      	pop	{r7, pc}
 8004896:	46c0      	nop			; (mov r8, r8)
 8004898:	20001b80 	.word	0x20001b80
 800489c:	20001b8c 	.word	0x20001b8c
 80048a0:	20001b84 	.word	0x20001b84
 80048a4:	20001b78 	.word	0x20001b78
 80048a8:	20001b88 	.word	0x20001b88

080048ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d035      	beq.n	800492a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80048be:	2308      	movs	r3, #8
 80048c0:	425b      	negs	r3, r3
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	18d3      	adds	r3, r2, r3
 80048c6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	685a      	ldr	r2, [r3, #4]
 80048d0:	4b18      	ldr	r3, [pc, #96]	; (8004934 <vPortFree+0x88>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4013      	ands	r3, r2
 80048d6:	d101      	bne.n	80048dc <vPortFree+0x30>
 80048d8:	b672      	cpsid	i
 80048da:	e7fe      	b.n	80048da <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d001      	beq.n	80048e8 <vPortFree+0x3c>
 80048e4:	b672      	cpsid	i
 80048e6:	e7fe      	b.n	80048e6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	685a      	ldr	r2, [r3, #4]
 80048ec:	4b11      	ldr	r3, [pc, #68]	; (8004934 <vPortFree+0x88>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4013      	ands	r3, r2
 80048f2:	d01a      	beq.n	800492a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d116      	bne.n	800492a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	685a      	ldr	r2, [r3, #4]
 8004900:	4b0c      	ldr	r3, [pc, #48]	; (8004934 <vPortFree+0x88>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	43db      	mvns	r3, r3
 8004906:	401a      	ands	r2, r3
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800490c:	f7fe fec6 	bl	800369c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	685a      	ldr	r2, [r3, #4]
 8004914:	4b08      	ldr	r3, [pc, #32]	; (8004938 <vPortFree+0x8c>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	18d2      	adds	r2, r2, r3
 800491a:	4b07      	ldr	r3, [pc, #28]	; (8004938 <vPortFree+0x8c>)
 800491c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	0018      	movs	r0, r3
 8004922:	f000 f86b 	bl	80049fc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004926:	f7fe fec5 	bl	80036b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800492a:	46c0      	nop			; (mov r8, r8)
 800492c:	46bd      	mov	sp, r7
 800492e:	b004      	add	sp, #16
 8004930:	bd80      	pop	{r7, pc}
 8004932:	46c0      	nop			; (mov r8, r8)
 8004934:	20001b8c 	.word	0x20001b8c
 8004938:	20001b84 	.word	0x20001b84

0800493c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004942:	23c0      	movs	r3, #192	; 0xc0
 8004944:	011b      	lsls	r3, r3, #4
 8004946:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004948:	4b26      	ldr	r3, [pc, #152]	; (80049e4 <prvHeapInit+0xa8>)
 800494a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2207      	movs	r2, #7
 8004950:	4013      	ands	r3, r2
 8004952:	d00c      	beq.n	800496e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	3307      	adds	r3, #7
 8004958:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2207      	movs	r2, #7
 800495e:	4393      	bics	r3, r2
 8004960:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004962:	68ba      	ldr	r2, [r7, #8]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	1ad2      	subs	r2, r2, r3
 8004968:	4b1e      	ldr	r3, [pc, #120]	; (80049e4 <prvHeapInit+0xa8>)
 800496a:	18d3      	adds	r3, r2, r3
 800496c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004972:	4b1d      	ldr	r3, [pc, #116]	; (80049e8 <prvHeapInit+0xac>)
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004978:	4b1b      	ldr	r3, [pc, #108]	; (80049e8 <prvHeapInit+0xac>)
 800497a:	2200      	movs	r2, #0
 800497c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68ba      	ldr	r2, [r7, #8]
 8004982:	18d3      	adds	r3, r2, r3
 8004984:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004986:	2208      	movs	r2, #8
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	1a9b      	subs	r3, r3, r2
 800498c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2207      	movs	r2, #7
 8004992:	4393      	bics	r3, r2
 8004994:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	4b14      	ldr	r3, [pc, #80]	; (80049ec <prvHeapInit+0xb0>)
 800499a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800499c:	4b13      	ldr	r3, [pc, #76]	; (80049ec <prvHeapInit+0xb0>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2200      	movs	r2, #0
 80049a2:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80049a4:	4b11      	ldr	r3, [pc, #68]	; (80049ec <prvHeapInit+0xb0>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2200      	movs	r2, #0
 80049aa:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	1ad2      	subs	r2, r2, r3
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80049ba:	4b0c      	ldr	r3, [pc, #48]	; (80049ec <prvHeapInit+0xb0>)
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	685a      	ldr	r2, [r3, #4]
 80049c6:	4b0a      	ldr	r3, [pc, #40]	; (80049f0 <prvHeapInit+0xb4>)
 80049c8:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	685a      	ldr	r2, [r3, #4]
 80049ce:	4b09      	ldr	r3, [pc, #36]	; (80049f4 <prvHeapInit+0xb8>)
 80049d0:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80049d2:	4b09      	ldr	r3, [pc, #36]	; (80049f8 <prvHeapInit+0xbc>)
 80049d4:	2280      	movs	r2, #128	; 0x80
 80049d6:	0612      	lsls	r2, r2, #24
 80049d8:	601a      	str	r2, [r3, #0]
}
 80049da:	46c0      	nop			; (mov r8, r8)
 80049dc:	46bd      	mov	sp, r7
 80049de:	b004      	add	sp, #16
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	46c0      	nop			; (mov r8, r8)
 80049e4:	20000f78 	.word	0x20000f78
 80049e8:	20001b78 	.word	0x20001b78
 80049ec:	20001b80 	.word	0x20001b80
 80049f0:	20001b88 	.word	0x20001b88
 80049f4:	20001b84 	.word	0x20001b84
 80049f8:	20001b8c 	.word	0x20001b8c

080049fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004a04:	4b27      	ldr	r3, [pc, #156]	; (8004aa4 <prvInsertBlockIntoFreeList+0xa8>)
 8004a06:	60fb      	str	r3, [r7, #12]
 8004a08:	e002      	b.n	8004a10 <prvInsertBlockIntoFreeList+0x14>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	60fb      	str	r3, [r7, #12]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d8f7      	bhi.n	8004a0a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	68ba      	ldr	r2, [r7, #8]
 8004a24:	18d3      	adds	r3, r2, r3
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d108      	bne.n	8004a3e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	18d2      	adds	r2, r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	68ba      	ldr	r2, [r7, #8]
 8004a48:	18d2      	adds	r2, r2, r3
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d118      	bne.n	8004a84 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	4b14      	ldr	r3, [pc, #80]	; (8004aa8 <prvInsertBlockIntoFreeList+0xac>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d00d      	beq.n	8004a7a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685a      	ldr	r2, [r3, #4]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	18d2      	adds	r2, r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	601a      	str	r2, [r3, #0]
 8004a78:	e008      	b.n	8004a8c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004a7a:	4b0b      	ldr	r3, [pc, #44]	; (8004aa8 <prvInsertBlockIntoFreeList+0xac>)
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	601a      	str	r2, [r3, #0]
 8004a82:	e003      	b.n	8004a8c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d002      	beq.n	8004a9a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a9a:	46c0      	nop			; (mov r8, r8)
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	b004      	add	sp, #16
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	46c0      	nop			; (mov r8, r8)
 8004aa4:	20001b78 	.word	0x20001b78
 8004aa8:	20001b80 	.word	0x20001b80

08004aac <__libc_init_array>:
 8004aac:	b570      	push	{r4, r5, r6, lr}
 8004aae:	2600      	movs	r6, #0
 8004ab0:	4d0c      	ldr	r5, [pc, #48]	; (8004ae4 <__libc_init_array+0x38>)
 8004ab2:	4c0d      	ldr	r4, [pc, #52]	; (8004ae8 <__libc_init_array+0x3c>)
 8004ab4:	1b64      	subs	r4, r4, r5
 8004ab6:	10a4      	asrs	r4, r4, #2
 8004ab8:	42a6      	cmp	r6, r4
 8004aba:	d109      	bne.n	8004ad0 <__libc_init_array+0x24>
 8004abc:	2600      	movs	r6, #0
 8004abe:	f000 f8f9 	bl	8004cb4 <_init>
 8004ac2:	4d0a      	ldr	r5, [pc, #40]	; (8004aec <__libc_init_array+0x40>)
 8004ac4:	4c0a      	ldr	r4, [pc, #40]	; (8004af0 <__libc_init_array+0x44>)
 8004ac6:	1b64      	subs	r4, r4, r5
 8004ac8:	10a4      	asrs	r4, r4, #2
 8004aca:	42a6      	cmp	r6, r4
 8004acc:	d105      	bne.n	8004ada <__libc_init_array+0x2e>
 8004ace:	bd70      	pop	{r4, r5, r6, pc}
 8004ad0:	00b3      	lsls	r3, r6, #2
 8004ad2:	58eb      	ldr	r3, [r5, r3]
 8004ad4:	4798      	blx	r3
 8004ad6:	3601      	adds	r6, #1
 8004ad8:	e7ee      	b.n	8004ab8 <__libc_init_array+0xc>
 8004ada:	00b3      	lsls	r3, r6, #2
 8004adc:	58eb      	ldr	r3, [r5, r3]
 8004ade:	4798      	blx	r3
 8004ae0:	3601      	adds	r6, #1
 8004ae2:	e7f2      	b.n	8004aca <__libc_init_array+0x1e>
 8004ae4:	08004e50 	.word	0x08004e50
 8004ae8:	08004e50 	.word	0x08004e50
 8004aec:	08004e50 	.word	0x08004e50
 8004af0:	08004e54 	.word	0x08004e54

08004af4 <__retarget_lock_acquire_recursive>:
 8004af4:	4770      	bx	lr

08004af6 <__retarget_lock_release_recursive>:
 8004af6:	4770      	bx	lr

08004af8 <memcpy>:
 8004af8:	2300      	movs	r3, #0
 8004afa:	b510      	push	{r4, lr}
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d100      	bne.n	8004b02 <memcpy+0xa>
 8004b00:	bd10      	pop	{r4, pc}
 8004b02:	5ccc      	ldrb	r4, [r1, r3]
 8004b04:	54c4      	strb	r4, [r0, r3]
 8004b06:	3301      	adds	r3, #1
 8004b08:	e7f8      	b.n	8004afc <memcpy+0x4>

08004b0a <memset>:
 8004b0a:	0003      	movs	r3, r0
 8004b0c:	1882      	adds	r2, r0, r2
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d100      	bne.n	8004b14 <memset+0xa>
 8004b12:	4770      	bx	lr
 8004b14:	7019      	strb	r1, [r3, #0]
 8004b16:	3301      	adds	r3, #1
 8004b18:	e7f9      	b.n	8004b0e <memset+0x4>

08004b1a <cleanup_glue>:
 8004b1a:	b570      	push	{r4, r5, r6, lr}
 8004b1c:	000d      	movs	r5, r1
 8004b1e:	6809      	ldr	r1, [r1, #0]
 8004b20:	0004      	movs	r4, r0
 8004b22:	2900      	cmp	r1, #0
 8004b24:	d001      	beq.n	8004b2a <cleanup_glue+0x10>
 8004b26:	f7ff fff8 	bl	8004b1a <cleanup_glue>
 8004b2a:	0029      	movs	r1, r5
 8004b2c:	0020      	movs	r0, r4
 8004b2e:	f000 f877 	bl	8004c20 <_free_r>
 8004b32:	bd70      	pop	{r4, r5, r6, pc}

08004b34 <_reclaim_reent>:
 8004b34:	4b31      	ldr	r3, [pc, #196]	; (8004bfc <_reclaim_reent+0xc8>)
 8004b36:	b570      	push	{r4, r5, r6, lr}
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	0004      	movs	r4, r0
 8004b3c:	4283      	cmp	r3, r0
 8004b3e:	d049      	beq.n	8004bd4 <_reclaim_reent+0xa0>
 8004b40:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00a      	beq.n	8004b5c <_reclaim_reent+0x28>
 8004b46:	2500      	movs	r5, #0
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	42ab      	cmp	r3, r5
 8004b4c:	d147      	bne.n	8004bde <_reclaim_reent+0xaa>
 8004b4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b50:	6819      	ldr	r1, [r3, #0]
 8004b52:	2900      	cmp	r1, #0
 8004b54:	d002      	beq.n	8004b5c <_reclaim_reent+0x28>
 8004b56:	0020      	movs	r0, r4
 8004b58:	f000 f862 	bl	8004c20 <_free_r>
 8004b5c:	6961      	ldr	r1, [r4, #20]
 8004b5e:	2900      	cmp	r1, #0
 8004b60:	d002      	beq.n	8004b68 <_reclaim_reent+0x34>
 8004b62:	0020      	movs	r0, r4
 8004b64:	f000 f85c 	bl	8004c20 <_free_r>
 8004b68:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004b6a:	2900      	cmp	r1, #0
 8004b6c:	d002      	beq.n	8004b74 <_reclaim_reent+0x40>
 8004b6e:	0020      	movs	r0, r4
 8004b70:	f000 f856 	bl	8004c20 <_free_r>
 8004b74:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004b76:	2900      	cmp	r1, #0
 8004b78:	d002      	beq.n	8004b80 <_reclaim_reent+0x4c>
 8004b7a:	0020      	movs	r0, r4
 8004b7c:	f000 f850 	bl	8004c20 <_free_r>
 8004b80:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004b82:	2900      	cmp	r1, #0
 8004b84:	d002      	beq.n	8004b8c <_reclaim_reent+0x58>
 8004b86:	0020      	movs	r0, r4
 8004b88:	f000 f84a 	bl	8004c20 <_free_r>
 8004b8c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004b8e:	2900      	cmp	r1, #0
 8004b90:	d002      	beq.n	8004b98 <_reclaim_reent+0x64>
 8004b92:	0020      	movs	r0, r4
 8004b94:	f000 f844 	bl	8004c20 <_free_r>
 8004b98:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004b9a:	2900      	cmp	r1, #0
 8004b9c:	d002      	beq.n	8004ba4 <_reclaim_reent+0x70>
 8004b9e:	0020      	movs	r0, r4
 8004ba0:	f000 f83e 	bl	8004c20 <_free_r>
 8004ba4:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004ba6:	2900      	cmp	r1, #0
 8004ba8:	d002      	beq.n	8004bb0 <_reclaim_reent+0x7c>
 8004baa:	0020      	movs	r0, r4
 8004bac:	f000 f838 	bl	8004c20 <_free_r>
 8004bb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004bb2:	2900      	cmp	r1, #0
 8004bb4:	d002      	beq.n	8004bbc <_reclaim_reent+0x88>
 8004bb6:	0020      	movs	r0, r4
 8004bb8:	f000 f832 	bl	8004c20 <_free_r>
 8004bbc:	69a3      	ldr	r3, [r4, #24]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d008      	beq.n	8004bd4 <_reclaim_reent+0xa0>
 8004bc2:	0020      	movs	r0, r4
 8004bc4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004bc6:	4798      	blx	r3
 8004bc8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004bca:	2900      	cmp	r1, #0
 8004bcc:	d002      	beq.n	8004bd4 <_reclaim_reent+0xa0>
 8004bce:	0020      	movs	r0, r4
 8004bd0:	f7ff ffa3 	bl	8004b1a <cleanup_glue>
 8004bd4:	bd70      	pop	{r4, r5, r6, pc}
 8004bd6:	5949      	ldr	r1, [r1, r5]
 8004bd8:	2900      	cmp	r1, #0
 8004bda:	d108      	bne.n	8004bee <_reclaim_reent+0xba>
 8004bdc:	3504      	adds	r5, #4
 8004bde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004be0:	68d9      	ldr	r1, [r3, #12]
 8004be2:	2d80      	cmp	r5, #128	; 0x80
 8004be4:	d1f7      	bne.n	8004bd6 <_reclaim_reent+0xa2>
 8004be6:	0020      	movs	r0, r4
 8004be8:	f000 f81a 	bl	8004c20 <_free_r>
 8004bec:	e7af      	b.n	8004b4e <_reclaim_reent+0x1a>
 8004bee:	680e      	ldr	r6, [r1, #0]
 8004bf0:	0020      	movs	r0, r4
 8004bf2:	f000 f815 	bl	8004c20 <_free_r>
 8004bf6:	0031      	movs	r1, r6
 8004bf8:	e7ee      	b.n	8004bd8 <_reclaim_reent+0xa4>
 8004bfa:	46c0      	nop			; (mov r8, r8)
 8004bfc:	2000002c 	.word	0x2000002c

08004c00 <__malloc_lock>:
 8004c00:	b510      	push	{r4, lr}
 8004c02:	4802      	ldr	r0, [pc, #8]	; (8004c0c <__malloc_lock+0xc>)
 8004c04:	f7ff ff76 	bl	8004af4 <__retarget_lock_acquire_recursive>
 8004c08:	bd10      	pop	{r4, pc}
 8004c0a:	46c0      	nop			; (mov r8, r8)
 8004c0c:	20001b90 	.word	0x20001b90

08004c10 <__malloc_unlock>:
 8004c10:	b510      	push	{r4, lr}
 8004c12:	4802      	ldr	r0, [pc, #8]	; (8004c1c <__malloc_unlock+0xc>)
 8004c14:	f7ff ff6f 	bl	8004af6 <__retarget_lock_release_recursive>
 8004c18:	bd10      	pop	{r4, pc}
 8004c1a:	46c0      	nop			; (mov r8, r8)
 8004c1c:	20001b90 	.word	0x20001b90

08004c20 <_free_r>:
 8004c20:	b570      	push	{r4, r5, r6, lr}
 8004c22:	0005      	movs	r5, r0
 8004c24:	2900      	cmp	r1, #0
 8004c26:	d010      	beq.n	8004c4a <_free_r+0x2a>
 8004c28:	1f0c      	subs	r4, r1, #4
 8004c2a:	6823      	ldr	r3, [r4, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	da00      	bge.n	8004c32 <_free_r+0x12>
 8004c30:	18e4      	adds	r4, r4, r3
 8004c32:	0028      	movs	r0, r5
 8004c34:	f7ff ffe4 	bl	8004c00 <__malloc_lock>
 8004c38:	4a1d      	ldr	r2, [pc, #116]	; (8004cb0 <_free_r+0x90>)
 8004c3a:	6813      	ldr	r3, [r2, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d105      	bne.n	8004c4c <_free_r+0x2c>
 8004c40:	6063      	str	r3, [r4, #4]
 8004c42:	6014      	str	r4, [r2, #0]
 8004c44:	0028      	movs	r0, r5
 8004c46:	f7ff ffe3 	bl	8004c10 <__malloc_unlock>
 8004c4a:	bd70      	pop	{r4, r5, r6, pc}
 8004c4c:	42a3      	cmp	r3, r4
 8004c4e:	d908      	bls.n	8004c62 <_free_r+0x42>
 8004c50:	6821      	ldr	r1, [r4, #0]
 8004c52:	1860      	adds	r0, r4, r1
 8004c54:	4283      	cmp	r3, r0
 8004c56:	d1f3      	bne.n	8004c40 <_free_r+0x20>
 8004c58:	6818      	ldr	r0, [r3, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	1841      	adds	r1, r0, r1
 8004c5e:	6021      	str	r1, [r4, #0]
 8004c60:	e7ee      	b.n	8004c40 <_free_r+0x20>
 8004c62:	001a      	movs	r2, r3
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d001      	beq.n	8004c6e <_free_r+0x4e>
 8004c6a:	42a3      	cmp	r3, r4
 8004c6c:	d9f9      	bls.n	8004c62 <_free_r+0x42>
 8004c6e:	6811      	ldr	r1, [r2, #0]
 8004c70:	1850      	adds	r0, r2, r1
 8004c72:	42a0      	cmp	r0, r4
 8004c74:	d10b      	bne.n	8004c8e <_free_r+0x6e>
 8004c76:	6820      	ldr	r0, [r4, #0]
 8004c78:	1809      	adds	r1, r1, r0
 8004c7a:	1850      	adds	r0, r2, r1
 8004c7c:	6011      	str	r1, [r2, #0]
 8004c7e:	4283      	cmp	r3, r0
 8004c80:	d1e0      	bne.n	8004c44 <_free_r+0x24>
 8004c82:	6818      	ldr	r0, [r3, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	1841      	adds	r1, r0, r1
 8004c88:	6011      	str	r1, [r2, #0]
 8004c8a:	6053      	str	r3, [r2, #4]
 8004c8c:	e7da      	b.n	8004c44 <_free_r+0x24>
 8004c8e:	42a0      	cmp	r0, r4
 8004c90:	d902      	bls.n	8004c98 <_free_r+0x78>
 8004c92:	230c      	movs	r3, #12
 8004c94:	602b      	str	r3, [r5, #0]
 8004c96:	e7d5      	b.n	8004c44 <_free_r+0x24>
 8004c98:	6821      	ldr	r1, [r4, #0]
 8004c9a:	1860      	adds	r0, r4, r1
 8004c9c:	4283      	cmp	r3, r0
 8004c9e:	d103      	bne.n	8004ca8 <_free_r+0x88>
 8004ca0:	6818      	ldr	r0, [r3, #0]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	1841      	adds	r1, r0, r1
 8004ca6:	6021      	str	r1, [r4, #0]
 8004ca8:	6063      	str	r3, [r4, #4]
 8004caa:	6054      	str	r4, [r2, #4]
 8004cac:	e7ca      	b.n	8004c44 <_free_r+0x24>
 8004cae:	46c0      	nop			; (mov r8, r8)
 8004cb0:	20001b94 	.word	0x20001b94

08004cb4 <_init>:
 8004cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cb6:	46c0      	nop			; (mov r8, r8)
 8004cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cba:	bc08      	pop	{r3}
 8004cbc:	469e      	mov	lr, r3
 8004cbe:	4770      	bx	lr

08004cc0 <_fini>:
 8004cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cc2:	46c0      	nop			; (mov r8, r8)
 8004cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cc6:	bc08      	pop	{r3}
 8004cc8:	469e      	mov	lr, r3
 8004cca:	4770      	bx	lr
