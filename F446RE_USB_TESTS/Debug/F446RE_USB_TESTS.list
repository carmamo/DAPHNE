
F446RE_USB_TESTS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007dec  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08007fb0  08007fb0  00017fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008010  08008010  0002010c  2**0
                  CONTENTS
  4 .ARM          00000008  08008010  08008010  00018010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008018  08008018  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008018  08008018  00018018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800801c  0800801c  0001801c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  08008020  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c70  2000010c  0800812c  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d7c  0800812c  00021d7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d19  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e9b  00000000  00000000  00032e55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de8  00000000  00000000  00035cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc0  00000000  00000000  00036ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002401f  00000000  00000000  00037798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012d3a  00000000  00000000  0005b7b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc25f  00000000  00000000  0006e4f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013a750  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003874  00000000  00000000  0013a7a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000010c 	.word	0x2000010c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08007f98 	.word	0x08007f98

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000110 	.word	0x20000110
 8000200:	08007f98 	.word	0x08007f98

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 f9e0 	bl	80008d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f808 	bl	8000524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 f89c 	bl	8000650 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000518:	f000 f870 	bl	80005fc <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 800051c:	f006 ffa6 	bl	800746c <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000520:	e7fe      	b.n	8000520 <main+0x18>
	...

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b094      	sub	sp, #80	; 0x50
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 031c 	add.w	r3, r7, #28
 800052e:	2234      	movs	r2, #52	; 0x34
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f007 fd28 	bl	8007f88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	f107 0308 	add.w	r3, r7, #8
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000548:	2300      	movs	r3, #0
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	4b29      	ldr	r3, [pc, #164]	; (80005f4 <SystemClock_Config+0xd0>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000550:	4a28      	ldr	r2, [pc, #160]	; (80005f4 <SystemClock_Config+0xd0>)
 8000552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000556:	6413      	str	r3, [r2, #64]	; 0x40
 8000558:	4b26      	ldr	r3, [pc, #152]	; (80005f4 <SystemClock_Config+0xd0>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000564:	2300      	movs	r3, #0
 8000566:	603b      	str	r3, [r7, #0]
 8000568:	4b23      	ldr	r3, [pc, #140]	; (80005f8 <SystemClock_Config+0xd4>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a22      	ldr	r2, [pc, #136]	; (80005f8 <SystemClock_Config+0xd4>)
 800056e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000572:	6013      	str	r3, [r2, #0]
 8000574:	4b20      	ldr	r3, [pc, #128]	; (80005f8 <SystemClock_Config+0xd4>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800057c:	603b      	str	r3, [r7, #0]
 800057e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000580:	2301      	movs	r3, #1
 8000582:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000584:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000588:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058a:	2302      	movs	r3, #2
 800058c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800058e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000592:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000594:	2308      	movs	r3, #8
 8000596:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000598:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800059c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800059e:	2302      	movs	r3, #2
 80005a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005a2:	2307      	movs	r3, #7
 80005a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005a6:	2302      	movs	r3, #2
 80005a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005aa:	f107 031c 	add.w	r3, r7, #28
 80005ae:	4618      	mov	r0, r3
 80005b0:	f002 fe08 	bl	80031c4 <HAL_RCC_OscConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005ba:	f000 f8a3 	bl	8000704 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005be:	230f      	movs	r3, #15
 80005c0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 80005c2:	2303      	movs	r3, #3
 80005c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005d6:	f107 0308 	add.w	r3, r7, #8
 80005da:	2105      	movs	r1, #5
 80005dc:	4618      	mov	r0, r3
 80005de:	f001 ff7d 	bl	80024dc <HAL_RCC_ClockConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80005e8:	f000 f88c 	bl	8000704 <Error_Handler>
  }
}
 80005ec:	bf00      	nop
 80005ee:	3750      	adds	r7, #80	; 0x50
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40023800 	.word	0x40023800
 80005f8:	40007000 	.word	0x40007000

080005fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000600:	4b11      	ldr	r3, [pc, #68]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 8000602:	4a12      	ldr	r2, [pc, #72]	; (800064c <MX_USART2_UART_Init+0x50>)
 8000604:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000606:	4b10      	ldr	r3, [pc, #64]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 8000608:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800060c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800060e:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800061a:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000620:	4b09      	ldr	r3, [pc, #36]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 8000622:	220c      	movs	r2, #12
 8000624:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000626:	4b08      	ldr	r3, [pc, #32]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 8000628:	2200      	movs	r2, #0
 800062a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 800062e:	2200      	movs	r2, #0
 8000630:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000632:	4805      	ldr	r0, [pc, #20]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 8000634:	f003 f864 	bl	8003700 <HAL_UART_Init>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800063e:	f000 f861 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000128 	.word	0x20000128
 800064c:	40004400 	.word	0x40004400

08000650 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08a      	sub	sp, #40	; 0x28
 8000654:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000656:	f107 0314 	add.w	r3, r7, #20
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]
 8000664:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	613b      	str	r3, [r7, #16]
 800066a:	4b24      	ldr	r3, [pc, #144]	; (80006fc <MX_GPIO_Init+0xac>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a23      	ldr	r2, [pc, #140]	; (80006fc <MX_GPIO_Init+0xac>)
 8000670:	f043 0304 	orr.w	r3, r3, #4
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b21      	ldr	r3, [pc, #132]	; (80006fc <MX_GPIO_Init+0xac>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0304 	and.w	r3, r3, #4
 800067e:	613b      	str	r3, [r7, #16]
 8000680:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	4b1d      	ldr	r3, [pc, #116]	; (80006fc <MX_GPIO_Init+0xac>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a1c      	ldr	r2, [pc, #112]	; (80006fc <MX_GPIO_Init+0xac>)
 800068c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b1a      	ldr	r3, [pc, #104]	; (80006fc <MX_GPIO_Init+0xac>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	4b16      	ldr	r3, [pc, #88]	; (80006fc <MX_GPIO_Init+0xac>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a15      	ldr	r2, [pc, #84]	; (80006fc <MX_GPIO_Init+0xac>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b13      	ldr	r3, [pc, #76]	; (80006fc <MX_GPIO_Init+0xac>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	60bb      	str	r3, [r7, #8]
 80006b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <MX_GPIO_Init+0xac>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a0e      	ldr	r2, [pc, #56]	; (80006fc <MX_GPIO_Init+0xac>)
 80006c4:	f043 0302 	orr.w	r3, r3, #2
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <MX_GPIO_Init+0xac>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0302 	and.w	r3, r3, #2
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006dc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80006e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	4619      	mov	r1, r3
 80006ec:	4804      	ldr	r0, [pc, #16]	; (8000700 <MX_GPIO_Init+0xb0>)
 80006ee:	f000 fa97 	bl	8000c20 <HAL_GPIO_Init>

}
 80006f2:	bf00      	nop
 80006f4:	3728      	adds	r7, #40	; 0x28
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800
 8000700:	40020800 	.word	0x40020800

08000704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000708:	b672      	cpsid	i
}
 800070a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800070c:	e7fe      	b.n	800070c <Error_Handler+0x8>
	...

08000710 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	4b10      	ldr	r3, [pc, #64]	; (800075c <HAL_MspInit+0x4c>)
 800071c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800071e:	4a0f      	ldr	r2, [pc, #60]	; (800075c <HAL_MspInit+0x4c>)
 8000720:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000724:	6453      	str	r3, [r2, #68]	; 0x44
 8000726:	4b0d      	ldr	r3, [pc, #52]	; (800075c <HAL_MspInit+0x4c>)
 8000728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800072a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	603b      	str	r3, [r7, #0]
 8000736:	4b09      	ldr	r3, [pc, #36]	; (800075c <HAL_MspInit+0x4c>)
 8000738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073a:	4a08      	ldr	r2, [pc, #32]	; (800075c <HAL_MspInit+0x4c>)
 800073c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000740:	6413      	str	r3, [r2, #64]	; 0x40
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <HAL_MspInit+0x4c>)
 8000744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800074e:	2007      	movs	r0, #7
 8000750:	f000 fa24 	bl	8000b9c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000754:	bf00      	nop
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40023800 	.word	0x40023800

08000760 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08a      	sub	sp, #40	; 0x28
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a19      	ldr	r2, [pc, #100]	; (80007e4 <HAL_UART_MspInit+0x84>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d12b      	bne.n	80007da <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	613b      	str	r3, [r7, #16]
 8000786:	4b18      	ldr	r3, [pc, #96]	; (80007e8 <HAL_UART_MspInit+0x88>)
 8000788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078a:	4a17      	ldr	r2, [pc, #92]	; (80007e8 <HAL_UART_MspInit+0x88>)
 800078c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000790:	6413      	str	r3, [r2, #64]	; 0x40
 8000792:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <HAL_UART_MspInit+0x88>)
 8000794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <HAL_UART_MspInit+0x88>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a10      	ldr	r2, [pc, #64]	; (80007e8 <HAL_UART_MspInit+0x88>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <HAL_UART_MspInit+0x88>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007ba:	230c      	movs	r3, #12
 80007bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007be:	2302      	movs	r3, #2
 80007c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c6:	2303      	movs	r3, #3
 80007c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007ca:	2307      	movs	r3, #7
 80007cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ce:	f107 0314 	add.w	r3, r7, #20
 80007d2:	4619      	mov	r1, r3
 80007d4:	4805      	ldr	r0, [pc, #20]	; (80007ec <HAL_UART_MspInit+0x8c>)
 80007d6:	f000 fa23 	bl	8000c20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007da:	bf00      	nop
 80007dc:	3728      	adds	r7, #40	; 0x28
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40004400 	.word	0x40004400
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40020000 	.word	0x40020000

080007f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007f4:	e7fe      	b.n	80007f4 <NMI_Handler+0x4>

080007f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007fa:	e7fe      	b.n	80007fa <HardFault_Handler+0x4>

080007fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000800:	e7fe      	b.n	8000800 <MemManage_Handler+0x4>

08000802 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000802:	b480      	push	{r7}
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000806:	e7fe      	b.n	8000806 <BusFault_Handler+0x4>

08000808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800080c:	e7fe      	b.n	800080c <UsageFault_Handler+0x4>

0800080e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000812:	bf00      	nop
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr

0800081c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr

0800082a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800082e:	bf00      	nop
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr

08000838 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800083c:	f000 f89a 	bl	8000974 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}

08000844 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000848:	4802      	ldr	r0, [pc, #8]	; (8000854 <OTG_FS_IRQHandler+0x10>)
 800084a:	f000 fcd4 	bl	80011f6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20001650 	.word	0x20001650

08000858 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <SystemInit+0x20>)
 800085e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000862:	4a05      	ldr	r2, [pc, #20]	; (8000878 <SystemInit+0x20>)
 8000864:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000868:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	e000ed00 	.word	0xe000ed00

0800087c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800087c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000880:	480d      	ldr	r0, [pc, #52]	; (80008b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000882:	490e      	ldr	r1, [pc, #56]	; (80008bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000884:	4a0e      	ldr	r2, [pc, #56]	; (80008c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000886:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000888:	e002      	b.n	8000890 <LoopCopyDataInit>

0800088a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800088a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800088c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800088e:	3304      	adds	r3, #4

08000890 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000890:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000892:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000894:	d3f9      	bcc.n	800088a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000896:	4a0b      	ldr	r2, [pc, #44]	; (80008c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000898:	4c0b      	ldr	r4, [pc, #44]	; (80008c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800089a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800089c:	e001      	b.n	80008a2 <LoopFillZerobss>

0800089e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800089e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a0:	3204      	adds	r2, #4

080008a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a4:	d3fb      	bcc.n	800089e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008a6:	f7ff ffd7 	bl	8000858 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008aa:	f007 fb49 	bl	8007f40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008ae:	f7ff fe2b 	bl	8000508 <main>
  bx  lr    
 80008b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008bc:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 80008c0:	08008020 	.word	0x08008020
  ldr r2, =_sbss
 80008c4:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 80008c8:	20001d7c 	.word	0x20001d7c

080008cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008cc:	e7fe      	b.n	80008cc <ADC_IRQHandler>
	...

080008d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008d4:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <HAL_Init+0x40>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a0d      	ldr	r2, [pc, #52]	; (8000910 <HAL_Init+0x40>)
 80008da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008e0:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <HAL_Init+0x40>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a0a      	ldr	r2, [pc, #40]	; (8000910 <HAL_Init+0x40>)
 80008e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008ec:	4b08      	ldr	r3, [pc, #32]	; (8000910 <HAL_Init+0x40>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a07      	ldr	r2, [pc, #28]	; (8000910 <HAL_Init+0x40>)
 80008f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008f8:	2003      	movs	r0, #3
 80008fa:	f000 f94f 	bl	8000b9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008fe:	2000      	movs	r0, #0
 8000900:	f000 f808 	bl	8000914 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000904:	f7ff ff04 	bl	8000710 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000908:	2300      	movs	r3, #0
}
 800090a:	4618      	mov	r0, r3
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40023c00 	.word	0x40023c00

08000914 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800091c:	4b12      	ldr	r3, [pc, #72]	; (8000968 <HAL_InitTick+0x54>)
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	4b12      	ldr	r3, [pc, #72]	; (800096c <HAL_InitTick+0x58>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	4619      	mov	r1, r3
 8000926:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800092a:	fbb3 f3f1 	udiv	r3, r3, r1
 800092e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000932:	4618      	mov	r0, r3
 8000934:	f000 f967 	bl	8000c06 <HAL_SYSTICK_Config>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800093e:	2301      	movs	r3, #1
 8000940:	e00e      	b.n	8000960 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	2b0f      	cmp	r3, #15
 8000946:	d80a      	bhi.n	800095e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000948:	2200      	movs	r2, #0
 800094a:	6879      	ldr	r1, [r7, #4]
 800094c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000950:	f000 f92f 	bl	8000bb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000954:	4a06      	ldr	r2, [pc, #24]	; (8000970 <HAL_InitTick+0x5c>)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800095a:	2300      	movs	r3, #0
 800095c:	e000      	b.n	8000960 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800095e:	2301      	movs	r3, #1
}
 8000960:	4618      	mov	r0, r3
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20000000 	.word	0x20000000
 800096c:	20000008 	.word	0x20000008
 8000970:	20000004 	.word	0x20000004

08000974 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <HAL_IncTick+0x20>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	461a      	mov	r2, r3
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <HAL_IncTick+0x24>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4413      	add	r3, r2
 8000984:	4a04      	ldr	r2, [pc, #16]	; (8000998 <HAL_IncTick+0x24>)
 8000986:	6013      	str	r3, [r2, #0]
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	20000008 	.word	0x20000008
 8000998:	2000016c 	.word	0x2000016c

0800099c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  return uwTick;
 80009a0:	4b03      	ldr	r3, [pc, #12]	; (80009b0 <HAL_GetTick+0x14>)
 80009a2:	681b      	ldr	r3, [r3, #0]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	2000016c 	.word	0x2000016c

080009b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009bc:	f7ff ffee 	bl	800099c <HAL_GetTick>
 80009c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009cc:	d005      	beq.n	80009da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009ce:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <HAL_Delay+0x44>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	461a      	mov	r2, r3
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	4413      	add	r3, r2
 80009d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009da:	bf00      	nop
 80009dc:	f7ff ffde 	bl	800099c <HAL_GetTick>
 80009e0:	4602      	mov	r2, r0
 80009e2:	68bb      	ldr	r3, [r7, #8]
 80009e4:	1ad3      	subs	r3, r2, r3
 80009e6:	68fa      	ldr	r2, [r7, #12]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d8f7      	bhi.n	80009dc <HAL_Delay+0x28>
  {
  }
}
 80009ec:	bf00      	nop
 80009ee:	bf00      	nop
 80009f0:	3710      	adds	r7, #16
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000008 	.word	0x20000008

080009fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f003 0307 	and.w	r3, r3, #7
 8000a0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <__NVIC_SetPriorityGrouping+0x44>)
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a12:	68ba      	ldr	r2, [r7, #8]
 8000a14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a18:	4013      	ands	r3, r2
 8000a1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a2e:	4a04      	ldr	r2, [pc, #16]	; (8000a40 <__NVIC_SetPriorityGrouping+0x44>)
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	60d3      	str	r3, [r2, #12]
}
 8000a34:	bf00      	nop
 8000a36:	3714      	adds	r7, #20
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a48:	4b04      	ldr	r3, [pc, #16]	; (8000a5c <__NVIC_GetPriorityGrouping+0x18>)
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	0a1b      	lsrs	r3, r3, #8
 8000a4e:	f003 0307 	and.w	r3, r3, #7
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	db0b      	blt.n	8000a8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	f003 021f 	and.w	r2, r3, #31
 8000a78:	4907      	ldr	r1, [pc, #28]	; (8000a98 <__NVIC_EnableIRQ+0x38>)
 8000a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7e:	095b      	lsrs	r3, r3, #5
 8000a80:	2001      	movs	r0, #1
 8000a82:	fa00 f202 	lsl.w	r2, r0, r2
 8000a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a8a:	bf00      	nop
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	e000e100 	.word	0xe000e100

08000a9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	6039      	str	r1, [r7, #0]
 8000aa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	db0a      	blt.n	8000ac6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	b2da      	uxtb	r2, r3
 8000ab4:	490c      	ldr	r1, [pc, #48]	; (8000ae8 <__NVIC_SetPriority+0x4c>)
 8000ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aba:	0112      	lsls	r2, r2, #4
 8000abc:	b2d2      	uxtb	r2, r2
 8000abe:	440b      	add	r3, r1
 8000ac0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ac4:	e00a      	b.n	8000adc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	b2da      	uxtb	r2, r3
 8000aca:	4908      	ldr	r1, [pc, #32]	; (8000aec <__NVIC_SetPriority+0x50>)
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	f003 030f 	and.w	r3, r3, #15
 8000ad2:	3b04      	subs	r3, #4
 8000ad4:	0112      	lsls	r2, r2, #4
 8000ad6:	b2d2      	uxtb	r2, r2
 8000ad8:	440b      	add	r3, r1
 8000ada:	761a      	strb	r2, [r3, #24]
}
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	e000e100 	.word	0xe000e100
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b089      	sub	sp, #36	; 0x24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	f003 0307 	and.w	r3, r3, #7
 8000b02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b04:	69fb      	ldr	r3, [r7, #28]
 8000b06:	f1c3 0307 	rsb	r3, r3, #7
 8000b0a:	2b04      	cmp	r3, #4
 8000b0c:	bf28      	it	cs
 8000b0e:	2304      	movcs	r3, #4
 8000b10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	3304      	adds	r3, #4
 8000b16:	2b06      	cmp	r3, #6
 8000b18:	d902      	bls.n	8000b20 <NVIC_EncodePriority+0x30>
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	3b03      	subs	r3, #3
 8000b1e:	e000      	b.n	8000b22 <NVIC_EncodePriority+0x32>
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2e:	43da      	mvns	r2, r3
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	401a      	ands	r2, r3
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b42:	43d9      	mvns	r1, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b48:	4313      	orrs	r3, r2
         );
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3724      	adds	r7, #36	; 0x24
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
	...

08000b58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3b01      	subs	r3, #1
 8000b64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b68:	d301      	bcc.n	8000b6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e00f      	b.n	8000b8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <SysTick_Config+0x40>)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3b01      	subs	r3, #1
 8000b74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b76:	210f      	movs	r1, #15
 8000b78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b7c:	f7ff ff8e 	bl	8000a9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b80:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <SysTick_Config+0x40>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b86:	4b04      	ldr	r3, [pc, #16]	; (8000b98 <SysTick_Config+0x40>)
 8000b88:	2207      	movs	r2, #7
 8000b8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	e000e010 	.word	0xe000e010

08000b9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f7ff ff29 	bl	80009fc <__NVIC_SetPriorityGrouping>
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b086      	sub	sp, #24
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	4603      	mov	r3, r0
 8000bba:	60b9      	str	r1, [r7, #8]
 8000bbc:	607a      	str	r2, [r7, #4]
 8000bbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bc4:	f7ff ff3e 	bl	8000a44 <__NVIC_GetPriorityGrouping>
 8000bc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	68b9      	ldr	r1, [r7, #8]
 8000bce:	6978      	ldr	r0, [r7, #20]
 8000bd0:	f7ff ff8e 	bl	8000af0 <NVIC_EncodePriority>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bda:	4611      	mov	r1, r2
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ff5d 	bl	8000a9c <__NVIC_SetPriority>
}
 8000be2:	bf00      	nop
 8000be4:	3718      	adds	r7, #24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b082      	sub	sp, #8
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff ff31 	bl	8000a60 <__NVIC_EnableIRQ>
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b082      	sub	sp, #8
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f7ff ffa2 	bl	8000b58 <SysTick_Config>
 8000c14:	4603      	mov	r3, r0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
	...

08000c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b089      	sub	sp, #36	; 0x24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c36:	2300      	movs	r3, #0
 8000c38:	61fb      	str	r3, [r7, #28]
 8000c3a:	e165      	b.n	8000f08 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	fa02 f303 	lsl.w	r3, r2, r3
 8000c44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	697a      	ldr	r2, [r7, #20]
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c50:	693a      	ldr	r2, [r7, #16]
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	f040 8154 	bne.w	8000f02 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f003 0303 	and.w	r3, r3, #3
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d005      	beq.n	8000c72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c6e:	2b02      	cmp	r3, #2
 8000c70:	d130      	bne.n	8000cd4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	689b      	ldr	r3, [r3, #8]
 8000c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	2203      	movs	r2, #3
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	43db      	mvns	r3, r3
 8000c84:	69ba      	ldr	r2, [r7, #24]
 8000c86:	4013      	ands	r3, r2
 8000c88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	68da      	ldr	r2, [r3, #12]
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	69ba      	ldr	r2, [r7, #24]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	69ba      	ldr	r2, [r7, #24]
 8000ca0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ca8:	2201      	movs	r2, #1
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	69ba      	ldr	r2, [r7, #24]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	091b      	lsrs	r3, r3, #4
 8000cbe:	f003 0201 	and.w	r2, r3, #1
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	69ba      	ldr	r2, [r7, #24]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	69ba      	ldr	r2, [r7, #24]
 8000cd2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f003 0303 	and.w	r3, r3, #3
 8000cdc:	2b03      	cmp	r3, #3
 8000cde:	d017      	beq.n	8000d10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	2203      	movs	r2, #3
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	69ba      	ldr	r2, [r7, #24]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	689a      	ldr	r2, [r3, #8]
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f003 0303 	and.w	r3, r3, #3
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	d123      	bne.n	8000d64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	08da      	lsrs	r2, r3, #3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3208      	adds	r2, #8
 8000d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	f003 0307 	and.w	r3, r3, #7
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	220f      	movs	r2, #15
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	69ba      	ldr	r2, [r7, #24]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	691a      	ldr	r2, [r3, #16]
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	f003 0307 	and.w	r3, r3, #7
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	4313      	orrs	r3, r2
 8000d54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	08da      	lsrs	r2, r3, #3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	3208      	adds	r2, #8
 8000d5e:	69b9      	ldr	r1, [r7, #24]
 8000d60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	2203      	movs	r2, #3
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	43db      	mvns	r3, r3
 8000d76:	69ba      	ldr	r2, [r7, #24]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f003 0203 	and.w	r2, r3, #3
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	f000 80ae 	beq.w	8000f02 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	4b5d      	ldr	r3, [pc, #372]	; (8000f20 <HAL_GPIO_Init+0x300>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dae:	4a5c      	ldr	r2, [pc, #368]	; (8000f20 <HAL_GPIO_Init+0x300>)
 8000db0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db4:	6453      	str	r3, [r2, #68]	; 0x44
 8000db6:	4b5a      	ldr	r3, [pc, #360]	; (8000f20 <HAL_GPIO_Init+0x300>)
 8000db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dc2:	4a58      	ldr	r2, [pc, #352]	; (8000f24 <HAL_GPIO_Init+0x304>)
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	089b      	lsrs	r3, r3, #2
 8000dc8:	3302      	adds	r3, #2
 8000dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	f003 0303 	and.w	r3, r3, #3
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	220f      	movs	r2, #15
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	43db      	mvns	r3, r3
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	4013      	ands	r3, r2
 8000de4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a4f      	ldr	r2, [pc, #316]	; (8000f28 <HAL_GPIO_Init+0x308>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d025      	beq.n	8000e3a <HAL_GPIO_Init+0x21a>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a4e      	ldr	r2, [pc, #312]	; (8000f2c <HAL_GPIO_Init+0x30c>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d01f      	beq.n	8000e36 <HAL_GPIO_Init+0x216>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a4d      	ldr	r2, [pc, #308]	; (8000f30 <HAL_GPIO_Init+0x310>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d019      	beq.n	8000e32 <HAL_GPIO_Init+0x212>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a4c      	ldr	r2, [pc, #304]	; (8000f34 <HAL_GPIO_Init+0x314>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d013      	beq.n	8000e2e <HAL_GPIO_Init+0x20e>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a4b      	ldr	r2, [pc, #300]	; (8000f38 <HAL_GPIO_Init+0x318>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d00d      	beq.n	8000e2a <HAL_GPIO_Init+0x20a>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a4a      	ldr	r2, [pc, #296]	; (8000f3c <HAL_GPIO_Init+0x31c>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d007      	beq.n	8000e26 <HAL_GPIO_Init+0x206>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a49      	ldr	r2, [pc, #292]	; (8000f40 <HAL_GPIO_Init+0x320>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d101      	bne.n	8000e22 <HAL_GPIO_Init+0x202>
 8000e1e:	2306      	movs	r3, #6
 8000e20:	e00c      	b.n	8000e3c <HAL_GPIO_Init+0x21c>
 8000e22:	2307      	movs	r3, #7
 8000e24:	e00a      	b.n	8000e3c <HAL_GPIO_Init+0x21c>
 8000e26:	2305      	movs	r3, #5
 8000e28:	e008      	b.n	8000e3c <HAL_GPIO_Init+0x21c>
 8000e2a:	2304      	movs	r3, #4
 8000e2c:	e006      	b.n	8000e3c <HAL_GPIO_Init+0x21c>
 8000e2e:	2303      	movs	r3, #3
 8000e30:	e004      	b.n	8000e3c <HAL_GPIO_Init+0x21c>
 8000e32:	2302      	movs	r3, #2
 8000e34:	e002      	b.n	8000e3c <HAL_GPIO_Init+0x21c>
 8000e36:	2301      	movs	r3, #1
 8000e38:	e000      	b.n	8000e3c <HAL_GPIO_Init+0x21c>
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	69fa      	ldr	r2, [r7, #28]
 8000e3e:	f002 0203 	and.w	r2, r2, #3
 8000e42:	0092      	lsls	r2, r2, #2
 8000e44:	4093      	lsls	r3, r2
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e4c:	4935      	ldr	r1, [pc, #212]	; (8000f24 <HAL_GPIO_Init+0x304>)
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	089b      	lsrs	r3, r3, #2
 8000e52:	3302      	adds	r3, #2
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e5a:	4b3a      	ldr	r3, [pc, #232]	; (8000f44 <HAL_GPIO_Init+0x324>)
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	43db      	mvns	r3, r3
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	4013      	ands	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d003      	beq.n	8000e7e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e7e:	4a31      	ldr	r2, [pc, #196]	; (8000f44 <HAL_GPIO_Init+0x324>)
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e84:	4b2f      	ldr	r3, [pc, #188]	; (8000f44 <HAL_GPIO_Init+0x324>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4013      	ands	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d003      	beq.n	8000ea8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ea8:	4a26      	ldr	r2, [pc, #152]	; (8000f44 <HAL_GPIO_Init+0x324>)
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000eae:	4b25      	ldr	r3, [pc, #148]	; (8000f44 <HAL_GPIO_Init+0x324>)
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d003      	beq.n	8000ed2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ed2:	4a1c      	ldr	r2, [pc, #112]	; (8000f44 <HAL_GPIO_Init+0x324>)
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ed8:	4b1a      	ldr	r3, [pc, #104]	; (8000f44 <HAL_GPIO_Init+0x324>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d003      	beq.n	8000efc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000efc:	4a11      	ldr	r2, [pc, #68]	; (8000f44 <HAL_GPIO_Init+0x324>)
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	3301      	adds	r3, #1
 8000f06:	61fb      	str	r3, [r7, #28]
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	2b0f      	cmp	r3, #15
 8000f0c:	f67f ae96 	bls.w	8000c3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f10:	bf00      	nop
 8000f12:	bf00      	nop
 8000f14:	3724      	adds	r7, #36	; 0x24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	40023800 	.word	0x40023800
 8000f24:	40013800 	.word	0x40013800
 8000f28:	40020000 	.word	0x40020000
 8000f2c:	40020400 	.word	0x40020400
 8000f30:	40020800 	.word	0x40020800
 8000f34:	40020c00 	.word	0x40020c00
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	40021400 	.word	0x40021400
 8000f40:	40021800 	.word	0x40021800
 8000f44:	40013c00 	.word	0x40013c00

08000f48 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f4a:	b08f      	sub	sp, #60	; 0x3c
 8000f4c:	af0a      	add	r7, sp, #40	; 0x28
 8000f4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d101      	bne.n	8000f5a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e116      	b.n	8001188 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d106      	bne.n	8000f7a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f006 fc6b 	bl	8007850 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2203      	movs	r2, #3
 8000f7e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d102      	bne.n	8000f94 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f002 ff88 	bl	8003eae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	603b      	str	r3, [r7, #0]
 8000fa4:	687e      	ldr	r6, [r7, #4]
 8000fa6:	466d      	mov	r5, sp
 8000fa8:	f106 0410 	add.w	r4, r6, #16
 8000fac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fb4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fb8:	e885 0003 	stmia.w	r5, {r0, r1}
 8000fbc:	1d33      	adds	r3, r6, #4
 8000fbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fc0:	6838      	ldr	r0, [r7, #0]
 8000fc2:	f002 fe5f 	bl	8003c84 <USB_CoreInit>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d005      	beq.n	8000fd8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2202      	movs	r2, #2
 8000fd0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e0d7      	b.n	8001188 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f002 ff76 	bl	8003ed0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	73fb      	strb	r3, [r7, #15]
 8000fe8:	e04a      	b.n	8001080 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000fea:	7bfa      	ldrb	r2, [r7, #15]
 8000fec:	6879      	ldr	r1, [r7, #4]
 8000fee:	4613      	mov	r3, r2
 8000ff0:	00db      	lsls	r3, r3, #3
 8000ff2:	4413      	add	r3, r2
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	440b      	add	r3, r1
 8000ff8:	333d      	adds	r3, #61	; 0x3d
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000ffe:	7bfa      	ldrb	r2, [r7, #15]
 8001000:	6879      	ldr	r1, [r7, #4]
 8001002:	4613      	mov	r3, r2
 8001004:	00db      	lsls	r3, r3, #3
 8001006:	4413      	add	r3, r2
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	440b      	add	r3, r1
 800100c:	333c      	adds	r3, #60	; 0x3c
 800100e:	7bfa      	ldrb	r2, [r7, #15]
 8001010:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001012:	7bfa      	ldrb	r2, [r7, #15]
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	b298      	uxth	r0, r3
 8001018:	6879      	ldr	r1, [r7, #4]
 800101a:	4613      	mov	r3, r2
 800101c:	00db      	lsls	r3, r3, #3
 800101e:	4413      	add	r3, r2
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	440b      	add	r3, r1
 8001024:	3344      	adds	r3, #68	; 0x44
 8001026:	4602      	mov	r2, r0
 8001028:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800102a:	7bfa      	ldrb	r2, [r7, #15]
 800102c:	6879      	ldr	r1, [r7, #4]
 800102e:	4613      	mov	r3, r2
 8001030:	00db      	lsls	r3, r3, #3
 8001032:	4413      	add	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	440b      	add	r3, r1
 8001038:	3340      	adds	r3, #64	; 0x40
 800103a:	2200      	movs	r2, #0
 800103c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800103e:	7bfa      	ldrb	r2, [r7, #15]
 8001040:	6879      	ldr	r1, [r7, #4]
 8001042:	4613      	mov	r3, r2
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	4413      	add	r3, r2
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	440b      	add	r3, r1
 800104c:	3348      	adds	r3, #72	; 0x48
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001052:	7bfa      	ldrb	r2, [r7, #15]
 8001054:	6879      	ldr	r1, [r7, #4]
 8001056:	4613      	mov	r3, r2
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	4413      	add	r3, r2
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	440b      	add	r3, r1
 8001060:	334c      	adds	r3, #76	; 0x4c
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001066:	7bfa      	ldrb	r2, [r7, #15]
 8001068:	6879      	ldr	r1, [r7, #4]
 800106a:	4613      	mov	r3, r2
 800106c:	00db      	lsls	r3, r3, #3
 800106e:	4413      	add	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	440b      	add	r3, r1
 8001074:	3354      	adds	r3, #84	; 0x54
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	3301      	adds	r3, #1
 800107e:	73fb      	strb	r3, [r7, #15]
 8001080:	7bfa      	ldrb	r2, [r7, #15]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	429a      	cmp	r2, r3
 8001088:	d3af      	bcc.n	8000fea <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800108a:	2300      	movs	r3, #0
 800108c:	73fb      	strb	r3, [r7, #15]
 800108e:	e044      	b.n	800111a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001090:	7bfa      	ldrb	r2, [r7, #15]
 8001092:	6879      	ldr	r1, [r7, #4]
 8001094:	4613      	mov	r3, r2
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	4413      	add	r3, r2
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	440b      	add	r3, r1
 800109e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80010a2:	2200      	movs	r2, #0
 80010a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80010a6:	7bfa      	ldrb	r2, [r7, #15]
 80010a8:	6879      	ldr	r1, [r7, #4]
 80010aa:	4613      	mov	r3, r2
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	4413      	add	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	440b      	add	r3, r1
 80010b4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80010b8:	7bfa      	ldrb	r2, [r7, #15]
 80010ba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010bc:	7bfa      	ldrb	r2, [r7, #15]
 80010be:	6879      	ldr	r1, [r7, #4]
 80010c0:	4613      	mov	r3, r2
 80010c2:	00db      	lsls	r3, r3, #3
 80010c4:	4413      	add	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	440b      	add	r3, r1
 80010ca:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80010ce:	2200      	movs	r2, #0
 80010d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010d2:	7bfa      	ldrb	r2, [r7, #15]
 80010d4:	6879      	ldr	r1, [r7, #4]
 80010d6:	4613      	mov	r3, r2
 80010d8:	00db      	lsls	r3, r3, #3
 80010da:	4413      	add	r3, r2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	440b      	add	r3, r1
 80010e0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80010e8:	7bfa      	ldrb	r2, [r7, #15]
 80010ea:	6879      	ldr	r1, [r7, #4]
 80010ec:	4613      	mov	r3, r2
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	4413      	add	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	440b      	add	r3, r1
 80010f6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010fe:	7bfa      	ldrb	r2, [r7, #15]
 8001100:	6879      	ldr	r1, [r7, #4]
 8001102:	4613      	mov	r3, r2
 8001104:	00db      	lsls	r3, r3, #3
 8001106:	4413      	add	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	440b      	add	r3, r1
 800110c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001114:	7bfb      	ldrb	r3, [r7, #15]
 8001116:	3301      	adds	r3, #1
 8001118:	73fb      	strb	r3, [r7, #15]
 800111a:	7bfa      	ldrb	r2, [r7, #15]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	429a      	cmp	r2, r3
 8001122:	d3b5      	bcc.n	8001090 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	603b      	str	r3, [r7, #0]
 800112a:	687e      	ldr	r6, [r7, #4]
 800112c:	466d      	mov	r5, sp
 800112e:	f106 0410 	add.w	r4, r6, #16
 8001132:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001134:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001136:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001138:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800113a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800113e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001142:	1d33      	adds	r3, r6, #4
 8001144:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001146:	6838      	ldr	r0, [r7, #0]
 8001148:	f002 ff0e 	bl	8003f68 <USB_DevInit>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d005      	beq.n	800115e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2202      	movs	r2, #2
 8001156:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e014      	b.n	8001188 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2201      	movs	r2, #1
 800116a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001172:	2b01      	cmp	r3, #1
 8001174:	d102      	bne.n	800117c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f001 f98c 	bl	8002494 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4618      	mov	r0, r3
 8001182:	f004 f850 	bl	8005226 <USB_DevDisconnect>

  return HAL_OK;
 8001186:	2300      	movs	r3, #0
}
 8001188:	4618      	mov	r0, r3
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001190 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d101      	bne.n	80011ac <HAL_PCD_Start+0x1c>
 80011a8:	2302      	movs	r3, #2
 80011aa:	e020      	b.n	80011ee <HAL_PCD_Start+0x5e>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2201      	movs	r2, #1
 80011b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d109      	bne.n	80011d0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d005      	beq.n	80011d0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011c8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f002 fe59 	bl	8003e8c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	f004 f800 	bl	80051e4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80011f6:	b590      	push	{r4, r7, lr}
 80011f8:	b08d      	sub	sp, #52	; 0x34
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001204:	6a3b      	ldr	r3, [r7, #32]
 8001206:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4618      	mov	r0, r3
 800120e:	f004 f8be 	bl	800538e <USB_GetMode>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	f040 84b7 	bne.w	8001b88 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4618      	mov	r0, r3
 8001220:	f004 f822 	bl	8005268 <USB_ReadInterrupts>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	f000 84ad 	beq.w	8001b86 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	0a1b      	lsrs	r3, r3, #8
 8001236:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4618      	mov	r0, r3
 8001246:	f004 f80f 	bl	8005268 <USB_ReadInterrupts>
 800124a:	4603      	mov	r3, r0
 800124c:	f003 0302 	and.w	r3, r3, #2
 8001250:	2b02      	cmp	r3, #2
 8001252:	d107      	bne.n	8001264 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	695a      	ldr	r2, [r3, #20]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f002 0202 	and.w	r2, r2, #2
 8001262:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4618      	mov	r0, r3
 800126a:	f003 fffd 	bl	8005268 <USB_ReadInterrupts>
 800126e:	4603      	mov	r3, r0
 8001270:	f003 0310 	and.w	r3, r3, #16
 8001274:	2b10      	cmp	r3, #16
 8001276:	d161      	bne.n	800133c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	699a      	ldr	r2, [r3, #24]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f022 0210 	bic.w	r2, r2, #16
 8001286:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001288:	6a3b      	ldr	r3, [r7, #32]
 800128a:	6a1b      	ldr	r3, [r3, #32]
 800128c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	f003 020f 	and.w	r2, r3, #15
 8001294:	4613      	mov	r3, r2
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	4413      	add	r3, r2
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	4413      	add	r3, r2
 80012a4:	3304      	adds	r3, #4
 80012a6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	0c5b      	lsrs	r3, r3, #17
 80012ac:	f003 030f 	and.w	r3, r3, #15
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d124      	bne.n	80012fe <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80012ba:	4013      	ands	r3, r2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d035      	beq.n	800132c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	091b      	lsrs	r3, r3, #4
 80012c8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	461a      	mov	r2, r3
 80012d2:	6a38      	ldr	r0, [r7, #32]
 80012d4:	f003 fe34 	bl	8004f40 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	691a      	ldr	r2, [r3, #16]
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	091b      	lsrs	r3, r3, #4
 80012e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012e4:	441a      	add	r2, r3
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	6a1a      	ldr	r2, [r3, #32]
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	091b      	lsrs	r3, r3, #4
 80012f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012f6:	441a      	add	r2, r3
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	621a      	str	r2, [r3, #32]
 80012fc:	e016      	b.n	800132c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	0c5b      	lsrs	r3, r3, #17
 8001302:	f003 030f 	and.w	r3, r3, #15
 8001306:	2b06      	cmp	r3, #6
 8001308:	d110      	bne.n	800132c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001310:	2208      	movs	r2, #8
 8001312:	4619      	mov	r1, r3
 8001314:	6a38      	ldr	r0, [r7, #32]
 8001316:	f003 fe13 	bl	8004f40 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	6a1a      	ldr	r2, [r3, #32]
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	091b      	lsrs	r3, r3, #4
 8001322:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001326:	441a      	add	r2, r3
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	699a      	ldr	r2, [r3, #24]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f042 0210 	orr.w	r2, r2, #16
 800133a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4618      	mov	r0, r3
 8001342:	f003 ff91 	bl	8005268 <USB_ReadInterrupts>
 8001346:	4603      	mov	r3, r0
 8001348:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800134c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001350:	f040 80a7 	bne.w	80014a2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001354:	2300      	movs	r3, #0
 8001356:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4618      	mov	r0, r3
 800135e:	f003 ff96 	bl	800528e <USB_ReadDevAllOutEpInterrupt>
 8001362:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001364:	e099      	b.n	800149a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	2b00      	cmp	r3, #0
 800136e:	f000 808e 	beq.w	800148e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001378:	b2d2      	uxtb	r2, r2
 800137a:	4611      	mov	r1, r2
 800137c:	4618      	mov	r0, r3
 800137e:	f003 ffba 	bl	80052f6 <USB_ReadDevOutEPInterrupt>
 8001382:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	2b00      	cmp	r3, #0
 800138c:	d00c      	beq.n	80013a8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800138e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001390:	015a      	lsls	r2, r3, #5
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	4413      	add	r3, r2
 8001396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800139a:	461a      	mov	r2, r3
 800139c:	2301      	movs	r3, #1
 800139e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80013a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f000 fef0 	bl	8002188 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	f003 0308 	and.w	r3, r3, #8
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d00c      	beq.n	80013cc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80013b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b4:	015a      	lsls	r2, r3, #5
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	4413      	add	r3, r2
 80013ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013be:	461a      	mov	r2, r3
 80013c0:	2308      	movs	r3, #8
 80013c2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80013c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f000 ffc6 	bl	8002358 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	f003 0310 	and.w	r3, r3, #16
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d008      	beq.n	80013e8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80013d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d8:	015a      	lsls	r2, r3, #5
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	4413      	add	r3, r2
 80013de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013e2:	461a      	mov	r2, r3
 80013e4:	2310      	movs	r3, #16
 80013e6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d030      	beq.n	8001454 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80013f2:	6a3b      	ldr	r3, [r7, #32]
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013fa:	2b80      	cmp	r3, #128	; 0x80
 80013fc:	d109      	bne.n	8001412 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	69fa      	ldr	r2, [r7, #28]
 8001408:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800140c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001410:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001414:	4613      	mov	r3, r2
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	4413      	add	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	4413      	add	r3, r2
 8001424:	3304      	adds	r3, #4
 8001426:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	78db      	ldrb	r3, [r3, #3]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d108      	bne.n	8001442 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	2200      	movs	r2, #0
 8001434:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001438:	b2db      	uxtb	r3, r3
 800143a:	4619      	mov	r1, r3
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f006 fb23 	bl	8007a88 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001444:	015a      	lsls	r2, r3, #5
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	4413      	add	r3, r2
 800144a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800144e:	461a      	mov	r2, r3
 8001450:	2302      	movs	r3, #2
 8001452:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	f003 0320 	and.w	r3, r3, #32
 800145a:	2b00      	cmp	r3, #0
 800145c:	d008      	beq.n	8001470 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800145e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001460:	015a      	lsls	r2, r3, #5
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	4413      	add	r3, r2
 8001466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800146a:	461a      	mov	r2, r3
 800146c:	2320      	movs	r3, #32
 800146e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d009      	beq.n	800148e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800147a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147c:	015a      	lsls	r2, r3, #5
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	4413      	add	r3, r2
 8001482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001486:	461a      	mov	r2, r3
 8001488:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800148c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800148e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001490:	3301      	adds	r3, #1
 8001492:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001496:	085b      	lsrs	r3, r3, #1
 8001498:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800149a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800149c:	2b00      	cmp	r3, #0
 800149e:	f47f af62 	bne.w	8001366 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f003 fede 	bl	8005268 <USB_ReadInterrupts>
 80014ac:	4603      	mov	r3, r0
 80014ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80014b6:	f040 80db 	bne.w	8001670 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4618      	mov	r0, r3
 80014c0:	f003 feff 	bl	80052c2 <USB_ReadDevAllInEpInterrupt>
 80014c4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80014c6:	2300      	movs	r3, #0
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80014ca:	e0cd      	b.n	8001668 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80014cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f000 80c2 	beq.w	800165c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014de:	b2d2      	uxtb	r2, r2
 80014e0:	4611      	mov	r1, r2
 80014e2:	4618      	mov	r0, r3
 80014e4:	f003 ff25 	bl	8005332 <USB_ReadDevInEPInterrupt>
 80014e8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d057      	beq.n	80015a4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80014f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f6:	f003 030f 	and.w	r3, r3, #15
 80014fa:	2201      	movs	r2, #1
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001508:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	43db      	mvns	r3, r3
 800150e:	69f9      	ldr	r1, [r7, #28]
 8001510:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001514:	4013      	ands	r3, r2
 8001516:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151a:	015a      	lsls	r2, r3, #5
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	4413      	add	r3, r2
 8001520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001524:	461a      	mov	r2, r3
 8001526:	2301      	movs	r3, #1
 8001528:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d132      	bne.n	8001598 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001536:	4613      	mov	r3, r2
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	4413      	add	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	440b      	add	r3, r1
 8001540:	334c      	adds	r3, #76	; 0x4c
 8001542:	6819      	ldr	r1, [r3, #0]
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001548:	4613      	mov	r3, r2
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	4413      	add	r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4403      	add	r3, r0
 8001552:	3348      	adds	r3, #72	; 0x48
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4419      	add	r1, r3
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800155c:	4613      	mov	r3, r2
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	4413      	add	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4403      	add	r3, r0
 8001566:	334c      	adds	r3, #76	; 0x4c
 8001568:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800156a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156c:	2b00      	cmp	r3, #0
 800156e:	d113      	bne.n	8001598 <HAL_PCD_IRQHandler+0x3a2>
 8001570:	6879      	ldr	r1, [r7, #4]
 8001572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001574:	4613      	mov	r3, r2
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	4413      	add	r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	440b      	add	r3, r1
 800157e:	3354      	adds	r3, #84	; 0x54
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d108      	bne.n	8001598 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6818      	ldr	r0, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001590:	461a      	mov	r2, r3
 8001592:	2101      	movs	r1, #1
 8001594:	f003 ff2c 	bl	80053f0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159a:	b2db      	uxtb	r3, r3
 800159c:	4619      	mov	r1, r3
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f006 f9ed 	bl	800797e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	f003 0308 	and.w	r3, r3, #8
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d008      	beq.n	80015c0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80015ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b0:	015a      	lsls	r2, r3, #5
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	4413      	add	r3, r2
 80015b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015ba:	461a      	mov	r2, r3
 80015bc:	2308      	movs	r3, #8
 80015be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	f003 0310 	and.w	r3, r3, #16
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d008      	beq.n	80015dc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80015ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015cc:	015a      	lsls	r2, r3, #5
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	4413      	add	r3, r2
 80015d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015d6:	461a      	mov	r2, r3
 80015d8:	2310      	movs	r3, #16
 80015da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d008      	beq.n	80015f8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80015e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e8:	015a      	lsls	r2, r3, #5
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	4413      	add	r3, r2
 80015ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015f2:	461a      	mov	r2, r3
 80015f4:	2340      	movs	r3, #64	; 0x40
 80015f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d023      	beq.n	800164a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001602:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001604:	6a38      	ldr	r0, [r7, #32]
 8001606:	f002 fe0d 	bl	8004224 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800160a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800160c:	4613      	mov	r3, r2
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	4413      	add	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	3338      	adds	r3, #56	; 0x38
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	4413      	add	r3, r2
 800161a:	3304      	adds	r3, #4
 800161c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	78db      	ldrb	r3, [r3, #3]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d108      	bne.n	8001638 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	2200      	movs	r2, #0
 800162a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800162c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162e:	b2db      	uxtb	r3, r3
 8001630:	4619      	mov	r1, r3
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f006 fa3a 	bl	8007aac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163a:	015a      	lsls	r2, r3, #5
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	4413      	add	r3, r2
 8001640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001644:	461a      	mov	r2, r3
 8001646:	2302      	movs	r3, #2
 8001648:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001650:	2b00      	cmp	r3, #0
 8001652:	d003      	beq.n	800165c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001654:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f000 fd08 	bl	800206c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800165c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165e:	3301      	adds	r3, #1
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001664:	085b      	lsrs	r3, r3, #1
 8001666:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800166a:	2b00      	cmp	r3, #0
 800166c:	f47f af2e 	bne.w	80014cc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4618      	mov	r0, r3
 8001676:	f003 fdf7 	bl	8005268 <USB_ReadInterrupts>
 800167a:	4603      	mov	r3, r0
 800167c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001680:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001684:	d122      	bne.n	80016cc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	69fa      	ldr	r2, [r7, #28]
 8001690:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001694:	f023 0301 	bic.w	r3, r3, #1
 8001698:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d108      	bne.n	80016b6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2200      	movs	r2, #0
 80016a8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80016ac:	2100      	movs	r1, #0
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f006 fbb4 	bl	8007e1c <HAL_PCDEx_LPM_Callback>
 80016b4:	e002      	b.n	80016bc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f006 f9d8 	bl	8007a6c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	695a      	ldr	r2, [r3, #20]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80016ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f003 fdc9 	bl	8005268 <USB_ReadInterrupts>
 80016d6:	4603      	mov	r3, r0
 80016d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016e0:	d112      	bne.n	8001708 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d102      	bne.n	80016f8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f006 f994 	bl	8007a20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	695a      	ldr	r2, [r3, #20]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001706:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4618      	mov	r0, r3
 800170e:	f003 fdab 	bl	8005268 <USB_ReadInterrupts>
 8001712:	4603      	mov	r3, r0
 8001714:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001718:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800171c:	d121      	bne.n	8001762 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	695a      	ldr	r2, [r3, #20]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800172c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001734:	2b00      	cmp	r3, #0
 8001736:	d111      	bne.n	800175c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2201      	movs	r2, #1
 800173c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001746:	089b      	lsrs	r3, r3, #2
 8001748:	f003 020f 	and.w	r2, r3, #15
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001752:	2101      	movs	r1, #1
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f006 fb61 	bl	8007e1c <HAL_PCDEx_LPM_Callback>
 800175a:	e002      	b.n	8001762 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f006 f95f 	bl	8007a20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f003 fd7e 	bl	8005268 <USB_ReadInterrupts>
 800176c:	4603      	mov	r3, r0
 800176e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001776:	f040 80b7 	bne.w	80018e8 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	69fa      	ldr	r2, [r7, #28]
 8001784:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001788:	f023 0301 	bic.w	r3, r3, #1
 800178c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2110      	movs	r1, #16
 8001794:	4618      	mov	r0, r3
 8001796:	f002 fd45 	bl	8004224 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800179a:	2300      	movs	r3, #0
 800179c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800179e:	e046      	b.n	800182e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80017a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017a2:	015a      	lsls	r2, r3, #5
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	4413      	add	r3, r2
 80017a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017ac:	461a      	mov	r2, r3
 80017ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80017b2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80017b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b6:	015a      	lsls	r2, r3, #5
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	4413      	add	r3, r2
 80017bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017c4:	0151      	lsls	r1, r2, #5
 80017c6:	69fa      	ldr	r2, [r7, #28]
 80017c8:	440a      	add	r2, r1
 80017ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80017ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80017d2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80017d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d6:	015a      	lsls	r2, r3, #5
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	4413      	add	r3, r2
 80017dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017e0:	461a      	mov	r2, r3
 80017e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80017e6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80017e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ea:	015a      	lsls	r2, r3, #5
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	4413      	add	r3, r2
 80017f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017f8:	0151      	lsls	r1, r2, #5
 80017fa:	69fa      	ldr	r2, [r7, #28]
 80017fc:	440a      	add	r2, r1
 80017fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001802:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001806:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800180a:	015a      	lsls	r2, r3, #5
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	4413      	add	r3, r2
 8001810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001818:	0151      	lsls	r1, r2, #5
 800181a:	69fa      	ldr	r2, [r7, #28]
 800181c:	440a      	add	r2, r1
 800181e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001822:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001826:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800182a:	3301      	adds	r3, #1
 800182c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001834:	429a      	cmp	r2, r3
 8001836:	d3b3      	bcc.n	80017a0 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800183e:	69db      	ldr	r3, [r3, #28]
 8001840:	69fa      	ldr	r2, [r7, #28]
 8001842:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001846:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800184a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001850:	2b00      	cmp	r3, #0
 8001852:	d016      	beq.n	8001882 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800185a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800185e:	69fa      	ldr	r2, [r7, #28]
 8001860:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001864:	f043 030b 	orr.w	r3, r3, #11
 8001868:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001874:	69fa      	ldr	r2, [r7, #28]
 8001876:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800187a:	f043 030b 	orr.w	r3, r3, #11
 800187e:	6453      	str	r3, [r2, #68]	; 0x44
 8001880:	e015      	b.n	80018ae <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001888:	695b      	ldr	r3, [r3, #20]
 800188a:	69fa      	ldr	r2, [r7, #28]
 800188c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001890:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001894:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001898:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	69fa      	ldr	r2, [r7, #28]
 80018a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018a8:	f043 030b 	orr.w	r3, r3, #11
 80018ac:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	69fa      	ldr	r2, [r7, #28]
 80018b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018bc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80018c0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6818      	ldr	r0, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	691b      	ldr	r3, [r3, #16]
 80018ca:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018d2:	461a      	mov	r2, r3
 80018d4:	f003 fd8c 	bl	80053f0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	695a      	ldr	r2, [r3, #20]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80018e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f003 fcbb 	bl	8005268 <USB_ReadInterrupts>
 80018f2:	4603      	mov	r3, r0
 80018f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018fc:	d124      	bne.n	8001948 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f003 fd51 	bl	80053aa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4618      	mov	r0, r3
 800190e:	f002 fd06 	bl	800431e <USB_GetDevSpeed>
 8001912:	4603      	mov	r3, r0
 8001914:	461a      	mov	r2, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681c      	ldr	r4, [r3, #0]
 800191e:	f000 fec3 	bl	80026a8 <HAL_RCC_GetHCLKFreq>
 8001922:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001928:	b2db      	uxtb	r3, r3
 800192a:	461a      	mov	r2, r3
 800192c:	4620      	mov	r0, r4
 800192e:	f002 fa0b 	bl	8003d48 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f006 f84b 	bl	80079ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	695a      	ldr	r2, [r3, #20]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001946:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f003 fc8b 	bl	8005268 <USB_ReadInterrupts>
 8001952:	4603      	mov	r3, r0
 8001954:	f003 0308 	and.w	r3, r3, #8
 8001958:	2b08      	cmp	r3, #8
 800195a:	d10a      	bne.n	8001972 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f006 f828 	bl	80079b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	695a      	ldr	r2, [r3, #20]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f002 0208 	and.w	r2, r2, #8
 8001970:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f003 fc76 	bl	8005268 <USB_ReadInterrupts>
 800197c:	4603      	mov	r3, r0
 800197e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001982:	2b80      	cmp	r3, #128	; 0x80
 8001984:	d122      	bne.n	80019cc <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001986:	6a3b      	ldr	r3, [r7, #32]
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800198e:	6a3b      	ldr	r3, [r7, #32]
 8001990:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001992:	2301      	movs	r3, #1
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
 8001996:	e014      	b.n	80019c2 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001998:	6879      	ldr	r1, [r7, #4]
 800199a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800199c:	4613      	mov	r3, r2
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	4413      	add	r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	440b      	add	r3, r1
 80019a6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d105      	bne.n	80019bc <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	4619      	mov	r1, r3
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f000 fb27 	bl	800200a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019be:	3301      	adds	r3, #1
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d3e5      	bcc.n	8001998 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f003 fc49 	bl	8005268 <USB_ReadInterrupts>
 80019d6:	4603      	mov	r3, r0
 80019d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019e0:	d13b      	bne.n	8001a5a <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019e2:	2301      	movs	r3, #1
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
 80019e6:	e02b      	b.n	8001a40 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80019e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ea:	015a      	lsls	r2, r3, #5
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	4413      	add	r3, r2
 80019f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80019f8:	6879      	ldr	r1, [r7, #4]
 80019fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019fc:	4613      	mov	r3, r2
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	4413      	add	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	440b      	add	r3, r1
 8001a06:	3340      	adds	r3, #64	; 0x40
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d115      	bne.n	8001a3a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001a0e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	da12      	bge.n	8001a3a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001a14:	6879      	ldr	r1, [r7, #4]
 8001a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a18:	4613      	mov	r3, r2
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	4413      	add	r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	440b      	add	r3, r1
 8001a22:	333f      	adds	r3, #63	; 0x3f
 8001a24:	2201      	movs	r2, #1
 8001a26:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	4619      	mov	r1, r3
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 fae8 	bl	800200a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d3ce      	bcc.n	80019e8 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	695a      	ldr	r2, [r3, #20]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001a58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f003 fc02 	bl	8005268 <USB_ReadInterrupts>
 8001a64:	4603      	mov	r3, r0
 8001a66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a6e:	d155      	bne.n	8001b1c <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a70:	2301      	movs	r3, #1
 8001a72:	627b      	str	r3, [r7, #36]	; 0x24
 8001a74:	e045      	b.n	8001b02 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a78:	015a      	lsls	r2, r3, #5
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	4413      	add	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	440b      	add	r3, r1
 8001a94:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d12e      	bne.n	8001afc <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001a9e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	da2b      	bge.n	8001afc <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001ab0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d121      	bne.n	8001afc <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001ab8:	6879      	ldr	r1, [r7, #4]
 8001aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001abc:	4613      	mov	r3, r2
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	4413      	add	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	440b      	add	r3, r1
 8001ac6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001aca:	2201      	movs	r2, #1
 8001acc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001ace:	6a3b      	ldr	r3, [r7, #32]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001ad6:	6a3b      	ldr	r3, [r7, #32]
 8001ad8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001ada:	6a3b      	ldr	r3, [r7, #32]
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d10a      	bne.n	8001afc <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	69fa      	ldr	r2, [r7, #28]
 8001af0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001af4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001af8:	6053      	str	r3, [r2, #4]
            break;
 8001afa:	e007      	b.n	8001b0c <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afe:	3301      	adds	r3, #1
 8001b00:	627b      	str	r3, [r7, #36]	; 0x24
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d3b4      	bcc.n	8001a76 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	695a      	ldr	r2, [r3, #20]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001b1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f003 fba1 	bl	8005268 <USB_ReadInterrupts>
 8001b26:	4603      	mov	r3, r0
 8001b28:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b30:	d10a      	bne.n	8001b48 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f005 ffcc 	bl	8007ad0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	695a      	ldr	r2, [r3, #20]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001b46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f003 fb8b 	bl	8005268 <USB_ReadInterrupts>
 8001b52:	4603      	mov	r3, r0
 8001b54:	f003 0304 	and.w	r3, r3, #4
 8001b58:	2b04      	cmp	r3, #4
 8001b5a:	d115      	bne.n	8001b88 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	f003 0304 	and.w	r3, r3, #4
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d002      	beq.n	8001b74 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f005 ffbc 	bl	8007aec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6859      	ldr	r1, [r3, #4]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	430a      	orrs	r2, r1
 8001b82:	605a      	str	r2, [r3, #4]
 8001b84:	e000      	b.n	8001b88 <HAL_PCD_IRQHandler+0x992>
      return;
 8001b86:	bf00      	nop
    }
  }
}
 8001b88:	3734      	adds	r7, #52	; 0x34
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd90      	pop	{r4, r7, pc}

08001b8e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b082      	sub	sp, #8
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
 8001b96:	460b      	mov	r3, r1
 8001b98:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d101      	bne.n	8001ba8 <HAL_PCD_SetAddress+0x1a>
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	e013      	b.n	8001bd0 <HAL_PCD_SetAddress+0x42>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	78fa      	ldrb	r2, [r7, #3]
 8001bb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	78fa      	ldrb	r2, [r7, #3]
 8001bbe:	4611      	mov	r1, r2
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f003 fae9 	bl	8005198 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	4608      	mov	r0, r1
 8001be2:	4611      	mov	r1, r2
 8001be4:	461a      	mov	r2, r3
 8001be6:	4603      	mov	r3, r0
 8001be8:	70fb      	strb	r3, [r7, #3]
 8001bea:	460b      	mov	r3, r1
 8001bec:	803b      	strh	r3, [r7, #0]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001bf6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	da0f      	bge.n	8001c1e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bfe:	78fb      	ldrb	r3, [r7, #3]
 8001c00:	f003 020f 	and.w	r2, r3, #15
 8001c04:	4613      	mov	r3, r2
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	4413      	add	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	3338      	adds	r3, #56	; 0x38
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	4413      	add	r3, r2
 8001c12:	3304      	adds	r3, #4
 8001c14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	705a      	strb	r2, [r3, #1]
 8001c1c:	e00f      	b.n	8001c3e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c1e:	78fb      	ldrb	r3, [r7, #3]
 8001c20:	f003 020f 	and.w	r2, r3, #15
 8001c24:	4613      	mov	r3, r2
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	4413      	add	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	4413      	add	r3, r2
 8001c34:	3304      	adds	r3, #4
 8001c36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c3e:	78fb      	ldrb	r3, [r7, #3]
 8001c40:	f003 030f 	and.w	r3, r3, #15
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c4a:	883a      	ldrh	r2, [r7, #0]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	78ba      	ldrb	r2, [r7, #2]
 8001c54:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	785b      	ldrb	r3, [r3, #1]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d004      	beq.n	8001c68 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c68:	78bb      	ldrb	r3, [r7, #2]
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d102      	bne.n	8001c74 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2200      	movs	r2, #0
 8001c72:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d101      	bne.n	8001c82 <HAL_PCD_EP_Open+0xaa>
 8001c7e:	2302      	movs	r3, #2
 8001c80:	e00e      	b.n	8001ca0 <HAL_PCD_EP_Open+0xc8>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2201      	movs	r2, #1
 8001c86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	68f9      	ldr	r1, [r7, #12]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f002 fb69 	bl	8004368 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001c9e:	7afb      	ldrb	r3, [r7, #11]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	da0f      	bge.n	8001cdc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cbc:	78fb      	ldrb	r3, [r7, #3]
 8001cbe:	f003 020f 	and.w	r2, r3, #15
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	4413      	add	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	3338      	adds	r3, #56	; 0x38
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	4413      	add	r3, r2
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	705a      	strb	r2, [r3, #1]
 8001cda:	e00f      	b.n	8001cfc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cdc:	78fb      	ldrb	r3, [r7, #3]
 8001cde:	f003 020f 	and.w	r2, r3, #15
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	4413      	add	r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	3304      	adds	r3, #4
 8001cf4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001cfc:	78fb      	ldrb	r3, [r7, #3]
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d101      	bne.n	8001d16 <HAL_PCD_EP_Close+0x6e>
 8001d12:	2302      	movs	r3, #2
 8001d14:	e00e      	b.n	8001d34 <HAL_PCD_EP_Close+0x8c>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68f9      	ldr	r1, [r7, #12]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f002 fba7 	bl	8004478 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3710      	adds	r7, #16
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	607a      	str	r2, [r7, #4]
 8001d46:	603b      	str	r3, [r7, #0]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d4c:	7afb      	ldrb	r3, [r7, #11]
 8001d4e:	f003 020f 	and.w	r2, r3, #15
 8001d52:	4613      	mov	r3, r2
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	4413      	add	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	4413      	add	r3, r2
 8001d62:	3304      	adds	r3, #4
 8001d64:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	683a      	ldr	r2, [r7, #0]
 8001d70:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	2200      	movs	r2, #0
 8001d76:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d7e:	7afb      	ldrb	r3, [r7, #11]
 8001d80:	f003 030f 	and.w	r3, r3, #15
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d102      	bne.n	8001d98 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d98:	7afb      	ldrb	r3, [r7, #11]
 8001d9a:	f003 030f 	and.w	r3, r3, #15
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d109      	bne.n	8001db6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6818      	ldr	r0, [r3, #0]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	461a      	mov	r2, r3
 8001dae:	6979      	ldr	r1, [r7, #20]
 8001db0:	f002 fe86 	bl	8004ac0 <USB_EP0StartXfer>
 8001db4:	e008      	b.n	8001dc8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6818      	ldr	r0, [r3, #0]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	6979      	ldr	r1, [r7, #20]
 8001dc4:	f002 fc34 	bl	8004630 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3718      	adds	r7, #24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b083      	sub	sp, #12
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
 8001dda:	460b      	mov	r3, r1
 8001ddc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001dde:	78fb      	ldrb	r3, [r7, #3]
 8001de0:	f003 020f 	and.w	r2, r3, #15
 8001de4:	6879      	ldr	r1, [r7, #4]
 8001de6:	4613      	mov	r3, r2
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	4413      	add	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	440b      	add	r3, r1
 8001df0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001df4:	681b      	ldr	r3, [r3, #0]
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b086      	sub	sp, #24
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	60f8      	str	r0, [r7, #12]
 8001e0a:	607a      	str	r2, [r7, #4]
 8001e0c:	603b      	str	r3, [r7, #0]
 8001e0e:	460b      	mov	r3, r1
 8001e10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e12:	7afb      	ldrb	r3, [r7, #11]
 8001e14:	f003 020f 	and.w	r2, r3, #15
 8001e18:	4613      	mov	r3, r2
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	4413      	add	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	3338      	adds	r3, #56	; 0x38
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	4413      	add	r3, r2
 8001e26:	3304      	adds	r3, #4
 8001e28:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e42:	7afb      	ldrb	r3, [r7, #11]
 8001e44:	f003 030f 	and.w	r3, r3, #15
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d102      	bne.n	8001e5c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e5c:	7afb      	ldrb	r3, [r7, #11]
 8001e5e:	f003 030f 	and.w	r3, r3, #15
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d109      	bne.n	8001e7a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6818      	ldr	r0, [r3, #0]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	461a      	mov	r2, r3
 8001e72:	6979      	ldr	r1, [r7, #20]
 8001e74:	f002 fe24 	bl	8004ac0 <USB_EP0StartXfer>
 8001e78:	e008      	b.n	8001e8c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	6818      	ldr	r0, [r3, #0]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	461a      	mov	r2, r3
 8001e86:	6979      	ldr	r1, [r7, #20]
 8001e88:	f002 fbd2 	bl	8004630 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b084      	sub	sp, #16
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001ea2:	78fb      	ldrb	r3, [r7, #3]
 8001ea4:	f003 020f 	and.w	r2, r3, #15
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d901      	bls.n	8001eb4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e050      	b.n	8001f56 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001eb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	da0f      	bge.n	8001edc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ebc:	78fb      	ldrb	r3, [r7, #3]
 8001ebe:	f003 020f 	and.w	r2, r3, #15
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	4413      	add	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	3338      	adds	r3, #56	; 0x38
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	4413      	add	r3, r2
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	705a      	strb	r2, [r3, #1]
 8001eda:	e00d      	b.n	8001ef8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001edc:	78fa      	ldrb	r2, [r7, #3]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	4413      	add	r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	4413      	add	r3, r2
 8001eee:	3304      	adds	r3, #4
 8001ef0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2201      	movs	r2, #1
 8001efc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001efe:	78fb      	ldrb	r3, [r7, #3]
 8001f00:	f003 030f 	and.w	r3, r3, #15
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d101      	bne.n	8001f18 <HAL_PCD_EP_SetStall+0x82>
 8001f14:	2302      	movs	r3, #2
 8001f16:	e01e      	b.n	8001f56 <HAL_PCD_EP_SetStall+0xc0>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68f9      	ldr	r1, [r7, #12]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f003 f862 	bl	8004ff0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f2c:	78fb      	ldrb	r3, [r7, #3]
 8001f2e:	f003 030f 	and.w	r3, r3, #15
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d10a      	bne.n	8001f4c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6818      	ldr	r0, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	b2d9      	uxtb	r1, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001f46:	461a      	mov	r2, r3
 8001f48:	f003 fa52 	bl	80053f0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b084      	sub	sp, #16
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
 8001f66:	460b      	mov	r3, r1
 8001f68:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f6a:	78fb      	ldrb	r3, [r7, #3]
 8001f6c:	f003 020f 	and.w	r2, r3, #15
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d901      	bls.n	8001f7c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e042      	b.n	8002002 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	da0f      	bge.n	8001fa4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f84:	78fb      	ldrb	r3, [r7, #3]
 8001f86:	f003 020f 	and.w	r2, r3, #15
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	4413      	add	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	3338      	adds	r3, #56	; 0x38
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	4413      	add	r3, r2
 8001f98:	3304      	adds	r3, #4
 8001f9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	705a      	strb	r2, [r3, #1]
 8001fa2:	e00f      	b.n	8001fc4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fa4:	78fb      	ldrb	r3, [r7, #3]
 8001fa6:	f003 020f 	and.w	r2, r3, #15
 8001faa:	4613      	mov	r3, r2
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	4413      	add	r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	4413      	add	r3, r2
 8001fba:	3304      	adds	r3, #4
 8001fbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fca:	78fb      	ldrb	r3, [r7, #3]
 8001fcc:	f003 030f 	and.w	r3, r3, #15
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d101      	bne.n	8001fe4 <HAL_PCD_EP_ClrStall+0x86>
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	e00e      	b.n	8002002 <HAL_PCD_EP_ClrStall+0xa4>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68f9      	ldr	r1, [r7, #12]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f003 f86a 	bl	80050cc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b084      	sub	sp, #16
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
 8002012:	460b      	mov	r3, r1
 8002014:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002016:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800201a:	2b00      	cmp	r3, #0
 800201c:	da0c      	bge.n	8002038 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800201e:	78fb      	ldrb	r3, [r7, #3]
 8002020:	f003 020f 	and.w	r2, r3, #15
 8002024:	4613      	mov	r3, r2
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	4413      	add	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	3338      	adds	r3, #56	; 0x38
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	4413      	add	r3, r2
 8002032:	3304      	adds	r3, #4
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	e00c      	b.n	8002052 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002038:	78fb      	ldrb	r3, [r7, #3]
 800203a:	f003 020f 	and.w	r2, r3, #15
 800203e:	4613      	mov	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	4413      	add	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	4413      	add	r3, r2
 800204e:	3304      	adds	r3, #4
 8002050:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68f9      	ldr	r1, [r7, #12]
 8002058:	4618      	mov	r0, r3
 800205a:	f002 fe89 	bl	8004d70 <USB_EPStopXfer>
 800205e:	4603      	mov	r3, r0
 8002060:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002062:	7afb      	ldrb	r3, [r7, #11]
}
 8002064:	4618      	mov	r0, r3
 8002066:	3710      	adds	r7, #16
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b08a      	sub	sp, #40	; 0x28
 8002070:	af02      	add	r7, sp, #8
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	4613      	mov	r3, r2
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	4413      	add	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	3338      	adds	r3, #56	; 0x38
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	4413      	add	r3, r2
 8002090:	3304      	adds	r3, #4
 8002092:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6a1a      	ldr	r2, [r3, #32]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	429a      	cmp	r2, r3
 800209e:	d901      	bls.n	80020a4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e06c      	b.n	800217e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	699a      	ldr	r2, [r3, #24]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	69fa      	ldr	r2, [r7, #28]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d902      	bls.n	80020c0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	3303      	adds	r3, #3
 80020c4:	089b      	lsrs	r3, r3, #2
 80020c6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020c8:	e02b      	b.n	8002122 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	699a      	ldr	r2, [r3, #24]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	69fa      	ldr	r2, [r7, #28]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d902      	bls.n	80020e6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	3303      	adds	r3, #3
 80020ea:	089b      	lsrs	r3, r3, #2
 80020ec:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6919      	ldr	r1, [r3, #16]
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	9300      	str	r3, [sp, #0]
 8002102:	4603      	mov	r3, r0
 8002104:	6978      	ldr	r0, [r7, #20]
 8002106:	f002 fedd 	bl	8004ec4 <USB_WritePacket>

    ep->xfer_buff  += len;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	691a      	ldr	r2, [r3, #16]
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	441a      	add	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6a1a      	ldr	r2, [r3, #32]
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	441a      	add	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	015a      	lsls	r2, r3, #5
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	4413      	add	r3, r2
 800212a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	b29b      	uxth	r3, r3
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	429a      	cmp	r2, r3
 8002136:	d809      	bhi.n	800214c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6a1a      	ldr	r2, [r3, #32]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002140:	429a      	cmp	r2, r3
 8002142:	d203      	bcs.n	800214c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1be      	bne.n	80020ca <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	699a      	ldr	r2, [r3, #24]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	429a      	cmp	r2, r3
 8002156:	d811      	bhi.n	800217c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	2201      	movs	r2, #1
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800216c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	43db      	mvns	r3, r3
 8002172:	6939      	ldr	r1, [r7, #16]
 8002174:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002178:	4013      	ands	r3, r2
 800217a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3720      	adds	r7, #32
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
	...

08002188 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b088      	sub	sp, #32
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	333c      	adds	r3, #60	; 0x3c
 80021a0:	3304      	adds	r3, #4
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	015a      	lsls	r2, r3, #5
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	4413      	add	r3, r2
 80021ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d17b      	bne.n	80022b6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	f003 0308 	and.w	r3, r3, #8
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d015      	beq.n	80021f4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	4a61      	ldr	r2, [pc, #388]	; (8002350 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	f240 80b9 	bls.w	8002344 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f000 80b3 	beq.w	8002344 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	015a      	lsls	r2, r3, #5
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	4413      	add	r3, r2
 80021e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021ea:	461a      	mov	r2, r3
 80021ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021f0:	6093      	str	r3, [r2, #8]
 80021f2:	e0a7      	b.n	8002344 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	f003 0320 	and.w	r3, r3, #32
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d009      	beq.n	8002212 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	015a      	lsls	r2, r3, #5
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	4413      	add	r3, r2
 8002206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800220a:	461a      	mov	r2, r3
 800220c:	2320      	movs	r3, #32
 800220e:	6093      	str	r3, [r2, #8]
 8002210:	e098      	b.n	8002344 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002218:	2b00      	cmp	r3, #0
 800221a:	f040 8093 	bne.w	8002344 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	4a4b      	ldr	r2, [pc, #300]	; (8002350 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d90f      	bls.n	8002246 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00a      	beq.n	8002246 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	015a      	lsls	r2, r3, #5
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	4413      	add	r3, r2
 8002238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800223c:	461a      	mov	r2, r3
 800223e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002242:	6093      	str	r3, [r2, #8]
 8002244:	e07e      	b.n	8002344 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	4613      	mov	r3, r2
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	4413      	add	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	4413      	add	r3, r2
 8002258:	3304      	adds	r3, #4
 800225a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	69da      	ldr	r2, [r3, #28]
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	0159      	lsls	r1, r3, #5
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	440b      	add	r3, r1
 8002268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002272:	1ad2      	subs	r2, r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d114      	bne.n	80022a8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d109      	bne.n	800229a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6818      	ldr	r0, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002290:	461a      	mov	r2, r3
 8002292:	2101      	movs	r1, #1
 8002294:	f003 f8ac 	bl	80053f0 <USB_EP0_OutStart>
 8002298:	e006      	b.n	80022a8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	691a      	ldr	r2, [r3, #16]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6a1b      	ldr	r3, [r3, #32]
 80022a2:	441a      	add	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	4619      	mov	r1, r3
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f005 fb4a 	bl	8007948 <HAL_PCD_DataOutStageCallback>
 80022b4:	e046      	b.n	8002344 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	4a26      	ldr	r2, [pc, #152]	; (8002354 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d124      	bne.n	8002308 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00a      	beq.n	80022de <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	015a      	lsls	r2, r3, #5
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	4413      	add	r3, r2
 80022d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022d4:	461a      	mov	r2, r3
 80022d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022da:	6093      	str	r3, [r2, #8]
 80022dc:	e032      	b.n	8002344 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	f003 0320 	and.w	r3, r3, #32
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d008      	beq.n	80022fa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	015a      	lsls	r2, r3, #5
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	4413      	add	r3, r2
 80022f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022f4:	461a      	mov	r2, r3
 80022f6:	2320      	movs	r3, #32
 80022f8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	4619      	mov	r1, r3
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f005 fb21 	bl	8007948 <HAL_PCD_DataOutStageCallback>
 8002306:	e01d      	b.n	8002344 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d114      	bne.n	8002338 <PCD_EP_OutXfrComplete_int+0x1b0>
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	4613      	mov	r3, r2
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	4413      	add	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	440b      	add	r3, r1
 800231c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d108      	bne.n	8002338 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6818      	ldr	r0, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002330:	461a      	mov	r2, r3
 8002332:	2100      	movs	r1, #0
 8002334:	f003 f85c 	bl	80053f0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	b2db      	uxtb	r3, r3
 800233c:	4619      	mov	r1, r3
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f005 fb02 	bl	8007948 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3720      	adds	r7, #32
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	4f54300a 	.word	0x4f54300a
 8002354:	4f54310a 	.word	0x4f54310a

08002358 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	333c      	adds	r3, #60	; 0x3c
 8002370:	3304      	adds	r3, #4
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	015a      	lsls	r2, r3, #5
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	4413      	add	r3, r2
 800237e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	4a15      	ldr	r2, [pc, #84]	; (80023e0 <PCD_EP_OutSetupPacket_int+0x88>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d90e      	bls.n	80023ac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002394:	2b00      	cmp	r3, #0
 8002396:	d009      	beq.n	80023ac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	015a      	lsls	r2, r3, #5
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	4413      	add	r3, r2
 80023a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023a4:	461a      	mov	r2, r3
 80023a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023aa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f005 fab9 	bl	8007924 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	4a0a      	ldr	r2, [pc, #40]	; (80023e0 <PCD_EP_OutSetupPacket_int+0x88>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d90c      	bls.n	80023d4 <PCD_EP_OutSetupPacket_int+0x7c>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d108      	bne.n	80023d4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6818      	ldr	r0, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80023cc:	461a      	mov	r2, r3
 80023ce:	2101      	movs	r1, #1
 80023d0:	f003 f80e 	bl	80053f0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3718      	adds	r7, #24
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	4f54300a 	.word	0x4f54300a

080023e4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	460b      	mov	r3, r1
 80023ee:	70fb      	strb	r3, [r7, #3]
 80023f0:	4613      	mov	r3, r2
 80023f2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80023fc:	78fb      	ldrb	r3, [r7, #3]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d107      	bne.n	8002412 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002402:	883b      	ldrh	r3, [r7, #0]
 8002404:	0419      	lsls	r1, r3, #16
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	430a      	orrs	r2, r1
 800240e:	629a      	str	r2, [r3, #40]	; 0x28
 8002410:	e028      	b.n	8002464 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002418:	0c1b      	lsrs	r3, r3, #16
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	4413      	add	r3, r2
 800241e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002420:	2300      	movs	r3, #0
 8002422:	73fb      	strb	r3, [r7, #15]
 8002424:	e00d      	b.n	8002442 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	7bfb      	ldrb	r3, [r7, #15]
 800242c:	3340      	adds	r3, #64	; 0x40
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	4413      	add	r3, r2
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	0c1b      	lsrs	r3, r3, #16
 8002436:	68ba      	ldr	r2, [r7, #8]
 8002438:	4413      	add	r3, r2
 800243a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800243c:	7bfb      	ldrb	r3, [r7, #15]
 800243e:	3301      	adds	r3, #1
 8002440:	73fb      	strb	r3, [r7, #15]
 8002442:	7bfa      	ldrb	r2, [r7, #15]
 8002444:	78fb      	ldrb	r3, [r7, #3]
 8002446:	3b01      	subs	r3, #1
 8002448:	429a      	cmp	r2, r3
 800244a:	d3ec      	bcc.n	8002426 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800244c:	883b      	ldrh	r3, [r7, #0]
 800244e:	0418      	lsls	r0, r3, #16
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6819      	ldr	r1, [r3, #0]
 8002454:	78fb      	ldrb	r3, [r7, #3]
 8002456:	3b01      	subs	r3, #1
 8002458:	68ba      	ldr	r2, [r7, #8]
 800245a:	4302      	orrs	r2, r0
 800245c:	3340      	adds	r3, #64	; 0x40
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	440b      	add	r3, r1
 8002462:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3714      	adds	r7, #20
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002472:	b480      	push	{r7}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
 800247a:	460b      	mov	r3, r1
 800247c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	887a      	ldrh	r2, [r7, #2]
 8002484:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024c6:	f043 0303 	orr.w	r3, r3, #3
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3714      	adds	r7, #20
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d101      	bne.n	80024f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e0cc      	b.n	800268a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024f0:	4b68      	ldr	r3, [pc, #416]	; (8002694 <HAL_RCC_ClockConfig+0x1b8>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 030f 	and.w	r3, r3, #15
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d90c      	bls.n	8002518 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024fe:	4b65      	ldr	r3, [pc, #404]	; (8002694 <HAL_RCC_ClockConfig+0x1b8>)
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002506:	4b63      	ldr	r3, [pc, #396]	; (8002694 <HAL_RCC_ClockConfig+0x1b8>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 030f 	and.w	r3, r3, #15
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	429a      	cmp	r2, r3
 8002512:	d001      	beq.n	8002518 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e0b8      	b.n	800268a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d020      	beq.n	8002566 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0304 	and.w	r3, r3, #4
 800252c:	2b00      	cmp	r3, #0
 800252e:	d005      	beq.n	800253c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002530:	4b59      	ldr	r3, [pc, #356]	; (8002698 <HAL_RCC_ClockConfig+0x1bc>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	4a58      	ldr	r2, [pc, #352]	; (8002698 <HAL_RCC_ClockConfig+0x1bc>)
 8002536:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800253a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0308 	and.w	r3, r3, #8
 8002544:	2b00      	cmp	r3, #0
 8002546:	d005      	beq.n	8002554 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002548:	4b53      	ldr	r3, [pc, #332]	; (8002698 <HAL_RCC_ClockConfig+0x1bc>)
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	4a52      	ldr	r2, [pc, #328]	; (8002698 <HAL_RCC_ClockConfig+0x1bc>)
 800254e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002552:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002554:	4b50      	ldr	r3, [pc, #320]	; (8002698 <HAL_RCC_ClockConfig+0x1bc>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	494d      	ldr	r1, [pc, #308]	; (8002698 <HAL_RCC_ClockConfig+0x1bc>)
 8002562:	4313      	orrs	r3, r2
 8002564:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b00      	cmp	r3, #0
 8002570:	d044      	beq.n	80025fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d107      	bne.n	800258a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800257a:	4b47      	ldr	r3, [pc, #284]	; (8002698 <HAL_RCC_ClockConfig+0x1bc>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d119      	bne.n	80025ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e07f      	b.n	800268a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	2b02      	cmp	r3, #2
 8002590:	d003      	beq.n	800259a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002596:	2b03      	cmp	r3, #3
 8002598:	d107      	bne.n	80025aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800259a:	4b3f      	ldr	r3, [pc, #252]	; (8002698 <HAL_RCC_ClockConfig+0x1bc>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d109      	bne.n	80025ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e06f      	b.n	800268a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025aa:	4b3b      	ldr	r3, [pc, #236]	; (8002698 <HAL_RCC_ClockConfig+0x1bc>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e067      	b.n	800268a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ba:	4b37      	ldr	r3, [pc, #220]	; (8002698 <HAL_RCC_ClockConfig+0x1bc>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f023 0203 	bic.w	r2, r3, #3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	4934      	ldr	r1, [pc, #208]	; (8002698 <HAL_RCC_ClockConfig+0x1bc>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025cc:	f7fe f9e6 	bl	800099c <HAL_GetTick>
 80025d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d2:	e00a      	b.n	80025ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025d4:	f7fe f9e2 	bl	800099c <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e04f      	b.n	800268a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ea:	4b2b      	ldr	r3, [pc, #172]	; (8002698 <HAL_RCC_ClockConfig+0x1bc>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 020c 	and.w	r2, r3, #12
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d1eb      	bne.n	80025d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025fc:	4b25      	ldr	r3, [pc, #148]	; (8002694 <HAL_RCC_ClockConfig+0x1b8>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 030f 	and.w	r3, r3, #15
 8002604:	683a      	ldr	r2, [r7, #0]
 8002606:	429a      	cmp	r2, r3
 8002608:	d20c      	bcs.n	8002624 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800260a:	4b22      	ldr	r3, [pc, #136]	; (8002694 <HAL_RCC_ClockConfig+0x1b8>)
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	b2d2      	uxtb	r2, r2
 8002610:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002612:	4b20      	ldr	r3, [pc, #128]	; (8002694 <HAL_RCC_ClockConfig+0x1b8>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 030f 	and.w	r3, r3, #15
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	429a      	cmp	r2, r3
 800261e:	d001      	beq.n	8002624 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e032      	b.n	800268a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0304 	and.w	r3, r3, #4
 800262c:	2b00      	cmp	r3, #0
 800262e:	d008      	beq.n	8002642 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002630:	4b19      	ldr	r3, [pc, #100]	; (8002698 <HAL_RCC_ClockConfig+0x1bc>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	4916      	ldr	r1, [pc, #88]	; (8002698 <HAL_RCC_ClockConfig+0x1bc>)
 800263e:	4313      	orrs	r3, r2
 8002640:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0308 	and.w	r3, r3, #8
 800264a:	2b00      	cmp	r3, #0
 800264c:	d009      	beq.n	8002662 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800264e:	4b12      	ldr	r3, [pc, #72]	; (8002698 <HAL_RCC_ClockConfig+0x1bc>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	490e      	ldr	r1, [pc, #56]	; (8002698 <HAL_RCC_ClockConfig+0x1bc>)
 800265e:	4313      	orrs	r3, r2
 8002660:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002662:	f000 fb7f 	bl	8002d64 <HAL_RCC_GetSysClockFreq>
 8002666:	4602      	mov	r2, r0
 8002668:	4b0b      	ldr	r3, [pc, #44]	; (8002698 <HAL_RCC_ClockConfig+0x1bc>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	091b      	lsrs	r3, r3, #4
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	490a      	ldr	r1, [pc, #40]	; (800269c <HAL_RCC_ClockConfig+0x1c0>)
 8002674:	5ccb      	ldrb	r3, [r1, r3]
 8002676:	fa22 f303 	lsr.w	r3, r2, r3
 800267a:	4a09      	ldr	r2, [pc, #36]	; (80026a0 <HAL_RCC_ClockConfig+0x1c4>)
 800267c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800267e:	4b09      	ldr	r3, [pc, #36]	; (80026a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f7fe f946 	bl	8000914 <HAL_InitTick>

  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40023c00 	.word	0x40023c00
 8002698:	40023800 	.word	0x40023800
 800269c:	08007ff8 	.word	0x08007ff8
 80026a0:	20000000 	.word	0x20000000
 80026a4:	20000004 	.word	0x20000004

080026a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026ac:	4b03      	ldr	r3, [pc, #12]	; (80026bc <HAL_RCC_GetHCLKFreq+0x14>)
 80026ae:	681b      	ldr	r3, [r3, #0]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	20000000 	.word	0x20000000

080026c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026c4:	f7ff fff0 	bl	80026a8 <HAL_RCC_GetHCLKFreq>
 80026c8:	4602      	mov	r2, r0
 80026ca:	4b05      	ldr	r3, [pc, #20]	; (80026e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	0a9b      	lsrs	r3, r3, #10
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	4903      	ldr	r1, [pc, #12]	; (80026e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026d6:	5ccb      	ldrb	r3, [r1, r3]
 80026d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026dc:	4618      	mov	r0, r3
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40023800 	.word	0x40023800
 80026e4:	08008008 	.word	0x08008008

080026e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026ec:	f7ff ffdc 	bl	80026a8 <HAL_RCC_GetHCLKFreq>
 80026f0:	4602      	mov	r2, r0
 80026f2:	4b05      	ldr	r3, [pc, #20]	; (8002708 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	0b5b      	lsrs	r3, r3, #13
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	4903      	ldr	r1, [pc, #12]	; (800270c <HAL_RCC_GetPCLK2Freq+0x24>)
 80026fe:	5ccb      	ldrb	r3, [r1, r3]
 8002700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002704:	4618      	mov	r0, r3
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40023800 	.word	0x40023800
 800270c:	08008008 	.word	0x08008008

08002710 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b08c      	sub	sp, #48	; 0x30
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002718:	2300      	movs	r3, #0
 800271a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800271c:	2300      	movs	r3, #0
 800271e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002720:	2300      	movs	r3, #0
 8002722:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002724:	2300      	movs	r3, #0
 8002726:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002728:	2300      	movs	r3, #0
 800272a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800272c:	2300      	movs	r3, #0
 800272e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002730:	2300      	movs	r3, #0
 8002732:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002734:	2300      	movs	r3, #0
 8002736:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002738:	2300      	movs	r3, #0
 800273a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b00      	cmp	r3, #0
 8002746:	d010      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002748:	4b6f      	ldr	r3, [pc, #444]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800274a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800274e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002756:	496c      	ldr	r1, [pc, #432]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002758:	4313      	orrs	r3, r2
 800275a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002766:	2301      	movs	r3, #1
 8002768:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d010      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002776:	4b64      	ldr	r3, [pc, #400]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002778:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800277c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002784:	4960      	ldr	r1, [pc, #384]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002786:	4313      	orrs	r3, r2
 8002788:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002790:	2b00      	cmp	r3, #0
 8002792:	d101      	bne.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002794:	2301      	movs	r3, #1
 8002796:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d017      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027a4:	4b58      	ldr	r3, [pc, #352]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	4955      	ldr	r1, [pc, #340]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027c2:	d101      	bne.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80027c4:	2301      	movs	r3, #1
 80027c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80027d0:	2301      	movs	r3, #1
 80027d2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0308 	and.w	r3, r3, #8
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d017      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80027e0:	4b49      	ldr	r3, [pc, #292]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ee:	4946      	ldr	r1, [pc, #280]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027fe:	d101      	bne.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002800:	2301      	movs	r3, #1
 8002802:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800280c:	2301      	movs	r3, #1
 800280e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0320 	and.w	r3, r3, #32
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 808a 	beq.w	8002932 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	60bb      	str	r3, [r7, #8]
 8002822:	4b39      	ldr	r3, [pc, #228]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	4a38      	ldr	r2, [pc, #224]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800282c:	6413      	str	r3, [r2, #64]	; 0x40
 800282e:	4b36      	ldr	r3, [pc, #216]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002836:	60bb      	str	r3, [r7, #8]
 8002838:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800283a:	4b34      	ldr	r3, [pc, #208]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a33      	ldr	r2, [pc, #204]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002844:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002846:	f7fe f8a9 	bl	800099c <HAL_GetTick>
 800284a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800284c:	e008      	b.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800284e:	f7fe f8a5 	bl	800099c <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d901      	bls.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e278      	b.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002860:	4b2a      	ldr	r3, [pc, #168]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002868:	2b00      	cmp	r3, #0
 800286a:	d0f0      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800286c:	4b26      	ldr	r3, [pc, #152]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800286e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002870:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002874:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002876:	6a3b      	ldr	r3, [r7, #32]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d02f      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002880:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002884:	6a3a      	ldr	r2, [r7, #32]
 8002886:	429a      	cmp	r2, r3
 8002888:	d028      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800288a:	4b1f      	ldr	r3, [pc, #124]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800288c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002892:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002894:	4b1e      	ldr	r3, [pc, #120]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002896:	2201      	movs	r2, #1
 8002898:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800289a:	4b1d      	ldr	r3, [pc, #116]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80028a0:	4a19      	ldr	r2, [pc, #100]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028a2:	6a3b      	ldr	r3, [r7, #32]
 80028a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80028a6:	4b18      	ldr	r3, [pc, #96]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d114      	bne.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80028b2:	f7fe f873 	bl	800099c <HAL_GetTick>
 80028b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028b8:	e00a      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028ba:	f7fe f86f 	bl	800099c <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e240      	b.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d0:	4b0d      	ldr	r3, [pc, #52]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0ee      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028e8:	d114      	bne.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80028ea:	4b07      	ldr	r3, [pc, #28]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80028fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028fe:	4902      	ldr	r1, [pc, #8]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002900:	4313      	orrs	r3, r2
 8002902:	608b      	str	r3, [r1, #8]
 8002904:	e00c      	b.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002906:	bf00      	nop
 8002908:	40023800 	.word	0x40023800
 800290c:	40007000 	.word	0x40007000
 8002910:	42470e40 	.word	0x42470e40
 8002914:	4b4a      	ldr	r3, [pc, #296]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	4a49      	ldr	r2, [pc, #292]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800291a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800291e:	6093      	str	r3, [r2, #8]
 8002920:	4b47      	ldr	r3, [pc, #284]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002922:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002928:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800292c:	4944      	ldr	r1, [pc, #272]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800292e:	4313      	orrs	r3, r2
 8002930:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0310 	and.w	r3, r3, #16
 800293a:	2b00      	cmp	r3, #0
 800293c:	d004      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002944:	4b3f      	ldr	r3, [pc, #252]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002946:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002950:	2b00      	cmp	r3, #0
 8002952:	d00a      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002954:	4b3a      	ldr	r3, [pc, #232]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002956:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800295a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002962:	4937      	ldr	r1, [pc, #220]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002964:	4313      	orrs	r3, r2
 8002966:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00a      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002976:	4b32      	ldr	r3, [pc, #200]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002978:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800297c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002984:	492e      	ldr	r1, [pc, #184]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002986:	4313      	orrs	r3, r2
 8002988:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002994:	2b00      	cmp	r3, #0
 8002996:	d011      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002998:	4b29      	ldr	r3, [pc, #164]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800299a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800299e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a6:	4926      	ldr	r1, [pc, #152]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029b6:	d101      	bne.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80029b8:	2301      	movs	r3, #1
 80029ba:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00a      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80029c8:	4b1d      	ldr	r3, [pc, #116]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029ce:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d6:	491a      	ldr	r1, [pc, #104]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d011      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80029ea:	4b15      	ldr	r3, [pc, #84]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029f0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029f8:	4911      	ldr	r1, [pc, #68]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a08:	d101      	bne.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d005      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a1c:	f040 80ff 	bne.w	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002a20:	4b09      	ldr	r3, [pc, #36]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a26:	f7fd ffb9 	bl	800099c <HAL_GetTick>
 8002a2a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a2c:	e00e      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002a2e:	f7fd ffb5 	bl	800099c <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d907      	bls.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e188      	b.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002a40:	40023800 	.word	0x40023800
 8002a44:	424711e0 	.word	0x424711e0
 8002a48:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a4c:	4b7e      	ldr	r3, [pc, #504]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1ea      	bne.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d003      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d009      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d028      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d124      	bne.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002a80:	4b71      	ldr	r3, [pc, #452]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a86:	0c1b      	lsrs	r3, r3, #16
 8002a88:	f003 0303 	and.w	r3, r3, #3
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a92:	4b6d      	ldr	r3, [pc, #436]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a98:	0e1b      	lsrs	r3, r3, #24
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	019b      	lsls	r3, r3, #6
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	085b      	lsrs	r3, r3, #1
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	041b      	lsls	r3, r3, #16
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	061b      	lsls	r3, r3, #24
 8002aba:	431a      	orrs	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	695b      	ldr	r3, [r3, #20]
 8002ac0:	071b      	lsls	r3, r3, #28
 8002ac2:	4961      	ldr	r1, [pc, #388]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0304 	and.w	r3, r3, #4
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d004      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ade:	d00a      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d035      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002af0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002af4:	d130      	bne.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002af6:	4b54      	ldr	r3, [pc, #336]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002af8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002afc:	0c1b      	lsrs	r3, r3, #16
 8002afe:	f003 0303 	and.w	r3, r3, #3
 8002b02:	3301      	adds	r3, #1
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b08:	4b4f      	ldr	r3, [pc, #316]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b0e:	0f1b      	lsrs	r3, r3, #28
 8002b10:	f003 0307 	and.w	r3, r3, #7
 8002b14:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	019b      	lsls	r3, r3, #6
 8002b20:	431a      	orrs	r2, r3
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	085b      	lsrs	r3, r3, #1
 8002b26:	3b01      	subs	r3, #1
 8002b28:	041b      	lsls	r3, r3, #16
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	061b      	lsls	r3, r3, #24
 8002b32:	431a      	orrs	r2, r3
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	071b      	lsls	r3, r3, #28
 8002b38:	4943      	ldr	r1, [pc, #268]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002b40:	4b41      	ldr	r3, [pc, #260]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b46:	f023 021f 	bic.w	r2, r3, #31
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	493d      	ldr	r1, [pc, #244]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d029      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b6c:	d124      	bne.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002b6e:	4b36      	ldr	r3, [pc, #216]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b74:	0c1b      	lsrs	r3, r3, #16
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b80:	4b31      	ldr	r3, [pc, #196]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b86:	0f1b      	lsrs	r3, r3, #28
 8002b88:	f003 0307 	and.w	r3, r3, #7
 8002b8c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685a      	ldr	r2, [r3, #4]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	019b      	lsls	r3, r3, #6
 8002b98:	431a      	orrs	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	085b      	lsrs	r3, r3, #1
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	041b      	lsls	r3, r3, #16
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	061b      	lsls	r3, r3, #24
 8002baa:	431a      	orrs	r2, r3
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	071b      	lsls	r3, r3, #28
 8002bb0:	4925      	ldr	r1, [pc, #148]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d016      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685a      	ldr	r2, [r3, #4]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	019b      	lsls	r3, r3, #6
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	085b      	lsrs	r3, r3, #1
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	041b      	lsls	r3, r3, #16
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	061b      	lsls	r3, r3, #24
 8002be2:	431a      	orrs	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	695b      	ldr	r3, [r3, #20]
 8002be8:	071b      	lsls	r3, r3, #28
 8002bea:	4917      	ldr	r1, [pc, #92]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002bf2:	4b16      	ldr	r3, [pc, #88]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002bf8:	f7fd fed0 	bl	800099c <HAL_GetTick>
 8002bfc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002c00:	f7fd fecc 	bl	800099c <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e09f      	b.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c12:	4b0d      	ldr	r3, [pc, #52]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d0f0      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	f040 8095 	bne.w	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002c26:	4b0a      	ldr	r3, [pc, #40]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c2c:	f7fd feb6 	bl	800099c <HAL_GetTick>
 8002c30:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c32:	e00f      	b.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002c34:	f7fd feb2 	bl	800099c <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d908      	bls.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e085      	b.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002c46:	bf00      	nop
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	42470068 	.word	0x42470068
 8002c50:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c54:	4b41      	ldr	r3, [pc, #260]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c60:	d0e8      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0304 	and.w	r3, r3, #4
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d003      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d009      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d02b      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d127      	bne.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002c8a:	4b34      	ldr	r3, [pc, #208]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c90:	0c1b      	lsrs	r3, r3, #16
 8002c92:	f003 0303 	and.w	r3, r3, #3
 8002c96:	3301      	adds	r3, #1
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	699a      	ldr	r2, [r3, #24]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	69db      	ldr	r3, [r3, #28]
 8002ca4:	019b      	lsls	r3, r3, #6
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	085b      	lsrs	r3, r3, #1
 8002cac:	3b01      	subs	r3, #1
 8002cae:	041b      	lsls	r3, r3, #16
 8002cb0:	431a      	orrs	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb6:	061b      	lsls	r3, r3, #24
 8002cb8:	4928      	ldr	r1, [pc, #160]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002cc0:	4b26      	ldr	r3, [pc, #152]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002cc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cc6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	021b      	lsls	r3, r3, #8
 8002cd2:	4922      	ldr	r1, [pc, #136]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d01d      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cee:	d118      	bne.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002cf0:	4b1a      	ldr	r3, [pc, #104]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf6:	0e1b      	lsrs	r3, r3, #24
 8002cf8:	f003 030f 	and.w	r3, r3, #15
 8002cfc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	699a      	ldr	r2, [r3, #24]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	69db      	ldr	r3, [r3, #28]
 8002d06:	019b      	lsls	r3, r3, #6
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	085b      	lsrs	r3, r3, #1
 8002d10:	3b01      	subs	r3, #1
 8002d12:	041b      	lsls	r3, r3, #16
 8002d14:	431a      	orrs	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	061b      	lsls	r3, r3, #24
 8002d1a:	4910      	ldr	r1, [pc, #64]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002d22:	4b0f      	ldr	r3, [pc, #60]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002d24:	2201      	movs	r2, #1
 8002d26:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d28:	f7fd fe38 	bl	800099c <HAL_GetTick>
 8002d2c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002d30:	f7fd fe34 	bl	800099c <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e007      	b.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d42:	4b06      	ldr	r3, [pc, #24]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d4e:	d1ef      	bne.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3730      	adds	r7, #48	; 0x30
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	40023800 	.word	0x40023800
 8002d60:	42470070 	.word	0x42470070

08002d64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d68:	b0ae      	sub	sp, #184	; 0xb8
 8002d6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002d72:	2300      	movs	r3, #0
 8002d74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d8a:	4bcb      	ldr	r3, [pc, #812]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 030c 	and.w	r3, r3, #12
 8002d92:	2b0c      	cmp	r3, #12
 8002d94:	f200 8206 	bhi.w	80031a4 <HAL_RCC_GetSysClockFreq+0x440>
 8002d98:	a201      	add	r2, pc, #4	; (adr r2, 8002da0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d9e:	bf00      	nop
 8002da0:	08002dd5 	.word	0x08002dd5
 8002da4:	080031a5 	.word	0x080031a5
 8002da8:	080031a5 	.word	0x080031a5
 8002dac:	080031a5 	.word	0x080031a5
 8002db0:	08002ddd 	.word	0x08002ddd
 8002db4:	080031a5 	.word	0x080031a5
 8002db8:	080031a5 	.word	0x080031a5
 8002dbc:	080031a5 	.word	0x080031a5
 8002dc0:	08002de5 	.word	0x08002de5
 8002dc4:	080031a5 	.word	0x080031a5
 8002dc8:	080031a5 	.word	0x080031a5
 8002dcc:	080031a5 	.word	0x080031a5
 8002dd0:	08002fd5 	.word	0x08002fd5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002dd4:	4bb9      	ldr	r3, [pc, #740]	; (80030bc <HAL_RCC_GetSysClockFreq+0x358>)
 8002dd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002dda:	e1e7      	b.n	80031ac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ddc:	4bb8      	ldr	r3, [pc, #736]	; (80030c0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002dde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002de2:	e1e3      	b.n	80031ac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002de4:	4bb4      	ldr	r3, [pc, #720]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002df0:	4bb1      	ldr	r3, [pc, #708]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d071      	beq.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dfc:	4bae      	ldr	r3, [pc, #696]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	099b      	lsrs	r3, r3, #6
 8002e02:	2200      	movs	r2, #0
 8002e04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e08:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002e0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e14:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e18:	2300      	movs	r3, #0
 8002e1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002e1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e22:	4622      	mov	r2, r4
 8002e24:	462b      	mov	r3, r5
 8002e26:	f04f 0000 	mov.w	r0, #0
 8002e2a:	f04f 0100 	mov.w	r1, #0
 8002e2e:	0159      	lsls	r1, r3, #5
 8002e30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e34:	0150      	lsls	r0, r2, #5
 8002e36:	4602      	mov	r2, r0
 8002e38:	460b      	mov	r3, r1
 8002e3a:	4621      	mov	r1, r4
 8002e3c:	1a51      	subs	r1, r2, r1
 8002e3e:	6439      	str	r1, [r7, #64]	; 0x40
 8002e40:	4629      	mov	r1, r5
 8002e42:	eb63 0301 	sbc.w	r3, r3, r1
 8002e46:	647b      	str	r3, [r7, #68]	; 0x44
 8002e48:	f04f 0200 	mov.w	r2, #0
 8002e4c:	f04f 0300 	mov.w	r3, #0
 8002e50:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002e54:	4649      	mov	r1, r9
 8002e56:	018b      	lsls	r3, r1, #6
 8002e58:	4641      	mov	r1, r8
 8002e5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e5e:	4641      	mov	r1, r8
 8002e60:	018a      	lsls	r2, r1, #6
 8002e62:	4641      	mov	r1, r8
 8002e64:	1a51      	subs	r1, r2, r1
 8002e66:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e68:	4649      	mov	r1, r9
 8002e6a:	eb63 0301 	sbc.w	r3, r3, r1
 8002e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e70:	f04f 0200 	mov.w	r2, #0
 8002e74:	f04f 0300 	mov.w	r3, #0
 8002e78:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002e7c:	4649      	mov	r1, r9
 8002e7e:	00cb      	lsls	r3, r1, #3
 8002e80:	4641      	mov	r1, r8
 8002e82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e86:	4641      	mov	r1, r8
 8002e88:	00ca      	lsls	r2, r1, #3
 8002e8a:	4610      	mov	r0, r2
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4603      	mov	r3, r0
 8002e90:	4622      	mov	r2, r4
 8002e92:	189b      	adds	r3, r3, r2
 8002e94:	633b      	str	r3, [r7, #48]	; 0x30
 8002e96:	462b      	mov	r3, r5
 8002e98:	460a      	mov	r2, r1
 8002e9a:	eb42 0303 	adc.w	r3, r2, r3
 8002e9e:	637b      	str	r3, [r7, #52]	; 0x34
 8002ea0:	f04f 0200 	mov.w	r2, #0
 8002ea4:	f04f 0300 	mov.w	r3, #0
 8002ea8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002eac:	4629      	mov	r1, r5
 8002eae:	024b      	lsls	r3, r1, #9
 8002eb0:	4621      	mov	r1, r4
 8002eb2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002eb6:	4621      	mov	r1, r4
 8002eb8:	024a      	lsls	r2, r1, #9
 8002eba:	4610      	mov	r0, r2
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002ec8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002ecc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002ed0:	f7fd f998 	bl	8000204 <__aeabi_uldivmod>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	4613      	mov	r3, r2
 8002eda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ede:	e067      	b.n	8002fb0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ee0:	4b75      	ldr	r3, [pc, #468]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	099b      	lsrs	r3, r3, #6
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002eec:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002ef0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ef4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ef8:	67bb      	str	r3, [r7, #120]	; 0x78
 8002efa:	2300      	movs	r3, #0
 8002efc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002efe:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002f02:	4622      	mov	r2, r4
 8002f04:	462b      	mov	r3, r5
 8002f06:	f04f 0000 	mov.w	r0, #0
 8002f0a:	f04f 0100 	mov.w	r1, #0
 8002f0e:	0159      	lsls	r1, r3, #5
 8002f10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f14:	0150      	lsls	r0, r2, #5
 8002f16:	4602      	mov	r2, r0
 8002f18:	460b      	mov	r3, r1
 8002f1a:	4621      	mov	r1, r4
 8002f1c:	1a51      	subs	r1, r2, r1
 8002f1e:	62b9      	str	r1, [r7, #40]	; 0x28
 8002f20:	4629      	mov	r1, r5
 8002f22:	eb63 0301 	sbc.w	r3, r3, r1
 8002f26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f28:	f04f 0200 	mov.w	r2, #0
 8002f2c:	f04f 0300 	mov.w	r3, #0
 8002f30:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002f34:	4649      	mov	r1, r9
 8002f36:	018b      	lsls	r3, r1, #6
 8002f38:	4641      	mov	r1, r8
 8002f3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f3e:	4641      	mov	r1, r8
 8002f40:	018a      	lsls	r2, r1, #6
 8002f42:	4641      	mov	r1, r8
 8002f44:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f48:	4649      	mov	r1, r9
 8002f4a:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f4e:	f04f 0200 	mov.w	r2, #0
 8002f52:	f04f 0300 	mov.w	r3, #0
 8002f56:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f5a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f5e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f62:	4692      	mov	sl, r2
 8002f64:	469b      	mov	fp, r3
 8002f66:	4623      	mov	r3, r4
 8002f68:	eb1a 0303 	adds.w	r3, sl, r3
 8002f6c:	623b      	str	r3, [r7, #32]
 8002f6e:	462b      	mov	r3, r5
 8002f70:	eb4b 0303 	adc.w	r3, fp, r3
 8002f74:	627b      	str	r3, [r7, #36]	; 0x24
 8002f76:	f04f 0200 	mov.w	r2, #0
 8002f7a:	f04f 0300 	mov.w	r3, #0
 8002f7e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002f82:	4629      	mov	r1, r5
 8002f84:	028b      	lsls	r3, r1, #10
 8002f86:	4621      	mov	r1, r4
 8002f88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f8c:	4621      	mov	r1, r4
 8002f8e:	028a      	lsls	r2, r1, #10
 8002f90:	4610      	mov	r0, r2
 8002f92:	4619      	mov	r1, r3
 8002f94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f98:	2200      	movs	r2, #0
 8002f9a:	673b      	str	r3, [r7, #112]	; 0x70
 8002f9c:	677a      	str	r2, [r7, #116]	; 0x74
 8002f9e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002fa2:	f7fd f92f 	bl	8000204 <__aeabi_uldivmod>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	460b      	mov	r3, r1
 8002faa:	4613      	mov	r3, r2
 8002fac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fb0:	4b41      	ldr	r3, [pc, #260]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	0c1b      	lsrs	r3, r3, #16
 8002fb6:	f003 0303 	and.w	r3, r3, #3
 8002fba:	3301      	adds	r3, #1
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002fc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002fc6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002fd2:	e0eb      	b.n	80031ac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fd4:	4b38      	ldr	r3, [pc, #224]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fdc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fe0:	4b35      	ldr	r3, [pc, #212]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d06b      	beq.n	80030c4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fec:	4b32      	ldr	r3, [pc, #200]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	099b      	lsrs	r3, r3, #6
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ff6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002ff8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ffe:	663b      	str	r3, [r7, #96]	; 0x60
 8003000:	2300      	movs	r3, #0
 8003002:	667b      	str	r3, [r7, #100]	; 0x64
 8003004:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003008:	4622      	mov	r2, r4
 800300a:	462b      	mov	r3, r5
 800300c:	f04f 0000 	mov.w	r0, #0
 8003010:	f04f 0100 	mov.w	r1, #0
 8003014:	0159      	lsls	r1, r3, #5
 8003016:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800301a:	0150      	lsls	r0, r2, #5
 800301c:	4602      	mov	r2, r0
 800301e:	460b      	mov	r3, r1
 8003020:	4621      	mov	r1, r4
 8003022:	1a51      	subs	r1, r2, r1
 8003024:	61b9      	str	r1, [r7, #24]
 8003026:	4629      	mov	r1, r5
 8003028:	eb63 0301 	sbc.w	r3, r3, r1
 800302c:	61fb      	str	r3, [r7, #28]
 800302e:	f04f 0200 	mov.w	r2, #0
 8003032:	f04f 0300 	mov.w	r3, #0
 8003036:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800303a:	4659      	mov	r1, fp
 800303c:	018b      	lsls	r3, r1, #6
 800303e:	4651      	mov	r1, sl
 8003040:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003044:	4651      	mov	r1, sl
 8003046:	018a      	lsls	r2, r1, #6
 8003048:	4651      	mov	r1, sl
 800304a:	ebb2 0801 	subs.w	r8, r2, r1
 800304e:	4659      	mov	r1, fp
 8003050:	eb63 0901 	sbc.w	r9, r3, r1
 8003054:	f04f 0200 	mov.w	r2, #0
 8003058:	f04f 0300 	mov.w	r3, #0
 800305c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003060:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003064:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003068:	4690      	mov	r8, r2
 800306a:	4699      	mov	r9, r3
 800306c:	4623      	mov	r3, r4
 800306e:	eb18 0303 	adds.w	r3, r8, r3
 8003072:	613b      	str	r3, [r7, #16]
 8003074:	462b      	mov	r3, r5
 8003076:	eb49 0303 	adc.w	r3, r9, r3
 800307a:	617b      	str	r3, [r7, #20]
 800307c:	f04f 0200 	mov.w	r2, #0
 8003080:	f04f 0300 	mov.w	r3, #0
 8003084:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003088:	4629      	mov	r1, r5
 800308a:	024b      	lsls	r3, r1, #9
 800308c:	4621      	mov	r1, r4
 800308e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003092:	4621      	mov	r1, r4
 8003094:	024a      	lsls	r2, r1, #9
 8003096:	4610      	mov	r0, r2
 8003098:	4619      	mov	r1, r3
 800309a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800309e:	2200      	movs	r2, #0
 80030a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80030a2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80030a4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80030a8:	f7fd f8ac 	bl	8000204 <__aeabi_uldivmod>
 80030ac:	4602      	mov	r2, r0
 80030ae:	460b      	mov	r3, r1
 80030b0:	4613      	mov	r3, r2
 80030b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030b6:	e065      	b.n	8003184 <HAL_RCC_GetSysClockFreq+0x420>
 80030b8:	40023800 	.word	0x40023800
 80030bc:	00f42400 	.word	0x00f42400
 80030c0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030c4:	4b3d      	ldr	r3, [pc, #244]	; (80031bc <HAL_RCC_GetSysClockFreq+0x458>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	099b      	lsrs	r3, r3, #6
 80030ca:	2200      	movs	r2, #0
 80030cc:	4618      	mov	r0, r3
 80030ce:	4611      	mov	r1, r2
 80030d0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030d4:	653b      	str	r3, [r7, #80]	; 0x50
 80030d6:	2300      	movs	r3, #0
 80030d8:	657b      	str	r3, [r7, #84]	; 0x54
 80030da:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80030de:	4642      	mov	r2, r8
 80030e0:	464b      	mov	r3, r9
 80030e2:	f04f 0000 	mov.w	r0, #0
 80030e6:	f04f 0100 	mov.w	r1, #0
 80030ea:	0159      	lsls	r1, r3, #5
 80030ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030f0:	0150      	lsls	r0, r2, #5
 80030f2:	4602      	mov	r2, r0
 80030f4:	460b      	mov	r3, r1
 80030f6:	4641      	mov	r1, r8
 80030f8:	1a51      	subs	r1, r2, r1
 80030fa:	60b9      	str	r1, [r7, #8]
 80030fc:	4649      	mov	r1, r9
 80030fe:	eb63 0301 	sbc.w	r3, r3, r1
 8003102:	60fb      	str	r3, [r7, #12]
 8003104:	f04f 0200 	mov.w	r2, #0
 8003108:	f04f 0300 	mov.w	r3, #0
 800310c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003110:	4659      	mov	r1, fp
 8003112:	018b      	lsls	r3, r1, #6
 8003114:	4651      	mov	r1, sl
 8003116:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800311a:	4651      	mov	r1, sl
 800311c:	018a      	lsls	r2, r1, #6
 800311e:	4651      	mov	r1, sl
 8003120:	1a54      	subs	r4, r2, r1
 8003122:	4659      	mov	r1, fp
 8003124:	eb63 0501 	sbc.w	r5, r3, r1
 8003128:	f04f 0200 	mov.w	r2, #0
 800312c:	f04f 0300 	mov.w	r3, #0
 8003130:	00eb      	lsls	r3, r5, #3
 8003132:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003136:	00e2      	lsls	r2, r4, #3
 8003138:	4614      	mov	r4, r2
 800313a:	461d      	mov	r5, r3
 800313c:	4643      	mov	r3, r8
 800313e:	18e3      	adds	r3, r4, r3
 8003140:	603b      	str	r3, [r7, #0]
 8003142:	464b      	mov	r3, r9
 8003144:	eb45 0303 	adc.w	r3, r5, r3
 8003148:	607b      	str	r3, [r7, #4]
 800314a:	f04f 0200 	mov.w	r2, #0
 800314e:	f04f 0300 	mov.w	r3, #0
 8003152:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003156:	4629      	mov	r1, r5
 8003158:	028b      	lsls	r3, r1, #10
 800315a:	4621      	mov	r1, r4
 800315c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003160:	4621      	mov	r1, r4
 8003162:	028a      	lsls	r2, r1, #10
 8003164:	4610      	mov	r0, r2
 8003166:	4619      	mov	r1, r3
 8003168:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800316c:	2200      	movs	r2, #0
 800316e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003170:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003172:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003176:	f7fd f845 	bl	8000204 <__aeabi_uldivmod>
 800317a:	4602      	mov	r2, r0
 800317c:	460b      	mov	r3, r1
 800317e:	4613      	mov	r3, r2
 8003180:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003184:	4b0d      	ldr	r3, [pc, #52]	; (80031bc <HAL_RCC_GetSysClockFreq+0x458>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	0f1b      	lsrs	r3, r3, #28
 800318a:	f003 0307 	and.w	r3, r3, #7
 800318e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003192:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003196:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800319a:	fbb2 f3f3 	udiv	r3, r2, r3
 800319e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80031a2:	e003      	b.n	80031ac <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031a4:	4b06      	ldr	r3, [pc, #24]	; (80031c0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80031a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80031aa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	37b8      	adds	r7, #184	; 0xb8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031ba:	bf00      	nop
 80031bc:	40023800 	.word	0x40023800
 80031c0:	00f42400 	.word	0x00f42400

080031c4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d101      	bne.n	80031d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e28d      	b.n	80036f2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f000 8083 	beq.w	80032ea <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80031e4:	4b94      	ldr	r3, [pc, #592]	; (8003438 <HAL_RCC_OscConfig+0x274>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f003 030c 	and.w	r3, r3, #12
 80031ec:	2b04      	cmp	r3, #4
 80031ee:	d019      	beq.n	8003224 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031f0:	4b91      	ldr	r3, [pc, #580]	; (8003438 <HAL_RCC_OscConfig+0x274>)
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80031f8:	2b08      	cmp	r3, #8
 80031fa:	d106      	bne.n	800320a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031fc:	4b8e      	ldr	r3, [pc, #568]	; (8003438 <HAL_RCC_OscConfig+0x274>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003204:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003208:	d00c      	beq.n	8003224 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800320a:	4b8b      	ldr	r3, [pc, #556]	; (8003438 <HAL_RCC_OscConfig+0x274>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003212:	2b0c      	cmp	r3, #12
 8003214:	d112      	bne.n	800323c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003216:	4b88      	ldr	r3, [pc, #544]	; (8003438 <HAL_RCC_OscConfig+0x274>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800321e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003222:	d10b      	bne.n	800323c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003224:	4b84      	ldr	r3, [pc, #528]	; (8003438 <HAL_RCC_OscConfig+0x274>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d05b      	beq.n	80032e8 <HAL_RCC_OscConfig+0x124>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d157      	bne.n	80032e8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e25a      	b.n	80036f2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003244:	d106      	bne.n	8003254 <HAL_RCC_OscConfig+0x90>
 8003246:	4b7c      	ldr	r3, [pc, #496]	; (8003438 <HAL_RCC_OscConfig+0x274>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a7b      	ldr	r2, [pc, #492]	; (8003438 <HAL_RCC_OscConfig+0x274>)
 800324c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003250:	6013      	str	r3, [r2, #0]
 8003252:	e01d      	b.n	8003290 <HAL_RCC_OscConfig+0xcc>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800325c:	d10c      	bne.n	8003278 <HAL_RCC_OscConfig+0xb4>
 800325e:	4b76      	ldr	r3, [pc, #472]	; (8003438 <HAL_RCC_OscConfig+0x274>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a75      	ldr	r2, [pc, #468]	; (8003438 <HAL_RCC_OscConfig+0x274>)
 8003264:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003268:	6013      	str	r3, [r2, #0]
 800326a:	4b73      	ldr	r3, [pc, #460]	; (8003438 <HAL_RCC_OscConfig+0x274>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a72      	ldr	r2, [pc, #456]	; (8003438 <HAL_RCC_OscConfig+0x274>)
 8003270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003274:	6013      	str	r3, [r2, #0]
 8003276:	e00b      	b.n	8003290 <HAL_RCC_OscConfig+0xcc>
 8003278:	4b6f      	ldr	r3, [pc, #444]	; (8003438 <HAL_RCC_OscConfig+0x274>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a6e      	ldr	r2, [pc, #440]	; (8003438 <HAL_RCC_OscConfig+0x274>)
 800327e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003282:	6013      	str	r3, [r2, #0]
 8003284:	4b6c      	ldr	r3, [pc, #432]	; (8003438 <HAL_RCC_OscConfig+0x274>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a6b      	ldr	r2, [pc, #428]	; (8003438 <HAL_RCC_OscConfig+0x274>)
 800328a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800328e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d013      	beq.n	80032c0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003298:	f7fd fb80 	bl	800099c <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032a0:	f7fd fb7c 	bl	800099c <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b64      	cmp	r3, #100	; 0x64
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e21f      	b.n	80036f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032b2:	4b61      	ldr	r3, [pc, #388]	; (8003438 <HAL_RCC_OscConfig+0x274>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0f0      	beq.n	80032a0 <HAL_RCC_OscConfig+0xdc>
 80032be:	e014      	b.n	80032ea <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c0:	f7fd fb6c 	bl	800099c <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032c8:	f7fd fb68 	bl	800099c <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b64      	cmp	r3, #100	; 0x64
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e20b      	b.n	80036f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032da:	4b57      	ldr	r3, [pc, #348]	; (8003438 <HAL_RCC_OscConfig+0x274>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1f0      	bne.n	80032c8 <HAL_RCC_OscConfig+0x104>
 80032e6:	e000      	b.n	80032ea <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d06f      	beq.n	80033d6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80032f6:	4b50      	ldr	r3, [pc, #320]	; (8003438 <HAL_RCC_OscConfig+0x274>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f003 030c 	and.w	r3, r3, #12
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d017      	beq.n	8003332 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003302:	4b4d      	ldr	r3, [pc, #308]	; (8003438 <HAL_RCC_OscConfig+0x274>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800330a:	2b08      	cmp	r3, #8
 800330c:	d105      	bne.n	800331a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800330e:	4b4a      	ldr	r3, [pc, #296]	; (8003438 <HAL_RCC_OscConfig+0x274>)
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00b      	beq.n	8003332 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800331a:	4b47      	ldr	r3, [pc, #284]	; (8003438 <HAL_RCC_OscConfig+0x274>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003322:	2b0c      	cmp	r3, #12
 8003324:	d11c      	bne.n	8003360 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003326:	4b44      	ldr	r3, [pc, #272]	; (8003438 <HAL_RCC_OscConfig+0x274>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d116      	bne.n	8003360 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003332:	4b41      	ldr	r3, [pc, #260]	; (8003438 <HAL_RCC_OscConfig+0x274>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d005      	beq.n	800334a <HAL_RCC_OscConfig+0x186>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d001      	beq.n	800334a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e1d3      	b.n	80036f2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800334a:	4b3b      	ldr	r3, [pc, #236]	; (8003438 <HAL_RCC_OscConfig+0x274>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	00db      	lsls	r3, r3, #3
 8003358:	4937      	ldr	r1, [pc, #220]	; (8003438 <HAL_RCC_OscConfig+0x274>)
 800335a:	4313      	orrs	r3, r2
 800335c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800335e:	e03a      	b.n	80033d6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d020      	beq.n	80033aa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003368:	4b34      	ldr	r3, [pc, #208]	; (800343c <HAL_RCC_OscConfig+0x278>)
 800336a:	2201      	movs	r2, #1
 800336c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336e:	f7fd fb15 	bl	800099c <HAL_GetTick>
 8003372:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003374:	e008      	b.n	8003388 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003376:	f7fd fb11 	bl	800099c <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d901      	bls.n	8003388 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e1b4      	b.n	80036f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003388:	4b2b      	ldr	r3, [pc, #172]	; (8003438 <HAL_RCC_OscConfig+0x274>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d0f0      	beq.n	8003376 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003394:	4b28      	ldr	r3, [pc, #160]	; (8003438 <HAL_RCC_OscConfig+0x274>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	4925      	ldr	r1, [pc, #148]	; (8003438 <HAL_RCC_OscConfig+0x274>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	600b      	str	r3, [r1, #0]
 80033a8:	e015      	b.n	80033d6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033aa:	4b24      	ldr	r3, [pc, #144]	; (800343c <HAL_RCC_OscConfig+0x278>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b0:	f7fd faf4 	bl	800099c <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033b6:	e008      	b.n	80033ca <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033b8:	f7fd faf0 	bl	800099c <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e193      	b.n	80036f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ca:	4b1b      	ldr	r3, [pc, #108]	; (8003438 <HAL_RCC_OscConfig+0x274>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1f0      	bne.n	80033b8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0308 	and.w	r3, r3, #8
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d036      	beq.n	8003450 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d016      	beq.n	8003418 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033ea:	4b15      	ldr	r3, [pc, #84]	; (8003440 <HAL_RCC_OscConfig+0x27c>)
 80033ec:	2201      	movs	r2, #1
 80033ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f0:	f7fd fad4 	bl	800099c <HAL_GetTick>
 80033f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033f6:	e008      	b.n	800340a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033f8:	f7fd fad0 	bl	800099c <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e173      	b.n	80036f2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800340a:	4b0b      	ldr	r3, [pc, #44]	; (8003438 <HAL_RCC_OscConfig+0x274>)
 800340c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d0f0      	beq.n	80033f8 <HAL_RCC_OscConfig+0x234>
 8003416:	e01b      	b.n	8003450 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003418:	4b09      	ldr	r3, [pc, #36]	; (8003440 <HAL_RCC_OscConfig+0x27c>)
 800341a:	2200      	movs	r2, #0
 800341c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800341e:	f7fd fabd 	bl	800099c <HAL_GetTick>
 8003422:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003424:	e00e      	b.n	8003444 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003426:	f7fd fab9 	bl	800099c <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d907      	bls.n	8003444 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e15c      	b.n	80036f2 <HAL_RCC_OscConfig+0x52e>
 8003438:	40023800 	.word	0x40023800
 800343c:	42470000 	.word	0x42470000
 8003440:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003444:	4b8a      	ldr	r3, [pc, #552]	; (8003670 <HAL_RCC_OscConfig+0x4ac>)
 8003446:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1ea      	bne.n	8003426 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0304 	and.w	r3, r3, #4
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 8097 	beq.w	800358c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800345e:	2300      	movs	r3, #0
 8003460:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003462:	4b83      	ldr	r3, [pc, #524]	; (8003670 <HAL_RCC_OscConfig+0x4ac>)
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10f      	bne.n	800348e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800346e:	2300      	movs	r3, #0
 8003470:	60bb      	str	r3, [r7, #8]
 8003472:	4b7f      	ldr	r3, [pc, #508]	; (8003670 <HAL_RCC_OscConfig+0x4ac>)
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	4a7e      	ldr	r2, [pc, #504]	; (8003670 <HAL_RCC_OscConfig+0x4ac>)
 8003478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800347c:	6413      	str	r3, [r2, #64]	; 0x40
 800347e:	4b7c      	ldr	r3, [pc, #496]	; (8003670 <HAL_RCC_OscConfig+0x4ac>)
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003486:	60bb      	str	r3, [r7, #8]
 8003488:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800348a:	2301      	movs	r3, #1
 800348c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800348e:	4b79      	ldr	r3, [pc, #484]	; (8003674 <HAL_RCC_OscConfig+0x4b0>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003496:	2b00      	cmp	r3, #0
 8003498:	d118      	bne.n	80034cc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800349a:	4b76      	ldr	r3, [pc, #472]	; (8003674 <HAL_RCC_OscConfig+0x4b0>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a75      	ldr	r2, [pc, #468]	; (8003674 <HAL_RCC_OscConfig+0x4b0>)
 80034a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034a6:	f7fd fa79 	bl	800099c <HAL_GetTick>
 80034aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ac:	e008      	b.n	80034c0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ae:	f7fd fa75 	bl	800099c <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d901      	bls.n	80034c0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e118      	b.n	80036f2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c0:	4b6c      	ldr	r3, [pc, #432]	; (8003674 <HAL_RCC_OscConfig+0x4b0>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d0f0      	beq.n	80034ae <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d106      	bne.n	80034e2 <HAL_RCC_OscConfig+0x31e>
 80034d4:	4b66      	ldr	r3, [pc, #408]	; (8003670 <HAL_RCC_OscConfig+0x4ac>)
 80034d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d8:	4a65      	ldr	r2, [pc, #404]	; (8003670 <HAL_RCC_OscConfig+0x4ac>)
 80034da:	f043 0301 	orr.w	r3, r3, #1
 80034de:	6713      	str	r3, [r2, #112]	; 0x70
 80034e0:	e01c      	b.n	800351c <HAL_RCC_OscConfig+0x358>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	2b05      	cmp	r3, #5
 80034e8:	d10c      	bne.n	8003504 <HAL_RCC_OscConfig+0x340>
 80034ea:	4b61      	ldr	r3, [pc, #388]	; (8003670 <HAL_RCC_OscConfig+0x4ac>)
 80034ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ee:	4a60      	ldr	r2, [pc, #384]	; (8003670 <HAL_RCC_OscConfig+0x4ac>)
 80034f0:	f043 0304 	orr.w	r3, r3, #4
 80034f4:	6713      	str	r3, [r2, #112]	; 0x70
 80034f6:	4b5e      	ldr	r3, [pc, #376]	; (8003670 <HAL_RCC_OscConfig+0x4ac>)
 80034f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fa:	4a5d      	ldr	r2, [pc, #372]	; (8003670 <HAL_RCC_OscConfig+0x4ac>)
 80034fc:	f043 0301 	orr.w	r3, r3, #1
 8003500:	6713      	str	r3, [r2, #112]	; 0x70
 8003502:	e00b      	b.n	800351c <HAL_RCC_OscConfig+0x358>
 8003504:	4b5a      	ldr	r3, [pc, #360]	; (8003670 <HAL_RCC_OscConfig+0x4ac>)
 8003506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003508:	4a59      	ldr	r2, [pc, #356]	; (8003670 <HAL_RCC_OscConfig+0x4ac>)
 800350a:	f023 0301 	bic.w	r3, r3, #1
 800350e:	6713      	str	r3, [r2, #112]	; 0x70
 8003510:	4b57      	ldr	r3, [pc, #348]	; (8003670 <HAL_RCC_OscConfig+0x4ac>)
 8003512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003514:	4a56      	ldr	r2, [pc, #344]	; (8003670 <HAL_RCC_OscConfig+0x4ac>)
 8003516:	f023 0304 	bic.w	r3, r3, #4
 800351a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d015      	beq.n	8003550 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003524:	f7fd fa3a 	bl	800099c <HAL_GetTick>
 8003528:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800352a:	e00a      	b.n	8003542 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800352c:	f7fd fa36 	bl	800099c <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	f241 3288 	movw	r2, #5000	; 0x1388
 800353a:	4293      	cmp	r3, r2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e0d7      	b.n	80036f2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003542:	4b4b      	ldr	r3, [pc, #300]	; (8003670 <HAL_RCC_OscConfig+0x4ac>)
 8003544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d0ee      	beq.n	800352c <HAL_RCC_OscConfig+0x368>
 800354e:	e014      	b.n	800357a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003550:	f7fd fa24 	bl	800099c <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003556:	e00a      	b.n	800356e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003558:	f7fd fa20 	bl	800099c <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	f241 3288 	movw	r2, #5000	; 0x1388
 8003566:	4293      	cmp	r3, r2
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e0c1      	b.n	80036f2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800356e:	4b40      	ldr	r3, [pc, #256]	; (8003670 <HAL_RCC_OscConfig+0x4ac>)
 8003570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1ee      	bne.n	8003558 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800357a:	7dfb      	ldrb	r3, [r7, #23]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d105      	bne.n	800358c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003580:	4b3b      	ldr	r3, [pc, #236]	; (8003670 <HAL_RCC_OscConfig+0x4ac>)
 8003582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003584:	4a3a      	ldr	r2, [pc, #232]	; (8003670 <HAL_RCC_OscConfig+0x4ac>)
 8003586:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800358a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	2b00      	cmp	r3, #0
 8003592:	f000 80ad 	beq.w	80036f0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003596:	4b36      	ldr	r3, [pc, #216]	; (8003670 <HAL_RCC_OscConfig+0x4ac>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f003 030c 	and.w	r3, r3, #12
 800359e:	2b08      	cmp	r3, #8
 80035a0:	d060      	beq.n	8003664 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d145      	bne.n	8003636 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035aa:	4b33      	ldr	r3, [pc, #204]	; (8003678 <HAL_RCC_OscConfig+0x4b4>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b0:	f7fd f9f4 	bl	800099c <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035b8:	f7fd f9f0 	bl	800099c <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e093      	b.n	80036f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ca:	4b29      	ldr	r3, [pc, #164]	; (8003670 <HAL_RCC_OscConfig+0x4ac>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1f0      	bne.n	80035b8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	69da      	ldr	r2, [r3, #28]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	431a      	orrs	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e4:	019b      	lsls	r3, r3, #6
 80035e6:	431a      	orrs	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ec:	085b      	lsrs	r3, r3, #1
 80035ee:	3b01      	subs	r3, #1
 80035f0:	041b      	lsls	r3, r3, #16
 80035f2:	431a      	orrs	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f8:	061b      	lsls	r3, r3, #24
 80035fa:	431a      	orrs	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003600:	071b      	lsls	r3, r3, #28
 8003602:	491b      	ldr	r1, [pc, #108]	; (8003670 <HAL_RCC_OscConfig+0x4ac>)
 8003604:	4313      	orrs	r3, r2
 8003606:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003608:	4b1b      	ldr	r3, [pc, #108]	; (8003678 <HAL_RCC_OscConfig+0x4b4>)
 800360a:	2201      	movs	r2, #1
 800360c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800360e:	f7fd f9c5 	bl	800099c <HAL_GetTick>
 8003612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003614:	e008      	b.n	8003628 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003616:	f7fd f9c1 	bl	800099c <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d901      	bls.n	8003628 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e064      	b.n	80036f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003628:	4b11      	ldr	r3, [pc, #68]	; (8003670 <HAL_RCC_OscConfig+0x4ac>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d0f0      	beq.n	8003616 <HAL_RCC_OscConfig+0x452>
 8003634:	e05c      	b.n	80036f0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003636:	4b10      	ldr	r3, [pc, #64]	; (8003678 <HAL_RCC_OscConfig+0x4b4>)
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800363c:	f7fd f9ae 	bl	800099c <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003644:	f7fd f9aa 	bl	800099c <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b02      	cmp	r3, #2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e04d      	b.n	80036f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003656:	4b06      	ldr	r3, [pc, #24]	; (8003670 <HAL_RCC_OscConfig+0x4ac>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1f0      	bne.n	8003644 <HAL_RCC_OscConfig+0x480>
 8003662:	e045      	b.n	80036f0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d107      	bne.n	800367c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e040      	b.n	80036f2 <HAL_RCC_OscConfig+0x52e>
 8003670:	40023800 	.word	0x40023800
 8003674:	40007000 	.word	0x40007000
 8003678:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800367c:	4b1f      	ldr	r3, [pc, #124]	; (80036fc <HAL_RCC_OscConfig+0x538>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d030      	beq.n	80036ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003694:	429a      	cmp	r2, r3
 8003696:	d129      	bne.n	80036ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d122      	bne.n	80036ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036ac:	4013      	ands	r3, r2
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d119      	bne.n	80036ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c2:	085b      	lsrs	r3, r3, #1
 80036c4:	3b01      	subs	r3, #1
 80036c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d10f      	bne.n	80036ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036d8:	429a      	cmp	r2, r3
 80036da:	d107      	bne.n	80036ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d001      	beq.n	80036f0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e000      	b.n	80036f2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3718      	adds	r7, #24
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	40023800 	.word	0x40023800

08003700 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e03f      	b.n	8003792 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d106      	bne.n	800372c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f7fd f81a 	bl	8000760 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2224      	movs	r2, #36	; 0x24
 8003730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68da      	ldr	r2, [r3, #12]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003742:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f000 f829 	bl	800379c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	691a      	ldr	r2, [r3, #16]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003758:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	695a      	ldr	r2, [r3, #20]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003768:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68da      	ldr	r2, [r3, #12]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003778:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2220      	movs	r2, #32
 8003784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2220      	movs	r2, #32
 800378c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
	...

0800379c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800379c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037a0:	b0c0      	sub	sp, #256	; 0x100
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80037b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b8:	68d9      	ldr	r1, [r3, #12]
 80037ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	ea40 0301 	orr.w	r3, r0, r1
 80037c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ca:	689a      	ldr	r2, [r3, #8]
 80037cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	431a      	orrs	r2, r3
 80037d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	431a      	orrs	r2, r3
 80037dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e0:	69db      	ldr	r3, [r3, #28]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80037e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80037f4:	f021 010c 	bic.w	r1, r1, #12
 80037f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003802:	430b      	orrs	r3, r1
 8003804:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003816:	6999      	ldr	r1, [r3, #24]
 8003818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	ea40 0301 	orr.w	r3, r0, r1
 8003822:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	4b8f      	ldr	r3, [pc, #572]	; (8003a68 <UART_SetConfig+0x2cc>)
 800382c:	429a      	cmp	r2, r3
 800382e:	d005      	beq.n	800383c <UART_SetConfig+0xa0>
 8003830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	4b8d      	ldr	r3, [pc, #564]	; (8003a6c <UART_SetConfig+0x2d0>)
 8003838:	429a      	cmp	r2, r3
 800383a:	d104      	bne.n	8003846 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800383c:	f7fe ff54 	bl	80026e8 <HAL_RCC_GetPCLK2Freq>
 8003840:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003844:	e003      	b.n	800384e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003846:	f7fe ff3b 	bl	80026c0 <HAL_RCC_GetPCLK1Freq>
 800384a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800384e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003852:	69db      	ldr	r3, [r3, #28]
 8003854:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003858:	f040 810c 	bne.w	8003a74 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800385c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003860:	2200      	movs	r2, #0
 8003862:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003866:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800386a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800386e:	4622      	mov	r2, r4
 8003870:	462b      	mov	r3, r5
 8003872:	1891      	adds	r1, r2, r2
 8003874:	65b9      	str	r1, [r7, #88]	; 0x58
 8003876:	415b      	adcs	r3, r3
 8003878:	65fb      	str	r3, [r7, #92]	; 0x5c
 800387a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800387e:	4621      	mov	r1, r4
 8003880:	eb12 0801 	adds.w	r8, r2, r1
 8003884:	4629      	mov	r1, r5
 8003886:	eb43 0901 	adc.w	r9, r3, r1
 800388a:	f04f 0200 	mov.w	r2, #0
 800388e:	f04f 0300 	mov.w	r3, #0
 8003892:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003896:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800389a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800389e:	4690      	mov	r8, r2
 80038a0:	4699      	mov	r9, r3
 80038a2:	4623      	mov	r3, r4
 80038a4:	eb18 0303 	adds.w	r3, r8, r3
 80038a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80038ac:	462b      	mov	r3, r5
 80038ae:	eb49 0303 	adc.w	r3, r9, r3
 80038b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80038b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80038c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80038c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80038ca:	460b      	mov	r3, r1
 80038cc:	18db      	adds	r3, r3, r3
 80038ce:	653b      	str	r3, [r7, #80]	; 0x50
 80038d0:	4613      	mov	r3, r2
 80038d2:	eb42 0303 	adc.w	r3, r2, r3
 80038d6:	657b      	str	r3, [r7, #84]	; 0x54
 80038d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80038dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80038e0:	f7fc fc90 	bl	8000204 <__aeabi_uldivmod>
 80038e4:	4602      	mov	r2, r0
 80038e6:	460b      	mov	r3, r1
 80038e8:	4b61      	ldr	r3, [pc, #388]	; (8003a70 <UART_SetConfig+0x2d4>)
 80038ea:	fba3 2302 	umull	r2, r3, r3, r2
 80038ee:	095b      	lsrs	r3, r3, #5
 80038f0:	011c      	lsls	r4, r3, #4
 80038f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038f6:	2200      	movs	r2, #0
 80038f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80038fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003900:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003904:	4642      	mov	r2, r8
 8003906:	464b      	mov	r3, r9
 8003908:	1891      	adds	r1, r2, r2
 800390a:	64b9      	str	r1, [r7, #72]	; 0x48
 800390c:	415b      	adcs	r3, r3
 800390e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003910:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003914:	4641      	mov	r1, r8
 8003916:	eb12 0a01 	adds.w	sl, r2, r1
 800391a:	4649      	mov	r1, r9
 800391c:	eb43 0b01 	adc.w	fp, r3, r1
 8003920:	f04f 0200 	mov.w	r2, #0
 8003924:	f04f 0300 	mov.w	r3, #0
 8003928:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800392c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003930:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003934:	4692      	mov	sl, r2
 8003936:	469b      	mov	fp, r3
 8003938:	4643      	mov	r3, r8
 800393a:	eb1a 0303 	adds.w	r3, sl, r3
 800393e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003942:	464b      	mov	r3, r9
 8003944:	eb4b 0303 	adc.w	r3, fp, r3
 8003948:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800394c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003958:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800395c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003960:	460b      	mov	r3, r1
 8003962:	18db      	adds	r3, r3, r3
 8003964:	643b      	str	r3, [r7, #64]	; 0x40
 8003966:	4613      	mov	r3, r2
 8003968:	eb42 0303 	adc.w	r3, r2, r3
 800396c:	647b      	str	r3, [r7, #68]	; 0x44
 800396e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003972:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003976:	f7fc fc45 	bl	8000204 <__aeabi_uldivmod>
 800397a:	4602      	mov	r2, r0
 800397c:	460b      	mov	r3, r1
 800397e:	4611      	mov	r1, r2
 8003980:	4b3b      	ldr	r3, [pc, #236]	; (8003a70 <UART_SetConfig+0x2d4>)
 8003982:	fba3 2301 	umull	r2, r3, r3, r1
 8003986:	095b      	lsrs	r3, r3, #5
 8003988:	2264      	movs	r2, #100	; 0x64
 800398a:	fb02 f303 	mul.w	r3, r2, r3
 800398e:	1acb      	subs	r3, r1, r3
 8003990:	00db      	lsls	r3, r3, #3
 8003992:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003996:	4b36      	ldr	r3, [pc, #216]	; (8003a70 <UART_SetConfig+0x2d4>)
 8003998:	fba3 2302 	umull	r2, r3, r3, r2
 800399c:	095b      	lsrs	r3, r3, #5
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80039a4:	441c      	add	r4, r3
 80039a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039aa:	2200      	movs	r2, #0
 80039ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80039b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80039b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80039b8:	4642      	mov	r2, r8
 80039ba:	464b      	mov	r3, r9
 80039bc:	1891      	adds	r1, r2, r2
 80039be:	63b9      	str	r1, [r7, #56]	; 0x38
 80039c0:	415b      	adcs	r3, r3
 80039c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80039c8:	4641      	mov	r1, r8
 80039ca:	1851      	adds	r1, r2, r1
 80039cc:	6339      	str	r1, [r7, #48]	; 0x30
 80039ce:	4649      	mov	r1, r9
 80039d0:	414b      	adcs	r3, r1
 80039d2:	637b      	str	r3, [r7, #52]	; 0x34
 80039d4:	f04f 0200 	mov.w	r2, #0
 80039d8:	f04f 0300 	mov.w	r3, #0
 80039dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80039e0:	4659      	mov	r1, fp
 80039e2:	00cb      	lsls	r3, r1, #3
 80039e4:	4651      	mov	r1, sl
 80039e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039ea:	4651      	mov	r1, sl
 80039ec:	00ca      	lsls	r2, r1, #3
 80039ee:	4610      	mov	r0, r2
 80039f0:	4619      	mov	r1, r3
 80039f2:	4603      	mov	r3, r0
 80039f4:	4642      	mov	r2, r8
 80039f6:	189b      	adds	r3, r3, r2
 80039f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80039fc:	464b      	mov	r3, r9
 80039fe:	460a      	mov	r2, r1
 8003a00:	eb42 0303 	adc.w	r3, r2, r3
 8003a04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003a14:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003a18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	18db      	adds	r3, r3, r3
 8003a20:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a22:	4613      	mov	r3, r2
 8003a24:	eb42 0303 	adc.w	r3, r2, r3
 8003a28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a2e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003a32:	f7fc fbe7 	bl	8000204 <__aeabi_uldivmod>
 8003a36:	4602      	mov	r2, r0
 8003a38:	460b      	mov	r3, r1
 8003a3a:	4b0d      	ldr	r3, [pc, #52]	; (8003a70 <UART_SetConfig+0x2d4>)
 8003a3c:	fba3 1302 	umull	r1, r3, r3, r2
 8003a40:	095b      	lsrs	r3, r3, #5
 8003a42:	2164      	movs	r1, #100	; 0x64
 8003a44:	fb01 f303 	mul.w	r3, r1, r3
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	00db      	lsls	r3, r3, #3
 8003a4c:	3332      	adds	r3, #50	; 0x32
 8003a4e:	4a08      	ldr	r2, [pc, #32]	; (8003a70 <UART_SetConfig+0x2d4>)
 8003a50:	fba2 2303 	umull	r2, r3, r2, r3
 8003a54:	095b      	lsrs	r3, r3, #5
 8003a56:	f003 0207 	and.w	r2, r3, #7
 8003a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4422      	add	r2, r4
 8003a62:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a64:	e105      	b.n	8003c72 <UART_SetConfig+0x4d6>
 8003a66:	bf00      	nop
 8003a68:	40011000 	.word	0x40011000
 8003a6c:	40011400 	.word	0x40011400
 8003a70:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003a7e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003a82:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003a86:	4642      	mov	r2, r8
 8003a88:	464b      	mov	r3, r9
 8003a8a:	1891      	adds	r1, r2, r2
 8003a8c:	6239      	str	r1, [r7, #32]
 8003a8e:	415b      	adcs	r3, r3
 8003a90:	627b      	str	r3, [r7, #36]	; 0x24
 8003a92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a96:	4641      	mov	r1, r8
 8003a98:	1854      	adds	r4, r2, r1
 8003a9a:	4649      	mov	r1, r9
 8003a9c:	eb43 0501 	adc.w	r5, r3, r1
 8003aa0:	f04f 0200 	mov.w	r2, #0
 8003aa4:	f04f 0300 	mov.w	r3, #0
 8003aa8:	00eb      	lsls	r3, r5, #3
 8003aaa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003aae:	00e2      	lsls	r2, r4, #3
 8003ab0:	4614      	mov	r4, r2
 8003ab2:	461d      	mov	r5, r3
 8003ab4:	4643      	mov	r3, r8
 8003ab6:	18e3      	adds	r3, r4, r3
 8003ab8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003abc:	464b      	mov	r3, r9
 8003abe:	eb45 0303 	adc.w	r3, r5, r3
 8003ac2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ad2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ad6:	f04f 0200 	mov.w	r2, #0
 8003ada:	f04f 0300 	mov.w	r3, #0
 8003ade:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003ae2:	4629      	mov	r1, r5
 8003ae4:	008b      	lsls	r3, r1, #2
 8003ae6:	4621      	mov	r1, r4
 8003ae8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003aec:	4621      	mov	r1, r4
 8003aee:	008a      	lsls	r2, r1, #2
 8003af0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003af4:	f7fc fb86 	bl	8000204 <__aeabi_uldivmod>
 8003af8:	4602      	mov	r2, r0
 8003afa:	460b      	mov	r3, r1
 8003afc:	4b60      	ldr	r3, [pc, #384]	; (8003c80 <UART_SetConfig+0x4e4>)
 8003afe:	fba3 2302 	umull	r2, r3, r3, r2
 8003b02:	095b      	lsrs	r3, r3, #5
 8003b04:	011c      	lsls	r4, r3, #4
 8003b06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003b10:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003b14:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003b18:	4642      	mov	r2, r8
 8003b1a:	464b      	mov	r3, r9
 8003b1c:	1891      	adds	r1, r2, r2
 8003b1e:	61b9      	str	r1, [r7, #24]
 8003b20:	415b      	adcs	r3, r3
 8003b22:	61fb      	str	r3, [r7, #28]
 8003b24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b28:	4641      	mov	r1, r8
 8003b2a:	1851      	adds	r1, r2, r1
 8003b2c:	6139      	str	r1, [r7, #16]
 8003b2e:	4649      	mov	r1, r9
 8003b30:	414b      	adcs	r3, r1
 8003b32:	617b      	str	r3, [r7, #20]
 8003b34:	f04f 0200 	mov.w	r2, #0
 8003b38:	f04f 0300 	mov.w	r3, #0
 8003b3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b40:	4659      	mov	r1, fp
 8003b42:	00cb      	lsls	r3, r1, #3
 8003b44:	4651      	mov	r1, sl
 8003b46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b4a:	4651      	mov	r1, sl
 8003b4c:	00ca      	lsls	r2, r1, #3
 8003b4e:	4610      	mov	r0, r2
 8003b50:	4619      	mov	r1, r3
 8003b52:	4603      	mov	r3, r0
 8003b54:	4642      	mov	r2, r8
 8003b56:	189b      	adds	r3, r3, r2
 8003b58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b5c:	464b      	mov	r3, r9
 8003b5e:	460a      	mov	r2, r1
 8003b60:	eb42 0303 	adc.w	r3, r2, r3
 8003b64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b72:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003b74:	f04f 0200 	mov.w	r2, #0
 8003b78:	f04f 0300 	mov.w	r3, #0
 8003b7c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003b80:	4649      	mov	r1, r9
 8003b82:	008b      	lsls	r3, r1, #2
 8003b84:	4641      	mov	r1, r8
 8003b86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b8a:	4641      	mov	r1, r8
 8003b8c:	008a      	lsls	r2, r1, #2
 8003b8e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003b92:	f7fc fb37 	bl	8000204 <__aeabi_uldivmod>
 8003b96:	4602      	mov	r2, r0
 8003b98:	460b      	mov	r3, r1
 8003b9a:	4b39      	ldr	r3, [pc, #228]	; (8003c80 <UART_SetConfig+0x4e4>)
 8003b9c:	fba3 1302 	umull	r1, r3, r3, r2
 8003ba0:	095b      	lsrs	r3, r3, #5
 8003ba2:	2164      	movs	r1, #100	; 0x64
 8003ba4:	fb01 f303 	mul.w	r3, r1, r3
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	011b      	lsls	r3, r3, #4
 8003bac:	3332      	adds	r3, #50	; 0x32
 8003bae:	4a34      	ldr	r2, [pc, #208]	; (8003c80 <UART_SetConfig+0x4e4>)
 8003bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb4:	095b      	lsrs	r3, r3, #5
 8003bb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bba:	441c      	add	r4, r3
 8003bbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	673b      	str	r3, [r7, #112]	; 0x70
 8003bc4:	677a      	str	r2, [r7, #116]	; 0x74
 8003bc6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003bca:	4642      	mov	r2, r8
 8003bcc:	464b      	mov	r3, r9
 8003bce:	1891      	adds	r1, r2, r2
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	415b      	adcs	r3, r3
 8003bd4:	60fb      	str	r3, [r7, #12]
 8003bd6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bda:	4641      	mov	r1, r8
 8003bdc:	1851      	adds	r1, r2, r1
 8003bde:	6039      	str	r1, [r7, #0]
 8003be0:	4649      	mov	r1, r9
 8003be2:	414b      	adcs	r3, r1
 8003be4:	607b      	str	r3, [r7, #4]
 8003be6:	f04f 0200 	mov.w	r2, #0
 8003bea:	f04f 0300 	mov.w	r3, #0
 8003bee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003bf2:	4659      	mov	r1, fp
 8003bf4:	00cb      	lsls	r3, r1, #3
 8003bf6:	4651      	mov	r1, sl
 8003bf8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bfc:	4651      	mov	r1, sl
 8003bfe:	00ca      	lsls	r2, r1, #3
 8003c00:	4610      	mov	r0, r2
 8003c02:	4619      	mov	r1, r3
 8003c04:	4603      	mov	r3, r0
 8003c06:	4642      	mov	r2, r8
 8003c08:	189b      	adds	r3, r3, r2
 8003c0a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c0c:	464b      	mov	r3, r9
 8003c0e:	460a      	mov	r2, r1
 8003c10:	eb42 0303 	adc.w	r3, r2, r3
 8003c14:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	663b      	str	r3, [r7, #96]	; 0x60
 8003c20:	667a      	str	r2, [r7, #100]	; 0x64
 8003c22:	f04f 0200 	mov.w	r2, #0
 8003c26:	f04f 0300 	mov.w	r3, #0
 8003c2a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003c2e:	4649      	mov	r1, r9
 8003c30:	008b      	lsls	r3, r1, #2
 8003c32:	4641      	mov	r1, r8
 8003c34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c38:	4641      	mov	r1, r8
 8003c3a:	008a      	lsls	r2, r1, #2
 8003c3c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003c40:	f7fc fae0 	bl	8000204 <__aeabi_uldivmod>
 8003c44:	4602      	mov	r2, r0
 8003c46:	460b      	mov	r3, r1
 8003c48:	4b0d      	ldr	r3, [pc, #52]	; (8003c80 <UART_SetConfig+0x4e4>)
 8003c4a:	fba3 1302 	umull	r1, r3, r3, r2
 8003c4e:	095b      	lsrs	r3, r3, #5
 8003c50:	2164      	movs	r1, #100	; 0x64
 8003c52:	fb01 f303 	mul.w	r3, r1, r3
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	011b      	lsls	r3, r3, #4
 8003c5a:	3332      	adds	r3, #50	; 0x32
 8003c5c:	4a08      	ldr	r2, [pc, #32]	; (8003c80 <UART_SetConfig+0x4e4>)
 8003c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c62:	095b      	lsrs	r3, r3, #5
 8003c64:	f003 020f 	and.w	r2, r3, #15
 8003c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4422      	add	r2, r4
 8003c70:	609a      	str	r2, [r3, #8]
}
 8003c72:	bf00      	nop
 8003c74:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c7e:	bf00      	nop
 8003c80:	51eb851f 	.word	0x51eb851f

08003c84 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c84:	b084      	sub	sp, #16
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b084      	sub	sp, #16
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
 8003c8e:	f107 001c 	add.w	r0, r7, #28
 8003c92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d122      	bne.n	8003ce2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003cb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003cc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d105      	bne.n	8003cd6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f001 fbe8 	bl	80054ac <USB_CoreReset>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	73fb      	strb	r3, [r7, #15]
 8003ce0:	e01a      	b.n	8003d18 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f001 fbdc 	bl	80054ac <USB_CoreReset>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003cf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d106      	bne.n	8003d0c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d02:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	639a      	str	r2, [r3, #56]	; 0x38
 8003d0a:	e005      	b.n	8003d18 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d10b      	bne.n	8003d36 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f043 0206 	orr.w	r2, r3, #6
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f043 0220 	orr.w	r2, r3, #32
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d42:	b004      	add	sp, #16
 8003d44:	4770      	bx	lr
	...

08003d48 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b087      	sub	sp, #28
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	4613      	mov	r3, r2
 8003d54:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003d56:	79fb      	ldrb	r3, [r7, #7]
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d165      	bne.n	8003e28 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	4a41      	ldr	r2, [pc, #260]	; (8003e64 <USB_SetTurnaroundTime+0x11c>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d906      	bls.n	8003d72 <USB_SetTurnaroundTime+0x2a>
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	4a40      	ldr	r2, [pc, #256]	; (8003e68 <USB_SetTurnaroundTime+0x120>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d202      	bcs.n	8003d72 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003d6c:	230f      	movs	r3, #15
 8003d6e:	617b      	str	r3, [r7, #20]
 8003d70:	e062      	b.n	8003e38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	4a3c      	ldr	r2, [pc, #240]	; (8003e68 <USB_SetTurnaroundTime+0x120>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d306      	bcc.n	8003d88 <USB_SetTurnaroundTime+0x40>
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	4a3b      	ldr	r2, [pc, #236]	; (8003e6c <USB_SetTurnaroundTime+0x124>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d202      	bcs.n	8003d88 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003d82:	230e      	movs	r3, #14
 8003d84:	617b      	str	r3, [r7, #20]
 8003d86:	e057      	b.n	8003e38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	4a38      	ldr	r2, [pc, #224]	; (8003e6c <USB_SetTurnaroundTime+0x124>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d306      	bcc.n	8003d9e <USB_SetTurnaroundTime+0x56>
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	4a37      	ldr	r2, [pc, #220]	; (8003e70 <USB_SetTurnaroundTime+0x128>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d202      	bcs.n	8003d9e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003d98:	230d      	movs	r3, #13
 8003d9a:	617b      	str	r3, [r7, #20]
 8003d9c:	e04c      	b.n	8003e38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	4a33      	ldr	r2, [pc, #204]	; (8003e70 <USB_SetTurnaroundTime+0x128>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d306      	bcc.n	8003db4 <USB_SetTurnaroundTime+0x6c>
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	4a32      	ldr	r2, [pc, #200]	; (8003e74 <USB_SetTurnaroundTime+0x12c>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d802      	bhi.n	8003db4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003dae:	230c      	movs	r3, #12
 8003db0:	617b      	str	r3, [r7, #20]
 8003db2:	e041      	b.n	8003e38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	4a2f      	ldr	r2, [pc, #188]	; (8003e74 <USB_SetTurnaroundTime+0x12c>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d906      	bls.n	8003dca <USB_SetTurnaroundTime+0x82>
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	4a2e      	ldr	r2, [pc, #184]	; (8003e78 <USB_SetTurnaroundTime+0x130>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d802      	bhi.n	8003dca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003dc4:	230b      	movs	r3, #11
 8003dc6:	617b      	str	r3, [r7, #20]
 8003dc8:	e036      	b.n	8003e38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	4a2a      	ldr	r2, [pc, #168]	; (8003e78 <USB_SetTurnaroundTime+0x130>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d906      	bls.n	8003de0 <USB_SetTurnaroundTime+0x98>
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	4a29      	ldr	r2, [pc, #164]	; (8003e7c <USB_SetTurnaroundTime+0x134>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d802      	bhi.n	8003de0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003dda:	230a      	movs	r3, #10
 8003ddc:	617b      	str	r3, [r7, #20]
 8003dde:	e02b      	b.n	8003e38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	4a26      	ldr	r2, [pc, #152]	; (8003e7c <USB_SetTurnaroundTime+0x134>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d906      	bls.n	8003df6 <USB_SetTurnaroundTime+0xae>
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	4a25      	ldr	r2, [pc, #148]	; (8003e80 <USB_SetTurnaroundTime+0x138>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d202      	bcs.n	8003df6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003df0:	2309      	movs	r3, #9
 8003df2:	617b      	str	r3, [r7, #20]
 8003df4:	e020      	b.n	8003e38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	4a21      	ldr	r2, [pc, #132]	; (8003e80 <USB_SetTurnaroundTime+0x138>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d306      	bcc.n	8003e0c <USB_SetTurnaroundTime+0xc4>
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	4a20      	ldr	r2, [pc, #128]	; (8003e84 <USB_SetTurnaroundTime+0x13c>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d802      	bhi.n	8003e0c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003e06:	2308      	movs	r3, #8
 8003e08:	617b      	str	r3, [r7, #20]
 8003e0a:	e015      	b.n	8003e38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	4a1d      	ldr	r2, [pc, #116]	; (8003e84 <USB_SetTurnaroundTime+0x13c>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d906      	bls.n	8003e22 <USB_SetTurnaroundTime+0xda>
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	4a1c      	ldr	r2, [pc, #112]	; (8003e88 <USB_SetTurnaroundTime+0x140>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d202      	bcs.n	8003e22 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003e1c:	2307      	movs	r3, #7
 8003e1e:	617b      	str	r3, [r7, #20]
 8003e20:	e00a      	b.n	8003e38 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003e22:	2306      	movs	r3, #6
 8003e24:	617b      	str	r3, [r7, #20]
 8003e26:	e007      	b.n	8003e38 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003e28:	79fb      	ldrb	r3, [r7, #7]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d102      	bne.n	8003e34 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003e2e:	2309      	movs	r3, #9
 8003e30:	617b      	str	r3, [r7, #20]
 8003e32:	e001      	b.n	8003e38 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003e34:	2309      	movs	r3, #9
 8003e36:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	68da      	ldr	r2, [r3, #12]
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	029b      	lsls	r3, r3, #10
 8003e4c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003e50:	431a      	orrs	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	371c      	adds	r7, #28
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr
 8003e64:	00d8acbf 	.word	0x00d8acbf
 8003e68:	00e4e1c0 	.word	0x00e4e1c0
 8003e6c:	00f42400 	.word	0x00f42400
 8003e70:	01067380 	.word	0x01067380
 8003e74:	011a499f 	.word	0x011a499f
 8003e78:	01312cff 	.word	0x01312cff
 8003e7c:	014ca43f 	.word	0x014ca43f
 8003e80:	016e3600 	.word	0x016e3600
 8003e84:	01a6ab1f 	.word	0x01a6ab1f
 8003e88:	01e84800 	.word	0x01e84800

08003e8c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f043 0201 	orr.w	r2, r3, #1
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b083      	sub	sp, #12
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f023 0201 	bic.w	r2, r3, #1
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	460b      	mov	r3, r1
 8003eda:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003edc:	2300      	movs	r3, #0
 8003ede:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003eec:	78fb      	ldrb	r3, [r7, #3]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d115      	bne.n	8003f1e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003efe:	2001      	movs	r0, #1
 8003f00:	f7fc fd58 	bl	80009b4 <HAL_Delay>
      ms++;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	3301      	adds	r3, #1
 8003f08:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f001 fa3f 	bl	800538e <USB_GetMode>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d01e      	beq.n	8003f54 <USB_SetCurrentMode+0x84>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2b31      	cmp	r3, #49	; 0x31
 8003f1a:	d9f0      	bls.n	8003efe <USB_SetCurrentMode+0x2e>
 8003f1c:	e01a      	b.n	8003f54 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003f1e:	78fb      	ldrb	r3, [r7, #3]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d115      	bne.n	8003f50 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003f30:	2001      	movs	r0, #1
 8003f32:	f7fc fd3f 	bl	80009b4 <HAL_Delay>
      ms++;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	3301      	adds	r3, #1
 8003f3a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f001 fa26 	bl	800538e <USB_GetMode>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d005      	beq.n	8003f54 <USB_SetCurrentMode+0x84>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2b31      	cmp	r3, #49	; 0x31
 8003f4c:	d9f0      	bls.n	8003f30 <USB_SetCurrentMode+0x60>
 8003f4e:	e001      	b.n	8003f54 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e005      	b.n	8003f60 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2b32      	cmp	r3, #50	; 0x32
 8003f58:	d101      	bne.n	8003f5e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e000      	b.n	8003f60 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3710      	adds	r7, #16
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f68:	b084      	sub	sp, #16
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b086      	sub	sp, #24
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
 8003f72:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003f76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003f82:	2300      	movs	r3, #0
 8003f84:	613b      	str	r3, [r7, #16]
 8003f86:	e009      	b.n	8003f9c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	3340      	adds	r3, #64	; 0x40
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	4413      	add	r3, r2
 8003f92:	2200      	movs	r2, #0
 8003f94:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	3301      	adds	r3, #1
 8003f9a:	613b      	str	r3, [r7, #16]
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	2b0e      	cmp	r3, #14
 8003fa0:	d9f2      	bls.n	8003f88 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d11c      	bne.n	8003fe2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fb6:	f043 0302 	orr.w	r3, r3, #2
 8003fba:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	601a      	str	r2, [r3, #0]
 8003fe0:	e005      	b.n	8003fee <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004000:	4619      	mov	r1, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004008:	461a      	mov	r2, r3
 800400a:	680b      	ldr	r3, [r1, #0]
 800400c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800400e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004010:	2b01      	cmp	r3, #1
 8004012:	d10c      	bne.n	800402e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004016:	2b00      	cmp	r3, #0
 8004018:	d104      	bne.n	8004024 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800401a:	2100      	movs	r1, #0
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 f965 	bl	80042ec <USB_SetDevSpeed>
 8004022:	e008      	b.n	8004036 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004024:	2101      	movs	r1, #1
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f960 	bl	80042ec <USB_SetDevSpeed>
 800402c:	e003      	b.n	8004036 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800402e:	2103      	movs	r1, #3
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 f95b 	bl	80042ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004036:	2110      	movs	r1, #16
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 f8f3 	bl	8004224 <USB_FlushTxFifo>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d001      	beq.n	8004048 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 f91f 	bl	800428c <USB_FlushRxFifo>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d001      	beq.n	8004058 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800405e:	461a      	mov	r2, r3
 8004060:	2300      	movs	r3, #0
 8004062:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800406a:	461a      	mov	r2, r3
 800406c:	2300      	movs	r3, #0
 800406e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004076:	461a      	mov	r2, r3
 8004078:	2300      	movs	r3, #0
 800407a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800407c:	2300      	movs	r3, #0
 800407e:	613b      	str	r3, [r7, #16]
 8004080:	e043      	b.n	800410a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	015a      	lsls	r2, r3, #5
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	4413      	add	r3, r2
 800408a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004094:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004098:	d118      	bne.n	80040cc <USB_DevInit+0x164>
    {
      if (i == 0U)
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d10a      	bne.n	80040b6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	015a      	lsls	r2, r3, #5
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	4413      	add	r3, r2
 80040a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ac:	461a      	mov	r2, r3
 80040ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80040b2:	6013      	str	r3, [r2, #0]
 80040b4:	e013      	b.n	80040de <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	015a      	lsls	r2, r3, #5
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	4413      	add	r3, r2
 80040be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040c2:	461a      	mov	r2, r3
 80040c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80040c8:	6013      	str	r3, [r2, #0]
 80040ca:	e008      	b.n	80040de <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	015a      	lsls	r2, r3, #5
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	4413      	add	r3, r2
 80040d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040d8:	461a      	mov	r2, r3
 80040da:	2300      	movs	r3, #0
 80040dc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	015a      	lsls	r2, r3, #5
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	4413      	add	r3, r2
 80040e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ea:	461a      	mov	r2, r3
 80040ec:	2300      	movs	r3, #0
 80040ee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	015a      	lsls	r2, r3, #5
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	4413      	add	r3, r2
 80040f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040fc:	461a      	mov	r2, r3
 80040fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004102:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	3301      	adds	r3, #1
 8004108:	613b      	str	r3, [r7, #16]
 800410a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	429a      	cmp	r2, r3
 8004110:	d3b7      	bcc.n	8004082 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004112:	2300      	movs	r3, #0
 8004114:	613b      	str	r3, [r7, #16]
 8004116:	e043      	b.n	80041a0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	015a      	lsls	r2, r3, #5
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	4413      	add	r3, r2
 8004120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800412a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800412e:	d118      	bne.n	8004162 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10a      	bne.n	800414c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	015a      	lsls	r2, r3, #5
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	4413      	add	r3, r2
 800413e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004142:	461a      	mov	r2, r3
 8004144:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004148:	6013      	str	r3, [r2, #0]
 800414a:	e013      	b.n	8004174 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	015a      	lsls	r2, r3, #5
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	4413      	add	r3, r2
 8004154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004158:	461a      	mov	r2, r3
 800415a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800415e:	6013      	str	r3, [r2, #0]
 8004160:	e008      	b.n	8004174 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	015a      	lsls	r2, r3, #5
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	4413      	add	r3, r2
 800416a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800416e:	461a      	mov	r2, r3
 8004170:	2300      	movs	r3, #0
 8004172:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	015a      	lsls	r2, r3, #5
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	4413      	add	r3, r2
 800417c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004180:	461a      	mov	r2, r3
 8004182:	2300      	movs	r3, #0
 8004184:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	015a      	lsls	r2, r3, #5
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	4413      	add	r3, r2
 800418e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004192:	461a      	mov	r2, r3
 8004194:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004198:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	3301      	adds	r3, #1
 800419e:	613b      	str	r3, [r7, #16]
 80041a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d3b7      	bcc.n	8004118 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041ba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80041c8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80041ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d105      	bne.n	80041dc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	f043 0210 	orr.w	r2, r3, #16
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	699a      	ldr	r2, [r3, #24]
 80041e0:	4b0f      	ldr	r3, [pc, #60]	; (8004220 <USB_DevInit+0x2b8>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80041e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d005      	beq.n	80041fa <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	f043 0208 	orr.w	r2, r3, #8
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80041fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d107      	bne.n	8004210 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004208:	f043 0304 	orr.w	r3, r3, #4
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004210:	7dfb      	ldrb	r3, [r7, #23]
}
 8004212:	4618      	mov	r0, r3
 8004214:	3718      	adds	r7, #24
 8004216:	46bd      	mov	sp, r7
 8004218:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800421c:	b004      	add	sp, #16
 800421e:	4770      	bx	lr
 8004220:	803c3800 	.word	0x803c3800

08004224 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800422e:	2300      	movs	r3, #0
 8004230:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	3301      	adds	r3, #1
 8004236:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	4a13      	ldr	r2, [pc, #76]	; (8004288 <USB_FlushTxFifo+0x64>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d901      	bls.n	8004244 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e01b      	b.n	800427c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	2b00      	cmp	r3, #0
 800424a:	daf2      	bge.n	8004232 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800424c:	2300      	movs	r3, #0
 800424e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	019b      	lsls	r3, r3, #6
 8004254:	f043 0220 	orr.w	r2, r3, #32
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	3301      	adds	r3, #1
 8004260:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	4a08      	ldr	r2, [pc, #32]	; (8004288 <USB_FlushTxFifo+0x64>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d901      	bls.n	800426e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e006      	b.n	800427c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	f003 0320 	and.w	r3, r3, #32
 8004276:	2b20      	cmp	r3, #32
 8004278:	d0f0      	beq.n	800425c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3714      	adds	r7, #20
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr
 8004288:	00030d40 	.word	0x00030d40

0800428c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004294:	2300      	movs	r3, #0
 8004296:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	3301      	adds	r3, #1
 800429c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	4a11      	ldr	r2, [pc, #68]	; (80042e8 <USB_FlushRxFifo+0x5c>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d901      	bls.n	80042aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e018      	b.n	80042dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	daf2      	bge.n	8004298 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80042b2:	2300      	movs	r3, #0
 80042b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2210      	movs	r2, #16
 80042ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	3301      	adds	r3, #1
 80042c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	4a08      	ldr	r2, [pc, #32]	; (80042e8 <USB_FlushRxFifo+0x5c>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d901      	bls.n	80042ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e006      	b.n	80042dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	f003 0310 	and.w	r3, r3, #16
 80042d6:	2b10      	cmp	r3, #16
 80042d8:	d0f0      	beq.n	80042bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3714      	adds	r7, #20
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr
 80042e8:	00030d40 	.word	0x00030d40

080042ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b085      	sub	sp, #20
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	460b      	mov	r3, r1
 80042f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	78fb      	ldrb	r3, [r7, #3]
 8004306:	68f9      	ldr	r1, [r7, #12]
 8004308:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800430c:	4313      	orrs	r3, r2
 800430e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3714      	adds	r7, #20
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800431e:	b480      	push	{r7}
 8004320:	b087      	sub	sp, #28
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f003 0306 	and.w	r3, r3, #6
 8004336:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d102      	bne.n	8004344 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800433e:	2300      	movs	r3, #0
 8004340:	75fb      	strb	r3, [r7, #23]
 8004342:	e00a      	b.n	800435a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2b02      	cmp	r3, #2
 8004348:	d002      	beq.n	8004350 <USB_GetDevSpeed+0x32>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2b06      	cmp	r3, #6
 800434e:	d102      	bne.n	8004356 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004350:	2302      	movs	r3, #2
 8004352:	75fb      	strb	r3, [r7, #23]
 8004354:	e001      	b.n	800435a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004356:	230f      	movs	r3, #15
 8004358:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800435a:	7dfb      	ldrb	r3, [r7, #23]
}
 800435c:	4618      	mov	r0, r3
 800435e:	371c      	adds	r7, #28
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	785b      	ldrb	r3, [r3, #1]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d13a      	bne.n	80043fa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800438a:	69da      	ldr	r2, [r3, #28]
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	f003 030f 	and.w	r3, r3, #15
 8004394:	2101      	movs	r1, #1
 8004396:	fa01 f303 	lsl.w	r3, r1, r3
 800439a:	b29b      	uxth	r3, r3
 800439c:	68f9      	ldr	r1, [r7, #12]
 800439e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043a2:	4313      	orrs	r3, r2
 80043a4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	015a      	lsls	r2, r3, #5
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	4413      	add	r3, r2
 80043ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d155      	bne.n	8004468 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	015a      	lsls	r2, r3, #5
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	4413      	add	r3, r2
 80043c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	791b      	ldrb	r3, [r3, #4]
 80043d6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80043d8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	059b      	lsls	r3, r3, #22
 80043de:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80043e0:	4313      	orrs	r3, r2
 80043e2:	68ba      	ldr	r2, [r7, #8]
 80043e4:	0151      	lsls	r1, r2, #5
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	440a      	add	r2, r1
 80043ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043f6:	6013      	str	r3, [r2, #0]
 80043f8:	e036      	b.n	8004468 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004400:	69da      	ldr	r2, [r3, #28]
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	f003 030f 	and.w	r3, r3, #15
 800440a:	2101      	movs	r1, #1
 800440c:	fa01 f303 	lsl.w	r3, r1, r3
 8004410:	041b      	lsls	r3, r3, #16
 8004412:	68f9      	ldr	r1, [r7, #12]
 8004414:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004418:	4313      	orrs	r3, r2
 800441a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	015a      	lsls	r2, r3, #5
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	4413      	add	r3, r2
 8004424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d11a      	bne.n	8004468 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	015a      	lsls	r2, r3, #5
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	4413      	add	r3, r2
 800443a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	791b      	ldrb	r3, [r3, #4]
 800444c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800444e:	430b      	orrs	r3, r1
 8004450:	4313      	orrs	r3, r2
 8004452:	68ba      	ldr	r2, [r7, #8]
 8004454:	0151      	lsls	r1, r2, #5
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	440a      	add	r2, r1
 800445a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800445e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004462:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004466:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3714      	adds	r7, #20
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
	...

08004478 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	785b      	ldrb	r3, [r3, #1]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d161      	bne.n	8004558 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	015a      	lsls	r2, r3, #5
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	4413      	add	r3, r2
 800449c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044aa:	d11f      	bne.n	80044ec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	015a      	lsls	r2, r3, #5
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	4413      	add	r3, r2
 80044b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	0151      	lsls	r1, r2, #5
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	440a      	add	r2, r1
 80044c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80044ca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	015a      	lsls	r2, r3, #5
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	4413      	add	r3, r2
 80044d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68ba      	ldr	r2, [r7, #8]
 80044dc:	0151      	lsls	r1, r2, #5
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	440a      	add	r2, r1
 80044e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	f003 030f 	and.w	r3, r3, #15
 80044fc:	2101      	movs	r1, #1
 80044fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004502:	b29b      	uxth	r3, r3
 8004504:	43db      	mvns	r3, r3
 8004506:	68f9      	ldr	r1, [r7, #12]
 8004508:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800450c:	4013      	ands	r3, r2
 800450e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004516:	69da      	ldr	r2, [r3, #28]
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	f003 030f 	and.w	r3, r3, #15
 8004520:	2101      	movs	r1, #1
 8004522:	fa01 f303 	lsl.w	r3, r1, r3
 8004526:	b29b      	uxth	r3, r3
 8004528:	43db      	mvns	r3, r3
 800452a:	68f9      	ldr	r1, [r7, #12]
 800452c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004530:	4013      	ands	r3, r2
 8004532:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	015a      	lsls	r2, r3, #5
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	4413      	add	r3, r2
 800453c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	0159      	lsls	r1, r3, #5
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	440b      	add	r3, r1
 800454a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800454e:	4619      	mov	r1, r3
 8004550:	4b35      	ldr	r3, [pc, #212]	; (8004628 <USB_DeactivateEndpoint+0x1b0>)
 8004552:	4013      	ands	r3, r2
 8004554:	600b      	str	r3, [r1, #0]
 8004556:	e060      	b.n	800461a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	015a      	lsls	r2, r3, #5
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	4413      	add	r3, r2
 8004560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800456a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800456e:	d11f      	bne.n	80045b0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	015a      	lsls	r2, r3, #5
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	4413      	add	r3, r2
 8004578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68ba      	ldr	r2, [r7, #8]
 8004580:	0151      	lsls	r1, r2, #5
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	440a      	add	r2, r1
 8004586:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800458a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800458e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	015a      	lsls	r2, r3, #5
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	4413      	add	r3, r2
 8004598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	0151      	lsls	r1, r2, #5
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	440a      	add	r2, r1
 80045a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80045ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	f003 030f 	and.w	r3, r3, #15
 80045c0:	2101      	movs	r1, #1
 80045c2:	fa01 f303 	lsl.w	r3, r1, r3
 80045c6:	041b      	lsls	r3, r3, #16
 80045c8:	43db      	mvns	r3, r3
 80045ca:	68f9      	ldr	r1, [r7, #12]
 80045cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045d0:	4013      	ands	r3, r2
 80045d2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045da:	69da      	ldr	r2, [r3, #28]
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	f003 030f 	and.w	r3, r3, #15
 80045e4:	2101      	movs	r1, #1
 80045e6:	fa01 f303 	lsl.w	r3, r1, r3
 80045ea:	041b      	lsls	r3, r3, #16
 80045ec:	43db      	mvns	r3, r3
 80045ee:	68f9      	ldr	r1, [r7, #12]
 80045f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045f4:	4013      	ands	r3, r2
 80045f6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	015a      	lsls	r2, r3, #5
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	4413      	add	r3, r2
 8004600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	0159      	lsls	r1, r3, #5
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	440b      	add	r3, r1
 800460e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004612:	4619      	mov	r1, r3
 8004614:	4b05      	ldr	r3, [pc, #20]	; (800462c <USB_DeactivateEndpoint+0x1b4>)
 8004616:	4013      	ands	r3, r2
 8004618:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800461a:	2300      	movs	r3, #0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3714      	adds	r7, #20
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr
 8004628:	ec337800 	.word	0xec337800
 800462c:	eff37800 	.word	0xeff37800

08004630 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b08a      	sub	sp, #40	; 0x28
 8004634:	af02      	add	r7, sp, #8
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	4613      	mov	r3, r2
 800463c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	785b      	ldrb	r3, [r3, #1]
 800464c:	2b01      	cmp	r3, #1
 800464e:	f040 815c 	bne.w	800490a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d132      	bne.n	80046c0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	015a      	lsls	r2, r3, #5
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	4413      	add	r3, r2
 8004662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	0151      	lsls	r1, r2, #5
 800466c:	69fa      	ldr	r2, [r7, #28]
 800466e:	440a      	add	r2, r1
 8004670:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004674:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004678:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800467c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	015a      	lsls	r2, r3, #5
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	4413      	add	r3, r2
 8004686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	69ba      	ldr	r2, [r7, #24]
 800468e:	0151      	lsls	r1, r2, #5
 8004690:	69fa      	ldr	r2, [r7, #28]
 8004692:	440a      	add	r2, r1
 8004694:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004698:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800469c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	015a      	lsls	r2, r3, #5
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	4413      	add	r3, r2
 80046a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	69ba      	ldr	r2, [r7, #24]
 80046ae:	0151      	lsls	r1, r2, #5
 80046b0:	69fa      	ldr	r2, [r7, #28]
 80046b2:	440a      	add	r2, r1
 80046b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046b8:	0cdb      	lsrs	r3, r3, #19
 80046ba:	04db      	lsls	r3, r3, #19
 80046bc:	6113      	str	r3, [r2, #16]
 80046be:	e074      	b.n	80047aa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	015a      	lsls	r2, r3, #5
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	4413      	add	r3, r2
 80046c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	69ba      	ldr	r2, [r7, #24]
 80046d0:	0151      	lsls	r1, r2, #5
 80046d2:	69fa      	ldr	r2, [r7, #28]
 80046d4:	440a      	add	r2, r1
 80046d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046da:	0cdb      	lsrs	r3, r3, #19
 80046dc:	04db      	lsls	r3, r3, #19
 80046de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	015a      	lsls	r2, r3, #5
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	4413      	add	r3, r2
 80046e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	69ba      	ldr	r2, [r7, #24]
 80046f0:	0151      	lsls	r1, r2, #5
 80046f2:	69fa      	ldr	r2, [r7, #28]
 80046f4:	440a      	add	r2, r1
 80046f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80046fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004702:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	015a      	lsls	r2, r3, #5
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	4413      	add	r3, r2
 800470c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004710:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	6999      	ldr	r1, [r3, #24]
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	440b      	add	r3, r1
 800471c:	1e59      	subs	r1, r3, #1
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	fbb1 f3f3 	udiv	r3, r1, r3
 8004726:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004728:	4b9d      	ldr	r3, [pc, #628]	; (80049a0 <USB_EPStartXfer+0x370>)
 800472a:	400b      	ands	r3, r1
 800472c:	69b9      	ldr	r1, [r7, #24]
 800472e:	0148      	lsls	r0, r1, #5
 8004730:	69f9      	ldr	r1, [r7, #28]
 8004732:	4401      	add	r1, r0
 8004734:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004738:	4313      	orrs	r3, r2
 800473a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	015a      	lsls	r2, r3, #5
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	4413      	add	r3, r2
 8004744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004748:	691a      	ldr	r2, [r3, #16]
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004752:	69b9      	ldr	r1, [r7, #24]
 8004754:	0148      	lsls	r0, r1, #5
 8004756:	69f9      	ldr	r1, [r7, #28]
 8004758:	4401      	add	r1, r0
 800475a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800475e:	4313      	orrs	r3, r2
 8004760:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	791b      	ldrb	r3, [r3, #4]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d11f      	bne.n	80047aa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	015a      	lsls	r2, r3, #5
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	4413      	add	r3, r2
 8004772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	69ba      	ldr	r2, [r7, #24]
 800477a:	0151      	lsls	r1, r2, #5
 800477c:	69fa      	ldr	r2, [r7, #28]
 800477e:	440a      	add	r2, r1
 8004780:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004784:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004788:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	015a      	lsls	r2, r3, #5
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	4413      	add	r3, r2
 8004792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	69ba      	ldr	r2, [r7, #24]
 800479a:	0151      	lsls	r1, r2, #5
 800479c:	69fa      	ldr	r2, [r7, #28]
 800479e:	440a      	add	r2, r1
 80047a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80047a8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80047aa:	79fb      	ldrb	r3, [r7, #7]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d14b      	bne.n	8004848 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	695b      	ldr	r3, [r3, #20]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d009      	beq.n	80047cc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	015a      	lsls	r2, r3, #5
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	4413      	add	r3, r2
 80047c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c4:	461a      	mov	r2, r3
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	791b      	ldrb	r3, [r3, #4]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d128      	bne.n	8004826 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d110      	bne.n	8004806 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	015a      	lsls	r2, r3, #5
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	4413      	add	r3, r2
 80047ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	69ba      	ldr	r2, [r7, #24]
 80047f4:	0151      	lsls	r1, r2, #5
 80047f6:	69fa      	ldr	r2, [r7, #28]
 80047f8:	440a      	add	r2, r1
 80047fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004802:	6013      	str	r3, [r2, #0]
 8004804:	e00f      	b.n	8004826 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	015a      	lsls	r2, r3, #5
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	4413      	add	r3, r2
 800480e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	69ba      	ldr	r2, [r7, #24]
 8004816:	0151      	lsls	r1, r2, #5
 8004818:	69fa      	ldr	r2, [r7, #28]
 800481a:	440a      	add	r2, r1
 800481c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004824:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	015a      	lsls	r2, r3, #5
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	4413      	add	r3, r2
 800482e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	69ba      	ldr	r2, [r7, #24]
 8004836:	0151      	lsls	r1, r2, #5
 8004838:	69fa      	ldr	r2, [r7, #28]
 800483a:	440a      	add	r2, r1
 800483c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004840:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004844:	6013      	str	r3, [r2, #0]
 8004846:	e133      	b.n	8004ab0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	015a      	lsls	r2, r3, #5
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	4413      	add	r3, r2
 8004850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	69ba      	ldr	r2, [r7, #24]
 8004858:	0151      	lsls	r1, r2, #5
 800485a:	69fa      	ldr	r2, [r7, #28]
 800485c:	440a      	add	r2, r1
 800485e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004862:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004866:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	791b      	ldrb	r3, [r3, #4]
 800486c:	2b01      	cmp	r3, #1
 800486e:	d015      	beq.n	800489c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	2b00      	cmp	r3, #0
 8004876:	f000 811b 	beq.w	8004ab0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004880:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	f003 030f 	and.w	r3, r3, #15
 800488a:	2101      	movs	r1, #1
 800488c:	fa01 f303 	lsl.w	r3, r1, r3
 8004890:	69f9      	ldr	r1, [r7, #28]
 8004892:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004896:	4313      	orrs	r3, r2
 8004898:	634b      	str	r3, [r1, #52]	; 0x34
 800489a:	e109      	b.n	8004ab0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d110      	bne.n	80048ce <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	015a      	lsls	r2, r3, #5
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	4413      	add	r3, r2
 80048b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	69ba      	ldr	r2, [r7, #24]
 80048bc:	0151      	lsls	r1, r2, #5
 80048be:	69fa      	ldr	r2, [r7, #28]
 80048c0:	440a      	add	r2, r1
 80048c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80048ca:	6013      	str	r3, [r2, #0]
 80048cc:	e00f      	b.n	80048ee <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	015a      	lsls	r2, r3, #5
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	4413      	add	r3, r2
 80048d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	69ba      	ldr	r2, [r7, #24]
 80048de:	0151      	lsls	r1, r2, #5
 80048e0:	69fa      	ldr	r2, [r7, #28]
 80048e2:	440a      	add	r2, r1
 80048e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ec:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	6919      	ldr	r1, [r3, #16]
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	781a      	ldrb	r2, [r3, #0]
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	b298      	uxth	r0, r3
 80048fc:	79fb      	ldrb	r3, [r7, #7]
 80048fe:	9300      	str	r3, [sp, #0]
 8004900:	4603      	mov	r3, r0
 8004902:	68f8      	ldr	r0, [r7, #12]
 8004904:	f000 fade 	bl	8004ec4 <USB_WritePacket>
 8004908:	e0d2      	b.n	8004ab0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	015a      	lsls	r2, r3, #5
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	4413      	add	r3, r2
 8004912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	0151      	lsls	r1, r2, #5
 800491c:	69fa      	ldr	r2, [r7, #28]
 800491e:	440a      	add	r2, r1
 8004920:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004924:	0cdb      	lsrs	r3, r3, #19
 8004926:	04db      	lsls	r3, r3, #19
 8004928:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	015a      	lsls	r2, r3, #5
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	4413      	add	r3, r2
 8004932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	0151      	lsls	r1, r2, #5
 800493c:	69fa      	ldr	r2, [r7, #28]
 800493e:	440a      	add	r2, r1
 8004940:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004944:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004948:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800494c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d126      	bne.n	80049a4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	015a      	lsls	r2, r3, #5
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	4413      	add	r3, r2
 800495e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004962:	691a      	ldr	r2, [r3, #16]
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800496c:	69b9      	ldr	r1, [r7, #24]
 800496e:	0148      	lsls	r0, r1, #5
 8004970:	69f9      	ldr	r1, [r7, #28]
 8004972:	4401      	add	r1, r0
 8004974:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004978:	4313      	orrs	r3, r2
 800497a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	015a      	lsls	r2, r3, #5
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	4413      	add	r3, r2
 8004984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	69ba      	ldr	r2, [r7, #24]
 800498c:	0151      	lsls	r1, r2, #5
 800498e:	69fa      	ldr	r2, [r7, #28]
 8004990:	440a      	add	r2, r1
 8004992:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004996:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800499a:	6113      	str	r3, [r2, #16]
 800499c:	e03a      	b.n	8004a14 <USB_EPStartXfer+0x3e4>
 800499e:	bf00      	nop
 80049a0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	699a      	ldr	r2, [r3, #24]
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	4413      	add	r3, r2
 80049ae:	1e5a      	subs	r2, r3, #1
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	8afa      	ldrh	r2, [r7, #22]
 80049c0:	fb03 f202 	mul.w	r2, r3, r2
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	015a      	lsls	r2, r3, #5
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	4413      	add	r3, r2
 80049d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d4:	691a      	ldr	r2, [r3, #16]
 80049d6:	8afb      	ldrh	r3, [r7, #22]
 80049d8:	04d9      	lsls	r1, r3, #19
 80049da:	4b38      	ldr	r3, [pc, #224]	; (8004abc <USB_EPStartXfer+0x48c>)
 80049dc:	400b      	ands	r3, r1
 80049de:	69b9      	ldr	r1, [r7, #24]
 80049e0:	0148      	lsls	r0, r1, #5
 80049e2:	69f9      	ldr	r1, [r7, #28]
 80049e4:	4401      	add	r1, r0
 80049e6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80049ea:	4313      	orrs	r3, r2
 80049ec:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	015a      	lsls	r2, r3, #5
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	4413      	add	r3, r2
 80049f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049fa:	691a      	ldr	r2, [r3, #16]
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	69db      	ldr	r3, [r3, #28]
 8004a00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a04:	69b9      	ldr	r1, [r7, #24]
 8004a06:	0148      	lsls	r0, r1, #5
 8004a08:	69f9      	ldr	r1, [r7, #28]
 8004a0a:	4401      	add	r1, r0
 8004a0c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004a10:	4313      	orrs	r3, r2
 8004a12:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004a14:	79fb      	ldrb	r3, [r7, #7]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d10d      	bne.n	8004a36 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d009      	beq.n	8004a36 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	6919      	ldr	r1, [r3, #16]
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	015a      	lsls	r2, r3, #5
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a32:	460a      	mov	r2, r1
 8004a34:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	791b      	ldrb	r3, [r3, #4]
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d128      	bne.n	8004a90 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d110      	bne.n	8004a70 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	015a      	lsls	r2, r3, #5
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	4413      	add	r3, r2
 8004a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	0151      	lsls	r1, r2, #5
 8004a60:	69fa      	ldr	r2, [r7, #28]
 8004a62:	440a      	add	r2, r1
 8004a64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a68:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a6c:	6013      	str	r3, [r2, #0]
 8004a6e:	e00f      	b.n	8004a90 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	015a      	lsls	r2, r3, #5
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	4413      	add	r3, r2
 8004a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	69ba      	ldr	r2, [r7, #24]
 8004a80:	0151      	lsls	r1, r2, #5
 8004a82:	69fa      	ldr	r2, [r7, #28]
 8004a84:	440a      	add	r2, r1
 8004a86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a8e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	015a      	lsls	r2, r3, #5
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	4413      	add	r3, r2
 8004a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	69ba      	ldr	r2, [r7, #24]
 8004aa0:	0151      	lsls	r1, r2, #5
 8004aa2:	69fa      	ldr	r2, [r7, #28]
 8004aa4:	440a      	add	r2, r1
 8004aa6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004aaa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004aae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3720      	adds	r7, #32
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	1ff80000 	.word	0x1ff80000

08004ac0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b087      	sub	sp, #28
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	4613      	mov	r3, r2
 8004acc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	785b      	ldrb	r3, [r3, #1]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	f040 80ce 	bne.w	8004c7e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	699b      	ldr	r3, [r3, #24]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d132      	bne.n	8004b50 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	015a      	lsls	r2, r3, #5
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	4413      	add	r3, r2
 8004af2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	0151      	lsls	r1, r2, #5
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	440a      	add	r2, r1
 8004b00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b04:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b08:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	015a      	lsls	r2, r3, #5
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	4413      	add	r3, r2
 8004b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	0151      	lsls	r1, r2, #5
 8004b20:	697a      	ldr	r2, [r7, #20]
 8004b22:	440a      	add	r2, r1
 8004b24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	015a      	lsls	r2, r3, #5
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	4413      	add	r3, r2
 8004b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	693a      	ldr	r2, [r7, #16]
 8004b3e:	0151      	lsls	r1, r2, #5
 8004b40:	697a      	ldr	r2, [r7, #20]
 8004b42:	440a      	add	r2, r1
 8004b44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b48:	0cdb      	lsrs	r3, r3, #19
 8004b4a:	04db      	lsls	r3, r3, #19
 8004b4c:	6113      	str	r3, [r2, #16]
 8004b4e:	e04e      	b.n	8004bee <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	015a      	lsls	r2, r3, #5
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	4413      	add	r3, r2
 8004b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	0151      	lsls	r1, r2, #5
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	440a      	add	r2, r1
 8004b66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b6a:	0cdb      	lsrs	r3, r3, #19
 8004b6c:	04db      	lsls	r3, r3, #19
 8004b6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	015a      	lsls	r2, r3, #5
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	4413      	add	r3, r2
 8004b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	693a      	ldr	r2, [r7, #16]
 8004b80:	0151      	lsls	r1, r2, #5
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	440a      	add	r2, r1
 8004b86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b8a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b8e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b92:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	699a      	ldr	r2, [r3, #24]
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d903      	bls.n	8004ba8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	68da      	ldr	r2, [r3, #12]
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	015a      	lsls	r2, r3, #5
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	4413      	add	r3, r2
 8004bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	0151      	lsls	r1, r2, #5
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	440a      	add	r2, r1
 8004bbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bc2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004bc6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	015a      	lsls	r2, r3, #5
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	4413      	add	r3, r2
 8004bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd4:	691a      	ldr	r2, [r3, #16]
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bde:	6939      	ldr	r1, [r7, #16]
 8004be0:	0148      	lsls	r0, r1, #5
 8004be2:	6979      	ldr	r1, [r7, #20]
 8004be4:	4401      	add	r1, r0
 8004be6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004bea:	4313      	orrs	r3, r2
 8004bec:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004bee:	79fb      	ldrb	r3, [r7, #7]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d11e      	bne.n	8004c32 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	695b      	ldr	r3, [r3, #20]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d009      	beq.n	8004c10 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	015a      	lsls	r2, r3, #5
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	4413      	add	r3, r2
 8004c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c08:	461a      	mov	r2, r3
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	015a      	lsls	r2, r3, #5
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	4413      	add	r3, r2
 8004c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	0151      	lsls	r1, r2, #5
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	440a      	add	r2, r1
 8004c26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c2a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c2e:	6013      	str	r3, [r2, #0]
 8004c30:	e097      	b.n	8004d62 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	015a      	lsls	r2, r3, #5
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	4413      	add	r3, r2
 8004c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	693a      	ldr	r2, [r7, #16]
 8004c42:	0151      	lsls	r1, r2, #5
 8004c44:	697a      	ldr	r2, [r7, #20]
 8004c46:	440a      	add	r2, r1
 8004c48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c4c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c50:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	f000 8083 	beq.w	8004d62 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	f003 030f 	and.w	r3, r3, #15
 8004c6c:	2101      	movs	r1, #1
 8004c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c72:	6979      	ldr	r1, [r7, #20]
 8004c74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	634b      	str	r3, [r1, #52]	; 0x34
 8004c7c:	e071      	b.n	8004d62 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	015a      	lsls	r2, r3, #5
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	4413      	add	r3, r2
 8004c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	0151      	lsls	r1, r2, #5
 8004c90:	697a      	ldr	r2, [r7, #20]
 8004c92:	440a      	add	r2, r1
 8004c94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c98:	0cdb      	lsrs	r3, r3, #19
 8004c9a:	04db      	lsls	r3, r3, #19
 8004c9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	015a      	lsls	r2, r3, #5
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	0151      	lsls	r1, r2, #5
 8004cb0:	697a      	ldr	r2, [r7, #20]
 8004cb2:	440a      	add	r2, r1
 8004cb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cb8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004cbc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004cc0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d003      	beq.n	8004cd2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	68da      	ldr	r2, [r3, #12]
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	68da      	ldr	r2, [r3, #12]
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	015a      	lsls	r2, r3, #5
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	0151      	lsls	r1, r2, #5
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	440a      	add	r2, r1
 8004cf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cf4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004cf8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	015a      	lsls	r2, r3, #5
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	4413      	add	r3, r2
 8004d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d06:	691a      	ldr	r2, [r3, #16]
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	69db      	ldr	r3, [r3, #28]
 8004d0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d10:	6939      	ldr	r1, [r7, #16]
 8004d12:	0148      	lsls	r0, r1, #5
 8004d14:	6979      	ldr	r1, [r7, #20]
 8004d16:	4401      	add	r1, r0
 8004d18:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004d20:	79fb      	ldrb	r3, [r7, #7]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d10d      	bne.n	8004d42 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d009      	beq.n	8004d42 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	6919      	ldr	r1, [r3, #16]
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	015a      	lsls	r2, r3, #5
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	4413      	add	r3, r2
 8004d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d3e:	460a      	mov	r2, r1
 8004d40:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	015a      	lsls	r2, r3, #5
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	4413      	add	r3, r2
 8004d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	0151      	lsls	r1, r2, #5
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	440a      	add	r2, r1
 8004d58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d5c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d60:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	371c      	adds	r7, #28
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b087      	sub	sp, #28
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	785b      	ldrb	r3, [r3, #1]
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d14a      	bne.n	8004e24 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	015a      	lsls	r2, r3, #5
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	4413      	add	r3, r2
 8004d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004da2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004da6:	f040 8086 	bne.w	8004eb6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	015a      	lsls	r2, r3, #5
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	4413      	add	r3, r2
 8004db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	7812      	ldrb	r2, [r2, #0]
 8004dbe:	0151      	lsls	r1, r2, #5
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	440a      	add	r2, r1
 8004dc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dc8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004dcc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	015a      	lsls	r2, r3, #5
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	683a      	ldr	r2, [r7, #0]
 8004de0:	7812      	ldrb	r2, [r2, #0]
 8004de2:	0151      	lsls	r1, r2, #5
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	440a      	add	r2, r1
 8004de8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004df0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	3301      	adds	r3, #1
 8004df6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f242 7210 	movw	r2, #10000	; 0x2710
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d902      	bls.n	8004e08 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	75fb      	strb	r3, [r7, #23]
          break;
 8004e06:	e056      	b.n	8004eb6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	015a      	lsls	r2, r3, #5
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	4413      	add	r3, r2
 8004e12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e20:	d0e7      	beq.n	8004df2 <USB_EPStopXfer+0x82>
 8004e22:	e048      	b.n	8004eb6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	015a      	lsls	r2, r3, #5
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e3c:	d13b      	bne.n	8004eb6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	015a      	lsls	r2, r3, #5
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	4413      	add	r3, r2
 8004e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	683a      	ldr	r2, [r7, #0]
 8004e50:	7812      	ldrb	r2, [r2, #0]
 8004e52:	0151      	lsls	r1, r2, #5
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	440a      	add	r2, r1
 8004e58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e5c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e60:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	015a      	lsls	r2, r3, #5
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	683a      	ldr	r2, [r7, #0]
 8004e74:	7812      	ldrb	r2, [r2, #0]
 8004e76:	0151      	lsls	r1, r2, #5
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	440a      	add	r2, r1
 8004e7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e84:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	3301      	adds	r3, #1
 8004e8a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d902      	bls.n	8004e9c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	75fb      	strb	r3, [r7, #23]
          break;
 8004e9a:	e00c      	b.n	8004eb6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	015a      	lsls	r2, r3, #5
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004eb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004eb4:	d0e7      	beq.n	8004e86 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004eb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	371c      	adds	r7, #28
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b089      	sub	sp, #36	; 0x24
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	4611      	mov	r1, r2
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	71fb      	strb	r3, [r7, #7]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004ee2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d123      	bne.n	8004f32 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004eea:	88bb      	ldrh	r3, [r7, #4]
 8004eec:	3303      	adds	r3, #3
 8004eee:	089b      	lsrs	r3, r3, #2
 8004ef0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	61bb      	str	r3, [r7, #24]
 8004ef6:	e018      	b.n	8004f2a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004ef8:	79fb      	ldrb	r3, [r7, #7]
 8004efa:	031a      	lsls	r2, r3, #12
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	4413      	add	r3, r2
 8004f00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f04:	461a      	mov	r2, r3
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	3301      	adds	r3, #1
 8004f16:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	3301      	adds	r3, #1
 8004f22:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	3301      	adds	r3, #1
 8004f28:	61bb      	str	r3, [r7, #24]
 8004f2a:	69ba      	ldr	r2, [r7, #24]
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d3e2      	bcc.n	8004ef8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3724      	adds	r7, #36	; 0x24
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b08b      	sub	sp, #44	; 0x2c
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004f56:	88fb      	ldrh	r3, [r7, #6]
 8004f58:	089b      	lsrs	r3, r3, #2
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004f5e:	88fb      	ldrh	r3, [r7, #6]
 8004f60:	f003 0303 	and.w	r3, r3, #3
 8004f64:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004f66:	2300      	movs	r3, #0
 8004f68:	623b      	str	r3, [r7, #32]
 8004f6a:	e014      	b.n	8004f96 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f76:	601a      	str	r2, [r3, #0]
    pDest++;
 8004f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f80:	3301      	adds	r3, #1
 8004f82:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f86:	3301      	adds	r3, #1
 8004f88:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004f90:	6a3b      	ldr	r3, [r7, #32]
 8004f92:	3301      	adds	r3, #1
 8004f94:	623b      	str	r3, [r7, #32]
 8004f96:	6a3a      	ldr	r2, [r7, #32]
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d3e6      	bcc.n	8004f6c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004f9e:	8bfb      	ldrh	r3, [r7, #30]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d01e      	beq.n	8004fe2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fae:	461a      	mov	r2, r3
 8004fb0:	f107 0310 	add.w	r3, r7, #16
 8004fb4:	6812      	ldr	r2, [r2, #0]
 8004fb6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	6a3b      	ldr	r3, [r7, #32]
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	00db      	lsls	r3, r3, #3
 8004fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8004fc4:	b2da      	uxtb	r2, r3
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc8:	701a      	strb	r2, [r3, #0]
      i++;
 8004fca:	6a3b      	ldr	r3, [r7, #32]
 8004fcc:	3301      	adds	r3, #1
 8004fce:	623b      	str	r3, [r7, #32]
      pDest++;
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004fd6:	8bfb      	ldrh	r3, [r7, #30]
 8004fd8:	3b01      	subs	r3, #1
 8004fda:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004fdc:	8bfb      	ldrh	r3, [r7, #30]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1ea      	bne.n	8004fb8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	372c      	adds	r7, #44	; 0x2c
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	785b      	ldrb	r3, [r3, #1]
 8005008:	2b01      	cmp	r3, #1
 800500a:	d12c      	bne.n	8005066 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	015a      	lsls	r2, r3, #5
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	4413      	add	r3, r2
 8005014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2b00      	cmp	r3, #0
 800501c:	db12      	blt.n	8005044 <USB_EPSetStall+0x54>
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00f      	beq.n	8005044 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	015a      	lsls	r2, r3, #5
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	4413      	add	r3, r2
 800502c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68ba      	ldr	r2, [r7, #8]
 8005034:	0151      	lsls	r1, r2, #5
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	440a      	add	r2, r1
 800503a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800503e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005042:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	015a      	lsls	r2, r3, #5
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	4413      	add	r3, r2
 800504c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68ba      	ldr	r2, [r7, #8]
 8005054:	0151      	lsls	r1, r2, #5
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	440a      	add	r2, r1
 800505a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800505e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005062:	6013      	str	r3, [r2, #0]
 8005064:	e02b      	b.n	80050be <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	015a      	lsls	r2, r3, #5
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	4413      	add	r3, r2
 800506e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2b00      	cmp	r3, #0
 8005076:	db12      	blt.n	800509e <USB_EPSetStall+0xae>
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00f      	beq.n	800509e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	015a      	lsls	r2, r3, #5
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	4413      	add	r3, r2
 8005086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68ba      	ldr	r2, [r7, #8]
 800508e:	0151      	lsls	r1, r2, #5
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	440a      	add	r2, r1
 8005094:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005098:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800509c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	015a      	lsls	r2, r3, #5
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	4413      	add	r3, r2
 80050a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68ba      	ldr	r2, [r7, #8]
 80050ae:	0151      	lsls	r1, r2, #5
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	440a      	add	r2, r1
 80050b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80050bc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3714      	adds	r7, #20
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	785b      	ldrb	r3, [r3, #1]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d128      	bne.n	800513a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	015a      	lsls	r2, r3, #5
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	0151      	lsls	r1, r2, #5
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	440a      	add	r2, r1
 80050fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005102:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005106:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	791b      	ldrb	r3, [r3, #4]
 800510c:	2b03      	cmp	r3, #3
 800510e:	d003      	beq.n	8005118 <USB_EPClearStall+0x4c>
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	791b      	ldrb	r3, [r3, #4]
 8005114:	2b02      	cmp	r3, #2
 8005116:	d138      	bne.n	800518a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	015a      	lsls	r2, r3, #5
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	4413      	add	r3, r2
 8005120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68ba      	ldr	r2, [r7, #8]
 8005128:	0151      	lsls	r1, r2, #5
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	440a      	add	r2, r1
 800512e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005132:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005136:	6013      	str	r3, [r2, #0]
 8005138:	e027      	b.n	800518a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	015a      	lsls	r2, r3, #5
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	4413      	add	r3, r2
 8005142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68ba      	ldr	r2, [r7, #8]
 800514a:	0151      	lsls	r1, r2, #5
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	440a      	add	r2, r1
 8005150:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005154:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005158:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	791b      	ldrb	r3, [r3, #4]
 800515e:	2b03      	cmp	r3, #3
 8005160:	d003      	beq.n	800516a <USB_EPClearStall+0x9e>
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	791b      	ldrb	r3, [r3, #4]
 8005166:	2b02      	cmp	r3, #2
 8005168:	d10f      	bne.n	800518a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	015a      	lsls	r2, r3, #5
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	4413      	add	r3, r2
 8005172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68ba      	ldr	r2, [r7, #8]
 800517a:	0151      	lsls	r1, r2, #5
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	440a      	add	r2, r1
 8005180:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005188:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	3714      	adds	r7, #20
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	460b      	mov	r3, r1
 80051a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051b6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80051ba:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	78fb      	ldrb	r3, [r7, #3]
 80051c6:	011b      	lsls	r3, r3, #4
 80051c8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80051cc:	68f9      	ldr	r1, [r7, #12]
 80051ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051d2:	4313      	orrs	r3, r2
 80051d4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3714      	adds	r7, #20
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80051fe:	f023 0303 	bic.w	r3, r3, #3
 8005202:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005212:	f023 0302 	bic.w	r3, r3, #2
 8005216:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3714      	adds	r7, #20
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr

08005226 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005226:	b480      	push	{r7}
 8005228:	b085      	sub	sp, #20
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005240:	f023 0303 	bic.w	r3, r3, #3
 8005244:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005254:	f043 0302 	orr.w	r3, r3, #2
 8005258:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	3714      	adds	r7, #20
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005268:	b480      	push	{r7}
 800526a:	b085      	sub	sp, #20
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	695b      	ldr	r3, [r3, #20]
 8005274:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	4013      	ands	r3, r2
 800527e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005280:	68fb      	ldr	r3, [r7, #12]
}
 8005282:	4618      	mov	r0, r3
 8005284:	3714      	adds	r7, #20
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr

0800528e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800528e:	b480      	push	{r7}
 8005290:	b085      	sub	sp, #20
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052a0:	699b      	ldr	r3, [r3, #24]
 80052a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052aa:	69db      	ldr	r3, [r3, #28]
 80052ac:	68ba      	ldr	r2, [r7, #8]
 80052ae:	4013      	ands	r3, r2
 80052b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	0c1b      	lsrs	r3, r3, #16
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3714      	adds	r7, #20
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr

080052c2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80052c2:	b480      	push	{r7}
 80052c4:	b085      	sub	sp, #20
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052de:	69db      	ldr	r3, [r3, #28]
 80052e0:	68ba      	ldr	r2, [r7, #8]
 80052e2:	4013      	ands	r3, r2
 80052e4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	b29b      	uxth	r3, r3
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3714      	adds	r7, #20
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr

080052f6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80052f6:	b480      	push	{r7}
 80052f8:	b085      	sub	sp, #20
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
 80052fe:	460b      	mov	r3, r1
 8005300:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005306:	78fb      	ldrb	r3, [r7, #3]
 8005308:	015a      	lsls	r2, r3, #5
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	4413      	add	r3, r2
 800530e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	68ba      	ldr	r2, [r7, #8]
 8005320:	4013      	ands	r3, r2
 8005322:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005324:	68bb      	ldr	r3, [r7, #8]
}
 8005326:	4618      	mov	r0, r3
 8005328:	3714      	adds	r7, #20
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr

08005332 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005332:	b480      	push	{r7}
 8005334:	b087      	sub	sp, #28
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
 800533a:	460b      	mov	r3, r1
 800533c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005354:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005356:	78fb      	ldrb	r3, [r7, #3]
 8005358:	f003 030f 	and.w	r3, r3, #15
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	fa22 f303 	lsr.w	r3, r2, r3
 8005362:	01db      	lsls	r3, r3, #7
 8005364:	b2db      	uxtb	r3, r3
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	4313      	orrs	r3, r2
 800536a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800536c:	78fb      	ldrb	r3, [r7, #3]
 800536e:	015a      	lsls	r2, r3, #5
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	4413      	add	r3, r2
 8005374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	693a      	ldr	r2, [r7, #16]
 800537c:	4013      	ands	r3, r2
 800537e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005380:	68bb      	ldr	r3, [r7, #8]
}
 8005382:	4618      	mov	r0, r3
 8005384:	371c      	adds	r7, #28
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr

0800538e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800538e:	b480      	push	{r7}
 8005390:	b083      	sub	sp, #12
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	f003 0301 	and.w	r3, r3, #1
}
 800539e:	4618      	mov	r0, r3
 80053a0:	370c      	adds	r7, #12
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr

080053aa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80053aa:	b480      	push	{r7}
 80053ac:	b085      	sub	sp, #20
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053c4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80053c8:	f023 0307 	bic.w	r3, r3, #7
 80053cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3714      	adds	r7, #20
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b087      	sub	sp, #28
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	460b      	mov	r3, r1
 80053fa:	607a      	str	r2, [r7, #4]
 80053fc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	333c      	adds	r3, #60	; 0x3c
 8005406:	3304      	adds	r3, #4
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	4a26      	ldr	r2, [pc, #152]	; (80054a8 <USB_EP0_OutStart+0xb8>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d90a      	bls.n	800542a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005420:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005424:	d101      	bne.n	800542a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005426:	2300      	movs	r3, #0
 8005428:	e037      	b.n	800549a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005430:	461a      	mov	r2, r3
 8005432:	2300      	movs	r3, #0
 8005434:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	697a      	ldr	r2, [r7, #20]
 8005440:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005444:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005448:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005458:	f043 0318 	orr.w	r3, r3, #24
 800545c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800546c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005470:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005472:	7afb      	ldrb	r3, [r7, #11]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d10f      	bne.n	8005498 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800547e:	461a      	mov	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	697a      	ldr	r2, [r7, #20]
 800548e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005492:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005496:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	371c      	adds	r7, #28
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	4f54300a 	.word	0x4f54300a

080054ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054b4:	2300      	movs	r3, #0
 80054b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	3301      	adds	r3, #1
 80054bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	4a13      	ldr	r2, [pc, #76]	; (8005510 <USB_CoreReset+0x64>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d901      	bls.n	80054ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e01b      	b.n	8005502 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	daf2      	bge.n	80054b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80054d2:	2300      	movs	r3, #0
 80054d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	f043 0201 	orr.w	r2, r3, #1
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	3301      	adds	r3, #1
 80054e6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	4a09      	ldr	r2, [pc, #36]	; (8005510 <USB_CoreReset+0x64>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d901      	bls.n	80054f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e006      	b.n	8005502 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	f003 0301 	and.w	r3, r3, #1
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d0f0      	beq.n	80054e2 <USB_CoreReset+0x36>

  return HAL_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3714      	adds	r7, #20
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	00030d40 	.word	0x00030d40

08005514 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	460b      	mov	r3, r1
 800551e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005520:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005524:	f002 fcc8 	bl	8007eb8 <USBD_static_malloc>
 8005528:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d109      	bne.n	8005544 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	32b0      	adds	r2, #176	; 0xb0
 800553a:	2100      	movs	r1, #0
 800553c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005540:	2302      	movs	r3, #2
 8005542:	e0d4      	b.n	80056ee <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005544:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005548:	2100      	movs	r1, #0
 800554a:	68f8      	ldr	r0, [r7, #12]
 800554c:	f002 fd1c 	bl	8007f88 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	32b0      	adds	r2, #176	; 0xb0
 800555a:	68f9      	ldr	r1, [r7, #12]
 800555c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	32b0      	adds	r2, #176	; 0xb0
 800556a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	7c1b      	ldrb	r3, [r3, #16]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d138      	bne.n	80055ee <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800557c:	4b5e      	ldr	r3, [pc, #376]	; (80056f8 <USBD_CDC_Init+0x1e4>)
 800557e:	7819      	ldrb	r1, [r3, #0]
 8005580:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005584:	2202      	movs	r2, #2
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f002 fb25 	bl	8007bd6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800558c:	4b5a      	ldr	r3, [pc, #360]	; (80056f8 <USBD_CDC_Init+0x1e4>)
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	f003 020f 	and.w	r2, r3, #15
 8005594:	6879      	ldr	r1, [r7, #4]
 8005596:	4613      	mov	r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	4413      	add	r3, r2
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	440b      	add	r3, r1
 80055a0:	3324      	adds	r3, #36	; 0x24
 80055a2:	2201      	movs	r2, #1
 80055a4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80055a6:	4b55      	ldr	r3, [pc, #340]	; (80056fc <USBD_CDC_Init+0x1e8>)
 80055a8:	7819      	ldrb	r1, [r3, #0]
 80055aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055ae:	2202      	movs	r2, #2
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f002 fb10 	bl	8007bd6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80055b6:	4b51      	ldr	r3, [pc, #324]	; (80056fc <USBD_CDC_Init+0x1e8>)
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	f003 020f 	and.w	r2, r3, #15
 80055be:	6879      	ldr	r1, [r7, #4]
 80055c0:	4613      	mov	r3, r2
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	4413      	add	r3, r2
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	440b      	add	r3, r1
 80055ca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80055ce:	2201      	movs	r2, #1
 80055d0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80055d2:	4b4b      	ldr	r3, [pc, #300]	; (8005700 <USBD_CDC_Init+0x1ec>)
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	f003 020f 	and.w	r2, r3, #15
 80055da:	6879      	ldr	r1, [r7, #4]
 80055dc:	4613      	mov	r3, r2
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	4413      	add	r3, r2
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	440b      	add	r3, r1
 80055e6:	3326      	adds	r3, #38	; 0x26
 80055e8:	2210      	movs	r2, #16
 80055ea:	801a      	strh	r2, [r3, #0]
 80055ec:	e035      	b.n	800565a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80055ee:	4b42      	ldr	r3, [pc, #264]	; (80056f8 <USBD_CDC_Init+0x1e4>)
 80055f0:	7819      	ldrb	r1, [r3, #0]
 80055f2:	2340      	movs	r3, #64	; 0x40
 80055f4:	2202      	movs	r2, #2
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f002 faed 	bl	8007bd6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80055fc:	4b3e      	ldr	r3, [pc, #248]	; (80056f8 <USBD_CDC_Init+0x1e4>)
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	f003 020f 	and.w	r2, r3, #15
 8005604:	6879      	ldr	r1, [r7, #4]
 8005606:	4613      	mov	r3, r2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	4413      	add	r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	440b      	add	r3, r1
 8005610:	3324      	adds	r3, #36	; 0x24
 8005612:	2201      	movs	r2, #1
 8005614:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005616:	4b39      	ldr	r3, [pc, #228]	; (80056fc <USBD_CDC_Init+0x1e8>)
 8005618:	7819      	ldrb	r1, [r3, #0]
 800561a:	2340      	movs	r3, #64	; 0x40
 800561c:	2202      	movs	r2, #2
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f002 fad9 	bl	8007bd6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005624:	4b35      	ldr	r3, [pc, #212]	; (80056fc <USBD_CDC_Init+0x1e8>)
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	f003 020f 	and.w	r2, r3, #15
 800562c:	6879      	ldr	r1, [r7, #4]
 800562e:	4613      	mov	r3, r2
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	4413      	add	r3, r2
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	440b      	add	r3, r1
 8005638:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800563c:	2201      	movs	r2, #1
 800563e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005640:	4b2f      	ldr	r3, [pc, #188]	; (8005700 <USBD_CDC_Init+0x1ec>)
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	f003 020f 	and.w	r2, r3, #15
 8005648:	6879      	ldr	r1, [r7, #4]
 800564a:	4613      	mov	r3, r2
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	4413      	add	r3, r2
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	440b      	add	r3, r1
 8005654:	3326      	adds	r3, #38	; 0x26
 8005656:	2210      	movs	r2, #16
 8005658:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800565a:	4b29      	ldr	r3, [pc, #164]	; (8005700 <USBD_CDC_Init+0x1ec>)
 800565c:	7819      	ldrb	r1, [r3, #0]
 800565e:	2308      	movs	r3, #8
 8005660:	2203      	movs	r2, #3
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f002 fab7 	bl	8007bd6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005668:	4b25      	ldr	r3, [pc, #148]	; (8005700 <USBD_CDC_Init+0x1ec>)
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	f003 020f 	and.w	r2, r3, #15
 8005670:	6879      	ldr	r1, [r7, #4]
 8005672:	4613      	mov	r3, r2
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	4413      	add	r3, r2
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	440b      	add	r3, r1
 800567c:	3324      	adds	r3, #36	; 0x24
 800567e:	2201      	movs	r2, #1
 8005680:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	33b0      	adds	r3, #176	; 0xb0
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	4413      	add	r3, r2
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d101      	bne.n	80056bc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80056b8:	2302      	movs	r3, #2
 80056ba:	e018      	b.n	80056ee <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	7c1b      	ldrb	r3, [r3, #16]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d10a      	bne.n	80056da <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80056c4:	4b0d      	ldr	r3, [pc, #52]	; (80056fc <USBD_CDC_Init+0x1e8>)
 80056c6:	7819      	ldrb	r1, [r3, #0]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80056ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f002 fb6e 	bl	8007db4 <USBD_LL_PrepareReceive>
 80056d8:	e008      	b.n	80056ec <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80056da:	4b08      	ldr	r3, [pc, #32]	; (80056fc <USBD_CDC_Init+0x1e8>)
 80056dc:	7819      	ldrb	r1, [r3, #0]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80056e4:	2340      	movs	r3, #64	; 0x40
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f002 fb64 	bl	8007db4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3710      	adds	r7, #16
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	20000093 	.word	0x20000093
 80056fc:	20000094 	.word	0x20000094
 8005700:	20000095 	.word	0x20000095

08005704 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	460b      	mov	r3, r1
 800570e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005710:	4b3a      	ldr	r3, [pc, #232]	; (80057fc <USBD_CDC_DeInit+0xf8>)
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	4619      	mov	r1, r3
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f002 fa83 	bl	8007c22 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800571c:	4b37      	ldr	r3, [pc, #220]	; (80057fc <USBD_CDC_DeInit+0xf8>)
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	f003 020f 	and.w	r2, r3, #15
 8005724:	6879      	ldr	r1, [r7, #4]
 8005726:	4613      	mov	r3, r2
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	4413      	add	r3, r2
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	440b      	add	r3, r1
 8005730:	3324      	adds	r3, #36	; 0x24
 8005732:	2200      	movs	r2, #0
 8005734:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005736:	4b32      	ldr	r3, [pc, #200]	; (8005800 <USBD_CDC_DeInit+0xfc>)
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	4619      	mov	r1, r3
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f002 fa70 	bl	8007c22 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005742:	4b2f      	ldr	r3, [pc, #188]	; (8005800 <USBD_CDC_DeInit+0xfc>)
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	f003 020f 	and.w	r2, r3, #15
 800574a:	6879      	ldr	r1, [r7, #4]
 800574c:	4613      	mov	r3, r2
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	4413      	add	r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	440b      	add	r3, r1
 8005756:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800575a:	2200      	movs	r2, #0
 800575c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800575e:	4b29      	ldr	r3, [pc, #164]	; (8005804 <USBD_CDC_DeInit+0x100>)
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	4619      	mov	r1, r3
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f002 fa5c 	bl	8007c22 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800576a:	4b26      	ldr	r3, [pc, #152]	; (8005804 <USBD_CDC_DeInit+0x100>)
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	f003 020f 	and.w	r2, r3, #15
 8005772:	6879      	ldr	r1, [r7, #4]
 8005774:	4613      	mov	r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4413      	add	r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	440b      	add	r3, r1
 800577e:	3324      	adds	r3, #36	; 0x24
 8005780:	2200      	movs	r2, #0
 8005782:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005784:	4b1f      	ldr	r3, [pc, #124]	; (8005804 <USBD_CDC_DeInit+0x100>)
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	f003 020f 	and.w	r2, r3, #15
 800578c:	6879      	ldr	r1, [r7, #4]
 800578e:	4613      	mov	r3, r2
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	4413      	add	r3, r2
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	440b      	add	r3, r1
 8005798:	3326      	adds	r3, #38	; 0x26
 800579a:	2200      	movs	r2, #0
 800579c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	32b0      	adds	r2, #176	; 0xb0
 80057a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d01f      	beq.n	80057f0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	33b0      	adds	r3, #176	; 0xb0
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	4413      	add	r3, r2
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	32b0      	adds	r2, #176	; 0xb0
 80057ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057d2:	4618      	mov	r0, r3
 80057d4:	f002 fb7e 	bl	8007ed4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	32b0      	adds	r2, #176	; 0xb0
 80057e2:	2100      	movs	r1, #0
 80057e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3708      	adds	r7, #8
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	20000093 	.word	0x20000093
 8005800:	20000094 	.word	0x20000094
 8005804:	20000095 	.word	0x20000095

08005808 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b086      	sub	sp, #24
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	32b0      	adds	r2, #176	; 0xb0
 800581c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005820:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005822:	2300      	movs	r3, #0
 8005824:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005826:	2300      	movs	r3, #0
 8005828:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800582a:	2300      	movs	r3, #0
 800582c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d101      	bne.n	8005838 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005834:	2303      	movs	r3, #3
 8005836:	e0bf      	b.n	80059b8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005840:	2b00      	cmp	r3, #0
 8005842:	d050      	beq.n	80058e6 <USBD_CDC_Setup+0xde>
 8005844:	2b20      	cmp	r3, #32
 8005846:	f040 80af 	bne.w	80059a8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	88db      	ldrh	r3, [r3, #6]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d03a      	beq.n	80058c8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	b25b      	sxtb	r3, r3
 8005858:	2b00      	cmp	r3, #0
 800585a:	da1b      	bge.n	8005894 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	33b0      	adds	r3, #176	; 0xb0
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	4413      	add	r3, r2
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	683a      	ldr	r2, [r7, #0]
 8005870:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005872:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005874:	683a      	ldr	r2, [r7, #0]
 8005876:	88d2      	ldrh	r2, [r2, #6]
 8005878:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	88db      	ldrh	r3, [r3, #6]
 800587e:	2b07      	cmp	r3, #7
 8005880:	bf28      	it	cs
 8005882:	2307      	movcs	r3, #7
 8005884:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	89fa      	ldrh	r2, [r7, #14]
 800588a:	4619      	mov	r1, r3
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f001 fd6d 	bl	800736c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005892:	e090      	b.n	80059b6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	785a      	ldrb	r2, [r3, #1]
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	88db      	ldrh	r3, [r3, #6]
 80058a2:	2b3f      	cmp	r3, #63	; 0x3f
 80058a4:	d803      	bhi.n	80058ae <USBD_CDC_Setup+0xa6>
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	88db      	ldrh	r3, [r3, #6]
 80058aa:	b2da      	uxtb	r2, r3
 80058ac:	e000      	b.n	80058b0 <USBD_CDC_Setup+0xa8>
 80058ae:	2240      	movs	r2, #64	; 0x40
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80058b6:	6939      	ldr	r1, [r7, #16]
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80058be:	461a      	mov	r2, r3
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f001 fd7f 	bl	80073c4 <USBD_CtlPrepareRx>
      break;
 80058c6:	e076      	b.n	80059b6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	33b0      	adds	r3, #176	; 0xb0
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	4413      	add	r3, r2
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	683a      	ldr	r2, [r7, #0]
 80058dc:	7850      	ldrb	r0, [r2, #1]
 80058de:	2200      	movs	r2, #0
 80058e0:	6839      	ldr	r1, [r7, #0]
 80058e2:	4798      	blx	r3
      break;
 80058e4:	e067      	b.n	80059b6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	785b      	ldrb	r3, [r3, #1]
 80058ea:	2b0b      	cmp	r3, #11
 80058ec:	d851      	bhi.n	8005992 <USBD_CDC_Setup+0x18a>
 80058ee:	a201      	add	r2, pc, #4	; (adr r2, 80058f4 <USBD_CDC_Setup+0xec>)
 80058f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f4:	08005925 	.word	0x08005925
 80058f8:	080059a1 	.word	0x080059a1
 80058fc:	08005993 	.word	0x08005993
 8005900:	08005993 	.word	0x08005993
 8005904:	08005993 	.word	0x08005993
 8005908:	08005993 	.word	0x08005993
 800590c:	08005993 	.word	0x08005993
 8005910:	08005993 	.word	0x08005993
 8005914:	08005993 	.word	0x08005993
 8005918:	08005993 	.word	0x08005993
 800591c:	0800594f 	.word	0x0800594f
 8005920:	08005979 	.word	0x08005979
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800592a:	b2db      	uxtb	r3, r3
 800592c:	2b03      	cmp	r3, #3
 800592e:	d107      	bne.n	8005940 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005930:	f107 030a 	add.w	r3, r7, #10
 8005934:	2202      	movs	r2, #2
 8005936:	4619      	mov	r1, r3
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f001 fd17 	bl	800736c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800593e:	e032      	b.n	80059a6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005940:	6839      	ldr	r1, [r7, #0]
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f001 fca1 	bl	800728a <USBD_CtlError>
            ret = USBD_FAIL;
 8005948:	2303      	movs	r3, #3
 800594a:	75fb      	strb	r3, [r7, #23]
          break;
 800594c:	e02b      	b.n	80059a6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005954:	b2db      	uxtb	r3, r3
 8005956:	2b03      	cmp	r3, #3
 8005958:	d107      	bne.n	800596a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800595a:	f107 030d 	add.w	r3, r7, #13
 800595e:	2201      	movs	r2, #1
 8005960:	4619      	mov	r1, r3
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f001 fd02 	bl	800736c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005968:	e01d      	b.n	80059a6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800596a:	6839      	ldr	r1, [r7, #0]
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f001 fc8c 	bl	800728a <USBD_CtlError>
            ret = USBD_FAIL;
 8005972:	2303      	movs	r3, #3
 8005974:	75fb      	strb	r3, [r7, #23]
          break;
 8005976:	e016      	b.n	80059a6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800597e:	b2db      	uxtb	r3, r3
 8005980:	2b03      	cmp	r3, #3
 8005982:	d00f      	beq.n	80059a4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005984:	6839      	ldr	r1, [r7, #0]
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f001 fc7f 	bl	800728a <USBD_CtlError>
            ret = USBD_FAIL;
 800598c:	2303      	movs	r3, #3
 800598e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005990:	e008      	b.n	80059a4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005992:	6839      	ldr	r1, [r7, #0]
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f001 fc78 	bl	800728a <USBD_CtlError>
          ret = USBD_FAIL;
 800599a:	2303      	movs	r3, #3
 800599c:	75fb      	strb	r3, [r7, #23]
          break;
 800599e:	e002      	b.n	80059a6 <USBD_CDC_Setup+0x19e>
          break;
 80059a0:	bf00      	nop
 80059a2:	e008      	b.n	80059b6 <USBD_CDC_Setup+0x1ae>
          break;
 80059a4:	bf00      	nop
      }
      break;
 80059a6:	e006      	b.n	80059b6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80059a8:	6839      	ldr	r1, [r7, #0]
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f001 fc6d 	bl	800728a <USBD_CtlError>
      ret = USBD_FAIL;
 80059b0:	2303      	movs	r3, #3
 80059b2:	75fb      	strb	r3, [r7, #23]
      break;
 80059b4:	bf00      	nop
  }

  return (uint8_t)ret;
 80059b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3718      	adds	r7, #24
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	460b      	mov	r3, r1
 80059ca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80059d2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	32b0      	adds	r2, #176	; 0xb0
 80059de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e065      	b.n	8005ab6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	32b0      	adds	r2, #176	; 0xb0
 80059f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059f8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80059fa:	78fb      	ldrb	r3, [r7, #3]
 80059fc:	f003 020f 	and.w	r2, r3, #15
 8005a00:	6879      	ldr	r1, [r7, #4]
 8005a02:	4613      	mov	r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	4413      	add	r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	440b      	add	r3, r1
 8005a0c:	3318      	adds	r3, #24
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d02f      	beq.n	8005a74 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005a14:	78fb      	ldrb	r3, [r7, #3]
 8005a16:	f003 020f 	and.w	r2, r3, #15
 8005a1a:	6879      	ldr	r1, [r7, #4]
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	4413      	add	r3, r2
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	440b      	add	r3, r1
 8005a26:	3318      	adds	r3, #24
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	78fb      	ldrb	r3, [r7, #3]
 8005a2c:	f003 010f 	and.w	r1, r3, #15
 8005a30:	68f8      	ldr	r0, [r7, #12]
 8005a32:	460b      	mov	r3, r1
 8005a34:	00db      	lsls	r3, r3, #3
 8005a36:	440b      	add	r3, r1
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	4403      	add	r3, r0
 8005a3c:	3348      	adds	r3, #72	; 0x48
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	fbb2 f1f3 	udiv	r1, r2, r3
 8005a44:	fb01 f303 	mul.w	r3, r1, r3
 8005a48:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d112      	bne.n	8005a74 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005a4e:	78fb      	ldrb	r3, [r7, #3]
 8005a50:	f003 020f 	and.w	r2, r3, #15
 8005a54:	6879      	ldr	r1, [r7, #4]
 8005a56:	4613      	mov	r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	4413      	add	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	440b      	add	r3, r1
 8005a60:	3318      	adds	r3, #24
 8005a62:	2200      	movs	r2, #0
 8005a64:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005a66:	78f9      	ldrb	r1, [r7, #3]
 8005a68:	2300      	movs	r3, #0
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f002 f980 	bl	8007d72 <USBD_LL_Transmit>
 8005a72:	e01f      	b.n	8005ab4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	33b0      	adds	r3, #176	; 0xb0
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	4413      	add	r3, r2
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d010      	beq.n	8005ab4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	33b0      	adds	r3, #176	; 0xb0
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	4413      	add	r3, r2
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	68ba      	ldr	r2, [r7, #8]
 8005aa6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005ab0:	78fa      	ldrb	r2, [r7, #3]
 8005ab2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3710      	adds	r7, #16
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}

08005abe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	b084      	sub	sp, #16
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	32b0      	adds	r2, #176	; 0xb0
 8005ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ad8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	32b0      	adds	r2, #176	; 0xb0
 8005ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d101      	bne.n	8005af0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e01a      	b.n	8005b26 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005af0:	78fb      	ldrb	r3, [r7, #3]
 8005af2:	4619      	mov	r1, r3
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f002 f97e 	bl	8007df6 <USBD_LL_GetRxDataSize>
 8005afa:	4602      	mov	r2, r0
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	33b0      	adds	r3, #176	; 0xb0
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	4413      	add	r3, r2
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005b20:	4611      	mov	r1, r2
 8005b22:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3710      	adds	r7, #16
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}

08005b2e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005b2e:	b580      	push	{r7, lr}
 8005b30:	b084      	sub	sp, #16
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	32b0      	adds	r2, #176	; 0xb0
 8005b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b44:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d101      	bne.n	8005b50 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e025      	b.n	8005b9c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	33b0      	adds	r3, #176	; 0xb0
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	4413      	add	r3, r2
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d01a      	beq.n	8005b9a <USBD_CDC_EP0_RxReady+0x6c>
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005b6a:	2bff      	cmp	r3, #255	; 0xff
 8005b6c:	d015      	beq.n	8005b9a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	33b0      	adds	r3, #176	; 0xb0
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	4413      	add	r3, r2
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005b86:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005b8e:	b292      	uxth	r2, r2
 8005b90:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	22ff      	movs	r2, #255	; 0xff
 8005b96:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3710      	adds	r7, #16
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b086      	sub	sp, #24
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005bac:	2182      	movs	r1, #130	; 0x82
 8005bae:	4818      	ldr	r0, [pc, #96]	; (8005c10 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005bb0:	f000 fd09 	bl	80065c6 <USBD_GetEpDesc>
 8005bb4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005bb6:	2101      	movs	r1, #1
 8005bb8:	4815      	ldr	r0, [pc, #84]	; (8005c10 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005bba:	f000 fd04 	bl	80065c6 <USBD_GetEpDesc>
 8005bbe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005bc0:	2181      	movs	r1, #129	; 0x81
 8005bc2:	4813      	ldr	r0, [pc, #76]	; (8005c10 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005bc4:	f000 fcff 	bl	80065c6 <USBD_GetEpDesc>
 8005bc8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d002      	beq.n	8005bd6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	2210      	movs	r2, #16
 8005bd4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d006      	beq.n	8005bea <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005be4:	711a      	strb	r2, [r3, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d006      	beq.n	8005bfe <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bf8:	711a      	strb	r2, [r3, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2243      	movs	r2, #67	; 0x43
 8005c02:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005c04:	4b02      	ldr	r3, [pc, #8]	; (8005c10 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3718      	adds	r7, #24
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	20000050 	.word	0x20000050

08005c14 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b086      	sub	sp, #24
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005c1c:	2182      	movs	r1, #130	; 0x82
 8005c1e:	4818      	ldr	r0, [pc, #96]	; (8005c80 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005c20:	f000 fcd1 	bl	80065c6 <USBD_GetEpDesc>
 8005c24:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005c26:	2101      	movs	r1, #1
 8005c28:	4815      	ldr	r0, [pc, #84]	; (8005c80 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005c2a:	f000 fccc 	bl	80065c6 <USBD_GetEpDesc>
 8005c2e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005c30:	2181      	movs	r1, #129	; 0x81
 8005c32:	4813      	ldr	r0, [pc, #76]	; (8005c80 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005c34:	f000 fcc7 	bl	80065c6 <USBD_GetEpDesc>
 8005c38:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d002      	beq.n	8005c46 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	2210      	movs	r2, #16
 8005c44:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d006      	beq.n	8005c5a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	711a      	strb	r2, [r3, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f042 0202 	orr.w	r2, r2, #2
 8005c58:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d006      	beq.n	8005c6e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2200      	movs	r2, #0
 8005c64:	711a      	strb	r2, [r3, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f042 0202 	orr.w	r2, r2, #2
 8005c6c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2243      	movs	r2, #67	; 0x43
 8005c72:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005c74:	4b02      	ldr	r3, [pc, #8]	; (8005c80 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3718      	adds	r7, #24
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	20000050 	.word	0x20000050

08005c84 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b086      	sub	sp, #24
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005c8c:	2182      	movs	r1, #130	; 0x82
 8005c8e:	4818      	ldr	r0, [pc, #96]	; (8005cf0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005c90:	f000 fc99 	bl	80065c6 <USBD_GetEpDesc>
 8005c94:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005c96:	2101      	movs	r1, #1
 8005c98:	4815      	ldr	r0, [pc, #84]	; (8005cf0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005c9a:	f000 fc94 	bl	80065c6 <USBD_GetEpDesc>
 8005c9e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005ca0:	2181      	movs	r1, #129	; 0x81
 8005ca2:	4813      	ldr	r0, [pc, #76]	; (8005cf0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005ca4:	f000 fc8f 	bl	80065c6 <USBD_GetEpDesc>
 8005ca8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d002      	beq.n	8005cb6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	2210      	movs	r2, #16
 8005cb4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d006      	beq.n	8005cca <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cc4:	711a      	strb	r2, [r3, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d006      	beq.n	8005cde <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cd8:	711a      	strb	r2, [r3, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2243      	movs	r2, #67	; 0x43
 8005ce2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005ce4:	4b02      	ldr	r3, [pc, #8]	; (8005cf0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3718      	adds	r7, #24
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	20000050 	.word	0x20000050

08005cf4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	220a      	movs	r2, #10
 8005d00:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005d02:	4b03      	ldr	r3, [pc, #12]	; (8005d10 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	370c      	adds	r7, #12
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr
 8005d10:	2000000c 	.word	0x2000000c

08005d14 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d101      	bne.n	8005d28 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005d24:	2303      	movs	r3, #3
 8005d26:	e009      	b.n	8005d3c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	33b0      	adds	r3, #176	; 0xb0
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	4413      	add	r3, r2
 8005d36:	683a      	ldr	r2, [r7, #0]
 8005d38:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b087      	sub	sp, #28
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	32b0      	adds	r2, #176	; 0xb0
 8005d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d62:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d101      	bne.n	8005d6e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	e008      	b.n	8005d80 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	68ba      	ldr	r2, [r7, #8]
 8005d72:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	371c      	adds	r7, #28
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	32b0      	adds	r2, #176	; 0xb0
 8005da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005da4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d101      	bne.n	8005db0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e004      	b.n	8005dba <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	683a      	ldr	r2, [r7, #0]
 8005db4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3714      	adds	r7, #20
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr
	...

08005dc8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	32b0      	adds	r2, #176	; 0xb0
 8005dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dde:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	32b0      	adds	r2, #176	; 0xb0
 8005dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d101      	bne.n	8005df6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005df2:	2303      	movs	r3, #3
 8005df4:	e018      	b.n	8005e28 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	7c1b      	ldrb	r3, [r3, #16]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d10a      	bne.n	8005e14 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005dfe:	4b0c      	ldr	r3, [pc, #48]	; (8005e30 <USBD_CDC_ReceivePacket+0x68>)
 8005e00:	7819      	ldrb	r1, [r3, #0]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f001 ffd1 	bl	8007db4 <USBD_LL_PrepareReceive>
 8005e12:	e008      	b.n	8005e26 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005e14:	4b06      	ldr	r3, [pc, #24]	; (8005e30 <USBD_CDC_ReceivePacket+0x68>)
 8005e16:	7819      	ldrb	r1, [r3, #0]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e1e:	2340      	movs	r3, #64	; 0x40
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f001 ffc7 	bl	8007db4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3710      	adds	r7, #16
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	20000094 	.word	0x20000094

08005e34 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b086      	sub	sp, #24
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	4613      	mov	r3, r2
 8005e40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d101      	bne.n	8005e4c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	e01f      	b.n	8005e8c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d003      	beq.n	8005e72 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	68ba      	ldr	r2, [r7, #8]
 8005e6e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2201      	movs	r2, #1
 8005e76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	79fa      	ldrb	r2, [r7, #7]
 8005e7e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005e80:	68f8      	ldr	r0, [r7, #12]
 8005e82:	f001 fe41 	bl	8007b08 <USBD_LL_Init>
 8005e86:	4603      	mov	r3, r0
 8005e88:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005e8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3718      	adds	r7, #24
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d101      	bne.n	8005eac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005ea8:	2303      	movs	r3, #3
 8005eaa:	e025      	b.n	8005ef8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	683a      	ldr	r2, [r7, #0]
 8005eb0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	32ae      	adds	r2, #174	; 0xae
 8005ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d00f      	beq.n	8005ee8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	32ae      	adds	r2, #174	; 0xae
 8005ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed8:	f107 020e 	add.w	r2, r7, #14
 8005edc:	4610      	mov	r0, r2
 8005ede:	4798      	blx	r3
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005eee:	1c5a      	adds	r2, r3, #1
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3710      	adds	r7, #16
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f001 fe49 	bl	8007ba0 <USBD_LL_Start>
 8005f0e:	4603      	mov	r3, r0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3708      	adds	r7, #8
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005f20:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	370c      	adds	r7, #12
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr

08005f2e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b084      	sub	sp, #16
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
 8005f36:	460b      	mov	r3, r1
 8005f38:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d009      	beq.n	8005f5c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	78fa      	ldrb	r2, [r7, #3]
 8005f52:	4611      	mov	r1, r2
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	4798      	blx	r3
 8005f58:	4603      	mov	r3, r0
 8005f5a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3710      	adds	r7, #16
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}

08005f66 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b084      	sub	sp, #16
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
 8005f6e:	460b      	mov	r3, r1
 8005f70:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f72:	2300      	movs	r3, #0
 8005f74:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	78fa      	ldrb	r2, [r7, #3]
 8005f80:	4611      	mov	r1, r2
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	4798      	blx	r3
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d001      	beq.n	8005f90 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3710      	adds	r7, #16
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}

08005f9a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005f9a:	b580      	push	{r7, lr}
 8005f9c:	b084      	sub	sp, #16
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
 8005fa2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005faa:	6839      	ldr	r1, [r7, #0]
 8005fac:	4618      	mov	r0, r3
 8005fae:	f001 f932 	bl	8007216 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005fce:	f003 031f 	and.w	r3, r3, #31
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d01a      	beq.n	800600c <USBD_LL_SetupStage+0x72>
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	d822      	bhi.n	8006020 <USBD_LL_SetupStage+0x86>
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d002      	beq.n	8005fe4 <USBD_LL_SetupStage+0x4a>
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d00a      	beq.n	8005ff8 <USBD_LL_SetupStage+0x5e>
 8005fe2:	e01d      	b.n	8006020 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005fea:	4619      	mov	r1, r3
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 fb5f 	bl	80066b0 <USBD_StdDevReq>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	73fb      	strb	r3, [r7, #15]
      break;
 8005ff6:	e020      	b.n	800603a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ffe:	4619      	mov	r1, r3
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f000 fbc7 	bl	8006794 <USBD_StdItfReq>
 8006006:	4603      	mov	r3, r0
 8006008:	73fb      	strb	r3, [r7, #15]
      break;
 800600a:	e016      	b.n	800603a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006012:	4619      	mov	r1, r3
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 fc29 	bl	800686c <USBD_StdEPReq>
 800601a:	4603      	mov	r3, r0
 800601c:	73fb      	strb	r3, [r7, #15]
      break;
 800601e:	e00c      	b.n	800603a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006026:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800602a:	b2db      	uxtb	r3, r3
 800602c:	4619      	mov	r1, r3
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f001 fe16 	bl	8007c60 <USBD_LL_StallEP>
 8006034:	4603      	mov	r3, r0
 8006036:	73fb      	strb	r3, [r7, #15]
      break;
 8006038:	bf00      	nop
  }

  return ret;
 800603a:	7bfb      	ldrb	r3, [r7, #15]
}
 800603c:	4618      	mov	r0, r3
 800603e:	3710      	adds	r7, #16
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b086      	sub	sp, #24
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	460b      	mov	r3, r1
 800604e:	607a      	str	r2, [r7, #4]
 8006050:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006052:	2300      	movs	r3, #0
 8006054:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006056:	7afb      	ldrb	r3, [r7, #11]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d16e      	bne.n	800613a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006062:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800606a:	2b03      	cmp	r3, #3
 800606c:	f040 8098 	bne.w	80061a0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	689a      	ldr	r2, [r3, #8]
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	429a      	cmp	r2, r3
 800607a:	d913      	bls.n	80060a4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	689a      	ldr	r2, [r3, #8]
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	1ad2      	subs	r2, r2, r3
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	68da      	ldr	r2, [r3, #12]
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	4293      	cmp	r3, r2
 8006094:	bf28      	it	cs
 8006096:	4613      	movcs	r3, r2
 8006098:	461a      	mov	r2, r3
 800609a:	6879      	ldr	r1, [r7, #4]
 800609c:	68f8      	ldr	r0, [r7, #12]
 800609e:	f001 f9ae 	bl	80073fe <USBD_CtlContinueRx>
 80060a2:	e07d      	b.n	80061a0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80060aa:	f003 031f 	and.w	r3, r3, #31
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	d014      	beq.n	80060dc <USBD_LL_DataOutStage+0x98>
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	d81d      	bhi.n	80060f2 <USBD_LL_DataOutStage+0xae>
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d002      	beq.n	80060c0 <USBD_LL_DataOutStage+0x7c>
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d003      	beq.n	80060c6 <USBD_LL_DataOutStage+0x82>
 80060be:	e018      	b.n	80060f2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80060c0:	2300      	movs	r3, #0
 80060c2:	75bb      	strb	r3, [r7, #22]
            break;
 80060c4:	e018      	b.n	80060f8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	4619      	mov	r1, r3
 80060d0:	68f8      	ldr	r0, [r7, #12]
 80060d2:	f000 fa5e 	bl	8006592 <USBD_CoreFindIF>
 80060d6:	4603      	mov	r3, r0
 80060d8:	75bb      	strb	r3, [r7, #22]
            break;
 80060da:	e00d      	b.n	80060f8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	4619      	mov	r1, r3
 80060e6:	68f8      	ldr	r0, [r7, #12]
 80060e8:	f000 fa60 	bl	80065ac <USBD_CoreFindEP>
 80060ec:	4603      	mov	r3, r0
 80060ee:	75bb      	strb	r3, [r7, #22]
            break;
 80060f0:	e002      	b.n	80060f8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80060f2:	2300      	movs	r3, #0
 80060f4:	75bb      	strb	r3, [r7, #22]
            break;
 80060f6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80060f8:	7dbb      	ldrb	r3, [r7, #22]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d119      	bne.n	8006132 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006104:	b2db      	uxtb	r3, r3
 8006106:	2b03      	cmp	r3, #3
 8006108:	d113      	bne.n	8006132 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800610a:	7dba      	ldrb	r2, [r7, #22]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	32ae      	adds	r2, #174	; 0xae
 8006110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d00b      	beq.n	8006132 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800611a:	7dba      	ldrb	r2, [r7, #22]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006122:	7dba      	ldrb	r2, [r7, #22]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	32ae      	adds	r2, #174	; 0xae
 8006128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	68f8      	ldr	r0, [r7, #12]
 8006130:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	f001 f974 	bl	8007420 <USBD_CtlSendStatus>
 8006138:	e032      	b.n	80061a0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800613a:	7afb      	ldrb	r3, [r7, #11]
 800613c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006140:	b2db      	uxtb	r3, r3
 8006142:	4619      	mov	r1, r3
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f000 fa31 	bl	80065ac <USBD_CoreFindEP>
 800614a:	4603      	mov	r3, r0
 800614c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800614e:	7dbb      	ldrb	r3, [r7, #22]
 8006150:	2bff      	cmp	r3, #255	; 0xff
 8006152:	d025      	beq.n	80061a0 <USBD_LL_DataOutStage+0x15c>
 8006154:	7dbb      	ldrb	r3, [r7, #22]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d122      	bne.n	80061a0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006160:	b2db      	uxtb	r3, r3
 8006162:	2b03      	cmp	r3, #3
 8006164:	d117      	bne.n	8006196 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006166:	7dba      	ldrb	r2, [r7, #22]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	32ae      	adds	r2, #174	; 0xae
 800616c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006170:	699b      	ldr	r3, [r3, #24]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00f      	beq.n	8006196 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006176:	7dba      	ldrb	r2, [r7, #22]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800617e:	7dba      	ldrb	r2, [r7, #22]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	32ae      	adds	r2, #174	; 0xae
 8006184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	7afa      	ldrb	r2, [r7, #11]
 800618c:	4611      	mov	r1, r2
 800618e:	68f8      	ldr	r0, [r7, #12]
 8006190:	4798      	blx	r3
 8006192:	4603      	mov	r3, r0
 8006194:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006196:	7dfb      	ldrb	r3, [r7, #23]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d001      	beq.n	80061a0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800619c:	7dfb      	ldrb	r3, [r7, #23]
 800619e:	e000      	b.n	80061a2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3718      	adds	r7, #24
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b086      	sub	sp, #24
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	60f8      	str	r0, [r7, #12]
 80061b2:	460b      	mov	r3, r1
 80061b4:	607a      	str	r2, [r7, #4]
 80061b6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80061b8:	7afb      	ldrb	r3, [r7, #11]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d16f      	bne.n	800629e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	3314      	adds	r3, #20
 80061c2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80061ca:	2b02      	cmp	r3, #2
 80061cc:	d15a      	bne.n	8006284 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	689a      	ldr	r2, [r3, #8]
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d914      	bls.n	8006204 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	689a      	ldr	r2, [r3, #8]
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	1ad2      	subs	r2, r2, r3
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	461a      	mov	r2, r3
 80061ee:	6879      	ldr	r1, [r7, #4]
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f001 f8d6 	bl	80073a2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80061f6:	2300      	movs	r3, #0
 80061f8:	2200      	movs	r2, #0
 80061fa:	2100      	movs	r1, #0
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	f001 fdd9 	bl	8007db4 <USBD_LL_PrepareReceive>
 8006202:	e03f      	b.n	8006284 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	68da      	ldr	r2, [r3, #12]
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	429a      	cmp	r2, r3
 800620e:	d11c      	bne.n	800624a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	685a      	ldr	r2, [r3, #4]
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006218:	429a      	cmp	r2, r3
 800621a:	d316      	bcc.n	800624a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	685a      	ldr	r2, [r3, #4]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006226:	429a      	cmp	r2, r3
 8006228:	d20f      	bcs.n	800624a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800622a:	2200      	movs	r2, #0
 800622c:	2100      	movs	r1, #0
 800622e:	68f8      	ldr	r0, [r7, #12]
 8006230:	f001 f8b7 	bl	80073a2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800623c:	2300      	movs	r3, #0
 800623e:	2200      	movs	r2, #0
 8006240:	2100      	movs	r1, #0
 8006242:	68f8      	ldr	r0, [r7, #12]
 8006244:	f001 fdb6 	bl	8007db4 <USBD_LL_PrepareReceive>
 8006248:	e01c      	b.n	8006284 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006250:	b2db      	uxtb	r3, r3
 8006252:	2b03      	cmp	r3, #3
 8006254:	d10f      	bne.n	8006276 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d009      	beq.n	8006276 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2200      	movs	r2, #0
 8006266:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006276:	2180      	movs	r1, #128	; 0x80
 8006278:	68f8      	ldr	r0, [r7, #12]
 800627a:	f001 fcf1 	bl	8007c60 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800627e:	68f8      	ldr	r0, [r7, #12]
 8006280:	f001 f8e1 	bl	8007446 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d03a      	beq.n	8006304 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f7ff fe42 	bl	8005f18 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2200      	movs	r2, #0
 8006298:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800629c:	e032      	b.n	8006304 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800629e:	7afb      	ldrb	r3, [r7, #11]
 80062a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	4619      	mov	r1, r3
 80062a8:	68f8      	ldr	r0, [r7, #12]
 80062aa:	f000 f97f 	bl	80065ac <USBD_CoreFindEP>
 80062ae:	4603      	mov	r3, r0
 80062b0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80062b2:	7dfb      	ldrb	r3, [r7, #23]
 80062b4:	2bff      	cmp	r3, #255	; 0xff
 80062b6:	d025      	beq.n	8006304 <USBD_LL_DataInStage+0x15a>
 80062b8:	7dfb      	ldrb	r3, [r7, #23]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d122      	bne.n	8006304 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	2b03      	cmp	r3, #3
 80062c8:	d11c      	bne.n	8006304 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80062ca:	7dfa      	ldrb	r2, [r7, #23]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	32ae      	adds	r2, #174	; 0xae
 80062d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062d4:	695b      	ldr	r3, [r3, #20]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d014      	beq.n	8006304 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80062da:	7dfa      	ldrb	r2, [r7, #23]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80062e2:	7dfa      	ldrb	r2, [r7, #23]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	32ae      	adds	r2, #174	; 0xae
 80062e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062ec:	695b      	ldr	r3, [r3, #20]
 80062ee:	7afa      	ldrb	r2, [r7, #11]
 80062f0:	4611      	mov	r1, r2
 80062f2:	68f8      	ldr	r0, [r7, #12]
 80062f4:	4798      	blx	r3
 80062f6:	4603      	mov	r3, r0
 80062f8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80062fa:	7dbb      	ldrb	r3, [r7, #22]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d001      	beq.n	8006304 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006300:	7dbb      	ldrb	r3, [r7, #22]
 8006302:	e000      	b.n	8006306 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3718      	adds	r7, #24
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800630e:	b580      	push	{r7, lr}
 8006310:	b084      	sub	sp, #16
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006316:	2300      	movs	r3, #0
 8006318:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2201      	movs	r2, #1
 800631e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006346:	2b00      	cmp	r3, #0
 8006348:	d014      	beq.n	8006374 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00e      	beq.n	8006374 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	6852      	ldr	r2, [r2, #4]
 8006362:	b2d2      	uxtb	r2, r2
 8006364:	4611      	mov	r1, r2
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	4798      	blx	r3
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d001      	beq.n	8006374 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006370:	2303      	movs	r3, #3
 8006372:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006374:	2340      	movs	r3, #64	; 0x40
 8006376:	2200      	movs	r2, #0
 8006378:	2100      	movs	r1, #0
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f001 fc2b 	bl	8007bd6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2240      	movs	r2, #64	; 0x40
 800638c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006390:	2340      	movs	r3, #64	; 0x40
 8006392:	2200      	movs	r2, #0
 8006394:	2180      	movs	r1, #128	; 0x80
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f001 fc1d 	bl	8007bd6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2240      	movs	r2, #64	; 0x40
 80063a6:	621a      	str	r2, [r3, #32]

  return ret;
 80063a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3710      	adds	r7, #16
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}

080063b2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80063b2:	b480      	push	{r7}
 80063b4:	b083      	sub	sp, #12
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
 80063ba:	460b      	mov	r3, r1
 80063bc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	78fa      	ldrb	r2, [r7, #3]
 80063c2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	370c      	adds	r7, #12
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr

080063d2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80063d2:	b480      	push	{r7}
 80063d4:	b083      	sub	sp, #12
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063e0:	b2da      	uxtb	r2, r3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2204      	movs	r2, #4
 80063ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	370c      	adds	r7, #12
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr

080063fe <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80063fe:	b480      	push	{r7}
 8006400:	b083      	sub	sp, #12
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800640c:	b2db      	uxtb	r3, r3
 800640e:	2b04      	cmp	r3, #4
 8006410:	d106      	bne.n	8006420 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006418:	b2da      	uxtb	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006420:	2300      	movs	r3, #0
}
 8006422:	4618      	mov	r0, r3
 8006424:	370c      	adds	r7, #12
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr

0800642e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800642e:	b580      	push	{r7, lr}
 8006430:	b082      	sub	sp, #8
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800643c:	b2db      	uxtb	r3, r3
 800643e:	2b03      	cmp	r3, #3
 8006440:	d110      	bne.n	8006464 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00b      	beq.n	8006464 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006452:	69db      	ldr	r3, [r3, #28]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d005      	beq.n	8006464 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800645e:	69db      	ldr	r3, [r3, #28]
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3708      	adds	r7, #8
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}

0800646e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800646e:	b580      	push	{r7, lr}
 8006470:	b082      	sub	sp, #8
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
 8006476:	460b      	mov	r3, r1
 8006478:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	32ae      	adds	r2, #174	; 0xae
 8006484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d101      	bne.n	8006490 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800648c:	2303      	movs	r3, #3
 800648e:	e01c      	b.n	80064ca <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006496:	b2db      	uxtb	r3, r3
 8006498:	2b03      	cmp	r3, #3
 800649a:	d115      	bne.n	80064c8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	32ae      	adds	r2, #174	; 0xae
 80064a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064aa:	6a1b      	ldr	r3, [r3, #32]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00b      	beq.n	80064c8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	32ae      	adds	r2, #174	; 0xae
 80064ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064be:	6a1b      	ldr	r3, [r3, #32]
 80064c0:	78fa      	ldrb	r2, [r7, #3]
 80064c2:	4611      	mov	r1, r2
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3708      	adds	r7, #8
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b082      	sub	sp, #8
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
 80064da:	460b      	mov	r3, r1
 80064dc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	32ae      	adds	r2, #174	; 0xae
 80064e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d101      	bne.n	80064f4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80064f0:	2303      	movs	r3, #3
 80064f2:	e01c      	b.n	800652e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	2b03      	cmp	r3, #3
 80064fe:	d115      	bne.n	800652c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	32ae      	adds	r2, #174	; 0xae
 800650a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800650e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00b      	beq.n	800652c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	32ae      	adds	r2, #174	; 0xae
 800651e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006524:	78fa      	ldrb	r2, [r7, #3]
 8006526:	4611      	mov	r1, r2
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3708      	adds	r7, #8
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006536:	b480      	push	{r7}
 8006538:	b083      	sub	sp, #12
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800653e:	2300      	movs	r3, #0
}
 8006540:	4618      	mov	r0, r3
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006554:	2300      	movs	r3, #0
 8006556:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00e      	beq.n	8006588 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	6852      	ldr	r2, [r2, #4]
 8006576:	b2d2      	uxtb	r2, r2
 8006578:	4611      	mov	r1, r2
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	4798      	blx	r3
 800657e:	4603      	mov	r3, r0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d001      	beq.n	8006588 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006584:	2303      	movs	r3, #3
 8006586:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006588:	7bfb      	ldrb	r3, [r7, #15]
}
 800658a:	4618      	mov	r0, r3
 800658c:	3710      	adds	r7, #16
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}

08006592 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006592:	b480      	push	{r7}
 8006594:	b083      	sub	sp, #12
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
 800659a:	460b      	mov	r3, r1
 800659c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800659e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr

080065ac <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	460b      	mov	r3, r1
 80065b6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80065b8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	370c      	adds	r7, #12
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr

080065c6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80065c6:	b580      	push	{r7, lr}
 80065c8:	b086      	sub	sp, #24
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
 80065ce:	460b      	mov	r3, r1
 80065d0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80065da:	2300      	movs	r3, #0
 80065dc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	885b      	ldrh	r3, [r3, #2]
 80065e2:	b29a      	uxth	r2, r3
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d920      	bls.n	8006630 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80065f6:	e013      	b.n	8006620 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80065f8:	f107 030a 	add.w	r3, r7, #10
 80065fc:	4619      	mov	r1, r3
 80065fe:	6978      	ldr	r0, [r7, #20]
 8006600:	f000 f81b 	bl	800663a <USBD_GetNextDesc>
 8006604:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	785b      	ldrb	r3, [r3, #1]
 800660a:	2b05      	cmp	r3, #5
 800660c:	d108      	bne.n	8006620 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	789b      	ldrb	r3, [r3, #2]
 8006616:	78fa      	ldrb	r2, [r7, #3]
 8006618:	429a      	cmp	r2, r3
 800661a:	d008      	beq.n	800662e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800661c:	2300      	movs	r3, #0
 800661e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	885b      	ldrh	r3, [r3, #2]
 8006624:	b29a      	uxth	r2, r3
 8006626:	897b      	ldrh	r3, [r7, #10]
 8006628:	429a      	cmp	r2, r3
 800662a:	d8e5      	bhi.n	80065f8 <USBD_GetEpDesc+0x32>
 800662c:	e000      	b.n	8006630 <USBD_GetEpDesc+0x6a>
          break;
 800662e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006630:	693b      	ldr	r3, [r7, #16]
}
 8006632:	4618      	mov	r0, r3
 8006634:	3718      	adds	r7, #24
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800663a:	b480      	push	{r7}
 800663c:	b085      	sub	sp, #20
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
 8006642:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	881a      	ldrh	r2, [r3, #0]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	b29b      	uxth	r3, r3
 8006652:	4413      	add	r3, r2
 8006654:	b29a      	uxth	r2, r3
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	461a      	mov	r2, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4413      	add	r3, r2
 8006664:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006666:	68fb      	ldr	r3, [r7, #12]
}
 8006668:	4618      	mov	r0, r3
 800666a:	3714      	adds	r7, #20
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006674:	b480      	push	{r7}
 8006676:	b087      	sub	sp, #28
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	3301      	adds	r3, #1
 800668a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006692:	8a3b      	ldrh	r3, [r7, #16]
 8006694:	021b      	lsls	r3, r3, #8
 8006696:	b21a      	sxth	r2, r3
 8006698:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800669c:	4313      	orrs	r3, r2
 800669e:	b21b      	sxth	r3, r3
 80066a0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80066a2:	89fb      	ldrh	r3, [r7, #14]
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	371c      	adds	r7, #28
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80066ba:	2300      	movs	r3, #0
 80066bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066c6:	2b40      	cmp	r3, #64	; 0x40
 80066c8:	d005      	beq.n	80066d6 <USBD_StdDevReq+0x26>
 80066ca:	2b40      	cmp	r3, #64	; 0x40
 80066cc:	d857      	bhi.n	800677e <USBD_StdDevReq+0xce>
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00f      	beq.n	80066f2 <USBD_StdDevReq+0x42>
 80066d2:	2b20      	cmp	r3, #32
 80066d4:	d153      	bne.n	800677e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	32ae      	adds	r2, #174	; 0xae
 80066e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	6839      	ldr	r1, [r7, #0]
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	4798      	blx	r3
 80066ec:	4603      	mov	r3, r0
 80066ee:	73fb      	strb	r3, [r7, #15]
      break;
 80066f0:	e04a      	b.n	8006788 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	785b      	ldrb	r3, [r3, #1]
 80066f6:	2b09      	cmp	r3, #9
 80066f8:	d83b      	bhi.n	8006772 <USBD_StdDevReq+0xc2>
 80066fa:	a201      	add	r2, pc, #4	; (adr r2, 8006700 <USBD_StdDevReq+0x50>)
 80066fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006700:	08006755 	.word	0x08006755
 8006704:	08006769 	.word	0x08006769
 8006708:	08006773 	.word	0x08006773
 800670c:	0800675f 	.word	0x0800675f
 8006710:	08006773 	.word	0x08006773
 8006714:	08006733 	.word	0x08006733
 8006718:	08006729 	.word	0x08006729
 800671c:	08006773 	.word	0x08006773
 8006720:	0800674b 	.word	0x0800674b
 8006724:	0800673d 	.word	0x0800673d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006728:	6839      	ldr	r1, [r7, #0]
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 fa3c 	bl	8006ba8 <USBD_GetDescriptor>
          break;
 8006730:	e024      	b.n	800677c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006732:	6839      	ldr	r1, [r7, #0]
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 fbcb 	bl	8006ed0 <USBD_SetAddress>
          break;
 800673a:	e01f      	b.n	800677c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800673c:	6839      	ldr	r1, [r7, #0]
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 fc0a 	bl	8006f58 <USBD_SetConfig>
 8006744:	4603      	mov	r3, r0
 8006746:	73fb      	strb	r3, [r7, #15]
          break;
 8006748:	e018      	b.n	800677c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800674a:	6839      	ldr	r1, [r7, #0]
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 fcad 	bl	80070ac <USBD_GetConfig>
          break;
 8006752:	e013      	b.n	800677c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006754:	6839      	ldr	r1, [r7, #0]
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 fcde 	bl	8007118 <USBD_GetStatus>
          break;
 800675c:	e00e      	b.n	800677c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800675e:	6839      	ldr	r1, [r7, #0]
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 fd0d 	bl	8007180 <USBD_SetFeature>
          break;
 8006766:	e009      	b.n	800677c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006768:	6839      	ldr	r1, [r7, #0]
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 fd31 	bl	80071d2 <USBD_ClrFeature>
          break;
 8006770:	e004      	b.n	800677c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006772:	6839      	ldr	r1, [r7, #0]
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 fd88 	bl	800728a <USBD_CtlError>
          break;
 800677a:	bf00      	nop
      }
      break;
 800677c:	e004      	b.n	8006788 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800677e:	6839      	ldr	r1, [r7, #0]
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f000 fd82 	bl	800728a <USBD_CtlError>
      break;
 8006786:	bf00      	nop
  }

  return ret;
 8006788:	7bfb      	ldrb	r3, [r7, #15]
}
 800678a:	4618      	mov	r0, r3
 800678c:	3710      	adds	r7, #16
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop

08006794 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800679e:	2300      	movs	r3, #0
 80067a0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067aa:	2b40      	cmp	r3, #64	; 0x40
 80067ac:	d005      	beq.n	80067ba <USBD_StdItfReq+0x26>
 80067ae:	2b40      	cmp	r3, #64	; 0x40
 80067b0:	d852      	bhi.n	8006858 <USBD_StdItfReq+0xc4>
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d001      	beq.n	80067ba <USBD_StdItfReq+0x26>
 80067b6:	2b20      	cmp	r3, #32
 80067b8:	d14e      	bne.n	8006858 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	3b01      	subs	r3, #1
 80067c4:	2b02      	cmp	r3, #2
 80067c6:	d840      	bhi.n	800684a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	889b      	ldrh	r3, [r3, #4]
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d836      	bhi.n	8006840 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	889b      	ldrh	r3, [r3, #4]
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	4619      	mov	r1, r3
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f7ff fed9 	bl	8006592 <USBD_CoreFindIF>
 80067e0:	4603      	mov	r3, r0
 80067e2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80067e4:	7bbb      	ldrb	r3, [r7, #14]
 80067e6:	2bff      	cmp	r3, #255	; 0xff
 80067e8:	d01d      	beq.n	8006826 <USBD_StdItfReq+0x92>
 80067ea:	7bbb      	ldrb	r3, [r7, #14]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d11a      	bne.n	8006826 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80067f0:	7bba      	ldrb	r2, [r7, #14]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	32ae      	adds	r2, #174	; 0xae
 80067f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d00f      	beq.n	8006820 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006800:	7bba      	ldrb	r2, [r7, #14]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006808:	7bba      	ldrb	r2, [r7, #14]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	32ae      	adds	r2, #174	; 0xae
 800680e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	6839      	ldr	r1, [r7, #0]
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	4798      	blx	r3
 800681a:	4603      	mov	r3, r0
 800681c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800681e:	e004      	b.n	800682a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006820:	2303      	movs	r3, #3
 8006822:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006824:	e001      	b.n	800682a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006826:	2303      	movs	r3, #3
 8006828:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	88db      	ldrh	r3, [r3, #6]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d110      	bne.n	8006854 <USBD_StdItfReq+0xc0>
 8006832:	7bfb      	ldrb	r3, [r7, #15]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d10d      	bne.n	8006854 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 fdf1 	bl	8007420 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800683e:	e009      	b.n	8006854 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006840:	6839      	ldr	r1, [r7, #0]
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 fd21 	bl	800728a <USBD_CtlError>
          break;
 8006848:	e004      	b.n	8006854 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800684a:	6839      	ldr	r1, [r7, #0]
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 fd1c 	bl	800728a <USBD_CtlError>
          break;
 8006852:	e000      	b.n	8006856 <USBD_StdItfReq+0xc2>
          break;
 8006854:	bf00      	nop
      }
      break;
 8006856:	e004      	b.n	8006862 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006858:	6839      	ldr	r1, [r7, #0]
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 fd15 	bl	800728a <USBD_CtlError>
      break;
 8006860:	bf00      	nop
  }

  return ret;
 8006862:	7bfb      	ldrb	r3, [r7, #15]
}
 8006864:	4618      	mov	r0, r3
 8006866:	3710      	adds	r7, #16
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b084      	sub	sp, #16
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006876:	2300      	movs	r3, #0
 8006878:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	889b      	ldrh	r3, [r3, #4]
 800687e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006888:	2b40      	cmp	r3, #64	; 0x40
 800688a:	d007      	beq.n	800689c <USBD_StdEPReq+0x30>
 800688c:	2b40      	cmp	r3, #64	; 0x40
 800688e:	f200 817f 	bhi.w	8006b90 <USBD_StdEPReq+0x324>
 8006892:	2b00      	cmp	r3, #0
 8006894:	d02a      	beq.n	80068ec <USBD_StdEPReq+0x80>
 8006896:	2b20      	cmp	r3, #32
 8006898:	f040 817a 	bne.w	8006b90 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800689c:	7bbb      	ldrb	r3, [r7, #14]
 800689e:	4619      	mov	r1, r3
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f7ff fe83 	bl	80065ac <USBD_CoreFindEP>
 80068a6:	4603      	mov	r3, r0
 80068a8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80068aa:	7b7b      	ldrb	r3, [r7, #13]
 80068ac:	2bff      	cmp	r3, #255	; 0xff
 80068ae:	f000 8174 	beq.w	8006b9a <USBD_StdEPReq+0x32e>
 80068b2:	7b7b      	ldrb	r3, [r7, #13]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	f040 8170 	bne.w	8006b9a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80068ba:	7b7a      	ldrb	r2, [r7, #13]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80068c2:	7b7a      	ldrb	r2, [r7, #13]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	32ae      	adds	r2, #174	; 0xae
 80068c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	f000 8163 	beq.w	8006b9a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80068d4:	7b7a      	ldrb	r2, [r7, #13]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	32ae      	adds	r2, #174	; 0xae
 80068da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	6839      	ldr	r1, [r7, #0]
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	4798      	blx	r3
 80068e6:	4603      	mov	r3, r0
 80068e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80068ea:	e156      	b.n	8006b9a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	785b      	ldrb	r3, [r3, #1]
 80068f0:	2b03      	cmp	r3, #3
 80068f2:	d008      	beq.n	8006906 <USBD_StdEPReq+0x9a>
 80068f4:	2b03      	cmp	r3, #3
 80068f6:	f300 8145 	bgt.w	8006b84 <USBD_StdEPReq+0x318>
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	f000 809b 	beq.w	8006a36 <USBD_StdEPReq+0x1ca>
 8006900:	2b01      	cmp	r3, #1
 8006902:	d03c      	beq.n	800697e <USBD_StdEPReq+0x112>
 8006904:	e13e      	b.n	8006b84 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800690c:	b2db      	uxtb	r3, r3
 800690e:	2b02      	cmp	r3, #2
 8006910:	d002      	beq.n	8006918 <USBD_StdEPReq+0xac>
 8006912:	2b03      	cmp	r3, #3
 8006914:	d016      	beq.n	8006944 <USBD_StdEPReq+0xd8>
 8006916:	e02c      	b.n	8006972 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006918:	7bbb      	ldrb	r3, [r7, #14]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00d      	beq.n	800693a <USBD_StdEPReq+0xce>
 800691e:	7bbb      	ldrb	r3, [r7, #14]
 8006920:	2b80      	cmp	r3, #128	; 0x80
 8006922:	d00a      	beq.n	800693a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006924:	7bbb      	ldrb	r3, [r7, #14]
 8006926:	4619      	mov	r1, r3
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f001 f999 	bl	8007c60 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800692e:	2180      	movs	r1, #128	; 0x80
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f001 f995 	bl	8007c60 <USBD_LL_StallEP>
 8006936:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006938:	e020      	b.n	800697c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800693a:	6839      	ldr	r1, [r7, #0]
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 fca4 	bl	800728a <USBD_CtlError>
              break;
 8006942:	e01b      	b.n	800697c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	885b      	ldrh	r3, [r3, #2]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d10e      	bne.n	800696a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800694c:	7bbb      	ldrb	r3, [r7, #14]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d00b      	beq.n	800696a <USBD_StdEPReq+0xfe>
 8006952:	7bbb      	ldrb	r3, [r7, #14]
 8006954:	2b80      	cmp	r3, #128	; 0x80
 8006956:	d008      	beq.n	800696a <USBD_StdEPReq+0xfe>
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	88db      	ldrh	r3, [r3, #6]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d104      	bne.n	800696a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006960:	7bbb      	ldrb	r3, [r7, #14]
 8006962:	4619      	mov	r1, r3
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f001 f97b 	bl	8007c60 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 fd58 	bl	8007420 <USBD_CtlSendStatus>

              break;
 8006970:	e004      	b.n	800697c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006972:	6839      	ldr	r1, [r7, #0]
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 fc88 	bl	800728a <USBD_CtlError>
              break;
 800697a:	bf00      	nop
          }
          break;
 800697c:	e107      	b.n	8006b8e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006984:	b2db      	uxtb	r3, r3
 8006986:	2b02      	cmp	r3, #2
 8006988:	d002      	beq.n	8006990 <USBD_StdEPReq+0x124>
 800698a:	2b03      	cmp	r3, #3
 800698c:	d016      	beq.n	80069bc <USBD_StdEPReq+0x150>
 800698e:	e04b      	b.n	8006a28 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006990:	7bbb      	ldrb	r3, [r7, #14]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d00d      	beq.n	80069b2 <USBD_StdEPReq+0x146>
 8006996:	7bbb      	ldrb	r3, [r7, #14]
 8006998:	2b80      	cmp	r3, #128	; 0x80
 800699a:	d00a      	beq.n	80069b2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800699c:	7bbb      	ldrb	r3, [r7, #14]
 800699e:	4619      	mov	r1, r3
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f001 f95d 	bl	8007c60 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80069a6:	2180      	movs	r1, #128	; 0x80
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f001 f959 	bl	8007c60 <USBD_LL_StallEP>
 80069ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80069b0:	e040      	b.n	8006a34 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80069b2:	6839      	ldr	r1, [r7, #0]
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 fc68 	bl	800728a <USBD_CtlError>
              break;
 80069ba:	e03b      	b.n	8006a34 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	885b      	ldrh	r3, [r3, #2]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d136      	bne.n	8006a32 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80069c4:	7bbb      	ldrb	r3, [r7, #14]
 80069c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d004      	beq.n	80069d8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80069ce:	7bbb      	ldrb	r3, [r7, #14]
 80069d0:	4619      	mov	r1, r3
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f001 f963 	bl	8007c9e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 fd21 	bl	8007420 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80069de:	7bbb      	ldrb	r3, [r7, #14]
 80069e0:	4619      	mov	r1, r3
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f7ff fde2 	bl	80065ac <USBD_CoreFindEP>
 80069e8:	4603      	mov	r3, r0
 80069ea:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80069ec:	7b7b      	ldrb	r3, [r7, #13]
 80069ee:	2bff      	cmp	r3, #255	; 0xff
 80069f0:	d01f      	beq.n	8006a32 <USBD_StdEPReq+0x1c6>
 80069f2:	7b7b      	ldrb	r3, [r7, #13]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d11c      	bne.n	8006a32 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80069f8:	7b7a      	ldrb	r2, [r7, #13]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006a00:	7b7a      	ldrb	r2, [r7, #13]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	32ae      	adds	r2, #174	; 0xae
 8006a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d010      	beq.n	8006a32 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006a10:	7b7a      	ldrb	r2, [r7, #13]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	32ae      	adds	r2, #174	; 0xae
 8006a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	6839      	ldr	r1, [r7, #0]
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	4798      	blx	r3
 8006a22:	4603      	mov	r3, r0
 8006a24:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006a26:	e004      	b.n	8006a32 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006a28:	6839      	ldr	r1, [r7, #0]
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 fc2d 	bl	800728a <USBD_CtlError>
              break;
 8006a30:	e000      	b.n	8006a34 <USBD_StdEPReq+0x1c8>
              break;
 8006a32:	bf00      	nop
          }
          break;
 8006a34:	e0ab      	b.n	8006b8e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d002      	beq.n	8006a48 <USBD_StdEPReq+0x1dc>
 8006a42:	2b03      	cmp	r3, #3
 8006a44:	d032      	beq.n	8006aac <USBD_StdEPReq+0x240>
 8006a46:	e097      	b.n	8006b78 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a48:	7bbb      	ldrb	r3, [r7, #14]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d007      	beq.n	8006a5e <USBD_StdEPReq+0x1f2>
 8006a4e:	7bbb      	ldrb	r3, [r7, #14]
 8006a50:	2b80      	cmp	r3, #128	; 0x80
 8006a52:	d004      	beq.n	8006a5e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006a54:	6839      	ldr	r1, [r7, #0]
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 fc17 	bl	800728a <USBD_CtlError>
                break;
 8006a5c:	e091      	b.n	8006b82 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	da0b      	bge.n	8006a7e <USBD_StdEPReq+0x212>
 8006a66:	7bbb      	ldrb	r3, [r7, #14]
 8006a68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	4413      	add	r3, r2
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	3310      	adds	r3, #16
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	4413      	add	r3, r2
 8006a7a:	3304      	adds	r3, #4
 8006a7c:	e00b      	b.n	8006a96 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006a7e:	7bbb      	ldrb	r3, [r7, #14]
 8006a80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a84:	4613      	mov	r3, r2
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	4413      	add	r3, r2
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	4413      	add	r3, r2
 8006a94:	3304      	adds	r3, #4
 8006a96:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	2202      	movs	r2, #2
 8006aa2:	4619      	mov	r1, r3
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 fc61 	bl	800736c <USBD_CtlSendData>
              break;
 8006aaa:	e06a      	b.n	8006b82 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006aac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	da11      	bge.n	8006ad8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006ab4:	7bbb      	ldrb	r3, [r7, #14]
 8006ab6:	f003 020f 	and.w	r2, r3, #15
 8006aba:	6879      	ldr	r1, [r7, #4]
 8006abc:	4613      	mov	r3, r2
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	4413      	add	r3, r2
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	440b      	add	r3, r1
 8006ac6:	3324      	adds	r3, #36	; 0x24
 8006ac8:	881b      	ldrh	r3, [r3, #0]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d117      	bne.n	8006afe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006ace:	6839      	ldr	r1, [r7, #0]
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 fbda 	bl	800728a <USBD_CtlError>
                  break;
 8006ad6:	e054      	b.n	8006b82 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006ad8:	7bbb      	ldrb	r3, [r7, #14]
 8006ada:	f003 020f 	and.w	r2, r3, #15
 8006ade:	6879      	ldr	r1, [r7, #4]
 8006ae0:	4613      	mov	r3, r2
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	4413      	add	r3, r2
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	440b      	add	r3, r1
 8006aea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006aee:	881b      	ldrh	r3, [r3, #0]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d104      	bne.n	8006afe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006af4:	6839      	ldr	r1, [r7, #0]
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 fbc7 	bl	800728a <USBD_CtlError>
                  break;
 8006afc:	e041      	b.n	8006b82 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006afe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	da0b      	bge.n	8006b1e <USBD_StdEPReq+0x2b2>
 8006b06:	7bbb      	ldrb	r3, [r7, #14]
 8006b08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	4413      	add	r3, r2
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	3310      	adds	r3, #16
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	4413      	add	r3, r2
 8006b1a:	3304      	adds	r3, #4
 8006b1c:	e00b      	b.n	8006b36 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006b1e:	7bbb      	ldrb	r3, [r7, #14]
 8006b20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b24:	4613      	mov	r3, r2
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	4413      	add	r3, r2
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	4413      	add	r3, r2
 8006b34:	3304      	adds	r3, #4
 8006b36:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006b38:	7bbb      	ldrb	r3, [r7, #14]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d002      	beq.n	8006b44 <USBD_StdEPReq+0x2d8>
 8006b3e:	7bbb      	ldrb	r3, [r7, #14]
 8006b40:	2b80      	cmp	r3, #128	; 0x80
 8006b42:	d103      	bne.n	8006b4c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	2200      	movs	r2, #0
 8006b48:	601a      	str	r2, [r3, #0]
 8006b4a:	e00e      	b.n	8006b6a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006b4c:	7bbb      	ldrb	r3, [r7, #14]
 8006b4e:	4619      	mov	r1, r3
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f001 f8c3 	bl	8007cdc <USBD_LL_IsStallEP>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d003      	beq.n	8006b64 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	601a      	str	r2, [r3, #0]
 8006b62:	e002      	b.n	8006b6a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	2200      	movs	r2, #0
 8006b68:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	2202      	movs	r2, #2
 8006b6e:	4619      	mov	r1, r3
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 fbfb 	bl	800736c <USBD_CtlSendData>
              break;
 8006b76:	e004      	b.n	8006b82 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006b78:	6839      	ldr	r1, [r7, #0]
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 fb85 	bl	800728a <USBD_CtlError>
              break;
 8006b80:	bf00      	nop
          }
          break;
 8006b82:	e004      	b.n	8006b8e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006b84:	6839      	ldr	r1, [r7, #0]
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 fb7f 	bl	800728a <USBD_CtlError>
          break;
 8006b8c:	bf00      	nop
      }
      break;
 8006b8e:	e005      	b.n	8006b9c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006b90:	6839      	ldr	r1, [r7, #0]
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 fb79 	bl	800728a <USBD_CtlError>
      break;
 8006b98:	e000      	b.n	8006b9c <USBD_StdEPReq+0x330>
      break;
 8006b9a:	bf00      	nop
  }

  return ret;
 8006b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3710      	adds	r7, #16
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
	...

08006ba8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	885b      	ldrh	r3, [r3, #2]
 8006bc2:	0a1b      	lsrs	r3, r3, #8
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	2b0e      	cmp	r3, #14
 8006bca:	f200 8152 	bhi.w	8006e72 <USBD_GetDescriptor+0x2ca>
 8006bce:	a201      	add	r2, pc, #4	; (adr r2, 8006bd4 <USBD_GetDescriptor+0x2c>)
 8006bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd4:	08006c45 	.word	0x08006c45
 8006bd8:	08006c5d 	.word	0x08006c5d
 8006bdc:	08006c9d 	.word	0x08006c9d
 8006be0:	08006e73 	.word	0x08006e73
 8006be4:	08006e73 	.word	0x08006e73
 8006be8:	08006e13 	.word	0x08006e13
 8006bec:	08006e3f 	.word	0x08006e3f
 8006bf0:	08006e73 	.word	0x08006e73
 8006bf4:	08006e73 	.word	0x08006e73
 8006bf8:	08006e73 	.word	0x08006e73
 8006bfc:	08006e73 	.word	0x08006e73
 8006c00:	08006e73 	.word	0x08006e73
 8006c04:	08006e73 	.word	0x08006e73
 8006c08:	08006e73 	.word	0x08006e73
 8006c0c:	08006c11 	.word	0x08006c11
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c16:	69db      	ldr	r3, [r3, #28]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d00b      	beq.n	8006c34 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c22:	69db      	ldr	r3, [r3, #28]
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	7c12      	ldrb	r2, [r2, #16]
 8006c28:	f107 0108 	add.w	r1, r7, #8
 8006c2c:	4610      	mov	r0, r2
 8006c2e:	4798      	blx	r3
 8006c30:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c32:	e126      	b.n	8006e82 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006c34:	6839      	ldr	r1, [r7, #0]
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 fb27 	bl	800728a <USBD_CtlError>
        err++;
 8006c3c:	7afb      	ldrb	r3, [r7, #11]
 8006c3e:	3301      	adds	r3, #1
 8006c40:	72fb      	strb	r3, [r7, #11]
      break;
 8006c42:	e11e      	b.n	8006e82 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	7c12      	ldrb	r2, [r2, #16]
 8006c50:	f107 0108 	add.w	r1, r7, #8
 8006c54:	4610      	mov	r0, r2
 8006c56:	4798      	blx	r3
 8006c58:	60f8      	str	r0, [r7, #12]
      break;
 8006c5a:	e112      	b.n	8006e82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	7c1b      	ldrb	r3, [r3, #16]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d10d      	bne.n	8006c80 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c6c:	f107 0208 	add.w	r2, r7, #8
 8006c70:	4610      	mov	r0, r2
 8006c72:	4798      	blx	r3
 8006c74:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	3301      	adds	r3, #1
 8006c7a:	2202      	movs	r2, #2
 8006c7c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006c7e:	e100      	b.n	8006e82 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c88:	f107 0208 	add.w	r2, r7, #8
 8006c8c:	4610      	mov	r0, r2
 8006c8e:	4798      	blx	r3
 8006c90:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	3301      	adds	r3, #1
 8006c96:	2202      	movs	r2, #2
 8006c98:	701a      	strb	r2, [r3, #0]
      break;
 8006c9a:	e0f2      	b.n	8006e82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	885b      	ldrh	r3, [r3, #2]
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	2b05      	cmp	r3, #5
 8006ca4:	f200 80ac 	bhi.w	8006e00 <USBD_GetDescriptor+0x258>
 8006ca8:	a201      	add	r2, pc, #4	; (adr r2, 8006cb0 <USBD_GetDescriptor+0x108>)
 8006caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cae:	bf00      	nop
 8006cb0:	08006cc9 	.word	0x08006cc9
 8006cb4:	08006cfd 	.word	0x08006cfd
 8006cb8:	08006d31 	.word	0x08006d31
 8006cbc:	08006d65 	.word	0x08006d65
 8006cc0:	08006d99 	.word	0x08006d99
 8006cc4:	08006dcd 	.word	0x08006dcd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d00b      	beq.n	8006cec <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	7c12      	ldrb	r2, [r2, #16]
 8006ce0:	f107 0108 	add.w	r1, r7, #8
 8006ce4:	4610      	mov	r0, r2
 8006ce6:	4798      	blx	r3
 8006ce8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cea:	e091      	b.n	8006e10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006cec:	6839      	ldr	r1, [r7, #0]
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 facb 	bl	800728a <USBD_CtlError>
            err++;
 8006cf4:	7afb      	ldrb	r3, [r7, #11]
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	72fb      	strb	r3, [r7, #11]
          break;
 8006cfa:	e089      	b.n	8006e10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d00b      	beq.n	8006d20 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	7c12      	ldrb	r2, [r2, #16]
 8006d14:	f107 0108 	add.w	r1, r7, #8
 8006d18:	4610      	mov	r0, r2
 8006d1a:	4798      	blx	r3
 8006d1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d1e:	e077      	b.n	8006e10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006d20:	6839      	ldr	r1, [r7, #0]
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 fab1 	bl	800728a <USBD_CtlError>
            err++;
 8006d28:	7afb      	ldrb	r3, [r7, #11]
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	72fb      	strb	r3, [r7, #11]
          break;
 8006d2e:	e06f      	b.n	8006e10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d00b      	beq.n	8006d54 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	7c12      	ldrb	r2, [r2, #16]
 8006d48:	f107 0108 	add.w	r1, r7, #8
 8006d4c:	4610      	mov	r0, r2
 8006d4e:	4798      	blx	r3
 8006d50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d52:	e05d      	b.n	8006e10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006d54:	6839      	ldr	r1, [r7, #0]
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 fa97 	bl	800728a <USBD_CtlError>
            err++;
 8006d5c:	7afb      	ldrb	r3, [r7, #11]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	72fb      	strb	r3, [r7, #11]
          break;
 8006d62:	e055      	b.n	8006e10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d00b      	beq.n	8006d88 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d76:	691b      	ldr	r3, [r3, #16]
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	7c12      	ldrb	r2, [r2, #16]
 8006d7c:	f107 0108 	add.w	r1, r7, #8
 8006d80:	4610      	mov	r0, r2
 8006d82:	4798      	blx	r3
 8006d84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d86:	e043      	b.n	8006e10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006d88:	6839      	ldr	r1, [r7, #0]
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 fa7d 	bl	800728a <USBD_CtlError>
            err++;
 8006d90:	7afb      	ldrb	r3, [r7, #11]
 8006d92:	3301      	adds	r3, #1
 8006d94:	72fb      	strb	r3, [r7, #11]
          break;
 8006d96:	e03b      	b.n	8006e10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d9e:	695b      	ldr	r3, [r3, #20]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d00b      	beq.n	8006dbc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006daa:	695b      	ldr	r3, [r3, #20]
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	7c12      	ldrb	r2, [r2, #16]
 8006db0:	f107 0108 	add.w	r1, r7, #8
 8006db4:	4610      	mov	r0, r2
 8006db6:	4798      	blx	r3
 8006db8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dba:	e029      	b.n	8006e10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006dbc:	6839      	ldr	r1, [r7, #0]
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 fa63 	bl	800728a <USBD_CtlError>
            err++;
 8006dc4:	7afb      	ldrb	r3, [r7, #11]
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	72fb      	strb	r3, [r7, #11]
          break;
 8006dca:	e021      	b.n	8006e10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dd2:	699b      	ldr	r3, [r3, #24]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00b      	beq.n	8006df0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dde:	699b      	ldr	r3, [r3, #24]
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	7c12      	ldrb	r2, [r2, #16]
 8006de4:	f107 0108 	add.w	r1, r7, #8
 8006de8:	4610      	mov	r0, r2
 8006dea:	4798      	blx	r3
 8006dec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dee:	e00f      	b.n	8006e10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006df0:	6839      	ldr	r1, [r7, #0]
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 fa49 	bl	800728a <USBD_CtlError>
            err++;
 8006df8:	7afb      	ldrb	r3, [r7, #11]
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	72fb      	strb	r3, [r7, #11]
          break;
 8006dfe:	e007      	b.n	8006e10 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006e00:	6839      	ldr	r1, [r7, #0]
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 fa41 	bl	800728a <USBD_CtlError>
          err++;
 8006e08:	7afb      	ldrb	r3, [r7, #11]
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006e0e:	bf00      	nop
      }
      break;
 8006e10:	e037      	b.n	8006e82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	7c1b      	ldrb	r3, [r3, #16]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d109      	bne.n	8006e2e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e22:	f107 0208 	add.w	r2, r7, #8
 8006e26:	4610      	mov	r0, r2
 8006e28:	4798      	blx	r3
 8006e2a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e2c:	e029      	b.n	8006e82 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006e2e:	6839      	ldr	r1, [r7, #0]
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 fa2a 	bl	800728a <USBD_CtlError>
        err++;
 8006e36:	7afb      	ldrb	r3, [r7, #11]
 8006e38:	3301      	adds	r3, #1
 8006e3a:	72fb      	strb	r3, [r7, #11]
      break;
 8006e3c:	e021      	b.n	8006e82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	7c1b      	ldrb	r3, [r3, #16]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d10d      	bne.n	8006e62 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e4e:	f107 0208 	add.w	r2, r7, #8
 8006e52:	4610      	mov	r0, r2
 8006e54:	4798      	blx	r3
 8006e56:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	2207      	movs	r2, #7
 8006e5e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e60:	e00f      	b.n	8006e82 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006e62:	6839      	ldr	r1, [r7, #0]
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 fa10 	bl	800728a <USBD_CtlError>
        err++;
 8006e6a:	7afb      	ldrb	r3, [r7, #11]
 8006e6c:	3301      	adds	r3, #1
 8006e6e:	72fb      	strb	r3, [r7, #11]
      break;
 8006e70:	e007      	b.n	8006e82 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8006e72:	6839      	ldr	r1, [r7, #0]
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 fa08 	bl	800728a <USBD_CtlError>
      err++;
 8006e7a:	7afb      	ldrb	r3, [r7, #11]
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	72fb      	strb	r3, [r7, #11]
      break;
 8006e80:	bf00      	nop
  }

  if (err != 0U)
 8006e82:	7afb      	ldrb	r3, [r7, #11]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d11e      	bne.n	8006ec6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	88db      	ldrh	r3, [r3, #6]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d016      	beq.n	8006ebe <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8006e90:	893b      	ldrh	r3, [r7, #8]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d00e      	beq.n	8006eb4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	88da      	ldrh	r2, [r3, #6]
 8006e9a:	893b      	ldrh	r3, [r7, #8]
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	bf28      	it	cs
 8006ea0:	4613      	movcs	r3, r2
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006ea6:	893b      	ldrh	r3, [r7, #8]
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	68f9      	ldr	r1, [r7, #12]
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 fa5d 	bl	800736c <USBD_CtlSendData>
 8006eb2:	e009      	b.n	8006ec8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006eb4:	6839      	ldr	r1, [r7, #0]
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 f9e7 	bl	800728a <USBD_CtlError>
 8006ebc:	e004      	b.n	8006ec8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 faae 	bl	8007420 <USBD_CtlSendStatus>
 8006ec4:	e000      	b.n	8006ec8 <USBD_GetDescriptor+0x320>
    return;
 8006ec6:	bf00      	nop
  }
}
 8006ec8:	3710      	adds	r7, #16
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop

08006ed0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	889b      	ldrh	r3, [r3, #4]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d131      	bne.n	8006f46 <USBD_SetAddress+0x76>
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	88db      	ldrh	r3, [r3, #6]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d12d      	bne.n	8006f46 <USBD_SetAddress+0x76>
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	885b      	ldrh	r3, [r3, #2]
 8006eee:	2b7f      	cmp	r3, #127	; 0x7f
 8006ef0:	d829      	bhi.n	8006f46 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	885b      	ldrh	r3, [r3, #2]
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006efc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	2b03      	cmp	r3, #3
 8006f08:	d104      	bne.n	8006f14 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006f0a:	6839      	ldr	r1, [r7, #0]
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 f9bc 	bl	800728a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f12:	e01d      	b.n	8006f50 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	7bfa      	ldrb	r2, [r7, #15]
 8006f18:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006f1c:	7bfb      	ldrb	r3, [r7, #15]
 8006f1e:	4619      	mov	r1, r3
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f000 ff07 	bl	8007d34 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 fa7a 	bl	8007420 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006f2c:	7bfb      	ldrb	r3, [r7, #15]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d004      	beq.n	8006f3c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2202      	movs	r2, #2
 8006f36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f3a:	e009      	b.n	8006f50 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f44:	e004      	b.n	8006f50 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006f46:	6839      	ldr	r1, [r7, #0]
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 f99e 	bl	800728a <USBD_CtlError>
  }
}
 8006f4e:	bf00      	nop
 8006f50:	bf00      	nop
 8006f52:	3710      	adds	r7, #16
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b084      	sub	sp, #16
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f62:	2300      	movs	r3, #0
 8006f64:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	885b      	ldrh	r3, [r3, #2]
 8006f6a:	b2da      	uxtb	r2, r3
 8006f6c:	4b4e      	ldr	r3, [pc, #312]	; (80070a8 <USBD_SetConfig+0x150>)
 8006f6e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006f70:	4b4d      	ldr	r3, [pc, #308]	; (80070a8 <USBD_SetConfig+0x150>)
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d905      	bls.n	8006f84 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006f78:	6839      	ldr	r1, [r7, #0]
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 f985 	bl	800728a <USBD_CtlError>
    return USBD_FAIL;
 8006f80:	2303      	movs	r3, #3
 8006f82:	e08c      	b.n	800709e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	2b02      	cmp	r3, #2
 8006f8e:	d002      	beq.n	8006f96 <USBD_SetConfig+0x3e>
 8006f90:	2b03      	cmp	r3, #3
 8006f92:	d029      	beq.n	8006fe8 <USBD_SetConfig+0x90>
 8006f94:	e075      	b.n	8007082 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006f96:	4b44      	ldr	r3, [pc, #272]	; (80070a8 <USBD_SetConfig+0x150>)
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d020      	beq.n	8006fe0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006f9e:	4b42      	ldr	r3, [pc, #264]	; (80070a8 <USBD_SetConfig+0x150>)
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006fa8:	4b3f      	ldr	r3, [pc, #252]	; (80070a8 <USBD_SetConfig+0x150>)
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	4619      	mov	r1, r3
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f7fe ffbd 	bl	8005f2e <USBD_SetClassConfig>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006fb8:	7bfb      	ldrb	r3, [r7, #15]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d008      	beq.n	8006fd0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006fbe:	6839      	ldr	r1, [r7, #0]
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 f962 	bl	800728a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2202      	movs	r2, #2
 8006fca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006fce:	e065      	b.n	800709c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 fa25 	bl	8007420 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2203      	movs	r2, #3
 8006fda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006fde:	e05d      	b.n	800709c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 fa1d 	bl	8007420 <USBD_CtlSendStatus>
      break;
 8006fe6:	e059      	b.n	800709c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006fe8:	4b2f      	ldr	r3, [pc, #188]	; (80070a8 <USBD_SetConfig+0x150>)
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d112      	bne.n	8007016 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2202      	movs	r2, #2
 8006ff4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006ff8:	4b2b      	ldr	r3, [pc, #172]	; (80070a8 <USBD_SetConfig+0x150>)
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007002:	4b29      	ldr	r3, [pc, #164]	; (80070a8 <USBD_SetConfig+0x150>)
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	4619      	mov	r1, r3
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f7fe ffac 	bl	8005f66 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 fa06 	bl	8007420 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007014:	e042      	b.n	800709c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007016:	4b24      	ldr	r3, [pc, #144]	; (80070a8 <USBD_SetConfig+0x150>)
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	461a      	mov	r2, r3
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	429a      	cmp	r2, r3
 8007022:	d02a      	beq.n	800707a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	b2db      	uxtb	r3, r3
 800702a:	4619      	mov	r1, r3
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f7fe ff9a 	bl	8005f66 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007032:	4b1d      	ldr	r3, [pc, #116]	; (80070a8 <USBD_SetConfig+0x150>)
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	461a      	mov	r2, r3
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800703c:	4b1a      	ldr	r3, [pc, #104]	; (80070a8 <USBD_SetConfig+0x150>)
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	4619      	mov	r1, r3
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f7fe ff73 	bl	8005f2e <USBD_SetClassConfig>
 8007048:	4603      	mov	r3, r0
 800704a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800704c:	7bfb      	ldrb	r3, [r7, #15]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d00f      	beq.n	8007072 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007052:	6839      	ldr	r1, [r7, #0]
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 f918 	bl	800728a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	b2db      	uxtb	r3, r3
 8007060:	4619      	mov	r1, r3
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f7fe ff7f 	bl	8005f66 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2202      	movs	r2, #2
 800706c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007070:	e014      	b.n	800709c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 f9d4 	bl	8007420 <USBD_CtlSendStatus>
      break;
 8007078:	e010      	b.n	800709c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 f9d0 	bl	8007420 <USBD_CtlSendStatus>
      break;
 8007080:	e00c      	b.n	800709c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007082:	6839      	ldr	r1, [r7, #0]
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 f900 	bl	800728a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800708a:	4b07      	ldr	r3, [pc, #28]	; (80070a8 <USBD_SetConfig+0x150>)
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	4619      	mov	r1, r3
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f7fe ff68 	bl	8005f66 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007096:	2303      	movs	r3, #3
 8007098:	73fb      	strb	r3, [r7, #15]
      break;
 800709a:	bf00      	nop
  }

  return ret;
 800709c:	7bfb      	ldrb	r3, [r7, #15]
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3710      	adds	r7, #16
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	20000170 	.word	0x20000170

080070ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b082      	sub	sp, #8
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	88db      	ldrh	r3, [r3, #6]
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d004      	beq.n	80070c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80070be:	6839      	ldr	r1, [r7, #0]
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 f8e2 	bl	800728a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80070c6:	e023      	b.n	8007110 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	dc02      	bgt.n	80070da <USBD_GetConfig+0x2e>
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	dc03      	bgt.n	80070e0 <USBD_GetConfig+0x34>
 80070d8:	e015      	b.n	8007106 <USBD_GetConfig+0x5a>
 80070da:	2b03      	cmp	r3, #3
 80070dc:	d00b      	beq.n	80070f6 <USBD_GetConfig+0x4a>
 80070de:	e012      	b.n	8007106 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	3308      	adds	r3, #8
 80070ea:	2201      	movs	r2, #1
 80070ec:	4619      	mov	r1, r3
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 f93c 	bl	800736c <USBD_CtlSendData>
        break;
 80070f4:	e00c      	b.n	8007110 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	3304      	adds	r3, #4
 80070fa:	2201      	movs	r2, #1
 80070fc:	4619      	mov	r1, r3
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 f934 	bl	800736c <USBD_CtlSendData>
        break;
 8007104:	e004      	b.n	8007110 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007106:	6839      	ldr	r1, [r7, #0]
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 f8be 	bl	800728a <USBD_CtlError>
        break;
 800710e:	bf00      	nop
}
 8007110:	bf00      	nop
 8007112:	3708      	adds	r7, #8
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007128:	b2db      	uxtb	r3, r3
 800712a:	3b01      	subs	r3, #1
 800712c:	2b02      	cmp	r3, #2
 800712e:	d81e      	bhi.n	800716e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	88db      	ldrh	r3, [r3, #6]
 8007134:	2b02      	cmp	r3, #2
 8007136:	d004      	beq.n	8007142 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007138:	6839      	ldr	r1, [r7, #0]
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 f8a5 	bl	800728a <USBD_CtlError>
        break;
 8007140:	e01a      	b.n	8007178 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2201      	movs	r2, #1
 8007146:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800714e:	2b00      	cmp	r3, #0
 8007150:	d005      	beq.n	800715e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	68db      	ldr	r3, [r3, #12]
 8007156:	f043 0202 	orr.w	r2, r3, #2
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	330c      	adds	r3, #12
 8007162:	2202      	movs	r2, #2
 8007164:	4619      	mov	r1, r3
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 f900 	bl	800736c <USBD_CtlSendData>
      break;
 800716c:	e004      	b.n	8007178 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800716e:	6839      	ldr	r1, [r7, #0]
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 f88a 	bl	800728a <USBD_CtlError>
      break;
 8007176:	bf00      	nop
  }
}
 8007178:	bf00      	nop
 800717a:	3708      	adds	r7, #8
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	885b      	ldrh	r3, [r3, #2]
 800718e:	2b01      	cmp	r3, #1
 8007190:	d107      	bne.n	80071a2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2201      	movs	r2, #1
 8007196:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 f940 	bl	8007420 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80071a0:	e013      	b.n	80071ca <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	885b      	ldrh	r3, [r3, #2]
 80071a6:	2b02      	cmp	r3, #2
 80071a8:	d10b      	bne.n	80071c2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	889b      	ldrh	r3, [r3, #4]
 80071ae:	0a1b      	lsrs	r3, r3, #8
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	b2da      	uxtb	r2, r3
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 f930 	bl	8007420 <USBD_CtlSendStatus>
}
 80071c0:	e003      	b.n	80071ca <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80071c2:	6839      	ldr	r1, [r7, #0]
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 f860 	bl	800728a <USBD_CtlError>
}
 80071ca:	bf00      	nop
 80071cc:	3708      	adds	r7, #8
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}

080071d2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071d2:	b580      	push	{r7, lr}
 80071d4:	b082      	sub	sp, #8
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
 80071da:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	3b01      	subs	r3, #1
 80071e6:	2b02      	cmp	r3, #2
 80071e8:	d80b      	bhi.n	8007202 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	885b      	ldrh	r3, [r3, #2]
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d10c      	bne.n	800720c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 f910 	bl	8007420 <USBD_CtlSendStatus>
      }
      break;
 8007200:	e004      	b.n	800720c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007202:	6839      	ldr	r1, [r7, #0]
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 f840 	bl	800728a <USBD_CtlError>
      break;
 800720a:	e000      	b.n	800720e <USBD_ClrFeature+0x3c>
      break;
 800720c:	bf00      	nop
  }
}
 800720e:	bf00      	nop
 8007210:	3708      	adds	r7, #8
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}

08007216 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007216:	b580      	push	{r7, lr}
 8007218:	b084      	sub	sp, #16
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
 800721e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	781a      	ldrb	r2, [r3, #0]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	3301      	adds	r3, #1
 8007230:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	781a      	ldrb	r2, [r3, #0]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	3301      	adds	r3, #1
 800723e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f7ff fa17 	bl	8006674 <SWAPBYTE>
 8007246:	4603      	mov	r3, r0
 8007248:	461a      	mov	r2, r3
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	3301      	adds	r3, #1
 8007252:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	3301      	adds	r3, #1
 8007258:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800725a:	68f8      	ldr	r0, [r7, #12]
 800725c:	f7ff fa0a 	bl	8006674 <SWAPBYTE>
 8007260:	4603      	mov	r3, r0
 8007262:	461a      	mov	r2, r3
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	3301      	adds	r3, #1
 800726c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	3301      	adds	r3, #1
 8007272:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007274:	68f8      	ldr	r0, [r7, #12]
 8007276:	f7ff f9fd 	bl	8006674 <SWAPBYTE>
 800727a:	4603      	mov	r3, r0
 800727c:	461a      	mov	r2, r3
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	80da      	strh	r2, [r3, #6]
}
 8007282:	bf00      	nop
 8007284:	3710      	adds	r7, #16
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}

0800728a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800728a:	b580      	push	{r7, lr}
 800728c:	b082      	sub	sp, #8
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
 8007292:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007294:	2180      	movs	r1, #128	; 0x80
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 fce2 	bl	8007c60 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800729c:	2100      	movs	r1, #0
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 fcde 	bl	8007c60 <USBD_LL_StallEP>
}
 80072a4:	bf00      	nop
 80072a6:	3708      	adds	r7, #8
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b086      	sub	sp, #24
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	60b9      	str	r1, [r7, #8]
 80072b6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80072b8:	2300      	movs	r3, #0
 80072ba:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d036      	beq.n	8007330 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80072c6:	6938      	ldr	r0, [r7, #16]
 80072c8:	f000 f836 	bl	8007338 <USBD_GetLen>
 80072cc:	4603      	mov	r3, r0
 80072ce:	3301      	adds	r3, #1
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	005b      	lsls	r3, r3, #1
 80072d4:	b29a      	uxth	r2, r3
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80072da:	7dfb      	ldrb	r3, [r7, #23]
 80072dc:	68ba      	ldr	r2, [r7, #8]
 80072de:	4413      	add	r3, r2
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	7812      	ldrb	r2, [r2, #0]
 80072e4:	701a      	strb	r2, [r3, #0]
  idx++;
 80072e6:	7dfb      	ldrb	r3, [r7, #23]
 80072e8:	3301      	adds	r3, #1
 80072ea:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80072ec:	7dfb      	ldrb	r3, [r7, #23]
 80072ee:	68ba      	ldr	r2, [r7, #8]
 80072f0:	4413      	add	r3, r2
 80072f2:	2203      	movs	r2, #3
 80072f4:	701a      	strb	r2, [r3, #0]
  idx++;
 80072f6:	7dfb      	ldrb	r3, [r7, #23]
 80072f8:	3301      	adds	r3, #1
 80072fa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80072fc:	e013      	b.n	8007326 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80072fe:	7dfb      	ldrb	r3, [r7, #23]
 8007300:	68ba      	ldr	r2, [r7, #8]
 8007302:	4413      	add	r3, r2
 8007304:	693a      	ldr	r2, [r7, #16]
 8007306:	7812      	ldrb	r2, [r2, #0]
 8007308:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	3301      	adds	r3, #1
 800730e:	613b      	str	r3, [r7, #16]
    idx++;
 8007310:	7dfb      	ldrb	r3, [r7, #23]
 8007312:	3301      	adds	r3, #1
 8007314:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007316:	7dfb      	ldrb	r3, [r7, #23]
 8007318:	68ba      	ldr	r2, [r7, #8]
 800731a:	4413      	add	r3, r2
 800731c:	2200      	movs	r2, #0
 800731e:	701a      	strb	r2, [r3, #0]
    idx++;
 8007320:	7dfb      	ldrb	r3, [r7, #23]
 8007322:	3301      	adds	r3, #1
 8007324:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d1e7      	bne.n	80072fe <USBD_GetString+0x52>
 800732e:	e000      	b.n	8007332 <USBD_GetString+0x86>
    return;
 8007330:	bf00      	nop
  }
}
 8007332:	3718      	adds	r7, #24
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007338:	b480      	push	{r7}
 800733a:	b085      	sub	sp, #20
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007340:	2300      	movs	r3, #0
 8007342:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007348:	e005      	b.n	8007356 <USBD_GetLen+0x1e>
  {
    len++;
 800734a:	7bfb      	ldrb	r3, [r7, #15]
 800734c:	3301      	adds	r3, #1
 800734e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	3301      	adds	r3, #1
 8007354:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d1f5      	bne.n	800734a <USBD_GetLen+0x12>
  }

  return len;
 800735e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007360:	4618      	mov	r0, r3
 8007362:	3714      	adds	r7, #20
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2202      	movs	r2, #2
 800737c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	68ba      	ldr	r2, [r7, #8]
 8007390:	2100      	movs	r1, #0
 8007392:	68f8      	ldr	r0, [r7, #12]
 8007394:	f000 fced 	bl	8007d72 <USBD_LL_Transmit>

  return USBD_OK;
 8007398:	2300      	movs	r3, #0
}
 800739a:	4618      	mov	r0, r3
 800739c:	3710      	adds	r7, #16
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}

080073a2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b084      	sub	sp, #16
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	60f8      	str	r0, [r7, #12]
 80073aa:	60b9      	str	r1, [r7, #8]
 80073ac:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	68ba      	ldr	r2, [r7, #8]
 80073b2:	2100      	movs	r1, #0
 80073b4:	68f8      	ldr	r0, [r7, #12]
 80073b6:	f000 fcdc 	bl	8007d72 <USBD_LL_Transmit>

  return USBD_OK;
 80073ba:	2300      	movs	r3, #0
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3710      	adds	r7, #16
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2203      	movs	r2, #3
 80073d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	68ba      	ldr	r2, [r7, #8]
 80073ec:	2100      	movs	r1, #0
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	f000 fce0 	bl	8007db4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80073f4:	2300      	movs	r3, #0
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3710      	adds	r7, #16
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}

080073fe <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80073fe:	b580      	push	{r7, lr}
 8007400:	b084      	sub	sp, #16
 8007402:	af00      	add	r7, sp, #0
 8007404:	60f8      	str	r0, [r7, #12]
 8007406:	60b9      	str	r1, [r7, #8]
 8007408:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	68ba      	ldr	r2, [r7, #8]
 800740e:	2100      	movs	r1, #0
 8007410:	68f8      	ldr	r0, [r7, #12]
 8007412:	f000 fccf 	bl	8007db4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007416:	2300      	movs	r3, #0
}
 8007418:	4618      	mov	r0, r3
 800741a:	3710      	adds	r7, #16
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2204      	movs	r2, #4
 800742c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007430:	2300      	movs	r3, #0
 8007432:	2200      	movs	r2, #0
 8007434:	2100      	movs	r1, #0
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 fc9b 	bl	8007d72 <USBD_LL_Transmit>

  return USBD_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	3708      	adds	r7, #8
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}

08007446 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007446:	b580      	push	{r7, lr}
 8007448:	b082      	sub	sp, #8
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2205      	movs	r2, #5
 8007452:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007456:	2300      	movs	r3, #0
 8007458:	2200      	movs	r2, #0
 800745a:	2100      	movs	r1, #0
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 fca9 	bl	8007db4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3708      	adds	r7, #8
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007470:	2200      	movs	r2, #0
 8007472:	4912      	ldr	r1, [pc, #72]	; (80074bc <MX_USB_DEVICE_Init+0x50>)
 8007474:	4812      	ldr	r0, [pc, #72]	; (80074c0 <MX_USB_DEVICE_Init+0x54>)
 8007476:	f7fe fcdd 	bl	8005e34 <USBD_Init>
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d001      	beq.n	8007484 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007480:	f7f9 f940 	bl	8000704 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007484:	490f      	ldr	r1, [pc, #60]	; (80074c4 <MX_USB_DEVICE_Init+0x58>)
 8007486:	480e      	ldr	r0, [pc, #56]	; (80074c0 <MX_USB_DEVICE_Init+0x54>)
 8007488:	f7fe fd04 	bl	8005e94 <USBD_RegisterClass>
 800748c:	4603      	mov	r3, r0
 800748e:	2b00      	cmp	r3, #0
 8007490:	d001      	beq.n	8007496 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007492:	f7f9 f937 	bl	8000704 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007496:	490c      	ldr	r1, [pc, #48]	; (80074c8 <MX_USB_DEVICE_Init+0x5c>)
 8007498:	4809      	ldr	r0, [pc, #36]	; (80074c0 <MX_USB_DEVICE_Init+0x54>)
 800749a:	f7fe fc3b 	bl	8005d14 <USBD_CDC_RegisterInterface>
 800749e:	4603      	mov	r3, r0
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d001      	beq.n	80074a8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80074a4:	f7f9 f92e 	bl	8000704 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80074a8:	4805      	ldr	r0, [pc, #20]	; (80074c0 <MX_USB_DEVICE_Init+0x54>)
 80074aa:	f7fe fd29 	bl	8005f00 <USBD_Start>
 80074ae:	4603      	mov	r3, r0
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d001      	beq.n	80074b8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80074b4:	f7f9 f926 	bl	8000704 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80074b8:	bf00      	nop
 80074ba:	bd80      	pop	{r7, pc}
 80074bc:	200000ac 	.word	0x200000ac
 80074c0:	20000174 	.word	0x20000174
 80074c4:	20000018 	.word	0x20000018
 80074c8:	20000098 	.word	0x20000098

080074cc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80074d0:	2200      	movs	r2, #0
 80074d2:	4905      	ldr	r1, [pc, #20]	; (80074e8 <CDC_Init_FS+0x1c>)
 80074d4:	4805      	ldr	r0, [pc, #20]	; (80074ec <CDC_Init_FS+0x20>)
 80074d6:	f7fe fc37 	bl	8005d48 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80074da:	4905      	ldr	r1, [pc, #20]	; (80074f0 <CDC_Init_FS+0x24>)
 80074dc:	4803      	ldr	r0, [pc, #12]	; (80074ec <CDC_Init_FS+0x20>)
 80074de:	f7fe fc55 	bl	8005d8c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80074e2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	20000c50 	.word	0x20000c50
 80074ec:	20000174 	.word	0x20000174
 80074f0:	20000450 	.word	0x20000450

080074f4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80074f4:	b480      	push	{r7}
 80074f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80074f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
 800750a:	4603      	mov	r3, r0
 800750c:	6039      	str	r1, [r7, #0]
 800750e:	71fb      	strb	r3, [r7, #7]
 8007510:	4613      	mov	r3, r2
 8007512:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007514:	79fb      	ldrb	r3, [r7, #7]
 8007516:	2b23      	cmp	r3, #35	; 0x23
 8007518:	d84a      	bhi.n	80075b0 <CDC_Control_FS+0xac>
 800751a:	a201      	add	r2, pc, #4	; (adr r2, 8007520 <CDC_Control_FS+0x1c>)
 800751c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007520:	080075b1 	.word	0x080075b1
 8007524:	080075b1 	.word	0x080075b1
 8007528:	080075b1 	.word	0x080075b1
 800752c:	080075b1 	.word	0x080075b1
 8007530:	080075b1 	.word	0x080075b1
 8007534:	080075b1 	.word	0x080075b1
 8007538:	080075b1 	.word	0x080075b1
 800753c:	080075b1 	.word	0x080075b1
 8007540:	080075b1 	.word	0x080075b1
 8007544:	080075b1 	.word	0x080075b1
 8007548:	080075b1 	.word	0x080075b1
 800754c:	080075b1 	.word	0x080075b1
 8007550:	080075b1 	.word	0x080075b1
 8007554:	080075b1 	.word	0x080075b1
 8007558:	080075b1 	.word	0x080075b1
 800755c:	080075b1 	.word	0x080075b1
 8007560:	080075b1 	.word	0x080075b1
 8007564:	080075b1 	.word	0x080075b1
 8007568:	080075b1 	.word	0x080075b1
 800756c:	080075b1 	.word	0x080075b1
 8007570:	080075b1 	.word	0x080075b1
 8007574:	080075b1 	.word	0x080075b1
 8007578:	080075b1 	.word	0x080075b1
 800757c:	080075b1 	.word	0x080075b1
 8007580:	080075b1 	.word	0x080075b1
 8007584:	080075b1 	.word	0x080075b1
 8007588:	080075b1 	.word	0x080075b1
 800758c:	080075b1 	.word	0x080075b1
 8007590:	080075b1 	.word	0x080075b1
 8007594:	080075b1 	.word	0x080075b1
 8007598:	080075b1 	.word	0x080075b1
 800759c:	080075b1 	.word	0x080075b1
 80075a0:	080075b1 	.word	0x080075b1
 80075a4:	080075b1 	.word	0x080075b1
 80075a8:	080075b1 	.word	0x080075b1
 80075ac:	080075b1 	.word	0x080075b1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80075b0:	bf00      	nop
  }

  return (USBD_OK);
 80075b2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b082      	sub	sp, #8
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80075ca:	6879      	ldr	r1, [r7, #4]
 80075cc:	4805      	ldr	r0, [pc, #20]	; (80075e4 <CDC_Receive_FS+0x24>)
 80075ce:	f7fe fbdd 	bl	8005d8c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80075d2:	4804      	ldr	r0, [pc, #16]	; (80075e4 <CDC_Receive_FS+0x24>)
 80075d4:	f7fe fbf8 	bl	8005dc8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80075d8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3708      	adds	r7, #8
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
 80075e2:	bf00      	nop
 80075e4:	20000174 	.word	0x20000174

080075e8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b087      	sub	sp, #28
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	60b9      	str	r1, [r7, #8]
 80075f2:	4613      	mov	r3, r2
 80075f4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80075f6:	2300      	movs	r3, #0
 80075f8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80075fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80075fe:	4618      	mov	r0, r3
 8007600:	371c      	adds	r7, #28
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr
	...

0800760c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
 8007612:	4603      	mov	r3, r0
 8007614:	6039      	str	r1, [r7, #0]
 8007616:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	2212      	movs	r2, #18
 800761c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800761e:	4b03      	ldr	r3, [pc, #12]	; (800762c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007620:	4618      	mov	r0, r3
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr
 800762c:	200000cc 	.word	0x200000cc

08007630 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007630:	b480      	push	{r7}
 8007632:	b083      	sub	sp, #12
 8007634:	af00      	add	r7, sp, #0
 8007636:	4603      	mov	r3, r0
 8007638:	6039      	str	r1, [r7, #0]
 800763a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	2204      	movs	r2, #4
 8007640:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007642:	4b03      	ldr	r3, [pc, #12]	; (8007650 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007644:	4618      	mov	r0, r3
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr
 8007650:	200000ec 	.word	0x200000ec

08007654 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0
 800765a:	4603      	mov	r3, r0
 800765c:	6039      	str	r1, [r7, #0]
 800765e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007660:	79fb      	ldrb	r3, [r7, #7]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d105      	bne.n	8007672 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007666:	683a      	ldr	r2, [r7, #0]
 8007668:	4907      	ldr	r1, [pc, #28]	; (8007688 <USBD_FS_ProductStrDescriptor+0x34>)
 800766a:	4808      	ldr	r0, [pc, #32]	; (800768c <USBD_FS_ProductStrDescriptor+0x38>)
 800766c:	f7ff fe1e 	bl	80072ac <USBD_GetString>
 8007670:	e004      	b.n	800767c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007672:	683a      	ldr	r2, [r7, #0]
 8007674:	4904      	ldr	r1, [pc, #16]	; (8007688 <USBD_FS_ProductStrDescriptor+0x34>)
 8007676:	4805      	ldr	r0, [pc, #20]	; (800768c <USBD_FS_ProductStrDescriptor+0x38>)
 8007678:	f7ff fe18 	bl	80072ac <USBD_GetString>
  }
  return USBD_StrDesc;
 800767c:	4b02      	ldr	r3, [pc, #8]	; (8007688 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800767e:	4618      	mov	r0, r3
 8007680:	3708      	adds	r7, #8
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
 8007686:	bf00      	nop
 8007688:	20001450 	.word	0x20001450
 800768c:	08007fb0 	.word	0x08007fb0

08007690 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
 8007696:	4603      	mov	r3, r0
 8007698:	6039      	str	r1, [r7, #0]
 800769a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800769c:	683a      	ldr	r2, [r7, #0]
 800769e:	4904      	ldr	r1, [pc, #16]	; (80076b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80076a0:	4804      	ldr	r0, [pc, #16]	; (80076b4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80076a2:	f7ff fe03 	bl	80072ac <USBD_GetString>
  return USBD_StrDesc;
 80076a6:	4b02      	ldr	r3, [pc, #8]	; (80076b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3708      	adds	r7, #8
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}
 80076b0:	20001450 	.word	0x20001450
 80076b4:	08007fc8 	.word	0x08007fc8

080076b8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
 80076be:	4603      	mov	r3, r0
 80076c0:	6039      	str	r1, [r7, #0]
 80076c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	221a      	movs	r2, #26
 80076c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80076ca:	f000 f855 	bl	8007778 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80076ce:	4b02      	ldr	r3, [pc, #8]	; (80076d8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3708      	adds	r7, #8
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	200000f0 	.word	0x200000f0

080076dc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	4603      	mov	r3, r0
 80076e4:	6039      	str	r1, [r7, #0]
 80076e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80076e8:	79fb      	ldrb	r3, [r7, #7]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d105      	bne.n	80076fa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80076ee:	683a      	ldr	r2, [r7, #0]
 80076f0:	4907      	ldr	r1, [pc, #28]	; (8007710 <USBD_FS_ConfigStrDescriptor+0x34>)
 80076f2:	4808      	ldr	r0, [pc, #32]	; (8007714 <USBD_FS_ConfigStrDescriptor+0x38>)
 80076f4:	f7ff fdda 	bl	80072ac <USBD_GetString>
 80076f8:	e004      	b.n	8007704 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80076fa:	683a      	ldr	r2, [r7, #0]
 80076fc:	4904      	ldr	r1, [pc, #16]	; (8007710 <USBD_FS_ConfigStrDescriptor+0x34>)
 80076fe:	4805      	ldr	r0, [pc, #20]	; (8007714 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007700:	f7ff fdd4 	bl	80072ac <USBD_GetString>
  }
  return USBD_StrDesc;
 8007704:	4b02      	ldr	r3, [pc, #8]	; (8007710 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007706:	4618      	mov	r0, r3
 8007708:	3708      	adds	r7, #8
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
 800770e:	bf00      	nop
 8007710:	20001450 	.word	0x20001450
 8007714:	08007fdc 	.word	0x08007fdc

08007718 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
 800771e:	4603      	mov	r3, r0
 8007720:	6039      	str	r1, [r7, #0]
 8007722:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007724:	79fb      	ldrb	r3, [r7, #7]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d105      	bne.n	8007736 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800772a:	683a      	ldr	r2, [r7, #0]
 800772c:	4907      	ldr	r1, [pc, #28]	; (800774c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800772e:	4808      	ldr	r0, [pc, #32]	; (8007750 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007730:	f7ff fdbc 	bl	80072ac <USBD_GetString>
 8007734:	e004      	b.n	8007740 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007736:	683a      	ldr	r2, [r7, #0]
 8007738:	4904      	ldr	r1, [pc, #16]	; (800774c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800773a:	4805      	ldr	r0, [pc, #20]	; (8007750 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800773c:	f7ff fdb6 	bl	80072ac <USBD_GetString>
  }
  return USBD_StrDesc;
 8007740:	4b02      	ldr	r3, [pc, #8]	; (800774c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007742:	4618      	mov	r0, r3
 8007744:	3708      	adds	r7, #8
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	20001450 	.word	0x20001450
 8007750:	08007fe8 	.word	0x08007fe8

08007754 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
 800775a:	4603      	mov	r3, r0
 800775c:	6039      	str	r1, [r7, #0]
 800775e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	220c      	movs	r2, #12
 8007764:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8007766:	4b03      	ldr	r3, [pc, #12]	; (8007774 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8007768:	4618      	mov	r0, r3
 800776a:	370c      	adds	r7, #12
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr
 8007774:	200000e0 	.word	0x200000e0

08007778 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800777e:	4b0f      	ldr	r3, [pc, #60]	; (80077bc <Get_SerialNum+0x44>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007784:	4b0e      	ldr	r3, [pc, #56]	; (80077c0 <Get_SerialNum+0x48>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800778a:	4b0e      	ldr	r3, [pc, #56]	; (80077c4 <Get_SerialNum+0x4c>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007790:	68fa      	ldr	r2, [r7, #12]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	4413      	add	r3, r2
 8007796:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d009      	beq.n	80077b2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800779e:	2208      	movs	r2, #8
 80077a0:	4909      	ldr	r1, [pc, #36]	; (80077c8 <Get_SerialNum+0x50>)
 80077a2:	68f8      	ldr	r0, [r7, #12]
 80077a4:	f000 f814 	bl	80077d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80077a8:	2204      	movs	r2, #4
 80077aa:	4908      	ldr	r1, [pc, #32]	; (80077cc <Get_SerialNum+0x54>)
 80077ac:	68b8      	ldr	r0, [r7, #8]
 80077ae:	f000 f80f 	bl	80077d0 <IntToUnicode>
  }
}
 80077b2:	bf00      	nop
 80077b4:	3710      	adds	r7, #16
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
 80077ba:	bf00      	nop
 80077bc:	1fff7a10 	.word	0x1fff7a10
 80077c0:	1fff7a14 	.word	0x1fff7a14
 80077c4:	1fff7a18 	.word	0x1fff7a18
 80077c8:	200000f2 	.word	0x200000f2
 80077cc:	20000102 	.word	0x20000102

080077d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b087      	sub	sp, #28
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	4613      	mov	r3, r2
 80077dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80077de:	2300      	movs	r3, #0
 80077e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80077e2:	2300      	movs	r3, #0
 80077e4:	75fb      	strb	r3, [r7, #23]
 80077e6:	e027      	b.n	8007838 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	0f1b      	lsrs	r3, r3, #28
 80077ec:	2b09      	cmp	r3, #9
 80077ee:	d80b      	bhi.n	8007808 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	0f1b      	lsrs	r3, r3, #28
 80077f4:	b2da      	uxtb	r2, r3
 80077f6:	7dfb      	ldrb	r3, [r7, #23]
 80077f8:	005b      	lsls	r3, r3, #1
 80077fa:	4619      	mov	r1, r3
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	440b      	add	r3, r1
 8007800:	3230      	adds	r2, #48	; 0x30
 8007802:	b2d2      	uxtb	r2, r2
 8007804:	701a      	strb	r2, [r3, #0]
 8007806:	e00a      	b.n	800781e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	0f1b      	lsrs	r3, r3, #28
 800780c:	b2da      	uxtb	r2, r3
 800780e:	7dfb      	ldrb	r3, [r7, #23]
 8007810:	005b      	lsls	r3, r3, #1
 8007812:	4619      	mov	r1, r3
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	440b      	add	r3, r1
 8007818:	3237      	adds	r2, #55	; 0x37
 800781a:	b2d2      	uxtb	r2, r2
 800781c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	011b      	lsls	r3, r3, #4
 8007822:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007824:	7dfb      	ldrb	r3, [r7, #23]
 8007826:	005b      	lsls	r3, r3, #1
 8007828:	3301      	adds	r3, #1
 800782a:	68ba      	ldr	r2, [r7, #8]
 800782c:	4413      	add	r3, r2
 800782e:	2200      	movs	r2, #0
 8007830:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007832:	7dfb      	ldrb	r3, [r7, #23]
 8007834:	3301      	adds	r3, #1
 8007836:	75fb      	strb	r3, [r7, #23]
 8007838:	7dfa      	ldrb	r2, [r7, #23]
 800783a:	79fb      	ldrb	r3, [r7, #7]
 800783c:	429a      	cmp	r2, r3
 800783e:	d3d3      	bcc.n	80077e8 <IntToUnicode+0x18>
  }
}
 8007840:	bf00      	nop
 8007842:	bf00      	nop
 8007844:	371c      	adds	r7, #28
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr
	...

08007850 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b0a0      	sub	sp, #128	; 0x80
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007858:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800785c:	2200      	movs	r2, #0
 800785e:	601a      	str	r2, [r3, #0]
 8007860:	605a      	str	r2, [r3, #4]
 8007862:	609a      	str	r2, [r3, #8]
 8007864:	60da      	str	r2, [r3, #12]
 8007866:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007868:	f107 0310 	add.w	r3, r7, #16
 800786c:	225c      	movs	r2, #92	; 0x5c
 800786e:	2100      	movs	r1, #0
 8007870:	4618      	mov	r0, r3
 8007872:	f000 fb89 	bl	8007f88 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800787e:	d149      	bne.n	8007914 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8007880:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007884:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8007886:	2300      	movs	r3, #0
 8007888:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800788a:	f107 0310 	add.w	r3, r7, #16
 800788e:	4618      	mov	r0, r3
 8007890:	f7fa ff3e 	bl	8002710 <HAL_RCCEx_PeriphCLKConfig>
 8007894:	4603      	mov	r3, r0
 8007896:	2b00      	cmp	r3, #0
 8007898:	d001      	beq.n	800789e <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800789a:	f7f8 ff33 	bl	8000704 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800789e:	2300      	movs	r3, #0
 80078a0:	60fb      	str	r3, [r7, #12]
 80078a2:	4b1e      	ldr	r3, [pc, #120]	; (800791c <HAL_PCD_MspInit+0xcc>)
 80078a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078a6:	4a1d      	ldr	r2, [pc, #116]	; (800791c <HAL_PCD_MspInit+0xcc>)
 80078a8:	f043 0301 	orr.w	r3, r3, #1
 80078ac:	6313      	str	r3, [r2, #48]	; 0x30
 80078ae:	4b1b      	ldr	r3, [pc, #108]	; (800791c <HAL_PCD_MspInit+0xcc>)
 80078b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b2:	f003 0301 	and.w	r3, r3, #1
 80078b6:	60fb      	str	r3, [r7, #12]
 80078b8:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80078ba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80078be:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078c0:	2302      	movs	r3, #2
 80078c2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078c4:	2300      	movs	r3, #0
 80078c6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078c8:	2303      	movs	r3, #3
 80078ca:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80078cc:	230a      	movs	r3, #10
 80078ce:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078d0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80078d4:	4619      	mov	r1, r3
 80078d6:	4812      	ldr	r0, [pc, #72]	; (8007920 <HAL_PCD_MspInit+0xd0>)
 80078d8:	f7f9 f9a2 	bl	8000c20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80078dc:	4b0f      	ldr	r3, [pc, #60]	; (800791c <HAL_PCD_MspInit+0xcc>)
 80078de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078e0:	4a0e      	ldr	r2, [pc, #56]	; (800791c <HAL_PCD_MspInit+0xcc>)
 80078e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078e6:	6353      	str	r3, [r2, #52]	; 0x34
 80078e8:	2300      	movs	r3, #0
 80078ea:	60bb      	str	r3, [r7, #8]
 80078ec:	4b0b      	ldr	r3, [pc, #44]	; (800791c <HAL_PCD_MspInit+0xcc>)
 80078ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078f0:	4a0a      	ldr	r2, [pc, #40]	; (800791c <HAL_PCD_MspInit+0xcc>)
 80078f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80078f6:	6453      	str	r3, [r2, #68]	; 0x44
 80078f8:	4b08      	ldr	r3, [pc, #32]	; (800791c <HAL_PCD_MspInit+0xcc>)
 80078fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007900:	60bb      	str	r3, [r7, #8]
 8007902:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007904:	2200      	movs	r2, #0
 8007906:	2100      	movs	r1, #0
 8007908:	2043      	movs	r0, #67	; 0x43
 800790a:	f7f9 f952 	bl	8000bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800790e:	2043      	movs	r0, #67	; 0x43
 8007910:	f7f9 f96b 	bl	8000bea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007914:	bf00      	nop
 8007916:	3780      	adds	r7, #128	; 0x80
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}
 800791c:	40023800 	.word	0x40023800
 8007920:	40020000 	.word	0x40020000

08007924 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b082      	sub	sp, #8
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007938:	4619      	mov	r1, r3
 800793a:	4610      	mov	r0, r2
 800793c:	f7fe fb2d 	bl	8005f9a <USBD_LL_SetupStage>
}
 8007940:	bf00      	nop
 8007942:	3708      	adds	r7, #8
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	460b      	mov	r3, r1
 8007952:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800795a:	78fa      	ldrb	r2, [r7, #3]
 800795c:	6879      	ldr	r1, [r7, #4]
 800795e:	4613      	mov	r3, r2
 8007960:	00db      	lsls	r3, r3, #3
 8007962:	4413      	add	r3, r2
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	440b      	add	r3, r1
 8007968:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	78fb      	ldrb	r3, [r7, #3]
 8007970:	4619      	mov	r1, r3
 8007972:	f7fe fb67 	bl	8006044 <USBD_LL_DataOutStage>
}
 8007976:	bf00      	nop
 8007978:	3708      	adds	r7, #8
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}

0800797e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800797e:	b580      	push	{r7, lr}
 8007980:	b082      	sub	sp, #8
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
 8007986:	460b      	mov	r3, r1
 8007988:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007990:	78fa      	ldrb	r2, [r7, #3]
 8007992:	6879      	ldr	r1, [r7, #4]
 8007994:	4613      	mov	r3, r2
 8007996:	00db      	lsls	r3, r3, #3
 8007998:	4413      	add	r3, r2
 800799a:	009b      	lsls	r3, r3, #2
 800799c:	440b      	add	r3, r1
 800799e:	334c      	adds	r3, #76	; 0x4c
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	78fb      	ldrb	r3, [r7, #3]
 80079a4:	4619      	mov	r1, r3
 80079a6:	f7fe fc00 	bl	80061aa <USBD_LL_DataInStage>
}
 80079aa:	bf00      	nop
 80079ac:	3708      	adds	r7, #8
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}

080079b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079b2:	b580      	push	{r7, lr}
 80079b4:	b082      	sub	sp, #8
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80079c0:	4618      	mov	r0, r3
 80079c2:	f7fe fd34 	bl	800642e <USBD_LL_SOF>
}
 80079c6:	bf00      	nop
 80079c8:	3708      	adds	r7, #8
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}

080079ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079ce:	b580      	push	{r7, lr}
 80079d0:	b084      	sub	sp, #16
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80079d6:	2301      	movs	r3, #1
 80079d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	68db      	ldr	r3, [r3, #12]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d102      	bne.n	80079e8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80079e2:	2300      	movs	r3, #0
 80079e4:	73fb      	strb	r3, [r7, #15]
 80079e6:	e008      	b.n	80079fa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	68db      	ldr	r3, [r3, #12]
 80079ec:	2b02      	cmp	r3, #2
 80079ee:	d102      	bne.n	80079f6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80079f0:	2301      	movs	r3, #1
 80079f2:	73fb      	strb	r3, [r7, #15]
 80079f4:	e001      	b.n	80079fa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80079f6:	f7f8 fe85 	bl	8000704 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007a00:	7bfa      	ldrb	r2, [r7, #15]
 8007a02:	4611      	mov	r1, r2
 8007a04:	4618      	mov	r0, r3
 8007a06:	f7fe fcd4 	bl	80063b2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7fe fc7c 	bl	800630e <USBD_LL_Reset>
}
 8007a16:	bf00      	nop
 8007a18:	3710      	adds	r7, #16
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
	...

08007a20 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f7fe fccf 	bl	80063d2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	6812      	ldr	r2, [r2, #0]
 8007a42:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007a46:	f043 0301 	orr.w	r3, r3, #1
 8007a4a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6a1b      	ldr	r3, [r3, #32]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d005      	beq.n	8007a60 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007a54:	4b04      	ldr	r3, [pc, #16]	; (8007a68 <HAL_PCD_SuspendCallback+0x48>)
 8007a56:	691b      	ldr	r3, [r3, #16]
 8007a58:	4a03      	ldr	r2, [pc, #12]	; (8007a68 <HAL_PCD_SuspendCallback+0x48>)
 8007a5a:	f043 0306 	orr.w	r3, r3, #6
 8007a5e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007a60:	bf00      	nop
 8007a62:	3708      	adds	r7, #8
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}
 8007a68:	e000ed00 	.word	0xe000ed00

08007a6c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b082      	sub	sp, #8
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7fe fcbf 	bl	80063fe <USBD_LL_Resume>
}
 8007a80:	bf00      	nop
 8007a82:	3708      	adds	r7, #8
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b082      	sub	sp, #8
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	460b      	mov	r3, r1
 8007a92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007a9a:	78fa      	ldrb	r2, [r7, #3]
 8007a9c:	4611      	mov	r1, r2
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7fe fd17 	bl	80064d2 <USBD_LL_IsoOUTIncomplete>
}
 8007aa4:	bf00      	nop
 8007aa6:	3708      	adds	r7, #8
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b082      	sub	sp, #8
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007abe:	78fa      	ldrb	r2, [r7, #3]
 8007ac0:	4611      	mov	r1, r2
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f7fe fcd3 	bl	800646e <USBD_LL_IsoINIncomplete>
}
 8007ac8:	bf00      	nop
 8007aca:	3708      	adds	r7, #8
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f7fe fd29 	bl	8006536 <USBD_LL_DevConnected>
}
 8007ae4:	bf00      	nop
 8007ae6:	3708      	adds	r7, #8
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7fe fd26 	bl	800654c <USBD_LL_DevDisconnected>
}
 8007b00:	bf00      	nop
 8007b02:	3708      	adds	r7, #8
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b082      	sub	sp, #8
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d13c      	bne.n	8007b92 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007b18:	4a20      	ldr	r2, [pc, #128]	; (8007b9c <USBD_LL_Init+0x94>)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	4a1e      	ldr	r2, [pc, #120]	; (8007b9c <USBD_LL_Init+0x94>)
 8007b24:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007b28:	4b1c      	ldr	r3, [pc, #112]	; (8007b9c <USBD_LL_Init+0x94>)
 8007b2a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007b2e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8007b30:	4b1a      	ldr	r3, [pc, #104]	; (8007b9c <USBD_LL_Init+0x94>)
 8007b32:	2206      	movs	r2, #6
 8007b34:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007b36:	4b19      	ldr	r3, [pc, #100]	; (8007b9c <USBD_LL_Init+0x94>)
 8007b38:	2202      	movs	r2, #2
 8007b3a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007b3c:	4b17      	ldr	r3, [pc, #92]	; (8007b9c <USBD_LL_Init+0x94>)
 8007b3e:	2200      	movs	r2, #0
 8007b40:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007b42:	4b16      	ldr	r3, [pc, #88]	; (8007b9c <USBD_LL_Init+0x94>)
 8007b44:	2202      	movs	r2, #2
 8007b46:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007b48:	4b14      	ldr	r3, [pc, #80]	; (8007b9c <USBD_LL_Init+0x94>)
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007b4e:	4b13      	ldr	r3, [pc, #76]	; (8007b9c <USBD_LL_Init+0x94>)
 8007b50:	2200      	movs	r2, #0
 8007b52:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007b54:	4b11      	ldr	r3, [pc, #68]	; (8007b9c <USBD_LL_Init+0x94>)
 8007b56:	2200      	movs	r2, #0
 8007b58:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007b5a:	4b10      	ldr	r3, [pc, #64]	; (8007b9c <USBD_LL_Init+0x94>)
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007b60:	4b0e      	ldr	r3, [pc, #56]	; (8007b9c <USBD_LL_Init+0x94>)
 8007b62:	2200      	movs	r2, #0
 8007b64:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007b66:	480d      	ldr	r0, [pc, #52]	; (8007b9c <USBD_LL_Init+0x94>)
 8007b68:	f7f9 f9ee 	bl	8000f48 <HAL_PCD_Init>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d001      	beq.n	8007b76 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007b72:	f7f8 fdc7 	bl	8000704 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007b76:	2180      	movs	r1, #128	; 0x80
 8007b78:	4808      	ldr	r0, [pc, #32]	; (8007b9c <USBD_LL_Init+0x94>)
 8007b7a:	f7fa fc7a 	bl	8002472 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007b7e:	2240      	movs	r2, #64	; 0x40
 8007b80:	2100      	movs	r1, #0
 8007b82:	4806      	ldr	r0, [pc, #24]	; (8007b9c <USBD_LL_Init+0x94>)
 8007b84:	f7fa fc2e 	bl	80023e4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007b88:	2280      	movs	r2, #128	; 0x80
 8007b8a:	2101      	movs	r1, #1
 8007b8c:	4803      	ldr	r0, [pc, #12]	; (8007b9c <USBD_LL_Init+0x94>)
 8007b8e:	f7fa fc29 	bl	80023e4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007b92:	2300      	movs	r3, #0
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3708      	adds	r7, #8
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}
 8007b9c:	20001650 	.word	0x20001650

08007ba0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bac:	2300      	movs	r3, #0
 8007bae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f7f9 faea 	bl	8001190 <HAL_PCD_Start>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bc0:	7bfb      	ldrb	r3, [r7, #15]
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f000 f990 	bl	8007ee8 <USBD_Get_USB_Status>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bcc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3710      	adds	r7, #16
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}

08007bd6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007bd6:	b580      	push	{r7, lr}
 8007bd8:	b084      	sub	sp, #16
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
 8007bde:	4608      	mov	r0, r1
 8007be0:	4611      	mov	r1, r2
 8007be2:	461a      	mov	r2, r3
 8007be4:	4603      	mov	r3, r0
 8007be6:	70fb      	strb	r3, [r7, #3]
 8007be8:	460b      	mov	r3, r1
 8007bea:	70bb      	strb	r3, [r7, #2]
 8007bec:	4613      	mov	r3, r2
 8007bee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007bfe:	78bb      	ldrb	r3, [r7, #2]
 8007c00:	883a      	ldrh	r2, [r7, #0]
 8007c02:	78f9      	ldrb	r1, [r7, #3]
 8007c04:	f7f9 ffe8 	bl	8001bd8 <HAL_PCD_EP_Open>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c0c:	7bfb      	ldrb	r3, [r7, #15]
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f000 f96a 	bl	8007ee8 <USBD_Get_USB_Status>
 8007c14:	4603      	mov	r3, r0
 8007c16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c18:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b084      	sub	sp, #16
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c32:	2300      	movs	r3, #0
 8007c34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007c3c:	78fa      	ldrb	r2, [r7, #3]
 8007c3e:	4611      	mov	r1, r2
 8007c40:	4618      	mov	r0, r3
 8007c42:	f7fa f831 	bl	8001ca8 <HAL_PCD_EP_Close>
 8007c46:	4603      	mov	r3, r0
 8007c48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c4a:	7bfb      	ldrb	r3, [r7, #15]
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f000 f94b 	bl	8007ee8 <USBD_Get_USB_Status>
 8007c52:	4603      	mov	r3, r0
 8007c54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c56:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3710      	adds	r7, #16
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	460b      	mov	r3, r1
 8007c6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c70:	2300      	movs	r3, #0
 8007c72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007c7a:	78fa      	ldrb	r2, [r7, #3]
 8007c7c:	4611      	mov	r1, r2
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7fa f909 	bl	8001e96 <HAL_PCD_EP_SetStall>
 8007c84:	4603      	mov	r3, r0
 8007c86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c88:	7bfb      	ldrb	r3, [r7, #15]
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f000 f92c 	bl	8007ee8 <USBD_Get_USB_Status>
 8007c90:	4603      	mov	r3, r0
 8007c92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c94:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3710      	adds	r7, #16
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}

08007c9e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c9e:	b580      	push	{r7, lr}
 8007ca0:	b084      	sub	sp, #16
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
 8007ca6:	460b      	mov	r3, r1
 8007ca8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007caa:	2300      	movs	r3, #0
 8007cac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007cb8:	78fa      	ldrb	r2, [r7, #3]
 8007cba:	4611      	mov	r1, r2
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f7fa f94e 	bl	8001f5e <HAL_PCD_EP_ClrStall>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cc6:	7bfb      	ldrb	r3, [r7, #15]
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f000 f90d 	bl	8007ee8 <USBD_Get_USB_Status>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cd2:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3710      	adds	r7, #16
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b085      	sub	sp, #20
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007cee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007cf0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	da0b      	bge.n	8007d10 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007cf8:	78fb      	ldrb	r3, [r7, #3]
 8007cfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007cfe:	68f9      	ldr	r1, [r7, #12]
 8007d00:	4613      	mov	r3, r2
 8007d02:	00db      	lsls	r3, r3, #3
 8007d04:	4413      	add	r3, r2
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	440b      	add	r3, r1
 8007d0a:	333e      	adds	r3, #62	; 0x3e
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	e00b      	b.n	8007d28 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007d10:	78fb      	ldrb	r3, [r7, #3]
 8007d12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d16:	68f9      	ldr	r1, [r7, #12]
 8007d18:	4613      	mov	r3, r2
 8007d1a:	00db      	lsls	r3, r3, #3
 8007d1c:	4413      	add	r3, r2
 8007d1e:	009b      	lsls	r3, r3, #2
 8007d20:	440b      	add	r3, r1
 8007d22:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007d26:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3714      	adds	r7, #20
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b084      	sub	sp, #16
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d40:	2300      	movs	r3, #0
 8007d42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d44:	2300      	movs	r3, #0
 8007d46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007d4e:	78fa      	ldrb	r2, [r7, #3]
 8007d50:	4611      	mov	r1, r2
 8007d52:	4618      	mov	r0, r3
 8007d54:	f7f9 ff1b 	bl	8001b8e <HAL_PCD_SetAddress>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d5c:	7bfb      	ldrb	r3, [r7, #15]
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f000 f8c2 	bl	8007ee8 <USBD_Get_USB_Status>
 8007d64:	4603      	mov	r3, r0
 8007d66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d68:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3710      	adds	r7, #16
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007d72:	b580      	push	{r7, lr}
 8007d74:	b086      	sub	sp, #24
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	60f8      	str	r0, [r7, #12]
 8007d7a:	607a      	str	r2, [r7, #4]
 8007d7c:	603b      	str	r3, [r7, #0]
 8007d7e:	460b      	mov	r3, r1
 8007d80:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d82:	2300      	movs	r3, #0
 8007d84:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d86:	2300      	movs	r3, #0
 8007d88:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007d90:	7af9      	ldrb	r1, [r7, #11]
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	f7fa f834 	bl	8001e02 <HAL_PCD_EP_Transmit>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d9e:	7dfb      	ldrb	r3, [r7, #23]
 8007da0:	4618      	mov	r0, r3
 8007da2:	f000 f8a1 	bl	8007ee8 <USBD_Get_USB_Status>
 8007da6:	4603      	mov	r3, r0
 8007da8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007daa:	7dbb      	ldrb	r3, [r7, #22]
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3718      	adds	r7, #24
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b086      	sub	sp, #24
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	607a      	str	r2, [r7, #4]
 8007dbe:	603b      	str	r3, [r7, #0]
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007dd2:	7af9      	ldrb	r1, [r7, #11]
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	687a      	ldr	r2, [r7, #4]
 8007dd8:	f7f9 ffb0 	bl	8001d3c <HAL_PCD_EP_Receive>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007de0:	7dfb      	ldrb	r3, [r7, #23]
 8007de2:	4618      	mov	r0, r3
 8007de4:	f000 f880 	bl	8007ee8 <USBD_Get_USB_Status>
 8007de8:	4603      	mov	r3, r0
 8007dea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007dec:	7dbb      	ldrb	r3, [r7, #22]
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3718      	adds	r7, #24
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007df6:	b580      	push	{r7, lr}
 8007df8:	b082      	sub	sp, #8
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
 8007dfe:	460b      	mov	r3, r1
 8007e00:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007e08:	78fa      	ldrb	r2, [r7, #3]
 8007e0a:	4611      	mov	r1, r2
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f7f9 ffe0 	bl	8001dd2 <HAL_PCD_EP_GetRxCount>
 8007e12:	4603      	mov	r3, r0
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3708      	adds	r7, #8
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	460b      	mov	r3, r1
 8007e26:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8007e28:	78fb      	ldrb	r3, [r7, #3]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d002      	beq.n	8007e34 <HAL_PCDEx_LPM_Callback+0x18>
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d01f      	beq.n	8007e72 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8007e32:	e03b      	b.n	8007eac <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6a1b      	ldr	r3, [r3, #32]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d007      	beq.n	8007e4c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8007e3c:	f7f8 fb72 	bl	8000524 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007e40:	4b1c      	ldr	r3, [pc, #112]	; (8007eb4 <HAL_PCDEx_LPM_Callback+0x98>)
 8007e42:	691b      	ldr	r3, [r3, #16]
 8007e44:	4a1b      	ldr	r2, [pc, #108]	; (8007eb4 <HAL_PCDEx_LPM_Callback+0x98>)
 8007e46:	f023 0306 	bic.w	r3, r3, #6
 8007e4a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	6812      	ldr	r2, [r2, #0]
 8007e5a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007e5e:	f023 0301 	bic.w	r3, r3, #1
 8007e62:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f7fe fac7 	bl	80063fe <USBD_LL_Resume>
    break;
 8007e70:	e01c      	b.n	8007eac <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	6812      	ldr	r2, [r2, #0]
 8007e80:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007e84:	f043 0301 	orr.w	r3, r3, #1
 8007e88:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007e90:	4618      	mov	r0, r3
 8007e92:	f7fe fa9e 	bl	80063d2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6a1b      	ldr	r3, [r3, #32]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d005      	beq.n	8007eaa <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007e9e:	4b05      	ldr	r3, [pc, #20]	; (8007eb4 <HAL_PCDEx_LPM_Callback+0x98>)
 8007ea0:	691b      	ldr	r3, [r3, #16]
 8007ea2:	4a04      	ldr	r2, [pc, #16]	; (8007eb4 <HAL_PCDEx_LPM_Callback+0x98>)
 8007ea4:	f043 0306 	orr.w	r3, r3, #6
 8007ea8:	6113      	str	r3, [r2, #16]
    break;
 8007eaa:	bf00      	nop
}
 8007eac:	bf00      	nop
 8007eae:	3708      	adds	r7, #8
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}
 8007eb4:	e000ed00 	.word	0xe000ed00

08007eb8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007ec0:	4b03      	ldr	r3, [pc, #12]	; (8007ed0 <USBD_static_malloc+0x18>)
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	370c      	adds	r7, #12
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr
 8007ece:	bf00      	nop
 8007ed0:	20001b5c 	.word	0x20001b5c

08007ed4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]

}
 8007edc:	bf00      	nop
 8007ede:	370c      	adds	r7, #12
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr

08007ee8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b085      	sub	sp, #20
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	4603      	mov	r3, r0
 8007ef0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007ef6:	79fb      	ldrb	r3, [r7, #7]
 8007ef8:	2b03      	cmp	r3, #3
 8007efa:	d817      	bhi.n	8007f2c <USBD_Get_USB_Status+0x44>
 8007efc:	a201      	add	r2, pc, #4	; (adr r2, 8007f04 <USBD_Get_USB_Status+0x1c>)
 8007efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f02:	bf00      	nop
 8007f04:	08007f15 	.word	0x08007f15
 8007f08:	08007f1b 	.word	0x08007f1b
 8007f0c:	08007f21 	.word	0x08007f21
 8007f10:	08007f27 	.word	0x08007f27
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007f14:	2300      	movs	r3, #0
 8007f16:	73fb      	strb	r3, [r7, #15]
    break;
 8007f18:	e00b      	b.n	8007f32 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007f1a:	2303      	movs	r3, #3
 8007f1c:	73fb      	strb	r3, [r7, #15]
    break;
 8007f1e:	e008      	b.n	8007f32 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007f20:	2301      	movs	r3, #1
 8007f22:	73fb      	strb	r3, [r7, #15]
    break;
 8007f24:	e005      	b.n	8007f32 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007f26:	2303      	movs	r3, #3
 8007f28:	73fb      	strb	r3, [r7, #15]
    break;
 8007f2a:	e002      	b.n	8007f32 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007f2c:	2303      	movs	r3, #3
 8007f2e:	73fb      	strb	r3, [r7, #15]
    break;
 8007f30:	bf00      	nop
  }
  return usb_status;
 8007f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3714      	adds	r7, #20
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <__libc_init_array>:
 8007f40:	b570      	push	{r4, r5, r6, lr}
 8007f42:	4d0d      	ldr	r5, [pc, #52]	; (8007f78 <__libc_init_array+0x38>)
 8007f44:	4c0d      	ldr	r4, [pc, #52]	; (8007f7c <__libc_init_array+0x3c>)
 8007f46:	1b64      	subs	r4, r4, r5
 8007f48:	10a4      	asrs	r4, r4, #2
 8007f4a:	2600      	movs	r6, #0
 8007f4c:	42a6      	cmp	r6, r4
 8007f4e:	d109      	bne.n	8007f64 <__libc_init_array+0x24>
 8007f50:	4d0b      	ldr	r5, [pc, #44]	; (8007f80 <__libc_init_array+0x40>)
 8007f52:	4c0c      	ldr	r4, [pc, #48]	; (8007f84 <__libc_init_array+0x44>)
 8007f54:	f000 f820 	bl	8007f98 <_init>
 8007f58:	1b64      	subs	r4, r4, r5
 8007f5a:	10a4      	asrs	r4, r4, #2
 8007f5c:	2600      	movs	r6, #0
 8007f5e:	42a6      	cmp	r6, r4
 8007f60:	d105      	bne.n	8007f6e <__libc_init_array+0x2e>
 8007f62:	bd70      	pop	{r4, r5, r6, pc}
 8007f64:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f68:	4798      	blx	r3
 8007f6a:	3601      	adds	r6, #1
 8007f6c:	e7ee      	b.n	8007f4c <__libc_init_array+0xc>
 8007f6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f72:	4798      	blx	r3
 8007f74:	3601      	adds	r6, #1
 8007f76:	e7f2      	b.n	8007f5e <__libc_init_array+0x1e>
 8007f78:	08008018 	.word	0x08008018
 8007f7c:	08008018 	.word	0x08008018
 8007f80:	08008018 	.word	0x08008018
 8007f84:	0800801c 	.word	0x0800801c

08007f88 <memset>:
 8007f88:	4402      	add	r2, r0
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d100      	bne.n	8007f92 <memset+0xa>
 8007f90:	4770      	bx	lr
 8007f92:	f803 1b01 	strb.w	r1, [r3], #1
 8007f96:	e7f9      	b.n	8007f8c <memset+0x4>

08007f98 <_init>:
 8007f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f9a:	bf00      	nop
 8007f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f9e:	bc08      	pop	{r3}
 8007fa0:	469e      	mov	lr, r3
 8007fa2:	4770      	bx	lr

08007fa4 <_fini>:
 8007fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fa6:	bf00      	nop
 8007fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007faa:	bc08      	pop	{r3}
 8007fac:	469e      	mov	lr, r3
 8007fae:	4770      	bx	lr
